LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A556FFE0D7E87D0F4D289AEDC7C5DFA6EC30C62BF726DF5ACFFB641598877CB9
LOAD:0000000000000000 ; Input MD5    : 521D02DC2D6B3BB595B9013B180E0867
LOAD:0000000000000000 ; Input CRC32  : EF35BB2E
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/du
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'mbscasecmp.c'
LOAD:0000000000000000 ; Source File : 'du.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'argv-iter.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'di-set.c'
LOAD:0000000000000000 ; Source File : 'exclude.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fprintftime.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'ino-map.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'mbchar.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'strnlen1.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'xstrtol-error.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'mountlist.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 0C63C8h              ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 27480h               ; Size in file image
LOAD:00000000000000D8                 dq 27480h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 27670h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 227670h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 0A30h                ; Size in file image
LOAD:0000000000000110                 dq 0C98h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 27A98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 227A98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 2306Ch               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 2306Ch               ; Physical address
LOAD:00000000000001B0                 dq 98Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 98Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 27670h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 227670h              ; Physical address
LOAD:0000000000000220                 dq 990h                 ; Size in file image
LOAD:0000000000000228                 dq 990h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0A7h, 1Dh, 8Dh, 0F2h, 7Eh, 7Fh, 1Dh, 98h, 0BEh, 34h ; Desc
LOAD:0000000000000284                 db 79h, 3Ch, 14h, 23h, 0CAh, 0D6h, 73h, 15h, 28h, 8
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 6Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 6Dh, 6Eh, 74h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_DF0, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUflow - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aGetenv - offset byte_DF0, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_DF0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aEndmntent - offset byte_DF0, 12h, 0, 0, \ ; "endmntent"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_DF0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrncmp - offset byte_DF0, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aItmDeregistert - offset byte_DF0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aLocaltimeR - offset byte_DF0, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aExit - offset byte_DF0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aStrcpy - offset byte_DF0, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFpending - offset byte_DF0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aQsort - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:0000000000000430                            0>
LOAD:0000000000000448                 Elf64_Sym <offset aIswcntrl - offset byte_DF0, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aLocaleconv - offset byte_DF0, 12h, 0, 0, \ ; "localeconv"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFcntl - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000478                            0>
LOAD:0000000000000490                 Elf64_Sym <offset aUnsetenv+2 - offset byte_DF0, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_DF0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrtolInternal - offset byte_DF0, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aIswctype - offset byte_DF0, 12h, 0, 0, \ ; "iswctype"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFclose - offset byte_DF0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aBindtextdomain - offset byte_DF0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aDcgettext - offset byte_DF0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_DF0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrlen - offset byte_DF0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLxstat - offset byte_DF0, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aOpenat - offset byte_DF0, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStackChkFail - offset byte_DF0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGetoptLong - offset byte_DF0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMbrtowc - offset byte_DF0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aDup2 - offset byte_DF0, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000005E0                            0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrchr - offset byte_DF0, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFxstatat - offset byte_DF0, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aOverflow - offset byte_DF0, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrrchr - offset byte_DF0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGmtimeR - offset byte_DF0, 12h, 0, 0, \ ; "gmtime_r"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aLseek - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aAssertFail - offset byte_DF0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aStrtoulInterna - offset byte_DF0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFnmatch - offset byte_DF0, 12h, 0, 0, \ ; "fnmatch"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMemset - offset byte_DF0, 12h, 0, 0, \ ; "memset"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreopen - offset byte_DF0, 12h, 0, 0, \ ; "freopen"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFclose+1 - offset byte_DF0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aClosedir - offset byte_DF0, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFputc - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "fputc"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aMemchr - offset byte_DF0, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aLibcStartMain - offset byte_DF0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMemcmp - offset byte_DF0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aIswctype+2 - offset byte_DF0, 12h, 0, 0, \ ; "wctype"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFputsUnlocked - offset byte_DF0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCalloc - offset byte_DF0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aGetdelim - offset byte_DF0, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStrcmp - offset byte_DF0, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aDirfd - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000808                            0>
LOAD:0000000000000820                 Elf64_Sym <offset aMemcpyChk - offset byte_DF0, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFeof - offset byte_DF0, 12h, 0, 0, offset dword_0, \ ; "feof"
LOAD:0000000000000838                            0>
LOAD:0000000000000850                 Elf64_Sym <offset aGmonStart - offset byte_DF0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aMemcpy - offset byte_DF0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aTzset - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aFileno - offset byte_DF0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aXstat - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000008B0                            0>
LOAD:00000000000008C8                 Elf64_Sym <offset aReaddir - offset byte_DF0, 12h, 0, 0, \ ; "readdir"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aWcwidth - offset byte_DF0, 12h, 0, 0, \ ; "wcwidth"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aIswalnum - offset byte_DF0, 12h, 0, 0, \ ; "iswalnum"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aMalloc - offset byte_DF0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aWcrtomb - offset byte_DF0, 12h, 0, 0, \ ; "wcrtomb"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFflush - offset byte_DF0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aGetmntent - offset byte_DF0, 12h, 0, 0, \ ; "getmntent"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aSetmntent - offset byte_DF0, 12h, 0, 0, \ ; "setmntent"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aNlLanginfo - offset byte_DF0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aFxstat - offset byte_DF0, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aSscanf - offset byte_DF0, 12h, 0, 0, \ ; "sscanf"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aMktime - offset byte_DF0, 12h, 0, 0, \ ; "mktime"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aFreading - offset byte_DF0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aFchdir - offset byte_DF0, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aRealloc - offset byte_DF0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aSetlocale - offset byte_DF0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aPrintfChk - offset byte_DF0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aTimegm - offset byte_DF0, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aStrftime - offset byte_DF0, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aBtowc - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000A90                            0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aMemmove - offset byte_DF0, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aError - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000AC0                            0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aFreopen+3 - offset byte_DF0, 12h, 0, 0, \ ; "open"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aFseeko - offset byte_DF0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aFopen - offset byte_DF0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000B08                            0>
LOAD:0000000000000B20                 Elf64_Sym <offset aTowlower - offset byte_DF0, 12h, 0, 0, \ ; "towlower"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aFdopendir - offset byte_DF0, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aUnsetenv - offset byte_DF0, 12h, 0, 0, \ ; "unsetenv"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aTowupper - offset byte_DF0, 12h, 0, 0, \ ; "towupper"
LOAD:0000000000000B68                            offset dword_0, 0>
LOAD:0000000000000B80                 Elf64_Sym <offset aStrtoul - offset byte_DF0, 12h, 0, 0, \ ; "strtoul"
LOAD:0000000000000B80                            offset dword_0, 0>
LOAD:0000000000000B98                 Elf64_Sym <offset aFstatfs - offset byte_DF0, 12h, 0, 0, \ ; "fstatfs"
LOAD:0000000000000B98                            offset dword_0, 0>
LOAD:0000000000000BB0                 Elf64_Sym <offset aCxaAtexit - offset byte_DF0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000BB0                            offset dword_0, 0>
LOAD:0000000000000BC8                 Elf64_Sym <offset aExit+1 - offset byte_DF0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000BC8                            offset dword_0, 0>
LOAD:0000000000000BE0                 Elf64_Sym <offset aFwrite - offset byte_DF0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000BE0                            offset dword_0, 0>
LOAD:0000000000000BF8                 Elf64_Sym <offset aFprintfChk - offset byte_DF0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000BF8                            offset dword_0, 0>
LOAD:0000000000000C10                 Elf64_Sym <offset aItmRegistertmc - offset byte_DF0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000C10                            offset dword_0, 0>
LOAD:0000000000000C28                 Elf64_Sym <offset aFflushUnlocked - offset byte_DF0, 12h, 0, 0, \ ; "fflush_unlocked"
LOAD:0000000000000C28                            offset dword_0, 0>
LOAD:0000000000000C40                 Elf64_Sym <offset aMbsinit - offset byte_DF0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000C40                            offset dword_0, 0>
LOAD:0000000000000C58                 Elf64_Sym <offset aIswprint - offset byte_DF0, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000C58                            offset dword_0, 0>
LOAD:0000000000000C70                 Elf64_Sym <offset aHasmntopt - offset byte_DF0, 12h, 0, 0, \ ; "hasmntopt"
LOAD:0000000000000C70                            offset dword_0, 0>
LOAD:0000000000000C88                 Elf64_Sym <offset aCxaFinalize - offset byte_DF0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000C88                            offset dword_0, 0>
LOAD:0000000000000CA0                 Elf64_Sym <offset aGetdelim+2 - offset byte_DF0, 12h, 0, 0, \ ; "getdelim"
LOAD:0000000000000CA0                            offset dword_0, 0>
LOAD:0000000000000CB8                 Elf64_Sym <offset aStrstr - offset byte_DF0, 12h, 0, 0, \ ; "strstr"
LOAD:0000000000000CB8                            offset dword_0, 0>
LOAD:0000000000000CD0                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_DF0, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000CD0                            offset dword_0, 0>
LOAD:0000000000000CE8                 Elf64_Sym <offset aCtypeBLoc - offset byte_DF0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000CE8                            offset dword_0, 0>
LOAD:0000000000000D00                 Elf64_Sym <offset aSprintfChk - offset byte_DF0, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000D00                            offset dword_0, 0>
LOAD:0000000000000D18                 Elf64_Sym <offset aStdout - offset byte_DF0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000D18                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000D30                 Elf64_Sym <offset aProgname - offset byte_DF0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000D30                            offset __bss_start, 8>
LOAD:0000000000000D48                 Elf64_Sym <offset aStdin - offset byte_DF0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000D48                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000D60                 Elf64_Sym <offset aProgramInvocat - offset byte_DF0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000D60                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000D78                 Elf64_Sym <offset aPrognameFull - offset byte_DF0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000D78                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000D90                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_DF0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000D90                            offset __bss_start, 8>
LOAD:0000000000000DA8                 Elf64_Sym <offset aStderr - offset byte_DF0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000DA8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000DC0                 Elf64_Sym <offset aOptind - offset byte_DF0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000DC0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000DD8                 Elf64_Sym <offset aOptarg - offset byte_DF0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000DD8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000DF0 ; ELF String Table
LOAD:0000000000000DF0 byte_DF0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000DF0                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000DF1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001388↓o
LOAD:0000000000000DFB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000E02 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000E09 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000E12 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000E1F aFnmatch        db 'fnmatch',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000E27 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000E2F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000E39 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000E41 aTowlower       db 'towlower',0         ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000E4A aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000E50 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000E58 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000DC0↑o
LOAD:0000000000000E5F aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000E67 aFflushUnlocked db 'fflush_unlocked',0  ; DATA XREF: LOAD:0000000000000C28↑o
LOAD:0000000000000E77 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000E81 aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000E89 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000E92 aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000E99 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000E9F aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000EB0 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000EB9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000C58↑o
LOAD:0000000000000EC2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000ECA aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:0000000000000ED2 aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000ED8 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000000EE1 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000EE7 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000D48↑o
LOAD:0000000000000EED aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000EED                                         ; LOAD:0000000000000BC8↑o
LOAD:0000000000000EF3 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000EFA aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000EFA                                         ; DATA XREF: LOAD:0000000000000D60↑o
LOAD:0000000000000F12 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000F1B aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000F29 aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000F32 aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000F3E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000F3E                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000F55 aSetmntent      db 'setmntent',0        ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000F5F aFeof           db 'feof',0             ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000F64 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000F6B aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000F72 aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000F72                                         ; LOAD:0000000000000790↑o
LOAD:0000000000000F7B aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000F82 aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000F8D aStrstr         db 'strstr',0           ; DATA XREF: LOAD:0000000000000CB8↑o
LOAD:0000000000000F94 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000FA5 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000FAC aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000FB1 aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000FB1                                         ; LOAD:0000000000000490↑o
LOAD:0000000000000FBA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000BF8↑o
LOAD:0000000000000FC8 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000D18↑o
LOAD:0000000000000FCF aFputc          db 'fputc',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000FD5 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000FDB aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000FE2 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000FE2                                         ; LOAD:0000000000000700↑o
LOAD:0000000000000FE9 aGetmntent      db 'getmntent',0        ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000FF3 aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000FF3                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000001005 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:000000000000100D aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000001014 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:000000000000101E aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000001025 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000C40↑o
LOAD:000000000000102D aTzset          db 'tzset',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000001033 aUflow          db '__uflow',0          ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000103B aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000001047 aHasmntopt      db 'hasmntopt',0        ; DATA XREF: LOAD:0000000000000C70↑o
LOAD:0000000000001051 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000CE8↑o
LOAD:000000000000105F aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000001066 aSscanf         db 'sscanf',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:000000000000106D aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000DD8↑o
LOAD:0000000000001074 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:000000000000107F aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000DA8↑o
LOAD:0000000000001086 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:000000000000108E aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000109A aFreopen        db 'freopen',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:000000000000109A                                         ; LOAD:0000000000000AD8↑o
LOAD:00000000000010A2 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:00000000000010AB aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000010B2 aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000010B2                                         ; LOAD:0000000000000CA0↑o
LOAD:00000000000010BD aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:00000000000010C4 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:00000000000010D1 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000010DC aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000010E3 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000010EC aEndmntent      db 'endmntent',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000010F6 aMktime         db 'mktime',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:00000000000010FD aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000010FD                                         ; DATA XREF: LOAD:0000000000000D90↑o
LOAD:000000000000111B aQsort          db 'qsort',0            ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000001121 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000001121                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000001135 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000001135                                         ; DATA XREF: LOAD:0000000000000CD0↑o
LOAD:0000000000001149 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000C88↑o
LOAD:0000000000001158 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000478↑o
LOAD:000000000000115E aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000D00↑o
LOAD:000000000000116C aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000001173 aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:000000000000117B aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000001183 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000001183                                         ; LOAD:00000000000004A8↑o
LOAD:0000000000001192 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000610↑o
LOAD:000000000000119D aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000011A4 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000011A4                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000011B6 aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000808↑o
LOAD:00000000000011BC aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:00000000000011C3 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000011CE aStrtoulInterna db '__strtoul_internal',0
LOAD:00000000000011CE                                         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000011E1 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000011F0 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000011F5 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000D30↑o
LOAD:0000000000001200 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000D78↑o
LOAD:0000000000001210 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000BB0↑o
LOAD:000000000000121D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001398↓o
LOAD:0000000000001228 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000013A8↓o
LOAD:0000000000001234 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000013B8↓o
LOAD:000000000000123E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000013C8↓o
LOAD:000000000000124A aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:00000000000013D8↓o
LOAD:0000000000001254 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000001254                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000001270 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000850↑o
LOAD:000000000000127F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:000000000000127F                                         ; DATA XREF: LOAD:0000000000000C10↑o
LOAD:0000000000001299                 align 2
LOAD:000000000000129A ; ELF GNU Symbol Version Table
LOAD:000000000000129A                 dw 0
LOAD:000000000000129C                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:000000000000129E                 dw 3                    ; __uflow@@GLIBC_2.2.5
LOAD:00000000000012A0                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:00000000000012A2                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:00000000000012A4                 dw 3                    ; endmntent@@GLIBC_2.2.5
LOAD:00000000000012A6                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:00000000000012A8                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:00000000000012AA                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:00000000000012AC                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:00000000000012AE                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:00000000000012B0                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:00000000000012B2                 dw 3                    ; strcpy@@GLIBC_2.2.5
LOAD:00000000000012B4                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:00000000000012B6                 dw 3                    ; qsort@@GLIBC_2.2.5
LOAD:00000000000012B8                 dw 3                    ; iswcntrl@@GLIBC_2.2.5
LOAD:00000000000012BA                 dw 3                    ; localeconv@@GLIBC_2.2.5
LOAD:00000000000012BC                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:00000000000012BE                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:00000000000012C0                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:00000000000012C2                 dw 3                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:00000000000012C4                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:00000000000012C6                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:00000000000012C8                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:00000000000012CA                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:00000000000012CC                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:00000000000012CE                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:00000000000012D0                 dw 3                    ; __lxstat@@GLIBC_2.2.5
LOAD:00000000000012D2                 dw 4                    ; openat@@GLIBC_2.4
LOAD:00000000000012D4                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:00000000000012D6                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:00000000000012D8                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:00000000000012DA                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:00000000000012DC                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:00000000000012DE                 dw 4                    ; __fxstatat@@GLIBC_2.4
LOAD:00000000000012E0                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:00000000000012E2                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:00000000000012E4                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:00000000000012E6                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:00000000000012E8                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:00000000000012EA                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:00000000000012EC                 dw 3                    ; fnmatch@@GLIBC_2.2.5
LOAD:00000000000012EE                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:00000000000012F0                 dw 3                    ; freopen@@GLIBC_2.2.5
LOAD:00000000000012F2                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:00000000000012F4                 dw 3                    ; closedir@@GLIBC_2.2.5
LOAD:00000000000012F6                 dw 3                    ; fputc@@GLIBC_2.2.5
LOAD:00000000000012F8                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:00000000000012FA                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:00000000000012FC                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:00000000000012FE                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000001300                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001302                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001304                 dw 3                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000001306                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000001308                 dw 3                    ; dirfd@@GLIBC_2.2.5
LOAD:000000000000130A                 dw 5                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:000000000000130C                 dw 3                    ; feof@@GLIBC_2.2.5
LOAD:000000000000130E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001310                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000001312                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:0000000000001314                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000001316                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000001318                 dw 3                    ; readdir@@GLIBC_2.2.5
LOAD:000000000000131A                 dw 3                    ; wcwidth@@GLIBC_2.2.5
LOAD:000000000000131C                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:000000000000131E                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000001320                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000001322                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000001324                 dw 3                    ; getmntent@@GLIBC_2.2.5
LOAD:0000000000001326                 dw 3                    ; setmntent@@GLIBC_2.2.5
LOAD:0000000000001328                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:000000000000132A                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:000000000000132C                 dw 3                    ; sscanf@@GLIBC_2.2.5
LOAD:000000000000132E                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000001330                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000001332                 dw 3                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000001334                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000001336                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000001338                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:000000000000133A                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:000000000000133C                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:000000000000133E                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000001340                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000001342                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000001344                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000001346                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000001348                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:000000000000134A                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:000000000000134C                 dw 4                    ; fdopendir@@GLIBC_2.4
LOAD:000000000000134E                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000001350                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000001352                 dw 3                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000001354                 dw 3                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000001356                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000001358                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:000000000000135A                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:000000000000135C                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:000000000000135E                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000001360                 dw 3                    ; fflush_unlocked@@GLIBC_2.2.5
LOAD:0000000000001362                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000001364                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000001366                 dw 3                    ; hasmntopt@@GLIBC_2.2.5
LOAD:0000000000001368                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:000000000000136A                 dw 3                    ; getdelim@@GLIBC_2.2.5
LOAD:000000000000136C                 dw 3                    ; strstr@@GLIBC_2.2.5
LOAD:000000000000136E                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000001370                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000001372                 dw 5                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001374                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000001376                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000001378                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:000000000000137A                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:000000000000137C                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:000000000000137E                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000001380                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000001382                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000001384                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001386                 dw 0
LOAD:0000000000001388 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001388                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_DF0, 10h, 0> ; "libc.so.6"
LOAD:0000000000001398                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_DF0, \ ; "GLIBC_2.14"
LOAD:0000000000001398                                10h>
LOAD:00000000000013A8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_DF0, \ ; "GLIBC_2.3.4"
LOAD:00000000000013A8                                10h>
LOAD:00000000000013B8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_DF0, \ ; "GLIBC_2.4"
LOAD:00000000000013B8                                10h>
LOAD:00000000000013C8                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_DF0, \ ; "GLIBC_2.2.5"
LOAD:00000000000013C8                                10h>
LOAD:00000000000013D8                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_DF0, 0> ; "GLIBC_2.3"
LOAD:00000000000013E8 ; ELF RELA Relocation Table
LOAD:00000000000013E8                 Elf64_Rela <227670h, 8, 4040h> ; R_X86_64_RELATIVE +4040h
LOAD:0000000000001400                 Elf64_Rela <227678h, 8, 4000h> ; R_X86_64_RELATIVE +4000h
LOAD:0000000000001418                 Elf64_Rela <227680h, 8, 1FD31h> ; R_X86_64_RELATIVE +1FD31h
LOAD:0000000000001430                 Elf64_Rela <227688h, 8, 1FB34h> ; R_X86_64_RELATIVE +1FB34h
LOAD:0000000000001448                 Elf64_Rela <227690h, 8, 1FB39h> ; R_X86_64_RELATIVE +1FB39h
LOAD:0000000000001460                 Elf64_Rela <2276A0h, 8, 1FD3Ah> ; R_X86_64_RELATIVE +1FD3Ah
LOAD:0000000000001478                 Elf64_Rela <2276A8h, 8, 1FD40h> ; R_X86_64_RELATIVE +1FD40h
LOAD:0000000000001490                 Elf64_Rela <2276B0h, 8, 1FD47h> ; R_X86_64_RELATIVE +1FD47h
LOAD:00000000000014A8                 Elf64_Rela <2276B8h, 8, 1FD4Bh> ; R_X86_64_RELATIVE +1FD4Bh
LOAD:00000000000014C0                 Elf64_Rela <2276C0h, 8, 1FD51h> ; R_X86_64_RELATIVE +1FD51h
LOAD:00000000000014D8                 Elf64_Rela <2276E0h, 8, 1FD58h> ; R_X86_64_RELATIVE +1FD58h
LOAD:00000000000014F0                 Elf64_Rela <227700h, 8, 1FD5Ch> ; R_X86_64_RELATIVE +1FD5Ch
LOAD:0000000000001508                 Elf64_Rela <227720h, 8, 1FD6Ah> ; R_X86_64_RELATIVE +1FD6Ah
LOAD:0000000000001520                 Elf64_Rela <227740h, 8, 1FD75h> ; R_X86_64_RELATIVE +1FD75h
LOAD:0000000000001538                 Elf64_Rela <227760h, 8, 1FD7Bh> ; R_X86_64_RELATIVE +1FD7Bh
LOAD:0000000000001550                 Elf64_Rela <227780h, 8, 1FDDFh> ; R_X86_64_RELATIVE +1FDDFh
LOAD:0000000000001568                 Elf64_Rela <2277A0h, 8, 1FD87h> ; R_X86_64_RELATIVE +1FD87h
LOAD:0000000000001580                 Elf64_Rela <2277C0h, 8, 1FD98h> ; R_X86_64_RELATIVE +1FD98h
LOAD:0000000000001598                 Elf64_Rela <2277E0h, 8, 1FDA0h> ; R_X86_64_RELATIVE +1FDA0h
LOAD:00000000000015B0                 Elf64_Rela <227800h, 8, 1FDADh> ; R_X86_64_RELATIVE +1FDADh
LOAD:00000000000015C8                 Elf64_Rela <227820h, 8, 1FDB9h> ; R_X86_64_RELATIVE +1FDB9h
LOAD:00000000000015E0                 Elf64_Rela <227840h, 8, 1FDC8h> ; R_X86_64_RELATIVE +1FDC8h
LOAD:00000000000015F8                 Elf64_Rela <227860h, 8, 1FDCFh> ; R_X86_64_RELATIVE +1FDCFh
LOAD:0000000000001610                 Elf64_Rela <227880h, 8, 1FDD2h> ; R_X86_64_RELATIVE +1FDD2h
LOAD:0000000000001628                 Elf64_Rela <2278A0h, 8, 21929h> ; R_X86_64_RELATIVE +21929h
LOAD:0000000000001640                 Elf64_Rela <2278C0h, 8, 1FDDCh> ; R_X86_64_RELATIVE +1FDDCh
LOAD:0000000000001658                 Elf64_Rela <2278E0h, 8, 1FDEBh> ; R_X86_64_RELATIVE +1FDEBh
LOAD:0000000000001670                 Elf64_Rela <227900h, 8, 1FDFBh> ; R_X86_64_RELATIVE +1FDFBh
LOAD:0000000000001688                 Elf64_Rela <227920h, 8, 1FE09h> ; R_X86_64_RELATIVE +1FE09h
LOAD:00000000000016A0                 Elf64_Rela <227940h, 8, 1FD02h> ; R_X86_64_RELATIVE +1FD02h
LOAD:00000000000016B8                 Elf64_Rela <227960h, 8, 1FE13h> ; R_X86_64_RELATIVE +1FE13h
LOAD:00000000000016D0                 Elf64_Rela <227980h, 8, 1FBA2h> ; R_X86_64_RELATIVE +1FBA2h
LOAD:00000000000016E8                 Elf64_Rela <2279A0h, 8, 1FE1Dh> ; R_X86_64_RELATIVE +1FE1Dh
LOAD:0000000000001700                 Elf64_Rela <2279C0h, 8, 1FE28h> ; R_X86_64_RELATIVE +1FE28h
LOAD:0000000000001718                 Elf64_Rela <2279E0h, 8, 1FE2Dh> ; R_X86_64_RELATIVE +1FE2Dh
LOAD:0000000000001730                 Elf64_Rela <227A20h, 8, 1FDB9h> ; R_X86_64_RELATIVE +1FDB9h
LOAD:0000000000001748                 Elf64_Rela <227A28h, 8, 1FDCFh> ; R_X86_64_RELATIVE +1FDCFh
LOAD:0000000000001760                 Elf64_Rela <227A40h, 8, 21ACFh> ; R_X86_64_RELATIVE +21ACFh
LOAD:0000000000001778                 Elf64_Rela <227A48h, 8, 21AD7h> ; R_X86_64_RELATIVE +21AD7h
LOAD:0000000000001790                 Elf64_Rela <227A50h, 8, 21ADDh> ; R_X86_64_RELATIVE +21ADDh
LOAD:00000000000017A8                 Elf64_Rela <227A58h, 8, 21AEAh> ; R_X86_64_RELATIVE +21AEAh
LOAD:00000000000017C0                 Elf64_Rela <227A60h, 8, 21AF7h> ; R_X86_64_RELATIVE +21AF7h
LOAD:00000000000017D8                 Elf64_Rela <227A68h, 8, 226FDh> ; R_X86_64_RELATIVE +226FDh
LOAD:00000000000017F0                 Elf64_Rela <227A70h, 8, 21B0Bh> ; R_X86_64_RELATIVE +21B0Bh
LOAD:0000000000001808                 Elf64_Rela <227A78h, 8, 21AF0h> ; R_X86_64_RELATIVE +21AF0h
LOAD:0000000000001820                 Elf64_Rela <227A80h, 8, 1FB4Eh> ; R_X86_64_RELATIVE +1FB4Eh
LOAD:0000000000001838                 Elf64_Rela <227A88h, 8, 21B13h> ; R_X86_64_RELATIVE +21B13h
LOAD:0000000000001850                 Elf64_Rela <228008h, 8, 228008h> ; R_X86_64_RELATIVE +228008h
LOAD:0000000000001868                 Elf64_Rela <228018h, 8, 21434h> ; R_X86_64_RELATIVE +21434h
LOAD:0000000000001880                 Elf64_Rela <228020h, 8, 4700h> ; R_X86_64_RELATIVE +4700h
LOAD:0000000000001898                 Elf64_Rela <228080h, 8, 228090h> ; R_X86_64_RELATIVE +228090h
LOAD:00000000000018B0                 Elf64_Rela <228098h, 8, 2281C0h> ; R_X86_64_RELATIVE +2281C0h
LOAD:00000000000018C8                 Elf64_Rela <227FC8h, 400000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:00000000000018E0                 Elf64_Rela <227FD0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000018F8                 Elf64_Rela <227FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT fnmatch
LOAD:0000000000001910                 Elf64_Rela <227FE0h, 3000000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001928                 Elf64_Rela <227FE8h, 3A00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001940                 Elf64_Rela <227FF0h, 6200000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001958                 Elf64_Rela <227FF8h, 6700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001970                 Elf64_Rela <2280A0h, 6E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001988                 Elf64_Rela <2280A8h, 6D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000019A0                 Elf64_Rela <2280B0h, 6F00000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000019B8                 Elf64_Rela <2280B8h, 7400000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000019D0                 Elf64_Rela <2280C0h, 7500000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000019E8                 Elf64_Rela <2280C8h, 7100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001A00                 Elf64_Rela <2280E0h, 7300000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001A18 ; ELF JMPREL Relocation Table
LOAD:0000000000001A18                 Elf64_Rela <227CA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001A30                 Elf64_Rela <227CA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001A48                 Elf64_Rela <227CB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001A60                 Elf64_Rela <227CB8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT endmntent
LOAD:0000000000001A78                 Elf64_Rela <227CC0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001A90                 Elf64_Rela <227CC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001AA8                 Elf64_Rela <227CD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001AC0                 Elf64_Rela <227CD8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:0000000000001AD8                 Elf64_Rela <227CE0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001AF0                 Elf64_Rela <227CE8h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001B08                 Elf64_Rela <227CF0h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001B20                 Elf64_Rela <227CF8h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001B38                 Elf64_Rela <227D00h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000001B50                 Elf64_Rela <227D08h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000001B68                 Elf64_Rela <227D10h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001B80                 Elf64_Rela <227D18h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000001B98                 Elf64_Rela <227D20h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001BB0                 Elf64_Rela <227D28h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001BC8                 Elf64_Rela <227D30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001BE0                 Elf64_Rela <227D38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001BF8                 Elf64_Rela <227D40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001C10                 Elf64_Rela <227D48h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001C28                 Elf64_Rela <227D50h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001C40                 Elf64_Rela <227D58h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001C58                 Elf64_Rela <227D60h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001C70                 Elf64_Rela <227D68h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001C88                 Elf64_Rela <227D70h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001CA0                 Elf64_Rela <227D78h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001CB8                 Elf64_Rela <227D80h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001CD0                 Elf64_Rela <227D88h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000001CE8                 Elf64_Rela <227D90h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001D00                 Elf64_Rela <227D98h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001D18                 Elf64_Rela <227DA0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001D30                 Elf64_Rela <227DA8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001D48                 Elf64_Rela <227DB0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:0000000000001D60                 Elf64_Rela <227DB8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001D78                 Elf64_Rela <227DC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001D90                 Elf64_Rela <227DC8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001DA8                 Elf64_Rela <227DD0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001DC0                 Elf64_Rela <227DD8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001DD8                 Elf64_Rela <227DE0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001DF0                 Elf64_Rela <227DE8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001E08                 Elf64_Rela <227DF0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fputc
LOAD:0000000000001E20                 Elf64_Rela <227DF8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001E38                 Elf64_Rela <227E00h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001E50                 Elf64_Rela <227E08h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:0000000000001E68                 Elf64_Rela <227E10h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001E80                 Elf64_Rela <227E18h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001E98                 Elf64_Rela <227E20h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001EB0                 Elf64_Rela <227E28h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001EC8                 Elf64_Rela <227E30h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000001EE0                 Elf64_Rela <227E38h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000001EF8                 Elf64_Rela <227E40h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT feof
LOAD:0000000000001F10                 Elf64_Rela <227E48h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001F28                 Elf64_Rela <227E50h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000001F40                 Elf64_Rela <227E58h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001F58                 Elf64_Rela <227E60h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001F70                 Elf64_Rela <227E68h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001F88                 Elf64_Rela <227E70h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000001FA0                 Elf64_Rela <227E78h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:0000000000001FB8                 Elf64_Rela <227E80h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001FD0                 Elf64_Rela <227E88h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:0000000000001FE8                 Elf64_Rela <227E90h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000002000                 Elf64_Rela <227E98h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT getmntent
LOAD:0000000000002018                 Elf64_Rela <227EA0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT setmntent
LOAD:0000000000002030                 Elf64_Rela <227EA8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000002048                 Elf64_Rela <227EB0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000002060                 Elf64_Rela <227EB8h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT sscanf
LOAD:0000000000002078                 Elf64_Rela <227EC0h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000002090                 Elf64_Rela <227EC8h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000020A8                 Elf64_Rela <227ED0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:00000000000020C0                 Elf64_Rela <227ED8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000020D8                 Elf64_Rela <227EE0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000020F0                 Elf64_Rela <227EE8h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000002108                 Elf64_Rela <227EF0h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:0000000000002120                 Elf64_Rela <227EF8h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000002138                 Elf64_Rela <227F00h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:0000000000002150                 Elf64_Rela <227F08h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000002168                 Elf64_Rela <227F10h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000002180                 Elf64_Rela <227F18h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000002198                 Elf64_Rela <227F20h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000021B0                 Elf64_Rela <227F28h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000021C8                 Elf64_Rela <227F30h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:00000000000021E0                 Elf64_Rela <227F38h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:00000000000021F8                 Elf64_Rela <227F40h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000002210                 Elf64_Rela <227F48h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:0000000000002228                 Elf64_Rela <227F50h, 5C00000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000002240                 Elf64_Rela <227F58h, 5D00000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:0000000000002258                 Elf64_Rela <227F60h, 5E00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002270                 Elf64_Rela <227F68h, 5F00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002288                 Elf64_Rela <227F70h, 6000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000022A0                 Elf64_Rela <227F78h, 6100000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000022B8                 Elf64_Rela <227F80h, 6300000007h, 0> ; R_X86_64_JUMP_SLOT fflush_unlocked
LOAD:00000000000022D0                 Elf64_Rela <227F88h, 6400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000022E8                 Elf64_Rela <227F90h, 6500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000002300                 Elf64_Rela <227F98h, 6600000007h, 0> ; R_X86_64_JUMP_SLOT hasmntopt
LOAD:0000000000002318                 Elf64_Rela <227FA0h, 6800000007h, 0> ; R_X86_64_JUMP_SLOT getdelim
LOAD:0000000000002330                 Elf64_Rela <227FA8h, 6900000007h, 0> ; R_X86_64_JUMP_SLOT strstr
LOAD:0000000000002348                 Elf64_Rela <227FB0h, 6A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000002360                 Elf64_Rela <227FB8h, 6B00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000002378                 Elf64_Rela <227FC0h, 6C00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000002378 LOAD            ends
LOAD:0000000000002378
.init:0000000000002390 ; ===========================================================================
.init:0000000000002390
.init:0000000000002390 ; Segment type: Pure code
.init:0000000000002390 ; Segment permissions: Read/Execute
.init:0000000000002390 _init           segment dword public 'CODE' use64
.init:0000000000002390                 assume cs:_init
.init:0000000000002390                 ;org 2390h
.init:0000000000002390                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000002390
.init:0000000000002390 ; =============== S U B R O U T I N E =======================================
.init:0000000000002390
.init:0000000000002390
.init:0000000000002390                 public _init_proc
.init:0000000000002390 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000002390                 sub     rsp, 8          ; _init
.init:0000000000002394                 mov     rax, cs:__gmon_start___ptr
.init:000000000000239B                 test    rax, rax
.init:000000000000239E                 jz      short loc_23A2
.init:00000000000023A0                 call    rax ; __gmon_start__
.init:00000000000023A2
.init:00000000000023A2 loc_23A2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000023A2                 add     rsp, 8
.init:00000000000023A6                 retn
.init:00000000000023A6 _init_proc      endp
.init:00000000000023A6
.init:00000000000023A6 _init           ends
.init:00000000000023A6
LOAD:00000000000023A7 ; ===========================================================================
LOAD:00000000000023A7
LOAD:00000000000023A7 ; Segment type: Pure code
LOAD:00000000000023A7 ; Segment permissions: Read/Execute
LOAD:00000000000023A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000023A7                 assume cs:LOAD
LOAD:00000000000023A7                 ;org 23A7h
LOAD:00000000000023A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000023A7                 align 10h
LOAD:00000000000023A7 LOAD            ends
LOAD:00000000000023A7
.plt:00000000000023B0 ; ===========================================================================
.plt:00000000000023B0
.plt:00000000000023B0 ; Segment type: Pure code
.plt:00000000000023B0 ; Segment permissions: Read/Execute
.plt:00000000000023B0 _plt            segment para public 'CODE' use64
.plt:00000000000023B0                 assume cs:_plt
.plt:00000000000023B0                 ;org 23B0h
.plt:00000000000023B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000023B0
.plt:00000000000023B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023B0
.plt:00000000000023B0
.plt:00000000000023B0 sub_23B0        proc near               ; CODE XREF: .plt:00000000000023CB↓j
.plt:00000000000023B0                                         ; .plt:00000000000023DB↓j ...
.plt:00000000000023B0 ; __unwind {
.plt:00000000000023B0                 push    cs:qword_227C90
.plt:00000000000023B6                 jmp     cs:qword_227C98
.plt:00000000000023B6 sub_23B0        endp
.plt:00000000000023B6
.plt:00000000000023B6 ; ---------------------------------------------------------------------------
.plt:00000000000023BC                 align 20h
.plt:00000000000023C0
.plt:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023C0
.plt:00000000000023C0 ; Attributes: thunk
.plt:00000000000023C0
.plt:00000000000023C0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:00000000000023C0 ___ctype_toupper_loc proc near          ; CODE XREF: fwrite_uppcase+1B↓p
.plt:00000000000023C0                                         ; build_upper_buffer+1D↓p ...
.plt:00000000000023C0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:00000000000023C0 ___ctype_toupper_loc endp
.plt:00000000000023C0
.plt:00000000000023C6 ; ---------------------------------------------------------------------------
.plt:00000000000023C6                 push    0
.plt:00000000000023CB                 jmp     sub_23B0
.plt:00000000000023D0
.plt:00000000000023D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023D0
.plt:00000000000023D0 ; Attributes: thunk
.plt:00000000000023D0
.plt:00000000000023D0 ; int __uflow(_IO_FILE *)
.plt:00000000000023D0 ___uflow        proc near               ; CODE XREF: add_exclude_fp+93↓p
.plt:00000000000023D0                 jmp     cs:__uflow_ptr
.plt:00000000000023D0 ___uflow        endp
.plt:00000000000023D0
.plt:00000000000023D6 ; ---------------------------------------------------------------------------
.plt:00000000000023D6                 push    1
.plt:00000000000023DB                 jmp     sub_23B0
.plt:00000000000023E0
.plt:00000000000023E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023E0
.plt:00000000000023E0 ; Attributes: thunk
.plt:00000000000023E0
.plt:00000000000023E0 ; char *getenv(const char *name)
.plt:00000000000023E0 _getenv         proc near               ; CODE XREF: main+AE↓p
.plt:00000000000023E0                                         ; main+424↓p ...
.plt:00000000000023E0                 jmp     cs:getenv_ptr
.plt:00000000000023E0 _getenv         endp
.plt:00000000000023E0
.plt:00000000000023E6 ; ---------------------------------------------------------------------------
.plt:00000000000023E6                 push    2
.plt:00000000000023EB                 jmp     sub_23B0
.plt:00000000000023F0
.plt:00000000000023F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000023F0
.plt:00000000000023F0 ; Attributes: thunk
.plt:00000000000023F0
.plt:00000000000023F0 ; int endmntent(FILE *stream)
.plt:00000000000023F0 _endmntent      proc near               ; CODE XREF: read_file_system_list+701↓p
.plt:00000000000023F0                 jmp     cs:endmntent_ptr
.plt:00000000000023F0 _endmntent      endp
.plt:00000000000023F0
.plt:00000000000023F6 ; ---------------------------------------------------------------------------
.plt:00000000000023F6                 push    3
.plt:00000000000023FB                 jmp     sub_23B0
.plt:0000000000002400
.plt:0000000000002400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002400
.plt:0000000000002400 ; Attributes: noreturn thunk
.plt:0000000000002400
.plt:0000000000002400 ; void __noreturn abort(void)
.plt:0000000000002400 _abort          proc near               ; CODE XREF: safe_hasher:loc_7DCD↓p
.plt:0000000000002400                                         ; hash_get_first+3C↓p ...
.plt:0000000000002400                 jmp     cs:abort_ptr
.plt:0000000000002400 _abort          endp
.plt:0000000000002400
.plt:0000000000002406 ; ---------------------------------------------------------------------------
.plt:0000000000002406                 push    4
.plt:000000000000240B                 jmp     sub_23B0
.plt:0000000000002410
.plt:0000000000002410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002410
.plt:0000000000002410 ; Attributes: thunk
.plt:0000000000002410
.plt:0000000000002410 ; int *__errno_location(void)
.plt:0000000000002410 ___errno_location proc near             ; CODE XREF: main+2BB↓p
.plt:0000000000002410                                         ; main+B37↓p ...
.plt:0000000000002410                 jmp     cs:__errno_location_ptr
.plt:0000000000002410 ___errno_location endp
.plt:0000000000002410
.plt:0000000000002416 ; ---------------------------------------------------------------------------
.plt:0000000000002416                 push    5
.plt:000000000000241B                 jmp     sub_23B0
.plt:0000000000002420
.plt:0000000000002420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002420
.plt:0000000000002420 ; Attributes: thunk
.plt:0000000000002420
.plt:0000000000002420 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002420 _strncmp        proc near               ; CODE XREF: main+11FD↓p
.plt:0000000000002420                                         ; usage+37C↓p ...
.plt:0000000000002420                 jmp     cs:strncmp_ptr
.plt:0000000000002420 _strncmp        endp
.plt:0000000000002420
.plt:0000000000002426 ; ---------------------------------------------------------------------------
.plt:0000000000002426                 push    6
.plt:000000000000242B                 jmp     sub_23B0
.plt:0000000000002430
.plt:0000000000002430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002430
.plt:0000000000002430 ; Attributes: thunk
.plt:0000000000002430
.plt:0000000000002430 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000002430 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:0000000000002430                                         ; mktime_z+AA↓p
.plt:0000000000002430                 jmp     cs:localtime_r_ptr
.plt:0000000000002430 _localtime_r    endp
.plt:0000000000002430
.plt:0000000000002436 ; ---------------------------------------------------------------------------
.plt:0000000000002436                 push    7
.plt:000000000000243B                 jmp     sub_23B0
.plt:0000000000002440
.plt:0000000000002440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002440
.plt:0000000000002440 ; Attributes: noreturn thunk
.plt:0000000000002440
.plt:0000000000002440 ; void __noreturn _exit(int status)
.plt:0000000000002440 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000002440                 jmp     cs:_exit_ptr
.plt:0000000000002440 __exit          endp
.plt:0000000000002440
.plt:0000000000002446 ; ---------------------------------------------------------------------------
.plt:0000000000002446                 push    8
.plt:000000000000244B                 jmp     sub_23B0
.plt:0000000000002450
.plt:0000000000002450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002450
.plt:0000000000002450 ; Attributes: thunk
.plt:0000000000002450
.plt:0000000000002450 ; char *strcpy(char *dest, const char *src)
.plt:0000000000002450 _strcpy         proc near               ; CODE XREF: excluded_file_name+53↓p
.plt:0000000000002450                 jmp     cs:strcpy_ptr
.plt:0000000000002450 _strcpy         endp
.plt:0000000000002450
.plt:0000000000002456 ; ---------------------------------------------------------------------------
.plt:0000000000002456                 push    9
.plt:000000000000245B                 jmp     sub_23B0
.plt:0000000000002460
.plt:0000000000002460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002460
.plt:0000000000002460 ; Attributes: thunk
.plt:0000000000002460
.plt:0000000000002460 ; size_t __fpending(FILE *fp)
.plt:0000000000002460 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000002460                 jmp     cs:__fpending_ptr
.plt:0000000000002460 ___fpending     endp
.plt:0000000000002460
.plt:0000000000002466 ; ---------------------------------------------------------------------------
.plt:0000000000002466                 push    0Ah
.plt:000000000000246B                 jmp     sub_23B0
.plt:0000000000002470
.plt:0000000000002470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002470
.plt:0000000000002470 ; Attributes: thunk
.plt:0000000000002470
.plt:0000000000002470 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000002470 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:0000000000002470                 jmp     cs:qsort_ptr
.plt:0000000000002470 _qsort          endp
.plt:0000000000002470
.plt:0000000000002476 ; ---------------------------------------------------------------------------
.plt:0000000000002476                 push    0Bh
.plt:000000000000247B                 jmp     sub_23B0
.plt:0000000000002480
.plt:0000000000002480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002480
.plt:0000000000002480 ; Attributes: thunk
.plt:0000000000002480
.plt:0000000000002480 ; int iswcntrl(wint_t wc)
.plt:0000000000002480 _iswcntrl       proc near               ; CODE XREF: mb_width_aux+12↓p
.plt:0000000000002480                 jmp     cs:iswcntrl_ptr
.plt:0000000000002480 _iswcntrl       endp
.plt:0000000000002480
.plt:0000000000002486 ; ---------------------------------------------------------------------------
.plt:0000000000002486                 push    0Ch
.plt:000000000000248B                 jmp     sub_23B0
.plt:0000000000002490
.plt:0000000000002490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002490
.plt:0000000000002490 ; Attributes: thunk
.plt:0000000000002490
.plt:0000000000002490 ; struct lconv *localeconv(void)
.plt:0000000000002490 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000002490                 jmp     cs:localeconv_ptr
.plt:0000000000002490 _localeconv     endp
.plt:0000000000002490
.plt:0000000000002496 ; ---------------------------------------------------------------------------
.plt:0000000000002496                 push    0Dh
.plt:000000000000249B                 jmp     sub_23B0
.plt:00000000000024A0
.plt:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024A0
.plt:00000000000024A0 ; Attributes: thunk
.plt:00000000000024A0
.plt:00000000000024A0 ; int fcntl(int fd, int cmd, ...)
.plt:00000000000024A0 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:00000000000024A0                                         ; rpl_fcntl+D4↓p ...
.plt:00000000000024A0                 jmp     cs:fcntl_ptr
.plt:00000000000024A0 _fcntl          endp
.plt:00000000000024A0
.plt:00000000000024A6 ; ---------------------------------------------------------------------------
.plt:00000000000024A6                 push    0Eh
.plt:00000000000024AB                 jmp     sub_23B0
.plt:00000000000024B0
.plt:00000000000024B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024B0
.plt:00000000000024B0 ; Attributes: thunk
.plt:00000000000024B0
.plt:00000000000024B0 ; int setenv(const char *name, const char *value, int replace)
.plt:00000000000024B0 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:00000000000024B0                 jmp     cs:setenv_ptr
.plt:00000000000024B0 _setenv         endp
.plt:00000000000024B0
.plt:00000000000024B6 ; ---------------------------------------------------------------------------
.plt:00000000000024B6                 push    0Fh
.plt:00000000000024BB                 jmp     sub_23B0
.plt:00000000000024C0
.plt:00000000000024C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024C0
.plt:00000000000024C0 ; Attributes: thunk
.plt:00000000000024C0
.plt:00000000000024C0 ; char *textdomain(const char *domainname)
.plt:00000000000024C0 _textdomain     proc near               ; CODE XREF: main+8A↓p
.plt:00000000000024C0                 jmp     cs:textdomain_ptr
.plt:00000000000024C0 _textdomain     endp
.plt:00000000000024C0
.plt:00000000000024C6 ; ---------------------------------------------------------------------------
.plt:00000000000024C6                 push    10h
.plt:00000000000024CB                 jmp     sub_23B0
.plt:00000000000024D0
.plt:00000000000024D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024D0
.plt:00000000000024D0 ; Attributes: thunk
.plt:00000000000024D0
.plt:00000000000024D0 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000024D0 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:00000000000024D0                 jmp     cs:__strtol_internal_ptr
.plt:00000000000024D0 ___strtol_internal endp
.plt:00000000000024D0
.plt:00000000000024D6 ; ---------------------------------------------------------------------------
.plt:00000000000024D6                 push    11h
.plt:00000000000024DB                 jmp     sub_23B0
.plt:00000000000024E0
.plt:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024E0
.plt:00000000000024E0 ; Attributes: thunk
.plt:00000000000024E0
.plt:00000000000024E0 ; int iswctype(wint_t wc, wctype_t desc)
.plt:00000000000024E0 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:00000000000024E0                 jmp     cs:iswctype_ptr
.plt:00000000000024E0 _iswctype       endp
.plt:00000000000024E0
.plt:00000000000024E6 ; ---------------------------------------------------------------------------
.plt:00000000000024E6                 push    12h
.plt:00000000000024EB                 jmp     sub_23B0
.plt:00000000000024F0
.plt:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024F0
.plt:00000000000024F0 ; Attributes: thunk
.plt:00000000000024F0
.plt:00000000000024F0 ; int fclose(FILE *stream)
.plt:00000000000024F0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000024F0                                         ; rpl_fclose+6B↓j
.plt:00000000000024F0                 jmp     cs:fclose_ptr
.plt:00000000000024F0 _fclose         endp
.plt:00000000000024F0
.plt:00000000000024F6 ; ---------------------------------------------------------------------------
.plt:00000000000024F6                 push    13h
.plt:00000000000024FB                 jmp     sub_23B0
.plt:0000000000002500
.plt:0000000000002500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002500
.plt:0000000000002500 ; Attributes: thunk
.plt:0000000000002500
.plt:0000000000002500 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000002500 _bindtextdomain proc near               ; CODE XREF: main+7E↓p
.plt:0000000000002500                 jmp     cs:bindtextdomain_ptr
.plt:0000000000002500 _bindtextdomain endp
.plt:0000000000002500
.plt:0000000000002506 ; ---------------------------------------------------------------------------
.plt:0000000000002506                 push    14h
.plt:000000000000250B                 jmp     sub_23B0
.plt:0000000000002510
.plt:0000000000002510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002510
.plt:0000000000002510 ; Attributes: thunk
.plt:0000000000002510
.plt:0000000000002510 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000002510 _dcgettext      proc near               ; CODE XREF: main+196↓p
.plt:0000000000002510                                         ; main+9E6↓p ...
.plt:0000000000002510                 jmp     cs:dcgettext_ptr
.plt:0000000000002510 _dcgettext      endp
.plt:0000000000002510
.plt:0000000000002516 ; ---------------------------------------------------------------------------
.plt:0000000000002516                 push    15h
.plt:000000000000251B                 jmp     sub_23B0
.plt:0000000000002520
.plt:0000000000002520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002520
.plt:0000000000002520 ; Attributes: thunk
.plt:0000000000002520
.plt:0000000000002520 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002520 ___ctype_get_mb_cur_max proc near       ; CODE XREF: string_hasher_ci:loc_51B7↓p
.plt:0000000000002520                                         ; mbscasecmp+33↓p ...
.plt:0000000000002520                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002520 ___ctype_get_mb_cur_max endp
.plt:0000000000002520
.plt:0000000000002526 ; ---------------------------------------------------------------------------
.plt:0000000000002526                 push    16h
.plt:000000000000252B                 jmp     sub_23B0
.plt:0000000000002530
.plt:0000000000002530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002530
.plt:0000000000002530 ; Attributes: thunk
.plt:0000000000002530
.plt:0000000000002530 ; size_t strlen(const char *s)
.plt:0000000000002530 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000002530                                         ; argmatch+AE↓p ...
.plt:0000000000002530                 jmp     cs:strlen_ptr
.plt:0000000000002530 _strlen         endp
.plt:0000000000002530
.plt:0000000000002536 ; ---------------------------------------------------------------------------
.plt:0000000000002536                 push    17h
.plt:000000000000253B                 jmp     sub_23B0
.plt:0000000000002540
.plt:0000000000002540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002540
.plt:0000000000002540 ; Attributes: thunk
.plt:0000000000002540
.plt:0000000000002540 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002540 ___lxstat       proc near               ; CODE XREF: fts_stat+15C↓p
.plt:0000000000002540                 jmp     cs:__lxstat_ptr
.plt:0000000000002540 ___lxstat       endp
.plt:0000000000002540
.plt:0000000000002546 ; ---------------------------------------------------------------------------
.plt:0000000000002546                 push    18h
.plt:000000000000254B                 jmp     sub_23B0
.plt:0000000000002550
.plt:0000000000002550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002550
.plt:0000000000002550 ; Attributes: thunk
.plt:0000000000002550
.plt:0000000000002550 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000002550 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000002550                 jmp     cs:openat_ptr
.plt:0000000000002550 _openat         endp
.plt:0000000000002550
.plt:0000000000002556 ; ---------------------------------------------------------------------------
.plt:0000000000002556                 push    19h
.plt:000000000000255B                 jmp     sub_23B0
.plt:0000000000002560
.plt:0000000000002560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002560
.plt:0000000000002560 ; Attributes: noreturn thunk
.plt:0000000000002560
.plt:0000000000002560 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3DE4↓p
.plt:0000000000002560                                         ; print_only_size:loc_40D5↓p ...
.plt:0000000000002560                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002560 ___stack_chk_fail endp
.plt:0000000000002560
.plt:0000000000002566 ; ---------------------------------------------------------------------------
.plt:0000000000002566                 push    1Ah
.plt:000000000000256B                 jmp     sub_23B0
.plt:0000000000002570
.plt:0000000000002570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002570
.plt:0000000000002570 ; Attributes: thunk
.plt:0000000000002570
.plt:0000000000002570 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002570 _getopt_long    proc near               ; CODE XREF: main+117↓p
.plt:0000000000002570                 jmp     cs:getopt_long_ptr
.plt:0000000000002570 _getopt_long    endp
.plt:0000000000002570
.plt:0000000000002576 ; ---------------------------------------------------------------------------
.plt:0000000000002576                 push    1Bh
.plt:000000000000257B                 jmp     sub_23B0
.plt:0000000000002580
.plt:0000000000002580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002580
.plt:0000000000002580 ; Attributes: thunk
.plt:0000000000002580
.plt:0000000000002580 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002580 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002580                 jmp     cs:mbrtowc_ptr
.plt:0000000000002580 _mbrtowc        endp
.plt:0000000000002580
.plt:0000000000002586 ; ---------------------------------------------------------------------------
.plt:0000000000002586                 push    1Ch
.plt:000000000000258B                 jmp     sub_23B0
.plt:0000000000002590
.plt:0000000000002590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002590
.plt:0000000000002590 ; Attributes: thunk
.plt:0000000000002590
.plt:0000000000002590 ; int dup2(int fd, int fd2)
.plt:0000000000002590 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:0000000000002590                                         ; freopen_safer+64↓p ...
.plt:0000000000002590                 jmp     cs:dup2_ptr
.plt:0000000000002590 _dup2           endp
.plt:0000000000002590
.plt:0000000000002596 ; ---------------------------------------------------------------------------
.plt:0000000000002596                 push    1Dh
.plt:000000000000259B                 jmp     sub_23B0
.plt:00000000000025A0
.plt:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025A0
.plt:00000000000025A0 ; Attributes: thunk
.plt:00000000000025A0
.plt:00000000000025A0 ; char *strchr(const char *s, int c)
.plt:00000000000025A0 _strchr         proc near               ; CODE XREF: main+1303↓p
.plt:00000000000025A0                                         ; fnmatch_no_wildcards+9E↓p ...
.plt:00000000000025A0                 jmp     cs:strchr_ptr
.plt:00000000000025A0 _strchr         endp
.plt:00000000000025A0
.plt:00000000000025A6 ; ---------------------------------------------------------------------------
.plt:00000000000025A6                 push    1Eh
.plt:00000000000025AB                 jmp     sub_23B0
.plt:00000000000025B0
.plt:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025B0
.plt:00000000000025B0 ; Attributes: thunk
.plt:00000000000025B0
.plt:00000000000025B0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:00000000000025B0 ___fxstatat     proc near               ; CODE XREF: fts_stat+9E↓p
.plt:00000000000025B0                 jmp     cs:__fxstatat_ptr
.plt:00000000000025B0 ___fxstatat     endp
.plt:00000000000025B0
.plt:00000000000025B6 ; ---------------------------------------------------------------------------
.plt:00000000000025B6                 push    1Fh
.plt:00000000000025BB                 jmp     sub_23B0
.plt:00000000000025C0
.plt:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025C0
.plt:00000000000025C0 ; Attributes: thunk
.plt:00000000000025C0
.plt:00000000000025C0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000025C0 ___overflow     proc near               ; CODE XREF: print_size+F5↓p
.plt:00000000000025C0                                         ; argmatch_valid+11B↓j
.plt:00000000000025C0                 jmp     cs:__overflow_ptr
.plt:00000000000025C0 ___overflow     endp
.plt:00000000000025C0
.plt:00000000000025C6 ; ---------------------------------------------------------------------------
.plt:00000000000025C6                 push    20h ; ' '
.plt:00000000000025CB                 jmp     sub_23B0
.plt:00000000000025D0
.plt:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025D0
.plt:00000000000025D0 ; Attributes: thunk
.plt:00000000000025D0
.plt:00000000000025D0 ; char *strrchr(const char *s, int c)
.plt:00000000000025D0 _strrchr        proc near               ; CODE XREF: excluded_file_name+75↓p
.plt:00000000000025D0                                         ; set_program_name+E↓p ...
.plt:00000000000025D0                 jmp     cs:strrchr_ptr
.plt:00000000000025D0 _strrchr        endp
.plt:00000000000025D0
.plt:00000000000025D6 ; ---------------------------------------------------------------------------
.plt:00000000000025D6                 push    21h ; '!'
.plt:00000000000025DB                 jmp     sub_23B0
.plt:00000000000025E0
.plt:00000000000025E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025E0
.plt:00000000000025E0 ; Attributes: thunk
.plt:00000000000025E0
.plt:00000000000025E0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000025E0 _gmtime_r       proc near               ; CODE XREF: localtime_rz+90↓j
.plt:00000000000025E0                 jmp     cs:gmtime_r_ptr
.plt:00000000000025E0 _gmtime_r       endp
.plt:00000000000025E0
.plt:00000000000025E6 ; ---------------------------------------------------------------------------
.plt:00000000000025E6                 push    22h ; '"'
.plt:00000000000025EB                 jmp     sub_23B0
.plt:00000000000025F0
.plt:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025F0
.plt:00000000000025F0 ; Attributes: thunk
.plt:00000000000025F0
.plt:00000000000025F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000025F0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000025F0                                         ; rpl_fseeko+3B↓p
.plt:00000000000025F0                 jmp     cs:lseek_ptr
.plt:00000000000025F0 _lseek          endp
.plt:00000000000025F0
.plt:00000000000025F6 ; ---------------------------------------------------------------------------
.plt:00000000000025F6                 push    23h ; '#'
.plt:00000000000025FB                 jmp     sub_23B0
.plt:0000000000002600
.plt:0000000000002600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002600
.plt:0000000000002600 ; Attributes: noreturn thunk
.plt:0000000000002600
.plt:0000000000002600 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000002600 ___assert_fail  proc near               ; CODE XREF: mbuiter_multi_next_part_0+1E↓p
.plt:0000000000002600                                         ; main+B0A↓p ...
.plt:0000000000002600                 jmp     cs:__assert_fail_ptr
.plt:0000000000002600 ___assert_fail  endp
.plt:0000000000002600
.plt:0000000000002606 ; ---------------------------------------------------------------------------
.plt:0000000000002606                 push    24h ; '$'
.plt:000000000000260B                 jmp     sub_23B0
.plt:0000000000002610
.plt:0000000000002610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002610
.plt:0000000000002610 ; Attributes: thunk
.plt:0000000000002610
.plt:0000000000002610 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000002610 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000002610                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000002610 ___strtoul_internal endp
.plt:0000000000002610
.plt:0000000000002616 ; ---------------------------------------------------------------------------
.plt:0000000000002616                 push    25h ; '%'
.plt:000000000000261B                 jmp     sub_23B0
.plt:0000000000002620
.plt:0000000000002620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002620
.plt:0000000000002620 ; Attributes: thunk
.plt:0000000000002620
.plt:0000000000002620 ; void *memset(void *s, int c, size_t n)
.plt:0000000000002620 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000002620                                         ; xzalloc+12↓j ...
.plt:0000000000002620                 jmp     cs:memset_ptr
.plt:0000000000002620 _memset         endp
.plt:0000000000002620
.plt:0000000000002626 ; ---------------------------------------------------------------------------
.plt:0000000000002626                 push    26h ; '&'
.plt:000000000000262B                 jmp     sub_23B0
.plt:0000000000002630
.plt:0000000000002630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002630
.plt:0000000000002630 ; Attributes: thunk
.plt:0000000000002630
.plt:0000000000002630 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:0000000000002630 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:0000000000002630                 jmp     cs:freopen_ptr
.plt:0000000000002630 _freopen        endp
.plt:0000000000002630
.plt:0000000000002636 ; ---------------------------------------------------------------------------
.plt:0000000000002636                 push    27h ; '''
.plt:000000000000263B                 jmp     sub_23B0
.plt:0000000000002640
.plt:0000000000002640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002640
.plt:0000000000002640 ; Attributes: thunk
.plt:0000000000002640
.plt:0000000000002640 ; int close(int fd)
.plt:0000000000002640 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:0000000000002640                                         ; freopen_safer+133↓p ...
.plt:0000000000002640                 jmp     cs:close_ptr
.plt:0000000000002640 _close          endp
.plt:0000000000002640
.plt:0000000000002646 ; ---------------------------------------------------------------------------
.plt:0000000000002646                 push    28h ; '('
.plt:000000000000264B                 jmp     sub_23B0
.plt:0000000000002650
.plt:0000000000002650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002650
.plt:0000000000002650 ; Attributes: thunk
.plt:0000000000002650
.plt:0000000000002650 ; int closedir(DIR *dirp)
.plt:0000000000002650 _closedir       proc near               ; CODE XREF: fts_lfree+1D↓p
.plt:0000000000002650                                         ; fts_build+544↓p ...
.plt:0000000000002650                 jmp     cs:closedir_ptr
.plt:0000000000002650 _closedir       endp
.plt:0000000000002650
.plt:0000000000002656 ; ---------------------------------------------------------------------------
.plt:0000000000002656                 push    29h ; ')'
.plt:000000000000265B                 jmp     sub_23B0
.plt:0000000000002660
.plt:0000000000002660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002660
.plt:0000000000002660 ; Attributes: thunk
.plt:0000000000002660
.plt:0000000000002660 ; int fputc(int c, FILE *stream)
.plt:0000000000002660 _fputc          proc near               ; CODE XREF: fwrite_lowcase+39↓p
.plt:0000000000002660                                         ; fwrite_uppcase+39↓p ...
.plt:0000000000002660                 jmp     cs:fputc_ptr
.plt:0000000000002660 _fputc          endp
.plt:0000000000002660
.plt:0000000000002666 ; ---------------------------------------------------------------------------
.plt:0000000000002666                 push    2Ah ; '*'
.plt:000000000000266B                 jmp     sub_23B0
.plt:0000000000002670
.plt:0000000000002670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002670
.plt:0000000000002670 ; Attributes: thunk
.plt:0000000000002670
.plt:0000000000002670 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000002670 _memchr         proc near               ; CODE XREF: strnlen1+11↓p
.plt:0000000000002670                 jmp     cs:memchr_ptr
.plt:0000000000002670 _memchr         endp
.plt:0000000000002670
.plt:0000000000002676 ; ---------------------------------------------------------------------------
.plt:0000000000002676                 push    2Bh ; '+'
.plt:000000000000267B                 jmp     sub_23B0
.plt:0000000000002680
.plt:0000000000002680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002680
.plt:0000000000002680 ; Attributes: thunk
.plt:0000000000002680
.plt:0000000000002680 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002680 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000002680                                         ; argmatch_valid+96↓p ...
.plt:0000000000002680                 jmp     cs:memcmp_ptr
.plt:0000000000002680 _memcmp         endp
.plt:0000000000002680
.plt:0000000000002686 ; ---------------------------------------------------------------------------
.plt:0000000000002686                 push    2Ch ; ','
.plt:000000000000268B                 jmp     sub_23B0
.plt:0000000000002690
.plt:0000000000002690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002690
.plt:0000000000002690 ; Attributes: thunk
.plt:0000000000002690
.plt:0000000000002690 ; wctype_t wctype(const char *property)
.plt:0000000000002690 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000002690                 jmp     cs:wctype_ptr
.plt:0000000000002690 _wctype         endp
.plt:0000000000002690
.plt:0000000000002696 ; ---------------------------------------------------------------------------
.plt:0000000000002696                 push    2Dh ; '-'
.plt:000000000000269B                 jmp     sub_23B0
.plt:00000000000026A0
.plt:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026A0
.plt:00000000000026A0 ; Attributes: thunk
.plt:00000000000026A0
.plt:00000000000026A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000026A0 _fputs_unlocked proc near               ; CODE XREF: print_only_size+48↓p
.plt:00000000000026A0                                         ; print_size+14A↓p ...
.plt:00000000000026A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000026A0 _fputs_unlocked endp
.plt:00000000000026A0
.plt:00000000000026A6 ; ---------------------------------------------------------------------------
.plt:00000000000026A6                 push    2Eh ; '.'
.plt:00000000000026AB                 jmp     sub_23B0
.plt:00000000000026B0
.plt:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026B0
.plt:00000000000026B0 ; Attributes: thunk
.plt:00000000000026B0
.plt:00000000000026B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000026B0 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:00000000000026B0                                         ; hash_rehash+C6↓p ...
.plt:00000000000026B0                 jmp     cs:calloc_ptr
.plt:00000000000026B0 _calloc         endp
.plt:00000000000026B0
.plt:00000000000026B6 ; ---------------------------------------------------------------------------
.plt:00000000000026B6                 push    2Fh ; '/'
.plt:00000000000026BB                 jmp     sub_23B0
.plt:00000000000026C0
.plt:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026C0
.plt:00000000000026C0 ; Attributes: thunk
.plt:00000000000026C0
.plt:00000000000026C0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:00000000000026C0 ___getdelim     proc near               ; CODE XREF: read_file_system_list+6E↓p
.plt:00000000000026C0                 jmp     cs:__getdelim_ptr
.plt:00000000000026C0 ___getdelim     endp
.plt:00000000000026C0
.plt:00000000000026C6 ; ---------------------------------------------------------------------------
.plt:00000000000026C6                 push    30h ; '0'
.plt:00000000000026CB                 jmp     sub_23B0
.plt:00000000000026D0
.plt:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026D0
.plt:00000000000026D0 ; Attributes: thunk
.plt:00000000000026D0
.plt:00000000000026D0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000026D0 _strcmp         proc near               ; CODE XREF: main+530↓p
.plt:00000000000026D0                                         ; main+11C1↓p ...
.plt:00000000000026D0                 jmp     cs:strcmp_ptr
.plt:00000000000026D0 _strcmp         endp
.plt:00000000000026D0
.plt:00000000000026D6 ; ---------------------------------------------------------------------------
.plt:00000000000026D6                 push    31h ; '1'
.plt:00000000000026DB                 jmp     sub_23B0
.plt:00000000000026E0
.plt:00000000000026E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026E0
.plt:00000000000026E0 ; Attributes: thunk
.plt:00000000000026E0
.plt:00000000000026E0 ; int dirfd(DIR *dirp)
.plt:00000000000026E0 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:00000000000026E0                 jmp     cs:dirfd_ptr
.plt:00000000000026E0 _dirfd          endp
.plt:00000000000026E0
.plt:00000000000026E6 ; ---------------------------------------------------------------------------
.plt:00000000000026E6                 push    32h ; '2'
.plt:00000000000026EB                 jmp     sub_23B0
.plt:00000000000026F0
.plt:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026F0
.plt:00000000000026F0 ; Attributes: thunk
.plt:00000000000026F0
.plt:00000000000026F0 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:00000000000026F0                 jmp     cs:__memcpy_chk_ptr
.plt:00000000000026F0 ___memcpy_chk   endp
.plt:00000000000026F0
.plt:00000000000026F6 ; ---------------------------------------------------------------------------
.plt:00000000000026F6                 push    33h ; '3'
.plt:00000000000026FB                 jmp     sub_23B0
.plt:0000000000002700
.plt:0000000000002700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002700
.plt:0000000000002700 ; Attributes: thunk
.plt:0000000000002700
.plt:0000000000002700 ; int feof(FILE *stream)
.plt:0000000000002700 _feof           proc near               ; CODE XREF: argv_iter+73↓p
.plt:0000000000002700                 jmp     cs:feof_ptr
.plt:0000000000002700 _feof           endp
.plt:0000000000002700
.plt:0000000000002706 ; ---------------------------------------------------------------------------
.plt:0000000000002706                 push    34h ; '4'
.plt:000000000000270B                 jmp     sub_23B0
.plt:0000000000002710
.plt:0000000000002710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002710
.plt:0000000000002710 ; Attributes: thunk
.plt:0000000000002710
.plt:0000000000002710 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002710 _memcpy         proc near               ; CODE XREF: add_exclude+330↓p
.plt:0000000000002710                                         ; human_readable+4DD↓p ...
.plt:0000000000002710                 jmp     cs:memcpy_ptr
.plt:0000000000002710 _memcpy         endp
.plt:0000000000002710
.plt:0000000000002716 ; ---------------------------------------------------------------------------
.plt:0000000000002716                 push    35h ; '5'
.plt:000000000000271B                 jmp     sub_23B0
.plt:0000000000002720
.plt:0000000000002720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002720
.plt:0000000000002720 ; Attributes: thunk
.plt:0000000000002720
.plt:0000000000002720 ; void tzset(void)
.plt:0000000000002720 _tzset          proc near               ; CODE XREF: revert_tz:loc_1EE50↓p
.plt:0000000000002720                                         ; set_tz:loc_1F108↓p
.plt:0000000000002720                 jmp     cs:tzset_ptr
.plt:0000000000002720 _tzset          endp
.plt:0000000000002720
.plt:0000000000002726 ; ---------------------------------------------------------------------------
.plt:0000000000002726                 push    36h ; '6'
.plt:000000000000272B                 jmp     sub_23B0
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730 ; Attributes: thunk
.plt:0000000000002730
.plt:0000000000002730 ; int fileno(FILE *stream)
.plt:0000000000002730 _fileno         proc near               ; CODE XREF: freopen_safer+1C↓p
.plt:0000000000002730                                         ; rpl_fclose+7↓p ...
.plt:0000000000002730                 jmp     cs:fileno_ptr
.plt:0000000000002730 _fileno         endp
.plt:0000000000002730
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:0000000000002736                 push    37h ; '7'
.plt:000000000000273B                 jmp     sub_23B0
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: thunk
.plt:0000000000002740
.plt:0000000000002740 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002740 ___xstat        proc near               ; CODE XREF: main+1366↓p
.plt:0000000000002740                                         ; fts_stat+28↓p
.plt:0000000000002740                 jmp     cs:__xstat_ptr
.plt:0000000000002740 ___xstat        endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    38h ; '8'
.plt:000000000000274B                 jmp     sub_23B0
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000002750 _readdir        proc near               ; CODE XREF: fts_build+1F2↓p
.plt:0000000000002750                 jmp     cs:readdir_ptr
.plt:0000000000002750 _readdir        endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    39h ; '9'
.plt:000000000000275B                 jmp     sub_23B0
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: thunk
.plt:0000000000002760
.plt:0000000000002760 ; int wcwidth(wchar_t c)
.plt:0000000000002760 _wcwidth        proc near               ; CODE XREF: mb_width_aux+3↓p
.plt:0000000000002760                 jmp     cs:wcwidth_ptr
.plt:0000000000002760 _wcwidth        endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    3Ah ; ':'
.plt:000000000000276B                 jmp     sub_23B0
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: thunk
.plt:0000000000002770
.plt:0000000000002770 ; int iswalnum(wint_t wc)
.plt:0000000000002770 _iswalnum       proc near               ; CODE XREF: re_string_context_at+CA↓p
.plt:0000000000002770                                         ; re_string_reconstruct+6FE↓p ...
.plt:0000000000002770                 jmp     cs:iswalnum_ptr
.plt:0000000000002770 _iswalnum       endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    3Bh ; ';'
.plt:000000000000277B                 jmp     sub_23B0
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: thunk
.plt:0000000000002780
.plt:0000000000002780 ; void *malloc(size_t size)
.plt:0000000000002780 _malloc         proc near               ; CODE XREF: argv_iter_init_argv+9↓p
.plt:0000000000002780                                         ; argv_iter_init_stream+9↓p ...
.plt:0000000000002780                 jmp     cs:malloc_ptr
.plt:0000000000002780 _malloc         endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    3Ch ; '<'
.plt:000000000000278B                 jmp     sub_23B0
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000002790 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000002790                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000002790                 jmp     cs:wcrtomb_ptr
.plt:0000000000002790 _wcrtomb        endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    3Dh ; '='
.plt:000000000000279B                 jmp     sub_23B0
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; int fflush(FILE *stream)
.plt:00000000000027A0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000027A0                                         ; rpl_fflush+3B↓j
.plt:00000000000027A0                 jmp     cs:fflush_ptr
.plt:00000000000027A0 _fflush         endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    3Eh ; '>'
.plt:00000000000027AB                 jmp     sub_23B0
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; struct mntent *getmntent(FILE *stream)
.plt:00000000000027B0 _getmntent      proc near               ; CODE XREF: read_file_system_list+4AE↓p
.plt:00000000000027B0                                         ; read_file_system_list+6ED↓p
.plt:00000000000027B0                 jmp     cs:getmntent_ptr
.plt:00000000000027B0 _getmntent      endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    3Fh ; '?'
.plt:00000000000027BB                 jmp     sub_23B0
.plt:00000000000027C0
.plt:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027C0
.plt:00000000000027C0 ; Attributes: thunk
.plt:00000000000027C0
.plt:00000000000027C0 ; FILE *setmntent(const char *file, const char *mode)
.plt:00000000000027C0 _setmntent      proc near               ; CODE XREF: read_file_system_list+48E↓p
.plt:00000000000027C0                 jmp     cs:setmntent_ptr
.plt:00000000000027C0 _setmntent      endp
.plt:00000000000027C0
.plt:00000000000027C6 ; ---------------------------------------------------------------------------
.plt:00000000000027C6                 push    40h ; '@'
.plt:00000000000027CB                 jmp     sub_23B0
.plt:00000000000027D0
.plt:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027D0
.plt:00000000000027D0 ; Attributes: thunk
.plt:00000000000027D0
.plt:00000000000027D0 ; char *nl_langinfo(nl_item item)
.plt:00000000000027D0 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:00000000000027D0                                         ; locale_charset+9↓p
.plt:00000000000027D0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000027D0 _nl_langinfo    endp
.plt:00000000000027D0
.plt:00000000000027D6 ; ---------------------------------------------------------------------------
.plt:00000000000027D6                 push    41h ; 'A'
.plt:00000000000027DB                 jmp     sub_23B0
.plt:00000000000027E0
.plt:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027E0
.plt:00000000000027E0 ; Attributes: thunk
.plt:00000000000027E0
.plt:00000000000027E0 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:00000000000027E0 ___fxstat       proc near               ; CODE XREF: fts_safe_changedir+BD↓p
.plt:00000000000027E0                 jmp     cs:__fxstat_ptr
.plt:00000000000027E0 ___fxstat       endp
.plt:00000000000027E0
.plt:00000000000027E6 ; ---------------------------------------------------------------------------
.plt:00000000000027E6                 push    42h ; 'B'
.plt:00000000000027EB                 jmp     sub_23B0
.plt:00000000000027F0
.plt:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027F0
.plt:00000000000027F0 ; Attributes: thunk
.plt:00000000000027F0
.plt:00000000000027F0 ; int sscanf(const char *s, const char *format, ...)
.plt:00000000000027F0 _sscanf         proc near               ; CODE XREF: read_file_system_list+B5↓p
.plt:00000000000027F0                                         ; read_file_system_list+10D↓p
.plt:00000000000027F0                 jmp     cs:sscanf_ptr
.plt:00000000000027F0 _sscanf         endp
.plt:00000000000027F0
.plt:00000000000027F6 ; ---------------------------------------------------------------------------
.plt:00000000000027F6                 push    43h ; 'C'
.plt:00000000000027FB                 jmp     sub_23B0
.plt:0000000000002800
.plt:0000000000002800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002800
.plt:0000000000002800 ; Attributes: thunk
.plt:0000000000002800
.plt:0000000000002800 ; time_t mktime(struct tm *tp)
.plt:0000000000002800 _mktime         proc near               ; CODE XREF: mktime_z+3B↓p
.plt:0000000000002800                 jmp     cs:mktime_ptr
.plt:0000000000002800 _mktime         endp
.plt:0000000000002800
.plt:0000000000002806 ; ---------------------------------------------------------------------------
.plt:0000000000002806                 push    44h ; 'D'
.plt:000000000000280B                 jmp     sub_23B0
.plt:0000000000002810
.plt:0000000000002810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002810
.plt:0000000000002810 ; Attributes: thunk
.plt:0000000000002810
.plt:0000000000002810 ; int __freading(FILE *fp)
.plt:0000000000002810 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000002810                                         ; rpl_fflush+9↓p
.plt:0000000000002810                 jmp     cs:__freading_ptr
.plt:0000000000002810 ___freading     endp
.plt:0000000000002810
.plt:0000000000002816 ; ---------------------------------------------------------------------------
.plt:0000000000002816                 push    45h ; 'E'
.plt:000000000000281B                 jmp     sub_23B0
.plt:0000000000002820
.plt:0000000000002820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002820
.plt:0000000000002820 ; Attributes: thunk
.plt:0000000000002820
.plt:0000000000002820 ; int fchdir(int fd)
.plt:0000000000002820 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000002820                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000002820                 jmp     cs:fchdir_ptr
.plt:0000000000002820 _fchdir         endp
.plt:0000000000002820
.plt:0000000000002826 ; ---------------------------------------------------------------------------
.plt:0000000000002826                 push    46h ; 'F'
.plt:000000000000282B                 jmp     sub_23B0
.plt:0000000000002830
.plt:0000000000002830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002830
.plt:0000000000002830 ; Attributes: thunk
.plt:0000000000002830
.plt:0000000000002830 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002830 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000002830                                         ; fts_sort+40↓p ...
.plt:0000000000002830                 jmp     cs:realloc_ptr
.plt:0000000000002830 _realloc        endp
.plt:0000000000002830
.plt:0000000000002836 ; ---------------------------------------------------------------------------
.plt:0000000000002836                 push    47h ; 'G'
.plt:000000000000283B                 jmp     sub_23B0
.plt:0000000000002840
.plt:0000000000002840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002840
.plt:0000000000002840 ; Attributes: thunk
.plt:0000000000002840
.plt:0000000000002840 ; char *setlocale(int category, const char *locale)
.plt:0000000000002840 _setlocale      proc near               ; CODE XREF: main+6B↓p
.plt:0000000000002840                                         ; usage+363↓p ...
.plt:0000000000002840                 jmp     cs:setlocale_ptr
.plt:0000000000002840 _setlocale      endp
.plt:0000000000002840
.plt:0000000000002846 ; ---------------------------------------------------------------------------
.plt:0000000000002846                 push    48h ; 'H'
.plt:000000000000284B                 jmp     sub_23B0
.plt:0000000000002850
.plt:0000000000002850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002850
.plt:0000000000002850 ; Attributes: thunk
.plt:0000000000002850
.plt:0000000000002850 ___printf_chk   proc near               ; CODE XREF: print_size+C3↓p
.plt:0000000000002850                                         ; usage+7B↓p ...
.plt:0000000000002850                 jmp     cs:__printf_chk_ptr
.plt:0000000000002850 ___printf_chk   endp
.plt:0000000000002850
.plt:0000000000002856 ; ---------------------------------------------------------------------------
.plt:0000000000002856                 push    49h ; 'I'
.plt:000000000000285B                 jmp     sub_23B0
.plt:0000000000002860
.plt:0000000000002860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002860
.plt:0000000000002860 ; Attributes: thunk
.plt:0000000000002860
.plt:0000000000002860 ; time_t timegm(struct tm *tp)
.plt:0000000000002860 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000002860                 jmp     cs:timegm_ptr
.plt:0000000000002860 _timegm         endp
.plt:0000000000002860
.plt:0000000000002866 ; ---------------------------------------------------------------------------
.plt:0000000000002866                 push    4Ah ; 'J'
.plt:000000000000286B                 jmp     sub_23B0
.plt:0000000000002870
.plt:0000000000002870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002870
.plt:0000000000002870 ; Attributes: thunk
.plt:0000000000002870
.plt:0000000000002870 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000002870 _strftime       proc near               ; CODE XREF: __strftime_internal+3FC↓p
.plt:0000000000002870                 jmp     cs:strftime_ptr
.plt:0000000000002870 _strftime       endp
.plt:0000000000002870
.plt:0000000000002876 ; ---------------------------------------------------------------------------
.plt:0000000000002876                 push    4Bh ; 'K'
.plt:000000000000287B                 jmp     sub_23B0
.plt:0000000000002880
.plt:0000000000002880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002880
.plt:0000000000002880 ; Attributes: thunk
.plt:0000000000002880
.plt:0000000000002880 ; wint_t btowc(int c)
.plt:0000000000002880 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000002880                                         ; parse_expression+11F7↓p ...
.plt:0000000000002880                 jmp     cs:btowc_ptr
.plt:0000000000002880 _btowc          endp
.plt:0000000000002880
.plt:0000000000002886 ; ---------------------------------------------------------------------------
.plt:0000000000002886                 push    4Ch ; 'L'
.plt:000000000000288B                 jmp     sub_23B0
.plt:0000000000002890
.plt:0000000000002890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002890
.plt:0000000000002890 ; Attributes: thunk
.plt:0000000000002890
.plt:0000000000002890 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000002890 _memmove        proc near               ; CODE XREF: human_readable+375↓p
.plt:0000000000002890                                         ; fts_build+3B5↓p ...
.plt:0000000000002890                 jmp     cs:memmove_ptr
.plt:0000000000002890 _memmove        endp
.plt:0000000000002890
.plt:0000000000002896 ; ---------------------------------------------------------------------------
.plt:0000000000002896                 push    4Dh ; 'M'
.plt:000000000000289B                 jmp     sub_23B0
.plt:00000000000028A0
.plt:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028A0
.plt:00000000000028A0 ; Attributes: thunk
.plt:00000000000028A0
.plt:00000000000028A0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000028A0 _error          proc near               ; CODE XREF: main+1A7↓p
.plt:00000000000028A0                                         ; main+2D2↓p ...
.plt:00000000000028A0                 jmp     cs:error_ptr
.plt:00000000000028A0 _error          endp
.plt:00000000000028A0
.plt:00000000000028A6 ; ---------------------------------------------------------------------------
.plt:00000000000028A6                 push    4Eh ; 'N'
.plt:00000000000028AB                 jmp     sub_23B0
.plt:00000000000028B0
.plt:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028B0
.plt:00000000000028B0 ; Attributes: thunk
.plt:00000000000028B0
.plt:00000000000028B0 ; int open(const char *file, int oflag, ...)
.plt:00000000000028B0 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:00000000000028B0                                         ; open_safer+23↓p
.plt:00000000000028B0                 jmp     cs:open_ptr
.plt:00000000000028B0 _open           endp
.plt:00000000000028B0
.plt:00000000000028B6 ; ---------------------------------------------------------------------------
.plt:00000000000028B6                 push    4Fh ; 'O'
.plt:00000000000028BB                 jmp     sub_23B0
.plt:00000000000028C0
.plt:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028C0
.plt:00000000000028C0 ; Attributes: thunk
.plt:00000000000028C0
.plt:00000000000028C0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000028C0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_DD6A↓j
.plt:00000000000028C0                 jmp     cs:fseeko_ptr
.plt:00000000000028C0 _fseeko         endp
.plt:00000000000028C0
.plt:00000000000028C6 ; ---------------------------------------------------------------------------
.plt:00000000000028C6                 push    50h ; 'P'
.plt:00000000000028CB                 jmp     sub_23B0
.plt:00000000000028D0
.plt:00000000000028D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028D0
.plt:00000000000028D0 ; Attributes: thunk
.plt:00000000000028D0
.plt:00000000000028D0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000028D0 _fopen          proc near               ; CODE XREF: add_exclude_file+26↓p
.plt:00000000000028D0                                         ; read_file_system_list+2C↓p
.plt:00000000000028D0                 jmp     cs:fopen_ptr
.plt:00000000000028D0 _fopen          endp
.plt:00000000000028D0
.plt:00000000000028D6 ; ---------------------------------------------------------------------------
.plt:00000000000028D6                 push    51h ; 'Q'
.plt:00000000000028DB                 jmp     sub_23B0
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Attributes: thunk
.plt:00000000000028E0
.plt:00000000000028E0 ; wint_t towlower(wint_t wc)
.plt:00000000000028E0 _towlower       proc near               ; CODE XREF: string_hasher_ci+5B↓p
.plt:00000000000028E0                                         ; mbscasecmp+180↓p ...
.plt:00000000000028E0                 jmp     cs:towlower_ptr
.plt:00000000000028E0 _towlower       endp
.plt:00000000000028E0
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028E6                 push    52h ; 'R'
.plt:00000000000028EB                 jmp     sub_23B0
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; DIR *fdopendir(int fd)
.plt:00000000000028F0 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:00000000000028F0                 jmp     cs:fdopendir_ptr
.plt:00000000000028F0 _fdopendir      endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    53h ; 'S'
.plt:00000000000028FB                 jmp     sub_23B0
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; int unsetenv(const char *name)
.plt:0000000000002900 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000002900                 jmp     cs:unsetenv_ptr
.plt:0000000000002900 _unsetenv       endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    54h ; 'T'
.plt:000000000000290B                 jmp     sub_23B0
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ; wint_t towupper(wint_t wc)
.plt:0000000000002910 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000002910                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000002910                 jmp     cs:towupper_ptr
.plt:0000000000002910 _towupper       endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    55h ; 'U'
.plt:000000000000291B                 jmp     sub_23B0
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000002920 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000002920                 jmp     cs:strtoul_ptr
.plt:0000000000002920 _strtoul        endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    56h ; 'V'
.plt:000000000000292B                 jmp     sub_23B0
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: thunk
.plt:0000000000002930
.plt:0000000000002930 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000002930 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000002930                 jmp     cs:fstatfs_ptr
.plt:0000000000002930 _fstatfs        endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    57h ; 'W'
.plt:000000000000293B                 jmp     sub_23B0
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: thunk
.plt:0000000000002940
.plt:0000000000002940 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002940 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002940                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002940 ___cxa_atexit   endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    58h ; 'X'
.plt:000000000000294B                 jmp     sub_23B0
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: noreturn thunk
.plt:0000000000002950
.plt:0000000000002950 ; void __noreturn exit(int status)
.plt:0000000000002950 _exit           proc near               ; CODE XREF: main+3AD↓p
.plt:0000000000002950                                         ; usage+58↓p
.plt:0000000000002950                 jmp     cs:exit_ptr
.plt:0000000000002950 _exit           endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    59h ; 'Y'
.plt:000000000000295B                 jmp     sub_23B0
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002960 _fwrite         proc near               ; CODE XREF: __strftime_internal+13F8↓p
.plt:0000000000002960                                         ; __strftime_internal+141C↓p ...
.plt:0000000000002960                 jmp     cs:fwrite_ptr
.plt:0000000000002960 _fwrite         endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    5Ah ; 'Z'
.plt:000000000000296B                 jmp     sub_23B0
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ___fprintf_chk  proc near               ; CODE XREF: main+13F5↓p
.plt:0000000000002970                                         ; usage+51↓p ...
.plt:0000000000002970                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002970 ___fprintf_chk  endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    5Bh ; '['
.plt:000000000000297B                 jmp     sub_23B0
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: thunk
.plt:0000000000002980
.plt:0000000000002980 ; int fflush_unlocked(FILE *stream)
.plt:0000000000002980 _fflush_unlocked proc near              ; CODE XREF: print_size+CF↓p
.plt:0000000000002980                 jmp     cs:fflush_unlocked_ptr
.plt:0000000000002980 _fflush_unlocked endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    5Ch ; '\'
.plt:000000000000298B                 jmp     sub_23B0
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002990 _mbsinit        proc near               ; CODE XREF: string_hasher_ci+E5↓p
.plt:0000000000002990                                         ; string_hasher_ci+16F↓p ...
.plt:0000000000002990                 jmp     cs:mbsinit_ptr
.plt:0000000000002990 _mbsinit        endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    5Dh ; ']'
.plt:000000000000299B                 jmp     sub_23B0
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; int iswprint(wint_t wc)
.plt:00000000000029A0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000029A0                 jmp     cs:iswprint_ptr
.plt:00000000000029A0 _iswprint       endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    5Eh ; '^'
.plt:00000000000029AB                 jmp     sub_23B0
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
.plt:00000000000029B0 _hasmntopt      proc near               ; CODE XREF: read_file_system_list+4CA↓p
.plt:00000000000029B0                 jmp     cs:hasmntopt_ptr
.plt:00000000000029B0 _hasmntopt      endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    5Fh ; '_'
.plt:00000000000029BB                 jmp     sub_23B0
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:00000000000029C0 _getdelim       proc near               ; CODE XREF: argv_iter+1E↓p
.plt:00000000000029C0                 jmp     cs:getdelim_ptr
.plt:00000000000029C0 _getdelim       endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    60h ; '`'
.plt:00000000000029CB                 jmp     sub_23B0
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; char *strstr(const char *haystack, const char *needle)
.plt:00000000000029D0 _strstr         proc near               ; CODE XREF: read_file_system_list+D7↓p
.plt:00000000000029D0                 jmp     cs:strstr_ptr
.plt:00000000000029D0 _strstr         endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    61h ; 'a'
.plt:00000000000029DB                 jmp     sub_23B0
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; const __int32_t **__ctype_tolower_loc(void)
.plt:00000000000029E0 ___ctype_tolower_loc proc near          ; CODE XREF: fwrite_lowcase+1B↓p
.plt:00000000000029E0                                         ; mbscasecmp+70↓p ...
.plt:00000000000029E0                 jmp     cs:__ctype_tolower_loc_ptr
.plt:00000000000029E0 ___ctype_tolower_loc endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    62h ; 'b'
.plt:00000000000029EB                 jmp     sub_23B0
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000029F0 ___ctype_b_loc  proc near               ; CODE XREF: add_exclude_fp+145↓p
.plt:00000000000029F0                                         ; mbscasecmp+42↓p ...
.plt:00000000000029F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000029F0 ___ctype_b_loc  endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    63h ; 'c'
.plt:00000000000029FB                 jmp     sub_23B0
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ___sprintf_chk  proc near               ; CODE XREF: human_readable+1C1↓p
.plt:0000000000002A00                                         ; human_readable+332↓p ...
.plt:0000000000002A00                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002A00 ___sprintf_chk  endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    64h ; 'd'
.plt:0000000000002A0B                 jmp     sub_23B0
.plt:0000000000002A0B ; } // starts at 23B0
.plt:0000000000002A0B _plt            ends
.plt:0000000000002A0B
.plt.got:0000000000002A10 ; ===========================================================================
.plt.got:0000000000002A10
.plt.got:0000000000002A10 ; Segment type: Pure code
.plt.got:0000000000002A10 ; Segment permissions: Read/Execute
.plt.got:0000000000002A10 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002A10                 assume cs:_plt_got
.plt.got:0000000000002A10                 ;org 2A10h
.plt.got:0000000000002A10                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002A10
.plt.got:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002A10
.plt.got:0000000000002A10 ; Attributes: thunk
.plt.got:0000000000002A10
.plt.got:0000000000002A10 ; void free(void *ptr)
.plt.got:0000000000002A10 free            proc near               ; CODE XREF: argv_iter_free+E↓p
.plt.got:0000000000002A10                                         ; argv_iter_free+17↓j ...
.plt.got:0000000000002A10 ; __unwind {
.plt.got:0000000000002A10                 jmp     cs:free_ptr
.plt.got:0000000000002A10 free            endp
.plt.got:0000000000002A10
.plt.got:0000000000002A10 ; ---------------------------------------------------------------------------
.plt.got:0000000000002A16                 align 8
.plt.got:0000000000002A18
.plt.got:0000000000002A18 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002A18
.plt.got:0000000000002A18 ; Attributes: thunk
.plt.got:0000000000002A18
.plt.got:0000000000002A18 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002A18 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002A18                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002A18 __cxa_finalize  endp
.plt.got:0000000000002A18
.plt.got:0000000000002A18 ; ---------------------------------------------------------------------------
.plt.got:0000000000002A1E                 align 20h
.plt.got:0000000000002A1E ; } // starts at 2A10
.plt.got:0000000000002A1E _plt_got        ends
.plt.got:0000000000002A1E
.text:0000000000002A20 ; ===========================================================================
.text:0000000000002A20
.text:0000000000002A20 ; Segment type: Pure code
.text:0000000000002A20 ; Segment permissions: Read/Execute
.text:0000000000002A20 _text           segment para public 'CODE' use64
.text:0000000000002A20                 assume cs:_text
.text:0000000000002A20                 ;org 2A20h
.text:0000000000002A20                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002A20
.text:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A20
.text:0000000000002A20 ; Attributes: noreturn
.text:0000000000002A20
.text:0000000000002A20 mbuiter_multi_next_part_0 proc near     ; CODE XREF: mbscasecmp:loc_A5FB↓p
.text:0000000000002A20 ; __unwind {
.text:0000000000002A20                 lea     rcx, __PRETTY_FUNCTION___5133 ; "mbuiter_multi_next"
.text:0000000000002A27                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000002A2E                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000002A35                 sub     rsp, 8
.text:0000000000002A39                 mov     edx, 0B3h       ; line
.text:0000000000002A3E                 call    ___assert_fail
.text:0000000000002A3E ; } // starts at 2A20
.text:0000000000002A3E mbuiter_multi_next_part_0 endp
.text:0000000000002A3E
.text:0000000000002A3E ; ---------------------------------------------------------------------------
.text:0000000000002A43                 align 10h
.text:0000000000002A50
.text:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A50
.text:0000000000002A50
.text:0000000000002A50 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002A50                 public main
.text:0000000000002A50 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002A50
.text:0000000000002A50 var_160         = qword ptr -160h
.text:0000000000002A50 ptr             = qword ptr -158h
.text:0000000000002A50 var_150         = dword ptr -150h
.text:0000000000002A50 var_14C         = dword ptr -14Ch
.text:0000000000002A50 var_148         = qword ptr -148h
.text:0000000000002A50 var_140         = qword ptr -140h
.text:0000000000002A50 var_138         = qword ptr -138h
.text:0000000000002A50 var_130         = qword ptr -130h
.text:0000000000002A50 var_128         = qword ptr -128h
.text:0000000000002A50 stat_buf        = qword ptr -120h
.text:0000000000002A50 longind         = dword ptr -10Ch
.text:0000000000002A50 var_108         = qword ptr -108h
.text:0000000000002A50 var_100         = qword ptr -100h
.text:0000000000002A50 var_F8          = xmmword ptr -0F8h
.text:0000000000002A50 var_E8          = qword ptr -0E8h
.text:0000000000002A50 var_E0          = qword ptr -0E0h
.text:0000000000002A50 var_D8          = qword ptr -0D8h
.text:0000000000002A50 var_D0          = qword ptr -0D0h
.text:0000000000002A50 var_40          = qword ptr -40h
.text:0000000000002A50
.text:0000000000002A50 ; __unwind {
.text:0000000000002A50                 push    r15
.text:0000000000002A52                 push    r14
.text:0000000000002A54                 xor     r15d, r15d
.text:0000000000002A57                 push    r13
.text:0000000000002A59                 push    r12
.text:0000000000002A5B                 mov     r12d, edi
.text:0000000000002A5E                 push    rbp
.text:0000000000002A5F                 push    rbx
.text:0000000000002A60                 mov     rbp, rsi
.text:0000000000002A63                 lea     rbx, jpt_2B8C
.text:0000000000002A6A                 xor     r13d, r13d
.text:0000000000002A6D                 sub     rsp, 138h
.text:0000000000002A74                 mov     rdi, [rsi]
.text:0000000000002A77                 mov     rax, fs:28h
.text:0000000000002A80                 mov     [rsp+168h+var_40], rax
.text:0000000000002A88                 xor     eax, eax
.text:0000000000002A8A                 lea     rax, asc_2269B+1 ; "."
.text:0000000000002A91                 mov     [rsp+168h+var_E0], 0
.text:0000000000002A9D                 lea     r14, [rsp+168h+longind]
.text:0000000000002AA2                 mov     [rsp+168h+var_E8], rax
.text:0000000000002AAA                 call    set_program_name
.text:0000000000002AAF                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000002AB6                 mov     edi, 6          ; category
.text:0000000000002ABB                 call    _setlocale
.text:0000000000002AC0                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002AC7                 lea     rdi, domainname ; "coreutils"
.text:0000000000002ACE                 call    _bindtextdomain
.text:0000000000002AD3                 lea     rdi, domainname ; "coreutils"
.text:0000000000002ADA                 call    _textdomain
.text:0000000000002ADF                 lea     rdi, close_stdout
.text:0000000000002AE6                 call    atexit
.text:0000000000002AEB                 call    new_exclude
.text:0000000000002AF0                 lea     rdi, name       ; "DU_BLOCK_SIZE"
.text:0000000000002AF7                 mov     cs:exclude, rax
.text:0000000000002AFE                 call    _getenv
.text:0000000000002B03                 lea     rdx, output_block_size
.text:0000000000002B0A                 lea     rsi, human_output_opts
.text:0000000000002B11                 mov     rdi, rax        ; nptr
.text:0000000000002B14                 call    human_options
.text:0000000000002B19                 lea     rax, [rsp+168h+var_108]
.text:0000000000002B1E                 mov     byte ptr [rsp+168h+var_14C], 0
.text:0000000000002B23                 mov     [rsp+168h+var_150], 10h
.text:0000000000002B2B                 mov     dword ptr [rsp+168h+ptr], 8
.text:0000000000002B33                 mov     byte ptr [rsp+168h+var_160], 1
.text:0000000000002B38                 mov     byte ptr [rsp+168h+var_148], 0
.text:0000000000002B3D                 mov     [rsp+168h+var_140], rax
.text:0000000000002B42                 nop     word ptr [rax+rax+00h]
.text:0000000000002B48
.text:0000000000002B48 loc_2B48:                               ; CODE XREF: main+146↓j
.text:0000000000002B48                                         ; main+176↓j ...
.text:0000000000002B48                 lea     rcx, long_options ; longopts
.text:0000000000002B4F                 lea     rdx, shortopts  ; "0abd:chHklmst:xB:DLPSX:"
.text:0000000000002B56                 mov     r8, r14         ; longind
.text:0000000000002B59                 mov     rsi, rbp        ; argv
.text:0000000000002B5C                 mov     edi, r12d       ; argc
.text:0000000000002B5F                 mov     [rsp+168h+longind], 0FFFFFFFFh
.text:0000000000002B67                 call    _getopt_long
.text:0000000000002B6C                 cmp     eax, 0FFFFFFFFh
.text:0000000000002B6F                 jz      loc_2EE6
.text:0000000000002B75                 add     eax, 83h        ; switch 267 cases
.text:0000000000002B7A                 cmp     eax, 10Ah
.text:0000000000002B7F                 ja      def_2B8C        ; jumptable 0000000000002B8C default case, cases -129-47,49-65,67,69-71,73-75,77-79,81,82,84-87,89-96,101-103,105,106,110-114,117-119,121-127,132
.text:0000000000002B85                 movsxd  rax, ds:(jpt_2B8C - 20FC0h)[rbx+rax*4]
.text:0000000000002B89                 add     rax, rbx
.text:0000000000002B8C                 jmp     rax             ; switch jump
.text:0000000000002B8E ; ---------------------------------------------------------------------------
.text:0000000000002B8E
.text:0000000000002B8E loc_2B8E:                               ; CODE XREF: main+13C↑j
.text:0000000000002B8E                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002B8E                 mov     dword ptr [rsp+168h+ptr], 48h ; 'H' ; jumptable 0000000000002B8C case 120
.text:0000000000002B96                 jmp     short loc_2B48
.text:0000000000002B98 ; ---------------------------------------------------------------------------
.text:0000000000002B98
.text:0000000000002B98 loc_2B98:                               ; CODE XREF: main+13C↑j
.text:0000000000002B98                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002B98                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 116
.text:0000000000002B9F                 lea     r8, aKkmmgtpezy0 ; "kKmMGTPEZY0"
.text:0000000000002BA6                 lea     rcx, opt_threshold
.text:0000000000002BAD                 xor     edx, edx
.text:0000000000002BAF                 xor     esi, esi
.text:0000000000002BB1                 call    xstrtoimax
.text:0000000000002BB6                 test    eax, eax
.text:0000000000002BB8                 jnz     loc_3E54
.text:0000000000002BBE                 cmp     cs:opt_threshold, 0
.text:0000000000002BC6                 jnz     short loc_2B48
.text:0000000000002BC8                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002BCF                 cmp     byte ptr [rax], 2Dh ; '-'
.text:0000000000002BD2                 jnz     loc_2B48
.text:0000000000002BD8                 lea     rsi, msgid      ; "invalid --threshold argument '-0'"
.text:0000000000002BDF                 mov     edx, 5          ; category
.text:0000000000002BE4                 xor     edi, edi        ; domainname
.text:0000000000002BE6                 call    _dcgettext
.text:0000000000002BEB                 xor     esi, esi        ; errnum
.text:0000000000002BED                 mov     rdx, rax        ; format
.text:0000000000002BF0                 mov     edi, 1          ; status
.text:0000000000002BF5                 xor     eax, eax
.text:0000000000002BF7                 call    _error
.text:0000000000002BFC
.text:0000000000002BFC loc_2BFC:                               ; CODE XREF: main+13C↑j
.text:0000000000002BFC                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002BFC                 mov     byte ptr [rsp+168h+var_14C], 1 ; jumptable 0000000000002B8C case 115
.text:0000000000002C01                 jmp     loc_2B48
.text:0000000000002C06 ; ---------------------------------------------------------------------------
.text:0000000000002C06
.text:0000000000002C06 loc_2C06:                               ; CODE XREF: main+13C↑j
.text:0000000000002C06                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C06                 mov     cs:human_output_opts, r15d ; jumptable 0000000000002B8C case 109
.text:0000000000002C0D                 mov     cs:output_block_size, 100000h
.text:0000000000002C18                 jmp     loc_2B48
.text:0000000000002C1D ; ---------------------------------------------------------------------------
.text:0000000000002C1D
.text:0000000000002C1D loc_2C1D:                               ; CODE XREF: main+13C↑j
.text:0000000000002C1D                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C1D                 mov     cs:opt_count_all, 1 ; jumptable 0000000000002B8C case 108
.text:0000000000002C24                 jmp     loc_2B48
.text:0000000000002C29 ; ---------------------------------------------------------------------------
.text:0000000000002C29
.text:0000000000002C29 loc_2C29:                               ; CODE XREF: main+13C↑j
.text:0000000000002C29                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C29                 mov     cs:human_output_opts, r15d ; jumptable 0000000000002B8C case 107
.text:0000000000002C30                 mov     cs:output_block_size, 400h
.text:0000000000002C3B                 jmp     loc_2B48
.text:0000000000002C40 ; ---------------------------------------------------------------------------
.text:0000000000002C40
.text:0000000000002C40 loc_2C40:                               ; CODE XREF: main+13C↑j
.text:0000000000002C40                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C40                 mov     cs:human_output_opts, 0B0h ; jumptable 0000000000002B8C case 104
.text:0000000000002C4A                 mov     cs:output_block_size, 1
.text:0000000000002C55                 jmp     loc_2B48
.text:0000000000002C5A ; ---------------------------------------------------------------------------
.text:0000000000002C5A
.text:0000000000002C5A loc_2C5A:                               ; CODE XREF: main+13C↑j
.text:0000000000002C5A                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C5A                 mov     rcx, [rsp+168h+var_140] ; jumptable 0000000000002B8C case 100
.text:0000000000002C5F                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000002C66                 xor     r8d, r8d
.text:0000000000002C69                 xor     edx, edx
.text:0000000000002C6B                 xor     esi, esi
.text:0000000000002C6D                 call    xstrtoul
.text:0000000000002C72                 test    eax, eax
.text:0000000000002C74                 jnz     loc_3772
.text:0000000000002C7A                 mov     rax, [rsp+168h+var_108]
.text:0000000000002C7F                 mov     byte ptr [rsp+168h+var_148], 1
.text:0000000000002C84                 mov     cs:max_depth, rax
.text:0000000000002C8B                 jmp     loc_2B48
.text:0000000000002C90 ; ---------------------------------------------------------------------------
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: main+13C↑j
.text:0000000000002C90                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C90                 mov     cs:print_grand_total, 1 ; jumptable 0000000000002B8C case 99
.text:0000000000002C97                 jmp     loc_2B48
.text:0000000000002C9C ; ---------------------------------------------------------------------------
.text:0000000000002C9C
.text:0000000000002C9C loc_2C9C:                               ; CODE XREF: main+13C↑j
.text:0000000000002C9C                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002C9C                 mov     cs:apparent_size, 1 ; jumptable 0000000000002B8C case 98
.text:0000000000002CA3                 mov     cs:human_output_opts, r15d
.text:0000000000002CAA                 mov     cs:output_block_size, 1
.text:0000000000002CB5                 jmp     loc_2B48
.text:0000000000002CBA ; ---------------------------------------------------------------------------
.text:0000000000002CBA
.text:0000000000002CBA loc_2CBA:                               ; CODE XREF: main+13C↑j
.text:0000000000002CBA                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002CBA                 mov     cs:opt_all, 1   ; jumptable 0000000000002B8C case 97
.text:0000000000002CC1                 jmp     loc_2B48
.text:0000000000002CC6 ; ---------------------------------------------------------------------------
.text:0000000000002CC6
.text:0000000000002CC6 loc_2CC6:                               ; CODE XREF: main+13C↑j
.text:0000000000002CC6                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002CC6                 mov     rdx, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 88
.text:0000000000002CCD                 mov     rsi, cs:exclude
.text:0000000000002CD4                 mov     r8d, 0Ah
.text:0000000000002CDA                 lea     rdi, add_exclude
.text:0000000000002CE1                 mov     ecx, 10000000h
.text:0000000000002CE6                 call    add_exclude_file
.text:0000000000002CEB                 test    eax, eax
.text:0000000000002CED                 jz      loc_2B48
.text:0000000000002CF3                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000002CFA                 mov     esi, 3
.text:0000000000002CFF                 xor     edi, edi
.text:0000000000002D01                 call    quotearg_n_style_colon
.text:0000000000002D06                 mov     [rsp+168h+var_160], rax
.text:0000000000002D0B                 call    ___errno_location
.text:0000000000002D10                 mov     rcx, [rsp+168h+var_160]
.text:0000000000002D15                 mov     esi, [rax]      ; errnum
.text:0000000000002D17                 lea     rdx, aS_0+2     ; format
.text:0000000000002D1E                 xor     edi, edi        ; status
.text:0000000000002D20                 xor     eax, eax
.text:0000000000002D22                 call    _error
.text:0000000000002D27                 mov     byte ptr [rsp+168h+var_160], 0
.text:0000000000002D2C                 jmp     loc_2B48
.text:0000000000002D31 ; ---------------------------------------------------------------------------
.text:0000000000002D31
.text:0000000000002D31 loc_2D31:                               ; CODE XREF: main+13C↑j
.text:0000000000002D31                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002D31                 mov     cs:opt_separate_dirs, 1 ; jumptable 0000000000002B8C case 83
.text:0000000000002D38                 jmp     loc_2B48
.text:0000000000002D3D ; ---------------------------------------------------------------------------
.text:0000000000002D3D
.text:0000000000002D3D loc_2D3D:                               ; CODE XREF: main+13C↑j
.text:0000000000002D3D                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002D3D                 mov     [rsp+168h+var_150], 10h ; jumptable 0000000000002B8C case 80
.text:0000000000002D45                 jmp     loc_2B48
.text:0000000000002D4A ; ---------------------------------------------------------------------------
.text:0000000000002D4A
.text:0000000000002D4A loc_2D4A:                               ; CODE XREF: main+13C↑j
.text:0000000000002D4A                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002D4A                 mov     [rsp+168h+var_150], 2 ; jumptable 0000000000002B8C case 76
.text:0000000000002D52                 jmp     loc_2B48
.text:0000000000002D57 ; ---------------------------------------------------------------------------
.text:0000000000002D57
.text:0000000000002D57 loc_2D57:                               ; CODE XREF: main+13C↑j
.text:0000000000002D57                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002D57                 mov     [rsp+168h+var_150], 11h ; jumptable 0000000000002B8C cases 68,72
.text:0000000000002D5F                 jmp     loc_2B48
.text:0000000000002D64 ; ---------------------------------------------------------------------------
.text:0000000000002D64
.text:0000000000002D64 loc_2D64:                               ; CODE XREF: main+13C↑j
.text:0000000000002D64                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002D64                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 66
.text:0000000000002D6B                 lea     rdx, output_block_size
.text:0000000000002D72                 lea     rsi, human_output_opts
.text:0000000000002D79                 call    human_options
.text:0000000000002D7E                 test    eax, eax
.text:0000000000002D80                 jz      loc_2B48
.text:0000000000002D86                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D8D                 mov     esi, [rsp+168h+longind]
.text:0000000000002D91                 lea     rcx, long_options
.text:0000000000002D98                 mov     edx, 42h ; 'B'
.text:0000000000002D9D                 mov     edi, eax
.text:0000000000002D9F                 call    xstrtol_fatal
.text:0000000000002DA4 ; ---------------------------------------------------------------------------
.text:0000000000002DA4
.text:0000000000002DA4 loc_2DA4:                               ; CODE XREF: main+13C↑j
.text:0000000000002DA4                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002DA4                 mov     cs:opt_nul_terminate_output, 1 ; jumptable 0000000000002B8C case 48
.text:0000000000002DAB                 jmp     loc_2B48
.text:0000000000002DB0 ; ---------------------------------------------------------------------------
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: main+13C↑j
.text:0000000000002DB0                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002DB0                 lea     rax, aJimMeyering ; jumptable 0000000000002B8C case -131
.text:0000000000002DB7                 sub     rsp, 8
.text:0000000000002DBB                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DC2                 push    0
.text:0000000000002DC4                 mov     rcx, cs:Version
.text:0000000000002DCB                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002DD2                 push    rax
.text:0000000000002DD3                 lea     rax, aPaulEggert ; "Paul Eggert"
.text:0000000000002DDA                 lea     r8, aTorbjornGranlu ; "Torbjorn Granlund"
.text:0000000000002DE1                 lea     rdx, unk_1FB07
.text:0000000000002DE8                 lea     rsi, aDu        ; "du"
.text:0000000000002DEF                 push    rax
.text:0000000000002DF0                 xor     eax, eax
.text:0000000000002DF2                 call    version_etc
.text:0000000000002DF7                 add     rsp, 20h
.text:0000000000002DFB                 xor     edi, edi        ; status
.text:0000000000002DFD                 call    _exit
.text:0000000000002E02 ; ---------------------------------------------------------------------------
.text:0000000000002E02
.text:0000000000002E02 loc_2E02:                               ; CODE XREF: main+13C↑j
.text:0000000000002E02                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002E02                 mov     cs:opt_inodes, 1 ; jumptable 0000000000002B8C case 135
.text:0000000000002E09                 jmp     loc_2B48
.text:0000000000002E0E ; ---------------------------------------------------------------------------
.text:0000000000002E0E
.text:0000000000002E0E loc_2E0E:                               ; CODE XREF: main+13C↑j
.text:0000000000002E0E                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002E0E                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 134
.text:0000000000002E15                 mov     cs:time_style, rax
.text:0000000000002E1C                 jmp     loc_2B48
.text:0000000000002E21 ; ---------------------------------------------------------------------------
.text:0000000000002E21
.text:0000000000002E21 loc_2E21:                               ; CODE XREF: main+13C↑j
.text:0000000000002E21                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002E21                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 133
.text:0000000000002E28                 xor     eax, eax
.text:0000000000002E2A                 mov     cs:opt_time, 1
.text:0000000000002E31                 test    rsi, rsi
.text:0000000000002E34                 jz      short loc_2E67
.text:0000000000002E36                 mov     r9, cs:argmatch_die
.text:0000000000002E3D                 lea     rdx, time_args
.text:0000000000002E44                 lea     rcx, time_types
.text:0000000000002E4B                 lea     rdi, aTime      ; "--time"
.text:0000000000002E52                 mov     r8d, 4
.text:0000000000002E58                 call    __xargmatch_internal
.text:0000000000002E5D                 lea     rdx, time_types
.text:0000000000002E64                 mov     eax, [rdx+rax*4]
.text:0000000000002E67
.text:0000000000002E67 loc_2E67:                               ; CODE XREF: main+3E4↑j
.text:0000000000002E67                 lea     rdi, aTz        ; "TZ"
.text:0000000000002E6E                 mov     cs:time_type, eax
.text:0000000000002E74                 call    _getenv
.text:0000000000002E79                 mov     rdi, rax        ; src
.text:0000000000002E7C                 call    tzalloc
.text:0000000000002E81                 mov     cs:localtz, rax
.text:0000000000002E88                 jmp     loc_2B48
.text:0000000000002E8D ; ---------------------------------------------------------------------------
.text:0000000000002E8D
.text:0000000000002E8D loc_2E8D:                               ; CODE XREF: main+13C↑j
.text:0000000000002E8D                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002E8D                 mov     cs:human_output_opts, 90h ; jumptable 0000000000002B8C case 131
.text:0000000000002E97                 mov     cs:output_block_size, 1
.text:0000000000002EA2                 jmp     loc_2B48
.text:0000000000002EA7 ; ---------------------------------------------------------------------------
.text:0000000000002EA7
.text:0000000000002EA7 loc_2EA7:                               ; CODE XREF: main+13C↑j
.text:0000000000002EA7                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002EA7                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 129
.text:0000000000002EAE                 mov     rdi, cs:exclude
.text:0000000000002EB5                 mov     edx, 10000000h
.text:0000000000002EBA                 call    add_exclude
.text:0000000000002EBF                 jmp     loc_2B48
.text:0000000000002EC4 ; ---------------------------------------------------------------------------
.text:0000000000002EC4
.text:0000000000002EC4 loc_2EC4:                               ; CODE XREF: main+13C↑j
.text:0000000000002EC4                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002EC4                 mov     cs:apparent_size, 1 ; jumptable 0000000000002B8C case 128
.text:0000000000002ECB                 jmp     loc_2B48
.text:0000000000002ED0 ; ---------------------------------------------------------------------------
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: main+13C↑j
.text:0000000000002ED0                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000002ED0                 mov     r13, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000002B8C case 130
.text:0000000000002ED7                 jmp     loc_2B48
.text:0000000000002EDC ; ---------------------------------------------------------------------------
.text:0000000000002EDC
.text:0000000000002EDC def_2B8C:                               ; CODE XREF: main+12F↑j
.text:0000000000002EDC                                         ; main+13C↑j
.text:0000000000002EDC                                         ; DATA XREF: ...
.text:0000000000002EDC                 mov     byte ptr [rsp+168h+var_160], 0 ; jumptable 0000000000002B8C default case, cases -129-47,49-65,67,69-71,73-75,77-79,81,82,84-87,89-96,101-103,105,106,110-114,117-119,121-127,132
.text:0000000000002EE1                 jmp     loc_2B48
.text:0000000000002EE6 ; ---------------------------------------------------------------------------
.text:0000000000002EE6
.text:0000000000002EE6 loc_2EE6:                               ; CODE XREF: main+11F↑j
.text:0000000000002EE6                 cmp     byte ptr [rsp+168h+var_160], 0
.text:0000000000002EEB                 jz      loc_3F2C
.text:0000000000002EF1                 cmp     cs:opt_all, 0
.text:0000000000002EF8                 jz      loc_371E
.text:0000000000002EFE                 cmp     byte ptr [rsp+168h+var_14C], 0
.text:0000000000002F03                 jnz     loc_3F0B
.text:0000000000002F09
.text:0000000000002F09 loc_2F09:                               ; CODE XREF: main+CDE↓j
.text:0000000000002F09                                         ; main+FC4↓j ...
.text:0000000000002F09                 cmp     cs:opt_inodes, 0
.text:0000000000002F10                 jz      short loc_2F2A
.text:0000000000002F12                 cmp     cs:apparent_size, 0
.text:0000000000002F19                 jnz     loc_3A19
.text:0000000000002F1F
.text:0000000000002F1F loc_2F1F:                               ; CODE XREF: main+FEA↓j
.text:0000000000002F1F                 mov     cs:output_block_size, 1
.text:0000000000002F2A
.text:0000000000002F2A loc_2F2A:                               ; CODE XREF: main+4C0↑j
.text:0000000000002F2A                 cmp     cs:opt_time, 0
.text:0000000000002F31                 jz      short loc_2F5D
.text:0000000000002F33                 cmp     cs:time_style, 0
.text:0000000000002F3B                 jz      loc_3BE8
.text:0000000000002F41                 mov     r15, cs:time_style
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: main+1206↓j
.text:0000000000002F48                                         ; main+1314↓j
.text:0000000000002F48                 cmp     byte ptr [r15], 2Bh ; '+'
.text:0000000000002F4C                 jnz     loc_3B05
.text:0000000000002F52
.text:0000000000002F52 loc_2F52:                               ; CODE XREF: main+130B↓j
.text:0000000000002F52                 add     r15, 1
.text:0000000000002F56                 mov     cs:time_format, r15
.text:0000000000002F5D
.text:0000000000002F5D loc_2F5D:                               ; CODE XREF: main+4E1↑j
.text:0000000000002F5D                                         ; main+10FB↓j ...
.text:0000000000002F5D                 test    r13, r13
.text:0000000000002F60                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002F67                 jz      loc_3A97
.text:0000000000002F6D                 cmp     r12d, eax
.text:0000000000002F70                 jg      loc_3DE9
.text:0000000000002F76                 lea     rsi, asc_22589+1 ; s2
.text:0000000000002F7D                 mov     rdi, r13        ; s1
.text:0000000000002F80                 call    _strcmp
.text:0000000000002F85                 test    eax, eax
.text:0000000000002F87                 jnz     loc_38BD
.text:0000000000002F8D
.text:0000000000002F8D loc_2F8D:                               ; CODE XREF: main+E86↓j
.text:0000000000002F8D                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:0000000000002F94                 call    argv_iter_init_stream
.text:0000000000002F99                 mov     cs:hash_all, 1
.text:0000000000002FA0                 mov     r15, rax
.text:0000000000002FA3
.text:0000000000002FA3 loc_2FA3:                               ; CODE XREF: main+1080↓j
.text:0000000000002FA3                 test    r15, r15
.text:0000000000002FA6                 jz      loc_3DDF
.text:0000000000002FAC                 call    di_set_alloc
.text:0000000000002FB1                 test    rax, rax
.text:0000000000002FB4                 mov     cs:di_files, rax
.text:0000000000002FBB                 jz      loc_3DDF
.text:0000000000002FC1                 cmp     cs:opt_count_all, 0
.text:0000000000002FC8                 jnz     loc_312F
.text:0000000000002FCE                 cmp     cs:hash_all, 0
.text:0000000000002FD5                 jz      loc_312F
.text:0000000000002FDB
.text:0000000000002FDB loc_2FDB:                               ; CODE XREF: main+6E7↓j
.text:0000000000002FDB                 mov     eax, dword ptr [rsp+168h+ptr]
.text:0000000000002FDF                 or      eax, [rsp+168h+var_150]
.text:0000000000002FE3                 mov     r12, r14
.text:0000000000002FE6                 mov     [rsp+168h+var_14C], eax
.text:0000000000002FEA                 movzx   eax, byte ptr [rsp+168h+var_160]
.text:0000000000002FEF                 mov     byte ptr [rsp+168h+var_150], al
.text:0000000000002FF3                 lea     rax, [rsp+168h+var_D8]
.text:0000000000002FFB                 mov     [rsp+168h+stat_buf], rax
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: main+A58↓j
.text:0000000000003000                                         ; main+A96↓j ...
.text:0000000000003000                 mov     rsi, r12
.text:0000000000003003                 mov     rdi, r15
.text:0000000000003006                 call    argv_iter
.text:000000000000300B                 test    rax, rax
.text:000000000000300E                 mov     rbx, rax
.text:0000000000003011                 jz      loc_3529
.text:0000000000003017                 test    r13, r13
.text:000000000000301A                 jz      loc_34B0
.text:0000000000003020                 lea     rdx, asc_22589+1 ; "-"
.text:0000000000003027                 mov     ecx, 2
.text:000000000000302C                 mov     rsi, r13
.text:000000000000302F                 mov     rdi, rdx
.text:0000000000003032                 repe cmpsb
.text:0000000000003034                 setnbe  al
.text:0000000000003037                 sbb     al, 0
.text:0000000000003039                 test    al, al
.text:000000000000303B                 jnz     short loc_3057
.text:000000000000303D                 mov     ecx, 2
.text:0000000000003042                 mov     rsi, rbx
.text:0000000000003045                 mov     rdi, rdx
.text:0000000000003048                 repe cmpsb
.text:000000000000304A                 setnbe  al
.text:000000000000304D                 sbb     al, 0
.text:000000000000304F                 test    al, al
.text:0000000000003051                 jz      loc_3418
.text:0000000000003057
.text:0000000000003057 loc_3057:                               ; CODE XREF: main+5EB↑j
.text:0000000000003057                 cmp     byte ptr [rbx], 0
.text:000000000000305A                 jz      loc_3458
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: main+A63↓j
.text:0000000000003060                 lea     rax, temp_argv_7378
.text:0000000000003067                 mov     esi, [rsp+168h+var_14C]
.text:000000000000306B                 xor     edx, edx
.text:000000000000306D                 mov     rdi, rax
.text:0000000000003070                 mov     [rax], rbx
.text:0000000000003073                 call    xfts_open
.text:0000000000003078                 mov     [rsp+168h+ptr], rax
.text:000000000000307D                 movzx   eax, byte ptr [rsp+168h+var_160]
.text:0000000000003082                 mov     [rsp+168h+var_140], r15
.text:0000000000003087                 mov     [rsp+168h+var_148], r13
.text:000000000000308C                 mov     [rsp+168h+var_138], r12
.text:0000000000003091                 mov     r15d, eax
.text:0000000000003094
.text:0000000000003094 loc_3094:                               ; CODE XREF: main+9B3↓j
.text:0000000000003094                 mov     rdi, [rsp+168h+ptr]
.text:0000000000003099                 call    rpl_fts_read
.text:000000000000309E                 test    rax, rax
.text:00000000000030A1                 mov     r14, rax
.text:00000000000030A4                 jz      loc_36C6
.text:00000000000030AA                 movzx   ebp, word ptr [rax+70h]
.text:00000000000030AE                 mov     r13, [rax+38h]
.text:00000000000030B2                 cmp     ebp, 4
.text:00000000000030B5                 jz      loc_3688
.text:00000000000030BB                 cmp     ebp, 6
.text:00000000000030BE                 movzx   r12d, byte ptr [rsp+168h+var_160]
.text:00000000000030C4                 jz      loc_31B0
.text:00000000000030CA                 mov     rdi, cs:exclude
.text:00000000000030D1                 mov     rsi, r13
.text:00000000000030D4                 call    excluded_file_name
.text:00000000000030D9                 test    al, al
.text:00000000000030DB                 jnz     short loc_311B
.text:00000000000030DD                 cmp     ebp, 0Bh
.text:00000000000030E0                 jz      loc_3BB8
.text:00000000000030E6
.text:00000000000030E6 loc_30E6:                               ; CODE XREF: main+1193↓j
.text:00000000000030E6                 cmp     ebp, 0Ah
.text:00000000000030E9                 setz    r8b
.text:00000000000030ED                 cmp     ebp, 0Dh
.text:00000000000030F0                 setz    al
.text:00000000000030F3                 or      r8b, al
.text:00000000000030F6                 mov     r12d, r8d
.text:00000000000030F9                 jnz     loc_399A
.text:00000000000030FF                 mov     rax, [rsp+168h+ptr]
.text:0000000000003104                 test    byte ptr [rax+48h], 40h
.text:0000000000003108                 jz      short loc_313C
.text:000000000000310A                 cmp     qword ptr [r14+58h], 0
.text:000000000000310F                 jle     short loc_313C
.text:0000000000003111                 mov     rcx, [r14+78h]
.text:0000000000003115                 cmp     [rax+18h], rcx
.text:0000000000003119                 jz      short loc_313C
.text:000000000000311B
.text:000000000000311B loc_311B:                               ; CODE XREF: main+68B↑j
.text:000000000000311B                                         ; main+73A↓j
.text:000000000000311B                 sub     ebp, 1
.text:000000000000311E                 jz      loc_3A3F
.text:0000000000003124
.text:0000000000003124 loc_3124:                               ; CODE XREF: main+751↓j
.text:0000000000003124                                         ; main+100F↓j ...
.text:0000000000003124                 movzx   r12d, byte ptr [rsp+168h+var_160]
.text:000000000000312A                 jmp     loc_3400
.text:000000000000312F ; ---------------------------------------------------------------------------
.text:000000000000312F
.text:000000000000312F loc_312F:                               ; CODE XREF: main+578↑j
.text:000000000000312F                                         ; main+585↑j
.text:000000000000312F                 or      dword ptr [rsp+168h+ptr], 100h
.text:0000000000003137                 jmp     loc_2FDB
.text:000000000000313C ; ---------------------------------------------------------------------------
.text:000000000000313C
.text:000000000000313C loc_313C:                               ; CODE XREF: main+6B8↑j
.text:000000000000313C                                         ; main+6BF↑j ...
.text:000000000000313C                 cmp     cs:opt_count_all, 0
.text:0000000000003143                 jnz     short loc_318C
.text:0000000000003145                 cmp     cs:hash_all, 0
.text:000000000000314C                 jnz     short loc_316B
.text:000000000000314E                 mov     eax, [r14+90h]
.text:0000000000003155                 and     eax, 0F000h
.text:000000000000315A                 cmp     eax, 4000h
.text:000000000000315F                 jz      short loc_318C
.text:0000000000003161                 cmp     qword ptr [r14+88h], 1
.text:0000000000003169                 jbe     short loc_318C
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: main+6FC↑j
.text:000000000000316B                 mov     rdx, [r14+80h]
.text:0000000000003172                 mov     rsi, [r14+78h]
.text:0000000000003176                 mov     rdi, cs:di_files
.text:000000000000317D                 call    di_set_insert
.text:0000000000003182                 test    eax, eax
.text:0000000000003184                 js      loc_3DDF
.text:000000000000318A                 jz      short loc_311B
.text:000000000000318C
.text:000000000000318C loc_318C:                               ; CODE XREF: main+6F3↑j
.text:000000000000318C                                         ; main+70F↑j ...
.text:000000000000318C                 cmp     ebp, 2
.text:000000000000318F                 jz      loc_3C8D
.text:0000000000003195                 cmp     ebp, 7
.text:0000000000003198                 jz      loc_3C62
.text:000000000000319E                 cmp     ebp, 1
.text:00000000000031A1                 jz      short loc_3124
.text:00000000000031A3                 movzx   r12d, byte ptr [rsp+168h+var_160]
.text:00000000000031A9                 nop     dword ptr [rax+00000000h]
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: main+674↑j
.text:00000000000031B0                                         ; main+C71↓j ...
.text:00000000000031B0                 mov     eax, cs:time_type
.text:00000000000031B6                 test    eax, eax
.text:00000000000031B8                 jnz     loc_350D
.text:00000000000031BE                 mov     rcx, [r14+0D0h]
.text:00000000000031C5                 mov     r9, [r14+0D8h]
.text:00000000000031CC
.text:00000000000031CC loc_31CC:                               ; CODE XREF: main+AD4↓j
.text:00000000000031CC                                         ; main+1042↓j
.text:00000000000031CC                 cmp     cs:apparent_size, 0
.text:00000000000031D3                 jz      loc_34FD
.text:00000000000031D9                 cmp     qword ptr [r14+0A8h], 0
.text:00000000000031E1                 mov     ebx, 0
.text:00000000000031E6                 cmovns  rbx, [r14+0A8h]
.text:00000000000031EE
.text:00000000000031EE loc_31EE:                               ; CODE XREF: main+AB8↓j
.text:00000000000031EE                 mov     rdx, cs:n_alloc_7286
.text:00000000000031F5                 mov     r14, [r14+58h]
.text:00000000000031F9                 mov     [rsp+168h+var_108], rbx
.text:00000000000031FE                 mov     [rsp+168h+var_100], 1
.text:0000000000003207                 mov     qword ptr [rsp+168h+var_F8], rcx
.text:000000000000320C                 mov     qword ptr [rsp+168h+var_F8+8], r9
.text:0000000000003211                 test    rdx, rdx
.text:0000000000003214                 jz      loc_3653
.text:000000000000321A                 mov     rax, cs:prev_level
.text:0000000000003221                 cmp     r14, rax
.text:0000000000003224                 jz      loc_3300
.text:000000000000322A                 jbe     loc_37B3
.text:0000000000003230                 cmp     r14, rdx
.text:0000000000003233                 jb      short loc_329A
.text:0000000000003235                 mov     edx, 80h
.text:000000000000323A                 xor     esi, esi
.text:000000000000323C                 mov     rdi, cs:dulvl_7287
.text:0000000000003243                 mov     rax, rdx
.text:0000000000003246                 mul     r14
.text:0000000000003249                 jo      loc_3EB9
.text:000000000000324F
.text:000000000000324F loc_324F:                               ; CODE XREF: main+146E↓j
.text:000000000000324F                 test    rax, rax
.text:0000000000003252                 mov     [rsp+168h+var_128], r9
.text:0000000000003257                 mov     [rsp+168h+var_130], rcx
.text:000000000000325C                 js      loc_3DDF
.text:0000000000003262                 test    rsi, rsi
.text:0000000000003265                 jnz     loc_3DDF
.text:000000000000326B                 mov     rsi, r14
.text:000000000000326E                 shl     rsi, 7
.text:0000000000003272                 call    xrealloc
.text:0000000000003277                 mov     cs:dulvl_7287, rax
.text:000000000000327E                 lea     rax, [r14+r14]
.text:0000000000003282                 mov     r9, [rsp+168h+var_128]
.text:0000000000003287                 mov     rcx, [rsp+168h+var_130]
.text:000000000000328C                 mov     cs:n_alloc_7286, rax
.text:0000000000003293                 mov     rax, cs:prev_level
.text:000000000000329A
.text:000000000000329A loc_329A:                               ; CODE XREF: main+7E3↑j
.text:000000000000329A                 lea     rdx, [rax+1]
.text:000000000000329E                 cmp     r14, rdx
.text:00000000000032A1                 jb      short loc_3300
.text:00000000000032A3                 shl     rax, 6
.text:00000000000032A7                 add     rax, cs:dulvl_7287
.text:00000000000032AE                 xchg    ax, ax
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: main+8AD↓j
.text:00000000000032B0                 mov     rsi, 8000000000000000h
.text:00000000000032BA                 add     rdx, 1
.text:00000000000032BE                 mov     qword ptr [rax+40h], 0
.text:00000000000032C6                 mov     qword ptr [rax+48h], 0
.text:00000000000032CE                 mov     [rax+50h], rsi
.text:00000000000032D2                 add     rax, 40h ; '@'
.text:00000000000032D6                 mov     qword ptr [rax+18h], 0FFFFFFFFFFFFFFFFh
.text:00000000000032DE                 mov     qword ptr [rax+20h], 0
.text:00000000000032E6                 mov     qword ptr [rax+28h], 0
.text:00000000000032EE                 mov     [rax+30h], rsi
.text:00000000000032F2                 mov     qword ptr [rax+38h], 0FFFFFFFFFFFFFFFFh
.text:00000000000032FA                 cmp     r14, rdx
.text:00000000000032FD                 jnb     short loc_32B0
.text:00000000000032FF                 nop
.text:0000000000003300
.text:0000000000003300 loc_3300:                               ; CODE XREF: main+7D4↑j
.text:0000000000003300                                         ; main+851↑j ...
.text:0000000000003300                 cmp     cs:opt_separate_dirs, 0
.text:0000000000003307                 mov     cs:prev_level, r14
.text:000000000000330E                 jz      short loc_331A
.text:0000000000003310                 mov     eax, ebp
.text:0000000000003312                 and     eax, 0FFFFFFFDh
.text:0000000000003315                 cmp     eax, 4
.text:0000000000003318                 jz      short loc_3360
.text:000000000000331A
.text:000000000000331A loc_331A:                               ; CODE XREF: main+8BE↑j
.text:000000000000331A                 mov     rax, r14
.text:000000000000331D                 xor     esi, esi
.text:000000000000331F                 mov     rdx, rbx
.text:0000000000003322                 shl     rax, 6
.text:0000000000003326                 add     rax, cs:dulvl_7287
.text:000000000000332D                 add     rdx, [rax]
.text:0000000000003330                 setb    sil
.text:0000000000003334                 test    rsi, rsi
.text:0000000000003337                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000333E                 cmovnz  rdx, rsi
.text:0000000000003342                 add     qword ptr [rax+8], 1
.text:0000000000003347                 cmp     rcx, [rax+10h]
.text:000000000000334B                 mov     [rax], rdx
.text:000000000000334E                 jg      loc_3646
.text:0000000000003354                 jl      short loc_3360
.text:0000000000003356                 cmp     [rax+18h], r9d
.text:000000000000335A                 js      loc_3646
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: main+8C8↑j
.text:0000000000003360                                         ; main+904↑j ...
.text:0000000000003360                 xor     eax, eax
.text:0000000000003362                 add     rbx, cs:tot_dui
.text:0000000000003369                 setb    al
.text:000000000000336C                 test    rax, rax
.text:000000000000336F                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003376                 cmovnz  rbx, rax
.text:000000000000337A                 add     cs:qword_228128, 1
.text:0000000000003382                 cmp     rcx, cs:qword_228130
.text:0000000000003389                 mov     cs:tot_dui, rbx
.text:0000000000003390                 jg      short loc_3408
.text:0000000000003392                 jl      short loc_33A0
.text:0000000000003394                 cmp     dword ptr cs:qword_228138, r9d
.text:000000000000339B                 js      short loc_3408
.text:000000000000339D                 nop     dword ptr [rax]
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: main+942↑j
.text:00000000000033A0                                         ; main+9C6↓j
.text:00000000000033A0                 and     ebp, 0FFFFFFFDh
.text:00000000000033A3                 cmp     ebp, 4
.text:00000000000033A6                 jz      loc_34EB
.text:00000000000033AC                 cmp     cs:opt_all, 0
.text:00000000000033B3                 jnz     loc_34EB
.text:00000000000033B9
.text:00000000000033B9 loc_33B9:                               ; CODE XREF: main+AA8↓j
.text:00000000000033B9                 test    r14, r14
.text:00000000000033BC                 jnz     short loc_3400
.text:00000000000033BE
.text:00000000000033BE loc_33BE:                               ; CODE XREF: main+AA2↓j
.text:00000000000033BE                 mov     rdx, cs:opt_threshold
.text:00000000000033C5                 cmp     cs:opt_inodes, 0
.text:00000000000033CC                 mov     rax, [rsp+168h+var_100]
.text:00000000000033D1                 cmovz   rax, [rsp+168h+var_108]
.text:00000000000033D7                 test    rdx, rdx
.text:00000000000033DA                 js      loc_3710
.text:00000000000033E0                 cmp     rax, rdx
.text:00000000000033E3                 setnb   al
.text:00000000000033E6
.text:00000000000033E6 loc_33E6:                               ; CODE XREF: main+CC9↓j
.text:00000000000033E6                 test    al, al
.text:00000000000033E8                 jz      short loc_3400
.text:00000000000033EA                 lea     rdi, [rsp+168h+var_108]
.text:00000000000033EF                 mov     rsi, r13
.text:00000000000033F2                 call    print_size
.text:00000000000033F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: main+6DA↑j
.text:0000000000003400                                         ; main+96C↑j ...
.text:0000000000003400                 and     r15d, r12d
.text:0000000000003403                 jmp     loc_3094
.text:0000000000003408 ; ---------------------------------------------------------------------------
.text:0000000000003408
.text:0000000000003408 loc_3408:                               ; CODE XREF: main+940↑j
.text:0000000000003408                                         ; main+94B↑j
.text:0000000000003408                 mov     cs:qword_228130, rcx
.text:000000000000340F                 mov     cs:qword_228138, r9
.text:0000000000003416                 jmp     short loc_33A0
.text:0000000000003418 ; ---------------------------------------------------------------------------
.text:0000000000003418
.text:0000000000003418 loc_3418:                               ; CODE XREF: main+601↑j
.text:0000000000003418                 mov     rsi, rbx
.text:000000000000341B                 mov     edi, 4
.text:0000000000003420                 call    quotearg_style
.text:0000000000003425                 lea     rsi, aWhenReadingFil ; "when reading file names from stdin, no "...
.text:000000000000342C                 xor     edi, edi        ; domainname
.text:000000000000342E                 mov     rbp, rax
.text:0000000000003431                 mov     edx, 5          ; category
.text:0000000000003436                 call    _dcgettext
.text:000000000000343B                 xor     esi, esi        ; errnum
.text:000000000000343D                 mov     rdx, rax        ; format
.text:0000000000003440                 xor     edi, edi        ; status
.text:0000000000003442                 xor     eax, eax
.text:0000000000003444                 mov     rcx, rbp
.text:0000000000003447                 call    _error
.text:000000000000344C                 cmp     byte ptr [rbx], 0
.text:000000000000344F                 jnz     loc_34E1
.text:0000000000003455                 nop     dword ptr [rax]
.text:0000000000003458
.text:0000000000003458 loc_3458:                               ; CODE XREF: main+60A↑j
.text:0000000000003458                 mov     rdi, r15
.text:000000000000345B                 call    argv_iter_n_args
.text:0000000000003460                 lea     rsi, aInvalidZeroLen ; "invalid zero-length file name"
.text:0000000000003467                 mov     edx, 5          ; category
.text:000000000000346C                 xor     edi, edi        ; domainname
.text:000000000000346E                 mov     rbx, rax
.text:0000000000003471                 call    _dcgettext
.text:0000000000003476                 mov     rdx, r13
.text:0000000000003479                 mov     esi, 3
.text:000000000000347E                 xor     edi, edi
.text:0000000000003480                 mov     rbp, rax
.text:0000000000003483                 call    quotearg_n_style_colon
.text:0000000000003488                 lea     rdx, format     ; "%s:%lu: %s"
.text:000000000000348F                 mov     rcx, rax
.text:0000000000003492                 mov     r9, rbp
.text:0000000000003495                 mov     r8, rbx
.text:0000000000003498                 xor     esi, esi        ; errnum
.text:000000000000349A                 xor     edi, edi        ; status
.text:000000000000349C                 xor     eax, eax
.text:000000000000349E                 call    _error
.text:00000000000034A3                 mov     byte ptr [rsp+168h+var_150], 0
.text:00000000000034A8                 jmp     loc_3000
.text:00000000000034A8 ; ---------------------------------------------------------------------------
.text:00000000000034AD                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: main+5CA↑j
.text:00000000000034B0                 cmp     byte ptr [rax], 0
.text:00000000000034B3                 jnz     loc_3060
.text:00000000000034B9                 lea     rsi, aInvalidZeroLen ; "invalid zero-length file name"
.text:00000000000034C0                 mov     edx, 5          ; category
.text:00000000000034C5                 xor     edi, edi        ; domainname
.text:00000000000034C7                 call    _dcgettext
.text:00000000000034CC                 lea     rdx, aS_0+2     ; format
.text:00000000000034D3                 mov     rcx, rax
.text:00000000000034D6                 xor     esi, esi        ; errnum
.text:00000000000034D8                 xor     edi, edi        ; status
.text:00000000000034DA                 xor     eax, eax
.text:00000000000034DC                 call    _error
.text:00000000000034E1
.text:00000000000034E1 loc_34E1:                               ; CODE XREF: main+9FF↑j
.text:00000000000034E1                 mov     byte ptr [rsp+168h+var_150], 0
.text:00000000000034E6                 jmp     loc_3000
.text:00000000000034EB ; ---------------------------------------------------------------------------
.text:00000000000034EB
.text:00000000000034EB loc_34EB:                               ; CODE XREF: main+956↑j
.text:00000000000034EB                                         ; main+963↑j
.text:00000000000034EB                 cmp     r14, cs:max_depth
.text:00000000000034F2                 jbe     loc_33BE
.text:00000000000034F8                 jmp     loc_33B9
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:00000000000034FD
.text:00000000000034FD loc_34FD:                               ; CODE XREF: main+783↑j
.text:00000000000034FD                 mov     rbx, [r14+0B8h]
.text:0000000000003504                 shl     rbx, 9
.text:0000000000003508                 jmp     loc_31EE
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:000000000000350D
.text:000000000000350D loc_350D:                               ; CODE XREF: main+768↑j
.text:000000000000350D                 cmp     eax, 2
.text:0000000000003510                 jz      loc_3A84
.text:0000000000003516                 mov     rcx, [r14+0E0h]
.text:000000000000351D                 mov     r9, [r14+0E8h]
.text:0000000000003524                 jmp     loc_31CC
.text:0000000000003529 ; ---------------------------------------------------------------------------
.text:0000000000003529
.text:0000000000003529 loc_3529:                               ; CODE XREF: main+5C1↑j
.text:0000000000003529                 mov     eax, [rsp+168h+longind]
.text:000000000000352D                 cmp     eax, 3
.text:0000000000003530                 jz      loc_3DDF
.text:0000000000003536                 cmp     eax, 4
.text:0000000000003539                 jz      short loc_355F
.text:000000000000353B                 cmp     eax, 2
.text:000000000000353E                 jz      short loc_35A2
.text:0000000000003540                 lea     rcx, __PRETTY_FUNCTION___7387 ; "main"
.text:0000000000003547                 lea     rsi, aCoreutils831Sr ; "../coreutils-8.31/src/du.c"
.text:000000000000354E                 lea     rdi, aUnexpectedErro ; "!\"unexpected error code from argv_iter"...
.text:0000000000003555                 mov     edx, 438h       ; line
.text:000000000000355A                 call    ___assert_fail
.text:000000000000355F ; ---------------------------------------------------------------------------
.text:000000000000355F
.text:000000000000355F loc_355F:                               ; CODE XREF: main+AE9↑j
.text:000000000000355F                 mov     rdx, r13
.text:0000000000003562                 mov     esi, 3
.text:0000000000003567                 xor     edi, edi
.text:0000000000003569                 call    quotearg_n_style_colon
.text:000000000000356E                 lea     rsi, aSReadError ; "%s: read error"
.text:0000000000003575                 mov     edx, 5          ; category
.text:000000000000357A                 xor     edi, edi        ; domainname
.text:000000000000357C                 mov     rbp, rax
.text:000000000000357F                 call    _dcgettext
.text:0000000000003584                 mov     rbx, rax
.text:0000000000003587                 call    ___errno_location
.text:000000000000358C                 mov     esi, [rax]      ; errnum
.text:000000000000358E                 mov     rcx, rbp
.text:0000000000003591                 mov     rdx, rbx        ; format
.text:0000000000003594                 xor     edi, edi        ; status
.text:0000000000003596                 xor     eax, eax
.text:0000000000003598                 call    _error
.text:000000000000359D                 mov     byte ptr [rsp+168h+var_150], 0
.text:00000000000035A2
.text:00000000000035A2 loc_35A2:                               ; CODE XREF: main+AEE↑j
.text:00000000000035A2                 mov     rdi, r15        ; ptr
.text:00000000000035A5                 call    argv_iter_free
.text:00000000000035AA                 mov     rdi, cs:di_files ; ptr
.text:00000000000035B1                 call    rsa_multip_info_free
.text:00000000000035B6                 mov     rdi, cs:di_mnt  ; ptr
.text:00000000000035BD                 test    rdi, rdi
.text:00000000000035C0                 jz      short loc_35C7
.text:00000000000035C2                 call    rsa_multip_info_free
.text:00000000000035C7
.text:00000000000035C7 loc_35C7:                               ; CODE XREF: main+B70↑j
.text:00000000000035C7                 test    r13, r13
.text:00000000000035CA                 jz      short loc_35E7
.text:00000000000035CC                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:00000000000035D3                 test    byte ptr [rdi], 20h
.text:00000000000035D6                 jz      loc_391B
.text:00000000000035DC
.text:00000000000035DC loc_35DC:                               ; CODE XREF: main+ED2↓j
.text:00000000000035DC                 cmp     byte ptr [rsp+168h+var_150], 0
.text:00000000000035E1                 jnz     loc_3E82
.text:00000000000035E7
.text:00000000000035E7 loc_35E7:                               ; CODE XREF: main+B7A↑j
.text:00000000000035E7                                         ; main+ED8↓j
.text:00000000000035E7                 cmp     cs:print_grand_total, 0
.text:00000000000035EE                 jz      short loc_3612
.text:00000000000035F0                 lea     rsi, aTotal     ; "total"
.text:00000000000035F7                 xor     edi, edi        ; domainname
.text:00000000000035F9                 mov     edx, 5          ; category
.text:00000000000035FE                 call    _dcgettext
.text:0000000000003603                 lea     rdi, tot_dui
.text:000000000000360A                 mov     rsi, rax
.text:000000000000360D                 call    print_size
.text:0000000000003612
.text:0000000000003612 loc_3612:                               ; CODE XREF: main+B9E↑j
.text:0000000000003612                 movzx   eax, byte ptr [rsp+168h+var_150]
.text:0000000000003617                 xor     eax, 1
.text:000000000000361A                 mov     rcx, [rsp+168h+var_40]
.text:0000000000003622                 xor     rcx, fs:28h
.text:000000000000362B                 movzx   eax, al
.text:000000000000362E                 jnz     loc_3DE4
.text:0000000000003634                 add     rsp, 138h
.text:000000000000363B                 pop     rbx
.text:000000000000363C                 pop     rbp
.text:000000000000363D                 pop     r12
.text:000000000000363F                 pop     r13
.text:0000000000003641                 pop     r14
.text:0000000000003643                 pop     r15
.text:0000000000003645                 retn
.text:0000000000003646 ; ---------------------------------------------------------------------------
.text:0000000000003646
.text:0000000000003646 loc_3646:                               ; CODE XREF: main+8FE↑j
.text:0000000000003646                                         ; main+90A↑j
.text:0000000000003646                 mov     [rax+10h], rcx
.text:000000000000364A                 mov     [rax+18h], r9
.text:000000000000364E                 jmp     loc_3360
.text:0000000000003653 ; ---------------------------------------------------------------------------
.text:0000000000003653
.text:0000000000003653 loc_3653:                               ; CODE XREF: main+7C4↑j
.text:0000000000003653                 lea     rdi, [r14+0Ah]
.text:0000000000003657                 mov     esi, 40h ; '@'
.text:000000000000365C                 mov     [rsp+168h+var_128], r9
.text:0000000000003661                 mov     [rsp+168h+var_130], rcx
.text:0000000000003666                 mov     cs:n_alloc_7286, rdi
.text:000000000000366D                 call    xcalloc
.text:0000000000003672                 mov     rcx, [rsp+168h+var_130]
.text:0000000000003677                 mov     cs:dulvl_7287, rax
.text:000000000000367E                 mov     r9, [rsp+168h+var_128]
.text:0000000000003683                 jmp     loc_3300
.text:0000000000003688 ; ---------------------------------------------------------------------------
.text:0000000000003688
.text:0000000000003688 loc_3688:                               ; CODE XREF: main+665↑j
.text:0000000000003688                 mov     rsi, r13
.text:000000000000368B                 mov     edi, 4
.text:0000000000003690                 xor     r12d, r12d
.text:0000000000003693                 call    quotearg_style
.text:0000000000003698                 lea     rsi, aCannotReadDire ; "cannot read directory %s"
.text:000000000000369F                 mov     edx, 5          ; category
.text:00000000000036A4                 xor     edi, edi        ; domainname
.text:00000000000036A6                 mov     rbx, rax
.text:00000000000036A9                 call    _dcgettext
.text:00000000000036AE                 mov     esi, [r14+40h]  ; errnum
.text:00000000000036B2                 mov     rdx, rax        ; format
.text:00000000000036B5                 mov     rcx, rbx
.text:00000000000036B8                 xor     edi, edi        ; status
.text:00000000000036BA                 xor     eax, eax
.text:00000000000036BC                 call    _error
.text:00000000000036C1                 jmp     loc_31B0
.text:00000000000036C6 ; ---------------------------------------------------------------------------
.text:00000000000036C6
.text:00000000000036C6 loc_36C6:                               ; CODE XREF: main+654↑j
.text:00000000000036C6                 call    ___errno_location
.text:00000000000036CB                 cmp     dword ptr [rax], 0
.text:00000000000036CE                 mov     r14d, r15d
.text:00000000000036D1                 mov     r13, [rsp+168h+var_148]
.text:00000000000036D6                 mov     r15, [rsp+168h+var_140]
.text:00000000000036DB                 mov     r12, [rsp+168h+var_138]
.text:00000000000036E0                 mov     rbx, rax
.text:00000000000036E3                 jnz     loc_3956
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: main+F45↓j
.text:00000000000036E9                 mov     rdi, [rsp+168h+ptr] ; ptr
.text:00000000000036EE                 mov     cs:prev_level, 0
.text:00000000000036F9                 call    rpl_fts_close
.text:00000000000036FE                 test    eax, eax
.text:0000000000003700                 jnz     loc_392D
.text:0000000000003706
.text:0000000000003706 loc_3706:                               ; CODE XREF: main+F01↓j
.text:0000000000003706                 and     byte ptr [rsp+168h+var_150], r14b
.text:000000000000370B                 jmp     loc_3000
.text:0000000000003710 ; ---------------------------------------------------------------------------
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: main+98A↑j
.text:0000000000003710                 neg     rdx
.text:0000000000003713                 cmp     rdx, rax
.text:0000000000003716                 setnb   al
.text:0000000000003719                 jmp     loc_33E6
.text:000000000000371E ; ---------------------------------------------------------------------------
.text:000000000000371E
.text:000000000000371E loc_371E:                               ; CODE XREF: main+4A8↑j
.text:000000000000371E                 cmp     byte ptr [rsp+168h+var_148], 0
.text:0000000000003723                 jz      loc_3E72
.text:0000000000003729                 cmp     byte ptr [rsp+168h+var_14C], 0
.text:000000000000372E                 jz      loc_2F09
.text:0000000000003734                 mov     rbx, cs:max_depth
.text:000000000000373B                 test    rbx, rbx
.text:000000000000373E                 jz      loc_39D8
.text:0000000000003744
.text:0000000000003744 loc_3744:                               ; CODE XREF: main+FB3↓j
.text:0000000000003744                 lea     rsi, aWarningSummari ; "warning: summarizing conflicts with --m"...
.text:000000000000374B                 mov     edx, 5          ; category
.text:0000000000003750                 xor     edi, edi        ; domainname
.text:0000000000003752                 call    _dcgettext
.text:0000000000003757                 xor     edi, edi        ; status
.text:0000000000003759                 mov     rdx, rax        ; format
.text:000000000000375C                 mov     rcx, rbx
.text:000000000000375F                 xor     esi, esi        ; errnum
.text:0000000000003761                 xor     eax, eax
.text:0000000000003763                 call    _error
.text:0000000000003768                 mov     edi, 1          ; status
.text:000000000000376D                 call    usage
.text:0000000000003772 ; ---------------------------------------------------------------------------
.text:0000000000003772
.text:0000000000003772 loc_3772:                               ; CODE XREF: main+224↑j
.text:0000000000003772                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003779                 call    quote
.text:000000000000377E                 lea     rsi, aInvalidMaximum ; "invalid maximum depth %s"
.text:0000000000003785                 mov     edx, 5          ; category
.text:000000000000378A                 xor     edi, edi        ; domainname
.text:000000000000378C                 mov     [rsp+168h+var_160], rax
.text:0000000000003791                 call    _dcgettext
.text:0000000000003796                 mov     rcx, [rsp+168h+var_160]
.text:000000000000379B                 mov     rdx, rax        ; format
.text:000000000000379E                 xor     esi, esi        ; errnum
.text:00000000000037A0                 xor     edi, edi        ; status
.text:00000000000037A2                 xor     eax, eax
.text:00000000000037A4                 call    _error
.text:00000000000037A9                 mov     byte ptr [rsp+168h+var_160], 0
.text:00000000000037AE                 jmp     loc_2B48
.text:00000000000037B3 ; ---------------------------------------------------------------------------
.text:00000000000037B3
.text:00000000000037B3 loc_37B3:                               ; CODE XREF: main+7DA↑j
.text:00000000000037B3                 lea     rdx, [rax-1]
.text:00000000000037B7                 cmp     r14, rdx
.text:00000000000037BA                 jnz     loc_3EEC
.text:00000000000037C0                 mov     rdx, cs:dulvl_7287
.text:00000000000037C7                 shl     rax, 6
.text:00000000000037CB                 xor     edi, edi
.text:00000000000037CD                 mov     rsi, rbx
.text:00000000000037D0                 add     rax, rdx
.text:00000000000037D3                 add     rsi, [rax]
.text:00000000000037D6                 setb    dil
.text:00000000000037DA                 test    rdi, rdi
.text:00000000000037DD                 mov     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000037E4                 cmovnz  rsi, rdi
.text:00000000000037E8                 mov     rdi, [rax+8]
.text:00000000000037EC                 mov     [rsp+168h+var_108], rsi
.text:00000000000037F1                 add     rdi, 1
.text:00000000000037F5                 mov     [rsp+168h+var_100], rdi
.text:00000000000037FA                 cmp     rcx, [rax+10h]
.text:00000000000037FE                 jl      loc_3AE8
.text:0000000000003804                 jg      short loc_3810
.text:0000000000003806                 cmp     r9d, [rax+18h]
.text:000000000000380A                 js      loc_3AE8
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: main+DB4↑j
.text:0000000000003810                                         ; main+10A2↓j
.text:0000000000003810                 cmp     cs:opt_separate_dirs, 0
.text:0000000000003817                 jz      loc_3B64
.text:000000000000381D
.text:000000000000381D loc_381D:                               ; CODE XREF: main+1146↓j
.text:000000000000381D                                         ; main+1153↓j ...
.text:000000000000381D                 mov     rsi, r14
.text:0000000000003820                 xor     edi, edi
.text:0000000000003822                 shl     rsi, 6
.text:0000000000003826                 add     rdx, rsi
.text:0000000000003829                 mov     rsi, [rax]
.text:000000000000382C                 add     rsi, [rdx+20h]
.text:0000000000003830                 jb      loc_3EC3
.text:0000000000003836
.text:0000000000003836 loc_3836:                               ; CODE XREF: main+1478↓j
.text:0000000000003836                 test    rdi, rdi
.text:0000000000003839                 mov     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003840                 mov     r10, [rdx+30h]
.text:0000000000003844                 cmovnz  rsi, rdi
.text:0000000000003848                 mov     rdi, [rax+8]
.text:000000000000384C                 add     rdi, [rdx+28h]
.text:0000000000003850                 mov     [rdx+20h], rsi
.text:0000000000003854                 mov     [rdx+28h], rdi
.text:0000000000003858                 cmp     r10, [rax+10h]
.text:000000000000385C                 jl      loc_3AD5
.text:0000000000003862                 jg      short loc_3872
.text:0000000000003864                 mov     r11d, [rax+18h]
.text:0000000000003868                 cmp     [rdx+38h], r11d
.text:000000000000386C                 js      loc_3AD5
.text:0000000000003872
.text:0000000000003872 loc_3872:                               ; CODE XREF: main+E12↑j
.text:0000000000003872                                         ; main+1093↓j
.text:0000000000003872                 xor     r11d, r11d
.text:0000000000003875                 add     rsi, [rax+20h]
.text:0000000000003879                 setb    r11b
.text:000000000000387D                 test    r11, r11
.text:0000000000003880                 mov     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003887                 cmovnz  rsi, r11
.text:000000000000388B                 add     rdi, [rax+28h]
.text:000000000000388F                 mov     [rdx+20h], rsi
.text:0000000000003893                 mov     [rdx+28h], rdi
.text:0000000000003897                 cmp     r10, [rax+30h]
.text:000000000000389B                 jl      short loc_38AF
.text:000000000000389D                 jg      loc_3300
.text:00000000000038A3                 mov     esi, [rax+38h]
.text:00000000000038A6                 cmp     [rdx+38h], esi
.text:00000000000038A9                 jns     loc_3300
.text:00000000000038AF
.text:00000000000038AF loc_38AF:                               ; CODE XREF: main+E4B↑j
.text:00000000000038AF                 movdqu  xmm0, xmmword ptr [rax+30h]
.text:00000000000038B4                 movups  xmmword ptr [rdx+30h], xmm0
.text:00000000000038B8                 jmp     loc_3300
.text:00000000000038BD ; ---------------------------------------------------------------------------
.text:00000000000038BD
.text:00000000000038BD loc_38BD:                               ; CODE XREF: main+537↑j
.text:00000000000038BD                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:00000000000038C4                 lea     rsi, aUpper+4   ; "r"
.text:00000000000038CB                 mov     rdi, r13
.text:00000000000038CE                 call    freopen_safer
.text:00000000000038D3                 test    rax, rax
.text:00000000000038D6                 jnz     loc_2F8D
.text:00000000000038DC                 mov     rsi, r13
.text:00000000000038DF                 mov     edi, 4
.text:00000000000038E4                 call    quotearg_style
.text:00000000000038E9                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:00000000000038F0                 mov     edx, 5          ; category
.text:00000000000038F5                 xor     edi, edi        ; domainname
.text:00000000000038F7                 mov     rbp, rax
.text:00000000000038FA                 call    _dcgettext
.text:00000000000038FF                 mov     rbx, rax
.text:0000000000003902                 call    ___errno_location
.text:0000000000003907                 mov     esi, [rax]      ; errnum
.text:0000000000003909                 mov     rcx, rbp
.text:000000000000390C                 mov     rdx, rbx        ; format
.text:000000000000390F                 mov     edi, (offset dword_0+1) ; stream
.text:0000000000003914                 xor     eax, eax
.text:0000000000003916                 call    _error
.text:000000000000391B
.text:000000000000391B loc_391B:                               ; CODE XREF: main+B86↑j
.text:000000000000391B                 call    rpl_fclose
.text:0000000000003920                 test    eax, eax
.text:0000000000003922                 jnz     loc_35DC
.text:0000000000003928                 jmp     loc_35E7
.text:000000000000392D ; ---------------------------------------------------------------------------
.text:000000000000392D
.text:000000000000392D loc_392D:                               ; CODE XREF: main+CB0↑j
.text:000000000000392D                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:0000000000003934                 mov     edx, 5          ; category
.text:0000000000003939                 xor     edi, edi        ; domainname
.text:000000000000393B                 xor     r14d, r14d
.text:000000000000393E                 call    _dcgettext
.text:0000000000003943                 mov     esi, [rbx]      ; errnum
.text:0000000000003945                 mov     rdx, rax        ; format
.text:0000000000003948                 xor     edi, edi        ; status
.text:000000000000394A                 xor     eax, eax
.text:000000000000394C                 call    _error
.text:0000000000003951                 jmp     loc_3706
.text:0000000000003956 ; ---------------------------------------------------------------------------
.text:0000000000003956
.text:0000000000003956 loc_3956:                               ; CODE XREF: main+C93↑j
.text:0000000000003956                 mov     rax, [rsp+168h+ptr]
.text:000000000000395B                 mov     esi, 3
.text:0000000000003960                 xor     edi, edi
.text:0000000000003962                 xor     r14d, r14d
.text:0000000000003965                 mov     rdx, [rax+20h]
.text:0000000000003969                 call    quotearg_n_style_colon
.text:000000000000396E                 lea     rsi, aFtsReadFailedS ; "fts_read failed: %s"
.text:0000000000003975                 mov     edx, 5          ; category
.text:000000000000397A                 xor     edi, edi        ; domainname
.text:000000000000397C                 mov     rbp, rax
.text:000000000000397F                 call    _dcgettext
.text:0000000000003984                 mov     esi, [rbx]      ; errnum
.text:0000000000003986                 mov     rdx, rax        ; format
.text:0000000000003989                 mov     rcx, rbp
.text:000000000000398C                 xor     edi, edi        ; status
.text:000000000000398E                 xor     eax, eax
.text:0000000000003990                 call    _error
.text:0000000000003995                 jmp     loc_36E9
.text:000000000000399A ; ---------------------------------------------------------------------------
.text:000000000000399A
.text:000000000000399A loc_399A:                               ; CODE XREF: main+6A9↑j
.text:000000000000399A                 mov     rsi, r13
.text:000000000000399D                 mov     edi, 4
.text:00000000000039A2                 xor     r12d, r12d
.text:00000000000039A5                 call    quotearg_style
.text:00000000000039AA                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:00000000000039B1                 mov     edx, 5          ; category
.text:00000000000039B6                 xor     edi, edi        ; domainname
.text:00000000000039B8                 mov     rbx, rax
.text:00000000000039BB                 call    _dcgettext
.text:00000000000039C0                 mov     esi, [r14+40h]  ; errnum
.text:00000000000039C4                 mov     rdx, rax        ; format
.text:00000000000039C7                 mov     rcx, rbx
.text:00000000000039CA                 xor     edi, edi        ; status
.text:00000000000039CC                 xor     eax, eax
.text:00000000000039CE                 call    _error
.text:00000000000039D3                 jmp     loc_3400
.text:00000000000039D8 ; ---------------------------------------------------------------------------
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: main+CEE↑j
.text:00000000000039D8                 lea     rsi, aWarningSummari_0 ; "warning: summarizing is the same as usi"...
.text:00000000000039DF                 xor     edi, edi        ; domainname
.text:00000000000039E1                 mov     edx, 5          ; category
.text:00000000000039E6                 call    _dcgettext
.text:00000000000039EB                 xor     esi, esi        ; errnum
.text:00000000000039ED                 mov     rdx, rax        ; format
.text:00000000000039F0                 xor     edi, edi        ; status
.text:00000000000039F2                 xor     eax, eax
.text:00000000000039F4                 call    _error
.text:00000000000039F9                 mov     rbx, cs:max_depth
.text:0000000000003A00                 test    rbx, rbx
.text:0000000000003A03                 jnz     loc_3744
.text:0000000000003A09
.text:0000000000003A09 loc_3A09:                               ; CODE XREF: main+1427↓j
.text:0000000000003A09                 mov     cs:max_depth, 0
.text:0000000000003A14                 jmp     loc_2F09
.text:0000000000003A19 ; ---------------------------------------------------------------------------
.text:0000000000003A19
.text:0000000000003A19 loc_3A19:                               ; CODE XREF: main+4C9↑j
.text:0000000000003A19                 lea     rsi, aWarningOptions ; "warning: options --apparent-size and -b"...
.text:0000000000003A20                 xor     edi, edi        ; domainname
.text:0000000000003A22                 mov     edx, 5          ; category
.text:0000000000003A27                 call    _dcgettext
.text:0000000000003A2C                 xor     esi, esi        ; errnum
.text:0000000000003A2E                 mov     rdx, rax        ; format
.text:0000000000003A31                 xor     edi, edi        ; status
.text:0000000000003A33                 xor     eax, eax
.text:0000000000003A35                 call    _error
.text:0000000000003A3A                 jmp     loc_2F1F
.text:0000000000003A3F ; ---------------------------------------------------------------------------
.text:0000000000003A3F
.text:0000000000003A3F loc_3A3F:                               ; CODE XREF: main+6CE↑j
.text:0000000000003A3F                 mov     rbx, [rsp+168h+ptr]
.text:0000000000003A44                 mov     edx, 4
.text:0000000000003A49                 mov     rsi, r14
.text:0000000000003A4C                 mov     rdi, rbx
.text:0000000000003A4F                 call    rpl_fts_set
.text:0000000000003A54                 mov     rdi, rbx
.text:0000000000003A57                 call    rpl_fts_read
.text:0000000000003A5C                 cmp     r14, rax
.text:0000000000003A5F                 jz      loc_3124
.text:0000000000003A65                 lea     rcx, __PRETTY_FUNCTION___7293 ; "process_file"
.text:0000000000003A6C                 lea     rsi, aCoreutils831Sr ; "../coreutils-8.31/src/du.c"
.text:0000000000003A73                 lea     rdi, aEEnt      ; "e == ent"
.text:0000000000003A7A                 mov     edx, 22Fh       ; line
.text:0000000000003A7F                 call    ___assert_fail
.text:0000000000003A84 ; ---------------------------------------------------------------------------
.text:0000000000003A84
.text:0000000000003A84 loc_3A84:                               ; CODE XREF: main+AC0↑j
.text:0000000000003A84                 mov     rcx, [r14+0C0h]
.text:0000000000003A8B                 mov     r9, [r14+0C8h]
.text:0000000000003A92                 jmp     loc_31CC
.text:0000000000003A97 ; ---------------------------------------------------------------------------
.text:0000000000003A97
.text:0000000000003A97 loc_3A97:                               ; CODE XREF: main+517↑j
.text:0000000000003A97                 cmp     r12d, eax
.text:0000000000003A9A                 lea     rdi, [rsp+168h+var_E8]
.text:0000000000003AA2                 jle     short loc_3AA9
.text:0000000000003AA4                 lea     rdi, [rbp+rax*8+0]
.text:0000000000003AA9
.text:0000000000003AA9 loc_3AA9:                               ; CODE XREF: main+1052↑j
.text:0000000000003AA9                 call    argv_iter_init_argv
.text:0000000000003AAE                 mov     r15, rax
.text:0000000000003AB1                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000003AB7                 add     eax, 1
.text:0000000000003ABA                 cmp     eax, r12d
.text:0000000000003ABD                 setl    al
.text:0000000000003AC0                 cmp     [rsp+168h+var_150], 2
.text:0000000000003AC5                 setz    dl
.text:0000000000003AC8                 or      eax, edx
.text:0000000000003ACA                 mov     cs:hash_all, al
.text:0000000000003AD0                 jmp     loc_2FA3
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003AD5
.text:0000000000003AD5 loc_3AD5:                               ; CODE XREF: main+E0C↑j
.text:0000000000003AD5                                         ; main+E1C↑j
.text:0000000000003AD5                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:0000000000003ADA                 movq    r10, xmm0
.text:0000000000003ADF                 movups  xmmword ptr [rdx+30h], xmm0
.text:0000000000003AE3                 jmp     loc_3872
.text:0000000000003AE8 ; ---------------------------------------------------------------------------
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: main+DAE↑j
.text:0000000000003AE8                                         ; main+DBA↑j
.text:0000000000003AE8                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:0000000000003AED                 movaps  [rsp+168h+var_F8], xmm0
.text:0000000000003AF2                 jmp     loc_3810
.text:0000000000003AF7 ; ---------------------------------------------------------------------------
.text:0000000000003AF7
.text:0000000000003AF7 loc_3AF7:                               ; CODE XREF: main+11B1↓j
.text:0000000000003AF7                                         ; main+11C8↓j
.text:0000000000003AF7                 lea     r15, aLongIso   ; "long-iso"
.text:0000000000003AFE                 mov     cs:time_style, r15
.text:0000000000003B05
.text:0000000000003B05 loc_3B05:                               ; CODE XREF: main+4FC↑j
.text:0000000000003B05                 mov     r9, cs:argmatch_die
.text:0000000000003B0C                 lea     rdx, time_style_args
.text:0000000000003B13                 lea     rcx, time_style_types
.text:0000000000003B1A                 lea     rdi, aTimeStyle ; "time style"
.text:0000000000003B21                 mov     r8d, 4
.text:0000000000003B27                 mov     rsi, r15
.text:0000000000003B2A                 call    __xargmatch_internal
.text:0000000000003B2F                 lea     rdx, time_style_types
.text:0000000000003B36                 mov     eax, [rdx+rax*4]
.text:0000000000003B39                 cmp     eax, 1
.text:0000000000003B3C                 jz      loc_3D38
.text:0000000000003B42                 jb      loc_3D25
.text:0000000000003B48                 cmp     eax, 2
.text:0000000000003B4B                 jnz     loc_2F5D
.text:0000000000003B51                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000003B58                 mov     cs:time_format, rax
.text:0000000000003B5F                 jmp     loc_2F5D
.text:0000000000003B64 ; ---------------------------------------------------------------------------
.text:0000000000003B64
.text:0000000000003B64 loc_3B64:                               ; CODE XREF: main+DC7↑j
.text:0000000000003B64                 xor     r10d, r10d
.text:0000000000003B67                 add     rsi, [rax+20h]
.text:0000000000003B6B                 mov     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B72                 setb    r10b
.text:0000000000003B76                 test    r10, r10
.text:0000000000003B79                 cmovnz  rsi, r11
.text:0000000000003B7D                 add     rdi, [rax+28h]
.text:0000000000003B81                 mov     [rsp+168h+var_108], rsi
.text:0000000000003B86                 mov     [rsp+168h+var_100], rdi
.text:0000000000003B8B                 mov     rsi, [rax+30h]
.text:0000000000003B8F                 cmp     qword ptr [rsp+168h+var_F8], rsi
.text:0000000000003B94                 jl      short loc_3BA9
.text:0000000000003B96                 jg      loc_381D
.text:0000000000003B9C                 mov     esi, [rax+38h]
.text:0000000000003B9F                 cmp     dword ptr [rsp+168h+var_F8+8], esi
.text:0000000000003BA3                 jns     loc_381D
.text:0000000000003BA9
.text:0000000000003BA9 loc_3BA9:                               ; CODE XREF: main+1144↑j
.text:0000000000003BA9                 movdqu  xmm0, xmmword ptr [rax+30h]
.text:0000000000003BAE                 movaps  [rsp+168h+var_F8], xmm0
.text:0000000000003BB3                 jmp     loc_381D
.text:0000000000003BB8 ; ---------------------------------------------------------------------------
.text:0000000000003BB8
.text:0000000000003BB8 loc_3BB8:                               ; CODE XREF: main+690↑j
.text:0000000000003BB8                 mov     rbx, [rsp+168h+ptr]
.text:0000000000003BBD                 mov     edx, 1
.text:0000000000003BC2                 mov     rsi, r14
.text:0000000000003BC5                 mov     rdi, rbx
.text:0000000000003BC8                 call    rpl_fts_set
.text:0000000000003BCD                 mov     rdi, rbx
.text:0000000000003BD0                 call    rpl_fts_read
.text:0000000000003BD5                 cmp     r14, rax
.text:0000000000003BD8                 jnz     loc_3ECD
.text:0000000000003BDE                 movzx   ebp, word ptr [r14+70h]
.text:0000000000003BE3                 jmp     loc_30E6
.text:0000000000003BE8 ; ---------------------------------------------------------------------------
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: main+4EB↑j
.text:0000000000003BE8                 lea     rdi, aTimeStyle_0 ; "TIME_STYLE"
.text:0000000000003BEF                 call    _getenv
.text:0000000000003BF4                 test    rax, rax
.text:0000000000003BF7                 mov     r15, rax
.text:0000000000003BFA                 mov     cs:time_style, rax
.text:0000000000003C01                 jz      loc_3AF7
.text:0000000000003C07                 lea     rsi, dirname+11h ; s2
.text:0000000000003C0E                 mov     rdi, rax        ; s1
.text:0000000000003C11                 call    _strcmp
.text:0000000000003C16                 test    eax, eax
.text:0000000000003C18                 jz      loc_3AF7
.text:0000000000003C1E                 cmp     byte ptr [r15], 2Bh ; '+'
.text:0000000000003C22                 lea     rbx, posix_prefix_7365 ; "posix-"
.text:0000000000003C29                 jnz     short loc_3C3B
.text:0000000000003C2B                 jmp     loc_3D4B
.text:0000000000003C30 ; ---------------------------------------------------------------------------
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: main+1204↓j
.text:0000000000003C30                 add     r15, 6
.text:0000000000003C34                 mov     cs:time_style, r15
.text:0000000000003C3B
.text:0000000000003C3B loc_3C3B:                               ; CODE XREF: main+11D9↑j
.text:0000000000003C3B                 mov     r15, cs:time_style
.text:0000000000003C42                 mov     edx, 6          ; n
.text:0000000000003C47                 mov     rsi, rbx        ; s2
.text:0000000000003C4A                 mov     rdi, r15        ; s1
.text:0000000000003C4D                 call    _strncmp
.text:0000000000003C52                 test    eax, eax
.text:0000000000003C54                 jz      short loc_3C30
.text:0000000000003C56                 jmp     loc_2F48
.text:0000000000003C5B ; ---------------------------------------------------------------------------
.text:0000000000003C5B
.text:0000000000003C5B loc_3C5B:                               ; CODE XREF: main+13C↑j
.text:0000000000003C5B                                         ; DATA XREF: .rodata:jpt_2B8C↓o
.text:0000000000003C5B                 xor     edi, edi        ; jumptable 0000000000002B8C case -130
.text:0000000000003C5D                 call    usage
.text:0000000000003C62 ; ---------------------------------------------------------------------------
.text:0000000000003C62
.text:0000000000003C62 loc_3C62:                               ; CODE XREF: main+748↑j
.text:0000000000003C62                 mov     rdx, r13
.text:0000000000003C65                 xor     edi, edi
.text:0000000000003C67                 mov     esi, 3
.text:0000000000003C6C                 call    quotearg_n_style_colon
.text:0000000000003C71                 mov     esi, [r14+40h]  ; errnum
.text:0000000000003C75                 lea     rdx, aS_0+2     ; format
.text:0000000000003C7C                 mov     rcx, rax
.text:0000000000003C7F                 xor     edi, edi        ; status
.text:0000000000003C81                 xor     eax, eax
.text:0000000000003C83                 call    _error
.text:0000000000003C88                 jmp     loc_31B0
.text:0000000000003C8D ; ---------------------------------------------------------------------------
.text:0000000000003C8D
.text:0000000000003C8D loc_3C8D:                               ; CODE XREF: main+73F↑j
.text:0000000000003C8D                 mov     rdi, [rsp+168h+ptr]
.text:0000000000003C92                 mov     rsi, r14
.text:0000000000003C95                 call    cycle_warning_required
.text:0000000000003C9A                 test    al, al
.text:0000000000003C9C                 jz      loc_3124
.text:0000000000003CA2                 cmp     cs:di_mnt, 0
.text:0000000000003CAA                 mov     rbp, [r14]
.text:0000000000003CAD                 jnz     short loc_3CD7
.text:0000000000003CAF                 jmp     loc_3D69
.text:0000000000003CB4 ; ---------------------------------------------------------------------------
.text:0000000000003CB4
.text:0000000000003CB4 loc_3CB4:                               ; CODE XREF: main+1295↓j
.text:0000000000003CB4                 mov     rdx, [r14+80h]
.text:0000000000003CBB                 mov     rsi, [r14+78h]
.text:0000000000003CBF                 mov     rdi, cs:di_mnt
.text:0000000000003CC6                 call    di_set_lookup
.text:0000000000003CCB                 test    eax, eax
.text:0000000000003CCD                 jg      loc_3124
.text:0000000000003CD3                 mov     r14, [r14+8]
.text:0000000000003CD7
.text:0000000000003CD7 loc_3CD7:                               ; CODE XREF: main+125D↑j
.text:0000000000003CD7                                         ; main+1349↓j
.text:0000000000003CD7                 test    r14, r14
.text:0000000000003CDA                 setnz   al
.text:0000000000003CDD                 cmp     rbp, r14
.text:0000000000003CE0                 setnz   dl
.text:0000000000003CE3                 and     al, dl
.text:0000000000003CE5                 jnz     short loc_3CB4
.text:0000000000003CE7                 mov     rdx, r13
.text:0000000000003CEA                 xor     edi, edi
.text:0000000000003CEC                 mov     esi, 3
.text:0000000000003CF1                 mov     r12d, eax
.text:0000000000003CF4                 call    quotearg_n_style_colon
.text:0000000000003CF9                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:0000000000003D00                 mov     rbx, rax
.text:0000000000003D03                 xor     edi, edi        ; domainname
.text:0000000000003D05                 mov     edx, 5          ; category
.text:0000000000003D0A                 call    _dcgettext
.text:0000000000003D0F                 mov     rcx, rbx
.text:0000000000003D12                 mov     rdx, rax        ; format
.text:0000000000003D15                 xor     esi, esi        ; errnum
.text:0000000000003D17                 xor     edi, edi        ; status
.text:0000000000003D19                 xor     eax, eax
.text:0000000000003D1B                 call    _error
.text:0000000000003D20                 jmp     loc_3400
.text:0000000000003D25 ; ---------------------------------------------------------------------------
.text:0000000000003D25
.text:0000000000003D25 loc_3D25:                               ; CODE XREF: main+10F2↑j
.text:0000000000003D25                 lea     rax, aYMDHMSNZ  ; "%Y-%m-%d %H:%M:%S.%N %z"
.text:0000000000003D2C                 mov     cs:time_format, rax
.text:0000000000003D33                 jmp     loc_2F5D
.text:0000000000003D38 ; ---------------------------------------------------------------------------
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: main+10EC↑j
.text:0000000000003D38                 lea     rax, aYMDHM     ; "%Y-%m-%d %H:%M"
.text:0000000000003D3F                 mov     cs:time_format, rax
.text:0000000000003D46                 jmp     loc_2F5D
.text:0000000000003D4B ; ---------------------------------------------------------------------------
.text:0000000000003D4B
.text:0000000000003D4B loc_3D4B:                               ; CODE XREF: main+11DB↑j
.text:0000000000003D4B                 mov     esi, 0Ah        ; c
.text:0000000000003D50                 mov     rdi, r15        ; s
.text:0000000000003D53                 call    _strchr
.text:0000000000003D58                 test    rax, rax
.text:0000000000003D5B                 jz      loc_2F52
.text:0000000000003D61                 mov     byte ptr [rax], 0
.text:0000000000003D64                 jmp     loc_2F48
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D69
.text:0000000000003D69 loc_3D69:                               ; CODE XREF: main+125F↑j
.text:0000000000003D69                 call    di_set_alloc
.text:0000000000003D6E                 test    rax, rax
.text:0000000000003D71                 mov     cs:di_mnt, rax
.text:0000000000003D78                 jz      short loc_3DDF
.text:0000000000003D7A                 xor     edi, edi
.text:0000000000003D7C                 call    read_file_system_list
.text:0000000000003D81                 mov     r12, rax
.text:0000000000003D84                 jmp     short loc_3D96
.text:0000000000003D86 ; ---------------------------------------------------------------------------
.text:0000000000003D86
.text:0000000000003D86 loc_3D86:                               ; CODE XREF: main+1355↓j
.text:0000000000003D86                                         ; main+136D↓j ...
.text:0000000000003D86                 mov     rbx, [r12+30h]
.text:0000000000003D8B                 mov     rdi, r12        ; ptr
.text:0000000000003D8E                 call    free_mount_entry
.text:0000000000003D93                 mov     r12, rbx
.text:0000000000003D96
.text:0000000000003D96 loc_3D96:                               ; CODE XREF: main+1334↑j
.text:0000000000003D96                 test    r12, r12
.text:0000000000003D99                 jz      loc_3CD7
.text:0000000000003D9F                 test    byte ptr [r12+28h], 3
.text:0000000000003DA5                 jnz     short loc_3D86
.text:0000000000003DA7                 mov     rsi, [r12+8]    ; filename
.text:0000000000003DAC                 mov     rdx, [rsp+168h+stat_buf] ; stat_buf
.text:0000000000003DB1                 mov     edi, 1          ; ver
.text:0000000000003DB6                 call    ___xstat
.text:0000000000003DBB                 test    eax, eax
.text:0000000000003DBD                 jnz     short loc_3D86
.text:0000000000003DBF                 mov     rdx, [rsp+168h+var_D0]
.text:0000000000003DC7                 mov     rsi, [rsp+168h+var_D8]
.text:0000000000003DCF                 mov     rdi, cs:di_mnt
.text:0000000000003DD6                 call    di_set_insert
.text:0000000000003DDB                 test    eax, eax
.text:0000000000003DDD                 jns     short loc_3D86
.text:0000000000003DDF
.text:0000000000003DDF loc_3DDF:                               ; CODE XREF: main+556↑j
.text:0000000000003DDF                                         ; main+56B↑j ...
.text:0000000000003DDF                 call    xalloc_die
.text:0000000000003DE4 ; ---------------------------------------------------------------------------
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: main+BDE↑j
.text:0000000000003DE4                 call    ___stack_chk_fail
.text:0000000000003DE9 ; ---------------------------------------------------------------------------
.text:0000000000003DE9
.text:0000000000003DE9 loc_3DE9:                               ; CODE XREF: main+520↑j
.text:0000000000003DE9                 mov     rdi, [rbp+rax*8+0]
.text:0000000000003DEE                 call    quote
.text:0000000000003DF3                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000003DFA                 mov     rbx, rax
.text:0000000000003DFD                 mov     edx, 5          ; category
.text:0000000000003E02                 xor     edi, edi        ; domainname
.text:0000000000003E04                 call    _dcgettext
.text:0000000000003E09                 mov     rcx, rbx
.text:0000000000003E0C                 mov     rdx, rax        ; format
.text:0000000000003E0F                 xor     esi, esi        ; errnum
.text:0000000000003E11                 xor     edi, edi        ; status
.text:0000000000003E13                 xor     eax, eax
.text:0000000000003E15                 call    _error
.text:0000000000003E1A                 lea     rsi, aFileOperandsCa ; "file operands cannot be combined with -"...
.text:0000000000003E21                 mov     edx, 5          ; category
.text:0000000000003E26                 xor     edi, edi        ; domainname
.text:0000000000003E28                 call    _dcgettext
.text:0000000000003E2D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003E34                 lea     rdx, aSSS+8     ; "%s\n"
.text:0000000000003E3B                 mov     rcx, rax
.text:0000000000003E3E                 mov     esi, 1
.text:0000000000003E43                 xor     eax, eax
.text:0000000000003E45                 call    ___fprintf_chk
.text:0000000000003E4A                 mov     edi, 1          ; status
.text:0000000000003E4F                 call    usage
.text:0000000000003E54 ; ---------------------------------------------------------------------------
.text:0000000000003E54
.text:0000000000003E54 loc_3E54:                               ; CODE XREF: main+168↑j
.text:0000000000003E54                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:0000000000003E5B                 mov     esi, [rsp+168h+longind]
.text:0000000000003E5F                 lea     rcx, long_options
.text:0000000000003E66                 mov     edx, 74h ; 't'
.text:0000000000003E6B                 mov     edi, eax
.text:0000000000003E6D                 call    xstrtol_fatal
.text:0000000000003E72 ; ---------------------------------------------------------------------------
.text:0000000000003E72
.text:0000000000003E72 loc_3E72:                               ; CODE XREF: main+CD3↑j
.text:0000000000003E72                 cmp     byte ptr [rsp+168h+var_14C], 0
.text:0000000000003E77                 jnz     loc_3A09
.text:0000000000003E7D                 jmp     loc_2F09
.text:0000000000003E82 ; ---------------------------------------------------------------------------
.text:0000000000003E82
.text:0000000000003E82 loc_3E82:                               ; CODE XREF: main+B91↑j
.text:0000000000003E82                 mov     rsi, r13
.text:0000000000003E85                 mov     edi, 4
.text:0000000000003E8A                 call    quotearg_style
.text:0000000000003E8F                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000003E96                 mov     rbx, rax
.text:0000000000003E99                 mov     edx, 5          ; category
.text:0000000000003E9E                 xor     edi, edi        ; domainname
.text:0000000000003EA0                 call    _dcgettext
.text:0000000000003EA5                 mov     rcx, rbx
.text:0000000000003EA8                 mov     rdx, rax        ; format
.text:0000000000003EAB                 xor     esi, esi        ; errnum
.text:0000000000003EAD                 mov     edi, 1          ; status
.text:0000000000003EB2                 xor     eax, eax
.text:0000000000003EB4                 call    _error
.text:0000000000003EB9
.text:0000000000003EB9 loc_3EB9:                               ; CODE XREF: main+7F9↑j
.text:0000000000003EB9                 mov     esi, 1
.text:0000000000003EBE                 jmp     loc_324F
.text:0000000000003EC3 ; ---------------------------------------------------------------------------
.text:0000000000003EC3
.text:0000000000003EC3 loc_3EC3:                               ; CODE XREF: main+DE0↑j
.text:0000000000003EC3                 mov     edi, 1
.text:0000000000003EC8                 jmp     loc_3836
.text:0000000000003ECD ; ---------------------------------------------------------------------------
.text:0000000000003ECD
.text:0000000000003ECD loc_3ECD:                               ; CODE XREF: main+1188↑j
.text:0000000000003ECD                 lea     rcx, __PRETTY_FUNCTION___7293 ; "process_file"
.text:0000000000003ED4                 lea     rsi, aCoreutils831Sr ; "../coreutils-8.31/src/du.c"
.text:0000000000003EDB                 lea     rdi, aEEnt      ; "e == ent"
.text:0000000000003EE2                 mov     edx, 20Eh       ; line
.text:0000000000003EE7                 call    ___assert_fail
.text:0000000000003EEC ; ---------------------------------------------------------------------------
.text:0000000000003EEC
.text:0000000000003EEC loc_3EEC:                               ; CODE XREF: main+D6A↑j
.text:0000000000003EEC                 lea     rcx, __PRETTY_FUNCTION___7293 ; "process_file"
.text:0000000000003EF3                 lea     rsi, aCoreutils831Sr ; "../coreutils-8.31/src/du.c"
.text:0000000000003EFA                 lea     rdi, aLevelPrevLevel ; "level == prev_level - 1"
.text:0000000000003F01                 mov     edx, 27Dh       ; line
.text:0000000000003F06                 call    ___assert_fail
.text:0000000000003F0B ; ---------------------------------------------------------------------------
.text:0000000000003F0B
.text:0000000000003F0B loc_3F0B:                               ; CODE XREF: main+4B3↑j
.text:0000000000003F0B                 lea     rsi, aCannotBothSumm ; "cannot both summarize and show all entr"...
.text:0000000000003F12                 mov     edx, 5          ; category
.text:0000000000003F17                 xor     edi, edi        ; domainname
.text:0000000000003F19                 call    _dcgettext
.text:0000000000003F1E                 xor     esi, esi        ; errnum
.text:0000000000003F20                 mov     rdx, rax        ; format
.text:0000000000003F23                 xor     edi, edi        ; status
.text:0000000000003F25                 xor     eax, eax
.text:0000000000003F27                 call    _error
.text:0000000000003F2C
.text:0000000000003F2C loc_3F2C:                               ; CODE XREF: main+49B↑j
.text:0000000000003F2C                 mov     edi, 1          ; status
.text:0000000000003F31                 call    usage
.text:0000000000003F31 ; } // starts at 2A50
.text:0000000000003F31 main            endp
.text:0000000000003F31
.text:0000000000003F31 ; ---------------------------------------------------------------------------
.text:0000000000003F36                 align 20h
.text:0000000000003F40
.text:0000000000003F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F40
.text:0000000000003F40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003F40
.text:0000000000003F40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003F40                 public start
.text:0000000000003F40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003F40 ; __unwind {
.text:0000000000003F40                 xor     ebp, ebp
.text:0000000000003F42                 mov     r9, rdx         ; rtld_fini
.text:0000000000003F45                 pop     rsi             ; argc
.text:0000000000003F46                 mov     rdx, rsp        ; ubp_av
.text:0000000000003F49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000003F4D                 push    rax
.text:0000000000003F4E                 push    rsp             ; stack_end
.text:0000000000003F4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003F56                 lea     rcx, __libc_csu_init ; init
.text:0000000000003F5D                 lea     rdi, main       ; main
.text:0000000000003F64                 call    cs:__libc_start_main_ptr
.text:0000000000003F6A                 hlt
.text:0000000000003F6A ; } // starts at 3F40
.text:0000000000003F6A start           endp
.text:0000000000003F6A
.text:0000000000003F6A ; ---------------------------------------------------------------------------
.text:0000000000003F6B                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003F70
.text:0000000000003F70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_4023↓p
.text:0000000000003F70                 lea     rdi, __bss_start
.text:0000000000003F77                 push    rbp
.text:0000000000003F78                 lea     rax, __bss_start
.text:0000000000003F7F                 cmp     rax, rdi
.text:0000000000003F82                 mov     rbp, rsp
.text:0000000000003F85                 jz      short loc_3FA0
.text:0000000000003F87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000003F8E                 test    rax, rax
.text:0000000000003F91                 jz      short loc_3FA0
.text:0000000000003F93                 pop     rbp
.text:0000000000003F94                 jmp     rax
.text:0000000000003F94 ; ---------------------------------------------------------------------------
.text:0000000000003F96                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003FA0                                         ; deregister_tm_clones+21↑j
.text:0000000000003FA0                 pop     rbp
.text:0000000000003FA1                 retn
.text:0000000000003FA1 deregister_tm_clones endp
.text:0000000000003FA1
.text:0000000000003FA1 ; ---------------------------------------------------------------------------
.text:0000000000003FA2                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FB0
.text:0000000000003FB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003FB0
.text:0000000000003FB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003FB0                 lea     rdi, __bss_start
.text:0000000000003FB7                 lea     rsi, __bss_start
.text:0000000000003FBE                 push    rbp
.text:0000000000003FBF                 sub     rsi, rdi
.text:0000000000003FC2                 mov     rbp, rsp
.text:0000000000003FC5                 sar     rsi, 3
.text:0000000000003FC9                 mov     rax, rsi
.text:0000000000003FCC                 shr     rax, 3Fh
.text:0000000000003FD0                 add     rsi, rax
.text:0000000000003FD3                 sar     rsi, 1
.text:0000000000003FD6                 jz      short loc_3FF0
.text:0000000000003FD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000003FDF                 test    rax, rax
.text:0000000000003FE2                 jz      short loc_3FF0
.text:0000000000003FE4                 pop     rbp
.text:0000000000003FE5                 jmp     rax
.text:0000000000003FE5 ; ---------------------------------------------------------------------------
.text:0000000000003FE7                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003FF0                                         ; register_tm_clones+32↑j
.text:0000000000003FF0                 pop     rbp
.text:0000000000003FF1                 retn
.text:0000000000003FF1 register_tm_clones endp
.text:0000000000003FF1
.text:0000000000003FF1 ; ---------------------------------------------------------------------------
.text:0000000000003FF2                 align 20h
.text:0000000000004000
.text:0000000000004000 ; =============== S U B R O U T I N E =======================================
.text:0000000000004000
.text:0000000000004000 ; Attributes: info_from_lumina
.text:0000000000004000
.text:0000000000004000 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000004000                 cmp     cs:completed_7697, 0
.text:0000000000004007                 jnz     short locret_4038
.text:0000000000004009                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000004011                 push    rbp
.text:0000000000004012                 mov     rbp, rsp
.text:0000000000004015                 jz      short loc_4023
.text:0000000000004017                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000401E                 call    __cxa_finalize
.text:0000000000004023
.text:0000000000004023 loc_4023:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000004023                 call    deregister_tm_clones
.text:0000000000004028                 mov     cs:completed_7697, 1
.text:000000000000402F                 pop     rbp
.text:0000000000004030                 retn
.text:0000000000004030 ; ---------------------------------------------------------------------------
.text:0000000000004031                 align 8
.text:0000000000004038
.text:0000000000004038 locret_4038:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000004038                 rep retn
.text:0000000000004038 __do_global_dtors_aux endp
.text:0000000000004038
.text:0000000000004038 ; ---------------------------------------------------------------------------
.text:000000000000403A                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040 ; Attributes: bp-based frame
.text:0000000000004040
.text:0000000000004040 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000004040                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000004040                 push    rbp
.text:0000000000004041                 mov     rbp, rsp
.text:0000000000004044                 pop     rbp
.text:0000000000004045                 jmp     register_tm_clones
.text:0000000000004045 frame_dummy     endp
.text:0000000000004045
.text:0000000000004045 ; ---------------------------------------------------------------------------
.text:000000000000404A                 align 10h
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050
.text:0000000000004050 print_only_size proc near               ; CODE XREF: print_size+2F↓p
.text:0000000000004050
.text:0000000000004050 var_10          = qword ptr -10h
.text:0000000000004050
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 push    rbx
.text:0000000000004051                 sub     rsp, 2A0h
.text:0000000000004058                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000405F                 mov     rax, fs:28h
.text:0000000000004068                 mov     [rsp+2A8h+var_10], rax
.text:0000000000004070                 xor     eax, eax
.text:0000000000004072                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004076                 jz      short loc_40C0
.text:0000000000004078                 mov     r8, cs:output_block_size
.text:000000000000407F                 mov     edx, cs:human_output_opts
.text:0000000000004085                 mov     rsi, rsp
.text:0000000000004088                 mov     ecx, 1
.text:000000000000408D                 call    human_readable
.text:0000000000004092
.text:0000000000004092 loc_4092:                               ; CODE XREF: print_only_size+83↓j
.text:0000000000004092                 mov     rsi, rbx        ; stream
.text:0000000000004095                 mov     rdi, rax        ; s
.text:0000000000004098                 call    _fputs_unlocked
.text:000000000000409D                 mov     rax, [rsp+2A8h+var_10]
.text:00000000000040A5                 xor     rax, fs:28h
.text:00000000000040AE                 jnz     short loc_40D5
.text:00000000000040B0                 add     rsp, 2A0h
.text:00000000000040B7                 pop     rbx
.text:00000000000040B8                 retn
.text:00000000000040B8 ; ---------------------------------------------------------------------------
.text:00000000000040B9                 align 20h
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: print_only_size+26↑j
.text:00000000000040C0                 lea     rsi, aInfinity  ; "Infinity"
.text:00000000000040C7                 mov     edx, 5          ; category
.text:00000000000040CC                 xor     edi, edi        ; domainname
.text:00000000000040CE                 call    _dcgettext
.text:00000000000040D3                 jmp     short loc_4092
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040D5
.text:00000000000040D5 loc_40D5:                               ; CODE XREF: print_only_size+5E↑j
.text:00000000000040D5                 call    ___stack_chk_fail
.text:00000000000040D5 ; } // starts at 4050
.text:00000000000040D5 print_only_size endp
.text:00000000000040D5
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040DA                 align 20h
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0
.text:00000000000040E0 print_size      proc near               ; CODE XREF: main+9A2↑p
.text:00000000000040E0                                         ; main+BBD↑p
.text:00000000000040E0
.text:00000000000040E0 var_98          = xmmword ptr -98h
.text:00000000000040E0 var_88          = byte ptr -88h
.text:00000000000040E0 var_48          = byte ptr -48h
.text:00000000000040E0 var_30          = qword ptr -30h
.text:00000000000040E0
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 push    r13
.text:00000000000040E2                 push    r12
.text:00000000000040E4                 push    rbp
.text:00000000000040E5                 push    rbx
.text:00000000000040E6                 mov     rbx, rdi
.text:00000000000040E9                 mov     rbp, rsi
.text:00000000000040EC                 sub     rsp, 78h
.text:00000000000040F0                 mov     rdi, [rdi+8]
.text:00000000000040F4                 mov     rax, fs:28h
.text:00000000000040FD                 mov     [rsp+98h+var_30], rax
.text:0000000000004102                 xor     eax, eax
.text:0000000000004104                 cmp     cs:opt_inodes, 0
.text:000000000000410B                 cmovz   rdi, [rbx]
.text:000000000000410F                 call    print_only_size
.text:0000000000004114                 cmp     cs:opt_time, 0
.text:000000000000411B                 jz      short loc_4186
.text:000000000000411D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004124                 mov     rax, [rdi+28h]
.text:0000000000004128                 cmp     rax, [rdi+30h]
.text:000000000000412C                 jnb     loc_41D0
.text:0000000000004132                 lea     rdx, [rax+1]
.text:0000000000004136                 mov     [rdi+28h], rdx
.text:000000000000413A                 mov     byte ptr [rax], 9
.text:000000000000413D
.text:000000000000413D loc_413D:                               ; CODE XREF: print_size+FA↓j
.text:000000000000413D                 mov     r12, cs:localtz
.text:0000000000004144                 mov     rsi, rsp
.text:0000000000004147                 mov     r13, cs:time_format
.text:000000000000414E                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:0000000000004153                 lea     rbx, [rsp+98h+var_88]
.text:0000000000004158                 mov     rdi, r12
.text:000000000000415B                 mov     rdx, rbx
.text:000000000000415E                 movaps  [rsp+98h+var_98], xmm0
.text:0000000000004162                 call    localtime_rz
.text:0000000000004167                 test    rax, rax
.text:000000000000416A                 jz      short loc_41E0
.text:000000000000416C                 mov     r8d, dword ptr [rsp+98h+var_98+8]
.text:0000000000004171                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000004178                 mov     rcx, r12
.text:000000000000417B                 mov     rdx, rbx
.text:000000000000417E                 mov     rsi, r13
.text:0000000000004181                 call    fprintftime
.text:0000000000004186
.text:0000000000004186 loc_4186:                               ; CODE XREF: print_size+3B↑j
.text:0000000000004186                                         ; print_size+14F↓j
.text:0000000000004186                 cmp     cs:opt_nul_terminate_output, 1
.text:000000000000418D                 lea     rsi, aSC        ; "\t%s%c"
.text:0000000000004194                 mov     rdx, rbp
.text:0000000000004197                 mov     edi, 1
.text:000000000000419C                 sbb     ecx, ecx
.text:000000000000419E                 xor     eax, eax
.text:00000000000041A0                 and     ecx, 0Ah
.text:00000000000041A3                 call    ___printf_chk
.text:00000000000041A8                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000041AF                 call    _fflush_unlocked
.text:00000000000041B4                 mov     rax, [rsp+98h+var_30]
.text:00000000000041B9                 xor     rax, fs:28h
.text:00000000000041C2                 jnz     short loc_4234
.text:00000000000041C4                 add     rsp, 78h
.text:00000000000041C8                 pop     rbx
.text:00000000000041C9                 pop     rbp
.text:00000000000041CA                 pop     r12
.text:00000000000041CC                 pop     r13
.text:00000000000041CE                 retn
.text:00000000000041CE ; ---------------------------------------------------------------------------
.text:00000000000041CF                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: print_size+4C↑j
.text:00000000000041D0                 mov     esi, 9          ; int
.text:00000000000041D5                 call    ___overflow
.text:00000000000041DA                 jmp     loc_413D
.text:00000000000041DA ; ---------------------------------------------------------------------------
.text:00000000000041DF                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: print_size+8A↑j
.text:00000000000041E0                 mov     rdi, qword ptr [rsp+98h+var_98]
.text:00000000000041E4                 lea     rsi, [rsp+98h+var_48]
.text:00000000000041E9                 call    imaxtostr
.text:00000000000041EE                 mov     rdi, rax
.text:00000000000041F1                 mov     rbx, rax
.text:00000000000041F4                 call    quote
.text:00000000000041F9                 lea     rsi, aTimeSIsOutOfRa ; "time %s is out of range"
.text:0000000000004200                 mov     r12, rax
.text:0000000000004203                 xor     edi, edi        ; domainname
.text:0000000000004205                 mov     edx, 5          ; category
.text:000000000000420A                 call    _dcgettext
.text:000000000000420F                 xor     esi, esi        ; errnum
.text:0000000000004211                 mov     rdx, rax        ; format
.text:0000000000004214                 xor     edi, edi        ; status
.text:0000000000004216                 mov     rcx, r12
.text:0000000000004219                 xor     eax, eax
.text:000000000000421B                 call    _error
.text:0000000000004220                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004227                 mov     rdi, rbx        ; s
.text:000000000000422A                 call    _fputs_unlocked
.text:000000000000422F                 jmp     loc_4186
.text:0000000000004234 ; ---------------------------------------------------------------------------
.text:0000000000004234
.text:0000000000004234 loc_4234:                               ; CODE XREF: print_size+E2↑j
.text:0000000000004234                 call    ___stack_chk_fail
.text:0000000000004234 ; } // starts at 40E0
.text:0000000000004234 print_size      endp
.text:0000000000004234
.text:0000000000004234 ; ---------------------------------------------------------------------------
.text:0000000000004239                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: noreturn
.text:0000000000004240
.text:0000000000004240 ; void __fastcall __noreturn usage(int status)
.text:0000000000004240                 public usage
.text:0000000000004240 usage           proc near               ; CODE XREF: main+D1D↑p
.text:0000000000004240                                         ; main+120D↑p ...
.text:0000000000004240
.text:0000000000004240 var_A8          = qword ptr -0A8h
.text:0000000000004240 var_A0          = qword ptr -0A0h
.text:0000000000004240 var_98          = qword ptr -98h
.text:0000000000004240 var_90          = qword ptr -90h
.text:0000000000004240 var_88          = qword ptr -88h
.text:0000000000004240 var_80          = qword ptr -80h
.text:0000000000004240 var_78          = qword ptr -78h
.text:0000000000004240 var_70          = qword ptr -70h
.text:0000000000004240 var_68          = qword ptr -68h
.text:0000000000004240 var_60          = qword ptr -60h
.text:0000000000004240 var_58          = qword ptr -58h
.text:0000000000004240 var_50          = qword ptr -50h
.text:0000000000004240 var_48          = qword ptr -48h
.text:0000000000004240 var_40          = qword ptr -40h
.text:0000000000004240 var_30          = qword ptr -30h
.text:0000000000004240
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 push    r13
.text:0000000000004242                 push    r12
.text:0000000000004244                 mov     edx, 5          ; category
.text:0000000000004249                 push    rbp
.text:000000000000424A                 push    rbx
.text:000000000000424B                 mov     ebp, edi
.text:000000000000424D                 sub     rsp, 88h
.text:0000000000004254                 mov     rbx, cs:program_name
.text:000000000000425B                 mov     rax, fs:28h
.text:0000000000004264                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004269                 xor     eax, eax
.text:000000000000426B                 test    edi, edi
.text:000000000000426D                 jz      short loc_429D
.text:000000000000426F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004276                 xor     edi, edi        ; domainname
.text:0000000000004278                 call    _dcgettext
.text:000000000000427D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004284                 mov     rdx, rax
.text:0000000000004287                 mov     rcx, rbx
.text:000000000000428A                 mov     esi, 1
.text:000000000000428F                 xor     eax, eax
.text:0000000000004291                 call    ___fprintf_chk
.text:0000000000004296
.text:0000000000004296 loc_4296:                               ; CODE XREF: usage+3F6↓j
.text:0000000000004296                 mov     edi, ebp        ; status
.text:0000000000004298                 call    _exit
.text:000000000000429D ; ---------------------------------------------------------------------------
.text:000000000000429D
.text:000000000000429D loc_429D:                               ; CODE XREF: usage+2D↑j
.text:000000000000429D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n  or: "...
.text:00000000000042A4                 xor     edi, edi        ; domainname
.text:00000000000042A6                 call    _dcgettext
.text:00000000000042AB                 mov     rcx, rbx
.text:00000000000042AE                 mov     rdx, rbx
.text:00000000000042B1                 mov     rsi, rax
.text:00000000000042B4                 mov     edi, 1
.text:00000000000042B9                 xor     eax, eax
.text:00000000000042BB                 call    ___printf_chk
.text:00000000000042C0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042C7                 lea     rsi, aSummarizeDiskU ; "Summarize disk usage of the set of FILE"...
.text:00000000000042CE                 mov     edx, 5          ; category
.text:00000000000042D3                 xor     edi, edi        ; domainname
.text:00000000000042D5                 call    _dcgettext
.text:00000000000042DA                 mov     rsi, rbx        ; stream
.text:00000000000042DD                 mov     rdi, rax        ; s
.text:00000000000042E0                 call    _fputs_unlocked
.text:00000000000042E5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042EC                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000042F3                 mov     edx, 5          ; category
.text:00000000000042F8                 xor     edi, edi        ; domainname
.text:00000000000042FA                 call    _dcgettext
.text:00000000000042FF                 mov     rsi, rbx        ; stream
.text:0000000000004302                 mov     rdi, rax        ; s
.text:0000000000004305                 call    _fputs_unlocked
.text:000000000000430A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004311                 lea     rsi, a0NullEndEachOu ; "  -0, --null            end each output"...
.text:0000000000004318                 mov     edx, 5          ; category
.text:000000000000431D                 xor     edi, edi        ; domainname
.text:000000000000431F                 call    _dcgettext
.text:0000000000004324                 mov     rsi, rbx        ; stream
.text:0000000000004327                 mov     rdi, rax        ; s
.text:000000000000432A                 call    _fputs_unlocked
.text:000000000000432F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004336                 lea     rsi, aBBlockSizeSize ; "  -B, --block-size=SIZE  scale sizes by"...
.text:000000000000433D                 mov     edx, 5          ; category
.text:0000000000004342                 xor     edi, edi        ; domainname
.text:0000000000004344                 call    _dcgettext
.text:0000000000004349                 mov     rsi, rbx        ; stream
.text:000000000000434C                 mov     rdi, rax        ; s
.text:000000000000434F                 call    _fputs_unlocked
.text:0000000000004354                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000435B                 lea     rsi, aFiles0FromFSum ; "      --files0-from=F   summarize disk "...
.text:0000000000004362                 mov     edx, 5          ; category
.text:0000000000004367                 xor     edi, edi        ; domainname
.text:0000000000004369                 call    _dcgettext
.text:000000000000436E                 mov     rsi, rbx        ; stream
.text:0000000000004371                 mov     rdi, rax        ; s
.text:0000000000004374                 call    _fputs_unlocked
.text:0000000000004379                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004380                 lea     rsi, aKLikeBlockSize ; "  -k                    like --block-si"...
.text:0000000000004387                 mov     edx, 5          ; category
.text:000000000000438C                 xor     edi, edi        ; domainname
.text:000000000000438E                 call    _dcgettext
.text:0000000000004393                 mov     rsi, rbx        ; stream
.text:0000000000004396                 mov     rdi, rax        ; s
.text:0000000000004399                 call    _fputs_unlocked
.text:000000000000439E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043A5                 lea     rsi, aPNoDereference ; "  -P, --no-dereference  don't follow an"...
.text:00000000000043AC                 mov     edx, 5          ; category
.text:00000000000043B1                 xor     edi, edi        ; domainname
.text:00000000000043B3                 call    _dcgettext
.text:00000000000043B8                 mov     rsi, rbx        ; stream
.text:00000000000043BB                 mov     rdi, rax        ; s
.text:00000000000043BE                 call    _fputs_unlocked
.text:00000000000043C3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043CA                 lea     rsi, aTThresholdSize ; "  -t, --threshold=SIZE  exclude entries"...
.text:00000000000043D1                 mov     edx, 5          ; category
.text:00000000000043D6                 xor     edi, edi        ; domainname
.text:00000000000043D8                 call    _dcgettext
.text:00000000000043DD                 mov     rsi, rbx        ; stream
.text:00000000000043E0                 mov     rdi, rax        ; s
.text:00000000000043E3                 call    _fputs_unlocked
.text:00000000000043E8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043EF                 lea     rsi, aXExcludeFromFi ; "  -X, --exclude-from=FILE  exclude file"...
.text:00000000000043F6                 mov     edx, 5          ; category
.text:00000000000043FB                 xor     edi, edi        ; domainname
.text:00000000000043FD                 call    _dcgettext
.text:0000000000004402                 mov     rsi, rbx        ; stream
.text:0000000000004405                 mov     rdi, rax        ; s
.text:0000000000004408                 call    _fputs_unlocked
.text:000000000000440D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004414                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000441B                 mov     edx, 5          ; category
.text:0000000000004420                 xor     edi, edi        ; domainname
.text:0000000000004422                 call    _dcgettext
.text:0000000000004427                 mov     rsi, rbx        ; stream
.text:000000000000442A                 mov     rdi, rax        ; s
.text:000000000000442D                 call    _fputs_unlocked
.text:0000000000004432                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004439                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004440                 mov     edx, 5          ; category
.text:0000000000004445                 xor     edi, edi        ; domainname
.text:0000000000004447                 call    _dcgettext
.text:000000000000444C                 mov     rsi, rbx        ; stream
.text:000000000000444F                 mov     rdi, rax        ; s
.text:0000000000004452                 call    _fputs_unlocked
.text:0000000000004457                 lea     rsi, aDisplayValuesA ; "\nDisplay values are in units of the fi"...
.text:000000000000445E                 mov     edx, 5          ; category
.text:0000000000004463                 xor     edi, edi        ; domainname
.text:0000000000004465                 call    _dcgettext
.text:000000000000446A                 lea     rdx, aDu_0      ; "DU"
.text:0000000000004471                 mov     rsi, rax
.text:0000000000004474                 mov     edi, 1
.text:0000000000004479                 xor     eax, eax
.text:000000000000447B                 call    ___printf_chk
.text:0000000000004480                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004487                 lea     rsi, aTheSizeArgumen ; "\nThe SIZE argument is an integer and o"...
.text:000000000000448E                 mov     edx, 5          ; category
.text:0000000000004493                 xor     edi, edi        ; domainname
.text:0000000000004495                 call    _dcgettext
.text:000000000000449A                 mov     rsi, rbx        ; stream
.text:000000000000449D                 mov     rdi, rax        ; s
.text:00000000000044A0                 lea     rbx, aDu        ; "du"
.text:00000000000044A7                 call    _fputs_unlocked
.text:00000000000044AC                 lea     rax, asc_1FA91  ; "["
.text:00000000000044B3                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000044BA                 mov     [rsp+0A8h+var_48], 0
.text:00000000000044C3                 mov     [rsp+0A8h+var_40], 0
.text:00000000000044CC                 mov     rdx, rsp
.text:00000000000044CF                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000044D3                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000044DA                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000044DF                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000044E6                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000044EB                 lea     rax, domainname ; "coreutils"
.text:00000000000044F2                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000044F7                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000044FE                 mov     [rsp+0A8h+var_98], rax
.text:0000000000004503                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000450A                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000450F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000004514                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000451B                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004520                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004527                 mov     [rsp+0A8h+var_80], rax
.text:000000000000452C                 mov     [rsp+0A8h+var_70], rax
.text:0000000000004531                 mov     [rsp+0A8h+var_60], rax
.text:0000000000004536                 mov     [rsp+0A8h+var_50], rax
.text:000000000000453B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: usage+31D↓j
.text:0000000000004540                 add     rdx, 10h
.text:0000000000004544                 mov     rdi, [rdx]
.text:0000000000004547                 test    rdi, rdi
.text:000000000000454A                 jz      short loc_455F
.text:000000000000454C                 mov     ecx, 3
.text:0000000000004551                 mov     rsi, rbx
.text:0000000000004554                 repe cmpsb
.text:0000000000004556                 setnbe  al
.text:0000000000004559                 sbb     al, 0
.text:000000000000455B                 test    al, al
.text:000000000000455D                 jnz     short loc_4540
.text:000000000000455F
.text:000000000000455F loc_455F:                               ; CODE XREF: usage+30A↑j
.text:000000000000455F                 mov     r12, [rdx+8]
.text:0000000000004563                 xor     edi, edi        ; domainname
.text:0000000000004565                 mov     edx, 5          ; category
.text:000000000000456A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000004571                 test    r12, r12
.text:0000000000004574                 jz      loc_463B
.text:000000000000457A                 call    _dcgettext
.text:000000000000457F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004586                 lea     rdx, unk_1FB07
.text:000000000000458D                 mov     rsi, rax
.text:0000000000004590                 mov     edi, 1
.text:0000000000004595                 xor     eax, eax
.text:0000000000004597                 call    ___printf_chk
.text:000000000000459C                 xor     esi, esi        ; locale
.text:000000000000459E                 mov     edi, 5          ; category
.text:00000000000045A3                 call    _setlocale
.text:00000000000045A8                 test    rax, rax
.text:00000000000045AB                 jz      short loc_45C9
.text:00000000000045AD                 lea     rsi, s2         ; "en_"
.text:00000000000045B4                 mov     edx, 3          ; n
.text:00000000000045B9                 mov     rdi, rax        ; s1
.text:00000000000045BC                 call    _strncmp
.text:00000000000045C1                 test    eax, eax
.text:00000000000045C3                 jnz     loc_46D0
.text:00000000000045C9
.text:00000000000045C9 loc_45C9:                               ; CODE XREF: usage+36B↑j
.text:00000000000045C9                                         ; usage+4B5↓j
.text:00000000000045C9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000045D0                 xor     edi, edi        ; domainname
.text:00000000000045D2                 mov     edx, 5          ; category
.text:00000000000045D7                 call    _dcgettext
.text:00000000000045DC                 lea     rcx, aDu        ; "du"
.text:00000000000045E3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000045EA                 mov     rsi, rax
.text:00000000000045ED                 mov     edi, 1
.text:00000000000045F2                 xor     eax, eax
.text:00000000000045F4                 call    ___printf_chk
.text:00000000000045F9                 cmp     r12, rbx
.text:00000000000045FC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004603                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000460A                 cmovz   rbx, rcx
.text:000000000000460E
.text:000000000000460E loc_460E:                               ; CODE XREF: usage+484↓j
.text:000000000000460E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004615                 xor     edi, edi        ; domainname
.text:0000000000004617                 mov     edx, 5          ; category
.text:000000000000461C                 call    _dcgettext
.text:0000000000004621                 mov     rcx, rbx
.text:0000000000004624                 mov     rsi, rax
.text:0000000000004627                 mov     rdx, r12
.text:000000000000462A                 mov     edi, 1
.text:000000000000462F                 xor     eax, eax
.text:0000000000004631                 call    ___printf_chk
.text:0000000000004636                 jmp     loc_4296
.text:000000000000463B ; ---------------------------------------------------------------------------
.text:000000000000463B
.text:000000000000463B loc_463B:                               ; CODE XREF: usage+334↑j
.text:000000000000463B                 call    _dcgettext
.text:0000000000004640                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004647                 lea     rdx, unk_1FB07
.text:000000000000464E                 mov     rsi, rax
.text:0000000000004651                 mov     edi, 1
.text:0000000000004656                 xor     eax, eax
.text:0000000000004658                 call    ___printf_chk
.text:000000000000465D                 xor     esi, esi        ; locale
.text:000000000000465F                 mov     edi, 5          ; category
.text:0000000000004664                 call    _setlocale
.text:0000000000004669                 test    rax, rax
.text:000000000000466C                 jz      short loc_4686
.text:000000000000466E                 lea     rsi, s2         ; "en_"
.text:0000000000004675                 mov     edx, 3          ; n
.text:000000000000467A                 mov     rdi, rax        ; s1
.text:000000000000467D                 call    _strncmp
.text:0000000000004682                 test    eax, eax
.text:0000000000004684                 jnz     short loc_46C9
.text:0000000000004686
.text:0000000000004686 loc_4686:                               ; CODE XREF: usage+42C↑j
.text:0000000000004686                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000468D                 mov     edx, 5          ; category
.text:0000000000004692                 xor     edi, edi        ; domainname
.text:0000000000004694                 lea     r12, aDu        ; "du"
.text:000000000000469B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000046A2                 call    _dcgettext
.text:00000000000046A7                 lea     rcx, aDu        ; "du"
.text:00000000000046AE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000046B5                 mov     rsi, rax
.text:00000000000046B8                 mov     edi, 1
.text:00000000000046BD                 xor     eax, eax
.text:00000000000046BF                 call    ___printf_chk
.text:00000000000046C4                 jmp     loc_460E
.text:00000000000046C9 ; ---------------------------------------------------------------------------
.text:00000000000046C9
.text:00000000000046C9 loc_46C9:                               ; CODE XREF: usage+444↑j
.text:00000000000046C9                 lea     r12, aDu        ; "du"
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: usage+383↑j
.text:00000000000046D0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000046D7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000046DE                 xor     edi, edi        ; domainname
.text:00000000000046E0                 mov     edx, 5          ; category
.text:00000000000046E5                 call    _dcgettext
.text:00000000000046EA                 mov     rsi, r13        ; stream
.text:00000000000046ED                 mov     rdi, rax        ; s
.text:00000000000046F0                 call    _fputs_unlocked
.text:00000000000046F5                 jmp     loc_45C9
.text:00000000000046F5 ; } // starts at 4240
.text:00000000000046F5 usage           endp
.text:00000000000046F5
.text:00000000000046F5 ; ---------------------------------------------------------------------------
.text:00000000000046FA                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: noreturn
.text:0000000000004700
.text:0000000000004700 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 mov     edi, 1          ; status
.text:0000000000004705                 jmp     usage
.text:0000000000004705 ; } // starts at 4700
.text:0000000000004705 __argmatch_die  endp
.text:0000000000004705
.text:0000000000004705 ; ---------------------------------------------------------------------------
.text:000000000000470A                 align 10h
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710 ; Attributes: info_from_lumina
.text:0000000000004710
.text:0000000000004710 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000004710                 public argmatch
.text:0000000000004710 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000004710                                         ; human_options+52↓p
.text:0000000000004710
.text:0000000000004710 var_58          = qword ptr -58h
.text:0000000000004710 s2              = qword ptr -50h
.text:0000000000004710 var_41          = byte ptr -41h
.text:0000000000004710 var_40          = qword ptr -40h
.text:0000000000004710
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 push    r15
.text:0000000000004712                 push    r14
.text:0000000000004714                 mov     r15, rsi
.text:0000000000004717                 push    r13
.text:0000000000004719                 push    r12
.text:000000000000471B                 mov     r13, rcx
.text:000000000000471E                 push    rbp
.text:000000000000471F                 push    rbx
.text:0000000000004720                 mov     rbp, rdx
.text:0000000000004723                 sub     rsp, 28h
.text:0000000000004727                 mov     [rsp+58h+s2], rdi
.text:000000000000472C                 mov     [rsp+58h+var_40], rdx
.text:0000000000004731                 call    _strlen
.text:0000000000004736                 mov     r14, [r15]
.text:0000000000004739                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000004741                 test    r14, r14
.text:0000000000004744                 jz      loc_47FD
.text:000000000000474A                 mov     r12, rax
.text:000000000000474D                 mov     [rsp+58h+var_41], 0
.text:0000000000004752                 xor     ebx, ebx
.text:0000000000004754                 jmp     short loc_47A7
.text:0000000000004754 ; ---------------------------------------------------------------------------
.text:0000000000004756                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000004760                 mov     rax, [rsp+58h+var_40]
.text:0000000000004765                 test    rax, rax
.text:0000000000004768                 jz      loc_4810
.text:000000000000476E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000004772                 mov     rdx, r13        ; n
.text:0000000000004775                 mov     rsi, rbp        ; s2
.text:0000000000004778                 imul    rdi, r13
.text:000000000000477C                 add     rdi, rax        ; s1
.text:000000000000477F                 call    _memcmp
.text:0000000000004784                 test    eax, eax
.text:0000000000004786                 movzx   eax, [rsp+58h+var_41]
.text:000000000000478B                 mov     ecx, 1
.text:0000000000004790                 cmovnz  eax, ecx
.text:0000000000004793                 mov     [rsp+58h+var_41], al
.text:0000000000004797
.text:0000000000004797 loc_4797:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000004797                                         ; argmatch+105↓j
.text:0000000000004797                 add     rbx, 1
.text:000000000000479B                 add     rbp, r13
.text:000000000000479E                 mov     r14, [r15+rbx*8]
.text:00000000000047A2                 test    r14, r14
.text:00000000000047A5                 jz      short loc_47E8
.text:00000000000047A7
.text:00000000000047A7 loc_47A7:                               ; CODE XREF: argmatch+44↑j
.text:00000000000047A7                                         ; argmatch+D1↓j
.text:00000000000047A7                 mov     rsi, [rsp+58h+s2] ; s2
.text:00000000000047AC                 mov     rdx, r12        ; n
.text:00000000000047AF                 mov     rdi, r14        ; s1
.text:00000000000047B2                 call    _strncmp
.text:00000000000047B7                 test    eax, eax
.text:00000000000047B9                 jnz     short loc_4797
.text:00000000000047BB                 mov     rdi, r14        ; s
.text:00000000000047BE                 call    _strlen
.text:00000000000047C3                 cmp     rax, r12
.text:00000000000047C6                 jz      short loc_4820
.text:00000000000047C8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000047CD                 jnz     short loc_4760
.text:00000000000047CF                 mov     [rsp+58h+var_58], rbx
.text:00000000000047D3                 add     rbx, 1
.text:00000000000047D7                 add     rbp, r13
.text:00000000000047DA                 mov     r14, [r15+rbx*8]
.text:00000000000047DE                 test    r14, r14
.text:00000000000047E1                 jnz     short loc_47A7
.text:00000000000047E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000047E8
.text:00000000000047E8 loc_47E8:                               ; CODE XREF: argmatch+95↑j
.text:00000000000047E8                 cmp     [rsp+58h+var_41], 0
.text:00000000000047ED                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000047F4                 cmovz   rax, [rsp+58h+var_58]
.text:00000000000047F9                 mov     [rsp+58h+var_58], rax
.text:00000000000047FD
.text:00000000000047FD loc_47FD:                               ; CODE XREF: argmatch+34↑j
.text:00000000000047FD                                         ; argmatch+114↓j
.text:00000000000047FD                 mov     rax, [rsp+58h+var_58]
.text:0000000000004801                 add     rsp, 28h
.text:0000000000004805                 pop     rbx
.text:0000000000004806                 pop     rbp
.text:0000000000004807                 pop     r12
.text:0000000000004809                 pop     r13
.text:000000000000480B                 pop     r14
.text:000000000000480D                 pop     r15
.text:000000000000480F                 retn
.text:0000000000004810 ; ---------------------------------------------------------------------------
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: argmatch+58↑j
.text:0000000000004810                 mov     [rsp+58h+var_41], 1
.text:0000000000004815                 jmp     short loc_4797
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004817                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000004820                 mov     [rsp+58h+var_58], rbx
.text:0000000000004824                 jmp     short loc_47FD
.text:0000000000004824 ; } // starts at 4710
.text:0000000000004824 argmatch        endp
.text:0000000000004824
.text:0000000000004824 ; ---------------------------------------------------------------------------
.text:0000000000004826                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830 ; Attributes: info_from_lumina
.text:0000000000004830
.text:0000000000004830 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000004830                 public argmatch_invalid
.text:0000000000004830 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004834                 push    r12
.text:0000000000004836                 mov     edx, 5          ; category
.text:000000000000483B                 push    rbp
.text:000000000000483C                 mov     r12, rsi
.text:000000000000483F                 push    rbx
.text:0000000000004840                 mov     rbp, rdi
.text:0000000000004843                 jz      short loc_4890
.text:0000000000004845                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000484C                 xor     edi, edi        ; domainname
.text:000000000000484E                 call    _dcgettext
.text:0000000000004853                 mov     rbx, rax
.text:0000000000004856
.text:0000000000004856 loc_4856:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000004856                 mov     rsi, rbp
.text:0000000000004859                 mov     edi, 1
.text:000000000000485E                 call    quote_n
.text:0000000000004863                 mov     rdx, r12
.text:0000000000004866                 mov     rbp, rax
.text:0000000000004869                 mov     esi, 8
.text:000000000000486E                 xor     edi, edi
.text:0000000000004870                 call    quotearg_n_style
.text:0000000000004875                 mov     r8, rbp
.text:0000000000004878                 mov     rdx, rbx        ; format
.text:000000000000487B                 mov     rcx, rax
.text:000000000000487E                 pop     rbx
.text:000000000000487F                 pop     rbp
.text:0000000000004880                 pop     r12
.text:0000000000004882                 xor     esi, esi        ; errnum
.text:0000000000004884                 xor     edi, edi        ; status
.text:0000000000004886                 xor     eax, eax
.text:0000000000004888                 jmp     _error
.text:0000000000004888 ; ---------------------------------------------------------------------------
.text:000000000000488D                 align 10h
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000004890                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000004897                 xor     edi, edi        ; domainname
.text:0000000000004899                 call    _dcgettext
.text:000000000000489E                 mov     rbx, rax
.text:00000000000048A1                 jmp     short loc_4856
.text:00000000000048A1 ; } // starts at 4830
.text:00000000000048A1 argmatch_invalid endp
.text:00000000000048A1
.text:00000000000048A1 ; ---------------------------------------------------------------------------
.text:00000000000048A3                 align 10h
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000048B0                 public argmatch_valid
.text:00000000000048B0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 push    r15
.text:00000000000048B2                 push    r14
.text:00000000000048B4                 mov     r14, rdi
.text:00000000000048B7                 push    r13
.text:00000000000048B9                 push    r12
.text:00000000000048BB                 xor     edi, edi        ; domainname
.text:00000000000048BD                 push    rbp
.text:00000000000048BE                 push    rbx
.text:00000000000048BF                 mov     rbp, rsi
.text:00000000000048C2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:00000000000048C9                 mov     r12, rdx
.text:00000000000048CC                 mov     edx, 5          ; category
.text:00000000000048D1                 sub     rsp, 8
.text:00000000000048D5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000048DC                 call    _dcgettext
.text:00000000000048E1                 mov     rdi, rax        ; s
.text:00000000000048E4                 mov     rsi, rbx        ; stream
.text:00000000000048E7                 call    _fputs_unlocked
.text:00000000000048EC                 mov     r15, [r14]
.text:00000000000048EF                 test    r15, r15
.text:00000000000048F2                 jz      loc_4988
.text:00000000000048F8                 xor     r13d, r13d
.text:00000000000048FB                 xor     ebx, ebx
.text:00000000000048FD                 jmp     short loc_4938
.text:00000000000048FD ; ---------------------------------------------------------------------------
.text:00000000000048FF                 align 20h
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000004900                                         ; argmatch_valid+9D↓j
.text:0000000000004900                 mov     rdi, r15
.text:0000000000004903                 add     rbx, 1
.text:0000000000004907                 mov     r13, rbp
.text:000000000000490A                 call    quote
.text:000000000000490F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004916                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000491D                 mov     rcx, rax
.text:0000000000004920                 mov     esi, 1
.text:0000000000004925                 xor     eax, eax
.text:0000000000004927                 add     rbp, r12
.text:000000000000492A                 call    ___fprintf_chk
.text:000000000000492F                 mov     r15, [r14+rbx*8]
.text:0000000000004933                 test    r15, r15
.text:0000000000004936                 jz      short loc_4988
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000004938                                         ; argmatch_valid+D2↓j
.text:0000000000004938                 test    rbx, rbx
.text:000000000000493B                 jz      short loc_4900
.text:000000000000493D                 mov     rdx, r12        ; n
.text:0000000000004940                 mov     rsi, rbp        ; s2
.text:0000000000004943                 mov     rdi, r13        ; s1
.text:0000000000004946                 call    _memcmp
.text:000000000000494B                 test    eax, eax
.text:000000000000494D                 jnz     short loc_4900
.text:000000000000494F                 mov     rdi, r15
.text:0000000000004952                 add     rbx, 1
.text:0000000000004956                 add     rbp, r12
.text:0000000000004959                 call    quote
.text:000000000000495E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004965                 lea     rdx, aS_0       ; ", %s"
.text:000000000000496C                 mov     rcx, rax
.text:000000000000496F                 mov     esi, 1
.text:0000000000004974                 xor     eax, eax
.text:0000000000004976                 call    ___fprintf_chk
.text:000000000000497B                 mov     r15, [r14+rbx*8]
.text:000000000000497F                 test    r15, r15
.text:0000000000004982                 jnz     short loc_4938
.text:0000000000004984                 nop     dword ptr [rax+00h]
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000004988                                         ; argmatch_valid+86↑j
.text:0000000000004988                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000498F                 mov     rax, [rdi+28h]
.text:0000000000004993                 cmp     rax, [rdi+30h]
.text:0000000000004997                 jnb     short loc_49B8
.text:0000000000004999                 lea     rdx, [rax+1]
.text:000000000000499D                 mov     [rdi+28h], rdx
.text:00000000000049A1                 mov     byte ptr [rax], 0Ah
.text:00000000000049A4                 add     rsp, 8
.text:00000000000049A8                 pop     rbx
.text:00000000000049A9                 pop     rbp
.text:00000000000049AA                 pop     r12
.text:00000000000049AC                 pop     r13
.text:00000000000049AE                 pop     r14
.text:00000000000049B0                 pop     r15
.text:00000000000049B2                 retn
.text:00000000000049B2 ; ---------------------------------------------------------------------------
.text:00000000000049B3                 align 8
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:00000000000049B8                 add     rsp, 8
.text:00000000000049BC                 mov     esi, 0Ah        ; int
.text:00000000000049C1                 pop     rbx
.text:00000000000049C2                 pop     rbp
.text:00000000000049C3                 pop     r12
.text:00000000000049C5                 pop     r13
.text:00000000000049C7                 pop     r14
.text:00000000000049C9                 pop     r15
.text:00000000000049CB                 jmp     ___overflow
.text:00000000000049CB ; } // starts at 48B0
.text:00000000000049CB argmatch_valid  endp
.text:00000000000049CB
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0 ; Attributes: info_from_lumina
.text:00000000000049D0
.text:00000000000049D0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:00000000000049D0                 public __xargmatch_internal
.text:00000000000049D0 __xargmatch_internal proc near          ; CODE XREF: main+408↑p
.text:00000000000049D0                                         ; main+10DA↑p
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 push    r15
.text:00000000000049D2                 push    r14
.text:00000000000049D4                 mov     r14, rdi
.text:00000000000049D7                 push    r13
.text:00000000000049D9                 push    r12
.text:00000000000049DB                 mov     r12, rsi
.text:00000000000049DE                 push    rbp
.text:00000000000049DF                 push    rbx
.text:00000000000049E0                 mov     rbp, rcx
.text:00000000000049E3                 mov     rbx, rdx
.text:00000000000049E6                 mov     rcx, r8
.text:00000000000049E9                 mov     rdx, rbp
.text:00000000000049EC                 sub     rsp, 8
.text:00000000000049F0                 mov     rsi, rbx
.text:00000000000049F3                 mov     rdi, r12
.text:00000000000049F6                 mov     r15, r8
.text:00000000000049F9                 mov     r13, r9
.text:00000000000049FC                 call    argmatch
.text:0000000000004A01                 test    rax, rax
.text:0000000000004A04                 js      short loc_4A15
.text:0000000000004A06
.text:0000000000004A06 loc_4A06:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000004A06                 add     rsp, 8
.text:0000000000004A0A                 pop     rbx
.text:0000000000004A0B                 pop     rbp
.text:0000000000004A0C                 pop     r12
.text:0000000000004A0E                 pop     r13
.text:0000000000004A10                 pop     r14
.text:0000000000004A12                 pop     r15
.text:0000000000004A14                 retn
.text:0000000000004A15 ; ---------------------------------------------------------------------------
.text:0000000000004A15
.text:0000000000004A15 loc_4A15:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000004A15                 mov     rdx, rax
.text:0000000000004A18                 mov     rsi, r12
.text:0000000000004A1B                 mov     rdi, r14
.text:0000000000004A1E                 call    argmatch_invalid
.text:0000000000004A23                 mov     rdx, r15
.text:0000000000004A26                 mov     rsi, rbp
.text:0000000000004A29                 mov     rdi, rbx
.text:0000000000004A2C                 call    argmatch_valid
.text:0000000000004A31                 call    r13
.text:0000000000004A34                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A3B                 jmp     short loc_4A06
.text:0000000000004A3B ; } // starts at 49D0
.text:0000000000004A3B __xargmatch_internal endp
.text:0000000000004A3B
.text:0000000000004A3B ; ---------------------------------------------------------------------------
.text:0000000000004A3D                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40 ; Attributes: info_from_lumina
.text:0000000000004A40
.text:0000000000004A40 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000004A40                 public argmatch_to_argument
.text:0000000000004A40 argmatch_to_argument proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 push    r14
.text:0000000000004A42                 push    r13
.text:0000000000004A44                 push    r12
.text:0000000000004A46                 push    rbp
.text:0000000000004A47                 push    rbx
.text:0000000000004A48                 mov     r14, [rsi]
.text:0000000000004A4B                 test    r14, r14
.text:0000000000004A4E                 jz      short loc_4A81
.text:0000000000004A50                 mov     r12, rcx
.text:0000000000004A53                 mov     r13, rdi
.text:0000000000004A56                 mov     rbp, rdx
.text:0000000000004A59                 lea     rbx, [rsi+8]
.text:0000000000004A5D                 jmp     short loc_4A6F
.text:0000000000004A5D ; ---------------------------------------------------------------------------
.text:0000000000004A5F                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000004A60                 mov     r14, [rbx]
.text:0000000000004A63                 add     rbp, r12
.text:0000000000004A66                 add     rbx, 8
.text:0000000000004A6A                 test    r14, r14
.text:0000000000004A6D                 jz      short loc_4A81
.text:0000000000004A6F
.text:0000000000004A6F loc_4A6F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000004A6F                 mov     rdx, r12        ; n
.text:0000000000004A72                 mov     rsi, rbp        ; s2
.text:0000000000004A75                 mov     rdi, r13        ; s1
.text:0000000000004A78                 call    _memcmp
.text:0000000000004A7D                 test    eax, eax
.text:0000000000004A7F                 jnz     short loc_4A60
.text:0000000000004A81
.text:0000000000004A81 loc_4A81:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000004A81                                         ; argmatch_to_argument+2D↑j
.text:0000000000004A81                 pop     rbx
.text:0000000000004A82                 mov     rax, r14
.text:0000000000004A85                 pop     rbp
.text:0000000000004A86                 pop     r12
.text:0000000000004A88                 pop     r13
.text:0000000000004A8A                 pop     r14
.text:0000000000004A8C                 retn
.text:0000000000004A8C ; } // starts at 4A40
.text:0000000000004A8C argmatch_to_argument endp
.text:0000000000004A8C
.text:0000000000004A8C ; ---------------------------------------------------------------------------
.text:0000000000004A8D                 align 10h
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90
.text:0000000000004A90                 public argv_iter_init_argv
.text:0000000000004A90 argv_iter_init_argv proc near           ; CODE XREF: main:loc_3AA9↑p
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 push    rbx
.text:0000000000004A91                 mov     rbx, rdi
.text:0000000000004A94                 mov     edi, 30h ; '0'  ; size
.text:0000000000004A99                 call    _malloc
.text:0000000000004A9E                 test    rax, rax
.text:0000000000004AA1                 jz      short loc_4AB2
.text:0000000000004AA3                 mov     qword ptr [rax], 0
.text:0000000000004AAA                 mov     [rax+20h], rbx
.text:0000000000004AAE                 mov     [rax+28h], rbx
.text:0000000000004AB2
.text:0000000000004AB2 loc_4AB2:                               ; CODE XREF: argv_iter_init_argv+11↑j
.text:0000000000004AB2                 pop     rbx
.text:0000000000004AB3                 retn
.text:0000000000004AB3 ; } // starts at 4A90
.text:0000000000004AB3 argv_iter_init_argv endp
.text:0000000000004AB3
.text:0000000000004AB3 ; ---------------------------------------------------------------------------
.text:0000000000004AB4                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AC0
.text:0000000000004AC0
.text:0000000000004AC0                 public argv_iter_init_stream
.text:0000000000004AC0 argv_iter_init_stream proc near         ; CODE XREF: main+544↑p
.text:0000000000004AC0 ; __unwind {
.text:0000000000004AC0                 push    rbx
.text:0000000000004AC1                 mov     rbx, rdi
.text:0000000000004AC4                 mov     edi, 30h ; '0'  ; size
.text:0000000000004AC9                 call    _malloc
.text:0000000000004ACE                 test    rax, rax
.text:0000000000004AD1                 jz      short loc_4AF6
.text:0000000000004AD3                 mov     [rax], rbx
.text:0000000000004AD6                 mov     qword ptr [rax+10h], 0
.text:0000000000004ADE                 mov     qword ptr [rax+18h], 0
.text:0000000000004AE6                 mov     qword ptr [rax+8], 0
.text:0000000000004AEE                 mov     qword ptr [rax+20h], 0
.text:0000000000004AF6
.text:0000000000004AF6 loc_4AF6:                               ; CODE XREF: argv_iter_init_stream+11↑j
.text:0000000000004AF6                 pop     rbx
.text:0000000000004AF7                 retn
.text:0000000000004AF7 ; } // starts at 4AC0
.text:0000000000004AF7 argv_iter_init_stream endp
.text:0000000000004AF7
.text:0000000000004AF7 ; ---------------------------------------------------------------------------
.text:0000000000004AF8                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00
.text:0000000000004B00                 public argv_iter
.text:0000000000004B00 argv_iter       proc near               ; CODE XREF: main+5B6↑p
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 mov     rcx, [rdi]      ; stream
.text:0000000000004B03                 test    rcx, rcx
.text:0000000000004B06                 jz      short loc_4B40
.text:0000000000004B08                 push    rbp
.text:0000000000004B09                 push    rbx
.text:0000000000004B0A                 mov     rbp, rsi
.text:0000000000004B0D                 mov     rbx, rdi
.text:0000000000004B10                 lea     rsi, [rdi+18h]  ; n
.text:0000000000004B14                 lea     rdi, [rdi+10h]  ; lineptr
.text:0000000000004B18                 sub     rsp, 8
.text:0000000000004B1C                 xor     edx, edx        ; delimiter
.text:0000000000004B1E                 call    _getdelim
.text:0000000000004B23                 test    rax, rax
.text:0000000000004B26                 js      short loc_4B70
.text:0000000000004B28                 mov     dword ptr [rbp+0], 1
.text:0000000000004B2F                 add     qword ptr [rbx+8], 1
.text:0000000000004B34                 mov     rax, [rbx+10h]
.text:0000000000004B38
.text:0000000000004B38 loc_4B38:                               ; CODE XREF: argv_iter+88↓j
.text:0000000000004B38                 add     rsp, 8
.text:0000000000004B3C                 pop     rbx
.text:0000000000004B3D                 pop     rbp
.text:0000000000004B3E                 retn
.text:0000000000004B3E ; ---------------------------------------------------------------------------
.text:0000000000004B3F                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: argv_iter+6↑j
.text:0000000000004B40                 mov     rdx, [rdi+28h]
.text:0000000000004B44                 mov     rax, [rdx]
.text:0000000000004B47                 test    rax, rax
.text:0000000000004B4A                 jz      short loc_4B60
.text:0000000000004B4C                 add     rdx, 8
.text:0000000000004B50                 mov     dword ptr [rsi], 1
.text:0000000000004B56                 mov     [rdi+28h], rdx
.text:0000000000004B5A                 retn
.text:0000000000004B5A ; ---------------------------------------------------------------------------
.text:0000000000004B5B                 align 20h
.text:0000000000004B60
.text:0000000000004B60 loc_4B60:                               ; CODE XREF: argv_iter+4A↑j
.text:0000000000004B60                 mov     dword ptr [rsi], 2
.text:0000000000004B66                 retn
.text:0000000000004B66 ; ---------------------------------------------------------------------------
.text:0000000000004B67                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: argv_iter+26↑j
.text:0000000000004B70                 mov     rdi, [rbx]      ; stream
.text:0000000000004B73                 call    _feof
.text:0000000000004B78                 cmp     eax, 1
.text:0000000000004B7B                 sbb     eax, eax
.text:0000000000004B7D                 and     eax, 2
.text:0000000000004B80                 add     eax, 2
.text:0000000000004B83                 mov     [rbp+0], eax
.text:0000000000004B86                 xor     eax, eax
.text:0000000000004B88                 jmp     short loc_4B38
.text:0000000000004B88 ; } // starts at 4B00
.text:0000000000004B88 argv_iter       endp
.text:0000000000004B88
.text:0000000000004B88 ; ---------------------------------------------------------------------------
.text:0000000000004B8A                 align 10h
.text:0000000000004B90
.text:0000000000004B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B90
.text:0000000000004B90
.text:0000000000004B90                 public argv_iter_n_args
.text:0000000000004B90 argv_iter_n_args proc near              ; CODE XREF: main+A0B↑p
.text:0000000000004B90 ; __unwind {
.text:0000000000004B90                 cmp     qword ptr [rdi], 0
.text:0000000000004B94                 jz      short loc_4BA0
.text:0000000000004B96                 mov     rax, [rdi+8]
.text:0000000000004B9A                 retn
.text:0000000000004B9A ; ---------------------------------------------------------------------------
.text:0000000000004B9B                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: argv_iter_n_args+4↑j
.text:0000000000004BA0                 mov     rax, [rdi+28h]
.text:0000000000004BA4                 sub     rax, [rdi+20h]
.text:0000000000004BA8                 sar     rax, 3
.text:0000000000004BAC                 retn
.text:0000000000004BAC ; } // starts at 4B90
.text:0000000000004BAC argv_iter_n_args endp
.text:0000000000004BAC
.text:0000000000004BAC ; ---------------------------------------------------------------------------
.text:0000000000004BAD                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0
.text:0000000000004BB0 ; __int64 __fastcall argv_iter_free(void *ptr)
.text:0000000000004BB0                 public argv_iter_free
.text:0000000000004BB0 argv_iter_free  proc near               ; CODE XREF: main+B55↑p
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 push    rbx
.text:0000000000004BB1                 cmp     qword ptr [rdi], 0
.text:0000000000004BB5                 mov     rbx, rdi
.text:0000000000004BB8                 jz      short loc_4BC3
.text:0000000000004BBA                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000004BBE                 call    free
.text:0000000000004BC3
.text:0000000000004BC3 loc_4BC3:                               ; CODE XREF: argv_iter_free+8↑j
.text:0000000000004BC3                 mov     rdi, rbx        ; ptr
.text:0000000000004BC6                 pop     rbx
.text:0000000000004BC7                 jmp     free
.text:0000000000004BC7 ; } // starts at 4BB0
.text:0000000000004BC7 argv_iter_free  endp
.text:0000000000004BC7
.text:0000000000004BC7 ; ---------------------------------------------------------------------------
.text:0000000000004BCC                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0
.text:0000000000004BD0                 public close_stdout_set_file_name
.text:0000000000004BD0 close_stdout_set_file_name proc near
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 mov     cs:file_name, rdi
.text:0000000000004BD7                 retn
.text:0000000000004BD7 ; } // starts at 4BD0
.text:0000000000004BD7 close_stdout_set_file_name endp
.text:0000000000004BD7
.text:0000000000004BD7 ; ---------------------------------------------------------------------------
.text:0000000000004BD8                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0
.text:0000000000004BE0                 public close_stdout_set_ignore_EPIPE
.text:0000000000004BE0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 mov     cs:ignore_EPIPE, dil
.text:0000000000004BE7                 retn
.text:0000000000004BE7 ; } // starts at 4BE0
.text:0000000000004BE7 close_stdout_set_ignore_EPIPE endp
.text:0000000000004BE7
.text:0000000000004BE7 ; ---------------------------------------------------------------------------
.text:0000000000004BE8                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BF0
.text:0000000000004BF0 ; Attributes: info_from_lumina
.text:0000000000004BF0
.text:0000000000004BF0 ; void __cdecl close_stdout()
.text:0000000000004BF0                 public close_stdout
.text:0000000000004BF0 close_stdout    proc near               ; DATA XREF: main+8F↑o
.text:0000000000004BF0 ; __unwind {
.text:0000000000004BF0                 push    rbp
.text:0000000000004BF1                 push    rbx
.text:0000000000004BF2                 sub     rsp, 8
.text:0000000000004BF6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004BFD                 call    close_stream
.text:0000000000004C02                 test    eax, eax
.text:0000000000004C04                 jz      short loc_4C1C
.text:0000000000004C06                 call    ___errno_location
.text:0000000000004C0B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000004C12                 mov     rbx, rax
.text:0000000000004C15                 jz      short loc_4C33
.text:0000000000004C17                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000004C1A                 jnz     short loc_4C33
.text:0000000000004C1C
.text:0000000000004C1C loc_4C1C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000004C1C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004C23                 call    close_stream
.text:0000000000004C28                 test    eax, eax
.text:0000000000004C2A                 jnz     short loc_4C72
.text:0000000000004C2C                 add     rsp, 8
.text:0000000000004C30                 pop     rbx
.text:0000000000004C31                 pop     rbp
.text:0000000000004C32                 retn
.text:0000000000004C33 ; ---------------------------------------------------------------------------
.text:0000000000004C33
.text:0000000000004C33 loc_4C33:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000004C33                                         ; close_stdout+2A↑j
.text:0000000000004C33                 lea     rsi, aWriteError ; "write error"
.text:0000000000004C3A                 xor     edi, edi        ; domainname
.text:0000000000004C3C                 mov     edx, 5          ; category
.text:0000000000004C41                 call    _dcgettext
.text:0000000000004C46                 mov     rdi, cs:file_name
.text:0000000000004C4D                 mov     rbp, rax
.text:0000000000004C50                 test    rdi, rdi
.text:0000000000004C53                 jz      short loc_4C7D
.text:0000000000004C55                 call    quotearg_colon
.text:0000000000004C5A                 mov     esi, [rbx]      ; errnum
.text:0000000000004C5C                 lea     rdx, aSS        ; "%s: %s"
.text:0000000000004C63                 mov     rcx, rax
.text:0000000000004C66                 mov     r8, rbp
.text:0000000000004C69                 xor     edi, edi        ; status
.text:0000000000004C6B                 xor     eax, eax
.text:0000000000004C6D                 call    _error
.text:0000000000004C72
.text:0000000000004C72 loc_4C72:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000004C72                                         ; close_stdout+A2↓j
.text:0000000000004C72                 mov     edi, cs:exit_failure ; status
.text:0000000000004C78                 call    __exit
.text:0000000000004C7D ; ---------------------------------------------------------------------------
.text:0000000000004C7D
.text:0000000000004C7D loc_4C7D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000004C7D                 mov     esi, [rbx]      ; errnum
.text:0000000000004C7F                 lea     rdx, aS_0+2     ; format
.text:0000000000004C86                 mov     rcx, rax
.text:0000000000004C89                 xor     edi, edi        ; status
.text:0000000000004C8B                 xor     eax, eax
.text:0000000000004C8D                 call    _error
.text:0000000000004C92                 jmp     short loc_4C72
.text:0000000000004C92 ; } // starts at 4BF0
.text:0000000000004C92 close_stdout    endp
.text:0000000000004C92
.text:0000000000004C92 ; ---------------------------------------------------------------------------
.text:0000000000004C94                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0 di_ent_hash     proc near               ; DATA XREF: di_set_alloc+21↓o
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 mov     rax, [rdi]
.text:0000000000004CA3                 xor     edx, edx
.text:0000000000004CA5                 div     rsi
.text:0000000000004CA8                 mov     rax, rdx
.text:0000000000004CAB                 retn
.text:0000000000004CAB ; } // starts at 4CA0
.text:0000000000004CAB di_ent_hash     endp
.text:0000000000004CAB
.text:0000000000004CAB ; ---------------------------------------------------------------------------
.text:0000000000004CAC                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0 di_ent_compare  proc near               ; DATA XREF: di_set_alloc+1A↓o
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 mov     rax, [rsi]
.text:0000000000004CB3                 cmp     [rdi], rax
.text:0000000000004CB6                 setz    al
.text:0000000000004CB9                 retn
.text:0000000000004CB9 ; } // starts at 4CB0
.text:0000000000004CB9 di_ent_compare  endp
.text:0000000000004CB9
.text:0000000000004CB9 ; ---------------------------------------------------------------------------
.text:0000000000004CBA                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0
.text:0000000000004CC0 di_ino_hash     proc near               ; DATA XREF: map_device_isra_0:loc_4D78↓o
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 mov     rax, rdi
.text:0000000000004CC3                 xor     edx, edx
.text:0000000000004CC5                 div     rsi
.text:0000000000004CC8                 mov     rax, rdx
.text:0000000000004CCB                 retn
.text:0000000000004CCB ; } // starts at 4CC0
.text:0000000000004CCB di_ino_hash     endp
.text:0000000000004CCB
.text:0000000000004CCB ; ---------------------------------------------------------------------------
.text:0000000000004CCC                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CD0
.text:0000000000004CD0
.text:0000000000004CD0 ; __int64 __fastcall di_ent_free(void *ptr)
.text:0000000000004CD0 di_ent_free     proc near               ; DATA XREF: di_set_alloc+13↓o
.text:0000000000004CD0 ; __unwind {
.text:0000000000004CD0                 push    rbx
.text:0000000000004CD1                 mov     rbx, rdi
.text:0000000000004CD4                 mov     rdi, [rdi+8]    ; ptr
.text:0000000000004CD8                 call    hash_free
.text:0000000000004CDD                 mov     rdi, rbx        ; ptr
.text:0000000000004CE0                 pop     rbx
.text:0000000000004CE1                 jmp     free
.text:0000000000004CE1 ; } // starts at 4CD0
.text:0000000000004CE1 di_ent_free     endp
.text:0000000000004CE1
.text:0000000000004CE1 ; ---------------------------------------------------------------------------
.text:0000000000004CE6                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0
.text:0000000000004CF0 map_device_isra_0 proc near             ; CODE XREF: di_set_insert+17↓p
.text:0000000000004CF0                                         ; di_set_lookup+17↓p
.text:0000000000004CF0
.text:0000000000004CF0 var_20          = qword ptr -20h
.text:0000000000004CF0
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 push    r12
.text:0000000000004CF2                 push    rbp
.text:0000000000004CF3                 mov     r12, rdi
.text:0000000000004CF6                 push    rbx
.text:0000000000004CF7                 mov     rbp, rsi
.text:0000000000004CFA                 sub     rsp, 10h
.text:0000000000004CFE                 mov     rbx, [rsi]
.text:0000000000004D01                 test    rbx, rbx
.text:0000000000004D04                 jz      short loc_4D48
.text:0000000000004D06                 cmp     [rbx], rdx
.text:0000000000004D09                 jz      short loc_4D38
.text:0000000000004D0B
.text:0000000000004D0B loc_4D0B:                               ; CODE XREF: map_device_isra_0+76↓j
.text:0000000000004D0B                 mov     [rbx], rdx
.text:0000000000004D0E                 mov     rsi, rbx
.text:0000000000004D11                 mov     rdi, r12
.text:0000000000004D14                 call    hash_insert
.text:0000000000004D19                 test    rax, rax
.text:0000000000004D1C                 jz      short loc_4D70
.text:0000000000004D1E                 cmp     rbx, rax
.text:0000000000004D21                 jz      short loc_4D78
.text:0000000000004D23                 mov     rax, [rax+8]
.text:0000000000004D27                 mov     [rbx+8], rax
.text:0000000000004D2B
.text:0000000000004D2B loc_4D2B:                               ; CODE XREF: map_device_isra_0+82↓j
.text:0000000000004D2B                 add     rsp, 10h
.text:0000000000004D2F                 pop     rbx
.text:0000000000004D30                 pop     rbp
.text:0000000000004D31                 pop     r12
.text:0000000000004D33                 retn
.text:0000000000004D33 ; ---------------------------------------------------------------------------
.text:0000000000004D34                 align 8
.text:0000000000004D38
.text:0000000000004D38 loc_4D38:                               ; CODE XREF: map_device_isra_0+19↑j
.text:0000000000004D38                 mov     rax, [rbx+8]
.text:0000000000004D3C                 add     rsp, 10h
.text:0000000000004D40                 pop     rbx
.text:0000000000004D41                 pop     rbp
.text:0000000000004D42                 pop     r12
.text:0000000000004D44                 retn
.text:0000000000004D44 ; ---------------------------------------------------------------------------
.text:0000000000004D45                 align 8
.text:0000000000004D48
.text:0000000000004D48 loc_4D48:                               ; CODE XREF: map_device_isra_0+14↑j
.text:0000000000004D48                 mov     edi, 10h        ; size
.text:0000000000004D4D                 mov     [rsp+28h+var_20], rdx
.text:0000000000004D52                 call    _malloc
.text:0000000000004D57                 test    rax, rax
.text:0000000000004D5A                 mov     rbx, rax
.text:0000000000004D5D                 mov     [rbp+0], rax
.text:0000000000004D61                 mov     rdx, [rsp+28h+var_20]
.text:0000000000004D66                 jnz     short loc_4D0B
.text:0000000000004D68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: map_device_isra_0+2C↑j
.text:0000000000004D70                 xor     eax, eax
.text:0000000000004D72                 jmp     short loc_4D2B
.text:0000000000004D72 ; ---------------------------------------------------------------------------
.text:0000000000004D74                 align 8
.text:0000000000004D78
.text:0000000000004D78 loc_4D78:                               ; CODE XREF: map_device_isra_0+31↑j
.text:0000000000004D78                 lea     rdx, di_ino_hash
.text:0000000000004D7F                 mov     qword ptr [rbp+0], 0
.text:0000000000004D87                 xor     r8d, r8d
.text:0000000000004D8A                 xor     ecx, ecx
.text:0000000000004D8C                 xor     esi, esi
.text:0000000000004D8E                 mov     edi, 3FDh
.text:0000000000004D93                 call    hash_initialize
.text:0000000000004D98                 mov     [rbx+8], rax
.text:0000000000004D9C                 add     rsp, 10h
.text:0000000000004DA0                 pop     rbx
.text:0000000000004DA1                 pop     rbp
.text:0000000000004DA2                 pop     r12
.text:0000000000004DA4                 retn
.text:0000000000004DA4 ; } // starts at 4CF0
.text:0000000000004DA4 map_device_isra_0 endp
.text:0000000000004DA4
.text:0000000000004DA4 ; ---------------------------------------------------------------------------
.text:0000000000004DA5                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0
.text:0000000000004DB0 map_inode_number_isra_1 proc near       ; CODE XREF: di_set_insert+2B↓p
.text:0000000000004DB0                                         ; di_set_lookup+2B↓p
.text:0000000000004DB0
.text:0000000000004DB0 var_10          = qword ptr -10h
.text:0000000000004DB0
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 lea     rdx, [rsi-1]
.text:0000000000004DB4                 mov     rax, 7FFFFFFFFFFFFFFDh
.text:0000000000004DBE                 cmp     rdx, rax
.text:0000000000004DC1                 jbe     short loc_4DE0
.text:0000000000004DC3                 push    rbx
.text:0000000000004DC4                 mov     rbx, rdi
.text:0000000000004DC7                 sub     rsp, 10h
.text:0000000000004DCB                 mov     rdi, [rdi]
.text:0000000000004DCE                 test    rdi, rdi
.text:0000000000004DD1                 jz      short loc_4DE8
.text:0000000000004DD3
.text:0000000000004DD3 loc_4DD3:                               ; CODE XREF: map_inode_number_isra_1+5A↓j
.text:0000000000004DD3                 add     rsp, 10h
.text:0000000000004DD7                 pop     rbx
.text:0000000000004DD8                 jmp     ino_map_insert
.text:0000000000004DD8 ; ---------------------------------------------------------------------------
.text:0000000000004DDD                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: map_inode_number_isra_1+11↑j
.text:0000000000004DE0                 mov     rax, rsi
.text:0000000000004DE3                 retn
.text:0000000000004DE3 ; ---------------------------------------------------------------------------
.text:0000000000004DE4                 align 8
.text:0000000000004DE8
.text:0000000000004DE8 loc_4DE8:                               ; CODE XREF: map_inode_number_isra_1+21↑j
.text:0000000000004DE8                 mov     rdi, 7FFFFFFFFFFFFFFFh
.text:0000000000004DF2                 mov     [rsp+18h+var_10], rsi
.text:0000000000004DF7                 call    ino_map_alloc
.text:0000000000004DFC                 test    rax, rax
.text:0000000000004DFF                 mov     rdi, rax
.text:0000000000004E02                 mov     [rbx], rax
.text:0000000000004E05                 mov     rsi, [rsp+18h+var_10]
.text:0000000000004E0A                 jnz     short loc_4DD3
.text:0000000000004E0C                 add     rsp, 10h
.text:0000000000004E10                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E17                 pop     rbx
.text:0000000000004E18                 retn
.text:0000000000004E18 ; } // starts at 4DB0
.text:0000000000004E18 map_inode_number_isra_1 endp
.text:0000000000004E18
.text:0000000000004E18 ; ---------------------------------------------------------------------------
.text:0000000000004E19                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20
.text:0000000000004E20                 public di_set_alloc
.text:0000000000004E20 di_set_alloc    proc near               ; CODE XREF: main+55C↑p
.text:0000000000004E20                                         ; main:loc_3D69↑p
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 push    rbx
.text:0000000000004E21                 mov     edi, 18h        ; size
.text:0000000000004E26                 call    _malloc
.text:0000000000004E2B                 test    rax, rax
.text:0000000000004E2E                 mov     rbx, rax
.text:0000000000004E31                 jz      short loc_4E6C
.text:0000000000004E33                 lea     r8, di_ent_free
.text:0000000000004E3A                 lea     rcx, di_ent_compare
.text:0000000000004E41                 lea     rdx, di_ent_hash
.text:0000000000004E48                 xor     esi, esi
.text:0000000000004E4A                 mov     edi, 0Bh
.text:0000000000004E4F                 call    hash_initialize
.text:0000000000004E54                 test    rax, rax
.text:0000000000004E57                 mov     [rbx], rax
.text:0000000000004E5A                 jz      short loc_4E78
.text:0000000000004E5C                 mov     qword ptr [rbx+8], 0
.text:0000000000004E64                 mov     qword ptr [rbx+10h], 0
.text:0000000000004E6C
.text:0000000000004E6C loc_4E6C:                               ; CODE XREF: di_set_alloc+11↑j
.text:0000000000004E6C                                         ; di_set_alloc+62↓j
.text:0000000000004E6C                 mov     rax, rbx
.text:0000000000004E6F                 pop     rbx
.text:0000000000004E70                 retn
.text:0000000000004E70 ; ---------------------------------------------------------------------------
.text:0000000000004E71                 align 8
.text:0000000000004E78
.text:0000000000004E78 loc_4E78:                               ; CODE XREF: di_set_alloc+3A↑j
.text:0000000000004E78                 mov     rdi, rbx        ; ptr
.text:0000000000004E7B                 xor     ebx, ebx
.text:0000000000004E7D                 call    free
.text:0000000000004E82                 jmp     short loc_4E6C
.text:0000000000004E82 ; } // starts at 4E20
.text:0000000000004E82 di_set_alloc    endp
.text:0000000000004E82
.text:0000000000004E82 ; ---------------------------------------------------------------------------
.text:0000000000004E84                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90 ; Attributes: info_from_lumina
.text:0000000000004E90
.text:0000000000004E90 ; __int64 __fastcall rsa_multip_info_free(void *ptr)
.text:0000000000004E90                 public rsa_multip_info_free
.text:0000000000004E90 rsa_multip_info_free proc near          ; CODE XREF: main+B61↑p
.text:0000000000004E90                                         ; main+B72↑p
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 push    rbx
.text:0000000000004E91                 mov     rbx, rdi
.text:0000000000004E94                 mov     rdi, [rdi]      ; ptr
.text:0000000000004E97                 call    hash_free
.text:0000000000004E9C                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000004EA0                 call    free
.text:0000000000004EA5                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000004EA9                 call    free
.text:0000000000004EAE                 mov     rdi, rbx        ; ptr
.text:0000000000004EB1                 pop     rbx
.text:0000000000004EB2                 jmp     free
.text:0000000000004EB2 ; } // starts at 4E90
.text:0000000000004EB2 rsa_multip_info_free endp
.text:0000000000004EB2
.text:0000000000004EB2 ; ---------------------------------------------------------------------------
.text:0000000000004EB7                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0
.text:0000000000004EC0                 public di_set_insert
.text:0000000000004EC0 di_set_insert   proc near               ; CODE XREF: main+72D↑p
.text:0000000000004EC0                                         ; main+1386↑p
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 push    r12
.text:0000000000004EC2                 mov     rax, rsi
.text:0000000000004EC5                 push    rbp
.text:0000000000004EC6                 lea     rsi, [rdi+10h]
.text:0000000000004ECA                 push    rbx
.text:0000000000004ECB                 mov     rbx, rdi
.text:0000000000004ECE                 mov     rdi, [rdi]
.text:0000000000004ED1                 mov     r12, rdx
.text:0000000000004ED4                 mov     rdx, rax
.text:0000000000004ED7                 call    map_device_isra_0
.text:0000000000004EDC                 test    rax, rax
.text:0000000000004EDF                 jz      short loc_4F10
.text:0000000000004EE1                 lea     rdi, [rbx+8]
.text:0000000000004EE5                 mov     rsi, r12
.text:0000000000004EE8                 mov     rbp, rax
.text:0000000000004EEB                 call    map_inode_number_isra_1
.text:0000000000004EF0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EF4                 jz      short loc_4F10
.text:0000000000004EF6                 pop     rbx
.text:0000000000004EF7                 mov     rdi, rbp
.text:0000000000004EFA                 xor     edx, edx
.text:0000000000004EFC                 mov     rsi, rax
.text:0000000000004EFF                 pop     rbp
.text:0000000000004F00                 pop     r12
.text:0000000000004F02                 jmp     hash_insert_if_absent
.text:0000000000004F02 ; ---------------------------------------------------------------------------
.text:0000000000004F07                 align 10h
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: di_set_insert+1F↑j
.text:0000000000004F10                                         ; di_set_insert+34↑j
.text:0000000000004F10                 pop     rbx
.text:0000000000004F11                 mov     eax, 0FFFFFFFFh
.text:0000000000004F16                 pop     rbp
.text:0000000000004F17                 pop     r12
.text:0000000000004F19                 retn
.text:0000000000004F19 ; } // starts at 4EC0
.text:0000000000004F19 di_set_insert   endp
.text:0000000000004F19
.text:0000000000004F19 ; ---------------------------------------------------------------------------
.text:0000000000004F1A                 align 20h
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20
.text:0000000000004F20                 public di_set_lookup
.text:0000000000004F20 di_set_lookup   proc near               ; CODE XREF: main+1276↑p
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 push    r12
.text:0000000000004F22                 mov     rax, rsi
.text:0000000000004F25                 push    rbp
.text:0000000000004F26                 lea     rsi, [rdi+10h]
.text:0000000000004F2A                 push    rbx
.text:0000000000004F2B                 mov     rbx, rdi
.text:0000000000004F2E                 mov     rdi, [rdi]
.text:0000000000004F31                 mov     r12, rdx
.text:0000000000004F34                 mov     rdx, rax
.text:0000000000004F37                 call    map_device_isra_0
.text:0000000000004F3C                 test    rax, rax
.text:0000000000004F3F                 jz      short loc_4F70
.text:0000000000004F41                 lea     rdi, [rbx+8]
.text:0000000000004F45                 mov     rsi, r12
.text:0000000000004F48                 mov     rbp, rax
.text:0000000000004F4B                 call    map_inode_number_isra_1
.text:0000000000004F50                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F54                 jz      short loc_4F70
.text:0000000000004F56                 mov     rsi, rax
.text:0000000000004F59                 mov     rdi, rbp
.text:0000000000004F5C                 call    hash_lookup
.text:0000000000004F61                 test    rax, rax
.text:0000000000004F64                 setnz   al
.text:0000000000004F67                 movzx   eax, al
.text:0000000000004F6A
.text:0000000000004F6A loc_4F6A:                               ; CODE XREF: di_set_lookup+55↓j
.text:0000000000004F6A                 pop     rbx
.text:0000000000004F6B                 pop     rbp
.text:0000000000004F6C                 pop     r12
.text:0000000000004F6E                 retn
.text:0000000000004F6E ; ---------------------------------------------------------------------------
.text:0000000000004F6F                 align 10h
.text:0000000000004F70
.text:0000000000004F70 loc_4F70:                               ; CODE XREF: di_set_lookup+1F↑j
.text:0000000000004F70                                         ; di_set_lookup+34↑j
.text:0000000000004F70                 mov     eax, 0FFFFFFFFh
.text:0000000000004F75                 jmp     short loc_4F6A
.text:0000000000004F75 ; } // starts at 4F20
.text:0000000000004F75 di_set_lookup   endp
.text:0000000000004F75
.text:0000000000004F75 ; ---------------------------------------------------------------------------
.text:0000000000004F77                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80
.text:0000000000004F80 call_addfn      proc near               ; DATA XREF: add_exclude_file+3C↓o
.text:0000000000004F80                                         ; add_exclude_file+82↓o
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 jmp     qword ptr [rcx]
.text:0000000000004F80 ; } // starts at 4F80
.text:0000000000004F80 call_addfn      endp
.text:0000000000004F80
.text:0000000000004F80 ; ---------------------------------------------------------------------------
.text:0000000000004F82                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90
.text:0000000000004F90 ; void string_free(void *ptr)
.text:0000000000004F90 string_free     proc near               ; DATA XREF: add_exclude+141↓o
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 jmp     free
.text:0000000000004F90 ; } // starts at 4F90
.text:0000000000004F90 string_free     endp
.text:0000000000004F90
.text:0000000000004F90 ; ---------------------------------------------------------------------------
.text:0000000000004F95                 align 20h
.text:0000000000004FA0
.text:0000000000004FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FA0
.text:0000000000004FA0
.text:0000000000004FA0 string_compare_ci proc near             ; DATA XREF: add_exclude+11A↓o
.text:0000000000004FA0 ; __unwind {
.text:0000000000004FA0                 sub     rsp, 8
.text:0000000000004FA4                 call    mbscasecmp
.text:0000000000004FA9                 test    eax, eax
.text:0000000000004FAB                 setz    al
.text:0000000000004FAE                 add     rsp, 8
.text:0000000000004FB2                 retn
.text:0000000000004FB2 ; } // starts at 4FA0
.text:0000000000004FB2 string_compare_ci endp
.text:0000000000004FB2
.text:0000000000004FB2 ; ---------------------------------------------------------------------------
.text:0000000000004FB3                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0
.text:0000000000004FC0 string_compare  proc near               ; DATA XREF: add_exclude+12E↓o
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 sub     rsp, 8
.text:0000000000004FC4                 call    _strcmp
.text:0000000000004FC9                 test    eax, eax
.text:0000000000004FCB                 setz    al
.text:0000000000004FCE                 add     rsp, 8
.text:0000000000004FD2                 retn
.text:0000000000004FD2 ; } // starts at 4FC0
.text:0000000000004FD2 string_compare  endp
.text:0000000000004FD2
.text:0000000000004FD2 ; ---------------------------------------------------------------------------
.text:0000000000004FD3                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0
.text:0000000000004FE0 string_hasher   proc near               ; DATA XREF: add_exclude+14C↓o
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 jmp     hash_string
.text:0000000000004FE0 ; } // starts at 4FE0
.text:0000000000004FE0 string_hasher   endp
.text:0000000000004FE0
.text:0000000000004FE0 ; ---------------------------------------------------------------------------
.text:0000000000004FE5                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0
.text:0000000000004FF0 ; __int64 __fastcall fnmatch_no_wildcards(char *s1, void *src)
.text:0000000000004FF0 fnmatch_no_wildcards proc near          ; CODE XREF: exclude_fnmatch+30↓p
.text:0000000000004FF0                                         ; exclude_fnmatch+95↓p
.text:0000000000004FF0                                         ; DATA XREF: ...
.text:0000000000004FF0
.text:0000000000004FF0 var_1C          = dword ptr -1Ch
.text:0000000000004FF0
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 mov     eax, edx
.text:0000000000004FF2                 and     eax, 10h
.text:0000000000004FF5                 and     edx, 8
.text:0000000000004FF8                 jnz     short loc_5008
.text:0000000000004FFA                 test    eax, eax
.text:0000000000004FFC                 jz      short loc_5050
.text:0000000000004FFE                 jmp     mbscasecmp
.text:0000000000004FFE ; ---------------------------------------------------------------------------
.text:0000000000005003                 align 8
.text:0000000000005008
.text:0000000000005008 loc_5008:                               ; CODE XREF: fnmatch_no_wildcards+8↑j
.text:0000000000005008                 push    r12
.text:000000000000500A                 push    rbp
.text:000000000000500B                 mov     rbp, rdi
.text:000000000000500E                 push    rbx
.text:000000000000500F                 mov     rbx, rsi
.text:0000000000005012                 sub     rsp, 10h
.text:0000000000005016                 test    eax, eax
.text:0000000000005018                 jnz     short loc_5058
.text:000000000000501A                 call    _strlen
.text:000000000000501F                 mov     rsi, rbx        ; s2
.text:0000000000005022                 mov     rdx, rax        ; n
.text:0000000000005025                 mov     rdi, rbp        ; s1
.text:0000000000005028                 mov     r12, rax
.text:000000000000502B                 call    _strncmp
.text:0000000000005030                 test    eax, eax
.text:0000000000005032                 jnz     short loc_503F
.text:0000000000005034                 movsx   edx, byte ptr [rbx+r12]
.text:0000000000005039                 cmp     edx, 2Fh ; '/'
.text:000000000000503C                 cmovnz  eax, edx
.text:000000000000503F
.text:000000000000503F loc_503F:                               ; CODE XREF: fnmatch_no_wildcards+42↑j
.text:000000000000503F                 add     rsp, 10h
.text:0000000000005043                 pop     rbx
.text:0000000000005044                 pop     rbp
.text:0000000000005045                 pop     r12
.text:0000000000005047                 retn
.text:0000000000005047 ; ---------------------------------------------------------------------------
.text:0000000000005048                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: fnmatch_no_wildcards+C↑j
.text:0000000000005050                 jmp     _strcmp
.text:0000000000005050 ; ---------------------------------------------------------------------------
.text:0000000000005055                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: fnmatch_no_wildcards+28↑j
.text:0000000000005058                 mov     rdi, rsi        ; src
.text:000000000000505B                 call    xstrdup
.text:0000000000005060                 mov     r12, rax
.text:0000000000005063                 mov     rdi, rax
.text:0000000000005066                 jmp     short loc_5089
.text:0000000000005066 ; ---------------------------------------------------------------------------
.text:0000000000005068                 align 10h
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: fnmatch_no_wildcards+A9↓j
.text:0000000000005070                 mov     byte ptr [rax], 0
.text:0000000000005073                 mov     rsi, r12
.text:0000000000005076                 mov     rdi, rbp
.text:0000000000005079                 call    mbscasecmp
.text:000000000000507E                 test    eax, eax
.text:0000000000005080                 jle     short loc_50A6
.text:0000000000005082                 lea     rdi, [rbx+1]    ; s
.text:0000000000005086                 mov     byte ptr [rbx], 2Fh ; '/'
.text:0000000000005089
.text:0000000000005089 loc_5089:                               ; CODE XREF: fnmatch_no_wildcards+76↑j
.text:0000000000005089                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000508E                 call    _strchr
.text:0000000000005093                 test    rax, rax
.text:0000000000005096                 mov     rbx, rax
.text:0000000000005099                 jnz     short loc_5070
.text:000000000000509B                 mov     rsi, r12
.text:000000000000509E                 mov     rdi, rbp
.text:00000000000050A1                 call    mbscasecmp
.text:00000000000050A6
.text:00000000000050A6 loc_50A6:                               ; CODE XREF: fnmatch_no_wildcards+90↑j
.text:00000000000050A6                 mov     rdi, r12        ; ptr
.text:00000000000050A9                 mov     [rsp+28h+var_1C], eax
.text:00000000000050AD                 call    free
.text:00000000000050B2                 mov     eax, [rsp+28h+var_1C]
.text:00000000000050B6                 add     rsp, 10h
.text:00000000000050BA                 pop     rbx
.text:00000000000050BB                 pop     rbp
.text:00000000000050BC                 pop     r12
.text:00000000000050BE                 retn
.text:00000000000050BE ; } // starts at 4FF0
.text:00000000000050BE fnmatch_no_wildcards endp
.text:00000000000050BE
.text:00000000000050BE ; ---------------------------------------------------------------------------
.text:00000000000050BF                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0
.text:00000000000050C0 string_hasher_ci proc near              ; DATA XREF: add_exclude+13A↓o
.text:00000000000050C0
.text:00000000000050C0 ps              = qword ptr -90h
.text:00000000000050C0 var_88          = byte ptr -88h
.text:00000000000050C0 var_84          = qword ptr -84h
.text:00000000000050C0 var_7C          = byte ptr -7Ch
.text:00000000000050C0 s               = qword ptr -78h
.text:00000000000050C0 var_70          = qword ptr -70h
.text:00000000000050C0 var_68          = byte ptr -68h
.text:00000000000050C0 var_64          = dword ptr -64h
.text:00000000000050C0 var_40          = qword ptr -40h
.text:00000000000050C0
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 push    r15
.text:00000000000050C2                 push    r14
.text:00000000000050C4                 xor     r14d, r14d
.text:00000000000050C7                 push    r13
.text:00000000000050C9                 push    r12
.text:00000000000050CB                 lea     r12, is_basic_table
.text:00000000000050D2                 push    rbp
.text:00000000000050D3                 push    rbx
.text:00000000000050D4                 mov     rbx, rsi
.text:00000000000050D7                 sub     rsp, 68h
.text:00000000000050DB                 lea     rbp, [rsp+98h+var_88]
.text:00000000000050E0                 mov     [rsp+98h+s], rdi
.text:00000000000050E5                 mov     [rsp+98h+var_88], 0
.text:00000000000050EA                 mov     rax, fs:28h
.text:00000000000050F3                 mov     [rsp+98h+var_40], rax
.text:00000000000050F8                 xor     eax, eax
.text:00000000000050FA                 lea     rax, [rbp+4]
.text:00000000000050FE                 mov     [rsp+98h+var_84], 0
.text:0000000000005107                 mov     [rsp+98h+var_7C], 0
.text:000000000000510C                 mov     [rsp+98h+ps], rax
.text:0000000000005111                 jmp     short loc_5146
.text:0000000000005111 ; ---------------------------------------------------------------------------
.text:0000000000005113                 align 8
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: string_hasher_ci+D5↓j
.text:0000000000005118                 mov     edi, r13d       ; wc
.text:000000000000511B                 call    _towlower
.text:0000000000005120
.text:0000000000005120 loc_5120:                               ; CODE XREF: string_hasher_ci+DB↓j
.text:0000000000005120                 mov     rdx, r14
.text:0000000000005123                 cdqe
.text:0000000000005125                 add     r15, [rsp+98h+var_70]
.text:000000000000512A                 shl     rdx, 5
.text:000000000000512E                 mov     [rsp+98h+var_7C], 0
.text:0000000000005133                 sub     rdx, r14
.text:0000000000005136                 add     rax, rdx
.text:0000000000005139                 xor     edx, edx
.text:000000000000513B                 div     rbx
.text:000000000000513E                 mov     [rsp+98h+s], r15
.text:0000000000005143                 mov     r14, rdx
.text:0000000000005146
.text:0000000000005146 loc_5146:                               ; CODE XREF: string_hasher_ci+51↑j
.text:0000000000005146                 cmp     [rsp+98h+var_88], 0
.text:000000000000514B                 jnz     short loc_51B7
.text:000000000000514D                 mov     rcx, [rsp+98h+s]
.text:0000000000005152                 movzx   edx, byte ptr [rcx]
.text:0000000000005155                 mov     eax, edx
.text:0000000000005157                 shr     al, 5
.text:000000000000515A                 and     eax, 7
.text:000000000000515D                 mov     eax, [r12+rax*4]
.text:0000000000005161                 bt      eax, edx
.text:0000000000005164                 jnb     short loc_51A0
.text:0000000000005166                 mov     [rsp+98h+var_70], 1
.text:000000000000516F                 movsx   r13d, byte ptr [rcx]
.text:0000000000005173                 mov     [rsp+98h+var_68], 1
.text:0000000000005178                 mov     [rsp+98h+var_7C], 1
.text:000000000000517D                 mov     [rsp+98h+var_64], r13d
.text:0000000000005182
.text:0000000000005182 loc_5182:                               ; CODE XREF: string_hasher_ci+20D↓j
.text:0000000000005182                 test    r13d, r13d
.text:0000000000005185                 jz      loc_5250
.text:000000000000518B
.text:000000000000518B loc_518B:                               ; CODE XREF: string_hasher_ci+189↓j
.text:000000000000518B                                         ; string_hasher_ci+1D8↓j ...
.text:000000000000518B                 cmp     [rsp+98h+var_68], 0
.text:0000000000005190                 mov     r15, [rsp+98h+s]
.text:0000000000005195                 jnz     short loc_5118
.text:0000000000005197                 movsx   eax, byte ptr [r15]
.text:000000000000519B                 jmp     short loc_5120
.text:000000000000519B ; ---------------------------------------------------------------------------
.text:000000000000519D                 align 20h
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: string_hasher_ci+A4↑j
.text:00000000000051A0                 mov     rdi, [rsp+98h+ps] ; ps
.text:00000000000051A5                 call    _mbsinit
.text:00000000000051AA                 test    eax, eax
.text:00000000000051AC                 jz      loc_52E2
.text:00000000000051B2                 mov     [rsp+98h+var_88], 1
.text:00000000000051B7
.text:00000000000051B7 loc_51B7:                               ; CODE XREF: string_hasher_ci+8B↑j
.text:00000000000051B7                 call    ___ctype_get_mb_cur_max
.text:00000000000051BC                 mov     r15, [rsp+98h+s]
.text:00000000000051C1                 mov     rsi, rax
.text:00000000000051C4                 mov     rdi, r15
.text:00000000000051C7                 call    strnlen1
.text:00000000000051CC                 lea     rcx, [rbp+4]
.text:00000000000051D0                 lea     rdi, [rbp+24h]
.text:00000000000051D4                 mov     rdx, rax
.text:00000000000051D7                 mov     rsi, r15
.text:00000000000051DA                 call    rpl_mbrtowc
.text:00000000000051DF                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000051E3                 mov     [rsp+98h+var_70], rax
.text:00000000000051E8                 jz      loc_5280
.text:00000000000051EE                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000051F2                 jz      loc_52A0
.text:00000000000051F8                 test    rax, rax
.text:00000000000051FB                 jnz     loc_52D8
.text:0000000000005201                 mov     rax, [rsp+98h+s]
.text:0000000000005206                 mov     [rsp+98h+var_70], 1
.text:000000000000520F                 cmp     byte ptr [rax], 0
.text:0000000000005212                 jnz     loc_5320
.text:0000000000005218                 mov     r13d, [rsp+98h+var_64]
.text:000000000000521D                 test    r13d, r13d
.text:0000000000005220                 jnz     loc_5301
.text:0000000000005226
.text:0000000000005226 loc_5226:                               ; CODE XREF: string_hasher_ci+21D↓j
.text:0000000000005226                 lea     rdi, [rbp+4]    ; ps
.text:000000000000522A                 mov     [rsp+98h+var_68], 1
.text:000000000000522F                 call    _mbsinit
.text:0000000000005234                 test    eax, eax
.text:0000000000005236                 jz      loc_52C8
.text:000000000000523C                 test    r13d, r13d
.text:000000000000523F                 mov     [rsp+98h+var_88], 0
.text:0000000000005244                 mov     [rsp+98h+var_7C], 1
.text:0000000000005249                 jnz     loc_518B
.text:000000000000524F                 nop
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: string_hasher_ci+C5↑j
.text:0000000000005250                 mov     rsi, [rsp+98h+var_40]
.text:0000000000005255                 xor     rsi, fs:28h
.text:000000000000525E                 mov     rax, r14
.text:0000000000005261                 jnz     loc_533F
.text:0000000000005267                 add     rsp, 68h
.text:000000000000526B                 pop     rbx
.text:000000000000526C                 pop     rbp
.text:000000000000526D                 pop     r12
.text:000000000000526F                 pop     r13
.text:0000000000005271                 pop     r14
.text:0000000000005273                 pop     r15
.text:0000000000005275                 retn
.text:0000000000005275 ; ---------------------------------------------------------------------------
.text:0000000000005276                 align 20h
.text:0000000000005280
.text:0000000000005280 loc_5280:                               ; CODE XREF: string_hasher_ci+128↑j
.text:0000000000005280                 mov     [rsp+98h+var_70], 1
.text:0000000000005289                 mov     [rsp+98h+var_68], 0
.text:000000000000528E                 mov     r13d, [rsp+98h+var_64]
.text:0000000000005293                 mov     [rsp+98h+var_7C], 1
.text:0000000000005298                 jmp     loc_518B
.text:0000000000005298 ; ---------------------------------------------------------------------------
.text:000000000000529D                 align 20h
.text:00000000000052A0
.text:00000000000052A0 loc_52A0:                               ; CODE XREF: string_hasher_ci+132↑j
.text:00000000000052A0                 mov     rdi, [rsp+98h+s] ; s
.text:00000000000052A5                 call    _strlen
.text:00000000000052AA                 mov     [rsp+98h+var_68], 0
.text:00000000000052AF                 mov     [rsp+98h+var_70], rax
.text:00000000000052B4                 mov     r13d, [rsp+98h+var_64]
.text:00000000000052B9                 mov     [rsp+98h+var_7C], 1
.text:00000000000052BE                 jmp     loc_518B
.text:00000000000052BE ; ---------------------------------------------------------------------------
.text:00000000000052C3                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: string_hasher_ci+176↑j
.text:00000000000052C8                 mov     [rsp+98h+var_7C], 1
.text:00000000000052CD                 jmp     loc_5182
.text:00000000000052CD ; ---------------------------------------------------------------------------
.text:00000000000052D2                 align 8
.text:00000000000052D8
.text:00000000000052D8 loc_52D8:                               ; CODE XREF: string_hasher_ci+13B↑j
.text:00000000000052D8                 mov     r13d, [rsp+98h+var_64]
.text:00000000000052DD                 jmp     loc_5226
.text:00000000000052E2 ; ---------------------------------------------------------------------------
.text:00000000000052E2
.text:00000000000052E2 loc_52E2:                               ; CODE XREF: string_hasher_ci+EC↑j
.text:00000000000052E2                 lea     rcx, __PRETTY_FUNCTION___5373 ; "mbuiter_multi_next"
.text:00000000000052E9                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:00000000000052F0                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:00000000000052F7                 mov     edx, 96h        ; line
.text:00000000000052FC                 call    ___assert_fail
.text:0000000000005301 ; ---------------------------------------------------------------------------
.text:0000000000005301
.text:0000000000005301 loc_5301:                               ; CODE XREF: string_hasher_ci+160↑j
.text:0000000000005301                 lea     rcx, __PRETTY_FUNCTION___5373 ; "mbuiter_multi_next"
.text:0000000000005308                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000530F                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000005316                 mov     edx, 0B3h       ; line
.text:000000000000531B                 call    ___assert_fail
.text:0000000000005320 ; ---------------------------------------------------------------------------
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: string_hasher_ci+152↑j
.text:0000000000005320                 lea     rcx, __PRETTY_FUNCTION___5373 ; "mbuiter_multi_next"
.text:0000000000005327                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000532E                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000005335                 mov     edx, 0B2h       ; line
.text:000000000000533A                 call    ___assert_fail
.text:000000000000533F ; ---------------------------------------------------------------------------
.text:000000000000533F
.text:000000000000533F loc_533F:                               ; CODE XREF: string_hasher_ci+1A1↑j
.text:000000000000533F                 call    ___stack_chk_fail
.text:000000000000533F ; } // starts at 50C0
.text:000000000000533F string_hasher_ci endp
.text:000000000000533F
.text:000000000000533F ; ---------------------------------------------------------------------------
.text:0000000000005344                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350
.text:0000000000005350                 public exclude_add_pattern_buffer
.text:0000000000005350 exclude_add_pattern_buffer proc near
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 push    rbp
.text:0000000000005351                 push    rbx
.text:0000000000005352                 mov     rbx, rdi
.text:0000000000005355                 mov     edi, 10h
.text:000000000000535A                 mov     rbp, rsi
.text:000000000000535D                 sub     rsp, 8
.text:0000000000005361                 call    xmalloc
.text:0000000000005366                 mov     rdx, [rbx+8]
.text:000000000000536A                 mov     [rax+8], rbp
.text:000000000000536E                 mov     [rbx+8], rax
.text:0000000000005372                 mov     [rax], rdx
.text:0000000000005375                 add     rsp, 8
.text:0000000000005379                 pop     rbx
.text:000000000000537A                 pop     rbp
.text:000000000000537B                 retn
.text:000000000000537B ; } // starts at 5350
.text:000000000000537B exclude_add_pattern_buffer endp
.text:000000000000537B
.text:000000000000537B ; ---------------------------------------------------------------------------
.text:000000000000537C                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public fnmatch_pattern_has_wildcards
.text:0000000000005380 fnmatch_pattern_has_wildcards proc near ; CODE XREF: add_exclude+2A↓p
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 movzx   eax, byte ptr [rdi]
.text:0000000000005383                 mov     r9d, esi
.text:0000000000005386                 mov     r8d, esi
.text:0000000000005389                 lea     rdx, jpt_53AD
.text:0000000000005390                 and     r9d, 20h
.text:0000000000005394                 and     r8d, 8000000h
.text:000000000000539B                 and     esi, 2
.text:000000000000539E
.text:000000000000539E loc_539E:                               ; CODE XREF: fnmatch_pattern_has_wildcards+4F↓j
.text:000000000000539E                                         ; fnmatch_pattern_has_wildcards+73↓j ...
.text:000000000000539E                 cmp     al, 7Dh         ; switch 126 cases
.text:00000000000053A0                 lea     rcx, [rdi+1]
.text:00000000000053A4                 ja      short def_53AD  ; jumptable 00000000000053AD default case, cases 1-32,34-39,44,45,47-62,65-90,93-122,124
.text:00000000000053A6                 movsxd  rax, ds:(jpt_53AD - 21510h)[rdx+rax*4]
.text:00000000000053AA                 add     rax, rdx
.text:00000000000053AD                 jmp     rax             ; switch jump
.text:00000000000053AD ; ---------------------------------------------------------------------------
.text:00000000000053AF                 align 10h
.text:00000000000053B0
.text:00000000000053B0 loc_53B0:                               ; CODE XREF: fnmatch_pattern_has_wildcards+2D↑j
.text:00000000000053B0                                         ; DATA XREF: .rodata:jpt_53AD↓o
.text:00000000000053B0                 xor     eax, eax        ; jumptable 00000000000053AD case 0
.text:00000000000053B2                 retn
.text:00000000000053B2 ; ---------------------------------------------------------------------------
.text:00000000000053B3                 align 8
.text:00000000000053B8
.text:00000000000053B8 loc_53B8:                               ; CODE XREF: fnmatch_pattern_has_wildcards+2D↑j
.text:00000000000053B8                                         ; DATA XREF: .rodata:jpt_53AD↓o
.text:00000000000053B8                 test    r8d, r8d        ; jumptable 00000000000053AD cases 40,41,46,123,125
.text:00000000000053BB                 jz      short def_53AD  ; jumptable 00000000000053AD default case, cases 1-32,34-39,44,45,47-62,65-90,93-122,124
.text:00000000000053BD
.text:00000000000053BD loc_53BD:                               ; CODE XREF: fnmatch_pattern_has_wildcards+2D↑j
.text:00000000000053BD                                         ; fnmatch_pattern_has_wildcards+83↓j
.text:00000000000053BD                                         ; DATA XREF: ...
.text:00000000000053BD                 mov     eax, 1          ; jumptable 00000000000053AD cases 42,63,91
.text:00000000000053C2                 retn
.text:00000000000053C2 ; ---------------------------------------------------------------------------
.text:00000000000053C3                 align 8
.text:00000000000053C8
.text:00000000000053C8 def_53AD:                               ; CODE XREF: fnmatch_pattern_has_wildcards+24↑j
.text:00000000000053C8                                         ; fnmatch_pattern_has_wildcards+2D↑j ...
.text:00000000000053C8                 movzx   eax, byte ptr [rdi+1] ; jumptable 00000000000053AD default case, cases 1-32,34-39,44,45,47-62,65-90,93-122,124
.text:00000000000053CC                 mov     rdi, rcx
.text:00000000000053CF                 jmp     short loc_539E
.text:00000000000053CF ; ---------------------------------------------------------------------------
.text:00000000000053D1                 align 8
.text:00000000000053D8
.text:00000000000053D8 loc_53D8:                               ; CODE XREF: fnmatch_pattern_has_wildcards+2D↑j
.text:00000000000053D8                                         ; DATA XREF: .rodata:jpt_53AD↓o
.text:00000000000053D8                 test    r8d, r8d        ; jumptable 00000000000053AD case 92
.text:00000000000053DB                 jnz     short def_53AD  ; jumptable 00000000000053AD default case, cases 1-32,34-39,44,45,47-62,65-90,93-122,124
.text:00000000000053DD                 test    esi, esi
.text:00000000000053DF                 lea     rax, [rdi+2]
.text:00000000000053E3                 jnz     short loc_53ED
.text:00000000000053E5                 cmp     byte ptr [rdi+1], 0
.text:00000000000053E9                 cmovnz  rcx, rax
.text:00000000000053ED
.text:00000000000053ED loc_53ED:                               ; CODE XREF: fnmatch_pattern_has_wildcards+63↑j
.text:00000000000053ED                 movzx   eax, byte ptr [rcx]
.text:00000000000053F0                 mov     rdi, rcx
.text:00000000000053F3                 jmp     short loc_539E
.text:00000000000053F3 ; ---------------------------------------------------------------------------
.text:00000000000053F5                 align 8
.text:00000000000053F8
.text:00000000000053F8 loc_53F8:                               ; CODE XREF: fnmatch_pattern_has_wildcards+2D↑j
.text:00000000000053F8                                         ; DATA XREF: .rodata:jpt_53AD↓o
.text:00000000000053F8                 test    r9d, r9d        ; jumptable 00000000000053AD cases 33,43,64
.text:00000000000053FB                 jz      short def_53AD  ; jumptable 00000000000053AD default case, cases 1-32,34-39,44,45,47-62,65-90,93-122,124
.text:00000000000053FD                 movzx   eax, byte ptr [rdi+1]
.text:0000000000005401                 cmp     al, 28h ; '('
.text:0000000000005403                 jz      short loc_53BD  ; jumptable 00000000000053AD cases 42,63,91
.text:0000000000005405                 mov     rdi, rcx
.text:0000000000005408                 jmp     short loc_539E
.text:0000000000005408 ; } // starts at 5380
.text:0000000000005408 fnmatch_pattern_has_wildcards endp
.text:0000000000005408
.text:0000000000005408 ; ---------------------------------------------------------------------------
.text:000000000000540A                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410
.text:0000000000005410                 public new_exclude
.text:0000000000005410 new_exclude     proc near               ; CODE XREF: main+9B↑p
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 mov     edi, 10h        ; n
.text:0000000000005415                 jmp     xzalloc
.text:0000000000005415 ; } // starts at 5410
.text:0000000000005415 new_exclude     endp
.text:0000000000005415
.text:0000000000005415 ; ---------------------------------------------------------------------------
.text:000000000000541A                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420
.text:0000000000005420 ; __int64 __fastcall free_exclude(void *ptr)
.text:0000000000005420                 public free_exclude
.text:0000000000005420 free_exclude    proc near
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 push    r14
.text:0000000000005422                 push    r13
.text:0000000000005424                 mov     r14, rdi
.text:0000000000005427                 push    r12
.text:0000000000005429                 push    rbp
.text:000000000000542A                 push    rbx
.text:000000000000542B                 mov     rbx, [rdi]
.text:000000000000542E                 test    rbx, rbx
.text:0000000000005431                 jz      short loc_54AA
.text:0000000000005433                 nop     dword ptr [rax+rax+00h]
.text:0000000000005438
.text:0000000000005438 loc_5438:                               ; CODE XREF: free_exclude+88↓j
.text:0000000000005438                                         ; free_exclude+DF↓j
.text:0000000000005438                 mov     eax, [rbx+8]
.text:000000000000543B                 mov     r13, [rbx]
.text:000000000000543E                 test    eax, eax
.text:0000000000005440                 jz      loc_54E8
.text:0000000000005446                 cmp     eax, 1
.text:0000000000005449                 jnz     short loc_549A
.text:000000000000544B                 cmp     qword ptr [rbx+20h], 0
.text:0000000000005450                 mov     rdi, [rbx+10h]
.text:0000000000005454                 jz      short loc_5495
.text:0000000000005456                 xor     r12d, r12d
.text:0000000000005459                 xor     ebp, ebp
.text:000000000000545B                 jmp     short loc_546E
.text:000000000000545B ; ---------------------------------------------------------------------------
.text:000000000000545D                 align 20h
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: free_exclude+58↓j
.text:0000000000005460                 add     rbp, 1
.text:0000000000005464                 add     r12, 48h ; 'H'
.text:0000000000005468                 cmp     rbp, [rbx+20h]
.text:000000000000546C                 jnb     short loc_5495
.text:000000000000546E
.text:000000000000546E loc_546E:                               ; CODE XREF: free_exclude+3B↑j
.text:000000000000546E                                         ; free_exclude+73↓j
.text:000000000000546E                 lea     rax, [rdi+r12]
.text:0000000000005472                 test    dword ptr [rax], 8000000h
.text:0000000000005478                 jz      short loc_5460
.text:000000000000547A                 lea     rdi, [rax+8]
.text:000000000000547E                 add     rbp, 1
.text:0000000000005482                 add     r12, 48h ; 'H'
.text:0000000000005486                 call    regfree
.text:000000000000548B                 cmp     rbp, [rbx+20h]
.text:000000000000548F                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000005493                 jb      short loc_546E
.text:0000000000005495
.text:0000000000005495 loc_5495:                               ; CODE XREF: free_exclude+34↑j
.text:0000000000005495                                         ; free_exclude+4C↑j
.text:0000000000005495                 call    free
.text:000000000000549A
.text:000000000000549A loc_549A:                               ; CODE XREF: free_exclude+29↑j
.text:000000000000549A                 mov     rdi, rbx        ; ptr
.text:000000000000549D                 mov     rbx, r13
.text:00000000000054A0                 call    free
.text:00000000000054A5                 test    r13, r13
.text:00000000000054A8                 jnz     short loc_5438
.text:00000000000054AA
.text:00000000000054AA loc_54AA:                               ; CODE XREF: free_exclude+11↑j
.text:00000000000054AA                                         ; free_exclude+E5↓j
.text:00000000000054AA                 mov     rbx, [r14+8]
.text:00000000000054AE                 test    rbx, rbx
.text:00000000000054B1                 jz      short loc_54D4
.text:00000000000054B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000054B8
.text:00000000000054B8 loc_54B8:                               ; CODE XREF: free_exclude+B2↓j
.text:00000000000054B8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000054BC                 mov     rbp, [rbx]
.text:00000000000054BF                 call    free
.text:00000000000054C4                 mov     rdi, rbx        ; ptr
.text:00000000000054C7                 mov     rbx, rbp
.text:00000000000054CA                 call    free
.text:00000000000054CF                 test    rbp, rbp
.text:00000000000054D2                 jnz     short loc_54B8
.text:00000000000054D4
.text:00000000000054D4 loc_54D4:                               ; CODE XREF: free_exclude+91↑j
.text:00000000000054D4                 pop     rbx
.text:00000000000054D5                 mov     rdi, r14        ; ptr
.text:00000000000054D8                 pop     rbp
.text:00000000000054D9                 pop     r12
.text:00000000000054DB                 pop     r13
.text:00000000000054DD                 pop     r14
.text:00000000000054DF                 jmp     free
.text:00000000000054DF ; ---------------------------------------------------------------------------
.text:00000000000054E4                 align 8
.text:00000000000054E8
.text:00000000000054E8 loc_54E8:                               ; CODE XREF: free_exclude+20↑j
.text:00000000000054E8                 mov     rdi, [rbx+10h]  ; ptr
.text:00000000000054EC                 call    hash_free
.text:00000000000054F1                 mov     rdi, rbx        ; ptr
.text:00000000000054F4                 mov     rbx, r13
.text:00000000000054F7                 call    free
.text:00000000000054FC                 test    r13, r13
.text:00000000000054FF                 jnz     loc_5438
.text:0000000000005505                 jmp     short loc_54AA
.text:0000000000005505 ; } // starts at 5420
.text:0000000000005505 free_exclude    endp
.text:0000000000005505
.text:0000000000005505 ; ---------------------------------------------------------------------------
.text:0000000000005507                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510 ; __int64 __fastcall exclude_fnmatch(char *s1, void *src)
.text:0000000000005510                 public exclude_fnmatch
.text:0000000000005510 exclude_fnmatch proc near               ; CODE XREF: excluded_file_name+130↓p
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 push    r14
.text:0000000000005512                 push    r13
.text:0000000000005514                 mov     r14, rdi
.text:0000000000005517                 push    r12
.text:0000000000005519                 mov     r12d, edx
.text:000000000000551C                 and     edx, 10000000h
.text:0000000000005522                 push    rbp
.text:0000000000005523                 lea     r13, fnmatch_no_wildcards
.text:000000000000552A                 push    rbx
.text:000000000000552B                 mov     rbx, rsi
.text:000000000000552E                 jz      short loc_5537
.text:0000000000005530                 mov     r13, cs:fnmatch_ptr
.text:0000000000005537
.text:0000000000005537 loc_5537:                               ; CODE XREF: exclude_fnmatch+1E↑j
.text:0000000000005537                 mov     edx, r12d
.text:000000000000553A                 mov     rsi, rbx        ; src
.text:000000000000553D                 mov     rdi, r14        ; s1
.text:0000000000005540                 call    r13 ; fnmatch_no_wildcards
.text:0000000000005543                 test    eax, eax
.text:0000000000005545                 setz    cl
.text:0000000000005548                 test    r12d, 40000000h
.text:000000000000554F                 jnz     short loc_5578
.text:0000000000005551                 movzx   edx, byte ptr [rbx]
.text:0000000000005554                 test    dl, dl
.text:0000000000005556                 jz      short loc_5578
.text:0000000000005558                 test    eax, eax
.text:000000000000555A                 jz      short loc_55B7
.text:000000000000555C                 nop     dword ptr [rax+00h]
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: exclude_fnmatch+64↓j
.text:0000000000005560                                         ; exclude_fnmatch+A5↓j
.text:0000000000005560                 cmp     dl, 2Fh ; '/'
.text:0000000000005563                 lea     rbp, [rbx+1]
.text:0000000000005567                 movzx   eax, byte ptr [rbx+1]
.text:000000000000556B                 jz      short loc_5598
.text:000000000000556D                 test    al, al
.text:000000000000556F                 mov     edx, eax
.text:0000000000005571                 mov     rbx, rbp
.text:0000000000005574                 jnz     short loc_5560
.text:0000000000005576                 xor     ecx, ecx
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: exclude_fnmatch+3F↑j
.text:0000000000005578                                         ; exclude_fnmatch+46↑j ...
.text:0000000000005578                 pop     rbx
.text:0000000000005579                 mov     eax, ecx
.text:000000000000557B                 pop     rbp
.text:000000000000557C                 pop     r12
.text:000000000000557E                 pop     r13
.text:0000000000005580                 pop     r14
.text:0000000000005582                 retn
.text:0000000000005582 ; ---------------------------------------------------------------------------
.text:0000000000005583                 align 8
.text:0000000000005588
.text:0000000000005588 loc_5588:                               ; CODE XREF: exclude_fnmatch+8A↓j
.text:0000000000005588                 movzx   eax, byte ptr [rbp+1]
.text:000000000000558C                 mov     rbx, rbp
.text:000000000000558F                 add     rbp, 1
.text:0000000000005593                 nop     dword ptr [rax+rax+00h]
.text:0000000000005598
.text:0000000000005598 loc_5598:                               ; CODE XREF: exclude_fnmatch+5B↑j
.text:0000000000005598                 cmp     al, 2Fh ; '/'
.text:000000000000559A                 jz      short loc_5588
.text:000000000000559C                 mov     edx, r12d
.text:000000000000559F                 mov     rsi, rbp        ; src
.text:00000000000055A2                 mov     rdi, r14        ; s1
.text:00000000000055A5                 call    r13 ; fnmatch_no_wildcards
.text:00000000000055A8                 movzx   edx, byte ptr [rbx+1]
.text:00000000000055AC                 test    dl, dl
.text:00000000000055AE                 jz      short loc_55D0
.text:00000000000055B0                 test    eax, eax
.text:00000000000055B2                 mov     rbx, rbp
.text:00000000000055B5                 jnz     short loc_5560
.text:00000000000055B7
.text:00000000000055B7 loc_55B7:                               ; CODE XREF: exclude_fnmatch+4A↑j
.text:00000000000055B7                 mov     ecx, 1
.text:00000000000055BC                 pop     rbx
.text:00000000000055BD                 mov     eax, ecx
.text:00000000000055BF                 pop     rbp
.text:00000000000055C0                 pop     r12
.text:00000000000055C2                 pop     r13
.text:00000000000055C4                 pop     r14
.text:00000000000055C6                 retn
.text:00000000000055C6 ; ---------------------------------------------------------------------------
.text:00000000000055C7                 align 10h
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: exclude_fnmatch+9E↑j
.text:00000000000055D0                 test    eax, eax
.text:00000000000055D2                 setz    cl
.text:00000000000055D5                 jmp     short loc_5578
.text:00000000000055D5 ; } // starts at 5510
.text:00000000000055D5 exclude_fnmatch endp
.text:00000000000055D5
.text:00000000000055D5 ; ---------------------------------------------------------------------------
.text:00000000000055D7                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0
.text:00000000000055E0                 public excluded_file_name
.text:00000000000055E0 excluded_file_name proc near            ; CODE XREF: main+684↑p
.text:00000000000055E0
.text:00000000000055E0 src             = qword ptr -40h
.text:00000000000055E0
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 push    r15
.text:00000000000055E2                 push    r14
.text:00000000000055E4                 xor     eax, eax
.text:00000000000055E6                 push    r13
.text:00000000000055E8                 push    r12
.text:00000000000055EA                 push    rbp
.text:00000000000055EB                 push    rbx
.text:00000000000055EC                 sub     rsp, 18h
.text:00000000000055F0                 mov     r14, [rdi]
.text:00000000000055F3                 test    r14, r14
.text:00000000000055F6                 jz      loc_568B
.text:00000000000055FC                 mov     eax, [r14+8]
.text:0000000000005600                 xor     ebp, ebp
.text:0000000000005602                 mov     [rsp+48h+src], rsi
.text:0000000000005607                 test    eax, eax
.text:0000000000005609                 jnz     loc_56EB
.text:000000000000560F                 nop
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: excluded_file_name+105↓j
.text:0000000000005610                 test    rbp, rbp
.text:0000000000005613                 jz      loc_5750
.text:0000000000005619
.text:0000000000005619 loc_5619:                               ; CODE XREF: excluded_file_name+186↓j
.text:0000000000005619                 mov     r15d, [r14+0Ch]
.text:000000000000561D                 mov     r12, [r14+10h]
.text:0000000000005621                 mov     rbx, [rsp+48h+src]
.text:0000000000005626                 mov     r13d, r15d
.text:0000000000005629                 and     r13d, 8
.text:000000000000562D
.text:000000000000562D loc_562D:                               ; CODE XREF: excluded_file_name+E2↓j
.text:000000000000562D                 mov     rsi, rbx        ; src
.text:0000000000005630                 mov     rdi, rbp        ; dest
.text:0000000000005633                 call    _strcpy
.text:0000000000005638                 mov     rsi, rbp
.text:000000000000563B                 mov     rdi, r12
.text:000000000000563E                 call    hash_lookup
.text:0000000000005643                 test    rax, rax
.text:0000000000005646                 jnz     short loc_5672
.text:0000000000005648
.text:0000000000005648 loc_5648:                               ; CODE XREF: excluded_file_name+90↓j
.text:0000000000005648                 test    r13d, r13d
.text:000000000000564B                 jz      short loc_56A0
.text:000000000000564D                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000005652                 mov     rdi, rbp        ; s
.text:0000000000005655                 call    _strrchr
.text:000000000000565A                 test    rax, rax
.text:000000000000565D                 jz      short loc_56A0
.text:000000000000565F                 mov     byte ptr [rax], 0
.text:0000000000005662                 mov     rsi, rbp
.text:0000000000005665                 mov     rdi, r12
.text:0000000000005668                 call    hash_lookup
.text:000000000000566D                 test    rax, rax
.text:0000000000005670                 jz      short loc_5648
.text:0000000000005672
.text:0000000000005672 loc_5672:                               ; CODE XREF: excluded_file_name+66↑j
.text:0000000000005672                                         ; excluded_file_name+137↓j
.text:0000000000005672                 xor     ebx, ebx
.text:0000000000005674
.text:0000000000005674 loc_5674:                               ; CODE XREF: excluded_file_name+190↓j
.text:0000000000005674                 mov     rdi, rbp        ; ptr
.text:0000000000005677                 call    free
.text:000000000000567C                 mov     eax, [r14+0Ch]
.text:0000000000005680                 shr     eax, 1Dh
.text:0000000000005683                 xor     eax, 1
.text:0000000000005686                 and     eax, 1
.text:0000000000005689                 xor     eax, ebx
.text:000000000000568B
.text:000000000000568B loc_568B:                               ; CODE XREF: excluded_file_name+16↑j
.text:000000000000568B                 add     rsp, 18h
.text:000000000000568F                 pop     rbx
.text:0000000000005690                 pop     rbp
.text:0000000000005691                 pop     r12
.text:0000000000005693                 pop     r13
.text:0000000000005695                 pop     r14
.text:0000000000005697                 pop     r15
.text:0000000000005699                 retn
.text:0000000000005699 ; ---------------------------------------------------------------------------
.text:000000000000569A                 align 20h
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: excluded_file_name+6B↑j
.text:00000000000056A0                                         ; excluded_file_name+7D↑j
.text:00000000000056A0                 test    r15d, 40000000h
.text:00000000000056A7                 jnz     short loc_56D0
.text:00000000000056A9                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000056AE                 mov     rdi, rbx        ; s
.text:00000000000056B1                 call    _strchr
.text:00000000000056B6                 test    rax, rax
.text:00000000000056B9                 jz      short loc_56D0
.text:00000000000056BB                 add     rax, 1
.text:00000000000056BF                 mov     rbx, rax
.text:00000000000056C2                 jnz     loc_562D
.text:00000000000056C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: excluded_file_name+C7↑j
.text:00000000000056D0                                         ; excluded_file_name+D9↑j ...
.text:00000000000056D0                 mov     rax, [r14]
.text:00000000000056D3                 test    rax, rax
.text:00000000000056D6                 jz      loc_576B
.text:00000000000056DC                 mov     r14, rax
.text:00000000000056DF                 mov     eax, [r14+8]
.text:00000000000056E3                 test    eax, eax
.text:00000000000056E5                 jz      loc_5610
.text:00000000000056EB
.text:00000000000056EB loc_56EB:                               ; CODE XREF: excluded_file_name+29↑j
.text:00000000000056EB                 mov     r12, [r14+20h]
.text:00000000000056EF                 mov     rbx, [r14+10h]
.text:00000000000056F3                 test    r12, r12
.text:00000000000056F6                 jz      short loc_56D0
.text:00000000000056F8                 add     rbx, 8
.text:00000000000056FC                 xor     r13d, r13d
.text:00000000000056FF                 jmp     short loc_572A
.text:00000000000056FF ; ---------------------------------------------------------------------------
.text:0000000000005701                 align 8
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: excluded_file_name+153↓j
.text:0000000000005708                 mov     rsi, [rsp+48h+src] ; src
.text:000000000000570D                 mov     rdi, [rbx]      ; s1
.text:0000000000005710                 call    exclude_fnmatch
.text:0000000000005715
.text:0000000000005715 loc_5715:                               ; CODE XREF: excluded_file_name+16E↓j
.text:0000000000005715                 test    al, al
.text:0000000000005717                 jnz     loc_5672
.text:000000000000571D                 add     r13, 1
.text:0000000000005721                 add     rbx, 48h ; 'H'
.text:0000000000005725                 cmp     r12, r13
.text:0000000000005728                 jz      short loc_56D0
.text:000000000000572A
.text:000000000000572A loc_572A:                               ; CODE XREF: excluded_file_name+11F↑j
.text:000000000000572A                 mov     edx, [rbx-8]
.text:000000000000572D                 test    edx, 8000000h
.text:0000000000005733                 jz      short loc_5708
.text:0000000000005735                 mov     rsi, [rsp+48h+src]
.text:000000000000573A                 xor     r8d, r8d
.text:000000000000573D                 xor     ecx, ecx
.text:000000000000573F                 xor     edx, edx
.text:0000000000005741                 mov     rdi, rbx
.text:0000000000005744                 call    rpl_regexec
.text:0000000000005749                 test    eax, eax
.text:000000000000574B                 setz    al
.text:000000000000574E                 jmp     short loc_5715
.text:0000000000005750 ; ---------------------------------------------------------------------------
.text:0000000000005750
.text:0000000000005750 loc_5750:                               ; CODE XREF: excluded_file_name+33↑j
.text:0000000000005750                 mov     rdi, [rsp+48h+src] ; s
.text:0000000000005755                 call    _strlen
.text:000000000000575A                 lea     rdi, [rax+1]
.text:000000000000575E                 call    xmalloc
.text:0000000000005763                 mov     rbp, rax
.text:0000000000005766                 jmp     loc_5619
.text:000000000000576B ; ---------------------------------------------------------------------------
.text:000000000000576B
.text:000000000000576B loc_576B:                               ; CODE XREF: excluded_file_name+F6↑j
.text:000000000000576B                 mov     ebx, 1
.text:0000000000005770                 jmp     loc_5674
.text:0000000000005770 ; } // starts at 55E0
.text:0000000000005770 excluded_file_name endp
.text:0000000000005770
.text:0000000000005770 ; ---------------------------------------------------------------------------
.text:0000000000005775                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780
.text:0000000000005780                 public add_exclude
.text:0000000000005780 add_exclude     proc near               ; CODE XREF: main+46A↑p
.text:0000000000005780                                         ; DATA XREF: main+28A↑o
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 push    r15
.text:0000000000005782                 push    r14
.text:0000000000005784                 push    r13
.text:0000000000005786                 push    r12
.text:0000000000005788                 mov     r13, rsi
.text:000000000000578B                 push    rbp
.text:000000000000578C                 push    rbx
.text:000000000000578D                 mov     ebp, edx
.text:000000000000578F                 mov     r12, rdi
.text:0000000000005792                 sub     rsp, 8
.text:0000000000005796                 and     edx, 18000000h
.text:000000000000579C                 mov     rbx, [rdi]
.text:000000000000579F                 jz      loc_5880
.text:00000000000057A5                 mov     esi, ebp
.text:00000000000057A7                 mov     rdi, r13
.text:00000000000057AA                 call    fnmatch_pattern_has_wildcards
.text:00000000000057AF                 test    al, al
.text:00000000000057B1                 jz      loc_5880
.text:00000000000057B7                 test    rbx, rbx
.text:00000000000057BA                 jz      short loc_57C6
.text:00000000000057BC                 cmp     dword ptr [rbx+8], 1
.text:00000000000057C0                 jz      loc_59E8
.text:00000000000057C6
.text:00000000000057C6 loc_57C6:                               ; CODE XREF: add_exclude+3A↑j
.text:00000000000057C6                                         ; add_exclude+278↓j
.text:00000000000057C6                 mov     edi, 28h ; '('  ; n
.text:00000000000057CB                 call    xzalloc
.text:00000000000057D0                 mov     rbx, rax
.text:00000000000057D3                 mov     dword ptr [rax+8], 1
.text:00000000000057DA                 mov     [rax+0Ch], ebp
.text:00000000000057DD                 mov     rax, [r12]
.text:00000000000057E1                 mov     [r12], rbx
.text:00000000000057E5                 mov     [rbx], rax
.text:00000000000057E8
.text:00000000000057E8 loc_57E8:                               ; CODE XREF: add_exclude+272↓j
.text:00000000000057E8                 mov     rcx, [rbx+20h]
.text:00000000000057EC                 cmp     rcx, [rbx+18h]
.text:00000000000057F0                 mov     rdi, [rbx+10h]
.text:00000000000057F4                 jz      loc_5A00
.text:00000000000057FA
.text:00000000000057FA loc_57FA:                               ; CODE XREF: add_exclude+2BB↓j
.text:00000000000057FA                 lea     rax, [rcx+rcx*8]
.text:00000000000057FE                 lea     r15, [rcx+1]
.text:0000000000005802                 test    ebp, 8000000h
.text:0000000000005808                 lea     r14, [rdi+rax*8]
.text:000000000000580C                 mov     [rbx+20h], r15
.text:0000000000005810                 mov     [r14], ebp
.text:0000000000005813                 jz      loc_59A0
.text:0000000000005819                 mov     r12d, ebp
.text:000000000000581C                 sar     r12d, 3
.text:0000000000005820                 and     r12d, 2
.text:0000000000005824                 or      r12d, 9
.text:0000000000005828                 and     ebp, 8
.text:000000000000582B                 jz      loc_5A70
.text:0000000000005831                 mov     rdi, r13        ; s
.text:0000000000005834                 call    _strlen
.text:0000000000005839                 test    rax, rax
.text:000000000000583C                 jz      short loc_5868
.text:000000000000583E                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:0000000000005844                 lea     rbp, [rax-1]
.text:0000000000005848                 jz      short loc_5863
.text:000000000000584A                 jmp     loc_5A92
.text:000000000000584A ; ---------------------------------------------------------------------------
.text:000000000000584F                 align 10h
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: add_exclude+E6↓j
.text:0000000000005850                 cmp     byte ptr [r13+rbp-1], 2Fh ; '/'
.text:0000000000005856                 lea     rax, [rbp-1]
.text:000000000000585A                 jnz     loc_5A98
.text:0000000000005860                 mov     rbp, rax
.text:0000000000005863
.text:0000000000005863 loc_5863:                               ; CODE XREF: add_exclude+C8↑j
.text:0000000000005863                 test    rbp, rbp
.text:0000000000005866                 jnz     short loc_5850
.text:0000000000005868
.text:0000000000005868 loc_5868:                               ; CODE XREF: add_exclude+BC↑j
.text:0000000000005868                                         ; add_exclude+30D↓j
.text:0000000000005868                 lea     rax, [r15-1]
.text:000000000000586C                 mov     [rbx+20h], rax
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: add_exclude+197↓j
.text:0000000000005870                                         ; add_exclude+303↓j
.text:0000000000005870                 add     rsp, 8
.text:0000000000005874                 pop     rbx
.text:0000000000005875                 pop     rbp
.text:0000000000005876                 pop     r12
.text:0000000000005878                 pop     r13
.text:000000000000587A                 pop     r14
.text:000000000000587C                 pop     r15
.text:000000000000587E                 retn
.text:000000000000587E ; ---------------------------------------------------------------------------
.text:000000000000587F                 align 20h
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: add_exclude+1F↑j
.text:0000000000005880                                         ; add_exclude+31↑j
.text:0000000000005880                 test    rbx, rbx
.text:0000000000005883                 jz      short loc_5890
.text:0000000000005885                 mov     edx, [rbx+8]
.text:0000000000005888                 test    edx, edx
.text:000000000000588A                 jz      loc_5938
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: add_exclude+103↑j
.text:0000000000005890                                         ; add_exclude+1C4↓j
.text:0000000000005890                 mov     edi, 28h ; '('  ; n
.text:0000000000005895                 call    xzalloc
.text:000000000000589A                 lea     rdx, string_compare_ci
.text:00000000000058A1                 mov     rbx, rax
.text:00000000000058A4                 mov     dword ptr [rax+8], 0
.text:00000000000058AB                 mov     [rax+0Ch], ebp
.text:00000000000058AE                 lea     rcx, string_compare
.text:00000000000058B5                 mov     eax, ebp
.text:00000000000058B7                 and     eax, 10h
.text:00000000000058BA                 lea     rax, string_hasher_ci
.text:00000000000058C1                 lea     r8, string_free
.text:00000000000058C8                 cmovnz  rcx, rdx
.text:00000000000058CC                 lea     rdx, string_hasher
.text:00000000000058D3                 cmovnz  rdx, rax
.text:00000000000058D7                 xor     esi, esi
.text:00000000000058D9                 xor     edi, edi
.text:00000000000058DB                 call    hash_initialize
.text:00000000000058E0                 mov     [rbx+10h], rax
.text:00000000000058E4                 mov     rax, [r12]
.text:00000000000058E8                 mov     [r12], rbx
.text:00000000000058EC                 mov     [rbx], rax
.text:00000000000058EF
.text:00000000000058EF loc_58EF:                               ; CODE XREF: add_exclude+1C2↓j
.text:00000000000058EF                 mov     rdi, r13        ; src
.text:00000000000058F2                 and     ebp, 10000002h
.text:00000000000058F8                 call    xstrdup
.text:00000000000058FD                 cmp     ebp, 10000000h
.text:0000000000005903                 mov     r12, rax
.text:0000000000005906                 jz      short loc_5950
.text:0000000000005908
.text:0000000000005908 loc_5908:                               ; CODE XREF: add_exclude+1E9↓j
.text:0000000000005908                 mov     rdi, [rbx+10h]
.text:000000000000590C                 mov     rsi, r12
.text:000000000000590F                 call    hash_insert
.text:0000000000005914                 cmp     r12, rax
.text:0000000000005917                 jz      loc_5870
.text:000000000000591D                 add     rsp, 8
.text:0000000000005921                 mov     rdi, r12        ; ptr
.text:0000000000005924                 pop     rbx
.text:0000000000005925                 pop     rbp
.text:0000000000005926                 pop     r12
.text:0000000000005928                 pop     r13
.text:000000000000592A                 pop     r14
.text:000000000000592C                 pop     r15
.text:000000000000592E                 jmp     free
.text:000000000000592E ; ---------------------------------------------------------------------------
.text:0000000000005933                 align 8
.text:0000000000005938
.text:0000000000005938 loc_5938:                               ; CODE XREF: add_exclude+10A↑j
.text:0000000000005938                 mov     eax, [rbx+0Ch]
.text:000000000000593B                 xor     eax, ebp
.text:000000000000593D                 test    eax, 60000018h
.text:0000000000005942                 jz      short loc_58EF
.text:0000000000005944                 jmp     loc_5890
.text:0000000000005944 ; ---------------------------------------------------------------------------
.text:0000000000005949                 align 10h
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: add_exclude+186↑j
.text:0000000000005950                 mov     rdx, rax
.text:0000000000005953                 mov     rcx, rax
.text:0000000000005956                 jmp     short loc_596E
.text:0000000000005956 ; ---------------------------------------------------------------------------
.text:0000000000005958                 align 20h
.text:0000000000005960
.text:0000000000005960 loc_5960:                               ; CODE XREF: add_exclude+1F7↓j
.text:0000000000005960                                         ; add_exclude+207↓j
.text:0000000000005960                 add     rcx, 1
.text:0000000000005964                 test    al, al
.text:0000000000005966                 mov     [rcx-1], al
.text:0000000000005969                 jz      short loc_5908
.text:000000000000596B
.text:000000000000596B loc_596B:                               ; CODE XREF: add_exclude+218↓j
.text:000000000000596B                 mov     rdx, rsi
.text:000000000000596E
.text:000000000000596E loc_596E:                               ; CODE XREF: add_exclude+1D6↑j
.text:000000000000596E                 movzx   eax, byte ptr [rdx]
.text:0000000000005971                 lea     rsi, [rdx+1]
.text:0000000000005975                 cmp     al, 5Ch ; '\'
.text:0000000000005977                 jnz     short loc_5960
.text:0000000000005979                 cmp     byte ptr [rdx+1], 0
.text:000000000000597D                 jz      short loc_5990
.text:000000000000597F                 movzx   eax, byte ptr [rdx+1]
.text:0000000000005983                 lea     rsi, [rdx+2]
.text:0000000000005987                 jmp     short loc_5960
.text:0000000000005987 ; ---------------------------------------------------------------------------
.text:0000000000005989                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: add_exclude+1FD↑j
.text:0000000000005990                 add     rcx, 1
.text:0000000000005994                 mov     byte ptr [rcx-1], 5Ch ; '\'
.text:0000000000005998                 jmp     short loc_596B
.text:0000000000005998 ; ---------------------------------------------------------------------------
.text:000000000000599A                 align 20h
.text:00000000000059A0
.text:00000000000059A0 loc_59A0:                               ; CODE XREF: add_exclude+93↑j
.text:00000000000059A0                 and     ebp, 4000000h
.text:00000000000059A6                 jz      short loc_59CE
.text:00000000000059A8                 mov     rdi, r13        ; src
.text:00000000000059AB                 call    xstrdup
.text:00000000000059B0                 mov     edi, 10h
.text:00000000000059B5                 mov     r13, rax
.text:00000000000059B8                 call    xmalloc
.text:00000000000059BD                 mov     rdx, [r12+8]
.text:00000000000059C2                 mov     [rax+8], r13
.text:00000000000059C6                 mov     [r12+8], rax
.text:00000000000059CB                 mov     [rax], rdx
.text:00000000000059CE
.text:00000000000059CE loc_59CE:                               ; CODE XREF: add_exclude+226↑j
.text:00000000000059CE                 mov     [r14+8], r13
.text:00000000000059D2                 add     rsp, 8
.text:00000000000059D6                 pop     rbx
.text:00000000000059D7                 pop     rbp
.text:00000000000059D8                 pop     r12
.text:00000000000059DA                 pop     r13
.text:00000000000059DC                 pop     r14
.text:00000000000059DE                 pop     r15
.text:00000000000059E0                 retn
.text:00000000000059E0 ; ---------------------------------------------------------------------------
.text:00000000000059E1                 align 8
.text:00000000000059E8
.text:00000000000059E8 loc_59E8:                               ; CODE XREF: add_exclude+40↑j
.text:00000000000059E8                 mov     eax, [rbx+0Ch]
.text:00000000000059EB                 xor     eax, ebp
.text:00000000000059ED                 test    eax, 20000000h
.text:00000000000059F2                 jz      loc_57E8
.text:00000000000059F8                 jmp     loc_57C6
.text:00000000000059F8 ; ---------------------------------------------------------------------------
.text:00000000000059FD                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: add_exclude+74↑j
.text:0000000000005A00                 test    rdi, rdi
.text:0000000000005A03                 jz      short loc_5A40
.text:0000000000005A05                 mov     rax, 12F684BDA12F683h
.text:0000000000005A0F                 cmp     rcx, rax
.text:0000000000005A12                 ja      short loc_5A69
.text:0000000000005A14                 mov     rax, rcx
.text:0000000000005A17                 shr     rax, 1
.text:0000000000005A1A                 lea     rcx, [rcx+rax+1]
.text:0000000000005A1F
.text:0000000000005A1F loc_5A1F:                               ; CODE XREF: add_exclude+2E7↓j
.text:0000000000005A1F                 lea     rsi, [rcx+rcx*8]
.text:0000000000005A23                 mov     [rbx+18h], rcx
.text:0000000000005A27                 shl     rsi, 3
.text:0000000000005A2B                 call    xrealloc
.text:0000000000005A30                 mov     rcx, [rbx+20h]
.text:0000000000005A34                 mov     rdi, rax
.text:0000000000005A37                 mov     [rbx+10h], rax
.text:0000000000005A3B                 jmp     loc_57FA
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: add_exclude+283↑j
.text:0000000000005A40                 test    rcx, rcx
.text:0000000000005A43                 mov     eax, 1
.text:0000000000005A48                 mov     edx, 48h ; 'H'
.text:0000000000005A4D                 cmovz   rcx, rax
.text:0000000000005A51                 mov     rax, rdx
.text:0000000000005A54                 xor     esi, esi
.text:0000000000005A56                 mul     rcx
.text:0000000000005A59                 jo      loc_5AE4
.text:0000000000005A5F
.text:0000000000005A5F loc_5A5F:                               ; CODE XREF: add_exclude+369↓j
.text:0000000000005A5F                 test    rax, rax
.text:0000000000005A62                 js      short loc_5A69
.text:0000000000005A64                 test    rsi, rsi
.text:0000000000005A67                 jz      short loc_5A1F
.text:0000000000005A69
.text:0000000000005A69 loc_5A69:                               ; CODE XREF: add_exclude+292↑j
.text:0000000000005A69                                         ; add_exclude+2E2↑j
.text:0000000000005A69                 call    xalloc_die
.text:0000000000005A69 ; ---------------------------------------------------------------------------
.text:0000000000005A6E                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: add_exclude+AB↑j
.text:0000000000005A70                 lea     rdi, [r14+8]
.text:0000000000005A74                 mov     edx, r12d
.text:0000000000005A77                 mov     rsi, r13
.text:0000000000005A7A                 call    rpl_regcomp
.text:0000000000005A7F                 mov     ebp, eax
.text:0000000000005A81
.text:0000000000005A81 loc_5A81:                               ; CODE XREF: add_exclude+362↓j
.text:0000000000005A81                 test    ebp, ebp
.text:0000000000005A83                 jz      loc_5870
.text:0000000000005A89                 mov     r15, [rbx+20h]
.text:0000000000005A8D                 jmp     loc_5868
.text:0000000000005A92 ; ---------------------------------------------------------------------------
.text:0000000000005A92
.text:0000000000005A92 loc_5A92:                               ; CODE XREF: add_exclude+CA↑j
.text:0000000000005A92                 mov     rbp, rax
.text:0000000000005A95                 nop     dword ptr [rax]
.text:0000000000005A98
.text:0000000000005A98 loc_5A98:                               ; CODE XREF: add_exclude+DA↑j
.text:0000000000005A98                 lea     rdi, [rbp+7]
.text:0000000000005A9C                 call    xmalloc
.text:0000000000005AA1                 mov     rdx, rbp        ; n
.text:0000000000005AA4                 mov     r15, rax
.text:0000000000005AA7                 mov     rsi, r13        ; src
.text:0000000000005AAA                 mov     rdi, rax        ; dest
.text:0000000000005AAD                 add     rbp, r15
.text:0000000000005AB0                 call    _memcpy
.text:0000000000005AB5                 lea     rdi, [r14+8]
.text:0000000000005AB9                 mov     eax, 3F29h
.text:0000000000005ABE                 mov     dword ptr [rbp+0], 2A2E2F28h
.text:0000000000005AC5                 mov     [rbp+4], ax
.text:0000000000005AC9                 mov     byte ptr [rbp+6], 0
.text:0000000000005ACD                 mov     edx, r12d
.text:0000000000005AD0                 mov     rsi, r15
.text:0000000000005AD3                 call    rpl_regcomp
.text:0000000000005AD8                 mov     rdi, r15        ; ptr
.text:0000000000005ADB                 mov     ebp, eax
.text:0000000000005ADD                 call    free
.text:0000000000005AE2                 jmp     short loc_5A81
.text:0000000000005AE4 ; ---------------------------------------------------------------------------
.text:0000000000005AE4
.text:0000000000005AE4 loc_5AE4:                               ; CODE XREF: add_exclude+2D9↑j
.text:0000000000005AE4                 mov     esi, 1
.text:0000000000005AE9                 jmp     loc_5A5F
.text:0000000000005AE9 ; } // starts at 5780
.text:0000000000005AE9 add_exclude     endp
.text:0000000000005AE9
.text:0000000000005AE9 ; ---------------------------------------------------------------------------
.text:0000000000005AEE                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0                 public add_exclude_fp
.text:0000000000005AF0 add_exclude_fp  proc near               ; CODE XREF: add_exclude_file+4D↓p
.text:0000000000005AF0                                         ; add_exclude_file+8D↓p
.text:0000000000005AF0
.text:0000000000005AF0 var_78          = qword ptr -78h
.text:0000000000005AF0 var_70          = qword ptr -70h
.text:0000000000005AF0 var_68          = qword ptr -68h
.text:0000000000005AF0 var_60          = dword ptr -60h
.text:0000000000005AF0 var_5C          = dword ptr -5Ch
.text:0000000000005AF0 var_58          = qword ptr -58h
.text:0000000000005AF0 var_50          = qword ptr -50h
.text:0000000000005AF0 var_48          = qword ptr -48h
.text:0000000000005AF0 var_40          = qword ptr -40h
.text:0000000000005AF0
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 push    r15
.text:0000000000005AF2                 push    r14
.text:0000000000005AF4                 mov     r15, rdx
.text:0000000000005AF7                 push    r13
.text:0000000000005AF9                 push    r12
.text:0000000000005AFB                 mov     r13, rsi
.text:0000000000005AFE                 push    rbp
.text:0000000000005AFF                 push    rbx
.text:0000000000005B00                 mov     ebp, r8d
.text:0000000000005B03                 xor     r14d, r14d
.text:0000000000005B06                 xor     ebx, ebx
.text:0000000000005B08                 sub     rsp, 48h
.text:0000000000005B0C                 mov     rax, fs:28h
.text:0000000000005B15                 mov     [rsp+78h+var_40], rax
.text:0000000000005B1A                 xor     eax, eax
.text:0000000000005B1C                 lea     rax, [rsp+78h+var_48]
.text:0000000000005B21                 mov     [rsp+78h+var_70], rdi
.text:0000000000005B26                 mov     [rsp+78h+var_60], ecx
.text:0000000000005B2A                 mov     dword ptr [rsp+78h+var_58], r8d
.text:0000000000005B2F                 mov     [rsp+78h+var_68], r9
.text:0000000000005B34                 mov     [rsp+78h+var_48], 0
.text:0000000000005B3D                 mov     [rsp+78h+var_78], rax
.text:0000000000005B41                 jmp     short loc_5B50
.text:0000000000005B41 ; ---------------------------------------------------------------------------
.text:0000000000005B43                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: add_exclude_fp+7B↓j
.text:0000000000005B48                                         ; add_exclude_fp+8C↓j
.text:0000000000005B48                 mov     [rbx+r14], r12b
.text:0000000000005B4C                 add     r14, 1
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: add_exclude_fp+51↑j
.text:0000000000005B50                 mov     rax, [r15+8]
.text:0000000000005B54                 cmp     rax, [r15+10h]
.text:0000000000005B58                 jnb     short loc_5B80
.text:0000000000005B5A                 lea     rdx, [rax+1]
.text:0000000000005B5E                 mov     [r15+8], rdx
.text:0000000000005B62                 movzx   r12d, byte ptr [rax]
.text:0000000000005B66
.text:0000000000005B66 loc_5B66:                               ; CODE XREF: add_exclude_fp+9E↓j
.text:0000000000005B66                 cmp     [rsp+78h+var_48], r14
.text:0000000000005B6B                 jnz     short loc_5B48
.text:0000000000005B6D                 mov     rsi, [rsp+78h+var_78]
.text:0000000000005B71                 mov     rdi, rbx
.text:0000000000005B74                 call    x2realloc
.text:0000000000005B79                 mov     rbx, rax
.text:0000000000005B7C                 jmp     short loc_5B48
.text:0000000000005B7C ; ---------------------------------------------------------------------------
.text:0000000000005B7E                 align 20h
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: add_exclude_fp+68↑j
.text:0000000000005B80                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000005B83                 call    ___uflow
.text:0000000000005B88                 cmp     eax, 0FFFFFFFFh
.text:0000000000005B8B                 mov     r12d, eax
.text:0000000000005B8E                 jnz     short loc_5B66
.text:0000000000005B90                 mov     r12d, [r15]
.text:0000000000005B93                 call    ___errno_location
.text:0000000000005B98                 mov     [rsp+78h+var_5C], 0
.text:0000000000005BA0                 mov     [rsp+78h+var_50], rax
.text:0000000000005BA5                 and     r12d, 20h
.text:0000000000005BA9                 test    r12d, r12d
.text:0000000000005BAC                 jz      short loc_5BBF
.text:0000000000005BAE                 mov     r12d, [rax]
.text:0000000000005BB1                 xor     eax, eax
.text:0000000000005BB3                 test    r12d, r12d
.text:0000000000005BB6                 setnz   al
.text:0000000000005BB9                 neg     eax
.text:0000000000005BBB                 mov     [rsp+78h+var_5C], eax
.text:0000000000005BBF
.text:0000000000005BBF loc_5BBF:                               ; CODE XREF: add_exclude_fp+BC↑j
.text:0000000000005BBF                 lea     rsi, [r14+1]
.text:0000000000005BC3                 mov     rdi, rbx
.text:0000000000005BC6                 call    xrealloc
.text:0000000000005BCB                 mov     r15, rax
.text:0000000000005BCE                 mov     eax, dword ptr [rsp+78h+var_58]
.text:0000000000005BD2                 test    r14, r14
.text:0000000000005BD5                 mov     [r15+r14], al
.text:0000000000005BD9                 jz      loc_5CA0
.text:0000000000005BDF                 xor     ebx, ebx
.text:0000000000005BE1                 cmp     [r15+r14-1], al
.text:0000000000005BE6                 mov     edi, 10h
.text:0000000000005BEB                 setnz   bl
.text:0000000000005BEE                 add     rbx, r14
.text:0000000000005BF1                 call    xmalloc
.text:0000000000005BF6                 mov     rcx, [r13+8]
.text:0000000000005BFA                 add     rbx, r15
.text:0000000000005BFD                 mov     [rax+8], r15
.text:0000000000005C01                 cmp     r15, rbx
.text:0000000000005C04                 mov     [r13+8], rax
.text:0000000000005C08                 mov     [rax], rcx
.text:0000000000005C0B                 jnb     short loc_5C6F
.text:0000000000005C0D                 movzx   eax, bpl
.text:0000000000005C11                 mov     rsi, r15
.text:0000000000005C14                 mov     [rsp+78h+var_58], rax
.text:0000000000005C19                 jmp     short loc_5C28
.text:0000000000005C19 ; ---------------------------------------------------------------------------
.text:0000000000005C1B                 align 20h
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: add_exclude_fp+13F↓j
.text:0000000000005C20                 cmp     rbx, r14
.text:0000000000005C23                 mov     r15, r14
.text:0000000000005C26                 jz      short loc_5C6F
.text:0000000000005C28
.text:0000000000005C28 loc_5C28:                               ; CODE XREF: add_exclude_fp+129↑j
.text:0000000000005C28                                         ; add_exclude_fp+17D↓j
.text:0000000000005C28                 cmp     [r15], bpl
.text:0000000000005C2B                 lea     r14, [r15+1]
.text:0000000000005C2F                 jnz     short loc_5C20
.text:0000000000005C31                 mov     [rsp+78h+var_78], rsi
.text:0000000000005C35                 call    ___ctype_b_loc
.text:0000000000005C3A                 mov     rcx, [rsp+78h+var_58]
.text:0000000000005C3F                 mov     rax, [rax]
.text:0000000000005C42                 mov     rsi, [rsp+78h+var_78]
.text:0000000000005C46                 test    byte ptr [rax+rcx*2+1], 20h
.text:0000000000005C4B                 jnz     short loc_5CC0
.text:0000000000005C4D
.text:0000000000005C4D loc_5C4D:                               ; CODE XREF: add_exclude_fp+1E1↓j
.text:0000000000005C4D                                         ; add_exclude_fp+1FA↓j
.text:0000000000005C4D                 mov     byte ptr [r15], 0
.text:0000000000005C51                 mov     rcx, [rsp+78h+var_68]
.text:0000000000005C56                 mov     rdi, r13
.text:0000000000005C59                 mov     edx, [rsp+78h+var_60]
.text:0000000000005C5D                 mov     rax, [rsp+78h+var_70]
.text:0000000000005C62                 call    rax
.text:0000000000005C64
.text:0000000000005C64 loc_5C64:                               ; CODE XREF: add_exclude_fp+1D3↓j
.text:0000000000005C64                                         ; add_exclude_fp+209↓j
.text:0000000000005C64                 cmp     rbx, r14
.text:0000000000005C67                 mov     rsi, r14
.text:0000000000005C6A                 mov     r15, r14
.text:0000000000005C6D                 jnz     short loc_5C28
.text:0000000000005C6F
.text:0000000000005C6F loc_5C6F:                               ; CODE XREF: add_exclude_fp+11B↑j
.text:0000000000005C6F                                         ; add_exclude_fp+136↑j ...
.text:0000000000005C6F                 mov     rax, [rsp+78h+var_50]
.text:0000000000005C74                 mov     rdi, [rsp+78h+var_40]
.text:0000000000005C79                 xor     rdi, fs:28h
.text:0000000000005C82                 mov     [rax], r12d
.text:0000000000005C85                 mov     eax, [rsp+78h+var_5C]
.text:0000000000005C89                 jnz     short loc_5CFE
.text:0000000000005C8B                 add     rsp, 48h
.text:0000000000005C8F                 pop     rbx
.text:0000000000005C90                 pop     rbp
.text:0000000000005C91                 pop     r12
.text:0000000000005C93                 pop     r13
.text:0000000000005C95                 pop     r14
.text:0000000000005C97                 pop     r15
.text:0000000000005C99                 retn
.text:0000000000005C99 ; ---------------------------------------------------------------------------
.text:0000000000005C9A                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 loc_5CA0:                               ; CODE XREF: add_exclude_fp+E9↑j
.text:0000000000005CA0                 mov     edi, 10h
.text:0000000000005CA5                 call    xmalloc
.text:0000000000005CAA                 mov     rdx, [r13+8]
.text:0000000000005CAE                 mov     [rax+8], r15
.text:0000000000005CB2                 mov     [r13+8], rax
.text:0000000000005CB6                 mov     [rax], rdx
.text:0000000000005CB9                 jmp     short loc_5C6F
.text:0000000000005CB9 ; ---------------------------------------------------------------------------
.text:0000000000005CBB                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: add_exclude_fp+15B↑j
.text:0000000000005CC0                 cmp     r15, rsi
.text:0000000000005CC3                 jz      short loc_5C64
.text:0000000000005CC5                 movzx   ecx, byte ptr [r14-2]
.text:0000000000005CCA                 test    byte ptr [rax+rcx*2+1], 20h
.text:0000000000005CCF                 jnz     short loc_5CF0
.text:0000000000005CD1                 jmp     loc_5C4D
.text:0000000000005CD1 ; ---------------------------------------------------------------------------
.text:0000000000005CD6                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 loc_5CE0:                               ; CODE XREF: add_exclude_fp+207↓j
.text:0000000000005CE0                 movzx   ecx, byte ptr [r15-1]
.text:0000000000005CE5                 test    byte ptr [rax+rcx*2+1], 20h
.text:0000000000005CEA                 jz      loc_5C4D
.text:0000000000005CF0
.text:0000000000005CF0 loc_5CF0:                               ; CODE XREF: add_exclude_fp+1DF↑j
.text:0000000000005CF0                 sub     r15, 1
.text:0000000000005CF4                 cmp     r15, rsi
.text:0000000000005CF7                 jnz     short loc_5CE0
.text:0000000000005CF9                 jmp     loc_5C64
.text:0000000000005CFE ; ---------------------------------------------------------------------------
.text:0000000000005CFE
.text:0000000000005CFE loc_5CFE:                               ; CODE XREF: add_exclude_fp+199↑j
.text:0000000000005CFE                 call    ___stack_chk_fail
.text:0000000000005CFE ; } // starts at 5AF0
.text:0000000000005CFE add_exclude_fp  endp
.text:0000000000005CFE
.text:0000000000005CFE ; ---------------------------------------------------------------------------
.text:0000000000005D03                 align 10h
.text:0000000000005D10
.text:0000000000005D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D10
.text:0000000000005D10
.text:0000000000005D10                 public add_exclude_file
.text:0000000000005D10 add_exclude_file proc near              ; CODE XREF: main+296↑p
.text:0000000000005D10
.text:0000000000005D10 var_24          = dword ptr -24h
.text:0000000000005D10 var_20          = qword ptr -20h
.text:0000000000005D10
.text:0000000000005D10 ; __unwind {
.text:0000000000005D10                 push    r12
.text:0000000000005D12                 push    rbp
.text:0000000000005D13                 mov     r12d, r8d
.text:0000000000005D16                 push    rbx
.text:0000000000005D17                 mov     rbp, rsi
.text:0000000000005D1A                 sub     rsp, 10h
.text:0000000000005D1E                 cmp     byte ptr [rdx], 2Dh ; '-'
.text:0000000000005D21                 mov     [rsp+28h+var_20], rdi
.text:0000000000005D26                 jz      short loc_5D80
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: add_exclude_file+74↓j
.text:0000000000005D28                 lea     rsi, aUpper+4   ; modes
.text:0000000000005D2F                 mov     rdi, rdx        ; filename
.text:0000000000005D32                 mov     [rsp+28h+var_24], ecx
.text:0000000000005D36                 call    _fopen
.text:0000000000005D3B                 test    rax, rax
.text:0000000000005D3E                 mov     rbx, rax
.text:0000000000005D41                 mov     ecx, [rsp+28h+var_24]
.text:0000000000005D45                 jz      short loc_5DB0
.text:0000000000005D47                 lea     r9, [rsp+28h+var_20]
.text:0000000000005D4C                 lea     rdi, call_addfn
.text:0000000000005D53                 mov     rsi, rbp
.text:0000000000005D56                 movsx   r8d, r12b
.text:0000000000005D5A                 mov     rdx, rax
.text:0000000000005D5D                 call    add_exclude_fp
.text:0000000000005D62                 mov     rdi, rbx        ; stream
.text:0000000000005D65                 mov     ebp, eax
.text:0000000000005D67                 call    rpl_fclose
.text:0000000000005D6C                 test    eax, eax
.text:0000000000005D6E                 jnz     short loc_5DB0
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: add_exclude_file+A5↓j
.text:0000000000005D70                 add     rsp, 10h
.text:0000000000005D74                 mov     eax, ebp
.text:0000000000005D76                 pop     rbx
.text:0000000000005D77                 pop     rbp
.text:0000000000005D78                 pop     r12
.text:0000000000005D7A                 retn
.text:0000000000005D7A ; ---------------------------------------------------------------------------
.text:0000000000005D7B                 align 20h
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: add_exclude_file+16↑j
.text:0000000000005D80                 cmp     byte ptr [rdx+1], 0
.text:0000000000005D84                 jnz     short loc_5D28
.text:0000000000005D86                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:0000000000005D8D                 lea     r9, [rsp+28h+var_20]
.text:0000000000005D92                 lea     rdi, call_addfn
.text:0000000000005D99                 movsx   r8d, r8b
.text:0000000000005D9D                 call    add_exclude_fp
.text:0000000000005DA2                 add     rsp, 10h
.text:0000000000005DA6                 mov     ebp, eax
.text:0000000000005DA8                 mov     eax, ebp
.text:0000000000005DAA                 pop     rbx
.text:0000000000005DAB                 pop     rbp
.text:0000000000005DAC                 pop     r12
.text:0000000000005DAE                 retn
.text:0000000000005DAE ; ---------------------------------------------------------------------------
.text:0000000000005DAF                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: add_exclude_file+35↑j
.text:0000000000005DB0                                         ; add_exclude_file+5E↑j
.text:0000000000005DB0                 mov     ebp, 0FFFFFFFFh
.text:0000000000005DB5                 jmp     short loc_5D70
.text:0000000000005DB5 ; } // starts at 5D10
.text:0000000000005DB5 add_exclude_file endp
.text:0000000000005DB5
.text:0000000000005DB5 ; ---------------------------------------------------------------------------
.text:0000000000005DB7                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DC0
.text:0000000000005DC0
.text:0000000000005DC0 ; __int64 __fastcall fwrite_lowcase(FILE *stream)
.text:0000000000005DC0 fwrite_lowcase  proc near               ; CODE XREF: __strftime_internal+143F↓p
.text:0000000000005DC0                                         ; __strftime_internal+1A8E↓p
.text:0000000000005DC0 ; __unwind {
.text:0000000000005DC0                 test    rdx, rdx
.text:0000000000005DC3                 jz      short locret_5E10
.text:0000000000005DC5                 push    r13
.text:0000000000005DC7                 push    r12
.text:0000000000005DC9                 mov     r12, rdi
.text:0000000000005DCC                 push    rbp
.text:0000000000005DCD                 push    rbx
.text:0000000000005DCE                 mov     rbp, rdx
.text:0000000000005DD1                 mov     rbx, rsi
.text:0000000000005DD4                 sub     rsp, 8
.text:0000000000005DD8                 add     rbp, rbx
.text:0000000000005DDB                 call    ___ctype_tolower_loc
.text:0000000000005DE0                 mov     r13, rax
.text:0000000000005DE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000005DE8
.text:0000000000005DE8 loc_5DE8:                               ; CODE XREF: fwrite_lowcase+41↓j
.text:0000000000005DE8                 movzx   ecx, byte ptr [rbx]
.text:0000000000005DEB                 mov     rax, [r13+0]
.text:0000000000005DEF                 mov     rsi, r12        ; stream
.text:0000000000005DF2                 add     rbx, 1
.text:0000000000005DF6                 mov     edi, [rax+rcx*4] ; c
.text:0000000000005DF9                 call    _fputc
.text:0000000000005DFE                 cmp     rbx, rbp
.text:0000000000005E01                 jnz     short loc_5DE8
.text:0000000000005E03                 add     rsp, 8
.text:0000000000005E07                 pop     rbx
.text:0000000000005E08                 pop     rbp
.text:0000000000005E09                 pop     r12
.text:0000000000005E0B                 pop     r13
.text:0000000000005E0D                 retn
.text:0000000000005E0D ; ---------------------------------------------------------------------------
.text:0000000000005E0E                 align 10h
.text:0000000000005E10
.text:0000000000005E10 locret_5E10:                            ; CODE XREF: fwrite_lowcase+3↑j
.text:0000000000005E10                 rep retn
.text:0000000000005E10 ; } // starts at 5DC0
.text:0000000000005E10 fwrite_lowcase  endp
.text:0000000000005E10
.text:0000000000005E10 ; ---------------------------------------------------------------------------
.text:0000000000005E12                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20 ; __int64 __fastcall fwrite_uppcase(FILE *stream)
.text:0000000000005E20 fwrite_uppcase  proc near               ; CODE XREF: __strftime_internal+2C9↓p
.text:0000000000005E20                                         ; __strftime_internal+4BE↓p ...
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 test    rdx, rdx
.text:0000000000005E23                 jz      short locret_5E70
.text:0000000000005E25                 push    r13
.text:0000000000005E27                 push    r12
.text:0000000000005E29                 mov     r12, rdi
.text:0000000000005E2C                 push    rbp
.text:0000000000005E2D                 push    rbx
.text:0000000000005E2E                 mov     rbp, rdx
.text:0000000000005E31                 mov     rbx, rsi
.text:0000000000005E34                 sub     rsp, 8
.text:0000000000005E38                 add     rbp, rbx
.text:0000000000005E3B                 call    ___ctype_toupper_loc
.text:0000000000005E40                 mov     r13, rax
.text:0000000000005E43                 nop     dword ptr [rax+rax+00h]
.text:0000000000005E48
.text:0000000000005E48 loc_5E48:                               ; CODE XREF: fwrite_uppcase+41↓j
.text:0000000000005E48                 movzx   ecx, byte ptr [rbx]
.text:0000000000005E4B                 mov     rax, [r13+0]
.text:0000000000005E4F                 mov     rsi, r12        ; stream
.text:0000000000005E52                 add     rbx, 1
.text:0000000000005E56                 mov     edi, [rax+rcx*4] ; c
.text:0000000000005E59                 call    _fputc
.text:0000000000005E5E                 cmp     rbx, rbp
.text:0000000000005E61                 jnz     short loc_5E48
.text:0000000000005E63                 add     rsp, 8
.text:0000000000005E67                 pop     rbx
.text:0000000000005E68                 pop     rbp
.text:0000000000005E69                 pop     r12
.text:0000000000005E6B                 pop     r13
.text:0000000000005E6D                 retn
.text:0000000000005E6D ; ---------------------------------------------------------------------------
.text:0000000000005E6E                 align 10h
.text:0000000000005E70
.text:0000000000005E70 locret_5E70:                            ; CODE XREF: fwrite_uppcase+3↑j
.text:0000000000005E70                 rep retn
.text:0000000000005E70 ; } // starts at 5E20
.text:0000000000005E70 fwrite_uppcase  endp
.text:0000000000005E70
.text:0000000000005E70 ; ---------------------------------------------------------------------------
.text:0000000000005E72                 align 20h
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80
.text:0000000000005E80 ; __int64 __usercall _strftime_internal@<rax>(FILE *stream@<rdi>, __int64, __int64, int)
.text:0000000000005E80 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6A3↓p
.text:0000000000005E80                                         ; __strftime_internal+1562↓p ...
.text:0000000000005E80
.text:0000000000005E80 tp              = qword ptr -4E8h
.text:0000000000005E80 var_4E0         = qword ptr -4E0h
.text:0000000000005E80 var_4D8         = qword ptr -4D8h
.text:0000000000005E80 var_4D0         = qword ptr -4D0h
.text:0000000000005E80 var_4C5         = byte ptr -4C5h
.text:0000000000005E80 var_4C4         = dword ptr -4C4h
.text:0000000000005E80 var_4C0         = qword ptr -4C0h
.text:0000000000005E80 var_4B8         = dword ptr -4B8h
.text:0000000000005E80 var_4B4         = dword ptr -4B4h
.text:0000000000005E80 ptr             = qword ptr -4B0h
.text:0000000000005E80 size            = qword ptr -4A8h
.text:0000000000005E80 var_4A0         = qword ptr -4A0h
.text:0000000000005E80 var_498         = qword ptr -498h
.text:0000000000005E80 var_490         = dword ptr -490h
.text:0000000000005E80 var_48C         = dword ptr -48Ch
.text:0000000000005E80 var_488         = xmmword ptr -488h
.text:0000000000005E80 var_478         = xmmword ptr -478h
.text:0000000000005E80 var_468         = xmmword ptr -468h
.text:0000000000005E80 var_458         = qword ptr -458h
.text:0000000000005E80 format          = byte ptr -44Dh
.text:0000000000005E80 var_44B         = byte ptr -44Bh
.text:0000000000005E80 s               = byte ptr -448h
.text:0000000000005E80 var_431         = byte ptr -431h
.text:0000000000005E80 var_40          = qword ptr -40h
.text:0000000000005E80 arg_0           = qword ptr  8
.text:0000000000005E80 arg_8           = qword ptr  10h
.text:0000000000005E80 arg_10          = dword ptr  18h
.text:0000000000005E80
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 push    r15
.text:0000000000005E82                 push    r14
.text:0000000000005E84                 mov     r10, rsi
.text:0000000000005E87                 push    r13
.text:0000000000005E89                 push    r12
.text:0000000000005E8B                 mov     r12, rdi
.text:0000000000005E8E                 push    rbp
.text:0000000000005E8F                 push    rbx
.text:0000000000005E90                 mov     ebp, r9d
.text:0000000000005E93                 sub     rsp, 4B8h
.text:0000000000005E9A                 mov     r13, [rdx+30h]
.text:0000000000005E9E                 mov     r14d, [rdx+8]
.text:0000000000005EA2                 mov     rax, [rsp+4E8h+arg_0]
.text:0000000000005EAA                 mov     [rsp+4E8h+tp], rdx
.text:0000000000005EAE                 mov     [rsp+4E8h+var_4C4], r8d
.text:0000000000005EB3                 mov     [rsp+4E8h+var_4C5], cl
.text:0000000000005EB7                 mov     [rsp+4E8h+var_4D0], rax
.text:0000000000005EBC                 mov     rax, [rsp+4E8h+arg_8]
.text:0000000000005EC4                 mov     [rsp+4E8h+var_4D8], rax
.text:0000000000005EC9                 mov     rax, fs:28h
.text:0000000000005ED2                 mov     [rsp+4E8h+var_40], rax
.text:0000000000005EDA                 xor     eax, eax
.text:0000000000005EDC                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005EE3                 test    r13, r13
.text:0000000000005EE6                 cmovz   r13, rax
.text:0000000000005EEA                 cmp     r14d, 0Ch
.text:0000000000005EEE                 jle     loc_6048
.text:0000000000005EF4                 sub     r14d, 0Ch
.text:0000000000005EF8
.text:0000000000005EF8 loc_5EF8:                               ; CODE XREF: __strftime_internal+1D4↓j
.text:0000000000005EF8                 movzx   eax, byte ptr [r10]
.text:0000000000005EFC                 xor     r15d, r15d
.text:0000000000005EFF                 test    al, al
.text:0000000000005F01                 jz      short loc_5F42
.text:0000000000005F03                 cmp     al, 25h ; '%'
.text:0000000000005F05                 mov     rbx, r10
.text:0000000000005F08                 mov     [rsp+4E8h+var_4B8], r14d
.text:0000000000005F0D                 mov     [rsp+4E8h+var_4C0], r13
.text:0000000000005F12                 movsxd  r10, ebp
.text:0000000000005F15                 jz      loc_5FAB
.text:0000000000005F1B
.text:0000000000005F1B loc_5F1B:                               ; CODE XREF: __strftime_internal+125↓j
.text:0000000000005F1B                 test    r10d, r10d
.text:0000000000005F1E                 mov     r14d, 0
.text:0000000000005F24                 mov     eax, 1
.text:0000000000005F29                 cmovns  r14, r10
.text:0000000000005F2D                 test    r14, r14
.text:0000000000005F30                 cmovz   r14, rax
.text:0000000000005F34                 mov     rax, r15
.text:0000000000005F37                 not     rax
.text:0000000000005F3A                 cmp     rax, r14
.text:0000000000005F3D                 ja      short loc_5F70
.text:0000000000005F3F
.text:0000000000005F3F loc_5F3F:                               ; CODE XREF: __strftime_internal+257↓j
.text:0000000000005F3F                                         ; __strftime_internal+437↓j ...
.text:0000000000005F3F                 xor     r15d, r15d
.text:0000000000005F42
.text:0000000000005F42 loc_5F42:                               ; CODE XREF: __strftime_internal+81↑j
.text:0000000000005F42                                         ; __strftime_internal+121↓j
.text:0000000000005F42                 mov     rdi, [rsp+4E8h+var_40]
.text:0000000000005F4A                 xor     rdi, fs:28h
.text:0000000000005F53                 mov     rax, r15
.text:0000000000005F56                 jnz     loc_7A78
.text:0000000000005F5C                 add     rsp, 4B8h
.text:0000000000005F63                 pop     rbx
.text:0000000000005F64                 pop     rbp
.text:0000000000005F65                 pop     r12
.text:0000000000005F67                 pop     r13
.text:0000000000005F69                 pop     r14
.text:0000000000005F6B                 pop     r15
.text:0000000000005F6D                 retn
.text:0000000000005F6D ; ---------------------------------------------------------------------------
.text:0000000000005F6E                 align 10h
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: __strftime_internal+BD↑j
.text:0000000000005F70                 test    r12, r12
.text:0000000000005F73                 jz      short loc_5F8A
.text:0000000000005F75                 cmp     r10d, 1
.text:0000000000005F79                 jg      loc_6160
.text:0000000000005F7F
.text:0000000000005F7F loc_5F7F:                               ; CODE XREF: __strftime_internal+306↓j
.text:0000000000005F7F                                         ; __strftime_internal+EAC↓j ...
.text:0000000000005F7F                 movsx   edi, byte ptr [rbx] ; c
.text:0000000000005F82
.text:0000000000005F82 loc_5F82:                               ; CODE XREF: __strftime_internal+E71↓j
.text:0000000000005F82                 mov     rsi, r12        ; stream
.text:0000000000005F85                 call    _fputc
.text:0000000000005F8A
.text:0000000000005F8A loc_5F8A:                               ; CODE XREF: __strftime_internal+F3↑j
.text:0000000000005F8A                                         ; __strftime_internal+E67↓j
.text:0000000000005F8A                 add     r15, r14
.text:0000000000005F8D                 mov     rbp, rbx
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: __strftime_internal+2D1↓j
.text:0000000000005F90                                         ; __strftime_internal+404↓j ...
.text:0000000000005F90                 movzx   eax, byte ptr [rbp+1]
.text:0000000000005F94                 lea     rbx, [rbp+1]
.text:0000000000005F98                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F9F                 test    al, al
.text:0000000000005FA1                 jz      short loc_5F42
.text:0000000000005FA3                 cmp     al, 25h ; '%'
.text:0000000000005FA5                 jnz     loc_5F1B
.text:0000000000005FAB
.text:0000000000005FAB loc_5FAB:                               ; CODE XREF: __strftime_internal+95↑j
.text:0000000000005FAB                 movzx   eax, [rsp+4E8h+var_4C5]
.text:0000000000005FB0                 xor     r14d, r14d
.text:0000000000005FB3                 mov     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000005FBB                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000005FBF                 mov     eax, 1
.text:0000000000005FC4
.text:0000000000005FC4 loc_5FC4:                               ; CODE XREF: __strftime_internal+1F5↓j
.text:0000000000005FC4                                         ; __strftime_internal+206↓j ...
.text:0000000000005FC4                 add     rbx, 1
.text:0000000000005FC8                 movsx   r11d, byte ptr [rbx]
.text:0000000000005FCC                 lea     ecx, [r11-23h]
.text:0000000000005FD0                 mov     r13d, r11d
.text:0000000000005FD3                 mov     edi, r11d
.text:0000000000005FD6                 cmp     cl, 3Ch ; '<'
.text:0000000000005FD9                 ja      short loc_600F
.text:0000000000005FDB                 mov     rdx, rax
.text:0000000000005FDE                 mov     rsi, 1000000000002500h
.text:0000000000005FE8                 shl     rdx, cl
.text:0000000000005FEB                 test    rdx, rsi
.text:0000000000005FEE                 jnz     loc_6070
.text:0000000000005FF4                 test    cl, cl
.text:0000000000005FF6                 jz      loc_6080
.text:0000000000005FFC                 mov     rsi, 800000000000000h
.text:0000000000006006                 test    rdx, rsi
.text:0000000000006009                 jnz     loc_6190
.text:000000000000600F
.text:000000000000600F loc_600F:                               ; CODE XREF: __strftime_internal+159↑j
.text:000000000000600F                 lea     eax, [r11-30h]
.text:0000000000006013                 cmp     eax, 9
.text:0000000000006016                 jbe     loc_61A0
.text:000000000000601C
.text:000000000000601C loc_601C:                               ; CODE XREF: __strftime_internal+355↓j
.text:000000000000601C                                         ; __strftime_internal+394↓j
.text:000000000000601C                 cmp     r13b, 45h ; 'E'
.text:0000000000006020                 jz      short loc_6060
.text:0000000000006022                 cmp     r13b, 4Fh ; 'O'
.text:0000000000006026                 jz      short loc_6060
.text:0000000000006028                 xor     r11d, r11d
.text:000000000000602B
.text:000000000000602B loc_602B:                               ; CODE XREF: __strftime_internal+1EB↓j
.text:000000000000602B                 cmp     r13b, 7Ah       ; switch 123 cases
.text:000000000000602F                 ja      short def_6043  ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006031                 lea     rsi, jpt_6043
.text:0000000000006038                 movzx   eax, r13b
.text:000000000000603C                 movsxd  rax, ds:(jpt_6043 - 21738h)[rsi+rax*4]
.text:0000000000006040                 add     rax, rsi
.text:0000000000006043                 jmp     rax             ; switch jump
.text:0000000000006043 ; ---------------------------------------------------------------------------
.text:0000000000006045                 align 8
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: __strftime_internal+6E↑j
.text:0000000000006048                 test    r14d, r14d
.text:000000000000604B                 mov     eax, 0Ch
.text:0000000000006050                 cmovz   r14d, eax
.text:0000000000006054                 jmp     loc_5EF8
.text:0000000000006054 ; ---------------------------------------------------------------------------
.text:0000000000006059                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: __strftime_internal+1A0↑j
.text:0000000000006060                                         ; __strftime_internal+1A6↑j
.text:0000000000006060                 movsx   edi, byte ptr [rbx+1]
.text:0000000000006064                 add     rbx, 1
.text:0000000000006068                 mov     r13d, edi
.text:000000000000606B                 jmp     short loc_602B
.text:000000000000606B ; ---------------------------------------------------------------------------
.text:000000000000606D                 align 10h
.text:0000000000006070
.text:0000000000006070 loc_6070:                               ; CODE XREF: __strftime_internal+16E↑j
.text:0000000000006070                 mov     dword ptr [rsp+4E8h+var_4E0], r11d
.text:0000000000006075                 jmp     loc_5FC4
.text:0000000000006075 ; ---------------------------------------------------------------------------
.text:000000000000607A                 align 20h
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: __strftime_internal+176↑j
.text:0000000000006080                 mov     r14d, 1
.text:0000000000006086                 jmp     loc_5FC4
.text:000000000000608B ; ---------------------------------------------------------------------------
.text:000000000000608B
.text:000000000000608B loc_608B:                               ; CODE XREF: __strftime_internal+DF1↓j
.text:000000000000608B                 mov     rbx, [rsp+4E8h+ptr]
.text:0000000000006090
.text:0000000000006090 def_6043:                               ; CODE XREF: __strftime_internal+1AF↑j
.text:0000000000006090                                         ; __strftime_internal+1C3↑j ...
.text:0000000000006090                 lea     rax, [rbx-1]    ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006094                 mov     r13d, 1
.text:000000000000609A
.text:000000000000609A loc_609A:                               ; CODE XREF: __strftime_internal+229↓j
.text:000000000000609A                 mov     rdx, rax
.text:000000000000609D                 lea     rax, [rax-1]
.text:00000000000060A1                 add     r13d, 1
.text:00000000000060A5                 cmp     byte ptr [rax+1], 25h ; '%'
.text:00000000000060A9                 jnz     short loc_609A
.text:00000000000060AB                 test    r10d, r10d
.text:00000000000060AE                 mov     eax, 0
.text:00000000000060B3                 movsxd  r13, r13d
.text:00000000000060B6                 cmovns  eax, r10d
.text:00000000000060BA                 mov     [rsp+4E8h+ptr], rdx
.text:00000000000060BF                 mov     r14, r13
.text:00000000000060C2                 cdqe
.text:00000000000060C4                 mov     rdx, r15
.text:00000000000060C7                 mov     rbp, rbx
.text:00000000000060CA                 cmp     rax, r13
.text:00000000000060CD                 not     rdx
.text:00000000000060D0                 cmovnb  r14, rax
.text:00000000000060D4
.text:00000000000060D4 loc_60D4:                               ; CODE XREF: __strftime_internal+E0F↓j
.text:00000000000060D4                                         ; __strftime_internal+18D5↓j
.text:00000000000060D4                 cmp     rdx, r14
.text:00000000000060D7                 jbe     loc_5F3F
.text:00000000000060DD                 test    r12, r12
.text:00000000000060E0                 jz      short loc_614E
.text:00000000000060E2                 cmp     r13, rax
.text:00000000000060E5                 jnb     short loc_6133
.text:00000000000060E7                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000060EB                 movsxd  rbx, r10d
.text:00000000000060EE                 sub     rbx, r13
.text:00000000000060F1                 cmp     eax, 30h ; '0'
.text:00000000000060F4                 jz      loc_7323
.text:00000000000060FA                 cmp     eax, 2Bh ; '+'
.text:00000000000060FD                 jz      loc_7323
.text:0000000000006103                 xor     edx, edx
.text:0000000000006105                 test    rbx, rbx
.text:0000000000006108                 jz      short loc_6133
.text:000000000000610A                 mov     [rsp+4E8h+var_4E0], rbp
.text:000000000000610F                 mov     rbp, rdx
.text:0000000000006112                 nop     word ptr [rax+rax+00h]
.text:0000000000006118
.text:0000000000006118 loc_6118:                               ; CODE XREF: __strftime_internal+2AC↓j
.text:0000000000006118                 mov     rsi, r12        ; stream
.text:000000000000611B                 mov     edi, 20h ; ' '  ; c
.text:0000000000006120                 add     rbp, 1
.text:0000000000006124                 call    _fputc
.text:0000000000006129                 cmp     rbx, rbp
.text:000000000000612C                 jnz     short loc_6118
.text:000000000000612E
.text:000000000000612E loc_612E:                               ; CODE XREF: __strftime_internal+14D6↓j
.text:000000000000612E                 mov     rbp, [rsp+4E8h+var_4E0]
.text:0000000000006133
.text:0000000000006133 loc_6133:                               ; CODE XREF: __strftime_internal+265↑j
.text:0000000000006133                                         ; __strftime_internal+288↑j ...
.text:0000000000006133                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000006138                 jz      loc_7268
.text:000000000000613E                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000006143                 mov     rdx, r13
.text:0000000000006146                 mov     rdi, r12        ; stream
.text:0000000000006149                 call    fwrite_uppcase
.text:000000000000614E
.text:000000000000614E loc_614E:                               ; CODE XREF: __strftime_internal+260↑j
.text:000000000000614E                                         ; __strftime_internal+13FD↓j
.text:000000000000614E                 add     r15, r14
.text:0000000000006151                 jmp     loc_5F90
.text:0000000000006151 ; ---------------------------------------------------------------------------
.text:0000000000006156                 align 20h
.text:0000000000006160
.text:0000000000006160 loc_6160:                               ; CODE XREF: __strftime_internal+F9↑j
.text:0000000000006160                 lea     r13, [r10-1]
.text:0000000000006164                 xor     ebp, ebp
.text:0000000000006166                 db      2Eh
.text:0000000000006166                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: __strftime_internal+304↓j
.text:0000000000006170                 mov     rsi, r12        ; stream
.text:0000000000006173                 mov     edi, 20h ; ' '  ; c
.text:0000000000006178                 add     rbp, 1
.text:000000000000617C                 call    _fputc
.text:0000000000006181                 cmp     r13, rbp
.text:0000000000006184                 jnz     short loc_6170
.text:0000000000006186                 jmp     loc_5F7F
.text:0000000000006186 ; ---------------------------------------------------------------------------
.text:000000000000618B                 align 10h
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: __strftime_internal+189↑j
.text:0000000000006190                 mov     byte ptr [rsp+4E8h+var_4B4], 1
.text:0000000000006195                 jmp     loc_5FC4
.text:0000000000006195 ; ---------------------------------------------------------------------------
.text:000000000000619A                 align 20h
.text:00000000000061A0
.text:00000000000061A0 loc_61A0:                               ; CODE XREF: __strftime_internal+196↑j
.text:00000000000061A0                 xor     r10d, r10d
.text:00000000000061A3
.text:00000000000061A3 loc_61A3:                               ; CODE XREF: __strftime_internal+350↓j
.text:00000000000061A3                 movsx   r11d, byte ptr [rbx+1]
.text:00000000000061A8                 cmp     r10d, 0CCCCCCCh
.text:00000000000061AF                 lea     rcx, [rbx+1]
.text:00000000000061B3                 mov     r13d, r11d
.text:00000000000061B6                 lea     eax, [r11-30h]
.text:00000000000061BA                 jg      short loc_61E5
.text:00000000000061BC                 movsx   edx, byte ptr [rbx]
.text:00000000000061BF                 jz      short loc_61E0
.text:00000000000061C1
.text:00000000000061C1 loc_61C1:                               ; CODE XREF: __strftime_internal+363↓j
.text:00000000000061C1                 lea     esi, [r10+r10*4]
.text:00000000000061C5                 mov     rbx, rcx
.text:00000000000061C8                 lea     r10d, [rdx+rsi*2-30h]
.text:00000000000061CD
.text:00000000000061CD loc_61CD:                               ; CODE XREF: __strftime_internal+380↓j
.text:00000000000061CD                 cmp     eax, 9
.text:00000000000061D0                 jbe     short loc_61A3
.text:00000000000061D2                 mov     edi, r11d
.text:00000000000061D5                 jmp     loc_601C
.text:00000000000061D5 ; ---------------------------------------------------------------------------
.text:00000000000061DA                 align 20h
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: __strftime_internal+33F↑j
.text:00000000000061E0                 cmp     dl, 37h ; '7'
.text:00000000000061E3                 jle     short loc_61C1
.text:00000000000061E5
.text:00000000000061E5 loc_61E5:                               ; CODE XREF: __strftime_internal+33A↑j
.text:00000000000061E5                 cmp     eax, 9
.text:00000000000061E8                 ja      short loc_6208
.text:00000000000061EA                 movsx   r11d, byte ptr [rbx+2]
.text:00000000000061EF                 mov     r10d, 7FFFFFFFh
.text:00000000000061F5                 add     rbx, 2
.text:00000000000061F9                 mov     r13d, r11d
.text:00000000000061FC                 lea     eax, [r11-30h]
.text:0000000000006200                 jmp     short loc_61CD
.text:0000000000006200 ; ---------------------------------------------------------------------------
.text:0000000000006202                 align 8
.text:0000000000006208
.text:0000000000006208 loc_6208:                               ; CODE XREF: __strftime_internal+368↑j
.text:0000000000006208                 mov     edi, r11d
.text:000000000000620B                 mov     rbx, rcx
.text:000000000000620E                 mov     r10d, 7FFFFFFFh
.text:0000000000006214                 jmp     loc_601C
.text:0000000000006214 ; ---------------------------------------------------------------------------
.text:0000000000006219                 align 20h
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006220                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006220                 cmp     r11d, 4Fh ; 'O' ; jumptable 0000000000006043 cases 88,99,120
.text:0000000000006224                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000622A
.text:000000000000622A loc_622A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000622A                                         ; __strftime_internal+E2C↓j
.text:000000000000622A                                         ; DATA XREF: ...
.text:000000000000622A                 xor     r14d, r14d      ; jumptable 0000000000006043 case 114
.text:000000000000622D
.text:000000000000622D loc_622D:                               ; CODE XREF: __strftime_internal+658↓j
.text:000000000000622D                                         ; __strftime_internal+E21↓j ...
.text:000000000000622D                 mov     ebp, 2520h
.text:0000000000006232                 test    r11d, r11d
.text:0000000000006235                 mov     word ptr [rsp+4E8h+format], bp
.text:000000000000623D                 jnz     loc_7A90
.text:0000000000006243                 lea     rdx, [rsp+4E8h+format] ; format
.text:000000000000624B                 mov     rbp, rbx
.text:000000000000624E                 lea     rax, [rdx+2]
.text:0000000000006252
.text:0000000000006252 loc_6252:                               ; CODE XREF: __strftime_internal+50B↓j
.text:0000000000006252                                         ; __strftime_internal+624↓j
.text:0000000000006252                 mov     [rax], r13b
.text:0000000000006255                 mov     byte ptr [rax+1], 0
.text:0000000000006259                 lea     rax, [rsp+4E8h+s]
.text:0000000000006261                 mov     rcx, [rsp+4E8h+tp] ; tp
.text:0000000000006265                 mov     esi, 400h       ; maxsize
.text:000000000000626A                 mov     dword ptr [rsp+4E8h+size], r10d
.text:000000000000626F                 mov     rdi, rax        ; s
.text:0000000000006272                 mov     [rsp+4E8h+var_490], r11d
.text:0000000000006277                 mov     [rsp+4E8h+ptr], rax
.text:000000000000627C                 call    _strftime
.text:0000000000006281                 test    rax, rax
.text:0000000000006284                 jz      loc_5F90
.text:000000000000628A                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:000000000000628F                 lea     r13, [rax-1]
.text:0000000000006293                 mov     eax, 0
.text:0000000000006298                 mov     rdx, r15
.text:000000000000629B                 not     rdx
.text:000000000000629E                 test    r10d, r10d
.text:00000000000062A1                 cmovns  rax, r10
.text:00000000000062A5                 cmp     r13, rax
.text:00000000000062A8                 mov     rdi, rax
.text:00000000000062AB                 cmovnb  rdi, r13
.text:00000000000062AF                 cmp     rdx, rdi
.text:00000000000062B2                 mov     [rsp+4E8h+size], rdi
.text:00000000000062B7                 jbe     loc_5F3F
.text:00000000000062BD                 test    r12, r12
.text:00000000000062C0                 jz      loc_6343
.text:00000000000062C6                 mov     r11d, [rsp+4E8h+var_490]
.text:00000000000062CB                 test    r11d, r11d
.text:00000000000062CE                 jnz     short loc_631B
.text:00000000000062D0                 cmp     r13, rax
.text:00000000000062D3                 jnb     short loc_631B
.text:00000000000062D5                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000062D9                 movsxd  rbx, r10d
.text:00000000000062DC                 sub     rbx, r13
.text:00000000000062DF                 cmp     eax, 30h ; '0'
.text:00000000000062E2                 jz      loc_72F0
.text:00000000000062E8                 cmp     eax, 2Bh ; '+'
.text:00000000000062EB                 jz      loc_72F0
.text:00000000000062F1                 xor     edx, edx
.text:00000000000062F3                 test    rbx, rbx
.text:00000000000062F6                 jz      short loc_631B
.text:00000000000062F8                 mov     [rsp+4E8h+var_4E0], rbp
.text:00000000000062FD                 mov     rbp, rdx
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: __strftime_internal+494↓j
.text:0000000000006300                 mov     rsi, r12        ; stream
.text:0000000000006303                 mov     edi, 20h ; ' '  ; c
.text:0000000000006308                 add     rbp, 1
.text:000000000000630C                 call    _fputc
.text:0000000000006311                 cmp     rbx, rbp
.text:0000000000006314                 jnz     short loc_6300
.text:0000000000006316
.text:0000000000006316 loc_6316:                               ; CODE XREF: __strftime_internal+149E↓j
.text:0000000000006316                 mov     rbp, [rsp+4E8h+var_4E0]
.text:000000000000631B
.text:000000000000631B loc_631B:                               ; CODE XREF: __strftime_internal+44E↑j
.text:000000000000631B                                         ; __strftime_internal+453↑j ...
.text:000000000000631B                 test    r14b, r14b
.text:000000000000631E                 jnz     loc_72B0
.text:0000000000006324                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000006329                 jz      loc_7288
.text:000000000000632F                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000006334                 mov     rdx, r13
.text:0000000000006337                 mov     rdi, r12        ; stream
.text:000000000000633A                 add     rsi, 1
.text:000000000000633E                 call    fwrite_uppcase
.text:0000000000006343
.text:0000000000006343 loc_6343:                               ; CODE XREF: __strftime_internal+440↑j
.text:0000000000006343                                         ; __strftime_internal+1421↓j ...
.text:0000000000006343                 add     r15, [rsp+4E8h+size]
.text:0000000000006348                 jmp     loc_5F90
.text:0000000000006348 ; ---------------------------------------------------------------------------
.text:000000000000634D                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006350                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006350                 test    r11d, r11d      ; jumptable 0000000000006043 cases 65,97
.text:0000000000006353                 jnz     def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006359                 movzx   eax, byte ptr [rsp+4E8h+var_4B4]
.text:000000000000635E                 test    r14b, r14b
.text:0000000000006361                 lea     rdx, [rsp+4E8h+format]
.text:0000000000006369                 mov     rbp, rbx
.text:000000000000636C                 cmovnz  eax, r14d
.text:0000000000006370                 xor     r14d, r14d
.text:0000000000006373                 xor     r11d, r11d
.text:0000000000006376                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:000000000000637A                 mov     eax, 2520h
.text:000000000000637F                 mov     word ptr [rsp+4E8h+format], ax
.text:0000000000006387                 lea     rax, [rdx+2]
.text:000000000000638B                 jmp     loc_6252
.text:0000000000006390 ; ---------------------------------------------------------------------------
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006390                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006390                 test    r10d, r10d      ; jumptable 0000000000006043 case 116
.text:0000000000006393                 mov     r13d, 0
.text:0000000000006399                 mov     eax, 1
.text:000000000000639E                 cmovns  r13d, r10d
.text:00000000000063A2                 movsxd  r13, r13d
.text:00000000000063A5                 test    r13, r13
.text:00000000000063A8                 cmovz   r13, rax
.text:00000000000063AC                 mov     rax, r15
.text:00000000000063AF                 not     rax
.text:00000000000063B2                 cmp     rax, r13
.text:00000000000063B5                 jbe     loc_5F3F
.text:00000000000063BB                 test    r12, r12
.text:00000000000063BE                 jz      loc_655F
.text:00000000000063C4                 cmp     r10d, 1
.text:00000000000063C8                 jle     short loc_63FF
.text:00000000000063CA                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000063CE                 movsxd  r10, r10d
.text:00000000000063D1                 lea     r14, [r10-1]
.text:00000000000063D5                 cmp     eax, 30h ; '0'
.text:00000000000063D8                 jz      loc_78AF
.text:00000000000063DE                 xor     ebp, ebp
.text:00000000000063E0                 cmp     eax, 2Bh ; '+'
.text:00000000000063E3                 jz      loc_78AF
.text:00000000000063E9
.text:00000000000063E9 loc_63E9:                               ; CODE XREF: __strftime_internal+57D↓j
.text:00000000000063E9                 mov     rsi, r12        ; stream
.text:00000000000063EC                 mov     edi, 20h ; ' '  ; c
.text:00000000000063F1                 add     rbp, 1
.text:00000000000063F5                 call    _fputc
.text:00000000000063FA                 cmp     r14, rbp
.text:00000000000063FD                 jnz     short loc_63E9
.text:00000000000063FF
.text:00000000000063FF loc_63FF:                               ; CODE XREF: __strftime_internal+548↑j
.text:00000000000063FF                                         ; __strftime_internal+1A47↓j
.text:00000000000063FF                 mov     rsi, r12        ; stream
.text:0000000000006402                 mov     edi, 9          ; c
.text:0000000000006407                 call    _fputc
.text:000000000000640C                 jmp     loc_655F
.text:0000000000006411 ; ---------------------------------------------------------------------------
.text:0000000000006411
.text:0000000000006411 loc_6411:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006411                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006411                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000006043 case 117
.text:0000000000006415                 mov     edx, 92492493h
.text:000000000000641A                 mov     esi, 1
.text:000000000000641F                 mov     eax, [rax+18h]
.text:0000000000006422                 lea     ecx, [rax+6]
.text:0000000000006425                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:0000000000006429                 mov     eax, ecx
.text:000000000000642B                 imul    edx
.text:000000000000642D                 lea     eax, [rdx+rcx]
.text:0000000000006430                 mov     edx, ecx
.text:0000000000006432                 sar     edx, 1Fh
.text:0000000000006435                 sar     eax, 2
.text:0000000000006438                 sub     eax, edx
.text:000000000000643A                 lea     edx, ds:0[rax*8]
.text:0000000000006441                 sub     edx, eax
.text:0000000000006443                 sub     ecx, edx
.text:0000000000006445                 add     ecx, 1
.text:0000000000006448                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: __strftime_internal+63F↓j
.text:0000000000006450                                         ; __strftime_internal+6FF↓j ...
.text:0000000000006450                 mov     eax, ecx
.text:0000000000006452                 xor     r8d, r8d
.text:0000000000006455                 xor     r9d, r9d
.text:0000000000006458                 shr     eax, 1Fh
.text:000000000000645B                 mov     r13d, eax
.text:000000000000645E                 mov     eax, ecx
.text:0000000000006460                 not     eax
.text:0000000000006462                 shr     eax, 1Fh
.text:0000000000006465
.text:0000000000006465 loc_6465:                               ; CODE XREF: __strftime_internal+C4F↓j
.text:0000000000006465                                         ; __strftime_internal+F9E↓j ...
.text:0000000000006465                 cmp     r11d, 4Fh ; 'O'
.text:0000000000006469                 jnz     loc_7180
.text:000000000000646F                 test    al, al
.text:0000000000006471                 jz      loc_7180
.text:0000000000006477                 mov     r13d, edi
.text:000000000000647A
.text:000000000000647A loc_647A:                               ; CODE XREF: __strftime_internal+8C6↓j
.text:000000000000647A                                         ; __strftime_internal+15A5↓j
.text:000000000000647A                 mov     edx, 2520h
.text:000000000000647F                 xor     r14d, r14d
.text:0000000000006482                 mov     word ptr [rsp+4E8h+format], dx
.text:000000000000648A
.text:000000000000648A loc_648A:                               ; CODE XREF: __strftime_internal+1C12↓j
.text:000000000000648A                 lea     rdx, [rsp+4E8h+format]
.text:0000000000006492                 mov     [rsp+4E8h+var_44B], r11b
.text:000000000000649A                 mov     rbp, rbx
.text:000000000000649D                 mov     r11d, esi
.text:00000000000064A0                 lea     rax, [rdx+3]
.text:00000000000064A4                 jmp     loc_6252
.text:00000000000064A9 ; ---------------------------------------------------------------------------
.text:00000000000064A9
.text:00000000000064A9 loc_64A9:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000064A9                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:00000000000064A9                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 119
.text:00000000000064AD                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000064B3                 mov     rax, [rsp+4E8h+tp]
.text:00000000000064B7                 mov     esi, 1
.text:00000000000064BC                 mov     ecx, [rax+18h]
.text:00000000000064BF                 jmp     short loc_6450
.text:00000000000064C1 ; ---------------------------------------------------------------------------
.text:00000000000064C1
.text:00000000000064C1 loc_64C1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000064C1                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:00000000000064C1                 mov     eax, 1          ; jumptable 0000000000006043 case 80
.text:00000000000064C6
.text:00000000000064C6 loc_64C6:                               ; CODE XREF: __strftime_internal+12C6↓j
.text:00000000000064C6                 test    r14b, r14b
.text:00000000000064C9                 jnz     loc_742A
.text:00000000000064CF                 mov     r14d, eax
.text:00000000000064D2                 mov     r13d, 70h ; 'p'
.text:00000000000064D8                 jmp     loc_622D
.text:00000000000064DD ; ---------------------------------------------------------------------------
.text:00000000000064DD
.text:00000000000064DD loc_64DD:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000064DD                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:00000000000064DD                 lea     rax, aYMDHM+9   ; jumptable 0000000000006043 case 82
.text:00000000000064E4                 mov     r14d, 0FFFFFFFFh
.text:00000000000064EA                 mov     [rsp+4E8h+ptr], rax
.text:00000000000064EF
.text:00000000000064EF loc_64EF:                               ; CODE XREF: __strftime_internal+A9C↓j
.text:00000000000064EF                                         ; __strftime_internal+D89↓j ...
.text:00000000000064EF                 movzx   ebp, byte ptr [rsp+4E8h+var_4B4]
.text:00000000000064F4                 mov     dword ptr [rsp+4E8h+size], r10d
.text:00000000000064F9                 sub     rsp, 8
.text:00000000000064FD                 mov     eax, [rsp+4F0h+arg_10]
.text:0000000000006504                 xor     edi, edi        ; stream
.text:0000000000006506                 mov     r9d, r14d
.text:0000000000006509                 push    rax             ; int
.text:000000000000650A                 push    [rsp+4F8h+var_4D8] ; __int64
.text:000000000000650E                 mov     ecx, ebp
.text:0000000000006510                 push    [rsp+500h+var_4D0] ; __int64
.text:0000000000006514                 mov     rdx, [rsp+508h+tp]
.text:0000000000006519                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:000000000000651E                 mov     rsi, [rsp+508h+ptr]
.text:0000000000006523                 call    __strftime_internal
.text:0000000000006528                 add     rsp, 20h
.text:000000000000652C                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:0000000000006531                 mov     edx, 0
.text:0000000000006536                 mov     rcx, r15
.text:0000000000006539                 not     rcx
.text:000000000000653C                 test    r10d, r10d
.text:000000000000653F                 cmovns  rdx, r10
.text:0000000000006543                 cmp     rax, rdx
.text:0000000000006546                 mov     r13, rdx
.text:0000000000006549                 cmovnb  r13, rax
.text:000000000000654D                 cmp     rcx, r13
.text:0000000000006550                 jbe     loc_5F3F
.text:0000000000006556                 test    r12, r12
.text:0000000000006559                 jnz     loc_735B
.text:000000000000655F
.text:000000000000655F loc_655F:                               ; CODE XREF: __strftime_internal+53E↑j
.text:000000000000655F                                         ; __strftime_internal+58C↑j ...
.text:000000000000655F                 add     r15, r13
.text:0000000000006562                 mov     rbp, rbx
.text:0000000000006565                 jmp     loc_5F90
.text:000000000000656A ; ---------------------------------------------------------------------------
.text:000000000000656A
.text:000000000000656A loc_656A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000656A                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000656A                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 83
.text:000000000000656E                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006574                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006578                 mov     esi, 2
.text:000000000000657D                 mov     ecx, [rax]
.text:000000000000657F                 jmp     loc_6450
.text:0000000000006584 ; ---------------------------------------------------------------------------
.text:0000000000006584
.text:0000000000006584 loc_6584:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006584                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006584                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000006043 case 115
.text:0000000000006588                 mov     rdi, [rsp+4E8h+var_4D8]
.text:000000000000658D                 lea     rsi, [rsp+4E8h+var_488]
.text:0000000000006592                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000006597                 lea     r14, [rsp+4E8h+var_431]
.text:000000000000659F                 movdqu  xmm0, xmmword ptr [rax]
.text:00000000000065A3                 movaps  [rsp+4E8h+var_488], xmm0
.text:00000000000065A8                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:00000000000065AD                 movaps  [rsp+4E8h+var_478], xmm0
.text:00000000000065B2                 movdqu  xmm0, xmmword ptr [rax+20h]
.text:00000000000065B7                 mov     rax, [rax+30h]
.text:00000000000065BB                 movaps  [rsp+4E8h+var_468], xmm0
.text:00000000000065C3                 mov     [rsp+4E8h+var_458], rax
.text:00000000000065CB                 call    mktime_z
.text:00000000000065D0                 mov     r10d, dword ptr [rsp+4E8h+size]
.text:00000000000065D5                 mov     rsi, rax
.text:00000000000065D8                 mov     rcx, rax
.text:00000000000065DB                 lea     rax, [rsp+4E8h+s]
.text:00000000000065E3                 mov     r8, 6666666666666667h
.text:00000000000065ED                 mov     edi, 30h ; '0'
.text:00000000000065F2                 mov     [rsp+4E8h+ptr], rax
.text:00000000000065F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006600
.text:0000000000006600 loc_6600:                               ; CODE XREF: __strftime_internal+7BE↓j
.text:0000000000006600                 mov     rax, rcx
.text:0000000000006603                 imul    r8
.text:0000000000006606                 mov     rax, rcx
.text:0000000000006609                 sar     rax, 3Fh
.text:000000000000660D                 sar     rdx, 2
.text:0000000000006611                 sub     rdx, rax
.text:0000000000006614                 mov     rax, rdx
.text:0000000000006617                 lea     rdx, [rdx+rdx*4]
.text:000000000000661B                 add     rdx, rdx
.text:000000000000661E                 sub     rcx, rdx
.text:0000000000006621                 mov     rdx, rcx
.text:0000000000006624                 mov     rcx, rax
.text:0000000000006627                 mov     eax, edi
.text:0000000000006629                 sub     eax, edx
.text:000000000000662B                 add     edx, 30h ; '0'
.text:000000000000662E                 test    rsi, rsi
.text:0000000000006631                 cmovs   edx, eax
.text:0000000000006634                 sub     r14, 1
.text:0000000000006638                 test    rcx, rcx
.text:000000000000663B                 mov     [r14], dl
.text:000000000000663E                 jnz     short loc_6600
.text:0000000000006640                 test    r10d, r10d
.text:0000000000006643                 mov     eax, 1
.text:0000000000006648                 cmovg   eax, r10d
.text:000000000000664C                 test    rsi, rsi
.text:000000000000664F                 mov     [rsp+4E8h+var_490], eax
.text:0000000000006653                 js      loc_7190
.text:0000000000006659
.text:0000000000006659 loc_6659:                               ; CODE XREF: __strftime_internal+95B↓j
.text:0000000000006659                 mov     rax, [rsp+4E8h+ptr]
.text:000000000000665E                 mov     rdx, r15
.text:0000000000006661                 not     rdx
.text:0000000000006664                 add     rax, 17h
.text:0000000000006668                 sub     rax, r14
.text:000000000000666B                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000006670                 mov     [rsp+4E8h+size], rax
.text:0000000000006675                 jz      short loc_668A
.text:0000000000006677                 mov     r13d, [rsp+4E8h+var_490]
.text:000000000000667C                 sub     r13d, dword ptr [rsp+4E8h+size]
.text:0000000000006681                 test    r13d, r13d
.text:0000000000006684                 jg      loc_77BE
.text:000000000000668A
.text:000000000000668A loc_668A:                               ; CODE XREF: __strftime_internal+7F5↑j
.text:000000000000668A                 test    r10d, r10d
.text:000000000000668D                 mov     ecx, 0
.text:0000000000006692                 mov     rbp, rbx
.text:0000000000006695                 cmovns  ecx, r10d
.text:0000000000006699                 movsxd  r13, ecx
.text:000000000000669C
.text:000000000000669C loc_669C:                               ; CODE XREF: __strftime_internal+A85↓j
.text:000000000000669C                                         ; __strftime_internal+13E0↓j ...
.text:000000000000669C                 mov     rax, [rsp+4E8h+size]
.text:00000000000066A1                 cmp     rax, r13
.text:00000000000066A4                 mov     rbx, rax
.text:00000000000066A7                 cmovb   rbx, r13
.text:00000000000066AB                 cmp     rbx, rdx
.text:00000000000066AE                 jnb     loc_5F3F
.text:00000000000066B4                 test    r12, r12
.text:00000000000066B7                 jz      short loc_672E
.text:00000000000066B9                 mov     edx, [rsp+4E8h+var_490]
.text:00000000000066BD                 test    edx, edx
.text:00000000000066BF                 jnz     short loc_6713
.text:00000000000066C1                 cmp     rax, r13
.text:00000000000066C4                 jnb     short loc_6713
.text:00000000000066C6                 movsxd  r13, r10d
.text:00000000000066C9                 sub     r13, rax
.text:00000000000066CC                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000066D0                 cmp     eax, 30h ; '0'
.text:00000000000066D3                 jz      loc_73F0
.text:00000000000066D9                 cmp     eax, 2Bh ; '+'
.text:00000000000066DC                 jz      loc_73F0
.text:00000000000066E2                 xor     edx, edx
.text:00000000000066E4                 test    r13, r13
.text:00000000000066E7                 jz      short loc_6713
.text:00000000000066E9                 mov     [rsp+4E8h+var_4E0], rbx
.text:00000000000066EE                 mov     rbx, rdx
.text:00000000000066F1                 nop     dword ptr [rax+00000000h]
.text:00000000000066F8
.text:00000000000066F8 loc_66F8:                               ; CODE XREF: __strftime_internal+88C↓j
.text:00000000000066F8                 mov     rsi, r12        ; stream
.text:00000000000066FB                 mov     edi, 20h ; ' '  ; c
.text:0000000000006700                 add     rbx, 1
.text:0000000000006704                 call    _fputc
.text:0000000000006709                 cmp     r13, rbx
.text:000000000000670C                 jnz     short loc_66F8
.text:000000000000670E
.text:000000000000670E loc_670E:                               ; CODE XREF: __strftime_internal+159E↓j
.text:000000000000670E                 mov     rbx, [rsp+4E8h+var_4E0]
.text:0000000000006713
.text:0000000000006713 loc_6713:                               ; CODE XREF: __strftime_internal+83F↑j
.text:0000000000006713                                         ; __strftime_internal+844↑j ...
.text:0000000000006713                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000006718                 jz      loc_72D0
.text:000000000000671E                 mov     rdx, [rsp+4E8h+size]
.text:0000000000006723                 mov     rsi, r14
.text:0000000000006726                 mov     rdi, r12        ; stream
.text:0000000000006729                 call    fwrite_uppcase
.text:000000000000672E
.text:000000000000672E loc_672E:                               ; CODE XREF: __strftime_internal+837↑j
.text:000000000000672E                                         ; __strftime_internal+1465↓j
.text:000000000000672E                 add     r15, rbx
.text:0000000000006731                 jmp     loc_5F90
.text:0000000000006736 ; ---------------------------------------------------------------------------
.text:0000000000006736
.text:0000000000006736 loc_6736:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006736                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006736                 mov     rax, [rsp+4E8h+tp] ; jumptable 0000000000006043 case 113
.text:000000000000673A                 cmp     r11d, 4Fh ; 'O'
.text:000000000000673E                 mov     esi, 1
.text:0000000000006743                 mov     eax, [rax+10h]
.text:0000000000006746                 jz      loc_647A
.text:000000000000674C                 lea     edx, [rax+rax*4]
.text:000000000000674F                 xor     r9d, r9d
.text:0000000000006752                 xor     r13d, r13d
.text:0000000000006755                 xor     r8d, r8d
.text:0000000000006758                 lea     ecx, [rax+rdx*2]
.text:000000000000675B                 sar     ecx, 5
.text:000000000000675E                 add     ecx, 1
.text:0000000000006761                 nop     dword ptr [rax+00000000h]
.text:0000000000006768
.text:0000000000006768 loc_6768:                               ; CODE XREF: __strftime_internal+130A↓j
.text:0000000000006768                 lea     rax, [rsp+4E8h+s]
.text:0000000000006770                 lea     rdi, [rsp+4E8h+var_431]
.text:0000000000006778                 mov     r11d, 0CCCCCCCDh
.text:000000000000677E                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006783                 nop     dword ptr [rax+rax+00h]
.text:0000000000006788
.text:0000000000006788 loc_6788:                               ; CODE XREF: __strftime_internal+942↓j
.text:0000000000006788                 test    r8b, 1
.text:000000000000678C                 lea     r14, [rdi-1]
.text:0000000000006790                 jz      short loc_67A0
.text:0000000000006792                 lea     rax, [rdi-2]
.text:0000000000006796                 mov     byte ptr [rdi-1], 3Ah ; ':'
.text:000000000000679A                 mov     rdi, r14
.text:000000000000679D                 mov     r14, rax
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: __strftime_internal+910↑j
.text:00000000000067A0                 mov     eax, ecx
.text:00000000000067A2                 sar     r8d, 1
.text:00000000000067A5                 mul     r11d
.text:00000000000067A8                 shr     edx, 3
.text:00000000000067AB                 lea     eax, [rdx+rdx*4]
.text:00000000000067AE                 add     eax, eax
.text:00000000000067B0                 sub     ecx, eax
.text:00000000000067B2                 mov     eax, r8d
.text:00000000000067B5                 add     ecx, 30h ; '0'
.text:00000000000067B8                 or      eax, edx
.text:00000000000067BA                 mov     [rdi-1], cl
.text:00000000000067BD                 mov     ecx, edx
.text:00000000000067BF                 mov     rdi, r14
.text:00000000000067C2                 jnz     short loc_6788
.text:00000000000067C4                 cmp     r10d, esi
.text:00000000000067C7                 cmovge  esi, r10d
.text:00000000000067CB                 test    r13b, r13b
.text:00000000000067CE                 mov     [rsp+4E8h+var_490], esi
.text:00000000000067D2                 jnz     loc_7190
.text:00000000000067D8                 test    r9b, r9b
.text:00000000000067DB                 jz      loc_6659
.text:00000000000067E1                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:00000000000067E6                 mov     ebp, 2Bh ; '+'
.text:00000000000067EB                 jz      loc_759D
.text:00000000000067F1
.text:00000000000067F1 loc_67F1:                               ; CODE XREF: __strftime_internal+131A↓j
.text:00000000000067F1                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000067F6                 mov     rdx, r15
.text:00000000000067F9                 not     rdx
.text:00000000000067FC                 add     rax, 17h
.text:0000000000006800                 sub     rax, r14
.text:0000000000006803                 mov     rdi, rax
.text:0000000000006806                 mov     [rsp+4E8h+size], rax
.text:000000000000680B                 mov     eax, [rsp+4E8h+var_490]
.text:000000000000680F                 sub     eax, 1
.text:0000000000006812                 sub     eax, edi
.text:0000000000006814                 test    eax, eax
.text:0000000000006816                 mov     r13d, eax
.text:0000000000006819                 jle     loc_74E0
.text:000000000000681F                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000006824                 jz      loc_743C
.text:000000000000682A                 movsxd  rax, [rsp+4E8h+var_490]
.text:000000000000682F                 cmp     rax, rdx
.text:0000000000006832                 mov     rdi, rax
.text:0000000000006835                 jnb     loc_5F3F
.text:000000000000683B                 test    r10d, r10d
.text:000000000000683E                 mov     eax, 0
.text:0000000000006843                 mov     ecx, 1
.text:0000000000006848                 cmovns  eax, r10d
.text:000000000000684C                 cdqe
.text:000000000000684E                 test    rax, rax
.text:0000000000006851                 cmovnz  rcx, rax
.text:0000000000006855                 cmp     rcx, rdx
.text:0000000000006858                 mov     [rsp+4E8h+var_4A0], rcx
.text:000000000000685D                 jnb     loc_5F3F
.text:0000000000006863                 test    r12, r12
.text:0000000000006866                 jz      short loc_68CC
.text:0000000000006868                 test    edi, edi
.text:000000000000686A                 jnz     short loc_68C0
.text:000000000000686C                 cmp     rax, 1
.text:0000000000006870                 jbe     short loc_68C0
.text:0000000000006872                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006876                 movsxd  r10, r10d
.text:0000000000006879                 lea     rax, [r10-1]
.text:000000000000687D                 cmp     edi, 30h ; '0'
.text:0000000000006880                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006885                 jz      loc_7990
.text:000000000000688B                 cmp     edi, 2Bh ; '+'
.text:000000000000688E                 jz      loc_7990
.text:0000000000006894                 xor     edx, edx
.text:0000000000006896                 test    rax, rax
.text:0000000000006899                 jz      short loc_68C0
.text:000000000000689B                 mov     [rsp+4E8h+var_498], rbx
.text:00000000000068A0                 mov     rbx, rdx
.text:00000000000068A3
.text:00000000000068A3 loc_68A3:                               ; CODE XREF: __strftime_internal+A39↓j
.text:00000000000068A3                 mov     rsi, r12        ; stream
.text:00000000000068A6                 mov     edi, 20h ; ' '  ; c
.text:00000000000068AB                 add     rbx, 1
.text:00000000000068AF                 call    _fputc
.text:00000000000068B4                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000068B9                 jnz     short loc_68A3
.text:00000000000068BB
.text:00000000000068BB loc_68BB:                               ; CODE XREF: __strftime_internal+1B3E↓j
.text:00000000000068BB                 mov     rbx, [rsp+4E8h+var_498]
.text:00000000000068C0
.text:00000000000068C0 loc_68C0:                               ; CODE XREF: __strftime_internal+9EA↑j
.text:00000000000068C0                                         ; __strftime_internal+9F0↑j ...
.text:00000000000068C0                 movsx   edi, bpl        ; c
.text:00000000000068C4                 mov     rsi, r12        ; stream
.text:00000000000068C7                 call    _fputc
.text:00000000000068CC
.text:00000000000068CC loc_68CC:                               ; CODE XREF: __strftime_internal+9E6↑j
.text:00000000000068CC                 add     r15, [rsp+4E8h+var_4A0]
.text:00000000000068D1
.text:00000000000068D1 loc_68D1:                               ; CODE XREF: __strftime_internal+1951↓j
.text:00000000000068D1                 mov     rbp, rbx
.text:00000000000068D4                 movsxd  rbx, r13d
.text:00000000000068D7                 xor     r13d, r13d
.text:00000000000068DA                 test    r12, r12
.text:00000000000068DD                 jz      short loc_68F6
.text:00000000000068DF                 nop
.text:00000000000068E0
.text:00000000000068E0 loc_68E0:                               ; CODE XREF: __strftime_internal+A74↓j
.text:00000000000068E0                 mov     rsi, r12        ; stream
.text:00000000000068E3                 mov     edi, 30h ; '0'  ; c
.text:00000000000068E8                 add     r13, 1
.text:00000000000068EC                 call    _fputc
.text:00000000000068F1                 cmp     r13, rbx
.text:00000000000068F4                 jnz     short loc_68E0
.text:00000000000068F6
.text:00000000000068F6 loc_68F6:                               ; CODE XREF: __strftime_internal+A5D↑j
.text:00000000000068F6                 add     r15, rbx
.text:00000000000068F9                 xor     r13d, r13d
.text:00000000000068FC                 xor     r10d, r10d
.text:00000000000068FF                 mov     rdx, r15
.text:0000000000006902                 not     rdx
.text:0000000000006905                 jmp     loc_669C
.text:000000000000690A ; ---------------------------------------------------------------------------
.text:000000000000690A
.text:000000000000690A loc_690A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000690A                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000690A                 lea     rax, aHMS       ; jumptable 0000000000006043 case 84
.text:0000000000006911                 mov     r14d, 0FFFFFFFFh
.text:0000000000006917                 mov     [rsp+4E8h+ptr], rax
.text:000000000000691C                 jmp     loc_64EF
.text:0000000000006921 ; ---------------------------------------------------------------------------
.text:0000000000006921
.text:0000000000006921 loc_6921:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006921                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006921                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 85
.text:0000000000006925                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000692B                 mov     rax, [rsp+4E8h+tp]
.text:000000000000692F                 mov     edx, 92492493h
.text:0000000000006934                 mov     esi, [rax+1Ch]
.text:0000000000006937                 sub     esi, [rax+18h]
.text:000000000000693A                 add     esi, 7
.text:000000000000693D                 mov     eax, esi
.text:000000000000693F                 imul    edx
.text:0000000000006941
.text:0000000000006941 loc_6941:                               ; CODE XREF: __strftime_internal+FF0↓j
.text:0000000000006941                 lea     ecx, [rdx+rsi]
.text:0000000000006944                 sar     esi, 1Fh
.text:0000000000006947                 sar     ecx, 2
.text:000000000000694A                 sub     ecx, esi
.text:000000000000694C                 mov     esi, 2
.text:0000000000006951                 jmp     loc_6450
.text:0000000000006956 ; ---------------------------------------------------------------------------
.text:0000000000006956
.text:0000000000006956 loc_6956:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006956                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006956                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 cases 71,86,103
.text:000000000000695A                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006960                 mov     rcx, [rsp+4E8h+tp]
.text:0000000000006964                 mov     edx, 92492493h
.text:0000000000006969                 mov     esi, [rcx+14h]
.text:000000000000696C                 mov     r8d, [rcx+1Ch]
.text:0000000000006970                 mov     r14d, [rcx+18h]
.text:0000000000006974                 mov     eax, esi
.text:0000000000006976                 mov     ecx, r8d
.text:0000000000006979                 sar     eax, 1Fh
.text:000000000000697C                 sub     ecx, r14d
.text:000000000000697F                 add     ecx, 17Eh
.text:0000000000006985                 and     eax, 190h
.text:000000000000698A                 lea     r9d, [rsi+rax-64h]
.text:000000000000698F                 mov     eax, ecx
.text:0000000000006991                 imul    edx
.text:0000000000006993                 lea     eax, [rdx+rcx]
.text:0000000000006996                 mov     edx, ecx
.text:0000000000006998                 sar     edx, 1Fh
.text:000000000000699B                 sar     eax, 2
.text:000000000000699E                 sub     eax, edx
.text:00000000000069A0                 lea     edx, ds:0[rax*8]
.text:00000000000069A7                 sub     edx, eax
.text:00000000000069A9                 mov     eax, r8d
.text:00000000000069AC                 sub     eax, ecx
.text:00000000000069AE                 lea     ebp, [rax+rdx+3]
.text:00000000000069B2                 test    ebp, ebp
.text:00000000000069B4                 js      loc_77E0
.text:00000000000069BA                 test    r9b, 3
.text:00000000000069BE                 mov     eax, 16Dh
.text:00000000000069C3                 jnz     short loc_6A0A
.text:00000000000069C5                 mov     eax, r9d
.text:00000000000069C8                 mov     edx, 51EB851Fh
.text:00000000000069CD                 mov     ecx, r9d
.text:00000000000069D0                 imul    edx
.text:00000000000069D2                 sar     ecx, 1Fh
.text:00000000000069D5                 mov     eax, 16Eh
.text:00000000000069DA                 mov     dword ptr [rsp+4E8h+ptr], edx
.text:00000000000069DE                 sar     edx, 5
.text:00000000000069E1                 sub     edx, ecx
.text:00000000000069E3                 imul    edx, 64h ; 'd'
.text:00000000000069E6                 cmp     r9d, edx
.text:00000000000069E9                 jnz     short loc_6A0A
.text:00000000000069EB                 mov     edx, dword ptr [rsp+4E8h+ptr]
.text:00000000000069EF                 sar     edx, 7
.text:00000000000069F2                 mov     eax, edx
.text:00000000000069F4                 sub     eax, ecx
.text:00000000000069F6                 imul    eax, 190h
.text:00000000000069FC                 cmp     r9d, eax
.text:00000000000069FF                 setz    al
.text:0000000000006A02                 movzx   eax, al
.text:0000000000006A05                 add     eax, 16Dh
.text:0000000000006A0A
.text:0000000000006A0A loc_6A0A:                               ; CODE XREF: __strftime_internal+B43↑j
.text:0000000000006A0A                                         ; __strftime_internal+B69↑j
.text:0000000000006A0A                 sub     r8d, eax
.text:0000000000006A0D                 mov     edx, 92492493h
.text:0000000000006A12                 mov     ecx, r8d
.text:0000000000006A15                 sub     ecx, r14d
.text:0000000000006A18                 add     ecx, 17Eh
.text:0000000000006A1E                 mov     eax, ecx
.text:0000000000006A20                 sub     r8d, ecx
.text:0000000000006A23                 imul    edx
.text:0000000000006A25                 lea     eax, [rdx+rcx]
.text:0000000000006A28                 mov     edx, ecx
.text:0000000000006A2A                 sar     edx, 1Fh
.text:0000000000006A2D                 sar     eax, 2
.text:0000000000006A30                 sub     eax, edx
.text:0000000000006A32                 lea     edx, ds:0[rax*8]
.text:0000000000006A39                 sub     edx, eax
.text:0000000000006A3B                 lea     ecx, [r8+rdx+3]
.text:0000000000006A40                 mov     r8d, 1
.text:0000000000006A46                 test    ecx, ecx
.text:0000000000006A48                 jns     short loc_6A4F
.text:0000000000006A4A                 mov     ecx, ebp
.text:0000000000006A4C                 xor     r8d, r8d
.text:0000000000006A4F
.text:0000000000006A4F loc_6A4F:                               ; CODE XREF: __strftime_internal+BC8↑j
.text:0000000000006A4F                                         ; __strftime_internal+19E5↓j
.text:0000000000006A4F                 cmp     r13b, 47h ; 'G'
.text:0000000000006A53                 jz      loc_76E7
.text:0000000000006A59                 cmp     r13b, 67h ; 'g'
.text:0000000000006A5D                 jnz     loc_786A
.text:0000000000006A63                 mov     ecx, 51EB851Fh
.text:0000000000006A68                 mov     eax, esi
.text:0000000000006A6A                 mov     r9d, esi
.text:0000000000006A6D                 imul    ecx
.text:0000000000006A6F                 mov     eax, edx
.text:0000000000006A71                 mov     edx, esi
.text:0000000000006A73                 sar     edx, 1Fh
.text:0000000000006A76                 sar     eax, 5
.text:0000000000006A79                 sub     eax, edx
.text:0000000000006A7B                 imul    eax, 64h ; 'd'
.text:0000000000006A7E                 sub     r9d, eax
.text:0000000000006A81                 add     r9d, r8d
.text:0000000000006A84                 mov     eax, r9d
.text:0000000000006A87                 imul    ecx
.text:0000000000006A89                 mov     eax, r9d
.text:0000000000006A8C                 sar     eax, 1Fh
.text:0000000000006A8F                 mov     ecx, edx
.text:0000000000006A91                 sar     ecx, 5
.text:0000000000006A94                 sub     ecx, eax
.text:0000000000006A96                 imul    ecx, 64h ; 'd'
.text:0000000000006A99                 sub     r9d, ecx
.text:0000000000006A9C                 mov     ecx, r9d
.text:0000000000006A9F                 js      loc_76A4
.text:0000000000006AA5
.text:0000000000006AA5 loc_6AA5:                               ; CODE XREF: __strftime_internal+1159↓j
.text:0000000000006AA5                                         ; __strftime_internal+116D↓j
.text:0000000000006AA5                 mov     esi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006AA9                 test    esi, esi
.text:0000000000006AAB                 jz      loc_76C1
.text:0000000000006AB1
.text:0000000000006AB1 loc_6AB1:                               ; CODE XREF: __strftime_internal+183B↓j
.text:0000000000006AB1                                         ; __strftime_internal+1C0B↓j
.text:0000000000006AB1                 mov     eax, 1
.text:0000000000006AB6                 xor     r13d, r13d
.text:0000000000006AB9
.text:0000000000006AB9 loc_6AB9:                               ; CODE XREF: __strftime_internal+D50↓j
.text:0000000000006AB9                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000006ABE                 jz      loc_7A5D
.text:0000000000006AC4
.text:0000000000006AC4 loc_6AC4:                               ; CODE XREF: __strftime_internal+D69↓j
.text:0000000000006AC4                 xor     r9d, r9d
.text:0000000000006AC7                 mov     esi, 2
.text:0000000000006ACC
.text:0000000000006ACC loc_6ACC:                               ; CODE XREF: __strftime_internal+104E↓j
.text:0000000000006ACC                                         ; __strftime_internal+1741↓j ...
.text:0000000000006ACC                 xor     r8d, r8d
.text:0000000000006ACF                 jmp     loc_6465
.text:0000000000006AD4 ; ---------------------------------------------------------------------------
.text:0000000000006AD4
.text:0000000000006AD4 loc_6AD4:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006AD4                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006AD4                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 72
.text:0000000000006AD8                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006ADE                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006AE2                 mov     esi, 2
.text:0000000000006AE7                 mov     ecx, [rax+8]
.text:0000000000006AEA                 jmp     loc_6450
.text:0000000000006AEF ; ---------------------------------------------------------------------------
.text:0000000000006AEF
.text:0000000000006AEF loc_6AEF:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006AEF                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006AEF                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 77
.text:0000000000006AF3                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006AF9                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006AFD                 mov     esi, 2
.text:0000000000006B02                 mov     ecx, [rax+4]
.text:0000000000006B05                 jmp     loc_6450
.text:0000000000006B0A ; ---------------------------------------------------------------------------
.text:0000000000006B0A
.text:0000000000006B0A loc_6B0A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006B0A                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006B0A                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 78
.text:0000000000006B0E                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006B14                 cmp     r10d, 0FFFFFFFFh
.text:0000000000006B18                 jz      loc_7730
.text:0000000000006B1E                 cmp     r10d, 8
.text:0000000000006B22                 jg      loc_7A6C
.text:0000000000006B28                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000006B2F                 mov     esi, r10d
.text:0000000000006B32                 mov     r8d, 66666667h
.text:0000000000006B38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: __strftime_internal+CD5↓j
.text:0000000000006B40                 mov     eax, ecx
.text:0000000000006B42                 add     esi, 1
.text:0000000000006B45                 sar     ecx, 1Fh
.text:0000000000006B48                 imul    r8d
.text:0000000000006B4B                 sar     edx, 2
.text:0000000000006B4E                 sub     edx, ecx
.text:0000000000006B50                 cmp     esi, 9
.text:0000000000006B53                 mov     ecx, edx
.text:0000000000006B55                 jnz     short loc_6B40
.text:0000000000006B57
.text:0000000000006B57 loc_6B57:                               ; CODE XREF: __strftime_internal+1BF3↓j
.text:0000000000006B57                 mov     esi, r10d
.text:0000000000006B5A                 jmp     loc_6450
.text:0000000000006B5F ; ---------------------------------------------------------------------------
.text:0000000000006B5F
.text:0000000000006B5F loc_6B5F:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006B5F                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006B5F                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 73
.text:0000000000006B63                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006B69                 mov     ecx, [rsp+4E8h+var_4B8]
.text:0000000000006B6D                 mov     esi, 2
.text:0000000000006B72                 jmp     loc_6450
.text:0000000000006B77 ; ---------------------------------------------------------------------------
.text:0000000000006B77
.text:0000000000006B77 loc_6B77:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006B77                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006B77                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 67
.text:0000000000006B7B                 jz      loc_7423
.text:0000000000006B81                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006B85                 mov     edx, 51EB851Fh
.text:0000000000006B8A                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006B8F                 mov     esi, [rax+14h]
.text:0000000000006B92                 mov     eax, esi
.text:0000000000006B94                 imul    edx
.text:0000000000006B96                 mov     eax, edx
.text:0000000000006B98                 mov     edx, esi
.text:0000000000006B9A                 sar     edx, 1Fh
.text:0000000000006B9D                 sar     eax, 5
.text:0000000000006BA0                 sub     eax, edx
.text:0000000000006BA2                 mov     edx, esi
.text:0000000000006BA4                 lea     ecx, [rax+13h]
.text:0000000000006BA7                 imul    eax, 64h ; 'd'
.text:0000000000006BAA                 sub     edx, eax
.text:0000000000006BAC                 mov     eax, edx
.text:0000000000006BAE                 shr     eax, 1Fh
.text:0000000000006BB1                 test    ecx, ecx
.text:0000000000006BB3                 setnle  dl
.text:0000000000006BB6                 and     eax, edx
.text:0000000000006BB8                 cmp     esi, 0FFFFF894h
.text:0000000000006BBE                 setl    r13b
.text:0000000000006BC2                 sub     ecx, eax
.text:0000000000006BC4                 cmp     esi, 0FFFFF894h
.text:0000000000006BCA                 setnl   al
.text:0000000000006BCD                 test    r9d, r9d
.text:0000000000006BD0                 jnz     loc_6AB9
.text:0000000000006BD6                 cmp     [rsp+4E8h+var_4C4], 2Bh ; '+'
.text:0000000000006BDB                 jz      loc_7A5D
.text:0000000000006BE1                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000006BE5                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000006BE9                 jmp     loc_6AC4
.text:0000000000006BEE ; ---------------------------------------------------------------------------
.text:0000000000006BEE
.text:0000000000006BEE loc_6BEE:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006BEE                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006BEE                 test    r11d, r11d      ; jumptable 0000000000006043 case 68
.text:0000000000006BF1                 jnz     def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006BF7                 lea     rax, aMDY       ; "%m/%d/%y"
.text:0000000000006BFE                 mov     r14d, 0FFFFFFFFh
.text:0000000000006C04                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006C09                 jmp     loc_64EF
.text:0000000000006C0E ; ---------------------------------------------------------------------------
.text:0000000000006C0E
.text:0000000000006C0E loc_6C0E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006C0E                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006C0E                 test    r11d, r11d      ; jumptable 0000000000006043 case 70
.text:0000000000006C11                 jnz     def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006C17                 mov     r11d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006C1C                 test    r11d, r11d
.text:0000000000006C1F                 jnz     loc_796F
.text:0000000000006C25                 test    r10d, r10d
.text:0000000000006C28                 jns     loc_796F
.text:0000000000006C2E                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000006C35                 mov     r14d, 4
.text:0000000000006C3B                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000006C43                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006C48                 jmp     loc_64EF
.text:0000000000006C4D ; ---------------------------------------------------------------------------
.text:0000000000006C4D
.text:0000000000006C4D loc_6C4D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006C4D                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006C4D                 movzx   ecx, byte ptr [rbx-1] ; jumptable 0000000000006043 case 0
.text:0000000000006C51                 lea     rax, [rbx-1]
.text:0000000000006C55                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006C5A
.text:0000000000006C5A loc_6C5A:                               ; CODE XREF: __strftime_internal+1ACC↓j
.text:0000000000006C5A                 test    r10d, r10d
.text:0000000000006C5D                 mov     eax, 0
.text:0000000000006C62                 mov     rdx, r15
.text:0000000000006C65                 cmovns  eax, r10d
.text:0000000000006C69                 cmp     cl, 25h ; '%'
.text:0000000000006C6C                 not     rdx
.text:0000000000006C6F                 cdqe
.text:0000000000006C71                 jnz     loc_608B
.text:0000000000006C77                 test    rax, rax
.text:0000000000006C7A                 mov     r14d, 1
.text:0000000000006C80                 mov     rbp, [rsp+4E8h+ptr]
.text:0000000000006C85                 cmovnz  r14, rax
.text:0000000000006C89                 mov     r13d, 1
.text:0000000000006C8F                 jmp     loc_60D4
.text:0000000000006C94 ; ---------------------------------------------------------------------------
.text:0000000000006C94
.text:0000000000006C94 loc_6C94:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006C94                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006C94                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 66
.text:0000000000006C98                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006C9E                 test    r14b, r14b
.text:0000000000006CA1                 jz      loc_622D
.text:0000000000006CA7                 mov     byte ptr [rsp+4E8h+var_4B4], r14b
.text:0000000000006CAC                 jmp     loc_622A        ; jumptable 0000000000006043 case 114
.text:0000000000006CB1 ; ---------------------------------------------------------------------------
.text:0000000000006CB1
.text:0000000000006CB1 loc_6CB1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006CB1                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006CB1                 test    r10d, r10d      ; jumptable 0000000000006043 case 37
.text:0000000000006CB4                 mov     eax, 0
.text:0000000000006CB9                 mov     r14d, 1
.text:0000000000006CBF                 cmovns  eax, r10d
.text:0000000000006CC3                 mov     rdx, r15
.text:0000000000006CC6                 cdqe
.text:0000000000006CC8                 not     rdx
.text:0000000000006CCB                 test    rax, rax
.text:0000000000006CCE                 cmovnz  r14, rax
.text:0000000000006CD2                 test    r11d, r11d
.text:0000000000006CD5                 jnz     loc_7747
.text:0000000000006CDB                 cmp     rdx, r14
.text:0000000000006CDE                 jbe     loc_5F3F
.text:0000000000006CE4                 test    r12, r12
.text:0000000000006CE7                 jz      loc_5F8A
.text:0000000000006CED                 cmp     r10d, 1
.text:0000000000006CF1                 jle     loc_5F82
.text:0000000000006CF7                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006CFB                 movsxd  r10, r10d
.text:0000000000006CFE                 lea     r13, [r10-1]
.text:0000000000006D02                 cmp     eax, 30h ; '0'
.text:0000000000006D05                 jz      loc_7A2E
.text:0000000000006D0B                 xor     ebp, ebp
.text:0000000000006D0D                 cmp     eax, 2Bh ; '+'
.text:0000000000006D10                 jz      loc_7A2E
.text:0000000000006D16
.text:0000000000006D16 loc_6D16:                               ; CODE XREF: __strftime_internal+EAA↓j
.text:0000000000006D16                 mov     rsi, r12        ; stream
.text:0000000000006D19                 mov     edi, 20h ; ' '  ; c
.text:0000000000006D1E                 add     rbp, 1
.text:0000000000006D22                 call    _fputc
.text:0000000000006D27                 cmp     r13, rbp
.text:0000000000006D2A                 jnz     short loc_6D16
.text:0000000000006D2C                 jmp     loc_5F7F
.text:0000000000006D31 ; ---------------------------------------------------------------------------
.text:0000000000006D31
.text:0000000000006D31 loc_6D31:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006D31                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006D31                 movzx   eax, byte ptr [rbx+1] ; jumptable 0000000000006043 case 58
.text:0000000000006D35                 lea     rdx, [rbx+1]
.text:0000000000006D39                 cmp     al, 3Ah ; ':'
.text:0000000000006D3B                 jz      loc_7921
.text:0000000000006D41                 mov     r14d, 1
.text:0000000000006D47
.text:0000000000006D47 loc_6D47:                               ; CODE XREF: __strftime_internal+1ABC↓j
.text:0000000000006D47                 cmp     al, 7Ah ; 'z'
.text:0000000000006D49                 jnz     def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D4F                 mov     rbx, rdx
.text:0000000000006D52
.text:0000000000006D52 loc_6D52:                               ; CODE XREF: __strftime_internal+12F3↓j
.text:0000000000006D52                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006D56                 mov     ecx, [rax+20h]
.text:0000000000006D59                 test    ecx, ecx
.text:0000000000006D5B                 js      loc_75DB
.text:0000000000006D61                 mov     rcx, [rax+28h]
.text:0000000000006D65                 mov     r13d, 1
.text:0000000000006D6B                 test    ecx, ecx
.text:0000000000006D6D                 js      short loc_6D83
.text:0000000000006D6F                 mov     r13d, 0
.text:0000000000006D75                 jnz     short loc_6D83
.text:0000000000006D77                 mov     rax, [rsp+4E8h+var_4C0]
.text:0000000000006D7C                 cmp     byte ptr [rax], 2Dh ; '-'
.text:0000000000006D7F                 setz    r13b
.text:0000000000006D83
.text:0000000000006D83 loc_6D83:                               ; CODE XREF: __strftime_internal+EED↑j
.text:0000000000006D83                                         ; __strftime_internal+EF5↑j
.text:0000000000006D83                 mov     eax, ecx
.text:0000000000006D85                 mov     edx, 91A2B3C5h
.text:0000000000006D8A                 mov     r9d, ecx
.text:0000000000006D8D                 imul    edx
.text:0000000000006D8F                 sar     r9d, 1Fh
.text:0000000000006D93                 mov     r8d, 88888889h
.text:0000000000006D99                 mov     eax, ecx
.text:0000000000006D9B                 add     edx, ecx
.text:0000000000006D9D                 sar     edx, 0Bh
.text:0000000000006DA0                 sub     edx, r9d
.text:0000000000006DA3                 mov     ebp, edx
.text:0000000000006DA5                 imul    r8d
.text:0000000000006DA8                 lea     esi, [rdx+rcx]
.text:0000000000006DAB                 sar     esi, 5
.text:0000000000006DAE                 sub     esi, r9d
.text:0000000000006DB1                 mov     eax, esi
.text:0000000000006DB3                 imul    r8d
.text:0000000000006DB6                 mov     eax, esi
.text:0000000000006DB8                 sar     eax, 1Fh
.text:0000000000006DBB                 lea     r8d, [rdx+rsi]
.text:0000000000006DBF                 sar     r8d, 5
.text:0000000000006DC3                 sub     r8d, eax
.text:0000000000006DC6                 mov     eax, esi
.text:0000000000006DC8                 imul    r8d, 3Ch ; '<'
.text:0000000000006DCC                 imul    esi, 3Ch ; '<'
.text:0000000000006DCF                 sub     eax, r8d
.text:0000000000006DD2                 sub     ecx, esi
.text:0000000000006DD4                 cmp     r14, 1
.text:0000000000006DD8                 mov     r8d, eax
.text:0000000000006DDB                 jz      loc_788D
.text:0000000000006DE1                 jb      loc_7951
.text:0000000000006DE7                 cmp     r14, 2
.text:0000000000006DEB                 jz      loc_7793
.text:0000000000006DF1                 cmp     r14, 3
.text:0000000000006DF5                 jnz     loc_7944
.text:0000000000006DFB                 test    ecx, ecx
.text:0000000000006DFD                 jnz     loc_7793
.text:0000000000006E03                 test    eax, eax
.text:0000000000006E05                 jnz     loc_788D
.text:0000000000006E0B                 mov     eax, r13d
.text:0000000000006E0E                 mov     ecx, ebp
.text:0000000000006E10                 mov     r9d, 1
.text:0000000000006E16                 xor     eax, 1
.text:0000000000006E19                 mov     esi, 3
.text:0000000000006E1E                 jmp     loc_6465
.text:0000000000006E1E ; ---------------------------------------------------------------------------
.text:0000000000006E23                 align 8
.text:0000000000006E28
.text:0000000000006E28 loc_6E28:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006E28                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006E28                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 87
.text:0000000000006E2C                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006E32                 mov     r9, [rsp+4E8h+tp]
.text:0000000000006E36                 mov     ecx, 92492493h
.text:0000000000006E3B                 mov     eax, [r9+18h]
.text:0000000000006E3F                 lea     esi, [rax+6]
.text:0000000000006E42                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:0000000000006E46                 mov     eax, esi
.text:0000000000006E48                 imul    ecx
.text:0000000000006E4A                 lea     eax, [rdx+rsi]
.text:0000000000006E4D                 mov     edx, esi
.text:0000000000006E4F                 sar     edx, 1Fh
.text:0000000000006E52                 sar     eax, 2
.text:0000000000006E55                 sub     eax, edx
.text:0000000000006E57                 lea     edx, ds:0[rax*8]
.text:0000000000006E5E                 sub     edx, eax
.text:0000000000006E60                 mov     eax, edx
.text:0000000000006E62                 mov     edx, [r9+1Ch]
.text:0000000000006E66                 sub     eax, esi
.text:0000000000006E68                 lea     esi, [rax+rdx+7]
.text:0000000000006E6C                 mov     eax, esi
.text:0000000000006E6E                 imul    ecx
.text:0000000000006E70                 jmp     loc_6941
.text:0000000000006E75 ; ---------------------------------------------------------------------------
.text:0000000000006E75
.text:0000000000006E75 loc_6E75:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006E75                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006E75                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 89
.text:0000000000006E79                 jz      loc_7423
.text:0000000000006E7F                 cmp     r11d, 4Fh ; 'O'
.text:0000000000006E83                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006E89                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006E8D                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006E92                 mov     eax, [rax+14h]
.text:0000000000006E95                 cmp     eax, 0FFFFF894h
.text:0000000000006E9A                 lea     ecx, [rax+76Ch]
.text:0000000000006EA0                 setl    r13b
.text:0000000000006EA4                 cmp     eax, 0FFFFF894h
.text:0000000000006EA9                 setnl   al
.text:0000000000006EAC                 test    r8d, r8d
.text:0000000000006EAF                 jnz     loc_770E
.text:0000000000006EB5
.text:0000000000006EB5 loc_6EB5:                               ; CODE XREF: __strftime_internal+1888↓j
.text:0000000000006EB5                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000006EB9                 cmp     esi, 2Bh ; '+'
.text:0000000000006EBC                 jz      loc_75A7
.text:0000000000006EC2                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000006EC6                 xor     r9d, r9d
.text:0000000000006EC9                 mov     esi, 4
.text:0000000000006ECE                 jmp     loc_6ACC
.text:0000000000006ED3 ; ---------------------------------------------------------------------------
.text:0000000000006ED3
.text:0000000000006ED3 loc_6ED3:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006ED3                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006ED3                 movzx   edi, byte ptr [rsp+4E8h+var_4B4] ; jumptable 0000000000006043 case 90
.text:0000000000006ED8                 test    r14b, r14b
.text:0000000000006EDB                 mov     eax, 0
.text:0000000000006EE0                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000006EE5                 cmovnz  edi, eax
.text:0000000000006EE8                 mov     byte ptr [rsp+4E8h+var_4B4], dil
.text:0000000000006EED                 mov     rdi, [rsp+4E8h+var_4C0] ; s
.text:0000000000006EF2                 call    _strlen
.text:0000000000006EF7                 movsxd  r10, dword ptr [rsp+4E8h+ptr]
.text:0000000000006EFC                 mov     r13, rax
.text:0000000000006EFF                 mov     eax, 0
.text:0000000000006F04                 mov     rdx, r15
.text:0000000000006F07                 not     rdx
.text:0000000000006F0A                 test    r10d, r10d
.text:0000000000006F0D                 cmovns  rax, r10
.text:0000000000006F11                 cmp     r13, rax
.text:0000000000006F14                 mov     rbp, rax
.text:0000000000006F17                 cmovnb  rbp, r13
.text:0000000000006F1B                 cmp     rdx, rbp
.text:0000000000006F1E                 jbe     loc_5F3F
.text:0000000000006F24                 test    r12, r12
.text:0000000000006F27                 jz      short loc_6F9F
.text:0000000000006F29                 cmp     r13, rax
.text:0000000000006F2C                 jnb     short loc_6F7B
.text:0000000000006F2E                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000006F32                 mov     rax, r10
.text:0000000000006F35                 sub     rax, r13
.text:0000000000006F38                 mov     [rsp+4E8h+ptr], rax
.text:0000000000006F3D                 cmp     edi, 30h ; '0'
.text:0000000000006F40                 jz      loc_79C3
.text:0000000000006F46                 cmp     edi, 2Bh ; '+'
.text:0000000000006F49                 jz      loc_79C3
.text:0000000000006F4F                 xor     edx, edx
.text:0000000000006F51                 test    rax, rax
.text:0000000000006F54                 jz      short loc_6F7B
.text:0000000000006F56                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000006F5B                 mov     rbx, rdx
.text:0000000000006F5E
.text:0000000000006F5E loc_6F5E:                               ; CODE XREF: __strftime_internal+10F4↓j
.text:0000000000006F5E                 mov     rsi, r12        ; stream
.text:0000000000006F61                 mov     edi, 20h ; ' '  ; c
.text:0000000000006F66                 add     rbx, 1
.text:0000000000006F6A                 call    _fputc
.text:0000000000006F6F                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000006F74                 jnz     short loc_6F5E
.text:0000000000006F76
.text:0000000000006F76 loc_6F76:                               ; CODE XREF: __strftime_internal+1B71↓j
.text:0000000000006F76                 mov     rbx, [rsp+4E8h+var_4E0]
.text:0000000000006F7B
.text:0000000000006F7B loc_6F7B:                               ; CODE XREF: __strftime_internal+10AC↑j
.text:0000000000006F7B                                         ; __strftime_internal+10D4↑j ...
.text:0000000000006F7B                 test    r14b, r14b
.text:0000000000006F7E                 jnz     loc_7903
.text:0000000000006F84                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000006F89                 jz      loc_78E9
.text:0000000000006F8F                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000006F94                 mov     rdx, r13
.text:0000000000006F97                 mov     rdi, r12        ; stream
.text:0000000000006F9A                 call    fwrite_uppcase
.text:0000000000006F9F
.text:0000000000006F9F loc_6F9F:                               ; CODE XREF: __strftime_internal+10A7↑j
.text:0000000000006F9F                                         ; __strftime_internal+1A7E↓j ...
.text:0000000000006F9F                 add     r15, rbp
.text:0000000000006FA2                 mov     rbp, rbx
.text:0000000000006FA5                 jmp     loc_5F90
.text:0000000000006FAA ; ---------------------------------------------------------------------------
.text:0000000000006FAA
.text:0000000000006FAA loc_6FAA:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006FAA                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006FAA                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 121
.text:0000000000006FAE                 jz      loc_7423
.text:0000000000006FB4                 mov     rax, [rsp+4E8h+tp]
.text:0000000000006FB8                 mov     edx, 51EB851Fh
.text:0000000000006FBD                 mov     esi, [rax+14h]
.text:0000000000006FC0                 mov     eax, esi
.text:0000000000006FC2                 imul    edx
.text:0000000000006FC4                 mov     eax, esi
.text:0000000000006FC6                 sar     eax, 1Fh
.text:0000000000006FC9                 mov     ecx, edx
.text:0000000000006FCB                 sar     ecx, 5
.text:0000000000006FCE                 sub     ecx, eax
.text:0000000000006FD0                 mov     eax, esi
.text:0000000000006FD2                 imul    ecx, 64h ; 'd'
.text:0000000000006FD5                 sub     eax, ecx
.text:0000000000006FD7                 mov     ecx, eax
.text:0000000000006FD9                 jns     loc_6AA5
.text:0000000000006FDF                 neg     eax
.text:0000000000006FE1                 add     ecx, 64h ; 'd'
.text:0000000000006FE4                 cmp     esi, 0FFFFF893h
.text:0000000000006FEA                 cmovle  ecx, eax
.text:0000000000006FED                 jmp     loc_6AA5
.text:0000000000006FF2 ; ---------------------------------------------------------------------------
.text:0000000000006FF2
.text:0000000000006FF2 loc_6FF2:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000006FF2                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000006FF2                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 100
.text:0000000000006FF6                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006FFC                 mov     rax, [rsp+4E8h+tp]
.text:0000000000007000                 mov     esi, 2
.text:0000000000007005                 mov     ecx, [rax+0Ch]
.text:0000000000007008                 jmp     loc_6450
.text:000000000000700D ; ---------------------------------------------------------------------------
.text:000000000000700D
.text:000000000000700D loc_700D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000700D                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000700D                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 101
.text:0000000000007011                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007017                 mov     rax, [rsp+4E8h+tp]
.text:000000000000701B                 mov     ecx, [rax+0Ch]
.text:000000000000701E
.text:000000000000701E loc_701E:                               ; CODE XREF: __strftime_internal+1200↓j
.text:000000000000701E                                         ; __strftime_internal+1210↓j
.text:000000000000701E                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000007023                 mov     esi, 2
.text:0000000000007028                 test    r8d, r8d
.text:000000000000702B                 jnz     loc_6450
.text:0000000000007031                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000007039                 jmp     loc_6450
.text:000000000000703E ; ---------------------------------------------------------------------------
.text:000000000000703E
.text:000000000000703E loc_703E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000703E                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000703E                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 106
.text:0000000000007042                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007048                 mov     rax, [rsp+4E8h+tp]
.text:000000000000704C                 mov     esi, 3
.text:0000000000007051                 mov     eax, [rax+1Ch]
.text:0000000000007054                 cmp     eax, 0FFFFFFFFh
.text:0000000000007057                 lea     ecx, [rax+1]
.text:000000000000705A                 setl    r13b
.text:000000000000705E                 cmp     eax, 0FFFFFFFFh
.text:0000000000007061                 setnl   al
.text:0000000000007064                 xor     r8d, r8d
.text:0000000000007067                 xor     r9d, r9d
.text:000000000000706A                 jmp     loc_6465
.text:000000000000706F ; ---------------------------------------------------------------------------
.text:000000000000706F
.text:000000000000706F loc_706F:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000706F                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000706F                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 107
.text:0000000000007073                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007079                 mov     rax, [rsp+4E8h+tp]
.text:000000000000707D                 mov     ecx, [rax+8]
.text:0000000000007080                 jmp     short loc_701E
.text:0000000000007082 ; ---------------------------------------------------------------------------
.text:0000000000007082
.text:0000000000007082 loc_7082:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000007082                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000007082                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 108
.text:0000000000007086                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000708C                 mov     ecx, [rsp+4E8h+var_4B8]
.text:0000000000007090                 jmp     short loc_701E
.text:0000000000007092 ; ---------------------------------------------------------------------------
.text:0000000000007092
.text:0000000000007092 loc_7092:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000007092                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000007092                 cmp     r11d, 45h ; 'E' ; jumptable 0000000000006043 case 109
.text:0000000000007096                 jz      def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000709C                 mov     rax, [rsp+4E8h+tp]
.text:00000000000070A0                 mov     esi, 2
.text:00000000000070A5                 mov     eax, [rax+10h]
.text:00000000000070A8                 cmp     eax, 0FFFFFFFFh
.text:00000000000070AB                 lea     ecx, [rax+1]
.text:00000000000070AE                 setl    r13b
.text:00000000000070B2                 cmp     eax, 0FFFFFFFFh
.text:00000000000070B5                 setnl   al
.text:00000000000070B8                 xor     r8d, r8d
.text:00000000000070BB                 xor     r9d, r9d
.text:00000000000070BE                 jmp     loc_6465
.text:00000000000070C3 ; ---------------------------------------------------------------------------
.text:00000000000070C3
.text:00000000000070C3 loc_70C3:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000070C3                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:00000000000070C3                 test    r10d, r10d      ; jumptable 0000000000006043 case 110
.text:00000000000070C6                 mov     r13d, 0
.text:00000000000070CC                 mov     eax, 1
.text:00000000000070D1                 cmovns  r13d, r10d
.text:00000000000070D5                 movsxd  r13, r13d
.text:00000000000070D8                 test    r13, r13
.text:00000000000070DB                 cmovz   r13, rax
.text:00000000000070DF                 mov     rax, r15
.text:00000000000070E2                 not     rax
.text:00000000000070E5                 cmp     rax, r13
.text:00000000000070E8                 jbe     loc_5F3F
.text:00000000000070EE                 test    r12, r12
.text:00000000000070F1                 jz      loc_655F
.text:00000000000070F7                 cmp     r10d, 1
.text:00000000000070FB                 jle     short loc_7132
.text:00000000000070FD                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000007101                 movsxd  r10, r10d
.text:0000000000007104                 lea     r14, [r10-1]
.text:0000000000007108                 cmp     eax, 30h ; '0'
.text:000000000000710B                 jz      loc_78CC
.text:0000000000007111                 xor     ebp, ebp
.text:0000000000007113                 cmp     eax, 2Bh ; '+'
.text:0000000000007116                 jz      loc_78CC
.text:000000000000711C
.text:000000000000711C loc_711C:                               ; CODE XREF: __strftime_internal+12B0↓j
.text:000000000000711C                 mov     rsi, r12        ; stream
.text:000000000000711F                 mov     edi, 20h ; ' '  ; c
.text:0000000000007124                 add     rbp, 1
.text:0000000000007128                 call    _fputc
.text:000000000000712D                 cmp     r14, rbp
.text:0000000000007130                 jnz     short loc_711C
.text:0000000000007132
.text:0000000000007132 loc_7132:                               ; CODE XREF: __strftime_internal+127B↑j
.text:0000000000007132                                         ; __strftime_internal+1A64↓j
.text:0000000000007132                 mov     rsi, r12        ; stream
.text:0000000000007135                 mov     edi, 0Ah        ; c
.text:000000000000713A                 call    _fputc
.text:000000000000713F                 jmp     loc_655F
.text:0000000000007144 ; ---------------------------------------------------------------------------
.text:0000000000007144
.text:0000000000007144 loc_7144:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000007144                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000007144                 xor     eax, eax        ; jumptable 0000000000006043 case 112
.text:0000000000007146                 jmp     loc_64C6
.text:000000000000714B ; ---------------------------------------------------------------------------
.text:000000000000714B
.text:000000000000714B loc_714B:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000714B                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:000000000000714B                 movzx   eax, byte ptr [rsp+4E8h+var_4B4] ; jumptable 0000000000006043 cases 98,104
.text:0000000000007150                 test    r14b, r14b
.text:0000000000007153                 cmovnz  eax, r14d
.text:0000000000007157                 cmp     r11d, 45h ; 'E'
.text:000000000000715B                 jz      loc_7918
.text:0000000000007161                 mov     r13d, edi
.text:0000000000007164                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000007168                 xor     r14d, r14d
.text:000000000000716B                 jmp     loc_622D
.text:0000000000007170 ; ---------------------------------------------------------------------------
.text:0000000000007170
.text:0000000000007170 loc_7170:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000007170                                         ; DATA XREF: .rodata:jpt_6043↓o
.text:0000000000007170                 xor     r14d, r14d      ; jumptable 0000000000006043 case 122
.text:0000000000007173                 jmp     loc_6D52
.text:0000000000007173 ; ---------------------------------------------------------------------------
.text:0000000000007178                 align 20h
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: __strftime_internal+5E9↑j
.text:0000000000007180                                         ; __strftime_internal+5F1↑j
.text:0000000000007180                 mov     eax, ecx
.text:0000000000007182                 neg     eax
.text:0000000000007184                 test    r13b, r13b
.text:0000000000007187                 cmovnz  ecx, eax
.text:000000000000718A                 jmp     loc_6768
.text:000000000000718A ; ---------------------------------------------------------------------------
.text:000000000000718F                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: __strftime_internal+7D3↑j
.text:0000000000007190                                         ; __strftime_internal+952↑j
.text:0000000000007190                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000007195                 mov     ebp, 2Dh ; '-'
.text:000000000000719A                 jnz     loc_67F1
.text:00000000000071A0                 mov     byte ptr [rsp+4E8h+size], 2Dh ; '-'
.text:00000000000071A5
.text:00000000000071A5 loc_71A5:                               ; CODE XREF: __strftime_internal+1722↓j
.text:00000000000071A5                 test    r10d, r10d
.text:00000000000071A8                 mov     ecx, 0
.text:00000000000071AD                 mov     eax, 1
.text:00000000000071B2                 cmovns  ecx, r10d
.text:00000000000071B6                 movsxd  r13, ecx
.text:00000000000071B9                 test    r13, r13
.text:00000000000071BC                 cmovnz  rax, r13
.text:00000000000071C0                 mov     rdi, rax
.text:00000000000071C3                 mov     [rsp+4E8h+var_4E0], rax
.text:00000000000071C8                 mov     rax, r15
.text:00000000000071CB                 not     rax
.text:00000000000071CE                 cmp     rax, rdi
.text:00000000000071D1                 jbe     loc_5F3F
.text:00000000000071D7                 test    r12, r12
.text:00000000000071DA                 jz      short loc_7239
.text:00000000000071DC                 mov     edi, [rsp+4E8h+var_490]
.text:00000000000071E0                 test    edi, edi
.text:00000000000071E2                 jnz     short loc_7222
.text:00000000000071E4                 cmp     r13, 1
.text:00000000000071E8                 jbe     short loc_7222
.text:00000000000071EA                 movsxd  rax, r10d
.text:00000000000071ED                 sub     rax, 1
.text:00000000000071F1                 jz      short loc_7222
.text:00000000000071F3                 mov     [rsp+4E8h+var_4A0], rbx
.text:00000000000071F8                 xor     ebp, ebp
.text:00000000000071FA                 mov     rbx, rax
.text:00000000000071FD                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000007202
.text:0000000000007202 loc_7202:                               ; CODE XREF: __strftime_internal+1396↓j
.text:0000000000007202                 mov     rsi, r12        ; stream
.text:0000000000007205                 mov     edi, 20h ; ' '  ; c
.text:000000000000720A                 add     rbp, 1
.text:000000000000720E                 call    _fputc
.text:0000000000007213                 cmp     rbx, rbp
.text:0000000000007216                 jnz     short loc_7202
.text:0000000000007218                 mov     rbx, [rsp+4E8h+var_4A0]
.text:000000000000721D                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000007222
.text:0000000000007222 loc_7222:                               ; CODE XREF: __strftime_internal+1362↑j
.text:0000000000007222                                         ; __strftime_internal+1368↑j ...
.text:0000000000007222                 movsx   edi, byte ptr [rsp+4E8h+size] ; c
.text:0000000000007227                 mov     rsi, r12        ; stream
.text:000000000000722A                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:000000000000722F                 call    _fputc
.text:0000000000007234                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:0000000000007239
.text:0000000000007239 loc_7239:                               ; CODE XREF: __strftime_internal+135A↑j
.text:0000000000007239                 add     r15, [rsp+4E8h+var_4E0]
.text:000000000000723E                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000007243                 mov     rbp, rbx
.text:0000000000007246                 mov     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:000000000000724E                 add     rax, 17h
.text:0000000000007252                 sub     rax, r14
.text:0000000000007255                 mov     rdx, r15
.text:0000000000007258                 mov     [rsp+4E8h+size], rax
.text:000000000000725D                 not     rdx
.text:0000000000007260                 jmp     loc_669C
.text:0000000000007260 ; ---------------------------------------------------------------------------
.text:0000000000007265                 align 8
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: __strftime_internal+2B8↑j
.text:0000000000007268                 mov     rdi, [rsp+4E8h+ptr] ; ptr
.text:000000000000726D                 mov     rcx, r12        ; s
.text:0000000000007270                 mov     edx, 1          ; n
.text:0000000000007275                 mov     rsi, r13        ; size
.text:0000000000007278                 call    _fwrite
.text:000000000000727D                 jmp     loc_614E
.text:000000000000727D ; ---------------------------------------------------------------------------
.text:0000000000007282                 align 8
.text:0000000000007288
.text:0000000000007288 loc_7288:                               ; CODE XREF: __strftime_internal+4A9↑j
.text:0000000000007288                 mov     rdi, [rsp+4E8h+ptr]
.text:000000000000728D                 mov     rcx, r12        ; s
.text:0000000000007290                 mov     edx, 1          ; n
.text:0000000000007295                 mov     rsi, r13        ; size
.text:0000000000007298                 add     rdi, 1          ; ptr
.text:000000000000729C                 call    _fwrite
.text:00000000000072A1                 jmp     loc_6343
.text:00000000000072A1 ; ---------------------------------------------------------------------------
.text:00000000000072A6                 align 10h
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: __strftime_internal+49E↑j
.text:00000000000072B0                 mov     rsi, [rsp+4E8h+ptr]
.text:00000000000072B5                 mov     rdx, r13
.text:00000000000072B8                 mov     rdi, r12        ; stream
.text:00000000000072BB                 add     rsi, 1
.text:00000000000072BF                 call    fwrite_lowcase
.text:00000000000072C4                 jmp     loc_6343
.text:00000000000072C4 ; ---------------------------------------------------------------------------
.text:00000000000072C9                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: __strftime_internal+898↑j
.text:00000000000072D0                 mov     rsi, [rsp+4E8h+size] ; size
.text:00000000000072D5                 mov     rcx, r12        ; s
.text:00000000000072D8                 mov     edx, 1          ; n
.text:00000000000072DD                 mov     rdi, r14        ; ptr
.text:00000000000072E0                 call    _fwrite
.text:00000000000072E5                 jmp     loc_672E
.text:00000000000072E5 ; ---------------------------------------------------------------------------
.text:00000000000072EA                 align 10h
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: __strftime_internal+462↑j
.text:00000000000072F0                                         ; __strftime_internal+46B↑j
.text:00000000000072F0                 test    rbx, rbx
.text:00000000000072F3                 jz      loc_631B
.text:00000000000072F9                 xor     edx, edx
.text:00000000000072FB                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000007300                 mov     rbp, rdx
.text:0000000000007303                 nop     dword ptr [rax+rax+00h]
.text:0000000000007308
.text:0000000000007308 loc_7308:                               ; CODE XREF: __strftime_internal+149C↓j
.text:0000000000007308                 mov     rsi, r12        ; stream
.text:000000000000730B                 mov     edi, 30h ; '0'  ; c
.text:0000000000007310                 add     rbp, 1
.text:0000000000007314                 call    _fputc
.text:0000000000007319                 cmp     rbx, rbp
.text:000000000000731C                 jnz     short loc_7308
.text:000000000000731E                 jmp     loc_6316
.text:0000000000007323 ; ---------------------------------------------------------------------------
.text:0000000000007323
.text:0000000000007323 loc_7323:                               ; CODE XREF: __strftime_internal+274↑j
.text:0000000000007323                                         ; __strftime_internal+27D↑j
.text:0000000000007323                 test    rbx, rbx
.text:0000000000007326                 jz      loc_6133
.text:000000000000732C                 xor     edx, edx
.text:000000000000732E                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000007333                 mov     rbp, rdx
.text:0000000000007336                 db      2Eh
.text:0000000000007336                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007340
.text:0000000000007340 loc_7340:                               ; CODE XREF: __strftime_internal+14D4↓j
.text:0000000000007340                 mov     rsi, r12        ; stream
.text:0000000000007343                 mov     edi, 30h ; '0'  ; c
.text:0000000000007348                 add     rbp, 1
.text:000000000000734C                 call    _fputc
.text:0000000000007351                 cmp     rbx, rbp
.text:0000000000007354                 jnz     short loc_7340
.text:0000000000007356                 jmp     loc_612E
.text:000000000000735B ; ---------------------------------------------------------------------------
.text:000000000000735B
.text:000000000000735B loc_735B:                               ; CODE XREF: __strftime_internal+6D9↑j
.text:000000000000735B                 cmp     rax, rdx
.text:000000000000735E                 jnb     short loc_73B7
.text:0000000000007360                 movsxd  rdx, r10d
.text:0000000000007363                 mov     rdi, rdx
.text:0000000000007366                 sub     rdi, rax
.text:0000000000007369                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000736D                 cmp     eax, 30h ; '0'
.text:0000000000007370                 jz      loc_775A
.text:0000000000007376                 cmp     eax, 2Bh ; '+'
.text:0000000000007379                 jz      loc_775A
.text:000000000000737F                 xor     edx, edx
.text:0000000000007381                 test    rdi, rdi
.text:0000000000007384                 jz      short loc_73B7
.text:0000000000007386                 mov     [rsp+4E8h+var_4B4], ebp
.text:000000000000738A                 mov     [rsp+4E8h+size], rbx
.text:000000000000738F                 mov     rbp, rdi
.text:0000000000007392                 mov     rbx, rdx
.text:0000000000007395                 nop     dword ptr [rax]
.text:0000000000007398
.text:0000000000007398 loc_7398:                               ; CODE XREF: __strftime_internal+152C↓j
.text:0000000000007398                 mov     rsi, r12        ; stream
.text:000000000000739B                 mov     edi, 20h ; ' '  ; c
.text:00000000000073A0                 add     rbx, 1
.text:00000000000073A4                 call    _fputc
.text:00000000000073A9                 cmp     rbp, rbx
.text:00000000000073AC                 jnz     short loc_7398
.text:00000000000073AE
.text:00000000000073AE loc_73AE:                               ; CODE XREF: __strftime_internal+190E↓j
.text:00000000000073AE                 mov     ebp, [rsp+4E8h+var_4B4]
.text:00000000000073B2                 mov     rbx, [rsp+4E8h+size]
.text:00000000000073B7
.text:00000000000073B7 loc_73B7:                               ; CODE XREF: __strftime_internal+14DE↑j
.text:00000000000073B7                                         ; __strftime_internal+1504↑j ...
.text:00000000000073B7                 sub     rsp, 8
.text:00000000000073BB                 mov     r9d, r14d
.text:00000000000073BE                 mov     ecx, ebp
.text:00000000000073C0                 mov     eax, [rsp+4F0h+arg_10]
.text:00000000000073C7                 mov     rdi, r12        ; stream
.text:00000000000073CA                 push    rax             ; int
.text:00000000000073CB                 push    [rsp+4F8h+var_4D8] ; __int64
.text:00000000000073CF                 push    [rsp+500h+var_4D0] ; __int64
.text:00000000000073D3                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:00000000000073D8                 mov     rdx, [rsp+508h+tp]
.text:00000000000073DD                 mov     rsi, [rsp+508h+ptr]
.text:00000000000073E2                 call    __strftime_internal
.text:00000000000073E7                 add     rsp, 20h
.text:00000000000073EB                 jmp     loc_655F
.text:00000000000073F0 ; ---------------------------------------------------------------------------
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: __strftime_internal+853↑j
.text:00000000000073F0                                         ; __strftime_internal+85C↑j
.text:00000000000073F0                 test    r13, r13
.text:00000000000073F3                 jz      loc_6713
.text:00000000000073F9                 xor     edx, edx
.text:00000000000073FB                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000007400                 mov     rbx, rdx
.text:0000000000007403                 nop     dword ptr [rax+rax+00h]
.text:0000000000007408
.text:0000000000007408 loc_7408:                               ; CODE XREF: __strftime_internal+159C↓j
.text:0000000000007408                 mov     rsi, r12        ; stream
.text:000000000000740B                 mov     edi, 30h ; '0'  ; c
.text:0000000000007410                 add     rbx, 1
.text:0000000000007414                 call    _fputc
.text:0000000000007419                 cmp     r13, rbx
.text:000000000000741C                 jnz     short loc_7408
.text:000000000000741E                 jmp     loc_670E
.text:0000000000007423 ; ---------------------------------------------------------------------------
.text:0000000000007423
.text:0000000000007423 loc_7423:                               ; CODE XREF: __strftime_internal+CFB↑j
.text:0000000000007423                                         ; __strftime_internal+FF9↑j ...
.text:0000000000007423                 xor     esi, esi
.text:0000000000007425                 jmp     loc_647A
.text:000000000000742A ; ---------------------------------------------------------------------------
.text:000000000000742A
.text:000000000000742A loc_742A:                               ; CODE XREF: __strftime_internal+649↑j
.text:000000000000742A                 mov     r13d, 70h ; 'p'
.text:0000000000007430                 mov     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000007435                 jmp     loc_622D
.text:000000000000743A ; ---------------------------------------------------------------------------
.text:000000000000743A
.text:000000000000743A loc_743A:                               ; CODE XREF: __strftime_internal+1943↓j
.text:000000000000743A                 xor     ebp, ebp
.text:000000000000743C
.text:000000000000743C loc_743C:                               ; CODE XREF: __strftime_internal+9A4↑j
.text:000000000000743C                 movsxd  rax, r13d
.text:000000000000743F                 cmp     rax, rdx
.text:0000000000007442                 mov     [rsp+4E8h+var_4E0], rax
.text:0000000000007447                 jnb     loc_5F3F
.text:000000000000744D                 test    r12, r12
.text:0000000000007450                 jz      short loc_7495
.text:0000000000007452                 xor     edx, edx
.text:0000000000007454                 mov     byte ptr [rsp+4E8h+size], bpl
.text:0000000000007459                 mov     [rsp+4E8h+var_4A0], rbx
.text:000000000000745E                 mov     rbp, rdx
.text:0000000000007461                 mov     rbx, rax
.text:0000000000007464                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000007469                 nop     dword ptr [rax+00000000h]
.text:0000000000007470
.text:0000000000007470 loc_7470:                               ; CODE XREF: __strftime_internal+1604↓j
.text:0000000000007470                 mov     rsi, r12        ; stream
.text:0000000000007473                 mov     edi, 20h ; ' '  ; c
.text:0000000000007478                 add     rbp, 1
.text:000000000000747C                 call    _fputc
.text:0000000000007481                 cmp     rbx, rbp
.text:0000000000007484                 ja      short loc_7470
.text:0000000000007486                 movzx   ebp, byte ptr [rsp+4E8h+size]
.text:000000000000748B                 mov     rbx, [rsp+4E8h+var_4A0]
.text:0000000000007490                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000007495
.text:0000000000007495 loc_7495:                               ; CODE XREF: __strftime_internal+15D0↑j
.text:0000000000007495                 add     r15, [rsp+4E8h+var_4E0]
.text:000000000000749A                 mov     eax, r10d
.text:000000000000749D                 sub     eax, r13d
.text:00000000000074A0                 cmp     r10d, r13d
.text:00000000000074A3                 mov     r10d, 0
.text:00000000000074A9                 cmovg   r10d, eax
.text:00000000000074AD                 test    bpl, bpl
.text:00000000000074B0                 mov     rdx, r15
.text:00000000000074B3                 not     rdx
.text:00000000000074B6                 jnz     loc_75E3
.text:00000000000074BC                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000074C1                 movsxd  r13, r10d
.text:00000000000074C4                 mov     rbp, rbx
.text:00000000000074C7                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:00000000000074CF                 add     rax, 17h
.text:00000000000074D3                 sub     rax, r14
.text:00000000000074D6                 mov     [rsp+4E8h+size], rax
.text:00000000000074DB                 jmp     loc_669C
.text:00000000000074E0 ; ---------------------------------------------------------------------------
.text:00000000000074E0
.text:00000000000074E0 loc_74E0:                               ; CODE XREF: __strftime_internal+999↑j
.text:00000000000074E0                 test    r10d, r10d
.text:00000000000074E3                 mov     ecx, 0
.text:00000000000074E8                 mov     eax, 1
.text:00000000000074ED                 cmovns  ecx, r10d
.text:00000000000074F1                 movsxd  r13, ecx
.text:00000000000074F4                 test    r13, r13
.text:00000000000074F7                 cmovnz  rax, r13
.text:00000000000074FB                 cmp     rax, rdx
.text:00000000000074FE                 mov     [rsp+4E8h+var_4A0], rax
.text:0000000000007503                 jnb     loc_5F3F
.text:0000000000007509                 test    r12, r12
.text:000000000000750C                 jz      short loc_758A
.text:000000000000750E                 mov     ecx, [rsp+4E8h+var_490]
.text:0000000000007512                 test    ecx, ecx
.text:0000000000007514                 jnz     short loc_7574
.text:0000000000007516                 cmp     r13, 1
.text:000000000000751A                 jbe     short loc_7574
.text:000000000000751C                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000007520                 movsxd  rax, r10d
.text:0000000000007523                 sub     rax, 1
.text:0000000000007527                 mov     [rsp+4E8h+ptr], rax
.text:000000000000752C                 cmp     edi, 30h ; '0'
.text:000000000000752F                 jz      loc_79F6
.text:0000000000007535                 cmp     edi, 2Bh ; '+'
.text:0000000000007538                 jz      loc_79F6
.text:000000000000753E                 xor     edx, edx
.text:0000000000007540                 test    rax, rax
.text:0000000000007543                 jz      short loc_7574
.text:0000000000007545                 mov     [rsp+4E8h+var_498], rbx
.text:000000000000754A                 mov     [rsp+4E8h+var_48C], r10d
.text:000000000000754F                 mov     rbx, rdx
.text:0000000000007552
.text:0000000000007552 loc_7552:                               ; CODE XREF: __strftime_internal+16E8↓j
.text:0000000000007552                 mov     rsi, r12        ; stream
.text:0000000000007555                 mov     edi, 20h ; ' '  ; c
.text:000000000000755A                 add     rbx, 1
.text:000000000000755E                 call    _fputc
.text:0000000000007563                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000007568                 jnz     short loc_7552
.text:000000000000756A
.text:000000000000756A loc_756A:                               ; CODE XREF: __strftime_internal+1BA9↓j
.text:000000000000756A                 mov     rbx, [rsp+4E8h+var_498]
.text:000000000000756F                 mov     r10d, [rsp+4E8h+var_48C]
.text:0000000000007574
.text:0000000000007574 loc_7574:                               ; CODE XREF: __strftime_internal+1694↑j
.text:0000000000007574                                         ; __strftime_internal+169A↑j ...
.text:0000000000007574                 movsx   edi, bpl        ; c
.text:0000000000007578                 mov     rsi, r12        ; stream
.text:000000000000757B                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000007580                 call    _fputc
.text:0000000000007585                 mov     r10d, dword ptr [rsp+4E8h+ptr]
.text:000000000000758A
.text:000000000000758A loc_758A:                               ; CODE XREF: __strftime_internal+168C↑j
.text:000000000000758A                 add     r15, [rsp+4E8h+var_4A0]
.text:000000000000758F                 mov     rbp, rbx
.text:0000000000007592                 mov     rdx, r15
.text:0000000000007595                 not     rdx
.text:0000000000007598                 jmp     loc_669C
.text:000000000000759D ; ---------------------------------------------------------------------------
.text:000000000000759D
.text:000000000000759D loc_759D:                               ; CODE XREF: __strftime_internal+96B↑j
.text:000000000000759D                 mov     byte ptr [rsp+4E8h+size], 2Bh ; '+'
.text:00000000000075A2                 jmp     loc_71A5
.text:00000000000075A7 ; ---------------------------------------------------------------------------
.text:00000000000075A7
.text:00000000000075A7 loc_75A7:                               ; CODE XREF: __strftime_internal+103C↑j
.text:00000000000075A7                                         ; __strftime_internal+1893↓j
.text:00000000000075A7                 mov     esi, 4
.text:00000000000075AC                 mov     edx, 270Fh
.text:00000000000075B1
.text:00000000000075B1 loc_75B1:                               ; CODE XREF: __strftime_internal+1BE7↓j
.text:00000000000075B1                 cmp     edx, ecx
.text:00000000000075B3                 mov     r9d, 1
.text:00000000000075B9                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:00000000000075C1                 jb      loc_6ACC
.text:00000000000075C7
.text:00000000000075C7 loc_75C7:                               ; CODE XREF: __strftime_internal+1BD8↓j
.text:00000000000075C7                 cmp     r10d, esi
.text:00000000000075CA                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:00000000000075D2                 setnle  r9b
.text:00000000000075D6                 jmp     loc_6ACC
.text:00000000000075DB ; ---------------------------------------------------------------------------
.text:00000000000075DB
.text:00000000000075DB loc_75DB:                               ; CODE XREF: __strftime_internal+EDB↑j
.text:00000000000075DB                 mov     rbp, rbx
.text:00000000000075DE                 jmp     loc_5F90
.text:00000000000075E3 ; ---------------------------------------------------------------------------
.text:00000000000075E3
.text:00000000000075E3 loc_75E3:                               ; CODE XREF: __strftime_internal+1636↑j
.text:00000000000075E3                 movsxd  rcx, r10d
.text:00000000000075E6                 mov     r13d, 1
.text:00000000000075EC                 test    rcx, rcx
.text:00000000000075EF                 cmovnz  r13, rcx
.text:00000000000075F3                 cmp     r13, rdx
.text:00000000000075F6                 mov     [rsp+4E8h+var_4E0], r13
.text:00000000000075FB                 jnb     loc_5F3F
.text:0000000000007601                 test    r12, r12
.text:0000000000007604                 jz      short loc_7675
.text:0000000000007606                 mov     esi, [rsp+4E8h+var_490]
.text:000000000000760A                 test    esi, esi
.text:000000000000760C                 jnz     short loc_7655
.text:000000000000760E                 cmp     r10d, 1
.text:0000000000007612                 jbe     short loc_7655
.text:0000000000007614                 lea     rax, [rcx-1]
.text:0000000000007618                 xor     r13d, r13d
.text:000000000000761B                 mov     [rsp+4E8h+var_4A0], rbx
.text:0000000000007620                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000007625                 mov     rbx, r13
.text:0000000000007628                 mov     r13, rcx
.text:000000000000762B                 mov     [rsp+4E8h+size], rax
.text:0000000000007630
.text:0000000000007630 loc_7630:                               ; CODE XREF: __strftime_internal+17C6↓j
.text:0000000000007630                 mov     rsi, r12        ; stream
.text:0000000000007633                 mov     edi, 20h ; ' '  ; c
.text:0000000000007638                 add     rbx, 1
.text:000000000000763C                 call    _fputc
.text:0000000000007641                 cmp     [rsp+4E8h+size], rbx
.text:0000000000007646                 jnz     short loc_7630
.text:0000000000007648                 mov     rbx, [rsp+4E8h+var_4A0]
.text:000000000000764D                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000007652                 mov     rcx, r13
.text:0000000000007655
.text:0000000000007655 loc_7655:                               ; CODE XREF: __strftime_internal+178C↑j
.text:0000000000007655                                         ; __strftime_internal+1792↑j
.text:0000000000007655                 movsx   edi, bpl        ; c
.text:0000000000007659                 mov     rsi, r12        ; stream
.text:000000000000765C                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:0000000000007661                 mov     [rsp+4E8h+size], rcx
.text:0000000000007666                 call    _fputc
.text:000000000000766B                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:0000000000007670                 mov     rcx, [rsp+4E8h+size]
.text:0000000000007675
.text:0000000000007675 loc_7675:                               ; CODE XREF: __strftime_internal+1784↑j
.text:0000000000007675                 add     r15, [rsp+4E8h+var_4E0]
.text:000000000000767A                 mov     rax, [rsp+4E8h+ptr]
.text:000000000000767F                 mov     r13, rcx
.text:0000000000007682                 mov     rbp, rbx
.text:0000000000007685                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:000000000000768D                 add     rax, 17h
.text:0000000000007691                 sub     rax, r14
.text:0000000000007694                 mov     rdx, r15
.text:0000000000007697                 mov     [rsp+4E8h+size], rax
.text:000000000000769C                 not     rdx
.text:000000000000769F                 jmp     loc_669C
.text:00000000000076A4 ; ---------------------------------------------------------------------------
.text:00000000000076A4
.text:00000000000076A4 loc_76A4:                               ; CODE XREF: __strftime_internal+C1F↑j
.text:00000000000076A4                 mov     eax, 0FFFFF894h
.text:00000000000076A9                 sub     eax, r8d
.text:00000000000076AC                 cmp     esi, eax
.text:00000000000076AE                 jge     loc_7A7D
.text:00000000000076B4                 neg     ecx
.text:00000000000076B6                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:00000000000076BB                 jnz     loc_6AB1
.text:00000000000076C1
.text:00000000000076C1 loc_76C1:                               ; CODE XREF: __strftime_internal+C2B↑j
.text:00000000000076C1                                         ; __strftime_internal+1C05↓j
.text:00000000000076C1                 mov     eax, [rsp+4E8h+var_4C4]
.text:00000000000076C5                 cmp     eax, 2Bh ; '+'
.text:00000000000076C8                 jz      loc_7A4B
.text:00000000000076CE                 mov     dword ptr [rsp+4E8h+var_4E0], eax
.text:00000000000076D2                 xor     r9d, r9d
.text:00000000000076D5                 mov     eax, 1
.text:00000000000076DA                 xor     r13d, r13d
.text:00000000000076DD                 mov     esi, 2
.text:00000000000076E2                 jmp     loc_6ACC
.text:00000000000076E7 ; ---------------------------------------------------------------------------
.text:00000000000076E7
.text:00000000000076E7 loc_76E7:                               ; CODE XREF: __strftime_internal+BD3↑j
.text:00000000000076E7                 mov     eax, 0FFFFF894h
.text:00000000000076EC                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000076F1                 lea     ecx, [rsi+r8+76Ch]
.text:00000000000076F9                 sub     eax, r8d
.text:00000000000076FC                 cmp     esi, eax
.text:00000000000076FE                 setl    r13b
.text:0000000000007702                 setnl   al
.text:0000000000007705                 test    r9d, r9d
.text:0000000000007708                 jz      loc_6EB5
.text:000000000000770E
.text:000000000000770E loc_770E:                               ; CODE XREF: __strftime_internal+102F↑j
.text:000000000000770E                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000007713                 jz      loc_75A7
.text:0000000000007719                 xor     r9d, r9d
.text:000000000000771C                 mov     esi, 4
.text:0000000000007721                 jmp     loc_6ACC
.text:0000000000007721 ; ---------------------------------------------------------------------------
.text:0000000000007726                 align 10h
.text:0000000000007730
.text:0000000000007730 loc_7730:                               ; CODE XREF: __strftime_internal+C98↑j
.text:0000000000007730                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000007737                 mov     esi, 9
.text:000000000000773C                 mov     r10d, 9
.text:0000000000007742                 jmp     loc_6450
.text:0000000000007747 ; ---------------------------------------------------------------------------
.text:0000000000007747
.text:0000000000007747 loc_7747:                               ; CODE XREF: __strftime_internal+E55↑j
.text:0000000000007747                 mov     rbp, rbx
.text:000000000000774A                 mov     [rsp+4E8h+ptr], rbx
.text:000000000000774F                 mov     r13d, 1
.text:0000000000007755                 jmp     loc_60D4
.text:000000000000775A ; ---------------------------------------------------------------------------
.text:000000000000775A
.text:000000000000775A loc_775A:                               ; CODE XREF: __strftime_internal+14F0↑j
.text:000000000000775A                                         ; __strftime_internal+14F9↑j
.text:000000000000775A                 test    rdi, rdi
.text:000000000000775D                 jz      loc_73B7
.text:0000000000007763                 xor     edx, edx
.text:0000000000007765                 mov     [rsp+4E8h+var_4B4], ebp
.text:0000000000007769                 mov     [rsp+4E8h+size], rbx
.text:000000000000776E                 mov     rbp, rdi
.text:0000000000007771                 mov     rbx, rdx
.text:0000000000007774                 nop     dword ptr [rax+00h]
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: __strftime_internal+190C↓j
.text:0000000000007778                 mov     rsi, r12        ; stream
.text:000000000000777B                 mov     edi, 30h ; '0'  ; c
.text:0000000000007780                 add     rbx, 1
.text:0000000000007784                 call    _fputc
.text:0000000000007789                 cmp     rbp, rbx
.text:000000000000778C                 jnz     short loc_7778
.text:000000000000778E                 jmp     loc_73AE
.text:0000000000007793 ; ---------------------------------------------------------------------------
.text:0000000000007793
.text:0000000000007793 loc_7793:                               ; CODE XREF: __strftime_internal+F6B↑j
.text:0000000000007793                                         ; __strftime_internal+F7D↑j
.text:0000000000007793                 imul    r8d, 64h ; 'd'
.text:0000000000007797                 mov     r9d, 1
.text:000000000000779D                 mov     esi, 9
.text:00000000000077A2                 imul    eax, ebp, 2710h
.text:00000000000077A8                 add     eax, r8d
.text:00000000000077AB                 mov     r8d, 14h
.text:00000000000077B1                 add     ecx, eax
.text:00000000000077B3                 mov     eax, r13d
.text:00000000000077B6                 xor     eax, 1
.text:00000000000077B9                 jmp     loc_6465
.text:00000000000077BE ; ---------------------------------------------------------------------------
.text:00000000000077BE
.text:00000000000077BE loc_77BE:                               ; CODE XREF: __strftime_internal+804↑j
.text:00000000000077BE                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:00000000000077C3                 jz      loc_743A
.text:00000000000077C9                 movsxd  rax, [rsp+4E8h+var_490]
.text:00000000000077CE                 cmp     rax, rdx
.text:00000000000077D1                 jb      loc_68D1
.text:00000000000077D7                 jmp     loc_5F3F
.text:00000000000077D7 ; ---------------------------------------------------------------------------
.text:00000000000077DC                 align 20h
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: __strftime_internal+B34↑j
.text:00000000000077E0                 sub     r9d, 1
.text:00000000000077E4                 mov     edx, 16Dh
.text:00000000000077E9                 test    r9b, 3
.text:00000000000077ED                 jnz     short loc_7829
.text:00000000000077EF                 mov     eax, r9d
.text:00000000000077F2                 mov     edx, 51EB851Fh
.text:00000000000077F7                 imul    edx
.text:00000000000077F9                 mov     eax, r9d
.text:00000000000077FC                 sar     eax, 1Fh
.text:00000000000077FF                 sar     edx, 5
.text:0000000000007802                 sub     edx, eax
.text:0000000000007804                 imul    eax, edx, 64h ; 'd'
.text:0000000000007807                 mov     edx, 16Eh
.text:000000000000780C                 cmp     r9d, eax
.text:000000000000780F                 jnz     short loc_7829
.text:0000000000007811                 mov     eax, r9d
.text:0000000000007814                 mov     ecx, 190h
.text:0000000000007819                 cdq
.text:000000000000781A                 idiv    ecx
.text:000000000000781C                 cmp     edx, 1
.text:000000000000781F                 sbb     edx, edx
.text:0000000000007821                 not     edx
.text:0000000000007823                 add     edx, 16Eh
.text:0000000000007829
.text:0000000000007829 loc_7829:                               ; CODE XREF: __strftime_internal+196D↑j
.text:0000000000007829                                         ; __strftime_internal+198F↑j
.text:0000000000007829                 add     r8d, edx
.text:000000000000782C                 mov     edx, 92492493h
.text:0000000000007831                 mov     ecx, r8d
.text:0000000000007834                 sub     ecx, r14d
.text:0000000000007837                 add     ecx, 17Eh
.text:000000000000783D                 mov     eax, ecx
.text:000000000000783F                 sub     r8d, ecx
.text:0000000000007842                 imul    edx
.text:0000000000007844                 lea     eax, [rdx+rcx]
.text:0000000000007847                 mov     edx, ecx
.text:0000000000007849                 sar     edx, 1Fh
.text:000000000000784C                 sar     eax, 2
.text:000000000000784F                 sub     eax, edx
.text:0000000000007851                 lea     edx, ds:0[rax*8]
.text:0000000000007858                 sub     edx, eax
.text:000000000000785A                 lea     ecx, [r8+rdx+3]
.text:000000000000785F                 mov     r8d, 0FFFFFFFFh
.text:0000000000007865                 jmp     loc_6A4F
.text:000000000000786A ; ---------------------------------------------------------------------------
.text:000000000000786A
.text:000000000000786A loc_786A:                               ; CODE XREF: __strftime_internal+BDD↑j
.text:000000000000786A                 mov     eax, ecx
.text:000000000000786C                 mov     edx, 92492493h
.text:0000000000007871                 mov     esi, 2
.text:0000000000007876                 imul    edx
.text:0000000000007878                 lea     eax, [rdx+rcx]
.text:000000000000787B                 sar     ecx, 1Fh
.text:000000000000787E                 sar     eax, 2
.text:0000000000007881                 sub     eax, ecx
.text:0000000000007883                 mov     ecx, eax
.text:0000000000007885                 add     ecx, 1
.text:0000000000007888                 jmp     loc_6450
.text:000000000000788D ; ---------------------------------------------------------------------------
.text:000000000000788D
.text:000000000000788D loc_788D:                               ; CODE XREF: __strftime_internal+F5B↑j
.text:000000000000788D                                         ; __strftime_internal+F85↑j
.text:000000000000788D                 imul    ecx, ebp, 64h ; 'd'
.text:0000000000007890                 mov     eax, r13d
.text:0000000000007893                 mov     r9d, 1
.text:0000000000007899                 xor     eax, 1
.text:000000000000789C                 mov     esi, 6
.text:00000000000078A1                 add     ecx, r8d
.text:00000000000078A4                 mov     r8d, 4
.text:00000000000078AA                 jmp     loc_6465
.text:00000000000078AF ; ---------------------------------------------------------------------------
.text:00000000000078AF
.text:00000000000078AF loc_78AF:                               ; CODE XREF: __strftime_internal+558↑j
.text:00000000000078AF                                         ; __strftime_internal+563↑j
.text:00000000000078AF                 xor     ebp, ebp
.text:00000000000078B1
.text:00000000000078B1 loc_78B1:                               ; CODE XREF: __strftime_internal+1A45↓j
.text:00000000000078B1                 mov     rsi, r12        ; stream
.text:00000000000078B4                 mov     edi, 30h ; '0'  ; c
.text:00000000000078B9                 add     rbp, 1
.text:00000000000078BD                 call    _fputc
.text:00000000000078C2                 cmp     r14, rbp
.text:00000000000078C5                 jnz     short loc_78B1
.text:00000000000078C7                 jmp     loc_63FF
.text:00000000000078CC ; ---------------------------------------------------------------------------
.text:00000000000078CC
.text:00000000000078CC loc_78CC:                               ; CODE XREF: __strftime_internal+128B↑j
.text:00000000000078CC                                         ; __strftime_internal+1296↑j
.text:00000000000078CC                 xor     ebp, ebp
.text:00000000000078CE
.text:00000000000078CE loc_78CE:                               ; CODE XREF: __strftime_internal+1A62↓j
.text:00000000000078CE                 mov     rsi, r12        ; stream
.text:00000000000078D1                 mov     edi, 30h ; '0'  ; c
.text:00000000000078D6                 add     rbp, 1
.text:00000000000078DA                 call    _fputc
.text:00000000000078DF                 cmp     r14, rbp
.text:00000000000078E2                 jnz     short loc_78CE
.text:00000000000078E4                 jmp     loc_7132
.text:00000000000078E9 ; ---------------------------------------------------------------------------
.text:00000000000078E9
.text:00000000000078E9 loc_78E9:                               ; CODE XREF: __strftime_internal+1109↑j
.text:00000000000078E9                 mov     rdi, [rsp+4E8h+var_4C0] ; ptr
.text:00000000000078EE                 mov     rcx, r12        ; s
.text:00000000000078F1                 mov     edx, 1          ; n
.text:00000000000078F6                 mov     rsi, r13        ; size
.text:00000000000078F9                 call    _fwrite
.text:00000000000078FE                 jmp     loc_6F9F
.text:0000000000007903 ; ---------------------------------------------------------------------------
.text:0000000000007903
.text:0000000000007903 loc_7903:                               ; CODE XREF: __strftime_internal+10FE↑j
.text:0000000000007903                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000007908                 mov     rdx, r13
.text:000000000000790B                 mov     rdi, r12        ; stream
.text:000000000000790E                 call    fwrite_lowcase
.text:0000000000007913                 jmp     loc_6F9F
.text:0000000000007918 ; ---------------------------------------------------------------------------
.text:0000000000007918
.text:0000000000007918 loc_7918:                               ; CODE XREF: __strftime_internal+12DB↑j
.text:0000000000007918                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:000000000000791C                 jmp     def_6043        ; jumptable 0000000000006043 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007921 ; ---------------------------------------------------------------------------
.text:0000000000007921
.text:0000000000007921 loc_7921:                               ; CODE XREF: __strftime_internal+EBB↑j
.text:0000000000007921                 lea     rcx, [rbx+2]
.text:0000000000007925                 mov     r14d, 1
.text:000000000000792B
.text:000000000000792B loc_792B:                               ; CODE XREF: __strftime_internal+1AC2↓j
.text:000000000000792B                 mov     rdx, rcx
.text:000000000000792E                 add     rcx, 1
.text:0000000000007932                 movzx   eax, byte ptr [rcx-1]
.text:0000000000007936                 add     r14, 1
.text:000000000000793A                 cmp     al, 3Ah ; ':'
.text:000000000000793C                 jnz     loc_6D47
.text:0000000000007942                 jmp     short loc_792B
.text:0000000000007944 ; ---------------------------------------------------------------------------
.text:0000000000007944
.text:0000000000007944 loc_7944:                               ; CODE XREF: __strftime_internal+F75↑j
.text:0000000000007944                 movzx   ecx, byte ptr [rbx]
.text:0000000000007947                 mov     [rsp+4E8h+ptr], rbx
.text:000000000000794C                 jmp     loc_6C5A
.text:0000000000007951 ; ---------------------------------------------------------------------------
.text:0000000000007951
.text:0000000000007951 loc_7951:                               ; CODE XREF: __strftime_internal+F61↑j
.text:0000000000007951                 imul    ecx, ebp, 64h ; 'd'
.text:0000000000007954                 xor     r8d, r8d
.text:0000000000007957                 mov     r9d, 1
.text:000000000000795D                 mov     esi, 5
.text:0000000000007962                 add     ecx, eax
.text:0000000000007964                 mov     eax, r13d
.text:0000000000007967                 xor     eax, 1
.text:000000000000796A                 jmp     loc_6465
.text:000000000000796F ; ---------------------------------------------------------------------------
.text:000000000000796F
.text:000000000000796F loc_796F:                               ; CODE XREF: __strftime_internal+D9F↑j
.text:000000000000796F                                         ; __strftime_internal+DA8↑j
.text:000000000000796F                 mov     r14d, r10d
.text:0000000000007972                 mov     eax, 0
.text:0000000000007977                 sub     r14d, 6
.text:000000000000797B                 cmovs   r14d, eax
.text:000000000000797F                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000007986                 mov     [rsp+4E8h+ptr], rax
.text:000000000000798B                 jmp     loc_64EF
.text:0000000000007990 ; ---------------------------------------------------------------------------
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: __strftime_internal+A05↑j
.text:0000000000007990                                         ; __strftime_internal+A0E↑j
.text:0000000000007990                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000007996                 jz      loc_68C0
.text:000000000000799C                 xor     edx, edx
.text:000000000000799E                 mov     [rsp+4E8h+var_498], rbx
.text:00000000000079A3                 mov     rbx, rdx
.text:00000000000079A6
.text:00000000000079A6 loc_79A6:                               ; CODE XREF: __strftime_internal+1B3C↓j
.text:00000000000079A6                 mov     rsi, r12        ; stream
.text:00000000000079A9                 mov     edi, 30h ; '0'  ; c
.text:00000000000079AE                 add     rbx, 1
.text:00000000000079B2                 call    _fputc
.text:00000000000079B7                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000079BC                 jnz     short loc_79A6
.text:00000000000079BE                 jmp     loc_68BB
.text:00000000000079C3 ; ---------------------------------------------------------------------------
.text:00000000000079C3
.text:00000000000079C3 loc_79C3:                               ; CODE XREF: __strftime_internal+10C0↑j
.text:00000000000079C3                                         ; __strftime_internal+10C9↑j
.text:00000000000079C3                 cmp     [rsp+4E8h+ptr], 0
.text:00000000000079C9                 jz      loc_6F7B
.text:00000000000079CF                 xor     edx, edx
.text:00000000000079D1                 mov     [rsp+4E8h+var_4E0], rbx
.text:00000000000079D6                 mov     rbx, rdx
.text:00000000000079D9
.text:00000000000079D9 loc_79D9:                               ; CODE XREF: __strftime_internal+1B6F↓j
.text:00000000000079D9                 mov     rsi, r12        ; stream
.text:00000000000079DC                 mov     edi, 30h ; '0'  ; c
.text:00000000000079E1                 add     rbx, 1
.text:00000000000079E5                 call    _fputc
.text:00000000000079EA                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000079EF                 jnz     short loc_79D9
.text:00000000000079F1                 jmp     loc_6F76
.text:00000000000079F6 ; ---------------------------------------------------------------------------
.text:00000000000079F6
.text:00000000000079F6 loc_79F6:                               ; CODE XREF: __strftime_internal+16AF↑j
.text:00000000000079F6                                         ; __strftime_internal+16B8↑j
.text:00000000000079F6                 cmp     [rsp+4E8h+ptr], 0
.text:00000000000079FC                 jz      loc_7574
.text:0000000000007A02                 xor     edx, edx
.text:0000000000007A04                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000007A09                 mov     [rsp+4E8h+var_48C], r10d
.text:0000000000007A0E                 mov     rbx, rdx
.text:0000000000007A11
.text:0000000000007A11 loc_7A11:                               ; CODE XREF: __strftime_internal+1BA7↓j
.text:0000000000007A11                 mov     rsi, r12        ; stream
.text:0000000000007A14                 mov     edi, 30h ; '0'  ; c
.text:0000000000007A19                 add     rbx, 1
.text:0000000000007A1D                 call    _fputc
.text:0000000000007A22                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000007A27                 jnz     short loc_7A11
.text:0000000000007A29                 jmp     loc_756A
.text:0000000000007A2E ; ---------------------------------------------------------------------------
.text:0000000000007A2E
.text:0000000000007A2E loc_7A2E:                               ; CODE XREF: __strftime_internal+E85↑j
.text:0000000000007A2E                                         ; __strftime_internal+E90↑j
.text:0000000000007A2E                 xor     ebp, ebp
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: __strftime_internal+1BC4↓j
.text:0000000000007A30                 mov     rsi, r12        ; stream
.text:0000000000007A33                 mov     edi, 30h ; '0'  ; c
.text:0000000000007A38                 add     rbp, 1
.text:0000000000007A3C                 call    _fputc
.text:0000000000007A41                 cmp     r13, rbp
.text:0000000000007A44                 jnz     short loc_7A30
.text:0000000000007A46                 jmp     loc_5F7F
.text:0000000000007A4B ; ---------------------------------------------------------------------------
.text:0000000000007A4B
.text:0000000000007A4B loc_7A4B:                               ; CODE XREF: __strftime_internal+1848↑j
.text:0000000000007A4B                 mov     eax, 1
.text:0000000000007A50                 xor     r13d, r13d
.text:0000000000007A53                 mov     esi, 2
.text:0000000000007A58                 jmp     loc_75C7
.text:0000000000007A5D ; ---------------------------------------------------------------------------
.text:0000000000007A5D
.text:0000000000007A5D loc_7A5D:                               ; CODE XREF: __strftime_internal+C3E↑j
.text:0000000000007A5D                                         ; __strftime_internal+D5B↑j
.text:0000000000007A5D                 mov     esi, 2
.text:0000000000007A62                 mov     edx, 63h ; 'c'
.text:0000000000007A67                 jmp     loc_75B1
.text:0000000000007A6C ; ---------------------------------------------------------------------------
.text:0000000000007A6C
.text:0000000000007A6C loc_7A6C:                               ; CODE XREF: __strftime_internal+CA2↑j
.text:0000000000007A6C                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000007A73                 jmp     loc_6B57
.text:0000000000007A78 ; ---------------------------------------------------------------------------
.text:0000000000007A78
.text:0000000000007A78 loc_7A78:                               ; CODE XREF: __strftime_internal+D6↑j
.text:0000000000007A78                 call    ___stack_chk_fail
.text:0000000000007A7D ; ---------------------------------------------------------------------------
.text:0000000000007A7D
.text:0000000000007A7D loc_7A7D:                               ; CODE XREF: __strftime_internal+182E↑j
.text:0000000000007A7D                 add     ecx, 64h ; 'd'
.text:0000000000007A80                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000007A85                 jz      loc_76C1
.text:0000000000007A8B                 jmp     loc_6AB1
.text:0000000000007A90 ; ---------------------------------------------------------------------------
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: __strftime_internal+3BD↑j
.text:0000000000007A90                 xor     esi, esi
.text:0000000000007A92                 jmp     loc_648A
.text:0000000000007A92 ; } // starts at 5E80
.text:0000000000007A92 __strftime_internal endp
.text:0000000000007A92
.text:0000000000007A92 ; ---------------------------------------------------------------------------
.text:0000000000007A97                 align 20h
.text:0000000000007AA0
.text:0000000000007AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AA0
.text:0000000000007AA0
.text:0000000000007AA0                 public fprintftime
.text:0000000000007AA0 fprintftime     proc near               ; CODE XREF: print_size+A1↑p
.text:0000000000007AA0
.text:0000000000007AA0 var_11          = qword ptr -11h
.text:0000000000007AA0
.text:0000000000007AA0 ; __unwind {
.text:0000000000007AA0                 sub     rsp, 20h
.text:0000000000007AA4                 mov     r9d, 0FFFFFFFFh
.text:0000000000007AAA                 mov     rax, fs:28h
.text:0000000000007AB3                 mov     [rsp+20h+var_11+1], rax
.text:0000000000007AB8                 xor     eax, eax
.text:0000000000007ABA                 mov     byte ptr [rsp+20h+var_11], 0
.text:0000000000007ABF                 push    r8              ; int
.text:0000000000007AC1                 xor     r8d, r8d
.text:0000000000007AC4                 push    rcx             ; __int64
.text:0000000000007AC5                 xor     ecx, ecx
.text:0000000000007AC7                 lea     rax, [rsp+30h+var_11]
.text:0000000000007ACC                 push    rax             ; __int64
.text:0000000000007ACD                 call    __strftime_internal
.text:0000000000007AD2                 add     rsp, 20h
.text:0000000000007AD6                 mov     rdx, [rsp+18h+var_11+1]
.text:0000000000007ADB                 xor     rdx, fs:28h
.text:0000000000007AE4                 jnz     short loc_7AEB
.text:0000000000007AE6                 add     rsp, 18h
.text:0000000000007AEA                 retn
.text:0000000000007AEB ; ---------------------------------------------------------------------------
.text:0000000000007AEB
.text:0000000000007AEB loc_7AEB:                               ; CODE XREF: fprintftime+44↑j
.text:0000000000007AEB                 call    ___stack_chk_fail
.text:0000000000007AEB ; } // starts at 7AA0
.text:0000000000007AEB fprintftime     endp
.text:0000000000007AEB
.text:0000000000007AF0
.text:0000000000007AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AF0
.text:0000000000007AF0
.text:0000000000007AF0 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000007AF0                                         ; freopen_safer+A1↓p ...
.text:0000000000007AF0 ; __unwind {
.text:0000000000007AF0                 push    rbp
.text:0000000000007AF1                 push    rbx
.text:0000000000007AF2                 mov     ebp, edi
.text:0000000000007AF4                 lea     rdi, aDevNull   ; "/dev/null"
.text:0000000000007AFB                 xor     esi, esi        ; oflag
.text:0000000000007AFD                 xor     eax, eax
.text:0000000000007AFF                 sub     rsp, 8
.text:0000000000007B03                 mov     ebx, 1
.text:0000000000007B08                 call    _open
.text:0000000000007B0D                 cmp     ebp, eax
.text:0000000000007B0F                 jz      short loc_7B29
.text:0000000000007B11                 xor     ebx, ebx
.text:0000000000007B13                 test    eax, eax
.text:0000000000007B15                 js      short loc_7B29
.text:0000000000007B17                 mov     edi, eax        ; fd
.text:0000000000007B19                 call    _close
.text:0000000000007B1E                 call    ___errno_location
.text:0000000000007B23                 mov     dword ptr [rax], 9
.text:0000000000007B29
.text:0000000000007B29 loc_7B29:                               ; CODE XREF: protect_fd+1F↑j
.text:0000000000007B29                                         ; protect_fd+25↑j
.text:0000000000007B29                 add     rsp, 8
.text:0000000000007B2D                 mov     eax, ebx
.text:0000000000007B2F                 pop     rbx
.text:0000000000007B30                 pop     rbp
.text:0000000000007B31                 retn
.text:0000000000007B31 ; } // starts at 7AF0
.text:0000000000007B31 protect_fd      endp
.text:0000000000007B31
.text:0000000000007B31 ; ---------------------------------------------------------------------------
.text:0000000000007B32                 align 20h
.text:0000000000007B40
.text:0000000000007B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B40
.text:0000000000007B40
.text:0000000000007B40                 public freopen_safer
.text:0000000000007B40 freopen_safer   proc near               ; CODE XREF: main+E7E↑p
.text:0000000000007B40
.text:0000000000007B40 filename        = qword ptr -40h
.text:0000000000007B40
.text:0000000000007B40 ; __unwind {
.text:0000000000007B40                 push    r15
.text:0000000000007B42                 push    r14
.text:0000000000007B44                 mov     r15, rsi
.text:0000000000007B47                 push    r13
.text:0000000000007B49                 push    r12
.text:0000000000007B4B                 mov     r12, rdx
.text:0000000000007B4E                 push    rbp
.text:0000000000007B4F                 push    rbx
.text:0000000000007B50                 sub     rsp, 18h
.text:0000000000007B54                 mov     [rsp+48h+filename], rdi
.text:0000000000007B59                 mov     rdi, rdx        ; stream
.text:0000000000007B5C                 call    _fileno
.text:0000000000007B61                 mov     ebx, eax
.text:0000000000007B63                 call    ___errno_location
.text:0000000000007B68                 cmp     ebx, 1
.text:0000000000007B6B                 mov     r14, rax
.text:0000000000007B6E                 jz      loc_7CD0
.text:0000000000007B74                 cmp     ebx, 2
.text:0000000000007B77                 jz      loc_7CC0
.text:0000000000007B7D                 test    ebx, ebx
.text:0000000000007B7F                 jz      loc_7C38
.text:0000000000007B85                 mov     esi, 2          ; fd2
.text:0000000000007B8A                 mov     edi, 2          ; fd
.text:0000000000007B8F                 call    _dup2
.text:0000000000007B94                 cmp     eax, 2
.text:0000000000007B97                 setnz   bl
.text:0000000000007B9A
.text:0000000000007B9A loc_7B9A:                               ; CODE XREF: freopen_safer+182↓j
.text:0000000000007B9A                 mov     esi, 1          ; fd2
.text:0000000000007B9F                 mov     edi, 1          ; fd
.text:0000000000007BA4                 call    _dup2
.text:0000000000007BA9                 cmp     eax, 1
.text:0000000000007BAC                 setnz   bpl
.text:0000000000007BB0
.text:0000000000007BB0 loc_7BB0:                               ; CODE XREF: freopen_safer+194↓j
.text:0000000000007BB0                 xor     esi, esi        ; fd2
.text:0000000000007BB2                 xor     edi, edi        ; fd
.text:0000000000007BB4                 call    _dup2
.text:0000000000007BB9                 test    eax, eax
.text:0000000000007BBB                 jz      loc_7C48
.text:0000000000007BC1                 xor     edi, edi
.text:0000000000007BC3                 call    protect_fd
.text:0000000000007BC8                 test    al, al
.text:0000000000007BCA                 mov     r13d, eax
.text:0000000000007BCD                 jz      loc_7CE0
.text:0000000000007BD3                 test    bpl, bpl
.text:0000000000007BD6                 jnz     short loc_7C50
.text:0000000000007BD8
.text:0000000000007BD8 loc_7BD8:                               ; CODE XREF: freopen_safer+10E↓j
.text:0000000000007BD8                                         ; freopen_safer+11E↓j
.text:0000000000007BD8                 test    bl, bl
.text:0000000000007BDA                 jz      short loc_7BF0
.text:0000000000007BDC                 mov     edi, 2
.text:0000000000007BE1                 call    protect_fd
.text:0000000000007BE6                 test    al, al
.text:0000000000007BE8                 mov     ebx, eax
.text:0000000000007BEA                 jz      loc_7CA0
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000007BF0                                         ; freopen_safer+FF↓j
.text:0000000000007BF0                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000007BF5                 mov     rdx, r12        ; stream
.text:0000000000007BF8                 mov     rsi, r15        ; modes
.text:0000000000007BFB                 call    _freopen
.text:0000000000007C00                 mov     r12, rax
.text:0000000000007C03
.text:0000000000007C03 loc_7C03:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000007C03                 test    bl, bl
.text:0000000000007C05                 mov     r15d, [r14]
.text:0000000000007C08                 jnz     loc_7CB0
.text:0000000000007C0E
.text:0000000000007C0E loc_7C0E:                               ; CODE XREF: freopen_safer+17A↓j
.text:0000000000007C0E                 test    bpl, bpl
.text:0000000000007C11                 jnz     short loc_7C80
.text:0000000000007C13                 test    r13b, r13b
.text:0000000000007C16                 jnz     short loc_7C8F
.text:0000000000007C18
.text:0000000000007C18 loc_7C18:                               ; CODE XREF: freopen_safer+14D↓j
.text:0000000000007C18                                         ; freopen_safer+156↓j
.text:0000000000007C18                 test    r12, r12
.text:0000000000007C1B                 jnz     short loc_7C20
.text:0000000000007C1D                 mov     [r14], r15d
.text:0000000000007C20
.text:0000000000007C20 loc_7C20:                               ; CODE XREF: freopen_safer+DB↑j
.text:0000000000007C20                 add     rsp, 18h
.text:0000000000007C24                 mov     rax, r12
.text:0000000000007C27                 pop     rbx
.text:0000000000007C28                 pop     rbp
.text:0000000000007C29                 pop     r12
.text:0000000000007C2B                 pop     r13
.text:0000000000007C2D                 pop     r14
.text:0000000000007C2F                 pop     r15
.text:0000000000007C31                 retn
.text:0000000000007C31 ; ---------------------------------------------------------------------------
.text:0000000000007C32                 align 8
.text:0000000000007C38
.text:0000000000007C38 loc_7C38:                               ; CODE XREF: freopen_safer+3F↑j
.text:0000000000007C38                 xor     ebx, ebx
.text:0000000000007C3A                 xor     ebp, ebp
.text:0000000000007C3C                 xor     r13d, r13d
.text:0000000000007C3F                 jmp     short loc_7BF0
.text:0000000000007C3F ; ---------------------------------------------------------------------------
.text:0000000000007C41                 align 8
.text:0000000000007C48
.text:0000000000007C48 loc_7C48:                               ; CODE XREF: freopen_safer+7B↑j
.text:0000000000007C48                 xor     r13d, r13d
.text:0000000000007C4B                 test    bpl, bpl
.text:0000000000007C4E                 jz      short loc_7BD8
.text:0000000000007C50
.text:0000000000007C50 loc_7C50:                               ; CODE XREF: freopen_safer+96↑j
.text:0000000000007C50                 mov     edi, 1
.text:0000000000007C55                 call    protect_fd
.text:0000000000007C5A                 test    al, al
.text:0000000000007C5C                 mov     ebp, eax
.text:0000000000007C5E                 jnz     loc_7BD8
.text:0000000000007C64                 xor     r12d, r12d
.text:0000000000007C67                 test    bl, bl
.text:0000000000007C69                 mov     r15d, [r14]
.text:0000000000007C6C                 jz      short loc_7C80
.text:0000000000007C6E                 mov     edi, 2          ; fd
.text:0000000000007C73                 call    _close
.text:0000000000007C78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007C80
.text:0000000000007C80 loc_7C80:                               ; CODE XREF: freopen_safer+D1↑j
.text:0000000000007C80                                         ; freopen_safer+12C↑j
.text:0000000000007C80                 mov     edi, 1          ; fd
.text:0000000000007C85                 call    _close
.text:0000000000007C8A                 test    r13b, r13b
.text:0000000000007C8D                 jz      short loc_7C18
.text:0000000000007C8F
.text:0000000000007C8F loc_7C8F:                               ; CODE XREF: freopen_safer+D6↑j
.text:0000000000007C8F                 xor     edi, edi        ; fd
.text:0000000000007C91                 call    _close
.text:0000000000007C96                 jmp     short loc_7C18
.text:0000000000007C96 ; ---------------------------------------------------------------------------
.text:0000000000007C98                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: freopen_safer+AA↑j
.text:0000000000007CA0                 mov     r15d, [r14]
.text:0000000000007CA3                 xor     r12d, r12d
.text:0000000000007CA6                 db      2Eh
.text:0000000000007CA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: freopen_safer+C8↑j
.text:0000000000007CB0                 mov     edi, 2          ; fd
.text:0000000000007CB5                 call    _close
.text:0000000000007CBA                 jmp     loc_7C0E
.text:0000000000007CBA ; ---------------------------------------------------------------------------
.text:0000000000007CBF                 align 20h
.text:0000000000007CC0
.text:0000000000007CC0 loc_7CC0:                               ; CODE XREF: freopen_safer+37↑j
.text:0000000000007CC0                 xor     ebx, ebx
.text:0000000000007CC2                 jmp     loc_7B9A
.text:0000000000007CC2 ; ---------------------------------------------------------------------------
.text:0000000000007CC7                 align 10h
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: freopen_safer+2E↑j
.text:0000000000007CD0                 xor     ebx, ebx
.text:0000000000007CD2                 xor     ebp, ebp
.text:0000000000007CD4                 jmp     loc_7BB0
.text:0000000000007CD4 ; ---------------------------------------------------------------------------
.text:0000000000007CD9                 align 20h
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000007CE0                 mov     r13d, 1
.text:0000000000007CE6                 xor     r12d, r12d
.text:0000000000007CE9                 jmp     loc_7C03
.text:0000000000007CE9 ; } // starts at 7B40
.text:0000000000007CE9 freopen_safer   endp
.text:0000000000007CE9
.text:0000000000007CE9 ; ---------------------------------------------------------------------------
.text:0000000000007CEE                 align 10h
.text:0000000000007CF0
.text:0000000000007CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CF0
.text:0000000000007CF0 ; Attributes: info_from_lumina
.text:0000000000007CF0
.text:0000000000007CF0 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000007CF0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000007CF0                                         ; hash_rehash+7B↓p
.text:0000000000007CF0 ; __unwind {
.text:0000000000007CF0                 cmp     rdi, 0Ah
.text:0000000000007CF4                 mov     eax, 0Ah
.text:0000000000007CF9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000007D03                 cmovb   rdi, rax
.text:0000000000007D07                 or      rdi, 1
.text:0000000000007D0B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D0F                 jz      short loc_7D7F
.text:0000000000007D11                 nop     dword ptr [rax+00000000h]
.text:0000000000007D18
.text:0000000000007D18 loc_7D18:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000007D18                 mov     rax, rdi
.text:0000000000007D1B                 mov     rcx, rdi
.text:0000000000007D1E                 mul     r9
.text:0000000000007D21                 mov     rax, rdx
.text:0000000000007D24                 shr     rax, 1
.text:0000000000007D27                 lea     rax, [rax+rax*2]
.text:0000000000007D2B                 sub     rcx, rax
.text:0000000000007D2E                 cmp     rdi, 9
.text:0000000000007D32                 mov     rax, rcx
.text:0000000000007D35                 jbe     short loc_7D70
.text:0000000000007D37                 test    rcx, rcx
.text:0000000000007D3A                 jz      short loc_7D75
.text:0000000000007D3C                 mov     r8d, 10h
.text:0000000000007D42                 mov     esi, 9
.text:0000000000007D47                 mov     ecx, 3
.text:0000000000007D4C                 jmp     short loc_7D59
.text:0000000000007D4C ; ---------------------------------------------------------------------------
.text:0000000000007D4E                 align 10h
.text:0000000000007D50
.text:0000000000007D50 loc_7D50:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000007D50                 add     r8, 8
.text:0000000000007D54                 test    rdx, rdx
.text:0000000000007D57                 jz      short loc_7D75
.text:0000000000007D59
.text:0000000000007D59 loc_7D59:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000007D59                 add     rcx, 2
.text:0000000000007D5D                 xor     edx, edx
.text:0000000000007D5F                 mov     rax, rdi
.text:0000000000007D62                 div     rcx
.text:0000000000007D65                 add     rsi, r8
.text:0000000000007D68                 cmp     rsi, rdi
.text:0000000000007D6B                 mov     rax, rdx
.text:0000000000007D6E                 jb      short loc_7D50
.text:0000000000007D70
.text:0000000000007D70 loc_7D70:                               ; CODE XREF: next_prime+45↑j
.text:0000000000007D70                 test    rax, rax
.text:0000000000007D73                 jnz     short loc_7D7F
.text:0000000000007D75
.text:0000000000007D75 loc_7D75:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000007D75                                         ; next_prime+67↑j
.text:0000000000007D75                 add     rdi, 2
.text:0000000000007D79                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D7D                 jnz     short loc_7D18
.text:0000000000007D7F
.text:0000000000007D7F loc_7D7F:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000007D7F                                         ; next_prime+83↑j
.text:0000000000007D7F                 mov     rax, rdi
.text:0000000000007D82                 retn
.text:0000000000007D82 ; } // starts at 7CF0
.text:0000000000007D82 next_prime      endp
.text:0000000000007D82
.text:0000000000007D82 ; ---------------------------------------------------------------------------
.text:0000000000007D83                 align 10h
.text:0000000000007D90
.text:0000000000007D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D90
.text:0000000000007D90
.text:0000000000007D90 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000007D90 ; __unwind {
.text:0000000000007D90                 mov     rax, rdi
.text:0000000000007D93                 xor     edx, edx
.text:0000000000007D95                 ror     rax, 3
.text:0000000000007D99                 div     rsi
.text:0000000000007D9C                 mov     rax, rdx
.text:0000000000007D9F                 retn
.text:0000000000007D9F ; } // starts at 7D90
.text:0000000000007D9F raw_hasher      endp
.text:0000000000007D9F
.text:0000000000007DA0
.text:0000000000007DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DA0
.text:0000000000007DA0
.text:0000000000007DA0 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000007DA0 ; __unwind {
.text:0000000000007DA0                 cmp     rdi, rsi
.text:0000000000007DA3                 setz    al
.text:0000000000007DA6                 retn
.text:0000000000007DA6 ; } // starts at 7DA0
.text:0000000000007DA6 raw_comparator  endp
.text:0000000000007DA6
.text:0000000000007DA6 ; ---------------------------------------------------------------------------
.text:0000000000007DA7                 align 10h
.text:0000000000007DB0
.text:0000000000007DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DB0
.text:0000000000007DB0 ; Attributes: info_from_lumina
.text:0000000000007DB0
.text:0000000000007DB0 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000007DB0 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000007DB0                                         ; transfer_entries+65↓p ...
.text:0000000000007DB0 ; __unwind {
.text:0000000000007DB0                 push    rbx
.text:0000000000007DB1                 mov     rbx, rdi
.text:0000000000007DB4                 mov     rdi, rsi
.text:0000000000007DB7                 mov     rsi, [rbx+10h]
.text:0000000000007DBB                 call    qword ptr [rbx+30h]
.text:0000000000007DBE                 cmp     [rbx+10h], rax
.text:0000000000007DC2                 jbe     short loc_7DCD
.text:0000000000007DC4                 shl     rax, 4
.text:0000000000007DC8                 add     rax, [rbx]
.text:0000000000007DCB                 pop     rbx
.text:0000000000007DCC                 retn
.text:0000000000007DCD ; ---------------------------------------------------------------------------
.text:0000000000007DCD
.text:0000000000007DCD loc_7DCD:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000007DCD                 call    _abort
.text:0000000000007DCD ; } // starts at 7DB0
.text:0000000000007DCD safe_hasher     endp
.text:0000000000007DCD
.text:0000000000007DCD ; ---------------------------------------------------------------------------
.text:0000000000007DD2                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DE0
.text:0000000000007DE0 ; Attributes: info_from_lumina
.text:0000000000007DE0
.text:0000000000007DE0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000007DE0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000007DE0                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000007DE0 ; __unwind {
.text:0000000000007DE0                 push    r14
.text:0000000000007DE2                 push    r13
.text:0000000000007DE4                 mov     r14, rdx
.text:0000000000007DE7                 push    r12
.text:0000000000007DE9                 push    rbp
.text:0000000000007DEA                 mov     r12, rdi
.text:0000000000007DED                 push    rbx
.text:0000000000007DEE                 mov     rbp, rsi
.text:0000000000007DF1                 mov     r13d, ecx
.text:0000000000007DF4                 call    safe_hasher
.text:0000000000007DF9                 mov     [r14], rax
.text:0000000000007DFC                 mov     rsi, [rax]
.text:0000000000007DFF                 test    rsi, rsi
.text:0000000000007E02                 jz      loc_7EF0
.text:0000000000007E08                 cmp     rsi, rbp
.text:0000000000007E0B                 mov     rbx, rax
.text:0000000000007E0E                 jz      loc_7EA3
.text:0000000000007E14                 mov     rdi, rbp
.text:0000000000007E17                 call    qword ptr [r12+38h]
.text:0000000000007E1C                 test    al, al
.text:0000000000007E1E                 jnz     loc_7EA0
.text:0000000000007E24                 mov     rax, [rbx+8]
.text:0000000000007E28                 test    rax, rax
.text:0000000000007E2B                 jz      loc_7EF0
.text:0000000000007E31                 mov     rsi, [rax]
.text:0000000000007E34                 cmp     rbp, rsi
.text:0000000000007E37                 jnz     short loc_7E59
.text:0000000000007E39                 jmp     short loc_7E6C
.text:0000000000007E39 ; ---------------------------------------------------------------------------
.text:0000000000007E3B                 align 20h
.text:0000000000007E40
.text:0000000000007E40 loc_7E40:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000007E40                 mov     rbx, [rbx+8]
.text:0000000000007E44                 mov     rax, [rbx+8]
.text:0000000000007E48                 test    rax, rax
.text:0000000000007E4B                 jz      loc_7EF0
.text:0000000000007E51                 mov     rsi, [rax]
.text:0000000000007E54                 cmp     rsi, rbp
.text:0000000000007E57                 jz      short loc_7E6C
.text:0000000000007E59
.text:0000000000007E59 loc_7E59:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000007E59                 mov     rdi, rbp
.text:0000000000007E5C                 call    qword ptr [r12+38h]
.text:0000000000007E61                 test    al, al
.text:0000000000007E63                 jz      short loc_7E40
.text:0000000000007E65                 mov     rax, [rbx+8]
.text:0000000000007E69                 mov     rsi, [rax]
.text:0000000000007E6C
.text:0000000000007E6C loc_7E6C:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000007E6C                                         ; hash_find_entry+77↑j
.text:0000000000007E6C                 test    r13b, r13b
.text:0000000000007E6F                 jz      short loc_7E8E
.text:0000000000007E71                 mov     rdx, [rax+8]
.text:0000000000007E75                 mov     [rbx+8], rdx
.text:0000000000007E79                 mov     qword ptr [rax], 0
.text:0000000000007E80                 mov     rdx, [r12+48h]
.text:0000000000007E85                 mov     [rax+8], rdx
.text:0000000000007E89                 mov     [r12+48h], rax
.text:0000000000007E8E
.text:0000000000007E8E loc_7E8E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000007E8E                                         ; hash_find_entry+C6↓j ...
.text:0000000000007E8E                 pop     rbx
.text:0000000000007E8F                 mov     rax, rsi
.text:0000000000007E92                 pop     rbp
.text:0000000000007E93                 pop     r12
.text:0000000000007E95                 pop     r13
.text:0000000000007E97                 pop     r14
.text:0000000000007E99                 retn
.text:0000000000007E99 ; ---------------------------------------------------------------------------
.text:0000000000007E9A                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000007EA0                 mov     rsi, [rbx]
.text:0000000000007EA3
.text:0000000000007EA3 loc_7EA3:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000007EA3                 test    r13b, r13b
.text:0000000000007EA6                 jz      short loc_7E8E
.text:0000000000007EA8                 mov     rax, [rbx+8]
.text:0000000000007EAC                 test    rax, rax
.text:0000000000007EAF                 jz      short loc_7EE0
.text:0000000000007EB1                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000007EB5                 movups  xmmword ptr [rbx], xmm0
.text:0000000000007EB8                 mov     qword ptr [rax], 0
.text:0000000000007EBF                 mov     rdx, [r12+48h]
.text:0000000000007EC4                 mov     [rax+8], rdx
.text:0000000000007EC8                 mov     [r12+48h], rax
.text:0000000000007ECD                 mov     rax, rsi
.text:0000000000007ED0                 pop     rbx
.text:0000000000007ED1                 pop     rbp
.text:0000000000007ED2                 pop     r12
.text:0000000000007ED4                 pop     r13
.text:0000000000007ED6                 pop     r14
.text:0000000000007ED8                 retn
.text:0000000000007ED8 ; ---------------------------------------------------------------------------
.text:0000000000007ED9                 align 20h
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000007EE0                 mov     qword ptr [rbx], 0
.text:0000000000007EE7                 jmp     short loc_7E8E
.text:0000000000007EE7 ; ---------------------------------------------------------------------------
.text:0000000000007EE9                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000007EF0                                         ; hash_find_entry+4B↑j ...
.text:0000000000007EF0                 xor     esi, esi
.text:0000000000007EF2                 pop     rbx
.text:0000000000007EF3                 mov     rax, rsi
.text:0000000000007EF6                 pop     rbp
.text:0000000000007EF7                 pop     r12
.text:0000000000007EF9                 pop     r13
.text:0000000000007EFB                 pop     r14
.text:0000000000007EFD                 retn
.text:0000000000007EFD ; } // starts at 7DE0
.text:0000000000007EFD hash_find_entry endp
.text:0000000000007EFD
.text:0000000000007EFD ; ---------------------------------------------------------------------------
.text:0000000000007EFE                 align 20h
.text:0000000000007F00
.text:0000000000007F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F00
.text:0000000000007F00 ; Attributes: info_from_lumina
.text:0000000000007F00
.text:0000000000007F00 ; _Bool check_tuning(Hash_table *table)
.text:0000000000007F00 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000007F00                                         ; hash_initialize+11B↓p ...
.text:0000000000007F00 ; __unwind {
.text:0000000000007F00                 mov     rdx, [rdi]
.text:0000000000007F03                 lea     rcx, default_tuning
.text:0000000000007F0A                 mov     eax, 1
.text:0000000000007F0F                 cmp     rdx, rcx
.text:0000000000007F12                 jz      short locret_7F75
.text:0000000000007F14                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000007F19                 ucomiss xmm0, cs:dword_219B4
.text:0000000000007F20                 jbe     short loc_7F70
.text:0000000000007F22                 movss   xmm1, cs:dword_219B8
.text:0000000000007F2A                 ucomiss xmm1, xmm0
.text:0000000000007F2D                 jbe     short loc_7F70
.text:0000000000007F2F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000007F34                 ucomiss xmm1, cs:dword_219BC
.text:0000000000007F3B                 jbe     short loc_7F70
.text:0000000000007F3D                 movss   xmm1, dword ptr [rdx]
.text:0000000000007F41                 ucomiss xmm1, cs:dword_219C0
.text:0000000000007F48                 jb      short loc_7F70
.text:0000000000007F4A                 addss   xmm1, cs:dword_219B4
.text:0000000000007F52                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000007F57                 ucomiss xmm2, xmm1
.text:0000000000007F5A                 jbe     short loc_7F70
.text:0000000000007F5C                 movss   xmm3, cs:dword_219C4
.text:0000000000007F64                 ucomiss xmm3, xmm2
.text:0000000000007F67                 jb      short loc_7F70
.text:0000000000007F69                 ucomiss xmm0, xmm1
.text:0000000000007F6C                 ja      short locret_7F75
.text:0000000000007F6E                 xchg    ax, ax
.text:0000000000007F70
.text:0000000000007F70 loc_7F70:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000007F70                                         ; check_tuning+2D↑j ...
.text:0000000000007F70                 mov     [rdi], rcx
.text:0000000000007F73                 xor     eax, eax
.text:0000000000007F75
.text:0000000000007F75 locret_7F75:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000007F75                                         ; check_tuning+6C↑j
.text:0000000000007F75                 rep retn
.text:0000000000007F75 ; } // starts at 7F00
.text:0000000000007F75 check_tuning    endp
.text:0000000000007F75
.text:0000000000007F75 ; ---------------------------------------------------------------------------
.text:0000000000007F77                 align 20h
.text:0000000000007F80
.text:0000000000007F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F80
.text:0000000000007F80 ; Attributes: info_from_lumina
.text:0000000000007F80
.text:0000000000007F80 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000007F80 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000007F80                                         ; hash_rehash+152↓p ...
.text:0000000000007F80 ; __unwind {
.text:0000000000007F80                 push    r15
.text:0000000000007F82                 push    r14
.text:0000000000007F84                 push    r13
.text:0000000000007F86                 push    r12
.text:0000000000007F88                 push    rbp
.text:0000000000007F89                 push    rbx
.text:0000000000007F8A                 sub     rsp, 8
.text:0000000000007F8E                 mov     r12, [rsi]
.text:0000000000007F91                 cmp     r12, [rsi+8]
.text:0000000000007F95                 jnb     loc_8078
.text:0000000000007F9B                 mov     rbp, rdi
.text:0000000000007F9E                 mov     r13, rsi
.text:0000000000007FA1                 mov     r14d, edx
.text:0000000000007FA4                 nop     dword ptr [rax+00h]
.text:0000000000007FA8
.text:0000000000007FA8 loc_7FA8:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000007FA8                 mov     r15, [r12]
.text:0000000000007FAC                 test    r15, r15
.text:0000000000007FAF                 jz      loc_806A
.text:0000000000007FB5                 mov     rbx, [r12+8]
.text:0000000000007FBA                 test    rbx, rbx
.text:0000000000007FBD                 jnz     short loc_7FDC
.text:0000000000007FBF                 jmp     short loc_801B
.text:0000000000007FBF ; ---------------------------------------------------------------------------
.text:0000000000007FC1                 align 8
.text:0000000000007FC8
.text:0000000000007FC8 loc_7FC8:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000007FC8                 mov     rcx, [rax+8]
.text:0000000000007FCC                 test    rdx, rdx
.text:0000000000007FCF                 mov     [rbx+8], rcx
.text:0000000000007FD3                 mov     [rax+8], rbx
.text:0000000000007FD7                 mov     rbx, rdx
.text:0000000000007FDA                 jz      short loc_8017
.text:0000000000007FDC
.text:0000000000007FDC loc_7FDC:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000007FDC                                         ; transfer_entries+95↓j
.text:0000000000007FDC                 mov     r15, [rbx]
.text:0000000000007FDF                 mov     rdi, rbp
.text:0000000000007FE2                 mov     rsi, r15
.text:0000000000007FE5                 call    safe_hasher
.text:0000000000007FEA                 cmp     qword ptr [rax], 0
.text:0000000000007FEE                 mov     rdx, [rbx+8]
.text:0000000000007FF2                 jnz     short loc_7FC8
.text:0000000000007FF4                 mov     [rax], r15
.text:0000000000007FF7                 add     qword ptr [rbp+18h], 1
.text:0000000000007FFC                 test    rdx, rdx
.text:0000000000007FFF                 mov     qword ptr [rbx], 0
.text:0000000000008006                 mov     rax, [rbp+48h]
.text:000000000000800A                 mov     [rbx+8], rax
.text:000000000000800E                 mov     [rbp+48h], rbx
.text:0000000000008012                 mov     rbx, rdx
.text:0000000000008015                 jnz     short loc_7FDC
.text:0000000000008017
.text:0000000000008017 loc_8017:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000008017                 mov     r15, [r12]
.text:000000000000801B
.text:000000000000801B loc_801B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000801B                 test    r14b, r14b
.text:000000000000801E                 mov     qword ptr [r12+8], 0
.text:0000000000008027                 jnz     short loc_806A
.text:0000000000008029                 mov     rsi, r15
.text:000000000000802C                 mov     rdi, rbp
.text:000000000000802F                 call    safe_hasher
.text:0000000000008034                 cmp     qword ptr [rax], 0
.text:0000000000008038                 mov     rbx, rax
.text:000000000000803B                 jz      short loc_8090
.text:000000000000803D                 mov     rax, [rbp+48h]
.text:0000000000008041                 test    rax, rax
.text:0000000000008044                 jz      short loc_80A0
.text:0000000000008046                 mov     rdx, [rax+8]
.text:000000000000804A                 mov     [rbp+48h], rdx
.text:000000000000804E
.text:000000000000804E loc_804E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000804E                 mov     rdx, [rbx+8]
.text:0000000000008052                 mov     [rax], r15
.text:0000000000008055                 mov     [rax+8], rdx
.text:0000000000008059                 mov     [rbx+8], rax
.text:000000000000805D
.text:000000000000805D loc_805D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000805D                 mov     qword ptr [r12], 0
.text:0000000000008065                 sub     qword ptr [r13+18h], 1
.text:000000000000806A
.text:000000000000806A loc_806A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000806A                                         ; transfer_entries+A7↑j
.text:000000000000806A                 add     r12, 10h
.text:000000000000806E                 cmp     [r13+8], r12
.text:0000000000008072                 ja      loc_7FA8
.text:0000000000008078
.text:0000000000008078 loc_8078:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000008078                 add     rsp, 8
.text:000000000000807C                 mov     eax, 1
.text:0000000000008081                 pop     rbx
.text:0000000000008082                 pop     rbp
.text:0000000000008083                 pop     r12
.text:0000000000008085                 pop     r13
.text:0000000000008087                 pop     r14
.text:0000000000008089                 pop     r15
.text:000000000000808B                 retn
.text:000000000000808B ; ---------------------------------------------------------------------------
.text:000000000000808C                 align 10h
.text:0000000000008090
.text:0000000000008090 loc_8090:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000008090                 mov     [rax], r15
.text:0000000000008093                 add     qword ptr [rbp+18h], 1
.text:0000000000008098                 jmp     short loc_805D
.text:0000000000008098 ; ---------------------------------------------------------------------------
.text:000000000000809A                 align 20h
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: transfer_entries+C4↑j
.text:00000000000080A0                 mov     edi, 10h        ; size
.text:00000000000080A5                 call    _malloc
.text:00000000000080AA                 test    rax, rax
.text:00000000000080AD                 jnz     short loc_804E
.text:00000000000080AF                 add     rsp, 8
.text:00000000000080B3                 xor     eax, eax
.text:00000000000080B5                 pop     rbx
.text:00000000000080B6                 pop     rbp
.text:00000000000080B7                 pop     r12
.text:00000000000080B9                 pop     r13
.text:00000000000080BB                 pop     r14
.text:00000000000080BD                 pop     r15
.text:00000000000080BF                 retn
.text:00000000000080BF ; } // starts at 7F80
.text:00000000000080BF transfer_entries endp
.text:00000000000080BF
.text:00000000000080C0
.text:00000000000080C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080C0
.text:00000000000080C0
.text:00000000000080C0                 public hash_get_n_buckets
.text:00000000000080C0 hash_get_n_buckets proc near
.text:00000000000080C0 ; __unwind {
.text:00000000000080C0                 mov     rax, [rdi+10h]
.text:00000000000080C4                 retn
.text:00000000000080C4 ; } // starts at 80C0
.text:00000000000080C4 hash_get_n_buckets endp
.text:00000000000080C4
.text:00000000000080C4 ; ---------------------------------------------------------------------------
.text:00000000000080C5                 align 10h
.text:00000000000080D0
.text:00000000000080D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080D0
.text:00000000000080D0
.text:00000000000080D0                 public hash_get_n_buckets_used
.text:00000000000080D0 hash_get_n_buckets_used proc near
.text:00000000000080D0 ; __unwind {
.text:00000000000080D0                 mov     rax, [rdi+18h]
.text:00000000000080D4                 retn
.text:00000000000080D4 ; } // starts at 80D0
.text:00000000000080D4 hash_get_n_buckets_used endp
.text:00000000000080D4
.text:00000000000080D4 ; ---------------------------------------------------------------------------
.text:00000000000080D5                 align 20h
.text:00000000000080E0
.text:00000000000080E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080E0
.text:00000000000080E0
.text:00000000000080E0                 public hash_get_n_entries
.text:00000000000080E0 hash_get_n_entries proc near
.text:00000000000080E0 ; __unwind {
.text:00000000000080E0                 mov     rax, [rdi+20h]
.text:00000000000080E4                 retn
.text:00000000000080E4 ; } // starts at 80E0
.text:00000000000080E4 hash_get_n_entries endp
.text:00000000000080E4
.text:00000000000080E4 ; ---------------------------------------------------------------------------
.text:00000000000080E5                 align 10h
.text:00000000000080F0
.text:00000000000080F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080F0
.text:00000000000080F0 ; Attributes: info_from_lumina
.text:00000000000080F0
.text:00000000000080F0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000080F0                 public hash_get_max_bucket_length
.text:00000000000080F0 hash_get_max_bucket_length proc near
.text:00000000000080F0 ; __unwind {
.text:00000000000080F0                 mov     rsi, [rdi]
.text:00000000000080F3                 mov     rdi, [rdi+8]
.text:00000000000080F7                 xor     eax, eax
.text:00000000000080F9                 cmp     rsi, rdi
.text:00000000000080FC                 jnb     short locret_8137
.text:00000000000080FE                 xchg    ax, ax
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:0000000000008100                 cmp     qword ptr [rsi], 0
.text:0000000000008104                 jz      short loc_812C
.text:0000000000008106                 mov     rdx, [rsi+8]
.text:000000000000810A                 mov     ecx, 1
.text:000000000000810F                 test    rdx, rdx
.text:0000000000008112                 jz      short loc_8125
.text:0000000000008114                 nop     dword ptr [rax+00h]
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:0000000000008118                 mov     rdx, [rdx+8]
.text:000000000000811C                 add     rcx, 1
.text:0000000000008120                 test    rdx, rdx
.text:0000000000008123                 jnz     short loc_8118
.text:0000000000008125
.text:0000000000008125 loc_8125:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000008125                 cmp     rax, rcx
.text:0000000000008128                 cmovb   rax, rcx
.text:000000000000812C
.text:000000000000812C loc_812C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000812C                 add     rsi, 10h
.text:0000000000008130                 cmp     rsi, rdi
.text:0000000000008133                 jb      short loc_8100
.text:0000000000008135                 rep retn
.text:0000000000008137 ; ---------------------------------------------------------------------------
.text:0000000000008137
.text:0000000000008137 locret_8137:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000008137                 rep retn
.text:0000000000008137 ; } // starts at 80F0
.text:0000000000008137 hash_get_max_bucket_length endp
.text:0000000000008137
.text:0000000000008137 ; ---------------------------------------------------------------------------
.text:0000000000008139                 align 20h
.text:0000000000008140
.text:0000000000008140 ; =============== S U B R O U T I N E =======================================
.text:0000000000008140
.text:0000000000008140 ; Attributes: info_from_lumina
.text:0000000000008140
.text:0000000000008140 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000008140                 public hash_table_ok
.text:0000000000008140 hash_table_ok   proc near
.text:0000000000008140 ; __unwind {
.text:0000000000008140                 mov     rcx, [rdi]
.text:0000000000008143                 mov     r8, [rdi+8]
.text:0000000000008147                 xor     edx, edx
.text:0000000000008149                 xor     esi, esi
.text:000000000000814B                 cmp     rcx, r8
.text:000000000000814E                 jnb     short loc_8186
.text:0000000000008150
.text:0000000000008150 loc_8150:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000008150                 cmp     qword ptr [rcx], 0
.text:0000000000008154                 jz      short loc_817D
.text:0000000000008156                 mov     rax, [rcx+8]
.text:000000000000815A                 add     rsi, 1
.text:000000000000815E                 add     rdx, 1
.text:0000000000008162                 test    rax, rax
.text:0000000000008165                 jz      short loc_817D
.text:0000000000008167                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000008170                 mov     rax, [rax+8]
.text:0000000000008174                 add     rdx, 1
.text:0000000000008178                 test    rax, rax
.text:000000000000817B                 jnz     short loc_8170
.text:000000000000817D
.text:000000000000817D loc_817D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000817D                                         ; hash_table_ok+25↑j
.text:000000000000817D                 add     rcx, 10h
.text:0000000000008181                 cmp     rcx, r8
.text:0000000000008184                 jb      short loc_8150
.text:0000000000008186
.text:0000000000008186 loc_8186:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000008186                 xor     eax, eax
.text:0000000000008188                 cmp     [rdi+18h], rsi
.text:000000000000818C                 jz      short loc_8190
.text:000000000000818E                 rep retn
.text:0000000000008190 ; ---------------------------------------------------------------------------
.text:0000000000008190
.text:0000000000008190 loc_8190:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000008190                 cmp     [rdi+20h], rdx
.text:0000000000008194                 setz    al
.text:0000000000008197                 retn
.text:0000000000008197 ; } // starts at 8140
.text:0000000000008197 hash_table_ok   endp
.text:0000000000008197
.text:0000000000008197 ; ---------------------------------------------------------------------------
.text:0000000000008198                 align 20h
.text:00000000000081A0
.text:00000000000081A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081A0
.text:00000000000081A0 ; Attributes: info_from_lumina
.text:00000000000081A0
.text:00000000000081A0 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:00000000000081A0                 public hash_print_statistics
.text:00000000000081A0 hash_print_statistics proc near
.text:00000000000081A0 ; __unwind {
.text:00000000000081A0                 push    r13
.text:00000000000081A2                 push    r12
.text:00000000000081A4                 mov     r12, rsi
.text:00000000000081A7                 push    rbp
.text:00000000000081A8                 push    rbx
.text:00000000000081A9                 xor     ebx, ebx
.text:00000000000081AB                 sub     rsp, 8
.text:00000000000081AF                 mov     rsi, [rdi]
.text:00000000000081B2                 mov     rcx, [rdi+20h]
.text:00000000000081B6                 mov     rbp, [rdi+10h]
.text:00000000000081BA                 mov     r13, [rdi+18h]
.text:00000000000081BE                 mov     rdi, [rdi+8]
.text:00000000000081C2                 cmp     rsi, rdi
.text:00000000000081C5                 jnb     short loc_8205
.text:00000000000081C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000081D0
.text:00000000000081D0 loc_81D0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:00000000000081D0                 cmp     qword ptr [rsi], 0
.text:00000000000081D4                 jz      short loc_81FC
.text:00000000000081D6                 mov     rax, [rsi+8]
.text:00000000000081DA                 mov     edx, 1
.text:00000000000081DF                 test    rax, rax
.text:00000000000081E2                 jz      short loc_81F5
.text:00000000000081E4                 nop     dword ptr [rax+00h]
.text:00000000000081E8
.text:00000000000081E8 loc_81E8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:00000000000081E8                 mov     rax, [rax+8]
.text:00000000000081EC                 add     rdx, 1
.text:00000000000081F0                 test    rax, rax
.text:00000000000081F3                 jnz     short loc_81E8
.text:00000000000081F5
.text:00000000000081F5 loc_81F5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000081F5                 cmp     rbx, rdx
.text:00000000000081F8                 cmovb   rbx, rdx
.text:00000000000081FC
.text:00000000000081FC loc_81FC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000081FC                 add     rsi, 10h
.text:0000000000008200                 cmp     rsi, rdi
.text:0000000000008203                 jb      short loc_81D0
.text:0000000000008205
.text:0000000000008205 loc_8205:                               ; CODE XREF: hash_print_statistics+25↑j
.text:0000000000008205                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000820C                 mov     esi, 1
.text:0000000000008211                 mov     rdi, r12
.text:0000000000008214                 xor     eax, eax
.text:0000000000008216                 call    ___fprintf_chk
.text:000000000000821B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000008222                 xor     eax, eax
.text:0000000000008224                 mov     rcx, rbp
.text:0000000000008227                 mov     esi, 1
.text:000000000000822C                 mov     rdi, r12
.text:000000000000822F                 call    ___fprintf_chk
.text:0000000000008234                 test    r13, r13
.text:0000000000008237                 js      short loc_82A0
.text:0000000000008239                 pxor    xmm0, xmm0
.text:000000000000823D                 test    rbp, rbp
.text:0000000000008240                 cvtsi2sd xmm0, r13
.text:0000000000008245                 mulsd   xmm0, cs:qword_219D8
.text:000000000000824D                 js      short loc_82C9
.text:000000000000824F
.text:000000000000824F loc_824F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000824F                 pxor    xmm1, xmm1
.text:0000000000008253                 cvtsi2sd xmm1, rbp
.text:0000000000008258
.text:0000000000008258 loc_8258:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000008258                 divsd   xmm0, xmm1
.text:000000000000825C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000008263                 mov     rcx, r13
.text:0000000000008266                 mov     rdi, r12
.text:0000000000008269                 mov     esi, 1
.text:000000000000826E                 mov     eax, 1
.text:0000000000008273                 call    ___fprintf_chk
.text:0000000000008278                 add     rsp, 8
.text:000000000000827C                 mov     rcx, rbx
.text:000000000000827F                 mov     rdi, r12
.text:0000000000008282                 pop     rbx
.text:0000000000008283                 pop     rbp
.text:0000000000008284                 pop     r12
.text:0000000000008286                 pop     r13
.text:0000000000008288                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000828F                 mov     esi, 1
.text:0000000000008294                 xor     eax, eax
.text:0000000000008296                 jmp     ___fprintf_chk
.text:0000000000008296 ; ---------------------------------------------------------------------------
.text:000000000000829B                 align 20h
.text:00000000000082A0
.text:00000000000082A0 loc_82A0:                               ; CODE XREF: hash_print_statistics+97↑j
.text:00000000000082A0                 mov     rax, r13
.text:00000000000082A3                 mov     rdx, r13
.text:00000000000082A6                 pxor    xmm0, xmm0
.text:00000000000082AA                 shr     rax, 1
.text:00000000000082AD                 and     edx, 1
.text:00000000000082B0                 or      rax, rdx
.text:00000000000082B3                 test    rbp, rbp
.text:00000000000082B6                 cvtsi2sd xmm0, rax
.text:00000000000082BB                 addsd   xmm0, xmm0
.text:00000000000082BF                 mulsd   xmm0, cs:qword_219D8
.text:00000000000082C7                 jns     short loc_824F
.text:00000000000082C9
.text:00000000000082C9 loc_82C9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:00000000000082C9                 mov     rax, rbp
.text:00000000000082CC                 pxor    xmm1, xmm1
.text:00000000000082D0                 shr     rax, 1
.text:00000000000082D3                 and     ebp, 1
.text:00000000000082D6                 or      rax, rbp
.text:00000000000082D9                 cvtsi2sd xmm1, rax
.text:00000000000082DE                 addsd   xmm1, xmm1
.text:00000000000082E2                 jmp     loc_8258
.text:00000000000082E2 ; } // starts at 81A0
.text:00000000000082E2 hash_print_statistics endp
.text:00000000000082E2
.text:00000000000082E2 ; ---------------------------------------------------------------------------
.text:00000000000082E7                 align 10h
.text:00000000000082F0
.text:00000000000082F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082F0
.text:00000000000082F0 ; Attributes: info_from_lumina
.text:00000000000082F0
.text:00000000000082F0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000082F0                 public hash_lookup
.text:00000000000082F0 hash_lookup     proc near               ; CODE XREF: di_set_lookup+3C↑p
.text:00000000000082F0                                         ; excluded_file_name+5E↑p ...
.text:00000000000082F0 ; __unwind {
.text:00000000000082F0                 push    r12
.text:00000000000082F2                 push    rbp
.text:00000000000082F3                 mov     r12, rdi
.text:00000000000082F6                 push    rbx
.text:00000000000082F7                 mov     rbp, rsi
.text:00000000000082FA                 call    safe_hasher
.text:00000000000082FF                 mov     rsi, [rax]
.text:0000000000008302                 test    rsi, rsi
.text:0000000000008305                 jz      short loc_832D
.text:0000000000008307                 mov     rbx, rax
.text:000000000000830A                 jmp     short loc_8313
.text:000000000000830A ; ---------------------------------------------------------------------------
.text:000000000000830C                 align 10h
.text:0000000000008310
.text:0000000000008310 loc_8310:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000008310                 mov     rsi, [rbx]
.text:0000000000008313
.text:0000000000008313 loc_8313:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000008313                 cmp     rsi, rbp
.text:0000000000008316                 jz      short loc_832F
.text:0000000000008318                 mov     rdi, rbp
.text:000000000000831B                 call    qword ptr [r12+38h]
.text:0000000000008320                 test    al, al
.text:0000000000008322                 jnz     short loc_8340
.text:0000000000008324                 mov     rbx, [rbx+8]
.text:0000000000008328                 test    rbx, rbx
.text:000000000000832B                 jnz     short loc_8310
.text:000000000000832D
.text:000000000000832D loc_832D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000832D                 xor     esi, esi
.text:000000000000832F
.text:000000000000832F loc_832F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000832F                 pop     rbx
.text:0000000000008330                 mov     rax, rsi
.text:0000000000008333                 pop     rbp
.text:0000000000008334                 pop     r12
.text:0000000000008336                 retn
.text:0000000000008336 ; ---------------------------------------------------------------------------
.text:0000000000008337                 align 20h
.text:0000000000008340
.text:0000000000008340 loc_8340:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000008340                 mov     rsi, [rbx]
.text:0000000000008343                 pop     rbx
.text:0000000000008344                 pop     rbp
.text:0000000000008345                 mov     rax, rsi
.text:0000000000008348                 pop     r12
.text:000000000000834A                 retn
.text:000000000000834A ; } // starts at 82F0
.text:000000000000834A hash_lookup     endp
.text:000000000000834A
.text:000000000000834A ; ---------------------------------------------------------------------------
.text:000000000000834B                 align 10h
.text:0000000000008350
.text:0000000000008350 ; =============== S U B R O U T I N E =======================================
.text:0000000000008350
.text:0000000000008350 ; Attributes: info_from_lumina
.text:0000000000008350
.text:0000000000008350 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000008350                 public hash_get_first
.text:0000000000008350 hash_get_first  proc near
.text:0000000000008350 ; __unwind {
.text:0000000000008350                 cmp     qword ptr [rdi+20h], 0
.text:0000000000008355                 jz      short loc_8383
.text:0000000000008357                 mov     rdx, [rdi]
.text:000000000000835A                 mov     rcx, [rdi+8]
.text:000000000000835E                 cmp     rdx, rcx
.text:0000000000008361                 jnb     short loc_8388
.text:0000000000008363                 mov     rax, [rdx]
.text:0000000000008366                 test    rax, rax
.text:0000000000008369                 jnz     short locret_8386
.text:000000000000836B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000008370                 add     rdx, 10h
.text:0000000000008374                 cmp     rdx, rcx
.text:0000000000008377                 jnb     short loc_8388
.text:0000000000008379                 mov     rax, [rdx]
.text:000000000000837C                 test    rax, rax
.text:000000000000837F                 jz      short loc_8370
.text:0000000000008381                 rep retn
.text:0000000000008383 ; ---------------------------------------------------------------------------
.text:0000000000008383
.text:0000000000008383 loc_8383:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000008383                 xor     eax, eax
.text:0000000000008385                 retn
.text:0000000000008386 ; ---------------------------------------------------------------------------
.text:0000000000008386
.text:0000000000008386 locret_8386:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000008386                 rep retn
.text:0000000000008388 ; ---------------------------------------------------------------------------
.text:0000000000008388
.text:0000000000008388 loc_8388:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000008388                                         ; hash_get_first+27↑j
.text:0000000000008388                 sub     rsp, 8
.text:000000000000838C                 call    _abort
.text:000000000000838C ; } // starts at 8350
.text:000000000000838C hash_get_first  endp
.text:000000000000838C
.text:000000000000838C ; ---------------------------------------------------------------------------
.text:0000000000008391                 align 20h
.text:00000000000083A0
.text:00000000000083A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083A0
.text:00000000000083A0 ; Attributes: info_from_lumina
.text:00000000000083A0
.text:00000000000083A0 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:00000000000083A0                 public hash_get_next
.text:00000000000083A0 hash_get_next   proc near
.text:00000000000083A0 ; __unwind {
.text:00000000000083A0                 push    rbp
.text:00000000000083A1                 push    rbx
.text:00000000000083A2                 mov     rbp, rdi
.text:00000000000083A5                 mov     rbx, rsi
.text:00000000000083A8                 sub     rsp, 8
.text:00000000000083AC                 call    safe_hasher
.text:00000000000083B1                 mov     rdx, rax
.text:00000000000083B4                 mov     rcx, rax
.text:00000000000083B7                 mov     rax, [rdx]
.text:00000000000083BA                 mov     rdx, [rdx+8]
.text:00000000000083BE                 cmp     rax, rbx
.text:00000000000083C1                 jz      short loc_83D9
.text:00000000000083C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000083C8
.text:00000000000083C8 loc_83C8:                               ; CODE XREF: hash_get_next+37↓j
.text:00000000000083C8                 test    rdx, rdx
.text:00000000000083CB                 jz      short loc_83DE
.text:00000000000083CD                 mov     rax, [rdx]
.text:00000000000083D0                 mov     rdx, [rdx+8]
.text:00000000000083D4                 cmp     rax, rbx
.text:00000000000083D7                 jnz     short loc_83C8
.text:00000000000083D9
.text:00000000000083D9 loc_83D9:                               ; CODE XREF: hash_get_next+21↑j
.text:00000000000083D9                 test    rdx, rdx
.text:00000000000083DC                 jnz     short loc_8408
.text:00000000000083DE
.text:00000000000083DE loc_83DE:                               ; CODE XREF: hash_get_next+2B↑j
.text:00000000000083DE                 mov     rdx, [rbp+8]
.text:00000000000083E2                 jmp     short loc_83F0
.text:00000000000083E2 ; ---------------------------------------------------------------------------
.text:00000000000083E4                 align 8
.text:00000000000083E8
.text:00000000000083E8 loc_83E8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000083E8                 mov     rax, [rcx]
.text:00000000000083EB                 test    rax, rax
.text:00000000000083EE                 jnz     short loc_83FB
.text:00000000000083F0
.text:00000000000083F0 loc_83F0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000083F0                 add     rcx, 10h
.text:00000000000083F4                 cmp     rdx, rcx
.text:00000000000083F7                 ja      short loc_83E8
.text:00000000000083F9                 xor     eax, eax
.text:00000000000083FB
.text:00000000000083FB loc_83FB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000083FB                 add     rsp, 8
.text:00000000000083FF                 pop     rbx
.text:0000000000008400                 pop     rbp
.text:0000000000008401                 retn
.text:0000000000008401 ; ---------------------------------------------------------------------------
.text:0000000000008402                 align 8
.text:0000000000008408
.text:0000000000008408 loc_8408:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000008408                 mov     rax, [rdx]
.text:000000000000840B                 add     rsp, 8
.text:000000000000840F                 pop     rbx
.text:0000000000008410                 pop     rbp
.text:0000000000008411                 retn
.text:0000000000008411 ; } // starts at 83A0
.text:0000000000008411 hash_get_next   endp
.text:0000000000008411
.text:0000000000008411 ; ---------------------------------------------------------------------------
.text:0000000000008412                 align 20h
.text:0000000000008420
.text:0000000000008420 ; =============== S U B R O U T I N E =======================================
.text:0000000000008420
.text:0000000000008420 ; Attributes: info_from_lumina
.text:0000000000008420
.text:0000000000008420 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000008420                 public hash_get_entries
.text:0000000000008420 hash_get_entries proc near
.text:0000000000008420 ; __unwind {
.text:0000000000008420                 mov     r9, [rdi]
.text:0000000000008423                 cmp     [rdi+8], r9
.text:0000000000008427                 jbe     short loc_8482
.text:0000000000008429                 xor     r8d, r8d
.text:000000000000842C
.text:000000000000842C loc_842C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000842C                 mov     rcx, [r9]
.text:000000000000842F                 test    rcx, rcx
.text:0000000000008432                 jz      short loc_846D
.text:0000000000008434                 cmp     rdx, r8
.text:0000000000008437                 jbe     short loc_8477
.text:0000000000008439                 mov     [rsi+r8*8], rcx
.text:000000000000843D                 mov     rcx, [r9+8]
.text:0000000000008441                 lea     rax, [r8+1]
.text:0000000000008445                 test    rcx, rcx
.text:0000000000008448                 jz      short loc_846A
.text:000000000000844A                 nop     word ptr [rax+rax+00h]
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000008450                 cmp     rdx, rax
.text:0000000000008453                 jz      short locret_8480
.text:0000000000008455                 mov     r8, [rcx]
.text:0000000000008458                 add     rax, 1
.text:000000000000845C                 mov     [rsi+rax*8-8], r8
.text:0000000000008461                 mov     rcx, [rcx+8]
.text:0000000000008465                 test    rcx, rcx
.text:0000000000008468                 jnz     short loc_8450
.text:000000000000846A
.text:000000000000846A loc_846A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000846A                 mov     r8, rax
.text:000000000000846D
.text:000000000000846D loc_846D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000846D                 add     r9, 10h
.text:0000000000008471                 cmp     [rdi+8], r9
.text:0000000000008475                 ja      short loc_842C
.text:0000000000008477
.text:0000000000008477 loc_8477:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000008477                 mov     rax, r8
.text:000000000000847A                 retn
.text:000000000000847A ; ---------------------------------------------------------------------------
.text:000000000000847B                 align 20h
.text:0000000000008480
.text:0000000000008480 locret_8480:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000008480                 rep retn
.text:0000000000008482 ; ---------------------------------------------------------------------------
.text:0000000000008482
.text:0000000000008482 loc_8482:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000008482                 xor     eax, eax
.text:0000000000008484                 retn
.text:0000000000008484 ; } // starts at 8420
.text:0000000000008484 hash_get_entries endp
.text:0000000000008484
.text:0000000000008484 ; ---------------------------------------------------------------------------
.text:0000000000008485                 align 10h
.text:0000000000008490
.text:0000000000008490 ; =============== S U B R O U T I N E =======================================
.text:0000000000008490
.text:0000000000008490 ; Attributes: info_from_lumina
.text:0000000000008490
.text:0000000000008490 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000008490                 public hash_do_for_each
.text:0000000000008490 hash_do_for_each proc near
.text:0000000000008490 ; __unwind {
.text:0000000000008490                 push    r15
.text:0000000000008492                 push    r14
.text:0000000000008494                 push    r13
.text:0000000000008496                 push    r12
.text:0000000000008498                 push    rbp
.text:0000000000008499                 push    rbx
.text:000000000000849A                 sub     rsp, 8
.text:000000000000849E                 mov     r14, [rdi]
.text:00000000000084A1                 cmp     [rdi+8], r14
.text:00000000000084A5                 jbe     short loc_84F6
.text:00000000000084A7                 mov     r13, rdx
.text:00000000000084AA                 mov     r12, rsi
.text:00000000000084AD                 mov     r15, rdi
.text:00000000000084B0                 xor     ebp, ebp
.text:00000000000084B2
.text:00000000000084B2 loc_84B2:                               ; CODE XREF: hash_do_for_each+52↓j
.text:00000000000084B2                 mov     rdi, [r14]
.text:00000000000084B5                 test    rdi, rdi
.text:00000000000084B8                 jz      short loc_84DA
.text:00000000000084BA                 mov     rbx, r14
.text:00000000000084BD                 jmp     short loc_84C3
.text:00000000000084BD ; ---------------------------------------------------------------------------
.text:00000000000084BF                 align 20h
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:00000000000084C0                 mov     rdi, [rbx]
.text:00000000000084C3
.text:00000000000084C3 loc_84C3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:00000000000084C3                 mov     rsi, r13
.text:00000000000084C6                 call    r12
.text:00000000000084C9                 test    al, al
.text:00000000000084CB                 jz      short loc_84E4
.text:00000000000084CD                 mov     rbx, [rbx+8]
.text:00000000000084D1                 add     rbp, 1
.text:00000000000084D5                 test    rbx, rbx
.text:00000000000084D8                 jnz     short loc_84C0
.text:00000000000084DA
.text:00000000000084DA loc_84DA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:00000000000084DA                 add     r14, 10h
.text:00000000000084DE                 cmp     [r15+8], r14
.text:00000000000084E2                 ja      short loc_84B2
.text:00000000000084E4
.text:00000000000084E4 loc_84E4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000084E4                                         ; hash_do_for_each+68↓j
.text:00000000000084E4                 add     rsp, 8
.text:00000000000084E8                 mov     rax, rbp
.text:00000000000084EB                 pop     rbx
.text:00000000000084EC                 pop     rbp
.text:00000000000084ED                 pop     r12
.text:00000000000084EF                 pop     r13
.text:00000000000084F1                 pop     r14
.text:00000000000084F3                 pop     r15
.text:00000000000084F5                 retn
.text:00000000000084F6 ; ---------------------------------------------------------------------------
.text:00000000000084F6
.text:00000000000084F6 loc_84F6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000084F6                 xor     ebp, ebp
.text:00000000000084F8                 jmp     short loc_84E4
.text:00000000000084F8 ; } // starts at 8490
.text:00000000000084F8 hash_do_for_each endp
.text:00000000000084F8
.text:00000000000084F8 ; ---------------------------------------------------------------------------
.text:00000000000084FA                 align 20h
.text:0000000000008500
.text:0000000000008500 ; =============== S U B R O U T I N E =======================================
.text:0000000000008500
.text:0000000000008500 ; Attributes: info_from_lumina
.text:0000000000008500
.text:0000000000008500 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000008500                 public hash_string
.text:0000000000008500 hash_string     proc near               ; CODE XREF: string_hasher↑j
.text:0000000000008500 ; __unwind {
.text:0000000000008500                 movzx   ecx, byte ptr [rdi]
.text:0000000000008503                 xor     edx, edx
.text:0000000000008505                 test    cl, cl
.text:0000000000008507                 jz      short loc_852D
.text:0000000000008509                 nop     dword ptr [rax+00000000h]
.text:0000000000008510
.text:0000000000008510 loc_8510:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000008510                 mov     rax, rdx
.text:0000000000008513                 add     rdi, 1
.text:0000000000008517                 shl     rax, 5
.text:000000000000851B                 sub     rax, rdx
.text:000000000000851E                 xor     edx, edx
.text:0000000000008520                 add     rax, rcx
.text:0000000000008523                 movzx   ecx, byte ptr [rdi]
.text:0000000000008526                 div     rsi
.text:0000000000008529                 test    cl, cl
.text:000000000000852B                 jnz     short loc_8510
.text:000000000000852D
.text:000000000000852D loc_852D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000852D                 mov     rax, rdx
.text:0000000000008530                 retn
.text:0000000000008530 ; } // starts at 8500
.text:0000000000008530 hash_string     endp
.text:0000000000008530
.text:0000000000008530 ; ---------------------------------------------------------------------------
.text:0000000000008531                 align 20h
.text:0000000000008540
.text:0000000000008540 ; =============== S U B R O U T I N E =======================================
.text:0000000000008540
.text:0000000000008540 ; Attributes: info_from_lumina
.text:0000000000008540
.text:0000000000008540 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000008540                 public hash_reset_tuning
.text:0000000000008540 hash_reset_tuning proc near
.text:0000000000008540 ; __unwind {
.text:0000000000008540                 mov     rax, 3F80000000000000h
.text:000000000000854A                 mov     byte ptr [rdi+10h], 0
.text:000000000000854E                 mov     [rdi], rax
.text:0000000000008551                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000855B                 mov     [rdi+8], rax
.text:000000000000855F                 retn
.text:000000000000855F ; } // starts at 8540
.text:000000000000855F hash_reset_tuning endp
.text:000000000000855F
.text:0000000000008560
.text:0000000000008560 ; =============== S U B R O U T I N E =======================================
.text:0000000000008560
.text:0000000000008560 ; Attributes: info_from_lumina
.text:0000000000008560
.text:0000000000008560 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000008560                 public hash_initialize
.text:0000000000008560 hash_initialize proc near               ; CODE XREF: map_device_isra_0+A3↑p
.text:0000000000008560                                         ; di_set_alloc+2F↑p ...
.text:0000000000008560 ; __unwind {
.text:0000000000008560                 push    r15
.text:0000000000008562                 push    r14
.text:0000000000008564                 lea     rax, raw_hasher
.text:000000000000856B                 push    r13
.text:000000000000856D                 push    r12
.text:000000000000856F                 mov     r12, rdx
.text:0000000000008572                 push    rbp
.text:0000000000008573                 push    rbx
.text:0000000000008574                 mov     r13, rcx
.text:0000000000008577                 mov     rbp, rdi
.text:000000000000857A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000857F                 mov     r15, rsi
.text:0000000000008582                 sub     rsp, 8
.text:0000000000008586                 test    rdx, rdx
.text:0000000000008589                 mov     r14, r8
.text:000000000000858C                 cmovz   r12, rax
.text:0000000000008590                 lea     rax, raw_comparator
.text:0000000000008597                 test    rcx, rcx
.text:000000000000859A                 cmovz   r13, rax
.text:000000000000859E                 call    _malloc
.text:00000000000085A3                 test    rax, rax
.text:00000000000085A6                 mov     rbx, rax
.text:00000000000085A9                 jz      loc_865A
.text:00000000000085AF                 test    r15, r15
.text:00000000000085B2                 lea     rdi, [rax+28h]
.text:00000000000085B6                 jz      loc_8670
.text:00000000000085BC                 mov     [rax+28h], r15
.text:00000000000085C0                 call    check_tuning
.text:00000000000085C5                 test    al, al
.text:00000000000085C7                 jz      loc_8650
.text:00000000000085CD                 cmp     byte ptr [r15+10h], 0
.text:00000000000085D2                 jz      loc_86D0
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000085D8                                         ; hash_initialize+1A5↓j
.text:00000000000085D8                 mov     rdi, rbp
.text:00000000000085DB                 call    next_prime
.text:00000000000085E0                 mov     edx, 8
.text:00000000000085E5                 mov     rbp, rax
.text:00000000000085E8                 xor     ecx, ecx
.text:00000000000085EA                 mov     rax, rdx
.text:00000000000085ED                 mul     rbp
.text:00000000000085F0                 jo      loc_870A
.text:00000000000085F6
.text:00000000000085F6 loc_85F6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000085F6                 test    rax, rax
.text:00000000000085F9                 js      short loc_8650
.text:00000000000085FB                 test    rcx, rcx
.text:00000000000085FE                 jnz     short loc_8650
.text:0000000000008600                 test    rbp, rbp
.text:0000000000008603                 mov     [rbx+10h], rbp
.text:0000000000008607                 jz      short loc_8650
.text:0000000000008609                 mov     esi, 10h        ; size
.text:000000000000860E                 mov     rdi, rbp        ; nmemb
.text:0000000000008611                 call    _calloc
.text:0000000000008616                 test    rax, rax
.text:0000000000008619                 mov     [rbx], rax
.text:000000000000861C                 jz      short loc_8650
.text:000000000000861E                 shl     rbp, 4
.text:0000000000008622                 mov     qword ptr [rbx+18h], 0
.text:000000000000862A                 mov     qword ptr [rbx+20h], 0
.text:0000000000008632                 add     rbp, rax
.text:0000000000008635                 mov     [rbx+30h], r12
.text:0000000000008639                 mov     [rbx+38h], r13
.text:000000000000863D                 mov     [rbx+8], rbp
.text:0000000000008641                 mov     [rbx+40h], r14
.text:0000000000008645                 mov     qword ptr [rbx+48h], 0
.text:000000000000864D                 jmp     short loc_865A
.text:000000000000864D ; ---------------------------------------------------------------------------
.text:000000000000864F                 align 10h
.text:0000000000008650
.text:0000000000008650 loc_8650:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000008650                                         ; hash_initialize+99↑j ...
.text:0000000000008650                 mov     rdi, rbx        ; ptr
.text:0000000000008653                 xor     ebx, ebx
.text:0000000000008655                 call    free
.text:000000000000865A
.text:000000000000865A loc_865A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000865A                                         ; hash_initialize+ED↑j
.text:000000000000865A                 add     rsp, 8
.text:000000000000865E                 mov     rax, rbx
.text:0000000000008661                 pop     rbx
.text:0000000000008662                 pop     rbp
.text:0000000000008663                 pop     r12
.text:0000000000008665                 pop     r13
.text:0000000000008667                 pop     r14
.text:0000000000008669                 pop     r15
.text:000000000000866B                 retn
.text:000000000000866B ; ---------------------------------------------------------------------------
.text:000000000000866C                 align 10h
.text:0000000000008670
.text:0000000000008670 loc_8670:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000008670                 lea     rax, default_tuning
.text:0000000000008677                 mov     [rbx+28h], rax
.text:000000000000867B                 call    check_tuning
.text:0000000000008680                 test    al, al
.text:0000000000008682                 movss   xmm1, cs:dword_219C8
.text:000000000000868A                 jz      short loc_8650
.text:000000000000868C                 test    rbp, rbp
.text:000000000000868F                 js      short loc_86DB
.text:0000000000008691
.text:0000000000008691 loc_8691:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000008691                 pxor    xmm0, xmm0
.text:0000000000008695                 cvtsi2ss xmm0, rbp
.text:000000000000869A
.text:000000000000869A loc_869A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000869A                 divss   xmm0, xmm1
.text:000000000000869E                 ucomiss xmm0, cs:dword_219CC
.text:00000000000086A5                 jnb     short loc_8650
.text:00000000000086A7                 ucomiss xmm0, cs:dword_219D0
.text:00000000000086AE                 jb      short loc_8700
.text:00000000000086B0                 subss   xmm0, cs:dword_219D0
.text:00000000000086B8                 mov     rax, 8000000000000000h
.text:00000000000086C2                 cvttss2si rbp, xmm0
.text:00000000000086C7                 xor     rbp, rax
.text:00000000000086CA                 jmp     loc_85D8
.text:00000000000086CA ; ---------------------------------------------------------------------------
.text:00000000000086CF                 align 10h
.text:00000000000086D0
.text:00000000000086D0 loc_86D0:                               ; CODE XREF: hash_initialize+72↑j
.text:00000000000086D0                 test    rbp, rbp
.text:00000000000086D3                 movss   xmm1, dword ptr [r15+8]
.text:00000000000086D9                 jns     short loc_8691
.text:00000000000086DB
.text:00000000000086DB loc_86DB:                               ; CODE XREF: hash_initialize+12F↑j
.text:00000000000086DB                 mov     rax, rbp
.text:00000000000086DE                 pxor    xmm0, xmm0
.text:00000000000086E2                 shr     rax, 1
.text:00000000000086E5                 and     ebp, 1
.text:00000000000086E8                 or      rax, rbp
.text:00000000000086EB                 cvtsi2ss xmm0, rax
.text:00000000000086F0                 addss   xmm0, xmm0
.text:00000000000086F4                 jmp     short loc_869A
.text:00000000000086F4 ; ---------------------------------------------------------------------------
.text:00000000000086F6                 align 20h
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000008700                 cvttss2si rbp, xmm0
.text:0000000000008705                 jmp     loc_85D8
.text:000000000000870A ; ---------------------------------------------------------------------------
.text:000000000000870A
.text:000000000000870A loc_870A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000870A                 mov     ecx, 1
.text:000000000000870F                 jmp     loc_85F6
.text:000000000000870F ; } // starts at 8560
.text:000000000000870F hash_initialize endp
.text:000000000000870F
.text:000000000000870F ; ---------------------------------------------------------------------------
.text:0000000000008714                 align 20h
.text:0000000000008720
.text:0000000000008720 ; =============== S U B R O U T I N E =======================================
.text:0000000000008720
.text:0000000000008720 ; Attributes: info_from_lumina
.text:0000000000008720
.text:0000000000008720 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000008720                 public hash_clear
.text:0000000000008720 hash_clear      proc near
.text:0000000000008720 ; __unwind {
.text:0000000000008720                 push    r12
.text:0000000000008722                 push    rbp
.text:0000000000008723                 mov     rbp, rdi
.text:0000000000008726                 push    rbx
.text:0000000000008727                 mov     r12, [rdi]
.text:000000000000872A                 cmp     r12, [rdi+8]
.text:000000000000872E                 jnb     short loc_879B
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000008730                 cmp     qword ptr [r12], 0
.text:0000000000008735                 jz      short loc_8791
.text:0000000000008737                 mov     rbx, [r12+8]
.text:000000000000873C                 mov     rax, [rbp+40h]
.text:0000000000008740                 test    rbx, rbx
.text:0000000000008743                 jz      short loc_8775
.text:0000000000008745                 nop     dword ptr [rax]
.text:0000000000008748
.text:0000000000008748 loc_8748:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000008748                 test    rax, rax
.text:000000000000874B                 jz      short loc_8756
.text:000000000000874D                 mov     rdi, [rbx]
.text:0000000000008750                 call    rax
.text:0000000000008752                 mov     rax, [rbp+40h]
.text:0000000000008756
.text:0000000000008756 loc_8756:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000008756                 mov     rdx, [rbx+8]
.text:000000000000875A                 mov     rcx, [rbp+48h]
.text:000000000000875E                 mov     qword ptr [rbx], 0
.text:0000000000008765                 test    rdx, rdx
.text:0000000000008768                 mov     [rbx+8], rcx
.text:000000000000876C                 mov     [rbp+48h], rbx
.text:0000000000008770                 mov     rbx, rdx
.text:0000000000008773                 jnz     short loc_8748
.text:0000000000008775
.text:0000000000008775 loc_8775:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000008775                 test    rax, rax
.text:0000000000008778                 jz      short loc_8780
.text:000000000000877A                 mov     rdi, [r12]
.text:000000000000877E                 call    rax
.text:0000000000008780
.text:0000000000008780 loc_8780:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000008780                 mov     qword ptr [r12], 0
.text:0000000000008788                 mov     qword ptr [r12+8], 0
.text:0000000000008791
.text:0000000000008791 loc_8791:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000008791                 add     r12, 10h
.text:0000000000008795                 cmp     [rbp+8], r12
.text:0000000000008799                 ja      short loc_8730
.text:000000000000879B
.text:000000000000879B loc_879B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000879B                 mov     qword ptr [rbp+18h], 0
.text:00000000000087A3                 mov     qword ptr [rbp+20h], 0
.text:00000000000087AB                 pop     rbx
.text:00000000000087AC                 pop     rbp
.text:00000000000087AD                 pop     r12
.text:00000000000087AF                 retn
.text:00000000000087AF ; } // starts at 8720
.text:00000000000087AF hash_clear      endp
.text:00000000000087AF
.text:00000000000087B0
.text:00000000000087B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087B0
.text:00000000000087B0 ; Attributes: info_from_lumina
.text:00000000000087B0
.text:00000000000087B0 ; void __fastcall hash_free(Hash_table *table)
.text:00000000000087B0                 public hash_free
.text:00000000000087B0 hash_free       proc near               ; CODE XREF: di_ent_free+8↑p
.text:00000000000087B0                                         ; rsa_multip_info_free+7↑p ...
.text:00000000000087B0 ; __unwind {
.text:00000000000087B0                 push    r12
.text:00000000000087B2                 push    rbp
.text:00000000000087B3                 mov     r12, rdi
.text:00000000000087B6                 push    rbx
.text:00000000000087B7                 cmp     qword ptr [rdi+40h], 0
.text:00000000000087BC                 mov     rbp, [rdi]
.text:00000000000087BF                 mov     rax, [rdi+8]
.text:00000000000087C3                 jz      short loc_8813
.text:00000000000087C5                 cmp     qword ptr [rdi+20h], 0
.text:00000000000087CA                 jz      short loc_8813
.text:00000000000087CC                 cmp     rbp, rax
.text:00000000000087CF                 jnb     short loc_884C
.text:00000000000087D1                 nop     dword ptr [rax+00000000h]
.text:00000000000087D8
.text:00000000000087D8 loc_87D8:                               ; CODE XREF: hash_free+5D↓j
.text:00000000000087D8                 mov     rdi, [rbp+0]
.text:00000000000087DC                 test    rdi, rdi
.text:00000000000087DF                 jz      short loc_8806
.text:00000000000087E1                 mov     rbx, rbp
.text:00000000000087E4                 jmp     short loc_87F3
.text:00000000000087E4 ; ---------------------------------------------------------------------------
.text:00000000000087E6                 align 10h
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000087F0                 mov     rdi, [rbx]
.text:00000000000087F3
.text:00000000000087F3 loc_87F3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000087F3                 call    qword ptr [r12+40h]
.text:00000000000087F8                 mov     rbx, [rbx+8]
.text:00000000000087FC                 test    rbx, rbx
.text:00000000000087FF                 jnz     short loc_87F0
.text:0000000000008801                 mov     rax, [r12+8]
.text:0000000000008806
.text:0000000000008806 loc_8806:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000008806                 add     rbp, 10h
.text:000000000000880A                 cmp     rax, rbp
.text:000000000000880D                 ja      short loc_87D8
.text:000000000000880F                 mov     rbp, [r12]
.text:0000000000008813
.text:0000000000008813 loc_8813:                               ; CODE XREF: hash_free+13↑j
.text:0000000000008813                                         ; hash_free+1A↑j
.text:0000000000008813                 cmp     rbp, rax
.text:0000000000008816                 jnb     short loc_884C
.text:0000000000008818                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000008820                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000008824                 test    rdi, rdi
.text:0000000000008827                 jz      short loc_8841
.text:0000000000008829                 nop     dword ptr [rax+00000000h]
.text:0000000000008830
.text:0000000000008830 loc_8830:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000008830                 mov     rbx, [rdi+8]
.text:0000000000008834                 call    free
.text:0000000000008839                 test    rbx, rbx
.text:000000000000883C                 mov     rdi, rbx
.text:000000000000883F                 jnz     short loc_8830
.text:0000000000008841
.text:0000000000008841 loc_8841:                               ; CODE XREF: hash_free+77↑j
.text:0000000000008841                 add     rbp, 10h
.text:0000000000008845                 cmp     [r12+8], rbp
.text:000000000000884A                 ja      short loc_8820
.text:000000000000884C
.text:000000000000884C loc_884C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000884C                                         ; hash_free+66↑j
.text:000000000000884C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000008851                 test    rdi, rdi
.text:0000000000008854                 jz      short loc_8871
.text:0000000000008856                 db      2Eh
.text:0000000000008856                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008860
.text:0000000000008860 loc_8860:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000008860                 mov     rbx, [rdi+8]
.text:0000000000008864                 call    free
.text:0000000000008869                 test    rbx, rbx
.text:000000000000886C                 mov     rdi, rbx
.text:000000000000886F                 jnz     short loc_8860
.text:0000000000008871
.text:0000000000008871 loc_8871:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000008871                 mov     rdi, [r12]      ; ptr
.text:0000000000008875                 call    free
.text:000000000000887A                 pop     rbx
.text:000000000000887B                 mov     rdi, r12        ; ptr
.text:000000000000887E                 pop     rbp
.text:000000000000887F                 pop     r12
.text:0000000000008881                 jmp     free
.text:0000000000008881 ; } // starts at 87B0
.text:0000000000008881 hash_free       endp
.text:0000000000008881
.text:0000000000008881 ; ---------------------------------------------------------------------------
.text:0000000000008886                 align 10h
.text:0000000000008890
.text:0000000000008890 ; =============== S U B R O U T I N E =======================================
.text:0000000000008890
.text:0000000000008890 ; Attributes: info_from_lumina
.text:0000000000008890
.text:0000000000008890 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000008890                 public hash_rehash
.text:0000000000008890 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000008890                                         ; hash_delete+10F↓p
.text:0000000000008890
.text:0000000000008890 ptr             = qword ptr -78h
.text:0000000000008890 var_70          = qword ptr -70h
.text:0000000000008890 var_68          = qword ptr -68h
.text:0000000000008890 var_60          = qword ptr -60h
.text:0000000000008890 var_58          = qword ptr -58h
.text:0000000000008890 var_50          = qword ptr -50h
.text:0000000000008890 var_48          = qword ptr -48h
.text:0000000000008890 var_40          = qword ptr -40h
.text:0000000000008890 var_38          = qword ptr -38h
.text:0000000000008890 var_30          = qword ptr -30h
.text:0000000000008890 var_20          = qword ptr -20h
.text:0000000000008890
.text:0000000000008890 ; __unwind {
.text:0000000000008890                 push    r12
.text:0000000000008892                 push    rbp
.text:0000000000008893                 mov     rbp, rdi
.text:0000000000008896                 push    rbx
.text:0000000000008897                 sub     rsp, 60h
.text:000000000000889B                 mov     r12, [rdi+28h]
.text:000000000000889F                 mov     rax, fs:28h
.text:00000000000088A8                 mov     [rsp+78h+var_20], rax
.text:00000000000088AD                 xor     eax, eax
.text:00000000000088AF                 cmp     byte ptr [r12+10h], 0
.text:00000000000088B5                 jnz     short loc_8908
.text:00000000000088B7                 test    rsi, rsi
.text:00000000000088BA                 js      loc_8A38
.text:00000000000088C0                 pxor    xmm0, xmm0
.text:00000000000088C4                 cvtsi2ss xmm0, rsi
.text:00000000000088C9
.text:00000000000088C9 loc_88C9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:00000000000088C9                 divss   xmm0, dword ptr [r12+8]
.text:00000000000088D0                 ucomiss xmm0, cs:dword_219CC
.text:00000000000088D7                 jnb     loc_8A10
.text:00000000000088DD                 ucomiss xmm0, cs:dword_219D0
.text:00000000000088E4                 jb      loc_8A60
.text:00000000000088EA                 subss   xmm0, cs:dword_219D0
.text:00000000000088F2                 mov     rax, 8000000000000000h
.text:00000000000088FC                 cvttss2si rsi, xmm0
.text:0000000000008901                 xor     rsi, rax
.text:0000000000008904                 nop     dword ptr [rax+00h]
.text:0000000000008908
.text:0000000000008908 loc_8908:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000008908                                         ; hash_rehash+1D5↓j
.text:0000000000008908                 mov     rdi, rsi
.text:000000000000890B                 call    next_prime
.text:0000000000008910                 mov     edx, 8
.text:0000000000008915                 mov     rbx, rax
.text:0000000000008918                 xor     ecx, ecx
.text:000000000000891A                 mov     rax, rdx
.text:000000000000891D                 mul     rbx
.text:0000000000008920                 jo      loc_8ABF
.text:0000000000008926
.text:0000000000008926 loc_8926:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000008926                 test    rax, rax
.text:0000000000008929                 mov     eax, 1
.text:000000000000892E                 cmovs   rcx, rax
.text:0000000000008932                 test    rbx, rbx
.text:0000000000008935                 jz      loc_8A10
.text:000000000000893B                 and     ecx, 1
.text:000000000000893E                 jnz     loc_8A10
.text:0000000000008944                 cmp     [rbp+10h], rbx
.text:0000000000008948                 jz      loc_8A70
.text:000000000000894E                 mov     esi, 10h        ; size
.text:0000000000008953                 mov     rdi, rbx        ; nmemb
.text:0000000000008956                 call    _calloc
.text:000000000000895B                 test    rax, rax
.text:000000000000895E                 mov     [rsp+78h+ptr], rax
.text:0000000000008962                 jz      loc_8A10
.text:0000000000008968                 mov     [rsp+78h+var_68], rbx
.text:000000000000896D                 shl     rbx, 4
.text:0000000000008971                 mov     [rsp+78h+var_50], r12
.text:0000000000008976                 add     rbx, rax
.text:0000000000008979                 mov     rax, [rbp+30h]
.text:000000000000897D                 mov     r12, rsp
.text:0000000000008980                 xor     edx, edx
.text:0000000000008982                 mov     rsi, rbp
.text:0000000000008985                 mov     rdi, r12
.text:0000000000008988                 mov     [rsp+78h+var_70], rbx
.text:000000000000898D                 mov     [rsp+78h+var_60], 0
.text:0000000000008996                 mov     [rsp+78h+var_48], rax
.text:000000000000899B                 mov     rax, [rbp+38h]
.text:000000000000899F                 mov     [rsp+78h+var_58], 0
.text:00000000000089A8                 mov     [rsp+78h+var_40], rax
.text:00000000000089AD                 mov     rax, [rbp+40h]
.text:00000000000089B1                 mov     [rsp+78h+var_38], rax
.text:00000000000089B6                 mov     rax, [rbp+48h]
.text:00000000000089BA                 mov     [rsp+78h+var_30], rax
.text:00000000000089BF                 call    transfer_entries
.text:00000000000089C4                 test    al, al
.text:00000000000089C6                 mov     ebx, eax
.text:00000000000089C8                 jnz     loc_8A80
.text:00000000000089CE                 mov     rax, [rsp+78h+var_30]
.text:00000000000089D3                 mov     edx, 1
.text:00000000000089D8                 mov     rsi, r12
.text:00000000000089DB                 mov     rdi, rbp
.text:00000000000089DE                 mov     [rbp+48h], rax
.text:00000000000089E2                 call    transfer_entries
.text:00000000000089E7                 test    al, al
.text:00000000000089E9                 jz      loc_8AC9
.text:00000000000089EF                 xor     edx, edx
.text:00000000000089F1                 mov     rsi, r12
.text:00000000000089F4                 mov     rdi, rbp
.text:00000000000089F7                 call    transfer_entries
.text:00000000000089FC                 test    al, al
.text:00000000000089FE                 jz      loc_8AC9
.text:0000000000008A04                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000008A08                 call    free
.text:0000000000008A0D                 jmp     short loc_8A12
.text:0000000000008A0D ; ---------------------------------------------------------------------------
.text:0000000000008A0F                 align 10h
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000008A10                                         ; hash_rehash+A5↑j ...
.text:0000000000008A10                 xor     ebx, ebx
.text:0000000000008A12
.text:0000000000008A12 loc_8A12:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000008A12                                         ; hash_rehash+1E5↓j ...
.text:0000000000008A12                 mov     rcx, [rsp+78h+var_20]
.text:0000000000008A17                 xor     rcx, fs:28h
.text:0000000000008A20                 mov     eax, ebx
.text:0000000000008A22                 jnz     loc_8ABA
.text:0000000000008A28                 add     rsp, 60h
.text:0000000000008A2C                 pop     rbx
.text:0000000000008A2D                 pop     rbp
.text:0000000000008A2E                 pop     r12
.text:0000000000008A30                 retn
.text:0000000000008A30 ; ---------------------------------------------------------------------------
.text:0000000000008A31                 align 8
.text:0000000000008A38
.text:0000000000008A38 loc_8A38:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000008A38                 mov     rax, rsi
.text:0000000000008A3B                 pxor    xmm0, xmm0
.text:0000000000008A3F                 shr     rax, 1
.text:0000000000008A42                 and     esi, 1
.text:0000000000008A45                 or      rax, rsi
.text:0000000000008A48                 cvtsi2ss xmm0, rax
.text:0000000000008A4D                 addss   xmm0, xmm0
.text:0000000000008A51                 jmp     loc_88C9
.text:0000000000008A51 ; ---------------------------------------------------------------------------
.text:0000000000008A56                 align 20h
.text:0000000000008A60
.text:0000000000008A60 loc_8A60:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000008A60                 cvttss2si rsi, xmm0
.text:0000000000008A65                 jmp     loc_8908
.text:0000000000008A65 ; ---------------------------------------------------------------------------
.text:0000000000008A6A                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000008A70                 mov     ebx, 1
.text:0000000000008A75                 jmp     short loc_8A12
.text:0000000000008A75 ; ---------------------------------------------------------------------------
.text:0000000000008A77                 align 20h
.text:0000000000008A80
.text:0000000000008A80 loc_8A80:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000008A80                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000008A84                 call    free
.text:0000000000008A89                 mov     rax, [rsp+78h+ptr]
.text:0000000000008A8D                 mov     [rbp+0], rax
.text:0000000000008A91                 mov     rax, [rsp+78h+var_70]
.text:0000000000008A96                 mov     [rbp+8], rax
.text:0000000000008A9A                 mov     rax, [rsp+78h+var_68]
.text:0000000000008A9F                 mov     [rbp+10h], rax
.text:0000000000008AA3                 mov     rax, [rsp+78h+var_60]
.text:0000000000008AA8                 mov     [rbp+18h], rax
.text:0000000000008AAC                 mov     rax, [rsp+78h+var_30]
.text:0000000000008AB1                 mov     [rbp+48h], rax
.text:0000000000008AB5                 jmp     loc_8A12
.text:0000000000008ABA ; ---------------------------------------------------------------------------
.text:0000000000008ABA
.text:0000000000008ABA loc_8ABA:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000008ABA                 call    ___stack_chk_fail
.text:0000000000008ABF ; ---------------------------------------------------------------------------
.text:0000000000008ABF
.text:0000000000008ABF loc_8ABF:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000008ABF                 mov     ecx, 1
.text:0000000000008AC4                 jmp     loc_8926
.text:0000000000008AC9 ; ---------------------------------------------------------------------------
.text:0000000000008AC9
.text:0000000000008AC9 loc_8AC9:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000008AC9                                         ; hash_rehash+16E↑j
.text:0000000000008AC9                 call    _abort
.text:0000000000008AC9 ; } // starts at 8890
.text:0000000000008AC9 hash_rehash     endp
.text:0000000000008AC9
.text:0000000000008AC9 ; ---------------------------------------------------------------------------
.text:0000000000008ACE                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AD0
.text:0000000000008AD0 ; Attributes: info_from_lumina
.text:0000000000008AD0
.text:0000000000008AD0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000008AD0                 public hash_insert_if_absent
.text:0000000000008AD0 hash_insert_if_absent proc near         ; CODE XREF: di_set_insert+42↑j
.text:0000000000008AD0                                         ; hash_insert+1B↓p
.text:0000000000008AD0
.text:0000000000008AD0 var_38          = qword ptr -38h
.text:0000000000008AD0 var_30          = qword ptr -30h
.text:0000000000008AD0
.text:0000000000008AD0 ; __unwind {
.text:0000000000008AD0                 push    r13
.text:0000000000008AD2                 push    r12
.text:0000000000008AD4                 push    rbp
.text:0000000000008AD5                 push    rbx
.text:0000000000008AD6                 sub     rsp, 18h
.text:0000000000008ADA                 mov     rax, fs:28h
.text:0000000000008AE3                 mov     [rsp+38h+var_30], rax
.text:0000000000008AE8                 xor     eax, eax
.text:0000000000008AEA                 test    rsi, rsi
.text:0000000000008AED                 jz      loc_8CAD
.text:0000000000008AF3                 mov     r12, rsp
.text:0000000000008AF6                 xor     ecx, ecx
.text:0000000000008AF8                 mov     r13, rdx
.text:0000000000008AFB                 mov     rdx, r12
.text:0000000000008AFE                 mov     rbx, rdi
.text:0000000000008B01                 mov     rbp, rsi
.text:0000000000008B04                 call    hash_find_entry
.text:0000000000008B09                 test    rax, rax
.text:0000000000008B0C                 mov     rdx, rax
.text:0000000000008B0F                 jz      short loc_8B40
.text:0000000000008B11                 xor     eax, eax
.text:0000000000008B13                 test    r13, r13
.text:0000000000008B16                 jz      short loc_8B1C
.text:0000000000008B18                 mov     [r13+0], rdx
.text:0000000000008B1C
.text:0000000000008B1C loc_8B1C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000008B1C                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000008B1C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000008B21                 xor     rcx, fs:28h
.text:0000000000008B2A                 jnz     loc_8D4F
.text:0000000000008B30                 add     rsp, 18h
.text:0000000000008B34                 pop     rbx
.text:0000000000008B35                 pop     rbp
.text:0000000000008B36                 pop     r12
.text:0000000000008B38                 pop     r13
.text:0000000000008B3A                 retn
.text:0000000000008B3A ; ---------------------------------------------------------------------------
.text:0000000000008B3B                 align 20h
.text:0000000000008B40
.text:0000000000008B40 loc_8B40:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000008B40                 mov     rax, [rbx+18h]
.text:0000000000008B44                 test    rax, rax
.text:0000000000008B47                 js      short loc_8BC0
.text:0000000000008B49                 pxor    xmm1, xmm1
.text:0000000000008B4D                 mov     rdx, [rbx+28h]
.text:0000000000008B51                 cvtsi2ss xmm1, rax
.text:0000000000008B56                 mov     rax, [rbx+10h]
.text:0000000000008B5A                 test    rax, rax
.text:0000000000008B5D                 js      loc_8BEA
.text:0000000000008B63
.text:0000000000008B63 loc_8B63:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000008B63                 pxor    xmm0, xmm0
.text:0000000000008B67                 cvtsi2ss xmm0, rax
.text:0000000000008B6C
.text:0000000000008B6C loc_8B6C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000008B6C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008B71                 ucomiss xmm1, xmm0
.text:0000000000008B74                 ja      loc_8C10
.text:0000000000008B7A
.text:0000000000008B7A loc_8B7A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000008B7A                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000008B7A                 mov     r12, [rsp+38h+var_38]
.text:0000000000008B7E                 cmp     qword ptr [r12], 0
.text:0000000000008B83                 jz      loc_8CB8
.text:0000000000008B89                 mov     rax, [rbx+48h]
.text:0000000000008B8D                 test    rax, rax
.text:0000000000008B90                 jz      loc_8CD0
.text:0000000000008B96                 mov     rdx, [rax+8]
.text:0000000000008B9A                 mov     [rbx+48h], rdx
.text:0000000000008B9E
.text:0000000000008B9E loc_8B9E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000008B9E                 mov     rdx, [r12+8]
.text:0000000000008BA3                 mov     [rax], rbp
.text:0000000000008BA6                 mov     [rax+8], rdx
.text:0000000000008BAA                 mov     [r12+8], rax
.text:0000000000008BAF                 mov     eax, 1
.text:0000000000008BB4                 add     qword ptr [rbx+20h], 1
.text:0000000000008BB9                 jmp     loc_8B1C
.text:0000000000008BB9 ; ---------------------------------------------------------------------------
.text:0000000000008BBE                 align 20h
.text:0000000000008BC0
.text:0000000000008BC0 loc_8BC0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000008BC0                 mov     rdx, rax
.text:0000000000008BC3                 pxor    xmm1, xmm1
.text:0000000000008BC7                 and     eax, 1
.text:0000000000008BCA                 shr     rdx, 1
.text:0000000000008BCD                 or      rdx, rax
.text:0000000000008BD0                 mov     rax, [rbx+10h]
.text:0000000000008BD4                 cvtsi2ss xmm1, rdx
.text:0000000000008BD9                 mov     rdx, [rbx+28h]
.text:0000000000008BDD                 test    rax, rax
.text:0000000000008BE0                 addss   xmm1, xmm1
.text:0000000000008BE4                 jns     loc_8B63
.text:0000000000008BEA
.text:0000000000008BEA loc_8BEA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000008BEA                 mov     rcx, rax
.text:0000000000008BED                 pxor    xmm0, xmm0
.text:0000000000008BF1                 shr     rcx, 1
.text:0000000000008BF4                 and     eax, 1
.text:0000000000008BF7                 or      rcx, rax
.text:0000000000008BFA                 cvtsi2ss xmm0, rcx
.text:0000000000008BFF                 addss   xmm0, xmm0
.text:0000000000008C03                 jmp     loc_8B6C
.text:0000000000008C03 ; ---------------------------------------------------------------------------
.text:0000000000008C08                 align 10h
.text:0000000000008C10
.text:0000000000008C10 loc_8C10:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000008C10                 lea     rdi, [rbx+28h]
.text:0000000000008C14                 call    check_tuning
.text:0000000000008C19                 mov     rax, [rbx+10h]
.text:0000000000008C1D                 mov     rdx, [rbx+28h]
.text:0000000000008C21                 test    rax, rax
.text:0000000000008C24                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000008C29                 js      loc_8CF0
.text:0000000000008C2F                 pxor    xmm0, xmm0
.text:0000000000008C33                 cvtsi2ss xmm0, rax
.text:0000000000008C38
.text:0000000000008C38 loc_8C38:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000008C38                 mov     rax, [rbx+18h]
.text:0000000000008C3C                 test    rax, rax
.text:0000000000008C3F                 js      loc_8D10
.text:0000000000008C45                 pxor    xmm1, xmm1
.text:0000000000008C49                 cvtsi2ss xmm1, rax
.text:0000000000008C4E
.text:0000000000008C4E loc_8C4E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000008C4E                 movaps  xmm3, xmm2
.text:0000000000008C51                 mulss   xmm3, xmm0
.text:0000000000008C55                 ucomiss xmm1, xmm3
.text:0000000000008C58                 jbe     loc_8B7A
.text:0000000000008C5E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008C62                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000008C67                 jnz     short loc_8C6D
.text:0000000000008C69                 mulss   xmm0, xmm2
.text:0000000000008C6D
.text:0000000000008C6D loc_8C6D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000008C6D                 ucomiss xmm0, cs:dword_219CC
.text:0000000000008C74                 jnb     short loc_8CE3
.text:0000000000008C76                 ucomiss xmm0, cs:dword_219D0
.text:0000000000008C7D                 jnb     loc_8D30
.text:0000000000008C83                 cvttss2si rsi, xmm0
.text:0000000000008C88
.text:0000000000008C88 loc_8C88:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000008C88                 mov     rdi, rbx
.text:0000000000008C8B                 call    hash_rehash
.text:0000000000008C90                 test    al, al
.text:0000000000008C92                 jz      short loc_8CE3
.text:0000000000008C94                 xor     ecx, ecx
.text:0000000000008C96                 mov     rdx, r12
.text:0000000000008C99                 mov     rsi, rbp
.text:0000000000008C9C                 mov     rdi, rbx
.text:0000000000008C9F                 call    hash_find_entry
.text:0000000000008CA4                 test    rax, rax
.text:0000000000008CA7                 jz      loc_8B7A
.text:0000000000008CAD
.text:0000000000008CAD loc_8CAD:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000008CAD                 call    _abort
.text:0000000000008CAD ; ---------------------------------------------------------------------------
.text:0000000000008CB2                 align 8
.text:0000000000008CB8
.text:0000000000008CB8 loc_8CB8:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000008CB8                 mov     [r12], rbp
.text:0000000000008CBC                 mov     eax, 1
.text:0000000000008CC1                 add     qword ptr [rbx+20h], 1
.text:0000000000008CC6                 add     qword ptr [rbx+18h], 1
.text:0000000000008CCB                 jmp     loc_8B1C
.text:0000000000008CD0 ; ---------------------------------------------------------------------------
.text:0000000000008CD0
.text:0000000000008CD0 loc_8CD0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000008CD0                 mov     edi, 10h        ; size
.text:0000000000008CD5                 call    _malloc
.text:0000000000008CDA                 test    rax, rax
.text:0000000000008CDD                 jnz     loc_8B9E
.text:0000000000008CE3
.text:0000000000008CE3 loc_8CE3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000008CE3                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000008CE3                 mov     eax, 0FFFFFFFFh
.text:0000000000008CE8                 jmp     loc_8B1C
.text:0000000000008CE8 ; ---------------------------------------------------------------------------
.text:0000000000008CED                 align 10h
.text:0000000000008CF0
.text:0000000000008CF0 loc_8CF0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000008CF0                 mov     rcx, rax
.text:0000000000008CF3                 pxor    xmm0, xmm0
.text:0000000000008CF7                 shr     rcx, 1
.text:0000000000008CFA                 and     eax, 1
.text:0000000000008CFD                 or      rcx, rax
.text:0000000000008D00                 cvtsi2ss xmm0, rcx
.text:0000000000008D05                 addss   xmm0, xmm0
.text:0000000000008D09                 jmp     loc_8C38
.text:0000000000008D09 ; ---------------------------------------------------------------------------
.text:0000000000008D0E                 align 10h
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000008D10                 mov     rcx, rax
.text:0000000000008D13                 pxor    xmm1, xmm1
.text:0000000000008D17                 shr     rcx, 1
.text:0000000000008D1A                 and     eax, 1
.text:0000000000008D1D                 or      rcx, rax
.text:0000000000008D20                 cvtsi2ss xmm1, rcx
.text:0000000000008D25                 addss   xmm1, xmm1
.text:0000000000008D29                 jmp     loc_8C4E
.text:0000000000008D29 ; ---------------------------------------------------------------------------
.text:0000000000008D2E                 align 10h
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000008D30                 subss   xmm0, cs:dword_219D0
.text:0000000000008D38                 mov     rax, 8000000000000000h
.text:0000000000008D42                 cvttss2si rsi, xmm0
.text:0000000000008D47                 xor     rsi, rax
.text:0000000000008D4A                 jmp     loc_8C88
.text:0000000000008D4F ; ---------------------------------------------------------------------------
.text:0000000000008D4F
.text:0000000000008D4F loc_8D4F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000008D4F                 call    ___stack_chk_fail
.text:0000000000008D4F ; } // starts at 8AD0
.text:0000000000008D4F hash_insert_if_absent endp
.text:0000000000008D4F
.text:0000000000008D4F ; ---------------------------------------------------------------------------
.text:0000000000008D54                 align 20h
.text:0000000000008D60
.text:0000000000008D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D60
.text:0000000000008D60 ; Attributes: info_from_lumina
.text:0000000000008D60
.text:0000000000008D60 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000008D60                 public hash_insert
.text:0000000000008D60 hash_insert     proc near               ; CODE XREF: map_device_isra_0+24↑p
.text:0000000000008D60                                         ; add_exclude+18F↑p ...
.text:0000000000008D60
.text:0000000000008D60 var_18          = qword ptr -18h
.text:0000000000008D60 var_10          = qword ptr -10h
.text:0000000000008D60
.text:0000000000008D60 ; __unwind {
.text:0000000000008D60                 push    rbx
.text:0000000000008D61                 mov     rbx, rsi
.text:0000000000008D64                 sub     rsp, 10h
.text:0000000000008D68                 mov     rdx, rsp
.text:0000000000008D6B                 mov     rax, fs:28h
.text:0000000000008D74                 mov     [rsp+18h+var_10], rax
.text:0000000000008D79                 xor     eax, eax
.text:0000000000008D7B                 call    hash_insert_if_absent
.text:0000000000008D80                 cmp     eax, 0FFFFFFFFh
.text:0000000000008D83                 jz      short loc_8DB0
.text:0000000000008D85                 test    eax, eax
.text:0000000000008D87                 jnz     short loc_8D8D
.text:0000000000008D89                 mov     rbx, [rsp+18h+var_18]
.text:0000000000008D8D
.text:0000000000008D8D loc_8D8D:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000008D8D                                         ; hash_insert+52↓j
.text:0000000000008D8D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000008D92                 xor     rcx, fs:28h
.text:0000000000008D9B                 mov     rax, rbx
.text:0000000000008D9E                 jnz     short loc_8DB4
.text:0000000000008DA0                 add     rsp, 10h
.text:0000000000008DA4                 pop     rbx
.text:0000000000008DA5                 retn
.text:0000000000008DA5 ; ---------------------------------------------------------------------------
.text:0000000000008DA6                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 loc_8DB0:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000008DB0                 xor     ebx, ebx
.text:0000000000008DB2                 jmp     short loc_8D8D
.text:0000000000008DB4 ; ---------------------------------------------------------------------------
.text:0000000000008DB4
.text:0000000000008DB4 loc_8DB4:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000008DB4                 call    ___stack_chk_fail
.text:0000000000008DB4 ; } // starts at 8D60
.text:0000000000008DB4 hash_insert     endp
.text:0000000000008DB4
.text:0000000000008DB4 ; ---------------------------------------------------------------------------
.text:0000000000008DB9                 align 20h
.text:0000000000008DC0
.text:0000000000008DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DC0
.text:0000000000008DC0 ; Attributes: info_from_lumina
.text:0000000000008DC0
.text:0000000000008DC0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000008DC0                 public hash_delete
.text:0000000000008DC0 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↓p
.text:0000000000008DC0
.text:0000000000008DC0 var_28          = qword ptr -28h
.text:0000000000008DC0 var_20          = qword ptr -20h
.text:0000000000008DC0
.text:0000000000008DC0 ; __unwind {
.text:0000000000008DC0                 push    r12
.text:0000000000008DC2                 push    rbp
.text:0000000000008DC3                 mov     ecx, 1
.text:0000000000008DC8                 push    rbx
.text:0000000000008DC9                 mov     rbx, rdi
.text:0000000000008DCC                 sub     rsp, 10h
.text:0000000000008DD0                 mov     rdx, rsp
.text:0000000000008DD3                 mov     rax, fs:28h
.text:0000000000008DDC                 mov     [rsp+28h+var_20], rax
.text:0000000000008DE1                 xor     eax, eax
.text:0000000000008DE3                 call    hash_find_entry
.text:0000000000008DE8                 test    rax, rax
.text:0000000000008DEB                 mov     rbp, rax
.text:0000000000008DEE                 jz      short loc_8DFF
.text:0000000000008DF0                 mov     rax, [rsp+28h+var_28]
.text:0000000000008DF4                 sub     qword ptr [rbx+20h], 1
.text:0000000000008DF9                 cmp     qword ptr [rax], 0
.text:0000000000008DFD                 jz      short loc_8E20
.text:0000000000008DFF
.text:0000000000008DFF loc_8DFF:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000008DFF                                         ; hash_delete+9F↓j ...
.text:0000000000008DFF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000008E04                 xor     rcx, fs:28h
.text:0000000000008E0D                 mov     rax, rbp
.text:0000000000008E10                 jnz     loc_8FBE
.text:0000000000008E16                 add     rsp, 10h
.text:0000000000008E1A                 pop     rbx
.text:0000000000008E1B                 pop     rbp
.text:0000000000008E1C                 pop     r12
.text:0000000000008E1E                 retn
.text:0000000000008E1E ; ---------------------------------------------------------------------------
.text:0000000000008E1F                 align 20h
.text:0000000000008E20
.text:0000000000008E20 loc_8E20:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000008E20                 mov     rax, [rbx+18h]
.text:0000000000008E24                 sub     rax, 1
.text:0000000000008E28                 test    rax, rax
.text:0000000000008E2B                 mov     [rbx+18h], rax
.text:0000000000008E2F                 js      loc_8F30
.text:0000000000008E35                 pxor    xmm0, xmm0
.text:0000000000008E39                 cvtsi2ss xmm0, rax
.text:0000000000008E3E
.text:0000000000008E3E loc_8E3E:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000008E3E                 mov     rax, [rbx+10h]
.text:0000000000008E42                 mov     rdx, [rbx+28h]
.text:0000000000008E46                 test    rax, rax
.text:0000000000008E49                 js      loc_8F10
.text:0000000000008E4F                 pxor    xmm1, xmm1
.text:0000000000008E53                 cvtsi2ss xmm1, rax
.text:0000000000008E58
.text:0000000000008E58 loc_8E58:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000008E58                 mulss   xmm1, dword ptr [rdx]
.text:0000000000008E5C                 ucomiss xmm1, xmm0
.text:0000000000008E5F                 jbe     short loc_8DFF
.text:0000000000008E61                 lea     rdi, [rbx+28h]
.text:0000000000008E65                 call    check_tuning
.text:0000000000008E6A                 mov     rax, [rbx+10h]
.text:0000000000008E6E                 mov     rdx, [rbx+28h]
.text:0000000000008E72                 test    rax, rax
.text:0000000000008E75                 js      loc_8FA0
.text:0000000000008E7B                 pxor    xmm0, xmm0
.text:0000000000008E7F                 cvtsi2ss xmm0, rax
.text:0000000000008E84
.text:0000000000008E84 loc_8E84:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000008E84                 mov     rax, [rbx+18h]
.text:0000000000008E88                 test    rax, rax
.text:0000000000008E8B                 js      loc_8F80
.text:0000000000008E91                 pxor    xmm1, xmm1
.text:0000000000008E95                 cvtsi2ss xmm1, rax
.text:0000000000008E9A
.text:0000000000008E9A loc_8E9A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000008E9A                 movss   xmm2, dword ptr [rdx]
.text:0000000000008E9E                 mulss   xmm2, xmm0
.text:0000000000008EA2                 ucomiss xmm2, xmm1
.text:0000000000008EA5                 jbe     loc_8DFF
.text:0000000000008EAB                 cmp     byte ptr [rdx+10h], 0
.text:0000000000008EAF                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000008EB4                 jz      loc_8F70
.text:0000000000008EBA
.text:0000000000008EBA loc_8EBA:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000008EBA                 ucomiss xmm0, cs:dword_219D0
.text:0000000000008EC1                 jnb     loc_8F50
.text:0000000000008EC7                 cvttss2si rsi, xmm0
.text:0000000000008ECC
.text:0000000000008ECC loc_8ECC:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000008ECC                 mov     rdi, rbx
.text:0000000000008ECF                 call    hash_rehash
.text:0000000000008ED4                 test    al, al
.text:0000000000008ED6                 jnz     loc_8DFF
.text:0000000000008EDC                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000008EE0                 test    rdi, rdi
.text:0000000000008EE3                 jz      short loc_8EF9
.text:0000000000008EE5                 nop     dword ptr [rax]
.text:0000000000008EE8
.text:0000000000008EE8 loc_8EE8:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000008EE8                 mov     r12, [rdi+8]
.text:0000000000008EEC                 call    free
.text:0000000000008EF1                 test    r12, r12
.text:0000000000008EF4                 mov     rdi, r12
.text:0000000000008EF7                 jnz     short loc_8EE8
.text:0000000000008EF9
.text:0000000000008EF9 loc_8EF9:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000008EF9                 mov     qword ptr [rbx+48h], 0
.text:0000000000008F01                 jmp     loc_8DFF
.text:0000000000008F01 ; ---------------------------------------------------------------------------
.text:0000000000008F06                 align 10h
.text:0000000000008F10
.text:0000000000008F10 loc_8F10:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000008F10                 mov     rcx, rax
.text:0000000000008F13                 pxor    xmm1, xmm1
.text:0000000000008F17                 shr     rcx, 1
.text:0000000000008F1A                 and     eax, 1
.text:0000000000008F1D                 or      rcx, rax
.text:0000000000008F20                 cvtsi2ss xmm1, rcx
.text:0000000000008F25                 addss   xmm1, xmm1
.text:0000000000008F29                 jmp     loc_8E58
.text:0000000000008F29 ; ---------------------------------------------------------------------------
.text:0000000000008F2E                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000008F30                 mov     rdx, rax
.text:0000000000008F33                 pxor    xmm0, xmm0
.text:0000000000008F37                 shr     rdx, 1
.text:0000000000008F3A                 and     eax, 1
.text:0000000000008F3D                 or      rdx, rax
.text:0000000000008F40                 cvtsi2ss xmm0, rdx
.text:0000000000008F45                 addss   xmm0, xmm0
.text:0000000000008F49                 jmp     loc_8E3E
.text:0000000000008F49 ; ---------------------------------------------------------------------------
.text:0000000000008F4E                 align 10h
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000008F50                 subss   xmm0, cs:dword_219D0
.text:0000000000008F58                 mov     rax, 8000000000000000h
.text:0000000000008F62                 cvttss2si rsi, xmm0
.text:0000000000008F67                 xor     rsi, rax
.text:0000000000008F6A                 jmp     loc_8ECC
.text:0000000000008F6A ; ---------------------------------------------------------------------------
.text:0000000000008F6F                 align 10h
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000008F70                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000008F75                 jmp     loc_8EBA
.text:0000000000008F75 ; ---------------------------------------------------------------------------
.text:0000000000008F7A                 align 20h
.text:0000000000008F80
.text:0000000000008F80 loc_8F80:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000008F80                 mov     rcx, rax
.text:0000000000008F83                 pxor    xmm1, xmm1
.text:0000000000008F87                 shr     rcx, 1
.text:0000000000008F8A                 and     eax, 1
.text:0000000000008F8D                 or      rcx, rax
.text:0000000000008F90                 cvtsi2ss xmm1, rcx
.text:0000000000008F95                 addss   xmm1, xmm1
.text:0000000000008F99                 jmp     loc_8E9A
.text:0000000000008F99 ; ---------------------------------------------------------------------------
.text:0000000000008F9E                 align 20h
.text:0000000000008FA0
.text:0000000000008FA0 loc_8FA0:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000008FA0                 mov     rcx, rax
.text:0000000000008FA3                 pxor    xmm0, xmm0
.text:0000000000008FA7                 shr     rcx, 1
.text:0000000000008FAA                 and     eax, 1
.text:0000000000008FAD                 or      rcx, rax
.text:0000000000008FB0                 cvtsi2ss xmm0, rcx
.text:0000000000008FB5                 addss   xmm0, xmm0
.text:0000000000008FB9                 jmp     loc_8E84
.text:0000000000008FBE ; ---------------------------------------------------------------------------
.text:0000000000008FBE
.text:0000000000008FBE loc_8FBE:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000008FBE                 call    ___stack_chk_fail
.text:0000000000008FBE ; } // starts at 8DC0
.text:0000000000008FBE hash_delete     endp
.text:0000000000008FBE
.text:0000000000008FBE ; ---------------------------------------------------------------------------
.text:0000000000008FC3                 align 10h
.text:0000000000008FD0
.text:0000000000008FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FD0
.text:0000000000008FD0 ; Attributes: info_from_lumina
.text:0000000000008FD0
.text:0000000000008FD0 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:0000000000008FD0 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:0000000000008FD0                                         ; human_readable+59A↓p ...
.text:0000000000008FD0
.text:0000000000008FD0 var_20          = qword ptr -20h
.text:0000000000008FD0 var_18          = qword ptr -18h
.text:0000000000008FD0 var_C           = word ptr -0Ch
.text:0000000000008FD0 var_A           = word ptr -0Ah
.text:0000000000008FD0 arg_0           = tbyte ptr  8
.text:0000000000008FD0
.text:0000000000008FD0 ; __unwind {
.text:0000000000008FD0                 fld     cs:dword_219D0
.text:0000000000008FD6                 fld     [rsp+arg_0]
.text:0000000000008FDA                 fucomi  st, st(1)
.text:0000000000008FDC                 jnb     short loc_9050
.text:0000000000008FDE                 fstp    st(1)
.text:0000000000008FE0                 fnstcw  [rsp+var_A]
.text:0000000000008FE4                 movzx   eax, [rsp+var_A]
.text:0000000000008FE9                 or      ah, 0Ch
.text:0000000000008FEC                 mov     [rsp+var_C], ax
.text:0000000000008FF1                 fld     st
.text:0000000000008FF3                 fldcw   [rsp+var_C]
.text:0000000000008FF7                 fistp   [rsp+var_18]
.text:0000000000008FFB                 fldcw   [rsp+var_A]
.text:0000000000008FFF                 mov     rax, [rsp+var_18]
.text:0000000000009004
.text:0000000000009004 loc_9004:                               ; CODE XREF: adjust_value+B3↓j
.text:0000000000009004                 mov     [rsp+var_20], rax
.text:0000000000009009                 test    rax, rax
.text:000000000000900C                 fild    [rsp+var_20]
.text:0000000000009010                 jns     short loc_9018
.text:0000000000009012                 fadd    cs:dword_219CC
.text:0000000000009018
.text:0000000000009018 loc_9018:                               ; CODE XREF: adjust_value+40↑j
.text:0000000000009018                 test    edi, edi
.text:000000000000901A                 jnz     short loc_9048
.text:000000000000901C                 fxch    st(1)
.text:000000000000901E                 fucomip st, st(1)
.text:0000000000009020                 jp      short loc_9028
.text:0000000000009022                 jz      short locret_904A
.text:0000000000009024                 fstp    st
.text:0000000000009026                 jmp     short loc_9030
.text:0000000000009028 ; ---------------------------------------------------------------------------
.text:0000000000009028
.text:0000000000009028 loc_9028:                               ; CODE XREF: adjust_value+50↑j
.text:0000000000009028                 fstp    st
.text:000000000000902A                 nop     word ptr [rax+rax+00h]
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: adjust_value+56↑j
.text:0000000000009030                 add     rax, 1
.text:0000000000009034                 mov     [rsp+var_20], rax
.text:0000000000009039                 test    rax, rax
.text:000000000000903C                 fild    [rsp+var_20]
.text:0000000000009040                 js      short loc_9090
.text:0000000000009042                 jmp     short locret_904A
.text:0000000000009042 ; ---------------------------------------------------------------------------
.text:0000000000009044                 align 8
.text:0000000000009048
.text:0000000000009048 loc_9048:                               ; CODE XREF: adjust_value+4A↑j
.text:0000000000009048                 fstp    st(1)
.text:000000000000904A
.text:000000000000904A locret_904A:                            ; CODE XREF: adjust_value+52↑j
.text:000000000000904A                                         ; adjust_value+72↑j
.text:000000000000904A                 rep retn
.text:000000000000904A ; ---------------------------------------------------------------------------
.text:000000000000904C                 align 10h
.text:0000000000009050
.text:0000000000009050 loc_9050:                               ; CODE XREF: adjust_value+C↑j
.text:0000000000009050                 fnstcw  [rsp+var_A]
.text:0000000000009054                 movzx   eax, [rsp+var_A]
.text:0000000000009059                 fsubr   st(1), st
.text:000000000000905B                 fxch    st(1)
.text:000000000000905D                 mov     rdx, 8000000000000000h
.text:0000000000009067                 or      ah, 0Ch
.text:000000000000906A                 mov     [rsp+var_C], ax
.text:000000000000906F                 fldcw   [rsp+var_C]
.text:0000000000009073                 fistp   [rsp+var_18]
.text:0000000000009077                 fldcw   [rsp+var_A]
.text:000000000000907B                 mov     rax, [rsp+var_18]
.text:0000000000009080                 xor     rax, rdx
.text:0000000000009083                 jmp     loc_9004
.text:0000000000009083 ; ---------------------------------------------------------------------------
.text:0000000000009088                 align 10h
.text:0000000000009090
.text:0000000000009090 loc_9090:                               ; CODE XREF: adjust_value+70↑j
.text:0000000000009090                 fadd    cs:dword_219CC
.text:0000000000009096                 retn
.text:0000000000009096 ; } // starts at 8FD0
.text:0000000000009096 adjust_value    endp
.text:0000000000009096
.text:0000000000009096 ; ---------------------------------------------------------------------------
.text:0000000000009097                 align 20h
.text:00000000000090A0
.text:00000000000090A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090A0
.text:00000000000090A0 ; Attributes: info_from_lumina
.text:00000000000090A0
.text:00000000000090A0 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:00000000000090A0                 public human_readable
.text:00000000000090A0 human_readable  proc near               ; CODE XREF: print_only_size+3D↑p
.text:00000000000090A0
.text:00000000000090A0 var_D8          = tbyte ptr -0D8h
.text:00000000000090A0 s               = qword ptr -0C8h
.text:00000000000090A0 var_C0          = qword ptr -0C0h
.text:00000000000090A0 var_B8          = qword ptr -0B8h
.text:00000000000090A0 src             = qword ptr -0B0h
.text:00000000000090A0 var_A8          = tbyte ptr -0A8h
.text:00000000000090A0 var_98          = dword ptr -98h
.text:00000000000090A0 var_94          = dword ptr -94h
.text:00000000000090A0 var_90          = qword ptr -90h
.text:00000000000090A0 n               = qword ptr -88h
.text:00000000000090A0 var_80          = qword ptr -80h
.text:00000000000090A0 var_78          = byte ptr -78h
.text:00000000000090A0 var_40          = qword ptr -40h
.text:00000000000090A0
.text:00000000000090A0 ; __unwind {
.text:00000000000090A0                 push    r15
.text:00000000000090A2                 push    r14
.text:00000000000090A4                 mov     eax, edx
.text:00000000000090A6                 push    r13
.text:00000000000090A8                 push    r12
.text:00000000000090AA                 mov     r15d, edx
.text:00000000000090AD                 push    rbp
.text:00000000000090AE                 push    rbx
.text:00000000000090AF                 and     eax, 20h
.text:00000000000090B2                 and     r15d, 3
.text:00000000000090B6                 mov     r12d, edx
.text:00000000000090B9                 mov     rbx, rdi
.text:00000000000090BC                 sub     rsp, 98h
.text:00000000000090C3                 mov     [rsp+0C8h+src], rcx
.text:00000000000090C8                 mov     [rsp+0C8h+var_98], eax
.text:00000000000090CC                 mov     rcx, fs:28h
.text:00000000000090D5                 mov     [rsp+0C8h+var_40], rcx
.text:00000000000090DD                 xor     ecx, ecx
.text:00000000000090DF                 cmp     eax, 1
.text:00000000000090E2                 mov     [rsp+0C8h+s], rsi
.text:00000000000090E6                 mov     [rsp+0C8h+var_B8], r8
.text:00000000000090EB                 sbb     eax, eax
.text:00000000000090ED                 and     eax, 0FFFFFFE8h
.text:00000000000090F0                 add     eax, 400h
.text:00000000000090F5                 mov     [rsp+0C8h+var_94], eax
.text:00000000000090F9                 call    _localeconv
.text:00000000000090FE                 mov     r14, [rax]
.text:0000000000009101                 mov     r13, rax
.text:0000000000009104                 mov     rdi, r14        ; s
.text:0000000000009107                 call    _strlen
.text:000000000000910C                 mov     rcx, [r13+10h]
.text:0000000000009110                 mov     r13, [r13+8]
.text:0000000000009114                 mov     rbp, rax
.text:0000000000009117                 sub     rax, 1
.text:000000000000911B                 mov     edx, 1
.text:0000000000009120                 cmp     rax, 10h
.text:0000000000009124                 lea     rax, asc_2269B+1 ; "."
.text:000000000000912B                 mov     rdi, r13        ; s
.text:000000000000912E                 cmovnb  rbp, rdx
.text:0000000000009132                 mov     [rsp+0C8h+var_90], rcx
.text:0000000000009137                 cmovnb  r14, rax
.text:000000000000913B                 call    _strlen
.text:0000000000009140                 cmp     rax, 11h
.text:0000000000009144                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:000000000000914B                 mov     rdi, [rsp+0C8h+var_B8]
.text:0000000000009150                 mov     rcx, [rsp+0C8h+src]
.text:0000000000009155                 cmovnb  r13, rax
.text:0000000000009159                 mov     rax, [rsp+0C8h+s]
.text:000000000000915D                 add     rax, 287h
.text:0000000000009163                 cmp     rdi, rcx
.text:0000000000009166                 mov     [rsp+0C8h+var_C0], rax
.text:000000000000916B                 ja      loc_92B8
.text:0000000000009171                 xor     edx, edx
.text:0000000000009173                 mov     rax, rcx
.text:0000000000009176                 div     rdi
.text:0000000000009179                 test    rdx, rdx
.text:000000000000917C                 mov     rdi, rax
.text:000000000000917F                 jz      loc_94E0
.text:0000000000009185
.text:0000000000009185 loc_9185:                               ; CODE XREF: human_readable+21B↓j
.text:0000000000009185                                         ; human_readable+231↓j ...
.text:0000000000009185                 mov     [rsp+0C8h+src], rcx
.text:000000000000918A                 test    rcx, rcx
.text:000000000000918D                 fild    [rsp+0C8h+src]
.text:0000000000009191                 jns     short loc_9199
.text:0000000000009193                 fadd    cs:dword_219CC
.text:0000000000009199
.text:0000000000009199 loc_9199:                               ; CODE XREF: human_readable+F1↑j
.text:0000000000009199                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000919E                 mov     [rsp+0C8h+src], rax
.text:00000000000091A3                 test    rax, rax
.text:00000000000091A6                 fild    [rsp+0C8h+src]
.text:00000000000091AA                 jns     short loc_91B2
.text:00000000000091AC                 fadd    cs:dword_219CC
.text:00000000000091B2
.text:00000000000091B2 loc_91B2:                               ; CODE XREF: human_readable+10A↑j
.text:00000000000091B2                 fdivp   st(1), st
.text:00000000000091B4                 mov     [rsp+0C8h+src], rbx
.text:00000000000091B9                 test    rbx, rbx
.text:00000000000091BC                 fild    [rsp+0C8h+src]
.text:00000000000091C0                 jns     short loc_91C8
.text:00000000000091C2                 fadd    cs:dword_219CC
.text:00000000000091C8
.text:00000000000091C8 loc_91C8:                               ; CODE XREF: human_readable+120↑j
.text:00000000000091C8                 test    r12b, 10h
.text:00000000000091CC                 fmulp   st(1), st
.text:00000000000091CE                 jz      loc_9398
.text:00000000000091D4                 fild    [rsp+0C8h+var_94]
.text:00000000000091D8                 xor     ebx, ebx
.text:00000000000091DA                 fld     st
.text:00000000000091DC                 jmp     short loc_91E4
.text:00000000000091DC ; ---------------------------------------------------------------------------
.text:00000000000091DE                 align 20h
.text:00000000000091E0
.text:00000000000091E0 loc_91E0:                               ; CODE XREF: human_readable+154↓j
.text:00000000000091E0                 fstp    st(1)
.text:00000000000091E2                 fxch    st(2)
.text:00000000000091E4
.text:00000000000091E4 loc_91E4:                               ; CODE XREF: human_readable+13C↑j
.text:00000000000091E4                 fld     st
.text:00000000000091E6                 add     ebx, 1
.text:00000000000091E9                 fmul    st, st(2)
.text:00000000000091EB                 fxch    st(3)
.text:00000000000091ED                 fucomi  st, st(3)
.text:00000000000091EF                 jb      short loc_9200
.text:00000000000091F1                 cmp     ebx, 8
.text:00000000000091F4                 jnz     short loc_91E0
.text:00000000000091F6                 fstp    st(2)
.text:00000000000091F8                 fstp    st(2)
.text:00000000000091FA                 jmp     short loc_9204
.text:00000000000091FA ; ---------------------------------------------------------------------------
.text:00000000000091FC                 align 20h
.text:0000000000009200
.text:0000000000009200 loc_9200:                               ; CODE XREF: human_readable+14F↑j
.text:0000000000009200                 fstp    st(2)
.text:0000000000009202                 fstp    st(2)
.text:0000000000009204
.text:0000000000009204 loc_9204:                               ; CODE XREF: human_readable+15A↑j
.text:0000000000009204                 mov     ecx, [rsp+0C8h+var_98]
.text:0000000000009208                 add     rbp, 1
.text:000000000000920C                 xor     eax, eax
.text:000000000000920E                 fdivrp  st(1), st
.text:0000000000009210                 test    ecx, ecx
.text:0000000000009212                 setz    al
.text:0000000000009215                 cmp     r15d, 1
.text:0000000000009219                 lea     rax, [rbp+rax+1]
.text:000000000000921E                 mov     [rsp+0C8h+src], rax
.text:0000000000009223                 jz      loc_9790
.text:0000000000009229                 fld     cs:tbyte_21A30
.text:000000000000922F                 fucomip st, st(1)
.text:0000000000009231                 ja      loc_9608
.text:0000000000009237                 fld     st
.text:0000000000009239
.text:0000000000009239 loc_9239:                               ; CODE XREF: human_readable+583↓j
.text:0000000000009239                 fstp    [rsp+0C8h+var_A8]
.text:000000000000923D                 sub     rsp, 10h
.text:0000000000009241                 lea     rcx, a1lf       ; "%.1Lf"
.text:0000000000009248                 mov     esi, 1
.text:000000000000924D                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009254                 xor     eax, eax
.text:0000000000009256                 mov     r14, [rsp+0D8h+s]
.text:000000000000925B                 mov     rdi, r14
.text:000000000000925E                 fstp    [rsp+0D8h+var_D8]
.text:0000000000009261                 call    ___sprintf_chk
.text:0000000000009266                 mov     rdi, r14        ; s
.text:0000000000009269                 call    _strlen
.text:000000000000926E                 pop     rcx
.text:000000000000926F                 pop     rsi
.text:0000000000009270                 cmp     rax, [rsp+0C8h+src]
.text:0000000000009275                 mov     r14, rax
.text:0000000000009278                 fld     [rsp+0C8h+var_A8]
.text:000000000000927C                 ja      loc_9828
.text:0000000000009282
.text:0000000000009282 loc_9282:                               ; CODE XREF: human_readable+735↓j
.text:0000000000009282                 test    r12b, 8
.text:0000000000009286                 jz      loc_93F0
.text:000000000000928C                 mov     rax, [rsp+0C8h+s]
.text:0000000000009290                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:0000000000009296                 jnz     loc_93F8
.text:000000000000929C                 fld     cs:flt_21A2C
.text:00000000000092A2                 cmp     r15d, 1
.text:00000000000092A6                 fmul    st(1), st
.text:00000000000092A8                 jnz     loc_9830
.text:00000000000092AE                 jmp     loc_97E3
.text:00000000000092AE ; ---------------------------------------------------------------------------
.text:00000000000092B3                 align 8
.text:00000000000092B8
.text:00000000000092B8 loc_92B8:                               ; CODE XREF: human_readable+CB↑j
.text:00000000000092B8                 test    rcx, rcx
.text:00000000000092BB                 jz      loc_9185
.text:00000000000092C1                 mov     rax, [rsp+0C8h+var_B8]
.text:00000000000092C6                 xor     edx, edx
.text:00000000000092C8                 div     rcx
.text:00000000000092CB                 test    rdx, rdx
.text:00000000000092CE                 mov     r8, rax
.text:00000000000092D1                 jnz     loc_9185
.text:00000000000092D7                 mov     rax, rbx
.text:00000000000092DA                 xor     edx, edx
.text:00000000000092DC                 div     r8
.text:00000000000092DF                 mov     rbx, rax
.text:00000000000092E2                 lea     rax, [rdx+rdx*4]
.text:00000000000092E6                 xor     edx, edx
.text:00000000000092E8                 mov     rsi, rbx
.text:00000000000092EB                 add     rax, rax
.text:00000000000092EE                 div     r8
.text:00000000000092F1                 add     rdx, rdx
.text:00000000000092F4                 mov     r9d, eax
.text:00000000000092F7                 cmp     r8, rdx
.text:00000000000092FA                 jbe     loc_9888
.text:0000000000009300                 xor     edi, edi
.text:0000000000009302                 test    rdx, rdx
.text:0000000000009305                 setnz   dil
.text:0000000000009309
.text:0000000000009309 loc_9309:                               ; CODE XREF: human_readable+45D↓j
.text:0000000000009309                                         ; human_readable+7F3↓j
.text:0000000000009309                 mov     ecx, r12d
.text:000000000000930C                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000009311                 mov     ebx, 0FFFFFFFFh
.text:0000000000009316                 and     ecx, 10h
.text:0000000000009319                 jz      loc_96E0
.text:000000000000931F                 mov     r8d, [rsp+0C8h+var_94]
.text:0000000000009324                 cmp     r8, rsi
.text:0000000000009327                 mov     r11, r8
.text:000000000000932A                 ja      loc_98A0
.text:0000000000009330                 xor     ebx, ebx
.text:0000000000009332                 jmp     short loc_9357
.text:0000000000009332 ; ---------------------------------------------------------------------------
.text:0000000000009334                 align 8
.text:0000000000009338
.text:0000000000009338 loc_9338:                               ; CODE XREF: human_readable+2E0↓j
.text:0000000000009338                 test    edi, edi
.text:000000000000933A                 setnz   dil
.text:000000000000933E                 movzx   edi, dil
.text:0000000000009342
.text:0000000000009342 loc_9342:                               ; CODE XREF: human_readable+2F0↓j
.text:0000000000009342                 add     ebx, 1
.text:0000000000009345                 cmp     r8, r10
.text:0000000000009348                 ja      loc_965D
.text:000000000000934E                 cmp     ebx, 8
.text:0000000000009351                 jz      loc_98F8
.text:0000000000009357
.text:0000000000009357 loc_9357:                               ; CODE XREF: human_readable+292↑j
.text:0000000000009357                 mov     rax, rsi
.text:000000000000935A                 xor     edx, edx
.text:000000000000935C                 mov     esi, edi
.text:000000000000935E                 div     r8
.text:0000000000009361                 sar     esi, 1
.text:0000000000009363                 mov     r10, rax
.text:0000000000009366                 lea     eax, [rdx+rdx*4]
.text:0000000000009369                 xor     edx, edx
.text:000000000000936B                 lea     eax, [r9+rax*2]
.text:000000000000936F                 div     r11d
.text:0000000000009372                 lea     edx, [rsi+rdx*2]
.text:0000000000009375                 mov     r9d, eax
.text:0000000000009378                 mov     rsi, r10
.text:000000000000937B                 add     edi, edx
.text:000000000000937D                 cmp     r11d, edx
.text:0000000000009380                 ja      short loc_9338
.text:0000000000009382                 cmp     r11d, edi
.text:0000000000009385                 setb    dil
.text:0000000000009389                 movzx   edi, dil
.text:000000000000938D                 add     edi, 2
.text:0000000000009390                 jmp     short loc_9342
.text:0000000000009390 ; ---------------------------------------------------------------------------
.text:0000000000009392                 align 8
.text:0000000000009398
.text:0000000000009398 loc_9398:                               ; CODE XREF: human_readable+12E↑j
.text:0000000000009398                 cmp     r15d, 1
.text:000000000000939C                 jz      short loc_93AC
.text:000000000000939E                 fld     cs:tbyte_21A30
.text:00000000000093A4                 fucomip st, st(1)
.text:00000000000093A6                 ja      loc_9630
.text:00000000000093AC
.text:00000000000093AC loc_93AC:                               ; CODE XREF: human_readable+2FC↑j
.text:00000000000093AC                                         ; human_readable+5A3↓j
.text:00000000000093AC                 sub     rsp, 10h
.text:00000000000093B0                 lea     rcx, a0lf       ; "%.0Lf"
.text:00000000000093B7                 mov     esi, 1
.text:00000000000093BC                 mov     rbx, [rsp+0D8h+s]
.text:00000000000093C1                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000093C8                 xor     eax, eax
.text:00000000000093CA                 fstp    [rsp+0D8h+var_D8]
.text:00000000000093CD                 xor     ebp, ebp
.text:00000000000093CF                 mov     rdi, rbx
.text:00000000000093D2                 call    ___sprintf_chk
.text:00000000000093D7                 mov     rdi, rbx        ; s
.text:00000000000093DA                 mov     ebx, 0FFFFFFFFh
.text:00000000000093DF                 call    _strlen
.text:00000000000093E4                 pop     rsi
.text:00000000000093E5                 pop     rdi
.text:00000000000093E6                 mov     r14, rax
.text:00000000000093E9                 jmp     short loc_9400
.text:00000000000093E9 ; ---------------------------------------------------------------------------
.text:00000000000093EB                 align 10h
.text:00000000000093F0
.text:00000000000093F0 loc_93F0:                               ; CODE XREF: human_readable+1E6↑j
.text:00000000000093F0                 fstp    st
.text:00000000000093F2                 jmp     short loc_9400
.text:00000000000093F2 ; ---------------------------------------------------------------------------
.text:00000000000093F4                 align 8
.text:00000000000093F8
.text:00000000000093F8 loc_93F8:                               ; CODE XREF: human_readable+1F6↑j
.text:00000000000093F8                 fstp    st
.text:00000000000093FA                 nop     word ptr [rax+rax+00h]
.text:0000000000009400
.text:0000000000009400 loc_9400:                               ; CODE XREF: human_readable+349↑j
.text:0000000000009400                                         ; human_readable+352↑j ...
.text:0000000000009400                 mov     r15, [rsp+0C8h+var_C0]
.text:0000000000009405                 mov     rsi, [rsp+0C8h+s] ; src
.text:0000000000009409                 mov     rdx, r14        ; n
.text:000000000000940C                 sub     r15, r14
.text:000000000000940F                 sub     r14, rbp
.text:0000000000009412                 mov     rdi, r15        ; dest
.text:0000000000009415                 call    _memmove
.text:000000000000941A                 mov     r8, r14
.text:000000000000941D                 add     r8, r15
.text:0000000000009420
.text:0000000000009420 loc_9420:                               ; CODE XREF: human_readable+6A6↓j
.text:0000000000009420                                         ; human_readable+84F↓j
.text:0000000000009420                 test    r12b, 4
.text:0000000000009424                 jnz     loc_9508
.text:000000000000942A
.text:000000000000942A loc_942A:                               ; CODE XREF: human_readable+53F↓j
.text:000000000000942A                                         ; human_readable+A02↓j
.text:000000000000942A                 test    r12b, 80h
.text:000000000000942E                 jz      short loc_94A7
.text:0000000000009430                 cmp     ebx, 0FFFFFFFFh
.text:0000000000009433                 jz      loc_9750
.text:0000000000009439
.text:0000000000009439 loc_9439:                               ; CODE XREF: human_readable+6D4↓j
.text:0000000000009439                                         ; human_readable+6E2↓j ...
.text:0000000000009439                 mov     eax, r12d
.text:000000000000943C                 and     eax, 100h
.text:0000000000009441                 mov     ecx, eax
.text:0000000000009443                 or      ecx, ebx
.text:0000000000009445                 jz      short loc_94A7
.text:0000000000009447                 and     r12d, 40h
.text:000000000000944B                 jnz     loc_95E8
.text:0000000000009451
.text:0000000000009451 loc_9451:                               ; CODE XREF: human_readable+55F↓j
.text:0000000000009451                 test    ebx, ebx
.text:0000000000009453                 jz      loc_9A86
.text:0000000000009459                 cmp     ebx, 1
.text:000000000000945C                 jnz     short loc_946C
.text:000000000000945E                 mov     r9d, [rsp+0C8h+var_98]
.text:0000000000009463                 test    r9d, r9d
.text:0000000000009466                 jz      loc_98B0
.text:000000000000946C
.text:000000000000946C loc_946C:                               ; CODE XREF: human_readable+3BC↑j
.text:000000000000946C                 lea     rcx, power_letter
.text:0000000000009473                 movsxd  rbx, ebx
.text:0000000000009476                 mov     rdi, [rsp+0C8h+var_C0]
.text:000000000000947B                 test    eax, eax
.text:000000000000947D                 movzx   ecx, byte ptr [rcx+rbx]
.text:0000000000009481                 lea     rdx, [rdi+1]
.text:0000000000009485                 mov     [rdi], cl
.text:0000000000009487                 jz      loc_98C4
.text:000000000000948D                 mov     r8d, [rsp+0C8h+var_98]
.text:0000000000009492                 test    r8d, r8d
.text:0000000000009495                 jnz     loc_9650
.text:000000000000949B
.text:000000000000949B loc_949B:                               ; CODE XREF: human_readable+5B8↓j
.text:000000000000949B                                         ; human_readable+81E↓j ...
.text:000000000000949B                 lea     rax, [rdx+1]
.text:000000000000949F                 mov     byte ptr [rdx], 42h ; 'B'
.text:00000000000094A2                 mov     [rsp+0C8h+var_C0], rax
.text:00000000000094A7
.text:00000000000094A7 loc_94A7:                               ; CODE XREF: human_readable+38E↑j
.text:00000000000094A7                                         ; human_readable+3A5↑j ...
.text:00000000000094A7                 mov     rax, [rsp+0C8h+var_C0]
.text:00000000000094AC                 mov     rcx, [rsp+0C8h+var_40]
.text:00000000000094B4                 xor     rcx, fs:28h
.text:00000000000094BD                 mov     byte ptr [rax], 0
.text:00000000000094C0                 mov     rax, r15
.text:00000000000094C3                 jnz     loc_9A5B
.text:00000000000094C9                 add     rsp, 98h
.text:00000000000094D0                 pop     rbx
.text:00000000000094D1                 pop     rbp
.text:00000000000094D2                 pop     r12
.text:00000000000094D4                 pop     r13
.text:00000000000094D6                 pop     r14
.text:00000000000094D8                 pop     r15
.text:00000000000094DA                 retn
.text:00000000000094DA ; ---------------------------------------------------------------------------
.text:00000000000094DB                 align 20h
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: human_readable+DF↑j
.text:00000000000094E0                 mov     rsi, rbx
.text:00000000000094E3                 xor     edx, edx
.text:00000000000094E5                 imul    rsi, rax
.text:00000000000094E9                 mov     rax, rsi
.text:00000000000094EC                 div     rdi
.text:00000000000094EF                 cmp     rax, rbx
.text:00000000000094F2                 jnz     loc_9185
.text:00000000000094F8                 xor     edi, edi
.text:00000000000094FA                 xor     r9d, r9d
.text:00000000000094FD                 jmp     loc_9309
.text:00000000000094FD ; ---------------------------------------------------------------------------
.text:0000000000009502                 align 8
.text:0000000000009508
.text:0000000000009508 loc_9508:                               ; CODE XREF: human_readable+384↑j
.text:0000000000009508                 mov     r14, r8
.text:000000000000950B                 mov     rdi, r13        ; s
.text:000000000000950E                 mov     [rsp+0C8h+var_80], r8
.text:0000000000009513                 sub     r14, r15
.text:0000000000009516                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000951D                 call    _strlen
.text:0000000000009522                 lea     rdi, [rsp+0C8h+var_78]
.text:0000000000009527                 mov     ecx, 29h ; ')'
.text:000000000000952C                 mov     rdx, r14
.text:000000000000952F                 mov     rsi, r15
.text:0000000000009532                 mov     [rsp+0C8h+n], rax
.text:0000000000009537                 mov     [rsp+0C8h+src], rdi
.text:000000000000953C                 call    ___memcpy_chk
.text:0000000000009541                 mov     ecx, r12d
.text:0000000000009544                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:0000000000009548                 mov     r12, r14
.text:000000000000954B                 mov     rbx, r13
.text:000000000000954E                 mov     r8, [rsp+0C8h+var_80]
.text:0000000000009553                 mov     r15, [rsp+0C8h+var_90]
.text:0000000000009558                 mov     r13, [rsp+0C8h+n]
.text:000000000000955D                 mov     r14d, ecx
.text:0000000000009560                 jmp     short loc_95A2
.text:0000000000009560 ; ---------------------------------------------------------------------------
.text:0000000000009562                 align 8
.text:0000000000009568
.text:0000000000009568 loc_9568:                               ; CODE XREF: human_readable+51A↓j
.text:0000000000009568                 mov     rax, [rsp+0C8h+src]
.text:000000000000956D                 sub     r12, rbp
.text:0000000000009570                 sub     r8, rbp
.text:0000000000009573                 mov     rdi, r8         ; dest
.text:0000000000009576                 mov     rdx, rbp        ; n
.text:0000000000009579                 lea     rsi, [rax+r12]  ; src
.text:000000000000957D                 call    _memcpy
.text:0000000000009582                 test    r12, r12
.text:0000000000009585                 mov     r8, rax
.text:0000000000009588                 jz      loc_9A98
.text:000000000000958E                 sub     r8, r13
.text:0000000000009591                 mov     rdx, r13        ; n
.text:0000000000009594                 mov     rsi, rbx        ; src
.text:0000000000009597                 mov     rdi, r8         ; dest
.text:000000000000959A                 call    _memcpy
.text:000000000000959F                 mov     r8, rax
.text:00000000000095A2
.text:00000000000095A2 loc_95A2:                               ; CODE XREF: human_readable+4C0↑j
.text:00000000000095A2                 movzx   eax, byte ptr [r15]
.text:00000000000095A6                 test    al, al
.text:00000000000095A8                 jz      short loc_95B7
.text:00000000000095AA                 cmp     al, 7Fh
.text:00000000000095AC                 movzx   ebp, al
.text:00000000000095AF                 cmovnb  rbp, r12
.text:00000000000095B3                 add     r15, 1
.text:00000000000095B7
.text:00000000000095B7 loc_95B7:                               ; CODE XREF: human_readable+508↑j
.text:00000000000095B7                 cmp     rbp, r12
.text:00000000000095BA                 jbe     short loc_9568
.text:00000000000095BC                 mov     eax, r14d
.text:00000000000095BF                 mov     r15, r8
.text:00000000000095C2                 mov     r14, r12
.text:00000000000095C5                 mov     rsi, [rsp+0C8h+src] ; src
.text:00000000000095CA                 sub     r15, r14
.text:00000000000095CD                 mov     rdx, r14        ; n
.text:00000000000095D0                 mov     rdi, r15        ; dest
.text:00000000000095D3                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:00000000000095D7                 mov     r12d, eax
.text:00000000000095DA                 call    _memcpy
.text:00000000000095DF                 jmp     loc_942A
.text:00000000000095DF ; ---------------------------------------------------------------------------
.text:00000000000095E4                 align 8
.text:00000000000095E8
.text:00000000000095E8 loc_95E8:                               ; CODE XREF: human_readable+3AB↑j
.text:00000000000095E8                 mov     rcx, [rsp+0C8h+s]
.text:00000000000095EC                 lea     rdi, [rcx+288h]
.text:00000000000095F3                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:00000000000095FA                 mov     [rsp+0C8h+var_C0], rdi
.text:00000000000095FF                 jmp     loc_9451
.text:00000000000095FF ; ---------------------------------------------------------------------------
.text:0000000000009604                 align 8
.text:0000000000009608
.text:0000000000009608 loc_9608:                               ; CODE XREF: human_readable+191↑j
.text:0000000000009608                 sub     rsp, 10h
.text:000000000000960C                 mov     edi, r15d
.text:000000000000960F                 fld     st
.text:0000000000009611                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000009614                 fstp    [rsp+0D8h+var_A8]
.text:0000000000009618                 call    adjust_value
.text:000000000000961D                 pop     rax
.text:000000000000961E                 pop     rdx
.text:000000000000961F                 fld     [rsp+0C8h+var_A8]
.text:0000000000009623                 jmp     loc_9239
.text:0000000000009623 ; ---------------------------------------------------------------------------
.text:0000000000009628                 align 10h
.text:0000000000009630
.text:0000000000009630 loc_9630:                               ; CODE XREF: human_readable+306↑j
.text:0000000000009630                 sub     rsp, 10h
.text:0000000000009634                 mov     edi, r15d
.text:0000000000009637                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:000000000000963A                 call    adjust_value
.text:000000000000963F                 pop     r8
.text:0000000000009641                 pop     r9
.text:0000000000009643                 jmp     loc_93AC
.text:0000000000009643 ; ---------------------------------------------------------------------------
.text:0000000000009648                 align 10h
.text:0000000000009650
.text:0000000000009650 loc_9650:                               ; CODE XREF: human_readable+3F5↑j
.text:0000000000009650                 lea     rdx, [rdi+2]
.text:0000000000009654                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:0000000000009658                 jmp     loc_949B
.text:000000000000965D ; ---------------------------------------------------------------------------
.text:000000000000965D
.text:000000000000965D loc_965D:                               ; CODE XREF: human_readable+2A8↑j
.text:000000000000965D                 cmp     r10, 9
.text:0000000000009661                 ja      loc_98F8
.text:0000000000009667                 cmp     r15d, 1
.text:000000000000966B                 jz      loc_9922
.text:0000000000009671                 test    r15d, r15d
.text:0000000000009674                 setz    dl
.text:0000000000009677                 test    edi, edi
.text:0000000000009679                 setnle  r8b
.text:000000000000967D                 and     edx, r8d
.text:0000000000009680
.text:0000000000009680 loc_9680:                               ; CODE XREF: human_readable+88F↓j
.text:0000000000009680                 test    dl, dl
.text:0000000000009682                 jz      loc_9909
.text:0000000000009688                 lea     r9d, [rax+1]
.text:000000000000968C                 cmp     r9d, 0Ah
.text:0000000000009690                 jz      loc_9991
.text:0000000000009696
.text:0000000000009696 loc_9696:                               ; CODE XREF: human_readable+86B↓j
.text:0000000000009696                 add     r9d, 30h ; '0'
.text:000000000000969A
.text:000000000000969A loc_969A:                               ; CODE XREF: human_readable+87D↓j
.text:000000000000969A                 mov     rax, [rsp+0C8h+s]
.text:000000000000969E                 lea     r8, [rax+286h]
.text:00000000000096A5                 mov     [rax+286h], r9b
.text:00000000000096AC                 mov     eax, ebp
.text:00000000000096AE                 sub     r8, rbp
.text:00000000000096B1                 cmp     ebp, 8
.text:00000000000096B4                 jnb     loc_9941
.text:00000000000096BA                 test    bpl, 4
.text:00000000000096BE                 jnz     loc_9A46
.text:00000000000096C4                 test    eax, eax
.text:00000000000096C6                 jz      short loc_96D7
.text:00000000000096C8                 movzx   edx, byte ptr [r14]
.text:00000000000096CC                 test    al, 2
.text:00000000000096CE                 mov     [r8], dl
.text:00000000000096D1                 jnz     loc_9A60
.text:00000000000096D7
.text:00000000000096D7 loc_96D7:                               ; CODE XREF: human_readable+626↑j
.text:00000000000096D7                                         ; human_readable+8CF↓j ...
.text:00000000000096D7                 xor     edi, edi
.text:00000000000096D9                 xor     r9d, r9d
.text:00000000000096DC                 nop     dword ptr [rax+00h]
.text:00000000000096E0
.text:00000000000096E0 loc_96E0:                               ; CODE XREF: human_readable+279↑j
.text:00000000000096E0                                         ; human_readable+807↓j ...
.text:00000000000096E0                 cmp     r15d, 1
.text:00000000000096E4                 jz      loc_9860
.text:00000000000096EA                 test    r15d, r15d
.text:00000000000096ED                 jnz     short loc_9710
.text:00000000000096EF                 add     edi, r9d
.text:00000000000096F2                 test    edi, edi
.text:00000000000096F4                 jle     short loc_9710
.text:00000000000096F6
.text:00000000000096F6 loc_96F6:                               ; CODE XREF: human_readable+7D9↓j
.text:00000000000096F6                 add     rsi, 1
.text:00000000000096FA                 test    ecx, ecx
.text:00000000000096FC                 jz      short loc_9710
.text:00000000000096FE                 mov     eax, [rsp+0C8h+var_94]
.text:0000000000009702                 cmp     rax, rsi
.text:0000000000009705                 jz      loc_98D0
.text:000000000000970B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009710
.text:0000000000009710 loc_9710:                               ; CODE XREF: human_readable+64D↑j
.text:0000000000009710                                         ; human_readable+654↑j ...
.text:0000000000009710                 mov     r15, r8
.text:0000000000009713                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:000000000000971D                 nop     dword ptr [rax]
.text:0000000000009720
.text:0000000000009720 loc_9720:                               ; CODE XREF: human_readable+6A4↓j
.text:0000000000009720                 mov     rax, rsi
.text:0000000000009723                 sub     r15, 1
.text:0000000000009727                 mul     rcx
.text:000000000000972A                 shr     rdx, 3
.text:000000000000972E                 lea     rax, [rdx+rdx*4]
.text:0000000000009732                 add     rax, rax
.text:0000000000009735                 sub     rsi, rax
.text:0000000000009738                 add     esi, 30h ; '0'
.text:000000000000973B                 test    rdx, rdx
.text:000000000000973E                 mov     [r15], sil
.text:0000000000009741                 mov     rsi, rdx
.text:0000000000009744                 jnz     short loc_9720
.text:0000000000009746                 jmp     loc_9420
.text:0000000000009746 ; ---------------------------------------------------------------------------
.text:000000000000974B                 align 10h
.text:0000000000009750
.text:0000000000009750 loc_9750:                               ; CODE XREF: human_readable+393↑j
.text:0000000000009750                 mov     rcx, [rsp+0C8h+var_B8]
.text:0000000000009755                 cmp     rcx, 1
.text:0000000000009759                 jbe     loc_9902
.text:000000000000975F                 mov     edx, [rsp+0C8h+var_94]
.text:0000000000009763                 mov     ebx, 1
.text:0000000000009768                 mov     eax, 1
.text:000000000000976D
.text:000000000000976D loc_976D:                               ; CODE XREF: human_readable+6E0↓j
.text:000000000000976D                 imul    rax, rdx
.text:0000000000009771                 cmp     rcx, rax
.text:0000000000009774                 jbe     loc_9439
.text:000000000000977A                 add     ebx, 1
.text:000000000000977D                 cmp     ebx, 8
.text:0000000000009780                 jnz     short loc_976D
.text:0000000000009782                 jmp     loc_9439
.text:0000000000009782 ; ---------------------------------------------------------------------------
.text:0000000000009787                 align 10h
.text:0000000000009790
.text:0000000000009790 loc_9790:                               ; CODE XREF: human_readable+183↑j
.text:0000000000009790                 sub     rsp, 10h
.text:0000000000009794                 lea     rcx, a1lf       ; "%.1Lf"
.text:000000000000979B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000097A2                 fld     st
.text:00000000000097A4                 fstp    [rsp+0D8h+var_D8]
.text:00000000000097A7                 mov     r14, [rsp+0D8h+s]
.text:00000000000097AC                 mov     esi, 1
.text:00000000000097B1                 xor     eax, eax
.text:00000000000097B3                 mov     rdi, r14
.text:00000000000097B6                 fstp    [rsp+0D8h+var_A8]
.text:00000000000097BA                 call    ___sprintf_chk
.text:00000000000097BF                 mov     rdi, r14        ; s
.text:00000000000097C2                 call    _strlen
.text:00000000000097C7                 mov     r14, rax
.text:00000000000097CA                 pop     rax
.text:00000000000097CB                 pop     rdx
.text:00000000000097CC                 cmp     r14, [rsp+0C8h+src]
.text:00000000000097D1                 fld     [rsp+0C8h+var_A8]
.text:00000000000097D5                 jbe     loc_9282
.text:00000000000097DB                 fld     cs:flt_21A2C
.text:00000000000097E1                 fmul    st(1), st
.text:00000000000097E3
.text:00000000000097E3 loc_97E3:                               ; CODE XREF: human_readable+20E↑j
.text:00000000000097E3                                         ; human_readable+798↓j ...
.text:00000000000097E3                 fdivp   st(1), st
.text:00000000000097E5                 sub     rsp, 10h
.text:00000000000097E9                 lea     rcx, a0lf       ; "%.0Lf"
.text:00000000000097F0                 mov     r14, [rsp+0D8h+s]
.text:00000000000097F5                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000097FC                 mov     esi, 1
.text:0000000000009801                 xor     eax, eax
.text:0000000000009803                 xor     ebp, ebp
.text:0000000000009805                 mov     rdi, r14
.text:0000000000009808                 fstp    [rsp+0D8h+var_D8]
.text:000000000000980B                 call    ___sprintf_chk
.text:0000000000009810                 mov     rdi, r14        ; s
.text:0000000000009813                 call    _strlen
.text:0000000000009818                 pop     r10
.text:000000000000981A                 mov     r14, rax
.text:000000000000981D                 pop     r11
.text:000000000000981F                 jmp     loc_9400
.text:000000000000981F ; ---------------------------------------------------------------------------
.text:0000000000009824                 align 8
.text:0000000000009828
.text:0000000000009828 loc_9828:                               ; CODE XREF: human_readable+1DC↑j
.text:0000000000009828                 fld     cs:flt_21A2C
.text:000000000000982E                 fmul    st(1), st
.text:0000000000009830
.text:0000000000009830 loc_9830:                               ; CODE XREF: human_readable+208↑j
.text:0000000000009830                 fld     cs:tbyte_21A30
.text:0000000000009836                 fucomip st, st(2)
.text:0000000000009838                 jbe     short loc_97E3
.text:000000000000983A                 fstp    dword ptr [rsp+0C8h+src]
.text:000000000000983E                 sub     rsp, 10h
.text:0000000000009842                 mov     edi, r15d
.text:0000000000009845                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:0000000000009848                 call    adjust_value
.text:000000000000984D                 pop     rbp
.text:000000000000984E                 pop     r14
.text:0000000000009850                 fld     dword ptr [rsp+0C8h+src]
.text:0000000000009854                 jmp     short loc_97E3
.text:0000000000009854 ; ---------------------------------------------------------------------------
.text:0000000000009856                 align 20h
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: human_readable+644↑j
.text:0000000000009860                 mov     rax, rsi
.text:0000000000009863                 movsxd  rdi, edi
.text:0000000000009866                 and     eax, 1
.text:0000000000009869                 add     rax, rdi
.text:000000000000986C                 setnz   al
.text:000000000000986F                 movzx   eax, al
.text:0000000000009872                 add     r9d, eax
.text:0000000000009875                 cmp     r9d, 5
.text:0000000000009879                 jg      loc_96F6
.text:000000000000987F                 jmp     loc_9710
.text:000000000000987F ; ---------------------------------------------------------------------------
.text:0000000000009884                 align 8
.text:0000000000009888
.text:0000000000009888 loc_9888:                               ; CODE XREF: human_readable+25A↑j
.text:0000000000009888                 setb    dil
.text:000000000000988C                 movzx   edi, dil
.text:0000000000009890                 add     edi, 2
.text:0000000000009893                 jmp     loc_9309
.text:0000000000009893 ; ---------------------------------------------------------------------------
.text:0000000000009898                 align 20h
.text:00000000000098A0
.text:00000000000098A0 loc_98A0:                               ; CODE XREF: human_readable+28A↑j
.text:00000000000098A0                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000098A5                 xor     ebx, ebx
.text:00000000000098A7                 jmp     loc_96E0
.text:00000000000098A7 ; ---------------------------------------------------------------------------
.text:00000000000098AC                 align 10h
.text:00000000000098B0
.text:00000000000098B0 loc_98B0:                               ; CODE XREF: human_readable+3C6↑j
.text:00000000000098B0                 mov     rbx, [rsp+0C8h+var_C0]
.text:00000000000098B5                 test    eax, eax
.text:00000000000098B7                 lea     rdx, [rbx+1]
.text:00000000000098BB                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:00000000000098BE                 jnz     loc_949B
.text:00000000000098C4
.text:00000000000098C4 loc_98C4:                               ; CODE XREF: human_readable+3E7↑j
.text:00000000000098C4                 mov     [rsp+0C8h+var_C0], rdx
.text:00000000000098C9                 jmp     loc_94A7
.text:00000000000098C9 ; ---------------------------------------------------------------------------
.text:00000000000098CE                 align 10h
.text:00000000000098D0
.text:00000000000098D0 loc_98D0:                               ; CODE XREF: human_readable+665↑j
.text:00000000000098D0                 cmp     ebx, 8
.text:00000000000098D3                 jz      loc_9710
.text:00000000000098D9                 add     ebx, 1
.text:00000000000098DC                 test    r12b, 8
.text:00000000000098E0                 jz      loc_99A2
.text:00000000000098E6
.text:00000000000098E6 loc_98E6:                               ; CODE XREF: human_readable+922↓j
.text:00000000000098E6                                         ; human_readable+931↓j ...
.text:00000000000098E6                 lea     r15, [r8-1]
.text:00000000000098EA                 mov     byte ptr [r8-1], 31h ; '1'
.text:00000000000098EF                 jmp     loc_9420
.text:00000000000098EF ; ---------------------------------------------------------------------------
.text:00000000000098F4                 align 8
.text:00000000000098F8
.text:00000000000098F8 loc_98F8:                               ; CODE XREF: human_readable+2B1↑j
.text:00000000000098F8                                         ; human_readable+5C1↑j
.text:00000000000098F8                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000098FD                 jmp     loc_96E0
.text:0000000000009902 ; ---------------------------------------------------------------------------
.text:0000000000009902
.text:0000000000009902 loc_9902:                               ; CODE XREF: human_readable+6B9↑j
.text:0000000000009902                 xor     ebx, ebx
.text:0000000000009904                 jmp     loc_9439
.text:0000000000009909 ; ---------------------------------------------------------------------------
.text:0000000000009909
.text:0000000000009909 loc_9909:                               ; CODE XREF: human_readable+5E2↑j
.text:0000000000009909                 test    eax, eax
.text:000000000000990B                 jnz     loc_9696
.text:0000000000009911
.text:0000000000009911 loc_9911:                               ; CODE XREF: human_readable+8FD↓j
.text:0000000000009911                 test    r12b, 8
.text:0000000000009915                 jnz     short loc_9934
.text:0000000000009917                 mov     r9d, 30h ; '0'
.text:000000000000991D                 jmp     loc_969A
.text:0000000000009922 ; ---------------------------------------------------------------------------
.text:0000000000009922
.text:0000000000009922 loc_9922:                               ; CODE XREF: human_readable+5CB↑j
.text:0000000000009922                 mov     edx, eax
.text:0000000000009924                 and     edx, 1
.text:0000000000009927                 add     edx, edi
.text:0000000000009929                 cmp     edx, 2
.text:000000000000992C                 setnle  dl
.text:000000000000992F                 jmp     loc_9680
.text:0000000000009934 ; ---------------------------------------------------------------------------
.text:0000000000009934
.text:0000000000009934 loc_9934:                               ; CODE XREF: human_readable+875↑j
.text:0000000000009934                 mov     r8, [rsp+0C8h+var_C0]
.text:0000000000009939                 xor     r9d, r9d
.text:000000000000993C                 jmp     loc_96E0
.text:0000000000009941 ; ---------------------------------------------------------------------------
.text:0000000000009941
.text:0000000000009941 loc_9941:                               ; CODE XREF: human_readable+614↑j
.text:0000000000009941                 mov     rax, [r14]
.text:0000000000009944                 mov     r9, r14
.text:0000000000009947                 mov     [r8], rax
.text:000000000000994A                 mov     eax, ebp
.text:000000000000994C                 mov     rdx, [r14+rax-8]
.text:0000000000009951                 mov     [r8+rax-8], rdx
.text:0000000000009956                 lea     rdx, [r8+8]
.text:000000000000995A                 mov     rax, r8
.text:000000000000995D                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:0000000000009961                 sub     rax, rdx
.text:0000000000009964                 sub     r9, rax
.text:0000000000009967                 add     eax, ebp
.text:0000000000009969                 and     eax, 0FFFFFFF8h
.text:000000000000996C                 cmp     eax, 8
.text:000000000000996F                 jb      loc_96D7
.text:0000000000009975                 and     eax, 0FFFFFFF8h
.text:0000000000009978                 xor     edi, edi
.text:000000000000997A
.text:000000000000997A loc_997A:                               ; CODE XREF: human_readable+8EA↓j
.text:000000000000997A                 mov     r10d, edi
.text:000000000000997D                 add     edi, 8
.text:0000000000009980                 mov     r11, [r9+r10]
.text:0000000000009984                 cmp     edi, eax
.text:0000000000009986                 mov     [rdx+r10], r11
.text:000000000000998A                 jb      short loc_997A
.text:000000000000998C                 jmp     loc_96D7
.text:0000000000009991 ; ---------------------------------------------------------------------------
.text:0000000000009991
.text:0000000000009991 loc_9991:                               ; CODE XREF: human_readable+5F0↑j
.text:0000000000009991                 lea     rsi, [r10+1]
.text:0000000000009995                 cmp     rsi, 0Ah
.text:0000000000009999                 jz      short loc_99F0
.text:000000000000999B                 xor     edi, edi
.text:000000000000999D                 jmp     loc_9911
.text:00000000000099A2 ; ---------------------------------------------------------------------------
.text:00000000000099A2
.text:00000000000099A2 loc_99A2:                               ; CODE XREF: human_readable+840↑j
.text:00000000000099A2                 mov     rax, rbp
.text:00000000000099A5                 mov     byte ptr [r8-1], 30h ; '0'
.text:00000000000099AA                 not     rax
.text:00000000000099AD                 add     r8, rax
.text:00000000000099B0                 cmp     ebp, 8
.text:00000000000099B3                 mov     eax, ebp
.text:00000000000099B5                 jnb     short loc_99FA
.text:00000000000099B7                 and     ebp, 4
.text:00000000000099BA                 jnz     loc_9A71
.text:00000000000099C0                 test    eax, eax
.text:00000000000099C2                 jz      loc_98E6
.text:00000000000099C8                 movzx   edx, byte ptr [r14]
.text:00000000000099CC                 test    al, 2
.text:00000000000099CE                 mov     [r8], dl
.text:00000000000099D1                 jz      loc_98E6
.text:00000000000099D7                 movzx   edx, word ptr [r14+rax-2]
.text:00000000000099DD                 mov     [r8+rax-2], dx
.text:00000000000099E3                 jmp     loc_98E6
.text:00000000000099E3 ; ---------------------------------------------------------------------------
.text:00000000000099E8                 align 10h
.text:00000000000099F0
.text:00000000000099F0 loc_99F0:                               ; CODE XREF: human_readable+8F9↑j
.text:00000000000099F0                 mov     r8, [rsp+0C8h+var_C0]
.text:00000000000099F5                 jmp     loc_96D7
.text:00000000000099FA ; ---------------------------------------------------------------------------
.text:00000000000099FA
.text:00000000000099FA loc_99FA:                               ; CODE XREF: human_readable+915↑j
.text:00000000000099FA                 mov     rax, [r14]
.text:00000000000099FD                 lea     rcx, [r8+8]
.text:0000000000009A01                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:0000000000009A05                 mov     [r8], rax
.text:0000000000009A08                 mov     eax, ebp
.text:0000000000009A0A                 mov     rdx, [r14+rax-8]
.text:0000000000009A0F                 mov     [r8+rax-8], rdx
.text:0000000000009A14                 mov     rax, r8
.text:0000000000009A17                 sub     rax, rcx
.text:0000000000009A1A                 sub     r14, rax
.text:0000000000009A1D                 add     eax, ebp
.text:0000000000009A1F                 and     eax, 0FFFFFFF8h
.text:0000000000009A22                 cmp     eax, 8
.text:0000000000009A25                 jb      loc_98E6
.text:0000000000009A2B                 and     eax, 0FFFFFFF8h
.text:0000000000009A2E                 xor     edx, edx
.text:0000000000009A30
.text:0000000000009A30 loc_9A30:                               ; CODE XREF: human_readable+99F↓j
.text:0000000000009A30                 mov     esi, edx
.text:0000000000009A32                 add     edx, 8
.text:0000000000009A35                 mov     rdi, [r14+rsi]
.text:0000000000009A39                 cmp     edx, eax
.text:0000000000009A3B                 mov     [rcx+rsi], rdi
.text:0000000000009A3F                 jb      short loc_9A30
.text:0000000000009A41                 jmp     loc_98E6
.text:0000000000009A46 ; ---------------------------------------------------------------------------
.text:0000000000009A46
.text:0000000000009A46 loc_9A46:                               ; CODE XREF: human_readable+61E↑j
.text:0000000000009A46                 mov     edx, [r14]
.text:0000000000009A49                 mov     [r8], edx
.text:0000000000009A4C                 mov     edx, [r14+rax-4]
.text:0000000000009A51                 mov     [r8+rax-4], edx
.text:0000000000009A56                 jmp     loc_96D7
.text:0000000000009A5B ; ---------------------------------------------------------------------------
.text:0000000000009A5B
.text:0000000000009A5B loc_9A5B:                               ; CODE XREF: human_readable+423↑j
.text:0000000000009A5B                 call    ___stack_chk_fail
.text:0000000000009A60 ; ---------------------------------------------------------------------------
.text:0000000000009A60
.text:0000000000009A60 loc_9A60:                               ; CODE XREF: human_readable+631↑j
.text:0000000000009A60                 movzx   edx, word ptr [r14+rax-2]
.text:0000000000009A66                 mov     [r8+rax-2], dx
.text:0000000000009A6C                 jmp     loc_96D7
.text:0000000000009A71 ; ---------------------------------------------------------------------------
.text:0000000000009A71
.text:0000000000009A71 loc_9A71:                               ; CODE XREF: human_readable+91A↑j
.text:0000000000009A71                 mov     edx, [r14]
.text:0000000000009A74                 mov     [r8], edx
.text:0000000000009A77                 mov     edx, [r14+rax-4]
.text:0000000000009A7C                 mov     [r8+rax-4], edx
.text:0000000000009A81                 jmp     loc_98E6
.text:0000000000009A86 ; ---------------------------------------------------------------------------
.text:0000000000009A86
.text:0000000000009A86 loc_9A86:                               ; CODE XREF: human_readable+3B3↑j
.text:0000000000009A86                 test    eax, eax
.text:0000000000009A88                 mov     rdx, [rsp+0C8h+var_C0]
.text:0000000000009A8D                 jnz     loc_949B
.text:0000000000009A93                 jmp     loc_94A7
.text:0000000000009A98 ; ---------------------------------------------------------------------------
.text:0000000000009A98
.text:0000000000009A98 loc_9A98:                               ; CODE XREF: human_readable+4E8↑j
.text:0000000000009A98                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:0000000000009A9C                 mov     r15, rax
.text:0000000000009A9F                 mov     r12d, r14d
.text:0000000000009AA2                 jmp     loc_942A
.text:0000000000009AA2 ; } // starts at 90A0
.text:0000000000009AA2 human_readable  endp
.text:0000000000009AA2
.text:0000000000009AA2 ; ---------------------------------------------------------------------------
.text:0000000000009AA7                 align 10h
.text:0000000000009AB0
.text:0000000000009AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AB0
.text:0000000000009AB0 ; Attributes: info_from_lumina
.text:0000000000009AB0
.text:0000000000009AB0 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:0000000000009AB0                 public human_options
.text:0000000000009AB0 human_options   proc near               ; CODE XREF: main+C4↑p
.text:0000000000009AB0                                         ; main+329↑p
.text:0000000000009AB0
.text:0000000000009AB0 var_38          = qword ptr -38h
.text:0000000000009AB0 var_30          = qword ptr -30h
.text:0000000000009AB0
.text:0000000000009AB0 ; __unwind {
.text:0000000000009AB0                 push    r13
.text:0000000000009AB2                 push    r12
.text:0000000000009AB4                 mov     r13, rsi
.text:0000000000009AB7                 push    rbp
.text:0000000000009AB8                 push    rbx
.text:0000000000009AB9                 mov     r12, rdx
.text:0000000000009ABC                 mov     rbx, rdi
.text:0000000000009ABF                 sub     rsp, 18h
.text:0000000000009AC3                 mov     rax, fs:28h
.text:0000000000009ACC                 mov     [rsp+38h+var_30], rax
.text:0000000000009AD1                 xor     eax, eax
.text:0000000000009AD3                 test    rdi, rdi
.text:0000000000009AD6                 jz      loc_9BF0
.text:0000000000009ADC
.text:0000000000009ADC loc_9ADC:                               ; CODE XREF: human_options+152↓j
.text:0000000000009ADC                                         ; human_options+16A↓j
.text:0000000000009ADC                 xor     ebp, ebp
.text:0000000000009ADE                 cmp     byte ptr [rbx], 27h ; '''
.text:0000000000009AE1                 jnz     short loc_9AEC
.text:0000000000009AE3                 add     rbx, 1
.text:0000000000009AE7                 mov     ebp, 4
.text:0000000000009AEC
.text:0000000000009AEC loc_9AEC:                               ; CODE XREF: human_options+31↑j
.text:0000000000009AEC                 lea     rdx, block_size_opts
.text:0000000000009AF3                 lea     rsi, block_size_args
.text:0000000000009AFA                 mov     ecx, 4
.text:0000000000009AFF                 mov     rdi, rbx
.text:0000000000009B02                 call    argmatch
.text:0000000000009B07                 test    eax, eax
.text:0000000000009B09                 js      short loc_9B48
.text:0000000000009B0B                 lea     rdx, block_size_opts
.text:0000000000009B12                 cdqe
.text:0000000000009B14                 mov     qword ptr [r12], 1
.text:0000000000009B1C                 or      ebp, [rdx+rax*4]
.text:0000000000009B1F                 xor     eax, eax
.text:0000000000009B21                 mov     [r13+0], ebp
.text:0000000000009B25
.text:0000000000009B25 loc_9B25:                               ; CODE XREF: human_options+107↓j
.text:0000000000009B25                                         ; human_options+134↓j ...
.text:0000000000009B25                 mov     rcx, [rsp+38h+var_30]
.text:0000000000009B2A                 xor     rcx, fs:28h
.text:0000000000009B33                 jnz     loc_9C91
.text:0000000000009B39                 add     rsp, 18h
.text:0000000000009B3D                 pop     rbx
.text:0000000000009B3E                 pop     rbp
.text:0000000000009B3F                 pop     r12
.text:0000000000009B41                 pop     r13
.text:0000000000009B43                 retn
.text:0000000000009B43 ; ---------------------------------------------------------------------------
.text:0000000000009B44                 align 8
.text:0000000000009B48
.text:0000000000009B48 loc_9B48:                               ; CODE XREF: human_options+59↑j
.text:0000000000009B48                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:0000000000009B4F                 xor     edx, edx
.text:0000000000009B51                 mov     rsi, rsp
.text:0000000000009B54                 mov     rcx, r12
.text:0000000000009B57                 mov     rdi, rbx        ; nptr
.text:0000000000009B5A                 call    xstrtoumax
.text:0000000000009B5F                 test    eax, eax
.text:0000000000009B61                 jnz     short loc_9BA8
.text:0000000000009B63                 movzx   esi, byte ptr [rbx]
.text:0000000000009B66                 lea     edx, [rsi-30h]
.text:0000000000009B69                 cmp     dl, 9
.text:0000000000009B6C                 jbe     short loc_9B98
.text:0000000000009B6E                 mov     rcx, [rsp+38h+var_38]
.text:0000000000009B72                 cmp     rbx, rcx
.text:0000000000009B75                 jnz     short loc_9B89
.text:0000000000009B77                 jmp     loc_9C50
.text:0000000000009B77 ; ---------------------------------------------------------------------------
.text:0000000000009B7C                 align 20h
.text:0000000000009B80
.text:0000000000009B80 loc_9B80:                               ; CODE XREF: human_options+E6↓j
.text:0000000000009B80                 cmp     rbx, rcx
.text:0000000000009B83                 jz      loc_9C50
.text:0000000000009B89
.text:0000000000009B89 loc_9B89:                               ; CODE XREF: human_options+C5↑j
.text:0000000000009B89                 add     rbx, 1
.text:0000000000009B8D                 movzx   edi, byte ptr [rbx]
.text:0000000000009B90                 lea     edx, [rdi-30h]
.text:0000000000009B93                 cmp     dl, 9
.text:0000000000009B96                 ja      short loc_9B80
.text:0000000000009B98
.text:0000000000009B98 loc_9B98:                               ; CODE XREF: human_options+BC↑j
.text:0000000000009B98                                         ; human_options+1AD↓j ...
.text:0000000000009B98                 mov     rdx, [r12]
.text:0000000000009B9C                 mov     [r13+0], ebp
.text:0000000000009BA0                 jmp     short loc_9BB4
.text:0000000000009BA0 ; ---------------------------------------------------------------------------
.text:0000000000009BA2                 align 8
.text:0000000000009BA8
.text:0000000000009BA8 loc_9BA8:                               ; CODE XREF: human_options+B1↑j
.text:0000000000009BA8                 mov     rdx, [r12]
.text:0000000000009BAC                 mov     dword ptr [r13+0], 0
.text:0000000000009BB4
.text:0000000000009BB4 loc_9BB4:                               ; CODE XREF: human_options+F0↑j
.text:0000000000009BB4                 test    rdx, rdx
.text:0000000000009BB7                 jnz     loc_9B25
.text:0000000000009BBD                 lea     rdi, aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0000000000009BC4                 call    _getenv
.text:0000000000009BC9                 cmp     rax, 1
.text:0000000000009BCD                 sbb     rax, rax
.text:0000000000009BD0                 and     eax, 200h
.text:0000000000009BD5                 add     rax, 200h
.text:0000000000009BDB                 mov     [r12], rax
.text:0000000000009BDF                 mov     eax, 4
.text:0000000000009BE4                 jmp     loc_9B25
.text:0000000000009BE4 ; ---------------------------------------------------------------------------
.text:0000000000009BE9                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 loc_9BF0:                               ; CODE XREF: human_options+26↑j
.text:0000000000009BF0                 lea     rdi, name+3     ; name
.text:0000000000009BF7                 call    _getenv
.text:0000000000009BFC                 test    rax, rax
.text:0000000000009BFF                 mov     rbx, rax
.text:0000000000009C02                 jnz     loc_9ADC
.text:0000000000009C08                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:0000000000009C0F                 call    _getenv
.text:0000000000009C14                 test    rax, rax
.text:0000000000009C17                 mov     rbx, rax
.text:0000000000009C1A                 jnz     loc_9ADC
.text:0000000000009C20                 lea     rdi, aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:0000000000009C27                 call    _getenv
.text:0000000000009C2C                 test    rax, rax
.text:0000000000009C2F                 jz      short loc_9C7A
.text:0000000000009C31                 mov     qword ptr [r12], 200h
.text:0000000000009C39                 xor     eax, eax
.text:0000000000009C3B                 mov     dword ptr [r13+0], 0
.text:0000000000009C43                 jmp     loc_9B25
.text:0000000000009C43 ; ---------------------------------------------------------------------------
.text:0000000000009C48                 align 10h
.text:0000000000009C50
.text:0000000000009C50 loc_9C50:                               ; CODE XREF: human_options+C7↑j
.text:0000000000009C50                                         ; human_options+D3↑j
.text:0000000000009C50                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:0000000000009C54                 jz      short loc_9C68
.text:0000000000009C56                 or      bpl, 80h
.text:0000000000009C5A
.text:0000000000009C5A loc_9C5A:                               ; CODE XREF: human_options+1C8↓j
.text:0000000000009C5A                 or      ebp, 20h
.text:0000000000009C5D                 jmp     loc_9B98
.text:0000000000009C5D ; ---------------------------------------------------------------------------
.text:0000000000009C62                 align 8
.text:0000000000009C68
.text:0000000000009C68 loc_9C68:                               ; CODE XREF: human_options+1A4↑j
.text:0000000000009C68                 or      ebp, 180h
.text:0000000000009C6E                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:0000000000009C72                 jnz     loc_9B98
.text:0000000000009C78                 jmp     short loc_9C5A
.text:0000000000009C7A ; ---------------------------------------------------------------------------
.text:0000000000009C7A
.text:0000000000009C7A loc_9C7A:                               ; CODE XREF: human_options+17F↑j
.text:0000000000009C7A                 mov     qword ptr [r12], 400h
.text:0000000000009C82                 xor     eax, eax
.text:0000000000009C84                 mov     dword ptr [r13+0], 0
.text:0000000000009C8C                 jmp     loc_9B25
.text:0000000000009C91 ; ---------------------------------------------------------------------------
.text:0000000000009C91
.text:0000000000009C91 loc_9C91:                               ; CODE XREF: human_options+83↑j
.text:0000000000009C91                 call    ___stack_chk_fail
.text:0000000000009C91 ; } // starts at 9AB0
.text:0000000000009C91 human_options   endp
.text:0000000000009C91
.text:0000000000009C91 ; ---------------------------------------------------------------------------
.text:0000000000009C96                 align 20h
.text:0000000000009CA0
.text:0000000000009CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CA0
.text:0000000000009CA0
.text:0000000000009CA0 ino_hash        proc near               ; DATA XREF: ino_map_alloc+29↓o
.text:0000000000009CA0 ; __unwind {
.text:0000000000009CA0                 mov     rax, [rdi]
.text:0000000000009CA3                 xor     edx, edx
.text:0000000000009CA5                 div     rsi
.text:0000000000009CA8                 mov     rax, rdx
.text:0000000000009CAB                 retn
.text:0000000000009CAB ; } // starts at 9CA0
.text:0000000000009CAB ino_hash        endp
.text:0000000000009CAB
.text:0000000000009CAB ; ---------------------------------------------------------------------------
.text:0000000000009CAC                 align 10h
.text:0000000000009CB0
.text:0000000000009CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CB0
.text:0000000000009CB0
.text:0000000000009CB0 ino_compare     proc near               ; DATA XREF: ino_map_alloc+22↓o
.text:0000000000009CB0 ; __unwind {
.text:0000000000009CB0                 mov     rax, [rsi]
.text:0000000000009CB3                 cmp     [rdi], rax
.text:0000000000009CB6                 setz    al
.text:0000000000009CB9                 retn
.text:0000000000009CB9 ; } // starts at 9CB0
.text:0000000000009CB9 ino_compare     endp
.text:0000000000009CB9
.text:0000000000009CB9 ; ---------------------------------------------------------------------------
.text:0000000000009CBA                 align 20h
.text:0000000000009CC0
.text:0000000000009CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CC0
.text:0000000000009CC0
.text:0000000000009CC0                 public ino_map_alloc
.text:0000000000009CC0 ino_map_alloc   proc near               ; CODE XREF: map_inode_number_isra_1+47↑p
.text:0000000000009CC0 ; __unwind {
.text:0000000000009CC0                 push    rbp
.text:0000000000009CC1                 push    rbx
.text:0000000000009CC2                 mov     rbp, rdi
.text:0000000000009CC5                 mov     edi, 18h        ; size
.text:0000000000009CCA                 sub     rsp, 8
.text:0000000000009CCE                 call    _malloc
.text:0000000000009CD3                 test    rax, rax
.text:0000000000009CD6                 mov     rbx, rax
.text:0000000000009CD9                 jz      short loc_9D10
.text:0000000000009CDB                 mov     r8, cs:free_ptr
.text:0000000000009CE2                 lea     rcx, ino_compare
.text:0000000000009CE9                 lea     rdx, ino_hash
.text:0000000000009CF0                 xor     esi, esi
.text:0000000000009CF2                 mov     edi, 3FDh
.text:0000000000009CF7                 call    hash_initialize
.text:0000000000009CFC                 test    rax, rax
.text:0000000000009CFF                 mov     [rbx], rax
.text:0000000000009D02                 jz      short loc_9D20
.text:0000000000009D04                 mov     [rbx+8], rbp
.text:0000000000009D08                 mov     qword ptr [rbx+10h], 0
.text:0000000000009D10
.text:0000000000009D10 loc_9D10:                               ; CODE XREF: ino_map_alloc+19↑j
.text:0000000000009D10                                         ; ino_map_alloc+6A↓j
.text:0000000000009D10                 add     rsp, 8
.text:0000000000009D14                 mov     rax, rbx
.text:0000000000009D17                 pop     rbx
.text:0000000000009D18                 pop     rbp
.text:0000000000009D19                 retn
.text:0000000000009D19 ; ---------------------------------------------------------------------------
.text:0000000000009D1A                 align 20h
.text:0000000000009D20
.text:0000000000009D20 loc_9D20:                               ; CODE XREF: ino_map_alloc+42↑j
.text:0000000000009D20                 mov     rdi, rbx        ; ptr
.text:0000000000009D23                 xor     ebx, ebx
.text:0000000000009D25                 call    free
.text:0000000000009D2A                 jmp     short loc_9D10
.text:0000000000009D2A ; } // starts at 9CC0
.text:0000000000009D2A ino_map_alloc   endp
.text:0000000000009D2A
.text:0000000000009D2A ; ---------------------------------------------------------------------------
.text:0000000000009D2C                 align 10h
.text:0000000000009D30
.text:0000000000009D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D30
.text:0000000000009D30
.text:0000000000009D30 ; __int64 __fastcall ino_map_free(void *ptr)
.text:0000000000009D30                 public ino_map_free
.text:0000000000009D30 ino_map_free    proc near
.text:0000000000009D30 ; __unwind {
.text:0000000000009D30                 push    rbx
.text:0000000000009D31                 mov     rbx, rdi
.text:0000000000009D34                 mov     rdi, [rdi]      ; ptr
.text:0000000000009D37                 call    hash_free
.text:0000000000009D3C                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000009D40                 call    free
.text:0000000000009D45                 mov     rdi, rbx        ; ptr
.text:0000000000009D48                 pop     rbx
.text:0000000000009D49                 jmp     free
.text:0000000000009D49 ; } // starts at 9D30
.text:0000000000009D49 ino_map_free    endp
.text:0000000000009D49
.text:0000000000009D49 ; ---------------------------------------------------------------------------
.text:0000000000009D4E                 align 10h
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50
.text:0000000000009D50                 public ino_map_insert
.text:0000000000009D50 ino_map_insert  proc near               ; CODE XREF: map_inode_number_isra_1+28↑j
.text:0000000000009D50
.text:0000000000009D50 var_20          = qword ptr -20h
.text:0000000000009D50
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 push    rbp
.text:0000000000009D51                 push    rbx
.text:0000000000009D52                 mov     rbp, rdi
.text:0000000000009D55                 sub     rsp, 18h
.text:0000000000009D59                 mov     rbx, [rdi+10h]
.text:0000000000009D5D                 test    rbx, rbx
.text:0000000000009D60                 jz      short loc_9DC0
.text:0000000000009D62                 cmp     [rbx], rsi
.text:0000000000009D65                 jz      short loc_9D90
.text:0000000000009D67
.text:0000000000009D67 loc_9D67:                               ; CODE XREF: ino_map_insert+8E↓j
.text:0000000000009D67                 mov     rdi, [rbp+0]
.text:0000000000009D6B                 mov     [rbx], rsi
.text:0000000000009D6E                 mov     rsi, rbx
.text:0000000000009D71                 call    hash_insert
.text:0000000000009D76                 test    rax, rax
.text:0000000000009D79                 jz      short loc_9DE0
.text:0000000000009D7B                 cmp     rbx, rax
.text:0000000000009D7E                 jz      short loc_9DA0
.text:0000000000009D80                 mov     rax, [rax+8]
.text:0000000000009D84                 mov     [rbx+8], rax
.text:0000000000009D88                 add     rsp, 18h
.text:0000000000009D8C                 pop     rbx
.text:0000000000009D8D                 pop     rbp
.text:0000000000009D8E                 retn
.text:0000000000009D8E ; ---------------------------------------------------------------------------
.text:0000000000009D8F                 align 10h
.text:0000000000009D90
.text:0000000000009D90 loc_9D90:                               ; CODE XREF: ino_map_insert+15↑j
.text:0000000000009D90                 mov     rax, [rbx+8]
.text:0000000000009D94                 add     rsp, 18h
.text:0000000000009D98                 pop     rbx
.text:0000000000009D99                 pop     rbp
.text:0000000000009D9A                 retn
.text:0000000000009D9A ; ---------------------------------------------------------------------------
.text:0000000000009D9B                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 loc_9DA0:                               ; CODE XREF: ino_map_insert+2E↑j
.text:0000000000009DA0                 mov     rax, [rbp+8]
.text:0000000000009DA4                 mov     qword ptr [rbp+10h], 0
.text:0000000000009DAC                 lea     rdx, [rax+1]
.text:0000000000009DB0                 mov     [rbp+8], rdx
.text:0000000000009DB4                 mov     [rbx+8], rax
.text:0000000000009DB8                 add     rsp, 18h
.text:0000000000009DBC                 pop     rbx
.text:0000000000009DBD                 pop     rbp
.text:0000000000009DBE                 retn
.text:0000000000009DBE ; ---------------------------------------------------------------------------
.text:0000000000009DBF                 align 20h
.text:0000000000009DC0
.text:0000000000009DC0 loc_9DC0:                               ; CODE XREF: ino_map_insert+10↑j
.text:0000000000009DC0                 mov     edi, 10h        ; size
.text:0000000000009DC5                 mov     [rsp+28h+var_20], rsi
.text:0000000000009DCA                 call    _malloc
.text:0000000000009DCF                 test    rax, rax
.text:0000000000009DD2                 mov     rbx, rax
.text:0000000000009DD5                 mov     [rbp+10h], rax
.text:0000000000009DD9                 mov     rsi, [rsp+28h+var_20]
.text:0000000000009DDE                 jnz     short loc_9D67
.text:0000000000009DE0
.text:0000000000009DE0 loc_9DE0:                               ; CODE XREF: ino_map_insert+29↑j
.text:0000000000009DE0                 add     rsp, 18h
.text:0000000000009DE4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009DEB                 pop     rbx
.text:0000000000009DEC                 pop     rbp
.text:0000000000009DED                 retn
.text:0000000000009DED ; } // starts at 9D50
.text:0000000000009DED ino_map_insert  endp
.text:0000000000009DED
.text:0000000000009DED ; ---------------------------------------------------------------------------
.text:0000000000009DEE                 align 10h
.text:0000000000009DF0
.text:0000000000009DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DF0
.text:0000000000009DF0 ; Attributes: info_from_lumina
.text:0000000000009DF0
.text:0000000000009DF0 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000009DF0                 public imaxtostr
.text:0000000000009DF0 imaxtostr       proc near               ; CODE XREF: print_size+109↑p
.text:0000000000009DF0 ; __unwind {
.text:0000000000009DF0                 test    rdi, rdi
.text:0000000000009DF3                 lea     rcx, [rsi+14h]
.text:0000000000009DF7                 mov     byte ptr [rsi+14h], 0
.text:0000000000009DFB                 mov     r9, 6666666666666667h
.text:0000000000009E05                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000009E0F                 mov     r8d, 30h ; '0'
.text:0000000000009E15                 js      short loc_9E53
.text:0000000000009E17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009E20
.text:0000000000009E20 loc_9E20:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000009E20                 mov     rax, rdi
.text:0000000000009E23                 sub     rcx, 1
.text:0000000000009E27                 mul     rsi
.text:0000000000009E2A                 shr     rdx, 3
.text:0000000000009E2E                 lea     rax, [rdx+rdx*4]
.text:0000000000009E32                 add     rax, rax
.text:0000000000009E35                 sub     rdi, rax
.text:0000000000009E38                 add     edi, 30h ; '0'
.text:0000000000009E3B                 test    rdx, rdx
.text:0000000000009E3E                 mov     [rcx], dil
.text:0000000000009E41                 mov     rdi, rdx
.text:0000000000009E44                 jnz     short loc_9E20
.text:0000000000009E46                 mov     rax, rcx
.text:0000000000009E49                 retn
.text:0000000000009E49 ; ---------------------------------------------------------------------------
.text:0000000000009E4A                 align 10h
.text:0000000000009E50
.text:0000000000009E50 loc_9E50:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000009E50                 mov     rcx, rsi
.text:0000000000009E53
.text:0000000000009E53 loc_9E53:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000009E53                 mov     rax, rdi
.text:0000000000009E56                 lea     rsi, [rcx-1]
.text:0000000000009E5A                 imul    r9
.text:0000000000009E5D                 mov     rax, rdi
.text:0000000000009E60                 sar     rax, 3Fh
.text:0000000000009E64                 sar     rdx, 2
.text:0000000000009E68                 sub     rdx, rax
.text:0000000000009E6B                 lea     rax, [rdx+rdx*4]
.text:0000000000009E6F                 lea     eax, [r8+rax*2]
.text:0000000000009E73                 sub     eax, edi
.text:0000000000009E75                 test    rdx, rdx
.text:0000000000009E78                 mov     rdi, rdx
.text:0000000000009E7B                 mov     [rcx-1], al
.text:0000000000009E7E                 jnz     short loc_9E50
.text:0000000000009E80                 sub     rcx, 2
.text:0000000000009E84                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000009E88                 mov     rax, rcx
.text:0000000000009E8B                 retn
.text:0000000000009E8B ; } // starts at 9DF0
.text:0000000000009E8B imaxtostr       endp
.text:0000000000009E8B
.text:0000000000009E8B ; ---------------------------------------------------------------------------
.text:0000000000009E8C                 align 10h
.text:0000000000009E90
.text:0000000000009E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E90
.text:0000000000009E90 ; Attributes: info_from_lumina
.text:0000000000009E90
.text:0000000000009E90 ; __int64 __fastcall mb_width_aux(wint_t wc)
.text:0000000000009E90                 public mb_width_aux
.text:0000000000009E90 mb_width_aux    proc near
.text:0000000000009E90 ; __unwind {
.text:0000000000009E90                 push    rbx
.text:0000000000009E91                 mov     ebx, edi
.text:0000000000009E93                 call    _wcwidth
.text:0000000000009E98                 test    eax, eax
.text:0000000000009E9A                 js      short loc_9EA0
.text:0000000000009E9C                 pop     rbx
.text:0000000000009E9D                 retn
.text:0000000000009E9D ; ---------------------------------------------------------------------------
.text:0000000000009E9E                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 loc_9EA0:                               ; CODE XREF: mb_width_aux+A↑j
.text:0000000000009EA0                 mov     edi, ebx        ; wc
.text:0000000000009EA2                 call    _iswcntrl
.text:0000000000009EA7                 test    eax, eax
.text:0000000000009EA9                 setz    al
.text:0000000000009EAC                 movzx   eax, al
.text:0000000000009EAF                 pop     rbx
.text:0000000000009EB0                 retn
.text:0000000000009EB0 ; } // starts at 9E90
.text:0000000000009EB0 mb_width_aux    endp
.text:0000000000009EB0
.text:0000000000009EB0 ; ---------------------------------------------------------------------------
.text:0000000000009EB1                 align 20h
.text:0000000000009EC0
.text:0000000000009EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EC0
.text:0000000000009EC0
.text:0000000000009EC0                 public mb_copy
.text:0000000000009EC0 mb_copy         proc near
.text:0000000000009EC0 ; __unwind {
.text:0000000000009EC0                 push    rbp
.text:0000000000009EC1                 push    rbx
.text:0000000000009EC2                 mov     rbx, rsi
.text:0000000000009EC5                 lea     rax, [rbx+18h]
.text:0000000000009EC9                 mov     rbp, rdi
.text:0000000000009ECC                 sub     rsp, 8
.text:0000000000009ED0                 mov     rsi, [rsi]      ; src
.text:0000000000009ED3                 mov     rdx, [rbx+8]    ; n
.text:0000000000009ED7                 cmp     rsi, rax
.text:0000000000009EDA                 jz      short loc_9F00
.text:0000000000009EDC                 mov     [rdi], rsi
.text:0000000000009EDF
.text:0000000000009EDF loc_9EDF:                               ; CODE XREF: mb_copy+54↓j
.text:0000000000009EDF                 movzx   eax, byte ptr [rbx+10h]
.text:0000000000009EE3                 mov     [rbp+8], rdx
.text:0000000000009EE7                 test    al, al
.text:0000000000009EE9                 mov     [rbp+10h], al
.text:0000000000009EEC                 jz      short loc_9EF4
.text:0000000000009EEE                 mov     eax, [rbx+14h]
.text:0000000000009EF1                 mov     [rbp+14h], eax
.text:0000000000009EF4
.text:0000000000009EF4 loc_9EF4:                               ; CODE XREF: mb_copy+2C↑j
.text:0000000000009EF4                 add     rsp, 8
.text:0000000000009EF8                 pop     rbx
.text:0000000000009EF9                 pop     rbp
.text:0000000000009EFA                 retn
.text:0000000000009EFA ; ---------------------------------------------------------------------------
.text:0000000000009EFB                 align 20h
.text:0000000000009F00
.text:0000000000009F00 loc_9F00:                               ; CODE XREF: mb_copy+1A↑j
.text:0000000000009F00                 lea     rcx, [rdi+18h]
.text:0000000000009F04                 mov     rdi, rcx        ; dest
.text:0000000000009F07                 call    _memcpy
.text:0000000000009F0C                 mov     rdx, [rbx+8]
.text:0000000000009F10                 mov     [rbp+0], rax
.text:0000000000009F14                 jmp     short loc_9EDF
.text:0000000000009F14 ; } // starts at 9EC0
.text:0000000000009F14 mb_copy         endp
.text:0000000000009F14
.text:0000000000009F14 ; ---------------------------------------------------------------------------
.text:0000000000009F16                 align 20h
.text:0000000000009F20
.text:0000000000009F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F20
.text:0000000000009F20
.text:0000000000009F20                 public is_basic
.text:0000000000009F20 is_basic        proc near
.text:0000000000009F20 ; __unwind {
.text:0000000000009F20                 mov     eax, edi
.text:0000000000009F22                 lea     rdx, is_basic_table
.text:0000000000009F29                 mov     ecx, edi
.text:0000000000009F2B                 shr     al, 5
.text:0000000000009F2E                 and     ecx, 1Fh
.text:0000000000009F31                 and     eax, 7
.text:0000000000009F34                 mov     eax, [rdx+rax*4]
.text:0000000000009F37                 shr     eax, cl
.text:0000000000009F39                 and     eax, 1
.text:0000000000009F3C                 retn
.text:0000000000009F3C ; } // starts at 9F20
.text:0000000000009F3C is_basic        endp
.text:0000000000009F3C
.text:0000000000009F3C ; ---------------------------------------------------------------------------
.text:0000000000009F3D                 align 20h
.text:0000000000009F40
.text:0000000000009F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F40
.text:0000000000009F40
.text:0000000000009F40                 public mbscasecmp
.text:0000000000009F40 mbscasecmp      proc near               ; CODE XREF: string_compare_ci+4↑p
.text:0000000000009F40                                         ; fnmatch_no_wildcards+E↑j ...
.text:0000000000009F40
.text:0000000000009F40 var_C8          = byte ptr -0C8h
.text:0000000000009F40 var_C4          = qword ptr -0C4h
.text:0000000000009F40 var_BC          = byte ptr -0BCh
.text:0000000000009F40 s1              = qword ptr -0B8h
.text:0000000000009F40 n               = qword ptr -0B0h
.text:0000000000009F40 var_A8          = byte ptr -0A8h
.text:0000000000009F40 wc              = dword ptr -0A4h
.text:0000000000009F40 var_88          = byte ptr -88h
.text:0000000000009F40 ps              = mbstate_t ptr -84h
.text:0000000000009F40 var_7C          = byte ptr -7Ch
.text:0000000000009F40 s2              = qword ptr -78h
.text:0000000000009F40 var_70          = qword ptr -70h
.text:0000000000009F40 var_68          = byte ptr -68h
.text:0000000000009F40 var_64          = dword ptr -64h
.text:0000000000009F40 var_40          = qword ptr -40h
.text:0000000000009F40
.text:0000000000009F40 ; __unwind {
.text:0000000000009F40                 push    r15
.text:0000000000009F42                 push    r14
.text:0000000000009F44                 push    r13
.text:0000000000009F46                 push    r12
.text:0000000000009F48                 push    rbp
.text:0000000000009F49                 push    rbx
.text:0000000000009F4A                 sub     rsp, 98h
.text:0000000000009F51                 mov     rax, fs:28h
.text:0000000000009F5A                 mov     [rsp+0C8h+var_40], rax
.text:0000000000009F62                 xor     eax, eax
.text:0000000000009F64                 cmp     rdi, rsi
.text:0000000000009F67                 jz      loc_A2F0
.text:0000000000009F6D                 mov     rbp, rdi
.text:0000000000009F70                 mov     r12, rsi
.text:0000000000009F73                 call    ___ctype_get_mb_cur_max
.text:0000000000009F78                 cmp     rax, 1
.text:0000000000009F7C                 ja      loc_A018
.text:0000000000009F82                 call    ___ctype_b_loc
.text:0000000000009F87                 mov     r14, [rax]
.text:0000000000009F8A                 jmp     short loc_9FA0
.text:0000000000009F8A ; ---------------------------------------------------------------------------
.text:0000000000009F8C                 align 10h
.text:0000000000009F90
.text:0000000000009F90 loc_9F90:                               ; CODE XREF: mbscasecmp+9C↓j
.text:0000000000009F90                 add     rbp, 1
.text:0000000000009F94                 add     r12, 1
.text:0000000000009F98                 cmp     bl, dl
.text:0000000000009F9A                 jnz     loc_A3A0
.text:0000000000009FA0
.text:0000000000009FA0 loc_9FA0:                               ; CODE XREF: mbscasecmp+4A↑j
.text:0000000000009FA0                 movzx   r13d, byte ptr [rbp+0]
.text:0000000000009FA5                 test    byte ptr [r14+r13*2+1], 1
.text:0000000000009FAB                 mov     rbx, r13
.text:0000000000009FAE                 jz      short loc_9FBD
.text:0000000000009FB0                 call    ___ctype_tolower_loc
.text:0000000000009FB5                 mov     rax, [rax]
.text:0000000000009FB8                 movzx   ebx, byte ptr [rax+r13*4]
.text:0000000000009FBD
.text:0000000000009FBD loc_9FBD:                               ; CODE XREF: mbscasecmp+6E↑j
.text:0000000000009FBD                 movzx   r13d, byte ptr [r12]
.text:0000000000009FC2                 test    byte ptr [r14+r13*2+1], 1
.text:0000000000009FC8                 mov     rdx, r13
.text:0000000000009FCB                 jz      short loc_9FDA
.text:0000000000009FCD                 call    ___ctype_tolower_loc
.text:0000000000009FD2                 mov     rax, [rax]
.text:0000000000009FD5                 movzx   edx, byte ptr [rax+r13*4]
.text:0000000000009FDA
.text:0000000000009FDA loc_9FDA:                               ; CODE XREF: mbscasecmp+8B↑j
.text:0000000000009FDA                 test    bl, bl
.text:0000000000009FDC                 jnz     short loc_9F90
.text:0000000000009FDE                 xor     eax, eax
.text:0000000000009FE0                 sub     eax, edx
.text:0000000000009FE2                 nop     word ptr [rax+rax+00h]
.text:0000000000009FE8
.text:0000000000009FE8 loc_9FE8:                               ; CODE XREF: mbscasecmp+195↓j
.text:0000000000009FE8                                         ; mbscasecmp+3B2↓j ...
.text:0000000000009FE8                 mov     rsi, [rsp+0C8h+var_40]
.text:0000000000009FF0                 xor     rsi, fs:28h
.text:0000000000009FF9                 jnz     loc_A61F
.text:0000000000009FFF                 add     rsp, 98h
.text:000000000000A006                 pop     rbx
.text:000000000000A007                 pop     rbp
.text:000000000000A008                 pop     r12
.text:000000000000A00A                 pop     r13
.text:000000000000A00C                 pop     r14
.text:000000000000A00E                 pop     r15
.text:000000000000A010                 retn
.text:000000000000A010 ; ---------------------------------------------------------------------------
.text:000000000000A011                 align 8
.text:000000000000A018
.text:000000000000A018 loc_A018:                               ; CODE XREF: mbscasecmp+3C↑j
.text:000000000000A018                 mov     [rsp+0C8h+s2], r12
.text:000000000000A01D                 mov     r12, rsp
.text:000000000000A020                 mov     [rsp+0C8h+s1], rbp
.text:000000000000A025                 mov     [rsp+0C8h+var_C8], 0
.text:000000000000A029                 mov     [rsp+0C8h+var_C4], 0
.text:000000000000A032                 lea     r13, is_basic_table
.text:000000000000A039                 mov     [rsp+0C8h+var_BC], 0
.text:000000000000A03E                 mov     [rsp+0C8h+var_88], 0
.text:000000000000A043                 lea     r14, [r12+4]
.text:000000000000A048                 mov     qword ptr [rsp+0C8h+ps.__count], 0
.text:000000000000A051                 mov     [rsp+0C8h+var_7C], 0
.text:000000000000A056                 lea     rbp, [rsp+0C8h+var_88]
.text:000000000000A05B                 jmp     loc_A0F9
.text:000000000000A060 ; ---------------------------------------------------------------------------
.text:000000000000A060
.text:000000000000A060 loc_A060:                               ; CODE XREF: mbscasecmp+20A↓j
.text:000000000000A060                 cmp     [rsp+0C8h+var_88], 0
.text:000000000000A065                 jnz     loc_A256
.text:000000000000A06B                 mov     rcx, [rsp+0C8h+s2]
.text:000000000000A070                 movzx   edx, byte ptr [rcx]
.text:000000000000A073                 mov     eax, edx
.text:000000000000A075                 shr     al, 5
.text:000000000000A078                 and     eax, 7
.text:000000000000A07B                 mov     eax, [r13+rax*4+0]
.text:000000000000A080                 bt      eax, edx
.text:000000000000A083                 jnb     loc_A240
.text:000000000000A089                 mov     [rsp+0C8h+var_70], 1
.text:000000000000A092                 movsx   eax, byte ptr [rcx]
.text:000000000000A095                 mov     [rsp+0C8h+var_68], 1
.text:000000000000A09A                 mov     [rsp+0C8h+var_7C], 1
.text:000000000000A09F                 mov     [rsp+0C8h+var_64], eax
.text:000000000000A0A3
.text:000000000000A0A3 loc_A0A3:                               ; CODE XREF: mbscasecmp+215↓j
.text:000000000000A0A3                                         ; mbscasecmp+3A1↓j ...
.text:000000000000A0A3                 mov     r15d, [rsp+0C8h+var_64]
.text:000000000000A0A8                 test    r15d, r15d
.text:000000000000A0AB                 jz      loc_A3B0
.text:000000000000A0B1                 cmp     [rsp+0C8h+var_A8], 0
.text:000000000000A0B6                 jz      loc_A3C0
.text:000000000000A0BC                 mov     edi, [rsp+0C8h+wc] ; wc
.text:000000000000A0C0                 call    _towlower
.text:000000000000A0C5                 mov     edi, r15d       ; wc
.text:000000000000A0C8                 mov     ebx, eax
.text:000000000000A0CA                 call    _towlower
.text:000000000000A0CF                 sub     ebx, eax
.text:000000000000A0D1                 mov     eax, ebx
.text:000000000000A0D3
.text:000000000000A0D3 loc_A0D3:                               ; CODE XREF: mbscasecmp+248↓j
.text:000000000000A0D3                 test    eax, eax
.text:000000000000A0D5                 jnz     loc_9FE8
.text:000000000000A0DB                 mov     rax, [rsp+0C8h+n]
.text:000000000000A0E0                 add     [rsp+0C8h+s1], rax
.text:000000000000A0E5                 mov     rax, [rsp+0C8h+var_70]
.text:000000000000A0EA                 add     [rsp+0C8h+s2], rax
.text:000000000000A0EF                 mov     [rsp+0C8h+var_BC], 0
.text:000000000000A0F4                 mov     [rsp+0C8h+var_7C], 0
.text:000000000000A0F9
.text:000000000000A0F9 loc_A0F9:                               ; CODE XREF: mbscasecmp+11B↑j
.text:000000000000A0F9                 cmp     [rsp+0C8h+var_C8], 0
.text:000000000000A0FD                 jnz     loc_A1A4
.text:000000000000A103                 mov     rcx, [rsp+0C8h+s1]
.text:000000000000A108                 movzx   edx, byte ptr [rcx]
.text:000000000000A10B                 mov     eax, edx
.text:000000000000A10D                 shr     al, 5
.text:000000000000A110                 and     eax, 7
.text:000000000000A113                 mov     eax, [r13+rax*4+0]
.text:000000000000A118                 bt      eax, edx
.text:000000000000A11B                 jnb     short loc_A190
.text:000000000000A11D                 mov     [rsp+0C8h+n], 1
.text:000000000000A126                 movsx   eax, byte ptr [rcx]
.text:000000000000A129                 mov     [rsp+0C8h+var_A8], 1
.text:000000000000A12E                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A133                 mov     [rsp+0C8h+wc], eax
.text:000000000000A137
.text:000000000000A137 loc_A137:                               ; CODE XREF: mbscasecmp+2F1↓j
.text:000000000000A137                                         ; mbscasecmp+445↓j
.text:000000000000A137                 mov     r9d, [rsp+0C8h+wc]
.text:000000000000A13C                 test    r9d, r9d
.text:000000000000A13F                 jz      loc_A3E8
.text:000000000000A145
.text:000000000000A145 loc_A145:                               ; CODE XREF: mbscasecmp+3D3↓j
.text:000000000000A145                                         ; mbscasecmp+419↓j
.text:000000000000A145                 cmp     [rsp+0C8h+var_7C], 0
.text:000000000000A14A                 jz      loc_A060
.text:000000000000A150                 cmp     [rsp+0C8h+var_68], 0
.text:000000000000A155                 jnz     loc_A0A3
.text:000000000000A15B
.text:000000000000A15B loc_A15B:                               ; CODE XREF: mbscasecmp+3F3↓j
.text:000000000000A15B                                         ; mbscasecmp+439↓j
.text:000000000000A15B                 cmp     [rsp+0C8h+var_A8], 0
.text:000000000000A160                 jnz     loc_A3D8
.text:000000000000A166                 mov     rdx, [rsp+0C8h+n] ; n
.text:000000000000A16B                 mov     rax, [rsp+0C8h+var_70]
.text:000000000000A170                 mov     rdi, [rsp+0C8h+s1] ; s1
.text:000000000000A175                 mov     rsi, [rsp+0C8h+s2] ; s2
.text:000000000000A17A                 cmp     rdx, rax
.text:000000000000A17D                 jnz     loc_A4A8
.text:000000000000A183                 call    _memcmp
.text:000000000000A188                 jmp     loc_A0D3
.text:000000000000A188 ; ---------------------------------------------------------------------------
.text:000000000000A18D                 align 10h
.text:000000000000A190
.text:000000000000A190 loc_A190:                               ; CODE XREF: mbscasecmp+1DB↑j
.text:000000000000A190                 mov     rdi, r14        ; ps
.text:000000000000A193                 call    _mbsinit
.text:000000000000A198                 test    eax, eax
.text:000000000000A19A                 jz      loc_A600
.text:000000000000A1A0                 mov     [rsp+0C8h+var_C8], 1
.text:000000000000A1A4
.text:000000000000A1A4 loc_A1A4:                               ; CODE XREF: mbscasecmp+1BD↑j
.text:000000000000A1A4                 call    ___ctype_get_mb_cur_max
.text:000000000000A1A9                 mov     rbx, [rsp+0C8h+s1]
.text:000000000000A1AE                 mov     rsi, rax
.text:000000000000A1B1                 mov     rdi, rbx
.text:000000000000A1B4                 call    strnlen1
.text:000000000000A1B9                 lea     rcx, [r12+4]
.text:000000000000A1BE                 lea     rdi, [r12+24h]
.text:000000000000A1C3                 mov     rdx, rax
.text:000000000000A1C6                 mov     rsi, rbx
.text:000000000000A1C9                 call    rpl_mbrtowc
.text:000000000000A1CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A1D2                 mov     [rsp+0C8h+n], rax
.text:000000000000A1D7                 jz      loc_A300
.text:000000000000A1DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000A1E1                 jz      loc_A340
.text:000000000000A1E7                 test    rax, rax
.text:000000000000A1EA                 jnz     short loc_A211
.text:000000000000A1EC                 mov     rax, [rsp+0C8h+s1]
.text:000000000000A1F1                 mov     [rsp+0C8h+n], 1
.text:000000000000A1FA                 cmp     byte ptr [rax], 0
.text:000000000000A1FD                 jnz     loc_A624
.text:000000000000A203                 mov     r10d, [rsp+0C8h+wc]
.text:000000000000A208                 test    r10d, r10d
.text:000000000000A20B                 jnz     loc_A5FB
.text:000000000000A211
.text:000000000000A211 loc_A211:                               ; CODE XREF: mbscasecmp+2AA↑j
.text:000000000000A211                 lea     rdi, [r12+4]    ; ps
.text:000000000000A216                 mov     [rsp+0C8h+var_A8], 1
.text:000000000000A21B                 call    _mbsinit
.text:000000000000A220                 test    eax, eax
.text:000000000000A222                 jz      loc_A380
.text:000000000000A228                 mov     [rsp+0C8h+var_C8], 0
.text:000000000000A22C                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A231                 jmp     loc_A137
.text:000000000000A231 ; ---------------------------------------------------------------------------
.text:000000000000A236                 align 20h
.text:000000000000A240
.text:000000000000A240 loc_A240:                               ; CODE XREF: mbscasecmp+143↑j
.text:000000000000A240                 lea     rdi, [rbp+4]    ; ps
.text:000000000000A244                 call    _mbsinit
.text:000000000000A249                 test    eax, eax
.text:000000000000A24B                 jz      loc_A600
.text:000000000000A251                 mov     [rsp+0C8h+var_88], 1
.text:000000000000A256
.text:000000000000A256 loc_A256:                               ; CODE XREF: mbscasecmp+125↑j
.text:000000000000A256                 call    ___ctype_get_mb_cur_max
.text:000000000000A25B                 mov     rbx, [rsp+0C8h+s2]
.text:000000000000A260                 mov     rsi, rax
.text:000000000000A263                 mov     rdi, rbx
.text:000000000000A266                 call    strnlen1
.text:000000000000A26B                 lea     rcx, [rbp+4]
.text:000000000000A26F                 lea     rdi, [rbp+24h]
.text:000000000000A273                 mov     rdx, rax
.text:000000000000A276                 mov     rsi, rbx
.text:000000000000A279                 call    rpl_mbrtowc
.text:000000000000A27E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A282                 mov     [rsp+0C8h+var_70], rax
.text:000000000000A287                 jz      loc_A320
.text:000000000000A28D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000A291                 jz      loc_A360
.text:000000000000A297                 test    rax, rax
.text:000000000000A29A                 jnz     short loc_A2C1
.text:000000000000A29C                 mov     rax, [rsp+0C8h+s2]
.text:000000000000A2A1                 mov     [rsp+0C8h+var_70], 1
.text:000000000000A2AA                 cmp     byte ptr [rax], 0
.text:000000000000A2AD                 jnz     loc_A624
.text:000000000000A2B3                 mov     r8d, [rsp+0C8h+var_64]
.text:000000000000A2B8                 test    r8d, r8d
.text:000000000000A2BB                 jnz     loc_A5FB
.text:000000000000A2C1
.text:000000000000A2C1 loc_A2C1:                               ; CODE XREF: mbscasecmp+35A↑j
.text:000000000000A2C1                 lea     rdi, [rbp+4]    ; ps
.text:000000000000A2C5                 mov     [rsp+0C8h+var_68], 1
.text:000000000000A2CA                 call    _mbsinit
.text:000000000000A2CF                 test    eax, eax
.text:000000000000A2D1                 jz      loc_A390
.text:000000000000A2D7                 mov     [rsp+0C8h+var_88], 0
.text:000000000000A2DC                 mov     [rsp+0C8h+var_7C], 1
.text:000000000000A2E1                 jmp     loc_A0A3
.text:000000000000A2E1 ; ---------------------------------------------------------------------------
.text:000000000000A2E6                 align 10h
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: mbscasecmp+27↑j
.text:000000000000A2F0                 xor     eax, eax
.text:000000000000A2F2                 jmp     loc_9FE8
.text:000000000000A2F2 ; ---------------------------------------------------------------------------
.text:000000000000A2F7                 align 20h
.text:000000000000A300
.text:000000000000A300 loc_A300:                               ; CODE XREF: mbscasecmp+297↑j
.text:000000000000A300                 mov     [rsp+0C8h+n], 1
.text:000000000000A309                 mov     [rsp+0C8h+var_A8], 0
.text:000000000000A30E                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A313                 jmp     loc_A145
.text:000000000000A313 ; ---------------------------------------------------------------------------
.text:000000000000A318                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: mbscasecmp+347↑j
.text:000000000000A320                 mov     [rsp+0C8h+var_70], 1
.text:000000000000A329                 mov     [rsp+0C8h+var_68], 0
.text:000000000000A32E                 mov     [rsp+0C8h+var_7C], 1
.text:000000000000A333                 jmp     loc_A15B
.text:000000000000A333 ; ---------------------------------------------------------------------------
.text:000000000000A338                 align 20h
.text:000000000000A340
.text:000000000000A340 loc_A340:                               ; CODE XREF: mbscasecmp+2A1↑j
.text:000000000000A340                 mov     rdi, [rsp+0C8h+s1] ; s
.text:000000000000A345                 call    _strlen
.text:000000000000A34A                 mov     [rsp+0C8h+var_A8], 0
.text:000000000000A34F                 mov     [rsp+0C8h+n], rax
.text:000000000000A354                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A359                 jmp     loc_A145
.text:000000000000A359 ; ---------------------------------------------------------------------------
.text:000000000000A35E                 align 20h
.text:000000000000A360
.text:000000000000A360 loc_A360:                               ; CODE XREF: mbscasecmp+351↑j
.text:000000000000A360                 mov     rdi, [rsp+0C8h+s2] ; s
.text:000000000000A365                 call    _strlen
.text:000000000000A36A                 mov     [rsp+0C8h+var_68], 0
.text:000000000000A36F                 mov     [rsp+0C8h+var_70], rax
.text:000000000000A374                 mov     [rsp+0C8h+var_7C], 1
.text:000000000000A379                 jmp     loc_A15B
.text:000000000000A379 ; ---------------------------------------------------------------------------
.text:000000000000A37E                 align 20h
.text:000000000000A380
.text:000000000000A380 loc_A380:                               ; CODE XREF: mbscasecmp+2E2↑j
.text:000000000000A380                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A385                 jmp     loc_A137
.text:000000000000A385 ; ---------------------------------------------------------------------------
.text:000000000000A38A                 align 10h
.text:000000000000A390
.text:000000000000A390 loc_A390:                               ; CODE XREF: mbscasecmp+391↑j
.text:000000000000A390                 mov     [rsp+0C8h+var_7C], 1
.text:000000000000A395                 jmp     loc_A0A3
.text:000000000000A395 ; ---------------------------------------------------------------------------
.text:000000000000A39A                 align 20h
.text:000000000000A3A0
.text:000000000000A3A0 loc_A3A0:                               ; CODE XREF: mbscasecmp+5A↑j
.text:000000000000A3A0                 movzx   eax, bl
.text:000000000000A3A3                 sub     eax, edx
.text:000000000000A3A5                 jmp     loc_9FE8
.text:000000000000A3A5 ; ---------------------------------------------------------------------------
.text:000000000000A3AA                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 loc_A3B0:                               ; CODE XREF: mbscasecmp+16B↑j
.text:000000000000A3B0                 cmp     [rsp+0C8h+var_BC], 0
.text:000000000000A3B5                 jz      short loc_A3EF
.text:000000000000A3B7                 cmp     [rsp+0C8h+var_A8], 0
.text:000000000000A3BC                 jnz     short loc_A439
.text:000000000000A3BE                 xchg    ax, ax
.text:000000000000A3C0
.text:000000000000A3C0 loc_A3C0:                               ; CODE XREF: mbscasecmp+176↑j
.text:000000000000A3C0                                         ; mbscasecmp+4FF↓j ...
.text:000000000000A3C0                 mov     eax, 1
.text:000000000000A3C5                 jmp     loc_9FE8
.text:000000000000A3CA ; ---------------------------------------------------------------------------
.text:000000000000A3CA
.text:000000000000A3CA loc_A3CA:                               ; CODE XREF: mbscasecmp+50A↓j
.text:000000000000A3CA                 cmp     [rsp+0C8h+var_68], 0
.text:000000000000A3CF                 jnz     loc_A493
.text:000000000000A3D5                 nop     dword ptr [rax]
.text:000000000000A3D8
.text:000000000000A3D8 loc_A3D8:                               ; CODE XREF: mbscasecmp+220↑j
.text:000000000000A3D8                                         ; mbscasecmp+57B↓j ...
.text:000000000000A3D8                 mov     eax, 0FFFFFFFFh
.text:000000000000A3DD                 jmp     loc_9FE8
.text:000000000000A3DD ; ---------------------------------------------------------------------------
.text:000000000000A3E2                 align 8
.text:000000000000A3E8
.text:000000000000A3E8 loc_A3E8:                               ; CODE XREF: mbscasecmp+1FF↑j
.text:000000000000A3E8                 cmp     [rsp+0C8h+var_BC], 0
.text:000000000000A3ED                 jnz     short loc_A445
.text:000000000000A3EF
.text:000000000000A3EF loc_A3EF:                               ; CODE XREF: mbscasecmp+475↑j
.text:000000000000A3EF                 cmp     [rsp+0C8h+var_C8], 0
.text:000000000000A3F3                 mov     rbx, rsp
.text:000000000000A3F6                 jnz     loc_A4D8
.text:000000000000A3FC                 mov     rcx, [rsp+0C8h+s1]
.text:000000000000A401                 lea     rsi, is_basic_table
.text:000000000000A408                 movzx   edx, byte ptr [rcx]
.text:000000000000A40B                 mov     eax, edx
.text:000000000000A40D                 shr     al, 5
.text:000000000000A410                 and     eax, 7
.text:000000000000A413                 mov     eax, [rsi+rax*4]
.text:000000000000A416                 bt      eax, edx
.text:000000000000A419                 jnb     loc_A4C0
.text:000000000000A41F                 mov     [rsp+0C8h+n], 1
.text:000000000000A428                 movsx   eax, byte ptr [rcx]
.text:000000000000A42B                 mov     [rsp+0C8h+var_A8], 1
.text:000000000000A430                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A435                 mov     [rsp+0C8h+wc], eax
.text:000000000000A439
.text:000000000000A439 loc_A439:                               ; CODE XREF: mbscasecmp+47C↑j
.text:000000000000A439                                         ; mbscasecmp+61C↓j ...
.text:000000000000A439                 mov     esi, [rsp+0C8h+wc]
.text:000000000000A43D                 test    esi, esi
.text:000000000000A43F                 jnz     loc_A3C0
.text:000000000000A445
.text:000000000000A445 loc_A445:                               ; CODE XREF: mbscasecmp+4AD↑j
.text:000000000000A445                 cmp     [rsp+0C8h+var_7C], 0
.text:000000000000A44A                 jnz     loc_A3CA
.text:000000000000A450                 cmp     [rsp+0C8h+var_88], 0
.text:000000000000A455                 lea     rbx, [rsp+0C8h+var_88]
.text:000000000000A45A                 jnz     loc_A598
.text:000000000000A460                 mov     rcx, [rsp+0C8h+s2]
.text:000000000000A465                 lea     rsi, is_basic_table
.text:000000000000A46C                 movzx   edx, byte ptr [rcx]
.text:000000000000A46F                 mov     eax, edx
.text:000000000000A471                 shr     al, 5
.text:000000000000A474                 and     eax, 7
.text:000000000000A477                 mov     eax, [rsi+rax*4]
.text:000000000000A47A                 bt      eax, edx
.text:000000000000A47D                 jnb     loc_A580
.text:000000000000A483                 mov     [rsp+0C8h+var_70], 1
.text:000000000000A48C                 movsx   eax, byte ptr [rcx]
.text:000000000000A48F                 mov     [rsp+0C8h+var_64], eax
.text:000000000000A493
.text:000000000000A493 loc_A493:                               ; CODE XREF: mbscasecmp+48F↑j
.text:000000000000A493                                         ; mbscasecmp+696↓j ...
.text:000000000000A493                 mov     edx, [rsp+0C8h+var_64]
.text:000000000000A497                 xor     eax, eax
.text:000000000000A499                 test    edx, edx
.text:000000000000A49B                 setnz   al
.text:000000000000A49E                 neg     eax
.text:000000000000A4A0                 jmp     loc_9FE8
.text:000000000000A4A0 ; ---------------------------------------------------------------------------
.text:000000000000A4A5                 align 8
.text:000000000000A4A8
.text:000000000000A4A8 loc_A4A8:                               ; CODE XREF: mbscasecmp+23D↑j
.text:000000000000A4A8                 jnb     loc_A561
.text:000000000000A4AE                 call    _memcmp
.text:000000000000A4B3                 test    eax, eax
.text:000000000000A4B5                 jg      loc_A3C0
.text:000000000000A4BB                 jmp     loc_A3D8
.text:000000000000A4C0 ; ---------------------------------------------------------------------------
.text:000000000000A4C0
.text:000000000000A4C0 loc_A4C0:                               ; CODE XREF: mbscasecmp+4D9↑j
.text:000000000000A4C0                 mov     rbx, rsp
.text:000000000000A4C3                 lea     rdi, [rbx+4]    ; ps
.text:000000000000A4C7                 call    _mbsinit
.text:000000000000A4CC                 test    eax, eax
.text:000000000000A4CE                 jz      loc_A600
.text:000000000000A4D4                 mov     [rsp+0C8h+var_C8], 1
.text:000000000000A4D8
.text:000000000000A4D8 loc_A4D8:                               ; CODE XREF: mbscasecmp+4B6↑j
.text:000000000000A4D8                 call    ___ctype_get_mb_cur_max
.text:000000000000A4DD                 mov     rbp, [rsp+0C8h+s1]
.text:000000000000A4E2                 mov     rsi, rax
.text:000000000000A4E5                 mov     rdi, rbp
.text:000000000000A4E8                 call    strnlen1
.text:000000000000A4ED                 lea     rcx, [rbx+4]
.text:000000000000A4F1                 lea     rdi, [rbx+24h]
.text:000000000000A4F5                 mov     rdx, rax
.text:000000000000A4F8                 mov     rsi, rbp
.text:000000000000A4FB                 call    rpl_mbrtowc
.text:000000000000A500                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A504                 mov     [rsp+0C8h+n], rax
.text:000000000000A509                 jz      loc_A3C0
.text:000000000000A50F                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000A513                 jz      loc_A3C0
.text:000000000000A519                 test    rax, rax
.text:000000000000A51C                 jnz     short loc_A541
.text:000000000000A51E                 mov     rax, [rsp+0C8h+s1]
.text:000000000000A523                 mov     [rsp+0C8h+n], 1
.text:000000000000A52C                 cmp     byte ptr [rax], 0
.text:000000000000A52F                 jnz     loc_A624
.text:000000000000A535                 mov     edi, [rsp+0C8h+wc]
.text:000000000000A539                 test    edi, edi
.text:000000000000A53B                 jnz     loc_A5FB
.text:000000000000A541
.text:000000000000A541 loc_A541:                               ; CODE XREF: mbscasecmp+5DC↑j
.text:000000000000A541                 lea     rdi, [rbx+4]    ; ps
.text:000000000000A545                 mov     [rsp+0C8h+var_A8], 1
.text:000000000000A54A                 call    _mbsinit
.text:000000000000A54F                 test    eax, eax
.text:000000000000A551                 jz      short loc_A576
.text:000000000000A553                 mov     [rsp+0C8h+var_C8], 0
.text:000000000000A557                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A55C                 jmp     loc_A439
.text:000000000000A561 ; ---------------------------------------------------------------------------
.text:000000000000A561
.text:000000000000A561 loc_A561:                               ; CODE XREF: mbscasecmp:loc_A4A8↑j
.text:000000000000A561                 mov     rdx, rax        ; n
.text:000000000000A564                 call    _memcmp
.text:000000000000A569                 test    eax, eax
.text:000000000000A56B                 jns     loc_A3C0
.text:000000000000A571                 jmp     loc_A3D8
.text:000000000000A576 ; ---------------------------------------------------------------------------
.text:000000000000A576
.text:000000000000A576 loc_A576:                               ; CODE XREF: mbscasecmp+611↑j
.text:000000000000A576                 mov     [rsp+0C8h+var_BC], 1
.text:000000000000A57B                 jmp     loc_A439
.text:000000000000A580 ; ---------------------------------------------------------------------------
.text:000000000000A580
.text:000000000000A580 loc_A580:                               ; CODE XREF: mbscasecmp+53D↑j
.text:000000000000A580                 lea     rdi, [rsp+0C8h+ps] ; ps
.text:000000000000A585                 lea     rbx, [rsp+0C8h+var_88]
.text:000000000000A58A                 call    _mbsinit
.text:000000000000A58F                 test    eax, eax
.text:000000000000A591                 jz      short loc_A600
.text:000000000000A593                 mov     [rsp+0C8h+var_88], 1
.text:000000000000A598
.text:000000000000A598 loc_A598:                               ; CODE XREF: mbscasecmp+51A↑j
.text:000000000000A598                 call    ___ctype_get_mb_cur_max
.text:000000000000A59D                 mov     rbp, [rsp+0C8h+s2]
.text:000000000000A5A2                 mov     rsi, rax
.text:000000000000A5A5                 mov     rdi, rbp
.text:000000000000A5A8                 call    strnlen1
.text:000000000000A5AD                 lea     rcx, [rbx+4]
.text:000000000000A5B1                 lea     rdi, [rbx+24h]
.text:000000000000A5B5                 mov     rdx, rax
.text:000000000000A5B8                 mov     rsi, rbp
.text:000000000000A5BB                 call    rpl_mbrtowc
.text:000000000000A5C0                 lea     rdx, [rax+2]
.text:000000000000A5C4                 mov     [rsp+0C8h+var_70], rax
.text:000000000000A5C9                 cmp     rdx, 1
.text:000000000000A5CD                 jbe     loc_A3D8
.text:000000000000A5D3                 test    rax, rax
.text:000000000000A5D6                 jnz     loc_A493
.text:000000000000A5DC                 mov     rax, [rsp+0C8h+s2]
.text:000000000000A5E1                 mov     [rsp+0C8h+var_70], 1
.text:000000000000A5EA                 cmp     byte ptr [rax], 0
.text:000000000000A5ED                 jnz     short loc_A624
.text:000000000000A5EF                 mov     ecx, [rsp+0C8h+var_64]
.text:000000000000A5F3                 test    ecx, ecx
.text:000000000000A5F5                 jz      loc_A493
.text:000000000000A5FB
.text:000000000000A5FB loc_A5FB:                               ; CODE XREF: mbscasecmp+2CB↑j
.text:000000000000A5FB                                         ; mbscasecmp+37B↑j ...
.text:000000000000A5FB                 call    mbuiter_multi_next_part_0
.text:000000000000A600 ; ---------------------------------------------------------------------------
.text:000000000000A600
.text:000000000000A600 loc_A600:                               ; CODE XREF: mbscasecmp+25A↑j
.text:000000000000A600                                         ; mbscasecmp+30B↑j ...
.text:000000000000A600                 lea     rcx, __PRETTY_FUNCTION___5133 ; "mbuiter_multi_next"
.text:000000000000A607                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000A60E                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000000A615                 mov     edx, 96h        ; line
.text:000000000000A61A                 call    ___assert_fail
.text:000000000000A61F ; ---------------------------------------------------------------------------
.text:000000000000A61F
.text:000000000000A61F loc_A61F:                               ; CODE XREF: mbscasecmp+B9↑j
.text:000000000000A61F                 call    ___stack_chk_fail
.text:000000000000A624 ; ---------------------------------------------------------------------------
.text:000000000000A624
.text:000000000000A624 loc_A624:                               ; CODE XREF: mbscasecmp+2BD↑j
.text:000000000000A624                                         ; mbscasecmp+36D↑j ...
.text:000000000000A624                 lea     rcx, __PRETTY_FUNCTION___5133 ; "mbuiter_multi_next"
.text:000000000000A62B                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000A632                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:000000000000A639                 mov     edx, 0B2h       ; line
.text:000000000000A63E                 call    ___assert_fail
.text:000000000000A63E ; } // starts at 9F40
.text:000000000000A63E mbscasecmp      endp
.text:000000000000A63E
.text:000000000000A63E ; ---------------------------------------------------------------------------
.text:000000000000A643                 align 10h
.text:000000000000A650
.text:000000000000A650 ; =============== S U B R O U T I N E =======================================
.text:000000000000A650
.text:000000000000A650
.text:000000000000A650                 public set_program_name
.text:000000000000A650 set_program_name proc near              ; CODE XREF: main+5A↑p
.text:000000000000A650 ; __unwind {
.text:000000000000A650                 test    rdi, rdi
.text:000000000000A653                 push    rbx
.text:000000000000A654                 jz      short loc_A6CD
.text:000000000000A656                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000A65B                 mov     rbx, rdi
.text:000000000000A65E                 call    _strrchr
.text:000000000000A663                 test    rax, rax
.text:000000000000A666                 jz      short loc_A6BD
.text:000000000000A668                 lea     r8, [rax+1]
.text:000000000000A66C                 mov     rdx, r8
.text:000000000000A66F                 sub     rdx, rbx
.text:000000000000A672                 cmp     rdx, 6
.text:000000000000A676                 jle     short loc_A6BD
.text:000000000000A678                 lea     rsi, [rax-6]
.text:000000000000A67C                 lea     rdi, aLibs      ; "/.libs/"
.text:000000000000A683                 mov     ecx, 7
.text:000000000000A688                 repe cmpsb
.text:000000000000A68A                 setnbe  dl
.text:000000000000A68D                 sbb     dl, 0
.text:000000000000A690                 test    dl, dl
.text:000000000000A692                 jnz     short loc_A6BD
.text:000000000000A694                 lea     rdi, aLt        ; "lt-"
.text:000000000000A69B                 mov     ecx, 3
.text:000000000000A6A0                 mov     rsi, r8
.text:000000000000A6A3                 mov     rbx, r8
.text:000000000000A6A6                 repe cmpsb
.text:000000000000A6A8                 setnbe  dl
.text:000000000000A6AB                 sbb     dl, 0
.text:000000000000A6AE                 test    dl, dl
.text:000000000000A6B0                 jnz     short loc_A6BD
.text:000000000000A6B2                 lea     rbx, [rax+4]
.text:000000000000A6B6                 mov     cs:__bss_start, rbx
.text:000000000000A6BD
.text:000000000000A6BD loc_A6BD:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000A6BD                                         ; set_program_name+26↑j ...
.text:000000000000A6BD                 mov     cs:program_name, rbx
.text:000000000000A6C4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000A6CB                 pop     rbx
.text:000000000000A6CC                 retn
.text:000000000000A6CD ; ---------------------------------------------------------------------------
.text:000000000000A6CD
.text:000000000000A6CD loc_A6CD:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000A6CD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000A6D4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000A6DB                 mov     edx, 37h ; '7'  ; n
.text:000000000000A6E0                 mov     esi, 1          ; size
.text:000000000000A6E5                 call    _fwrite
.text:000000000000A6EA                 call    _abort
.text:000000000000A6EA ; } // starts at A650
.text:000000000000A6EA set_program_name endp
.text:000000000000A6EA
.text:000000000000A6EA ; ---------------------------------------------------------------------------
.text:000000000000A6EF                 align 10h
.text:000000000000A6F0
.text:000000000000A6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6F0
.text:000000000000A6F0 ; Attributes: info_from_lumina
.text:000000000000A6F0
.text:000000000000A6F0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:000000000000A6F0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:000000000000A6F0                                         ; quotearg_buffer_restyled+117B↓p
.text:000000000000A6F0 ; __unwind {
.text:000000000000A6F0                 push    rbp
.text:000000000000A6F1                 push    rbx
.text:000000000000A6F2                 mov     rbp, rdi
.text:000000000000A6F5                 mov     ebx, esi
.text:000000000000A6F7                 sub     rsp, 8
.text:000000000000A6FB                 call    locale_charset
.text:000000000000A700                 movzx   edx, byte ptr [rax]
.text:000000000000A703                 and     edx, 0FFFFFFDFh
.text:000000000000A706                 cmp     dl, 55h ; 'U'
.text:000000000000A709                 jz      short loc_A780
.text:000000000000A70B                 cmp     dl, 47h ; 'G'
.text:000000000000A70E                 jz      short loc_A730
.text:000000000000A710
.text:000000000000A710 loc_A710:                               ; CODE XREF: gettext_quote+4A↓j
.text:000000000000A710                                         ; gettext_quote+50↓j ...
.text:000000000000A710                 lea     rax, unk_21ACB
.text:000000000000A717                 lea     rdx, aIterCurPtr0+15h ; "'"
.text:000000000000A71E                 cmp     ebx, 9
.text:000000000000A721                 cmovnz  rax, rdx
.text:000000000000A725                 add     rsp, 8
.text:000000000000A729                 pop     rbx
.text:000000000000A72A                 pop     rbp
.text:000000000000A72B                 retn
.text:000000000000A72B ; ---------------------------------------------------------------------------
.text:000000000000A72C                 align 10h
.text:000000000000A730
.text:000000000000A730 loc_A730:                               ; CODE XREF: gettext_quote+1E↑j
.text:000000000000A730                 movzx   edx, byte ptr [rax+1]
.text:000000000000A734                 and     edx, 0FFFFFFDFh
.text:000000000000A737                 cmp     dl, 42h ; 'B'
.text:000000000000A73A                 jnz     short loc_A710
.text:000000000000A73C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:000000000000A740                 jnz     short loc_A710
.text:000000000000A742                 cmp     byte ptr [rax+3], 38h ; '8'
.text:000000000000A746                 jnz     short loc_A710
.text:000000000000A748                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000A74C                 jnz     short loc_A710
.text:000000000000A74E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:000000000000A752                 jnz     short loc_A710
.text:000000000000A754                 cmp     byte ptr [rax+6], 30h ; '0'
.text:000000000000A758                 jnz     short loc_A710
.text:000000000000A75A                 cmp     byte ptr [rax+7], 0
.text:000000000000A75E                 jnz     short loc_A710
.text:000000000000A760                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000A764                 lea     rax, unk_21AC4
.text:000000000000A76B                 lea     rdx, unk_21AC8
.text:000000000000A772                 cmovnz  rax, rdx
.text:000000000000A776                 add     rsp, 8
.text:000000000000A77A                 pop     rbx
.text:000000000000A77B                 pop     rbp
.text:000000000000A77C                 retn
.text:000000000000A77C ; ---------------------------------------------------------------------------
.text:000000000000A77D                 align 20h
.text:000000000000A780
.text:000000000000A780 loc_A780:                               ; CODE XREF: gettext_quote+19↑j
.text:000000000000A780                 movzx   edx, byte ptr [rax+1]
.text:000000000000A784                 and     edx, 0FFFFFFDFh
.text:000000000000A787                 cmp     dl, 54h ; 'T'
.text:000000000000A78A                 jnz     short loc_A710
.text:000000000000A78C                 movzx   edx, byte ptr [rax+2]
.text:000000000000A790                 and     edx, 0FFFFFFDFh
.text:000000000000A793                 cmp     dl, 46h ; 'F'
.text:000000000000A796                 jnz     loc_A710
.text:000000000000A79C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000000A7A0                 jnz     loc_A710
.text:000000000000A7A6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000A7AA                 jnz     loc_A710
.text:000000000000A7B0                 cmp     byte ptr [rax+5], 0
.text:000000000000A7B4                 jnz     loc_A710
.text:000000000000A7BA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000A7BE                 lea     rax, unk_21ABC
.text:000000000000A7C5                 lea     rdx, unk_21AC0
.text:000000000000A7CC                 cmovnz  rax, rdx
.text:000000000000A7D0                 add     rsp, 8
.text:000000000000A7D4                 pop     rbx
.text:000000000000A7D5                 pop     rbp
.text:000000000000A7D6                 retn
.text:000000000000A7D6 ; } // starts at A6F0
.text:000000000000A7D6 gettext_quote   endp
.text:000000000000A7D6
.text:000000000000A7D6 ; ---------------------------------------------------------------------------
.text:000000000000A7D7                 align 20h
.text:000000000000A7E0
.text:000000000000A7E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7E0
.text:000000000000A7E0 ; Attributes: info_from_lumina
.text:000000000000A7E0
.text:000000000000A7E0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:000000000000A7E0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:000000000000A7E0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:000000000000A7E0
.text:000000000000A7E0 var_E0          = dword ptr -0E0h
.text:000000000000A7E0 var_DB          = byte ptr -0DBh
.text:000000000000A7E0 var_DA          = byte ptr -0DAh
.text:000000000000A7E0 var_D9          = byte ptr -0D9h
.text:000000000000A7E0 s               = qword ptr -0D8h
.text:000000000000A7E0 n               = qword ptr -0D0h
.text:000000000000A7E0 var_C8          = qword ptr -0C8h
.text:000000000000A7E0 ps              = qword ptr -0C0h
.text:000000000000A7E0 var_B8          = qword ptr -0B8h
.text:000000000000A7E0 var_B0          = qword ptr -0B0h
.text:000000000000A7E0 var_A8          = qword ptr -0A8h
.text:000000000000A7E0 s2              = qword ptr -0A0h
.text:000000000000A7E0 var_98          = qword ptr -98h
.text:000000000000A7E0 var_90          = qword ptr -90h
.text:000000000000A7E0 var_88          = qword ptr -88h
.text:000000000000A7E0 var_80          = qword ptr -80h
.text:000000000000A7E0 var_78          = qword ptr -78h
.text:000000000000A7E0 var_70          = dword ptr -70h
.text:000000000000A7E0 var_6C          = byte ptr -6Ch
.text:000000000000A7E0 var_6B          = byte ptr -6Bh
.text:000000000000A7E0 var_6A          = byte ptr -6Ah
.text:000000000000A7E0 var_69          = byte ptr -69h
.text:000000000000A7E0 var_68          = qword ptr -68h
.text:000000000000A7E0 var_60          = qword ptr -60h
.text:000000000000A7E0 wc              = dword ptr -4Ch
.text:000000000000A7E0 var_48          = qword ptr -48h
.text:000000000000A7E0 var_40          = qword ptr -40h
.text:000000000000A7E0 arg_0           = qword ptr  8
.text:000000000000A7E0 arg_8           = qword ptr  10h
.text:000000000000A7E0 arg_10          = qword ptr  18h
.text:000000000000A7E0
.text:000000000000A7E0 ; __unwind {
.text:000000000000A7E0                 push    r15
.text:000000000000A7E2                 push    r14
.text:000000000000A7E4                 mov     r15d, r8d
.text:000000000000A7E7                 push    r13
.text:000000000000A7E9                 push    r12
.text:000000000000A7EB                 mov     r14, rdi
.text:000000000000A7EE                 push    rbp
.text:000000000000A7EF                 push    rbx
.text:000000000000A7F0                 mov     ebx, r9d
.text:000000000000A7F3                 mov     r13, rsi
.text:000000000000A7F6                 mov     rbp, rcx
.text:000000000000A7F9                 and     ebx, 2
.text:000000000000A7FC                 sub     rsp, 0B8h
.text:000000000000A803                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000A80B                 mov     [rsp+0E8h+s], rdx
.text:000000000000A810                 mov     [rsp+0E8h+var_E0], r8d
.text:000000000000A815                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000A81A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000A81F                 mov     rax, [rsp+0E8h+arg_8]
.text:000000000000A827                 mov     [rsp+0E8h+var_80], rax
.text:000000000000A82C                 mov     rax, [rsp+0E8h+arg_10]
.text:000000000000A834                 mov     [rsp+0E8h+var_88], rax
.text:000000000000A839                 mov     rax, fs:28h
.text:000000000000A842                 mov     [rsp+0E8h+var_40], rax
.text:000000000000A84A                 xor     eax, eax
.text:000000000000A84C                 call    ___ctype_get_mb_cur_max
.text:000000000000A851                 cmp     r15d, 0Ah       ; switch 11 cases
.text:000000000000A855                 mov     [rsp+0E8h+var_90], rax
.text:000000000000A85A                 ja      def_A871        ; jumptable 00000000000121F1 default case
.text:000000000000A860                 lea     rcx, jpt_A871
.text:000000000000A867                 mov     edx, r15d
.text:000000000000A86A                 movsxd  rax, ds:(jpt_A871 - 21B20h)[rcx+rdx*4]
.text:000000000000A86E                 add     rax, rcx
.text:000000000000A871                 jmp     rax             ; switch jump
.text:000000000000A873 ; ---------------------------------------------------------------------------
.text:000000000000A873
.text:000000000000A873 loc_A873:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000A873                                         ; quotearg_buffer_restyled+C66↓j
.text:000000000000A873                                         ; DATA XREF: ...
.text:000000000000A873                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:000000000000A878                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000A87D                 xor     r12d, r12d
.text:000000000000A880                 mov     [rsp+0E8h+var_98], 0
.text:000000000000A889                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000A88E                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000A893
.text:000000000000A893 loc_A893:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:000000000000A893                 lea     rax, aIterCurPtr0+15h ; "'"
.text:000000000000A89A                 mov     [rsp+0E8h+n], 1
.text:000000000000A8A3                 xor     r15d, r15d
.text:000000000000A8A6                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000A8AE                 mov     [rsp+0E8h+s2], rax
.text:000000000000A8B3
.text:000000000000A8B3 loc_A8B3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:000000000000A8B3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:000000000000A8B3                 xor     r11d, r11d
.text:000000000000A8B6                 mov     rax, rbp
.text:000000000000A8B9                 mov     r8d, r12d
.text:000000000000A8BC                 mov     rbp, r11
.text:000000000000A8BF                 mov     r11, rax
.text:000000000000A8C2                 nop     word ptr [rax+rax+00h]
.text:000000000000A8C8
.text:000000000000A8C8 loc_A8C8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:000000000000A8C8                                         ; quotearg_buffer_restyled+42C↓j
.text:000000000000A8C8                 cmp     r11, rbp
.text:000000000000A8CB                 setnz   r12b
.text:000000000000A8CF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000A8D3                 jnz     short loc_A8E2
.text:000000000000A8D5                 mov     rax, [rsp+0E8h+s]
.text:000000000000A8DA                 cmp     byte ptr [rax+rbp], 0
.text:000000000000A8DE                 setnz   r12b
.text:000000000000A8E2
.text:000000000000A8E2 loc_A8E2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:000000000000A8E2                 test    r12b, r12b
.text:000000000000A8E5                 jz      loc_AF40
.text:000000000000A8EB                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000A8F0                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000A8F5                 lea     r9, [rdi+rbp]
.text:000000000000A8F9                 setnz   al
.text:000000000000A8FC                 and     al, [rsp+0E8h+var_DB]
.text:000000000000A900                 mov     r10d, eax
.text:000000000000A903                 jz      loc_A9B0
.text:000000000000A909                 mov     rax, [rsp+0E8h+n]
.text:000000000000A90E                 test    rax, rax
.text:000000000000A911                 jz      loc_AD40
.text:000000000000A917                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000A91B                 lea     rbx, [rbp+rax+0]
.text:000000000000A920                 jnz     short loc_A950
.text:000000000000A922                 cmp     rax, 1
.text:000000000000A926                 jbe     short loc_A950
.text:000000000000A928                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000A92D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:000000000000A932                 mov     [rsp+0E8h+ps], r9
.text:000000000000A937                 call    _strlen
.text:000000000000A93C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000A942                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000A948                 mov     r11, rax
.text:000000000000A94B                 mov     r9, [rsp+0E8h+ps]
.text:000000000000A950
.text:000000000000A950 loc_A950:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:000000000000A950                                         ; quotearg_buffer_restyled+146↑j
.text:000000000000A950                 cmp     rbx, r11
.text:000000000000A953                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000A958                 ja      loc_AF10
.text:000000000000A95E                 mov     rdx, [rsp+0E8h+n] ; n
.text:000000000000A963                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:000000000000A968                 mov     rdi, r9         ; s1
.text:000000000000A96B                 mov     [rsp+0E8h+var_A8], r11
.text:000000000000A970                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000A975                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000A97A                 call    _memcmp
.text:000000000000A97F                 test    eax, eax
.text:000000000000A981                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000A986                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000A98C                 mov     r11, [rsp+0E8h+var_A8]
.text:000000000000A991                 jnz     loc_AF10
.text:000000000000A997                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000A99C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000A9A2                 jnz     loc_B925
.text:000000000000A9A8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A9B0
.text:000000000000A9B0 loc_A9B0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:000000000000A9B0                                         ; quotearg_buffer_restyled+733↓j
.text:000000000000A9B0                 movzx   ebx, byte ptr [r9]
.text:000000000000A9B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000A9B7                 ja      def_A9CE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000A9BD                 lea     rcx, jpt_A9CE
.text:000000000000A9C4                 movzx   edx, bl
.text:000000000000A9C7                 movsxd  rax, ds:(jpt_A9CE - 21B4Ch)[rcx+rdx*4]
.text:000000000000A9CB                 add     rax, rcx
.text:000000000000A9CE                 jmp     rax             ; switch jump
.text:000000000000A9D0 ; ---------------------------------------------------------------------------
.text:000000000000A9D0
.text:000000000000A9D0 loc_A9D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000A9D0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000A9D0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:000000000000A9D3
.text:000000000000A9D3 loc_A9D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000A9D3                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000A9D3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:000000000000A9D7                 setnz   al
.text:000000000000A9DA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000A9DE                 jnz     short loc_A9EC
.text:000000000000A9E0                 mov     rax, [rsp+0E8h+s]
.text:000000000000A9E5                 cmp     byte ptr [rax+1], 0
.text:000000000000A9E9                 setnz   al
.text:000000000000A9EC
.text:000000000000A9EC loc_A9EC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000A9EC                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000A9F1                 setz    dl
.text:000000000000A9F4                 test    al, al
.text:000000000000A9F6                 jz      loc_AC48
.text:000000000000A9FC
.text:000000000000A9FC loc_A9FC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000A9FC                 xor     r12d, r12d
.text:000000000000A9FF                 xor     eax, eax
.text:000000000000AA01                 nop     dword ptr [rax+00000000h]
.text:000000000000AA08
.text:000000000000AA08 loc_AA08:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:000000000000AA08                                         ; quotearg_buffer_restyled+30C↓j ...
.text:000000000000AA08                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000AA0D                 jnz     loc_AB22
.text:000000000000AA13                 test    dl, dl
.text:000000000000AA15                 jnz     loc_AB22
.text:000000000000AA1B
.text:000000000000AA1B loc_AA1B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000AA1B                 mov     rsi, [rsp+0E8h+var_C8]
.text:000000000000AA20                 test    rsi, rsi
.text:000000000000AA23                 jz      short loc_AA39
.text:000000000000AA25                 mov     edx, ebx
.text:000000000000AA27                 shr     dl, 5
.text:000000000000AA2A                 movzx   edx, dl
.text:000000000000AA2D                 mov     edx, [rsi+rdx*4]
.text:000000000000AA30                 bt      edx, ebx
.text:000000000000AA33                 jb      loc_AB83
.text:000000000000AA39
.text:000000000000AA39 loc_AA39:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:000000000000AA39                                         ; quotearg_buffer_restyled+34D↓j ...
.text:000000000000AA39                 test    r10b, r10b
.text:000000000000AA3C                 jnz     loc_AB83
.text:000000000000AA42                 xor     eax, 1
.text:000000000000AA45                 add     rbp, 1
.text:000000000000AA49                 and     eax, r8d
.text:000000000000AA4C
.text:000000000000AA4C loc_AA4C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000AA4C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000AA4C                 test    al, al
.text:000000000000AA4E                 jz      short loc_AA70
.text:000000000000AA50                 cmp     r13, r15
.text:000000000000AA53                 jbe     short loc_AA5A
.text:000000000000AA55                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000AA5A
.text:000000000000AA5A loc_AA5A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000AA5A                 lea     rax, [r15+1]
.text:000000000000AA5E                 cmp     r13, rax
.text:000000000000AA61                 jbe     short loc_AA69
.text:000000000000AA63                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000AA69
.text:000000000000AA69 loc_AA69:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:000000000000AA69                 add     r15, 2
.text:000000000000AA6D                 xor     r8d, r8d
.text:000000000000AA70
.text:000000000000AA70 loc_AA70:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:000000000000AA70                                         ; quotearg_buffer_restyled+403↓j ...
.text:000000000000AA70                 cmp     r15, r13
.text:000000000000AA73                 jnb     short loc_AA79
.text:000000000000AA75                 mov     [r14+r15], bl
.text:000000000000AA79
.text:000000000000AA79 loc_AA79:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:000000000000AA79                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000AA7E                 add     r15, 1
.text:000000000000AA82                 mov     eax, 0
.text:000000000000AA87                 test    r12b, r12b
.text:000000000000AA8A                 cmovz   edi, eax
.text:000000000000AA8D                 mov     [rsp+0E8h+var_DA], dil
.text:000000000000AA92                 jmp     loc_A8C8
.text:000000000000AA92 ; ---------------------------------------------------------------------------
.text:000000000000AA97                 align 20h
.text:000000000000AAA0
.text:000000000000AAA0 loc_AAA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000AAA0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AAA0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:000000000000AAA3
.text:000000000000AAA3 loc_AAA3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AAA3                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AAA3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:000000000000AAA7                 cmp     eax, 2
.text:000000000000AAAA                 jz      loc_B068
.text:000000000000AAB0                 cmp     eax, 5
.text:000000000000AAB3                 jz      loc_B028
.text:000000000000AAB9                 cmp     eax, 2
.text:000000000000AABC                 mov     ebx, 3Fh ; '?'
.text:000000000000AAC1                 setz    dl
.text:000000000000AAC4                 xor     r12d, r12d
.text:000000000000AAC7                 xor     eax, eax
.text:000000000000AAC9                 jmp     loc_AA08
.text:000000000000AAC9 ; ---------------------------------------------------------------------------
.text:000000000000AACE                 align 10h
.text:000000000000AAD0
.text:000000000000AAD0 loc_AAD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000AAD0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AAD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:000000000000AAD3
.text:000000000000AAD3 loc_AAD3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AAD3                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AAD3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:000000000000AAD8                 jz      loc_AFE0
.text:000000000000AADE                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000AAE3                 xor     edx, edx
.text:000000000000AAE5                 xor     eax, eax
.text:000000000000AAE7                 mov     ebx, 27h ; '''
.text:000000000000AAEC                 jmp     loc_AA08
.text:000000000000AAEC ; ---------------------------------------------------------------------------
.text:000000000000AAF1                 align 8
.text:000000000000AAF8
.text:000000000000AAF8 loc_AAF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AAF8                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AAF8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000AAFD                 mov     ebx, 74h ; 't'
.text:000000000000AB02
.text:000000000000AB02 loc_AB02:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:000000000000AB02                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:000000000000AB02                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AB07                 setz    al
.text:000000000000AB0A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000AB0E                 jnz     loc_AC5E
.text:000000000000AB14
.text:000000000000AB14 loc_AB14:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:000000000000AB14                                         ; quotearg_buffer_restyled+45A↓j ...
.text:000000000000AB14                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000AB19                 jnz     short loc_AB80
.text:000000000000AB1B
.text:000000000000AB1B loc_AB1B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000AB1B                 mov     ebx, edx
.text:000000000000AB1D                 xor     r12d, r12d
.text:000000000000AB20                 xor     eax, eax
.text:000000000000AB22
.text:000000000000AB22 loc_AB22:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:000000000000AB22                                         ; quotearg_buffer_restyled+235↑j
.text:000000000000AB22                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AB27                 jnz     loc_AA1B
.text:000000000000AB2D                 jmp     loc_AA39
.text:000000000000AB2D ; ---------------------------------------------------------------------------
.text:000000000000AB32                 align 8
.text:000000000000AB38
.text:000000000000AB38 loc_AB38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AB38                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AB38                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000AB3D                 mov     ebx, 62h ; 'b'
.text:000000000000AB42                 jmp     short loc_AB14
.text:000000000000AB42 ; ---------------------------------------------------------------------------
.text:000000000000AB44                 align 8
.text:000000000000AB48
.text:000000000000AB48 loc_AB48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AB48                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AB48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000AB4D                 jz      loc_AF20
.text:000000000000AB53                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000AB58                 jz      loc_AD70
.text:000000000000AB5E
.text:000000000000AB5E loc_AB5E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000AB5E                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AB63                 jz      loc_AD70
.text:000000000000AB69                 cmp     [rsp+0E8h+n], 0
.text:000000000000AB6F                 jnz     loc_AF2B
.text:000000000000AB75                 mov     ebx, 5Ch ; '\'
.text:000000000000AB7A                 nop     word ptr [rax+rax+00h]
.text:000000000000AB80
.text:000000000000AB80 loc_AB80:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:000000000000AB80                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:000000000000AB80                 xor     r12d, r12d
.text:000000000000AB83
.text:000000000000AB83 loc_AB83:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:000000000000AB83                                         ; quotearg_buffer_restyled+25C↑j
.text:000000000000AB83                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AB88                 setz    dl
.text:000000000000AB8B                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AB90                 mov     eax, edx
.text:000000000000AB92                 jnz     loc_B3E8
.text:000000000000AB98                 mov     eax, r8d
.text:000000000000AB9B                 xor     eax, 1
.text:000000000000AB9E                 and     al, dl
.text:000000000000ABA0                 jz      short loc_ABD1
.text:000000000000ABA2                 cmp     r13, r15
.text:000000000000ABA5                 jbe     short loc_ABAC
.text:000000000000ABA7                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000ABAC
.text:000000000000ABAC loc_ABAC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000ABAC                 lea     rdx, [r15+1]
.text:000000000000ABB0                 cmp     r13, rdx
.text:000000000000ABB3                 jbe     short loc_ABBB
.text:000000000000ABB5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000ABBB
.text:000000000000ABBB loc_ABBB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000ABBB                 lea     rdx, [r15+2]
.text:000000000000ABBF                 cmp     r13, rdx
.text:000000000000ABC2                 jbe     short loc_ABCA
.text:000000000000ABC4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000ABCA
.text:000000000000ABCA loc_ABCA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000ABCA                 add     r15, 3
.text:000000000000ABCE                 mov     r8d, eax
.text:000000000000ABD1
.text:000000000000ABD1 loc_ABD1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:000000000000ABD1                 cmp     r13, r15
.text:000000000000ABD4                 jbe     short loc_ABDB
.text:000000000000ABD6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000ABDB
.text:000000000000ABDB loc_ABDB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000ABDB                 add     r15, 1
.text:000000000000ABDF                 add     rbp, 1
.text:000000000000ABE3                 jmp     loc_AA70
.text:000000000000ABE3 ; ---------------------------------------------------------------------------
.text:000000000000ABE8                 align 10h
.text:000000000000ABF0
.text:000000000000ABF0 loc_ABF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000ABF0                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000ABF0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:000000000000ABF5                 jnz     loc_ADC3
.text:000000000000ABFB                 xor     edx, edx
.text:000000000000ABFD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:000000000000AC02                 jz      loc_AB1B
.text:000000000000AC08                 add     rbp, 1
.text:000000000000AC0C                 jmp     loc_A8C8
.text:000000000000AC0C ; ---------------------------------------------------------------------------
.text:000000000000AC11                 align 8
.text:000000000000AC18
.text:000000000000AC18 loc_AC18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC18                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000AC1D                 setz    dl
.text:000000000000AC20                 xor     eax, eax
.text:000000000000AC22                 jmp     loc_AA08
.text:000000000000AC22 ; ---------------------------------------------------------------------------
.text:000000000000AC27                 align 10h
.text:000000000000AC30
.text:000000000000AC30 loc_AC30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC30                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC30                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:000000000000AC35                 mov     ebx, 61h ; 'a'
.text:000000000000AC3A                 jmp     loc_AB14
.text:000000000000AC3A ; ---------------------------------------------------------------------------
.text:000000000000AC3F                 align 20h
.text:000000000000AC40
.text:000000000000AC40 loc_AC40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC40                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:000000000000AC45                 setz    dl
.text:000000000000AC48
.text:000000000000AC48 loc_AC48:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:000000000000AC48                                         ; quotearg_buffer_restyled+6A3↓j
.text:000000000000AC48                 test    rbp, rbp
.text:000000000000AC4B                 jnz     loc_A9FC
.text:000000000000AC51
.text:000000000000AC51 loc_AC51:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:000000000000AC51                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:000000000000AC51                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000AC56                 and     al, dl
.text:000000000000AC58                 jz      loc_AA08
.text:000000000000AC5E
.text:000000000000AC5E loc_AC5E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000AC5E                 mov     rbp, r11
.text:000000000000AC61                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000AC69                 jmp     loc_B369
.text:000000000000AC69 ; ---------------------------------------------------------------------------
.text:000000000000AC6E                 align 10h
.text:000000000000AC70
.text:000000000000AC70 loc_AC70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC70                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000AC75                 setz    dl
.text:000000000000AC78                 xor     r12d, r12d
.text:000000000000AC7B                 jmp     short loc_AC51
.text:000000000000AC7B ; ---------------------------------------------------------------------------
.text:000000000000AC7D                 align 20h
.text:000000000000AC80
.text:000000000000AC80 loc_AC80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC80                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC80                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:000000000000AC85                 mov     ebx, 20h ; ' '
.text:000000000000AC8A                 setz    dl
.text:000000000000AC8D                 jmp     short loc_AC51
.text:000000000000AC8D ; ---------------------------------------------------------------------------
.text:000000000000AC8F                 align 10h
.text:000000000000AC90
.text:000000000000AC90 loc_AC90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AC90                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000AC90                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:000000000000AC95                 mov     ebx, 72h ; 'r'
.text:000000000000AC9A                 jmp     loc_AB02
.text:000000000000AC9A ; ---------------------------------------------------------------------------
.text:000000000000AC9F                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 loc_ACA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000ACA0                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000ACA0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:000000000000ACA5                 mov     ebx, 66h ; 'f'
.text:000000000000ACAA                 jmp     loc_AB14
.text:000000000000ACAA ; ---------------------------------------------------------------------------
.text:000000000000ACAF                 align 10h
.text:000000000000ACB0
.text:000000000000ACB0 loc_ACB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000ACB0                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000ACB0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:000000000000ACB5                 mov     ebx, 76h ; 'v'
.text:000000000000ACBA                 jmp     loc_AB14
.text:000000000000ACBA ; ---------------------------------------------------------------------------
.text:000000000000ACBF                 align 20h
.text:000000000000ACC0
.text:000000000000ACC0 loc_ACC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000ACC0                                         ; DATA XREF: .rodata:jpt_A9CE↓o
.text:000000000000ACC0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:000000000000ACC5                 mov     ebx, 6Eh ; 'n'
.text:000000000000ACCA                 jmp     loc_AB02
.text:000000000000ACCA ; ---------------------------------------------------------------------------
.text:000000000000ACCF                 align 10h
.text:000000000000ACD0
.text:000000000000ACD0 def_AD5A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:000000000000ACD0                                         ; quotearg_buffer_restyled+57A↓j
.text:000000000000ACD0                                         ; DATA XREF: ...
.text:000000000000ACD0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000ACD3                 nop     dword ptr [rax+rax+00h]
.text:000000000000ACD8
.text:000000000000ACD8 def_A9CE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:000000000000ACD8                                         ; quotearg_buffer_restyled+1EE↑j
.text:000000000000ACD8                                         ; DATA XREF: ...
.text:000000000000ACD8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000ACDE                 jnz     loc_B088
.text:000000000000ACE4                 mov     [rsp+0E8h+var_B0], r11
.text:000000000000ACE9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000ACEE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000ACF3                 call    ___ctype_b_loc
.text:000000000000ACF8                 mov     rcx, [rax]
.text:000000000000ACFB                 movzx   edx, bl
.text:000000000000ACFE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000AD04                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000AD0A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000AD0F                 mov     edi, 1
.text:000000000000AD14                 movzx   eax, word ptr [rcx+rdx*2]
.text:000000000000AD18                 and     ax, 4000h
.text:000000000000AD1C                 setnz   r12b
.text:000000000000AD20                 setz    al
.text:000000000000AD23                 and     al, [rsp+0E8h+var_DB]
.text:000000000000AD27
.text:000000000000AD27 loc_AD27:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:000000000000AD27                 test    al, al
.text:000000000000AD29                 jnz     loc_B6C1
.text:000000000000AD2F                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AD34                 setz    dl
.text:000000000000AD37                 jmp     loc_AA08
.text:000000000000AD37 ; ---------------------------------------------------------------------------
.text:000000000000AD3C                 align 20h
.text:000000000000AD40
.text:000000000000AD40 loc_AD40:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:000000000000AD40                 movzx   ebx, byte ptr [r9]
.text:000000000000AD44                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000AD47                 ja      short def_AD5A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000AD49                 lea     rcx, jpt_AD5A
.text:000000000000AD50                 movzx   edx, bl
.text:000000000000AD53                 movsxd  rax, ds:(jpt_AD5A - 21D48h)[rcx+rdx*4]
.text:000000000000AD57                 add     rax, rcx
.text:000000000000AD5A                 jmp     rax             ; switch jump
.text:000000000000AD5A ; ---------------------------------------------------------------------------
.text:000000000000AD5C                 align 20h
.text:000000000000AD60
.text:000000000000AD60 loc_AD60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AD60                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AD60                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:000000000000AD63                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000AD68                 jnz     loc_AB5E
.text:000000000000AD6E                 xchg    ax, ax
.text:000000000000AD70
.text:000000000000AD70 loc_AD70:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:000000000000AD70                                         ; quotearg_buffer_restyled+383↑j
.text:000000000000AD70                 mov     edx, 5Ch ; '\'
.text:000000000000AD75                 mov     ebx, 5Ch ; '\'
.text:000000000000AD7A                 jmp     loc_AB14
.text:000000000000AD7A ; ---------------------------------------------------------------------------
.text:000000000000AD7F                 align 20h
.text:000000000000AD80
.text:000000000000AD80 loc_AD80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AD80                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AD80                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:000000000000AD85                 xor     r10d, r10d
.text:000000000000AD88                 mov     ebx, 66h ; 'f'
.text:000000000000AD8D                 jmp     loc_AB14
.text:000000000000AD8D ; ---------------------------------------------------------------------------
.text:000000000000AD92                 align 8
.text:000000000000AD98
.text:000000000000AD98 loc_AD98:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AD98                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AD98                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000AD9D                 xor     r10d, r10d
.text:000000000000ADA0                 mov     ebx, 6Eh ; 'n'
.text:000000000000ADA5                 jmp     loc_AB02
.text:000000000000ADA5 ; ---------------------------------------------------------------------------
.text:000000000000ADAA                 align 10h
.text:000000000000ADB0
.text:000000000000ADB0 loc_ADB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000ADB0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000ADB0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:000000000000ADB5                 jmp     loc_AB80
.text:000000000000ADB5 ; ---------------------------------------------------------------------------
.text:000000000000ADBA                 align 20h
.text:000000000000ADC0
.text:000000000000ADC0 loc_ADC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000ADC0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000ADC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:000000000000ADC3
.text:000000000000ADC3 loc_ADC3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:000000000000ADC3                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000ADC8                 setz    dl
.text:000000000000ADCB                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000ADD0                 jnz     loc_B96A
.text:000000000000ADD6                 mov     eax, r8d
.text:000000000000ADD9                 mov     rcx, r15
.text:000000000000ADDC                 xor     eax, 1
.text:000000000000ADDF                 and     al, dl
.text:000000000000ADE1                 jz      short loc_AE10
.text:000000000000ADE3                 cmp     r13, r15
.text:000000000000ADE6                 jbe     short loc_ADED
.text:000000000000ADE8                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000ADED
.text:000000000000ADED loc_ADED:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000ADED                 lea     rcx, [r15+1]
.text:000000000000ADF1                 cmp     r13, rcx
.text:000000000000ADF4                 jbe     short loc_ADFC
.text:000000000000ADF6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000ADFC
.text:000000000000ADFC loc_ADFC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000ADFC                 lea     rcx, [r15+2]
.text:000000000000AE00                 cmp     r13, rcx
.text:000000000000AE03                 ja      loc_B439
.text:000000000000AE09
.text:000000000000AE09 loc_AE09:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:000000000000AE09                 lea     rcx, [r15+3]
.text:000000000000AE0D                 mov     r8d, eax
.text:000000000000AE10
.text:000000000000AE10 loc_AE10:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:000000000000AE10                 cmp     r13, rcx
.text:000000000000AE13                 jbe     short loc_AE1A
.text:000000000000AE15                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000AE1A
.text:000000000000AE1A loc_AE1A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000AE1A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AE1F                 lea     r15, [rcx+1]
.text:000000000000AE23                 jz      loc_B429
.text:000000000000AE29                 lea     rax, [rbp+1]
.text:000000000000AE2D                 cmp     rax, r11
.text:000000000000AE30                 jnb     short loc_AE4B
.text:000000000000AE32                 mov     rax, [rsp+0E8h+s]
.text:000000000000AE37                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000AE3C                 mov     byte ptr [rsp+0E8h+ps], al
.text:000000000000AE40                 sub     eax, 30h ; '0'
.text:000000000000AE43                 cmp     al, 9
.text:000000000000AE45                 jbe     loc_B679
.text:000000000000AE4B
.text:000000000000AE4B loc_AE4B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000AE4B                 mov     eax, r12d
.text:000000000000AE4E                 mov     ebx, 30h ; '0'
.text:000000000000AE53                 xor     r12d, r12d
.text:000000000000AE56                 jmp     loc_AA08
.text:000000000000AE56 ; ---------------------------------------------------------------------------
.text:000000000000AE5B                 align 20h
.text:000000000000AE60
.text:000000000000AE60 loc_AE60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AE60                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AE60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:000000000000AE65                 mov     r12d, r10d
.text:000000000000AE68                 setz    dl
.text:000000000000AE6B                 xor     r10d, r10d
.text:000000000000AE6E                 xor     eax, eax
.text:000000000000AE70                 jmp     loc_AA08
.text:000000000000AE70 ; ---------------------------------------------------------------------------
.text:000000000000AE75                 align 8
.text:000000000000AE78
.text:000000000000AE78 loc_AE78:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AE78                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AE78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000AE7D                 setz    dl
.text:000000000000AE80                 xor     r10d, r10d
.text:000000000000AE83                 jmp     loc_AC48
.text:000000000000AE83 ; ---------------------------------------------------------------------------
.text:000000000000AE88                 align 10h
.text:000000000000AE90
.text:000000000000AE90 loc_AE90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AE90                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AE90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000AE95                 setz    dl
.text:000000000000AE98                 xor     r10d, r10d
.text:000000000000AE9B                 xor     r12d, r12d
.text:000000000000AE9E                 jmp     loc_AC51
.text:000000000000AE9E ; ---------------------------------------------------------------------------
.text:000000000000AEA3                 align 8
.text:000000000000AEA8
.text:000000000000AEA8 loc_AEA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AEA8                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AEA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000AEAD                 mov     r12d, r10d
.text:000000000000AEB0                 mov     ebx, 20h ; ' '
.text:000000000000AEB5                 setz    dl
.text:000000000000AEB8                 xor     r10d, r10d
.text:000000000000AEBB                 jmp     loc_AC51
.text:000000000000AEC0 ; ---------------------------------------------------------------------------
.text:000000000000AEC0
.text:000000000000AEC0 loc_AEC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AEC0                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AEC0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:000000000000AEC5                 xor     r10d, r10d
.text:000000000000AEC8                 mov     ebx, 72h ; 'r'
.text:000000000000AECD                 jmp     loc_AB02
.text:000000000000AECD ; ---------------------------------------------------------------------------
.text:000000000000AED2                 align 8
.text:000000000000AED8
.text:000000000000AED8 loc_AED8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AED8                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AED8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000AEDD                 jmp     loc_AB80
.text:000000000000AEDD ; ---------------------------------------------------------------------------
.text:000000000000AEE2                 align 8
.text:000000000000AEE8
.text:000000000000AEE8 loc_AEE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AEE8                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AEE8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000AEED                 xor     r10d, r10d
.text:000000000000AEF0                 mov     ebx, 74h ; 't'
.text:000000000000AEF5                 jmp     loc_AB02
.text:000000000000AEF5 ; ---------------------------------------------------------------------------
.text:000000000000AEFA                 align 20h
.text:000000000000AF00
.text:000000000000AF00 loc_AF00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000AF00                                         ; DATA XREF: .rodata:jpt_AD5A↓o
.text:000000000000AF00                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:000000000000AF05                 jmp     loc_AB80
.text:000000000000AF05 ; ---------------------------------------------------------------------------
.text:000000000000AF0A                 align 10h
.text:000000000000AF10
.text:000000000000AF10 loc_AF10:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:000000000000AF10                                         ; quotearg_buffer_restyled+1B1↑j
.text:000000000000AF10                 xor     r10d, r10d
.text:000000000000AF13                 jmp     loc_A9B0
.text:000000000000AF13 ; ---------------------------------------------------------------------------
.text:000000000000AF18                 align 20h
.text:000000000000AF20
.text:000000000000AF20 loc_AF20:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:000000000000AF20                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AF25                 jnz     loc_B890
.text:000000000000AF2B
.text:000000000000AF2B loc_AF2B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000AF2B                 add     rbp, 1
.text:000000000000AF2F                 mov     eax, r8d
.text:000000000000AF32                 xor     r12d, r12d
.text:000000000000AF35                 mov     ebx, 5Ch ; '\'
.text:000000000000AF3A                 jmp     loc_AA4C
.text:000000000000AF3A ; ---------------------------------------------------------------------------
.text:000000000000AF3F                 align 20h
.text:000000000000AF40
.text:000000000000AF40 loc_AF40:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:000000000000AF40                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AF45                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000AF4A                 mov     r12d, r8d
.text:000000000000AF4D                 mov     rbp, r11
.text:000000000000AF50                 setz    dl
.text:000000000000AF53                 mov     eax, ebx
.text:000000000000AF55                 test    r15, r15
.text:000000000000AF58                 setz    cl
.text:000000000000AF5B                 and     eax, edx
.text:000000000000AF5D                 and     al, cl
.text:000000000000AF5F                 jnz     loc_B9C6
.text:000000000000AF65                 mov     eax, ebx
.text:000000000000AF67                 xor     eax, 1
.text:000000000000AF6A                 and     dl, al
.text:000000000000AF6C                 jz      loc_B8DC
.text:000000000000AF72                 cmp     [rsp+0E8h+var_6C], 0
.text:000000000000AF77                 jz      loc_B8DA
.text:000000000000AF7D                 cmp     [rsp+0E8h+var_DA], 0
.text:000000000000AF82                 jnz     loc_B97D
.text:000000000000AF88                 test    r13, r13
.text:000000000000AF8B                 setz    al
.text:000000000000AF8E                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000AF94                 setnz   dl
.text:000000000000AF97                 and     al, dl
.text:000000000000AF99                 jz      loc_B9BC
.text:000000000000AF9F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000AFA4
.text:000000000000AFA4 loc_AFA4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:000000000000AFA4                 lea     rbx, aIterCurPtr0+15h ; "'"
.text:000000000000AFAB                 mov     byte ptr [r14], 27h ; '''
.text:000000000000AFAF                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000AFB7                 mov     r15d, 1
.text:000000000000AFBD                 mov     [rsp+0E8h+n], 1
.text:000000000000AFC6                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000AFCB                 mov     [rsp+0E8h+s2], rbx
.text:000000000000AFD0                 mov     [rsp+0E8h+var_6C], al
.text:000000000000AFD4                 jmp     loc_A8B3
.text:000000000000AFD4 ; ---------------------------------------------------------------------------
.text:000000000000AFD9                 align 20h
.text:000000000000AFE0
.text:000000000000AFE0 loc_AFE0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:000000000000AFE0                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AFE5                 jnz     loc_B890
.text:000000000000AFEB                 test    r13, r13
.text:000000000000AFEE                 jz      loc_B3F0
.text:000000000000AFF4                 xor     edx, edx
.text:000000000000AFF6                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000AFFC                 jnz     loc_B3F0
.text:000000000000B002
.text:000000000000B002 loc_B002:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:000000000000B002                                         ; quotearg_buffer_restyled+122A↓j
.text:000000000000B002                 mov     [rsp+0E8h+var_98], r13
.text:000000000000B007                 add     r15, 3
.text:000000000000B00B                 xor     eax, eax
.text:000000000000B00D                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000B012                 xor     r8d, r8d
.text:000000000000B015                 mov     r13, rdx
.text:000000000000B018                 mov     ebx, 27h ; '''
.text:000000000000B01D                 jmp     loc_AA39
.text:000000000000B01D ; ---------------------------------------------------------------------------
.text:000000000000B022                 align 8
.text:000000000000B028
.text:000000000000B028 loc_B028:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:000000000000B028                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000B02D                 jz      short loc_B050
.text:000000000000B02F                 lea     rcx, [rbp+2]
.text:000000000000B033                 cmp     rcx, r11
.text:000000000000B036                 jnb     short loc_B050
.text:000000000000B038                 mov     rax, [rsp+0E8h+s]
.text:000000000000B03D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:000000000000B042                 jz      loc_B7D2
.text:000000000000B048                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B050
.text:000000000000B050 loc_B050:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:000000000000B050                                         ; quotearg_buffer_restyled+856↑j ...
.text:000000000000B050                 xor     edx, edx
.text:000000000000B052                 xor     r12d, r12d
.text:000000000000B055                 xor     eax, eax
.text:000000000000B057                 mov     ebx, 3Fh ; '?'
.text:000000000000B05C                 jmp     loc_AA08
.text:000000000000B05C ; ---------------------------------------------------------------------------
.text:000000000000B061                 align 8
.text:000000000000B068
.text:000000000000B068 loc_B068:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:000000000000B068                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B06D                 jnz     loc_B890
.text:000000000000B073                 xor     r12d, r12d
.text:000000000000B076                 xor     eax, eax
.text:000000000000B078                 mov     ebx, 3Fh ; '?'
.text:000000000000B07D                 jmp     loc_AA39
.text:000000000000B07D ; ---------------------------------------------------------------------------
.text:000000000000B082                 align 8
.text:000000000000B088
.text:000000000000B088 loc_B088:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:000000000000B088                 lea     rax, [rsp+0E8h+var_48]
.text:000000000000B090                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000B094                 mov     [rsp+0E8h+var_48], 0
.text:000000000000B0A0                 mov     [rsp+0E8h+ps], rax
.text:000000000000B0A5                 jnz     short loc_B0D4
.text:000000000000B0A7                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000B0AC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:000000000000B0B1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:000000000000B0B6                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000B0BB                 call    _strlen
.text:000000000000B0C0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:000000000000B0C6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000B0CC                 mov     r11, rax
.text:000000000000B0CF                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000B0D4
.text:000000000000B0D4 loc_B0D4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:000000000000B0D4                 lea     rax, [rsp+0E8h+wc]
.text:000000000000B0DC                 xor     ecx, ecx
.text:000000000000B0DE                 mov     [rsp+0E8h+var_6A], bl
.text:000000000000B0E2                 mov     [rsp+0E8h+var_6B], r8b
.text:000000000000B0E7                 mov     rbx, rcx
.text:000000000000B0EA                 mov     [rsp+0E8h+var_60], r9
.text:000000000000B0F2                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000B0F7                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000B0FC                 mov     [rsp+0E8h+var_68], r15
.text:000000000000B104                 mov     [rsp+0E8h+var_A8], r14
.text:000000000000B109                 mov     [rsp+0E8h+var_78], r13
.text:000000000000B10E                 mov     [rsp+0E8h+var_B8], r11
.text:000000000000B113
.text:000000000000B113 loc_B113:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:000000000000B113                 mov     rax, [rsp+0E8h+s]
.text:000000000000B118                 lea     r14, [rbp+rbx+0]
.text:000000000000B11D                 mov     rdx, [rsp+0E8h+var_B8]
.text:000000000000B122                 mov     rcx, [rsp+0E8h+ps]
.text:000000000000B127                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000B12C                 lea     r13, [rax+r14]
.text:000000000000B130                 sub     rdx, r14
.text:000000000000B133                 mov     rsi, r13
.text:000000000000B136                 call    rpl_mbrtowc
.text:000000000000B13B                 test    rax, rax
.text:000000000000B13E                 mov     r15, rax
.text:000000000000B141                 jz      short loc_B191
.text:000000000000B143                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B147                 jz      loc_B765
.text:000000000000B14D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000B151                 jz      loc_B6F1
.text:000000000000B157                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B15C                 setz    al
.text:000000000000B15F                 and     al, [rsp+0E8h+var_D9]
.text:000000000000B163                 jnz     loc_B300
.text:000000000000B169
.text:000000000000B169 loc_B169:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:000000000000B169                                         ; quotearg_buffer_restyled+B47↓j
.text:000000000000B169                 mov     edi, [rsp+0E8h+wc] ; wc
.text:000000000000B170                 call    _iswprint
.text:000000000000B175                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000B17A                 test    eax, eax
.text:000000000000B17C                 mov     eax, 0
.text:000000000000B181                 cmovz   r12d, eax
.text:000000000000B185                 add     rbx, r15
.text:000000000000B188                 call    _mbsinit
.text:000000000000B18D                 test    eax, eax
.text:000000000000B18F                 jz      short loc_B113
.text:000000000000B191
.text:000000000000B191 loc_B191:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:000000000000B191                 mov     edx, r12d
.text:000000000000B194                 mov     rdi, rbx
.text:000000000000B197                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000B19D                 xor     edx, 1
.text:000000000000B1A0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000B1A5                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000B1AB                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000B1AF                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000B1B7                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B1BC                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B1C1                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000B1C6
.text:000000000000B1C6 loc_B1C6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:000000000000B1C6                                         ; quotearg_buffer_restyled+FB8↓j
.text:000000000000B1C6                 cmp     rdi, 1
.text:000000000000B1CA                 jbe     loc_B7CB
.text:000000000000B1D0
.text:000000000000B1D0 loc_B1D0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:000000000000B1D0                 mov     rcx, rdi
.text:000000000000B1D3                 xor     esi, esi
.text:000000000000B1D5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000B1DB                 add     rcx, rbp
.text:000000000000B1DE                 mov     rdi, [rsp+0E8h+s]
.text:000000000000B1E3                 jmp     loc_B29E
.text:000000000000B1E3 ; ---------------------------------------------------------------------------
.text:000000000000B1E8                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 loc_B1F0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:000000000000B1F0                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B1F5                 setz    al
.text:000000000000B1F8                 test    r9b, r9b
.text:000000000000B1FB                 jnz     loc_B6B0
.text:000000000000B201                 mov     esi, r8d
.text:000000000000B204                 xor     esi, 1
.text:000000000000B207                 and     al, sil
.text:000000000000B20A                 jz      short loc_B23B
.text:000000000000B20C                 cmp     r13, r15
.text:000000000000B20F                 jbe     short loc_B216
.text:000000000000B211                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B216
.text:000000000000B216 loc_B216:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:000000000000B216                 lea     rsi, [r15+1]
.text:000000000000B21A                 cmp     r13, rsi
.text:000000000000B21D                 jbe     short loc_B225
.text:000000000000B21F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000B225
.text:000000000000B225 loc_B225:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:000000000000B225                 lea     rsi, [r15+2]
.text:000000000000B229                 cmp     r13, rsi
.text:000000000000B22C                 jbe     short loc_B234
.text:000000000000B22E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B234
.text:000000000000B234 loc_B234:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:000000000000B234                 add     r15, 3
.text:000000000000B238                 mov     r8d, eax
.text:000000000000B23B
.text:000000000000B23B loc_B23B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000B23B                 cmp     r13, r15
.text:000000000000B23E                 jbe     short loc_B245
.text:000000000000B240                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000B245
.text:000000000000B245 loc_B245:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:000000000000B245                 lea     rax, [r15+1]
.text:000000000000B249                 cmp     r13, rax
.text:000000000000B24C                 jbe     short loc_B25B
.text:000000000000B24E                 mov     eax, ebx
.text:000000000000B250                 shr     al, 6
.text:000000000000B253                 add     eax, 30h ; '0'
.text:000000000000B256                 mov     [r14+r15+1], al
.text:000000000000B25B
.text:000000000000B25B loc_B25B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000B25B                 lea     rax, [r15+2]
.text:000000000000B25F                 cmp     r13, rax
.text:000000000000B262                 jbe     short loc_B274
.text:000000000000B264                 mov     eax, ebx
.text:000000000000B266                 shr     al, 3
.text:000000000000B269                 and     eax, 7
.text:000000000000B26C                 add     eax, 30h ; '0'
.text:000000000000B26F                 mov     [r14+r15+2], al
.text:000000000000B274
.text:000000000000B274 loc_B274:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:000000000000B274                 and     ebx, 7
.text:000000000000B277                 add     rbp, 1
.text:000000000000B27B                 add     r15, 3
.text:000000000000B27F                 add     ebx, 30h ; '0'
.text:000000000000B282                 cmp     rbp, rcx
.text:000000000000B285                 jnb     loc_AA70
.text:000000000000B28B                 mov     esi, edx
.text:000000000000B28D
.text:000000000000B28D loc_B28D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000B28D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000B28D                 cmp     r13, r15
.text:000000000000B290                 jbe     short loc_B296
.text:000000000000B292                 mov     [r14+r15], bl
.text:000000000000B296
.text:000000000000B296 loc_B296:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:000000000000B296                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000B29A                 add     r15, 1
.text:000000000000B29E
.text:000000000000B29E loc_B29E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000B29E                 test    dl, dl
.text:000000000000B2A0                 jnz     loc_B1F0
.text:000000000000B2A6                 mov     eax, esi
.text:000000000000B2A8                 xor     eax, 1
.text:000000000000B2AB                 and     eax, r8d
.text:000000000000B2AE                 test    r10b, r10b
.text:000000000000B2B1                 jz      short loc_B2C1
.text:000000000000B2B3                 cmp     r13, r15
.text:000000000000B2B6                 jbe     short loc_B2BD
.text:000000000000B2B8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000B2BD
.text:000000000000B2BD loc_B2BD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000B2BD                 add     r15, 1
.text:000000000000B2C1
.text:000000000000B2C1 loc_B2C1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:000000000000B2C1                 add     rbp, 1
.text:000000000000B2C5                 cmp     rbp, rcx
.text:000000000000B2C8                 jnb     loc_AA4C
.text:000000000000B2CE                 test    al, al
.text:000000000000B2D0                 jz      loc_B6CE
.text:000000000000B2D6                 cmp     r13, r15
.text:000000000000B2D9                 jbe     short loc_B2E0
.text:000000000000B2DB                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B2E0
.text:000000000000B2E0 loc_B2E0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:000000000000B2E0                 lea     rax, [r15+1]
.text:000000000000B2E4                 cmp     r13, rax
.text:000000000000B2E7                 jbe     short loc_B2EF
.text:000000000000B2E9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000B2EF
.text:000000000000B2EF loc_B2EF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000B2EF                 add     r15, 2
.text:000000000000B2F3                 xor     r10d, r10d
.text:000000000000B2F6                 xor     r8d, r8d
.text:000000000000B2F9                 jmp     short loc_B28D
.text:000000000000B2F9 ; ---------------------------------------------------------------------------
.text:000000000000B2FB                 align 20h
.text:000000000000B300
.text:000000000000B300 loc_B300:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:000000000000B300                 cmp     r15, 1
.text:000000000000B304                 jz      loc_B169
.text:000000000000B30A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000B30F                 lea     rcx, [rdi+r15]
.text:000000000000B313                 lea     rdx, [rdi+r14+1]
.text:000000000000B318                 lea     r8, [rcx+r14]
.text:000000000000B31C                 jmp     short loc_B32D
.text:000000000000B31C ; ---------------------------------------------------------------------------
.text:000000000000B31E                 align 20h
.text:000000000000B320
.text:000000000000B320 loc_B320:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:000000000000B320                                         ; quotearg_buffer_restyled+B70↓j
.text:000000000000B320                 add     rdx, 1
.text:000000000000B324                 cmp     r8, rdx
.text:000000000000B327                 jz      loc_B169
.text:000000000000B32D
.text:000000000000B32D loc_B32D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000B32D                 movzx   ecx, byte ptr [rdx]
.text:000000000000B330                 sub     ecx, 5Bh ; '['
.text:000000000000B333                 cmp     cl, 21h ; '!'
.text:000000000000B336                 ja      short loc_B320
.text:000000000000B338                 mov     esi, 1
.text:000000000000B33D                 shl     rsi, cl
.text:000000000000B340                 mov     rcx, rsi
.text:000000000000B343                 mov     rsi, 20000002Bh
.text:000000000000B34D                 test    rcx, rsi
.text:000000000000B350                 jz      short loc_B320
.text:000000000000B352                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B357                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B35C                 mov     rbp, [rsp+0E8h+var_B8]
.text:000000000000B361                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B369
.text:000000000000B369 loc_B369:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:000000000000B369                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:000000000000B369                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000B36E                 jz      short loc_B380
.text:000000000000B370                 test    al, al
.text:000000000000B372                 mov     eax, 4
.text:000000000000B377                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000B37C                 mov     [rsp+0E8h+var_E0], eax
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:000000000000B380                                         ; quotearg_buffer_restyled+1205↓j
.text:000000000000B380                 sub     rsp, 8
.text:000000000000B384                 mov     rcx, rbp
.text:000000000000B387                 mov     rsi, r13
.text:000000000000B38A                 push    [rsp+0F0h+var_88]
.text:000000000000B38E                 push    [rsp+0F8h+var_80]
.text:000000000000B392                 mov     rdi, r14
.text:000000000000B395                 push    0
.text:000000000000B397                 mov     r9d, [rsp+108h+var_70]
.text:000000000000B39F                 mov     r8d, [rsp+108h+var_E0]
.text:000000000000B3A4                 mov     rdx, [rsp+108h+s]
.text:000000000000B3A9                 and     r9d, 0FFFFFFFDh
.text:000000000000B3AD                 call    quotearg_buffer_restyled
.text:000000000000B3B2                 add     rsp, 20h
.text:000000000000B3B6                 mov     r15, rax
.text:000000000000B3B9
.text:000000000000B3B9 loc_B3B9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:000000000000B3B9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:000000000000B3B9                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000B3C1                 xor     rbx, fs:28h
.text:000000000000B3CA                 mov     rax, r15
.text:000000000000B3CD                 jnz     loc_B9D3
.text:000000000000B3D3                 add     rsp, 0B8h
.text:000000000000B3DA                 pop     rbx
.text:000000000000B3DB                 pop     rbp
.text:000000000000B3DC                 pop     r12
.text:000000000000B3DE                 pop     r13
.text:000000000000B3E0                 pop     r14
.text:000000000000B3E2                 pop     r15
.text:000000000000B3E4                 retn
.text:000000000000B3E4 ; ---------------------------------------------------------------------------
.text:000000000000B3E5                 align 8
.text:000000000000B3E8
.text:000000000000B3E8 loc_B3E8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:000000000000B3E8                 mov     rbp, r11
.text:000000000000B3EB                 jmp     loc_B369
.text:000000000000B3F0 ; ---------------------------------------------------------------------------
.text:000000000000B3F0
.text:000000000000B3F0 loc_B3F0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:000000000000B3F0                                         ; quotearg_buffer_restyled+81C↑j
.text:000000000000B3F0                 cmp     r13, r15
.text:000000000000B3F3                 jbe     short loc_B3FA
.text:000000000000B3F5                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B3FA
.text:000000000000B3FA loc_B3FA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000B3FA                 lea     rax, [r15+1]
.text:000000000000B3FE                 cmp     r13, rax
.text:000000000000B401                 jbe     short loc_B409
.text:000000000000B403                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:000000000000B409
.text:000000000000B409 loc_B409:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:000000000000B409                 lea     rax, [r15+2]
.text:000000000000B40D                 cmp     r13, rax
.text:000000000000B410                 jbe     loc_BA02
.text:000000000000B416                 mov     rdx, r13
.text:000000000000B419                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B41F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000B424                 jmp     loc_B002
.text:000000000000B429 ; ---------------------------------------------------------------------------
.text:000000000000B429
.text:000000000000B429 loc_B429:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:000000000000B429                 mov     eax, r12d
.text:000000000000B42C                 mov     ebx, 30h ; '0'
.text:000000000000B431                 xor     r12d, r12d
.text:000000000000B434                 jmp     loc_AA39
.text:000000000000B439 ; ---------------------------------------------------------------------------
.text:000000000000B439
.text:000000000000B439 loc_B439:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:000000000000B439                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B43F                 jmp     loc_AE09
.text:000000000000B444 ; ---------------------------------------------------------------------------
.text:000000000000B444
.text:000000000000B444 loc_B444:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B444                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B444                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:000000000000B446                 jnz     loc_A873        ; jumptable 00000000000121F1 case 1
.text:000000000000B44C                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B451
.text:000000000000B451 loc_B451:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:000000000000B451                 test    r13, r13
.text:000000000000B454                 jnz     loc_B9EA
.text:000000000000B45A                 lea     rax, aIterCurPtr0+15h ; "'"
.text:000000000000B461                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B46A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B46F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B474                 xor     r12d, r12d
.text:000000000000B477                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B47C                 mov     [rsp+0E8h+n], 1
.text:000000000000B485                 mov     [rsp+0E8h+s2], rax
.text:000000000000B48A                 mov     r15d, 1
.text:000000000000B490                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B498                 jmp     loc_A8B3
.text:000000000000B498 ; ---------------------------------------------------------------------------
.text:000000000000B49D                 align 20h
.text:000000000000B4A0
.text:000000000000B4A0 loc_B4A0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B4A0                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B4A0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:000000000000B4A2                 jnz     loc_B89D
.text:000000000000B4A8                 test    r13, r13
.text:000000000000B4AB                 jz      loc_B6D6
.text:000000000000B4B1                 mov     byte ptr [r14], 22h ; '"'
.text:000000000000B4B5                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B4BA                 xor     r12d, r12d
.text:000000000000B4BD                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B4C2                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B4CB
.text:000000000000B4CB loc_B4CB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000B4CB                 lea     rax, unk_21ACB
.text:000000000000B4D2                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B4D7                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B4DC                 mov     [rsp+0E8h+n], 1
.text:000000000000B4E5                 mov     r15d, 1
.text:000000000000B4EB                 mov     [rsp+0E8h+s2], rax
.text:000000000000B4F0                 jmp     loc_A8B3
.text:000000000000B4F5 ; ---------------------------------------------------------------------------
.text:000000000000B4F5
.text:000000000000B4F5 loc_B4F5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B4F5                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B4F5                 lea     rax, unk_21ACB  ; jumptable 00000000000121F1 case 6
.text:000000000000B4FC                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B501                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B506                 xor     r12d, r12d
.text:000000000000B509                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B512                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000B517                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B51C                 mov     [rsp+0E8h+n], 1
.text:000000000000B525                 xor     r15d, r15d
.text:000000000000B528                 mov     [rsp+0E8h+s2], rax
.text:000000000000B52D                 mov     [rsp+0E8h+var_E0], 5
.text:000000000000B535                 jmp     loc_A8B3
.text:000000000000B53A ; ---------------------------------------------------------------------------
.text:000000000000B53A
.text:000000000000B53A loc_B53A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B53A                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B53A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000B53F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B544                 xor     r12d, r12d
.text:000000000000B547                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B550                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B555                 xor     r15d, r15d
.text:000000000000B558                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B55D                 mov     [rsp+0E8h+n], 0
.text:000000000000B566                 mov     [rsp+0E8h+s2], 0
.text:000000000000B56F                 jmp     loc_A8B3
.text:000000000000B574 ; ---------------------------------------------------------------------------
.text:000000000000B574
.text:000000000000B574 loc_B574:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B574                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B574                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:000000000000B579                 jz      short loc_B5D1
.text:000000000000B57B                 lea     rsi, asc_21ACD  ; "`"
.text:000000000000B582                 xor     edi, edi        ; domainname
.text:000000000000B584                 mov     edx, 5          ; category
.text:000000000000B589                 call    _dcgettext
.text:000000000000B58E                 mov     rcx, rax
.text:000000000000B591                 mov     [rsp+0E8h+var_80], rax
.text:000000000000B596                 lea     rax, asc_21ACD  ; "`"
.text:000000000000B59D                 cmp     rcx, rax
.text:000000000000B5A0                 jz      loc_B93E
.text:000000000000B5A6
.text:000000000000B5A6 loc_B5A6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:000000000000B5A6                 lea     rsi, aIterCurPtr0+15h ; msgid
.text:000000000000B5AD                 xor     edi, edi        ; domainname
.text:000000000000B5AF                 mov     edx, 5          ; category
.text:000000000000B5B4                 call    _dcgettext
.text:000000000000B5B9                 mov     rcx, rax
.text:000000000000B5BC                 mov     [rsp+0E8h+var_88], rax
.text:000000000000B5C1                 lea     rax, aIterCurPtr0+15h ; "'"
.text:000000000000B5C8                 cmp     rcx, rax
.text:000000000000B5CB                 jz      loc_B954
.text:000000000000B5D1
.text:000000000000B5D1 loc_B5D1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:000000000000B5D1                                         ; quotearg_buffer_restyled+1185↓j
.text:000000000000B5D1                 xor     r15d, r15d
.text:000000000000B5D4                 test    ebx, ebx
.text:000000000000B5D6                 jz      loc_B79D
.text:000000000000B5DC
.text:000000000000B5DC loc_B5DC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000B5DC                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000B5DC                 test    ebx, ebx
.text:000000000000B5DE                 mov     rbx, [rsp+0E8h+var_88]
.text:000000000000B5E3                 setnz   [rsp+0E8h+var_D9]
.text:000000000000B5E8                 xor     r12d, r12d
.text:000000000000B5EB                 mov     rdi, rbx        ; s
.text:000000000000B5EE                 call    _strlen
.text:000000000000B5F3                 mov     [rsp+0E8h+s2], rbx
.text:000000000000B5F8                 mov     [rsp+0E8h+n], rax
.text:000000000000B5FD                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B602                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B607                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B610                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B615                 jmp     loc_A8B3
.text:000000000000B61A ; ---------------------------------------------------------------------------
.text:000000000000B61A
.text:000000000000B61A loc_B61A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B61A                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B61A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000B61F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B624                 xor     r12d, r12d
.text:000000000000B627                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B630                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B635                 xor     r15d, r15d
.text:000000000000B638                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000B63D                 mov     [rsp+0E8h+n], 0
.text:000000000000B646                 mov     [rsp+0E8h+s2], 0
.text:000000000000B64F                 jmp     loc_A8B3
.text:000000000000B654 ; ---------------------------------------------------------------------------
.text:000000000000B654
.text:000000000000B654 loc_B654:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B654                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B654                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:000000000000B659                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B65E                 xor     r12d, r12d
.text:000000000000B661                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B66A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000B66F                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B674                 jmp     loc_A893
.text:000000000000B679 ; ---------------------------------------------------------------------------
.text:000000000000B679
.text:000000000000B679 loc_B679:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:000000000000B679                 cmp     r13, r15
.text:000000000000B67C                 jbe     short loc_B683
.text:000000000000B67E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:000000000000B683
.text:000000000000B683 loc_B683:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:000000000000B683                 lea     rax, [rcx+2]
.text:000000000000B687                 cmp     r13, rax
.text:000000000000B68A                 jbe     short loc_B692
.text:000000000000B68C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:000000000000B692
.text:000000000000B692 loc_B692:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:000000000000B692                 mov     eax, r12d
.text:000000000000B695                 lea     r15, [rcx+3]
.text:000000000000B699                 xor     r12d, r12d
.text:000000000000B69C                 mov     ebx, 30h ; '0'
.text:000000000000B6A1                 jmp     loc_AA08
.text:000000000000B6A1 ; ---------------------------------------------------------------------------
.text:000000000000B6A6                 align 10h
.text:000000000000B6B0
.text:000000000000B6B0 loc_B6B0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:000000000000B6B0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000B6B5                 mov     rbp, r11
.text:000000000000B6B8                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000B6BC                 jmp     loc_B369
.text:000000000000B6C1 ; ---------------------------------------------------------------------------
.text:000000000000B6C1
.text:000000000000B6C1 loc_B6C1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:000000000000B6C1                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000B6C6                 xor     r12d, r12d
.text:000000000000B6C9                 jmp     loc_B1D0
.text:000000000000B6CE ; ---------------------------------------------------------------------------
.text:000000000000B6CE
.text:000000000000B6CE loc_B6CE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000B6CE                 xor     r10d, r10d
.text:000000000000B6D1                 jmp     loc_B28D
.text:000000000000B6D6 ; ---------------------------------------------------------------------------
.text:000000000000B6D6
.text:000000000000B6D6 loc_B6D6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:000000000000B6D6                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B6DF                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B6E4                 xor     r12d, r12d
.text:000000000000B6E7                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B6EC                 jmp     loc_B4CB
.text:000000000000B6F1 ; ---------------------------------------------------------------------------
.text:000000000000B6F1
.text:000000000000B6F1 loc_B6F1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:000000000000B6F1                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000B6F6                 mov     rsi, r14
.text:000000000000B6F9                 mov     rcx, r13
.text:000000000000B6FC                 mov     rax, rbx
.text:000000000000B6FF                 mov     rdi, rbx
.text:000000000000B702                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000B708                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000B70D                 mov     r9, [rsp+0E8h+var_60]
.text:000000000000B715                 cmp     rsi, r11
.text:000000000000B718                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000B71E                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000B726                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B72B                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B730                 jnb     short loc_B758
.text:000000000000B732                 cmp     byte ptr [rcx], 0
.text:000000000000B735                 jnz     short loc_B747
.text:000000000000B737                 jmp     short loc_B758
.text:000000000000B737 ; ---------------------------------------------------------------------------
.text:000000000000B739                 align 20h
.text:000000000000B740
.text:000000000000B740 loc_B740:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:000000000000B740                 cmp     byte ptr [r9+rax], 0
.text:000000000000B745                 jz      short loc_B755
.text:000000000000B747
.text:000000000000B747 loc_B747:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:000000000000B747                 add     rax, 1
.text:000000000000B74B                 lea     rdx, [rbp+rax+0]
.text:000000000000B750                 cmp     r11, rdx
.text:000000000000B753                 ja      short loc_B740
.text:000000000000B755
.text:000000000000B755 loc_B755:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:000000000000B755                 mov     rdi, rax
.text:000000000000B758
.text:000000000000B758 loc_B758:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:000000000000B758                                         ; quotearg_buffer_restyled+F57↑j
.text:000000000000B758                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000B75D                 xor     r12d, r12d
.text:000000000000B760                 jmp     loc_B1C6
.text:000000000000B765 ; ---------------------------------------------------------------------------
.text:000000000000B765
.text:000000000000B765 loc_B765:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:000000000000B765                 mov     rdi, rbx
.text:000000000000B768                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000B76E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000B773                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000B779                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000B781                 xor     r12d, r12d
.text:000000000000B784                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B789                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B78E                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000B793                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000B798                 jmp     loc_B1C6
.text:000000000000B79D ; ---------------------------------------------------------------------------
.text:000000000000B79D
.text:000000000000B79D loc_B79D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000B79D                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000B7A2                 movzx   eax, byte ptr [rdx]
.text:000000000000B7A5                 test    al, al
.text:000000000000B7A7                 jz      loc_B5DC
.text:000000000000B7AD                 nop     dword ptr [rax]
.text:000000000000B7B0
.text:000000000000B7B0 loc_B7B0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:000000000000B7B0                 cmp     r13, r15
.text:000000000000B7B3                 jbe     short loc_B7B9
.text:000000000000B7B5                 mov     [r14+r15], al
.text:000000000000B7B9
.text:000000000000B7B9 loc_B7B9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:000000000000B7B9                 add     r15, 1
.text:000000000000B7BD                 movzx   eax, byte ptr [rdx+r15]
.text:000000000000B7C2                 test    al, al
.text:000000000000B7C4                 jnz     short loc_B7B0
.text:000000000000B7C6                 jmp     loc_B5DC
.text:000000000000B7CB ; ---------------------------------------------------------------------------
.text:000000000000B7CB
.text:000000000000B7CB loc_B7CB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000B7CB                 mov     eax, edx
.text:000000000000B7CD                 jmp     loc_AD27
.text:000000000000B7D2 ; ---------------------------------------------------------------------------
.text:000000000000B7D2
.text:000000000000B7D2 loc_B7D2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:000000000000B7D2                 movzx   ebx, byte ptr [rax+rcx]
.text:000000000000B7D6                 cmp     bl, 3Eh ; '>'
.text:000000000000B7D9                 ja      loc_B050
.text:000000000000B7DF                 mov     rax, 7000A38200000000h
.text:000000000000B7E9                 bt      rax, rbx
.text:000000000000B7ED                 jnb     loc_B050
.text:000000000000B7F3                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B7F8                 jnz     loc_B9E2
.text:000000000000B7FE                 cmp     r13, r15
.text:000000000000B801                 jbe     short loc_B808
.text:000000000000B803                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:000000000000B808
.text:000000000000B808 loc_B808:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:000000000000B808                 lea     rax, [r15+1]
.text:000000000000B80C                 cmp     r13, rax
.text:000000000000B80F                 jbe     short loc_B817
.text:000000000000B811                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:000000000000B817
.text:000000000000B817 loc_B817:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:000000000000B817                 lea     rax, [r15+2]
.text:000000000000B81B                 cmp     r13, rax
.text:000000000000B81E                 jbe     short loc_B826
.text:000000000000B820                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:000000000000B826
.text:000000000000B826 loc_B826:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:000000000000B826                 lea     rax, [r15+3]
.text:000000000000B82A                 cmp     r13, rax
.text:000000000000B82D                 jbe     short loc_B835
.text:000000000000B82F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:000000000000B835
.text:000000000000B835 loc_B835:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:000000000000B835                 add     r15, 4
.text:000000000000B839                 xor     edx, edx
.text:000000000000B83B                 xor     r12d, r12d
.text:000000000000B83E                 xor     eax, eax
.text:000000000000B840                 mov     rbp, rcx
.text:000000000000B843                 jmp     loc_AA08
.text:000000000000B848 ; ---------------------------------------------------------------------------
.text:000000000000B848
.text:000000000000B848 loc_B848:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B848                                         ; DATA XREF: .rodata:jpt_A871↓o
.text:000000000000B848                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000B84A                 jz      loc_B9D8
.text:000000000000B850                 lea     rax, aIterCurPtr0+15h ; "'"
.text:000000000000B857                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B85C                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B861                 xor     r12d, r12d
.text:000000000000B864                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B86D                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000B872                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000B877                 mov     [rsp+0E8h+n], 1
.text:000000000000B880                 xor     r15d, r15d
.text:000000000000B883                 mov     [rsp+0E8h+s2], rax
.text:000000000000B888                 jmp     loc_A8B3
.text:000000000000B888 ; ---------------------------------------------------------------------------
.text:000000000000B88D                 align 10h
.text:000000000000B890
.text:000000000000B890 loc_B890:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:000000000000B890                                         ; quotearg_buffer_restyled+805↑j ...
.text:000000000000B890                 mov     rbp, r11
.text:000000000000B893                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000B898                 jmp     loc_B369
.text:000000000000B89D ; ---------------------------------------------------------------------------
.text:000000000000B89D
.text:000000000000B89D loc_B89D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000B89D                 lea     rax, unk_21ACB
.text:000000000000B8A4                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B8A9                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B8AE                 xor     r12d, r12d
.text:000000000000B8B1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B8BA                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000B8BF                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B8C4                 mov     [rsp+0E8h+n], 1
.text:000000000000B8CD                 xor     r15d, r15d
.text:000000000000B8D0                 mov     [rsp+0E8h+s2], rax
.text:000000000000B8D5                 jmp     loc_A8B3
.text:000000000000B8DA ; ---------------------------------------------------------------------------
.text:000000000000B8DA
.text:000000000000B8DA loc_B8DA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000B8DA                 mov     eax, edx
.text:000000000000B8DC
.text:000000000000B8DC loc_B8DC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000B8DC                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000B8DC                 mov     rbx, [rsp+0E8h+s2]
.text:000000000000B8E1                 test    rbx, rbx
.text:000000000000B8E4                 jz      short loc_B912
.text:000000000000B8E6                 test    al, al
.text:000000000000B8E8                 jz      short loc_B912
.text:000000000000B8EA                 movzx   ecx, byte ptr [rbx]
.text:000000000000B8ED                 mov     rax, rbx
.text:000000000000B8F0                 test    cl, cl
.text:000000000000B8F2                 jz      short loc_B912
.text:000000000000B8F4                 mov     rdx, r15
.text:000000000000B8F7                 sub     rax, r15
.text:000000000000B8FA
.text:000000000000B8FA loc_B8FA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000B8FA                 cmp     r13, rdx
.text:000000000000B8FD                 jbe     short loc_B903
.text:000000000000B8FF                 mov     [r14+rdx], cl
.text:000000000000B903
.text:000000000000B903 loc_B903:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:000000000000B903                 add     rdx, 1
.text:000000000000B907                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000B90B                 test    cl, cl
.text:000000000000B90D                 jnz     short loc_B8FA
.text:000000000000B90F                 mov     r15, rdx
.text:000000000000B912
.text:000000000000B912 loc_B912:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:000000000000B912                                         ; quotearg_buffer_restyled+1108↑j ...
.text:000000000000B912                 cmp     r13, r15
.text:000000000000B915                 jbe     loc_B3B9
.text:000000000000B91B                 mov     byte ptr [r14+r15], 0
.text:000000000000B920                 jmp     loc_B3B9
.text:000000000000B925 ; ---------------------------------------------------------------------------
.text:000000000000B925
.text:000000000000B925 loc_B925:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:000000000000B925                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B92A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000B92F                 mov     rbp, r11
.text:000000000000B932                 setz    al
.text:000000000000B935                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000B939                 jmp     loc_B369
.text:000000000000B93E ; ---------------------------------------------------------------------------
.text:000000000000B93E
.text:000000000000B93E loc_B93E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000B93E                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000B942                 mov     rdi, rcx
.text:000000000000B945                 call    gettext_quote
.text:000000000000B94A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000B94F                 jmp     loc_B5A6
.text:000000000000B954 ; ---------------------------------------------------------------------------
.text:000000000000B954
.text:000000000000B954 loc_B954:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:000000000000B954                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000B958                 mov     rdi, rcx
.text:000000000000B95B                 call    gettext_quote
.text:000000000000B960                 mov     [rsp+0E8h+var_88], rax
.text:000000000000B965                 jmp     loc_B5D1
.text:000000000000B96A ; ---------------------------------------------------------------------------
.text:000000000000B96A
.text:000000000000B96A loc_B96A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000B96A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000B96F                 mov     rbp, r11
.text:000000000000B972                 mov     eax, edx
.text:000000000000B974                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000B978                 jmp     loc_B369
.text:000000000000B97D ; ---------------------------------------------------------------------------
.text:000000000000B97D
.text:000000000000B97D loc_B97D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000B97D                 sub     rsp, 8
.text:000000000000B981                 mov     r8d, 5
.text:000000000000B987                 mov     rcx, r11
.text:000000000000B98A                 push    [rsp+0F0h+var_88]
.text:000000000000B98E                 push    [rsp+0F8h+var_80]
.text:000000000000B992                 mov     rdi, r14
.text:000000000000B995                 push    [rsp+100h+var_C8]
.text:000000000000B999                 mov     r9d, [rsp+108h+var_70]
.text:000000000000B9A1                 mov     rdx, [rsp+108h+s]
.text:000000000000B9A6                 mov     rsi, [rsp+108h+var_98]
.text:000000000000B9AB                 call    quotearg_buffer_restyled
.text:000000000000B9B0                 add     rsp, 20h
.text:000000000000B9B4                 mov     r15, rax
.text:000000000000B9B7                 jmp     loc_B3B9
.text:000000000000B9BC ; ---------------------------------------------------------------------------
.text:000000000000B9BC
.text:000000000000B9BC loc_B9BC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000B9BC                 movzx   eax, [rsp+0E8h+var_6C]
.text:000000000000B9C1                 jmp     loc_B8DC
.text:000000000000B9C6 ; ---------------------------------------------------------------------------
.text:000000000000B9C6
.text:000000000000B9C6 loc_B9C6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:000000000000B9C6                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B9CE                 jmp     loc_B369
.text:000000000000B9D3 ; ---------------------------------------------------------------------------
.text:000000000000B9D3
.text:000000000000B9D3 loc_B9D3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:000000000000B9D3                 call    ___stack_chk_fail
.text:000000000000B9D8 ; ---------------------------------------------------------------------------
.text:000000000000B9D8
.text:000000000000B9D8 loc_B9D8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:000000000000B9D8                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000B9DD                 jmp     loc_B451
.text:000000000000B9E2 ; ---------------------------------------------------------------------------
.text:000000000000B9E2
.text:000000000000B9E2 loc_B9E2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:000000000000B9E2                 mov     rbp, r11
.text:000000000000B9E5                 jmp     loc_B380
.text:000000000000B9EA ; ---------------------------------------------------------------------------
.text:000000000000B9EA
.text:000000000000B9EA loc_B9EA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000B9EA                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B9EF                 xor     eax, eax
.text:000000000000B9F1                 xor     r12d, r12d
.text:000000000000B9F4                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B9FD                 jmp     loc_AFA4
.text:000000000000BA02 ; ---------------------------------------------------------------------------
.text:000000000000BA02
.text:000000000000BA02 loc_BA02:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:000000000000BA02                 mov     rdx, r13
.text:000000000000BA05                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000BA0A                 jmp     loc_B002
.text:000000000000BA0F ; ---------------------------------------------------------------------------
.text:000000000000BA0F
.text:000000000000BA0F def_A871:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000BA0F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000BA0F ; } // starts at A7E0
.text:000000000000BA0F quotearg_buffer_restyled endp
.text:000000000000BA0F
.text:000000000000BA0F ; ---------------------------------------------------------------------------
.text:000000000000BA14                 align 20h
.text:000000000000BA20
.text:000000000000BA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA20
.text:000000000000BA20
.text:000000000000BA20 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:000000000000BA20                                         ; quotearg_n_mem+7↓j ...
.text:000000000000BA20
.text:000000000000BA20 var_50          = qword ptr -50h
.text:000000000000BA20 var_48          = qword ptr -48h
.text:000000000000BA20 var_40          = dword ptr -40h
.text:000000000000BA20 var_3C          = dword ptr -3Ch
.text:000000000000BA20
.text:000000000000BA20 ; __unwind {
.text:000000000000BA20                 push    r15
.text:000000000000BA22                 push    r14
.text:000000000000BA24                 movsxd  r15, edi
.text:000000000000BA27                 push    r13
.text:000000000000BA29                 push    r12
.text:000000000000BA2B                 mov     r14, rdx
.text:000000000000BA2E                 push    rbp
.text:000000000000BA2F                 push    rbx
.text:000000000000BA30                 mov     rbp, rcx
.text:000000000000BA33                 sub     rsp, 28h
.text:000000000000BA37                 mov     [rsp+58h+var_50], rsi
.text:000000000000BA3C                 call    ___errno_location
.text:000000000000BA41                 mov     r13, rax
.text:000000000000BA44                 mov     eax, [rax]
.text:000000000000BA46                 test    r15d, r15d
.text:000000000000BA49                 mov     rbx, cs:slotvec
.text:000000000000BA50                 mov     [rsp+58h+var_40], eax
.text:000000000000BA54                 js      loc_BBC1
.text:000000000000BA5A                 cmp     cs:nslots, r15d
.text:000000000000BA61                 jg      short loc_BAC5
.text:000000000000BA63                 cmp     r15d, 7FFFFFFFh
.text:000000000000BA6A                 jz      loc_BBC6
.text:000000000000BA70                 lea     r12d, [r15+1]
.text:000000000000BA74                 lea     rax, slotvec0
.text:000000000000BA7B                 movsxd  rsi, r12d
.text:000000000000BA7E                 shl     rsi, 4
.text:000000000000BA82                 cmp     rbx, rax
.text:000000000000BA85                 jz      loc_BBA0
.text:000000000000BA8B                 mov     rdi, rbx
.text:000000000000BA8E                 call    xrealloc
.text:000000000000BA93                 mov     rbx, rax
.text:000000000000BA96                 mov     cs:slotvec, rax
.text:000000000000BA9D
.text:000000000000BA9D loc_BA9D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000BA9D                 movsxd  rdi, cs:nslots
.text:000000000000BAA4                 mov     edx, r12d
.text:000000000000BAA7                 xor     esi, esi        ; c
.text:000000000000BAA9                 sub     edx, edi
.text:000000000000BAAB                 shl     rdi, 4
.text:000000000000BAAF                 movsxd  rdx, edx
.text:000000000000BAB2                 add     rdi, rbx        ; s
.text:000000000000BAB5                 shl     rdx, 4          ; n
.text:000000000000BAB9                 call    _memset
.text:000000000000BABE                 mov     cs:nslots, r12d
.text:000000000000BAC5
.text:000000000000BAC5 loc_BAC5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:000000000000BAC5                 mov     eax, [rbp+4]
.text:000000000000BAC8                 shl     r15, 4
.text:000000000000BACC                 sub     rsp, 8
.text:000000000000BAD0                 add     rbx, r15
.text:000000000000BAD3                 lea     r15, [rbp+8]
.text:000000000000BAD7                 mov     r8d, [rbp+0]
.text:000000000000BADB                 mov     r11, [rbx]
.text:000000000000BADE                 mov     r12, [rbx+8]
.text:000000000000BAE2                 mov     rcx, r14
.text:000000000000BAE5                 or      eax, 1
.text:000000000000BAE8                 mov     [rsp+60h+var_3C], eax
.text:000000000000BAEC                 push    qword ptr [rbp+30h]
.text:000000000000BAEF                 mov     r9d, eax
.text:000000000000BAF2                 push    qword ptr [rbp+28h]
.text:000000000000BAF5                 push    r15
.text:000000000000BAF7                 mov     rsi, r11
.text:000000000000BAFA                 mov     rdx, [rsp+78h+var_50]
.text:000000000000BAFF                 mov     rdi, r12
.text:000000000000BB02                 mov     [rsp+78h+var_48], r11
.text:000000000000BB07                 call    quotearg_buffer_restyled
.text:000000000000BB0C                 add     rsp, 20h
.text:000000000000BB10                 mov     r11, [rsp+58h+var_48]
.text:000000000000BB15                 cmp     r11, rax
.text:000000000000BB18                 ja      short loc_BB81
.text:000000000000BB1A                 lea     rsi, [rax+1]
.text:000000000000BB1E                 lea     rax, slot0
.text:000000000000BB25                 cmp     r12, rax
.text:000000000000BB28                 mov     [rbx], rsi
.text:000000000000BB2B                 jz      short loc_BB3F
.text:000000000000BB2D                 mov     rdi, r12        ; ptr
.text:000000000000BB30                 mov     [rsp+58h+var_48], rsi
.text:000000000000BB35                 call    free
.text:000000000000BB3A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000BB3F
.text:000000000000BB3F loc_BB3F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000BB3F                 mov     rdi, rsi
.text:000000000000BB42                 mov     [rsp+58h+var_48], rsi
.text:000000000000BB47                 call    xmalloc
.text:000000000000BB4C                 sub     rsp, 8
.text:000000000000BB50                 mov     [rbx+8], rax
.text:000000000000BB54                 mov     r8d, [rbp+0]
.text:000000000000BB58                 push    qword ptr [rbp+30h]
.text:000000000000BB5B                 push    qword ptr [rbp+28h]
.text:000000000000BB5E                 mov     rcx, r14
.text:000000000000BB61                 push    r15
.text:000000000000BB63                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000BB68                 mov     rdi, rax
.text:000000000000BB6B                 mov     rdx, [rsp+78h+var_50]
.text:000000000000BB70                 mov     rsi, [rsp+78h+var_48]
.text:000000000000BB75                 mov     r12, rax
.text:000000000000BB78                 call    quotearg_buffer_restyled
.text:000000000000BB7D                 add     rsp, 20h
.text:000000000000BB81
.text:000000000000BB81 loc_BB81:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000BB81                 mov     eax, [rsp+58h+var_40]
.text:000000000000BB85                 mov     [r13+0], eax
.text:000000000000BB89                 add     rsp, 28h
.text:000000000000BB8D                 mov     rax, r12
.text:000000000000BB90                 pop     rbx
.text:000000000000BB91                 pop     rbp
.text:000000000000BB92                 pop     r12
.text:000000000000BB94                 pop     r13
.text:000000000000BB96                 pop     r14
.text:000000000000BB98                 pop     r15
.text:000000000000BB9A                 retn
.text:000000000000BB9A ; ---------------------------------------------------------------------------
.text:000000000000BB9B                 align 20h
.text:000000000000BBA0
.text:000000000000BBA0 loc_BBA0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000BBA0                 xor     edi, edi
.text:000000000000BBA2                 call    xrealloc
.text:000000000000BBA7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000BBAF                 mov     rbx, rax
.text:000000000000BBB2                 mov     cs:slotvec, rax
.text:000000000000BBB9                 movups  xmmword ptr [rax], xmm0
.text:000000000000BBBC                 jmp     loc_BA9D
.text:000000000000BBC1 ; ---------------------------------------------------------------------------
.text:000000000000BBC1
.text:000000000000BBC1 loc_BBC1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000BBC1                 call    _abort
.text:000000000000BBC6 ; ---------------------------------------------------------------------------
.text:000000000000BBC6
.text:000000000000BBC6 loc_BBC6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000BBC6                 call    xalloc_die
.text:000000000000BBC6 ; } // starts at BA20
.text:000000000000BBC6 quotearg_n_options endp
.text:000000000000BBC6
.text:000000000000BBC6 ; ---------------------------------------------------------------------------
.text:000000000000BBCB                 align 10h
.text:000000000000BBD0
.text:000000000000BBD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBD0
.text:000000000000BBD0 ; Attributes: info_from_lumina
.text:000000000000BBD0
.text:000000000000BBD0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000BBD0                 public clone_quoting_options
.text:000000000000BBD0 clone_quoting_options proc near
.text:000000000000BBD0 ; __unwind {
.text:000000000000BBD0                 push    r12
.text:000000000000BBD2                 push    rbp
.text:000000000000BBD3                 push    rbx
.text:000000000000BBD4                 mov     rbx, rdi
.text:000000000000BBD7                 call    ___errno_location
.text:000000000000BBDC                 mov     r12d, [rax]
.text:000000000000BBDF                 mov     rbp, rax
.text:000000000000BBE2                 lea     rax, default_quoting_options
.text:000000000000BBE9                 test    rbx, rbx
.text:000000000000BBEC                 mov     esi, 38h ; '8'  ; n
.text:000000000000BBF1                 cmovz   rbx, rax
.text:000000000000BBF5                 mov     rdi, rbx        ; src
.text:000000000000BBF8                 call    xmemdup
.text:000000000000BBFD                 mov     [rbp+0], r12d
.text:000000000000BC01                 pop     rbx
.text:000000000000BC02                 pop     rbp
.text:000000000000BC03                 pop     r12
.text:000000000000BC05                 retn
.text:000000000000BC05 ; } // starts at BBD0
.text:000000000000BC05 clone_quoting_options endp
.text:000000000000BC05
.text:000000000000BC05 ; ---------------------------------------------------------------------------
.text:000000000000BC06                 align 10h
.text:000000000000BC10
.text:000000000000BC10 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC10
.text:000000000000BC10
.text:000000000000BC10                 public get_quoting_style
.text:000000000000BC10 get_quoting_style proc near
.text:000000000000BC10 ; __unwind {
.text:000000000000BC10                 lea     rax, default_quoting_options
.text:000000000000BC17                 test    rdi, rdi
.text:000000000000BC1A                 cmovz   rdi, rax
.text:000000000000BC1E                 mov     eax, [rdi]
.text:000000000000BC20                 retn
.text:000000000000BC20 ; } // starts at BC10
.text:000000000000BC20 get_quoting_style endp
.text:000000000000BC20
.text:000000000000BC20 ; ---------------------------------------------------------------------------
.text:000000000000BC21                 align 10h
.text:000000000000BC30
.text:000000000000BC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC30
.text:000000000000BC30
.text:000000000000BC30                 public set_quoting_style
.text:000000000000BC30 set_quoting_style proc near
.text:000000000000BC30 ; __unwind {
.text:000000000000BC30                 lea     rax, default_quoting_options
.text:000000000000BC37                 test    rdi, rdi
.text:000000000000BC3A                 cmovz   rdi, rax
.text:000000000000BC3E                 mov     [rdi], esi
.text:000000000000BC40                 retn
.text:000000000000BC40 ; } // starts at BC30
.text:000000000000BC40 set_quoting_style endp
.text:000000000000BC40
.text:000000000000BC40 ; ---------------------------------------------------------------------------
.text:000000000000BC41                 align 10h
.text:000000000000BC50
.text:000000000000BC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC50
.text:000000000000BC50 ; Attributes: info_from_lumina
.text:000000000000BC50
.text:000000000000BC50 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000BC50                 public set_char_quoting
.text:000000000000BC50 set_char_quoting proc near
.text:000000000000BC50 ; __unwind {
.text:000000000000BC50                 lea     rax, default_quoting_options
.text:000000000000BC57                 test    rdi, rdi
.text:000000000000BC5A                 mov     ecx, esi
.text:000000000000BC5C                 cmovz   rdi, rax
.text:000000000000BC60                 mov     eax, esi
.text:000000000000BC62                 and     ecx, 1Fh
.text:000000000000BC65                 shr     al, 5
.text:000000000000BC68                 movzx   eax, al
.text:000000000000BC6B                 lea     rdi, [rdi+rax*4+8]
.text:000000000000BC70                 mov     esi, [rdi]
.text:000000000000BC72                 mov     eax, esi
.text:000000000000BC74                 shr     eax, cl
.text:000000000000BC76                 xor     edx, eax
.text:000000000000BC78                 and     eax, 1
.text:000000000000BC7B                 and     edx, 1
.text:000000000000BC7E                 shl     edx, cl
.text:000000000000BC80                 xor     edx, esi
.text:000000000000BC82                 mov     [rdi], edx
.text:000000000000BC84                 retn
.text:000000000000BC84 ; } // starts at BC50
.text:000000000000BC84 set_char_quoting endp
.text:000000000000BC84
.text:000000000000BC84 ; ---------------------------------------------------------------------------
.text:000000000000BC85                 align 10h
.text:000000000000BC90
.text:000000000000BC90 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC90
.text:000000000000BC90
.text:000000000000BC90                 public set_quoting_flags
.text:000000000000BC90 set_quoting_flags proc near
.text:000000000000BC90 ; __unwind {
.text:000000000000BC90                 lea     rax, default_quoting_options
.text:000000000000BC97                 test    rdi, rdi
.text:000000000000BC9A                 cmovz   rdi, rax
.text:000000000000BC9E                 mov     eax, [rdi+4]
.text:000000000000BCA1                 mov     [rdi+4], esi
.text:000000000000BCA4                 retn
.text:000000000000BCA4 ; } // starts at BC90
.text:000000000000BCA4 set_quoting_flags endp
.text:000000000000BCA4
.text:000000000000BCA4 ; ---------------------------------------------------------------------------
.text:000000000000BCA5                 align 10h
.text:000000000000BCB0
.text:000000000000BCB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BCB0
.text:000000000000BCB0 ; Attributes: info_from_lumina
.text:000000000000BCB0
.text:000000000000BCB0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000BCB0                 public set_custom_quoting
.text:000000000000BCB0 set_custom_quoting proc near
.text:000000000000BCB0 ; __unwind {
.text:000000000000BCB0                 lea     rax, default_quoting_options
.text:000000000000BCB7                 test    rdi, rdi
.text:000000000000BCBA                 cmovz   rdi, rax
.text:000000000000BCBE                 test    rsi, rsi
.text:000000000000BCC1                 mov     dword ptr [rdi], 0Ah
.text:000000000000BCC7                 jz      short loc_BCD7
.text:000000000000BCC9                 test    rdx, rdx
.text:000000000000BCCC                 jz      short loc_BCD7
.text:000000000000BCCE                 mov     [rdi+28h], rsi
.text:000000000000BCD2                 mov     [rdi+30h], rdx
.text:000000000000BCD6                 retn
.text:000000000000BCD7 ; ---------------------------------------------------------------------------
.text:000000000000BCD7
.text:000000000000BCD7 loc_BCD7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000BCD7                                         ; set_custom_quoting+1C↑j
.text:000000000000BCD7                 sub     rsp, 8
.text:000000000000BCDB                 call    _abort
.text:000000000000BCDB ; } // starts at BCB0
.text:000000000000BCDB set_custom_quoting endp
.text:000000000000BCDB
.text:000000000000BCE0
.text:000000000000BCE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BCE0
.text:000000000000BCE0 ; Attributes: info_from_lumina
.text:000000000000BCE0
.text:000000000000BCE0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000BCE0                 public quotearg_buffer
.text:000000000000BCE0 quotearg_buffer proc near
.text:000000000000BCE0
.text:000000000000BCE0 var_40          = qword ptr -40h
.text:000000000000BCE0
.text:000000000000BCE0 ; __unwind {
.text:000000000000BCE0                 push    r15
.text:000000000000BCE2                 push    r14
.text:000000000000BCE4                 lea     rax, default_quoting_options
.text:000000000000BCEB                 push    r13
.text:000000000000BCED                 push    r12
.text:000000000000BCEF                 mov     r13, rdi
.text:000000000000BCF2                 push    rbp
.text:000000000000BCF3                 push    rbx
.text:000000000000BCF4                 mov     rbx, r8
.text:000000000000BCF7                 mov     r14, rsi
.text:000000000000BCFA                 mov     r15, rdx
.text:000000000000BCFD                 sub     rsp, 18h
.text:000000000000BD01                 test    r8, r8
.text:000000000000BD04                 cmovz   rbx, rax
.text:000000000000BD08                 mov     [rsp+48h+var_40], rcx
.text:000000000000BD0D                 call    ___errno_location
.text:000000000000BD12                 mov     r12d, [rax]
.text:000000000000BD15                 mov     rbp, rax
.text:000000000000BD18                 lea     rax, [rbx+8]
.text:000000000000BD1C                 sub     rsp, 8
.text:000000000000BD20                 mov     r9d, [rbx+4]
.text:000000000000BD24                 push    qword ptr [rbx+30h]
.text:000000000000BD27                 mov     r8d, [rbx]
.text:000000000000BD2A                 push    qword ptr [rbx+28h]
.text:000000000000BD2D                 mov     rdx, r15
.text:000000000000BD30                 push    rax
.text:000000000000BD31                 mov     rcx, [rsp+68h+var_40]
.text:000000000000BD36                 mov     rsi, r14
.text:000000000000BD39                 mov     rdi, r13
.text:000000000000BD3C                 call    quotearg_buffer_restyled
.text:000000000000BD41                 mov     [rbp+0], r12d
.text:000000000000BD45                 add     rsp, 38h
.text:000000000000BD49                 pop     rbx
.text:000000000000BD4A                 pop     rbp
.text:000000000000BD4B                 pop     r12
.text:000000000000BD4D                 pop     r13
.text:000000000000BD4F                 pop     r14
.text:000000000000BD51                 pop     r15
.text:000000000000BD53                 retn
.text:000000000000BD53 ; } // starts at BCE0
.text:000000000000BD53 quotearg_buffer endp
.text:000000000000BD53
.text:000000000000BD53 ; ---------------------------------------------------------------------------
.text:000000000000BD54                 align 20h
.text:000000000000BD60
.text:000000000000BD60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD60
.text:000000000000BD60 ; Attributes: info_from_lumina
.text:000000000000BD60
.text:000000000000BD60 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000BD60                 public quotearg_alloc_mem
.text:000000000000BD60 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000BD60
.text:000000000000BD60 var_5C          = dword ptr -5Ch
.text:000000000000BD60 var_58          = qword ptr -58h
.text:000000000000BD60 var_50          = qword ptr -50h
.text:000000000000BD60 var_48          = qword ptr -48h
.text:000000000000BD60 var_40          = qword ptr -40h
.text:000000000000BD60
.text:000000000000BD60 ; __unwind {
.text:000000000000BD60                 push    r15
.text:000000000000BD62                 push    r14
.text:000000000000BD64                 lea     rax, default_quoting_options
.text:000000000000BD6B                 push    r13
.text:000000000000BD6D                 push    r12
.text:000000000000BD6F                 mov     r12, rdx
.text:000000000000BD72                 push    rbp
.text:000000000000BD73                 push    rbx
.text:000000000000BD74                 mov     rbx, rcx
.text:000000000000BD77                 mov     r14, rdi
.text:000000000000BD7A                 mov     r15, rsi
.text:000000000000BD7D                 sub     rsp, 38h
.text:000000000000BD81                 test    rcx, rcx
.text:000000000000BD84                 cmovz   rbx, rax
.text:000000000000BD88                 xor     ebp, ebp
.text:000000000000BD8A                 call    ___errno_location
.text:000000000000BD8F                 test    r12, r12
.text:000000000000BD92                 mov     r13, rax
.text:000000000000BD95                 mov     eax, [rax]
.text:000000000000BD97                 setz    bpl
.text:000000000000BD9B                 or      ebp, [rbx+4]
.text:000000000000BD9E                 lea     r10, [rbx+8]
.text:000000000000BDA2                 sub     rsp, 8
.text:000000000000BDA6                 mov     r8d, [rbx]
.text:000000000000BDA9                 mov     rcx, r15
.text:000000000000BDAC                 mov     [rsp+70h+var_5C], eax
.text:000000000000BDB0                 push    qword ptr [rbx+30h]
.text:000000000000BDB3                 mov     rdx, r14
.text:000000000000BDB6                 push    qword ptr [rbx+28h]
.text:000000000000BDB9                 push    r10
.text:000000000000BDBB                 xor     esi, esi
.text:000000000000BDBD                 mov     r9d, ebp
.text:000000000000BDC0                 xor     edi, edi
.text:000000000000BDC2                 mov     [rsp+88h+var_48], r10
.text:000000000000BDC7                 call    quotearg_buffer_restyled
.text:000000000000BDCC                 lea     rsi, [rax+1]
.text:000000000000BDD0                 mov     [rsp+88h+var_40], rax
.text:000000000000BDD5                 add     rsp, 20h
.text:000000000000BDD9                 mov     rdi, rsi
.text:000000000000BDDC                 mov     [rsp+68h+var_50], rsi
.text:000000000000BDE1                 call    xmalloc
.text:000000000000BDE6                 mov     [rsp+68h+var_58], rax
.text:000000000000BDEB                 sub     rsp, 8
.text:000000000000BDEF                 push    qword ptr [rbx+30h]
.text:000000000000BDF2                 push    qword ptr [rbx+28h]
.text:000000000000BDF5                 mov     r10, [rsp+80h+var_48]
.text:000000000000BDFA                 mov     r9d, ebp
.text:000000000000BDFD                 mov     r8d, [rbx]
.text:000000000000BE00                 mov     rcx, r15
.text:000000000000BE03                 mov     rdx, r14
.text:000000000000BE06                 mov     rdi, rax
.text:000000000000BE09                 push    r10
.text:000000000000BE0B                 mov     rsi, [rsp+88h+var_50]
.text:000000000000BE10                 call    quotearg_buffer_restyled
.text:000000000000BE15                 mov     eax, [rsp+88h+var_5C]
.text:000000000000BE19                 add     rsp, 20h
.text:000000000000BE1D                 test    r12, r12
.text:000000000000BE20                 mov     [r13+0], eax
.text:000000000000BE24                 jz      short loc_BE2F
.text:000000000000BE26                 mov     r11, [rsp+68h+var_40]
.text:000000000000BE2B                 mov     [r12], r11
.text:000000000000BE2F
.text:000000000000BE2F loc_BE2F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000BE2F                 mov     rax, [rsp+68h+var_58]
.text:000000000000BE34                 add     rsp, 38h
.text:000000000000BE38                 pop     rbx
.text:000000000000BE39                 pop     rbp
.text:000000000000BE3A                 pop     r12
.text:000000000000BE3C                 pop     r13
.text:000000000000BE3E                 pop     r14
.text:000000000000BE40                 pop     r15
.text:000000000000BE42                 retn
.text:000000000000BE42 ; } // starts at BD60
.text:000000000000BE42 quotearg_alloc_mem endp
.text:000000000000BE42
.text:000000000000BE42 ; ---------------------------------------------------------------------------
.text:000000000000BE43                 align 10h
.text:000000000000BE50
.text:000000000000BE50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE50
.text:000000000000BE50
.text:000000000000BE50                 public quotearg_alloc
.text:000000000000BE50 quotearg_alloc  proc near
.text:000000000000BE50 ; __unwind {
.text:000000000000BE50                 mov     rcx, rdx
.text:000000000000BE53                 xor     edx, edx
.text:000000000000BE55                 jmp     quotearg_alloc_mem
.text:000000000000BE55 ; } // starts at BE50
.text:000000000000BE55 quotearg_alloc  endp
.text:000000000000BE55
.text:000000000000BE55 ; ---------------------------------------------------------------------------
.text:000000000000BE5A                 align 20h
.text:000000000000BE60
.text:000000000000BE60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE60
.text:000000000000BE60 ; Attributes: info_from_lumina
.text:000000000000BE60
.text:000000000000BE60 ; void __cdecl quotearg_free()
.text:000000000000BE60                 public quotearg_free
.text:000000000000BE60 quotearg_free   proc near
.text:000000000000BE60 ; __unwind {
.text:000000000000BE60                 mov     eax, cs:nslots
.text:000000000000BE66                 push    r12
.text:000000000000BE68                 mov     r12, cs:slotvec
.text:000000000000BE6F                 push    rbp
.text:000000000000BE70                 push    rbx
.text:000000000000BE71                 cmp     eax, 1
.text:000000000000BE74                 jle     short loc_BEA1
.text:000000000000BE76                 sub     eax, 2
.text:000000000000BE79                 lea     rbx, [r12+18h]
.text:000000000000BE7E                 shl     rax, 4
.text:000000000000BE82                 lea     rbp, [r12+rax+28h]
.text:000000000000BE87                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BE90
.text:000000000000BE90 loc_BE90:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000BE90                 mov     rdi, [rbx]      ; ptr
.text:000000000000BE93                 add     rbx, 10h
.text:000000000000BE97                 call    free
.text:000000000000BE9C                 cmp     rbx, rbp
.text:000000000000BE9F                 jnz     short loc_BE90
.text:000000000000BEA1
.text:000000000000BEA1 loc_BEA1:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000BEA1                 mov     rdi, [r12+8]    ; ptr
.text:000000000000BEA6                 lea     rbx, slot0
.text:000000000000BEAD                 cmp     rdi, rbx
.text:000000000000BEB0                 jz      short loc_BEC9
.text:000000000000BEB2                 call    free
.text:000000000000BEB7                 mov     cs:slotvec0, 100h
.text:000000000000BEC2                 mov     cs:off_228098, rbx
.text:000000000000BEC9
.text:000000000000BEC9 loc_BEC9:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000BEC9                 lea     rbx, slotvec0
.text:000000000000BED0                 cmp     r12, rbx
.text:000000000000BED3                 jz      short loc_BEE4
.text:000000000000BED5                 mov     rdi, r12        ; ptr
.text:000000000000BED8                 call    free
.text:000000000000BEDD                 mov     cs:slotvec, rbx
.text:000000000000BEE4
.text:000000000000BEE4 loc_BEE4:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000BEE4                 pop     rbx
.text:000000000000BEE5                 mov     cs:nslots, 1
.text:000000000000BEEF                 pop     rbp
.text:000000000000BEF0                 pop     r12
.text:000000000000BEF2                 retn
.text:000000000000BEF2 ; } // starts at BE60
.text:000000000000BEF2 quotearg_free   endp
.text:000000000000BEF2
.text:000000000000BEF2 ; ---------------------------------------------------------------------------
.text:000000000000BEF3                 align 20h
.text:000000000000BF00
.text:000000000000BF00 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF00
.text:000000000000BF00
.text:000000000000BF00                 public quotearg_n
.text:000000000000BF00 quotearg_n      proc near
.text:000000000000BF00 ; __unwind {
.text:000000000000BF00                 lea     rcx, default_quoting_options
.text:000000000000BF07                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BF0E                 jmp     quotearg_n_options
.text:000000000000BF0E ; } // starts at BF00
.text:000000000000BF0E quotearg_n      endp
.text:000000000000BF0E
.text:000000000000BF0E ; ---------------------------------------------------------------------------
.text:000000000000BF13                 align 20h
.text:000000000000BF20
.text:000000000000BF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF20
.text:000000000000BF20
.text:000000000000BF20                 public quotearg_n_mem
.text:000000000000BF20 quotearg_n_mem  proc near
.text:000000000000BF20 ; __unwind {
.text:000000000000BF20                 lea     rcx, default_quoting_options
.text:000000000000BF27                 jmp     quotearg_n_options
.text:000000000000BF27 ; } // starts at BF20
.text:000000000000BF27 quotearg_n_mem  endp
.text:000000000000BF27
.text:000000000000BF27 ; ---------------------------------------------------------------------------
.text:000000000000BF2C                 align 10h
.text:000000000000BF30
.text:000000000000BF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF30
.text:000000000000BF30
.text:000000000000BF30                 public quotearg
.text:000000000000BF30 quotearg        proc near
.text:000000000000BF30 ; __unwind {
.text:000000000000BF30                 lea     rcx, default_quoting_options
.text:000000000000BF37                 mov     rsi, rdi
.text:000000000000BF3A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BF41                 xor     edi, edi
.text:000000000000BF43                 jmp     quotearg_n_options
.text:000000000000BF43 ; } // starts at BF30
.text:000000000000BF43 quotearg        endp
.text:000000000000BF43
.text:000000000000BF43 ; ---------------------------------------------------------------------------
.text:000000000000BF48                 align 10h
.text:000000000000BF50
.text:000000000000BF50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF50
.text:000000000000BF50
.text:000000000000BF50                 public quotearg_mem
.text:000000000000BF50 quotearg_mem    proc near
.text:000000000000BF50 ; __unwind {
.text:000000000000BF50                 lea     rcx, default_quoting_options
.text:000000000000BF57                 mov     rdx, rsi
.text:000000000000BF5A                 mov     rsi, rdi
.text:000000000000BF5D                 xor     edi, edi
.text:000000000000BF5F                 jmp     quotearg_n_options
.text:000000000000BF5F ; } // starts at BF50
.text:000000000000BF5F quotearg_mem    endp
.text:000000000000BF5F
.text:000000000000BF5F ; ---------------------------------------------------------------------------
.text:000000000000BF64                 align 10h
.text:000000000000BF70
.text:000000000000BF70 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF70
.text:000000000000BF70 ; Attributes: info_from_lumina
.text:000000000000BF70
.text:000000000000BF70 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000BF70                 public quotearg_n_style
.text:000000000000BF70 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:000000000000BF70                                         ; quotearg_style+7↓j
.text:000000000000BF70
.text:000000000000BF70 var_48          = dword ptr -48h
.text:000000000000BF70 var_44          = qword ptr -44h
.text:000000000000BF70 var_3C          = qword ptr -3Ch
.text:000000000000BF70 var_34          = qword ptr -34h
.text:000000000000BF70 var_2C          = qword ptr -2Ch
.text:000000000000BF70 var_24          = qword ptr -24h
.text:000000000000BF70 var_1C          = qword ptr -1Ch
.text:000000000000BF70 var_14          = dword ptr -14h
.text:000000000000BF70 var_10          = qword ptr -10h
.text:000000000000BF70
.text:000000000000BF70 ; __unwind {
.text:000000000000BF70                 sub     rsp, 48h
.text:000000000000BF74                 mov     rax, rdx
.text:000000000000BF77                 mov     rdx, fs:28h
.text:000000000000BF80                 mov     [rsp+48h+var_10], rdx
.text:000000000000BF85                 xor     edx, edx
.text:000000000000BF87                 cmp     esi, 0Ah
.text:000000000000BF8A                 jz      short loc_BFF4
.text:000000000000BF8C                 mov     [rsp+48h+var_48], esi
.text:000000000000BF8F                 mov     rcx, rsp
.text:000000000000BF92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BF99                 mov     rsi, rax
.text:000000000000BF9C                 mov     [rsp+48h+var_44], 0
.text:000000000000BFA5                 mov     [rsp+48h+var_3C], 0
.text:000000000000BFAE                 mov     [rsp+48h+var_34], 0
.text:000000000000BFB7                 mov     [rsp+48h+var_2C], 0
.text:000000000000BFC0                 mov     [rsp+48h+var_24], 0
.text:000000000000BFC9                 mov     [rsp+48h+var_1C], 0
.text:000000000000BFD2                 mov     [rsp+48h+var_14], 0
.text:000000000000BFDA                 call    quotearg_n_options
.text:000000000000BFDF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000BFE4                 xor     rcx, fs:28h
.text:000000000000BFED                 jnz     short loc_BFF9
.text:000000000000BFEF                 add     rsp, 48h
.text:000000000000BFF3                 retn
.text:000000000000BFF4 ; ---------------------------------------------------------------------------
.text:000000000000BFF4
.text:000000000000BFF4 loc_BFF4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000BFF4                 call    _abort
.text:000000000000BFF9 ; ---------------------------------------------------------------------------
.text:000000000000BFF9
.text:000000000000BFF9 loc_BFF9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000BFF9                 call    ___stack_chk_fail
.text:000000000000BFF9 ; } // starts at BF70
.text:000000000000BFF9 quotearg_n_style endp
.text:000000000000BFF9
.text:000000000000BFF9 ; ---------------------------------------------------------------------------
.text:000000000000BFFE                 align 20h
.text:000000000000C000
.text:000000000000C000 ; =============== S U B R O U T I N E =======================================
.text:000000000000C000
.text:000000000000C000 ; Attributes: info_from_lumina
.text:000000000000C000
.text:000000000000C000 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000C000                 public quotearg_n_style_mem
.text:000000000000C000 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000C000
.text:000000000000C000 var_48          = dword ptr -48h
.text:000000000000C000 var_44          = qword ptr -44h
.text:000000000000C000 var_3C          = qword ptr -3Ch
.text:000000000000C000 var_34          = qword ptr -34h
.text:000000000000C000 var_2C          = qword ptr -2Ch
.text:000000000000C000 var_24          = qword ptr -24h
.text:000000000000C000 var_1C          = qword ptr -1Ch
.text:000000000000C000 var_14          = dword ptr -14h
.text:000000000000C000 var_10          = qword ptr -10h
.text:000000000000C000
.text:000000000000C000 ; __unwind {
.text:000000000000C000                 sub     rsp, 48h
.text:000000000000C004                 mov     rax, rdx
.text:000000000000C007                 mov     rdx, rcx
.text:000000000000C00A                 mov     rcx, fs:28h
.text:000000000000C013                 mov     [rsp+48h+var_10], rcx
.text:000000000000C018                 xor     ecx, ecx
.text:000000000000C01A                 cmp     esi, 0Ah
.text:000000000000C01D                 jz      short loc_C080
.text:000000000000C01F                 mov     [rsp+48h+var_48], esi
.text:000000000000C022                 mov     rcx, rsp
.text:000000000000C025                 mov     rsi, rax
.text:000000000000C028                 mov     [rsp+48h+var_44], 0
.text:000000000000C031                 mov     [rsp+48h+var_3C], 0
.text:000000000000C03A                 mov     [rsp+48h+var_34], 0
.text:000000000000C043                 mov     [rsp+48h+var_2C], 0
.text:000000000000C04C                 mov     [rsp+48h+var_24], 0
.text:000000000000C055                 mov     [rsp+48h+var_1C], 0
.text:000000000000C05E                 mov     [rsp+48h+var_14], 0
.text:000000000000C066                 call    quotearg_n_options
.text:000000000000C06B                 mov     rdx, [rsp+48h+var_10]
.text:000000000000C070                 xor     rdx, fs:28h
.text:000000000000C079                 jnz     short loc_C085
.text:000000000000C07B                 add     rsp, 48h
.text:000000000000C07F                 retn
.text:000000000000C080 ; ---------------------------------------------------------------------------
.text:000000000000C080
.text:000000000000C080 loc_C080:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000C080                 call    _abort
.text:000000000000C085 ; ---------------------------------------------------------------------------
.text:000000000000C085
.text:000000000000C085 loc_C085:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000C085                 call    ___stack_chk_fail
.text:000000000000C085 ; } // starts at C000
.text:000000000000C085 quotearg_n_style_mem endp
.text:000000000000C085
.text:000000000000C085 ; ---------------------------------------------------------------------------
.text:000000000000C08A                 align 10h
.text:000000000000C090
.text:000000000000C090 ; =============== S U B R O U T I N E =======================================
.text:000000000000C090
.text:000000000000C090
.text:000000000000C090                 public quotearg_style
.text:000000000000C090 quotearg_style  proc near               ; CODE XREF: main+9D0↑p
.text:000000000000C090                                         ; main+C43↑p ...
.text:000000000000C090 ; __unwind {
.text:000000000000C090                 mov     rdx, rsi
.text:000000000000C093                 mov     esi, edi
.text:000000000000C095                 xor     edi, edi
.text:000000000000C097                 jmp     quotearg_n_style
.text:000000000000C097 ; } // starts at C090
.text:000000000000C097 quotearg_style  endp
.text:000000000000C097
.text:000000000000C097 ; ---------------------------------------------------------------------------
.text:000000000000C09C                 align 20h
.text:000000000000C0A0
.text:000000000000C0A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0A0
.text:000000000000C0A0
.text:000000000000C0A0                 public quotearg_style_mem
.text:000000000000C0A0 quotearg_style_mem proc near
.text:000000000000C0A0 ; __unwind {
.text:000000000000C0A0                 mov     rcx, rdx
.text:000000000000C0A3                 mov     rdx, rsi
.text:000000000000C0A6                 mov     esi, edi
.text:000000000000C0A8                 xor     edi, edi
.text:000000000000C0AA                 jmp     quotearg_n_style_mem
.text:000000000000C0AA ; } // starts at C0A0
.text:000000000000C0AA quotearg_style_mem endp
.text:000000000000C0AA
.text:000000000000C0AA ; ---------------------------------------------------------------------------
.text:000000000000C0AF                 align 10h
.text:000000000000C0B0
.text:000000000000C0B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0B0
.text:000000000000C0B0 ; Attributes: info_from_lumina
.text:000000000000C0B0
.text:000000000000C0B0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000C0B0                 public quotearg_char_mem
.text:000000000000C0B0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000C0B0                                         ; quotearg_colon+C↓j ...
.text:000000000000C0B0
.text:000000000000C0B0 var_48          = xmmword ptr -48h
.text:000000000000C0B0 var_38          = xmmword ptr -38h
.text:000000000000C0B0 var_28          = xmmword ptr -28h
.text:000000000000C0B0 var_18          = qword ptr -18h
.text:000000000000C0B0 var_10          = qword ptr -10h
.text:000000000000C0B0
.text:000000000000C0B0 ; __unwind {
.text:000000000000C0B0                 sub     rsp, 48h
.text:000000000000C0B4                 mov     ecx, edx
.text:000000000000C0B6                 mov     rax, fs:28h
.text:000000000000C0BF                 mov     [rsp+48h+var_10], rax
.text:000000000000C0C4                 xor     eax, eax
.text:000000000000C0C6                 mov     rax, cs:qword_2282F0
.text:000000000000C0CD                 mov     r8, rsp
.text:000000000000C0D0                 and     ecx, 1Fh
.text:000000000000C0D3                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000C0DB                 mov     [rsp+48h+var_18], rax
.text:000000000000C0E0                 mov     eax, edx
.text:000000000000C0E2                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000C0E6                 shr     al, 5
.text:000000000000C0E9                 movzx   eax, al
.text:000000000000C0EC                 lea     r9, [r8+rax*4+8]
.text:000000000000C0F1                 movdqa  xmm0, cs:xmmword_2282D0
.text:000000000000C0F9                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000C0FE                 movdqa  xmm0, cs:xmmword_2282E0
.text:000000000000C106                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000C10B                 mov     edx, [r9]
.text:000000000000C10E                 mov     eax, edx
.text:000000000000C110                 shr     eax, cl
.text:000000000000C112                 not     eax
.text:000000000000C114                 and     eax, 1
.text:000000000000C117                 shl     eax, cl
.text:000000000000C119                 mov     rcx, r8
.text:000000000000C11C                 xor     eax, edx
.text:000000000000C11E                 mov     rdx, rsi
.text:000000000000C121                 mov     rsi, rdi
.text:000000000000C124                 mov     [r9], eax
.text:000000000000C127                 xor     edi, edi
.text:000000000000C129                 call    quotearg_n_options
.text:000000000000C12E                 mov     rsi, [rsp+48h+var_10]
.text:000000000000C133                 xor     rsi, fs:28h
.text:000000000000C13C                 jnz     short loc_C143
.text:000000000000C13E                 add     rsp, 48h
.text:000000000000C142                 retn
.text:000000000000C143 ; ---------------------------------------------------------------------------
.text:000000000000C143
.text:000000000000C143 loc_C143:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000C143                 call    ___stack_chk_fail
.text:000000000000C143 ; } // starts at C0B0
.text:000000000000C143 quotearg_char_mem endp
.text:000000000000C143
.text:000000000000C143 ; ---------------------------------------------------------------------------
.text:000000000000C148                 align 10h
.text:000000000000C150
.text:000000000000C150 ; =============== S U B R O U T I N E =======================================
.text:000000000000C150
.text:000000000000C150
.text:000000000000C150                 public quotearg_char
.text:000000000000C150 quotearg_char   proc near
.text:000000000000C150 ; __unwind {
.text:000000000000C150                 movsx   edx, sil
.text:000000000000C154                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C15B                 jmp     quotearg_char_mem
.text:000000000000C15B ; } // starts at C150
.text:000000000000C15B quotearg_char   endp
.text:000000000000C15B
.text:000000000000C160
.text:000000000000C160 ; =============== S U B R O U T I N E =======================================
.text:000000000000C160
.text:000000000000C160
.text:000000000000C160                 public quotearg_colon
.text:000000000000C160 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:000000000000C160 ; __unwind {
.text:000000000000C160                 mov     edx, 3Ah ; ':'
.text:000000000000C165                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C16C                 jmp     quotearg_char_mem
.text:000000000000C16C ; } // starts at C160
.text:000000000000C16C quotearg_colon  endp
.text:000000000000C16C
.text:000000000000C16C ; ---------------------------------------------------------------------------
.text:000000000000C171                 align 20h
.text:000000000000C180
.text:000000000000C180 ; =============== S U B R O U T I N E =======================================
.text:000000000000C180
.text:000000000000C180
.text:000000000000C180                 public quotearg_colon_mem
.text:000000000000C180 quotearg_colon_mem proc near
.text:000000000000C180 ; __unwind {
.text:000000000000C180                 mov     edx, 3Ah ; ':'
.text:000000000000C185                 jmp     quotearg_char_mem
.text:000000000000C185 ; } // starts at C180
.text:000000000000C185 quotearg_colon_mem endp
.text:000000000000C185
.text:000000000000C185 ; ---------------------------------------------------------------------------
.text:000000000000C18A                 align 10h
.text:000000000000C190
.text:000000000000C190 ; =============== S U B R O U T I N E =======================================
.text:000000000000C190
.text:000000000000C190 ; Attributes: info_from_lumina
.text:000000000000C190
.text:000000000000C190 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000C190                 public quotearg_n_style_colon
.text:000000000000C190 quotearg_n_style_colon proc near        ; CODE XREF: main+2B1↑p
.text:000000000000C190                                         ; main+A33↑p ...
.text:000000000000C190
.text:000000000000C190 var_48          = dword ptr -48h
.text:000000000000C190 var_44          = qword ptr -44h
.text:000000000000C190 var_3C          = qword ptr -3Ch
.text:000000000000C190 var_34          = qword ptr -34h
.text:000000000000C190 var_2C          = qword ptr -2Ch
.text:000000000000C190 var_24          = qword ptr -24h
.text:000000000000C190 var_1C          = qword ptr -1Ch
.text:000000000000C190 var_14          = dword ptr -14h
.text:000000000000C190 var_10          = qword ptr -10h
.text:000000000000C190
.text:000000000000C190 ; __unwind {
.text:000000000000C190                 sub     rsp, 48h
.text:000000000000C194                 mov     rax, rdx
.text:000000000000C197                 mov     rdx, fs:28h
.text:000000000000C1A0                 mov     [rsp+48h+var_10], rdx
.text:000000000000C1A5                 xor     edx, edx
.text:000000000000C1A7                 cmp     esi, 0Ah
.text:000000000000C1AA                 jz      short loc_C214
.text:000000000000C1AC                 mov     [rsp+48h+var_48], esi
.text:000000000000C1AF                 mov     rcx, rsp
.text:000000000000C1B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C1B9                 mov     rsi, rax
.text:000000000000C1BC                 mov     [rsp+48h+var_44], 0
.text:000000000000C1C5                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000C1CE                 mov     [rsp+48h+var_34], 0
.text:000000000000C1D7                 mov     [rsp+48h+var_2C], 0
.text:000000000000C1E0                 mov     [rsp+48h+var_24], 0
.text:000000000000C1E9                 mov     [rsp+48h+var_1C], 0
.text:000000000000C1F2                 mov     [rsp+48h+var_14], 0
.text:000000000000C1FA                 call    quotearg_n_options
.text:000000000000C1FF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000C204                 xor     rcx, fs:28h
.text:000000000000C20D                 jnz     short loc_C219
.text:000000000000C20F                 add     rsp, 48h
.text:000000000000C213                 retn
.text:000000000000C214 ; ---------------------------------------------------------------------------
.text:000000000000C214
.text:000000000000C214 loc_C214:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000C214                 call    _abort
.text:000000000000C219 ; ---------------------------------------------------------------------------
.text:000000000000C219
.text:000000000000C219 loc_C219:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000C219                 call    ___stack_chk_fail
.text:000000000000C219 ; } // starts at C190
.text:000000000000C219 quotearg_n_style_colon endp
.text:000000000000C219
.text:000000000000C219 ; ---------------------------------------------------------------------------
.text:000000000000C21E                 align 20h
.text:000000000000C220
.text:000000000000C220 ; =============== S U B R O U T I N E =======================================
.text:000000000000C220
.text:000000000000C220 ; Attributes: info_from_lumina
.text:000000000000C220
.text:000000000000C220 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000C220                 public quotearg_n_custom_mem
.text:000000000000C220 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000C220                                         ; quotearg_custom+12↓j ...
.text:000000000000C220
.text:000000000000C220 var_48          = xmmword ptr -48h
.text:000000000000C220 var_38          = xmmword ptr -38h
.text:000000000000C220 var_28          = xmmword ptr -28h
.text:000000000000C220 var_18          = qword ptr -18h
.text:000000000000C220 var_10          = qword ptr -10h
.text:000000000000C220
.text:000000000000C220 ; __unwind {
.text:000000000000C220                 sub     rsp, 48h
.text:000000000000C224                 mov     r9, rcx
.text:000000000000C227                 mov     rcx, cs:qword_2282F0
.text:000000000000C22E                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000C236                 mov     rax, fs:28h
.text:000000000000C23F                 mov     [rsp+48h+var_10], rax
.text:000000000000C244                 xor     eax, eax
.text:000000000000C246                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000C24A                 test    rsi, rsi
.text:000000000000C24D                 mov     [rsp+48h+var_18], rcx
.text:000000000000C252                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000C259                 movdqa  xmm0, cs:xmmword_2282D0
.text:000000000000C261                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000C266                 movdqa  xmm0, cs:xmmword_2282E0
.text:000000000000C26E                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000C273                 jz      short loc_C2A7
.text:000000000000C275                 test    rdx, rdx
.text:000000000000C278                 jz      short loc_C2A7
.text:000000000000C27A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000C27F                 mov     [rsp+48h+var_18], rdx
.text:000000000000C284                 mov     rcx, rsp
.text:000000000000C287                 mov     rdx, r8
.text:000000000000C28A                 mov     rsi, r9
.text:000000000000C28D                 call    quotearg_n_options
.text:000000000000C292                 mov     rdi, [rsp+48h+var_10]
.text:000000000000C297                 xor     rdi, fs:28h
.text:000000000000C2A0                 jnz     short loc_C2AC
.text:000000000000C2A2                 add     rsp, 48h
.text:000000000000C2A6                 retn
.text:000000000000C2A7 ; ---------------------------------------------------------------------------
.text:000000000000C2A7
.text:000000000000C2A7 loc_C2A7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000C2A7                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000C2A7                 call    _abort
.text:000000000000C2AC ; ---------------------------------------------------------------------------
.text:000000000000C2AC
.text:000000000000C2AC loc_C2AC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000C2AC                 call    ___stack_chk_fail
.text:000000000000C2AC ; } // starts at C220
.text:000000000000C2AC quotearg_n_custom_mem endp
.text:000000000000C2AC
.text:000000000000C2AC ; ---------------------------------------------------------------------------
.text:000000000000C2B1                 align 20h
.text:000000000000C2C0
.text:000000000000C2C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2C0
.text:000000000000C2C0
.text:000000000000C2C0                 public quotearg_n_custom
.text:000000000000C2C0 quotearg_n_custom proc near
.text:000000000000C2C0 ; __unwind {
.text:000000000000C2C0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000C2C7                 jmp     quotearg_n_custom_mem
.text:000000000000C2C7 ; } // starts at C2C0
.text:000000000000C2C7 quotearg_n_custom endp
.text:000000000000C2C7
.text:000000000000C2C7 ; ---------------------------------------------------------------------------
.text:000000000000C2CC                 align 10h
.text:000000000000C2D0
.text:000000000000C2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2D0
.text:000000000000C2D0
.text:000000000000C2D0                 public quotearg_custom
.text:000000000000C2D0 quotearg_custom proc near
.text:000000000000C2D0 ; __unwind {
.text:000000000000C2D0                 mov     rcx, rdx
.text:000000000000C2D3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000C2DA                 mov     rdx, rsi
.text:000000000000C2DD                 mov     rsi, rdi
.text:000000000000C2E0                 xor     edi, edi
.text:000000000000C2E2                 jmp     quotearg_n_custom_mem
.text:000000000000C2E2 ; } // starts at C2D0
.text:000000000000C2E2 quotearg_custom endp
.text:000000000000C2E2
.text:000000000000C2E2 ; ---------------------------------------------------------------------------
.text:000000000000C2E7                 align 10h
.text:000000000000C2F0
.text:000000000000C2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2F0
.text:000000000000C2F0
.text:000000000000C2F0                 public quotearg_custom_mem
.text:000000000000C2F0 quotearg_custom_mem proc near
.text:000000000000C2F0 ; __unwind {
.text:000000000000C2F0                 mov     r8, rcx
.text:000000000000C2F3                 mov     rcx, rdx
.text:000000000000C2F6                 mov     rdx, rsi
.text:000000000000C2F9                 mov     rsi, rdi
.text:000000000000C2FC                 xor     edi, edi
.text:000000000000C2FE                 jmp     quotearg_n_custom_mem
.text:000000000000C2FE ; } // starts at C2F0
.text:000000000000C2FE quotearg_custom_mem endp
.text:000000000000C2FE
.text:000000000000C2FE ; ---------------------------------------------------------------------------
.text:000000000000C303                 align 10h
.text:000000000000C310
.text:000000000000C310 ; =============== S U B R O U T I N E =======================================
.text:000000000000C310
.text:000000000000C310
.text:000000000000C310                 public quote_n_mem
.text:000000000000C310 quote_n_mem     proc near
.text:000000000000C310 ; __unwind {
.text:000000000000C310                 lea     rcx, quote_quoting_options
.text:000000000000C317                 jmp     quotearg_n_options
.text:000000000000C317 ; } // starts at C310
.text:000000000000C317 quote_n_mem     endp
.text:000000000000C317
.text:000000000000C317 ; ---------------------------------------------------------------------------
.text:000000000000C31C                 align 20h
.text:000000000000C320
.text:000000000000C320 ; =============== S U B R O U T I N E =======================================
.text:000000000000C320
.text:000000000000C320
.text:000000000000C320                 public quote_mem
.text:000000000000C320 quote_mem       proc near
.text:000000000000C320 ; __unwind {
.text:000000000000C320                 lea     rcx, quote_quoting_options
.text:000000000000C327                 mov     rdx, rsi
.text:000000000000C32A                 mov     rsi, rdi
.text:000000000000C32D                 xor     edi, edi
.text:000000000000C32F                 jmp     quotearg_n_options
.text:000000000000C32F ; } // starts at C320
.text:000000000000C32F quote_mem       endp
.text:000000000000C32F
.text:000000000000C32F ; ---------------------------------------------------------------------------
.text:000000000000C334                 align 20h
.text:000000000000C340
.text:000000000000C340 ; =============== S U B R O U T I N E =======================================
.text:000000000000C340
.text:000000000000C340
.text:000000000000C340                 public quote_n
.text:000000000000C340 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:000000000000C340 ; __unwind {
.text:000000000000C340                 lea     rcx, quote_quoting_options
.text:000000000000C347                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C34E                 jmp     quotearg_n_options
.text:000000000000C34E ; } // starts at C340
.text:000000000000C34E quote_n         endp
.text:000000000000C34E
.text:000000000000C34E ; ---------------------------------------------------------------------------
.text:000000000000C353                 align 20h
.text:000000000000C360
.text:000000000000C360 ; =============== S U B R O U T I N E =======================================
.text:000000000000C360
.text:000000000000C360
.text:000000000000C360                 public quote
.text:000000000000C360 quote           proc near               ; CODE XREF: main+D29↑p
.text:000000000000C360                                         ; main+139E↑p ...
.text:000000000000C360 ; __unwind {
.text:000000000000C360                 lea     rcx, quote_quoting_options
.text:000000000000C367                 mov     rsi, rdi
.text:000000000000C36A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C371                 xor     edi, edi
.text:000000000000C373                 jmp     quotearg_n_options
.text:000000000000C373 ; } // starts at C360
.text:000000000000C373 quote           endp
.text:000000000000C373
.text:000000000000C373 ; ---------------------------------------------------------------------------
.text:000000000000C378                 align 20h
.text:000000000000C380
.text:000000000000C380 ; =============== S U B R O U T I N E =======================================
.text:000000000000C380
.text:000000000000C380
.text:000000000000C380                 public strnlen1
.text:000000000000C380 strnlen1        proc near               ; CODE XREF: string_hasher_ci+107↑p
.text:000000000000C380                                         ; mbscasecmp+274↑p ...
.text:000000000000C380 ; __unwind {
.text:000000000000C380                 push    rbp
.text:000000000000C381                 push    rbx
.text:000000000000C382                 mov     rdx, rsi        ; n
.text:000000000000C385                 mov     rbx, rsi
.text:000000000000C388                 xor     esi, esi        ; c
.text:000000000000C38A                 mov     rbp, rdi
.text:000000000000C38D                 sub     rsp, 8
.text:000000000000C391                 call    _memchr
.text:000000000000C396                 mov     rdx, rax
.text:000000000000C399                 sub     rdx, rbp
.text:000000000000C39C                 add     rdx, 1
.text:000000000000C3A0                 test    rax, rax
.text:000000000000C3A3                 mov     rax, rbx
.text:000000000000C3A6                 cmovnz  rax, rdx
.text:000000000000C3AA                 add     rsp, 8
.text:000000000000C3AE                 pop     rbx
.text:000000000000C3AF                 pop     rbp
.text:000000000000C3B0                 retn
.text:000000000000C3B0 ; } // starts at C380
.text:000000000000C3B0 strnlen1        endp
.text:000000000000C3B0
.text:000000000000C3B0 ; ---------------------------------------------------------------------------
.text:000000000000C3B1                 align 20h
.text:000000000000C3C0
.text:000000000000C3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3C0
.text:000000000000C3C0
.text:000000000000C3C0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:000000000000C3C0                 public version_etc_arn
.text:000000000000C3C0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_C7FB↓j
.text:000000000000C3C0                                         ; version_etc_va:loc_C84B↓p ...
.text:000000000000C3C0
.text:000000000000C3C0 var_58          = qword ptr -58h
.text:000000000000C3C0 var_50          = qword ptr -50h
.text:000000000000C3C0 var_48          = qword ptr -48h
.text:000000000000C3C0 var_40          = qword ptr -40h
.text:000000000000C3C0
.text:000000000000C3C0 ; __unwind {
.text:000000000000C3C0                 push    r15
.text:000000000000C3C2                 push    r14
.text:000000000000C3C4                 push    r13
.text:000000000000C3C6                 push    r12
.text:000000000000C3C8                 mov     r12, r9
.text:000000000000C3CB                 push    rbp
.text:000000000000C3CC                 push    rbx
.text:000000000000C3CD                 mov     rbp, rdi
.text:000000000000C3D0                 mov     rbx, r8
.text:000000000000C3D3                 sub     rsp, 28h
.text:000000000000C3D7                 test    rsi, rsi
.text:000000000000C3DA                 jz      loc_C4F8
.text:000000000000C3E0                 mov     r8, rdx
.text:000000000000C3E3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000C3EA                 mov     r9, rcx
.text:000000000000C3ED                 xor     eax, eax
.text:000000000000C3EF                 mov     rcx, rsi
.text:000000000000C3F2                 mov     esi, 1
.text:000000000000C3F7                 call    ___fprintf_chk
.text:000000000000C3FC
.text:000000000000C3FC loc_C3FC:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000C3FC                 lea     rsi, aC_0       ; "(C)"
.text:000000000000C403                 xor     edi, edi        ; domainname
.text:000000000000C405                 mov     edx, 5          ; category
.text:000000000000C40A                 call    _dcgettext
.text:000000000000C40F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:000000000000C416                 mov     rcx, rax
.text:000000000000C419                 mov     r8d, 7E3h
.text:000000000000C41F                 mov     esi, 1
.text:000000000000C424                 mov     rdi, rbp
.text:000000000000C427                 xor     eax, eax
.text:000000000000C429                 call    ___fprintf_chk
.text:000000000000C42E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:000000000000C435                 xor     edi, edi        ; domainname
.text:000000000000C437                 mov     edx, 5          ; category
.text:000000000000C43C                 call    _dcgettext
.text:000000000000C441                 mov     rsi, rbp        ; stream
.text:000000000000C444                 mov     rdi, rax        ; s
.text:000000000000C447                 call    _fputs_unlocked
.text:000000000000C44C                 cmp     r12, 9          ; switch 10 cases
.text:000000000000C450                 ja      def_C464        ; jumptable 000000000000C464 default case
.text:000000000000C456                 lea     rdx, jpt_C464
.text:000000000000C45D                 movsxd  rax, ds:(jpt_C464 - 22284h)[rdx+r12*4]
.text:000000000000C461                 add     rax, rdx
.text:000000000000C464                 jmp     rax             ; switch jump
.text:000000000000C464 ; ---------------------------------------------------------------------------
.text:000000000000C466                 align 10h
.text:000000000000C470
.text:000000000000C470 loc_C470:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C470                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C470                 mov     r9, [rbx+38h]   ; jumptable 000000000000C464 case 8
.text:000000000000C474                 mov     rax, [rbx+10h]
.text:000000000000C478                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000C47F                 mov     r8, [rbx+8]
.text:000000000000C483                 mov     edx, 5          ; category
.text:000000000000C488                 xor     edi, edi        ; domainname
.text:000000000000C48A                 mov     r13, [rbx+30h]
.text:000000000000C48E                 mov     r12, [rbx+28h]
.text:000000000000C492                 mov     [rsp+58h+var_48], r9
.text:000000000000C497                 mov     r15, [rbx+20h]
.text:000000000000C49B                 mov     r14, [rbx+18h]
.text:000000000000C49F                 mov     [rsp+58h+var_58], rax
.text:000000000000C4A3                 mov     [rsp+58h+var_50], r8
.text:000000000000C4A8                 mov     rbx, [rbx]
.text:000000000000C4AB                 call    _dcgettext
.text:000000000000C4B0                 sub     rsp, 8
.text:000000000000C4B4
.text:000000000000C4B4 loc_C4B4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:000000000000C4B4                 mov     r9, [rsp+60h+var_48]
.text:000000000000C4B9                 mov     rdx, rax
.text:000000000000C4BC                 mov     rcx, rbx
.text:000000000000C4BF                 mov     esi, 1
.text:000000000000C4C4                 mov     rdi, rbp
.text:000000000000C4C7                 xor     eax, eax
.text:000000000000C4C9                 push    r9
.text:000000000000C4CB                 push    r13
.text:000000000000C4CD                 push    r12
.text:000000000000C4CF                 push    r15
.text:000000000000C4D1                 push    r14
.text:000000000000C4D3                 mov     r9, [rsp+88h+var_58]
.text:000000000000C4D8                 mov     r8, [rsp+88h+var_50]
.text:000000000000C4DD                 call    ___fprintf_chk
.text:000000000000C4E2                 add     rsp, 30h
.text:000000000000C4E6
.text:000000000000C4E6 loc_C4E6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C4E6                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C4E6                 add     rsp, 28h        ; jumptable 000000000000C464 case 0
.text:000000000000C4EA                 pop     rbx
.text:000000000000C4EB                 pop     rbp
.text:000000000000C4EC                 pop     r12
.text:000000000000C4EE                 pop     r13
.text:000000000000C4F0                 pop     r14
.text:000000000000C4F2                 pop     r15
.text:000000000000C4F4                 retn
.text:000000000000C4F4 ; ---------------------------------------------------------------------------
.text:000000000000C4F5                 align 8
.text:000000000000C4F8
.text:000000000000C4F8 loc_C4F8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:000000000000C4F8                 mov     r8, rcx
.text:000000000000C4FB                 mov     rcx, rdx
.text:000000000000C4FE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:000000000000C505                 mov     esi, 1
.text:000000000000C50A                 xor     eax, eax
.text:000000000000C50C                 call    ___fprintf_chk
.text:000000000000C511                 jmp     loc_C3FC
.text:000000000000C511 ; ---------------------------------------------------------------------------
.text:000000000000C516                 align 20h
.text:000000000000C520
.text:000000000000C520 loc_C520:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C520                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C520                 mov     r10, [rbx+40h]  ; jumptable 000000000000C464 case 9
.text:000000000000C524                 mov     r9, [rbx+38h]
.text:000000000000C528                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000C52F                 mov     rax, [rbx+10h]
.text:000000000000C533                 mov     r8, [rbx+8]
.text:000000000000C537                 mov     edx, 5          ; category
.text:000000000000C53C                 mov     r13, [rbx+30h]
.text:000000000000C540                 mov     r12, [rbx+28h]
.text:000000000000C544                 mov     r15, [rbx+20h]
.text:000000000000C548                 mov     r14, [rbx+18h]
.text:000000000000C54C                 mov     rbx, [rbx]
.text:000000000000C54F                 mov     [rsp+58h+var_40], r10
.text:000000000000C554                 mov     [rsp+58h+var_48], r9
.text:000000000000C559                 mov     [rsp+58h+var_58], rax
.text:000000000000C55D                 mov     [rsp+58h+var_50], r8
.text:000000000000C562
.text:000000000000C562 loc_C562:                               ; CODE XREF: version_etc_arn+412↓j
.text:000000000000C562                 xor     edi, edi        ; domainname
.text:000000000000C564                 call    _dcgettext
.text:000000000000C569                 mov     r10, [rsp+58h+var_40]
.text:000000000000C56E                 push    r10
.text:000000000000C570                 jmp     loc_C4B4
.text:000000000000C570 ; ---------------------------------------------------------------------------
.text:000000000000C575                 align 8
.text:000000000000C578
.text:000000000000C578 loc_C578:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C578                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C578                 mov     rbx, [rbx]      ; jumptable 000000000000C464 case 1
.text:000000000000C57B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:000000000000C582                 mov     edx, 5          ; category
.text:000000000000C587                 xor     edi, edi        ; domainname
.text:000000000000C589                 call    _dcgettext
.text:000000000000C58E                 add     rsp, 28h
.text:000000000000C592                 mov     rcx, rbx
.text:000000000000C595                 mov     rdi, rbp
.text:000000000000C598                 pop     rbx
.text:000000000000C599                 pop     rbp
.text:000000000000C59A                 pop     r12
.text:000000000000C59C                 pop     r13
.text:000000000000C59E                 pop     r14
.text:000000000000C5A0                 pop     r15
.text:000000000000C5A2                 mov     rdx, rax
.text:000000000000C5A5                 mov     esi, 1
.text:000000000000C5AA                 xor     eax, eax
.text:000000000000C5AC                 jmp     ___fprintf_chk
.text:000000000000C5AC ; ---------------------------------------------------------------------------
.text:000000000000C5B1                 align 8
.text:000000000000C5B8
.text:000000000000C5B8 loc_C5B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C5B8                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C5B8                 mov     r12, [rbx+8]    ; jumptable 000000000000C464 case 2
.text:000000000000C5BC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:000000000000C5C3                 mov     rbx, [rbx]
.text:000000000000C5C6                 mov     edx, 5          ; category
.text:000000000000C5CB                 xor     edi, edi        ; domainname
.text:000000000000C5CD                 call    _dcgettext
.text:000000000000C5D2                 add     rsp, 28h
.text:000000000000C5D6                 mov     r8, r12
.text:000000000000C5D9                 mov     rcx, rbx
.text:000000000000C5DC                 mov     rdi, rbp
.text:000000000000C5DF                 mov     rdx, rax
.text:000000000000C5E2                 mov     esi, 1
.text:000000000000C5E7                 pop     rbx
.text:000000000000C5E8                 pop     rbp
.text:000000000000C5E9                 pop     r12
.text:000000000000C5EB                 pop     r13
.text:000000000000C5ED                 pop     r14
.text:000000000000C5EF                 pop     r15
.text:000000000000C5F1                 xor     eax, eax
.text:000000000000C5F3                 jmp     ___fprintf_chk
.text:000000000000C5F3 ; ---------------------------------------------------------------------------
.text:000000000000C5F8                 align 20h
.text:000000000000C600
.text:000000000000C600 loc_C600:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C600                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C600                 mov     r13, [rbx+10h]  ; jumptable 000000000000C464 case 3
.text:000000000000C604                 mov     r12, [rbx+8]
.text:000000000000C608                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000C60F                 mov     rbx, [rbx]
.text:000000000000C612                 mov     edx, 5          ; category
.text:000000000000C617                 xor     edi, edi        ; domainname
.text:000000000000C619                 call    _dcgettext
.text:000000000000C61E                 add     rsp, 28h
.text:000000000000C622                 mov     r9, r13
.text:000000000000C625                 mov     r8, r12
.text:000000000000C628                 mov     rcx, rbx
.text:000000000000C62B                 mov     rdi, rbp
.text:000000000000C62E                 mov     rdx, rax
.text:000000000000C631                 pop     rbx
.text:000000000000C632                 pop     rbp
.text:000000000000C633                 pop     r12
.text:000000000000C635                 pop     r13
.text:000000000000C637                 pop     r14
.text:000000000000C639                 pop     r15
.text:000000000000C63B                 mov     esi, 1
.text:000000000000C640                 xor     eax, eax
.text:000000000000C642                 jmp     ___fprintf_chk
.text:000000000000C642 ; ---------------------------------------------------------------------------
.text:000000000000C647                 align 10h
.text:000000000000C650
.text:000000000000C650 loc_C650:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C650                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C650                 lea     rsi, aWrittenBySSSAn ; jumptable 000000000000C464 case 4
.text:000000000000C657                 mov     edx, 5          ; category
.text:000000000000C65C                 xor     edi, edi        ; domainname
.text:000000000000C65E                 mov     r14, [rbx+18h]
.text:000000000000C662                 mov     r13, [rbx+10h]
.text:000000000000C666                 mov     r12, [rbx+8]
.text:000000000000C66A                 mov     rbx, [rbx]
.text:000000000000C66D                 call    _dcgettext
.text:000000000000C672                 sub     rsp, 8
.text:000000000000C676
.text:000000000000C676 loc_C676:                               ; CODE XREF: version_etc_arn+310↓j
.text:000000000000C676                 push    r14
.text:000000000000C678                 mov     rdx, rax
.text:000000000000C67B                 mov     r9, r13
.text:000000000000C67E                 mov     r8, r12
.text:000000000000C681                 mov     rcx, rbx
.text:000000000000C684                 mov     rdi, rbp
.text:000000000000C687                 mov     esi, 1
.text:000000000000C68C                 xor     eax, eax
.text:000000000000C68E                 call    ___fprintf_chk
.text:000000000000C693                 pop     rax
.text:000000000000C694                 pop     rdx
.text:000000000000C695                 add     rsp, 28h
.text:000000000000C699                 pop     rbx
.text:000000000000C69A                 pop     rbp
.text:000000000000C69B                 pop     r12
.text:000000000000C69D                 pop     r13
.text:000000000000C69F                 pop     r14
.text:000000000000C6A1                 pop     r15
.text:000000000000C6A3                 retn
.text:000000000000C6A3 ; ---------------------------------------------------------------------------
.text:000000000000C6A4                 align 8
.text:000000000000C6A8
.text:000000000000C6A8 loc_C6A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C6A8                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C6A8                 mov     r15, [rbx+20h]  ; jumptable 000000000000C464 case 5
.text:000000000000C6AC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:000000000000C6B3                 mov     edx, 5          ; category
.text:000000000000C6B8                 xor     edi, edi        ; domainname
.text:000000000000C6BA                 mov     r14, [rbx+18h]
.text:000000000000C6BE                 mov     r13, [rbx+10h]
.text:000000000000C6C2                 mov     r12, [rbx+8]
.text:000000000000C6C6                 mov     rbx, [rbx]
.text:000000000000C6C9                 call    _dcgettext
.text:000000000000C6CE                 push    r15
.text:000000000000C6D0                 jmp     short loc_C676
.text:000000000000C6D0 ; ---------------------------------------------------------------------------
.text:000000000000C6D2                 align 8
.text:000000000000C6D8
.text:000000000000C6D8 loc_C6D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C6D8                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C6D8                 mov     r8, [rbx+8]     ; jumptable 000000000000C464 case 6
.text:000000000000C6DC                 mov     r12, [rbx+28h]
.text:000000000000C6E0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:000000000000C6E7                 mov     r15, [rbx+20h]
.text:000000000000C6EB                 mov     r14, [rbx+18h]
.text:000000000000C6EF                 mov     edx, 5          ; category
.text:000000000000C6F4                 mov     r13, [rbx+10h]
.text:000000000000C6F8                 xor     edi, edi        ; domainname
.text:000000000000C6FA                 mov     rbx, [rbx]
.text:000000000000C6FD                 mov     [rsp+58h+var_58], r8
.text:000000000000C701                 call    _dcgettext
.text:000000000000C706                 sub     rsp, 8
.text:000000000000C70A                 mov     r9, r13
.text:000000000000C70D                 push    r12
.text:000000000000C70F                 push    r15
.text:000000000000C711                 push    r14
.text:000000000000C713
.text:000000000000C713 loc_C713:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:000000000000C713                 mov     r8, [rsp+78h+var_58]
.text:000000000000C718                 mov     rcx, rbx
.text:000000000000C71B                 mov     rdx, rax
.text:000000000000C71E                 mov     rdi, rbp
.text:000000000000C721                 mov     esi, 1
.text:000000000000C726                 xor     eax, eax
.text:000000000000C728                 call    ___fprintf_chk
.text:000000000000C72D                 add     rsp, 20h
.text:000000000000C731                 add     rsp, 28h
.text:000000000000C735                 pop     rbx
.text:000000000000C736                 pop     rbp
.text:000000000000C737                 pop     r12
.text:000000000000C739                 pop     r13
.text:000000000000C73B                 pop     r14
.text:000000000000C73D                 pop     r15
.text:000000000000C73F                 retn
.text:000000000000C740 ; ---------------------------------------------------------------------------
.text:000000000000C740
.text:000000000000C740 loc_C740:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C740                                         ; DATA XREF: .rodata:jpt_C464↓o
.text:000000000000C740                 mov     r9, [rbx+10h]   ; jumptable 000000000000C464 case 7
.text:000000000000C744                 mov     r13, [rbx+30h]
.text:000000000000C748                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000C74F                 mov     r12, [rbx+28h]
.text:000000000000C753                 mov     r15, [rbx+20h]
.text:000000000000C757                 mov     edx, 5          ; category
.text:000000000000C75C                 mov     r14, [rbx+18h]
.text:000000000000C760                 mov     r8, [rbx+8]
.text:000000000000C764                 xor     edi, edi        ; domainname
.text:000000000000C766                 mov     [rsp+58h+var_50], r9
.text:000000000000C76B                 mov     rbx, [rbx]
.text:000000000000C76E                 mov     [rsp+58h+var_58], r8
.text:000000000000C772                 call    _dcgettext
.text:000000000000C777                 push    r13
.text:000000000000C779                 push    r12
.text:000000000000C77B                 push    r15
.text:000000000000C77D                 push    r14
.text:000000000000C77F                 mov     r9, [rsp+78h+var_50]
.text:000000000000C784                 jmp     short loc_C713
.text:000000000000C784 ; ---------------------------------------------------------------------------
.text:000000000000C786                 align 10h
.text:000000000000C790
.text:000000000000C790 def_C464:                               ; CODE XREF: version_etc_arn+90↑j
.text:000000000000C790                 mov     r10, [rbx+40h]  ; jumptable 000000000000C464 default case
.text:000000000000C794                 mov     r9, [rbx+38h]
.text:000000000000C798                 mov     edx, 5
.text:000000000000C79D                 mov     rax, [rbx+10h]
.text:000000000000C7A1                 mov     r8, [rbx+8]
.text:000000000000C7A5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000C7AC                 mov     r13, [rbx+30h]
.text:000000000000C7B0                 mov     r12, [rbx+28h]
.text:000000000000C7B4                 mov     r15, [rbx+20h]
.text:000000000000C7B8                 mov     r14, [rbx+18h]
.text:000000000000C7BC                 mov     [rsp+58h+var_40], r10
.text:000000000000C7C1                 mov     [rsp+58h+var_48], r9
.text:000000000000C7C6                 mov     [rsp+58h+var_58], rax
.text:000000000000C7CA                 mov     [rsp+58h+var_50], r8
.text:000000000000C7CF                 mov     rbx, [rbx]
.text:000000000000C7D2                 jmp     loc_C562
.text:000000000000C7D2 ; } // starts at C3C0
.text:000000000000C7D2 version_etc_arn endp
.text:000000000000C7D2
.text:000000000000C7D2 ; ---------------------------------------------------------------------------
.text:000000000000C7D7                 align 20h
.text:000000000000C7E0
.text:000000000000C7E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C7E0
.text:000000000000C7E0 ; Attributes: info_from_lumina
.text:000000000000C7E0
.text:000000000000C7E0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:000000000000C7E0                 public version_etc_ar
.text:000000000000C7E0 version_etc_ar  proc near
.text:000000000000C7E0 ; __unwind {
.text:000000000000C7E0                 xor     r9d, r9d
.text:000000000000C7E3                 cmp     qword ptr [r8], 0
.text:000000000000C7E7                 jz      short loc_C7FB
.text:000000000000C7E9                 nop     dword ptr [rax+00000000h]
.text:000000000000C7F0
.text:000000000000C7F0 loc_C7F0:                               ; CODE XREF: version_etc_ar+19↓j
.text:000000000000C7F0                 add     r9, 1
.text:000000000000C7F4                 cmp     qword ptr [r8+r9*8], 0
.text:000000000000C7F9                 jnz     short loc_C7F0
.text:000000000000C7FB
.text:000000000000C7FB loc_C7FB:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000C7FB                 jmp     version_etc_arn
.text:000000000000C7FB ; } // starts at C7E0
.text:000000000000C7FB version_etc_ar  endp
.text:000000000000C7FB
.text:000000000000C800
.text:000000000000C800 ; =============== S U B R O U T I N E =======================================
.text:000000000000C800
.text:000000000000C800 ; Attributes: info_from_lumina
.text:000000000000C800
.text:000000000000C800 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:000000000000C800                 public version_etc_va
.text:000000000000C800 version_etc_va  proc near
.text:000000000000C800
.text:000000000000C800 authtab         = qword ptr -68h
.text:000000000000C800 var_10          = qword ptr -10h
.text:000000000000C800
.text:000000000000C800 ; __unwind {
.text:000000000000C800                 sub     rsp, 68h
.text:000000000000C804                 mov     r10, r8
.text:000000000000C807                 xor     r9d, r9d
.text:000000000000C80A                 mov     rax, fs:28h
.text:000000000000C813                 mov     [rsp+68h+var_10], rax
.text:000000000000C818                 xor     eax, eax
.text:000000000000C81A                 mov     r8, rsp
.text:000000000000C81D                 nop     dword ptr [rax]
.text:000000000000C820
.text:000000000000C820 loc_C820:                               ; CODE XREF: version_etc_va+49↓j
.text:000000000000C820                 mov     eax, [r10]
.text:000000000000C823                 cmp     eax, 2Fh ; '/'
.text:000000000000C826                 ja      short loc_C86A
.text:000000000000C828                 mov     r11d, eax
.text:000000000000C82B                 add     r11, [r10+10h]
.text:000000000000C82F                 add     eax, 8
.text:000000000000C832                 mov     [r10], eax
.text:000000000000C835
.text:000000000000C835 loc_C835:                               ; CODE XREF: version_etc_va+76↓j
.text:000000000000C835                 mov     rax, [r11]
.text:000000000000C838                 test    rax, rax
.text:000000000000C83B                 mov     [r8+r9*8], rax
.text:000000000000C83F                 jz      short loc_C84B
.text:000000000000C841                 add     r9, 1
.text:000000000000C845                 cmp     r9, 0Ah
.text:000000000000C849                 jnz     short loc_C820
.text:000000000000C84B
.text:000000000000C84B loc_C84B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000C84B                 call    version_etc_arn
.text:000000000000C850                 mov     rax, [rsp+68h+var_10]
.text:000000000000C855                 xor     rax, fs:28h
.text:000000000000C85E                 jnz     short loc_C865
.text:000000000000C860                 add     rsp, 68h
.text:000000000000C864                 retn
.text:000000000000C865 ; ---------------------------------------------------------------------------
.text:000000000000C865
.text:000000000000C865 loc_C865:                               ; CODE XREF: version_etc_va+5E↑j
.text:000000000000C865                 call    ___stack_chk_fail
.text:000000000000C86A ; ---------------------------------------------------------------------------
.text:000000000000C86A
.text:000000000000C86A loc_C86A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000C86A                 mov     r11, [r10+8]
.text:000000000000C86E                 lea     rax, [r11+8]
.text:000000000000C872                 mov     [r10+8], rax
.text:000000000000C876                 jmp     short loc_C835
.text:000000000000C876 ; } // starts at C800
.text:000000000000C876 version_etc_va  endp
.text:000000000000C876
.text:000000000000C876 ; ---------------------------------------------------------------------------
.text:000000000000C878                 align 20h
.text:000000000000C880
.text:000000000000C880 ; =============== S U B R O U T I N E =======================================
.text:000000000000C880
.text:000000000000C880 ; Attributes: info_from_lumina
.text:000000000000C880
.text:000000000000C880 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:000000000000C880                 public version_etc
.text:000000000000C880 version_etc     proc near               ; CODE XREF: main+3A2↑p
.text:000000000000C880
.text:000000000000C880 var_C0          = dword ptr -0C0h
.text:000000000000C880 var_B8          = qword ptr -0B8h
.text:000000000000C880 var_B0          = qword ptr -0B0h
.text:000000000000C880 var_A8          = byte ptr -0A8h
.text:000000000000C880 var_50          = qword ptr -50h
.text:000000000000C880 var_48          = byte ptr -48h
.text:000000000000C880 var_28          = qword ptr -28h
.text:000000000000C880 var_20          = qword ptr -20h
.text:000000000000C880 arg_0           = byte ptr  8
.text:000000000000C880
.text:000000000000C880 ; __unwind {
.text:000000000000C880                 push    rbp
.text:000000000000C881                 push    rbx
.text:000000000000C882                 mov     r10d, 20h ; ' '
.text:000000000000C888                 xor     r11d, r11d
.text:000000000000C88B                 sub     rsp, 0B8h
.text:000000000000C892                 mov     rax, fs:28h
.text:000000000000C89B                 mov     [rsp+0C8h+var_50], rax
.text:000000000000C8A0                 xor     eax, eax
.text:000000000000C8A2                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000C8AA                 mov     [rsp+0C8h+var_28], r8
.text:000000000000C8B2                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000C8BA                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000C8BF                 mov     [rsp+0C8h+var_20], r9
.text:000000000000C8C7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000C8CF                 mov     [rsp+0C8h+var_B8], rax
.text:000000000000C8D4                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000C8DC                 xor     r9d, r9d
.text:000000000000C8DF                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000C8E4                 mov     rbp, rax
.text:000000000000C8E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: version_etc+9A↓j
.text:000000000000C8F0                 cmp     r10d, 2Fh ; '/'
.text:000000000000C8F4                 ja      short loc_C94C
.text:000000000000C8F6                 mov     eax, r10d
.text:000000000000C8F9                 mov     r11d, 1
.text:000000000000C8FF                 add     r10d, 8
.text:000000000000C903                 add     rax, rbp
.text:000000000000C906
.text:000000000000C906 loc_C906:                               ; CODE XREF: version_etc+D3↓j
.text:000000000000C906                 mov     rax, [rax]
.text:000000000000C909                 test    rax, rax
.text:000000000000C90C                 mov     [r8+r9*8], rax
.text:000000000000C910                 jz      short loc_C91C
.text:000000000000C912                 add     r9, 1
.text:000000000000C916                 cmp     r9, 0Ah
.text:000000000000C91A                 jnz     short loc_C8F0
.text:000000000000C91C
.text:000000000000C91C loc_C91C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000C91C                 test    r11b, r11b
.text:000000000000C91F                 jnz     short loc_C945
.text:000000000000C921
.text:000000000000C921 loc_C921:                               ; CODE XREF: version_etc+CA↓j
.text:000000000000C921                 call    version_etc_arn
.text:000000000000C926                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000C92B                 xor     rax, fs:28h
.text:000000000000C934                 jnz     short loc_C940
.text:000000000000C936                 add     rsp, 0B8h
.text:000000000000C93D                 pop     rbx
.text:000000000000C93E                 pop     rbp
.text:000000000000C93F                 retn
.text:000000000000C940 ; ---------------------------------------------------------------------------
.text:000000000000C940
.text:000000000000C940 loc_C940:                               ; CODE XREF: version_etc+B4↑j
.text:000000000000C940                 call    ___stack_chk_fail
.text:000000000000C945 ; ---------------------------------------------------------------------------
.text:000000000000C945
.text:000000000000C945 loc_C945:                               ; CODE XREF: version_etc+9F↑j
.text:000000000000C945                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000C94A                 jmp     short loc_C921
.text:000000000000C94C ; ---------------------------------------------------------------------------
.text:000000000000C94C
.text:000000000000C94C loc_C94C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000C94C                 mov     rax, rbx
.text:000000000000C94F                 add     rbx, 8
.text:000000000000C953                 jmp     short loc_C906
.text:000000000000C953 ; } // starts at C880
.text:000000000000C953 version_etc     endp
.text:000000000000C953
.text:000000000000C953 ; ---------------------------------------------------------------------------
.text:000000000000C955                 align 20h
.text:000000000000C960
.text:000000000000C960 ; =============== S U B R O U T I N E =======================================
.text:000000000000C960
.text:000000000000C960 ; Attributes: info_from_lumina
.text:000000000000C960
.text:000000000000C960 ; void __cdecl emit_bug_reporting_address()
.text:000000000000C960                 public emit_bug_reporting_address
.text:000000000000C960 emit_bug_reporting_address proc near
.text:000000000000C960 ; __unwind {
.text:000000000000C960                 push    rbx
.text:000000000000C961                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:000000000000C968                 mov     edx, 5          ; category
.text:000000000000C96D                 xor     edi, edi        ; domainname
.text:000000000000C96F                 call    _dcgettext
.text:000000000000C974                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000C97B                 mov     rsi, rax
.text:000000000000C97E                 mov     edi, 1
.text:000000000000C983                 xor     eax, eax
.text:000000000000C985                 call    ___printf_chk
.text:000000000000C98A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:000000000000C991                 mov     edx, 5          ; category
.text:000000000000C996                 xor     edi, edi        ; domainname
.text:000000000000C998                 call    _dcgettext
.text:000000000000C99D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000C9A4                 lea     rdx, unk_1FB07
.text:000000000000C9AB                 mov     rsi, rax
.text:000000000000C9AE                 mov     edi, 1
.text:000000000000C9B3                 xor     eax, eax
.text:000000000000C9B5                 call    ___printf_chk
.text:000000000000C9BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000C9C1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:000000000000C9C8                 xor     edi, edi        ; domainname
.text:000000000000C9CA                 mov     edx, 5          ; category
.text:000000000000C9CF                 call    _dcgettext
.text:000000000000C9D4                 mov     rsi, rbx        ; stream
.text:000000000000C9D7                 mov     rdi, rax        ; s
.text:000000000000C9DA                 pop     rbx
.text:000000000000C9DB                 jmp     _fputs_unlocked
.text:000000000000C9DB ; } // starts at C960
.text:000000000000C9DB emit_bug_reporting_address endp
.text:000000000000C9DB
.text:000000000000C9E0
.text:000000000000C9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C9E0
.text:000000000000C9E0
.text:000000000000C9E0                 public xmalloc
.text:000000000000C9E0 xmalloc         proc near               ; CODE XREF: exclude_add_pattern_buffer+11↑p
.text:000000000000C9E0                                         ; excluded_file_name+17E↑p ...
.text:000000000000C9E0 ; __unwind {
.text:000000000000C9E0                 push    rbx
.text:000000000000C9E1                 mov     rbx, rdi
.text:000000000000C9E4                 call    _malloc
.text:000000000000C9E9                 test    rax, rax
.text:000000000000C9EC                 jnz     short loc_C9F3
.text:000000000000C9EE                 test    rbx, rbx
.text:000000000000C9F1                 jnz     short loc_C9F5
.text:000000000000C9F3
.text:000000000000C9F3 loc_C9F3:                               ; CODE XREF: xmalloc+C↑j
.text:000000000000C9F3                 pop     rbx
.text:000000000000C9F4                 retn
.text:000000000000C9F5 ; ---------------------------------------------------------------------------
.text:000000000000C9F5
.text:000000000000C9F5 loc_C9F5:                               ; CODE XREF: xmalloc+11↑j
.text:000000000000C9F5                 call    xalloc_die
.text:000000000000C9F5 ; } // starts at C9E0
.text:000000000000C9F5 xmalloc         endp
.text:000000000000C9F5
.text:000000000000C9F5 ; ---------------------------------------------------------------------------
.text:000000000000C9FA                 align 20h
.text:000000000000CA00
.text:000000000000CA00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA00
.text:000000000000CA00 ; Attributes: info_from_lumina
.text:000000000000CA00
.text:000000000000CA00 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:000000000000CA00                 public xnmalloc
.text:000000000000CA00 xnmalloc        proc near
.text:000000000000CA00 ; __unwind {
.text:000000000000CA00                 mov     rax, rdi
.text:000000000000CA03                 mul     rsi
.text:000000000000CA06                 mov     rdi, rax
.text:000000000000CA09                 seto    al
.text:000000000000CA0C                 test    rdi, rdi
.text:000000000000CA0F                 js      short loc_CA1B
.text:000000000000CA11                 movzx   eax, al
.text:000000000000CA14                 test    rax, rax
.text:000000000000CA17                 jnz     short loc_CA1B
.text:000000000000CA19                 jmp     short xmalloc
.text:000000000000CA1B ; ---------------------------------------------------------------------------
.text:000000000000CA1B
.text:000000000000CA1B loc_CA1B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000CA1B                                         ; xnmalloc+17↑j
.text:000000000000CA1B                 sub     rsp, 8
.text:000000000000CA1F                 call    xalloc_die
.text:000000000000CA1F ; } // starts at CA00
.text:000000000000CA1F xnmalloc        endp
.text:000000000000CA1F
.text:000000000000CA1F ; ---------------------------------------------------------------------------
.text:000000000000CA24                 align 10h
.text:000000000000CA30
.text:000000000000CA30 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA30
.text:000000000000CA30
.text:000000000000CA30                 public xcharalloc
.text:000000000000CA30 xcharalloc      proc near
.text:000000000000CA30 ; __unwind {
.text:000000000000CA30                 jmp     short xmalloc
.text:000000000000CA30 ; } // starts at CA30
.text:000000000000CA30 xcharalloc      endp
.text:000000000000CA30
.text:000000000000CA30 ; ---------------------------------------------------------------------------
.text:000000000000CA32                 align 20h
.text:000000000000CA40
.text:000000000000CA40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA40
.text:000000000000CA40 ; Attributes: info_from_lumina
.text:000000000000CA40
.text:000000000000CA40 ; void *__fastcall xrealloc(void *p, size_t n)
.text:000000000000CA40                 public xrealloc
.text:000000000000CA40 xrealloc        proc near               ; CODE XREF: main+822↑p
.text:000000000000CA40                                         ; add_exclude+2AB↑p ...
.text:000000000000CA40 ; __unwind {
.text:000000000000CA40                 test    rsi, rsi
.text:000000000000CA43                 push    rbx
.text:000000000000CA44                 mov     rbx, rsi
.text:000000000000CA47                 jnz     short loc_CA4E
.text:000000000000CA49                 test    rdi, rdi
.text:000000000000CA4C                 jnz     short loc_CA68
.text:000000000000CA4E
.text:000000000000CA4E loc_CA4E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000CA4E                 mov     rsi, rbx        ; size
.text:000000000000CA51                 call    _realloc
.text:000000000000CA56                 test    rax, rax
.text:000000000000CA59                 jnz     short loc_CA60
.text:000000000000CA5B                 test    rbx, rbx
.text:000000000000CA5E                 jnz     short loc_CA71
.text:000000000000CA60
.text:000000000000CA60 loc_CA60:                               ; CODE XREF: xrealloc+19↑j
.text:000000000000CA60                 pop     rbx
.text:000000000000CA61                 retn
.text:000000000000CA61 ; ---------------------------------------------------------------------------
.text:000000000000CA62                 align 8
.text:000000000000CA68
.text:000000000000CA68 loc_CA68:                               ; CODE XREF: xrealloc+C↑j
.text:000000000000CA68                 call    free
.text:000000000000CA6D                 xor     eax, eax
.text:000000000000CA6F                 pop     rbx
.text:000000000000CA70                 retn
.text:000000000000CA71 ; ---------------------------------------------------------------------------
.text:000000000000CA71
.text:000000000000CA71 loc_CA71:                               ; CODE XREF: xrealloc+1E↑j
.text:000000000000CA71                 call    xalloc_die
.text:000000000000CA71 ; } // starts at CA40
.text:000000000000CA71 xrealloc        endp
.text:000000000000CA71
.text:000000000000CA71 ; ---------------------------------------------------------------------------
.text:000000000000CA76                 align 20h
.text:000000000000CA80
.text:000000000000CA80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA80
.text:000000000000CA80 ; Attributes: info_from_lumina
.text:000000000000CA80
.text:000000000000CA80 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:000000000000CA80                 public xnrealloc
.text:000000000000CA80 xnrealloc       proc near
.text:000000000000CA80 ; __unwind {
.text:000000000000CA80                 mov     rax, rsi
.text:000000000000CA83                 mul     rdx
.text:000000000000CA86                 mov     rsi, rax
.text:000000000000CA89                 seto    al
.text:000000000000CA8C                 test    rsi, rsi
.text:000000000000CA8F                 js      short loc_CA9B
.text:000000000000CA91                 movzx   eax, al
.text:000000000000CA94                 test    rax, rax
.text:000000000000CA97                 jnz     short loc_CA9B
.text:000000000000CA99                 jmp     short xrealloc
.text:000000000000CA9B ; ---------------------------------------------------------------------------
.text:000000000000CA9B
.text:000000000000CA9B loc_CA9B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000CA9B                                         ; xnrealloc+17↑j
.text:000000000000CA9B                 sub     rsp, 8
.text:000000000000CA9F                 call    xalloc_die
.text:000000000000CA9F ; } // starts at CA80
.text:000000000000CA9F xnrealloc       endp
.text:000000000000CA9F
.text:000000000000CA9F ; ---------------------------------------------------------------------------
.text:000000000000CAA4                 align 10h
.text:000000000000CAB0
.text:000000000000CAB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAB0
.text:000000000000CAB0 ; Attributes: info_from_lumina
.text:000000000000CAB0
.text:000000000000CAB0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:000000000000CAB0                 public x2nrealloc
.text:000000000000CAB0 x2nrealloc      proc near
.text:000000000000CAB0 ; __unwind {
.text:000000000000CAB0                 test    rdi, rdi
.text:000000000000CAB3                 mov     r9, rdx
.text:000000000000CAB6                 mov     rcx, [rsi]
.text:000000000000CAB9                 jz      short loc_CAF0
.text:000000000000CABB                 xor     edx, edx
.text:000000000000CABD                 mov     rax, 5555555555555554h
.text:000000000000CAC7                 div     r9
.text:000000000000CACA                 cmp     rax, rcx
.text:000000000000CACD                 jbe     short loc_CB0B
.text:000000000000CACF                 mov     rax, rcx
.text:000000000000CAD2                 shr     rax, 1
.text:000000000000CAD5                 lea     rcx, [rax+rcx+1]
.text:000000000000CADA
.text:000000000000CADA loc_CADA:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000CADA                 mov     [rsi], rcx
.text:000000000000CADD                 imul    rcx, r9
.text:000000000000CAE1                 mov     rsi, rcx
.text:000000000000CAE4                 jmp     xrealloc
.text:000000000000CAE4 ; ---------------------------------------------------------------------------
.text:000000000000CAE9                 align 10h
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: x2nrealloc+9↑j
.text:000000000000CAF0                 test    rcx, rcx
.text:000000000000CAF3                 jz      short loc_CB18
.text:000000000000CAF5
.text:000000000000CAF5 loc_CAF5:                               ; CODE XREF: x2nrealloc+80↓j
.text:000000000000CAF5                 mov     rax, rcx
.text:000000000000CAF8                 mul     r9
.text:000000000000CAFB                 seto    dl
.text:000000000000CAFE                 test    rax, rax
.text:000000000000CB01                 movzx   edx, dl
.text:000000000000CB04                 js      short loc_CB0B
.text:000000000000CB06                 test    rdx, rdx
.text:000000000000CB09                 jz      short loc_CADA
.text:000000000000CB0B
.text:000000000000CB0B loc_CB0B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000CB0B                                         ; x2nrealloc+54↑j
.text:000000000000CB0B                 sub     rsp, 8
.text:000000000000CB0F                 call    xalloc_die
.text:000000000000CB0F ; ---------------------------------------------------------------------------
.text:000000000000CB14                 align 8
.text:000000000000CB18
.text:000000000000CB18 loc_CB18:                               ; CODE XREF: x2nrealloc+43↑j
.text:000000000000CB18                 xor     edx, edx
.text:000000000000CB1A                 mov     eax, 80h
.text:000000000000CB1F                 xor     r8d, r8d
.text:000000000000CB22                 div     r9
.text:000000000000CB25                 test    rax, rax
.text:000000000000CB28                 setz    r8b
.text:000000000000CB2C                 lea     rcx, [r8+rax]
.text:000000000000CB30                 jmp     short loc_CAF5
.text:000000000000CB30 ; } // starts at CAB0
.text:000000000000CB30 x2nrealloc      endp
.text:000000000000CB30
.text:000000000000CB30 ; ---------------------------------------------------------------------------
.text:000000000000CB32                 align 20h
.text:000000000000CB40
.text:000000000000CB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB40
.text:000000000000CB40 ; Attributes: info_from_lumina
.text:000000000000CB40
.text:000000000000CB40 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:000000000000CB40                 public x2realloc
.text:000000000000CB40 x2realloc       proc near               ; CODE XREF: add_exclude_fp+84↑p
.text:000000000000CB40 ; __unwind {
.text:000000000000CB40                 test    rdi, rdi
.text:000000000000CB43                 mov     rax, [rsi]
.text:000000000000CB46                 jz      short loc_CB70
.text:000000000000CB48                 mov     rdx, 5555555555555553h
.text:000000000000CB52                 cmp     rax, rdx
.text:000000000000CB55                 ja      short loc_CB81
.text:000000000000CB57                 mov     rdx, rax
.text:000000000000CB5A                 shr     rdx, 1
.text:000000000000CB5D                 lea     rax, [rdx+rax+1]
.text:000000000000CB62
.text:000000000000CB62 loc_CB62:                               ; CODE XREF: x2realloc+3F↓j
.text:000000000000CB62                 mov     [rsi], rax
.text:000000000000CB65                 mov     rsi, rax
.text:000000000000CB68                 jmp     xrealloc
.text:000000000000CB68 ; ---------------------------------------------------------------------------
.text:000000000000CB6D                 align 10h
.text:000000000000CB70
.text:000000000000CB70 loc_CB70:                               ; CODE XREF: x2realloc+6↑j
.text:000000000000CB70                 test    rax, rax
.text:000000000000CB73                 mov     edx, 80h
.text:000000000000CB78                 cmovz   rax, rdx
.text:000000000000CB7C                 test    rax, rax
.text:000000000000CB7F                 jns     short loc_CB62
.text:000000000000CB81
.text:000000000000CB81 loc_CB81:                               ; CODE XREF: x2realloc+15↑j
.text:000000000000CB81                 sub     rsp, 8
.text:000000000000CB85                 call    xalloc_die
.text:000000000000CB85 ; } // starts at CB40
.text:000000000000CB85 x2realloc       endp
.text:000000000000CB85
.text:000000000000CB85 ; ---------------------------------------------------------------------------
.text:000000000000CB8A                 align 10h
.text:000000000000CB90
.text:000000000000CB90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB90
.text:000000000000CB90
.text:000000000000CB90 ; __int64 __fastcall xzalloc(size_t n)
.text:000000000000CB90                 public xzalloc
.text:000000000000CB90 xzalloc         proc near               ; CODE XREF: new_exclude+5↑j
.text:000000000000CB90                                         ; add_exclude+4B↑p ...
.text:000000000000CB90 ; __unwind {
.text:000000000000CB90                 push    rbx
.text:000000000000CB91                 mov     rbx, rdi
.text:000000000000CB94                 call    xmalloc
.text:000000000000CB99                 mov     rdx, rbx        ; n
.text:000000000000CB9C                 xor     esi, esi        ; c
.text:000000000000CB9E                 mov     rdi, rax        ; s
.text:000000000000CBA1                 pop     rbx
.text:000000000000CBA2                 jmp     _memset
.text:000000000000CBA2 ; } // starts at CB90
.text:000000000000CBA2 xzalloc         endp
.text:000000000000CBA2
.text:000000000000CBA2 ; ---------------------------------------------------------------------------
.text:000000000000CBA7                 align 10h
.text:000000000000CBB0
.text:000000000000CBB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CBB0
.text:000000000000CBB0 ; Attributes: info_from_lumina
.text:000000000000CBB0
.text:000000000000CBB0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:000000000000CBB0                 public xcalloc
.text:000000000000CBB0 xcalloc         proc near               ; CODE XREF: main+C1D↑p
.text:000000000000CBB0 ; __unwind {
.text:000000000000CBB0                 mov     rax, rdi
.text:000000000000CBB3                 sub     rsp, 8
.text:000000000000CBB7                 mul     rsi
.text:000000000000CBBA                 seto    dl
.text:000000000000CBBD                 test    rax, rax
.text:000000000000CBC0                 js      short loc_CBD9
.text:000000000000CBC2                 movzx   edx, dl
.text:000000000000CBC5                 test    rdx, rdx
.text:000000000000CBC8                 jnz     short loc_CBD9
.text:000000000000CBCA                 call    _calloc
.text:000000000000CBCF                 test    rax, rax
.text:000000000000CBD2                 jz      short loc_CBD9
.text:000000000000CBD4                 add     rsp, 8
.text:000000000000CBD8                 retn
.text:000000000000CBD9 ; ---------------------------------------------------------------------------
.text:000000000000CBD9
.text:000000000000CBD9 loc_CBD9:                               ; CODE XREF: xcalloc+10↑j
.text:000000000000CBD9                                         ; xcalloc+18↑j ...
.text:000000000000CBD9                 call    xalloc_die
.text:000000000000CBD9 ; } // starts at CBB0
.text:000000000000CBD9 xcalloc         endp
.text:000000000000CBD9
.text:000000000000CBD9 ; ---------------------------------------------------------------------------
.text:000000000000CBDE                 align 20h
.text:000000000000CBE0
.text:000000000000CBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CBE0
.text:000000000000CBE0 ; Attributes: info_from_lumina
.text:000000000000CBE0
.text:000000000000CBE0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:000000000000CBE0                 public xmemdup
.text:000000000000CBE0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:000000000000CBE0                                         ; xstrdup+11↓j
.text:000000000000CBE0 ; __unwind {
.text:000000000000CBE0                 push    rbp
.text:000000000000CBE1                 push    rbx
.text:000000000000CBE2                 mov     rbp, rdi
.text:000000000000CBE5                 mov     rdi, rsi
.text:000000000000CBE8                 mov     rbx, rsi
.text:000000000000CBEB                 sub     rsp, 8
.text:000000000000CBEF                 call    xmalloc
.text:000000000000CBF4                 add     rsp, 8
.text:000000000000CBF8                 mov     rdx, rbx        ; n
.text:000000000000CBFB                 mov     rsi, rbp        ; src
.text:000000000000CBFE                 pop     rbx
.text:000000000000CBFF                 pop     rbp
.text:000000000000CC00                 mov     rdi, rax        ; dest
.text:000000000000CC03                 jmp     _memcpy
.text:000000000000CC03 ; } // starts at CBE0
.text:000000000000CC03 xmemdup         endp
.text:000000000000CC03
.text:000000000000CC03 ; ---------------------------------------------------------------------------
.text:000000000000CC08                 align 10h
.text:000000000000CC10
.text:000000000000CC10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC10
.text:000000000000CC10
.text:000000000000CC10 ; __int64 __fastcall xstrdup(void *src)
.text:000000000000CC10                 public xstrdup
.text:000000000000CC10 xstrdup         proc near               ; CODE XREF: fnmatch_no_wildcards+6B↑p
.text:000000000000CC10                                         ; add_exclude+178↑p ...
.text:000000000000CC10 ; __unwind {
.text:000000000000CC10                 push    rbx
.text:000000000000CC11                 mov     rbx, rdi
.text:000000000000CC14                 call    _strlen
.text:000000000000CC19                 mov     rdi, rbx        ; src
.text:000000000000CC1C                 lea     rsi, [rax+1]    ; n
.text:000000000000CC20                 pop     rbx
.text:000000000000CC21                 jmp     short xmemdup
.text:000000000000CC21 ; } // starts at CC10
.text:000000000000CC21 xstrdup         endp
.text:000000000000CC21
.text:000000000000CC21 ; ---------------------------------------------------------------------------
.text:000000000000CC23                 align 10h
.text:000000000000CC30
.text:000000000000CC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC30
.text:000000000000CC30 ; Attributes: noreturn info_from_lumina
.text:000000000000CC30
.text:000000000000CC30 ; void __cdecl xalloc_die()
.text:000000000000CC30                 public xalloc_die
.text:000000000000CC30 xalloc_die      proc near               ; CODE XREF: main:loc_3DDF↑p
.text:000000000000CC30                                         ; add_exclude:loc_5A69↑p ...
.text:000000000000CC30 ; __unwind {
.text:000000000000CC30                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:000000000000CC37                 sub     rsp, 8
.text:000000000000CC3B                 mov     edx, 5          ; category
.text:000000000000CC40                 xor     edi, edi        ; domainname
.text:000000000000CC42                 call    _dcgettext
.text:000000000000CC47                 mov     edi, cs:exit_failure ; status
.text:000000000000CC4D                 lea     rdx, aS_0+2     ; format
.text:000000000000CC54                 mov     rcx, rax
.text:000000000000CC57                 xor     esi, esi        ; errnum
.text:000000000000CC59                 xor     eax, eax
.text:000000000000CC5B                 call    _error
.text:000000000000CC60                 call    _abort
.text:000000000000CC60 ; } // starts at CC30
.text:000000000000CC60 xalloc_die      endp
.text:000000000000CC60
.text:000000000000CC60 ; ---------------------------------------------------------------------------
.text:000000000000CC65                 align 10h
.text:000000000000CC70
.text:000000000000CC70 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC70
.text:000000000000CC70
.text:000000000000CC70                 public xfts_open
.text:000000000000CC70 xfts_open       proc near               ; CODE XREF: main+623↑p
.text:000000000000CC70 ; __unwind {
.text:000000000000CC70                 sub     rsp, 8
.text:000000000000CC74                 or      esi, 200h
.text:000000000000CC7A                 call    rpl_fts_open
.text:000000000000CC7F                 test    rax, rax
.text:000000000000CC82                 jz      short loc_CC90
.text:000000000000CC84                 add     rsp, 8
.text:000000000000CC88                 retn
.text:000000000000CC88 ; ---------------------------------------------------------------------------
.text:000000000000CC89                 align 10h
.text:000000000000CC90
.text:000000000000CC90 loc_CC90:                               ; CODE XREF: xfts_open+12↑j
.text:000000000000CC90                 call    ___errno_location
.text:000000000000CC95                 cmp     dword ptr [rax], 16h
.text:000000000000CC98                 jz      short loc_CCA0
.text:000000000000CC9A                 call    xalloc_die
.text:000000000000CC9A ; ---------------------------------------------------------------------------
.text:000000000000CC9F                 align 20h
.text:000000000000CCA0
.text:000000000000CCA0 loc_CCA0:                               ; CODE XREF: xfts_open+28↑j
.text:000000000000CCA0                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:000000000000CCA7                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/xfts.c"
.text:000000000000CCAE                 lea     rdi, aErrnoEinval ; "errno != EINVAL"
.text:000000000000CCB5                 mov     edx, 29h ; ')'  ; line
.text:000000000000CCBA                 call    ___assert_fail
.text:000000000000CCBA ; } // starts at CC70
.text:000000000000CCBA xfts_open       endp
.text:000000000000CCBA
.text:000000000000CCBA ; ---------------------------------------------------------------------------
.text:000000000000CCBF                 align 20h
.text:000000000000CCC0
.text:000000000000CCC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCC0
.text:000000000000CCC0
.text:000000000000CCC0                 public cycle_warning_required
.text:000000000000CCC0 cycle_warning_required proc near        ; CODE XREF: main+1245↑p
.text:000000000000CCC0 ; __unwind {
.text:000000000000CCC0                 mov     edx, [rdi+48h]
.text:000000000000CCC3                 mov     eax, 1
.text:000000000000CCC8                 and     edx, 11h
.text:000000000000CCCB                 cmp     edx, 10h
.text:000000000000CCCE                 jz      short locret_CCD7
.text:000000000000CCD0                 xor     eax, eax
.text:000000000000CCD2                 cmp     edx, 11h
.text:000000000000CCD5                 jz      short loc_CCE0
.text:000000000000CCD7
.text:000000000000CCD7 locret_CCD7:                            ; CODE XREF: cycle_warning_required+E↑j
.text:000000000000CCD7                 rep retn
.text:000000000000CCD7 ; ---------------------------------------------------------------------------
.text:000000000000CCD9                 align 20h
.text:000000000000CCE0
.text:000000000000CCE0 loc_CCE0:                               ; CODE XREF: cycle_warning_required+15↑j
.text:000000000000CCE0                 cmp     qword ptr [rsi+58h], 0
.text:000000000000CCE5                 setnz   al
.text:000000000000CCE8                 retn
.text:000000000000CCE8 ; } // starts at CCC0
.text:000000000000CCE8 cycle_warning_required endp
.text:000000000000CCE8
.text:000000000000CCE8 ; ---------------------------------------------------------------------------
.text:000000000000CCE9                 align 10h
.text:000000000000CCF0
.text:000000000000CCF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCF0
.text:000000000000CCF0
.text:000000000000CCF0 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:000000000000CCF0                 public xstrtoimax
.text:000000000000CCF0 xstrtoimax      proc near               ; CODE XREF: main+161↑p
.text:000000000000CCF0
.text:000000000000CCF0 var_50          = qword ptr -50h
.text:000000000000CCF0 endptr          = qword ptr -48h
.text:000000000000CCF0 var_40          = qword ptr -40h
.text:000000000000CCF0
.text:000000000000CCF0 ; __unwind {
.text:000000000000CCF0                 push    r15
.text:000000000000CCF2                 push    r14
.text:000000000000CCF4                 push    r13
.text:000000000000CCF6                 push    r12
.text:000000000000CCF8                 push    rbp
.text:000000000000CCF9                 push    rbx
.text:000000000000CCFA                 sub     rsp, 28h
.text:000000000000CCFE                 mov     rax, fs:28h
.text:000000000000CD07                 mov     [rsp+58h+var_40], rax
.text:000000000000CD0C                 xor     eax, eax
.text:000000000000CD0E                 cmp     edx, 24h ; '$'
.text:000000000000CD11                 ja      loc_D37F
.text:000000000000CD17                 lea     rax, [rsp+58h+endptr]
.text:000000000000CD1C                 test    rsi, rsi
.text:000000000000CD1F                 mov     rbx, rsi
.text:000000000000CD22                 mov     r12, rdi
.text:000000000000CD25                 mov     ebp, edx
.text:000000000000CD27                 mov     r14, rcx
.text:000000000000CD2A                 cmovz   rbx, rax
.text:000000000000CD2E                 mov     r15, r8
.text:000000000000CD31                 call    ___errno_location
.text:000000000000CD36                 xor     ecx, ecx        ; group
.text:000000000000CD38                 mov     edx, ebp        ; base
.text:000000000000CD3A                 mov     dword ptr [rax], 0
.text:000000000000CD40                 mov     rsi, rbx        ; endptr
.text:000000000000CD43                 mov     rdi, r12        ; nptr
.text:000000000000CD46                 mov     r13, rax
.text:000000000000CD49                 call    ___strtol_internal
.text:000000000000CD4E                 mov     rcx, [rbx]
.text:000000000000CD51                 mov     rbp, rax
.text:000000000000CD54                 cmp     rcx, r12
.text:000000000000CD57                 jz      short loc_CDB8
.text:000000000000CD59                 mov     eax, [r13+0]
.text:000000000000CD5D                 test    eax, eax
.text:000000000000CD5F                 jnz     short loc_CDA0
.text:000000000000CD61                 xor     r12d, r12d
.text:000000000000CD64
.text:000000000000CD64 loc_CD64:                               ; CODE XREF: xstrtoimax+C1↓j
.text:000000000000CD64                 test    r15, r15
.text:000000000000CD67                 jz      short loc_CD76
.text:000000000000CD69                 movzx   r13d, byte ptr [rcx]
.text:000000000000CD6D                 test    r13b, r13b
.text:000000000000CD70                 jnz     loc_CDF3
.text:000000000000CD76
.text:000000000000CD76 loc_CD76:                               ; CODE XREF: xstrtoimax+77↑j
.text:000000000000CD76                                         ; xstrtoimax+226↓j
.text:000000000000CD76                 mov     [r14], rbp
.text:000000000000CD79
.text:000000000000CD79 loc_CD79:                               ; CODE XREF: xstrtoimax+B9↓j
.text:000000000000CD79                                         ; xstrtoimax+E3↓j ...
.text:000000000000CD79                 mov     rdi, [rsp+58h+var_40]
.text:000000000000CD7E                 xor     rdi, fs:28h
.text:000000000000CD87                 mov     eax, r12d
.text:000000000000CD8A                 jnz     loc_D39E
.text:000000000000CD90                 add     rsp, 28h
.text:000000000000CD94                 pop     rbx
.text:000000000000CD95                 pop     rbp
.text:000000000000CD96                 pop     r12
.text:000000000000CD98                 pop     r13
.text:000000000000CD9A                 pop     r14
.text:000000000000CD9C                 pop     r15
.text:000000000000CD9E                 retn
.text:000000000000CD9E ; ---------------------------------------------------------------------------
.text:000000000000CD9F                 align 20h
.text:000000000000CDA0
.text:000000000000CDA0 loc_CDA0:                               ; CODE XREF: xstrtoimax+6F↑j
.text:000000000000CDA0                 cmp     eax, 22h ; '"'
.text:000000000000CDA3                 mov     r12d, 4
.text:000000000000CDA9                 jnz     short loc_CD79
.text:000000000000CDAB                 mov     r12d, 1
.text:000000000000CDB1                 jmp     short loc_CD64
.text:000000000000CDB1 ; ---------------------------------------------------------------------------
.text:000000000000CDB3                 align 8
.text:000000000000CDB8
.text:000000000000CDB8 loc_CDB8:                               ; CODE XREF: xstrtoimax+67↑j
.text:000000000000CDB8                 test    r15, r15
.text:000000000000CDBB                 jz      loc_D250
.text:000000000000CDC1                 movzx   r13d, byte ptr [rcx]
.text:000000000000CDC5                 mov     [rsp+58h+var_50], rcx
.text:000000000000CDCA                 mov     r12d, 4
.text:000000000000CDD0                 test    r13b, r13b
.text:000000000000CDD3                 jz      short loc_CD79
.text:000000000000CDD5                 movsx   esi, r13b       ; c
.text:000000000000CDD9                 mov     rdi, r15        ; s
.text:000000000000CDDC                 call    _strchr
.text:000000000000CDE1                 test    rax, rax
.text:000000000000CDE4                 mov     rcx, [rsp+58h+var_50]
.text:000000000000CDE9                 jz      short loc_CD79
.text:000000000000CDEB                 mov     ebp, 1
.text:000000000000CDF0                 xor     r12d, r12d
.text:000000000000CDF3
.text:000000000000CDF3 loc_CDF3:                               ; CODE XREF: xstrtoimax+80↑j
.text:000000000000CDF3                 movsx   esi, r13b       ; c
.text:000000000000CDF7                 mov     rdi, r15        ; s
.text:000000000000CDFA                 mov     [rsp+58h+var_50], rcx
.text:000000000000CDFF                 call    _strchr
.text:000000000000CE04                 test    rax, rax
.text:000000000000CE07                 mov     rcx, [rsp+58h+var_50]
.text:000000000000CE0C                 jz      short def_CE9E  ; jumptable 000000000000CE9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000CE0E                 lea     eax, [r13-45h]
.text:000000000000CE12                 cmp     al, 2Fh ; '/'
.text:000000000000CE14                 ja      short loc_CE78
.text:000000000000CE16                 mov     rdx, 814400308945h
.text:000000000000CE20                 bt      rdx, rax
.text:000000000000CE24                 jnb     short loc_CE78
.text:000000000000CE26                 mov     esi, 30h ; '0'  ; c
.text:000000000000CE2B                 mov     rdi, r15        ; s
.text:000000000000CE2E                 mov     [rsp+58h+var_50], rcx
.text:000000000000CE33                 call    _strchr
.text:000000000000CE38                 test    rax, rax
.text:000000000000CE3B                 mov     rcx, [rsp+58h+var_50]
.text:000000000000CE40                 jz      short loc_CE78
.text:000000000000CE42                 movzx   eax, byte ptr [rcx+1]
.text:000000000000CE46                 cmp     al, 44h ; 'D'
.text:000000000000CE48                 jz      short loc_CE56
.text:000000000000CE4A                 cmp     al, 69h ; 'i'
.text:000000000000CE4C                 jz      loc_D338
.text:000000000000CE52                 cmp     al, 42h ; 'B'
.text:000000000000CE54                 jnz     short loc_CE78
.text:000000000000CE56
.text:000000000000CE56 loc_CE56:                               ; CODE XREF: xstrtoimax+158↑j
.text:000000000000CE56                 mov     edi, 2
.text:000000000000CE5B                 mov     eax, 3E8h
.text:000000000000CE60                 jmp     short loc_CE82
.text:000000000000CE60 ; ---------------------------------------------------------------------------
.text:000000000000CE62                 align 8
.text:000000000000CE68
.text:000000000000CE68 def_CE9E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:000000000000CE68                                         ; xstrtoimax+19A↓j ...
.text:000000000000CE68                 mov     [r14], rbp      ; jumptable 000000000000CE9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000CE6B                 or      r12d, 2
.text:000000000000CE6F                 jmp     loc_CD79
.text:000000000000CE6F ; ---------------------------------------------------------------------------
.text:000000000000CE74                 align 8
.text:000000000000CE78
.text:000000000000CE78 loc_CE78:                               ; CODE XREF: xstrtoimax+124↑j
.text:000000000000CE78                                         ; xstrtoimax+134↑j ...
.text:000000000000CE78                 mov     edi, 1
.text:000000000000CE7D                 mov     eax, 400h
.text:000000000000CE82
.text:000000000000CE82 loc_CE82:                               ; CODE XREF: xstrtoimax+170↑j
.text:000000000000CE82                                         ; xstrtoimax+65B↓j
.text:000000000000CE82                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:000000000000CE86                 cmp     r13b, 35h
.text:000000000000CE8A                 ja      short def_CE9E  ; jumptable 000000000000CE9E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000CE8C                 lea     rsi, jpt_CE9E
.text:000000000000CE93                 movzx   r13d, r13b
.text:000000000000CE97                 movsxd  rdx, ds:(jpt_CE9E - 22388h)[rsi+r13*4]
.text:000000000000CE9B                 add     rdx, rsi
.text:000000000000CE9E                 jmp     rdx             ; switch jump
.text:000000000000CEA0 ; ---------------------------------------------------------------------------
.text:000000000000CEA0
.text:000000000000CEA0 loc_CEA0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CEA0                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000CEA0                 mov     r8, 8000000000000000h ; jumptable 000000000000CE9E cases 77,109
.text:000000000000CEAA                 movsxd  rsi, eax
.text:000000000000CEAD                 mov     rax, r8
.text:000000000000CEB0                 cqo
.text:000000000000CEB2                 idiv    rsi
.text:000000000000CEB5                 cmp     rbp, rax
.text:000000000000CEB8                 mov     r9, rax
.text:000000000000CEBB                 jl      loc_D365
.text:000000000000CEC1                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000CECB                 mov     rax, r10
.text:000000000000CECE                 cqo
.text:000000000000CED0                 idiv    rsi
.text:000000000000CED3                 cmp     rbp, rax
.text:000000000000CED6                 jg      loc_D372
.text:000000000000CEDC                 imul    rbp, rsi
.text:000000000000CEE0                 cmp     r9, rbp
.text:000000000000CEE3                 jg      loc_D365
.text:000000000000CEE9                 cmp     rax, rbp
.text:000000000000CEEC                 jl      loc_D372
.text:000000000000CEF2                 imul    rbp, rsi
.text:000000000000CEF6                 xor     eax, eax
.text:000000000000CEF8
.text:000000000000CEF8 loc_CEF8:                               ; CODE XREF: xstrtoimax+67D↓j
.text:000000000000CEF8                                         ; xstrtoimax+68A↓j
.text:000000000000CEF8                 or      r12d, eax
.text:000000000000CEFB                 nop     dword ptr [rax+rax+00h]
.text:000000000000CF00
.text:000000000000CF00 loc_CF00:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CF00                                         ; xstrtoimax+259↓j ...
.text:000000000000CF00                 movsxd  rax, edi        ; jumptable 000000000000CE9E case 99
.text:000000000000CF03                 add     rcx, rax
.text:000000000000CF06                 mov     eax, r12d
.text:000000000000CF09                 or      eax, 2
.text:000000000000CF0C                 mov     [rbx], rcx
.text:000000000000CF0F                 cmp     byte ptr [rcx], 0
.text:000000000000CF12                 cmovnz  r12d, eax
.text:000000000000CF16                 jmp     loc_CD76
.text:000000000000CF16 ; ---------------------------------------------------------------------------
.text:000000000000CF1B                 align 20h
.text:000000000000CF20
.text:000000000000CF20 loc_CF20:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CF20                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000CF20                 mov     rax, 0C000000000000000h ; jumptable 000000000000CE9E case 119
.text:000000000000CF2A                 cmp     rbp, rax
.text:000000000000CF2D                 jl      loc_D260
.text:000000000000CF33                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000CF3D                 cmp     rbp, rax
.text:000000000000CF40                 jg      loc_D320
.text:000000000000CF46                 add     rbp, rbp
.text:000000000000CF49                 jmp     short loc_CF00  ; jumptable 000000000000CE9E case 99
.text:000000000000CF49 ; ---------------------------------------------------------------------------
.text:000000000000CF4B                 align 10h
.text:000000000000CF50
.text:000000000000CF50 loc_CF50:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CF50                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000CF50                 mov     rax, 0FFC0000000000000h ; jumptable 000000000000CE9E case 98
.text:000000000000CF5A                 cmp     rbp, rax
.text:000000000000CF5D                 jl      loc_D260
.text:000000000000CF63                 mov     rax, 3FFFFFFFFFFFFFh
.text:000000000000CF6D                 cmp     rbp, rax
.text:000000000000CF70                 jg      loc_D320
.text:000000000000CF76                 shl     rbp, 9
.text:000000000000CF7A                 jmp     short loc_CF00  ; jumptable 000000000000CE9E case 99
.text:000000000000CF7A ; ---------------------------------------------------------------------------
.text:000000000000CF7C                 align 20h
.text:000000000000CF80
.text:000000000000CF80 loc_CF80:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CF80                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000CF80                 movsxd  rsi, eax        ; jumptable 000000000000CE9E case 90
.text:000000000000CF83                 mov     rax, 8000000000000000h
.text:000000000000CF8D                 mov     r8d, 7
.text:000000000000CF93                 cqo
.text:000000000000CF95                 xor     r11d, r11d
.text:000000000000CF98                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000CFA2                 idiv    rsi
.text:000000000000CFA5                 mov     r10, rax
.text:000000000000CFA8                 jmp     short loc_CFCF
.text:000000000000CFA8 ; ---------------------------------------------------------------------------
.text:000000000000CFAA                 align 10h
.text:000000000000CFB0
.text:000000000000CFB0 loc_CFB0:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:000000000000CFB0                 mov     rax, r9
.text:000000000000CFB3                 cqo
.text:000000000000CFB5                 idiv    rsi
.text:000000000000CFB8                 cmp     rax, rbp
.text:000000000000CFBB                 jl      loc_D2A8
.text:000000000000CFC1                 imul    rbp, rsi
.text:000000000000CFC5
.text:000000000000CFC5 loc_CFC5:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:000000000000CFC5                                         ; xstrtoimax+5C8↓j
.text:000000000000CFC5                 sub     r8d, 1
.text:000000000000CFC9                 jz      loc_D0F0
.text:000000000000CFCF
.text:000000000000CFCF loc_CFCF:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:000000000000CFCF                 cmp     r10, rbp
.text:000000000000CFD2                 jle     short loc_CFB0
.text:000000000000CFD4                 mov     r11d, 1
.text:000000000000CFDA                 mov     rbp, 8000000000000000h
.text:000000000000CFE4                 jmp     short loc_CFC5
.text:000000000000CFE4 ; ---------------------------------------------------------------------------
.text:000000000000CFE6                 align 10h
.text:000000000000CFF0
.text:000000000000CFF0 loc_CFF0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000CFF0                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000CFF0                 movsxd  rsi, eax        ; jumptable 000000000000CE9E case 89
.text:000000000000CFF3                 mov     rax, 8000000000000000h
.text:000000000000CFFD                 mov     r8d, 8
.text:000000000000D003                 cqo
.text:000000000000D005                 xor     r11d, r11d
.text:000000000000D008                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000D012                 idiv    rsi
.text:000000000000D015                 mov     r10, rax
.text:000000000000D018                 jmp     short loc_D03F
.text:000000000000D018 ; ---------------------------------------------------------------------------
.text:000000000000D01A                 align 20h
.text:000000000000D020
.text:000000000000D020 loc_D020:                               ; CODE XREF: xstrtoimax+352↓j
.text:000000000000D020                 mov     rax, r9
.text:000000000000D023                 cqo
.text:000000000000D025                 idiv    rsi
.text:000000000000D028                 cmp     rax, rbp
.text:000000000000D02B                 jl      loc_D278
.text:000000000000D031                 imul    rbp, rsi
.text:000000000000D035
.text:000000000000D035 loc_D035:                               ; CODE XREF: xstrtoimax+364↓j
.text:000000000000D035                                         ; xstrtoimax+598↓j
.text:000000000000D035                 sub     r8d, 1
.text:000000000000D039                 jz      loc_D0F0
.text:000000000000D03F
.text:000000000000D03F loc_D03F:                               ; CODE XREF: xstrtoimax+328↑j
.text:000000000000D03F                 cmp     r10, rbp
.text:000000000000D042                 jle     short loc_D020
.text:000000000000D044                 mov     r11d, 1
.text:000000000000D04A                 mov     rbp, 8000000000000000h
.text:000000000000D054                 jmp     short loc_D035
.text:000000000000D054 ; ---------------------------------------------------------------------------
.text:000000000000D056                 align 20h
.text:000000000000D060
.text:000000000000D060 loc_D060:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D060                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D060                 mov     r8, 8000000000000000h ; jumptable 000000000000CE9E cases 75,107
.text:000000000000D06A                 movsxd  rsi, eax
.text:000000000000D06D                 mov     rax, r8
.text:000000000000D070                 cqo
.text:000000000000D072                 idiv    rsi
.text:000000000000D075                 cmp     rbp, rax
.text:000000000000D078                 jl      loc_D260
.text:000000000000D07E                 sub     r8, 1
.text:000000000000D082                 mov     rax, r8
.text:000000000000D085                 cqo
.text:000000000000D087                 idiv    rsi
.text:000000000000D08A                 cmp     rbp, rax
.text:000000000000D08D                 jg      loc_D320
.text:000000000000D093                 imul    rbp, rsi
.text:000000000000D097                 jmp     loc_CF00        ; jumptable 000000000000CE9E case 99
.text:000000000000D097 ; ---------------------------------------------------------------------------
.text:000000000000D09C                 align 20h
.text:000000000000D0A0
.text:000000000000D0A0 loc_D0A0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D0A0                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D0A0                 movsxd  rsi, eax        ; jumptable 000000000000CE9E cases 71,103
.text:000000000000D0A3                 mov     rax, 8000000000000000h
.text:000000000000D0AD                 mov     r8d, 3
.text:000000000000D0B3                 cqo
.text:000000000000D0B5                 xor     r11d, r11d
.text:000000000000D0B8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000D0C2                 idiv    rsi
.text:000000000000D0C5                 mov     r10, rax
.text:000000000000D0C8
.text:000000000000D0C8 loc_D0C8:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:000000000000D0C8                 cmp     r10, rbp
.text:000000000000D0CB                 jg      loc_D2C0
.text:000000000000D0D1                 mov     rax, r9
.text:000000000000D0D4                 cqo
.text:000000000000D0D6                 idiv    rsi
.text:000000000000D0D9                 cmp     rax, rbp
.text:000000000000D0DC                 jl      loc_D350
.text:000000000000D0E2                 imul    rbp, rsi
.text:000000000000D0E6
.text:000000000000D0E6 loc_D0E6:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:000000000000D0E6                                         ; xstrtoimax+670↓j
.text:000000000000D0E6                 sub     r8d, 1
.text:000000000000D0EA                 jnz     short loc_D0C8
.text:000000000000D0EC                 nop     dword ptr [rax+00h]
.text:000000000000D0F0
.text:000000000000D0F0 loc_D0F0:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:000000000000D0F0                                         ; xstrtoimax+349↑j ...
.text:000000000000D0F0                 or      r12d, r11d
.text:000000000000D0F3                 jmp     loc_CF00        ; jumptable 000000000000CE9E case 99
.text:000000000000D0F3 ; ---------------------------------------------------------------------------
.text:000000000000D0F8                 align 20h
.text:000000000000D100
.text:000000000000D100 loc_D100:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D100                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D100                 movsxd  rsi, eax        ; jumptable 000000000000CE9E case 69
.text:000000000000D103                 mov     rax, 8000000000000000h
.text:000000000000D10D                 mov     r8d, 6
.text:000000000000D113                 cqo
.text:000000000000D115                 xor     r11d, r11d
.text:000000000000D118                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000D122                 idiv    rsi
.text:000000000000D125                 mov     r10, rax
.text:000000000000D128                 jmp     short loc_D14B
.text:000000000000D128 ; ---------------------------------------------------------------------------
.text:000000000000D12A                 align 10h
.text:000000000000D130
.text:000000000000D130 loc_D130:                               ; CODE XREF: xstrtoimax+45E↓j
.text:000000000000D130                 mov     rax, r9
.text:000000000000D133                 cqo
.text:000000000000D135                 idiv    rsi
.text:000000000000D138                 cmp     rax, rbp
.text:000000000000D13B                 jl      loc_D2D8
.text:000000000000D141                 imul    rbp, rsi
.text:000000000000D145
.text:000000000000D145 loc_D145:                               ; CODE XREF: xstrtoimax+470↓j
.text:000000000000D145                                         ; xstrtoimax+5F8↓j
.text:000000000000D145                 sub     r8d, 1
.text:000000000000D149                 jz      short loc_D0F0
.text:000000000000D14B
.text:000000000000D14B loc_D14B:                               ; CODE XREF: xstrtoimax+438↑j
.text:000000000000D14B                 cmp     r10, rbp
.text:000000000000D14E                 jle     short loc_D130
.text:000000000000D150                 mov     r11d, 1
.text:000000000000D156                 mov     rbp, 8000000000000000h
.text:000000000000D160                 jmp     short loc_D145
.text:000000000000D160 ; ---------------------------------------------------------------------------
.text:000000000000D162                 align 8
.text:000000000000D168
.text:000000000000D168 loc_D168:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D168                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D168                 movsxd  rsi, eax        ; jumptable 000000000000CE9E case 80
.text:000000000000D16B                 mov     rax, 8000000000000000h
.text:000000000000D175                 mov     r8d, 5
.text:000000000000D17B                 cqo
.text:000000000000D17D                 xor     r11d, r11d
.text:000000000000D180                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000D18A                 idiv    rsi
.text:000000000000D18D                 mov     r10, rax
.text:000000000000D190                 jmp     short loc_D1B7
.text:000000000000D190 ; ---------------------------------------------------------------------------
.text:000000000000D192                 align 8
.text:000000000000D198
.text:000000000000D198 loc_D198:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:000000000000D198                 mov     rax, r9
.text:000000000000D19B                 cqo
.text:000000000000D19D                 idiv    rsi
.text:000000000000D1A0                 cmp     rax, rbp
.text:000000000000D1A3                 jl      loc_D2F0
.text:000000000000D1A9                 imul    rbp, rsi
.text:000000000000D1AD
.text:000000000000D1AD loc_D1AD:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:000000000000D1AD                                         ; xstrtoimax+610↓j
.text:000000000000D1AD                 sub     r8d, 1
.text:000000000000D1B1                 jz      loc_D0F0
.text:000000000000D1B7
.text:000000000000D1B7 loc_D1B7:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:000000000000D1B7                 cmp     r10, rbp
.text:000000000000D1BA                 jle     short loc_D198
.text:000000000000D1BC                 mov     r11d, 1
.text:000000000000D1C2                 mov     rbp, 8000000000000000h
.text:000000000000D1CC                 jmp     short loc_D1AD
.text:000000000000D1CC ; ---------------------------------------------------------------------------
.text:000000000000D1CE                 align 10h
.text:000000000000D1D0
.text:000000000000D1D0 loc_D1D0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D1D0                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D1D0                 mov     rax, 0FFE0000000000000h ; jumptable 000000000000CE9E case 66
.text:000000000000D1DA                 cmp     rbp, rax
.text:000000000000D1DD                 jl      loc_D260
.text:000000000000D1E3                 mov     rax, 1FFFFFFFFFFFFFh
.text:000000000000D1ED                 cmp     rbp, rax
.text:000000000000D1F0                 jg      loc_D320
.text:000000000000D1F6                 shl     rbp, 0Ah
.text:000000000000D1FA                 jmp     loc_CF00        ; jumptable 000000000000CE9E case 99
.text:000000000000D1FA ; ---------------------------------------------------------------------------
.text:000000000000D1FF                 align 20h
.text:000000000000D200
.text:000000000000D200 loc_D200:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000D200                                         ; DATA XREF: .rodata:jpt_CE9E↓o
.text:000000000000D200                 movsxd  rsi, eax        ; jumptable 000000000000CE9E cases 84,116
.text:000000000000D203                 mov     rax, 8000000000000000h
.text:000000000000D20D                 mov     r8d, 4
.text:000000000000D213                 cqo
.text:000000000000D215                 xor     r11d, r11d
.text:000000000000D218                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000D222                 idiv    rsi
.text:000000000000D225                 mov     r10, rax
.text:000000000000D228
.text:000000000000D228 loc_D228:                               ; CODE XREF: xstrtoimax+556↓j
.text:000000000000D228                 cmp     r10, rbp
.text:000000000000D22B                 jg      short loc_D290
.text:000000000000D22D                 mov     rax, r9
.text:000000000000D230                 cqo
.text:000000000000D232                 idiv    rsi
.text:000000000000D235                 cmp     rax, rbp
.text:000000000000D238                 jl      loc_D308
.text:000000000000D23E                 imul    rbp, rsi
.text:000000000000D242
.text:000000000000D242 loc_D242:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:000000000000D242                                         ; xstrtoimax+628↓j
.text:000000000000D242                 sub     r8d, 1
.text:000000000000D246                 jnz     short loc_D228
.text:000000000000D248                 jmp     loc_D0F0
.text:000000000000D248 ; ---------------------------------------------------------------------------
.text:000000000000D24D                 align 10h
.text:000000000000D250
.text:000000000000D250 loc_D250:                               ; CODE XREF: xstrtoimax+CB↑j
.text:000000000000D250                 mov     r12d, 4
.text:000000000000D256                 jmp     loc_CD79
.text:000000000000D256 ; ---------------------------------------------------------------------------
.text:000000000000D25B                 align 20h
.text:000000000000D260
.text:000000000000D260 loc_D260:                               ; CODE XREF: xstrtoimax+23D↑j
.text:000000000000D260                                         ; xstrtoimax+26D↑j ...
.text:000000000000D260                 mov     r12d, 1
.text:000000000000D266                 mov     rbp, 8000000000000000h
.text:000000000000D270                 jmp     loc_CF00        ; jumptable 000000000000CE9E case 99
.text:000000000000D270 ; ---------------------------------------------------------------------------
.text:000000000000D275                 align 8
.text:000000000000D278
.text:000000000000D278 loc_D278:                               ; CODE XREF: xstrtoimax+33B↑j
.text:000000000000D278                 mov     r11d, 1
.text:000000000000D27E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D288                 jmp     loc_D035
.text:000000000000D288 ; ---------------------------------------------------------------------------
.text:000000000000D28D                 align 10h
.text:000000000000D290
.text:000000000000D290 loc_D290:                               ; CODE XREF: xstrtoimax+53B↑j
.text:000000000000D290                 mov     r11d, 1
.text:000000000000D296                 mov     rbp, 8000000000000000h
.text:000000000000D2A0                 jmp     short loc_D242
.text:000000000000D2A0 ; ---------------------------------------------------------------------------
.text:000000000000D2A2                 align 8
.text:000000000000D2A8
.text:000000000000D2A8 loc_D2A8:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:000000000000D2A8                 mov     r11d, 1
.text:000000000000D2AE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D2B8                 jmp     loc_CFC5
.text:000000000000D2B8 ; ---------------------------------------------------------------------------
.text:000000000000D2BD                 align 20h
.text:000000000000D2C0
.text:000000000000D2C0 loc_D2C0:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:000000000000D2C0                 mov     r11d, 1
.text:000000000000D2C6                 mov     rbp, 8000000000000000h
.text:000000000000D2D0                 jmp     loc_D0E6
.text:000000000000D2D0 ; ---------------------------------------------------------------------------
.text:000000000000D2D5                 align 8
.text:000000000000D2D8
.text:000000000000D2D8 loc_D2D8:                               ; CODE XREF: xstrtoimax+44B↑j
.text:000000000000D2D8                 mov     r11d, 1
.text:000000000000D2DE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D2E8                 jmp     loc_D145
.text:000000000000D2E8 ; ---------------------------------------------------------------------------
.text:000000000000D2ED                 align 10h
.text:000000000000D2F0
.text:000000000000D2F0 loc_D2F0:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:000000000000D2F0                 mov     r11d, 1
.text:000000000000D2F6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D300                 jmp     loc_D1AD
.text:000000000000D300 ; ---------------------------------------------------------------------------
.text:000000000000D305                 align 8
.text:000000000000D308
.text:000000000000D308 loc_D308:                               ; CODE XREF: xstrtoimax+548↑j
.text:000000000000D308                 mov     r11d, 1
.text:000000000000D30E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D318                 jmp     loc_D242
.text:000000000000D318 ; ---------------------------------------------------------------------------
.text:000000000000D31D                 align 20h
.text:000000000000D320
.text:000000000000D320 loc_D320:                               ; CODE XREF: xstrtoimax+250↑j
.text:000000000000D320                                         ; xstrtoimax+280↑j ...
.text:000000000000D320                 mov     r12d, 1
.text:000000000000D326                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D330                 jmp     loc_CF00        ; jumptable 000000000000CE9E case 99
.text:000000000000D330 ; ---------------------------------------------------------------------------
.text:000000000000D335                 align 8
.text:000000000000D338
.text:000000000000D338 loc_D338:                               ; CODE XREF: xstrtoimax+15C↑j
.text:000000000000D338                 xor     edi, edi
.text:000000000000D33A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000D33E                 mov     eax, 400h
.text:000000000000D343                 setz    dil
.text:000000000000D347                 lea     edi, [rdi+rdi+1]
.text:000000000000D34B                 jmp     loc_CE82
.text:000000000000D350 ; ---------------------------------------------------------------------------
.text:000000000000D350
.text:000000000000D350 loc_D350:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:000000000000D350                 mov     r11d, 1
.text:000000000000D356                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000D360                 jmp     loc_D0E6
.text:000000000000D365 ; ---------------------------------------------------------------------------
.text:000000000000D365
.text:000000000000D365 loc_D365:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:000000000000D365                                         ; xstrtoimax+1F3↑j
.text:000000000000D365                 mov     eax, 1
.text:000000000000D36A                 mov     rbp, r8
.text:000000000000D36D                 jmp     loc_CEF8
.text:000000000000D372 ; ---------------------------------------------------------------------------
.text:000000000000D372
.text:000000000000D372 loc_D372:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:000000000000D372                                         ; xstrtoimax+1FC↑j
.text:000000000000D372                 mov     eax, 1
.text:000000000000D377                 mov     rbp, r10
.text:000000000000D37A                 jmp     loc_CEF8
.text:000000000000D37F ; ---------------------------------------------------------------------------
.text:000000000000D37F
.text:000000000000D37F loc_D37F:                               ; CODE XREF: xstrtoimax+21↑j
.text:000000000000D37F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:000000000000D386                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000D38D                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000D394                 mov     edx, 54h ; 'T'  ; line
.text:000000000000D399                 call    ___assert_fail
.text:000000000000D39E ; ---------------------------------------------------------------------------
.text:000000000000D39E
.text:000000000000D39E loc_D39E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:000000000000D39E                 call    ___stack_chk_fail
.text:000000000000D39E ; } // starts at CCF0
.text:000000000000D39E xstrtoimax      endp
.text:000000000000D39E
.text:000000000000D39E ; ---------------------------------------------------------------------------
.text:000000000000D3A3                 align 10h
.text:000000000000D3B0
.text:000000000000D3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D3B0
.text:000000000000D3B0
.text:000000000000D3B0 ; __int64 __fastcall xstrtoul(char *nptr)
.text:000000000000D3B0                 public xstrtoul
.text:000000000000D3B0 xstrtoul        proc near               ; CODE XREF: main+21D↑p
.text:000000000000D3B0
.text:000000000000D3B0 base            = dword ptr -50h
.text:000000000000D3B0 endptr          = qword ptr -48h
.text:000000000000D3B0 var_40          = qword ptr -40h
.text:000000000000D3B0
.text:000000000000D3B0 ; __unwind {
.text:000000000000D3B0                 push    r15
.text:000000000000D3B2                 push    r14
.text:000000000000D3B4                 push    r13
.text:000000000000D3B6                 push    r12
.text:000000000000D3B8                 push    rbp
.text:000000000000D3B9                 push    rbx
.text:000000000000D3BA                 sub     rsp, 28h
.text:000000000000D3BE                 mov     rax, fs:28h
.text:000000000000D3C7                 mov     [rsp+58h+var_40], rax
.text:000000000000D3CC                 xor     eax, eax
.text:000000000000D3CE                 cmp     edx, 24h ; '$'
.text:000000000000D3D1                 ja      loc_D735
.text:000000000000D3D7                 lea     rax, [rsp+58h+endptr]
.text:000000000000D3DC                 mov     r15, rsi
.text:000000000000D3DF                 test    rsi, rsi
.text:000000000000D3E2                 mov     rbp, rdi
.text:000000000000D3E5                 mov     [rsp+58h+base], edx
.text:000000000000D3E9                 mov     r14, rcx
.text:000000000000D3EC                 mov     r13, r8
.text:000000000000D3EF                 cmovz   r15, rax
.text:000000000000D3F3                 call    ___errno_location
.text:000000000000D3F8                 mov     dword ptr [rax], 0
.text:000000000000D3FE                 mov     r12, rax
.text:000000000000D401                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000D405                 call    ___ctype_b_loc
.text:000000000000D40A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000D40E                 mov     rsi, [rax]
.text:000000000000D411                 mov     rax, rbp
.text:000000000000D414                 jmp     short loc_D427
.text:000000000000D414 ; ---------------------------------------------------------------------------
.text:000000000000D416                 align 20h
.text:000000000000D420
.text:000000000000D420 loc_D420:                               ; CODE XREF: xstrtoul+7F↓j
.text:000000000000D420                 add     rax, 1
.text:000000000000D424                 movzx   ebx, byte ptr [rax]
.text:000000000000D427
.text:000000000000D427 loc_D427:                               ; CODE XREF: xstrtoul+64↑j
.text:000000000000D427                 movzx   ecx, bl
.text:000000000000D42A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000D42F                 jnz     short loc_D420
.text:000000000000D431                 cmp     bl, 2Dh ; '-'
.text:000000000000D434                 jz      short loc_D488
.text:000000000000D436                 mov     rsi, r15        ; endptr
.text:000000000000D439                 mov     rdi, rbp        ; nptr
.text:000000000000D43C                 call    _strtoul
.text:000000000000D441                 mov     rcx, [r15]
.text:000000000000D444                 mov     rbx, rax
.text:000000000000D447                 cmp     rcx, rbp
.text:000000000000D44A                 jz      short loc_D478
.text:000000000000D44C                 mov     eax, [r12]
.text:000000000000D450                 test    eax, eax
.text:000000000000D452                 jz      short loc_D4B8
.text:000000000000D454                 cmp     eax, 22h ; '"'
.text:000000000000D457                 mov     ebp, 1
.text:000000000000D45C                 jnz     short loc_D488
.text:000000000000D45E
.text:000000000000D45E loc_D45E:                               ; CODE XREF: xstrtoul+10A↓j
.text:000000000000D45E                 test    r13, r13
.text:000000000000D461                 jz      short loc_D46C
.text:000000000000D463                 movzx   r12d, byte ptr [rcx]
.text:000000000000D467                 test    r12b, r12b
.text:000000000000D46A                 jnz     short loc_D4E7
.text:000000000000D46C
.text:000000000000D46C loc_D46C:                               ; CODE XREF: xstrtoul+B1↑j
.text:000000000000D46C                 mov     [r14], rbx
.text:000000000000D46F                 jmp     short loc_D48D
.text:000000000000D46F ; ---------------------------------------------------------------------------
.text:000000000000D471                 align 8
.text:000000000000D478
.text:000000000000D478 loc_D478:                               ; CODE XREF: xstrtoul+9A↑j
.text:000000000000D478                 test    r13, r13
.text:000000000000D47B                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D480                 jnz     short loc_D4C0
.text:000000000000D482                 nop     word ptr [rax+rax+00h]
.text:000000000000D488
.text:000000000000D488 loc_D488:                               ; CODE XREF: xstrtoul+84↑j
.text:000000000000D488                                         ; xstrtoul+AC↑j ...
.text:000000000000D488                 mov     ebp, 4
.text:000000000000D48D
.text:000000000000D48D loc_D48D:                               ; CODE XREF: xstrtoul+BF↑j
.text:000000000000D48D                                         ; xstrtoul+217↓j ...
.text:000000000000D48D                 mov     rdi, [rsp+58h+var_40]
.text:000000000000D492                 xor     rdi, fs:28h
.text:000000000000D49B                 mov     eax, ebp
.text:000000000000D49D                 jnz     loc_D730
.text:000000000000D4A3                 add     rsp, 28h
.text:000000000000D4A7                 pop     rbx
.text:000000000000D4A8                 pop     rbp
.text:000000000000D4A9                 pop     r12
.text:000000000000D4AB                 pop     r13
.text:000000000000D4AD                 pop     r14
.text:000000000000D4AF                 pop     r15
.text:000000000000D4B1                 retn
.text:000000000000D4B1 ; ---------------------------------------------------------------------------
.text:000000000000D4B2                 align 8
.text:000000000000D4B8
.text:000000000000D4B8 loc_D4B8:                               ; CODE XREF: xstrtoul+A2↑j
.text:000000000000D4B8                 xor     ebp, ebp
.text:000000000000D4BA                 jmp     short loc_D45E
.text:000000000000D4BA ; ---------------------------------------------------------------------------
.text:000000000000D4BC                 align 20h
.text:000000000000D4C0
.text:000000000000D4C0 loc_D4C0:                               ; CODE XREF: xstrtoul+D0↑j
.text:000000000000D4C0                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000D4C5                 test    r12b, r12b
.text:000000000000D4C8                 jz      short loc_D488
.text:000000000000D4CA                 movsx   esi, r12b       ; c
.text:000000000000D4CE                 mov     rdi, r13        ; s
.text:000000000000D4D1                 xor     ebp, ebp
.text:000000000000D4D3                 call    _strchr
.text:000000000000D4D8                 test    rax, rax
.text:000000000000D4DB                 mov     ebx, 1
.text:000000000000D4E0                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000D4E5                 jz      short loc_D488
.text:000000000000D4E7
.text:000000000000D4E7 loc_D4E7:                               ; CODE XREF: xstrtoul+BA↑j
.text:000000000000D4E7                 movsx   esi, r12b       ; c
.text:000000000000D4EB                 mov     rdi, r13        ; s
.text:000000000000D4EE                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D4F3                 call    _strchr
.text:000000000000D4F8                 test    rax, rax
.text:000000000000D4FB                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000D500                 jz      def_D586        ; jumptable 000000000000D586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000D506                 lea     eax, [r12-45h]
.text:000000000000D50B                 cmp     al, 2Fh ; '/'
.text:000000000000D50D                 ja      short loc_D560
.text:000000000000D50F                 mov     rdx, 814400308945h
.text:000000000000D519                 bt      rdx, rax
.text:000000000000D51D                 jnb     short loc_D560
.text:000000000000D51F                 mov     esi, 30h ; '0'  ; c
.text:000000000000D524                 mov     rdi, r13        ; s
.text:000000000000D527                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D52C                 call    _strchr
.text:000000000000D531                 test    rax, rax
.text:000000000000D534                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000D539                 jz      short loc_D560
.text:000000000000D53B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000D53F                 cmp     al, 44h ; 'D'
.text:000000000000D541                 jz      short loc_D54F
.text:000000000000D543                 cmp     al, 69h ; 'i'
.text:000000000000D545                 jz      loc_D718
.text:000000000000D54B                 cmp     al, 42h ; 'B'
.text:000000000000D54D                 jnz     short loc_D560
.text:000000000000D54F
.text:000000000000D54F loc_D54F:                               ; CODE XREF: xstrtoul+191↑j
.text:000000000000D54F                 mov     edi, 2
.text:000000000000D554                 mov     esi, 3E8h
.text:000000000000D559                 jmp     short loc_D56A
.text:000000000000D559 ; ---------------------------------------------------------------------------
.text:000000000000D55B                 align 20h
.text:000000000000D560
.text:000000000000D560 loc_D560:                               ; CODE XREF: xstrtoul+15D↑j
.text:000000000000D560                                         ; xstrtoul+16D↑j ...
.text:000000000000D560                 mov     edi, 1
.text:000000000000D565                 mov     esi, 400h
.text:000000000000D56A
.text:000000000000D56A loc_D56A:                               ; CODE XREF: xstrtoul+1A9↑j
.text:000000000000D56A                                         ; xstrtoul+37B↓j
.text:000000000000D56A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000D56E                 cmp     r12b, 35h
.text:000000000000D572                 ja      short def_D586  ; jumptable 000000000000D586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000D574                 lea     rdx, jpt_D586
.text:000000000000D57B                 movzx   r12d, r12b
.text:000000000000D57F                 movsxd  rax, ds:(jpt_D586 - 22470h)[rdx+r12*4]
.text:000000000000D583                 add     rax, rdx
.text:000000000000D586                 jmp     rax             ; switch jump
.text:000000000000D588 ; ---------------------------------------------------------------------------
.text:000000000000D588
.text:000000000000D588 loc_D588:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D588                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D588                 mov     rax, rbx        ; jumptable 000000000000D586 cases 77,109
.text:000000000000D58B                 mul     rsi
.text:000000000000D58E                 jo      loc_D781
.text:000000000000D594                 xor     r8d, r8d
.text:000000000000D597
.text:000000000000D597 loc_D597:                               ; CODE XREF: xstrtoul+34E↓j
.text:000000000000D597                                         ; xstrtoul+35E↓j ...
.text:000000000000D597                 mul     rsi
.text:000000000000D59A                 jo      loc_D772
.text:000000000000D5A0                 mov     rbx, rax
.text:000000000000D5A3
.text:000000000000D5A3 loc_D5A3:                               ; CODE XREF: xstrtoul+3CC↓j
.text:000000000000D5A3                 or      ebp, r8d
.text:000000000000D5A6                 db      2Eh
.text:000000000000D5A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D5B0
.text:000000000000D5B0 loc_D5B0:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D5B0                                         ; xstrtoul+23B↓j ...
.text:000000000000D5B0                 movsxd  rdi, edi        ; jumptable 000000000000D586 case 99
.text:000000000000D5B3                 mov     eax, ebp
.text:000000000000D5B5                 add     rcx, rdi
.text:000000000000D5B8                 or      eax, 2
.text:000000000000D5BB                 mov     [r15], rcx
.text:000000000000D5BE                 cmp     byte ptr [rcx], 0
.text:000000000000D5C1                 mov     [r14], rbx
.text:000000000000D5C4                 cmovnz  ebp, eax
.text:000000000000D5C7                 jmp     loc_D48D
.text:000000000000D5CC ; ---------------------------------------------------------------------------
.text:000000000000D5CC
.text:000000000000D5CC def_D586:                               ; CODE XREF: xstrtoul+150↑j
.text:000000000000D5CC                                         ; xstrtoul+1C2↑j ...
.text:000000000000D5CC                 mov     [r14], rbx      ; jumptable 000000000000D586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000D5CF                 or      ebp, 2
.text:000000000000D5D2                 jmp     loc_D48D
.text:000000000000D5D7 ; ---------------------------------------------------------------------------
.text:000000000000D5D7
.text:000000000000D5D7 loc_D5D7:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D5D7                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D5D7                 mov     edx, 2          ; jumptable 000000000000D586 case 119
.text:000000000000D5DC                 mov     rax, rdx
.text:000000000000D5DF                 mul     rbx
.text:000000000000D5E2                 jo      loc_D67E
.text:000000000000D5E8                 add     rbx, rbx
.text:000000000000D5EB                 jmp     short loc_D5B0  ; jumptable 000000000000D586 case 99
.text:000000000000D5ED ; ---------------------------------------------------------------------------
.text:000000000000D5ED
.text:000000000000D5ED loc_D5ED:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D5ED                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D5ED                 mov     edx, 200h       ; jumptable 000000000000D586 case 98
.text:000000000000D5F2                 mov     rax, rdx
.text:000000000000D5F5                 mul     rbx
.text:000000000000D5F8                 jo      loc_D67E
.text:000000000000D5FE                 shl     rbx, 9
.text:000000000000D602                 jmp     short loc_D5B0  ; jumptable 000000000000D586 case 99
.text:000000000000D604 ; ---------------------------------------------------------------------------
.text:000000000000D604
.text:000000000000D604 loc_D604:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D604                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D604                 mov     r8d, 7          ; jumptable 000000000000D586 case 90
.text:000000000000D60A                 xor     r9d, r9d
.text:000000000000D60D                 nop     dword ptr [rax]
.text:000000000000D610
.text:000000000000D610 loc_D610:                               ; CODE XREF: xstrtoul+273↓j
.text:000000000000D610                 mov     rax, rbx
.text:000000000000D613                 mul     rsi
.text:000000000000D616                 mov     rbx, rax
.text:000000000000D619                 jo      loc_D7AE
.text:000000000000D61F
.text:000000000000D61F loc_D61F:                               ; CODE XREF: xstrtoul+408↓j
.text:000000000000D61F                 sub     r8d, 1
.text:000000000000D623                 jnz     short loc_D610
.text:000000000000D625
.text:000000000000D625 loc_D625:                               ; CODE XREF: xstrtoul+29D↓j
.text:000000000000D625                                         ; xstrtoul+2BD↓j ...
.text:000000000000D625                 or      ebp, r9d
.text:000000000000D628                 jmp     short loc_D5B0  ; jumptable 000000000000D586 case 99
.text:000000000000D62A ; ---------------------------------------------------------------------------
.text:000000000000D62A
.text:000000000000D62A loc_D62A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D62A                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D62A                 mov     r8d, 8          ; jumptable 000000000000D586 case 89
.text:000000000000D630                 xor     r9d, r9d
.text:000000000000D633                 nop     dword ptr [rax+rax+00h]
.text:000000000000D638
.text:000000000000D638 loc_D638:                               ; CODE XREF: xstrtoul+29B↓j
.text:000000000000D638                 mov     rax, rbx
.text:000000000000D63B                 mul     rsi
.text:000000000000D63E                 mov     rbx, rax
.text:000000000000D641                 jo      loc_D790
.text:000000000000D647
.text:000000000000D647 loc_D647:                               ; CODE XREF: xstrtoul+3EA↓j
.text:000000000000D647                 sub     r8d, 1
.text:000000000000D64B                 jnz     short loc_D638
.text:000000000000D64D                 jmp     short loc_D625
.text:000000000000D64F ; ---------------------------------------------------------------------------
.text:000000000000D64F
.text:000000000000D64F loc_D64F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D64F                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D64F                 mov     r8d, 4          ; jumptable 000000000000D586 cases 84,116
.text:000000000000D655                 xor     r9d, r9d
.text:000000000000D658
.text:000000000000D658 loc_D658:                               ; CODE XREF: xstrtoul+2BB↓j
.text:000000000000D658                 mov     rax, rbx
.text:000000000000D65B                 mul     rsi
.text:000000000000D65E                 mov     rbx, rax
.text:000000000000D661                 jo      loc_D763
.text:000000000000D667
.text:000000000000D667 loc_D667:                               ; CODE XREF: xstrtoul+3BD↓j
.text:000000000000D667                 sub     r8d, 1
.text:000000000000D66B                 jnz     short loc_D658
.text:000000000000D66D                 jmp     short loc_D625
.text:000000000000D66F ; ---------------------------------------------------------------------------
.text:000000000000D66F
.text:000000000000D66F loc_D66F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D66F                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D66F                 mov     rax, rbx        ; jumptable 000000000000D586 cases 75,107
.text:000000000000D672                 mul     rsi
.text:000000000000D675                 mov     rbx, rax
.text:000000000000D678                 jno     loc_D5B0        ; jumptable 000000000000D586 case 99
.text:000000000000D67E
.text:000000000000D67E loc_D67E:                               ; CODE XREF: xstrtoul+232↑j
.text:000000000000D67E                                         ; xstrtoul+248↑j ...
.text:000000000000D67E                 mov     ebp, 1
.text:000000000000D683                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D687                 jmp     loc_D5B0        ; jumptable 000000000000D586 case 99
.text:000000000000D687 ; ---------------------------------------------------------------------------
.text:000000000000D68C                 align 10h
.text:000000000000D690
.text:000000000000D690 loc_D690:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D690                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D690                 mov     r8d, 5          ; jumptable 000000000000D586 case 80
.text:000000000000D696                 xor     r9d, r9d
.text:000000000000D699
.text:000000000000D699 loc_D699:                               ; CODE XREF: xstrtoul+2FC↓j
.text:000000000000D699                 mov     rax, rbx
.text:000000000000D69C                 mul     rsi
.text:000000000000D69F                 mov     rbx, rax
.text:000000000000D6A2                 jo      loc_D79F
.text:000000000000D6A8
.text:000000000000D6A8 loc_D6A8:                               ; CODE XREF: xstrtoul+3F9↓j
.text:000000000000D6A8                 sub     r8d, 1
.text:000000000000D6AC                 jnz     short loc_D699
.text:000000000000D6AE                 jmp     loc_D625
.text:000000000000D6B3 ; ---------------------------------------------------------------------------
.text:000000000000D6B3
.text:000000000000D6B3 loc_D6B3:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D6B3                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D6B3                 mov     r8d, 6          ; jumptable 000000000000D586 case 69
.text:000000000000D6B9                 xor     r9d, r9d
.text:000000000000D6BC
.text:000000000000D6BC loc_D6BC:                               ; CODE XREF: xstrtoul+31F↓j
.text:000000000000D6BC                 mov     rax, rbx
.text:000000000000D6BF                 mul     rsi
.text:000000000000D6C2                 mov     rbx, rax
.text:000000000000D6C5                 jo      loc_D754
.text:000000000000D6CB
.text:000000000000D6CB loc_D6CB:                               ; CODE XREF: xstrtoul+3AE↓j
.text:000000000000D6CB                 sub     r8d, 1
.text:000000000000D6CF                 jnz     short loc_D6BC
.text:000000000000D6D1                 jmp     loc_D625
.text:000000000000D6D6 ; ---------------------------------------------------------------------------
.text:000000000000D6D6
.text:000000000000D6D6 loc_D6D6:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D6D6                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D6D6                 mov     edx, 400h       ; jumptable 000000000000D586 case 66
.text:000000000000D6DB                 mov     rax, rdx
.text:000000000000D6DE                 mul     rbx
.text:000000000000D6E1                 jo      short loc_D67E
.text:000000000000D6E3                 shl     rbx, 0Ah
.text:000000000000D6E7                 jmp     loc_D5B0        ; jumptable 000000000000D586 case 99
.text:000000000000D6EC ; ---------------------------------------------------------------------------
.text:000000000000D6EC
.text:000000000000D6EC loc_D6EC:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000D6EC                                         ; DATA XREF: .rodata:jpt_D586↓o
.text:000000000000D6EC                 mov     rax, rbx        ; jumptable 000000000000D586 cases 71,103
.text:000000000000D6EF                 mul     rsi
.text:000000000000D6F2                 jo      loc_D7BD
.text:000000000000D6F8                 xor     r8d, r8d
.text:000000000000D6FB
.text:000000000000D6FB loc_D6FB:                               ; CODE XREF: xstrtoul+417↓j
.text:000000000000D6FB                 mul     rsi
.text:000000000000D6FE                 jno     loc_D597
.text:000000000000D704                 mov     r8d, 1
.text:000000000000D70A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D70E                 jmp     loc_D597
.text:000000000000D70E ; ---------------------------------------------------------------------------
.text:000000000000D713                 align 8
.text:000000000000D718
.text:000000000000D718 loc_D718:                               ; CODE XREF: xstrtoul+195↑j
.text:000000000000D718                 xor     edi, edi
.text:000000000000D71A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000D71E                 mov     esi, 400h
.text:000000000000D723                 setz    dil
.text:000000000000D727                 lea     edi, [rdi+rdi+1]
.text:000000000000D72B                 jmp     loc_D56A
.text:000000000000D730 ; ---------------------------------------------------------------------------
.text:000000000000D730
.text:000000000000D730 loc_D730:                               ; CODE XREF: xstrtoul+ED↑j
.text:000000000000D730                 call    ___stack_chk_fail
.text:000000000000D735 ; ---------------------------------------------------------------------------
.text:000000000000D735
.text:000000000000D735 loc_D735:                               ; CODE XREF: xstrtoul+21↑j
.text:000000000000D735                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoul"
.text:000000000000D73C                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000D743                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000D74A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000D74F                 call    ___assert_fail
.text:000000000000D754 ; ---------------------------------------------------------------------------
.text:000000000000D754
.text:000000000000D754 loc_D754:                               ; CODE XREF: xstrtoul+315↑j
.text:000000000000D754                 mov     r9d, 1
.text:000000000000D75A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D75E                 jmp     loc_D6CB
.text:000000000000D763 ; ---------------------------------------------------------------------------
.text:000000000000D763
.text:000000000000D763 loc_D763:                               ; CODE XREF: xstrtoul+2B1↑j
.text:000000000000D763                 mov     r9d, 1
.text:000000000000D769                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D76D                 jmp     loc_D667
.text:000000000000D772 ; ---------------------------------------------------------------------------
.text:000000000000D772
.text:000000000000D772 loc_D772:                               ; CODE XREF: xstrtoul+1EA↑j
.text:000000000000D772                 mov     r8d, 1
.text:000000000000D778                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D77C                 jmp     loc_D5A3
.text:000000000000D781 ; ---------------------------------------------------------------------------
.text:000000000000D781
.text:000000000000D781 loc_D781:                               ; CODE XREF: xstrtoul+1DE↑j
.text:000000000000D781                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D785                 mov     r8d, 1
.text:000000000000D78B                 jmp     loc_D597
.text:000000000000D790 ; ---------------------------------------------------------------------------
.text:000000000000D790
.text:000000000000D790 loc_D790:                               ; CODE XREF: xstrtoul+291↑j
.text:000000000000D790                 mov     r9d, 1
.text:000000000000D796                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D79A                 jmp     loc_D647
.text:000000000000D79F ; ---------------------------------------------------------------------------
.text:000000000000D79F
.text:000000000000D79F loc_D79F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:000000000000D79F                 mov     r9d, 1
.text:000000000000D7A5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7A9                 jmp     loc_D6A8
.text:000000000000D7AE ; ---------------------------------------------------------------------------
.text:000000000000D7AE
.text:000000000000D7AE loc_D7AE:                               ; CODE XREF: xstrtoul+269↑j
.text:000000000000D7AE                 mov     r9d, 1
.text:000000000000D7B4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7B8                 jmp     loc_D61F
.text:000000000000D7BD ; ---------------------------------------------------------------------------
.text:000000000000D7BD
.text:000000000000D7BD loc_D7BD:                               ; CODE XREF: xstrtoul+342↑j
.text:000000000000D7BD                 mov     r8d, 1
.text:000000000000D7C3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7C7                 jmp     loc_D6FB
.text:000000000000D7C7 ; } // starts at D3B0
.text:000000000000D7C7 xstrtoul        endp
.text:000000000000D7C7
.text:000000000000D7C7 ; ---------------------------------------------------------------------------
.text:000000000000D7CC                 align 10h
.text:000000000000D7D0
.text:000000000000D7D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D7D0
.text:000000000000D7D0 ; Attributes: noreturn info_from_lumina
.text:000000000000D7D0
.text:000000000000D7D0 ; void __fastcall xstrtol_fatal(strtol_error err, int opt_idx, char c, const option *long_options, const char *arg)
.text:000000000000D7D0                 public xstrtol_fatal
.text:000000000000D7D0 xstrtol_fatal   proc near               ; CODE XREF: main+34F↑p
.text:000000000000D7D0                                         ; main+141D↑p
.text:000000000000D7D0
.text:000000000000D7D0 var_32          = byte ptr -32h
.text:000000000000D7D0 var_31          = byte ptr -31h
.text:000000000000D7D0 var_30          = qword ptr -30h
.text:000000000000D7D0
.text:000000000000D7D0 ; __unwind {
.text:000000000000D7D0                 push    r13
.text:000000000000D7D2                 push    r12
.text:000000000000D7D4                 mov     r10d, esi
.text:000000000000D7D7                 push    rbp
.text:000000000000D7D8                 push    rbx
.text:000000000000D7D9                 mov     r12, r8
.text:000000000000D7DC                 sub     rsp, 18h
.text:000000000000D7E0                 mov     rax, fs:28h
.text:000000000000D7E9                 mov     [rsp+38h+var_30], rax
.text:000000000000D7EE                 xor     eax, eax
.text:000000000000D7F0                 cmp     edi, 3
.text:000000000000D7F3                 mov     ebp, cs:exit_failure
.text:000000000000D7F9                 ja      short loc_D854
.text:000000000000D7FB                 cmp     edi, 2
.text:000000000000D7FE                 jnb     short loc_D84B
.text:000000000000D800                 sub     edi, 1
.text:000000000000D803                 lea     rsi, aSSArgumentSToo ; "%s%s argument '%s' too large"
.text:000000000000D80A                 jnz     short loc_D846
.text:000000000000D80C
.text:000000000000D80C loc_D80C:                               ; CODE XREF: xstrtol_fatal+82↓j
.text:000000000000D80C                                         ; xstrtol_fatal+8E↓j
.text:000000000000D80C                 test    r10d, r10d
.text:000000000000D80F                 movsxd  rax, r10d
.text:000000000000D812                 js      short loc_D862
.text:000000000000D814                 shl     rax, 5
.text:000000000000D818                 lea     rbx, asc_22589  ; "--"
.text:000000000000D81F                 mov     r13, [rcx+rax]
.text:000000000000D823
.text:000000000000D823 loc_D823:                               ; CODE XREF: xstrtol_fatal+AA↓j
.text:000000000000D823                 mov     edx, 5          ; category
.text:000000000000D828                 xor     edi, edi        ; domainname
.text:000000000000D82A                 call    _dcgettext
.text:000000000000D82F                 mov     r9, r12
.text:000000000000D832                 mov     rdx, rax        ; format
.text:000000000000D835                 mov     r8, r13
.text:000000000000D838                 mov     rcx, rbx
.text:000000000000D83B                 xor     esi, esi        ; errnum
.text:000000000000D83D                 mov     edi, ebp        ; status
.text:000000000000D83F                 xor     eax, eax
.text:000000000000D841                 call    _error
.text:000000000000D846
.text:000000000000D846 loc_D846:                               ; CODE XREF: xstrtol_fatal+3A↑j
.text:000000000000D846                                         ; xstrtol_fatal+90↓j
.text:000000000000D846                 call    _abort
.text:000000000000D84B ; ---------------------------------------------------------------------------
.text:000000000000D84B
.text:000000000000D84B loc_D84B:                               ; CODE XREF: xstrtol_fatal+2E↑j
.text:000000000000D84B                 lea     rsi, aInvalidSuffixI ; "invalid suffix in %s%s argument '%s'"
.text:000000000000D852                 jmp     short loc_D80C
.text:000000000000D854 ; ---------------------------------------------------------------------------
.text:000000000000D854
.text:000000000000D854 loc_D854:                               ; CODE XREF: xstrtol_fatal+29↑j
.text:000000000000D854                 cmp     edi, 4
.text:000000000000D857                 lea     rsi, aInvalidSSArgum ; "invalid %s%s argument '%s'"
.text:000000000000D85E                 jz      short loc_D80C
.text:000000000000D860                 jmp     short loc_D846
.text:000000000000D862 ; ---------------------------------------------------------------------------
.text:000000000000D862
.text:000000000000D862 loc_D862:                               ; CODE XREF: xstrtol_fatal+42↑j
.text:000000000000D862                 lea     rbx, asc_22589  ; "--"
.text:000000000000D869                 mov     [rsp+38h+var_32], dl
.text:000000000000D86D                 mov     [rsp+38h+var_31], 0
.text:000000000000D872                 lea     r13, [rsp+38h+var_32]
.text:000000000000D877                 sub     rbx, rax
.text:000000000000D87A                 jmp     short loc_D823
.text:000000000000D87A ; } // starts at D7D0
.text:000000000000D87A xstrtol_fatal   endp
.text:000000000000D87A
.text:000000000000D87A ; ---------------------------------------------------------------------------
.text:000000000000D87C                 align 20h
.text:000000000000D880
.text:000000000000D880 ; =============== S U B R O U T I N E =======================================
.text:000000000000D880
.text:000000000000D880
.text:000000000000D880 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:000000000000D880                 public xstrtoumax
.text:000000000000D880 xstrtoumax      proc near               ; CODE XREF: human_options+AA↑p
.text:000000000000D880
.text:000000000000D880 base            = dword ptr -50h
.text:000000000000D880 endptr          = qword ptr -48h
.text:000000000000D880 var_40          = qword ptr -40h
.text:000000000000D880
.text:000000000000D880 ; __unwind {
.text:000000000000D880                 push    r15
.text:000000000000D882                 push    r14
.text:000000000000D884                 push    r13
.text:000000000000D886                 push    r12
.text:000000000000D888                 push    rbp
.text:000000000000D889                 push    rbx
.text:000000000000D88A                 sub     rsp, 28h
.text:000000000000D88E                 mov     rax, fs:28h
.text:000000000000D897                 mov     [rsp+58h+var_40], rax
.text:000000000000D89C                 xor     eax, eax
.text:000000000000D89E                 cmp     edx, 24h ; '$'
.text:000000000000D8A1                 ja      loc_DC05
.text:000000000000D8A7                 lea     rax, [rsp+58h+endptr]
.text:000000000000D8AC                 mov     r15, rsi
.text:000000000000D8AF                 test    rsi, rsi
.text:000000000000D8B2                 mov     rbp, rdi
.text:000000000000D8B5                 mov     [rsp+58h+base], edx
.text:000000000000D8B9                 mov     r14, rcx
.text:000000000000D8BC                 mov     r13, r8
.text:000000000000D8BF                 cmovz   r15, rax
.text:000000000000D8C3                 call    ___errno_location
.text:000000000000D8C8                 mov     dword ptr [rax], 0
.text:000000000000D8CE                 mov     r12, rax
.text:000000000000D8D1                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000D8D5                 call    ___ctype_b_loc
.text:000000000000D8DA                 mov     edx, [rsp+58h+base] ; base
.text:000000000000D8DE                 mov     rsi, [rax]
.text:000000000000D8E1                 mov     rax, rbp
.text:000000000000D8E4                 jmp     short loc_D8F7
.text:000000000000D8E4 ; ---------------------------------------------------------------------------
.text:000000000000D8E6                 align 10h
.text:000000000000D8F0
.text:000000000000D8F0 loc_D8F0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:000000000000D8F0                 add     rax, 1
.text:000000000000D8F4                 movzx   ebx, byte ptr [rax]
.text:000000000000D8F7
.text:000000000000D8F7 loc_D8F7:                               ; CODE XREF: xstrtoumax+64↑j
.text:000000000000D8F7                 movzx   ecx, bl
.text:000000000000D8FA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000D8FF                 jnz     short loc_D8F0
.text:000000000000D901                 cmp     bl, 2Dh ; '-'
.text:000000000000D904                 jz      short loc_D958
.text:000000000000D906                 xor     ecx, ecx        ; group
.text:000000000000D908                 mov     rsi, r15        ; endptr
.text:000000000000D90B                 mov     rdi, rbp        ; nptr
.text:000000000000D90E                 call    ___strtoul_internal
.text:000000000000D913                 mov     rcx, [r15]
.text:000000000000D916                 mov     rbx, rax
.text:000000000000D919                 cmp     rcx, rbp
.text:000000000000D91C                 jz      short loc_D948
.text:000000000000D91E                 mov     eax, [r12]
.text:000000000000D922                 test    eax, eax
.text:000000000000D924                 jz      short loc_D988
.text:000000000000D926                 cmp     eax, 22h ; '"'
.text:000000000000D929                 mov     ebp, 1
.text:000000000000D92E                 jnz     short loc_D958
.text:000000000000D930
.text:000000000000D930 loc_D930:                               ; CODE XREF: xstrtoumax+10A↓j
.text:000000000000D930                 test    r13, r13
.text:000000000000D933                 jz      short loc_D93E
.text:000000000000D935                 movzx   r12d, byte ptr [rcx]
.text:000000000000D939                 test    r12b, r12b
.text:000000000000D93C                 jnz     short loc_D9B7
.text:000000000000D93E
.text:000000000000D93E loc_D93E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000D93E                 mov     [r14], rbx
.text:000000000000D941                 jmp     short loc_D95D
.text:000000000000D941 ; ---------------------------------------------------------------------------
.text:000000000000D943                 align 8
.text:000000000000D948
.text:000000000000D948 loc_D948:                               ; CODE XREF: xstrtoumax+9C↑j
.text:000000000000D948                 test    r13, r13
.text:000000000000D94B                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D950                 jnz     short loc_D990
.text:000000000000D952                 nop     word ptr [rax+rax+00h]
.text:000000000000D958
.text:000000000000D958 loc_D958:                               ; CODE XREF: xstrtoumax+84↑j
.text:000000000000D958                                         ; xstrtoumax+AE↑j ...
.text:000000000000D958                 mov     ebp, 4
.text:000000000000D95D
.text:000000000000D95D loc_D95D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000D95D                                         ; xstrtoumax+217↓j ...
.text:000000000000D95D                 mov     rdi, [rsp+58h+var_40]
.text:000000000000D962                 xor     rdi, fs:28h
.text:000000000000D96B                 mov     eax, ebp
.text:000000000000D96D                 jnz     loc_DC00
.text:000000000000D973                 add     rsp, 28h
.text:000000000000D977                 pop     rbx
.text:000000000000D978                 pop     rbp
.text:000000000000D979                 pop     r12
.text:000000000000D97B                 pop     r13
.text:000000000000D97D                 pop     r14
.text:000000000000D97F                 pop     r15
.text:000000000000D981                 retn
.text:000000000000D981 ; ---------------------------------------------------------------------------
.text:000000000000D982                 align 8
.text:000000000000D988
.text:000000000000D988 loc_D988:                               ; CODE XREF: xstrtoumax+A4↑j
.text:000000000000D988                 xor     ebp, ebp
.text:000000000000D98A                 jmp     short loc_D930
.text:000000000000D98A ; ---------------------------------------------------------------------------
.text:000000000000D98C                 align 10h
.text:000000000000D990
.text:000000000000D990 loc_D990:                               ; CODE XREF: xstrtoumax+D0↑j
.text:000000000000D990                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000D995                 test    r12b, r12b
.text:000000000000D998                 jz      short loc_D958
.text:000000000000D99A                 movsx   esi, r12b       ; c
.text:000000000000D99E                 mov     rdi, r13        ; s
.text:000000000000D9A1                 xor     ebp, ebp
.text:000000000000D9A3                 call    _strchr
.text:000000000000D9A8                 test    rax, rax
.text:000000000000D9AB                 mov     ebx, 1
.text:000000000000D9B0                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000D9B5                 jz      short loc_D958
.text:000000000000D9B7
.text:000000000000D9B7 loc_D9B7:                               ; CODE XREF: xstrtoumax+BC↑j
.text:000000000000D9B7                 movsx   esi, r12b       ; c
.text:000000000000D9BB                 mov     rdi, r13        ; s
.text:000000000000D9BE                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D9C3                 call    _strchr
.text:000000000000D9C8                 test    rax, rax
.text:000000000000D9CB                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000D9D0                 jz      def_DA56        ; jumptable 000000000000DA56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000D9D6                 lea     eax, [r12-45h]
.text:000000000000D9DB                 cmp     al, 2Fh ; '/'
.text:000000000000D9DD                 ja      short loc_DA30
.text:000000000000D9DF                 mov     rdx, 814400308945h
.text:000000000000D9E9                 bt      rdx, rax
.text:000000000000D9ED                 jnb     short loc_DA30
.text:000000000000D9EF                 mov     esi, 30h ; '0'  ; c
.text:000000000000D9F4                 mov     rdi, r13        ; s
.text:000000000000D9F7                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000D9FC                 call    _strchr
.text:000000000000DA01                 test    rax, rax
.text:000000000000DA04                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000DA09                 jz      short loc_DA30
.text:000000000000DA0B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000DA0F                 cmp     al, 44h ; 'D'
.text:000000000000DA11                 jz      short loc_DA1F
.text:000000000000DA13                 cmp     al, 69h ; 'i'
.text:000000000000DA15                 jz      loc_DBE8
.text:000000000000DA1B                 cmp     al, 42h ; 'B'
.text:000000000000DA1D                 jnz     short loc_DA30
.text:000000000000DA1F
.text:000000000000DA1F loc_DA1F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000DA1F                 mov     edi, 2
.text:000000000000DA24                 mov     esi, 3E8h
.text:000000000000DA29                 jmp     short loc_DA3A
.text:000000000000DA29 ; ---------------------------------------------------------------------------
.text:000000000000DA2B                 align 10h
.text:000000000000DA30
.text:000000000000DA30 loc_DA30:                               ; CODE XREF: xstrtoumax+15D↑j
.text:000000000000DA30                                         ; xstrtoumax+16D↑j ...
.text:000000000000DA30                 mov     edi, 1
.text:000000000000DA35                 mov     esi, 400h
.text:000000000000DA3A
.text:000000000000DA3A loc_DA3A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000DA3A                                         ; xstrtoumax+37B↓j
.text:000000000000DA3A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000DA3E                 cmp     r12b, 35h
.text:000000000000DA42                 ja      short def_DA56  ; jumptable 000000000000DA56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000DA44                 lea     rdx, jpt_DA56
.text:000000000000DA4B                 movzx   r12d, r12b
.text:000000000000DA4F                 movsxd  rax, ds:(jpt_DA56 - 225B8h)[rdx+r12*4]
.text:000000000000DA53                 add     rax, rdx
.text:000000000000DA56                 jmp     rax             ; switch jump
.text:000000000000DA58 ; ---------------------------------------------------------------------------
.text:000000000000DA58
.text:000000000000DA58 loc_DA58:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DA58                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DA58                 mov     rax, rbx        ; jumptable 000000000000DA56 cases 77,109
.text:000000000000DA5B                 mul     rsi
.text:000000000000DA5E                 jo      loc_DC51
.text:000000000000DA64                 xor     r8d, r8d
.text:000000000000DA67
.text:000000000000DA67 loc_DA67:                               ; CODE XREF: xstrtoumax+34E↓j
.text:000000000000DA67                                         ; xstrtoumax+35E↓j ...
.text:000000000000DA67                 mul     rsi
.text:000000000000DA6A                 jo      loc_DC42
.text:000000000000DA70                 mov     rbx, rax
.text:000000000000DA73
.text:000000000000DA73 loc_DA73:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:000000000000DA73                 or      ebp, r8d
.text:000000000000DA76                 db      2Eh
.text:000000000000DA76                 nop     word ptr [rax+rax+00000000h]
.text:000000000000DA80
.text:000000000000DA80 loc_DA80:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DA80                                         ; xstrtoumax+23B↓j ...
.text:000000000000DA80                 movsxd  rdi, edi        ; jumptable 000000000000DA56 case 99
.text:000000000000DA83                 mov     eax, ebp
.text:000000000000DA85                 add     rcx, rdi
.text:000000000000DA88                 or      eax, 2
.text:000000000000DA8B                 mov     [r15], rcx
.text:000000000000DA8E                 cmp     byte ptr [rcx], 0
.text:000000000000DA91                 mov     [r14], rbx
.text:000000000000DA94                 cmovnz  ebp, eax
.text:000000000000DA97                 jmp     loc_D95D
.text:000000000000DA9C ; ---------------------------------------------------------------------------
.text:000000000000DA9C
.text:000000000000DA9C def_DA56:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000DA9C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000DA9C                 mov     [r14], rbx      ; jumptable 000000000000DA56 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000DA9F                 or      ebp, 2
.text:000000000000DAA2                 jmp     loc_D95D
.text:000000000000DAA7 ; ---------------------------------------------------------------------------
.text:000000000000DAA7
.text:000000000000DAA7 loc_DAA7:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DAA7                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DAA7                 mov     edx, 2          ; jumptable 000000000000DA56 case 119
.text:000000000000DAAC                 mov     rax, rdx
.text:000000000000DAAF                 mul     rbx
.text:000000000000DAB2                 jo      loc_DB4E
.text:000000000000DAB8                 add     rbx, rbx
.text:000000000000DABB                 jmp     short loc_DA80  ; jumptable 000000000000DA56 case 99
.text:000000000000DABD ; ---------------------------------------------------------------------------
.text:000000000000DABD
.text:000000000000DABD loc_DABD:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DABD                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DABD                 mov     edx, 200h       ; jumptable 000000000000DA56 case 98
.text:000000000000DAC2                 mov     rax, rdx
.text:000000000000DAC5                 mul     rbx
.text:000000000000DAC8                 jo      loc_DB4E
.text:000000000000DACE                 shl     rbx, 9
.text:000000000000DAD2                 jmp     short loc_DA80  ; jumptable 000000000000DA56 case 99
.text:000000000000DAD4 ; ---------------------------------------------------------------------------
.text:000000000000DAD4
.text:000000000000DAD4 loc_DAD4:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DAD4                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DAD4                 mov     r8d, 7          ; jumptable 000000000000DA56 case 90
.text:000000000000DADA                 xor     r9d, r9d
.text:000000000000DADD                 nop     dword ptr [rax]
.text:000000000000DAE0
.text:000000000000DAE0 loc_DAE0:                               ; CODE XREF: xstrtoumax+273↓j
.text:000000000000DAE0                 mov     rax, rbx
.text:000000000000DAE3                 mul     rsi
.text:000000000000DAE6                 mov     rbx, rax
.text:000000000000DAE9                 jo      loc_DC7E
.text:000000000000DAEF
.text:000000000000DAEF loc_DAEF:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000DAEF                 sub     r8d, 1
.text:000000000000DAF3                 jnz     short loc_DAE0
.text:000000000000DAF5
.text:000000000000DAF5 loc_DAF5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:000000000000DAF5                                         ; xstrtoumax+2BD↓j ...
.text:000000000000DAF5                 or      ebp, r9d
.text:000000000000DAF8                 jmp     short loc_DA80  ; jumptable 000000000000DA56 case 99
.text:000000000000DAFA ; ---------------------------------------------------------------------------
.text:000000000000DAFA
.text:000000000000DAFA loc_DAFA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DAFA                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DAFA                 mov     r8d, 8          ; jumptable 000000000000DA56 case 89
.text:000000000000DB00                 xor     r9d, r9d
.text:000000000000DB03                 nop     dword ptr [rax+rax+00h]
.text:000000000000DB08
.text:000000000000DB08 loc_DB08:                               ; CODE XREF: xstrtoumax+29B↓j
.text:000000000000DB08                 mov     rax, rbx
.text:000000000000DB0B                 mul     rsi
.text:000000000000DB0E                 mov     rbx, rax
.text:000000000000DB11                 jo      loc_DC60
.text:000000000000DB17
.text:000000000000DB17 loc_DB17:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:000000000000DB17                 sub     r8d, 1
.text:000000000000DB1B                 jnz     short loc_DB08
.text:000000000000DB1D                 jmp     short loc_DAF5
.text:000000000000DB1F ; ---------------------------------------------------------------------------
.text:000000000000DB1F
.text:000000000000DB1F loc_DB1F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DB1F                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DB1F                 mov     r8d, 4          ; jumptable 000000000000DA56 cases 84,116
.text:000000000000DB25                 xor     r9d, r9d
.text:000000000000DB28
.text:000000000000DB28 loc_DB28:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:000000000000DB28                 mov     rax, rbx
.text:000000000000DB2B                 mul     rsi
.text:000000000000DB2E                 mov     rbx, rax
.text:000000000000DB31                 jo      loc_DC33
.text:000000000000DB37
.text:000000000000DB37 loc_DB37:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:000000000000DB37                 sub     r8d, 1
.text:000000000000DB3B                 jnz     short loc_DB28
.text:000000000000DB3D                 jmp     short loc_DAF5
.text:000000000000DB3F ; ---------------------------------------------------------------------------
.text:000000000000DB3F
.text:000000000000DB3F loc_DB3F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DB3F                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DB3F                 mov     rax, rbx        ; jumptable 000000000000DA56 cases 75,107
.text:000000000000DB42                 mul     rsi
.text:000000000000DB45                 mov     rbx, rax
.text:000000000000DB48                 jno     loc_DA80        ; jumptable 000000000000DA56 case 99
.text:000000000000DB4E
.text:000000000000DB4E loc_DB4E:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000DB4E                                         ; xstrtoumax+248↑j ...
.text:000000000000DB4E                 mov     ebp, 1
.text:000000000000DB53                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DB57                 jmp     loc_DA80        ; jumptable 000000000000DA56 case 99
.text:000000000000DB57 ; ---------------------------------------------------------------------------
.text:000000000000DB5C                 align 20h
.text:000000000000DB60
.text:000000000000DB60 loc_DB60:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DB60                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DB60                 mov     r8d, 5          ; jumptable 000000000000DA56 case 80
.text:000000000000DB66                 xor     r9d, r9d
.text:000000000000DB69
.text:000000000000DB69 loc_DB69:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:000000000000DB69                 mov     rax, rbx
.text:000000000000DB6C                 mul     rsi
.text:000000000000DB6F                 mov     rbx, rax
.text:000000000000DB72                 jo      loc_DC6F
.text:000000000000DB78
.text:000000000000DB78 loc_DB78:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:000000000000DB78                 sub     r8d, 1
.text:000000000000DB7C                 jnz     short loc_DB69
.text:000000000000DB7E                 jmp     loc_DAF5
.text:000000000000DB83 ; ---------------------------------------------------------------------------
.text:000000000000DB83
.text:000000000000DB83 loc_DB83:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DB83                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DB83                 mov     r8d, 6          ; jumptable 000000000000DA56 case 69
.text:000000000000DB89                 xor     r9d, r9d
.text:000000000000DB8C
.text:000000000000DB8C loc_DB8C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000DB8C                 mov     rax, rbx
.text:000000000000DB8F                 mul     rsi
.text:000000000000DB92                 mov     rbx, rax
.text:000000000000DB95                 jo      loc_DC24
.text:000000000000DB9B
.text:000000000000DB9B loc_DB9B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000DB9B                 sub     r8d, 1
.text:000000000000DB9F                 jnz     short loc_DB8C
.text:000000000000DBA1                 jmp     loc_DAF5
.text:000000000000DBA6 ; ---------------------------------------------------------------------------
.text:000000000000DBA6
.text:000000000000DBA6 loc_DBA6:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DBA6                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DBA6                 mov     edx, 400h       ; jumptable 000000000000DA56 case 66
.text:000000000000DBAB                 mov     rax, rdx
.text:000000000000DBAE                 mul     rbx
.text:000000000000DBB1                 jo      short loc_DB4E
.text:000000000000DBB3                 shl     rbx, 0Ah
.text:000000000000DBB7                 jmp     loc_DA80        ; jumptable 000000000000DA56 case 99
.text:000000000000DBBC ; ---------------------------------------------------------------------------
.text:000000000000DBBC
.text:000000000000DBBC loc_DBBC:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000DBBC                                         ; DATA XREF: .rodata:jpt_DA56↓o
.text:000000000000DBBC                 mov     rax, rbx        ; jumptable 000000000000DA56 cases 71,103
.text:000000000000DBBF                 mul     rsi
.text:000000000000DBC2                 jo      loc_DC8D
.text:000000000000DBC8                 xor     r8d, r8d
.text:000000000000DBCB
.text:000000000000DBCB loc_DBCB:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000DBCB                 mul     rsi
.text:000000000000DBCE                 jno     loc_DA67
.text:000000000000DBD4                 mov     r8d, 1
.text:000000000000DBDA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DBDE                 jmp     loc_DA67
.text:000000000000DBDE ; ---------------------------------------------------------------------------
.text:000000000000DBE3                 align 8
.text:000000000000DBE8
.text:000000000000DBE8 loc_DBE8:                               ; CODE XREF: xstrtoumax+195↑j
.text:000000000000DBE8                 xor     edi, edi
.text:000000000000DBEA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000DBEE                 mov     esi, 400h
.text:000000000000DBF3                 setz    dil
.text:000000000000DBF7                 lea     edi, [rdi+rdi+1]
.text:000000000000DBFB                 jmp     loc_DA3A
.text:000000000000DC00 ; ---------------------------------------------------------------------------
.text:000000000000DC00
.text:000000000000DC00 loc_DC00:                               ; CODE XREF: xstrtoumax+ED↑j
.text:000000000000DC00                 call    ___stack_chk_fail
.text:000000000000DC05 ; ---------------------------------------------------------------------------
.text:000000000000DC05
.text:000000000000DC05 loc_DC05:                               ; CODE XREF: xstrtoumax+21↑j
.text:000000000000DC05                 lea     rcx, __PRETTY_FUNCTION___4162_1 ; "xstrtoumax"
.text:000000000000DC0C                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000DC13                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000DC1A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000DC1F                 call    ___assert_fail
.text:000000000000DC24 ; ---------------------------------------------------------------------------
.text:000000000000DC24
.text:000000000000DC24 loc_DC24:                               ; CODE XREF: xstrtoumax+315↑j
.text:000000000000DC24                 mov     r9d, 1
.text:000000000000DC2A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC2E                 jmp     loc_DB9B
.text:000000000000DC33 ; ---------------------------------------------------------------------------
.text:000000000000DC33
.text:000000000000DC33 loc_DC33:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:000000000000DC33                 mov     r9d, 1
.text:000000000000DC39                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC3D                 jmp     loc_DB37
.text:000000000000DC42 ; ---------------------------------------------------------------------------
.text:000000000000DC42
.text:000000000000DC42 loc_DC42:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:000000000000DC42                 mov     r8d, 1
.text:000000000000DC48                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC4C                 jmp     loc_DA73
.text:000000000000DC51 ; ---------------------------------------------------------------------------
.text:000000000000DC51
.text:000000000000DC51 loc_DC51:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:000000000000DC51                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC55                 mov     r8d, 1
.text:000000000000DC5B                 jmp     loc_DA67
.text:000000000000DC60 ; ---------------------------------------------------------------------------
.text:000000000000DC60
.text:000000000000DC60 loc_DC60:                               ; CODE XREF: xstrtoumax+291↑j
.text:000000000000DC60                 mov     r9d, 1
.text:000000000000DC66                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC6A                 jmp     loc_DB17
.text:000000000000DC6F ; ---------------------------------------------------------------------------
.text:000000000000DC6F
.text:000000000000DC6F loc_DC6F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000DC6F                 mov     r9d, 1
.text:000000000000DC75                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC79                 jmp     loc_DB78
.text:000000000000DC7E ; ---------------------------------------------------------------------------
.text:000000000000DC7E
.text:000000000000DC7E loc_DC7E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000DC7E                 mov     r9d, 1
.text:000000000000DC84                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC88                 jmp     loc_DAEF
.text:000000000000DC8D ; ---------------------------------------------------------------------------
.text:000000000000DC8D
.text:000000000000DC8D loc_DC8D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000DC8D                 mov     r8d, 1
.text:000000000000DC93                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC97                 jmp     loc_DBCB
.text:000000000000DC97 ; } // starts at D880
.text:000000000000DC97 xstrtoumax      endp
.text:000000000000DC97
.text:000000000000DC97 ; ---------------------------------------------------------------------------
.text:000000000000DC9C                 align 20h
.text:000000000000DCA0
.text:000000000000DCA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DCA0
.text:000000000000DCA0 ; Attributes: info_from_lumina
.text:000000000000DCA0
.text:000000000000DCA0 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000DCA0                 public rpl_fclose
.text:000000000000DCA0 rpl_fclose      proc near               ; CODE XREF: main:loc_391B↑p
.text:000000000000DCA0                                         ; add_exclude_file+57↑p ...
.text:000000000000DCA0 ; __unwind {
.text:000000000000DCA0                 push    r12
.text:000000000000DCA2                 push    rbp
.text:000000000000DCA3                 push    rbx
.text:000000000000DCA4                 mov     rbx, rdi
.text:000000000000DCA7                 call    _fileno
.text:000000000000DCAC                 test    eax, eax
.text:000000000000DCAE                 mov     rdi, rbx        ; fp
.text:000000000000DCB1                 js      short loc_DD07
.text:000000000000DCB3                 call    ___freading
.text:000000000000DCB8                 test    eax, eax
.text:000000000000DCBA                 jnz     short loc_DCE8
.text:000000000000DCBC
.text:000000000000DCBC loc_DCBC:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000DCBC                 mov     rdi, rbx        ; stream
.text:000000000000DCBF                 call    rpl_fflush
.text:000000000000DCC4                 test    eax, eax
.text:000000000000DCC6                 jz      short loc_DD04
.text:000000000000DCC8                 call    ___errno_location
.text:000000000000DCCD                 mov     r12d, [rax]
.text:000000000000DCD0                 mov     rdi, rbx        ; stream
.text:000000000000DCD3                 mov     rbp, rax
.text:000000000000DCD6                 call    _fclose
.text:000000000000DCDB                 test    r12d, r12d
.text:000000000000DCDE                 jnz     short loc_DD10
.text:000000000000DCE0
.text:000000000000DCE0 loc_DCE0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000DCE0                 pop     rbx
.text:000000000000DCE1                 pop     rbp
.text:000000000000DCE2                 pop     r12
.text:000000000000DCE4                 retn
.text:000000000000DCE4 ; ---------------------------------------------------------------------------
.text:000000000000DCE5                 align 8
.text:000000000000DCE8
.text:000000000000DCE8 loc_DCE8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000DCE8                 mov     rdi, rbx        ; stream
.text:000000000000DCEB                 call    _fileno
.text:000000000000DCF0                 xor     esi, esi        ; offset
.text:000000000000DCF2                 mov     edx, 1          ; whence
.text:000000000000DCF7                 mov     edi, eax        ; fd
.text:000000000000DCF9                 call    _lseek
.text:000000000000DCFE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD02                 jnz     short loc_DCBC
.text:000000000000DD04
.text:000000000000DD04 loc_DD04:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000DD04                 mov     rdi, rbx        ; stream
.text:000000000000DD07
.text:000000000000DD07 loc_DD07:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000DD07                 pop     rbx
.text:000000000000DD08                 pop     rbp
.text:000000000000DD09                 pop     r12
.text:000000000000DD0B                 jmp     _fclose
.text:000000000000DD10 ; ---------------------------------------------------------------------------
.text:000000000000DD10
.text:000000000000DD10 loc_DD10:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000DD10                 mov     [rbp+0], r12d
.text:000000000000DD14                 mov     eax, 0FFFFFFFFh
.text:000000000000DD19                 jmp     short loc_DCE0
.text:000000000000DD19 ; } // starts at DCA0
.text:000000000000DD19 rpl_fclose      endp
.text:000000000000DD19
.text:000000000000DD19 ; ---------------------------------------------------------------------------
.text:000000000000DD1B                 align 20h
.text:000000000000DD20
.text:000000000000DD20 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD20
.text:000000000000DD20 ; Attributes: info_from_lumina
.text:000000000000DD20
.text:000000000000DD20 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000DD20                 public rpl_fflush
.text:000000000000DD20 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000DD20 ; __unwind {
.text:000000000000DD20                 test    rdi, rdi
.text:000000000000DD23                 push    rbx
.text:000000000000DD24                 mov     rbx, rdi
.text:000000000000DD27                 jz      short loc_DD3A
.text:000000000000DD29                 call    ___freading
.text:000000000000DD2E                 test    eax, eax
.text:000000000000DD30                 jz      short loc_DD3A
.text:000000000000DD32                 test    dword ptr [rbx], 100h
.text:000000000000DD38                 jnz     short loc_DD48
.text:000000000000DD3A
.text:000000000000DD3A loc_DD3A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000DD3A                                         ; rpl_fflush+10↑j
.text:000000000000DD3A                 mov     rdi, rbx        ; stream
.text:000000000000DD3D                 pop     rbx
.text:000000000000DD3E                 jmp     _fflush
.text:000000000000DD3E ; ---------------------------------------------------------------------------
.text:000000000000DD43                 align 8
.text:000000000000DD48
.text:000000000000DD48 loc_DD48:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000DD48                 mov     rdi, rbx
.text:000000000000DD4B                 mov     edx, 1
.text:000000000000DD50                 xor     esi, esi
.text:000000000000DD52                 call    rpl_fseeko
.text:000000000000DD57                 mov     rdi, rbx        ; stream
.text:000000000000DD5A                 pop     rbx
.text:000000000000DD5B                 jmp     _fflush
.text:000000000000DD5B ; } // starts at DD20
.text:000000000000DD5B rpl_fflush      endp
.text:000000000000DD5B
.text:000000000000DD60
.text:000000000000DD60 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD60
.text:000000000000DD60 ; Attributes: info_from_lumina
.text:000000000000DD60
.text:000000000000DD60 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000DD60                 public rpl_fseeko
.text:000000000000DD60 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000DD60 ; __unwind {
.text:000000000000DD60                 mov     rax, [rdi+8]
.text:000000000000DD64                 cmp     [rdi+10h], rax
.text:000000000000DD68                 jz      short loc_DD70
.text:000000000000DD6A
.text:000000000000DD6A loc_DD6A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000DD6A                                         ; rpl_fseeko+1F↓j
.text:000000000000DD6A                 jmp     _fseeko
.text:000000000000DD6A ; ---------------------------------------------------------------------------
.text:000000000000DD6F                 align 10h
.text:000000000000DD70
.text:000000000000DD70 loc_DD70:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000DD70                 mov     rax, [rdi+20h]
.text:000000000000DD74                 cmp     [rdi+28h], rax
.text:000000000000DD78                 jnz     short loc_DD6A
.text:000000000000DD7A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000DD7F                 jnz     short loc_DD6A
.text:000000000000DD81                 push    r12
.text:000000000000DD83                 push    rbp
.text:000000000000DD84                 mov     r12d, edx
.text:000000000000DD87                 push    rbx
.text:000000000000DD88                 mov     rbp, rsi
.text:000000000000DD8B                 mov     rbx, rdi
.text:000000000000DD8E                 call    _fileno
.text:000000000000DD93                 mov     edx, r12d       ; whence
.text:000000000000DD96                 mov     rsi, rbp        ; offset
.text:000000000000DD99                 mov     edi, eax        ; fd
.text:000000000000DD9B                 call    _lseek
.text:000000000000DDA0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DDA4                 jz      short loc_DDB2
.text:000000000000DDA6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000DDA9                 mov     [rbx+90h], rax
.text:000000000000DDB0                 xor     eax, eax
.text:000000000000DDB2
.text:000000000000DDB2 loc_DDB2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000DDB2                 pop     rbx
.text:000000000000DDB3                 pop     rbp
.text:000000000000DDB4                 pop     r12
.text:000000000000DDB6                 retn
.text:000000000000DDB6 ; } // starts at DD60
.text:000000000000DDB6 rpl_fseeko      endp
.text:000000000000DDB6
.text:000000000000DDB6 ; ---------------------------------------------------------------------------
.text:000000000000DDB7                 align 20h
.text:000000000000DDC0
.text:000000000000DDC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDC0
.text:000000000000DDC0
.text:000000000000DDC0 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:000000000000DDC0 ; __unwind {
.text:000000000000DDC0                 xor     eax, eax
.text:000000000000DDC2                 mov     rdx, [rsi+8]
.text:000000000000DDC6                 cmp     [rdi+8], rdx
.text:000000000000DDCA                 jz      short loc_DDD0
.text:000000000000DDCC                 rep retn
.text:000000000000DDCC ; ---------------------------------------------------------------------------
.text:000000000000DDCE                 align 10h
.text:000000000000DDD0
.text:000000000000DDD0 loc_DDD0:                               ; CODE XREF: AD_compare+A↑j
.text:000000000000DDD0                 mov     rax, [rsi]
.text:000000000000DDD3                 cmp     [rdi], rax
.text:000000000000DDD6                 setz    al
.text:000000000000DDD9                 retn
.text:000000000000DDD9 ; } // starts at DDC0
.text:000000000000DDD9 AD_compare      endp
.text:000000000000DDD9
.text:000000000000DDD9 ; ---------------------------------------------------------------------------
.text:000000000000DDDA                 align 20h
.text:000000000000DDE0
.text:000000000000DDE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDE0
.text:000000000000DDE0
.text:000000000000DDE0 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:000000000000DDE0 ; __unwind {
.text:000000000000DDE0                 mov     rax, [rdi+8]
.text:000000000000DDE4                 xor     edx, edx
.text:000000000000DDE6                 div     rsi
.text:000000000000DDE9                 mov     rax, rdx
.text:000000000000DDEC                 retn
.text:000000000000DDEC ; } // starts at DDE0
.text:000000000000DDEC AD_hash         endp
.text:000000000000DDEC
.text:000000000000DDEC ; ---------------------------------------------------------------------------
.text:000000000000DDED                 align 10h
.text:000000000000DDF0
.text:000000000000DDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDF0
.text:000000000000DDF0
.text:000000000000DDF0 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:000000000000DDF0 ; __unwind {
.text:000000000000DDF0                 mov     rax, [rdi]
.text:000000000000DDF3                 xor     edx, edx
.text:000000000000DDF5                 div     rsi
.text:000000000000DDF8                 mov     rax, rdx
.text:000000000000DDFB                 retn
.text:000000000000DDFB ; } // starts at DDF0
.text:000000000000DDFB dev_type_hash   endp
.text:000000000000DDFB
.text:000000000000DDFB ; ---------------------------------------------------------------------------
.text:000000000000DDFC                 align 20h
.text:000000000000DE00
.text:000000000000DE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE00
.text:000000000000DE00
.text:000000000000DE00 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:000000000000DE00 ; __unwind {
.text:000000000000DE00                 mov     rax, [rsi]
.text:000000000000DE03                 cmp     [rdi], rax
.text:000000000000DE06                 setz    al
.text:000000000000DE09                 retn
.text:000000000000DE09 ; } // starts at DE00
.text:000000000000DE09 dev_type_compare endp
.text:000000000000DE09
.text:000000000000DE09 ; ---------------------------------------------------------------------------
.text:000000000000DE0A                 align 10h
.text:000000000000DE10
.text:000000000000DE10 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE10
.text:000000000000DE10
.text:000000000000DE10 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_F1B8↓o
.text:000000000000DE10 ; __unwind {
.text:000000000000DE10                 mov     rdx, [rdi]
.text:000000000000DE13                 mov     rax, [rsi]
.text:000000000000DE16                 mov     rax, [rax+80h]
.text:000000000000DE1D                 cmp     [rdx+80h], rax
.text:000000000000DE24                 jb      short loc_DE30
.text:000000000000DE26                 setnbe  al
.text:000000000000DE29                 movzx   eax, al
.text:000000000000DE2C                 retn
.text:000000000000DE2C ; ---------------------------------------------------------------------------
.text:000000000000DE2D                 align 10h
.text:000000000000DE30
.text:000000000000DE30 loc_DE30:                               ; CODE XREF: fts_compare_ino+14↑j
.text:000000000000DE30                 mov     eax, 0FFFFFFFFh
.text:000000000000DE35                 retn
.text:000000000000DE35 ; } // starts at DE10
.text:000000000000DE35 fts_compare_ino endp
.text:000000000000DE35
.text:000000000000DE35 ; ---------------------------------------------------------------------------
.text:000000000000DE36                 align 20h
.text:000000000000DE40
.text:000000000000DE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE40
.text:000000000000DE40
.text:000000000000DE40 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:000000000000DE40                                         ; fts_build+607↓p ...
.text:000000000000DE40 ; __unwind {
.text:000000000000DE40                 push    r12
.text:000000000000DE42                 push    rbp
.text:000000000000DE43                 mov     rbp, rsi
.text:000000000000DE46                 push    rbx
.text:000000000000DE47                 cmp     qword ptr [rbp+58h], 0
.text:000000000000DE4C                 lea     rbx, [rsi+78h]
.text:000000000000DE50                 mov     r12, rdi
.text:000000000000DE53                 mov     eax, [rdi+48h]
.text:000000000000DE56                 mov     rsi, [rsi+30h]  ; filename
.text:000000000000DE5A                 jnz     short loc_DEC0
.text:000000000000DE5C                 test    al, 1
.text:000000000000DE5E                 jz      short loc_DEC0
.text:000000000000DE60
.text:000000000000DE60 loc_DE60:                               ; CODE XREF: fts_stat+82↓j
.text:000000000000DE60                                         ; fts_stat+86↓j
.text:000000000000DE60                 mov     rdx, rbx        ; stat_buf
.text:000000000000DE63                 mov     edi, 1          ; ver
.text:000000000000DE68                 call    ___xstat
.text:000000000000DE6D                 test    eax, eax
.text:000000000000DE6F                 jz      short loc_DEEB
.text:000000000000DE71                 call    ___errno_location
.text:000000000000DE76                 mov     r12, rax
.text:000000000000DE79                 mov     eax, [rax]
.text:000000000000DE7B                 cmp     eax, 2
.text:000000000000DE7E                 jz      loc_DF90
.text:000000000000DE84
.text:000000000000DE84 loc_DE84:                               ; CODE XREF: fts_stat+147↓j
.text:000000000000DE84                                         ; fts_stat+169↓j
.text:000000000000DE84                 lea     rdi, [rbx+8]
.text:000000000000DE88                 mov     [rbp+40h], eax
.text:000000000000DE8B                 mov     qword ptr [rbp+78h], 0
.text:000000000000DE93                 mov     qword ptr [rbx+88h], 0
.text:000000000000DE9E                 xor     eax, eax
.text:000000000000DEA0                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000DEA4                 sub     rbx, rdi
.text:000000000000DEA7                 lea     ecx, [rbx+90h]
.text:000000000000DEAD                 shr     ecx, 3
.text:000000000000DEB0                 rep stosq
.text:000000000000DEB3                 mov     eax, 0Ah
.text:000000000000DEB8
.text:000000000000DEB8 loc_DEB8:                               ; CODE XREF: fts_stat+116↓j
.text:000000000000DEB8                                         ; fts_stat+136↓j ...
.text:000000000000DEB8                 pop     rbx
.text:000000000000DEB9                 pop     rbp
.text:000000000000DEBA                 pop     r12
.text:000000000000DEBC                 retn
.text:000000000000DEBC ; ---------------------------------------------------------------------------
.text:000000000000DEBD                 align 20h
.text:000000000000DEC0
.text:000000000000DEC0 loc_DEC0:                               ; CODE XREF: fts_stat+1A↑j
.text:000000000000DEC0                                         ; fts_stat+1E↑j
.text:000000000000DEC0                 test    al, 2
.text:000000000000DEC2                 jnz     short loc_DE60
.text:000000000000DEC4                 test    dl, dl
.text:000000000000DEC6                 jnz     short loc_DE60
.text:000000000000DEC8                 mov     rdx, rsi        ; filename
.text:000000000000DECB                 mov     esi, [r12+2Ch]  ; fildes
.text:000000000000DED0                 mov     r8d, 100h       ; flag
.text:000000000000DED6                 mov     rcx, rbx        ; stat_buf
.text:000000000000DED9                 mov     edi, 1          ; ver
.text:000000000000DEDE                 call    ___fxstatat
.text:000000000000DEE3                 test    eax, eax
.text:000000000000DEE5                 jnz     loc_DF80
.text:000000000000DEEB
.text:000000000000DEEB loc_DEEB:                               ; CODE XREF: fts_stat+2F↑j
.text:000000000000DEEB                 mov     eax, [rbp+90h]
.text:000000000000DEF1                 and     eax, 0F000h
.text:000000000000DEF6                 cmp     eax, 4000h
.text:000000000000DEFB                 jz      short loc_DF20
.text:000000000000DEFD                 cmp     eax, 0A000h
.text:000000000000DF02                 jz      loc_DFD8
.text:000000000000DF08                 cmp     eax, 8000h
.text:000000000000DF0D                 setz    al
.text:000000000000DF10                 movzx   eax, al
.text:000000000000DF13                 pop     rbx
.text:000000000000DF14                 lea     eax, [rax+rax*4+3]
.text:000000000000DF18                 pop     rbp
.text:000000000000DF19                 pop     r12
.text:000000000000DF1B                 retn
.text:000000000000DF1B ; ---------------------------------------------------------------------------
.text:000000000000DF1C                 align 20h
.text:000000000000DF20
.text:000000000000DF20 loc_DF20:                               ; CODE XREF: fts_stat+BB↑j
.text:000000000000DF20                 mov     rax, [rbp+88h]
.text:000000000000DF27                 cmp     rax, 1
.text:000000000000DF2B                 jbe     loc_DFB0
.text:000000000000DF31                 cmp     qword ptr [rbp+58h], 0
.text:000000000000DF36                 jle     short loc_DFB0
.text:000000000000DF38                 test    byte ptr [r12+48h], 20h
.text:000000000000DF3E                 lea     rdx, [rax-2]
.text:000000000000DF42                 cmovz   rax, rdx
.text:000000000000DF46
.text:000000000000DF46 loc_DF46:                               ; CODE XREF: fts_stat+177↓j
.text:000000000000DF46                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:000000000000DF4D                 mov     [rbp+68h], rax
.text:000000000000DF51                 mov     eax, 1
.text:000000000000DF56                 jnz     loc_DEB8
.text:000000000000DF5C                 cmp     byte ptr [rbp+109h], 0
.text:000000000000DF63                 jnz     loc_DFE8
.text:000000000000DF69
.text:000000000000DF69 loc_DF69:                               ; CODE XREF: fts_stat+1C0↓j
.text:000000000000DF69                 cmp     qword ptr [rbp+58h], 1
.text:000000000000DF6E                 sbb     eax, eax
.text:000000000000DF70                 and     eax, 0FFFFFFFCh
.text:000000000000DF73                 add     eax, 5
.text:000000000000DF76                 jmp     loc_DEB8
.text:000000000000DF76 ; ---------------------------------------------------------------------------
.text:000000000000DF7B                 align 20h
.text:000000000000DF80
.text:000000000000DF80 loc_DF80:                               ; CODE XREF: fts_stat+A5↑j
.text:000000000000DF80                 call    ___errno_location
.text:000000000000DF85                 mov     eax, [rax]
.text:000000000000DF87                 jmp     loc_DE84
.text:000000000000DF87 ; ---------------------------------------------------------------------------
.text:000000000000DF8C                 align 10h
.text:000000000000DF90
.text:000000000000DF90 loc_DF90:                               ; CODE XREF: fts_stat+3E↑j
.text:000000000000DF90                 mov     rsi, [rbp+30h]  ; filename
.text:000000000000DF94                 mov     rdx, rbx        ; stat_buf
.text:000000000000DF97                 mov     edi, 1          ; ver
.text:000000000000DF9C                 call    ___lxstat
.text:000000000000DFA1                 test    eax, eax
.text:000000000000DFA3                 jz      short loc_DFC0
.text:000000000000DFA5                 mov     eax, [r12]
.text:000000000000DFA9                 jmp     loc_DE84
.text:000000000000DFA9 ; ---------------------------------------------------------------------------
.text:000000000000DFAE                 align 10h
.text:000000000000DFB0
.text:000000000000DFB0 loc_DFB0:                               ; CODE XREF: fts_stat+EB↑j
.text:000000000000DFB0                                         ; fts_stat+F6↑j
.text:000000000000DFB0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DFB7                 jmp     short loc_DF46
.text:000000000000DFB7 ; ---------------------------------------------------------------------------
.text:000000000000DFB9                 align 20h
.text:000000000000DFC0
.text:000000000000DFC0 loc_DFC0:                               ; CODE XREF: fts_stat+163↑j
.text:000000000000DFC0                 mov     dword ptr [r12], 0
.text:000000000000DFC8                 mov     eax, 0Dh
.text:000000000000DFCD                 jmp     loc_DEB8
.text:000000000000DFCD ; ---------------------------------------------------------------------------
.text:000000000000DFD2                 align 8
.text:000000000000DFD8
.text:000000000000DFD8 loc_DFD8:                               ; CODE XREF: fts_stat+C2↑j
.text:000000000000DFD8                 mov     eax, 0Ch
.text:000000000000DFDD                 jmp     loc_DEB8
.text:000000000000DFDD ; ---------------------------------------------------------------------------
.text:000000000000DFE2                 align 8
.text:000000000000DFE8
.text:000000000000DFE8 loc_DFE8:                               ; CODE XREF: fts_stat+123↑j
.text:000000000000DFE8                 mov     edx, [rbp+108h]
.text:000000000000DFEE                 and     edx, 0FFFF00h
.text:000000000000DFF4                 cmp     edx, 2E00h
.text:000000000000DFFA                 jnz     loc_DEB8
.text:000000000000E000                 jmp     loc_DF69
.text:000000000000E000 ; } // starts at DE40
.text:000000000000E000 fts_stat        endp
.text:000000000000E000
.text:000000000000E000 ; ---------------------------------------------------------------------------
.text:000000000000E005                 align 10h
.text:000000000000E010
.text:000000000000E010 ; =============== S U B R O U T I N E =======================================
.text:000000000000E010
.text:000000000000E010
.text:000000000000E010 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:000000000000E010                                         ; fts_build+80E↓p ...
.text:000000000000E010 ; __unwind {
.text:000000000000E010                 push    r13
.text:000000000000E012                 push    r12
.text:000000000000E014                 mov     r12, rdx
.text:000000000000E017                 push    rbp
.text:000000000000E018                 push    rbx
.text:000000000000E019                 mov     rbp, rdi
.text:000000000000E01C                 mov     rbx, rsi
.text:000000000000E01F                 sub     rsp, 8
.text:000000000000E023                 cmp     [rbp+38h], rdx
.text:000000000000E027                 mov     r13, [rdi+40h]
.text:000000000000E02B                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000E02F                 jnb     short loc_E065
.text:000000000000E031                 lea     rsi, [rdx+28h]
.text:000000000000E035                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000E03F                 cmp     rsi, rax
.text:000000000000E042                 mov     [rbp+38h], rsi
.text:000000000000E046                 ja      loc_E0E4
.text:000000000000E04C                 shl     rsi, 3          ; size
.text:000000000000E050                 call    _realloc
.text:000000000000E055                 test    rax, rax
.text:000000000000E058                 mov     rdi, rax        ; base
.text:000000000000E05B                 jz      loc_E0E0
.text:000000000000E061                 mov     [rbp+10h], rax
.text:000000000000E065
.text:000000000000E065 loc_E065:                               ; CODE XREF: fts_sort+1F↑j
.text:000000000000E065                 test    rbx, rbx
.text:000000000000E068                 jz      short loc_E081
.text:000000000000E06A                 mov     rdx, rdi
.text:000000000000E06D                 nop     dword ptr [rax]
.text:000000000000E070
.text:000000000000E070 loc_E070:                               ; CODE XREF: fts_sort+6F↓j
.text:000000000000E070                 add     rdx, 8
.text:000000000000E074                 mov     [rdx-8], rbx
.text:000000000000E078                 mov     rbx, [rbx+10h]
.text:000000000000E07C                 test    rbx, rbx
.text:000000000000E07F                 jnz     short loc_E070
.text:000000000000E081
.text:000000000000E081 loc_E081:                               ; CODE XREF: fts_sort+58↑j
.text:000000000000E081                 mov     rcx, r13        ; compar
.text:000000000000E084                 mov     edx, 8          ; size
.text:000000000000E089                 mov     rsi, r12        ; nmemb
.text:000000000000E08C                 call    _qsort
.text:000000000000E091                 mov     r8, [rbp+10h]
.text:000000000000E095                 mov     rcx, r12
.text:000000000000E098                 sub     rcx, 1
.text:000000000000E09C                 mov     rax, [r8]
.text:000000000000E09F                 jz      short loc_E110
.text:000000000000E0A1                 mov     rdi, rax
.text:000000000000E0A4                 mov     rdx, r8
.text:000000000000E0A7                 jmp     short loc_E0B3
.text:000000000000E0A7 ; ---------------------------------------------------------------------------
.text:000000000000E0A9                 align 10h
.text:000000000000E0B0
.text:000000000000E0B0 loc_E0B0:                               ; CODE XREF: fts_sort+B3↓j
.text:000000000000E0B0                 mov     rdi, [rdx]
.text:000000000000E0B3
.text:000000000000E0B3 loc_E0B3:                               ; CODE XREF: fts_sort+97↑j
.text:000000000000E0B3                 mov     rsi, [rdx+8]
.text:000000000000E0B7                 add     rdx, 8
.text:000000000000E0BB                 sub     rcx, 1
.text:000000000000E0BF                 mov     [rdi+10h], rsi
.text:000000000000E0C3                 jnz     short loc_E0B0
.text:000000000000E0C5                 mov     rdx, [r8+r12*8-8]
.text:000000000000E0CA
.text:000000000000E0CA loc_E0CA:                               ; CODE XREF: fts_sort+103↓j
.text:000000000000E0CA                 mov     qword ptr [rdx+10h], 0
.text:000000000000E0D2                 add     rsp, 8
.text:000000000000E0D6                 pop     rbx
.text:000000000000E0D7                 pop     rbp
.text:000000000000E0D8                 pop     r12
.text:000000000000E0DA                 pop     r13
.text:000000000000E0DC                 retn
.text:000000000000E0DC ; ---------------------------------------------------------------------------
.text:000000000000E0DD                 align 20h
.text:000000000000E0E0
.text:000000000000E0E0 loc_E0E0:                               ; CODE XREF: fts_sort+4B↑j
.text:000000000000E0E0                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000E0E4
.text:000000000000E0E4 loc_E0E4:                               ; CODE XREF: fts_sort+36↑j
.text:000000000000E0E4                 call    free
.text:000000000000E0E9                 mov     qword ptr [rbp+10h], 0
.text:000000000000E0F1                 mov     qword ptr [rbp+38h], 0
.text:000000000000E0F9                 add     rsp, 8
.text:000000000000E0FD                 mov     rax, rbx
.text:000000000000E100                 pop     rbx
.text:000000000000E101                 pop     rbp
.text:000000000000E102                 pop     r12
.text:000000000000E104                 pop     r13
.text:000000000000E106                 retn
.text:000000000000E106 ; ---------------------------------------------------------------------------
.text:000000000000E107                 align 10h
.text:000000000000E110
.text:000000000000E110 loc_E110:                               ; CODE XREF: fts_sort+8F↑j
.text:000000000000E110                 mov     rdx, rax
.text:000000000000E113                 jmp     short loc_E0CA
.text:000000000000E113 ; } // starts at E010
.text:000000000000E113 fts_sort        endp
.text:000000000000E113
.text:000000000000E113 ; ---------------------------------------------------------------------------
.text:000000000000E115                 align 20h
.text:000000000000E120
.text:000000000000E120 ; =============== S U B R O U T I N E =======================================
.text:000000000000E120
.text:000000000000E120
.text:000000000000E120 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:000000000000E120                                         ; rpl_fts_open+E7↓p ...
.text:000000000000E120 ; __unwind {
.text:000000000000E120                 push    r13
.text:000000000000E122                 push    r12
.text:000000000000E124                 mov     r12, rdi
.text:000000000000E127                 push    rbp
.text:000000000000E128                 lea     rdi, [rdx+110h]
.text:000000000000E12F                 push    rbx
.text:000000000000E130                 mov     r13, rsi
.text:000000000000E133                 mov     rbp, rdx
.text:000000000000E136                 sub     rsp, 8
.text:000000000000E13A                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000E13E                 call    _malloc
.text:000000000000E143                 test    rax, rax
.text:000000000000E146                 mov     rbx, rax
.text:000000000000E149                 jz      short loc_E19C
.text:000000000000E14B                 lea     rdi, [rax+108h] ; dest
.text:000000000000E152                 mov     rdx, rbp        ; n
.text:000000000000E155                 mov     rsi, r13        ; src
.text:000000000000E158                 call    _memcpy
.text:000000000000E15D                 mov     rax, [r12+20h]
.text:000000000000E162                 mov     byte ptr [rbx+rbp+108h], 0
.text:000000000000E16A                 mov     [rbx+60h], rbp
.text:000000000000E16E                 mov     [rbx+50h], r12
.text:000000000000E172                 mov     dword ptr [rbx+40h], 0
.text:000000000000E179                 mov     qword ptr [rbx+18h], 0
.text:000000000000E181                 mov     [rbx+38h], rax
.text:000000000000E185                 mov     dword ptr [rbx+72h], 30000h
.text:000000000000E18C                 mov     qword ptr [rbx+20h], 0
.text:000000000000E194                 mov     qword ptr [rbx+28h], 0
.text:000000000000E19C
.text:000000000000E19C loc_E19C:                               ; CODE XREF: fts_alloc+29↑j
.text:000000000000E19C                 add     rsp, 8
.text:000000000000E1A0                 mov     rax, rbx
.text:000000000000E1A3                 pop     rbx
.text:000000000000E1A4                 pop     rbp
.text:000000000000E1A5                 pop     r12
.text:000000000000E1A7                 pop     r13
.text:000000000000E1A9                 retn
.text:000000000000E1A9 ; } // starts at E120
.text:000000000000E1A9 fts_alloc       endp
.text:000000000000E1A9
.text:000000000000E1A9 ; ---------------------------------------------------------------------------
.text:000000000000E1AA                 align 10h
.text:000000000000E1B0
.text:000000000000E1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E1B0
.text:000000000000E1B0
.text:000000000000E1B0 ; __int64 __fastcall fts_lfree(void *ptr)
.text:000000000000E1B0 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:000000000000E1B0                                         ; fts_build+765↓p ...
.text:000000000000E1B0 ; __unwind {
.text:000000000000E1B0                 test    rdi, rdi
.text:000000000000E1B3                 jz      short locret_E1F0
.text:000000000000E1B5                 push    rbp
.text:000000000000E1B6                 push    rbx
.text:000000000000E1B7                 mov     rbx, rdi
.text:000000000000E1BA                 sub     rsp, 8
.text:000000000000E1BE                 xchg    ax, ax
.text:000000000000E1C0
.text:000000000000E1C0 loc_E1C0:                               ; CODE XREF: fts_lfree+30↓j
.text:000000000000E1C0                 mov     rdi, [rbx+18h]  ; dirp
.text:000000000000E1C4                 mov     rbp, [rbx+10h]
.text:000000000000E1C8                 test    rdi, rdi
.text:000000000000E1CB                 jz      short loc_E1D2
.text:000000000000E1CD                 call    _closedir
.text:000000000000E1D2
.text:000000000000E1D2 loc_E1D2:                               ; CODE XREF: fts_lfree+1B↑j
.text:000000000000E1D2                 mov     rdi, rbx        ; ptr
.text:000000000000E1D5                 mov     rbx, rbp
.text:000000000000E1D8                 call    free
.text:000000000000E1DD                 test    rbp, rbp
.text:000000000000E1E0                 jnz     short loc_E1C0
.text:000000000000E1E2                 add     rsp, 8
.text:000000000000E1E6                 pop     rbx
.text:000000000000E1E7                 pop     rbp
.text:000000000000E1E8                 retn
.text:000000000000E1E8 ; ---------------------------------------------------------------------------
.text:000000000000E1E9                 align 10h
.text:000000000000E1F0
.text:000000000000E1F0 locret_E1F0:                            ; CODE XREF: fts_lfree+3↑j
.text:000000000000E1F0                 rep retn
.text:000000000000E1F0 ; } // starts at E1B0
.text:000000000000E1F0 fts_lfree       endp
.text:000000000000E1F0
.text:000000000000E1F0 ; ---------------------------------------------------------------------------
.text:000000000000E1F2                 align 20h
.text:000000000000E200
.text:000000000000E200 ; =============== S U B R O U T I N E =======================================
.text:000000000000E200
.text:000000000000E200
.text:000000000000E200 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:000000000000E200                                         ; rpl_fts_close+8C↓p
.text:000000000000E200 ; __unwind {
.text:000000000000E200                 push    rbx
.text:000000000000E201                 mov     rbx, rdi
.text:000000000000E204                 jmp     short loc_E21C
.text:000000000000E204 ; ---------------------------------------------------------------------------
.text:000000000000E206                 align 10h
.text:000000000000E210
.text:000000000000E210 loc_E210:                               ; CODE XREF: fd_ring_clear+26↓j
.text:000000000000E210                 mov     rdi, rbx
.text:000000000000E213                 call    i_ring_pop
.text:000000000000E218                 test    eax, eax
.text:000000000000E21A                 jns     short loc_E230
.text:000000000000E21C
.text:000000000000E21C loc_E21C:                               ; CODE XREF: fd_ring_clear+4↑j
.text:000000000000E21C                                         ; fd_ring_clear+37↓j
.text:000000000000E21C                 mov     rdi, rbx
.text:000000000000E21F                 call    i_ring_empty
.text:000000000000E224                 test    al, al
.text:000000000000E226                 jz      short loc_E210
.text:000000000000E228                 pop     rbx
.text:000000000000E229                 retn
.text:000000000000E229 ; ---------------------------------------------------------------------------
.text:000000000000E22A                 align 10h
.text:000000000000E230
.text:000000000000E230 loc_E230:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:000000000000E230                 mov     edi, eax        ; fd
.text:000000000000E232                 call    _close
.text:000000000000E237                 jmp     short loc_E21C
.text:000000000000E237 ; } // starts at E200
.text:000000000000E237 fd_ring_clear   endp
.text:000000000000E237
.text:000000000000E237 ; ---------------------------------------------------------------------------
.text:000000000000E239                 align 20h
.text:000000000000E240
.text:000000000000E240 ; =============== S U B R O U T I N E =======================================
.text:000000000000E240
.text:000000000000E240
.text:000000000000E240 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:000000000000E240                                         ; fts_build+2C4↓p
.text:000000000000E240
.text:000000000000E240 var_B8          = qword ptr -0B8h
.text:000000000000E240 buf             = statfs ptr -0A8h
.text:000000000000E240 var_30          = qword ptr -30h
.text:000000000000E240
.text:000000000000E240 ; __unwind {
.text:000000000000E240                 push    r13
.text:000000000000E242                 push    r12
.text:000000000000E244                 push    rbp
.text:000000000000E245                 push    rbx
.text:000000000000E246                 sub     rsp, 98h
.text:000000000000E24D                 mov     rbx, [rdi+50h]
.text:000000000000E251                 mov     rax, fs:28h
.text:000000000000E25A                 mov     [rsp+0B8h+var_30], rax
.text:000000000000E262                 xor     eax, eax
.text:000000000000E264                 test    byte ptr [rbx+49h], 2
.text:000000000000E268                 jz      short loc_E2D2
.text:000000000000E26A                 mov     r12, [rbx+50h]
.text:000000000000E26E                 mov     rbp, rdi
.text:000000000000E271                 mov     r13d, esi
.text:000000000000E274                 test    r12, r12
.text:000000000000E277                 jz      short loc_E2A0
.text:000000000000E279
.text:000000000000E279 loc_E279:                               ; CODE XREF: filesystem_type+8B↓j
.text:000000000000E279                 mov     rax, [rbp+78h]
.text:000000000000E27D                 mov     rsi, rsp
.text:000000000000E280                 mov     rdi, r12
.text:000000000000E283                 mov     [rsp+0B8h+var_B8], rax
.text:000000000000E287                 call    hash_lookup
.text:000000000000E28C                 test    rax, rax
.text:000000000000E28F                 jz      short loc_E2CD
.text:000000000000E291                 mov     rbx, [rax+8]
.text:000000000000E295                 jmp     short loc_E2D4
.text:000000000000E295 ; ---------------------------------------------------------------------------
.text:000000000000E297                 align 20h
.text:000000000000E2A0
.text:000000000000E2A0 loc_E2A0:                               ; CODE XREF: filesystem_type+37↑j
.text:000000000000E2A0                 mov     r8, cs:free_ptr
.text:000000000000E2A7                 lea     rcx, dev_type_compare
.text:000000000000E2AE                 lea     rdx, dev_type_hash
.text:000000000000E2B5                 xor     esi, esi
.text:000000000000E2B7                 mov     edi, 0Dh
.text:000000000000E2BC                 call    hash_initialize
.text:000000000000E2C1                 test    rax, rax
.text:000000000000E2C4                 mov     r12, rax
.text:000000000000E2C7                 mov     [rbx+50h], rax
.text:000000000000E2CB                 jnz     short loc_E279
.text:000000000000E2CD
.text:000000000000E2CD loc_E2CD:                               ; CODE XREF: filesystem_type+4F↑j
.text:000000000000E2CD                 test    r13d, r13d
.text:000000000000E2D0                 jns     short loc_E300
.text:000000000000E2D2
.text:000000000000E2D2 loc_E2D2:                               ; CODE XREF: filesystem_type+28↑j
.text:000000000000E2D2                                         ; filesystem_type+CF↓j
.text:000000000000E2D2                 xor     ebx, ebx
.text:000000000000E2D4
.text:000000000000E2D4 loc_E2D4:                               ; CODE XREF: filesystem_type+55↑j
.text:000000000000E2D4                                         ; filesystem_type+D9↓j ...
.text:000000000000E2D4                 mov     rdx, [rsp+0B8h+var_30]
.text:000000000000E2DC                 xor     rdx, fs:28h
.text:000000000000E2E5                 mov     rax, rbx
.text:000000000000E2E8                 jnz     short loc_E362
.text:000000000000E2EA                 add     rsp, 98h
.text:000000000000E2F1                 pop     rbx
.text:000000000000E2F2                 pop     rbp
.text:000000000000E2F3                 pop     r12
.text:000000000000E2F5                 pop     r13
.text:000000000000E2F7                 retn
.text:000000000000E2F7 ; ---------------------------------------------------------------------------
.text:000000000000E2F8                 align 20h
.text:000000000000E300
.text:000000000000E300 loc_E300:                               ; CODE XREF: filesystem_type+90↑j
.text:000000000000E300                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:000000000000E305                 mov     edi, r13d       ; fildes
.text:000000000000E308                 call    _fstatfs
.text:000000000000E30D                 test    eax, eax
.text:000000000000E30F                 jnz     short loc_E2D2
.text:000000000000E311                 test    r12, r12
.text:000000000000E314                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:000000000000E319                 jz      short loc_E2D4
.text:000000000000E31B                 mov     edi, 10h        ; size
.text:000000000000E320                 call    _malloc
.text:000000000000E325                 test    rax, rax
.text:000000000000E328                 mov     r13, rax
.text:000000000000E32B                 jz      short loc_E2D4
.text:000000000000E32D                 mov     rax, [rbp+78h]
.text:000000000000E331                 mov     [r13+8], rbx
.text:000000000000E335                 mov     rsi, r13
.text:000000000000E338                 mov     rdi, r12
.text:000000000000E33B                 mov     [r13+0], rax
.text:000000000000E33F                 call    hash_insert
.text:000000000000E344                 test    rax, rax
.text:000000000000E347                 jz      short loc_E358
.text:000000000000E349                 cmp     r13, rax
.text:000000000000E34C                 jnz     short loc_E367
.text:000000000000E34E
.text:000000000000E34E loc_E34E:                               ; CODE XREF: filesystem_type+120↓j
.text:000000000000E34E                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:000000000000E353                 jmp     loc_E2D4
.text:000000000000E358 ; ---------------------------------------------------------------------------
.text:000000000000E358
.text:000000000000E358 loc_E358:                               ; CODE XREF: filesystem_type+107↑j
.text:000000000000E358                 mov     rdi, r13        ; ptr
.text:000000000000E35B                 call    free
.text:000000000000E360                 jmp     short loc_E34E
.text:000000000000E362 ; ---------------------------------------------------------------------------
.text:000000000000E362
.text:000000000000E362 loc_E362:                               ; CODE XREF: filesystem_type+A8↑j
.text:000000000000E362                 call    ___stack_chk_fail
.text:000000000000E367 ; ---------------------------------------------------------------------------
.text:000000000000E367
.text:000000000000E367 loc_E367:                               ; CODE XREF: filesystem_type+10C↑j
.text:000000000000E367                 call    _abort
.text:000000000000E367 ; } // starts at E240
.text:000000000000E367 filesystem_type endp
.text:000000000000E367
.text:000000000000E367 ; ---------------------------------------------------------------------------
.text:000000000000E36C                 align 10h
.text:000000000000E370
.text:000000000000E370 ; =============== S U B R O U T I N E =======================================
.text:000000000000E370
.text:000000000000E370
.text:000000000000E370 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:000000000000E370                                         ; rpl_fts_read+705↓p
.text:000000000000E370 ; __unwind {
.text:000000000000E370                 sub     rsp, 8
.text:000000000000E374                 call    filesystem_type
.text:000000000000E379                 cmp     rax, 52654973h
.text:000000000000E37F                 jz      short loc_E3D0
.text:000000000000E381                 jle     short loc_E3B0
.text:000000000000E383                 cmp     rax, 58465342h
.text:000000000000E389                 jz      short loc_E3D0
.text:000000000000E38B                 mov     edx, 0FF534D42h
.text:000000000000E390                 cmp     rax, rdx
.text:000000000000E393                 jz      short loc_E3C5
.text:000000000000E395                 cmp     rax, 5346414Fh
.text:000000000000E39B                 jz      short loc_E3C5
.text:000000000000E39D
.text:000000000000E39D loc_E39D:                               ; CODE XREF: leaf_optimization+53↓j
.text:000000000000E39D                 mov     eax, 1
.text:000000000000E3A2                 add     rsp, 8
.text:000000000000E3A6                 retn
.text:000000000000E3A6 ; ---------------------------------------------------------------------------
.text:000000000000E3A7                 align 10h
.text:000000000000E3B0
.text:000000000000E3B0 loc_E3B0:                               ; CODE XREF: leaf_optimization+11↑j
.text:000000000000E3B0                 cmp     rax, 6969h
.text:000000000000E3B6                 jz      short loc_E3C5
.text:000000000000E3B8                 cmp     rax, 9FA0h
.text:000000000000E3BE                 jz      short loc_E3C5
.text:000000000000E3C0                 test    rax, rax
.text:000000000000E3C3                 jnz     short loc_E39D
.text:000000000000E3C5
.text:000000000000E3C5 loc_E3C5:                               ; CODE XREF: leaf_optimization+23↑j
.text:000000000000E3C5                                         ; leaf_optimization+2B↑j ...
.text:000000000000E3C5                 xor     eax, eax
.text:000000000000E3C7                 add     rsp, 8
.text:000000000000E3CB                 retn
.text:000000000000E3CB ; ---------------------------------------------------------------------------
.text:000000000000E3CC                 align 10h
.text:000000000000E3D0
.text:000000000000E3D0 loc_E3D0:                               ; CODE XREF: leaf_optimization+F↑j
.text:000000000000E3D0                                         ; leaf_optimization+19↑j
.text:000000000000E3D0                 mov     eax, 2
.text:000000000000E3D5                 add     rsp, 8
.text:000000000000E3D9                 retn
.text:000000000000E3D9 ; } // starts at E370
.text:000000000000E3D9 leaf_optimization endp
.text:000000000000E3D9
.text:000000000000E3D9 ; ---------------------------------------------------------------------------
.text:000000000000E3DA                 align 20h
.text:000000000000E3E0
.text:000000000000E3E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E3E0
.text:000000000000E3E0
.text:000000000000E3E0 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:000000000000E3E0                                         ; fts_safe_changedir+21E↓p ...
.text:000000000000E3E0 ; __unwind {
.text:000000000000E3E0                 push    rbp
.text:000000000000E3E1                 push    rbx
.text:000000000000E3E2                 mov     ebp, esi
.text:000000000000E3E4                 mov     rbx, rdi
.text:000000000000E3E7                 sub     rsp, 8
.text:000000000000E3EB                 mov     esi, [rdi+2Ch]
.text:000000000000E3EE                 cmp     esi, ebp
.text:000000000000E3F0                 jnz     short loc_E3F7
.text:000000000000E3F2                 cmp     esi, 0FFFFFF9Ch
.text:000000000000E3F5                 jnz     short loc_E441
.text:000000000000E3F7
.text:000000000000E3F7 loc_E3F7:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:000000000000E3F7                 test    dl, dl
.text:000000000000E3F9                 jnz     short loc_E410
.text:000000000000E3FB                 test    byte ptr [rbx+48h], 4
.text:000000000000E3FF                 jnz     short loc_E405
.text:000000000000E401                 test    esi, esi
.text:000000000000E403                 jns     short loc_E430
.text:000000000000E405
.text:000000000000E405 loc_E405:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:000000000000E405                                         ; cwd_advance_fd+3B↓j
.text:000000000000E405                 mov     [rbx+2Ch], ebp
.text:000000000000E408                 add     rsp, 8
.text:000000000000E40C                 pop     rbx
.text:000000000000E40D                 pop     rbp
.text:000000000000E40E                 retn
.text:000000000000E40E ; ---------------------------------------------------------------------------
.text:000000000000E40F                 align 10h
.text:000000000000E410
.text:000000000000E410 loc_E410:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:000000000000E410                 lea     rdi, [rbx+60h]
.text:000000000000E414                 call    i_ring_push
.text:000000000000E419                 test    eax, eax
.text:000000000000E41B                 js      short loc_E405
.text:000000000000E41D                 mov     edi, eax        ; fd
.text:000000000000E41F                 call    _close
.text:000000000000E424                 mov     [rbx+2Ch], ebp
.text:000000000000E427                 add     rsp, 8
.text:000000000000E42B                 pop     rbx
.text:000000000000E42C                 pop     rbp
.text:000000000000E42D                 retn
.text:000000000000E42D ; ---------------------------------------------------------------------------
.text:000000000000E42E                 align 10h
.text:000000000000E430
.text:000000000000E430 loc_E430:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:000000000000E430                 mov     edi, esi        ; fd
.text:000000000000E432                 call    _close
.text:000000000000E437                 mov     [rbx+2Ch], ebp
.text:000000000000E43A                 add     rsp, 8
.text:000000000000E43E                 pop     rbx
.text:000000000000E43F                 pop     rbp
.text:000000000000E440                 retn
.text:000000000000E441 ; ---------------------------------------------------------------------------
.text:000000000000E441
.text:000000000000E441 loc_E441:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:000000000000E441                 call    _abort
.text:000000000000E441 ; } // starts at E3E0
.text:000000000000E441 cwd_advance_fd  endp
.text:000000000000E441
.text:000000000000E441 ; ---------------------------------------------------------------------------
.text:000000000000E446                 align 10h
.text:000000000000E450
.text:000000000000E450 ; =============== S U B R O U T I N E =======================================
.text:000000000000E450
.text:000000000000E450
.text:000000000000E450 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:000000000000E450                                         ; rpl_fts_read+2A3↓p ...
.text:000000000000E450 ; __unwind {
.text:000000000000E450                 push    rbp
.text:000000000000E451                 push    rbx
.text:000000000000E452                 mov     rbx, rdi
.text:000000000000E455                 sub     rsp, 8
.text:000000000000E459                 mov     edx, [rdi+48h]
.text:000000000000E45C                 mov     ebp, edx
.text:000000000000E45E                 and     ebp, 4
.text:000000000000E461                 jnz     short loc_E4A8
.text:000000000000E463                 and     dh, 2
.text:000000000000E466                 jnz     short loc_E490
.text:000000000000E468                 mov     edi, [rdi+28h]  ; fd
.text:000000000000E46B                 xor     ebp, ebp
.text:000000000000E46D                 call    _fchdir
.text:000000000000E472                 test    eax, eax
.text:000000000000E474                 setnz   bpl
.text:000000000000E478
.text:000000000000E478 loc_E478:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:000000000000E478                                         ; restore_initial_cwd+5A↓j
.text:000000000000E478                 lea     rdi, [rbx+60h]
.text:000000000000E47C                 call    fd_ring_clear
.text:000000000000E481                 add     rsp, 8
.text:000000000000E485                 mov     eax, ebp
.text:000000000000E487                 pop     rbx
.text:000000000000E488                 pop     rbp
.text:000000000000E489                 retn
.text:000000000000E489 ; ---------------------------------------------------------------------------
.text:000000000000E48A                 align 10h
.text:000000000000E490
.text:000000000000E490 loc_E490:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:000000000000E490                 mov     edx, 1
.text:000000000000E495                 mov     esi, 0FFFFFF9Ch
.text:000000000000E49A                 call    cwd_advance_fd
.text:000000000000E49F                 jmp     short loc_E478
.text:000000000000E49F ; ---------------------------------------------------------------------------
.text:000000000000E4A1                 align 8
.text:000000000000E4A8
.text:000000000000E4A8 loc_E4A8:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:000000000000E4A8                 xor     ebp, ebp
.text:000000000000E4AA                 jmp     short loc_E478
.text:000000000000E4AA ; } // starts at E450
.text:000000000000E4AA restore_initial_cwd endp
.text:000000000000E4AA
.text:000000000000E4AA ; ---------------------------------------------------------------------------
.text:000000000000E4AC                 align 10h
.text:000000000000E4B0
.text:000000000000E4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E4B0
.text:000000000000E4B0
.text:000000000000E4B0 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:000000000000E4B0                                         ; rpl_fts_open+BD↓p
.text:000000000000E4B0 ; __unwind {
.text:000000000000E4B0                 push    rbx
.text:000000000000E4B1                 mov     rcx, [rsi]
.text:000000000000E4B4                 mov     rbx, rdi
.text:000000000000E4B7                 mov     rdi, [rdi]      ; ptr
.text:000000000000E4BA                 lea     rax, [rcx+rdx+100h]
.text:000000000000E4C2                 cmp     rcx, rax
.text:000000000000E4C5                 ja      short loc_E4E8
.text:000000000000E4C7                 mov     [rsi], rax
.text:000000000000E4CA                 mov     rsi, rax        ; size
.text:000000000000E4CD                 call    _realloc
.text:000000000000E4D2                 test    rax, rax
.text:000000000000E4D5                 jz      short loc_E508
.text:000000000000E4D7                 mov     [rbx], rax
.text:000000000000E4DA                 mov     eax, 1
.text:000000000000E4DF                 pop     rbx
.text:000000000000E4E0                 retn
.text:000000000000E4E0 ; ---------------------------------------------------------------------------
.text:000000000000E4E1                 align 8
.text:000000000000E4E8
.text:000000000000E4E8 loc_E4E8:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:000000000000E4E8                 call    free
.text:000000000000E4ED                 mov     qword ptr [rbx], 0
.text:000000000000E4F4                 call    ___errno_location
.text:000000000000E4F9                 mov     dword ptr [rax], 24h ; '$'
.text:000000000000E4FF                 xor     eax, eax
.text:000000000000E501                 pop     rbx
.text:000000000000E502                 retn
.text:000000000000E502 ; ---------------------------------------------------------------------------
.text:000000000000E503                 align 8
.text:000000000000E508
.text:000000000000E508 loc_E508:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:000000000000E508                 mov     rdi, [rbx]      ; ptr
.text:000000000000E50B                 call    free
.text:000000000000E510                 mov     qword ptr [rbx], 0
.text:000000000000E517                 xor     eax, eax
.text:000000000000E519                 pop     rbx
.text:000000000000E51A                 retn
.text:000000000000E51A ; } // starts at E4B0
.text:000000000000E51A fts_palloc_isra_2 endp
.text:000000000000E51A
.text:000000000000E51A ; ---------------------------------------------------------------------------
.text:000000000000E51B                 align 20h
.text:000000000000E520
.text:000000000000E520 ; =============== S U B R O U T I N E =======================================
.text:000000000000E520
.text:000000000000E520
.text:000000000000E520 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:000000000000E520                                         ; rpl_fts_read+345↓p
.text:000000000000E520 ; __unwind {
.text:000000000000E520                 and     edi, 102h
.text:000000000000E526                 push    rbx
.text:000000000000E527                 mov     rbx, rsi
.text:000000000000E52A                 jz      short loc_E560
.text:000000000000E52C                 mov     r8, cs:free_ptr
.text:000000000000E533                 lea     rcx, AD_compare
.text:000000000000E53A                 lea     rdx, AD_hash
.text:000000000000E541                 xor     esi, esi
.text:000000000000E543                 mov     edi, 1Fh
.text:000000000000E548                 call    hash_initialize
.text:000000000000E54D                 test    rax, rax
.text:000000000000E550                 mov     [rbx], rax
.text:000000000000E553                 setnz   al
.text:000000000000E556
.text:000000000000E556 loc_E556:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:000000000000E556                 pop     rbx
.text:000000000000E557                 retn
.text:000000000000E557 ; ---------------------------------------------------------------------------
.text:000000000000E558                 align 20h
.text:000000000000E560
.text:000000000000E560 loc_E560:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:000000000000E560                 mov     edi, 20h ; ' '  ; size
.text:000000000000E565                 call    _malloc
.text:000000000000E56A                 mov     rdi, rax
.text:000000000000E56D                 mov     [rbx], rax
.text:000000000000E570                 xor     eax, eax
.text:000000000000E572                 test    rdi, rdi
.text:000000000000E575                 jz      short loc_E556
.text:000000000000E577                 call    cycle_check_init
.text:000000000000E57C                 mov     eax, 1
.text:000000000000E581                 pop     rbx
.text:000000000000E582                 retn
.text:000000000000E582 ; } // starts at E520
.text:000000000000E582 setup_dir_isra_4 endp
.text:000000000000E582
.text:000000000000E582 ; ---------------------------------------------------------------------------
.text:000000000000E583                 align 10h
.text:000000000000E590
.text:000000000000E590 ; =============== S U B R O U T I N E =======================================
.text:000000000000E590
.text:000000000000E590
.text:000000000000E590 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:000000000000E590                                         ; rpl_fts_open+287↓p ...
.text:000000000000E590 ; __unwind {
.text:000000000000E590                 mov     rax, rdx
.text:000000000000E593                 mov     edx, esi
.text:000000000000E595                 shl     edx, 0Dh
.text:000000000000E598                 and     edx, 20000h
.text:000000000000E59E                 or      edx, 90900h
.text:000000000000E5A4                 and     esi, 200h
.text:000000000000E5AA                 jnz     short loc_E5C0
.text:000000000000E5AC                 mov     rdi, rax
.text:000000000000E5AF                 mov     esi, edx
.text:000000000000E5B1                 xor     eax, eax
.text:000000000000E5B3                 jmp     open_safer
.text:000000000000E5B3 ; ---------------------------------------------------------------------------
.text:000000000000E5B8                 align 20h
.text:000000000000E5C0
.text:000000000000E5C0 loc_E5C0:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:000000000000E5C0                 mov     rsi, rax
.text:000000000000E5C3                 xor     eax, eax
.text:000000000000E5C5                 jmp     openat_safer
.text:000000000000E5C5 ; } // starts at E590
.text:000000000000E5C5 diropen_isra_6  endp
.text:000000000000E5C5
.text:000000000000E5C5 ; ---------------------------------------------------------------------------
.text:000000000000E5CA                 align 10h
.text:000000000000E5D0
.text:000000000000E5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E5D0
.text:000000000000E5D0 ; Attributes: info_from_lumina
.text:000000000000E5D0
.text:000000000000E5D0 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:000000000000E5D0                                         ; fts_build+892↓p ...
.text:000000000000E5D0
.text:000000000000E5D0 var_D9          = byte ptr -0D9h
.text:000000000000E5D0 stat_buf        = stat ptr -0D8h
.text:000000000000E5D0 var_40          = qword ptr -40h
.text:000000000000E5D0
.text:000000000000E5D0 ; __unwind {
.text:000000000000E5D0                 push    r15
.text:000000000000E5D2                 push    r14
.text:000000000000E5D4                 mov     r14, rsi
.text:000000000000E5D7                 push    r13
.text:000000000000E5D9                 push    r12
.text:000000000000E5DB                 mov     r13, rdi
.text:000000000000E5DE                 push    rbp
.text:000000000000E5DF                 push    rbx
.text:000000000000E5E0                 mov     r12d, edx
.text:000000000000E5E3                 mov     rbp, rcx
.text:000000000000E5E6                 sub     rsp, 0B8h
.text:000000000000E5ED                 mov     ebx, [rdi+48h]
.text:000000000000E5F0                 mov     rax, fs:28h
.text:000000000000E5F9                 mov     [rsp+0E8h+var_40], rax
.text:000000000000E601                 xor     eax, eax
.text:000000000000E603                 mov     r9d, ebx
.text:000000000000E606                 and     r9d, 4
.text:000000000000E60A                 test    rcx, rcx
.text:000000000000E60D                 jz      loc_E6C0
.text:000000000000E613                 lea     rdx, asc_2269B  ; ".."
.text:000000000000E61A                 mov     ecx, 3
.text:000000000000E61F                 mov     rsi, rbp
.text:000000000000E622                 mov     rdi, rdx
.text:000000000000E625                 repe cmpsb
.text:000000000000E627                 setnbe  al
.text:000000000000E62A                 sbb     al, 0
.text:000000000000E62C                 test    al, al
.text:000000000000E62E                 jnz     loc_E6C0
.text:000000000000E634                 test    r9d, r9d
.text:000000000000E637                 jnz     loc_E6C5
.text:000000000000E63D                 test    r12d, r12d
.text:000000000000E640                 jns     loc_E82A
.text:000000000000E646                 test    bh, 2
.text:000000000000E649                 jnz     loc_E790
.text:000000000000E64F
.text:000000000000E64F loc_E64F:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:000000000000E64F                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E654
.text:000000000000E654 loc_E654:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:000000000000E654                                         ; fts_safe_changedir+275↓j
.text:000000000000E654                 mov     edi, [r13+2Ch]
.text:000000000000E658                 mov     rdx, rbp
.text:000000000000E65B                 mov     esi, ebx
.text:000000000000E65D                 call    diropen_isra_6
.text:000000000000E662                 test    eax, eax
.text:000000000000E664                 mov     r15d, eax
.text:000000000000E667                 js      loc_E81B
.text:000000000000E66D                 mov     ebx, [r13+48h]
.text:000000000000E671                 test    bl, 2
.text:000000000000E674                 jz      loc_E71A
.text:000000000000E67A                 nop     word ptr [rax+rax+00h]
.text:000000000000E680
.text:000000000000E680 loc_E680:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:000000000000E680                                         ; fts_safe_changedir+16A↓j ...
.text:000000000000E680                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000000E685                 mov     esi, r15d       ; fildes
.text:000000000000E688                 mov     edi, 1          ; ver
.text:000000000000E68D                 call    ___fxstat       ; PIC mode
.text:000000000000E692                 test    eax, eax
.text:000000000000E694                 jz      loc_E760
.text:000000000000E69A
.text:000000000000E69A loc_E69A:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:000000000000E69A                 mov     ebx, 0FFFFFFFFh
.text:000000000000E69F
.text:000000000000E69F loc_E69F:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:000000000000E69F                 test    r12d, r12d
.text:000000000000E6A2                 jns     short loc_E6D5
.text:000000000000E6A4                 call    ___errno_location ; PIC mode
.text:000000000000E6A9                 mov     r12d, [rax]
.text:000000000000E6AC                 mov     rbp, rax
.text:000000000000E6AF                 mov     edi, r15d       ; fd
.text:000000000000E6B2                 call    _close          ; PIC mode
.text:000000000000E6B7                 mov     [rbp+0], r12d
.text:000000000000E6BB                 jmp     short loc_E6D5
.text:000000000000E6BB ; ---------------------------------------------------------------------------
.text:000000000000E6BD                 align 20h
.text:000000000000E6C0
.text:000000000000E6C0 loc_E6C0:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:000000000000E6C0                                         ; fts_safe_changedir+5E↑j
.text:000000000000E6C0                 test    r9d, r9d
.text:000000000000E6C3                 jz      short loc_E700
.text:000000000000E6C5
.text:000000000000E6C5 loc_E6C5:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:000000000000E6C5                 and     bh, 2
.text:000000000000E6C8                 jz      short loc_E6D3
.text:000000000000E6CA                 test    r12d, r12d
.text:000000000000E6CD                 jns     loc_E780
.text:000000000000E6D3
.text:000000000000E6D3 loc_E6D3:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:000000000000E6D3                 xor     ebx, ebx
.text:000000000000E6D5
.text:000000000000E6D5 loc_E6D5:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:000000000000E6D5                                         ; fts_safe_changedir+EB↑j ...
.text:000000000000E6D5                 mov     rcx, [rsp+0E8h+var_40]
.text:000000000000E6DD                 xor     rcx, fs:28h
.text:000000000000E6E6                 mov     eax, ebx
.text:000000000000E6E8                 jnz     loc_E825
.text:000000000000E6EE                 add     rsp, 0B8h
.text:000000000000E6F5                 pop     rbx
.text:000000000000E6F6                 pop     rbp
.text:000000000000E6F7                 pop     r12
.text:000000000000E6F9                 pop     r13
.text:000000000000E6FB                 pop     r14
.text:000000000000E6FD                 pop     r15
.text:000000000000E6FF                 retn
.text:000000000000E700 ; ---------------------------------------------------------------------------
.text:000000000000E700
.text:000000000000E700 loc_E700:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:000000000000E700                 test    r12d, r12d
.text:000000000000E703                 js      loc_E840
.text:000000000000E709                 test    bl, 2
.text:000000000000E70C                 mov     r15d, r12d
.text:000000000000E70F                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E714                 jnz     loc_E680
.text:000000000000E71A
.text:000000000000E71A loc_E71A:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:000000000000E71A                 test    rbp, rbp
.text:000000000000E71D                 jz      short loc_E740
.text:000000000000E71F                 lea     rdx, asc_2269B  ; ".."
.text:000000000000E726
.text:000000000000E726 loc_E726:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:000000000000E726                 mov     ecx, 3
.text:000000000000E72B                 mov     rsi, rbp
.text:000000000000E72E                 mov     rdi, rdx
.text:000000000000E731                 repe cmpsb
.text:000000000000E733                 setnbe  al
.text:000000000000E736                 sbb     al, 0
.text:000000000000E738                 test    al, al
.text:000000000000E73A                 jz      loc_E680
.text:000000000000E740
.text:000000000000E740 loc_E740:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:000000000000E740                                         ; fts_safe_changedir+1FA↓j ...
.text:000000000000E740                 and     bh, 2
.text:000000000000E743                 jnz     loc_E7D8
.text:000000000000E749                 mov     edi, r15d       ; fd
.text:000000000000E74C                 call    _fchdir         ; PIC mode
.text:000000000000E751                 mov     ebx, eax
.text:000000000000E753                 jmp     loc_E69F
.text:000000000000E753 ; ---------------------------------------------------------------------------
.text:000000000000E758                 align 20h
.text:000000000000E760
.text:000000000000E760 loc_E760:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:000000000000E760                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:000000000000E765                 cmp     [r14+78h], rax
.text:000000000000E769                 jz      loc_E800
.text:000000000000E76F
.text:000000000000E76F loc_E76F:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:000000000000E76F                 call    ___errno_location ; PIC mode
.text:000000000000E774                 mov     dword ptr [rax], 2
.text:000000000000E77A                 jmp     loc_E69A
.text:000000000000E77A ; ---------------------------------------------------------------------------
.text:000000000000E77F                 align 20h
.text:000000000000E780
.text:000000000000E780 loc_E780:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:000000000000E780                 mov     edi, r12d       ; fd
.text:000000000000E783                 xor     ebx, ebx
.text:000000000000E785                 call    _close          ; PIC mode
.text:000000000000E78A                 jmp     loc_E6D5
.text:000000000000E78A ; ---------------------------------------------------------------------------
.text:000000000000E78F                 align 10h
.text:000000000000E790
.text:000000000000E790 loc_E790:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:000000000000E790                 lea     r15, [r13+60h]
.text:000000000000E794                 mov     rdi, r15
.text:000000000000E797                 call    i_ring_empty    ; PIC mode
.text:000000000000E79C                 test    al, al
.text:000000000000E79E                 mov     [rsp+0E8h+var_D9], al
.text:000000000000E7A2                 jnz     loc_E654
.text:000000000000E7A8                 mov     rdi, r15
.text:000000000000E7AB                 call    i_ring_pop      ; PIC mode
.text:000000000000E7B0                 test    eax, eax
.text:000000000000E7B2                 mov     r15d, eax
.text:000000000000E7B5                 mov     ebx, [r13+48h]
.text:000000000000E7B9                 js      loc_E64F
.text:000000000000E7BF                 test    bl, 2
.text:000000000000E7C2                 mov     r12d, eax
.text:000000000000E7C5                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E7CA                 jz      loc_E740
.text:000000000000E7D0                 jmp     loc_E680
.text:000000000000E7D0 ; ---------------------------------------------------------------------------
.text:000000000000E7D5                 align 8
.text:000000000000E7D8
.text:000000000000E7D8 loc_E7D8:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:000000000000E7D8                 movzx   r14d, [rsp+0E8h+var_D9]
.text:000000000000E7DE                 mov     esi, r15d
.text:000000000000E7E1                 mov     rdi, r13
.text:000000000000E7E4                 xor     ebx, ebx
.text:000000000000E7E6                 xor     r14d, 1
.text:000000000000E7EA                 movzx   edx, r14b
.text:000000000000E7EE                 call    cwd_advance_fd
.text:000000000000E7F3                 jmp     loc_E6D5
.text:000000000000E7F3 ; ---------------------------------------------------------------------------
.text:000000000000E7F8                 align 20h
.text:000000000000E800
.text:000000000000E800 loc_E800:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:000000000000E800                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:000000000000E805                 cmp     [r14+80h], rax
.text:000000000000E80C                 jnz     loc_E76F
.text:000000000000E812                 mov     ebx, [r13+48h]
.text:000000000000E816                 jmp     loc_E740
.text:000000000000E81B ; ---------------------------------------------------------------------------
.text:000000000000E81B
.text:000000000000E81B loc_E81B:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:000000000000E81B                 mov     ebx, 0FFFFFFFFh
.text:000000000000E820                 jmp     loc_E6D5
.text:000000000000E825 ; ---------------------------------------------------------------------------
.text:000000000000E825
.text:000000000000E825 loc_E825:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:000000000000E825                 call    ___stack_chk_fail ; PIC mode
.text:000000000000E82A ; ---------------------------------------------------------------------------
.text:000000000000E82A
.text:000000000000E82A loc_E82A:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:000000000000E82A                 test    bl, 2
.text:000000000000E82D                 mov     r15d, r12d
.text:000000000000E830                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000E835                 jz      loc_E726
.text:000000000000E83B                 jmp     loc_E680
.text:000000000000E840 ; ---------------------------------------------------------------------------
.text:000000000000E840
.text:000000000000E840 loc_E840:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:000000000000E840                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000E845                 jmp     loc_E654
.text:000000000000E845 ; } // starts at E5D0
.text:000000000000E845 fts_safe_changedir endp
.text:000000000000E845
.text:000000000000E845 ; ---------------------------------------------------------------------------
.text:000000000000E84A                 align 10h
.text:000000000000E850
.text:000000000000E850 ; =============== S U B R O U T I N E =======================================
.text:000000000000E850
.text:000000000000E850
.text:000000000000E850 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:000000000000E850                                         ; rpl_fts_read+383↓p
.text:000000000000E850 ; __unwind {
.text:000000000000E850                 and     edi, 102h
.text:000000000000E856                 push    r12
.text:000000000000E858                 mov     r12, rsi
.text:000000000000E85B                 push    rbp
.text:000000000000E85C                 push    rbx
.text:000000000000E85D                 mov     rbx, rdx
.text:000000000000E860                 jz      short loc_E8D0
.text:000000000000E862                 mov     edi, 18h        ; size
.text:000000000000E867                 call    _malloc
.text:000000000000E86C                 test    rax, rax
.text:000000000000E86F                 mov     rbp, rax
.text:000000000000E872                 jz      loc_E8F8
.text:000000000000E878                 mov     rax, [rbx+78h]
.text:000000000000E87C                 mov     rdi, [r12]
.text:000000000000E880                 mov     rsi, rbp
.text:000000000000E883                 mov     [rbp+10h], rbx
.text:000000000000E887                 mov     [rbp+0], rax
.text:000000000000E88B                 mov     rax, [rbx+80h]
.text:000000000000E892                 mov     [rbp+8], rax
.text:000000000000E896                 call    hash_insert
.text:000000000000E89B                 cmp     rbp, rax
.text:000000000000E89E                 mov     r12, rax
.text:000000000000E8A1                 jz      short loc_E8C1
.text:000000000000E8A3                 mov     rdi, rbp        ; ptr
.text:000000000000E8A6                 call    free
.text:000000000000E8AB                 test    r12, r12
.text:000000000000E8AE                 jz      short loc_E8F8
.text:000000000000E8B0                 mov     rax, [r12+10h]
.text:000000000000E8B5                 mov     ecx, 2
.text:000000000000E8BA                 mov     [rbx+70h], cx
.text:000000000000E8BE                 mov     [rbx], rax
.text:000000000000E8C1
.text:000000000000E8C1 loc_E8C1:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:000000000000E8C1                                         ; enter_dir_isra_10+8F↓j
.text:000000000000E8C1                 pop     rbx
.text:000000000000E8C2                 mov     eax, 1
.text:000000000000E8C7                 pop     rbp
.text:000000000000E8C8                 pop     r12
.text:000000000000E8CA                 retn
.text:000000000000E8CA ; ---------------------------------------------------------------------------
.text:000000000000E8CB                 align 10h
.text:000000000000E8D0
.text:000000000000E8D0 loc_E8D0:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:000000000000E8D0                 mov     rdi, [r12]
.text:000000000000E8D4                 lea     rsi, [rdx+78h]
.text:000000000000E8D8                 call    cycle_check
.text:000000000000E8DD                 test    al, al
.text:000000000000E8DF                 jz      short loc_E8C1
.text:000000000000E8E1                 mov     edx, 2
.text:000000000000E8E6                 mov     [rbx], rbx
.text:000000000000E8E9                 mov     [rbx+70h], dx
.text:000000000000E8ED                 pop     rbx
.text:000000000000E8EE                 pop     rbp
.text:000000000000E8EF                 pop     r12
.text:000000000000E8F1                 retn
.text:000000000000E8F1 ; ---------------------------------------------------------------------------
.text:000000000000E8F2                 align 8
.text:000000000000E8F8
.text:000000000000E8F8 loc_E8F8:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:000000000000E8F8                                         ; enter_dir_isra_10+5E↑j
.text:000000000000E8F8                 pop     rbx
.text:000000000000E8F9                 xor     eax, eax
.text:000000000000E8FB                 pop     rbp
.text:000000000000E8FC                 pop     r12
.text:000000000000E8FE                 retn
.text:000000000000E8FE ; } // starts at E850
.text:000000000000E8FE enter_dir_isra_10 endp
.text:000000000000E8FE
.text:000000000000E8FE ; ---------------------------------------------------------------------------
.text:000000000000E8FF                 align 20h
.text:000000000000E900
.text:000000000000E900 ; =============== S U B R O U T I N E =======================================
.text:000000000000E900
.text:000000000000E900
.text:000000000000E900 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:000000000000E900                                         ; rpl_fts_read+195↓p ...
.text:000000000000E900
.text:000000000000E900 var_28          = qword ptr -28h
.text:000000000000E900 var_20          = qword ptr -20h
.text:000000000000E900 var_10          = qword ptr -10h
.text:000000000000E900
.text:000000000000E900 ; __unwind {
.text:000000000000E900                 sub     rsp, 28h
.text:000000000000E904                 mov     rcx, rsi
.text:000000000000E907                 mov     rax, fs:28h
.text:000000000000E910                 mov     [rsp+28h+var_10], rax
.text:000000000000E915                 xor     eax, eax
.text:000000000000E917                 and     edi, 102h
.text:000000000000E91D                 jnz     short loc_E960
.text:000000000000E91F                 mov     rax, [rdx+8]
.text:000000000000E923                 test    rax, rax
.text:000000000000E926                 jz      short loc_E945
.text:000000000000E928                 cmp     qword ptr [rax+58h], 0
.text:000000000000E92D                 js      short loc_E945
.text:000000000000E92F                 mov     rcx, [rsi]
.text:000000000000E932                 cmp     qword ptr [rcx+10h], 0
.text:000000000000E937                 jz      short loc_E9B3
.text:000000000000E939                 mov     rsi, [rdx+80h]
.text:000000000000E940                 cmp     [rcx], rsi
.text:000000000000E943                 jz      short loc_E990
.text:000000000000E945
.text:000000000000E945 loc_E945:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:000000000000E945                                         ; leave_dir_isra_12+2D↑j ...
.text:000000000000E945                 mov     rax, [rsp+28h+var_10]
.text:000000000000E94A                 xor     rax, fs:28h
.text:000000000000E953                 jnz     short loc_E9AE
.text:000000000000E955                 add     rsp, 28h
.text:000000000000E959                 retn
.text:000000000000E959 ; ---------------------------------------------------------------------------
.text:000000000000E95A                 align 20h
.text:000000000000E960
.text:000000000000E960 loc_E960:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:000000000000E960                 mov     rax, [rdx+78h]
.text:000000000000E964                 mov     rdi, [rcx]
.text:000000000000E967                 mov     rsi, rsp
.text:000000000000E96A                 mov     [rsp+28h+var_28], rax
.text:000000000000E96E                 mov     rax, [rdx+80h]
.text:000000000000E975                 mov     [rsp+28h+var_20], rax
.text:000000000000E97A                 call    hash_delete
.text:000000000000E97F                 test    rax, rax
.text:000000000000E982                 jz      short loc_E9B3
.text:000000000000E984                 mov     rdi, rax        ; ptr
.text:000000000000E987                 call    free
.text:000000000000E98C                 jmp     short loc_E945
.text:000000000000E98C ; ---------------------------------------------------------------------------
.text:000000000000E98E                 align 10h
.text:000000000000E990
.text:000000000000E990 loc_E990:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:000000000000E990                 mov     rsi, [rdx+78h]
.text:000000000000E994                 cmp     [rcx+8], rsi
.text:000000000000E998                 jnz     short loc_E945
.text:000000000000E99A                 mov     rdx, [rax+78h]
.text:000000000000E99E                 mov     rax, [rax+80h]
.text:000000000000E9A5                 mov     [rcx+8], rdx
.text:000000000000E9A9                 mov     [rcx], rax
.text:000000000000E9AC                 jmp     short loc_E945
.text:000000000000E9AE ; ---------------------------------------------------------------------------
.text:000000000000E9AE
.text:000000000000E9AE loc_E9AE:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:000000000000E9AE                 call    ___stack_chk_fail
.text:000000000000E9B3 ; ---------------------------------------------------------------------------
.text:000000000000E9B3
.text:000000000000E9B3 loc_E9B3:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:000000000000E9B3                                         ; leave_dir_isra_12+82↑j
.text:000000000000E9B3                 call    _abort
.text:000000000000E9B3 ; } // starts at E900
.text:000000000000E9B3 leave_dir_isra_12 endp
.text:000000000000E9B3
.text:000000000000E9B3 ; ---------------------------------------------------------------------------
.text:000000000000E9B8                 align 20h
.text:000000000000E9C0
.text:000000000000E9C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E9C0
.text:000000000000E9C0
.text:000000000000E9C0 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:000000000000E9C0                                         ; rpl_fts_read+619↓p ...
.text:000000000000E9C0
.text:000000000000E9C0 var_A0          = qword ptr -0A0h
.text:000000000000E9C0 ptr             = qword ptr -98h
.text:000000000000E9C0 var_90          = qword ptr -90h
.text:000000000000E9C0 var_88          = qword ptr -88h
.text:000000000000E9C0 var_80          = qword ptr -80h
.text:000000000000E9C0 var_78          = qword ptr -78h
.text:000000000000E9C0 var_70          = qword ptr -70h
.text:000000000000E9C0 dest            = qword ptr -68h
.text:000000000000E9C0 var_60          = qword ptr -60h
.text:000000000000E9C0 var_58          = qword ptr -58h
.text:000000000000E9C0 var_50          = dword ptr -50h
.text:000000000000E9C0 var_4B          = byte ptr -4Bh
.text:000000000000E9C0 var_4A          = byte ptr -4Ah
.text:000000000000E9C0 var_49          = byte ptr -49h
.text:000000000000E9C0 fd              = dword ptr -44h
.text:000000000000E9C0 var_40          = qword ptr -40h
.text:000000000000E9C0
.text:000000000000E9C0 ; __unwind {
.text:000000000000E9C0                 push    r15
.text:000000000000E9C2                 push    r14
.text:000000000000E9C4                 mov     r15, rdi
.text:000000000000E9C7                 push    r13
.text:000000000000E9C9                 push    r12
.text:000000000000E9CB                 push    rbp
.text:000000000000E9CC                 push    rbx
.text:000000000000E9CD                 sub     rsp, 78h
.text:000000000000E9D1                 mov     rbp, [rdi]
.text:000000000000E9D4                 mov     rax, fs:28h
.text:000000000000E9DD                 mov     [rsp+0A8h+var_40], rax
.text:000000000000E9E2                 xor     eax, eax
.text:000000000000E9E4                 mov     [rsp+0A8h+var_50], esi
.text:000000000000E9E8                 mov     rax, [rbp+18h]
.text:000000000000E9EC                 test    rax, rax
.text:000000000000E9EF                 mov     [rsp+0A8h+var_58], rax
.text:000000000000E9F4                 jz      loc_EE30
.text:000000000000E9FA                 mov     rdi, rax        ; dirp
.text:000000000000E9FD                 call    _dirfd
.text:000000000000EA02                 test    eax, eax
.text:000000000000EA04                 mov     [rsp+0A8h+fd], eax
.text:000000000000EA08                 js      loc_EF60
.text:000000000000EA0E                 cmp     qword ptr [r15+40h], 0
.text:000000000000EA13                 jz      loc_F1E8
.text:000000000000EA19                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:000000000000EA22
.text:000000000000EA22 loc_EA22:                               ; CODE XREF: fts_build+89F↓j
.text:000000000000EA22                 mov     edi, [r15+48h]
.text:000000000000EA26                 mov     [rsp+0A8h+var_49], 1
.text:000000000000EA2B
.text:000000000000EA2B loc_EA2B:                               ; CODE XREF: fts_build+57D↓j
.text:000000000000EA2B                                         ; fts_build+83A↓j ...
.text:000000000000EA2B                 mov     rcx, [rbp+48h]
.text:000000000000EA2F                 mov     rdx, [rbp+38h]
.text:000000000000EA33                 mov     [rsp+0A8h+dest], 0
.text:000000000000EA3C                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:000000000000EA41                 lea     rax, [rcx-1]
.text:000000000000EA45                 cmovnz  rax, rcx
.text:000000000000EA49                 and     edi, 4
.text:000000000000EA4C                 mov     [rsp+0A8h+var_60], rax
.text:000000000000EA51                 jz      short loc_EA63
.text:000000000000EA53                 add     rax, [r15+20h]
.text:000000000000EA57                 lea     rbx, [rax+1]
.text:000000000000EA5B                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000EA5E                 mov     [rsp+0A8h+dest], rbx
.text:000000000000EA63
.text:000000000000EA63 loc_EA63:                               ; CODE XREF: fts_build+91↑j
.text:000000000000EA63                 mov     rax, [rsp+0A8h+var_60]
.text:000000000000EA68                 mov     rbx, [r15+30h]
.text:000000000000EA6C                 mov     [rsp+0A8h+var_4A], 0
.text:000000000000EA71                 mov     [rsp+0A8h+var_4B], 0
.text:000000000000EA76                 mov     [rsp+0A8h+var_A0], 0
.text:000000000000EA7F                 mov     [rsp+0A8h+ptr], 0
.text:000000000000EA88                 add     rax, 1
.text:000000000000EA8C                 mov     [rsp+0A8h+var_88], rbp
.text:000000000000EA91                 sub     rbx, rax
.text:000000000000EA94                 mov     [rsp+0A8h+var_90], rax
.text:000000000000EA99                 mov     rax, [rbp+58h]
.text:000000000000EA9D                 mov     [rsp+0A8h+var_80], rbx
.text:000000000000EAA2                 xor     ebx, ebx
.text:000000000000EAA4                 add     rax, 1
.text:000000000000EAA8                 mov     [rsp+0A8h+var_78], rax
.text:000000000000EAAD                 jmp     loc_EB8F
.text:000000000000EAAD ; ---------------------------------------------------------------------------
.text:000000000000EAB2                 align 8
.text:000000000000EAB8
.text:000000000000EAB8 loc_EAB8:                               ; CODE XREF: fts_build+242↓j
.text:000000000000EAB8                                         ; fts_build+2A6↓j
.text:000000000000EAB8                 mov     r9, r14
.text:000000000000EABB                 add     r9, [rsp+0A8h+var_90]
.text:000000000000EAC0                 jb      loc_F320
.text:000000000000EAC6                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000EACB                 lea     rsi, [r13+108h] ; src
.text:000000000000EAD2                 mov     [r13+58h], rax
.text:000000000000EAD6                 mov     rax, [r15]
.text:000000000000EAD9                 mov     [r13+48h], r9
.text:000000000000EADD                 mov     [r13+8], rax
.text:000000000000EAE1                 mov     rax, [rbp+0]
.text:000000000000EAE5                 mov     [r13+80h], rax
.text:000000000000EAEC                 mov     eax, [r15+48h]
.text:000000000000EAF0                 test    al, 4
.text:000000000000EAF2                 jnz     loc_ED60
.text:000000000000EAF8                 mov     [r13+30h], rsi
.text:000000000000EAFC
.text:000000000000EAFC loc_EAFC:                               ; CODE XREF: fts_build+3BE↓j
.text:000000000000EAFC                 cmp     qword ptr [r15+40h], 0
.text:000000000000EB01                 jz      short loc_EB0C
.text:000000000000EB03                 test    ah, 4
.text:000000000000EB06                 jz      loc_EE08
.text:000000000000EB0C
.text:000000000000EB0C loc_EB0C:                               ; CODE XREF: fts_build+141↑j
.text:000000000000EB0C                 movzx   edx, byte ptr [rbp+12h]
.text:000000000000EB10                 and     eax, 18h
.text:000000000000EB13                 mov     esi, edx
.text:000000000000EB15                 sub     edx, 1
.text:000000000000EB18                 cmp     eax, 18h
.text:000000000000EB1B                 jz      loc_EDD0
.text:000000000000EB21
.text:000000000000EB21 loc_EB21:                               ; CODE XREF: fts_build+416↓j
.text:000000000000EB21                 mov     ecx, 0Bh
.text:000000000000EB26                 cmp     edx, 0Bh
.text:000000000000EB29                 mov     [r13+70h], cx
.text:000000000000EB2E                 ja      loc_ED98
.text:000000000000EB34                 lea     rax, CSWTCH_53
.text:000000000000EB3B                 mov     eax, [rax+rdx*4]
.text:000000000000EB3E                 mov     [r13+90h], eax
.text:000000000000EB45                 mov     eax, 2
.text:000000000000EB4A
.text:000000000000EB4A loc_EB4A:                               ; CODE XREF: fts_build+3E8↓j
.text:000000000000EB4A                                         ; fts_build+43F↓j ...
.text:000000000000EB4A                 mov     [r13+0A8h], rax
.text:000000000000EB51
.text:000000000000EB51 loc_EB51:                               ; CODE XREF: fts_build+45A↓j
.text:000000000000EB51                 cmp     [rsp+0A8h+ptr], 0
.text:000000000000EB57                 mov     qword ptr [r13+10h], 0
.text:000000000000EB5F                 jz      loc_ED88
.text:000000000000EB65                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000EB6A                 mov     [rax+10h], r13
.text:000000000000EB6E
.text:000000000000EB6E loc_EB6E:                               ; CODE XREF: fts_build+3CD↓j
.text:000000000000EB6E                 cmp     rbx, 2710h
.text:000000000000EB75                 jz      loc_EC70
.text:000000000000EB7B
.text:000000000000EB7B loc_EB7B:                               ; CODE XREF: fts_build+2B5↓j
.text:000000000000EB7B                                         ; fts_build+645↓j
.text:000000000000EB7B                 add     rbx, 1
.text:000000000000EB7F                 cmp     rbx, [rsp+0A8h+var_70]
.text:000000000000EB84                 jnb     loc_ECC8
.text:000000000000EB8A
.text:000000000000EB8A loc_EB8A:                               ; CODE XREF: fts_build+2FD↓j
.text:000000000000EB8A                                         ; fts_build+406↓j
.text:000000000000EB8A                 mov     [rsp+0A8h+var_A0], r13
.text:000000000000EB8F
.text:000000000000EB8F loc_EB8F:                               ; CODE XREF: fts_build+ED↑j
.text:000000000000EB8F                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000EB94                 mov     r13, [rax+18h]
.text:000000000000EB98                 test    r13, r13
.text:000000000000EB9B                 jz      loc_F068
.text:000000000000EBA1                 call    ___errno_location
.text:000000000000EBA6                 mov     rdi, r13        ; dirp
.text:000000000000EBA9                 mov     dword ptr [rax], 0
.text:000000000000EBAF                 mov     r12, rax
.text:000000000000EBB2                 call    _readdir
.text:000000000000EBB7                 test    rax, rax
.text:000000000000EBBA                 mov     rbp, rax
.text:000000000000EBBD                 jz      loc_F140
.text:000000000000EBC3                 test    byte ptr [r15+48h], 20h
.text:000000000000EBC8                 jnz     short loc_EBD4
.text:000000000000EBCA                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:000000000000EBCE                 jz      loc_EDB0
.text:000000000000EBD4
.text:000000000000EBD4 loc_EBD4:                               ; CODE XREF: fts_build+208↑j
.text:000000000000EBD4                                         ; fts_build+3FB↓j
.text:000000000000EBD4                 lea     r13, [rbp+13h]
.text:000000000000EBD8                 mov     rdi, r13        ; s
.text:000000000000EBDB                 call    _strlen
.text:000000000000EBE0                 mov     rsi, r13
.text:000000000000EBE3                 mov     rdx, rax
.text:000000000000EBE6                 mov     rdi, r15
.text:000000000000EBE9                 mov     r14, rax
.text:000000000000EBEC                 call    fts_alloc
.text:000000000000EBF1                 test    rax, rax
.text:000000000000EBF4                 mov     r13, rax
.text:000000000000EBF7                 jz      loc_F010
.text:000000000000EBFD                 cmp     [rsp+0A8h+var_80], r14
.text:000000000000EC02                 ja      loc_EAB8
.text:000000000000EC08                 mov     rax, [r15+20h]
.text:000000000000EC0C                 lea     rsi, [r15+30h]
.text:000000000000EC10                 lea     rdi, [r15+20h]
.text:000000000000EC14                 mov     [rsp+0A8h+var_80], rax
.text:000000000000EC19                 mov     rax, [rsp+0A8h+var_60]
.text:000000000000EC1E                 lea     rdx, [rax+r14+2]
.text:000000000000EC23                 call    fts_palloc_isra_2
.text:000000000000EC28                 test    al, al
.text:000000000000EC2A                 jz      loc_F010
.text:000000000000EC30                 mov     rdx, [r15+20h]
.text:000000000000EC34                 cmp     rdx, [rsp+0A8h+var_80]
.text:000000000000EC39                 jz      loc_EE20
.text:000000000000EC3F                 add     rdx, [rsp+0A8h+var_90]
.text:000000000000EC44                 test    byte ptr [r15+48h], 4
.text:000000000000EC49                 cmovz   rdx, [rsp+0A8h+dest]
.text:000000000000EC4F                 mov     [rsp+0A8h+dest], rdx
.text:000000000000EC54
.text:000000000000EC54 loc_EC54:                               ; CODE XREF: fts_build+465↓j
.text:000000000000EC54                 mov     rcx, [r15+30h]
.text:000000000000EC58                 sub     rcx, [rsp+0A8h+var_90]
.text:000000000000EC5D                 mov     [rsp+0A8h+var_4B], al
.text:000000000000EC61                 mov     [rsp+0A8h+var_80], rcx
.text:000000000000EC66                 jmp     loc_EAB8
.text:000000000000EC66 ; ---------------------------------------------------------------------------
.text:000000000000EC6B                 align 10h
.text:000000000000EC70
.text:000000000000EC70 loc_EC70:                               ; CODE XREF: fts_build+1B5↑j
.text:000000000000EC70                 cmp     qword ptr [r15+40h], 0
.text:000000000000EC75                 jnz     loc_EB7B
.text:000000000000EC7B                 mov     esi, [rsp+0A8h+fd]
.text:000000000000EC7F                 mov     rdi, [rsp+0A8h+var_88]
.text:000000000000EC84                 call    filesystem_type
.text:000000000000EC89                 cmp     rax, 1021994h
.text:000000000000EC8F                 jz      loc_F000
.text:000000000000EC95                 mov     ecx, 0FF534D42h
.text:000000000000EC9A                 cmp     rax, rcx
.text:000000000000EC9D                 jz      loc_F000
.text:000000000000ECA3                 cmp     rax, 6969h
.text:000000000000ECA9                 jz      loc_F000
.text:000000000000ECAF                 add     rbx, 1
.text:000000000000ECB3                 cmp     rbx, [rsp+0A8h+var_70]
.text:000000000000ECB8                 mov     [rsp+0A8h+var_4A], 1
.text:000000000000ECBD                 jb      loc_EB8A
.text:000000000000ECC3                 nop     dword ptr [rax+rax+00h]
.text:000000000000ECC8
.text:000000000000ECC8 loc_ECC8:                               ; CODE XREF: fts_build+1C4↑j
.text:000000000000ECC8                 cmp     [rsp+0A8h+var_4B], 0
.text:000000000000ECCD                 mov     rbp, [rsp+0A8h+var_88]
.text:000000000000ECD2                 jz      loc_F076
.text:000000000000ECD8
.text:000000000000ECD8 loc_ECD8:                               ; CODE XREF: fts_build+6B0↓j
.text:000000000000ECD8                 mov     rax, [r15+8]
.text:000000000000ECDC                 mov     rcx, [r15+20h]
.text:000000000000ECE0                 test    rax, rax
.text:000000000000ECE3                 jz      short loc_ED10
.text:000000000000ECE5                 nop     dword ptr [rax]
.text:000000000000ECE8
.text:000000000000ECE8 loc_ECE8:                               ; CODE XREF: fts_build+34E↓j
.text:000000000000ECE8                 mov     rdx, [rax+30h]
.text:000000000000ECEC                 lea     rsi, [rax+108h]
.text:000000000000ECF3                 cmp     rdx, rsi
.text:000000000000ECF6                 jz      short loc_ED03
.text:000000000000ECF8                 sub     rdx, [rax+38h]
.text:000000000000ECFC                 add     rdx, rcx
.text:000000000000ECFF                 mov     [rax+30h], rdx
.text:000000000000ED03
.text:000000000000ED03 loc_ED03:                               ; CODE XREF: fts_build+336↑j
.text:000000000000ED03                 mov     [rax+38h], rcx
.text:000000000000ED07                 mov     rax, [rax+10h]
.text:000000000000ED0B                 test    rax, rax
.text:000000000000ED0E                 jnz     short loc_ECE8
.text:000000000000ED10
.text:000000000000ED10 loc_ED10:                               ; CODE XREF: fts_build+323↑j
.text:000000000000ED10                 mov     rax, [rsp+0A8h+ptr]
.text:000000000000ED15                 jmp     short loc_ED23
.text:000000000000ED15 ; ---------------------------------------------------------------------------
.text:000000000000ED17                 align 20h
.text:000000000000ED20
.text:000000000000ED20 loc_ED20:                               ; CODE XREF: fts_build+394↓j
.text:000000000000ED20                                         ; fts_build+39A↓j
.text:000000000000ED20                 mov     rax, rdx
.text:000000000000ED23
.text:000000000000ED23 loc_ED23:                               ; CODE XREF: fts_build+355↑j
.text:000000000000ED23                 cmp     qword ptr [rax+58h], 0
.text:000000000000ED28                 js      loc_F076
.text:000000000000ED2E                 mov     rdx, [rax+30h]
.text:000000000000ED32                 lea     rsi, [rax+108h]
.text:000000000000ED39                 cmp     rdx, rsi
.text:000000000000ED3C                 jz      short loc_ED49
.text:000000000000ED3E                 sub     rdx, [rax+38h]
.text:000000000000ED42                 add     rdx, rcx
.text:000000000000ED45                 mov     [rax+30h], rdx
.text:000000000000ED49
.text:000000000000ED49 loc_ED49:                               ; CODE XREF: fts_build+37C↑j
.text:000000000000ED49                 mov     rdx, [rax+10h]
.text:000000000000ED4D                 mov     [rax+38h], rcx
.text:000000000000ED51                 test    rdx, rdx
.text:000000000000ED54                 jnz     short loc_ED20
.text:000000000000ED56                 mov     rdx, [rax+8]
.text:000000000000ED5A                 jmp     short loc_ED20
.text:000000000000ED5A ; ---------------------------------------------------------------------------
.text:000000000000ED5C                 align 20h
.text:000000000000ED60
.text:000000000000ED60 loc_ED60:                               ; CODE XREF: fts_build+132↑j
.text:000000000000ED60                 mov     rax, [r13+38h]
.text:000000000000ED64                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:000000000000ED69                 mov     [r13+30h], rax
.text:000000000000ED6D                 mov     rax, [r13+60h]
.text:000000000000ED71                 lea     rdx, [rax+1]    ; n
.text:000000000000ED75                 call    _memmove
.text:000000000000ED7A                 mov     eax, [r15+48h]
.text:000000000000ED7E                 jmp     loc_EAFC
.text:000000000000ED7E ; ---------------------------------------------------------------------------
.text:000000000000ED83                 align 8
.text:000000000000ED88
.text:000000000000ED88 loc_ED88:                               ; CODE XREF: fts_build+19F↑j
.text:000000000000ED88                 mov     [rsp+0A8h+ptr], r13
.text:000000000000ED8D                 jmp     loc_EB6E
.text:000000000000ED8D ; ---------------------------------------------------------------------------
.text:000000000000ED92                 align 8
.text:000000000000ED98
.text:000000000000ED98 loc_ED98:                               ; CODE XREF: fts_build+16E↑j
.text:000000000000ED98                 mov     dword ptr [r13+90h], 0
.text:000000000000EDA3                 mov     eax, 2
.text:000000000000EDA8                 jmp     loc_EB4A
.text:000000000000EDA8 ; ---------------------------------------------------------------------------
.text:000000000000EDAD                 align 10h
.text:000000000000EDB0
.text:000000000000EDB0 loc_EDB0:                               ; CODE XREF: fts_build+20E↑j
.text:000000000000EDB0                 cmp     byte ptr [rax+14h], 0
.text:000000000000EDB4                 jz      short loc_EDC1
.text:000000000000EDB6                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:000000000000EDBB                 jnz     loc_EBD4
.text:000000000000EDC1
.text:000000000000EDC1 loc_EDC1:                               ; CODE XREF: fts_build+3F4↑j
.text:000000000000EDC1                 mov     r13, [rsp+0A8h+var_A0]
.text:000000000000EDC6                 jmp     loc_EB8A
.text:000000000000EDC6 ; ---------------------------------------------------------------------------
.text:000000000000EDCB                 align 10h
.text:000000000000EDD0
.text:000000000000EDD0 loc_EDD0:                               ; CODE XREF: fts_build+15B↑j
.text:000000000000EDD0                 and     esi, 0FBh
.text:000000000000EDD6                 jz      loc_EB21
.text:000000000000EDDC                 mov     eax, 0Bh
.text:000000000000EDE1                 cmp     edx, 0Bh
.text:000000000000EDE4                 mov     [r13+70h], ax
.text:000000000000EDE9                 jbe     loc_F376
.text:000000000000EDEF                 mov     dword ptr [r13+90h], 0
.text:000000000000EDFA                 mov     eax, 1
.text:000000000000EDFF                 jmp     loc_EB4A
.text:000000000000EDFF ; ---------------------------------------------------------------------------
.text:000000000000EE04                 align 8
.text:000000000000EE08
.text:000000000000EE08 loc_EE08:                               ; CODE XREF: fts_build+146↑j
.text:000000000000EE08                 xor     edx, edx
.text:000000000000EE0A                 mov     rsi, r13
.text:000000000000EE0D                 mov     rdi, r15
.text:000000000000EE10                 call    fts_stat
.text:000000000000EE15                 mov     [r13+70h], ax
.text:000000000000EE1A                 jmp     loc_EB51
.text:000000000000EE1A ; ---------------------------------------------------------------------------
.text:000000000000EE1F                 align 20h
.text:000000000000EE20
.text:000000000000EE20 loc_EE20:                               ; CODE XREF: fts_build+279↑j
.text:000000000000EE20                 movzx   eax, [rsp+0A8h+var_4B]
.text:000000000000EE25                 jmp     loc_EC54
.text:000000000000EE25 ; ---------------------------------------------------------------------------
.text:000000000000EE2A                 align 10h
.text:000000000000EE30
.text:000000000000EE30 loc_EE30:                               ; CODE XREF: fts_build+34↑j
.text:000000000000EE30                 mov     eax, [rdi+48h]
.text:000000000000EE33                 mov     edx, eax
.text:000000000000EE35                 and     edx, 10h
.text:000000000000EE38                 jz      short loc_EE47
.text:000000000000EE3A                 test    al, 1
.text:000000000000EE3C                 mov     edx, 20000h
.text:000000000000EE41                 jnz     loc_EF48
.text:000000000000EE47
.text:000000000000EE47 loc_EE47:                               ; CODE XREF: fts_build+478↑j
.text:000000000000EE47                                         ; fts_build+595↓j
.text:000000000000EE47                 and     eax, 204h
.text:000000000000EE4C                 mov     rsi, [rbp+30h]
.text:000000000000EE50                 mov     edi, 0FFFFFF9Ch
.text:000000000000EE55                 cmp     eax, 200h
.text:000000000000EE5A                 jnz     short loc_EE60
.text:000000000000EE5C                 mov     edi, [r15+2Ch]
.text:000000000000EE60
.text:000000000000EE60 loc_EE60:                               ; CODE XREF: fts_build+49A↑j
.text:000000000000EE60                 lea     rcx, [rsp+0A8h+fd]
.text:000000000000EE65                 call    opendirat
.text:000000000000EE6A                 test    rax, rax
.text:000000000000EE6D                 mov     [rbp+18h], rax
.text:000000000000EE71                 jz      loc_F190
.text:000000000000EE77                 cmp     word ptr [rbp+70h], 0Bh
.text:000000000000EE7C                 jz      loc_F210
.text:000000000000EE82                 mov     edi, [r15+48h]
.text:000000000000EE86                 test    edi, 100h
.text:000000000000EE8C                 jnz     loc_EFB0
.text:000000000000EE92
.text:000000000000EE92 loc_EE92:                               ; CODE XREF: fts_build+61D↓j
.text:000000000000EE92                                         ; fts_build+861↓j
.text:000000000000EE92                 cmp     qword ptr [r15+40h], 1
.text:000000000000EE97                 sbb     rax, rax
.text:000000000000EE9A                 and     eax, 186A1h
.text:000000000000EE9F                 sub     rax, 1
.text:000000000000EEA3                 cmp     [rsp+0A8h+var_50], 2
.text:000000000000EEA8                 mov     [rsp+0A8h+var_70], rax
.text:000000000000EEAD                 jz      loc_F200
.text:000000000000EEB3                 mov     edx, [r15+48h]
.text:000000000000EEB7                 mov     eax, [rsp+0A8h+fd]
.text:000000000000EEBB                 and     edx, 38h
.text:000000000000EEBE                 cmp     edx, 18h
.text:000000000000EEC1                 jz      loc_F264
.text:000000000000EEC7
.text:000000000000EEC7 loc_EEC7:                               ; CODE XREF: fts_build+8AC↓j
.text:000000000000EEC7                                         ; fts_build+8C4↓j
.text:000000000000EEC7                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000EECC                 mov     r12d, 1
.text:000000000000EED2                 setz    bl
.text:000000000000EED5
.text:000000000000EED5 loc_EED5:                               ; CODE XREF: fts_build+955↓j
.text:000000000000EED5                 test    byte ptr [r15+49h], 2
.text:000000000000EEDA                 jnz     loc_F2BC
.text:000000000000EEE0
.text:000000000000EEE0 loc_EEE0:                               ; CODE XREF: fts_build+913↓j
.text:000000000000EEE0                 test    eax, eax
.text:000000000000EEE2                 jns     loc_F248
.text:000000000000EEE8
.text:000000000000EEE8 loc_EEE8:                               ; CODE XREF: fts_build+899↓j
.text:000000000000EEE8                 test    bl, bl
.text:000000000000EEEA                 jz      short loc_EEFB
.text:000000000000EEEC                 test    r12b, r12b
.text:000000000000EEEF                 jz      short loc_EEFB
.text:000000000000EEF1                 call    ___errno_location
.text:000000000000EEF6                 mov     eax, [rax]
.text:000000000000EEF8                 mov     [rbp+40h], eax
.text:000000000000EEFB
.text:000000000000EEFB loc_EEFB:                               ; CODE XREF: fts_build+52A↑j
.text:000000000000EEFB                                         ; fts_build+52F↑j
.text:000000000000EEFB                 or      word ptr [rbp+72h], 1
.text:000000000000EF00                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000EF04                 call    _closedir
.text:000000000000EF09                 mov     edi, [r15+48h]
.text:000000000000EF0D                 mov     qword ptr [rbp+18h], 0
.text:000000000000EF15                 test    edi, 200h
.text:000000000000EF1B                 jz      short loc_EF30
.text:000000000000EF1D                 mov     eax, [rsp+0A8h+fd]
.text:000000000000EF21                 test    eax, eax
.text:000000000000EF23                 js      short loc_EF30
.text:000000000000EF25                 mov     edi, eax        ; fd
.text:000000000000EF27                 call    _close
.text:000000000000EF2C                 mov     edi, [r15+48h]
.text:000000000000EF30
.text:000000000000EF30 loc_EF30:                               ; CODE XREF: fts_build+55B↑j
.text:000000000000EF30                                         ; fts_build+563↑j
.text:000000000000EF30                 mov     qword ptr [rbp+18h], 0
.text:000000000000EF38                 mov     [rsp+0A8h+var_49], 0
.text:000000000000EF3D                 jmp     loc_EA2B
.text:000000000000EF3D ; ---------------------------------------------------------------------------
.text:000000000000EF42                 align 8
.text:000000000000EF48
.text:000000000000EF48 loc_EF48:                               ; CODE XREF: fts_build+481↑j
.text:000000000000EF48                 xor     edx, edx
.text:000000000000EF4A                 cmp     qword ptr [rbp+58h], 0
.text:000000000000EF4F                 setnz   dl
.text:000000000000EF52                 shl     edx, 11h
.text:000000000000EF55                 jmp     loc_EE47
.text:000000000000EF55 ; ---------------------------------------------------------------------------
.text:000000000000EF5A                 align 20h
.text:000000000000EF60
.text:000000000000EF60 loc_EF60:                               ; CODE XREF: fts_build+48↑j
.text:000000000000EF60                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000EF64                 call    _closedir
.text:000000000000EF69                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000EF6E                 mov     qword ptr [rbp+18h], 0
.text:000000000000EF76                 jz      loc_F19B
.text:000000000000EF7C
.text:000000000000EF7C loc_EF7C:                               ; CODE XREF: fts_build+7D5↓j
.text:000000000000EF7C                                         ; fts_build+7F0↓j
.text:000000000000EF7C                 mov     [rsp+0A8h+ptr], 0
.text:000000000000EF85
.text:000000000000EF85 loc_EF85:                               ; CODE XREF: fts_build+637↓j
.text:000000000000EF85                                         ; fts_build+69C↓j ...
.text:000000000000EF85                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000000EF8A                 xor     rbx, fs:28h
.text:000000000000EF93                 mov     rax, [rsp+0A8h+ptr]
.text:000000000000EF98                 jnz     loc_F371
.text:000000000000EF9E                 add     rsp, 78h
.text:000000000000EFA2                 pop     rbx
.text:000000000000EFA3                 pop     rbp
.text:000000000000EFA4                 pop     r12
.text:000000000000EFA6                 pop     r13
.text:000000000000EFA8                 pop     r14
.text:000000000000EFAA                 pop     r15
.text:000000000000EFAC                 retn
.text:000000000000EFAC ; ---------------------------------------------------------------------------
.text:000000000000EFAD                 align 10h
.text:000000000000EFB0
.text:000000000000EFB0 loc_EFB0:                               ; CODE XREF: fts_build+4CC↑j
.text:000000000000EFB0                 lea     rbx, [r15+58h]
.text:000000000000EFB4                 mov     rdx, rbp
.text:000000000000EFB7                 mov     rsi, rbx
.text:000000000000EFBA                 call    leave_dir_isra_12
.text:000000000000EFBF                 xor     edx, edx
.text:000000000000EFC1                 mov     rsi, rbp
.text:000000000000EFC4                 mov     rdi, r15
.text:000000000000EFC7                 call    fts_stat
.text:000000000000EFCC                 mov     edi, [r15+48h]
.text:000000000000EFD0                 mov     rdx, rbp
.text:000000000000EFD3                 mov     rsi, rbx
.text:000000000000EFD6                 call    enter_dir_isra_10
.text:000000000000EFDB                 test    al, al
.text:000000000000EFDD                 jnz     loc_EE92
.text:000000000000EFE3                 call    ___errno_location
.text:000000000000EFE8                 mov     [rsp+0A8h+ptr], 0
.text:000000000000EFF1                 mov     dword ptr [rax], 0Ch
.text:000000000000EFF7                 jmp     short loc_EF85
.text:000000000000EFF7 ; ---------------------------------------------------------------------------
.text:000000000000EFF9                 align 20h
.text:000000000000F000
.text:000000000000F000 loc_F000:                               ; CODE XREF: fts_build+2CF↑j
.text:000000000000F000                                         ; fts_build+2DD↑j ...
.text:000000000000F000                 mov     [rsp+0A8h+var_4A], 0
.text:000000000000F005                 jmp     loc_EB7B
.text:000000000000F005 ; ---------------------------------------------------------------------------
.text:000000000000F00A                 align 10h
.text:000000000000F010
.text:000000000000F010 loc_F010:                               ; CODE XREF: fts_build+237↑j
.text:000000000000F010                                         ; fts_build+26A↑j
.text:000000000000F010                 mov     rdi, r13        ; ptr
.text:000000000000F013                 mov     rbp, [rsp+0A8h+var_88]
.text:000000000000F018                 mov     ebx, [r12]
.text:000000000000F01C                 call    free
.text:000000000000F021                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000F026                 call    fts_lfree
.text:000000000000F02B                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000F02F                 call    _closedir
.text:000000000000F034                 mov     r9d, 7
.text:000000000000F03A                 mov     qword ptr [rbp+18h], 0
.text:000000000000F042                 mov     [rsp+0A8h+ptr], 0
.text:000000000000F04B                 mov     [rbp+70h], r9w
.text:000000000000F050                 or      dword ptr [r15+48h], 2000h
.text:000000000000F058                 mov     [r12], ebx
.text:000000000000F05C                 jmp     loc_EF85
.text:000000000000F05C ; ---------------------------------------------------------------------------
.text:000000000000F061                 align 8
.text:000000000000F068
.text:000000000000F068 loc_F068:                               ; CODE XREF: fts_build+1DB↑j
.text:000000000000F068                 mov     rbp, rax
.text:000000000000F06B
.text:000000000000F06B loc_F06B:                               ; CODE XREF: fts_build+7B5↓j
.text:000000000000F06B                                         ; fts_build+7C8↓j
.text:000000000000F06B                 cmp     [rsp+0A8h+var_4B], 0
.text:000000000000F070                 jnz     loc_ECD8
.text:000000000000F076
.text:000000000000F076 loc_F076:                               ; CODE XREF: fts_build+312↑j
.text:000000000000F076                                         ; fts_build+368↑j
.text:000000000000F076                 test    byte ptr [r15+48h], 4
.text:000000000000F07B                 jz      short loc_F09B
.text:000000000000F07D                 mov     rax, [rsp+0A8h+var_90]
.text:000000000000F082                 cmp     [r15+30h], rax
.text:000000000000F086                 jz      short loc_F08D
.text:000000000000F088                 test    rbx, rbx
.text:000000000000F08B                 jnz     short loc_F093
.text:000000000000F08D
.text:000000000000F08D loc_F08D:                               ; CODE XREF: fts_build+6C6↑j
.text:000000000000F08D                 sub     [rsp+0A8h+dest], 1
.text:000000000000F093
.text:000000000000F093 loc_F093:                               ; CODE XREF: fts_build+6CB↑j
.text:000000000000F093                 mov     rax, [rsp+0A8h+dest]
.text:000000000000F098                 mov     byte ptr [rax], 0
.text:000000000000F09B
.text:000000000000F09B loc_F09B:                               ; CODE XREF: fts_build+6BB↑j
.text:000000000000F09B                 cmp     [rsp+0A8h+var_58], 0
.text:000000000000F0A1                 jnz     short loc_F110
.text:000000000000F0A3                 cmp     [rsp+0A8h+var_49], 0
.text:000000000000F0A8                 jz      short loc_F110
.text:000000000000F0AA                 cmp     [rsp+0A8h+var_50], 1
.text:000000000000F0AF                 jz      short loc_F0F0
.text:000000000000F0B1                 test    rbx, rbx
.text:000000000000F0B4                 jz      short loc_F0F0
.text:000000000000F0B6
.text:000000000000F0B6 loc_F0B6:                               ; CODE XREF: fts_build+753↓j
.text:000000000000F0B6                 cmp     [rsp+0A8h+var_4A], 0
.text:000000000000F0BB                 jnz     loc_F1B8
.text:000000000000F0C1                 cmp     qword ptr [r15+40h], 0
.text:000000000000F0C6                 jz      loc_EF85
.text:000000000000F0CC                 cmp     rbx, 1
.text:000000000000F0D0                 jz      loc_EF85
.text:000000000000F0D6                 mov     rsi, [rsp+0A8h+ptr]
.text:000000000000F0DB                 mov     rdx, rbx
.text:000000000000F0DE                 mov     rdi, r15
.text:000000000000F0E1                 call    fts_sort
.text:000000000000F0E6                 mov     [rsp+0A8h+ptr], rax
.text:000000000000F0EB                 jmp     loc_EF85
.text:000000000000F0F0 ; ---------------------------------------------------------------------------
.text:000000000000F0F0
.text:000000000000F0F0 loc_F0F0:                               ; CODE XREF: fts_build+6EF↑j
.text:000000000000F0F0                                         ; fts_build+6F4↑j
.text:000000000000F0F0                 cmp     qword ptr [rbp+58h], 0
.text:000000000000F0F5                 jnz     loc_F226
.text:000000000000F0FB                 mov     rdi, r15
.text:000000000000F0FE                 call    restore_initial_cwd
.text:000000000000F103                 test    eax, eax
.text:000000000000F105                 setnz   al
.text:000000000000F108
.text:000000000000F108 loc_F108:                               ; CODE XREF: fts_build+883↓j
.text:000000000000F108                 test    al, al
.text:000000000000F10A                 jnz     loc_F293
.text:000000000000F110
.text:000000000000F110 loc_F110:                               ; CODE XREF: fts_build+6E1↑j
.text:000000000000F110                                         ; fts_build+6E8↑j
.text:000000000000F110                 test    rbx, rbx
.text:000000000000F113                 jnz     short loc_F0B6
.text:000000000000F115                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000F11A                 jz      loc_F2D8
.text:000000000000F120
.text:000000000000F120 loc_F120:                               ; CODE XREF: fts_build+920↓j
.text:000000000000F120                                         ; fts_build+92A↓j ...
.text:000000000000F120                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000F125                 call    fts_lfree
.text:000000000000F12A                 mov     [rsp+0A8h+ptr], 0
.text:000000000000F133                 jmp     loc_EF85
.text:000000000000F133 ; ---------------------------------------------------------------------------
.text:000000000000F138                 align 20h
.text:000000000000F140
.text:000000000000F140 loc_F140:                               ; CODE XREF: fts_build+1FD↑j
.text:000000000000F140                 mov     eax, [r12]
.text:000000000000F144                 mov     rbp, [rsp+0A8h+var_88]
.text:000000000000F149                 test    eax, eax
.text:000000000000F14B                 jz      short loc_F16E
.text:000000000000F14D                 test    rbx, rbx
.text:000000000000F150                 mov     [rbp+40h], eax
.text:000000000000F153                 jnz     loc_F289
.text:000000000000F159                 cmp     [rsp+0A8h+var_58], 0
.text:000000000000F15F                 mov     eax, 4
.text:000000000000F164                 jnz     loc_F289
.text:000000000000F16A
.text:000000000000F16A loc_F16A:                               ; CODE XREF: fts_build+8CE↓j
.text:000000000000F16A                 mov     [rbp+70h], ax
.text:000000000000F16E
.text:000000000000F16E loc_F16E:                               ; CODE XREF: fts_build+78B↑j
.text:000000000000F16E                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000F172                 test    rdi, rdi
.text:000000000000F175                 jz      loc_F06B
.text:000000000000F17B                 call    _closedir
.text:000000000000F180                 mov     qword ptr [rbp+18h], 0
.text:000000000000F188                 jmp     loc_F06B
.text:000000000000F188 ; ---------------------------------------------------------------------------
.text:000000000000F18D                 align 10h
.text:000000000000F190
.text:000000000000F190 loc_F190:                               ; CODE XREF: fts_build+4B1↑j
.text:000000000000F190                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000F195                 jnz     loc_EF7C
.text:000000000000F19B
.text:000000000000F19B loc_F19B:                               ; CODE XREF: fts_build+5B6↑j
.text:000000000000F19B                 mov     r10d, 4
.text:000000000000F1A1                 mov     [rbp+70h], r10w
.text:000000000000F1A6                 call    ___errno_location
.text:000000000000F1AB                 mov     eax, [rax]
.text:000000000000F1AD                 mov     [rbp+40h], eax
.text:000000000000F1B0                 jmp     loc_EF7C
.text:000000000000F1B0 ; ---------------------------------------------------------------------------
.text:000000000000F1B5                 align 8
.text:000000000000F1B8
.text:000000000000F1B8 loc_F1B8:                               ; CODE XREF: fts_build+6FB↑j
.text:000000000000F1B8                 lea     rax, fts_compare_ino
.text:000000000000F1BF                 mov     rsi, [rsp+0A8h+ptr]
.text:000000000000F1C4                 mov     rdx, rbx
.text:000000000000F1C7                 mov     rdi, r15
.text:000000000000F1CA                 mov     [r15+40h], rax
.text:000000000000F1CE                 call    fts_sort
.text:000000000000F1D3                 mov     qword ptr [r15+40h], 0
.text:000000000000F1DB                 mov     [rsp+0A8h+ptr], rax
.text:000000000000F1E0                 jmp     loc_EF85
.text:000000000000F1E0 ; ---------------------------------------------------------------------------
.text:000000000000F1E5                 align 8
.text:000000000000F1E8
.text:000000000000F1E8 loc_F1E8:                               ; CODE XREF: fts_build+53↑j
.text:000000000000F1E8                 mov     [rsp+0A8h+var_70], 186A0h
.text:000000000000F1F1                 mov     [rsp+0A8h+var_49], 1
.text:000000000000F1F6                 mov     edi, [r15+48h]
.text:000000000000F1FA                 jmp     loc_EA2B
.text:000000000000F1FA ; ---------------------------------------------------------------------------
.text:000000000000F1FF                 align 20h
.text:000000000000F200
.text:000000000000F200 loc_F200:                               ; CODE XREF: fts_build+4ED↑j
.text:000000000000F200                                         ; fts_build+943↓j
.text:000000000000F200                 mov     [rsp+0A8h+var_49], 0
.text:000000000000F205                 mov     edi, [r15+48h]
.text:000000000000F209                 jmp     loc_EA2B
.text:000000000000F209 ; ---------------------------------------------------------------------------
.text:000000000000F20E                 align 10h
.text:000000000000F210
.text:000000000000F210 loc_F210:                               ; CODE XREF: fts_build+4BC↑j
.text:000000000000F210                 xor     edx, edx
.text:000000000000F212                 mov     rsi, rbp
.text:000000000000F215                 mov     rdi, r15
.text:000000000000F218                 call    fts_stat
.text:000000000000F21D                 mov     [rbp+70h], ax
.text:000000000000F221                 jmp     loc_EE92
.text:000000000000F226 ; ---------------------------------------------------------------------------
.text:000000000000F226
.text:000000000000F226 loc_F226:                               ; CODE XREF: fts_build+735↑j
.text:000000000000F226                 mov     rsi, [rbp+8]
.text:000000000000F22A                 lea     rcx, asc_2269B  ; ".."
.text:000000000000F231                 mov     edx, 0FFFFFFFFh
.text:000000000000F236                 mov     rdi, r15
.text:000000000000F239                 call    fts_safe_changedir
.text:000000000000F23E                 test    eax, eax
.text:000000000000F240                 setnz   al
.text:000000000000F243                 jmp     loc_F108
.text:000000000000F248 ; ---------------------------------------------------------------------------
.text:000000000000F248
.text:000000000000F248 loc_F248:                               ; CODE XREF: fts_build+522↑j
.text:000000000000F248                 xor     ecx, ecx
.text:000000000000F24A                 mov     edx, eax
.text:000000000000F24C                 mov     rsi, rbp
.text:000000000000F24F                 mov     rdi, r15
.text:000000000000F252                 call    fts_safe_changedir
.text:000000000000F257                 test    eax, eax
.text:000000000000F259                 jnz     loc_EEE8
.text:000000000000F25F                 jmp     loc_EA22
.text:000000000000F264 ; ---------------------------------------------------------------------------
.text:000000000000F264
.text:000000000000F264 loc_F264:                               ; CODE XREF: fts_build+501↑j
.text:000000000000F264                 cmp     qword ptr [rbp+88h], 2
.text:000000000000F26C                 jnz     loc_EEC7
.text:000000000000F272                 mov     esi, eax
.text:000000000000F274                 mov     rdi, rbp
.text:000000000000F277                 call    leaf_optimization
.text:000000000000F27C                 test    eax, eax
.text:000000000000F27E                 jnz     short loc_F2FE
.text:000000000000F280                 mov     eax, [rsp+0A8h+fd]
.text:000000000000F284                 jmp     loc_EEC7
.text:000000000000F289 ; ---------------------------------------------------------------------------
.text:000000000000F289
.text:000000000000F289 loc_F289:                               ; CODE XREF: fts_build+793↑j
.text:000000000000F289                                         ; fts_build+7A4↑j
.text:000000000000F289                 mov     eax, 7
.text:000000000000F28E                 jmp     loc_F16A
.text:000000000000F293 ; ---------------------------------------------------------------------------
.text:000000000000F293
.text:000000000000F293 loc_F293:                               ; CODE XREF: fts_build+74A↑j
.text:000000000000F293                 mov     edi, 7
.text:000000000000F298                 mov     [rbp+70h], di
.text:000000000000F29C                 or      dword ptr [r15+48h], 2000h
.text:000000000000F2A4                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000F2A9                 call    fts_lfree
.text:000000000000F2AE                 mov     [rsp+0A8h+ptr], 0
.text:000000000000F2B7                 jmp     loc_EF85
.text:000000000000F2BC ; ---------------------------------------------------------------------------
.text:000000000000F2BC
.text:000000000000F2BC loc_F2BC:                               ; CODE XREF: fts_build+51A↑j
.text:000000000000F2BC                 mov     edi, eax        ; fd
.text:000000000000F2BE                 mov     edx, 3
.text:000000000000F2C3                 mov     esi, 406h
.text:000000000000F2C8                 xor     eax, eax
.text:000000000000F2CA                 call    rpl_fcntl
.text:000000000000F2CF                 mov     [rsp+0A8h+fd], eax
.text:000000000000F2D3                 jmp     loc_EEE0
.text:000000000000F2D8 ; ---------------------------------------------------------------------------
.text:000000000000F2D8
.text:000000000000F2D8 loc_F2D8:                               ; CODE XREF: fts_build+75A↑j
.text:000000000000F2D8                 movzx   eax, word ptr [rbp+70h]
.text:000000000000F2DC                 cmp     ax, 7
.text:000000000000F2E0                 jz      loc_F120
.text:000000000000F2E6                 cmp     ax, 4
.text:000000000000F2EA                 jz      loc_F120
.text:000000000000F2F0                 mov     esi, 6
.text:000000000000F2F5                 mov     [rbp+70h], si
.text:000000000000F2F9                 jmp     loc_F120
.text:000000000000F2FE ; ---------------------------------------------------------------------------
.text:000000000000F2FE
.text:000000000000F2FE loc_F2FE:                               ; CODE XREF: fts_build+8BE↑j
.text:000000000000F2FE                 cmp     [rsp+0A8h+var_50], 3
.text:000000000000F303                 jnz     loc_F200
.text:000000000000F309                 mov     eax, [rsp+0A8h+fd]
.text:000000000000F30D                 xor     r12d, r12d
.text:000000000000F310                 mov     ebx, 1
.text:000000000000F315                 jmp     loc_EED5
.text:000000000000F315 ; ---------------------------------------------------------------------------
.text:000000000000F31A                 align 20h
.text:000000000000F320
.text:000000000000F320 loc_F320:                               ; CODE XREF: fts_build+100↑j
.text:000000000000F320                 mov     rdi, r13        ; ptr
.text:000000000000F323                 mov     rbp, [rsp+0A8h+var_88]
.text:000000000000F328                 call    free
.text:000000000000F32D                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000F332                 call    fts_lfree
.text:000000000000F337                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000F33B                 call    _closedir
.text:000000000000F340                 mov     r8d, 7
.text:000000000000F346                 mov     qword ptr [rbp+18h], 0
.text:000000000000F34E                 mov     [rsp+0A8h+ptr], 0
.text:000000000000F357                 mov     [rbp+70h], r8w
.text:000000000000F35C                 or      dword ptr [r15+48h], 2000h
.text:000000000000F364                 mov     dword ptr [r12], 24h ; '$'
.text:000000000000F36C                 jmp     loc_EF85
.text:000000000000F371 ; ---------------------------------------------------------------------------
.text:000000000000F371
.text:000000000000F371 loc_F371:                               ; CODE XREF: fts_build+5D8↑j
.text:000000000000F371                 call    ___stack_chk_fail
.text:000000000000F376 ; ---------------------------------------------------------------------------
.text:000000000000F376
.text:000000000000F376 loc_F376:                               ; CODE XREF: fts_build+429↑j
.text:000000000000F376                 lea     rax, CSWTCH_53
.text:000000000000F37D                 mov     eax, [rax+rdx*4]
.text:000000000000F380                 mov     [r13+90h], eax
.text:000000000000F387                 mov     eax, 1
.text:000000000000F38C                 jmp     loc_EB4A
.text:000000000000F38C ; } // starts at E9C0
.text:000000000000F38C fts_build       endp
.text:000000000000F38C
.text:000000000000F38C ; ---------------------------------------------------------------------------
.text:000000000000F391                 align 20h
.text:000000000000F3A0
.text:000000000000F3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F3A0
.text:000000000000F3A0
.text:000000000000F3A0                 public rpl_fts_open
.text:000000000000F3A0 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:000000000000F3A0
.text:000000000000F3A0 var_50          = qword ptr -50h
.text:000000000000F3A0 var_42          = byte ptr -42h
.text:000000000000F3A0 var_41          = byte ptr -41h
.text:000000000000F3A0 var_40          = qword ptr -40h
.text:000000000000F3A0
.text:000000000000F3A0 ; __unwind {
.text:000000000000F3A0                 push    r15
.text:000000000000F3A2                 push    r14
.text:000000000000F3A4                 push    r13
.text:000000000000F3A6                 push    r12
.text:000000000000F3A8                 push    rbp
.text:000000000000F3A9                 push    rbx
.text:000000000000F3AA                 sub     rsp, 28h
.text:000000000000F3AE                 test    esi, 0FFFFF000h
.text:000000000000F3B4                 jnz     loc_F738
.text:000000000000F3BA                 mov     eax, esi
.text:000000000000F3BC                 mov     ebp, esi
.text:000000000000F3BE                 and     eax, 204h
.text:000000000000F3C3                 cmp     eax, 204h
.text:000000000000F3C8                 jz      loc_F738
.text:000000000000F3CE                 test    sil, 12h
.text:000000000000F3D2                 jz      loc_F738
.text:000000000000F3D8                 mov     r13, rdi
.text:000000000000F3DB                 mov     esi, 1          ; size
.text:000000000000F3E0                 mov     edi, 80h        ; nmemb
.text:000000000000F3E5                 mov     r14, rdx
.text:000000000000F3E8                 call    _calloc
.text:000000000000F3ED                 test    rax, rax
.text:000000000000F3F0                 mov     rbx, rax
.text:000000000000F3F3                 jz      loc_F64E
.text:000000000000F3F9                 test    bpl, 2
.text:000000000000F3FD                 mov     [rax+40h], r14
.text:000000000000F401                 jnz     loc_F660
.text:000000000000F407                 mov     rdi, [r13+0]    ; s
.text:000000000000F40B                 mov     [rax+48h], ebp
.text:000000000000F40E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:000000000000F415                 test    rdi, rdi
.text:000000000000F418                 jz      loc_F67F
.text:000000000000F41E
.text:000000000000F41E loc_F41E:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:000000000000F41E                 mov     r15, r13
.text:000000000000F421                 xor     r12d, r12d
.text:000000000000F424                 nop     dword ptr [rax+00h]
.text:000000000000F428
.text:000000000000F428 loc_F428:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:000000000000F428                 call    _strlen
.text:000000000000F42D                 cmp     r12, rax
.text:000000000000F430                 cmovb   r12, rax
.text:000000000000F434                 add     r15, 8
.text:000000000000F438                 mov     rdi, [r15]
.text:000000000000F43B                 test    rdi, rdi
.text:000000000000F43E                 jnz     short loc_F428
.text:000000000000F440                 lea     rdx, [r12+1]
.text:000000000000F445                 mov     eax, 1000h
.text:000000000000F44A                 cmp     rdx, 1000h
.text:000000000000F451                 cmovb   rdx, rax
.text:000000000000F455
.text:000000000000F455 loc_F455:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:000000000000F455                 lea     rsi, [rbx+30h]
.text:000000000000F459                 lea     rdi, [rbx+20h]
.text:000000000000F45D                 call    fts_palloc_isra_2
.text:000000000000F462                 test    al, al
.text:000000000000F464                 mov     [rsp+58h+var_42], al
.text:000000000000F468                 jz      loc_F709
.text:000000000000F46E                 mov     rsi, [r13+0]
.text:000000000000F472                 test    rsi, rsi
.text:000000000000F475                 jz      loc_F720
.text:000000000000F47B                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:000000000000F482                 xor     edx, edx
.text:000000000000F484                 mov     rdi, rbx
.text:000000000000F487                 call    fts_alloc
.text:000000000000F48C                 test    rax, rax
.text:000000000000F48F                 mov     r15, rax
.text:000000000000F492                 jz      loc_F700
.text:000000000000F498                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F49F                 test    r14, r14
.text:000000000000F4A2                 mov     rsi, [r13+0]
.text:000000000000F4A6                 mov     [r15+58h], rax
.text:000000000000F4AA                 mov     [r15+68h], rax
.text:000000000000F4AE                 jz      short loc_F4BD
.text:000000000000F4B0
.text:000000000000F4B0 loc_F4B0:                               ; CODE XREF: rpl_fts_open+386↓j
.text:000000000000F4B0                 mov     eax, [rbx+48h]
.text:000000000000F4B3                 shr     eax, 0Ah
.text:000000000000F4B6                 and     eax, 1
.text:000000000000F4B9                 mov     [rsp+58h+var_42], al
.text:000000000000F4BD
.text:000000000000F4BD loc_F4BD:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:000000000000F4BD                 test    rsi, rsi
.text:000000000000F4C0                 jz      loc_F72C
.text:000000000000F4C6                 shr     ebp, 0Bh
.text:000000000000F4C9                 mov     [rsp+58h+var_40], 0
.text:000000000000F4D2                 xor     r12d, r12d
.text:000000000000F4D5                 xor     ebp, 1
.text:000000000000F4D8                 mov     eax, ebp
.text:000000000000F4DA                 xor     ebp, ebp
.text:000000000000F4DC                 and     eax, 1
.text:000000000000F4DF                 mov     [rsp+58h+var_41], al
.text:000000000000F4E3                 jmp     short loc_F55C
.text:000000000000F4E3 ; ---------------------------------------------------------------------------
.text:000000000000F4E5                 align 8
.text:000000000000F4E8
.text:000000000000F4E8 loc_F4E8:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:000000000000F4E8                                         ; rpl_fts_open+1DD↓j ...
.text:000000000000F4E8                 mov     rdx, rax
.text:000000000000F4EB                 mov     rdi, rbx
.text:000000000000F4EE                 call    fts_alloc
.text:000000000000F4F3                 test    rax, rax
.text:000000000000F4F6                 mov     rcx, rax
.text:000000000000F4F9                 jz      loc_F6F0
.text:000000000000F4FF                 mov     qword ptr [rax+58h], 0
.text:000000000000F507                 mov     [rax+8], r15
.text:000000000000F50B                 lea     rax, [rax+108h]
.text:000000000000F512                 test    r12, r12
.text:000000000000F515                 mov     [rcx+30h], rax
.text:000000000000F519                 jz      loc_F690
.text:000000000000F51F                 cmp     [rsp+58h+var_42], 0
.text:000000000000F524                 jz      loc_F690
.text:000000000000F52A                 mov     esi, 0Bh
.text:000000000000F52F                 test    r14, r14
.text:000000000000F532                 mov     qword ptr [rcx+0A8h], 2
.text:000000000000F53D                 mov     [rcx+70h], si
.text:000000000000F541                 jz      loc_F6D0
.text:000000000000F547
.text:000000000000F547 loc_F547:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:000000000000F547                 mov     [rcx+10h], r12
.text:000000000000F54B                 mov     r12, rcx
.text:000000000000F54E
.text:000000000000F54E loc_F54E:                               ; CODE XREF: rpl_fts_open+329↓j
.text:000000000000F54E                                         ; rpl_fts_open+346↓j
.text:000000000000F54E                 add     rbp, 1
.text:000000000000F552                 mov     rsi, [r13+rbp*8+0]
.text:000000000000F557                 test    rsi, rsi
.text:000000000000F55A                 jz      short loc_F5B0
.text:000000000000F55C
.text:000000000000F55C loc_F55C:                               ; CODE XREF: rpl_fts_open+143↑j
.text:000000000000F55C                 mov     rdi, rsi        ; s
.text:000000000000F55F                 mov     [rsp+58h+var_50], rsi
.text:000000000000F564                 call    _strlen
.text:000000000000F569                 cmp     rax, 2
.text:000000000000F56D                 mov     rsi, [rsp+58h+var_50]
.text:000000000000F572                 jbe     loc_F4E8
.text:000000000000F578                 cmp     [rsp+58h+var_41], 0
.text:000000000000F57D                 jz      loc_F4E8
.text:000000000000F583                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:000000000000F588                 jnz     loc_F4E8
.text:000000000000F58E                 xchg    ax, ax
.text:000000000000F590
.text:000000000000F590 loc_F590:                               ; CODE XREF: rpl_fts_open+203↓j
.text:000000000000F590                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:000000000000F595                 jnz     loc_F4E8
.text:000000000000F59B                 sub     rax, 1
.text:000000000000F59F                 cmp     rax, 1
.text:000000000000F5A3                 jnz     short loc_F590
.text:000000000000F5A5                 jmp     loc_F4E8
.text:000000000000F5A5 ; ---------------------------------------------------------------------------
.text:000000000000F5AA                 align 10h
.text:000000000000F5B0
.text:000000000000F5B0 loc_F5B0:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:000000000000F5B0                 test    r14, r14
.text:000000000000F5B3                 jz      short loc_F5CC
.text:000000000000F5B5                 cmp     rbp, 1
.text:000000000000F5B9                 jbe     short loc_F5CC
.text:000000000000F5BB                 mov     rsi, r12
.text:000000000000F5BE                 mov     rdx, rbp
.text:000000000000F5C1                 mov     rdi, rbx
.text:000000000000F5C4                 call    fts_sort
.text:000000000000F5C9                 mov     r12, rax
.text:000000000000F5CC
.text:000000000000F5CC loc_F5CC:                               ; CODE XREF: rpl_fts_open+213↑j
.text:000000000000F5CC                                         ; rpl_fts_open+219↑j ...
.text:000000000000F5CC                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:000000000000F5D3                 xor     edx, edx
.text:000000000000F5D5                 mov     rdi, rbx
.text:000000000000F5D8                 call    fts_alloc
.text:000000000000F5DD                 test    rax, rax
.text:000000000000F5E0                 mov     [rbx], rax
.text:000000000000F5E3                 jz      loc_F6F0
.text:000000000000F5E9                 mov     edi, [rbx+48h]
.text:000000000000F5EC                 mov     edx, 9
.text:000000000000F5F1                 lea     rsi, [rbx+58h]
.text:000000000000F5F5                 mov     [rax+10h], r12
.text:000000000000F5F9                 mov     [rax+70h], dx
.text:000000000000F5FD                 mov     qword ptr [rax+58h], 1
.text:000000000000F605                 call    setup_dir_isra_4
.text:000000000000F60A                 test    al, al
.text:000000000000F60C                 jz      loc_F6F0
.text:000000000000F612                 mov     esi, [rbx+48h]
.text:000000000000F615                 test    esi, 204h
.text:000000000000F61B                 jnz     short loc_F640
.text:000000000000F61D                 mov     edi, [rbx+2Ch]
.text:000000000000F620                 lea     rdx, asc_2269B+1 ; "."
.text:000000000000F627                 call    diropen_isra_6
.text:000000000000F62C                 test    eax, eax
.text:000000000000F62E                 mov     [rbx+28h], eax
.text:000000000000F631                 jns     short loc_F640
.text:000000000000F633                 or      dword ptr [rbx+48h], 4
.text:000000000000F637                 nop     word ptr [rax+rax+00000000h]
.text:000000000000F640
.text:000000000000F640 loc_F640:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:000000000000F640                                         ; rpl_fts_open+291↑j
.text:000000000000F640                 lea     rdi, [rbx+60h]
.text:000000000000F644                 mov     esi, 0FFFFFFFFh
.text:000000000000F649                 call    i_ring_init
.text:000000000000F64E
.text:000000000000F64E loc_F64E:                               ; CODE XREF: rpl_fts_open+53↑j
.text:000000000000F64E                                         ; rpl_fts_open+373↓j ...
.text:000000000000F64E                 add     rsp, 28h
.text:000000000000F652                 mov     rax, rbx
.text:000000000000F655                 pop     rbx
.text:000000000000F656                 pop     rbp
.text:000000000000F657                 pop     r12
.text:000000000000F659                 pop     r13
.text:000000000000F65B                 pop     r14
.text:000000000000F65D                 pop     r15
.text:000000000000F65F                 retn
.text:000000000000F660 ; ---------------------------------------------------------------------------
.text:000000000000F660
.text:000000000000F660 loc_F660:                               ; CODE XREF: rpl_fts_open+61↑j
.text:000000000000F660                 mov     rdi, [r13+0]
.text:000000000000F664                 mov     eax, ebp
.text:000000000000F666                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:000000000000F66D                 and     ah, 0FDh
.text:000000000000F670                 or      eax, 4
.text:000000000000F673                 test    rdi, rdi
.text:000000000000F676                 mov     [rbx+48h], eax
.text:000000000000F679                 jnz     loc_F41E
.text:000000000000F67F
.text:000000000000F67F loc_F67F:                               ; CODE XREF: rpl_fts_open+78↑j
.text:000000000000F67F                 mov     edx, 1000h
.text:000000000000F684                 jmp     loc_F455
.text:000000000000F684 ; ---------------------------------------------------------------------------
.text:000000000000F689                 align 10h
.text:000000000000F690
.text:000000000000F690 loc_F690:                               ; CODE XREF: rpl_fts_open+179↑j
.text:000000000000F690                                         ; rpl_fts_open+184↑j
.text:000000000000F690                 xor     edx, edx
.text:000000000000F692                 mov     rsi, rcx
.text:000000000000F695                 mov     rdi, rbx
.text:000000000000F698                 mov     [rsp+58h+var_50], rcx
.text:000000000000F69D                 call    fts_stat
.text:000000000000F6A2                 mov     rcx, [rsp+58h+var_50]
.text:000000000000F6A7                 test    r14, r14
.text:000000000000F6AA                 mov     [rcx+70h], ax
.text:000000000000F6AE                 jnz     loc_F547
.text:000000000000F6B4                 test    r12, r12
.text:000000000000F6B7                 mov     qword ptr [rcx+10h], 0
.text:000000000000F6BF                 jnz     short loc_F6D8
.text:000000000000F6C1                 mov     [rsp+58h+var_40], rcx
.text:000000000000F6C6                 mov     r12, rcx
.text:000000000000F6C9                 jmp     loc_F54E
.text:000000000000F6C9 ; ---------------------------------------------------------------------------
.text:000000000000F6CE                 align 10h
.text:000000000000F6D0
.text:000000000000F6D0 loc_F6D0:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:000000000000F6D0                 mov     qword ptr [rcx+10h], 0
.text:000000000000F6D8
.text:000000000000F6D8 loc_F6D8:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:000000000000F6D8                 mov     rax, [rsp+58h+var_40]
.text:000000000000F6DD                 mov     [rsp+58h+var_40], rcx
.text:000000000000F6E2                 mov     [rax+10h], rcx
.text:000000000000F6E6                 jmp     loc_F54E
.text:000000000000F6E6 ; ---------------------------------------------------------------------------
.text:000000000000F6EB                 align 10h
.text:000000000000F6F0
.text:000000000000F6F0 loc_F6F0:                               ; CODE XREF: rpl_fts_open+159↑j
.text:000000000000F6F0                                         ; rpl_fts_open+243↑j ...
.text:000000000000F6F0                 mov     rdi, r12        ; ptr
.text:000000000000F6F3                 call    fts_lfree
.text:000000000000F6F8                 mov     rdi, r15        ; ptr
.text:000000000000F6FB                 call    free
.text:000000000000F700
.text:000000000000F700 loc_F700:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:000000000000F700                 mov     rdi, [rbx+20h]  ; ptr
.text:000000000000F704                 call    free
.text:000000000000F709
.text:000000000000F709 loc_F709:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:000000000000F709                 mov     rdi, rbx        ; ptr
.text:000000000000F70C                 xor     ebx, ebx
.text:000000000000F70E                 call    free
.text:000000000000F713                 jmp     loc_F64E
.text:000000000000F713 ; ---------------------------------------------------------------------------
.text:000000000000F718                 align 20h
.text:000000000000F720
.text:000000000000F720 loc_F720:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:000000000000F720                 xor     r15d, r15d
.text:000000000000F723                 test    r14, r14
.text:000000000000F726                 jnz     loc_F4B0
.text:000000000000F72C
.text:000000000000F72C loc_F72C:                               ; CODE XREF: rpl_fts_open+120↑j
.text:000000000000F72C                 xor     r12d, r12d
.text:000000000000F72F                 jmp     loc_F5CC
.text:000000000000F72F ; ---------------------------------------------------------------------------
.text:000000000000F734                 align 8
.text:000000000000F738
.text:000000000000F738 loc_F738:                               ; CODE XREF: rpl_fts_open+14↑j
.text:000000000000F738                                         ; rpl_fts_open+28↑j ...
.text:000000000000F738                 call    ___errno_location
.text:000000000000F73D                 xor     ebx, ebx
.text:000000000000F73F                 mov     dword ptr [rax], 16h
.text:000000000000F745                 jmp     loc_F64E
.text:000000000000F745 ; } // starts at F3A0
.text:000000000000F745 rpl_fts_open    endp
.text:000000000000F745
.text:000000000000F745 ; ---------------------------------------------------------------------------
.text:000000000000F74A                 align 10h
.text:000000000000F750
.text:000000000000F750 ; =============== S U B R O U T I N E =======================================
.text:000000000000F750
.text:000000000000F750
.text:000000000000F750 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:000000000000F750                 public rpl_fts_close
.text:000000000000F750 rpl_fts_close   proc near               ; CODE XREF: main+CA9↑p
.text:000000000000F750 ; __unwind {
.text:000000000000F750                 push    r12
.text:000000000000F752                 push    rbp
.text:000000000000F753                 mov     rbp, rdi
.text:000000000000F756                 push    rbx
.text:000000000000F757                 mov     rdi, [rdi]
.text:000000000000F75A                 test    rdi, rdi
.text:000000000000F75D                 jz      short loc_F7A3
.text:000000000000F75F                 cmp     qword ptr [rdi+58h], 0
.text:000000000000F764                 jns     short loc_F77F
.text:000000000000F766                 jmp     loc_F880
.text:000000000000F766 ; ---------------------------------------------------------------------------
.text:000000000000F76B                 align 10h
.text:000000000000F770
.text:000000000000F770 loc_F770:                               ; CODE XREF: rpl_fts_close+36↓j
.text:000000000000F770                 call    free
.text:000000000000F775                 cmp     qword ptr [rbx+58h], 0
.text:000000000000F77A                 mov     rdi, rbx        ; ptr
.text:000000000000F77D                 js      short loc_F79B
.text:000000000000F77F
.text:000000000000F77F loc_F77F:                               ; CODE XREF: rpl_fts_close+14↑j
.text:000000000000F77F                                         ; rpl_fts_close+49↓j
.text:000000000000F77F                 mov     rbx, [rdi+10h]
.text:000000000000F783                 test    rbx, rbx
.text:000000000000F786                 jnz     short loc_F770
.text:000000000000F788                 mov     rbx, [rdi+8]
.text:000000000000F78C                 call    free
.text:000000000000F791                 cmp     qword ptr [rbx+58h], 0
.text:000000000000F796                 mov     rdi, rbx
.text:000000000000F799                 jns     short loc_F77F
.text:000000000000F79B
.text:000000000000F79B loc_F79B:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:000000000000F79B                 mov     rdi, rbx        ; ptr
.text:000000000000F79E                 call    free
.text:000000000000F7A3
.text:000000000000F7A3 loc_F7A3:                               ; CODE XREF: rpl_fts_close+D↑j
.text:000000000000F7A3                                         ; rpl_fts_close+13B↓j
.text:000000000000F7A3                 mov     rdi, [rbp+8]    ; ptr
.text:000000000000F7A7                 test    rdi, rdi
.text:000000000000F7AA                 jz      short loc_F7B1
.text:000000000000F7AC                 call    fts_lfree
.text:000000000000F7B1
.text:000000000000F7B1 loc_F7B1:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:000000000000F7B1                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000F7B5                 call    free
.text:000000000000F7BA                 mov     rdi, [rbp+20h]  ; ptr
.text:000000000000F7BE                 call    free
.text:000000000000F7C3                 mov     eax, [rbp+48h]
.text:000000000000F7C6                 test    ah, 2
.text:000000000000F7C9                 jz      short loc_F830
.text:000000000000F7CB                 mov     edi, [rbp+2Ch]  ; fd
.text:000000000000F7CE                 test    edi, edi
.text:000000000000F7D0                 jns     loc_F860
.text:000000000000F7D6
.text:000000000000F7D6 loc_F7D6:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:000000000000F7D6                                         ; rpl_fts_close+FA↓j ...
.text:000000000000F7D6                 xor     ebx, ebx
.text:000000000000F7D8
.text:000000000000F7D8 loc_F7D8:                               ; CODE XREF: rpl_fts_close+124↓j
.text:000000000000F7D8                                         ; rpl_fts_close+154↓j ...
.text:000000000000F7D8                 lea     rdi, [rbp+60h]
.text:000000000000F7DC                 call    fd_ring_clear
.text:000000000000F7E1                 mov     rdi, [rbp+50h]  ; ptr
.text:000000000000F7E5                 test    rdi, rdi
.text:000000000000F7E8                 jz      short loc_F7EF
.text:000000000000F7EA                 call    hash_free
.text:000000000000F7EF
.text:000000000000F7EF loc_F7EF:                               ; CODE XREF: rpl_fts_close+98↑j
.text:000000000000F7EF                 test    dword ptr [rbp+48h], 102h
.text:000000000000F7F6                 mov     rdi, [rbp+58h]  ; ptr
.text:000000000000F7FA                 jz      short loc_F820
.text:000000000000F7FC                 test    rdi, rdi
.text:000000000000F7FF                 jz      short loc_F806
.text:000000000000F801                 call    hash_free
.text:000000000000F806
.text:000000000000F806 loc_F806:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:000000000000F806                                         ; rpl_fts_close+D5↓j
.text:000000000000F806                 mov     rdi, rbp        ; ptr
.text:000000000000F809                 call    free
.text:000000000000F80E                 test    ebx, ebx
.text:000000000000F810                 jnz     loc_F8C1
.text:000000000000F816
.text:000000000000F816 loc_F816:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:000000000000F816                 mov     eax, ebx
.text:000000000000F818                 pop     rbx
.text:000000000000F819                 pop     rbp
.text:000000000000F81A                 pop     r12
.text:000000000000F81C                 retn
.text:000000000000F81C ; ---------------------------------------------------------------------------
.text:000000000000F81D                 align 20h
.text:000000000000F820
.text:000000000000F820 loc_F820:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:000000000000F820                 call    free
.text:000000000000F825                 jmp     short loc_F806
.text:000000000000F825 ; ---------------------------------------------------------------------------
.text:000000000000F827                 align 10h
.text:000000000000F830
.text:000000000000F830 loc_F830:                               ; CODE XREF: rpl_fts_close+79↑j
.text:000000000000F830                 test    al, 4
.text:000000000000F832                 jnz     short loc_F7D6
.text:000000000000F834                 mov     edi, [rbp+28h]  ; fd
.text:000000000000F837                 call    _fchdir
.text:000000000000F83C                 test    eax, eax
.text:000000000000F83E                 jnz     short loc_F890
.text:000000000000F840                 mov     edi, [rbp+28h]  ; fd
.text:000000000000F843                 call    _close
.text:000000000000F848                 test    eax, eax
.text:000000000000F84A                 jz      short loc_F7D6
.text:000000000000F84C                 call    ___errno_location
.text:000000000000F851                 mov     r12, rax
.text:000000000000F854                 jmp     short loc_F8B8
.text:000000000000F854 ; ---------------------------------------------------------------------------
.text:000000000000F856                 align 20h
.text:000000000000F860
.text:000000000000F860 loc_F860:                               ; CODE XREF: rpl_fts_close+80↑j
.text:000000000000F860                 call    _close
.text:000000000000F865                 test    eax, eax
.text:000000000000F867                 jz      loc_F7D6
.text:000000000000F86D                 call    ___errno_location
.text:000000000000F872                 mov     ebx, [rax]
.text:000000000000F874                 jmp     loc_F7D8
.text:000000000000F874 ; ---------------------------------------------------------------------------
.text:000000000000F879                 align 20h
.text:000000000000F880
.text:000000000000F880 loc_F880:                               ; CODE XREF: rpl_fts_close+16↑j
.text:000000000000F880                 mov     rbx, rdi
.text:000000000000F883                 mov     rdi, rbx        ; ptr
.text:000000000000F886                 call    free
.text:000000000000F88B                 jmp     loc_F7A3
.text:000000000000F890 ; ---------------------------------------------------------------------------
.text:000000000000F890
.text:000000000000F890 loc_F890:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:000000000000F890                 call    ___errno_location
.text:000000000000F895                 mov     edi, [rbp+28h]  ; fd
.text:000000000000F898                 mov     r12, rax
.text:000000000000F89B                 mov     ebx, [rax]
.text:000000000000F89D                 call    _close
.text:000000000000F8A2                 test    eax, eax
.text:000000000000F8A4                 jz      loc_F7D8
.text:000000000000F8AA                 test    ebx, ebx
.text:000000000000F8AC                 jnz     loc_F7D8
.text:000000000000F8B2                 nop     word ptr [rax+rax+00h]
.text:000000000000F8B8
.text:000000000000F8B8 loc_F8B8:                               ; CODE XREF: rpl_fts_close+104↑j
.text:000000000000F8B8                 mov     ebx, [r12]
.text:000000000000F8BC                 jmp     loc_F7D8
.text:000000000000F8C1 ; ---------------------------------------------------------------------------
.text:000000000000F8C1
.text:000000000000F8C1 loc_F8C1:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:000000000000F8C1                 call    ___errno_location
.text:000000000000F8C6                 mov     [rax], ebx
.text:000000000000F8C8                 mov     ebx, 0FFFFFFFFh
.text:000000000000F8CD                 jmp     loc_F816
.text:000000000000F8CD ; } // starts at F750
.text:000000000000F8CD rpl_fts_close   endp
.text:000000000000F8CD
.text:000000000000F8CD ; ---------------------------------------------------------------------------
.text:000000000000F8D2                 align 20h
.text:000000000000F8E0
.text:000000000000F8E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F8E0
.text:000000000000F8E0
.text:000000000000F8E0                 public rpl_fts_read
.text:000000000000F8E0 rpl_fts_read    proc near               ; CODE XREF: main+649↑p
.text:000000000000F8E0                                         ; main+1007↑p ...
.text:000000000000F8E0 ; __unwind {
.text:000000000000F8E0                 push    r14
.text:000000000000F8E2                 push    r13
.text:000000000000F8E4                 push    r12
.text:000000000000F8E6                 push    rbp
.text:000000000000F8E7                 push    rbx
.text:000000000000F8E8                 mov     rbp, [rdi]
.text:000000000000F8EB                 test    rbp, rbp
.text:000000000000F8EE                 jz      loc_F9FE
.text:000000000000F8F4                 mov     edx, [rdi+48h]
.text:000000000000F8F7                 test    dh, 20h
.text:000000000000F8FA                 jnz     loc_F9FE
.text:000000000000F900                 movzx   eax, word ptr [rbp+74h]
.text:000000000000F904                 mov     ebx, 3
.text:000000000000F909                 mov     r12, rdi
.text:000000000000F90C                 mov     [rbp+74h], bx
.text:000000000000F910                 cmp     ax, 1
.text:000000000000F914                 jz      loc_FB60
.text:000000000000F91A                 cmp     ax, 2
.text:000000000000F91E                 movzx   ecx, word ptr [rbp+70h]
.text:000000000000F922                 jz      loc_FA10
.text:000000000000F928                 cmp     cx, 1
.text:000000000000F92C                 jnz     short loc_F960
.text:000000000000F92E                 jmp     loc_FB50
.text:000000000000F92E ; ---------------------------------------------------------------------------
.text:000000000000F933                 align 8
.text:000000000000F938
.text:000000000000F938 loc_F938:                               ; CODE XREF: rpl_fts_read+87↓j
.text:000000000000F938                 mov     [r12], rbx
.text:000000000000F93C                 mov     rdi, rbp        ; ptr
.text:000000000000F93F                 call    free
.text:000000000000F944                 cmp     qword ptr [rbx+58h], 0
.text:000000000000F949                 jz      loc_FB80
.text:000000000000F94F                 movzx   eax, word ptr [rbx+74h]
.text:000000000000F953                 mov     rbp, rbx
.text:000000000000F956                 cmp     ax, 4
.text:000000000000F95A                 jnz     loc_FC88
.text:000000000000F960
.text:000000000000F960 loc_F960:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:000000000000F960                                         ; rpl_fts_read+13D↓j
.text:000000000000F960                 mov     rbx, [rbp+10h]
.text:000000000000F964                 test    rbx, rbx
.text:000000000000F967                 jnz     short loc_F938
.text:000000000000F969                 mov     rbx, [rbp+8]
.text:000000000000F96D                 cmp     qword ptr [rbx+18h], 0
.text:000000000000F972                 jnz     loc_FEE0
.text:000000000000F978
.text:000000000000F978 loc_F978:                               ; CODE XREF: rpl_fts_read+688↓j
.text:000000000000F978                 mov     [r12], rbx
.text:000000000000F97C                 mov     rdi, rbp        ; ptr
.text:000000000000F97F                 call    free
.text:000000000000F984                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:000000000000F989                 jz      loc_FE42
.text:000000000000F98F                 cmp     word ptr [rbx+70h], 0Bh
.text:000000000000F994                 jz      loc_FACF
.text:000000000000F99A                 mov     rdx, [r12+20h]
.text:000000000000F99F                 mov     rax, [rbx+48h]
.text:000000000000F9A3                 mov     byte ptr [rdx+rax], 0
.text:000000000000F9A7                 cmp     qword ptr [rbx+58h], 0
.text:000000000000F9AC                 jz      loc_FD70
.text:000000000000F9B2                 movzx   eax, word ptr [rbx+72h]
.text:000000000000F9B6                 test    al, 2
.text:000000000000F9B8                 jz      loc_FD28
.text:000000000000F9BE                 mov     eax, [r12+48h]
.text:000000000000F9C3                 mov     edi, [rbx+44h]  ; fd
.text:000000000000F9C6                 test    al, 4
.text:000000000000F9C8                 jz      loc_FDCC
.text:000000000000F9CE
.text:000000000000F9CE loc_F9CE:                               ; CODE XREF: rpl_fts_read+507↓j
.text:000000000000F9CE                                         ; rpl_fts_read+6AC↓j
.text:000000000000F9CE                 call    _close
.text:000000000000F9D3
.text:000000000000F9D3 loc_F9D3:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:000000000000F9D3                                         ; rpl_fts_read+46A↓j ...
.text:000000000000F9D3                 mov     edi, [r12+48h]
.text:000000000000F9D8
.text:000000000000F9D8 loc_F9D8:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:000000000000F9D8                 cmp     word ptr [rbx+70h], 2
.text:000000000000F9DD                 jz      short loc_F9F3
.text:000000000000F9DF                 mov     ecx, [rbx+40h]
.text:000000000000F9E2                 test    ecx, ecx
.text:000000000000F9E4                 jz      loc_FD88
.text:000000000000F9EA                 mov     edx, 7
.text:000000000000F9EF                 mov     [rbx+70h], dx
.text:000000000000F9F3
.text:000000000000F9F3 loc_F9F3:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:000000000000F9F3                                         ; rpl_fts_read+4C3↓j
.text:000000000000F9F3                 and     edi, 2000h
.text:000000000000F9F9                 mov     rbp, rbx
.text:000000000000F9FC                 jz      short loc_FA7A
.text:000000000000F9FE
.text:000000000000F9FE loc_F9FE:                               ; CODE XREF: rpl_fts_read+E↑j
.text:000000000000F9FE                                         ; rpl_fts_read+1A↑j ...
.text:000000000000F9FE                 xor     ebp, ebp
.text:000000000000FA00                 pop     rbx
.text:000000000000FA01                 mov     rax, rbp
.text:000000000000FA04                 pop     rbp
.text:000000000000FA05                 pop     r12
.text:000000000000FA07                 pop     r13
.text:000000000000FA09                 pop     r14
.text:000000000000FA0B                 retn
.text:000000000000FA0B ; ---------------------------------------------------------------------------
.text:000000000000FA0C                 align 10h
.text:000000000000FA10
.text:000000000000FA10 loc_FA10:                               ; CODE XREF: rpl_fts_read+42↑j
.text:000000000000FA10                 lea     eax, [rcx-0Ch]
.text:000000000000FA13                 cmp     ax, 1
.text:000000000000FA17                 jbe     short loc_FA90
.text:000000000000FA19                 cmp     cx, 1
.text:000000000000FA1D                 jnz     loc_F960
.text:000000000000FA23
.text:000000000000FA23 loc_FA23:                               ; CODE XREF: rpl_fts_read+274↓j
.text:000000000000FA23                 test    dl, 40h
.text:000000000000FA26                 jz      loc_FAD8
.text:000000000000FA2C                 mov     rax, [r12+18h]
.text:000000000000FA31                 cmp     [rbp+78h], rax
.text:000000000000FA35                 jz      loc_FAD8
.text:000000000000FA3B
.text:000000000000FA3B loc_FA3B:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:000000000000FA3B                 test    byte ptr [rbp+72h], 2
.text:000000000000FA3F                 jnz     loc_FF20
.text:000000000000FA45
.text:000000000000FA45 loc_FA45:                               ; CODE XREF: rpl_fts_read+648↓j
.text:000000000000FA45                 mov     rdi, [r12+8]    ; ptr
.text:000000000000FA4A                 test    rdi, rdi
.text:000000000000FA4D                 jz      short loc_FA5D
.text:000000000000FA4F                 call    fts_lfree
.text:000000000000FA54                 mov     qword ptr [r12+8], 0
.text:000000000000FA5D
.text:000000000000FA5D loc_FA5D:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:000000000000FA5D                 mov     edi, [r12+48h]
.text:000000000000FA62                 mov     r10d, 6
.text:000000000000FA68                 lea     rsi, [r12+58h]
.text:000000000000FA6D                 mov     [rbp+70h], r10w
.text:000000000000FA72                 mov     rdx, rbp
.text:000000000000FA75                 call    leave_dir_isra_12
.text:000000000000FA7A
.text:000000000000FA7A loc_FA7A:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:000000000000FA7A                                         ; rpl_fts_read+1D3↓j ...
.text:000000000000FA7A                 pop     rbx
.text:000000000000FA7B                 mov     rax, rbp
.text:000000000000FA7E                 pop     rbp
.text:000000000000FA7F                 pop     r12
.text:000000000000FA81                 pop     r13
.text:000000000000FA83                 pop     r14
.text:000000000000FA85                 retn
.text:000000000000FA85 ; ---------------------------------------------------------------------------
.text:000000000000FA86                 align 10h
.text:000000000000FA90
.text:000000000000FA90 loc_FA90:                               ; CODE XREF: rpl_fts_read+137↑j
.text:000000000000FA90                 mov     edx, 1
.text:000000000000FA95                 mov     rsi, rbp
.text:000000000000FA98                 call    fts_stat
.text:000000000000FA9D                 cmp     ax, 1
.text:000000000000FAA1                 mov     [rbp+70h], ax
.text:000000000000FAA5                 jz      loc_FDEC
.text:000000000000FAAB                 cmp     ax, 0Bh
.text:000000000000FAAF                 mov     [r12], rbp
.text:000000000000FAB3                 jnz     short loc_FA7A
.text:000000000000FAB5                 nop     dword ptr [rax]
.text:000000000000FAB8
.text:000000000000FAB8 loc_FAB8:                               ; CODE XREF: rpl_fts_read+356↓j
.text:000000000000FAB8                 mov     rax, [rbp+0A8h]
.text:000000000000FABF                 cmp     rax, 2
.text:000000000000FAC3                 jz      loc_FE68
.text:000000000000FAC9                 cmp     rax, 1
.text:000000000000FACD                 jz      short loc_FA7A
.text:000000000000FACF
.text:000000000000FACF loc_FACF:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:000000000000FACF                 call    _abort
.text:000000000000FACF ; ---------------------------------------------------------------------------
.text:000000000000FAD4                 align 8
.text:000000000000FAD8
.text:000000000000FAD8 loc_FAD8:                               ; CODE XREF: rpl_fts_read+146↑j
.text:000000000000FAD8                                         ; rpl_fts_read+155↑j
.text:000000000000FAD8                 mov     rdi, [r12+8]    ; ptr
.text:000000000000FADD                 test    rdi, rdi
.text:000000000000FAE0                 jz      loc_FCF8
.text:000000000000FAE6                 test    dh, 10h
.text:000000000000FAE9                 jnz     loc_FCE2
.text:000000000000FAEF                 mov     rcx, [rbp+30h]
.text:000000000000FAF3                 mov     edx, 0FFFFFFFFh
.text:000000000000FAF8                 mov     rsi, rbp
.text:000000000000FAFB                 mov     rdi, r12
.text:000000000000FAFE                 call    fts_safe_changedir
.text:000000000000FB03                 test    eax, eax
.text:000000000000FB05                 jz      loc_FDC2
.text:000000000000FB0B                 call    ___errno_location
.text:000000000000FB10                 mov     eax, [rax]
.text:000000000000FB12                 or      word ptr [rbp+72h], 1
.text:000000000000FB17                 mov     [rbp+40h], eax
.text:000000000000FB1A                 mov     rbp, [r12+8]
.text:000000000000FB1F                 test    rbp, rbp
.text:000000000000FB22                 jz      loc_FD16
.text:000000000000FB28                 mov     rax, rbp
.text:000000000000FB2B                 nop     dword ptr [rax+rax+00h]
.text:000000000000FB30
.text:000000000000FB30 loc_FB30:                               ; CODE XREF: rpl_fts_read+263↓j
.text:000000000000FB30                 mov     rdx, [rax+8]
.text:000000000000FB34                 mov     rdx, [rdx+30h]
.text:000000000000FB38                 mov     [rax+30h], rdx
.text:000000000000FB3C                 mov     rax, [rax+10h]
.text:000000000000FB40                 test    rax, rax
.text:000000000000FB43                 jnz     short loc_FB30
.text:000000000000FB45                 jmp     loc_FD16
.text:000000000000FB45 ; ---------------------------------------------------------------------------
.text:000000000000FB4A                 align 10h
.text:000000000000FB50
.text:000000000000FB50 loc_FB50:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:000000000000FB50                 cmp     ax, 4
.text:000000000000FB54                 jnz     loc_FA23
.text:000000000000FB5A                 jmp     loc_FA3B
.text:000000000000FB5A ; ---------------------------------------------------------------------------
.text:000000000000FB5F                 align 20h
.text:000000000000FB60
.text:000000000000FB60 loc_FB60:                               ; CODE XREF: rpl_fts_read+34↑j
.text:000000000000FB60                 mov     rsi, rbp
.text:000000000000FB63                 xor     edx, edx
.text:000000000000FB65                 call    fts_stat
.text:000000000000FB6A                 mov     [rbp+70h], ax
.text:000000000000FB6E                 mov     rax, rbp
.text:000000000000FB71                 pop     rbx
.text:000000000000FB72                 pop     rbp
.text:000000000000FB73                 pop     r12
.text:000000000000FB75                 pop     r13
.text:000000000000FB77                 pop     r14
.text:000000000000FB79                 retn
.text:000000000000FB79 ; ---------------------------------------------------------------------------
.text:000000000000FB7A                 align 20h
.text:000000000000FB80
.text:000000000000FB80 loc_FB80:                               ; CODE XREF: rpl_fts_read+69↑j
.text:000000000000FB80                 mov     rdi, r12
.text:000000000000FB83                 call    restore_initial_cwd
.text:000000000000FB88                 test    eax, eax
.text:000000000000FB8A                 jnz     loc_FF91
.text:000000000000FB90                 test    dword ptr [r12+48h], 102h
.text:000000000000FB99                 mov     rdi, [r12+58h]  ; ptr
.text:000000000000FB9E                 jz      loc_FCD8
.text:000000000000FBA4                 test    rdi, rdi
.text:000000000000FBA7                 jz      short loc_FBAE
.text:000000000000FBA9                 call    hash_free
.text:000000000000FBAE
.text:000000000000FBAE loc_FBAE:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:000000000000FBAE                                         ; rpl_fts_read+3FD↓j
.text:000000000000FBAE                 mov     rdx, [rbx+60h]
.text:000000000000FBB2                 lea     rbp, [rbx+108h]
.text:000000000000FBB9                 mov     rdi, [r12+20h]  ; dest
.text:000000000000FBBE                 mov     rsi, rbp        ; src
.text:000000000000FBC1                 mov     [rbx+48h], rdx
.text:000000000000FBC5                 add     rdx, 1          ; n
.text:000000000000FBC9                 call    _memmove
.text:000000000000FBCE                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000FBD3                 mov     rdi, rbp        ; s
.text:000000000000FBD6                 call    _strrchr
.text:000000000000FBDB                 test    rax, rax
.text:000000000000FBDE                 jz      short loc_FC0B
.text:000000000000FBE0                 cmp     rbp, rax
.text:000000000000FBE3                 jz      loc_FDB0
.text:000000000000FBE9
.text:000000000000FBE9 loc_FBE9:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:000000000000FBE9                 lea     r13, [rax+1]
.text:000000000000FBED                 mov     rdi, r13        ; s
.text:000000000000FBF0                 call    _strlen
.text:000000000000FBF5                 lea     rdx, [rax+1]    ; n
.text:000000000000FBF9                 mov     r14, rax
.text:000000000000FBFC                 mov     rsi, r13        ; src
.text:000000000000FBFF                 mov     rdi, rbp        ; dest
.text:000000000000FC02                 call    _memmove
.text:000000000000FC07                 mov     [rbx+60h], r14
.text:000000000000FC0B
.text:000000000000FC0B loc_FC0B:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:000000000000FC0B                                         ; rpl_fts_read+4DD↓j
.text:000000000000FC0B                 mov     rax, [r12+20h]
.text:000000000000FC10                 mov     edi, [r12+48h]
.text:000000000000FC15                 lea     rsi, [r12+58h]
.text:000000000000FC1A                 mov     rbp, rbx
.text:000000000000FC1D                 mov     [rbx+38h], rax
.text:000000000000FC21                 mov     [rbx+30h], rax
.text:000000000000FC25                 call    setup_dir_isra_4
.text:000000000000FC2A                 movzx   eax, word ptr [rbx+70h]
.text:000000000000FC2E
.text:000000000000FC2E loc_FC2E:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:000000000000FC2E                                         ; rpl_fts_read+73D↓j
.text:000000000000FC2E                 cmp     ax, 0Bh
.text:000000000000FC32                 mov     [r12], rbp
.text:000000000000FC36                 jz      loc_FAB8
.text:000000000000FC3C
.text:000000000000FC3C loc_FC3C:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:000000000000FC3C                                         ; rpl_fts_read+717↓j
.text:000000000000FC3C                 cmp     ax, 1
.text:000000000000FC40                 jnz     loc_FA7A
.text:000000000000FC46
.text:000000000000FC46 loc_FC46:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:000000000000FC46                 cmp     qword ptr [rbp+58h], 0
.text:000000000000FC4B                 jnz     short loc_FC56
.text:000000000000FC4D
.text:000000000000FC4D loc_FC4D:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:000000000000FC4D                 mov     rax, [rbp+78h]
.text:000000000000FC51                 mov     [r12+18h], rax
.text:000000000000FC56
.text:000000000000FC56 loc_FC56:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:000000000000FC56                                         ; rpl_fts_read+5F4↓j
.text:000000000000FC56                 mov     edi, [r12+48h]
.text:000000000000FC5B                 lea     rsi, [r12+58h]
.text:000000000000FC60                 mov     rdx, rbp
.text:000000000000FC63                 call    enter_dir_isra_10
.text:000000000000FC68                 test    al, al
.text:000000000000FC6A                 jnz     loc_FA7A
.text:000000000000FC70                 call    ___errno_location
.text:000000000000FC75                 xor     ebp, ebp
.text:000000000000FC77                 mov     dword ptr [rax], 0Ch
.text:000000000000FC7D                 jmp     loc_FA7A
.text:000000000000FC7D ; ---------------------------------------------------------------------------
.text:000000000000FC82                 align 8
.text:000000000000FC88
.text:000000000000FC88 loc_FC88:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:000000000000FC88                 cmp     ax, 2
.text:000000000000FC8C                 jz      loc_FF2D
.text:000000000000FC92
.text:000000000000FC92 loc_FC92:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:000000000000FC92                                         ; rpl_fts_read+631↓j ...
.text:000000000000FC92                 mov     rax, [rbp+8]
.text:000000000000FC96                 lea     rsi, [rbp+108h] ; src
.text:000000000000FC9D                 mov     rdi, [rax+48h]
.text:000000000000FCA1                 mov     rax, [rax+38h]
.text:000000000000FCA5                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:000000000000FCAA                 lea     rdx, [rdi-1]
.text:000000000000FCAE                 cmovz   rdi, rdx
.text:000000000000FCB2                 add     rdi, [r12+20h]
.text:000000000000FCB7                 mov     byte ptr [rdi], 2Fh ; '/'
.text:000000000000FCBA                 mov     rax, [rbp+60h]
.text:000000000000FCBE                 add     rdi, 1          ; dest
.text:000000000000FCC2                 lea     rdx, [rax+1]    ; n
.text:000000000000FCC6                 call    _memmove
.text:000000000000FCCB                 movzx   eax, word ptr [rbp+70h]
.text:000000000000FCCF                 jmp     loc_FC2E
.text:000000000000FCCF ; ---------------------------------------------------------------------------
.text:000000000000FCD4                 align 8
.text:000000000000FCD8
.text:000000000000FCD8 loc_FCD8:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:000000000000FCD8                 call    free
.text:000000000000FCDD                 jmp     loc_FBAE
.text:000000000000FCE2 ; ---------------------------------------------------------------------------
.text:000000000000FCE2
.text:000000000000FCE2 loc_FCE2:                               ; CODE XREF: rpl_fts_read+209↑j
.text:000000000000FCE2                 and     dh, 0EFh
.text:000000000000FCE5                 mov     [r12+48h], edx
.text:000000000000FCEA                 call    fts_lfree
.text:000000000000FCEF                 mov     qword ptr [r12+8], 0
.text:000000000000FCF8
.text:000000000000FCF8 loc_FCF8:                               ; CODE XREF: rpl_fts_read+200↑j
.text:000000000000FCF8                 mov     esi, 3
.text:000000000000FCFD                 mov     rdi, r12
.text:000000000000FD00                 call    fts_build
.text:000000000000FD05                 test    rax, rax
.text:000000000000FD08                 mov     [r12+8], rax
.text:000000000000FD0D                 jz      loc_FE04
.text:000000000000FD13                 mov     rbp, rax
.text:000000000000FD16
.text:000000000000FD16 loc_FD16:                               ; CODE XREF: rpl_fts_read+242↑j
.text:000000000000FD16                                         ; rpl_fts_read+265↑j ...
.text:000000000000FD16                 mov     qword ptr [r12+8], 0
.text:000000000000FD1F                 jmp     loc_FC92
.text:000000000000FD1F ; ---------------------------------------------------------------------------
.text:000000000000FD24                 align 8
.text:000000000000FD28
.text:000000000000FD28 loc_FD28:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:000000000000FD28                 test    al, 1
.text:000000000000FD2A                 jnz     loc_F9D3
.text:000000000000FD30                 mov     rsi, [rbx+8]
.text:000000000000FD34                 lea     rcx, asc_2269B  ; ".."
.text:000000000000FD3B                 mov     edx, 0FFFFFFFFh
.text:000000000000FD40                 mov     rdi, r12
.text:000000000000FD43                 call    fts_safe_changedir
.text:000000000000FD48                 test    eax, eax
.text:000000000000FD4A                 jz      loc_F9D3
.text:000000000000FD50
.text:000000000000FD50 loc_FD50:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:000000000000FD50                 call    ___errno_location
.text:000000000000FD55                 mov     edi, [r12+48h]
.text:000000000000FD5A                 mov     eax, [rax]
.text:000000000000FD5C                 or      edi, 2000h
.text:000000000000FD62                 mov     [rbx+40h], eax
.text:000000000000FD65                 mov     [r12+48h], edi
.text:000000000000FD6A                 jmp     loc_F9D8
.text:000000000000FD6A ; ---------------------------------------------------------------------------
.text:000000000000FD6F                 align 10h
.text:000000000000FD70
.text:000000000000FD70 loc_FD70:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:000000000000FD70                 mov     rdi, r12
.text:000000000000FD73                 call    restore_initial_cwd
.text:000000000000FD78                 test    eax, eax
.text:000000000000FD7A                 jnz     short loc_FD50
.text:000000000000FD7C                 jmp     loc_F9D3
.text:000000000000FD7C ; ---------------------------------------------------------------------------
.text:000000000000FD81                 align 8
.text:000000000000FD88
.text:000000000000FD88 loc_FD88:                               ; CODE XREF: rpl_fts_read+104↑j
.text:000000000000FD88                 mov     eax, 6
.text:000000000000FD8D                 lea     rsi, [r12+58h]
.text:000000000000FD92                 mov     rdx, rbx
.text:000000000000FD95                 mov     [rbx+70h], ax
.text:000000000000FD99                 call    leave_dir_isra_12
.text:000000000000FD9E                 mov     edi, [r12+48h]
.text:000000000000FDA3                 jmp     loc_F9F3
.text:000000000000FDA3 ; ---------------------------------------------------------------------------
.text:000000000000FDA8                 align 10h
.text:000000000000FDB0
.text:000000000000FDB0 loc_FDB0:                               ; CODE XREF: rpl_fts_read+303↑j
.text:000000000000FDB0                 cmp     byte ptr [rbx+109h], 0
.text:000000000000FDB7                 jnz     loc_FBE9
.text:000000000000FDBD                 jmp     loc_FC0B
.text:000000000000FDC2 ; ---------------------------------------------------------------------------
.text:000000000000FDC2
.text:000000000000FDC2 loc_FDC2:                               ; CODE XREF: rpl_fts_read+225↑j
.text:000000000000FDC2                 mov     rbp, [r12+8]
.text:000000000000FDC7                 jmp     loc_FD16
.text:000000000000FDCC ; ---------------------------------------------------------------------------
.text:000000000000FDCC
.text:000000000000FDCC loc_FDCC:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:000000000000FDCC                 test    ah, 2
.text:000000000000FDCF                 jz      loc_FF6D
.text:000000000000FDD5                 mov     esi, edi
.text:000000000000FDD7                 mov     edx, 1
.text:000000000000FDDC                 mov     rdi, r12
.text:000000000000FDDF                 call    cwd_advance_fd
.text:000000000000FDE4                 mov     edi, [rbx+44h]
.text:000000000000FDE7                 jmp     loc_F9CE
.text:000000000000FDEC ; ---------------------------------------------------------------------------
.text:000000000000FDEC
.text:000000000000FDEC loc_FDEC:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:000000000000FDEC                 mov     esi, [r12+48h]
.text:000000000000FDF1                 test    sil, 4
.text:000000000000FDF5                 jz      loc_FFFC
.text:000000000000FDFB                 mov     [r12], rbp
.text:000000000000FDFF                 jmp     loc_FC46
.text:000000000000FE04 ; ---------------------------------------------------------------------------
.text:000000000000FE04
.text:000000000000FE04 loc_FE04:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:000000000000FE04                 mov     edi, [r12+48h]
.text:000000000000FE09                 test    edi, 2000h
.text:000000000000FE0F                 jnz     loc_F9FE
.text:000000000000FE15                 mov     r9d, [rbp+40h]
.text:000000000000FE19                 test    r9d, r9d
.text:000000000000FE1C                 jz      short loc_FE30
.text:000000000000FE1E                 cmp     word ptr [rbp+70h], 4
.text:000000000000FE23                 jz      short loc_FE30
.text:000000000000FE25                 mov     r8d, 7
.text:000000000000FE2B                 mov     [rbp+70h], r8w
.text:000000000000FE30
.text:000000000000FE30 loc_FE30:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:000000000000FE30                                         ; rpl_fts_read+543↑j
.text:000000000000FE30                 lea     rsi, [r12+58h]
.text:000000000000FE35                 mov     rdx, rbp
.text:000000000000FE38                 call    leave_dir_isra_12
.text:000000000000FE3D                 jmp     loc_FA7A
.text:000000000000FE42 ; ---------------------------------------------------------------------------
.text:000000000000FE42
.text:000000000000FE42 loc_FE42:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:000000000000FE42                 mov     rdi, rbx        ; ptr
.text:000000000000FE45                 xor     ebp, ebp
.text:000000000000FE47                 call    free
.text:000000000000FE4C                 call    ___errno_location
.text:000000000000FE51                 mov     dword ptr [rax], 0
.text:000000000000FE57                 mov     qword ptr [r12], 0
.text:000000000000FE5F                 jmp     loc_FA7A
.text:000000000000FE5F ; ---------------------------------------------------------------------------
.text:000000000000FE64                 align 8
.text:000000000000FE68
.text:000000000000FE68 loc_FE68:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:000000000000FE68                 mov     rbx, [rbp+8]
.text:000000000000FE6C                 cmp     qword ptr [rbx+68h], 0
.text:000000000000FE71                 jnz     short loc_FE84
.text:000000000000FE73                 mov     eax, [r12+48h]
.text:000000000000FE78                 and     eax, 18h
.text:000000000000FE7B                 cmp     eax, 18h
.text:000000000000FE7E                 jz      loc_FFDD
.text:000000000000FE84
.text:000000000000FE84 loc_FE84:                               ; CODE XREF: rpl_fts_read+591↑j
.text:000000000000FE84                                         ; rpl_fts_read+70D↓j
.text:000000000000FE84                 xor     edx, edx
.text:000000000000FE86                 mov     rsi, rbp
.text:000000000000FE89                 mov     rdi, r12
.text:000000000000FE8C                 call    fts_stat
.text:000000000000FE91                 mov     edx, [rbp+90h]
.text:000000000000FE97                 mov     [rbp+70h], ax
.text:000000000000FE9B                 and     edx, 0F000h
.text:000000000000FEA1                 cmp     edx, 4000h
.text:000000000000FEA7                 jnz     loc_FC3C
.text:000000000000FEAD                 cmp     qword ptr [rbp+58h], 0
.text:000000000000FEB2                 jz      loc_FFCE
.text:000000000000FEB8                 mov     rcx, [rbx+68h]
.text:000000000000FEBC                 lea     rdx, [rcx-1]
.text:000000000000FEC0                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:000000000000FEC4                 ja      short loc_FECA
.text:000000000000FEC6                 mov     [rbx+68h], rdx
.text:000000000000FECA
.text:000000000000FECA loc_FECA:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:000000000000FECA                 cmp     ax, 1
.text:000000000000FECE                 jnz     loc_FA7A
.text:000000000000FED4                 jmp     loc_FC56
.text:000000000000FED4 ; ---------------------------------------------------------------------------
.text:000000000000FED9                 align 20h
.text:000000000000FEE0
.text:000000000000FEE0 loc_FEE0:                               ; CODE XREF: rpl_fts_read+92↑j
.text:000000000000FEE0                 mov     rax, [rbx+48h]
.text:000000000000FEE4                 mov     rdx, [r12+20h]
.text:000000000000FEE9                 mov     esi, 3
.text:000000000000FEEE                 mov     [r12], rbx
.text:000000000000FEF2                 mov     rdi, r12
.text:000000000000FEF5                 mov     byte ptr [rdx+rax], 0
.text:000000000000FEF9                 call    fts_build
.text:000000000000FEFE                 test    rax, rax
.text:000000000000FF01                 mov     rbx, rax
.text:000000000000FF04                 jz      short loc_FF58
.text:000000000000FF06                 mov     rdi, rbp        ; ptr
.text:000000000000FF09                 mov     rbp, rbx
.text:000000000000FF0C                 call    free
.text:000000000000FF11                 jmp     loc_FC92
.text:000000000000FF11 ; ---------------------------------------------------------------------------
.text:000000000000FF16                 align 20h
.text:000000000000FF20
.text:000000000000FF20 loc_FF20:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:000000000000FF20                 mov     edi, [rbp+44h]  ; fd
.text:000000000000FF23                 call    _close
.text:000000000000FF28                 jmp     loc_FA45
.text:000000000000FF2D ; ---------------------------------------------------------------------------
.text:000000000000FF2D
.text:000000000000FF2D loc_FF2D:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:000000000000FF2D                 mov     edx, 1
.text:000000000000FF32                 mov     rsi, rbx
.text:000000000000FF35                 mov     rdi, r12
.text:000000000000FF38                 call    fts_stat
.text:000000000000FF3D                 cmp     ax, 1
.text:000000000000FF41                 mov     [rbx+70h], ax
.text:000000000000FF45                 jz      short loc_FFA1
.text:000000000000FF47
.text:000000000000FF47 loc_FF47:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:000000000000FF47                                         ; rpl_fts_read+6E9↓j ...
.text:000000000000FF47                 mov     esi, 3
.text:000000000000FF4C                 mov     rbp, rbx
.text:000000000000FF4F                 mov     [rbx+74h], si
.text:000000000000FF53                 jmp     loc_FC92
.text:000000000000FF58 ; ---------------------------------------------------------------------------
.text:000000000000FF58
.text:000000000000FF58 loc_FF58:                               ; CODE XREF: rpl_fts_read+624↑j
.text:000000000000FF58                 test    byte ptr [r12+49h], 20h
.text:000000000000FF5E                 jnz     loc_F9FE
.text:000000000000FF64                 mov     rbx, [rbp+8]
.text:000000000000FF68                 jmp     loc_F978
.text:000000000000FF6D ; ---------------------------------------------------------------------------
.text:000000000000FF6D
.text:000000000000FF6D loc_FF6D:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:000000000000FF6D                 call    _fchdir
.text:000000000000FF72                 test    eax, eax
.text:000000000000FF74                 jz      short loc_FF89
.text:000000000000FF76                 call    ___errno_location
.text:000000000000FF7B                 mov     eax, [rax]
.text:000000000000FF7D                 mov     [rbx+40h], eax
.text:000000000000FF80                 or      dword ptr [r12+48h], 2000h
.text:000000000000FF89
.text:000000000000FF89 loc_FF89:                               ; CODE XREF: rpl_fts_read+694↑j
.text:000000000000FF89                 mov     edi, [rbx+44h]
.text:000000000000FF8C                 jmp     loc_F9CE
.text:000000000000FF91 ; ---------------------------------------------------------------------------
.text:000000000000FF91
.text:000000000000FF91 loc_FF91:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:000000000000FF91                 or      dword ptr [r12+48h], 2000h
.text:000000000000FF9A                 xor     ebp, ebp
.text:000000000000FF9C                 jmp     loc_FA7A
.text:000000000000FFA1 ; ---------------------------------------------------------------------------
.text:000000000000FFA1
.text:000000000000FFA1 loc_FFA1:                               ; CODE XREF: rpl_fts_read+665↑j
.text:000000000000FFA1                 mov     esi, [r12+48h]
.text:000000000000FFA6                 test    sil, 4
.text:000000000000FFAA                 jnz     short loc_FF47
.text:000000000000FFAC                 mov     edi, [r12+2Ch]
.text:000000000000FFB1                 lea     rdx, asc_2269B+1 ; "."
.text:000000000000FFB8                 call    diropen_isra_6
.text:000000000000FFBD                 test    eax, eax
.text:000000000000FFBF                 mov     [rbx+44h], eax
.text:000000000000FFC2                 js      short loc_10040
.text:000000000000FFC4                 or      word ptr [rbx+72h], 2
.text:000000000000FFC9                 jmp     loc_FF47
.text:000000000000FFCE ; ---------------------------------------------------------------------------
.text:000000000000FFCE
.text:000000000000FFCE loc_FFCE:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:000000000000FFCE                 cmp     ax, 1
.text:000000000000FFD2                 jnz     loc_FA7A
.text:000000000000FFD8                 jmp     loc_FC4D
.text:000000000000FFDD ; ---------------------------------------------------------------------------
.text:000000000000FFDD
.text:000000000000FFDD loc_FFDD:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:000000000000FFDD                 mov     esi, [r12+2Ch]
.text:000000000000FFE2                 mov     rdi, rbx
.text:000000000000FFE5                 call    leaf_optimization
.text:000000000000FFEA                 cmp     eax, 2
.text:000000000000FFED                 jnz     loc_FE84
.text:000000000000FFF3                 movzx   eax, word ptr [rbp+70h]
.text:000000000000FFF7                 jmp     loc_FC3C
.text:000000000000FFFC ; ---------------------------------------------------------------------------
.text:000000000000FFFC
.text:000000000000FFFC loc_FFFC:                               ; CODE XREF: rpl_fts_read+515↑j
.text:000000000000FFFC                 mov     edi, [r12+2Ch]
.text:0000000000010001                 lea     rdx, asc_2269B+1 ; "."
.text:0000000000010008                 call    diropen_isra_6
.text:000000000001000D                 test    eax, eax
.text:000000000001000F                 mov     [rbp+44h], eax
.text:0000000000010012                 js      short loc_10022
.text:0000000000010014                 or      word ptr [rbp+72h], 2
.text:0000000000010019                 movzx   eax, word ptr [rbp+70h]
.text:000000000001001D                 jmp     loc_FC2E
.text:0000000000010022 ; ---------------------------------------------------------------------------
.text:0000000000010022
.text:0000000000010022 loc_10022:                              ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000010022                 call    ___errno_location
.text:0000000000010027                 mov     eax, [rax]
.text:0000000000010029                 mov     r11d, 7
.text:000000000001002F                 mov     [rbp+70h], r11w
.text:0000000000010034                 mov     [rbp+40h], eax
.text:0000000000010037                 mov     [r12], rbp
.text:000000000001003B                 jmp     loc_FA7A
.text:0000000000010040 ; ---------------------------------------------------------------------------
.text:0000000000010040
.text:0000000000010040 loc_10040:                              ; CODE XREF: rpl_fts_read+6E2↑j
.text:0000000000010040                 call    ___errno_location
.text:0000000000010045                 mov     eax, [rax]
.text:0000000000010047                 mov     edi, 7
.text:000000000001004C                 mov     [rbx+70h], di
.text:0000000000010050                 mov     [rbx+40h], eax
.text:0000000000010053                 jmp     loc_FF47
.text:0000000000010053 ; } // starts at F8E0
.text:0000000000010053 rpl_fts_read    endp
.text:0000000000010053
.text:0000000000010053 ; ---------------------------------------------------------------------------
.text:0000000000010058                 align 20h
.text:0000000000010060
.text:0000000000010060 ; =============== S U B R O U T I N E =======================================
.text:0000000000010060
.text:0000000000010060
.text:0000000000010060                 public rpl_fts_set
.text:0000000000010060 rpl_fts_set     proc near               ; CODE XREF: main+FFF↑p
.text:0000000000010060                                         ; main+1178↑p
.text:0000000000010060 ; __unwind {
.text:0000000000010060                 cmp     edx, 4
.text:0000000000010063                 ja      short loc_10070
.text:0000000000010065                 mov     [rsi+74h], dx
.text:0000000000010069                 xor     eax, eax
.text:000000000001006B                 retn
.text:000000000001006B ; ---------------------------------------------------------------------------
.text:000000000001006C                 align 10h
.text:0000000000010070
.text:0000000000010070 loc_10070:                              ; CODE XREF: rpl_fts_set+3↑j
.text:0000000000010070                 sub     rsp, 8
.text:0000000000010074                 call    ___errno_location
.text:0000000000010079                 mov     dword ptr [rax], 16h
.text:000000000001007F                 mov     eax, 1
.text:0000000000010084                 add     rsp, 8
.text:0000000000010088                 retn
.text:0000000000010088 ; } // starts at 10060
.text:0000000000010088 rpl_fts_set     endp
.text:0000000000010088
.text:0000000000010088 ; ---------------------------------------------------------------------------
.text:0000000000010089                 align 10h
.text:0000000000010090
.text:0000000000010090 ; =============== S U B R O U T I N E =======================================
.text:0000000000010090
.text:0000000000010090
.text:0000000000010090                 public rpl_fts_children
.text:0000000000010090 rpl_fts_children proc near
.text:0000000000010090 ; __unwind {
.text:0000000000010090                 push    r14
.text:0000000000010092                 push    r13
.text:0000000000010094                 push    r12
.text:0000000000010096                 push    rbp
.text:0000000000010097                 mov     r12d, esi
.text:000000000001009A                 push    rbx
.text:000000000001009B                 mov     rbx, rdi
.text:000000000001009E                 call    ___errno_location
.text:00000000000100A3                 test    r12d, 0FFFFEFFFh
.text:00000000000100AA                 mov     r13, rax
.text:00000000000100AD                 jnz     loc_10198
.text:00000000000100B3                 mov     rbp, [rbx]
.text:00000000000100B6                 mov     dword ptr [rax], 0
.text:00000000000100BC                 test    byte ptr [rbx+49h], 20h
.text:00000000000100C0                 jnz     short loc_10140
.text:00000000000100C2                 movzx   eax, word ptr [rbp+70h]
.text:00000000000100C6                 cmp     ax, 9
.text:00000000000100CA                 jz      short loc_10130
.text:00000000000100CC                 cmp     ax, 1
.text:00000000000100D0                 jnz     short loc_10140
.text:00000000000100D2                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000100D6                 test    rdi, rdi
.text:00000000000100D9                 jz      short loc_100E0
.text:00000000000100DB                 call    fts_lfree
.text:00000000000100E0
.text:00000000000100E0 loc_100E0:                              ; CODE XREF: rpl_fts_children+49↑j
.text:00000000000100E0                 cmp     r12d, 1000h
.text:00000000000100E7                 mov     r14d, 1
.text:00000000000100ED                 jnz     short loc_100FC
.text:00000000000100EF                 or      dword ptr [rbx+48h], 1000h
.text:00000000000100F6                 mov     r14d, 2
.text:00000000000100FC
.text:00000000000100FC loc_100FC:                              ; CODE XREF: rpl_fts_children+5D↑j
.text:00000000000100FC                 cmp     qword ptr [rbp+58h], 0
.text:0000000000010101                 jnz     short loc_10115
.text:0000000000010103                 mov     rax, [rbp+30h]
.text:0000000000010107                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000001010A                 jz      short loc_10115
.text:000000000001010C                 mov     esi, [rbx+48h]
.text:000000000001010F                 test    sil, 4
.text:0000000000010113                 jz      short loc_10150
.text:0000000000010115
.text:0000000000010115 loc_10115:                              ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000010115                                         ; rpl_fts_children+7A↑j
.text:0000000000010115                 mov     esi, r14d
.text:0000000000010118                 mov     rdi, rbx
.text:000000000001011B                 call    fts_build
.text:0000000000010120                 mov     [rbx+8], rax
.text:0000000000010124
.text:0000000000010124 loc_10124:                              ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000010124                                         ; rpl_fts_children+110↓j ...
.text:0000000000010124                 pop     rbx
.text:0000000000010125                 pop     rbp
.text:0000000000010126                 pop     r12
.text:0000000000010128                 pop     r13
.text:000000000001012A                 pop     r14
.text:000000000001012C                 retn
.text:000000000001012C ; ---------------------------------------------------------------------------
.text:000000000001012D                 align 10h
.text:0000000000010130
.text:0000000000010130 loc_10130:                              ; CODE XREF: rpl_fts_children+3A↑j
.text:0000000000010130                 pop     rbx
.text:0000000000010131                 mov     rax, [rbp+10h]
.text:0000000000010135                 pop     rbp
.text:0000000000010136                 pop     r12
.text:0000000000010138                 pop     r13
.text:000000000001013A                 pop     r14
.text:000000000001013C                 retn
.text:000000000001013C ; ---------------------------------------------------------------------------
.text:000000000001013D                 align 20h
.text:0000000000010140
.text:0000000000010140 loc_10140:                              ; CODE XREF: rpl_fts_children+30↑j
.text:0000000000010140                                         ; rpl_fts_children+40↑j
.text:0000000000010140                 pop     rbx
.text:0000000000010141                 xor     eax, eax
.text:0000000000010143                 pop     rbp
.text:0000000000010144                 pop     r12
.text:0000000000010146                 pop     r13
.text:0000000000010148                 pop     r14
.text:000000000001014A                 retn
.text:000000000001014A ; ---------------------------------------------------------------------------
.text:000000000001014B                 align 10h
.text:0000000000010150
.text:0000000000010150 loc_10150:                              ; CODE XREF: rpl_fts_children+83↑j
.text:0000000000010150                 mov     edi, [rbx+2Ch]
.text:0000000000010153                 lea     rdx, asc_2269B+1 ; "."
.text:000000000001015A                 call    diropen_isra_6
.text:000000000001015F                 test    eax, eax
.text:0000000000010161                 mov     ebp, eax
.text:0000000000010163                 js      short loc_101B9
.text:0000000000010165                 mov     esi, r14d
.text:0000000000010168                 mov     rdi, rbx
.text:000000000001016B                 call    fts_build
.text:0000000000010170                 test    byte ptr [rbx+49h], 2
.text:0000000000010174                 mov     [rbx+8], rax
.text:0000000000010178                 jnz     short loc_101A8
.text:000000000001017A                 mov     edi, ebp        ; fd
.text:000000000001017C                 call    _fchdir
.text:0000000000010181                 test    eax, eax
.text:0000000000010183                 jnz     short loc_101C8
.text:0000000000010185                 mov     edi, ebp        ; fd
.text:0000000000010187                 call    _close
.text:000000000001018C
.text:000000000001018C loc_1018C:                              ; CODE XREF: rpl_fts_children+127↓j
.text:000000000001018C                 mov     rax, [rbx+8]
.text:0000000000010190                 jmp     short loc_10124
.text:0000000000010190 ; ---------------------------------------------------------------------------
.text:0000000000010192                 align 8
.text:0000000000010198
.text:0000000000010198 loc_10198:                              ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000010198                 mov     dword ptr [rax], 16h
.text:000000000001019E                 xor     eax, eax
.text:00000000000101A0                 jmp     loc_10124
.text:00000000000101A0 ; ---------------------------------------------------------------------------
.text:00000000000101A5                 align 8
.text:00000000000101A8
.text:00000000000101A8 loc_101A8:                              ; CODE XREF: rpl_fts_children+E8↑j
.text:00000000000101A8                 mov     edx, 1
.text:00000000000101AD                 mov     esi, ebp
.text:00000000000101AF                 mov     rdi, rbx
.text:00000000000101B2                 call    cwd_advance_fd
.text:00000000000101B7                 jmp     short loc_1018C
.text:00000000000101B9 ; ---------------------------------------------------------------------------
.text:00000000000101B9
.text:00000000000101B9 loc_101B9:                              ; CODE XREF: rpl_fts_children+D3↑j
.text:00000000000101B9                 mov     qword ptr [rbx+8], 0
.text:00000000000101C1                 xor     eax, eax
.text:00000000000101C3                 jmp     loc_10124
.text:00000000000101C8 ; ---------------------------------------------------------------------------
.text:00000000000101C8
.text:00000000000101C8 loc_101C8:                              ; CODE XREF: rpl_fts_children+F3↑j
.text:00000000000101C8                 mov     ebx, [r13+0]
.text:00000000000101CC                 mov     edi, ebp        ; fd
.text:00000000000101CE                 call    _close
.text:00000000000101D3                 xor     eax, eax
.text:00000000000101D5                 mov     [r13+0], ebx
.text:00000000000101D9                 jmp     loc_10124
.text:00000000000101D9 ; } // starts at 10090
.text:00000000000101D9 rpl_fts_children endp
.text:00000000000101D9
.text:00000000000101D9 ; ---------------------------------------------------------------------------
.text:00000000000101DE                 align 20h
.text:00000000000101E0
.text:00000000000101E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000101E0
.text:00000000000101E0 ; Attributes: info_from_lumina
.text:00000000000101E0
.text:00000000000101E0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000101E0                 public rpl_mbrtowc
.text:00000000000101E0 rpl_mbrtowc     proc near               ; CODE XREF: string_hasher_ci+11A↑p
.text:00000000000101E0                                         ; mbscasecmp+289↑p ...
.text:00000000000101E0
.text:00000000000101E0 pwc             = dword ptr -34h
.text:00000000000101E0 var_30          = qword ptr -30h
.text:00000000000101E0
.text:00000000000101E0 ; __unwind {
.text:00000000000101E0                 push    r13
.text:00000000000101E2                 push    r12
.text:00000000000101E4                 mov     r13, rsi
.text:00000000000101E7                 push    rbp
.text:00000000000101E8                 push    rbx
.text:00000000000101E9                 mov     rbx, rdi
.text:00000000000101EC                 mov     r12, rdx
.text:00000000000101EF                 sub     rsp, 18h
.text:00000000000101F3                 mov     rax, fs:28h
.text:00000000000101FC                 mov     [rsp+38h+var_30], rax
.text:0000000000010201                 xor     eax, eax
.text:0000000000010203                 lea     rax, [rsp+38h+pwc]
.text:0000000000010208                 test    rdi, rdi
.text:000000000001020B                 cmovz   rbx, rax
.text:000000000001020F                 mov     rdi, rbx        ; pwc
.text:0000000000010212                 call    _mbrtowc
.text:0000000000010217                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001021B                 mov     rbp, rax
.text:000000000001021E                 jbe     short loc_10240
.text:0000000000010220                 test    r12, r12
.text:0000000000010223                 jz      short loc_10240
.text:0000000000010225                 xor     edi, edi
.text:0000000000010227                 call    hard_locale
.text:000000000001022C                 test    al, al
.text:000000000001022E                 jnz     short loc_10240
.text:0000000000010230                 movzx   eax, byte ptr [r13+0]
.text:0000000000010235                 mov     ebp, 1
.text:000000000001023A                 mov     [rbx], eax
.text:000000000001023C                 nop     dword ptr [rax+00h]
.text:0000000000010240
.text:0000000000010240 loc_10240:                              ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000010240                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000010240                 mov     rdx, [rsp+38h+var_30]
.text:0000000000010245                 xor     rdx, fs:28h
.text:000000000001024E                 mov     rax, rbp
.text:0000000000010251                 jnz     short loc_1025E
.text:0000000000010253                 add     rsp, 18h
.text:0000000000010257                 pop     rbx
.text:0000000000010258                 pop     rbp
.text:0000000000010259                 pop     r12
.text:000000000001025B                 pop     r13
.text:000000000001025D                 retn
.text:000000000001025E ; ---------------------------------------------------------------------------
.text:000000000001025E
.text:000000000001025E loc_1025E:                              ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000001025E                 call    ___stack_chk_fail
.text:000000000001025E ; } // starts at 101E0
.text:000000000001025E rpl_mbrtowc     endp
.text:000000000001025E
.text:000000000001025E ; ---------------------------------------------------------------------------
.text:0000000000010263                 align 10h
.text:0000000000010270
.text:0000000000010270 ; =============== S U B R O U T I N E =======================================
.text:0000000000010270
.text:0000000000010270
.text:0000000000010270 unescape_tab    proc near               ; CODE XREF: read_file_system_list+158↓p
.text:0000000000010270                                         ; read_file_system_list+167↓p ...
.text:0000000000010270 ; __unwind {
.text:0000000000010270                 push    rbx
.text:0000000000010271                 mov     rbx, rdi
.text:0000000000010274                 call    _strlen
.text:0000000000010279                 mov     rcx, rbx
.text:000000000001027C                 add     rax, 1
.text:0000000000010280                 xor     edx, edx
.text:0000000000010282                 jmp     short loc_10297
.text:0000000000010282 ; ---------------------------------------------------------------------------
.text:0000000000010284                 align 8
.text:0000000000010288
.text:0000000000010288 loc_10288:                              ; CODE XREF: unescape_tab+33↓j
.text:0000000000010288                                         ; unescape_tab+3C↓j ...
.text:0000000000010288                 mov     [rcx], sil
.text:000000000001028B                 mov     rdx, rdi
.text:000000000001028E
.text:000000000001028E loc_1028E:                              ; CODE XREF: unescape_tab+7A↓j
.text:000000000001028E                 add     rcx, 1
.text:0000000000010292                 cmp     rax, rdx
.text:0000000000010295                 jbe     short loc_102F0
.text:0000000000010297
.text:0000000000010297 loc_10297:                              ; CODE XREF: unescape_tab+12↑j
.text:0000000000010297                 movzx   esi, byte ptr [rbx+rdx]
.text:000000000001029B                 lea     rdi, [rdx+1]
.text:000000000001029F                 cmp     sil, 5Ch ; '\'
.text:00000000000102A3                 jnz     short loc_10288
.text:00000000000102A5                 lea     r8, [rdx+4]
.text:00000000000102A9                 cmp     r8, rax
.text:00000000000102AC                 jnb     short loc_10288
.text:00000000000102AE                 movzx   r9d, byte ptr [rbx+rdi]
.text:00000000000102B3                 lea     r10d, [r9-30h]
.text:00000000000102B7                 cmp     r10b, 3
.text:00000000000102BB                 ja      short loc_10288
.text:00000000000102BD                 movzx   r10d, byte ptr [rbx+rdx+2]
.text:00000000000102C3                 lea     r11d, [r10-30h]
.text:00000000000102C7                 cmp     r11b, 7
.text:00000000000102CB                 ja      short loc_10288
.text:00000000000102CD                 movzx   edx, byte ptr [rbx+rdx+3]
.text:00000000000102D2                 lea     r11d, [rdx-30h]
.text:00000000000102D6                 cmp     r11b, 7
.text:00000000000102DA                 ja      short loc_10288
.text:00000000000102DC                 lea     edx, [r10+r9*8]
.text:00000000000102E0                 lea     edx, [r11+rdx*8-80h]
.text:00000000000102E5                 mov     [rcx], dl
.text:00000000000102E7                 mov     rdx, r8
.text:00000000000102EA                 jmp     short loc_1028E
.text:00000000000102EA ; ---------------------------------------------------------------------------
.text:00000000000102EC                 align 10h
.text:00000000000102F0
.text:00000000000102F0 loc_102F0:                              ; CODE XREF: unescape_tab+25↑j
.text:00000000000102F0                 pop     rbx
.text:00000000000102F1                 retn
.text:00000000000102F1 ; } // starts at 10270
.text:00000000000102F1 unescape_tab    endp
.text:00000000000102F1
.text:00000000000102F1 ; ---------------------------------------------------------------------------
.text:00000000000102F2                 align 20h
.text:0000000000010300
.text:0000000000010300 ; =============== S U B R O U T I N E =======================================
.text:0000000000010300
.text:0000000000010300
.text:0000000000010300 ; __int64 __fastcall free_mount_entry(void *ptr)
.text:0000000000010300                 public free_mount_entry
.text:0000000000010300 free_mount_entry proc near              ; CODE XREF: main+133E↑p
.text:0000000000010300                                         ; read_file_system_list+734↓p
.text:0000000000010300 ; __unwind {
.text:0000000000010300                 push    rbx
.text:0000000000010301                 mov     rbx, rdi
.text:0000000000010304                 mov     rdi, [rdi]      ; ptr
.text:0000000000010307                 call    free
.text:000000000001030C                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000010310                 call    free
.text:0000000000010315                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000010319                 call    free
.text:000000000001031E                 test    byte ptr [rbx+28h], 4
.text:0000000000010322                 jz      short loc_1032D
.text:0000000000010324                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000010328                 call    free
.text:000000000001032D
.text:000000000001032D loc_1032D:                              ; CODE XREF: free_mount_entry+22↑j
.text:000000000001032D                 mov     rdi, rbx        ; ptr
.text:0000000000010330                 pop     rbx
.text:0000000000010331                 jmp     free
.text:0000000000010331 ; } // starts at 10300
.text:0000000000010331 free_mount_entry endp
.text:0000000000010331
.text:0000000000010331 ; ---------------------------------------------------------------------------
.text:0000000000010336                 align 20h
.text:0000000000010340
.text:0000000000010340 ; =============== S U B R O U T I N E =======================================
.text:0000000000010340
.text:0000000000010340
.text:0000000000010340                 public read_file_system_list
.text:0000000000010340 read_file_system_list proc near         ; CODE XREF: main+132C↑p
.text:0000000000010340
.text:0000000000010340 var_90          = qword ptr -90h
.text:0000000000010340 var_81          = byte ptr -81h
.text:0000000000010340 var_80          = dword ptr -80h
.text:0000000000010340 var_7C          = dword ptr -7Ch
.text:0000000000010340 var_78          = dword ptr -78h
.text:0000000000010340 var_74          = dword ptr -74h
.text:0000000000010340 var_70          = dword ptr -70h
.text:0000000000010340 var_6C          = dword ptr -6Ch
.text:0000000000010340 var_68          = dword ptr -68h
.text:0000000000010340 var_64          = dword ptr -64h
.text:0000000000010340 var_60          = dword ptr -60h
.text:0000000000010340 var_5C          = dword ptr -5Ch
.text:0000000000010340 ptr             = qword ptr -58h
.text:0000000000010340 lineptr         = qword ptr -50h
.text:0000000000010340 n               = qword ptr -48h
.text:0000000000010340 var_40          = qword ptr -40h
.text:0000000000010340
.text:0000000000010340 ; __unwind {
.text:0000000000010340                 push    r15
.text:0000000000010342                 push    r14
.text:0000000000010344                 lea     rsi, aUpper+4   ; modes
.text:000000000001034B                 push    r13
.text:000000000001034D                 push    r12
.text:000000000001034F                 lea     rdi, filename   ; "/proc/self/mountinfo"
.text:0000000000010356                 push    rbp
.text:0000000000010357                 push    rbx
.text:0000000000010358                 sub     rsp, 68h
.text:000000000001035C                 mov     rax, fs:28h
.text:0000000000010365                 mov     [rsp+98h+var_40], rax
.text:000000000001036A                 xor     eax, eax
.text:000000000001036C                 call    _fopen
.text:0000000000010371                 test    rax, rax
.text:0000000000010374                 jz      loc_107C0
.text:000000000001037A                 lea     r14, [rsp+98h+ptr]
.text:000000000001037F                 lea     r13, [rsp+98h+n]
.text:0000000000010384                 lea     r12, [rsp+98h+lineptr]
.text:0000000000010389                 mov     rbp, rax
.text:000000000001038C                 mov     [rsp+98h+lineptr], 0
.text:0000000000010395                 mov     [rsp+98h+n], 0
.text:000000000001039E                 xchg    ax, ax
.text:00000000000103A0
.text:00000000000103A0 loc_103A0:                              ; CODE XREF: read_file_system_list+C4↓j
.text:00000000000103A0                                         ; read_file_system_list+E2↓j ...
.text:00000000000103A0                 mov     rcx, rbp        ; stream
.text:00000000000103A3                 mov     edx, 0Ah        ; delimiter
.text:00000000000103A8                 mov     rsi, r13        ; n
.text:00000000000103AB                 mov     rdi, r12        ; lineptr
.text:00000000000103AE                 call    ___getdelim
.text:00000000000103B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000103B7                 jz      loc_105F0
.text:00000000000103BD                 lea     rcx, [rsp+98h+var_7C]
.text:00000000000103C2                 lea     rdx, [rsp+98h+var_80]
.text:00000000000103C7                 sub     rsp, 8
.text:00000000000103CB                 lea     rbx, [rsp+0A0h+var_81]
.text:00000000000103D0                 lea     rsi, aUUUUNSNNSNC ; "%*u %*u %u:%u %n%*s%n %n%*s%n%c"
.text:00000000000103D7                 push    rbx
.text:00000000000103D8                 lea     rax, [rsp+0A8h+var_74]
.text:00000000000103DD                 push    rax
.text:00000000000103DE                 lea     rax, [rsp+0B0h+var_78]
.text:00000000000103E3                 push    rax
.text:00000000000103E4                 mov     rdi, [rsp+0B8h+lineptr] ; s
.text:00000000000103E9                 xor     eax, eax
.text:00000000000103EB                 lea     r9, [rsp+0B8h+var_5C]
.text:00000000000103F0                 lea     r8, [rsp+0B8h+var_60]
.text:00000000000103F5                 call    _sscanf
.text:00000000000103FA                 and     eax, 0FFFFFFFBh
.text:00000000000103FD                 add     rsp, 20h
.text:0000000000010401                 cmp     eax, 3
.text:0000000000010404                 jnz     short loc_103A0
.text:0000000000010406                 movsxd  rdi, [rsp+98h+var_74]
.text:000000000001040B                 lea     rsi, needle     ; " - "
.text:0000000000010412                 add     rdi, [rsp+98h+lineptr] ; haystack
.text:0000000000010417                 call    _strstr
.text:000000000001041C                 test    rax, rax
.text:000000000001041F                 mov     r15, rax
.text:0000000000010422                 jz      loc_103A0
.text:0000000000010428                 lea     rcx, [rsp+98h+var_6C]
.text:000000000001042D                 lea     rdx, [rsp+98h+var_70]
.text:0000000000010432                 sub     rsp, 8
.text:0000000000010436                 push    rbx
.text:0000000000010437                 lea     rsi, aNSNNSNC   ; " - %n%*s%n %n%*s%n %c"
.text:000000000001043E                 mov     rdi, rax        ; s
.text:0000000000010441                 xor     eax, eax
.text:0000000000010443                 lea     r9, [rsp+0A8h+var_64]
.text:0000000000010448                 lea     r8, [rsp+0A8h+var_68]
.text:000000000001044D                 call    _sscanf
.text:0000000000010452                 and     eax, 0FFFFFFFBh
.text:0000000000010455                 cmp     eax, 1
.text:0000000000010458                 pop     rdx
.text:0000000000010459                 pop     rcx
.text:000000000001045A                 jnz     loc_103A0
.text:0000000000010460                 movsxd  rax, [rsp+98h+var_5C]
.text:0000000000010465                 mov     rdx, [rsp+98h+lineptr]
.text:000000000001046A                 mov     byte ptr [rdx+rax], 0
.text:000000000001046E                 movsxd  rax, [rsp+98h+var_74]
.text:0000000000010473                 mov     rdx, [rsp+98h+lineptr]
.text:0000000000010478                 mov     byte ptr [rdx+rax], 0
.text:000000000001047C                 movsxd  rax, [rsp+98h+var_6C]
.text:0000000000010481                 mov     byte ptr [r15+rax], 0
.text:0000000000010486                 movsxd  rax, [rsp+98h+var_64]
.text:000000000001048B                 mov     byte ptr [r15+rax], 0
.text:0000000000010490                 movsxd  rdi, [rsp+98h+var_68]
.text:0000000000010495                 add     rdi, r15
.text:0000000000010498                 call    unescape_tab
.text:000000000001049D                 movsxd  rdi, [rsp+98h+var_78]
.text:00000000000104A2                 add     rdi, [rsp+98h+lineptr]
.text:00000000000104A7                 call    unescape_tab
.text:00000000000104AC                 movsxd  rdi, [rsp+98h+var_60]
.text:00000000000104B1                 add     rdi, [rsp+98h+lineptr]
.text:00000000000104B6                 call    unescape_tab
.text:00000000000104BB                 mov     edi, 38h ; '8'
.text:00000000000104C0                 call    xmalloc
.text:00000000000104C5                 movsxd  rdi, [rsp+98h+var_68]
.text:00000000000104CA                 mov     rbx, rax
.text:00000000000104CD                 add     rdi, r15        ; src
.text:00000000000104D0                 call    xstrdup
.text:00000000000104D5                 movsxd  rdi, [rsp+98h+var_78]
.text:00000000000104DA                 mov     [rbx], rax
.text:00000000000104DD                 add     rdi, [rsp+98h+lineptr] ; src
.text:00000000000104E2                 call    xstrdup
.text:00000000000104E7                 movsxd  rdi, [rsp+98h+var_60]
.text:00000000000104EC                 mov     [rbx+8], rax
.text:00000000000104F0                 add     rdi, [rsp+98h+lineptr] ; src
.text:00000000000104F5                 call    xstrdup
.text:00000000000104FA                 movsxd  rdi, [rsp+98h+var_70]
.text:00000000000104FF                 mov     [rbx+10h], rax
.text:0000000000010503                 add     rdi, r15        ; src
.text:0000000000010506                 call    xstrdup
.text:000000000001050B                 mov     edx, [rsp+98h+var_80]
.text:000000000001050F                 mov     r15, rax
.text:0000000000010512                 mov     [rbx+18h], rax
.text:0000000000010516                 mov     eax, [rsp+98h+var_7C]
.text:000000000001051A                 mov     rsi, 0FFFFF00000000000h
.text:0000000000010524                 lea     rdi, aAutofs    ; "autofs"
.text:000000000001052B                 or      byte ptr [rbx+28h], 4
.text:000000000001052F                 mov     rcx, rdx
.text:0000000000010532                 shl     rdx, 20h
.text:0000000000010536                 shl     rcx, 8
.text:000000000001053A                 and     rdx, rsi
.text:000000000001053D                 mov     rsi, 0FFFFFF00000h
.text:0000000000010547                 and     ecx, 0FFF00h
.text:000000000001054D                 or      rdx, rcx
.text:0000000000010550                 movzx   ecx, al
.text:0000000000010553                 shl     rax, 0Ch
.text:0000000000010557                 or      rdx, rcx
.text:000000000001055A                 and     rax, rsi
.text:000000000001055D                 mov     ecx, 7
.text:0000000000010562                 mov     rsi, r15
.text:0000000000010565                 or      rax, rdx
.text:0000000000010568                 mov     edx, 1
.text:000000000001056D                 repe cmpsb
.text:000000000001056F                 mov     [rbx+20h], rax
.text:0000000000010573                 setnbe  al
.text:0000000000010576                 sbb     al, 0
.text:0000000000010578                 test    al, al
.text:000000000001057A                 jz      short loc_1059A
.text:000000000001057C                 lea     rdi, aProc      ; "proc"
.text:0000000000010583                 mov     ecx, 5
.text:0000000000010588                 mov     rsi, r15
.text:000000000001058B                 repe cmpsb
.text:000000000001058D                 setnbe  al
.text:0000000000010590                 sbb     al, 0
.text:0000000000010592                 test    al, al
.text:0000000000010594                 jnz     loc_10648
.text:000000000001059A
.text:000000000001059A loc_1059A:                              ; CODE XREF: read_file_system_list+23A↑j
.text:000000000001059A                                         ; read_file_system_list+320↓j ...
.text:000000000001059A                 movzx   eax, byte ptr [rbx+28h]
.text:000000000001059E                 mov     r8, [rbx]
.text:00000000000105A1                 mov     esi, 3Ah ; ':'  ; c
.text:00000000000105A6                 mov     rdi, r8         ; s
.text:00000000000105A9                 mov     [rsp+98h+var_90], r8
.text:00000000000105AE                 and     eax, 0FFFFFFFEh
.text:00000000000105B1                 or      eax, edx
.text:00000000000105B3                 mov     [rbx+28h], al
.text:00000000000105B6                 call    _strchr
.text:00000000000105BB                 test    rax, rax
.text:00000000000105BE                 mov     edx, 1
.text:00000000000105C3                 mov     r8, [rsp+98h+var_90]
.text:00000000000105C8                 jz      loc_10790
.text:00000000000105CE
.text:00000000000105CE loc_105CE:                              ; CODE XREF: read_file_system_list+475↓j
.text:00000000000105CE                                         ; read_file_system_list+7A3↓j ...
.text:00000000000105CE                 movzx   eax, byte ptr [rbx+28h]
.text:00000000000105D2                 add     edx, edx
.text:00000000000105D4                 and     eax, 0FFFFFFFDh
.text:00000000000105D7                 or      eax, edx
.text:00000000000105D9                 mov     [rbx+28h], al
.text:00000000000105DC                 mov     [r14], rbx
.text:00000000000105DF                 lea     r14, [rbx+30h]
.text:00000000000105E3                 jmp     loc_103A0
.text:00000000000105E3 ; ---------------------------------------------------------------------------
.text:00000000000105E8                 align 10h
.text:00000000000105F0
.text:00000000000105F0 loc_105F0:                              ; CODE XREF: read_file_system_list+77↑j
.text:00000000000105F0                 mov     rdi, [rsp+98h+lineptr] ; ptr
.text:00000000000105F5                 call    free
.text:00000000000105FA                 test    byte ptr [rbp+0], 20h
.text:00000000000105FE                 jnz     loc_10B60
.text:0000000000010604                 mov     rdi, rbp        ; stream
.text:0000000000010607                 call    rpl_fclose
.text:000000000001060C                 cmp     eax, 0FFFFFFFFh
.text:000000000001060F                 jz      loc_10A4E
.text:0000000000010615
.text:0000000000010615 loc_10615:                              ; CODE XREF: read_file_system_list+708↓j
.text:0000000000010615                 mov     qword ptr [r14], 0
.text:000000000001061C                 mov     rax, [rsp+98h+ptr]
.text:0000000000010621
.text:0000000000010621 loc_10621:                              ; CODE XREF: read_file_system_list+74C↓j
.text:0000000000010621                                         ; read_file_system_list+83E↓j
.text:0000000000010621                 mov     rbx, [rsp+98h+var_40]
.text:0000000000010626                 xor     rbx, fs:28h
.text:000000000001062F                 jnz     loc_10B83
.text:0000000000010635                 add     rsp, 68h
.text:0000000000010639                 pop     rbx
.text:000000000001063A                 pop     rbp
.text:000000000001063B                 pop     r12
.text:000000000001063D                 pop     r13
.text:000000000001063F                 pop     r14
.text:0000000000010641                 pop     r15
.text:0000000000010643                 retn
.text:0000000000010643 ; ---------------------------------------------------------------------------
.text:0000000000010644                 align 8
.text:0000000000010648
.text:0000000000010648 loc_10648:                              ; CODE XREF: read_file_system_list+254↑j
.text:0000000000010648                 lea     rdi, aSubfs     ; "subfs"
.text:000000000001064F                 mov     ecx, 6
.text:0000000000010654                 mov     rsi, r15
.text:0000000000010657                 repe cmpsb
.text:0000000000010659                 setnbe  al
.text:000000000001065C                 sbb     al, 0
.text:000000000001065E                 test    al, al
.text:0000000000010660                 jz      loc_1059A
.text:0000000000010666                 lea     rdi, aDebugfs   ; "debugfs"
.text:000000000001066D                 mov     ecx, 8
.text:0000000000010672                 mov     rsi, r15
.text:0000000000010675                 repe cmpsb
.text:0000000000010677                 setnbe  al
.text:000000000001067A                 sbb     al, 0
.text:000000000001067C                 test    al, al
.text:000000000001067E                 jz      loc_1059A
.text:0000000000010684                 lea     rdi, aDevpts    ; "devpts"
.text:000000000001068B                 mov     ecx, 7
.text:0000000000010690                 mov     rsi, r15
.text:0000000000010693                 repe cmpsb
.text:0000000000010695                 setnbe  al
.text:0000000000010698                 sbb     al, 0
.text:000000000001069A                 test    al, al
.text:000000000001069C                 jz      loc_1059A
.text:00000000000106A2                 lea     rdi, aFusectl   ; "fusectl"
.text:00000000000106A9                 mov     ecx, 8
.text:00000000000106AE                 mov     rsi, r15
.text:00000000000106B1                 repe cmpsb
.text:00000000000106B3                 setnbe  al
.text:00000000000106B6                 sbb     al, 0
.text:00000000000106B8                 test    al, al
.text:00000000000106BA                 jz      loc_1059A
.text:00000000000106C0                 lea     rdi, aMqueue    ; "mqueue"
.text:00000000000106C7                 mov     ecx, 7
.text:00000000000106CC                 mov     rsi, r15
.text:00000000000106CF                 repe cmpsb
.text:00000000000106D1                 setnbe  al
.text:00000000000106D4                 sbb     al, 0
.text:00000000000106D6                 test    al, al
.text:00000000000106D8                 jz      loc_1059A
.text:00000000000106DE                 lea     rdi, aRpcPipefs ; "rpc_pipefs"
.text:00000000000106E5                 mov     ecx, 0Bh
.text:00000000000106EA                 mov     rsi, r15
.text:00000000000106ED                 repe cmpsb
.text:00000000000106EF                 setnbe  al
.text:00000000000106F2                 sbb     al, 0
.text:00000000000106F4                 test    al, al
.text:00000000000106F6                 jz      loc_1059A
.text:00000000000106FC                 lea     rdi, aSysfs     ; "sysfs"
.text:0000000000010703                 mov     ecx, 6
.text:0000000000010708                 mov     rsi, r15
.text:000000000001070B                 repe cmpsb
.text:000000000001070D                 setnbe  al
.text:0000000000010710                 sbb     al, 0
.text:0000000000010712                 test    al, al
.text:0000000000010714                 jz      loc_1059A
.text:000000000001071A                 lea     rdi, aDevfs     ; "devfs"
.text:0000000000010721                 mov     ecx, 6
.text:0000000000010726                 mov     rsi, r15
.text:0000000000010729                 repe cmpsb
.text:000000000001072B                 setnbe  al
.text:000000000001072E                 sbb     al, 0
.text:0000000000010730                 test    al, al
.text:0000000000010732                 jz      loc_1059A
.text:0000000000010738                 lea     rdi, aKernfs    ; "kernfs"
.text:000000000001073F                 mov     ecx, 7
.text:0000000000010744                 mov     rsi, r15
.text:0000000000010747                 repe cmpsb
.text:0000000000010749                 setnbe  al
.text:000000000001074C                 sbb     al, 0
.text:000000000001074E                 test    al, al
.text:0000000000010750                 jz      loc_1059A
.text:0000000000010756                 lea     rsi, aIgnore    ; "ignore"
.text:000000000001075D                 mov     rdi, r15        ; s1
.text:0000000000010760                 mov     byte ptr [rsp+98h+var_90], dl
.text:0000000000010764                 call    _strcmp
.text:0000000000010769                 test    eax, eax
.text:000000000001076B                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:0000000000010770                 jz      loc_1059A
.text:0000000000010776                 lea     rsi, aNone      ; "none"
.text:000000000001077D                 mov     rdi, r15        ; s1
.text:0000000000010780                 call    _strcmp
.text:0000000000010785                 test    eax, eax
.text:0000000000010787                 setz    dl
.text:000000000001078A                 jmp     loc_1059A
.text:000000000001078A ; ---------------------------------------------------------------------------
.text:000000000001078F                 align 10h
.text:0000000000010790
.text:0000000000010790 loc_10790:                              ; CODE XREF: read_file_system_list+288↑j
.text:0000000000010790                 cmp     byte ptr [r8], 2Fh ; '/'
.text:0000000000010794                 jz      loc_10AC0
.text:000000000001079A
.text:000000000001079A loc_1079A:                              ; CODE XREF: read_file_system_list+785↓j
.text:000000000001079A                                         ; read_file_system_list+7C7↓j
.text:000000000001079A                 lea     rsi, aHosts     ; "-hosts"
.text:00000000000107A1                 mov     ecx, 7
.text:00000000000107A6                 mov     rdi, r8
.text:00000000000107A9                 repe cmpsb
.text:00000000000107AB                 setnbe  al
.text:00000000000107AE                 sbb     al, 0
.text:00000000000107B0                 test    al, al
.text:00000000000107B2                 setz    dl
.text:00000000000107B5                 jmp     loc_105CE
.text:00000000000107B5 ; ---------------------------------------------------------------------------
.text:00000000000107BA                 align 20h
.text:00000000000107C0
.text:00000000000107C0 loc_107C0:                              ; CODE XREF: read_file_system_list+34↑j
.text:00000000000107C0                 lea     rsi, aUpper+4   ; mode
.text:00000000000107C7                 lea     rdi, aEtcMtab   ; "/etc/mtab"
.text:00000000000107CE                 call    _setmntent
.text:00000000000107D3                 test    rax, rax
.text:00000000000107D6                 mov     rbx, rax
.text:00000000000107D9                 jz      loc_10B7C
.text:00000000000107DF                 mov     rdi, rbx        ; stream
.text:00000000000107E2                 lea     r14, [rsp+98h+ptr]
.text:00000000000107E7                 lea     rbp, aAutofs    ; "autofs"
.text:00000000000107EE                 call    _getmntent
.text:00000000000107F3                 test    rax, rax
.text:00000000000107F6                 mov     r13, rax
.text:00000000000107F9                 jz      loc_10A3E
.text:00000000000107FF                 nop
.text:0000000000010800
.text:0000000000010800 loc_10800:                              ; CODE XREF: read_file_system_list+6F8↓j
.text:0000000000010800                 lea     rsi, opt        ; "bind"
.text:0000000000010807                 mov     rdi, r13        ; mnt
.text:000000000001080A                 call    _hasmntopt
.text:000000000001080F                 mov     edi, 38h ; '8'
.text:0000000000010814                 mov     r15, rax
.text:0000000000010817                 call    xmalloc
.text:000000000001081C                 mov     rdi, [r13+0]    ; src
.text:0000000000010820                 mov     r12, rax
.text:0000000000010823                 call    xstrdup
.text:0000000000010828                 mov     rdi, [r13+8]    ; src
.text:000000000001082C                 mov     [r12], rax
.text:0000000000010830                 call    xstrdup
.text:0000000000010835                 mov     rdi, [r13+10h]  ; src
.text:0000000000010839                 mov     [r12+8], rax
.text:000000000001083E                 mov     qword ptr [r12+10h], 0
.text:0000000000010847                 call    xstrdup
.text:000000000001084C                 mov     ecx, 7
.text:0000000000010851                 mov     rsi, rax
.text:0000000000010854                 mov     rdi, rbp
.text:0000000000010857                 or      byte ptr [r12+28h], 4
.text:000000000001085D                 mov     r13, rax
.text:0000000000010860                 mov     [r12+18h], rax
.text:0000000000010865                 repe cmpsb
.text:0000000000010867                 mov     edx, 1
.text:000000000001086C                 setnbe  al
.text:000000000001086F                 sbb     al, 0
.text:0000000000010871                 test    al, al
.text:0000000000010873                 jz      loc_109D8
.text:0000000000010879                 lea     rdi, aProc      ; "proc"
.text:0000000000010880                 mov     ecx, 5
.text:0000000000010885                 mov     rsi, r13
.text:0000000000010888                 repe cmpsb
.text:000000000001088A                 setnbe  al
.text:000000000001088D                 sbb     al, 0
.text:000000000001088F                 test    al, al
.text:0000000000010891                 jz      loc_109D8
.text:0000000000010897                 lea     rdi, aSubfs     ; "subfs"
.text:000000000001089E                 mov     ecx, 6
.text:00000000000108A3                 mov     rsi, r13
.text:00000000000108A6                 repe cmpsb
.text:00000000000108A8                 setnbe  al
.text:00000000000108AB                 sbb     al, 0
.text:00000000000108AD                 test    al, al
.text:00000000000108AF                 jz      loc_109D8
.text:00000000000108B5                 lea     rdi, aDebugfs   ; "debugfs"
.text:00000000000108BC                 mov     ecx, 8
.text:00000000000108C1                 mov     rsi, r13
.text:00000000000108C4                 repe cmpsb
.text:00000000000108C6                 setnbe  al
.text:00000000000108C9                 sbb     al, 0
.text:00000000000108CB                 test    al, al
.text:00000000000108CD                 jz      loc_109D8
.text:00000000000108D3                 lea     rdi, aDevpts    ; "devpts"
.text:00000000000108DA                 mov     ecx, 7
.text:00000000000108DF                 mov     rsi, r13
.text:00000000000108E2                 repe cmpsb
.text:00000000000108E4                 setnbe  al
.text:00000000000108E7                 sbb     al, 0
.text:00000000000108E9                 test    al, al
.text:00000000000108EB                 jz      loc_109D8
.text:00000000000108F1                 lea     rdi, aFusectl   ; "fusectl"
.text:00000000000108F8                 mov     ecx, 8
.text:00000000000108FD                 mov     rsi, r13
.text:0000000000010900                 repe cmpsb
.text:0000000000010902                 setnbe  al
.text:0000000000010905                 sbb     al, 0
.text:0000000000010907                 test    al, al
.text:0000000000010909                 jz      loc_109D8
.text:000000000001090F                 lea     rdi, aMqueue    ; "mqueue"
.text:0000000000010916                 mov     ecx, 7
.text:000000000001091B                 mov     rsi, r13
.text:000000000001091E                 repe cmpsb
.text:0000000000010920                 setnbe  al
.text:0000000000010923                 sbb     al, 0
.text:0000000000010925                 test    al, al
.text:0000000000010927                 jz      loc_109D8
.text:000000000001092D                 lea     rdi, aRpcPipefs ; "rpc_pipefs"
.text:0000000000010934                 mov     ecx, 0Bh
.text:0000000000010939                 mov     rsi, r13
.text:000000000001093C                 repe cmpsb
.text:000000000001093E                 setnbe  al
.text:0000000000010941                 sbb     al, 0
.text:0000000000010943                 test    al, al
.text:0000000000010945                 jz      loc_109D8
.text:000000000001094B                 lea     rdi, aSysfs     ; "sysfs"
.text:0000000000010952                 mov     ecx, 6
.text:0000000000010957                 mov     rsi, r13
.text:000000000001095A                 repe cmpsb
.text:000000000001095C                 setnbe  al
.text:000000000001095F                 sbb     al, 0
.text:0000000000010961                 test    al, al
.text:0000000000010963                 jz      short loc_109D8
.text:0000000000010965                 lea     rdi, aDevfs     ; "devfs"
.text:000000000001096C                 mov     ecx, 6
.text:0000000000010971                 mov     rsi, r13
.text:0000000000010974                 repe cmpsb
.text:0000000000010976                 setnbe  al
.text:0000000000010979                 sbb     al, 0
.text:000000000001097B                 test    al, al
.text:000000000001097D                 jz      short loc_109D8
.text:000000000001097F                 lea     rdi, aKernfs    ; "kernfs"
.text:0000000000010986                 mov     ecx, 7
.text:000000000001098B                 mov     rsi, r13
.text:000000000001098E                 repe cmpsb
.text:0000000000010990                 setnbe  al
.text:0000000000010993                 sbb     al, 0
.text:0000000000010995                 test    al, al
.text:0000000000010997                 jz      short loc_109D8
.text:0000000000010999                 lea     rsi, aIgnore    ; "ignore"
.text:00000000000109A0                 mov     rdi, r13        ; s1
.text:00000000000109A3                 mov     byte ptr [rsp+98h+var_90], dl
.text:00000000000109A7                 call    _strcmp
.text:00000000000109AC                 test    eax, eax
.text:00000000000109AE                 movzx   edx, byte ptr [rsp+98h+var_90]
.text:00000000000109B3                 jz      short loc_109D8
.text:00000000000109B5                 lea     rsi, aNone      ; "none"
.text:00000000000109BC                 mov     rdi, r13        ; s1
.text:00000000000109BF                 call    _strcmp
.text:00000000000109C4                 test    r15, r15
.text:00000000000109C7                 setz    dl
.text:00000000000109CA                 test    eax, eax
.text:00000000000109CC                 setz    al
.text:00000000000109CF                 and     edx, eax
.text:00000000000109D1                 nop     dword ptr [rax+00000000h]
.text:00000000000109D8
.text:00000000000109D8 loc_109D8:                              ; CODE XREF: read_file_system_list+533↑j
.text:00000000000109D8                                         ; read_file_system_list+551↑j ...
.text:00000000000109D8                 movzx   eax, byte ptr [r12+28h]
.text:00000000000109DE                 mov     r15, [r12]
.text:00000000000109E2                 mov     esi, 3Ah ; ':'  ; c
.text:00000000000109E7                 mov     rdi, r15        ; s
.text:00000000000109EA                 and     eax, 0FFFFFFFEh
.text:00000000000109ED                 or      eax, edx
.text:00000000000109EF                 mov     [r12+28h], al
.text:00000000000109F4                 call    _strchr
.text:00000000000109F9                 test    rax, rax
.text:00000000000109FC                 mov     edx, 1
.text:0000000000010A01                 jz      loc_10A98
.text:0000000000010A07
.text:0000000000010A07 loc_10A07:                              ; CODE XREF: read_file_system_list+779↓j
.text:0000000000010A07                                         ; read_file_system_list+7EF↓j ...
.text:0000000000010A07                 movzx   eax, byte ptr [r12+28h]
.text:0000000000010A0D                 add     edx, edx
.text:0000000000010A0F                 mov     qword ptr [r12+20h], 0FFFFFFFFFFFFFFFFh
.text:0000000000010A18                 mov     rdi, rbx        ; stream
.text:0000000000010A1B                 and     eax, 0FFFFFFFDh
.text:0000000000010A1E                 or      eax, edx
.text:0000000000010A20                 mov     [r12+28h], al
.text:0000000000010A25                 mov     [r14], r12
.text:0000000000010A28                 lea     r14, [r12+30h]
.text:0000000000010A2D                 call    _getmntent
.text:0000000000010A32                 test    rax, rax
.text:0000000000010A35                 mov     r13, rax
.text:0000000000010A38                 jnz     loc_10800
.text:0000000000010A3E
.text:0000000000010A3E loc_10A3E:                              ; CODE XREF: read_file_system_list+4B9↑j
.text:0000000000010A3E                 mov     rdi, rbx        ; stream
.text:0000000000010A41                 call    _endmntent
.text:0000000000010A46                 test    eax, eax
.text:0000000000010A48                 jnz     loc_10615
.text:0000000000010A4E
.text:0000000000010A4E loc_10A4E:                              ; CODE XREF: read_file_system_list+2CF↑j
.text:0000000000010A4E                 call    ___errno_location
.text:0000000000010A53                 mov     r13d, [rax]
.text:0000000000010A56                 mov     r12, rax
.text:0000000000010A59
.text:0000000000010A59 loc_10A59:                              ; CODE XREF: read_file_system_list+837↓j
.text:0000000000010A59                 mov     qword ptr [r14], 0
.text:0000000000010A60                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000010A65                 test    rdi, rdi
.text:0000000000010A68                 jz      short loc_10A86
.text:0000000000010A6A                 nop     word ptr [rax+rax+00h]
.text:0000000000010A70
.text:0000000000010A70 loc_10A70:                              ; CODE XREF: read_file_system_list+744↓j
.text:0000000000010A70                 mov     rbx, [rdi+30h]
.text:0000000000010A74                 call    free_mount_entry
.text:0000000000010A79                 test    rbx, rbx
.text:0000000000010A7C                 mov     [rsp+98h+ptr], rbx
.text:0000000000010A81                 mov     rdi, rbx
.text:0000000000010A84                 jnz     short loc_10A70
.text:0000000000010A86
.text:0000000000010A86 loc_10A86:                              ; CODE XREF: read_file_system_list+728↑j
.text:0000000000010A86                 mov     [r12], r13d
.text:0000000000010A8A                 xor     eax, eax
.text:0000000000010A8C                 jmp     loc_10621
.text:0000000000010A8C ; ---------------------------------------------------------------------------
.text:0000000000010A91                 align 8
.text:0000000000010A98
.text:0000000000010A98 loc_10A98:                              ; CODE XREF: read_file_system_list+6C1↑j
.text:0000000000010A98                 cmp     byte ptr [r15], 2Fh ; '/'
.text:0000000000010A9C                 jz      short loc_10B10
.text:0000000000010A9E
.text:0000000000010A9E loc_10A9E:                              ; CODE XREF: read_file_system_list+7D5↓j
.text:0000000000010A9E                                         ; read_file_system_list+813↓j
.text:0000000000010A9E                 lea     rsi, aHosts     ; "-hosts"
.text:0000000000010AA5                 mov     ecx, 7
.text:0000000000010AAA                 mov     rdi, r15
.text:0000000000010AAD                 repe cmpsb
.text:0000000000010AAF                 setnbe  al
.text:0000000000010AB2                 sbb     al, 0
.text:0000000000010AB4                 test    al, al
.text:0000000000010AB6                 setz    dl
.text:0000000000010AB9                 jmp     loc_10A07
.text:0000000000010AB9 ; ---------------------------------------------------------------------------
.text:0000000000010ABE                 align 20h
.text:0000000000010AC0
.text:0000000000010AC0 loc_10AC0:                              ; CODE XREF: read_file_system_list+454↑j
.text:0000000000010AC0                 cmp     byte ptr [r8+1], 2Fh ; '/'
.text:0000000000010AC5                 jnz     loc_1079A
.text:0000000000010ACB                 lea     rdi, aSmbfs     ; "smbfs"
.text:0000000000010AD2                 mov     ecx, 6
.text:0000000000010AD7                 mov     rsi, r15
.text:0000000000010ADA                 repe cmpsb
.text:0000000000010ADC                 setnbe  al
.text:0000000000010ADF                 sbb     al, 0
.text:0000000000010AE1                 test    al, al
.text:0000000000010AE3                 jz      loc_105CE
.text:0000000000010AE9                 lea     rdi, aCifs      ; "cifs"
.text:0000000000010AF0                 mov     ecx, 5
.text:0000000000010AF5                 mov     rsi, r15
.text:0000000000010AF8                 repe cmpsb
.text:0000000000010AFA                 setnbe  al
.text:0000000000010AFD                 sbb     al, 0
.text:0000000000010AFF                 test    al, al
.text:0000000000010B01                 jz      loc_105CE
.text:0000000000010B07                 jmp     loc_1079A
.text:0000000000010B07 ; ---------------------------------------------------------------------------
.text:0000000000010B0C                 align 10h
.text:0000000000010B10
.text:0000000000010B10 loc_10B10:                              ; CODE XREF: read_file_system_list+75C↑j
.text:0000000000010B10                 cmp     byte ptr [r15+1], 2Fh ; '/'
.text:0000000000010B15                 jnz     short loc_10A9E
.text:0000000000010B17                 lea     rdi, aSmbfs     ; "smbfs"
.text:0000000000010B1E                 mov     ecx, 6
.text:0000000000010B23                 mov     rsi, r13
.text:0000000000010B26                 repe cmpsb
.text:0000000000010B28                 setnbe  al
.text:0000000000010B2B                 sbb     al, 0
.text:0000000000010B2D                 test    al, al
.text:0000000000010B2F                 jz      loc_10A07
.text:0000000000010B35                 lea     rdi, aCifs      ; "cifs"
.text:0000000000010B3C                 mov     ecx, 5
.text:0000000000010B41                 mov     rsi, r13
.text:0000000000010B44                 repe cmpsb
.text:0000000000010B46                 setnbe  al
.text:0000000000010B49                 sbb     al, 0
.text:0000000000010B4B                 test    al, al
.text:0000000000010B4D                 jz      loc_10A07
.text:0000000000010B53                 jmp     loc_10A9E
.text:0000000000010B53 ; ---------------------------------------------------------------------------
.text:0000000000010B58                 align 20h
.text:0000000000010B60
.text:0000000000010B60 loc_10B60:                              ; CODE XREF: read_file_system_list+2BE↑j
.text:0000000000010B60                 call    ___errno_location
.text:0000000000010B65                 mov     r13d, [rax]
.text:0000000000010B68                 mov     r12, rax
.text:0000000000010B6B                 mov     rdi, rbp        ; stream
.text:0000000000010B6E                 call    rpl_fclose
.text:0000000000010B73                 mov     [r12], r13d
.text:0000000000010B77                 jmp     loc_10A59
.text:0000000000010B7C ; ---------------------------------------------------------------------------
.text:0000000000010B7C
.text:0000000000010B7C loc_10B7C:                              ; CODE XREF: read_file_system_list+499↑j
.text:0000000000010B7C                 xor     eax, eax
.text:0000000000010B7E                 jmp     loc_10621
.text:0000000000010B83 ; ---------------------------------------------------------------------------
.text:0000000000010B83
.text:0000000000010B83 loc_10B83:                              ; CODE XREF: read_file_system_list+2EF↑j
.text:0000000000010B83                 call    ___stack_chk_fail
.text:0000000000010B83 ; } // starts at 10340
.text:0000000000010B83 read_file_system_list endp
.text:0000000000010B83
.text:0000000000010B83 ; ---------------------------------------------------------------------------
.text:0000000000010B88                 align 10h
.text:0000000000010B90
.text:0000000000010B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000010B90
.text:0000000000010B90
.text:0000000000010B90 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:0000000000010B90                                         ; parse_expression+854↓p ...
.text:0000000000010B90 ; __unwind {
.text:0000000000010B90                 mov     rax, [rsi+48h]
.text:0000000000010B94                 cmp     [rsi+68h], rax
.text:0000000000010B98                 jle     short loc_10BF0
.text:0000000000010B9A                 mov     r8, [rsi+8]
.text:0000000000010B9E                 cmp     dword ptr [rsi+90h], 1
.text:0000000000010BA5                 movzx   ecx, byte ptr [r8+rax]
.text:0000000000010BAA                 mov     [rdi], cl
.text:0000000000010BAC                 jle     short loc_10BC3
.text:0000000000010BAE                 cmp     rax, [rsi+30h]
.text:0000000000010BB2                 jz      short loc_10BC3
.text:0000000000010BB4                 mov     r9, [rsi+10h]
.text:0000000000010BB8                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:0000000000010BBD                 jz      loc_10C3F
.text:0000000000010BC3
.text:0000000000010BC3 loc_10BC3:                              ; CODE XREF: peek_token_bracket+1C↑j
.text:0000000000010BC3                                         ; peek_token_bracket+22↑j
.text:0000000000010BC3                 cmp     cl, 5Ch ; '\'
.text:0000000000010BC6                 jz      short loc_10C30
.text:0000000000010BC8                 cmp     cl, 5Bh ; '['
.text:0000000000010BCB                 jz      short loc_10C00
.text:0000000000010BCD                 cmp     cl, 5Dh ; ']'
.text:0000000000010BD0                 jz      loc_10C70
.text:0000000000010BD6                 cmp     cl, 5Eh ; '^'
.text:0000000000010BD9                 jz      loc_10C60
.text:0000000000010BDF                 cmp     cl, 2Dh ; '-'
.text:0000000000010BE2                 jnz     short loc_10C3F
.text:0000000000010BE4                 mov     byte ptr [rdi+8], 16h
.text:0000000000010BE8                 mov     eax, 1
.text:0000000000010BED                 retn
.text:0000000000010BED ; ---------------------------------------------------------------------------
.text:0000000000010BEE                 align 10h
.text:0000000000010BF0
.text:0000000000010BF0 loc_10BF0:                              ; CODE XREF: peek_token_bracket+8↑j
.text:0000000000010BF0                 mov     byte ptr [rdi+8], 2
.text:0000000000010BF4                 xor     eax, eax
.text:0000000000010BF6                 retn
.text:0000000000010BF6 ; ---------------------------------------------------------------------------
.text:0000000000010BF7                 align 20h
.text:0000000000010C00
.text:0000000000010C00 loc_10C00:                              ; CODE XREF: peek_token_bracket+3B↑j
.text:0000000000010C00                 lea     rcx, [rax+1]
.text:0000000000010C04                 cmp     rcx, [rsi+58h]
.text:0000000000010C08                 jge     short loc_10C50
.text:0000000000010C0A                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000010C10                 cmp     al, 3Ah ; ':'
.text:0000000000010C12                 mov     [rdi], al
.text:0000000000010C14                 jz      loc_10CB0
.text:0000000000010C1A                 cmp     al, 3Dh ; '='
.text:0000000000010C1C                 jz      loc_10CA0
.text:0000000000010C22                 cmp     al, 2Eh ; '.'
.text:0000000000010C24                 jnz     short loc_10C50
.text:0000000000010C26                 mov     byte ptr [rdi+8], 1Ah
.text:0000000000010C2A                 mov     eax, 2
.text:0000000000010C2F                 retn
.text:0000000000010C30 ; ---------------------------------------------------------------------------
.text:0000000000010C30
.text:0000000000010C30 loc_10C30:                              ; CODE XREF: peek_token_bracket+36↑j
.text:0000000000010C30                 and     edx, 1
.text:0000000000010C33                 jz      short loc_10C3F
.text:0000000000010C35                 lea     rdx, [rax+1]
.text:0000000000010C39                 cmp     rdx, [rsi+58h]
.text:0000000000010C3D                 jl      short loc_10C80
.text:0000000000010C3F
.text:0000000000010C3F loc_10C3F:                              ; CODE XREF: peek_token_bracket+2D↑j
.text:0000000000010C3F                                         ; peek_token_bracket+52↑j ...
.text:0000000000010C3F                 mov     byte ptr [rdi+8], 1
.text:0000000000010C43                 mov     eax, 1
.text:0000000000010C48                 retn
.text:0000000000010C48 ; ---------------------------------------------------------------------------
.text:0000000000010C49                 align 10h
.text:0000000000010C50
.text:0000000000010C50 loc_10C50:                              ; CODE XREF: peek_token_bracket+78↑j
.text:0000000000010C50                                         ; peek_token_bracket+94↑j ...
.text:0000000000010C50                 mov     byte ptr [rdi+8], 1
.text:0000000000010C54                 mov     byte ptr [rdi], 5Bh ; '['
.text:0000000000010C57                 mov     eax, 1
.text:0000000000010C5C                 retn
.text:0000000000010C5C ; ---------------------------------------------------------------------------
.text:0000000000010C5D                 align 20h
.text:0000000000010C60
.text:0000000000010C60 loc_10C60:                              ; CODE XREF: peek_token_bracket+49↑j
.text:0000000000010C60                 mov     byte ptr [rdi+8], 19h
.text:0000000000010C64                 mov     eax, 1
.text:0000000000010C69                 retn
.text:0000000000010C69 ; ---------------------------------------------------------------------------
.text:0000000000010C6A                 align 10h
.text:0000000000010C70
.text:0000000000010C70 loc_10C70:                              ; CODE XREF: peek_token_bracket+40↑j
.text:0000000000010C70                 mov     byte ptr [rdi+8], 15h
.text:0000000000010C74                 mov     eax, 1
.text:0000000000010C79                 retn
.text:0000000000010C79 ; ---------------------------------------------------------------------------
.text:0000000000010C7A                 align 20h
.text:0000000000010C80
.text:0000000000010C80 loc_10C80:                              ; CODE XREF: peek_token_bracket+AD↑j
.text:0000000000010C80                 mov     [rsi+48h], rdx
.text:0000000000010C84                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000010C8A                 mov     byte ptr [rdi+8], 1
.text:0000000000010C8E                 mov     [rdi], al
.text:0000000000010C90                 mov     eax, 1
.text:0000000000010C95                 retn
.text:0000000000010C95 ; ---------------------------------------------------------------------------
.text:0000000000010C96                 align 20h
.text:0000000000010CA0
.text:0000000000010CA0 loc_10CA0:                              ; CODE XREF: peek_token_bracket+8C↑j
.text:0000000000010CA0                 mov     byte ptr [rdi+8], 1Ch
.text:0000000000010CA4                 mov     eax, 2
.text:0000000000010CA9                 retn
.text:0000000000010CA9 ; ---------------------------------------------------------------------------
.text:0000000000010CAA                 align 10h
.text:0000000000010CB0
.text:0000000000010CB0 loc_10CB0:                              ; CODE XREF: peek_token_bracket+84↑j
.text:0000000000010CB0                 and     edx, 4
.text:0000000000010CB3                 jz      short loc_10C50
.text:0000000000010CB5                 mov     byte ptr [rdi+8], 1Eh
.text:0000000000010CB9                 mov     eax, 2
.text:0000000000010CBE                 retn
.text:0000000000010CBE ; } // starts at 10B90
.text:0000000000010CBE peek_token_bracket endp
.text:0000000000010CBE
.text:0000000000010CBE ; ---------------------------------------------------------------------------
.text:0000000000010CBF                 align 20h
.text:0000000000010CC0
.text:0000000000010CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010CC0
.text:0000000000010CC0
.text:0000000000010CC0 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:0000000000010CC0 ; __unwind {
.text:0000000000010CC0                 cmp     byte ptr [rsi+30h], 11h
.text:0000000000010CC4                 jz      short loc_10CD0
.text:0000000000010CC6
.text:0000000000010CC6 loc_10CC6:                              ; CODE XREF: mark_opt_subexp+14↓j
.text:0000000000010CC6                 xor     eax, eax
.text:0000000000010CC8                 retn
.text:0000000000010CC8 ; ---------------------------------------------------------------------------
.text:0000000000010CC9                 align 10h
.text:0000000000010CD0
.text:0000000000010CD0 loc_10CD0:                              ; CODE XREF: mark_opt_subexp+4↑j
.text:0000000000010CD0                 cmp     rdi, [rsi+28h]
.text:0000000000010CD4                 jnz     short loc_10CC6
.text:0000000000010CD6                 or      byte ptr [rsi+32h], 8
.text:0000000000010CDA                 xor     eax, eax
.text:0000000000010CDC                 retn
.text:0000000000010CDC ; } // starts at 10CC0
.text:0000000000010CDC mark_opt_subexp endp
.text:0000000000010CDC
.text:0000000000010CDC ; ---------------------------------------------------------------------------
.text:0000000000010CDD                 align 20h
.text:0000000000010CE0
.text:0000000000010CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010CE0
.text:0000000000010CE0
.text:0000000000010CE0 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:0000000000010CE0                                         ; check_dst_limits_calc_pos+58↓j
.text:0000000000010CE0
.text:0000000000010CE0 var_78          = qword ptr -78h
.text:0000000000010CE0 var_70          = dword ptr -70h
.text:0000000000010CE0 var_6C          = dword ptr -6Ch
.text:0000000000010CE0 var_68          = qword ptr -68h
.text:0000000000010CE0 var_60          = qword ptr -60h
.text:0000000000010CE0 var_58          = dword ptr -58h
.text:0000000000010CE0 var_52          = word ptr -52h
.text:0000000000010CE0 var_50          = qword ptr -50h
.text:0000000000010CE0 var_48          = qword ptr -48h
.text:0000000000010CE0 var_40          = qword ptr -40h
.text:0000000000010CE0
.text:0000000000010CE0 ; __unwind {
.text:0000000000010CE0                 push    r15
.text:0000000000010CE2                 push    r14
.text:0000000000010CE4                 mov     r9, rdx
.text:0000000000010CE7                 push    r13
.text:0000000000010CE9                 push    r12
.text:0000000000010CEB                 lea     rdx, [rcx+rcx*2]
.text:0000000000010CEF                 push    rbp
.text:0000000000010CF0                 push    rbx
.text:0000000000010CF1                 mov     r15d, esi
.text:0000000000010CF4                 sub     rsp, 48h
.text:0000000000010CF8                 mov     r14, [rdi+98h]
.text:0000000000010CFF                 mov     [rsp+78h+var_78], rdi
.text:0000000000010D03                 mov     rax, [r14+30h]
.text:0000000000010D07                 lea     r12, [rax+rdx*8]
.text:0000000000010D0B                 cmp     qword ptr [r12+8], 0
.text:0000000000010D11                 jle     loc_10EA5
.text:0000000000010D17                 lea     rax, [r8+r8*4]
.text:0000000000010D1B                 mov     r11, rcx
.text:0000000000010D1E                 mov     ecx, r9d
.text:0000000000010D21                 mov     r10, r8
.text:0000000000010D24                 xor     ebx, ebx
.text:0000000000010D26                 mov     [rsp+78h+var_58], esi
.text:0000000000010D2A                 shl     rax, 3
.text:0000000000010D2E                 mov     r15, r9
.text:0000000000010D31                 mov     [rsp+78h+var_68], r11
.text:0000000000010D36                 mov     [rsp+78h+var_50], rax
.text:0000000000010D3B                 mov     eax, 1
.text:0000000000010D40                 shl     rax, cl
.text:0000000000010D43                 mov     [rsp+78h+var_60], rax
.text:0000000000010D48                 not     eax
.text:0000000000010D4A                 mov     [rsp+78h+var_52], ax
.text:0000000000010D4F                 mov     eax, esi
.text:0000000000010D51                 and     eax, 1
.text:0000000000010D54                 mov     [rsp+78h+var_6C], eax
.text:0000000000010D58                 mov     eax, esi
.text:0000000000010D5A                 and     eax, 2
.text:0000000000010D5D                 mov     [rsp+78h+var_70], eax
.text:0000000000010D61                 jmp     short loc_10D85
.text:0000000000010D61 ; ---------------------------------------------------------------------------
.text:0000000000010D63                 align 8
.text:0000000000010D68
.text:0000000000010D68 loc_10D68:                              ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:0000000000010D68                 cmp     dl, 9
.text:0000000000010D6B                 jz      loc_10EC0
.text:0000000000010D71                 cmp     dl, 4
.text:0000000000010D74                 jz      short loc_10DC8
.text:0000000000010D76
.text:0000000000010D76 loc_10D76:                              ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:0000000000010D76                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:0000000000010D76                 add     rbx, 1
.text:0000000000010D7A                 cmp     [r12+8], rbx
.text:0000000000010D7F                 jle     loc_10EA0
.text:0000000000010D85
.text:0000000000010D85 loc_10D85:                              ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:0000000000010D85                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:0000000000010D85                 mov     rax, [r12+10h]
.text:0000000000010D8A                 mov     rbp, [rax+rbx*8]
.text:0000000000010D8E                 mov     rax, rbp
.text:0000000000010D91                 shl     rax, 4
.text:0000000000010D95                 add     rax, [r14]
.text:0000000000010D98                 movzx   edx, byte ptr [rax+8]
.text:0000000000010D9C                 cmp     dl, 8
.text:0000000000010D9F                 jnz     short loc_10D68
.text:0000000000010DA1                 mov     ecx, [rsp+78h+var_6C]
.text:0000000000010DA5                 test    ecx, ecx
.text:0000000000010DA7                 jz      short loc_10D76
.text:0000000000010DA9                 cmp     [rax], r15
.text:0000000000010DAC                 jnz     short loc_10D76
.text:0000000000010DAE
.text:0000000000010DAE loc_10DAE:                              ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:0000000000010DAE                 add     rsp, 48h
.text:0000000000010DB2                 mov     eax, 0FFFFFFFFh
.text:0000000000010DB7                 pop     rbx
.text:0000000000010DB8                 pop     rbp
.text:0000000000010DB9                 pop     r12
.text:0000000000010DBB                 pop     r13
.text:0000000000010DBD                 pop     r14
.text:0000000000010DBF                 pop     r15
.text:0000000000010DC1                 retn
.text:0000000000010DC1 ; ---------------------------------------------------------------------------
.text:0000000000010DC2                 align 8
.text:0000000000010DC8
.text:0000000000010DC8 loc_10DC8:                              ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:0000000000010DC8                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000010DCC                 jz      short loc_10D76
.text:0000000000010DCE                 mov     rax, [rsp+78h+var_78]
.text:0000000000010DD2                 mov     r13, [rsp+78h+var_50]
.text:0000000000010DD7                 mov     rdi, rbp
.text:0000000000010DDA                 mov     [rsp+78h+var_48], r12
.text:0000000000010DDF                 mov     [rsp+78h+var_40], rbx
.text:0000000000010DE4                 mov     r12, r10
.text:0000000000010DE7                 add     r13, [rax+0D8h]
.text:0000000000010DEE                 lea     rax, [rbp+rbp*2+0]
.text:0000000000010DF3                 mov     rbp, r14
.text:0000000000010DF6                 mov     r14, rdi
.text:0000000000010DF9                 shl     rax, 3
.text:0000000000010DFD                 mov     rbx, rax
.text:0000000000010E00
.text:0000000000010E00 loc_10E00:                              ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:0000000000010E00                 cmp     [r13+0], r14
.text:0000000000010E04                 jnz     short loc_10E70
.text:0000000000010E06                 cmp     r15, 3Fh ; '?'
.text:0000000000010E0A                 jg      short loc_10E18
.text:0000000000010E0C                 movzx   eax, word ptr [r13+22h]
.text:0000000000010E11                 test    [rsp+78h+var_60], rax
.text:0000000000010E16                 jz      short loc_10E70
.text:0000000000010E18
.text:0000000000010E18 loc_10E18:                              ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:0000000000010E18                 mov     rax, [rbp+28h]
.text:0000000000010E1C                 mov     rax, [rax+rbx+10h]
.text:0000000000010E21                 mov     rcx, [rax]
.text:0000000000010E24                 cmp     [rsp+78h+var_68], rcx
.text:0000000000010E29                 jz      loc_10EF0
.text:0000000000010E2F                 mov     esi, [rsp+78h+var_58]
.text:0000000000010E33                 mov     rdi, [rsp+78h+var_78]
.text:0000000000010E37                 mov     r8, r12
.text:0000000000010E3A                 mov     rdx, r15
.text:0000000000010E3D                 call    check_dst_limits_calc_pos_1
.text:0000000000010E42                 cmp     eax, 0FFFFFFFFh
.text:0000000000010E45                 jz      loc_10DAE
.text:0000000000010E4B                 test    eax, eax
.text:0000000000010E4D                 jnz     short loc_10E57
.text:0000000000010E4F                 mov     esi, [rsp+78h+var_70]
.text:0000000000010E53                 test    esi, esi
.text:0000000000010E55                 jnz     short loc_10ED5
.text:0000000000010E57
.text:0000000000010E57 loc_10E57:                              ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:0000000000010E57                 cmp     r15, 3Fh ; '?'
.text:0000000000010E5B                 jg      short loc_10E70
.text:0000000000010E5D                 movzx   eax, [rsp+78h+var_52]
.text:0000000000010E62                 and     [r13+22h], ax
.text:0000000000010E67                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010E70
.text:0000000000010E70 loc_10E70:                              ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:0000000000010E70                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:0000000000010E70                 add     r13, 28h ; '('
.text:0000000000010E74                 cmp     byte ptr [r13-8], 0
.text:0000000000010E79                 jnz     short loc_10E00
.text:0000000000010E7B                 mov     rbx, [rsp+78h+var_40]
.text:0000000000010E80                 mov     r10, r12
.text:0000000000010E83                 mov     r12, [rsp+78h+var_48]
.text:0000000000010E88                 mov     r14, rbp
.text:0000000000010E8B                 add     rbx, 1
.text:0000000000010E8F                 cmp     [r12+8], rbx
.text:0000000000010E94                 jg      loc_10D85
.text:0000000000010E9A                 nop     word ptr [rax+rax+00h]
.text:0000000000010EA0
.text:0000000000010EA0 loc_10EA0:                              ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:0000000000010EA0                 mov     r15d, [rsp+78h+var_58]
.text:0000000000010EA5
.text:0000000000010EA5 loc_10EA5:                              ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:0000000000010EA5                 add     rsp, 48h
.text:0000000000010EA9                 mov     eax, r15d
.text:0000000000010EAC                 pop     rbx
.text:0000000000010EAD                 sar     eax, 1
.text:0000000000010EAF                 pop     rbp
.text:0000000000010EB0                 pop     r12
.text:0000000000010EB2                 pop     r13
.text:0000000000010EB4                 pop     r14
.text:0000000000010EB6                 pop     r15
.text:0000000000010EB8                 retn
.text:0000000000010EB8 ; ---------------------------------------------------------------------------
.text:0000000000010EB9                 align 20h
.text:0000000000010EC0
.text:0000000000010EC0 loc_10EC0:                              ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:0000000000010EC0                 mov     edx, [rsp+78h+var_70]
.text:0000000000010EC4                 test    edx, edx
.text:0000000000010EC6                 jz      loc_10D76
.text:0000000000010ECC                 cmp     [rax], r15
.text:0000000000010ECF                 jnz     loc_10D76
.text:0000000000010ED5
.text:0000000000010ED5 loc_10ED5:                              ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:0000000000010ED5                 add     rsp, 48h
.text:0000000000010ED9                 xor     eax, eax
.text:0000000000010EDB                 pop     rbx
.text:0000000000010EDC                 pop     rbp
.text:0000000000010EDD                 pop     r12
.text:0000000000010EDF                 pop     r13
.text:0000000000010EE1                 pop     r14
.text:0000000000010EE3                 pop     r15
.text:0000000000010EE5                 retn
.text:0000000000010EE5 ; ---------------------------------------------------------------------------
.text:0000000000010EE6                 align 10h
.text:0000000000010EF0
.text:0000000000010EF0 loc_10EF0:                              ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:0000000000010EF0                 mov     r15d, [rsp+78h+var_58]
.text:0000000000010EF5                 add     rsp, 48h
.text:0000000000010EF9                 pop     rbx
.text:0000000000010EFA                 pop     rbp
.text:0000000000010EFB                 mov     eax, r15d
.text:0000000000010EFE                 and     eax, 1
.text:0000000000010F01                 pop     r12
.text:0000000000010F03                 neg     eax
.text:0000000000010F05                 pop     r13
.text:0000000000010F07                 pop     r14
.text:0000000000010F09                 pop     r15
.text:0000000000010F0B                 retn
.text:0000000000010F0B ; } // starts at 10CE0
.text:0000000000010F0B check_dst_limits_calc_pos_1 endp
.text:0000000000010F0B
.text:0000000000010F0B ; ---------------------------------------------------------------------------
.text:0000000000010F0C                 align 10h
.text:0000000000010F10
.text:0000000000010F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000010F10
.text:0000000000010F10
.text:0000000000010F10 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:0000000000010F10                                         ; check_dst_limits_isra_13+1D0↓p
.text:0000000000010F10 ; __unwind {
.text:0000000000010F10                 mov     rax, [rdi+0D8h]
.text:0000000000010F17                 lea     rsi, [rsi+rsi*4]
.text:0000000000010F1B                 lea     rax, [rax+rsi*8]
.text:0000000000010F1F                 mov     r10, [rax+10h]
.text:0000000000010F23                 cmp     r10, r8
.text:0000000000010F26                 jg      short loc_10F70
.text:0000000000010F28                 mov     rax, [rax+18h]
.text:0000000000010F2C                 cmp     rax, r8
.text:0000000000010F2F                 jl      short loc_10F50
.text:0000000000010F31                 xor     esi, esi
.text:0000000000010F33                 cmp     r10, r8
.text:0000000000010F36                 setz    sil
.text:0000000000010F3A                 or      esi, 2
.text:0000000000010F3D                 cmp     rax, r8
.text:0000000000010F40                 jz      short loc_10F65
.text:0000000000010F42                 xor     eax, eax
.text:0000000000010F44                 cmp     r10, r8
.text:0000000000010F47                 jz      short loc_10F60
.text:0000000000010F49                 rep retn
.text:0000000000010F49 ; ---------------------------------------------------------------------------
.text:0000000000010F4B                 align 10h
.text:0000000000010F50
.text:0000000000010F50 loc_10F50:                              ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:0000000000010F50                 mov     eax, 1
.text:0000000000010F55                 retn
.text:0000000000010F55 ; ---------------------------------------------------------------------------
.text:0000000000010F56                 align 20h
.text:0000000000010F60
.text:0000000000010F60 loc_10F60:                              ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:0000000000010F60                 mov     esi, 1
.text:0000000000010F65
.text:0000000000010F65 loc_10F65:                              ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:0000000000010F65                 mov     r8, r9
.text:0000000000010F68                 jmp     check_dst_limits_calc_pos_1
.text:0000000000010F68 ; ---------------------------------------------------------------------------
.text:0000000000010F6D                 align 10h
.text:0000000000010F70
.text:0000000000010F70 loc_10F70:                              ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:0000000000010F70                 mov     eax, 0FFFFFFFFh
.text:0000000000010F75                 retn
.text:0000000000010F75 ; } // starts at 10F10
.text:0000000000010F75 check_dst_limits_calc_pos endp
.text:0000000000010F75
.text:0000000000010F75 ; ---------------------------------------------------------------------------
.text:0000000000010F76                 align 20h
.text:0000000000010F80
.text:0000000000010F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000010F80
.text:0000000000010F80
.text:0000000000010F80 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:0000000000010F80                                         ; parse_expression+398↓p ...
.text:0000000000010F80 ; __unwind {
.text:0000000000010F80                 push    r12
.text:0000000000010F82                 mov     r12, rsi
.text:0000000000010F85                 push    rbp
.text:0000000000010F86                 mov     rbp, rdx
.text:0000000000010F89                 push    rbx
.text:0000000000010F8A                 mov     rbx, rdi
.text:0000000000010F8D                 jmp     short loc_10F93
.text:0000000000010F8D ; ---------------------------------------------------------------------------
.text:0000000000010F8F                 align 10h
.text:0000000000010F90
.text:0000000000010F90 loc_10F90:                              ; CODE XREF: postorder+1A↓j
.text:0000000000010F90                                         ; postorder+23↓j ...
.text:0000000000010F90                 mov     rbx, rax
.text:0000000000010F93
.text:0000000000010F93 loc_10F93:                              ; CODE XREF: postorder+D↑j
.text:0000000000010F93                 mov     rax, [rbx+8]
.text:0000000000010F97                 test    rax, rax
.text:0000000000010F9A                 jnz     short loc_10F90
.text:0000000000010F9C                 mov     rax, [rbx+10h]
.text:0000000000010FA0                 test    rax, rax
.text:0000000000010FA3                 jnz     short loc_10F90
.text:0000000000010FA5                 mov     rsi, rbx
.text:0000000000010FA8                 mov     rdi, rbp
.text:0000000000010FAB                 call    r12
.text:0000000000010FAE                 test    eax, eax
.text:0000000000010FB0                 jnz     short loc_10FE6
.text:0000000000010FB2                 nop     word ptr [rax+rax+00h]
.text:0000000000010FB8
.text:0000000000010FB8 loc_10FB8:                              ; CODE XREF: postorder+64↓j
.text:0000000000010FB8                 mov     rdx, [rbx]
.text:0000000000010FBB                 test    rdx, rdx
.text:0000000000010FBE                 jz      short loc_10FE6
.text:0000000000010FC0                 mov     rax, [rdx+10h]
.text:0000000000010FC4                 cmp     rax, rbx
.text:0000000000010FC7                 mov     rbx, rdx
.text:0000000000010FCA                 setz    sil
.text:0000000000010FCE                 test    rax, rax
.text:0000000000010FD1                 setz    cl
.text:0000000000010FD4                 or      sil, cl
.text:0000000000010FD7                 jz      short loc_10F90
.text:0000000000010FD9                 mov     rsi, rbx
.text:0000000000010FDC                 mov     rdi, rbp
.text:0000000000010FDF                 call    r12
.text:0000000000010FE2                 test    eax, eax
.text:0000000000010FE4                 jz      short loc_10FB8
.text:0000000000010FE6
.text:0000000000010FE6 loc_10FE6:                              ; CODE XREF: postorder+30↑j
.text:0000000000010FE6                                         ; postorder+3E↑j
.text:0000000000010FE6                 pop     rbx
.text:0000000000010FE7                 pop     rbp
.text:0000000000010FE8                 pop     r12
.text:0000000000010FEA                 retn
.text:0000000000010FEA ; } // starts at 10F80
.text:0000000000010FEA postorder       endp
.text:0000000000010FEA
.text:0000000000010FEA ; ---------------------------------------------------------------------------
.text:0000000000010FEB                 align 10h
.text:0000000000010FF0
.text:0000000000010FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010FF0
.text:0000000000010FF0
.text:0000000000010FF0 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:0000000000010FF0                                         ; re_compile_internal+6A3↓p
.text:0000000000010FF0 ; __unwind {
.text:0000000000010FF0                 push    r12
.text:0000000000010FF2                 mov     r12, rsi
.text:0000000000010FF5                 push    rbp
.text:0000000000010FF6                 mov     rbp, rdx
.text:0000000000010FF9                 push    rbx
.text:0000000000010FFA                 mov     rbx, rdi
.text:0000000000010FFD                 jmp     short loc_11003
.text:0000000000010FFD ; ---------------------------------------------------------------------------
.text:0000000000010FFF                 align 20h
.text:0000000000011000
.text:0000000000011000 loc_11000:                              ; CODE XREF: preorder+29↓j
.text:0000000000011000                                         ; preorder+3F↓j
.text:0000000000011000                 mov     rbx, rdx
.text:0000000000011003
.text:0000000000011003 loc_11003:                              ; CODE XREF: preorder+D↑j
.text:0000000000011003                 mov     rsi, rbx
.text:0000000000011006                 mov     rdi, rbp
.text:0000000000011009                 call    r12
.text:000000000001100C                 test    eax, eax
.text:000000000001100E                 jnz     short loc_1103C
.text:0000000000011010                 mov     rdx, [rbx+8]
.text:0000000000011014                 xor     ecx, ecx
.text:0000000000011016                 test    rdx, rdx
.text:0000000000011019                 jnz     short loc_11000
.text:000000000001101B                 jmp     short loc_11023
.text:000000000001101B ; ---------------------------------------------------------------------------
.text:000000000001101D                 align 20h
.text:0000000000011020
.text:0000000000011020 loc_11020:                              ; CODE XREF: preorder+4A↓j
.text:0000000000011020                 mov     rbx, rdx
.text:0000000000011023
.text:0000000000011023 loc_11023:                              ; CODE XREF: preorder+2B↑j
.text:0000000000011023                 mov     rdx, [rbx+10h]
.text:0000000000011027                 cmp     rdx, rcx
.text:000000000001102A                 jz      short loc_11031
.text:000000000001102C                 test    rdx, rdx
.text:000000000001102F                 jnz     short loc_11000
.text:0000000000011031
.text:0000000000011031 loc_11031:                              ; CODE XREF: preorder+3A↑j
.text:0000000000011031                 mov     rdx, [rbx]
.text:0000000000011034                 mov     rcx, rbx
.text:0000000000011037                 test    rdx, rdx
.text:000000000001103A                 jnz     short loc_11020
.text:000000000001103C
.text:000000000001103C loc_1103C:                              ; CODE XREF: preorder+1E↑j
.text:000000000001103C                 pop     rbx
.text:000000000001103D                 pop     rbp
.text:000000000001103E                 pop     r12
.text:0000000000011040                 retn
.text:0000000000011040 ; } // starts at 10FF0
.text:0000000000011040 preorder        endp
.text:0000000000011040
.text:0000000000011040 ; ---------------------------------------------------------------------------
.text:0000000000011041                 align 10h
.text:0000000000011050
.text:0000000000011050 ; =============== S U B R O U T I N E =======================================
.text:0000000000011050
.text:0000000000011050
.text:0000000000011050 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:0000000000011050                                         ; re_search_internal+24B↓p ...
.text:0000000000011050 ; __unwind {
.text:0000000000011050                 push    rbp
.text:0000000000011051                 push    rbx
.text:0000000000011052                 mov     rbp, rsi
.text:0000000000011055                 mov     rbx, rdi
.text:0000000000011058                 sub     rsp, 8
.text:000000000001105C                 cmp     dword ptr [rdi+90h], 1
.text:0000000000011063                 jle     short loc_110AD
.text:0000000000011065                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000001106F                 cmp     rsi, rax
.text:0000000000011072                 ja      short loc_110E0
.text:0000000000011074                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000011078                 lea     rsi, ds:0[rsi*4] ; size
.text:0000000000011080                 call    _realloc
.text:0000000000011085                 test    rax, rax
.text:0000000000011088                 jz      short loc_110E0
.text:000000000001108A                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000001108E                 mov     [rbx+10h], rax
.text:0000000000011092                 test    rdi, rdi
.text:0000000000011095                 jz      short loc_110AD
.text:0000000000011097                 lea     rsi, ds:0[rbp*8] ; size
.text:000000000001109F                 call    _realloc
.text:00000000000110A4                 test    rax, rax
.text:00000000000110A7                 jz      short loc_110E0
.text:00000000000110A9                 mov     [rbx+18h], rax
.text:00000000000110AD
.text:00000000000110AD loc_110AD:                              ; CODE XREF: re_string_realloc_buffers+13↑j
.text:00000000000110AD                                         ; re_string_realloc_buffers+45↑j
.text:00000000000110AD                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000110B4                 jnz     short loc_110C8
.text:00000000000110B6
.text:00000000000110B6 loc_110B6:                              ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:00000000000110B6                 mov     [rbx+40h], rbp
.text:00000000000110BA                 add     rsp, 8
.text:00000000000110BE                 xor     eax, eax
.text:00000000000110C0                 pop     rbx
.text:00000000000110C1                 pop     rbp
.text:00000000000110C2                 retn
.text:00000000000110C2 ; ---------------------------------------------------------------------------
.text:00000000000110C3                 align 8
.text:00000000000110C8
.text:00000000000110C8 loc_110C8:                              ; CODE XREF: re_string_realloc_buffers+64↑j
.text:00000000000110C8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000110CC                 mov     rsi, rbp        ; size
.text:00000000000110CF                 call    _realloc
.text:00000000000110D4                 test    rax, rax
.text:00000000000110D7                 jz      short loc_110E0
.text:00000000000110D9                 mov     [rbx+8], rax
.text:00000000000110DD                 jmp     short loc_110B6
.text:00000000000110DD ; ---------------------------------------------------------------------------
.text:00000000000110DF                 align 20h
.text:00000000000110E0
.text:00000000000110E0 loc_110E0:                              ; CODE XREF: re_string_realloc_buffers+22↑j
.text:00000000000110E0                                         ; re_string_realloc_buffers+38↑j ...
.text:00000000000110E0                 add     rsp, 8
.text:00000000000110E4                 mov     eax, 0Ch
.text:00000000000110E9                 pop     rbx
.text:00000000000110EA                 pop     rbp
.text:00000000000110EB                 retn
.text:00000000000110EB ; } // starts at 11050
.text:00000000000110EB re_string_realloc_buffers endp
.text:00000000000110EB
.text:00000000000110EB ; ---------------------------------------------------------------------------
.text:00000000000110EC                 align 10h
.text:00000000000110F0
.text:00000000000110F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110F0
.text:00000000000110F0
.text:00000000000110F0 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:00000000000110F0                                         ; re_compile_internal+B61↓p
.text:00000000000110F0 ; __unwind {
.text:00000000000110F0                 push    rbp
.text:00000000000110F1                 push    rbx
.text:00000000000110F2                 mov     rbp, rsi
.text:00000000000110F5                 mov     rbx, rdi
.text:00000000000110F8                 sub     rsp, 8
.text:00000000000110FC                 mov     rsi, [rdi+8]
.text:0000000000011100                 cmp     [rdi], rsi
.text:0000000000011103                 mov     rax, [rdi+10h]
.text:0000000000011107                 jz      short loc_11128
.text:0000000000011109
.text:0000000000011109 loc_11109:                              ; CODE XREF: re_node_set_insert_last+5C↓j
.text:0000000000011109                 lea     rdx, [rsi+1]
.text:000000000001110D                 mov     [rbx+8], rdx
.text:0000000000011111                 mov     [rax+rsi*8], rbp
.text:0000000000011115                 mov     eax, 1
.text:000000000001111A
.text:000000000001111A loc_1111A:                              ; CODE XREF: re_node_set_insert_last+62↓j
.text:000000000001111A                 add     rsp, 8
.text:000000000001111E                 pop     rbx
.text:000000000001111F                 pop     rbp
.text:0000000000011120                 retn
.text:0000000000011120 ; ---------------------------------------------------------------------------
.text:0000000000011121                 align 8
.text:0000000000011128
.text:0000000000011128 loc_11128:                              ; CODE XREF: re_node_set_insert_last+17↑j
.text:0000000000011128                 add     rsi, 1
.text:000000000001112C                 lea     rdx, [rsi+rsi]
.text:0000000000011130                 shl     rsi, 4          ; size
.text:0000000000011134                 mov     [rdi], rdx
.text:0000000000011137                 mov     rdi, rax        ; ptr
.text:000000000001113A                 call    _realloc
.text:000000000001113F                 test    rax, rax
.text:0000000000011142                 jz      short loc_11150
.text:0000000000011144                 mov     [rbx+10h], rax
.text:0000000000011148                 mov     rsi, [rbx+8]
.text:000000000001114C                 jmp     short loc_11109
.text:000000000001114C ; ---------------------------------------------------------------------------
.text:000000000001114E                 align 10h
.text:0000000000011150
.text:0000000000011150 loc_11150:                              ; CODE XREF: re_node_set_insert_last+52↑j
.text:0000000000011150                 xor     eax, eax
.text:0000000000011152                 jmp     short loc_1111A
.text:0000000000011152 ; } // starts at 110F0
.text:0000000000011152 re_node_set_insert_last endp
.text:0000000000011152
.text:0000000000011152 ; ---------------------------------------------------------------------------
.text:0000000000011154                 align 20h
.text:0000000000011160
.text:0000000000011160 ; =============== S U B R O U T I N E =======================================
.text:0000000000011160
.text:0000000000011160
.text:0000000000011160 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:0000000000011160                                         ; duplicate_node_closure+11A↓p ...
.text:0000000000011160 ; __unwind {
.text:0000000000011160                 push    rbp
.text:0000000000011161                 push    rbx
.text:0000000000011162                 mov     rbp, rsi
.text:0000000000011165                 mov     rbx, rdi
.text:0000000000011168                 sub     rsp, 8
.text:000000000001116C                 mov     rdx, [rdi]
.text:000000000001116F                 test    rdx, rdx
.text:0000000000011172                 jz      short loc_11198
.text:0000000000011174                 mov     rsi, [rdi+8]
.text:0000000000011178                 mov     rax, [rdi+10h]
.text:000000000001117C                 test    rsi, rsi
.text:000000000001117F                 jnz     short loc_111D0
.text:0000000000011181                 mov     [rax], rbp
.text:0000000000011184                 add     qword ptr [rdi+8], 1
.text:0000000000011189                 mov     eax, 1
.text:000000000001118E
.text:000000000001118E loc_1118E:                              ; CODE XREF: re_node_set_insert+B1↓j
.text:000000000001118E                                         ; re_node_set_insert+F7↓j ...
.text:000000000001118E                 add     rsp, 8
.text:0000000000011192                 pop     rbx
.text:0000000000011193                 pop     rbp
.text:0000000000011194                 retn
.text:0000000000011194 ; ---------------------------------------------------------------------------
.text:0000000000011195                 align 8
.text:0000000000011198
.text:0000000000011198 loc_11198:                              ; CODE XREF: re_node_set_insert+12↑j
.text:0000000000011198                 mov     qword ptr [rdi], 1
.text:000000000001119F                 mov     qword ptr [rdi+8], 1
.text:00000000000111A7                 mov     edi, 8          ; size
.text:00000000000111AC                 call    _malloc
.text:00000000000111B1                 test    rax, rax
.text:00000000000111B4                 mov     [rbx+10h], rax
.text:00000000000111B8                 jz      loc_11248
.text:00000000000111BE                 mov     [rax], rbp
.text:00000000000111C1                 add     rsp, 8
.text:00000000000111C5                 mov     eax, 1
.text:00000000000111CA                 pop     rbx
.text:00000000000111CB                 pop     rbp
.text:00000000000111CC                 retn
.text:00000000000111CC ; ---------------------------------------------------------------------------
.text:00000000000111CD                 align 10h
.text:00000000000111D0
.text:00000000000111D0 loc_111D0:                              ; CODE XREF: re_node_set_insert+1F↑j
.text:00000000000111D0                 cmp     rdx, rsi
.text:00000000000111D3                 jz      loc_11260
.text:00000000000111D9
.text:00000000000111D9 loc_111D9:                              ; CODE XREF: re_node_set_insert+120↓j
.text:00000000000111D9                 cmp     [rax], rbp
.text:00000000000111DC                 lea     rdx, ds:0[rsi*8]
.text:00000000000111E4                 jle     short loc_11220
.text:00000000000111E6                 test    rsi, rsi
.text:00000000000111E9                 jle     short loc_11203
.text:00000000000111EB                 add     rdx, rax
.text:00000000000111EE                 xchg    ax, ax
.text:00000000000111F0
.text:00000000000111F0 loc_111F0:                              ; CODE XREF: re_node_set_insert+9F↓j
.text:00000000000111F0                 mov     rcx, [rdx-8]
.text:00000000000111F4                 sub     rdx, 8
.text:00000000000111F8                 mov     [rdx+8], rcx
.text:00000000000111FC                 cmp     rax, rdx
.text:00000000000111FF                 jnz     short loc_111F0
.text:0000000000011201                 xor     edx, edx
.text:0000000000011203
.text:0000000000011203 loc_11203:                              ; CODE XREF: re_node_set_insert+89↑j
.text:0000000000011203                                         ; re_node_set_insert+C8↓j ...
.text:0000000000011203                 mov     [rax+rdx], rbp
.text:0000000000011207                 mov     eax, 1
.text:000000000001120C                 add     qword ptr [rbx+8], 1
.text:0000000000011211                 jmp     loc_1118E
.text:0000000000011211 ; ---------------------------------------------------------------------------
.text:0000000000011216                 align 20h
.text:0000000000011220
.text:0000000000011220 loc_11220:                              ; CODE XREF: re_node_set_insert+84↑j
.text:0000000000011220                 mov     rcx, [rax+rdx-8]
.text:0000000000011225                 cmp     rbp, rcx
.text:0000000000011228                 jge     short loc_11203
.text:000000000001122A                 nop     word ptr [rax+rax+00h]
.text:0000000000011230
.text:0000000000011230 loc_11230:                              ; CODE XREF: re_node_set_insert+E0↓j
.text:0000000000011230                 mov     [rax+rdx], rcx
.text:0000000000011234                 sub     rdx, 8
.text:0000000000011238                 mov     rcx, [rax+rdx-8]
.text:000000000001123D                 cmp     rcx, rbp
.text:0000000000011240                 jg      short loc_11230
.text:0000000000011242                 jmp     short loc_11203
.text:0000000000011242 ; ---------------------------------------------------------------------------
.text:0000000000011244                 align 8
.text:0000000000011248
.text:0000000000011248 loc_11248:                              ; CODE XREF: re_node_set_insert+58↑j
.text:0000000000011248                 mov     qword ptr [rbx+8], 0
.text:0000000000011250                 mov     qword ptr [rbx], 0
.text:0000000000011257                 jmp     loc_1118E
.text:0000000000011257 ; ---------------------------------------------------------------------------
.text:000000000001125C                 align 20h
.text:0000000000011260
.text:0000000000011260 loc_11260:                              ; CODE XREF: re_node_set_insert+73↑j
.text:0000000000011260                 lea     rdx, [rsi+rsi]
.text:0000000000011264                 shl     rsi, 4          ; size
.text:0000000000011268                 mov     [rdi], rdx
.text:000000000001126B                 mov     rdi, rax        ; ptr
.text:000000000001126E                 call    _realloc
.text:0000000000011273                 test    rax, rax
.text:0000000000011276                 jz      short loc_11285
.text:0000000000011278                 mov     [rbx+10h], rax
.text:000000000001127C                 mov     rsi, [rbx+8]
.text:0000000000011280                 jmp     loc_111D9
.text:0000000000011285 ; ---------------------------------------------------------------------------
.text:0000000000011285
.text:0000000000011285 loc_11285:                              ; CODE XREF: re_node_set_insert+116↑j
.text:0000000000011285                 xor     eax, eax
.text:0000000000011287                 jmp     loc_1118E
.text:0000000000011287 ; } // starts at 11160
.text:0000000000011287 re_node_set_insert endp
.text:0000000000011287
.text:0000000000011287 ; ---------------------------------------------------------------------------
.text:000000000001128C                 align 10h
.text:0000000000011290
.text:0000000000011290 ; =============== S U B R O U T I N E =======================================
.text:0000000000011290
.text:0000000000011290
.text:0000000000011290 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:0000000000011290                                         ; re_acquire_state+186↓p
.text:0000000000011290 ; __unwind {
.text:0000000000011290                 push    r14
.text:0000000000011292                 push    r13
.text:0000000000011294                 mov     r14, rdi
.text:0000000000011297                 push    r12
.text:0000000000011299                 push    rbp
.text:000000000001129A                 mov     r12, rdx
.text:000000000001129D                 push    rbx
.text:000000000001129E                 mov     rbx, [rsi+10h]
.text:00000000000112A2                 mov     rbp, rsi
.text:00000000000112A5                 mov     [rsi], rdx
.text:00000000000112A8                 mov     qword ptr [rsi+28h], 0
.text:00000000000112B0                 lea     r13, [rsi+20h]
.text:00000000000112B4                 lea     rdi, ds:0[rbx*8] ; size
.text:00000000000112BC                 mov     [rsi+20h], rbx
.text:00000000000112C0                 call    _malloc
.text:00000000000112C5                 test    rax, rax
.text:00000000000112C8                 mov     [rbp+30h], rax
.text:00000000000112CC                 jz      short loc_1130E
.text:00000000000112CE                 test    rbx, rbx
.text:00000000000112D1                 jle     short loc_11320
.text:00000000000112D3                 xor     ebx, ebx
.text:00000000000112D5                 jmp     short loc_112EA
.text:00000000000112D5 ; ---------------------------------------------------------------------------
.text:00000000000112D7                 align 20h
.text:00000000000112E0
.text:00000000000112E0 loc_112E0:                              ; CODE XREF: register_state+70↓j
.text:00000000000112E0                                         ; register_state+7C↓j
.text:00000000000112E0                 add     rbx, 1
.text:00000000000112E4                 cmp     [rbp+10h], rbx
.text:00000000000112E8                 jle     short loc_11320
.text:00000000000112EA
.text:00000000000112EA loc_112EA:                              ; CODE XREF: register_state+45↑j
.text:00000000000112EA                 mov     rax, [rbp+18h]
.text:00000000000112EE                 mov     rsi, [rax+rbx*8]
.text:00000000000112F2                 mov     rax, rsi
.text:00000000000112F5                 shl     rax, 4
.text:00000000000112F9                 add     rax, [r14]
.text:00000000000112FC                 test    byte ptr [rax+8], 8
.text:0000000000011300                 jnz     short loc_112E0
.text:0000000000011302                 mov     rdi, r13
.text:0000000000011305                 call    re_node_set_insert_last
.text:000000000001130A                 test    al, al
.text:000000000001130C                 jnz     short loc_112E0
.text:000000000001130E
.text:000000000001130E loc_1130E:                              ; CODE XREF: register_state+3C↑j
.text:000000000001130E                                         ; register_state+D9↓j
.text:000000000001130E                 pop     rbx
.text:000000000001130F                 mov     eax, 0Ch
.text:0000000000011314                 pop     rbp
.text:0000000000011315                 pop     r12
.text:0000000000011317                 pop     r13
.text:0000000000011319                 pop     r14
.text:000000000001131B                 retn
.text:000000000001131B ; ---------------------------------------------------------------------------
.text:000000000001131C                 align 20h
.text:0000000000011320
.text:0000000000011320 loc_11320:                              ; CODE XREF: register_state+41↑j
.text:0000000000011320                                         ; register_state+58↑j
.text:0000000000011320                 and     r12, [r14+88h]
.text:0000000000011327                 mov     rax, [r14+40h]
.text:000000000001132B                 lea     rdx, [r12+r12*2]
.text:000000000001132F                 lea     rbx, [rax+rdx*8]
.text:0000000000011333                 mov     rdx, [rbx]
.text:0000000000011336                 cmp     [rbx+8], rdx
.text:000000000001133A                 mov     rax, [rbx+10h]
.text:000000000001133E                 lea     rsi, [rdx+1]
.text:0000000000011342                 jle     short loc_11356
.text:0000000000011344
.text:0000000000011344 loc_11344:                              ; CODE XREF: register_state+EA↓j
.text:0000000000011344                 mov     [rbx], rsi
.text:0000000000011347                 mov     [rax+rdx*8], rbp
.text:000000000001134B                 xor     eax, eax
.text:000000000001134D                 pop     rbx
.text:000000000001134E                 pop     rbp
.text:000000000001134F                 pop     r12
.text:0000000000011351                 pop     r13
.text:0000000000011353                 pop     r14
.text:0000000000011355                 retn
.text:0000000000011356 ; ---------------------------------------------------------------------------
.text:0000000000011356
.text:0000000000011356 loc_11356:                              ; CODE XREF: register_state+B2↑j
.text:0000000000011356                 lea     r12, [rsi+rsi]
.text:000000000001135A                 mov     rdi, rax        ; ptr
.text:000000000001135D                 shl     rsi, 4          ; size
.text:0000000000011361                 call    _realloc
.text:0000000000011366                 test    rax, rax
.text:0000000000011369                 jz      short loc_1130E
.text:000000000001136B                 mov     rdx, [rbx]
.text:000000000001136E                 mov     [rbx+10h], rax
.text:0000000000011372                 mov     [rbx+8], r12
.text:0000000000011376                 lea     rsi, [rdx+1]
.text:000000000001137A                 jmp     short loc_11344
.text:000000000001137A ; } // starts at 11290
.text:000000000001137A register_state  endp
.text:000000000001137A
.text:000000000001137A ; ---------------------------------------------------------------------------
.text:000000000001137C                 align 20h
.text:0000000000011380
.text:0000000000011380 ; =============== S U B R O U T I N E =======================================
.text:0000000000011380
.text:0000000000011380
.text:0000000000011380 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_11D20↓p
.text:0000000000011380                                         ; re_string_reconstruct+673↓p ...
.text:0000000000011380 ; __unwind {
.text:0000000000011380                 push    r12
.text:0000000000011382                 mov     r12, [rdi+58h]
.text:0000000000011386                 cmp     [rdi+40h], r12
.text:000000000001138A                 push    rbp
.text:000000000001138B                 mov     rbp, rdi
.text:000000000001138E                 cmovle  r12, [rdi+40h]
.text:0000000000011393                 push    rbx
.text:0000000000011394                 mov     rbx, [rdi+30h]
.text:0000000000011398                 cmp     r12, rbx
.text:000000000001139B                 jle     short loc_113D5
.text:000000000001139D                 call    ___ctype_toupper_loc
.text:00000000000113A2                 nop     word ptr [rax+rax+00h]
.text:00000000000113A8
.text:00000000000113A8 loc_113A8:                              ; CODE XREF: build_upper_buffer+53↓j
.text:00000000000113A8                 mov     rdx, [rbp+0]
.text:00000000000113AC                 mov     rcx, [rbp+78h]
.text:00000000000113B0                 add     rdx, rbx
.text:00000000000113B3                 add     rdx, [rbp+28h]
.text:00000000000113B7                 test    rcx, rcx
.text:00000000000113BA                 movzx   edx, byte ptr [rdx]
.text:00000000000113BD                 jnz     short loc_113E8
.text:00000000000113BF
.text:00000000000113BF loc_113BF:                              ; CODE XREF: build_upper_buffer+6C↓j
.text:00000000000113BF                 mov     rsi, [rax]
.text:00000000000113C2                 mov     rcx, [rbp+8]
.text:00000000000113C6                 mov     edx, [rsi+rdx*4]
.text:00000000000113C9                 mov     [rcx+rbx], dl
.text:00000000000113CC                 add     rbx, 1
.text:00000000000113D0                 cmp     r12, rbx
.text:00000000000113D3                 jnz     short loc_113A8
.text:00000000000113D5
.text:00000000000113D5 loc_113D5:                              ; CODE XREF: build_upper_buffer+1B↑j
.text:00000000000113D5                 mov     [rbp+30h], rbx
.text:00000000000113D9                 mov     [rbp+38h], rbx
.text:00000000000113DD                 pop     rbx
.text:00000000000113DE                 pop     rbp
.text:00000000000113DF                 pop     r12
.text:00000000000113E1                 retn
.text:00000000000113E1 ; ---------------------------------------------------------------------------
.text:00000000000113E2                 align 8
.text:00000000000113E8
.text:00000000000113E8 loc_113E8:                              ; CODE XREF: build_upper_buffer+3D↑j
.text:00000000000113E8                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000113EC                 jmp     short loc_113BF
.text:00000000000113EC ; } // starts at 11380
.text:00000000000113EC build_upper_buffer endp
.text:00000000000113EC
.text:00000000000113EC ; ---------------------------------------------------------------------------
.text:00000000000113EE                 align 10h
.text:00000000000113F0
.text:00000000000113F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000113F0
.text:00000000000113F0
.text:00000000000113F0 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:00000000000113F0                                         ; re_string_reconstruct:loc_148F8↓p ...
.text:00000000000113F0
.text:00000000000113F0 var_8C          = dword ptr -8Ch
.text:00000000000113F0 var_88          = byte ptr -88h
.text:00000000000113F0 var_40          = qword ptr -40h
.text:00000000000113F0
.text:00000000000113F0 ; __unwind {
.text:00000000000113F0                 push    r15
.text:00000000000113F2                 push    r14
.text:00000000000113F4                 push    r13
.text:00000000000113F6                 push    r12
.text:00000000000113F8                 push    rbp
.text:00000000000113F9                 push    rbx
.text:00000000000113FA                 mov     rbx, rdi
.text:00000000000113FD                 sub     rsp, 68h
.text:0000000000011401                 mov     r12, [rdi+58h]
.text:0000000000011405                 mov     rbp, [rdi+30h]
.text:0000000000011409                 mov     rax, fs:28h
.text:0000000000011412                 mov     [rsp+98h+var_40], rax
.text:0000000000011417                 xor     eax, eax
.text:0000000000011419                 cmp     [rdi+40h], r12
.text:000000000001141D                 cmovle  r12, [rdi+40h]
.text:0000000000011422                 cmp     r12, rbp
.text:0000000000011425                 jle     loc_114B4
.text:000000000001142B                 lea     r14, [rdi+20h]
.text:000000000001142F                 lea     r13, [rsp+98h+var_8C]
.text:0000000000011434                 nop     dword ptr [rax+00h]
.text:0000000000011438
.text:0000000000011438 loc_11438:                              ; CODE XREF: build_wcs_buffer+C2↓j
.text:0000000000011438                                         ; build_wcs_buffer+F6↓j
.text:0000000000011438                 mov     rdi, [rbx+78h]
.text:000000000001143C                 mov     rdx, r12
.text:000000000001143F                 mov     r15, [rbx+20h]
.text:0000000000011443                 sub     rdx, rbp
.text:0000000000011446                 test    rdi, rdi
.text:0000000000011449                 jnz     loc_11530
.text:000000000001144F                 mov     rsi, [rbx+28h]
.text:0000000000011453                 add     rsi, rbp
.text:0000000000011456                 add     rsi, [rbx]
.text:0000000000011459
.text:0000000000011459 loc_11459:                              ; CODE XREF: build_wcs_buffer+151↓j
.text:0000000000011459                                         ; build_wcs_buffer+167↓j ...
.text:0000000000011459                 mov     rcx, r14
.text:000000000001145C                 mov     rdi, r13
.text:000000000001145F                 call    rpl_mbrtowc
.text:0000000000011464                 lea     rdx, [rax-1]
.text:0000000000011468                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:000000000001146C                 ja      loc_11500
.text:0000000000011472                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000011476                 mov     edx, [rsp+98h+var_8C]
.text:000000000001147A                 jz      short loc_114F0
.text:000000000001147C
.text:000000000001147C loc_1147C:                              ; CODE XREF: build_wcs_buffer+137↓j
.text:000000000001147C                 mov     rcx, [rbx+10h]
.text:0000000000011480                 lea     rsi, [rbp+1]
.text:0000000000011484                 lea     rdi, ds:0[rbp*4]
.text:000000000001148C                 mov     [rcx+rbp*4], edx
.text:000000000001148F                 add     rbp, rax
.text:0000000000011492                 cmp     rsi, rbp
.text:0000000000011495                 jge     short loc_114E0
.text:0000000000011497                 lea     rdx, [rcx+rdi+4]
.text:000000000001149C                 lea     rax, [rcx+rbp*4]
.text:00000000000114A0
.text:00000000000114A0 loc_114A0:                              ; CODE XREF: build_wcs_buffer+BD↓j
.text:00000000000114A0                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:00000000000114A6                 add     rdx, 4
.text:00000000000114AA                 cmp     rax, rdx
.text:00000000000114AD                 jnz     short loc_114A0
.text:00000000000114AF                 cmp     rbp, r12
.text:00000000000114B2                 jl      short loc_11438
.text:00000000000114B4
.text:00000000000114B4 loc_114B4:                              ; CODE XREF: build_wcs_buffer+35↑j
.text:00000000000114B4                                         ; build_wcs_buffer+FC↓j ...
.text:00000000000114B4                 mov     rax, [rsp+98h+var_40]
.text:00000000000114B9                 xor     rax, fs:28h
.text:00000000000114C2                 mov     [rbx+30h], rbp
.text:00000000000114C6                 mov     [rbx+38h], rbp
.text:00000000000114CA                 jnz     loc_115AE
.text:00000000000114D0                 add     rsp, 68h
.text:00000000000114D4                 pop     rbx
.text:00000000000114D5                 pop     rbp
.text:00000000000114D6                 pop     r12
.text:00000000000114D8                 pop     r13
.text:00000000000114DA                 pop     r14
.text:00000000000114DC                 pop     r15
.text:00000000000114DE                 retn
.text:00000000000114DE ; ---------------------------------------------------------------------------
.text:00000000000114DF                 align 20h
.text:00000000000114E0
.text:00000000000114E0 loc_114E0:                              ; CODE XREF: build_wcs_buffer+A5↑j
.text:00000000000114E0                 mov     rbp, rsi
.text:00000000000114E3                 cmp     rbp, r12
.text:00000000000114E6                 jl      loc_11438
.text:00000000000114EC                 jmp     short loc_114B4
.text:00000000000114EC ; ---------------------------------------------------------------------------
.text:00000000000114EE                 align 10h
.text:00000000000114F0
.text:00000000000114F0 loc_114F0:                              ; CODE XREF: build_wcs_buffer+8A↑j
.text:00000000000114F0                 mov     rax, [rbx+58h]
.text:00000000000114F4                 cmp     [rbx+40h], rax
.text:00000000000114F8                 jl      loc_11598
.text:00000000000114FE                 xchg    ax, ax
.text:0000000000011500
.text:0000000000011500 loc_11500:                              ; CODE XREF: build_wcs_buffer+7C↑j
.text:0000000000011500                 mov     rax, [rbx]
.text:0000000000011503                 mov     rcx, [rbx+78h]
.text:0000000000011507                 add     rax, rbp
.text:000000000001150A                 add     rax, [rbx+28h]
.text:000000000001150E                 test    rcx, rcx
.text:0000000000011511                 movzx   edx, byte ptr [rax]
.text:0000000000011514                 mov     [rsp+98h+var_8C], edx
.text:0000000000011518                 jnz     loc_115A1
.text:000000000001151E
.text:000000000001151E loc_1151E:                              ; CODE XREF: build_wcs_buffer+1B9↓j
.text:000000000001151E                 mov     [rbx+20h], r15
.text:0000000000011522                 mov     eax, 1
.text:0000000000011527                 jmp     loc_1147C
.text:0000000000011527 ; ---------------------------------------------------------------------------
.text:000000000001152C                 align 10h
.text:0000000000011530
.text:0000000000011530 loc_11530:                              ; CODE XREF: build_wcs_buffer+59↑j
.text:0000000000011530                 mov     ecx, [rbx+90h]
.text:0000000000011536                 xor     eax, eax
.text:0000000000011538                 lea     rsi, [rsp+98h+var_88]
.text:000000000001153D                 test    ecx, ecx
.text:000000000001153F                 jg      short loc_11561
.text:0000000000011541                 jmp     loc_11459
.text:0000000000011541 ; ---------------------------------------------------------------------------
.text:0000000000011546                 align 10h
.text:0000000000011550
.text:0000000000011550 loc_11550:                              ; CODE XREF: build_wcs_buffer+19B↓j
.text:0000000000011550                 add     rax, 1
.text:0000000000011554                 cmp     rdx, rax
.text:0000000000011557                 jz      loc_11459
.text:000000000001155D                 mov     rdi, [rbx+78h]
.text:0000000000011561
.text:0000000000011561 loc_11561:                              ; CODE XREF: build_wcs_buffer+14F↑j
.text:0000000000011561                 mov     rcx, [rbx]
.text:0000000000011564                 add     rcx, rbp
.text:0000000000011567                 add     rcx, rax
.text:000000000001156A                 add     rcx, [rbx+28h]
.text:000000000001156E                 movzx   ecx, byte ptr [rcx]
.text:0000000000011571                 movzx   ecx, byte ptr [rdi+rcx]
.text:0000000000011575                 mov     rdi, [rbx+8]
.text:0000000000011579                 add     rdi, rbp
.text:000000000001157C                 mov     [rdi+rax], cl
.text:000000000001157F                 mov     [rsi+rax], cl
.text:0000000000011582                 lea     ecx, [rax+1]
.text:0000000000011585                 cmp     ecx, [rbx+90h]
.text:000000000001158B                 jl      short loc_11550
.text:000000000001158D                 jmp     loc_11459
.text:000000000001158D ; ---------------------------------------------------------------------------
.text:0000000000011592                 align 8
.text:0000000000011598
.text:0000000000011598 loc_11598:                              ; CODE XREF: build_wcs_buffer+108↑j
.text:0000000000011598                 mov     [rbx+20h], r15
.text:000000000001159C                 jmp     loc_114B4
.text:00000000000115A1 ; ---------------------------------------------------------------------------
.text:00000000000115A1
.text:00000000000115A1 loc_115A1:                              ; CODE XREF: build_wcs_buffer+128↑j
.text:00000000000115A1                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000115A5                 mov     [rsp+98h+var_8C], edx
.text:00000000000115A9                 jmp     loc_1151E
.text:00000000000115AE ; ---------------------------------------------------------------------------
.text:00000000000115AE
.text:00000000000115AE loc_115AE:                              ; CODE XREF: build_wcs_buffer+DA↑j
.text:00000000000115AE                 call    ___stack_chk_fail
.text:00000000000115AE ; } // starts at 113F0
.text:00000000000115AE build_wcs_buffer endp
.text:00000000000115AE
.text:00000000000115AE ; ---------------------------------------------------------------------------
.text:00000000000115B3                 align 20h
.text:00000000000115C0
.text:00000000000115C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000115C0
.text:00000000000115C0
.text:00000000000115C0 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:00000000000115C0                                         ; re_string_reconstruct+12A↓p ...
.text:00000000000115C0
.text:00000000000115C0 var_D0          = qword ptr -0D0h
.text:00000000000115C0 src             = qword ptr -0C8h
.text:00000000000115C0 var_C0          = qword ptr -0C0h
.text:00000000000115C0 var_B8          = qword ptr -0B8h
.text:00000000000115C0 var_B0          = qword ptr -0B0h
.text:00000000000115C0 var_A8          = qword ptr -0A8h
.text:00000000000115C0 var_A0          = qword ptr -0A0h
.text:00000000000115C0 wc              = dword ptr -94h
.text:00000000000115C0 ps              = mbstate_t ptr -90h
.text:00000000000115C0 s               = byte ptr -88h
.text:00000000000115C0 var_40          = qword ptr -40h
.text:00000000000115C0
.text:00000000000115C0 ; __unwind {
.text:00000000000115C0                 push    r15
.text:00000000000115C2                 push    r14
.text:00000000000115C4                 mov     r14, rdi
.text:00000000000115C7                 push    r13
.text:00000000000115C9                 push    r12
.text:00000000000115CB                 push    rbp
.text:00000000000115CC                 push    rbx
.text:00000000000115CD                 sub     rsp, 0A8h
.text:00000000000115D4                 mov     rbx, [rdi+58h]
.text:00000000000115D8                 mov     r15, [rdi+30h]
.text:00000000000115DC                 mov     rax, fs:28h
.text:00000000000115E5                 mov     [rsp+0D8h+var_40], rax
.text:00000000000115ED                 xor     eax, eax
.text:00000000000115EF                 cmp     [rdi+40h], rbx
.text:00000000000115F3                 cmovle  rbx, [rdi+40h]
.text:00000000000115F8                 cmp     byte ptr [rdi+8Ah], 0
.text:00000000000115FF                 jnz     short loc_1160C
.text:0000000000011601                 cmp     qword ptr [rdi+78h], 0
.text:0000000000011606                 jz      loc_11790
.text:000000000001160C
.text:000000000001160C loc_1160C:                              ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:000000000001160C                                         ; build_wcs_upper_buffer+1D7↓j
.text:000000000001160C                 mov     r13, [r14+38h]
.text:0000000000011610
.text:0000000000011610 loc_11610:                              ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:0000000000011610                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:0000000000011610                 cmp     r15, rbx
.text:0000000000011613                 jl      short loc_11650
.text:0000000000011615
.text:0000000000011615 loc_11615:                              ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:0000000000011615                 mov     [r14+30h], r15
.text:0000000000011619                 mov     [r14+38h], r13
.text:000000000001161D                 xor     eax, eax
.text:000000000001161F
.text:000000000001161F loc_1161F:                              ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:000000000001161F                                         ; build_wcs_upper_buffer+5EB↓j
.text:000000000001161F                 mov     rcx, [rsp+0D8h+var_40]
.text:0000000000011627                 xor     rcx, fs:28h
.text:0000000000011630                 jnz     loc_11BBA
.text:0000000000011636                 add     rsp, 0A8h
.text:000000000001163D                 pop     rbx
.text:000000000001163E                 pop     rbp
.text:000000000001163F                 pop     r12
.text:0000000000011641                 pop     r13
.text:0000000000011643                 pop     r14
.text:0000000000011645                 pop     r15
.text:0000000000011647                 retn
.text:0000000000011647 ; ---------------------------------------------------------------------------
.text:0000000000011648                 align 10h
.text:0000000000011650
.text:0000000000011650 loc_11650:                              ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:0000000000011650                 lea     rax, [r14+20h]
.text:0000000000011654                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000011659                 mov     rax, rbx
.text:000000000001165C                 sub     rax, r15
.text:000000000001165F                 mov     [rsp+0D8h+src], rax
.text:0000000000011664                 lea     rax, [rsp+0D8h+wc]
.text:0000000000011669                 mov     [rsp+0D8h+var_B8], rax
.text:000000000001166E
.text:000000000001166E loc_1166E:                              ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:000000000001166E                 mov     rdx, [r14+78h]
.text:0000000000011672                 mov     rax, [r14+20h]
.text:0000000000011676                 test    rdx, rdx
.text:0000000000011679                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000001167E                 jnz     loc_11989
.text:0000000000011684                 mov     rbp, [r14+28h]
.text:0000000000011688                 add     rbp, r13
.text:000000000001168B                 add     rbp, [r14]
.text:000000000001168E                 mov     [rsp+0D8h+var_C0], rbp
.text:0000000000011693
.text:0000000000011693 loc_11693:                              ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:0000000000011693                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000011698                 mov     rdx, [rsp+0D8h+src]
.text:000000000001169D                 mov     rsi, [rsp+0D8h+var_C0]
.text:00000000000116A2                 mov     rdi, [rsp+0D8h+var_B8]
.text:00000000000116A7                 call    rpl_mbrtowc
.text:00000000000116AC                 mov     rbp, rax
.text:00000000000116AF                 lea     rax, [rax-1]
.text:00000000000116B3                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:00000000000116B7                 mov     [rsp+0D8h+var_B8], rax
.text:00000000000116BC                 ja      loc_119F9
.text:00000000000116C2                 mov     edx, [rsp+0D8h+wc]
.text:00000000000116C6                 mov     edi, edx        ; wc
.text:00000000000116C8                 mov     dword ptr [rsp+0D8h+src], edx
.text:00000000000116CC                 call    _towupper
.text:00000000000116D1                 mov     edx, dword ptr [rsp+0D8h+src]
.text:00000000000116D5                 mov     r12d, eax
.text:00000000000116D8                 mov     [rsp+0D8h+var_D0], r15
.text:00000000000116DD                 cmp     edx, eax
.text:00000000000116DF                 jz      loc_119E0
.text:00000000000116E5                 lea     rcx, [rsp+0D8h+s]
.text:00000000000116EA                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:00000000000116EF                 mov     esi, eax        ; wc
.text:00000000000116F1                 mov     rdi, rcx        ; s
.text:00000000000116F4                 mov     [rsp+0D8h+src], rcx
.text:00000000000116F9                 call    _wcrtomb
.text:00000000000116FE                 cmp     rbp, rax
.text:0000000000011701                 mov     r11, rax
.text:0000000000011704                 mov     rcx, [rsp+0D8h+src]
.text:0000000000011709                 jnz     loc_11A96
.text:000000000001170F                 mov     rdi, [r14+8]
.text:0000000000011713                 mov     rdx, rbp        ; n
.text:0000000000011716                 mov     rsi, rcx        ; src
.text:0000000000011719                 add     rdi, r15        ; dest
.text:000000000001171C                 call    _memcpy
.text:0000000000011721
.text:0000000000011721 loc_11721:                              ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:0000000000011721                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000011729                 lea     rax, [rbp+r13+0]
.text:000000000001172E                 jnz     loc_11A65
.text:0000000000011734
.text:0000000000011734 loc_11734:                              ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:0000000000011734                 add     r15, 1
.text:0000000000011738                 mov     rsi, [rsp+0D8h+var_D0]
.text:000000000001173D                 mov     rdx, [r14+10h]
.text:0000000000011741                 lea     rcx, [r15+rbp-1]
.text:0000000000011746                 mov     r13, rax
.text:0000000000011749                 cmp     r15, rcx
.text:000000000001174C                 lea     rax, ds:0[rsi*4]
.text:0000000000011754                 mov     [rdx+rsi*4], r12d
.text:0000000000011758                 jge     loc_11610
.text:000000000001175E                 lea     rax, [rdx+rax+4]
.text:0000000000011763                 lea     rdx, [rdx+rcx*4]
.text:0000000000011767                 nop     word ptr [rax+rax+00000000h]
.text:0000000000011770
.text:0000000000011770 loc_11770:                              ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:0000000000011770                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000011776                 add     rax, 4
.text:000000000001177A                 cmp     rdx, rax
.text:000000000001177D                 jnz     short loc_11770
.text:000000000001177F                 mov     r15, rcx
.text:0000000000011782                 jmp     loc_11610
.text:0000000000011782 ; ---------------------------------------------------------------------------
.text:0000000000011787                 align 10h
.text:0000000000011790
.text:0000000000011790 loc_11790:                              ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:0000000000011790                 cmp     byte ptr [rdi+8Ch], 0
.text:0000000000011797                 jnz     loc_1160C
.text:000000000001179D                 cmp     r15, rbx
.text:00000000000117A0                 jge     loc_11938
.text:00000000000117A6                 lea     rax, [rdi+20h]
.text:00000000000117AA                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000117AF                 lea     rax, [rsp+0D8h+wc]
.text:00000000000117B4                 mov     [rsp+0D8h+var_A8], rax
.text:00000000000117B9                 lea     rax, [rsp+0D8h+ps]
.text:00000000000117BE                 mov     [rsp+0D8h+var_A0], rax
.text:00000000000117C3                 lea     rax, [rsp+0D8h+s]
.text:00000000000117C8                 mov     [rsp+0D8h+var_B0], rax
.text:00000000000117CD                 nop     dword ptr [rax]
.text:00000000000117D0
.text:00000000000117D0 loc_117D0:                              ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:00000000000117D0                 mov     rbp, [r14+28h]
.text:00000000000117D4                 mov     r13, r15
.text:00000000000117D7                 add     rbp, r15
.text:00000000000117DA                 add     rbp, [r14]
.text:00000000000117DD                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000117E2                 test    r12b, 80h
.text:00000000000117E6                 jnz     short loc_117FA
.text:00000000000117E8                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:00000000000117ED                 call    _mbsinit
.text:00000000000117F2                 test    eax, eax
.text:00000000000117F4                 jnz     loc_118E8
.text:00000000000117FA
.text:00000000000117FA loc_117FA:                              ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:00000000000117FA                 mov     rax, [r14+20h]
.text:00000000000117FE                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000011803                 mov     rdx, rbx
.text:0000000000011806                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000001180B                 sub     rdx, r15
.text:000000000001180E                 mov     rsi, rbp
.text:0000000000011811                 mov     [rsp+0D8h+src], rdx
.text:0000000000011816                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000001181B                 mov     [rsp+0D8h+var_B8], rdi
.text:0000000000011820                 call    rpl_mbrtowc
.text:0000000000011825                 mov     rbp, rax
.text:0000000000011828                 lea     rax, [rax-1]
.text:000000000001182C                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000011830                 ja      loc_11918
.text:0000000000011836                 mov     edx, [rsp+0D8h+wc]
.text:000000000001183A                 mov     edi, edx        ; wc
.text:000000000001183C                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:0000000000011840                 call    _towupper
.text:0000000000011845                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:0000000000011849                 mov     r12d, eax
.text:000000000001184C                 cmp     edx, eax
.text:000000000001184E                 jz      short loc_118C8
.text:0000000000011850                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:0000000000011855                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:000000000001185A                 mov     esi, eax        ; wc
.text:000000000001185C                 call    _wcrtomb
.text:0000000000011861                 cmp     rbp, rax
.text:0000000000011864                 jnz     loc_119D8
.text:000000000001186A                 mov     rdi, [r14+8]
.text:000000000001186E                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:0000000000011873                 mov     rdx, rbp        ; n
.text:0000000000011876                 add     rdi, r15        ; dest
.text:0000000000011879                 call    _memcpy
.text:000000000001187E
.text:000000000001187E loc_1187E:                              ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:000000000001187E                 add     r15, 1
.text:0000000000011882                 mov     rdx, [r14+10h]
.text:0000000000011886                 lea     rax, ds:0[r13*4]
.text:000000000001188E                 lea     rcx, [r15+rbp-1]
.text:0000000000011893                 cmp     r15, rcx
.text:0000000000011896                 mov     [rdx+r13*4], r12d
.text:000000000001189A                 jge     short loc_118BA
.text:000000000001189C                 lea     rax, [rdx+rax+4]
.text:00000000000118A1                 lea     rdx, [rdx+rcx*4]
.text:00000000000118A5                 nop     dword ptr [rax]
.text:00000000000118A8
.text:00000000000118A8 loc_118A8:                              ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:00000000000118A8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:00000000000118AE                 add     rax, 4
.text:00000000000118B2                 cmp     rdx, rax
.text:00000000000118B5                 jnz     short loc_118A8
.text:00000000000118B7                 mov     r15, rcx
.text:00000000000118BA
.text:00000000000118BA loc_118BA:                              ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:00000000000118BA                                         ; build_wcs_upper_buffer+351↓j ...
.text:00000000000118BA                 cmp     rbx, r15
.text:00000000000118BD                 jg      loc_117D0
.text:00000000000118C3                 jmp     short loc_11938
.text:00000000000118C3 ; ---------------------------------------------------------------------------
.text:00000000000118C5                 align 8
.text:00000000000118C8
.text:00000000000118C8 loc_118C8:                              ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:00000000000118C8                 mov     rsi, [r14+28h]
.text:00000000000118CC                 mov     rdi, [r14+8]
.text:00000000000118D0                 mov     rdx, rbp        ; n
.text:00000000000118D3                 add     rsi, r15
.text:00000000000118D6                 add     rsi, [r14]      ; src
.text:00000000000118D9                 add     rdi, r15        ; dest
.text:00000000000118DC                 call    _memcpy
.text:00000000000118E1                 jmp     short loc_1187E
.text:00000000000118E1 ; ---------------------------------------------------------------------------
.text:00000000000118E3                 align 8
.text:00000000000118E8
.text:00000000000118E8 loc_118E8:                              ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:00000000000118E8                 call    ___ctype_toupper_loc
.text:00000000000118ED                 mov     rax, [rax]
.text:00000000000118F0                 mov     rdx, [r14+8]
.text:00000000000118F4                 mov     eax, [rax+r12*4]
.text:00000000000118F8                 mov     [rdx+r15], al
.text:00000000000118FC                 mov     rdx, [r14+8]
.text:0000000000011900                 mov     rax, [r14+10h]
.text:0000000000011904                 movzx   edx, byte ptr [rdx+r15]
.text:0000000000011909                 mov     [rax+r15*4], edx
.text:000000000001190D                 add     r15, 1
.text:0000000000011911                 jmp     short loc_118BA
.text:0000000000011911 ; ---------------------------------------------------------------------------
.text:0000000000011913                 align 8
.text:0000000000011918
.text:0000000000011918 loc_11918:                              ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:0000000000011918                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001191C                 jnz     short loc_11950
.text:000000000001191E                 mov     rax, [r14+58h]
.text:0000000000011922                 cmp     [r14+40h], rax
.text:0000000000011926                 jge     short loc_11950
.text:0000000000011928                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000001192D                 mov     [r14+20h], rax
.text:0000000000011931                 nop     dword ptr [rax+00000000h]
.text:0000000000011938
.text:0000000000011938 loc_11938:                              ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:0000000000011938                                         ; build_wcs_upper_buffer+303↑j
.text:0000000000011938                 mov     [r14+30h], r15
.text:000000000001193C                 mov     [r14+38h], r15
.text:0000000000011940                 xor     eax, eax
.text:0000000000011942                 jmp     loc_1161F
.text:0000000000011942 ; ---------------------------------------------------------------------------
.text:0000000000011947                 align 10h
.text:0000000000011950
.text:0000000000011950 loc_11950:                              ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:0000000000011950                                         ; build_wcs_upper_buffer+366↑j
.text:0000000000011950                 mov     rax, [r14]
.text:0000000000011953                 mov     rdx, [r14+8]
.text:0000000000011957                 add     rax, r15
.text:000000000001195A                 add     rax, [r14+28h]
.text:000000000001195E                 movzx   eax, byte ptr [rax]
.text:0000000000011961                 mov     [rdx+r15], al
.text:0000000000011965                 mov     rdx, [r14+10h]
.text:0000000000011969                 add     r15, 1
.text:000000000001196D                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000011971                 mov     [rdx+r13*4], eax
.text:0000000000011975                 jnz     loc_118BA
.text:000000000001197B                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000011980                 mov     [r14+20h], rax
.text:0000000000011984                 jmp     loc_118BA
.text:0000000000011989 ; ---------------------------------------------------------------------------
.text:0000000000011989
.text:0000000000011989 loc_11989:                              ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:0000000000011989                 mov     eax, [r14+90h]
.text:0000000000011990                 test    eax, eax
.text:0000000000011992                 jle     loc_11BB0
.text:0000000000011998                 mov     rdi, [r14+28h]
.text:000000000001199C                 lea     r11d, [rax-1]
.text:00000000000119A0                 lea     rcx, [rsp+0D8h+s]
.text:00000000000119A5                 xor     eax, eax
.text:00000000000119A7                 add     rdi, r13
.text:00000000000119AA                 add     rdi, [r14]
.text:00000000000119AD                 jmp     short loc_119BA
.text:00000000000119AF ; ---------------------------------------------------------------------------
.text:00000000000119AF
.text:00000000000119AF loc_119AF:                              ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:00000000000119AF                 add     rax, 1
.text:00000000000119B3                 cmp     [rsp+0D8h+src], rax
.text:00000000000119B8                 jz      short loc_119CB
.text:00000000000119BA
.text:00000000000119BA loc_119BA:                              ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:00000000000119BA                 movzx   esi, byte ptr [rdi+rax]
.text:00000000000119BE                 cmp     r11, rax
.text:00000000000119C1                 movzx   esi, byte ptr [rdx+rsi]
.text:00000000000119C5                 mov     [rcx+rax], sil
.text:00000000000119C9                 jnz     short loc_119AF
.text:00000000000119CB
.text:00000000000119CB loc_119CB:                              ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:00000000000119CB                                         ; build_wcs_upper_buffer+5F5↓j
.text:00000000000119CB                 mov     [rsp+0D8h+var_C0], rcx
.text:00000000000119D0                 jmp     loc_11693
.text:00000000000119D0 ; ---------------------------------------------------------------------------
.text:00000000000119D5                 align 8
.text:00000000000119D8
.text:00000000000119D8 loc_119D8:                              ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:00000000000119D8                 mov     r13, r15
.text:00000000000119DB                 jmp     loc_1166E
.text:00000000000119E0 ; ---------------------------------------------------------------------------
.text:00000000000119E0
.text:00000000000119E0 loc_119E0:                              ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:00000000000119E0                                         ; build_wcs_upper_buffer+4DA↓j
.text:00000000000119E0                 mov     rdi, [r14+8]
.text:00000000000119E4                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:00000000000119E9                 mov     rdx, rbp        ; n
.text:00000000000119EC                 add     rdi, r15        ; dest
.text:00000000000119EF                 call    _memcpy
.text:00000000000119F4                 jmp     loc_11721
.text:00000000000119F9 ; ---------------------------------------------------------------------------
.text:00000000000119F9
.text:00000000000119F9 loc_119F9:                              ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:00000000000119F9                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:00000000000119FF                 jnz     short loc_11A0B
.text:0000000000011A01                 mov     rax, [r14+58h]
.text:0000000000011A05                 cmp     [r14+40h], rax
.text:0000000000011A09                 jl      short loc_11A88
.text:0000000000011A0B
.text:0000000000011A0B loc_11A0B:                              ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:0000000000011A0B                 mov     rax, [r14]
.text:0000000000011A0E                 mov     rdx, [r14+78h]
.text:0000000000011A12                 add     rax, r13
.text:0000000000011A15                 add     rax, [r14+28h]
.text:0000000000011A19                 test    rdx, rdx
.text:0000000000011A1C                 movzx   eax, byte ptr [rax]
.text:0000000000011A1F                 jnz     loc_11BCC
.text:0000000000011A25
.text:0000000000011A25 loc_11A25:                              ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:0000000000011A25                 mov     rdx, [r14+8]
.text:0000000000011A29                 mov     rcx, r15
.text:0000000000011A2C                 mov     [rdx+r15], al
.text:0000000000011A30                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000011A38                 jnz     loc_11BBF
.text:0000000000011A3E
.text:0000000000011A3E loc_11A3E:                              ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:0000000000011A3E                 mov     rdx, [r14+10h]
.text:0000000000011A42                 add     r13, 1
.text:0000000000011A46                 add     r15, 1
.text:0000000000011A4A                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000011A4E                 mov     [rdx+rcx*4], eax
.text:0000000000011A51                 jnz     loc_11610
.text:0000000000011A57                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000011A5C                 mov     [r14+20h], rax
.text:0000000000011A60                 jmp     loc_11610
.text:0000000000011A65 ; ---------------------------------------------------------------------------
.text:0000000000011A65
.text:0000000000011A65 loc_11A65:                              ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:0000000000011A65                 mov     rdx, [r14+18h]
.text:0000000000011A69                 mov     rcx, r15
.text:0000000000011A6C                 mov     r10, r13
.text:0000000000011A6F                 sub     rcx, r13
.text:0000000000011A72                 lea     rdx, [rdx+rcx*8]
.text:0000000000011A76
.text:0000000000011A76 loc_11A76:                              ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:0000000000011A76                 mov     [rdx+r10*8], r10
.text:0000000000011A7A                 add     r10, 1
.text:0000000000011A7E                 cmp     rax, r10
.text:0000000000011A81                 jnz     short loc_11A76
.text:0000000000011A83                 jmp     loc_11734
.text:0000000000011A88 ; ---------------------------------------------------------------------------
.text:0000000000011A88
.text:0000000000011A88 loc_11A88:                              ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:0000000000011A88                                         ; build_wcs_upper_buffer+4F3↓j
.text:0000000000011A88                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000011A8D                 mov     [r14+20h], rax
.text:0000000000011A91                 jmp     loc_11615
.text:0000000000011A96 ; ---------------------------------------------------------------------------
.text:0000000000011A96
.text:0000000000011A96 loc_11A96:                              ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:0000000000011A96                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000011A9A                 jz      loc_119E0
.text:0000000000011AA0                 lea     rax, [rax+r15]
.text:0000000000011AA4                 mov     rsi, rax
.text:0000000000011AA7                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000011AAC                 mov     rax, [r14+40h]
.text:0000000000011AB0                 cmp     rsi, rax
.text:0000000000011AB3                 ja      short loc_11A88
.text:0000000000011AB5                 cmp     qword ptr [r14+18h], 0
.text:0000000000011ABA                 jz      loc_11B78
.text:0000000000011AC0
.text:0000000000011AC0 loc_11AC0:                              ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:0000000000011AC0                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000011AC8                 jnz     short loc_11AEA
.text:0000000000011ACA                 test    r15, r15
.text:0000000000011ACD                 jz      short loc_11AE2
.text:0000000000011ACF                 mov     rdx, [r14+18h]
.text:0000000000011AD3                 xor     eax, eax
.text:0000000000011AD5
.text:0000000000011AD5 loc_11AD5:                              ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:0000000000011AD5                 mov     [rdx+rax*8], rax
.text:0000000000011AD9                 add     rax, 1
.text:0000000000011ADD                 cmp     rax, r15
.text:0000000000011AE0                 jnz     short loc_11AD5
.text:0000000000011AE2
.text:0000000000011AE2 loc_11AE2:                              ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:0000000000011AE2                 mov     byte ptr [r14+8Ch], 1
.text:0000000000011AEA
.text:0000000000011AEA loc_11AEA:                              ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:0000000000011AEA                 mov     rdi, [r14+8]
.text:0000000000011AEE                 mov     rsi, rcx        ; src
.text:0000000000011AF1                 mov     rdx, r11        ; n
.text:0000000000011AF4                 mov     [rsp+0D8h+src], r11
.text:0000000000011AF9                 add     rdi, r15        ; dest
.text:0000000000011AFC                 call    _memcpy
.text:0000000000011B01                 mov     rax, [r14+10h]
.text:0000000000011B05                 mov     r11, [rsp+0D8h+src]
.text:0000000000011B0A                 lea     rcx, [rax+r15*4]
.text:0000000000011B0E                 mov     rax, [r14+18h]
.text:0000000000011B12                 cmp     r11, 1
.text:0000000000011B16                 mov     [rcx], r12d
.text:0000000000011B19                 lea     rsi, [rax+r15*8]
.text:0000000000011B1D                 mov     [rsi], r13
.text:0000000000011B20                 jbe     short loc_11B4A
.text:0000000000011B22                 mov     eax, 1
.text:0000000000011B27
.text:0000000000011B27 loc_11B27:                              ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:0000000000011B27                 mov     rdx, [rsp+0D8h+var_B8]
.text:0000000000011B2C                 cmp     rax, rbp
.text:0000000000011B2F                 cmovb   rdx, rax
.text:0000000000011B33                 add     rdx, r13
.text:0000000000011B36                 mov     [rsi+rax*8], rdx
.text:0000000000011B3A                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:0000000000011B41                 add     rax, 1
.text:0000000000011B45                 cmp     rax, r11
.text:0000000000011B48                 jnz     short loc_11B27
.text:0000000000011B4A
.text:0000000000011B4A loc_11B4A:                              ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:0000000000011B4A                 mov     rbx, [r14+58h]
.text:0000000000011B4E                 sub     r11, rbp
.text:0000000000011B51                 add     rbx, r11
.text:0000000000011B54                 cmp     r13, [r14+60h]
.text:0000000000011B58                 mov     [r14+58h], rbx
.text:0000000000011B5C                 jge     short loc_11B62
.text:0000000000011B5E                 add     [r14+68h], r11
.text:0000000000011B62
.text:0000000000011B62 loc_11B62:                              ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:0000000000011B62                 cmp     [r14+40h], rbx
.text:0000000000011B66                 mov     r15, [rsp+0D8h+var_D0]
.text:0000000000011B6B                 cmovle  rbx, [r14+40h]
.text:0000000000011B70                 add     r13, rbp
.text:0000000000011B73                 jmp     loc_11610
.text:0000000000011B78 ; ---------------------------------------------------------------------------
.text:0000000000011B78
.text:0000000000011B78 loc_11B78:                              ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:0000000000011B78                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000011B80                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000011B85                 mov     [rsp+0D8h+src], r11
.text:0000000000011B8A                 call    _malloc
.text:0000000000011B8F                 test    rax, rax
.text:0000000000011B92                 mov     [r14+18h], rax
.text:0000000000011B96                 mov     r11, [rsp+0D8h+src]
.text:0000000000011B9B                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000011BA0                 jnz     loc_11AC0
.text:0000000000011BA6                 mov     eax, 0Ch
.text:0000000000011BAB                 jmp     loc_1161F
.text:0000000000011BB0 ; ---------------------------------------------------------------------------
.text:0000000000011BB0
.text:0000000000011BB0 loc_11BB0:                              ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:0000000000011BB0                 lea     rcx, [rsp+0D8h+s]
.text:0000000000011BB5                 jmp     loc_119CB
.text:0000000000011BBA ; ---------------------------------------------------------------------------
.text:0000000000011BBA
.text:0000000000011BBA loc_11BBA:                              ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:0000000000011BBA                 call    ___stack_chk_fail
.text:0000000000011BBF ; ---------------------------------------------------------------------------
.text:0000000000011BBF
.text:0000000000011BBF loc_11BBF:                              ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:0000000000011BBF                 mov     rdx, [r14+18h]
.text:0000000000011BC3                 mov     [rdx+r15*8], r13
.text:0000000000011BC7                 jmp     loc_11A3E
.text:0000000000011BCC ; ---------------------------------------------------------------------------
.text:0000000000011BCC
.text:0000000000011BCC loc_11BCC:                              ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:0000000000011BCC                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000011BD0                 jmp     loc_11A25
.text:0000000000011BD0 ; } // starts at 115C0
.text:0000000000011BD0 build_wcs_upper_buffer endp
.text:0000000000011BD0
.text:0000000000011BD0 ; ---------------------------------------------------------------------------
.text:0000000000011BD5                 align 20h
.text:0000000000011BE0
.text:0000000000011BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011BE0
.text:0000000000011BE0
.text:0000000000011BE0 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:0000000000011BE0                                         ; clean_state_log_if_needed+55↓p ...
.text:0000000000011BE0 ; __unwind {
.text:0000000000011BE0                 push    rbp
.text:0000000000011BE1                 push    rbx
.text:0000000000011BE2                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:0000000000011BEC                 sub     rsp, 8
.text:0000000000011BF0                 mov     rax, [rdi+40h]
.text:0000000000011BF4                 cmp     rax, rdx
.text:0000000000011BF7                 ja      loc_11D08
.text:0000000000011BFD                 mov     rdx, [rdi+58h]
.text:0000000000011C01                 add     rax, rax
.text:0000000000011C04                 movsxd  rsi, esi
.text:0000000000011C07                 mov     rbx, rdi
.text:0000000000011C0A                 cmp     rax, rdx
.text:0000000000011C0D                 cmovg   rax, rdx
.text:0000000000011C11                 cmp     rax, rsi
.text:0000000000011C14                 cmovge  rsi, rax
.text:0000000000011C18                 call    re_string_realloc_buffers
.text:0000000000011C1D                 test    eax, eax
.text:0000000000011C1F                 mov     ebp, eax
.text:0000000000011C21                 jnz     loc_11CDD
.text:0000000000011C27                 mov     rdi, [rbx+0B8h] ; ptr
.text:0000000000011C2E                 test    rdi, rdi
.text:0000000000011C31                 jz      short loc_11C54
.text:0000000000011C33                 mov     rax, [rbx+40h]
.text:0000000000011C37                 lea     rsi, ds:8[rax*8] ; size
.text:0000000000011C3F                 call    _realloc
.text:0000000000011C44                 test    rax, rax
.text:0000000000011C47                 jz      loc_11D08
.text:0000000000011C4D                 mov     [rbx+0B8h], rax
.text:0000000000011C54
.text:0000000000011C54 loc_11C54:                              ; CODE XREF: extend_buffers+51↑j
.text:0000000000011C54                 cmp     byte ptr [rbx+88h], 0
.text:0000000000011C5B                 mov     eax, [rbx+90h]
.text:0000000000011C61                 jz      short loc_11C80
.text:0000000000011C63                 cmp     eax, 1
.text:0000000000011C66                 mov     rdi, rbx
.text:0000000000011C69                 jle     loc_11D20
.text:0000000000011C6F                 add     rsp, 8
.text:0000000000011C73                 pop     rbx
.text:0000000000011C74                 pop     rbp
.text:0000000000011C75                 jmp     build_wcs_upper_buffer
.text:0000000000011C75 ; ---------------------------------------------------------------------------
.text:0000000000011C7A                 align 20h
.text:0000000000011C80
.text:0000000000011C80 loc_11C80:                              ; CODE XREF: extend_buffers+81↑j
.text:0000000000011C80                 cmp     eax, 1
.text:0000000000011C83                 jg      short loc_11CF0
.text:0000000000011C85                 mov     rcx, [rbx+78h]
.text:0000000000011C89                 test    rcx, rcx
.text:0000000000011C8C                 jz      short loc_11CDD
.text:0000000000011C8E                 mov     rsi, [rbx+58h]
.text:0000000000011C92                 cmp     [rbx+40h], rsi
.text:0000000000011C96                 cmovle  rsi, [rbx+40h]
.text:0000000000011C9B                 mov     rax, [rbx+30h]
.text:0000000000011C9F                 cmp     rsi, rax
.text:0000000000011CA2                 jg      short loc_11CB4
.text:0000000000011CA4                 jmp     short loc_11CD5
.text:0000000000011CA4 ; ---------------------------------------------------------------------------
.text:0000000000011CA6                 align 10h
.text:0000000000011CB0
.text:0000000000011CB0 loc_11CB0:                              ; CODE XREF: extend_buffers+F3↓j
.text:0000000000011CB0                 mov     rcx, [rbx+78h]
.text:0000000000011CB4
.text:0000000000011CB4 loc_11CB4:                              ; CODE XREF: extend_buffers+C2↑j
.text:0000000000011CB4                 mov     rdx, [rbx]
.text:0000000000011CB7                 add     rdx, rax
.text:0000000000011CBA                 add     rdx, [rbx+28h]
.text:0000000000011CBE                 movzx   edx, byte ptr [rdx]
.text:0000000000011CC1                 movzx   ecx, byte ptr [rcx+rdx]
.text:0000000000011CC5                 mov     rdx, [rbx+8]
.text:0000000000011CC9                 mov     [rdx+rax], cl
.text:0000000000011CCC                 add     rax, 1
.text:0000000000011CD0                 cmp     rsi, rax
.text:0000000000011CD3                 jnz     short loc_11CB0
.text:0000000000011CD5
.text:0000000000011CD5 loc_11CD5:                              ; CODE XREF: extend_buffers+C4↑j
.text:0000000000011CD5                 mov     [rbx+30h], rax
.text:0000000000011CD9                 mov     [rbx+38h], rax
.text:0000000000011CDD
.text:0000000000011CDD loc_11CDD:                              ; CODE XREF: extend_buffers+41↑j
.text:0000000000011CDD                                         ; extend_buffers+AC↑j
.text:0000000000011CDD                 add     rsp, 8
.text:0000000000011CE1                 mov     eax, ebp
.text:0000000000011CE3                 pop     rbx
.text:0000000000011CE4                 pop     rbp
.text:0000000000011CE5                 retn
.text:0000000000011CE5 ; ---------------------------------------------------------------------------
.text:0000000000011CE6                 align 10h
.text:0000000000011CF0
.text:0000000000011CF0 loc_11CF0:                              ; CODE XREF: extend_buffers+A3↑j
.text:0000000000011CF0                 mov     rdi, rbx
.text:0000000000011CF3                 call    build_wcs_buffer
.text:0000000000011CF8                 add     rsp, 8
.text:0000000000011CFC                 mov     eax, ebp
.text:0000000000011CFE                 pop     rbx
.text:0000000000011CFF                 pop     rbp
.text:0000000000011D00                 retn
.text:0000000000011D00 ; ---------------------------------------------------------------------------
.text:0000000000011D01                 align 8
.text:0000000000011D08
.text:0000000000011D08 loc_11D08:                              ; CODE XREF: extend_buffers+17↑j
.text:0000000000011D08                                         ; extend_buffers+67↑j
.text:0000000000011D08                 mov     ebp, 0Ch
.text:0000000000011D0D                 add     rsp, 8
.text:0000000000011D11                 mov     eax, ebp
.text:0000000000011D13                 pop     rbx
.text:0000000000011D14                 pop     rbp
.text:0000000000011D15                 retn
.text:0000000000011D15 ; ---------------------------------------------------------------------------
.text:0000000000011D16                 align 20h
.text:0000000000011D20
.text:0000000000011D20 loc_11D20:                              ; CODE XREF: extend_buffers+89↑j
.text:0000000000011D20                 call    build_upper_buffer
.text:0000000000011D25                 add     rsp, 8
.text:0000000000011D29                 mov     eax, ebp
.text:0000000000011D2B                 pop     rbx
.text:0000000000011D2C                 pop     rbp
.text:0000000000011D2D                 retn
.text:0000000000011D2D ; } // starts at 11BE0
.text:0000000000011D2D extend_buffers  endp
.text:0000000000011D2D
.text:0000000000011D2D ; ---------------------------------------------------------------------------
.text:0000000000011D2E                 align 10h
.text:0000000000011D30
.text:0000000000011D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000011D30
.text:0000000000011D30
.text:0000000000011D30 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:0000000000011D30                                         ; transit_state_bkref_isra_34+330↓p ...
.text:0000000000011D30 ; __unwind {
.text:0000000000011D30                 push    r12
.text:0000000000011D32                 push    rbp
.text:0000000000011D33                 mov     rbp, rsi
.text:0000000000011D36                 push    rbx
.text:0000000000011D37                 mov     rax, [rdi+40h]
.text:0000000000011D3B                 mov     rbx, rdi
.text:0000000000011D3E                 mov     r12, [rdi+0C0h]
.text:0000000000011D45                 cmp     rax, rsi
.text:0000000000011D48                 jg      short loc_11D70
.text:0000000000011D4A                 cmp     rax, [rdi+58h]
.text:0000000000011D4E                 jge     short loc_11D70
.text:0000000000011D50                 lea     esi, [rbp+1]
.text:0000000000011D53                 mov     rdi, rbx
.text:0000000000011D56                 call    extend_buffers
.text:0000000000011D5B                 test    eax, eax
.text:0000000000011D5D                 jnz     short loc_11D66
.text:0000000000011D5F
.text:0000000000011D5F loc_11D5F:                              ; CODE XREF: clean_state_log_if_needed+47↓j
.text:0000000000011D5F                                         ; clean_state_log_if_needed+4D↓j ...
.text:0000000000011D5F                 cmp     r12, rbp
.text:0000000000011D62                 jl      short loc_11D90
.text:0000000000011D64
.text:0000000000011D64 loc_11D64:                              ; CODE XREF: clean_state_log_if_needed+84↓j
.text:0000000000011D64                 xor     eax, eax
.text:0000000000011D66
.text:0000000000011D66 loc_11D66:                              ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:0000000000011D66                                         ; clean_state_log_if_needed+5E↓j
.text:0000000000011D66                 pop     rbx
.text:0000000000011D67                 pop     rbp
.text:0000000000011D68                 pop     r12
.text:0000000000011D6A                 retn
.text:0000000000011D6A ; ---------------------------------------------------------------------------
.text:0000000000011D6B                 align 10h
.text:0000000000011D70
.text:0000000000011D70 loc_11D70:                              ; CODE XREF: clean_state_log_if_needed+18↑j
.text:0000000000011D70                                         ; clean_state_log_if_needed+1E↑j
.text:0000000000011D70                 mov     rax, [rbx+30h]
.text:0000000000011D74                 cmp     rax, rbp
.text:0000000000011D77                 jg      short loc_11D5F
.text:0000000000011D79                 cmp     rax, [rbx+58h]
.text:0000000000011D7D                 jge     short loc_11D5F
.text:0000000000011D7F                 lea     esi, [rbp+1]
.text:0000000000011D82                 mov     rdi, rbx
.text:0000000000011D85                 call    extend_buffers
.text:0000000000011D8A                 test    eax, eax
.text:0000000000011D8C                 jz      short loc_11D5F
.text:0000000000011D8E                 jmp     short loc_11D66
.text:0000000000011D90 ; ---------------------------------------------------------------------------
.text:0000000000011D90
.text:0000000000011D90 loc_11D90:                              ; CODE XREF: clean_state_log_if_needed+32↑j
.text:0000000000011D90                 mov     rax, [rbx+0B8h]
.text:0000000000011D97                 mov     rdx, rbp
.text:0000000000011D9A                 xor     esi, esi        ; c
.text:0000000000011D9C                 sub     rdx, r12
.text:0000000000011D9F                 shl     rdx, 3          ; n
.text:0000000000011DA3                 lea     rdi, [rax+r12*8+8] ; s
.text:0000000000011DA8                 call    _memset
.text:0000000000011DAD                 mov     [rbx+0C0h], rbp
.text:0000000000011DB4                 jmp     short loc_11D64
.text:0000000000011DB4 ; } // starts at 11D30
.text:0000000000011DB4 clean_state_log_if_needed endp
.text:0000000000011DB4
.text:0000000000011DB4 ; ---------------------------------------------------------------------------
.text:0000000000011DB6                 align 20h
.text:0000000000011DC0
.text:0000000000011DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DC0
.text:0000000000011DC0 ; Attributes: info_from_lumina
.text:0000000000011DC0
.text:0000000000011DC0 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:0000000000011DC0 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:0000000000011DC0                                         ; build_charclass_op+1F3↓p ...
.text:0000000000011DC0 ; __unwind {
.text:0000000000011DC0                 push    rbx
.text:0000000000011DC1                 mov     rbx, rdi
.text:0000000000011DC4                 mov     rdi, [rdi]      ; ptr
.text:0000000000011DC7                 call    free
.text:0000000000011DCC                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000011DD0                 call    free
.text:0000000000011DD5                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000011DD9                 call    free
.text:0000000000011DDE                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000011DE2                 call    free
.text:0000000000011DE7                 mov     rdi, rbx        ; ptr
.text:0000000000011DEA                 pop     rbx
.text:0000000000011DEB                 jmp     free
.text:0000000000011DEB ; } // starts at 11DC0
.text:0000000000011DEB isl_union_flow_free_0 endp
.text:0000000000011DEB
.text:0000000000011DF0
.text:0000000000011DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011DF0
.text:0000000000011DF0
.text:0000000000011DF0 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:0000000000011DF0                                         ; free_dfa_content+32↓p
.text:0000000000011DF0 ; __unwind {
.text:0000000000011DF0                 mov     eax, [rdi+8]
.text:0000000000011DF3                 and     eax, 400FFh
.text:0000000000011DF8                 cmp     eax, 6
.text:0000000000011DFB                 jz      short loc_11E10
.text:0000000000011DFD                 cmp     eax, 3
.text:0000000000011E00                 jz      short loc_11E08
.text:0000000000011E02                 rep retn
.text:0000000000011E02 ; ---------------------------------------------------------------------------
.text:0000000000011E04                 align 8
.text:0000000000011E08
.text:0000000000011E08 loc_11E08:                              ; CODE XREF: free_token+10↑j
.text:0000000000011E08                 mov     rdi, [rdi]      ; ptr
.text:0000000000011E0B                 jmp     free
.text:0000000000011E10 ; ---------------------------------------------------------------------------
.text:0000000000011E10
.text:0000000000011E10 loc_11E10:                              ; CODE XREF: free_token+B↑j
.text:0000000000011E10                 mov     rdi, [rdi]      ; ptr
.text:0000000000011E13                 jmp     short isl_union_flow_free_0
.text:0000000000011E13 ; } // starts at 11DF0
.text:0000000000011E13 free_token      endp
.text:0000000000011E13
.text:0000000000011E13 ; ---------------------------------------------------------------------------
.text:0000000000011E15                 align 20h
.text:0000000000011E20
.text:0000000000011E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000011E20
.text:0000000000011E20
.text:0000000000011E20 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:0000000000011E20                                         ; parse_expression+38C↓o ...
.text:0000000000011E20 ; __unwind {
.text:0000000000011E20                 lea     rdi, [rsi+28h]
.text:0000000000011E24                 sub     rsp, 8
.text:0000000000011E28                 call    free_token
.text:0000000000011E2D                 xor     eax, eax
.text:0000000000011E2F                 add     rsp, 8
.text:0000000000011E33                 retn
.text:0000000000011E33 ; } // starts at 11E20
.text:0000000000011E33 free_tree       endp
.text:0000000000011E33
.text:0000000000011E33 ; ---------------------------------------------------------------------------
.text:0000000000011E34                 align 20h
.text:0000000000011E40
.text:0000000000011E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000011E40
.text:0000000000011E40
.text:0000000000011E40 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:0000000000011E40                                         ; calc_first+1E↓p
.text:0000000000011E40
.text:0000000000011E40 ptr             = qword ptr -48h
.text:0000000000011E40 var_40          = qword ptr -40h
.text:0000000000011E40
.text:0000000000011E40 ; __unwind {
.text:0000000000011E40                 push    r15
.text:0000000000011E42                 push    r14
.text:0000000000011E44                 mov     r14, rsi
.text:0000000000011E47                 push    r13
.text:0000000000011E49                 push    r12
.text:0000000000011E4B                 push    rbp
.text:0000000000011E4C                 push    rbx
.text:0000000000011E4D                 mov     rbx, rdi
.text:0000000000011E50                 sub     rsp, 18h
.text:0000000000011E54                 mov     rsi, [rdi+10h]
.text:0000000000011E58                 mov     rbp, [rdi+8]
.text:0000000000011E5C                 cmp     rsi, rbp
.text:0000000000011E5F                 jnb     loc_11F10
.text:0000000000011E65                 mov     r12, [rdi+18h]
.text:0000000000011E69                 mov     rbp, [rdi+28h]
.text:0000000000011E6D
.text:0000000000011E6D loc_11E6D:                              ; CODE XREF: re_dfa_add_node+187↓j
.text:0000000000011E6D                 mov     rax, rsi
.text:0000000000011E70                 mov     ecx, edx
.text:0000000000011E72                 shl     rax, 4
.text:0000000000011E76                 add     rax, [rbx]
.text:0000000000011E79                 and     ecx, 0FFFC00FFh
.text:0000000000011E7F                 mov     [rax+8], rdx
.text:0000000000011E83                 mov     [rax+8], ecx
.text:0000000000011E86                 xor     ecx, ecx
.text:0000000000011E88                 cmp     dl, 6
.text:0000000000011E8B                 mov     [rax], r14
.text:0000000000011E8E                 setz    cl
.text:0000000000011E91                 cmp     dl, 5
.text:0000000000011E94                 jnz     short loc_11EA2
.text:0000000000011E96                 xor     ecx, ecx
.text:0000000000011E98                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000011E9F                 setnle  cl
.text:0000000000011EA2
.text:0000000000011EA2 loc_11EA2:                              ; CODE XREF: re_dfa_add_node+54↑j
.text:0000000000011EA2                 movzx   edx, byte ptr [rax+0Ah]
.text:0000000000011EA6                 shl     ecx, 4
.text:0000000000011EA9                 pxor    xmm0, xmm0
.text:0000000000011EAD                 and     edx, 0FFFFFFEFh
.text:0000000000011EB0                 or      edx, ecx
.text:0000000000011EB2                 mov     [rax+0Ah], dl
.text:0000000000011EB5                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:0000000000011EBD                 mov     rax, [rbx+10h]
.text:0000000000011EC1                 lea     rax, [rax+rax*2]
.text:0000000000011EC5                 lea     rax, [rbp+rax*8+0]
.text:0000000000011ECA                 movups  xmmword ptr [rax], xmm0
.text:0000000000011ECD                 mov     qword ptr [rax+10h], 0
.text:0000000000011ED5                 mov     rax, [rbx+10h]
.text:0000000000011ED9                 lea     rdx, [rax+rax*2]
.text:0000000000011EDD                 mov     rax, [rbx+30h]
.text:0000000000011EE1                 lea     rax, [rax+rdx*8]
.text:0000000000011EE5                 movups  xmmword ptr [rax], xmm0
.text:0000000000011EE8                 mov     qword ptr [rax+10h], 0
.text:0000000000011EF0                 mov     rax, [rbx+10h]
.text:0000000000011EF4                 lea     rdx, [rax+1]
.text:0000000000011EF8                 mov     [rbx+10h], rdx
.text:0000000000011EFC
.text:0000000000011EFC loc_11EFC:                              ; CODE XREF: re_dfa_add_node+1C9↓j
.text:0000000000011EFC                 add     rsp, 18h
.text:0000000000011F00                 pop     rbx
.text:0000000000011F01                 pop     rbp
.text:0000000000011F02                 pop     r12
.text:0000000000011F04                 pop     r13
.text:0000000000011F06                 pop     r14
.text:0000000000011F08                 pop     r15
.text:0000000000011F0A                 retn
.text:0000000000011F0A ; ---------------------------------------------------------------------------
.text:0000000000011F0B                 align 10h
.text:0000000000011F10
.text:0000000000011F10 loc_11F10:                              ; CODE XREF: re_dfa_add_node+1F↑j
.text:0000000000011F10                 lea     r13, [rbp+rbp+0]
.text:0000000000011F15                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:0000000000011F1F                 cmp     r13, rax
.text:0000000000011F22                 ja      loc_12002
.text:0000000000011F28                 mov     rdi, [rdi]      ; ptr
.text:0000000000011F2B                 mov     rsi, rbp
.text:0000000000011F2E                 mov     [rsp+48h+var_40], rdx
.text:0000000000011F33                 shl     rsi, 5          ; size
.text:0000000000011F37                 call    _realloc
.text:0000000000011F3C                 test    rax, rax
.text:0000000000011F3F                 jz      loc_12002
.text:0000000000011F45                 mov     r15, rbp
.text:0000000000011F48                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000011F4C                 mov     [rbx], rax
.text:0000000000011F4F                 shl     r15, 4
.text:0000000000011F53                 mov     rsi, r15        ; size
.text:0000000000011F56                 call    _realloc
.text:0000000000011F5B                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000011F5F                 mov     rsi, r15        ; size
.text:0000000000011F62                 lea     r15, [r13+rbp*4+0]
.text:0000000000011F67                 mov     r12, rax
.text:0000000000011F6A                 shl     r15, 3
.text:0000000000011F6E                 call    _realloc
.text:0000000000011F73                 mov     rdi, [rbx+28h]  ; ptr
.text:0000000000011F77                 mov     rsi, r15        ; size
.text:0000000000011F7A                 mov     [rsp+48h+ptr], rax
.text:0000000000011F7E                 call    _realloc
.text:0000000000011F83                 mov     rdi, [rbx+30h]  ; ptr
.text:0000000000011F87                 mov     rsi, r15        ; size
.text:0000000000011F8A                 mov     rbp, rax
.text:0000000000011F8D                 call    _realloc
.text:0000000000011F92                 test    r12, r12
.text:0000000000011F95                 mov     rcx, [rsp+48h+ptr]
.text:0000000000011F99                 jz      short loc_11FD0
.text:0000000000011F9B                 test    rcx, rcx
.text:0000000000011F9E                 jz      short loc_11FD0
.text:0000000000011FA0                 test    rbp, rbp
.text:0000000000011FA3                 jz      short loc_11FD0
.text:0000000000011FA5                 test    rax, rax
.text:0000000000011FA8                 mov     rdx, [rsp+48h+var_40]
.text:0000000000011FAD                 jz      short loc_11FD0
.text:0000000000011FAF                 mov     [rbx+18h], r12
.text:0000000000011FB3                 mov     [rbx+20h], rcx
.text:0000000000011FB7                 mov     [rbx+28h], rbp
.text:0000000000011FBB                 mov     [rbx+30h], rax
.text:0000000000011FBF                 mov     [rbx+8], r13
.text:0000000000011FC3                 mov     rsi, [rbx+10h]
.text:0000000000011FC7                 jmp     loc_11E6D
.text:0000000000011FC7 ; ---------------------------------------------------------------------------
.text:0000000000011FCC                 align 10h
.text:0000000000011FD0
.text:0000000000011FD0 loc_11FD0:                              ; CODE XREF: re_dfa_add_node+159↑j
.text:0000000000011FD0                                         ; re_dfa_add_node+15E↑j ...
.text:0000000000011FD0                 mov     rdi, r12        ; ptr
.text:0000000000011FD3                 mov     [rsp+48h+var_40], rax
.text:0000000000011FD8                 mov     [rsp+48h+ptr], rcx
.text:0000000000011FDC                 call    free
.text:0000000000011FE1                 mov     rcx, [rsp+48h+ptr]
.text:0000000000011FE5                 mov     rdi, rcx        ; ptr
.text:0000000000011FE8                 call    free
.text:0000000000011FED                 mov     rdi, rbp        ; ptr
.text:0000000000011FF0                 call    free
.text:0000000000011FF5                 mov     rax, [rsp+48h+var_40]
.text:0000000000011FFA                 mov     rdi, rax        ; ptr
.text:0000000000011FFD                 call    free
.text:0000000000012002
.text:0000000000012002 loc_12002:                              ; CODE XREF: re_dfa_add_node+E2↑j
.text:0000000000012002                                         ; re_dfa_add_node+FF↑j
.text:0000000000012002                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012009                 jmp     loc_11EFC
.text:0000000000012009 ; } // starts at 11E40
.text:0000000000012009 re_dfa_add_node endp
.text:0000000000012009
.text:0000000000012009 ; ---------------------------------------------------------------------------
.text:000000000001200E                 align 10h
.text:0000000000012010
.text:0000000000012010 ; =============== S U B R O U T I N E =======================================
.text:0000000000012010
.text:0000000000012010
.text:0000000000012010 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:0000000000012010                                         ; duplicate_node_closure+148↓p ...
.text:0000000000012010 ; __unwind {
.text:0000000000012010                 push    r13
.text:0000000000012012                 push    r12
.text:0000000000012014                 mov     r13, rsi
.text:0000000000012017                 push    rbp
.text:0000000000012018                 push    rbx
.text:0000000000012019                 shl     r13, 4
.text:000000000001201D                 mov     rbp, rsi
.text:0000000000012020                 mov     r12d, edx
.text:0000000000012023                 mov     rbx, rdi
.text:0000000000012026                 sub     rsp, 8
.text:000000000001202A                 mov     rax, [rdi]
.text:000000000001202D                 mov     rsi, [rax+r13]
.text:0000000000012031                 mov     rdx, [rax+r13+8]
.text:0000000000012036                 call    re_dfa_add_node
.text:000000000001203B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001203F                 jz      short loc_120A4
.text:0000000000012041                 mov     edi, r12d
.text:0000000000012044                 mov     r8, [rbx]
.text:0000000000012047                 mov     rsi, rax
.text:000000000001204A                 and     di, 3FFh
.text:000000000001204F                 shl     rsi, 4
.text:0000000000012053                 mov     ecx, edi
.text:0000000000012055                 and     ecx, 3FFh
.text:000000000001205B                 add     rsi, r8
.text:000000000001205E                 shl     ecx, 8
.text:0000000000012061                 mov     edx, ecx
.text:0000000000012063                 mov     ecx, [rsi+8]
.text:0000000000012066                 and     ecx, 0FFFC00FFh
.text:000000000001206C                 or      ecx, edx
.text:000000000001206E                 mov     [rsi+8], ecx
.text:0000000000012071                 mov     edx, [r8+r13+8]
.text:0000000000012076                 and     ecx, 0FFFC00FFh
.text:000000000001207C                 shr     edx, 8
.text:000000000001207F                 or      edx, edi
.text:0000000000012081                 and     edx, 3FFh
.text:0000000000012087                 shl     edx, 8
.text:000000000001208A                 or      edx, ecx
.text:000000000001208C                 mov     ecx, edx
.text:000000000001208E                 mov     [rsi+8], edx
.text:0000000000012091                 shr     ecx, 10h
.text:0000000000012094                 mov     edx, ecx
.text:0000000000012096                 or      edx, 4
.text:0000000000012099                 mov     [rsi+0Ah], dl
.text:000000000001209C                 mov     rdx, [rbx+20h]
.text:00000000000120A0                 mov     [rdx+rax*8], rbp
.text:00000000000120A4
.text:00000000000120A4 loc_120A4:                              ; CODE XREF: duplicate_node+2F↑j
.text:00000000000120A4                 add     rsp, 8
.text:00000000000120A8                 pop     rbx
.text:00000000000120A9                 pop     rbp
.text:00000000000120AA                 pop     r12
.text:00000000000120AC                 pop     r13
.text:00000000000120AE                 retn
.text:00000000000120AE ; } // starts at 12010
.text:00000000000120AE duplicate_node  endp
.text:00000000000120AE
.text:00000000000120AE ; ---------------------------------------------------------------------------
.text:00000000000120AF                 align 10h
.text:00000000000120B0
.text:00000000000120B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000120B0
.text:00000000000120B0
.text:00000000000120B0 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:00000000000120B0                                         ; calc_eclosure_iter+26A↓p
.text:00000000000120B0
.text:00000000000120B0 var_48          = qword ptr -48h
.text:00000000000120B0 var_40          = qword ptr -40h
.text:00000000000120B0
.text:00000000000120B0 ; __unwind {
.text:00000000000120B0                 push    r15
.text:00000000000120B2                 push    r14
.text:00000000000120B4                 mov     r9, rsi
.text:00000000000120B7                 push    r13
.text:00000000000120B9                 push    r12
.text:00000000000120BB                 mov     r14, rdi
.text:00000000000120BE                 push    rbp
.text:00000000000120BF                 push    rbx
.text:00000000000120C0                 mov     r13, rdx
.text:00000000000120C3                 mov     ebp, r8d
.text:00000000000120C6                 sub     rsp, 18h
.text:00000000000120CA                 mov     [rsp+48h+var_40], rcx
.text:00000000000120CF
.text:00000000000120CF loc_120CF:                              ; CODE XREF: duplicate_node_closure+125↓j
.text:00000000000120CF                                         ; duplicate_node_closure+1E1↓j
.text:00000000000120CF                 mov     r8, [r14]
.text:00000000000120D2                 mov     rax, r9
.text:00000000000120D5                 mov     rdi, [r14+28h]
.text:00000000000120D9                 shl     rax, 4
.text:00000000000120DD                 mov     r12, r13
.text:00000000000120E0                 add     rax, r8
.text:00000000000120E3                 cmp     byte ptr [rax+8], 4
.text:00000000000120E7                 jz      loc_122A0
.text:00000000000120ED                 lea     r12, [r9+r9*2]
.text:00000000000120F1                 shl     r12, 3
.text:00000000000120F5                 lea     rsi, [rdi+r12]
.text:00000000000120F9                 mov     rcx, [rsi+8]
.text:00000000000120FD                 test    rcx, rcx
.text:0000000000012100                 jz      loc_122F9
.text:0000000000012106                 lea     rbx, [r13+r13*2+0]
.text:000000000001210B                 mov     rsi, [rsi+10h]
.text:000000000001210F                 shl     rbx, 3
.text:0000000000012113                 add     rdi, rbx
.text:0000000000012116                 cmp     rcx, 1
.text:000000000001211A                 mov     r15, [rsi]
.text:000000000001211D                 mov     qword ptr [rdi+8], 0
.text:0000000000012125                 jz      loc_12240
.text:000000000001212B                 mov     rdx, [r14+10h]
.text:000000000001212F                 lea     rsi, [rdx-1]
.text:0000000000012133                 mov     rax, rsi
.text:0000000000012136                 shl     rax, 4
.text:000000000001213A                 add     rax, r8
.text:000000000001213D                 test    byte ptr [rax+0Ah], 4
.text:0000000000012141                 jz      loc_121F0
.text:0000000000012147                 test    rsi, rsi
.text:000000000001214A                 jle     loc_121F0
.text:0000000000012150                 shl     rdx, 4
.text:0000000000012154                 sub     r8, rax
.text:0000000000012157                 mov     rcx, [r14+20h]
.text:000000000001215B                 lea     r8, [r8+rdx-20h]
.text:0000000000012160                 jmp     short loc_1217A
.text:0000000000012160 ; ---------------------------------------------------------------------------
.text:0000000000012162                 align 8
.text:0000000000012168
.text:0000000000012168 loc_12168:                              ; CODE XREF: duplicate_node_closure+CE↓j
.text:0000000000012168                                         ; duplicate_node_closure+DE↓j
.text:0000000000012168                 add     rax, r8
.text:000000000001216B                 sub     rsi, 1
.text:000000000001216F                 test    byte ptr [rax+0Ah], 4
.text:0000000000012173                 jz      short loc_121F0
.text:0000000000012175                 test    rsi, rsi
.text:0000000000012178                 jle     short loc_121F0
.text:000000000001217A
.text:000000000001217A loc_1217A:                              ; CODE XREF: duplicate_node_closure+B0↑j
.text:000000000001217A                 cmp     [rcx+rsi*8], r15
.text:000000000001217E                 jnz     short loc_12168
.text:0000000000012180                 mov     edx, [rax+8]
.text:0000000000012183                 shr     edx, 8
.text:0000000000012186                 and     edx, 3FFh
.text:000000000001218C                 cmp     ebp, edx
.text:000000000001218E                 jnz     short loc_12168
.text:0000000000012190                 call    re_node_set_insert
.text:0000000000012195                 test    al, al
.text:0000000000012197                 jz      short loc_121DB
.text:0000000000012199
.text:0000000000012199 loc_12199:                              ; CODE XREF: duplicate_node_closure+181↓j
.text:0000000000012199                 mov     rax, [r14+28h]
.text:000000000001219D                 mov     edx, ebp
.text:000000000001219F                 mov     rdi, r14
.text:00000000000121A2                 mov     rax, [rax+r12+10h]
.text:00000000000121A7                 mov     r9, [rax+8]
.text:00000000000121AB                 mov     rsi, r9
.text:00000000000121AE                 mov     [rsp+48h+var_48], r9
.text:00000000000121B2                 call    duplicate_node
.text:00000000000121B7                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000121BB                 mov     r13, rax
.text:00000000000121BE                 jz      short loc_121DB
.text:00000000000121C0
.text:00000000000121C0 loc_121C0:                              ; CODE XREF: duplicate_node_closure+244↓j
.text:00000000000121C0                 add     rbx, [r14+28h]
.text:00000000000121C4                 mov     rsi, r13
.text:00000000000121C7                 mov     rdi, rbx
.text:00000000000121CA                 call    re_node_set_insert
.text:00000000000121CF                 test    al, al
.text:00000000000121D1                 mov     r9, [rsp+48h+var_48]
.text:00000000000121D5                 jnz     loc_120CF
.text:00000000000121DB
.text:00000000000121DB loc_121DB:                              ; CODE XREF: duplicate_node_closure+E7↑j
.text:00000000000121DB                                         ; duplicate_node_closure+10E↑j ...
.text:00000000000121DB                 mov     eax, 0Ch
.text:00000000000121E0
.text:00000000000121E0 loc_121E0:                              ; CODE XREF: duplicate_node_closure+187↓j
.text:00000000000121E0                                         ; duplicate_node_closure+257↓j ...
.text:00000000000121E0                 add     rsp, 18h
.text:00000000000121E4                 pop     rbx
.text:00000000000121E5                 pop     rbp
.text:00000000000121E6                 pop     r12
.text:00000000000121E8                 pop     r13
.text:00000000000121EA                 pop     r14
.text:00000000000121EC                 pop     r15
.text:00000000000121EE                 retn
.text:00000000000121EE ; ---------------------------------------------------------------------------
.text:00000000000121EF                 align 10h
.text:00000000000121F0
.text:00000000000121F0 loc_121F0:                              ; CODE XREF: duplicate_node_closure+91↑j
.text:00000000000121F0                                         ; duplicate_node_closure+9A↑j ...
.text:00000000000121F0                 mov     edx, ebp
.text:00000000000121F2                 mov     rsi, r15
.text:00000000000121F5                 mov     rdi, r14
.text:00000000000121F8                 call    duplicate_node
.text:00000000000121FD                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012201                 mov     r13, rax
.text:0000000000012204                 jz      short loc_121DB
.text:0000000000012206                 mov     rdi, [r14+28h]
.text:000000000001220A                 mov     rsi, r13
.text:000000000001220D                 add     rdi, rbx
.text:0000000000012210                 call    re_node_set_insert
.text:0000000000012215                 test    al, al
.text:0000000000012217                 jz      short loc_121DB
.text:0000000000012219                 mov     rcx, [rsp+48h+var_40]
.text:000000000001221E                 mov     r8d, ebp
.text:0000000000012221                 mov     rdx, r13
.text:0000000000012224                 mov     rsi, r15
.text:0000000000012227                 mov     rdi, r14
.text:000000000001222A                 call    duplicate_node_closure
.text:000000000001222F                 test    eax, eax
.text:0000000000012231                 jz      loc_12199
.text:0000000000012237                 jmp     short loc_121E0
.text:0000000000012237 ; ---------------------------------------------------------------------------
.text:0000000000012239                 align 20h
.text:0000000000012240
.text:0000000000012240 loc_12240:                              ; CODE XREF: duplicate_node_closure+75↑j
.text:0000000000012240                 cmp     r9, [rsp+48h+var_40]
.text:0000000000012245                 jnz     short loc_12250
.text:0000000000012247                 cmp     r9, r13
.text:000000000001224A                 jnz     loc_1230C
.text:0000000000012250
.text:0000000000012250 loc_12250:                              ; CODE XREF: duplicate_node_closure+195↑j
.text:0000000000012250                 mov     eax, [rax+8]
.text:0000000000012253                 mov     rsi, r15
.text:0000000000012256                 mov     rdi, r14
.text:0000000000012259                 shr     eax, 8
.text:000000000001225C                 and     eax, 3FFh
.text:0000000000012261                 or      ebp, eax
.text:0000000000012263                 mov     edx, ebp
.text:0000000000012265                 call    duplicate_node
.text:000000000001226A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001226E                 mov     r13, rax
.text:0000000000012271                 jz      loc_121DB
.text:0000000000012277                 add     rbx, [r14+28h]
.text:000000000001227B                 mov     rsi, rax
.text:000000000001227E                 mov     rdi, rbx
.text:0000000000012281                 call    re_node_set_insert
.text:0000000000012286                 test    al, al
.text:0000000000012288                 jz      loc_121DB
.text:000000000001228E                 mov     r9, r15
.text:0000000000012291                 jmp     loc_120CF
.text:0000000000012291 ; ---------------------------------------------------------------------------
.text:0000000000012296                 align 20h
.text:00000000000122A0
.text:00000000000122A0 loc_122A0:                              ; CODE XREF: duplicate_node_closure+37↑j
.text:00000000000122A0                 mov     rax, [r14+18h]
.text:00000000000122A4                 lea     rbx, [r13+r13*2+0]
.text:00000000000122A9                 lea     r15, ds:0[r9*8]
.text:00000000000122B1                 mov     edx, ebp
.text:00000000000122B3                 shl     rbx, 3
.text:00000000000122B7                 mov     r9, [rax+r9*8]
.text:00000000000122BB                 mov     qword ptr [rdi+rbx+8], 0
.text:00000000000122C4                 mov     rdi, r14
.text:00000000000122C7                 mov     rsi, r9
.text:00000000000122CA                 mov     [rsp+48h+var_48], r9
.text:00000000000122CE                 call    duplicate_node
.text:00000000000122D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000122D7                 mov     r13, rax
.text:00000000000122DA                 mov     r9, [rsp+48h+var_48]
.text:00000000000122DE                 jz      loc_121DB
.text:00000000000122E4                 mov     rax, [r14+18h]
.text:00000000000122E8                 mov     [rsp+48h+var_48], r9
.text:00000000000122EC                 mov     rcx, [rax+r15]
.text:00000000000122F0                 mov     [rax+r12*8], rcx
.text:00000000000122F4                 jmp     loc_121C0
.text:00000000000122F9 ; ---------------------------------------------------------------------------
.text:00000000000122F9
.text:00000000000122F9 loc_122F9:                              ; CODE XREF: duplicate_node_closure+50↑j
.text:00000000000122F9                 mov     rax, [r14+18h]
.text:00000000000122FD                 mov     rcx, [rax+r9*8]
.text:0000000000012301                 mov     [rax+r13*8], rcx
.text:0000000000012305                 xor     eax, eax
.text:0000000000012307                 jmp     loc_121E0
.text:000000000001230C ; ---------------------------------------------------------------------------
.text:000000000001230C
.text:000000000001230C loc_1230C:                              ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000001230C                 mov     rsi, r15
.text:000000000001230F                 call    re_node_set_insert
.text:0000000000012314                 mov     edx, eax
.text:0000000000012316                 xor     eax, eax
.text:0000000000012318                 test    dl, dl
.text:000000000001231A                 jnz     loc_121E0
.text:0000000000012320                 jmp     loc_121DB
.text:0000000000012320 ; } // starts at 120B0
.text:0000000000012320 duplicate_node_closure endp
.text:0000000000012320
.text:0000000000012320 ; ---------------------------------------------------------------------------
.text:0000000000012325                 align 10h
.text:0000000000012330
.text:0000000000012330 ; =============== S U B R O U T I N E =======================================
.text:0000000000012330
.text:0000000000012330
.text:0000000000012330 ; __int64 __fastcall free_state(void *ptr)
.text:0000000000012330 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:0000000000012330                                         ; re_acquire_state_context+211↓p ...
.text:0000000000012330 ; __unwind {
.text:0000000000012330                 push    rbx
.text:0000000000012331                 mov     rbx, rdi
.text:0000000000012334                 mov     rdi, [rdi+30h]  ; ptr
.text:0000000000012338                 call    free
.text:000000000001233D                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000012341                 call    free
.text:0000000000012346                 mov     rax, [rbx+50h]
.text:000000000001234A                 lea     rdx, [rbx+8]
.text:000000000001234E                 cmp     rax, rdx
.text:0000000000012351                 jz      short loc_12365
.text:0000000000012353                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000012357                 call    free
.text:000000000001235C                 mov     rdi, [rbx+50h]  ; ptr
.text:0000000000012360                 call    free
.text:0000000000012365
.text:0000000000012365 loc_12365:                              ; CODE XREF: free_state+21↑j
.text:0000000000012365                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000012369                 call    free
.text:000000000001236E                 mov     rdi, [rbx+60h]  ; ptr
.text:0000000000012372                 call    free
.text:0000000000012377                 mov     rdi, [rbx+58h]  ; ptr
.text:000000000001237B                 call    free
.text:0000000000012380                 mov     rdi, rbx        ; ptr
.text:0000000000012383                 pop     rbx
.text:0000000000012384                 jmp     free
.text:0000000000012384 ; } // starts at 12330
.text:0000000000012384 free_state      endp
.text:0000000000012384
.text:0000000000012384 ; ---------------------------------------------------------------------------
.text:0000000000012389                 align 10h
.text:0000000000012390
.text:0000000000012390 ; =============== S U B R O U T I N E =======================================
.text:0000000000012390
.text:0000000000012390
.text:0000000000012390 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:0000000000012390                                         ; re_compile_internal+377↓p ...
.text:0000000000012390 ; __unwind {
.text:0000000000012390                 push    rbx
.text:0000000000012391                 mov     rbx, rdi
.text:0000000000012394                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000012398                 call    free
.text:000000000001239D                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000123A1                 call    free
.text:00000000000123A6                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000123AD                 jnz     short loc_123B8
.text:00000000000123AF                 pop     rbx
.text:00000000000123B0                 retn
.text:00000000000123B0 ; ---------------------------------------------------------------------------
.text:00000000000123B1                 align 8
.text:00000000000123B8
.text:00000000000123B8 loc_123B8:                              ; CODE XREF: re_string_destruct+1D↑j
.text:00000000000123B8                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000123BC                 pop     rbx
.text:00000000000123BD                 jmp     free
.text:00000000000123BD ; } // starts at 12390
.text:00000000000123BD re_string_destruct endp
.text:00000000000123BD
.text:00000000000123BD ; ---------------------------------------------------------------------------
.text:00000000000123C2                 align 10h
.text:00000000000123D0
.text:00000000000123D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000123D0
.text:00000000000123D0
.text:00000000000123D0 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:00000000000123D0 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:00000000000123D0                                         ; regfree+C↓p
.text:00000000000123D0 ; __unwind {
.text:00000000000123D0                 push    r14
.text:00000000000123D2                 push    r13
.text:00000000000123D4                 push    r12
.text:00000000000123D6                 mov     r12, rdi
.text:00000000000123D9                 push    rbp
.text:00000000000123DA                 push    rbx
.text:00000000000123DB                 mov     rdi, [rdi]
.text:00000000000123DE                 test    rdi, rdi
.text:00000000000123E1                 jz      short loc_1240E
.text:00000000000123E3                 cmp     qword ptr [r12+10h], 0
.text:00000000000123E9                 jz      short loc_1240E
.text:00000000000123EB                 xor     ebx, ebx
.text:00000000000123ED                 jmp     short loc_123F4
.text:00000000000123ED ; ---------------------------------------------------------------------------
.text:00000000000123EF                 align 10h
.text:00000000000123F0
.text:00000000000123F0 loc_123F0:                              ; CODE XREF: free_dfa_content+3C↓j
.text:00000000000123F0                 mov     rdi, [r12]
.text:00000000000123F4
.text:00000000000123F4 loc_123F4:                              ; CODE XREF: free_dfa_content+1D↑j
.text:00000000000123F4                 mov     rax, rbx
.text:00000000000123F7                 add     rbx, 1
.text:00000000000123FB                 shl     rax, 4
.text:00000000000123FF                 add     rdi, rax
.text:0000000000012402                 call    free_token
.text:0000000000012407                 cmp     [r12+10h], rbx
.text:000000000001240C                 ja      short loc_123F0
.text:000000000001240E
.text:000000000001240E loc_1240E:                              ; CODE XREF: free_dfa_content+11↑j
.text:000000000001240E                                         ; free_dfa_content+19↑j
.text:000000000001240E                 mov     rdi, [r12+18h]  ; ptr
.text:0000000000012413                 call    free
.text:0000000000012418                 cmp     qword ptr [r12+10h], 0
.text:000000000001241E                 jz      short loc_12473
.text:0000000000012420                 xor     ebx, ebx
.text:0000000000012422                 xor     ebp, ebp
.text:0000000000012424                 nop     dword ptr [rax+00h]
.text:0000000000012428
.text:0000000000012428 loc_12428:                              ; CODE XREF: free_dfa_content+A1↓j
.text:0000000000012428                 mov     rax, [r12+30h]
.text:000000000001242D                 test    rax, rax
.text:0000000000012430                 jz      short loc_1243C
.text:0000000000012432                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000012437                 call    free
.text:000000000001243C
.text:000000000001243C loc_1243C:                              ; CODE XREF: free_dfa_content+60↑j
.text:000000000001243C                 mov     rax, [r12+38h]
.text:0000000000012441                 test    rax, rax
.text:0000000000012444                 jz      short loc_12450
.text:0000000000012446                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000001244B                 call    free
.text:0000000000012450
.text:0000000000012450 loc_12450:                              ; CODE XREF: free_dfa_content+74↑j
.text:0000000000012450                 mov     rax, [r12+28h]
.text:0000000000012455                 test    rax, rax
.text:0000000000012458                 jz      short loc_12464
.text:000000000001245A                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000001245F                 call    free
.text:0000000000012464
.text:0000000000012464 loc_12464:                              ; CODE XREF: free_dfa_content+88↑j
.text:0000000000012464                 add     rbp, 1
.text:0000000000012468                 add     rbx, 18h
.text:000000000001246C                 cmp     [r12+10h], rbp
.text:0000000000012471                 ja      short loc_12428
.text:0000000000012473
.text:0000000000012473 loc_12473:                              ; CODE XREF: free_dfa_content+4E↑j
.text:0000000000012473                 mov     rdi, [r12+28h]  ; ptr
.text:0000000000012478                 call    free
.text:000000000001247D                 mov     rdi, [r12+30h]  ; ptr
.text:0000000000012482                 call    free
.text:0000000000012487                 mov     rdi, [r12+38h]  ; ptr
.text:000000000001248C                 call    free
.text:0000000000012491                 mov     rdi, [r12]      ; ptr
.text:0000000000012495                 call    free
.text:000000000001249A                 mov     rdi, [r12+40h]
.text:000000000001249F                 test    rdi, rdi
.text:00000000000124A2                 jz      short loc_124F7
.text:00000000000124A4                 xor     r14d, r14d
.text:00000000000124A7                 xor     r13d, r13d
.text:00000000000124AA                 nop     word ptr [rax+rax+00h]
.text:00000000000124B0
.text:00000000000124B0 loc_124B0:                              ; CODE XREF: free_dfa_content+125↓j
.text:00000000000124B0                 lea     rbp, [rdi+r14]
.text:00000000000124B4                 cmp     qword ptr [rbp+0], 0
.text:00000000000124B9                 jle     short loc_124D7
.text:00000000000124BB                 xor     ebx, ebx
.text:00000000000124BD                 nop     dword ptr [rax]
.text:00000000000124C0
.text:00000000000124C0 loc_124C0:                              ; CODE XREF: free_dfa_content+105↓j
.text:00000000000124C0                 mov     rax, [rbp+10h]
.text:00000000000124C4                 mov     rdi, [rax+rbx*8] ; ptr
.text:00000000000124C8                 add     rbx, 1
.text:00000000000124CC                 call    free_state
.text:00000000000124D1                 cmp     [rbp+0], rbx
.text:00000000000124D5                 jg      short loc_124C0
.text:00000000000124D7
.text:00000000000124D7 loc_124D7:                              ; CODE XREF: free_dfa_content+E9↑j
.text:00000000000124D7                 mov     rdi, [rbp+10h]  ; ptr
.text:00000000000124DB                 add     r13, 1
.text:00000000000124DF                 add     r14, 18h
.text:00000000000124E3                 call    free
.text:00000000000124E8                 cmp     [r12+88h], r13
.text:00000000000124F0                 mov     rdi, [r12+40h]  ; ptr
.text:00000000000124F5                 jnb     short loc_124B0
.text:00000000000124F7
.text:00000000000124F7 loc_124F7:                              ; CODE XREF: free_dfa_content+D2↑j
.text:00000000000124F7                 call    free
.text:00000000000124FC                 mov     rdi, [r12+78h]  ; ptr
.text:0000000000012501                 lea     rax, utf8_sb_map
.text:0000000000012508                 cmp     rdi, rax
.text:000000000001250B                 jz      short loc_12512
.text:000000000001250D                 call    free
.text:0000000000012512
.text:0000000000012512 loc_12512:                              ; CODE XREF: free_dfa_content+13B↑j
.text:0000000000012512                 mov     rdi, [r12+0E0h] ; ptr
.text:000000000001251A                 call    free
.text:000000000001251F                 pop     rbx
.text:0000000000012520                 mov     rdi, r12        ; ptr
.text:0000000000012523                 pop     rbp
.text:0000000000012524                 pop     r12
.text:0000000000012526                 pop     r13
.text:0000000000012528                 pop     r14
.text:000000000001252A                 jmp     free
.text:000000000001252A ; } // starts at 123D0
.text:000000000001252A free_dfa_content endp
.text:000000000001252A
.text:000000000001252A ; ---------------------------------------------------------------------------
.text:000000000001252F                 align 10h
.text:0000000000012530
.text:0000000000012530 ; =============== S U B R O U T I N E =======================================
.text:0000000000012530
.text:0000000000012530
.text:0000000000012530 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:0000000000012530                                         ; re_search_internal+1494↓p
.text:0000000000012530 ; __unwind {
.text:0000000000012530                 push    r14
.text:0000000000012532                 push    r13
.text:0000000000012534                 mov     r14, rdi
.text:0000000000012537                 push    r12
.text:0000000000012539                 push    rbp
.text:000000000001253A                 push    rbx
.text:000000000001253B                 cmp     qword ptr [rdi+0E8h], 0
.text:0000000000012543                 jle     loc_125C9
.text:0000000000012549                 xor     r13d, r13d
.text:000000000001254C                 nop     dword ptr [rax+00h]
.text:0000000000012550
.text:0000000000012550 loc_12550:                              ; CODE XREF: match_ctx_clean+97↓j
.text:0000000000012550                 mov     rax, [r14+0F8h]
.text:0000000000012557                 mov     r12, [rax+r13*8]
.text:000000000001255B                 cmp     qword ptr [r12+20h], 0
.text:0000000000012561                 jle     short loc_1258D
.text:0000000000012563                 xor     ebx, ebx
.text:0000000000012565                 nop     dword ptr [rax]
.text:0000000000012568
.text:0000000000012568 loc_12568:                              ; CODE XREF: match_ctx_clean+5B↓j
.text:0000000000012568                 mov     rax, [r12+28h]
.text:000000000001256D                 mov     rbp, [rax+rbx*8]
.text:0000000000012571                 add     rbx, 1
.text:0000000000012575                 mov     rdi, [rbp+20h]  ; ptr
.text:0000000000012579                 call    free
.text:000000000001257E                 mov     rdi, rbp        ; ptr
.text:0000000000012581                 call    free
.text:0000000000012586                 cmp     [r12+20h], rbx
.text:000000000001258B                 jg      short loc_12568
.text:000000000001258D
.text:000000000001258D loc_1258D:                              ; CODE XREF: match_ctx_clean+31↑j
.text:000000000001258D                 mov     rdi, [r12+28h]  ; ptr
.text:0000000000012592                 call    free
.text:0000000000012597                 mov     rax, [r12+10h]
.text:000000000001259C                 test    rax, rax
.text:000000000001259F                 jz      short loc_125B4
.text:00000000000125A1                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000125A5                 call    free
.text:00000000000125AA                 mov     rdi, [r12+10h]  ; ptr
.text:00000000000125AF                 call    free
.text:00000000000125B4
.text:00000000000125B4 loc_125B4:                              ; CODE XREF: match_ctx_clean+6F↑j
.text:00000000000125B4                 mov     rdi, r12        ; ptr
.text:00000000000125B7                 add     r13, 1
.text:00000000000125BB                 call    free
.text:00000000000125C0                 cmp     [r14+0E8h], r13
.text:00000000000125C7                 jg      short loc_12550
.text:00000000000125C9
.text:00000000000125C9 loc_125C9:                              ; CODE XREF: match_ctx_clean+13↑j
.text:00000000000125C9                 pop     rbx
.text:00000000000125CA                 mov     qword ptr [r14+0E8h], 0
.text:00000000000125D5                 mov     qword ptr [r14+0C8h], 0
.text:00000000000125E0                 pop     rbp
.text:00000000000125E1                 pop     r12
.text:00000000000125E3                 pop     r13
.text:00000000000125E5                 pop     r14
.text:00000000000125E7                 retn
.text:00000000000125E7 ; } // starts at 12530
.text:00000000000125E7 match_ctx_clean endp
.text:00000000000125E7
.text:00000000000125E7 ; ---------------------------------------------------------------------------
.text:00000000000125E8                 align 10h
.text:00000000000125F0
.text:00000000000125F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000125F0
.text:00000000000125F0
.text:00000000000125F0 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:00000000000125F0                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:00000000000125F0 ; __unwind {
.text:00000000000125F0                 mov     rcx, [rdi+30h]
.text:00000000000125F4                 lea     rax, [rsi+1]
.text:00000000000125F8                 cmp     rax, rcx
.text:00000000000125FB                 jge     short loc_12638
.text:00000000000125FD                 mov     rdx, [rdi+10h]
.text:0000000000012601                 lea     rdi, ds:0[rax*4]
.text:0000000000012609                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000001260D                 jnz     short loc_12638
.text:000000000001260F                 sub     rcx, rsi
.text:0000000000012612                 lea     rsi, [rdx+rdi-4]
.text:0000000000012617                 mov     edx, 2
.text:000000000001261C                 jmp     short loc_1262B
.text:000000000001261C ; ---------------------------------------------------------------------------
.text:000000000001261E                 align 20h
.text:0000000000012620
.text:0000000000012620 loc_12620:                              ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:0000000000012620                 add     rdx, 1
.text:0000000000012624                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:0000000000012629                 jnz     short locret_1263D
.text:000000000001262B
.text:000000000001262B loc_1262B:                              ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:000000000001262B                 cmp     rdx, rcx
.text:000000000001262E                 mov     eax, edx
.text:0000000000012630                 jnz     short loc_12620
.text:0000000000012632                 rep retn
.text:0000000000012632 ; ---------------------------------------------------------------------------
.text:0000000000012634                 align 8
.text:0000000000012638
.text:0000000000012638 loc_12638:                              ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:0000000000012638                                         ; re_string_char_size_at_part_0+1D↑j
.text:0000000000012638                 mov     eax, 1
.text:000000000001263D
.text:000000000001263D locret_1263D:                           ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:000000000001263D                 rep retn
.text:000000000001263D ; } // starts at 125F0
.text:000000000001263D re_string_char_size_at_part_0 endp
.text:000000000001263D
.text:000000000001263D ; ---------------------------------------------------------------------------
.text:000000000001263F                 align 20h
.text:0000000000012640
.text:0000000000012640 ; =============== S U B R O U T I N E =======================================
.text:0000000000012640
.text:0000000000012640
.text:0000000000012640 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:0000000000012640                                         ; re_acquire_state+80↓p
.text:0000000000012640 ; __unwind {
.text:0000000000012640                 mov     rdx, [rdi+8]
.text:0000000000012644                 xor     eax, eax
.text:0000000000012646                 cmp     rdx, [rsi+8]
.text:000000000001264A                 jz      short loc_12650
.text:000000000001264C                 rep retn
.text:000000000001264C ; ---------------------------------------------------------------------------
.text:000000000001264E                 align 10h
.text:0000000000012650
.text:0000000000012650 loc_12650:                              ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:0000000000012650                 lea     rax, [rdx-1]
.text:0000000000012654                 lea     rdx, ds:0[rax*8]
.text:000000000001265C                 jmp     short loc_1267D
.text:000000000001265C ; ---------------------------------------------------------------------------
.text:000000000001265E                 align 20h
.text:0000000000012660
.text:0000000000012660 loc_12660:                              ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:0000000000012660                 mov     rcx, [rdi+10h]
.text:0000000000012664                 mov     r8, [rcx+rdx]
.text:0000000000012668                 mov     rcx, [rsi+10h]
.text:000000000001266C                 mov     rcx, [rcx+rdx]
.text:0000000000012670                 sub     rdx, 8
.text:0000000000012674                 cmp     r8, rcx
.text:0000000000012677                 jnz     short loc_12690
.text:0000000000012679                 sub     rax, 1
.text:000000000001267D
.text:000000000001267D loc_1267D:                              ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:000000000001267D                 test    rax, rax
.text:0000000000012680                 jns     short loc_12660
.text:0000000000012682                 mov     eax, 1
.text:0000000000012687                 retn
.text:0000000000012687 ; ---------------------------------------------------------------------------
.text:0000000000012688                 align 10h
.text:0000000000012690
.text:0000000000012690 loc_12690:                              ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:0000000000012690                 xor     eax, eax
.text:0000000000012692                 retn
.text:0000000000012692 ; } // starts at 12640
.text:0000000000012692 re_node_set_compare_part_2 endp
.text:0000000000012692
.text:0000000000012692 ; ---------------------------------------------------------------------------
.text:0000000000012693                 align 20h
.text:00000000000126A0
.text:00000000000126A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000126A0
.text:00000000000126A0
.text:00000000000126A0 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:00000000000126A0                                         ; expand_bkref_cache+173↓p ...
.text:00000000000126A0 ; __unwind {
.text:00000000000126A0                 xor     eax, eax
.text:00000000000126A2                 test    rdi, rdi
.text:00000000000126A5                 jle     short locret_126E5
.text:00000000000126A7                 mov     r8, [rsi]
.text:00000000000126AA                 sub     rdi, 1
.text:00000000000126AE                 xor     esi, esi
.text:00000000000126B0
.text:00000000000126B0 loc_126B0:                              ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:00000000000126B0                 cmp     rsi, rdi
.text:00000000000126B3                 jnb     short loc_126DD
.text:00000000000126B5                 lea     rcx, [rsi+rdi]
.text:00000000000126B9                 shr     rcx, 1
.text:00000000000126BC                 cmp     rdx, [r8+rcx*8]
.text:00000000000126C0                 jle     short loc_126D8
.text:00000000000126C2                 jmp     short loc_126F0
.text:00000000000126C2 ; ---------------------------------------------------------------------------
.text:00000000000126C4                 align 8
.text:00000000000126C8
.text:00000000000126C8 loc_126C8:                              ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:00000000000126C8                 lea     rax, [rsi+rcx]
.text:00000000000126CC                 shr     rax, 1
.text:00000000000126CF                 cmp     [r8+rax*8], rdx
.text:00000000000126D3                 jl      short loc_12700
.text:00000000000126D5                 mov     rcx, rax
.text:00000000000126D8
.text:00000000000126D8 loc_126D8:                              ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:00000000000126D8                 cmp     rsi, rcx
.text:00000000000126DB                 jb      short loc_126C8
.text:00000000000126DD
.text:00000000000126DD loc_126DD:                              ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:00000000000126DD                 xor     eax, eax
.text:00000000000126DF                 cmp     rdx, [r8+rsi*8]
.text:00000000000126E3                 jz      short loc_12710
.text:00000000000126E5
.text:00000000000126E5 locret_126E5:                           ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:00000000000126E5                 rep retn
.text:00000000000126E5 ; ---------------------------------------------------------------------------
.text:00000000000126E7                 align 10h
.text:00000000000126F0
.text:00000000000126F0 loc_126F0:                              ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:00000000000126F0                 mov     rax, rcx
.text:00000000000126F3                 mov     rcx, rdi
.text:00000000000126F6                 db      2Eh
.text:00000000000126F6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012700
.text:0000000000012700 loc_12700:                              ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:0000000000012700                 lea     rsi, [rax+1]
.text:0000000000012704                 mov     rdi, rcx
.text:0000000000012707                 jmp     short loc_126B0
.text:0000000000012707 ; ---------------------------------------------------------------------------
.text:0000000000012709                 align 10h
.text:0000000000012710
.text:0000000000012710 loc_12710:                              ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:0000000000012710                 lea     rax, [rsi+1]
.text:0000000000012714                 retn
.text:0000000000012714 ; } // starts at 126A0
.text:0000000000012714 re_node_set_contains_isra_3 endp
.text:0000000000012714
.text:0000000000012714 ; ---------------------------------------------------------------------------
.text:0000000000012715                 align 20h
.text:0000000000012720
.text:0000000000012720 ; =============== S U B R O U T I N E =======================================
.text:0000000000012720
.text:0000000000012720
.text:0000000000012720 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:0000000000012720                                         ; check_arrival_expand_ecl+D8↓p
.text:0000000000012720 ; __unwind {
.text:0000000000012720                 push    r15
.text:0000000000012722                 push    r14
.text:0000000000012724                 lea     r14, [rsi+10h]
.text:0000000000012728                 push    r13
.text:000000000001272A                 push    r12
.text:000000000001272C                 mov     r15, rcx
.text:000000000001272F                 push    rbp
.text:0000000000012730                 push    rbx
.text:0000000000012731                 mov     r12, rdi
.text:0000000000012734                 mov     rbp, rsi
.text:0000000000012737                 mov     rbx, rdx
.text:000000000001273A                 mov     r13d, r8d
.text:000000000001273D                 sub     rsp, 8
.text:0000000000012741
.text:0000000000012741 loc_12741:                              ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:0000000000012741                 mov     rdi, [rbp+8]
.text:0000000000012745                 mov     rdx, rbx
.text:0000000000012748                 mov     rsi, r14
.text:000000000001274B                 call    re_node_set_contains_isra_3
.text:0000000000012750                 test    rax, rax
.text:0000000000012753                 jnz     short loc_127C0
.text:0000000000012755                 mov     rax, rbx
.text:0000000000012758                 shl     rax, 4
.text:000000000001275C                 add     rax, [r12]
.text:0000000000012760                 movzx   edx, byte ptr [rax+8]
.text:0000000000012764                 cmp     edx, r13d
.text:0000000000012767                 jnz     short loc_1276E
.text:0000000000012769                 cmp     [rax], r15
.text:000000000001276C                 jz      short loc_127A8
.text:000000000001276E
.text:000000000001276E loc_1276E:                              ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:000000000001276E                 mov     rsi, rbx
.text:0000000000012771                 mov     rdi, rbp
.text:0000000000012774                 call    re_node_set_insert
.text:0000000000012779                 test    al, al
.text:000000000001277B                 jz      short loc_127D8
.text:000000000001277D                 lea     rbx, [rbx+rbx*2]
.text:0000000000012781                 mov     rdx, [r12+28h]
.text:0000000000012786                 shl     rbx, 3
.text:000000000001278A                 add     rdx, rbx
.text:000000000001278D                 mov     rax, [rdx+8]
.text:0000000000012791                 test    rax, rax
.text:0000000000012794                 jz      short loc_127C0
.text:0000000000012796                 cmp     rax, 2
.text:000000000001279A                 mov     rdx, [rdx+10h]
.text:000000000001279E                 jz      short loc_127F0
.text:00000000000127A0
.text:00000000000127A0 loc_127A0:                              ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:00000000000127A0                 mov     rbx, [rdx]
.text:00000000000127A3                 jmp     short loc_12741
.text:00000000000127A3 ; ---------------------------------------------------------------------------
.text:00000000000127A5                 align 8
.text:00000000000127A8
.text:00000000000127A8 loc_127A8:                              ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:00000000000127A8                 cmp     r13d, 9
.text:00000000000127AC                 jnz     short loc_127C0
.text:00000000000127AE                 mov     rsi, rbx
.text:00000000000127B1                 mov     rdi, rbp
.text:00000000000127B4                 call    re_node_set_insert
.text:00000000000127B9                 test    al, al
.text:00000000000127BB                 jz      short loc_127D8
.text:00000000000127BD                 nop     dword ptr [rax]
.text:00000000000127C0
.text:00000000000127C0 loc_127C0:                              ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:00000000000127C0                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:00000000000127C0                 xor     eax, eax
.text:00000000000127C2
.text:00000000000127C2 loc_127C2:                              ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:00000000000127C2                 add     rsp, 8
.text:00000000000127C6                 pop     rbx
.text:00000000000127C7                 pop     rbp
.text:00000000000127C8                 pop     r12
.text:00000000000127CA                 pop     r13
.text:00000000000127CC                 pop     r14
.text:00000000000127CE                 pop     r15
.text:00000000000127D0                 retn
.text:00000000000127D0 ; ---------------------------------------------------------------------------
.text:00000000000127D1                 align 8
.text:00000000000127D8
.text:00000000000127D8 loc_127D8:                              ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:00000000000127D8                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:00000000000127D8                 add     rsp, 8
.text:00000000000127DC                 mov     eax, 0Ch
.text:00000000000127E1                 pop     rbx
.text:00000000000127E2                 pop     rbp
.text:00000000000127E3                 pop     r12
.text:00000000000127E5                 pop     r13
.text:00000000000127E7                 pop     r14
.text:00000000000127E9                 pop     r15
.text:00000000000127EB                 retn
.text:00000000000127EB ; ---------------------------------------------------------------------------
.text:00000000000127EC                 align 10h
.text:00000000000127F0
.text:00000000000127F0 loc_127F0:                              ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:00000000000127F0                 mov     rdx, [rdx+8]
.text:00000000000127F4                 mov     r8d, r13d
.text:00000000000127F7                 mov     rcx, r15
.text:00000000000127FA                 mov     rsi, rbp
.text:00000000000127FD                 mov     rdi, r12
.text:0000000000012800                 call    check_arrival_expand_ecl_sub
.text:0000000000012805                 test    eax, eax
.text:0000000000012807                 jnz     short loc_127C2
.text:0000000000012809                 mov     rax, [r12+28h]
.text:000000000001280E                 mov     rdx, [rax+rbx+10h]
.text:0000000000012813                 jmp     short loc_127A0
.text:0000000000012813 ; } // starts at 12720
.text:0000000000012813 check_arrival_expand_ecl_sub endp
.text:0000000000012813
.text:0000000000012813 ; ---------------------------------------------------------------------------
.text:0000000000012815                 align 20h
.text:0000000000012820
.text:0000000000012820 ; =============== S U B R O U T I N E =======================================
.text:0000000000012820
.text:0000000000012820
.text:0000000000012820 re_node_set_remove_at_isra_4_part_5 proc near
.text:0000000000012820                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:0000000000012820                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:0000000000012820 ; __unwind {
.text:0000000000012820                 mov     rax, [rdi]
.text:0000000000012823                 cmp     rax, rdx
.text:0000000000012826                 jle     short locret_12852
.text:0000000000012828                 sub     rax, 1
.text:000000000001282C                 cmp     rdx, rax
.text:000000000001282F                 mov     [rdi], rax
.text:0000000000012832                 jge     short locret_12852
.text:0000000000012834                 mov     rax, [rsi]
.text:0000000000012837                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012840
.text:0000000000012840 loc_12840:                              ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:0000000000012840                 mov     rcx, [rax+rdx*8+8]
.text:0000000000012845                 mov     [rax+rdx*8], rcx
.text:0000000000012849                 add     rdx, 1
.text:000000000001284D                 cmp     rdx, [rdi]
.text:0000000000012850                 jl      short loc_12840
.text:0000000000012852
.text:0000000000012852 locret_12852:                           ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:0000000000012852                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:0000000000012852                 rep retn
.text:0000000000012852 ; } // starts at 12820
.text:0000000000012852 re_node_set_remove_at_isra_4_part_5 endp
.text:0000000000012852
.text:0000000000012852 ; ---------------------------------------------------------------------------
.text:0000000000012854                 align 20h
.text:0000000000012860
.text:0000000000012860 ; =============== S U B R O U T I N E =======================================
.text:0000000000012860
.text:0000000000012860
.text:0000000000012860 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:0000000000012860 ; __unwind {
.text:0000000000012860                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000012864                 cmp     al, 4
.text:0000000000012866                 jz      short loc_128C0
.text:0000000000012868                 cmp     al, 11h
.text:000000000001286A                 jz      short loc_12870
.text:000000000001286C
.text:000000000001286C loc_1286C:                              ; CODE XREF: optimize_subexps+17↓j
.text:000000000001286C                                         ; optimize_subexps+1D↓j ...
.text:000000000001286C                 xor     eax, eax
.text:000000000001286E                 retn
.text:000000000001286E ; ---------------------------------------------------------------------------
.text:000000000001286F                 align 10h
.text:0000000000012870
.text:0000000000012870 loc_12870:                              ; CODE XREF: optimize_subexps+A↑j
.text:0000000000012870                 mov     rax, [rsi+8]
.text:0000000000012874                 test    rax, rax
.text:0000000000012877                 jz      short loc_1286C
.text:0000000000012879                 cmp     byte ptr [rax+30h], 11h
.text:000000000001287D                 jnz     short loc_1286C
.text:000000000001287F                 mov     rcx, [rax+28h]
.text:0000000000012883                 mov     rax, [rax+8]
.text:0000000000012887                 test    rax, rax
.text:000000000001288A                 mov     [rsi+8], rax
.text:000000000001288E                 jz      short loc_12893
.text:0000000000012890                 mov     [rax], rsi
.text:0000000000012893
.text:0000000000012893 loc_12893:                              ; CODE XREF: optimize_subexps+2E↑j
.text:0000000000012893                 mov     rax, [rdi+0E0h]
.text:000000000001289A                 mov     rdx, [rsi+28h]
.text:000000000001289E                 cmp     rcx, 3Fh ; '?'
.text:00000000000128A2                 mov     rdx, [rax+rdx*8]
.text:00000000000128A6                 mov     [rax+rcx*8], rdx
.text:00000000000128AA                 jg      short loc_1286C
.text:00000000000128AC                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000128B3                 rol     rax, cl
.text:00000000000128B6                 and     [rdi+0A0h], rax
.text:00000000000128BD                 jmp     short loc_1286C
.text:00000000000128BD ; ---------------------------------------------------------------------------
.text:00000000000128BF                 align 20h
.text:00000000000128C0
.text:00000000000128C0 loc_128C0:                              ; CODE XREF: optimize_subexps+6↑j
.text:00000000000128C0                 mov     rax, [rdi+0E0h]
.text:00000000000128C7                 test    rax, rax
.text:00000000000128CA                 jz      short loc_1286C
.text:00000000000128CC                 movsxd  rdx, dword ptr [rsi+28h]
.text:00000000000128D0                 mov     rcx, [rax+rdx*8]
.text:00000000000128D4                 mov     eax, 1
.text:00000000000128D9                 shl     eax, cl
.text:00000000000128DB                 mov     [rsi+28h], rcx
.text:00000000000128DF                 cdqe
.text:00000000000128E1                 or      [rdi+0A0h], rax
.text:00000000000128E8                 xor     eax, eax
.text:00000000000128EA                 retn
.text:00000000000128EA ; } // starts at 12860
.text:00000000000128EA optimize_subexps endp
.text:00000000000128EA
.text:00000000000128EA ; ---------------------------------------------------------------------------
.text:00000000000128EB                 align 10h
.text:00000000000128F0
.text:00000000000128F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000128F0
.text:00000000000128F0
.text:00000000000128F0 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:00000000000128F0 ; __unwind {
.text:00000000000128F0                 movzx   eax, byte ptr [rsi+30h]
.text:00000000000128F4                 mov     rdx, [rsi+8]
.text:00000000000128F8                 cmp     al, 0Bh
.text:00000000000128FA                 jz      short loc_12940
.text:00000000000128FC                 cmp     al, 10h
.text:00000000000128FE                 jz      short loc_12928
.text:0000000000012900                 test    rdx, rdx
.text:0000000000012903                 jz      short loc_1290D
.text:0000000000012905                 mov     rax, [rsi+20h]
.text:0000000000012909                 mov     [rdx+20h], rax
.text:000000000001290D
.text:000000000001290D loc_1290D:                              ; CODE XREF: calc_next+13↑j
.text:000000000001290D                 mov     rax, [rsi+10h]
.text:0000000000012911                 test    rax, rax
.text:0000000000012914                 jz      short loc_1291E
.text:0000000000012916                 mov     rdx, [rsi+20h]
.text:000000000001291A                 mov     [rax+20h], rdx
.text:000000000001291E
.text:000000000001291E loc_1291E:                              ; CODE XREF: calc_next+24↑j
.text:000000000001291E                 xor     eax, eax
.text:0000000000012920                 retn
.text:0000000000012920 ; ---------------------------------------------------------------------------
.text:0000000000012921                 align 8
.text:0000000000012928
.text:0000000000012928 loc_12928:                              ; CODE XREF: calc_next+E↑j
.text:0000000000012928                 mov     rax, [rsi+10h]
.text:000000000001292C                 mov     rcx, [rax+18h]
.text:0000000000012930                 mov     [rdx+20h], rcx
.text:0000000000012934                 mov     rdx, [rsi+20h]
.text:0000000000012938                 mov     [rax+20h], rdx
.text:000000000001293C                 xor     eax, eax
.text:000000000001293E                 retn
.text:000000000001293E ; ---------------------------------------------------------------------------
.text:000000000001293F                 align 20h
.text:0000000000012940
.text:0000000000012940 loc_12940:                              ; CODE XREF: calc_next+A↑j
.text:0000000000012940                 mov     [rdx+20h], rsi
.text:0000000000012944                 xor     eax, eax
.text:0000000000012946                 retn
.text:0000000000012946 ; } // starts at 128F0
.text:0000000000012946 calc_next       endp
.text:0000000000012946
.text:0000000000012946 ; ---------------------------------------------------------------------------
.text:0000000000012947                 align 10h
.text:0000000000012950
.text:0000000000012950 ; =============== S U B R O U T I N E =======================================
.text:0000000000012950
.text:0000000000012950
.text:0000000000012950 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:0000000000012950                                         ; update_cur_sifted_state+6A3↓p
.text:0000000000012950
.text:0000000000012950 var_70          = qword ptr -70h
.text:0000000000012950 var_68          = qword ptr -68h
.text:0000000000012950 var_60          = qword ptr -60h
.text:0000000000012950 var_58          = qword ptr -58h
.text:0000000000012950 var_50          = qword ptr -50h
.text:0000000000012950 var_48          = qword ptr -48h
.text:0000000000012950 var_40          = qword ptr -40h
.text:0000000000012950 arg_0           = qword ptr  8
.text:0000000000012950
.text:0000000000012950 ; __unwind {
.text:0000000000012950                 push    r15
.text:0000000000012952                 push    r14
.text:0000000000012954                 push    r13
.text:0000000000012956                 push    r12
.text:0000000000012958                 push    rbp
.text:0000000000012959                 push    rbx
.text:000000000001295A                 xor     ebx, ebx
.text:000000000001295C                 sub     rsp, 48h
.text:0000000000012960                 mov     rax, [rdi+98h]
.text:0000000000012967                 mov     r15, [rdi+0C8h]
.text:000000000001296E                 mov     r12, [rsp+78h+arg_0]
.text:0000000000012976                 mov     [rsp+78h+var_70], rax
.text:000000000001297B                 mov     rbp, r15
.text:000000000001297E
.text:000000000001297E loc_1297E:                              ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:000000000001297E                 cmp     rbx, rbp
.text:0000000000012981                 jge     short loc_129DB
.text:0000000000012983                 lea     rax, [rbx+rbp]
.text:0000000000012987                 mov     r13, [rdi+0D8h]
.text:000000000001298E                 mov     r10, rax
.text:0000000000012991                 shr     r10, 3Fh
.text:0000000000012995                 add     r10, rax
.text:0000000000012998                 sar     r10, 1
.text:000000000001299B                 lea     rax, [r10+r10*4]
.text:000000000001299F                 cmp     r8, [r13+rax*8+8]
.text:00000000000129A4                 jle     short loc_129D6
.text:00000000000129A6                 jmp     loc_12B40
.text:00000000000129A6 ; ---------------------------------------------------------------------------
.text:00000000000129AB                 align 10h
.text:00000000000129B0
.text:00000000000129B0 loc_129B0:                              ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:00000000000129B0                 lea     r11, [rbx+r10]
.text:00000000000129B4                 mov     rax, r11
.text:00000000000129B7                 shr     rax, 3Fh
.text:00000000000129BB                 add     rax, r11
.text:00000000000129BE                 sar     rax, 1
.text:00000000000129C1                 lea     r11, [rax+rax*4]
.text:00000000000129C5                 mov     r14, rax
.text:00000000000129C8                 cmp     [r13+r11*8+8], r8
.text:00000000000129CD                 jl      loc_12B50
.text:00000000000129D3                 mov     r10, rax
.text:00000000000129D6
.text:00000000000129D6 loc_129D6:                              ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:00000000000129D6                 cmp     rbx, r10
.text:00000000000129D9                 jl      short loc_129B0
.text:00000000000129DB
.text:00000000000129DB loc_129DB:                              ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:00000000000129DB                 cmp     r15, rbx
.text:00000000000129DE                 jle     loc_12B80
.text:00000000000129E4                 mov     r11, [rdi+0D8h]
.text:00000000000129EB                 lea     rax, [rbx+rbx*4]
.text:00000000000129EF                 lea     rax, [r11+rax*8]
.text:00000000000129F3                 cmp     r8, [rax+8]
.text:00000000000129F7                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000129FE                 cmovnz  rbx, rax
.text:0000000000012A02
.text:0000000000012A02 loc_12A02:                              ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:0000000000012A02                 mov     rax, r15
.text:0000000000012A05                 xor     ebp, ebp
.text:0000000000012A07
.text:0000000000012A07 loc_12A07:                              ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:0000000000012A07                 cmp     rbp, rax
.text:0000000000012A0A                 jge     short loc_12A64
.text:0000000000012A0C                 lea     r11, [rbp+rax+0]
.text:0000000000012A11                 mov     r10, r11
.text:0000000000012A14                 shr     r10, 3Fh
.text:0000000000012A18                 add     r10, r11
.text:0000000000012A1B                 mov     r11, [rdi+0D8h]
.text:0000000000012A22                 sar     r10, 1
.text:0000000000012A25                 lea     r13, [r10+r10*4]
.text:0000000000012A29                 cmp     r12, [r11+r13*8+8]
.text:0000000000012A2E                 jle     short loc_12A5F
.text:0000000000012A30                 jmp     loc_12B60
.text:0000000000012A30 ; ---------------------------------------------------------------------------
.text:0000000000012A35                 align 8
.text:0000000000012A38
.text:0000000000012A38 loc_12A38:                              ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:0000000000012A38                 lea     r13, [rbp+r10+0]
.text:0000000000012A3D                 mov     rax, r13
.text:0000000000012A40                 shr     rax, 3Fh
.text:0000000000012A44                 add     rax, r13
.text:0000000000012A47                 sar     rax, 1
.text:0000000000012A4A                 lea     r13, [rax+rax*4]
.text:0000000000012A4E                 mov     r14, rax
.text:0000000000012A51                 cmp     [r11+r13*8+8], r12
.text:0000000000012A56                 jl      loc_12B70
.text:0000000000012A5C                 mov     r10, rax
.text:0000000000012A5F
.text:0000000000012A5F loc_12A5F:                              ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:0000000000012A5F                 cmp     rbp, r10
.text:0000000000012A62                 jl      short loc_12A38
.text:0000000000012A64
.text:0000000000012A64 loc_12A64:                              ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:0000000000012A64                 cmp     r15, rbp
.text:0000000000012A67                 jle     loc_12B90
.text:0000000000012A6D                 mov     r10, [rdi+0D8h]
.text:0000000000012A74                 lea     rax, [rbp+rbp*4+0]
.text:0000000000012A79                 lea     rax, [r10+rax*8]
.text:0000000000012A7D                 cmp     r12, [rax+8]
.text:0000000000012A81                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012A88                 cmovnz  rbp, rax
.text:0000000000012A8C
.text:0000000000012A8C loc_12A8C:                              ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:0000000000012A8C                 cmp     qword ptr [rsi], 0
.text:0000000000012A90                 jle     loc_12BB2
.text:0000000000012A96                 mov     [rsp+78h+var_48], rbp
.text:0000000000012A9B                 mov     [rsp+78h+var_58], r9
.text:0000000000012AA0                 mov     r13, rdi
.text:0000000000012AA3                 mov     [rsp+78h+var_60], r8
.text:0000000000012AA8                 mov     [rsp+78h+var_68], rcx
.text:0000000000012AAD                 xor     r14d, r14d
.text:0000000000012AB0                 mov     [rsp+78h+var_40], rsi
.text:0000000000012AB5                 mov     [rsp+78h+var_50], rbx
.text:0000000000012ABA                 mov     rbp, rdx
.text:0000000000012ABD                 mov     r15, r12
.text:0000000000012AC0
.text:0000000000012AC0 loc_12AC0:                              ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:0000000000012AC0                 mov     rax, [rbp+0]
.text:0000000000012AC4                 mov     rdx, [r13+0D8h]
.text:0000000000012ACB                 mov     rdi, r13
.text:0000000000012ACE                 mov     r9, [rsp+78h+var_50]
.text:0000000000012AD3                 mov     r8, [rsp+78h+var_60]
.text:0000000000012AD8                 mov     rcx, [rsp+78h+var_68]
.text:0000000000012ADD                 mov     rsi, [rax+r14*8]
.text:0000000000012AE1                 lea     rax, [rsi+rsi*4]
.text:0000000000012AE5                 lea     rax, [rdx+rax*8]
.text:0000000000012AE9                 mov     rdx, [rsp+78h+var_70]
.text:0000000000012AEE                 mov     rax, [rax]
.text:0000000000012AF1                 shl     rax, 4
.text:0000000000012AF5                 add     rax, [rdx]
.text:0000000000012AF8                 mov     r12, [rax]
.text:0000000000012AFB                 mov     rdx, r12
.text:0000000000012AFE                 call    check_dst_limits_calc_pos
.text:0000000000012B03                 mov     ebx, eax
.text:0000000000012B05                 mov     rax, [rbp+0]
.text:0000000000012B09                 mov     r9, [rsp+78h+var_48]
.text:0000000000012B0E                 mov     rcx, [rsp+78h+var_58]
.text:0000000000012B13                 mov     r8, r15
.text:0000000000012B16                 mov     rdx, r12
.text:0000000000012B19                 mov     rdi, r13
.text:0000000000012B1C                 mov     rsi, [rax+r14*8]
.text:0000000000012B20                 call    check_dst_limits_calc_pos
.text:0000000000012B25                 cmp     ebx, eax
.text:0000000000012B27                 jz      short loc_12BA0
.text:0000000000012B29                 mov     eax, 1
.text:0000000000012B2E
.text:0000000000012B2E loc_12B2E:                              ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:0000000000012B2E                 add     rsp, 48h
.text:0000000000012B32                 pop     rbx
.text:0000000000012B33                 pop     rbp
.text:0000000000012B34                 pop     r12
.text:0000000000012B36                 pop     r13
.text:0000000000012B38                 pop     r14
.text:0000000000012B3A                 pop     r15
.text:0000000000012B3C                 retn
.text:0000000000012B3C ; ---------------------------------------------------------------------------
.text:0000000000012B3D                 align 20h
.text:0000000000012B40
.text:0000000000012B40 loc_12B40:                              ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:0000000000012B40                 mov     r14, r10
.text:0000000000012B43                 mov     r10, rbp
.text:0000000000012B46                 db      2Eh
.text:0000000000012B46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012B50
.text:0000000000012B50 loc_12B50:                              ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:0000000000012B50                 lea     rbx, [r14+1]
.text:0000000000012B54                 mov     rbp, r10
.text:0000000000012B57                 jmp     loc_1297E
.text:0000000000012B57 ; ---------------------------------------------------------------------------
.text:0000000000012B5C                 align 20h
.text:0000000000012B60
.text:0000000000012B60 loc_12B60:                              ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:0000000000012B60                 mov     r14, r10
.text:0000000000012B63                 mov     r10, rax
.text:0000000000012B66                 db      2Eh
.text:0000000000012B66                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012B70
.text:0000000000012B70 loc_12B70:                              ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:0000000000012B70                 lea     rbp, [r14+1]
.text:0000000000012B74                 mov     rax, r10
.text:0000000000012B77                 jmp     loc_12A07
.text:0000000000012B77 ; ---------------------------------------------------------------------------
.text:0000000000012B7C                 align 20h
.text:0000000000012B80
.text:0000000000012B80 loc_12B80:                              ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:0000000000012B80                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012B87                 jmp     loc_12A02
.text:0000000000012B87 ; ---------------------------------------------------------------------------
.text:0000000000012B8C                 align 10h
.text:0000000000012B90
.text:0000000000012B90 loc_12B90:                              ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:0000000000012B90                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000012B97                 jmp     loc_12A8C
.text:0000000000012B97 ; ---------------------------------------------------------------------------
.text:0000000000012B9C                 align 20h
.text:0000000000012BA0
.text:0000000000012BA0 loc_12BA0:                              ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:0000000000012BA0                 mov     rax, [rsp+78h+var_40]
.text:0000000000012BA5                 add     r14, 1
.text:0000000000012BA9                 cmp     r14, [rax]
.text:0000000000012BAC                 jl      loc_12AC0
.text:0000000000012BB2
.text:0000000000012BB2 loc_12BB2:                              ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:0000000000012BB2                 xor     eax, eax
.text:0000000000012BB4                 jmp     loc_12B2E
.text:0000000000012BB4 ; } // starts at 12950
.text:0000000000012BB4 check_dst_limits_isra_13 endp
.text:0000000000012BB4
.text:0000000000012BB4 ; ---------------------------------------------------------------------------
.text:0000000000012BB9                 align 20h
.text:0000000000012BC0
.text:0000000000012BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012BC0
.text:0000000000012BC0
.text:0000000000012BC0 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:0000000000012BC0                                         ; check_arrival_expand_ecl+113↓p ...
.text:0000000000012BC0 ; __unwind {
.text:0000000000012BC0                 test    rsi, rsi
.text:0000000000012BC3                 jz      loc_12CB8
.text:0000000000012BC9                 mov     rdx, [rsi+8]
.text:0000000000012BCD                 test    rdx, rdx
.text:0000000000012BD0                 jz      loc_12CB8
.text:0000000000012BD6                 push    r12
.text:0000000000012BD8                 push    rbp
.text:0000000000012BD9                 mov     r12, rsi
.text:0000000000012BDC                 push    rbx
.text:0000000000012BDD                 mov     rax, [rdi+8]
.text:0000000000012BE1                 mov     rbx, rdi
.text:0000000000012BE4                 mov     rsi, [rdi]
.text:0000000000012BE7                 lea     rcx, [rax+rdx*2]
.text:0000000000012BEB                 cmp     rsi, rcx
.text:0000000000012BEE                 jl      loc_12D38
.text:0000000000012BF4
.text:0000000000012BF4 loc_12BF4:                              ; CODE XREF: re_node_set_merge+1A4↓j
.text:0000000000012BF4                 test    rax, rax
.text:0000000000012BF7                 jz      loc_12D70
.text:0000000000012BFD                 lea     rbp, [rax+rdx*2]
.text:0000000000012C01                 sub     rdx, 1
.text:0000000000012C05                 sub     rax, 1
.text:0000000000012C09                 mov     rdi, rdx
.text:0000000000012C0C                 not     rdi
.text:0000000000012C0F
.text:0000000000012C0F loc_12C0F:                              ; CODE XREF: re_node_set_merge+10E↓j
.text:0000000000012C0F                                         ; re_node_set_merge+11C↓j
.text:0000000000012C0F                 test    rdi, rdi
.text:0000000000012C12                 jns     short loc_12C50
.text:0000000000012C14
.text:0000000000012C14 loc_12C14:                              ; CODE XREF: re_node_set_merge+8B↓j
.text:0000000000012C14                 test    rax, rax
.text:0000000000012C17                 js      short loc_12C50
.text:0000000000012C19                 mov     rcx, [rbx+10h]
.text:0000000000012C1D                 mov     rsi, [r12+10h]
.text:0000000000012C22                 mov     rsi, [rsi+rdx*8]
.text:0000000000012C26                 cmp     [rcx+rax*8], rsi
.text:0000000000012C2A                 jz      loc_12CC0
.text:0000000000012C30                 jge     loc_12CD8
.text:0000000000012C36                 sub     rdx, 1
.text:0000000000012C3A                 sub     rbp, 1
.text:0000000000012C3E                 mov     rdi, rdx
.text:0000000000012C41                 mov     [rcx+rbp*8], rsi
.text:0000000000012C45                 not     rdi
.text:0000000000012C48                 test    rdi, rdi
.text:0000000000012C4B                 js      short loc_12C14
.text:0000000000012C4D                 nop     dword ptr [rax]
.text:0000000000012C50
.text:0000000000012C50 loc_12C50:                              ; CODE XREF: re_node_set_merge+52↑j
.text:0000000000012C50                                         ; re_node_set_merge+57↑j
.text:0000000000012C50                 test    rdx, rdx
.text:0000000000012C53                 jns     loc_12CE8
.text:0000000000012C59
.text:0000000000012C59 loc_12C59:                              ; CODE XREF: re_node_set_merge+145↓j
.text:0000000000012C59                 mov     rcx, [rbx+8]
.text:0000000000012C5D                 mov     rax, [r12+8]
.text:0000000000012C62                 lea     r8, [rcx+rax*2-1]
.text:0000000000012C67                 mov     rdx, r8
.text:0000000000012C6A                 sub     rdx, rbp
.text:0000000000012C6D                 add     rdx, 1
.text:0000000000012C71                 jz      short loc_12CAA
.text:0000000000012C73                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000012C77                 lea     rax, [rcx-1]
.text:0000000000012C7B                 add     rcx, rdx
.text:0000000000012C7E                 mov     [rbx+8], rcx
.text:0000000000012C82                 nop     word ptr [rax+rax+00h]
.text:0000000000012C88
.text:0000000000012C88 loc_12C88:                              ; CODE XREF: re_node_set_merge+E8↓j
.text:0000000000012C88                                         ; re_node_set_merge+157↓j
.text:0000000000012C88                 mov     rsi, [rdi+r8*8]
.text:0000000000012C8C                 mov     rcx, [rdi+rax*8]
.text:0000000000012C90                 lea     r9, [rax+rdx]
.text:0000000000012C94                 lea     r9, [rdi+r9*8]
.text:0000000000012C98                 cmp     rsi, rcx
.text:0000000000012C9B                 jle     short loc_12D10
.text:0000000000012C9D                 sub     r8, 1
.text:0000000000012CA1                 sub     rdx, 1
.text:0000000000012CA5                 mov     [r9], rsi
.text:0000000000012CA8                 jnz     short loc_12C88
.text:0000000000012CAA
.text:0000000000012CAA loc_12CAA:                              ; CODE XREF: re_node_set_merge+B1↑j
.text:0000000000012CAA                                         ; re_node_set_merge+1CF↓j
.text:0000000000012CAA                 xor     eax, eax
.text:0000000000012CAC
.text:0000000000012CAC loc_12CAC:                              ; CODE XREF: re_node_set_merge+16C↓j
.text:0000000000012CAC                                         ; re_node_set_merge+1D9↓j
.text:0000000000012CAC                 pop     rbx
.text:0000000000012CAD                 pop     rbp
.text:0000000000012CAE                 pop     r12
.text:0000000000012CB0                 retn
.text:0000000000012CB0 ; ---------------------------------------------------------------------------
.text:0000000000012CB1                 align 8
.text:0000000000012CB8
.text:0000000000012CB8 loc_12CB8:                              ; CODE XREF: re_node_set_merge+3↑j
.text:0000000000012CB8                                         ; re_node_set_merge+10↑j
.text:0000000000012CB8                 xor     eax, eax
.text:0000000000012CBA                 retn
.text:0000000000012CBA ; ---------------------------------------------------------------------------
.text:0000000000012CBB                 align 20h
.text:0000000000012CC0
.text:0000000000012CC0 loc_12CC0:                              ; CODE XREF: re_node_set_merge+6A↑j
.text:0000000000012CC0                 sub     rdx, 1
.text:0000000000012CC4                 sub     rax, 1
.text:0000000000012CC8                 mov     rdi, rdx
.text:0000000000012CCB                 not     rdi
.text:0000000000012CCE                 jmp     loc_12C0F
.text:0000000000012CCE ; ---------------------------------------------------------------------------
.text:0000000000012CD3                 align 8
.text:0000000000012CD8
.text:0000000000012CD8 loc_12CD8:                              ; CODE XREF: re_node_set_merge+70↑j
.text:0000000000012CD8                 sub     rax, 1
.text:0000000000012CDC                 jmp     loc_12C0F
.text:0000000000012CDC ; ---------------------------------------------------------------------------
.text:0000000000012CE1                 align 8
.text:0000000000012CE8
.text:0000000000012CE8 loc_12CE8:                              ; CODE XREF: re_node_set_merge+93↑j
.text:0000000000012CE8                 mov     rax, [rbx+10h]
.text:0000000000012CEC                 add     rdx, 1
.text:0000000000012CF0                 mov     rsi, [r12+10h]  ; src
.text:0000000000012CF5                 sub     rbp, rdx
.text:0000000000012CF8                 shl     rdx, 3          ; n
.text:0000000000012CFC                 lea     rdi, [rax+rbp*8] ; dest
.text:0000000000012D00                 call    _memcpy
.text:0000000000012D05                 jmp     loc_12C59
.text:0000000000012D05 ; ---------------------------------------------------------------------------
.text:0000000000012D0A                 align 10h
.text:0000000000012D10
.text:0000000000012D10 loc_12D10:                              ; CODE XREF: re_node_set_merge+DB↑j
.text:0000000000012D10                 sub     rax, 1
.text:0000000000012D14                 mov     [r9], rcx
.text:0000000000012D17                 jns     loc_12C88
.text:0000000000012D1D                 lea     rsi, [rdi+rbp*8] ; src
.text:0000000000012D21                 shl     rdx, 3          ; n
.text:0000000000012D25                 call    _memcpy
.text:0000000000012D2A                 xor     eax, eax
.text:0000000000012D2C                 jmp     loc_12CAC
.text:0000000000012D2C ; ---------------------------------------------------------------------------
.text:0000000000012D31                 align 8
.text:0000000000012D38
.text:0000000000012D38 loc_12D38:                              ; CODE XREF: re_node_set_merge+2E↑j
.text:0000000000012D38                 add     rdx, rsi
.text:0000000000012D3B                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000012D3F                 lea     rbp, [rdx+rdx]
.text:0000000000012D43                 shl     rdx, 4
.text:0000000000012D47                 mov     rsi, rdx        ; size
.text:0000000000012D4A                 call    _realloc
.text:0000000000012D4F                 test    rax, rax
.text:0000000000012D52                 jz      short loc_12D94
.text:0000000000012D54                 mov     [rbx+10h], rax
.text:0000000000012D58                 mov     [rbx], rbp
.text:0000000000012D5B                 mov     rax, [rbx+8]
.text:0000000000012D5F                 mov     rdx, [r12+8]
.text:0000000000012D64                 jmp     loc_12BF4
.text:0000000000012D64 ; ---------------------------------------------------------------------------
.text:0000000000012D69                 align 10h
.text:0000000000012D70
.text:0000000000012D70 loc_12D70:                              ; CODE XREF: re_node_set_merge+37↑j
.text:0000000000012D70                 mov     [rbx+8], rdx
.text:0000000000012D74                 mov     rax, [r12+8]
.text:0000000000012D79                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000012D7D                 mov     rsi, [r12+10h]  ; src
.text:0000000000012D82                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000012D8A                 call    _memcpy
.text:0000000000012D8F                 jmp     loc_12CAA
.text:0000000000012D94 ; ---------------------------------------------------------------------------
.text:0000000000012D94
.text:0000000000012D94 loc_12D94:                              ; CODE XREF: re_node_set_merge+192↑j
.text:0000000000012D94                 mov     eax, 0Ch
.text:0000000000012D99                 jmp     loc_12CAC
.text:0000000000012D99 ; } // starts at 12BC0
.text:0000000000012D99 re_node_set_merge endp
.text:0000000000012D99
.text:0000000000012D99 ; ---------------------------------------------------------------------------
.text:0000000000012D9E                 align 20h
.text:0000000000012DA0
.text:0000000000012DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012DA0
.text:0000000000012DA0
.text:0000000000012DA0 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:0000000000012DA0                                         ; re_compile_internal+A2A↓p
.text:0000000000012DA0
.text:0000000000012DA0 var_90          = qword ptr -90h
.text:0000000000012DA0 var_88          = qword ptr -88h
.text:0000000000012DA0 var_7D          = byte ptr -7Dh
.text:0000000000012DA0 var_7C          = dword ptr -7Ch
.text:0000000000012DA0 var_78          = xmmword ptr -78h
.text:0000000000012DA0 var_68          = qword ptr -68h
.text:0000000000012DA0 var_58          = xmmword ptr -58h
.text:0000000000012DA0 ptr             = qword ptr -48h
.text:0000000000012DA0 var_40          = qword ptr -40h
.text:0000000000012DA0
.text:0000000000012DA0 ; __unwind {
.text:0000000000012DA0                 push    r15
.text:0000000000012DA2                 push    r14
.text:0000000000012DA4                 mov     r15, rsi
.text:0000000000012DA7                 push    r13
.text:0000000000012DA9                 push    r12
.text:0000000000012DAB                 push    rbp
.text:0000000000012DAC                 push    rbx
.text:0000000000012DAD                 lea     rbx, [rdx+rdx*2]
.text:0000000000012DB1                 mov     rbp, rdx
.text:0000000000012DB4                 sub     rsp, 68h
.text:0000000000012DB8                 mov     r12, [rsi+28h]
.text:0000000000012DBC                 shl     rbx, 3
.text:0000000000012DC0                 mov     rax, fs:28h
.text:0000000000012DC9                 mov     [rsp+98h+var_40], rax
.text:0000000000012DCE                 xor     eax, eax
.text:0000000000012DD0                 mov     [rsp+98h+var_88], rdi
.text:0000000000012DD5                 mov     [rsp+98h+var_7C], ecx
.text:0000000000012DD9                 add     r12, rbx
.text:0000000000012DDC                 mov     rax, [r12+8]
.text:0000000000012DE1                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:0000000000012DEA                 lea     rdi, [rax+1]
.text:0000000000012DEE                 mov     qword ptr [rsp+98h+var_78], rdi
.text:0000000000012DF3                 shl     rdi, 3          ; size
.text:0000000000012DF7                 call    _malloc
.text:0000000000012DFC                 test    rax, rax
.text:0000000000012DFF                 mov     [rsp+98h+var_68], rax
.text:0000000000012E04                 jz      loc_13040
.text:0000000000012E0A                 mov     rax, [r15+30h]
.text:0000000000012E0E                 mov     rdx, [r15]
.text:0000000000012E11                 mov     r13, rbp
.text:0000000000012E14                 shl     r13, 4
.text:0000000000012E18                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000012E21                 lea     rax, [rdx+r13]
.text:0000000000012E25                 mov     r8d, [rax+8]
.text:0000000000012E29                 test    r8d, 3FF00h
.text:0000000000012E30                 jnz     loc_12FD0
.text:0000000000012E36
.text:0000000000012E36 loc_12E36:                              ; CODE XREF: calc_eclosure_iter+24D↓j
.text:0000000000012E36                                         ; calc_eclosure_iter+27D↓j
.text:0000000000012E36                 test    byte ptr [rax+8], 8
.text:0000000000012E3A                 jz      loc_12F00
.text:0000000000012E40                 mov     rsi, [r15+28h]
.text:0000000000012E44                 lea     rax, [rsi+rbx]
.text:0000000000012E48                 cmp     qword ptr [rax+8], 0
.text:0000000000012E4D                 jle     loc_12F00
.text:0000000000012E53                 lea     rdx, [rsp+98h+var_78]
.text:0000000000012E58                 mov     [rsp+98h+var_7D], 0
.text:0000000000012E5D                 xor     r14d, r14d
.text:0000000000012E60                 lea     r12, [rsp+98h+var_58]
.text:0000000000012E65                 mov     [rsp+98h+var_90], rdx
.text:0000000000012E6A                 jmp     short loc_12E86
.text:0000000000012E6A ; ---------------------------------------------------------------------------
.text:0000000000012E6C                 align 10h
.text:0000000000012E70
.text:0000000000012E70 loc_12E70:                              ; CODE XREF: calc_eclosure_iter+145↓j
.text:0000000000012E70                                         ; calc_eclosure_iter+156↓j
.text:0000000000012E70                 mov     rsi, [r15+28h]
.text:0000000000012E74                 add     r14, 1
.text:0000000000012E78                 lea     rax, [rsi+rbx]
.text:0000000000012E7C                 cmp     [rax+8], r14
.text:0000000000012E80                 jle     loc_12F87
.text:0000000000012E86
.text:0000000000012E86 loc_12E86:                              ; CODE XREF: calc_eclosure_iter+CA↑j
.text:0000000000012E86                                         ; calc_eclosure_iter+1E1↓j
.text:0000000000012E86                 mov     rax, [rax+10h]
.text:0000000000012E8A                 mov     rdx, [rax+r14*8]
.text:0000000000012E8E                 mov     rax, [r15+30h]
.text:0000000000012E92                 lea     r8, [rdx+rdx*2]
.text:0000000000012E96                 lea     r13, ds:0[r8*8]
.text:0000000000012E9E                 add     rax, r13
.text:0000000000012EA1                 mov     rcx, [rax+8]
.text:0000000000012EA5                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000012EA9                 jz      loc_12F70
.text:0000000000012EAF                 test    rcx, rcx
.text:0000000000012EB2                 jz      loc_13028
.text:0000000000012EB8                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000012EBC                 movaps  [rsp+98h+var_58], xmm0
.text:0000000000012EC1                 mov     rax, [rax+10h]
.text:0000000000012EC5                 mov     [rsp+98h+ptr], rax
.text:0000000000012ECA
.text:0000000000012ECA loc_12ECA:                              ; CODE XREF: calc_eclosure_iter+295↓j
.text:0000000000012ECA                 mov     rdi, [rsp+98h+var_90]
.text:0000000000012ECF                 mov     rsi, r12
.text:0000000000012ED2                 call    re_node_set_merge
.text:0000000000012ED7                 test    eax, eax
.text:0000000000012ED9                 jnz     short loc_12F46
.text:0000000000012EDB                 mov     rax, [r15+30h]
.text:0000000000012EDF                 cmp     qword ptr [rax+r13+8], 0
.text:0000000000012EE5                 jnz     short loc_12E70
.text:0000000000012EE7                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000012EEC                 call    free
.text:0000000000012EF1                 mov     [rsp+98h+var_7D], 1
.text:0000000000012EF6                 jmp     loc_12E70
.text:0000000000012EF6 ; ---------------------------------------------------------------------------
.text:0000000000012EFB                 align 20h
.text:0000000000012F00
.text:0000000000012F00 loc_12F00:                              ; CODE XREF: calc_eclosure_iter+9A↑j
.text:0000000000012F00                                         ; calc_eclosure_iter+AD↑j ...
.text:0000000000012F00                 lea     rdi, [rsp+98h+var_78]
.text:0000000000012F05                 mov     rsi, rbp
.text:0000000000012F08                 call    re_node_set_insert
.text:0000000000012F0D                 test    al, al
.text:0000000000012F0F                 jz      loc_13040
.text:0000000000012F15                 mov     rax, [r15+30h]
.text:0000000000012F19
.text:0000000000012F19 loc_12F19:                              ; CODE XREF: calc_eclosure_iter+209↓j
.text:0000000000012F19                                         ; calc_eclosure_iter+214↓j
.text:0000000000012F19                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000012F1F                 movups  xmmword ptr [rax+rbx], xmm0
.text:0000000000012F23                 mov     rdx, [rsp+98h+var_68]
.text:0000000000012F28                 mov     [rax+rbx+10h], rdx
.text:0000000000012F2D
.text:0000000000012F2D loc_12F2D:                              ; CODE XREF: calc_eclosure_iter+222↓j
.text:0000000000012F2D                 mov     rbx, [rsp+98h+var_88]
.text:0000000000012F32                 mov     rax, [rsp+98h+var_68]
.text:0000000000012F37                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000012F3D                 movaps  xmmword ptr [rbx], xmm0
.text:0000000000012F40                 mov     [rbx+10h], rax
.text:0000000000012F44                 xor     eax, eax
.text:0000000000012F46
.text:0000000000012F46 loc_12F46:                              ; CODE XREF: calc_eclosure_iter+139↑j
.text:0000000000012F46                                         ; calc_eclosure_iter+271↓j ...
.text:0000000000012F46                 mov     rsi, [rsp+98h+var_40]
.text:0000000000012F4B                 xor     rsi, fs:28h
.text:0000000000012F54                 jnz     loc_1304A
.text:0000000000012F5A                 add     rsp, 68h
.text:0000000000012F5E                 pop     rbx
.text:0000000000012F5F                 pop     rbp
.text:0000000000012F60                 pop     r12
.text:0000000000012F62                 pop     r13
.text:0000000000012F64                 pop     r14
.text:0000000000012F66                 pop     r15
.text:0000000000012F68                 retn
.text:0000000000012F68 ; ---------------------------------------------------------------------------
.text:0000000000012F69                 align 10h
.text:0000000000012F70
.text:0000000000012F70 loc_12F70:                              ; CODE XREF: calc_eclosure_iter+109↑j
.text:0000000000012F70                 lea     rax, [rsi+rbx]
.text:0000000000012F74                 add     r14, 1
.text:0000000000012F78                 mov     [rsp+98h+var_7D], 1
.text:0000000000012F7D                 cmp     [rax+8], r14
.text:0000000000012F81                 jg      loc_12E86
.text:0000000000012F87
.text:0000000000012F87 loc_12F87:                              ; CODE XREF: calc_eclosure_iter+E0↑j
.text:0000000000012F87                 lea     rdi, [rsp+98h+var_78]
.text:0000000000012F8C                 mov     rsi, rbp
.text:0000000000012F8F                 call    re_node_set_insert
.text:0000000000012F94                 test    al, al
.text:0000000000012F96                 jz      loc_13040
.text:0000000000012F9C                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:0000000000012FA1                 mov     rax, [r15+30h]
.text:0000000000012FA5                 lea     rdx, [rax+rbx]
.text:0000000000012FA9                 jz      loc_12F19
.text:0000000000012FAF                 cmp     [rsp+98h+var_7D], 0
.text:0000000000012FB4                 jz      loc_12F19
.text:0000000000012FBA                 mov     qword ptr [rdx+8], 0
.text:0000000000012FC2                 jmp     loc_12F2D
.text:0000000000012FC2 ; ---------------------------------------------------------------------------
.text:0000000000012FC7                 align 10h
.text:0000000000012FD0
.text:0000000000012FD0 loc_12FD0:                              ; CODE XREF: calc_eclosure_iter+90↑j
.text:0000000000012FD0                 cmp     qword ptr [r12+8], 0
.text:0000000000012FD6                 jz      loc_12F00
.text:0000000000012FDC                 mov     rcx, [r12+10h]
.text:0000000000012FE1                 mov     rcx, [rcx]
.text:0000000000012FE4                 shl     rcx, 4
.text:0000000000012FE8                 test    byte ptr [rdx+rcx+0Ah], 4
.text:0000000000012FED                 jnz     loc_12E36
.text:0000000000012FF3                 shr     r8d, 8
.text:0000000000012FF7                 mov     rcx, rbp
.text:0000000000012FFA                 mov     rdx, rbp
.text:0000000000012FFD                 and     r8d, 3FFh
.text:0000000000013004                 mov     rsi, rbp
.text:0000000000013007                 mov     rdi, r15
.text:000000000001300A                 call    duplicate_node_closure
.text:000000000001300F                 test    eax, eax
.text:0000000000013011                 jnz     loc_12F46
.text:0000000000013017                 mov     rax, [r15]
.text:000000000001301A                 add     rax, r13
.text:000000000001301D                 jmp     loc_12E36
.text:000000000001301D ; ---------------------------------------------------------------------------
.text:0000000000013022                 align 8
.text:0000000000013028
.text:0000000000013028 loc_13028:                              ; CODE XREF: calc_eclosure_iter+112↑j
.text:0000000000013028                 mov     rsi, r15
.text:000000000001302B                 mov     rdi, r12
.text:000000000001302E                 call    calc_eclosure_iter
.text:0000000000013033                 test    eax, eax
.text:0000000000013035                 jz      loc_12ECA
.text:000000000001303B                 jmp     loc_12F46
.text:0000000000013040 ; ---------------------------------------------------------------------------
.text:0000000000013040
.text:0000000000013040 loc_13040:                              ; CODE XREF: calc_eclosure_iter+64↑j
.text:0000000000013040                                         ; calc_eclosure_iter+16F↑j ...
.text:0000000000013040                 mov     eax, 0Ch
.text:0000000000013045                 jmp     loc_12F46
.text:000000000001304A ; ---------------------------------------------------------------------------
.text:000000000001304A
.text:000000000001304A loc_1304A:                              ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:000000000001304A                 call    ___stack_chk_fail
.text:000000000001304A ; } // starts at 12DA0
.text:000000000001304A calc_eclosure_iter endp
.text:000000000001304A
.text:000000000001304A ; ---------------------------------------------------------------------------
.text:000000000001304F                 align 10h
.text:0000000000013050
.text:0000000000013050 ; =============== S U B R O U T I N E =======================================
.text:0000000000013050
.text:0000000000013050
.text:0000000000013050 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:0000000000013050                                         ; check_arrival+374↓p ...
.text:0000000000013050
.text:0000000000013050 var_5C          = dword ptr -5Ch
.text:0000000000013050 var_58          = xmmword ptr -58h
.text:0000000000013050 ptr             = qword ptr -48h
.text:0000000000013050 var_40          = qword ptr -40h
.text:0000000000013050
.text:0000000000013050 ; __unwind {
.text:0000000000013050                 push    r15
.text:0000000000013052                 push    r14
.text:0000000000013054                 mov     r14, rdi
.text:0000000000013057                 push    r13
.text:0000000000013059                 push    r12
.text:000000000001305B                 mov     r15, rsi
.text:000000000001305E                 push    rbp
.text:000000000001305F                 push    rbx
.text:0000000000013060                 mov     rbp, rdx
.text:0000000000013063                 mov     ebx, ecx
.text:0000000000013065                 sub     rsp, 38h
.text:0000000000013069                 mov     r12, [rsi+8]
.text:000000000001306D                 mov     rax, fs:28h
.text:0000000000013076                 mov     [rsp+68h+var_40], rax
.text:000000000001307B                 xor     eax, eax
.text:000000000001307D                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:0000000000013086                 lea     rdi, ds:0[r12*8] ; size
.text:000000000001308E                 mov     qword ptr [rsp+68h+var_58], r12
.text:0000000000013093                 call    _malloc
.text:0000000000013098                 test    rax, rax
.text:000000000001309B                 mov     [rsp+68h+ptr], rax
.text:00000000000130A0                 jz      loc_1319D
.text:00000000000130A6                 test    r12, r12
.text:00000000000130A9                 jle     loc_1313B
.text:00000000000130AF                 lea     r12, [rsp+68h+var_58]
.text:00000000000130B4                 xor     r13d, r13d
.text:00000000000130B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000130C0
.text:00000000000130C0 loc_130C0:                              ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:00000000000130C0                 mov     rax, [r15+10h]
.text:00000000000130C4                 mov     rdx, [rax+r13*8]
.text:00000000000130C8                 mov     rax, [r14+30h]
.text:00000000000130CC                 lea     rcx, [rdx+rdx*2]
.text:00000000000130D0                 lea     rsi, [rax+rcx*8]
.text:00000000000130D4                 mov     r8, [rsi+8]
.text:00000000000130D8                 test    r8, r8
.text:00000000000130DB                 jle     loc_13160
.text:00000000000130E1                 mov     r10, [rsi+10h]
.text:00000000000130E5                 mov     r9, [r14]
.text:00000000000130E8                 xor     ecx, ecx
.text:00000000000130EA                 jmp     short loc_130F9
.text:00000000000130EA ; ---------------------------------------------------------------------------
.text:00000000000130EC                 align 10h
.text:00000000000130F0
.text:00000000000130F0 loc_130F0:                              ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:00000000000130F0                                         ; check_arrival_expand_ecl+C4↓j
.text:00000000000130F0                 add     rcx, 1
.text:00000000000130F4                 cmp     r8, rcx
.text:00000000000130F7                 jz      short loc_13160
.text:00000000000130F9
.text:00000000000130F9 loc_130F9:                              ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:00000000000130F9                 mov     rdi, [r10+rcx*8]
.text:00000000000130FD                 mov     rax, rdi
.text:0000000000013100                 shl     rax, 4
.text:0000000000013104                 add     rax, r9
.text:0000000000013107                 movzx   r11d, byte ptr [rax+8]
.text:000000000001310C                 cmp     ebx, r11d
.text:000000000001310F                 jnz     short loc_130F0
.text:0000000000013111                 cmp     rbp, [rax]
.text:0000000000013114                 jnz     short loc_130F0
.text:0000000000013116                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000001311A                 jz      short loc_13160
.text:000000000001311C                 mov     r8d, ebx
.text:000000000001311F                 mov     rcx, rbp
.text:0000000000013122                 mov     rsi, r12
.text:0000000000013125                 mov     rdi, r14
.text:0000000000013128                 call    check_arrival_expand_ecl_sub
.text:000000000001312D                 test    eax, eax
.text:000000000001312F                 jnz     short loc_1316C
.text:0000000000013131
.text:0000000000013131 loc_13131:                              ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:0000000000013131                 add     r13, 1
.text:0000000000013135                 cmp     [r15+8], r13
.text:0000000000013139                 jg      short loc_130C0
.text:000000000001313B
.text:000000000001313B loc_1313B:                              ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:000000000001313B                 mov     rdi, [r15+10h]  ; ptr
.text:000000000001313F                 call    free
.text:0000000000013144                 mov     rax, [rsp+68h+ptr]
.text:0000000000013149                 movdqa  xmm0, [rsp+68h+var_58]
.text:000000000001314F                 mov     [r15+10h], rax
.text:0000000000013153                 xor     eax, eax
.text:0000000000013155                 movaps  xmmword ptr [r15], xmm0
.text:0000000000013159                 jmp     short loc_1317E
.text:0000000000013159 ; ---------------------------------------------------------------------------
.text:000000000001315B                 align 20h
.text:0000000000013160
.text:0000000000013160 loc_13160:                              ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:0000000000013160                                         ; check_arrival_expand_ecl+A7↑j ...
.text:0000000000013160                 mov     rdi, r12
.text:0000000000013163                 call    re_node_set_merge
.text:0000000000013168                 test    eax, eax
.text:000000000001316A                 jz      short loc_13131
.text:000000000001316C
.text:000000000001316C loc_1316C:                              ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:000000000001316C                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:0000000000013171                 mov     [rsp+68h+var_5C], eax
.text:0000000000013175                 call    free
.text:000000000001317A                 mov     eax, [rsp+68h+var_5C]
.text:000000000001317E
.text:000000000001317E loc_1317E:                              ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:000000000001317E                                         ; check_arrival_expand_ecl+152↓j
.text:000000000001317E                 mov     rdx, [rsp+68h+var_40]
.text:0000000000013183                 xor     rdx, fs:28h
.text:000000000001318C                 jnz     short loc_131A4
.text:000000000001318E                 add     rsp, 38h
.text:0000000000013192                 pop     rbx
.text:0000000000013193                 pop     rbp
.text:0000000000013194                 pop     r12
.text:0000000000013196                 pop     r13
.text:0000000000013198                 pop     r14
.text:000000000001319A                 pop     r15
.text:000000000001319C                 retn
.text:000000000001319D ; ---------------------------------------------------------------------------
.text:000000000001319D
.text:000000000001319D loc_1319D:                              ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:000000000001319D                 mov     eax, 0Ch
.text:00000000000131A2                 jmp     short loc_1317E
.text:00000000000131A4 ; ---------------------------------------------------------------------------
.text:00000000000131A4
.text:00000000000131A4 loc_131A4:                              ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:00000000000131A4                 call    ___stack_chk_fail
.text:00000000000131A4 ; } // starts at 13050
.text:00000000000131A4 check_arrival_expand_ecl endp
.text:00000000000131A4
.text:00000000000131A4 ; ---------------------------------------------------------------------------
.text:00000000000131A9                 align 10h
.text:00000000000131B0
.text:00000000000131B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000131B0
.text:00000000000131B0
.text:00000000000131B0 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:00000000000131B0                                         ; update_cur_sifted_state+107↓p
.text:00000000000131B0 ; __unwind {
.text:00000000000131B0                 mov     r9, [rsi+8]
.text:00000000000131B4                 xor     eax, eax
.text:00000000000131B6                 test    r9, r9
.text:00000000000131B9                 jz      locret_13278
.text:00000000000131BF                 mov     r11, [rdx+8]
.text:00000000000131C3                 test    r11, r11
.text:00000000000131C6                 jz      locret_13278
.text:00000000000131CC                 push    r13
.text:00000000000131CE                 push    r12
.text:00000000000131D0                 lea     rax, [r9+r11]
.text:00000000000131D4                 push    rbp
.text:00000000000131D5                 push    rbx
.text:00000000000131D6                 mov     r12, rdx
.text:00000000000131D9                 mov     rbx, rdi
.text:00000000000131DC                 mov     rbp, rsi
.text:00000000000131DF                 sub     rsp, 8
.text:00000000000131E3                 mov     rcx, [rdi+8]
.text:00000000000131E7                 mov     r13, [rdi]
.text:00000000000131EA                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000131EE                 lea     rdx, [rax+rcx]
.text:00000000000131F2                 cmp     rdx, r13
.text:00000000000131F5                 jg      loc_13320
.text:00000000000131FB
.text:00000000000131FB loc_131FB:                              ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:00000000000131FB                 lea     rsi, [rcx+r9]
.text:00000000000131FF                 mov     r13, [rbp+10h]
.text:0000000000013203                 mov     rdx, [r12+10h]
.text:0000000000013208                 sub     r9, 1
.text:000000000001320C                 sub     rcx, 1
.text:0000000000013210                 add     rsi, r11
.text:0000000000013213                 sub     r11, 1
.text:0000000000013217                 mov     rax, [r13+r9*8+0]
.text:000000000001321C                 mov     r8, [rdx+r11*8]
.text:0000000000013220
.text:0000000000013220 loc_13220:                              ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:0000000000013220                 cmp     rax, r8
.text:0000000000013223                 jz      short loc_13236
.text:0000000000013225
.text:0000000000013225 loc_13225:                              ; CODE XREF: re_node_set_add_intersect+84↓j
.text:0000000000013225                 jge     short loc_13280
.text:0000000000013227                 sub     r11, 1
.text:000000000001322B                 js      short loc_13290
.text:000000000001322D
.text:000000000001322D loc_1322D:                              ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:000000000001322D                 mov     r8, [rdx+r11*8]
.text:0000000000013231                 cmp     rax, r8
.text:0000000000013234                 jnz     short loc_13225
.text:0000000000013236
.text:0000000000013236 loc_13236:                              ; CODE XREF: re_node_set_add_intersect+73↑j
.text:0000000000013236                 test    rcx, rcx
.text:0000000000013239                 jns     short loc_1324A
.text:000000000001323B                 jmp     short loc_13258
.text:000000000001323B ; ---------------------------------------------------------------------------
.text:000000000001323D                 align 20h
.text:0000000000013240
.text:0000000000013240 loc_13240:                              ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:0000000000013240                 sub     rcx, 1
.text:0000000000013244                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013248                 jz      short loc_13258
.text:000000000001324A
.text:000000000001324A loc_1324A:                              ; CODE XREF: re_node_set_add_intersect+89↑j
.text:000000000001324A                 mov     r10, [rdi+rcx*8]
.text:000000000001324E                 cmp     r10, r8
.text:0000000000013251                 jg      short loc_13240
.text:0000000000013253                 cmp     r10, r8
.text:0000000000013256                 jz      short loc_13260
.text:0000000000013258
.text:0000000000013258 loc_13258:                              ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:0000000000013258                                         ; re_node_set_add_intersect+98↑j
.text:0000000000013258                 sub     rsi, 1
.text:000000000001325C                 mov     [rdi+rsi*8], r8
.text:0000000000013260
.text:0000000000013260 loc_13260:                              ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:0000000000013260                 sub     r9, 1
.text:0000000000013264                 js      short loc_13290
.text:0000000000013266                 sub     r11, 1
.text:000000000001326A                 js      short loc_13290
.text:000000000001326C                 mov     rax, [r13+r9*8+0]
.text:0000000000013271                 jmp     short loc_1322D
.text:0000000000013271 ; ---------------------------------------------------------------------------
.text:0000000000013273                 align 8
.text:0000000000013278
.text:0000000000013278 locret_13278:                           ; CODE XREF: re_node_set_add_intersect+9↑j
.text:0000000000013278                                         ; re_node_set_add_intersect+16↑j
.text:0000000000013278                 rep retn
.text:0000000000013278 ; ---------------------------------------------------------------------------
.text:000000000001327A                 align 20h
.text:0000000000013280
.text:0000000000013280 loc_13280:                              ; CODE XREF: re_node_set_add_intersect:loc_13225↑j
.text:0000000000013280                 sub     r9, 1
.text:0000000000013284                 js      short loc_13290
.text:0000000000013286                 mov     rax, [r13+r9*8+0]
.text:000000000001328B                 jmp     short loc_13220
.text:000000000001328B ; ---------------------------------------------------------------------------
.text:000000000001328D                 align 10h
.text:0000000000013290
.text:0000000000013290 loc_13290:                              ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:0000000000013290                                         ; re_node_set_add_intersect+B4↑j ...
.text:0000000000013290                 mov     rcx, [rbx+8]
.text:0000000000013294                 mov     rdx, [rbp+8]
.text:0000000000013298                 add     rdx, rcx
.text:000000000001329B                 add     rdx, [r12+8]
.text:00000000000132A0                 lea     rax, [rcx-1]
.text:00000000000132A4                 lea     r9, [rdx-1]
.text:00000000000132A8                 sub     rdx, rsi
.text:00000000000132AB                 add     rcx, rdx
.text:00000000000132AE                 test    rdx, rdx
.text:00000000000132B1                 mov     [rbx+8], rcx
.text:00000000000132B5                 jle     short loc_132FD
.text:00000000000132B7                 test    rax, rax
.text:00000000000132BA                 js      short loc_132FD
.text:00000000000132BC                 nop     dword ptr [rax+00h]
.text:00000000000132C0
.text:00000000000132C0 loc_132C0:                              ; CODE XREF: re_node_set_add_intersect+130↓j
.text:00000000000132C0                                         ; re_node_set_add_intersect+14B↓j
.text:00000000000132C0                 mov     r8, [rdi+r9*8]
.text:00000000000132C4                 mov     rcx, [rdi+rax*8]
.text:00000000000132C8                 lea     r10, [rax+rdx]
.text:00000000000132CC                 lea     r10, [rdi+r10*8]
.text:00000000000132D0                 cmp     r8, rcx
.text:00000000000132D3                 jle     short loc_132F0
.text:00000000000132D5                 sub     r9, 1
.text:00000000000132D9                 sub     rdx, 1
.text:00000000000132DD                 mov     [r10], r8
.text:00000000000132E0                 jnz     short loc_132C0
.text:00000000000132E2                 xor     edx, edx
.text:00000000000132E4                 jmp     short loc_13301
.text:00000000000132E4 ; ---------------------------------------------------------------------------
.text:00000000000132E6                 align 10h
.text:00000000000132F0
.text:00000000000132F0 loc_132F0:                              ; CODE XREF: re_node_set_add_intersect+123↑j
.text:00000000000132F0                 sub     rax, 1
.text:00000000000132F4                 mov     [r10], rcx
.text:00000000000132F7                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000132FB                 jnz     short loc_132C0
.text:00000000000132FD
.text:00000000000132FD loc_132FD:                              ; CODE XREF: re_node_set_add_intersect+105↑j
.text:00000000000132FD                                         ; re_node_set_add_intersect+10A↑j
.text:00000000000132FD                 shl     rdx, 3          ; n
.text:0000000000013301
.text:0000000000013301 loc_13301:                              ; CODE XREF: re_node_set_add_intersect+134↑j
.text:0000000000013301                 lea     rsi, [rdi+rsi*8] ; src
.text:0000000000013305                 call    _memcpy
.text:000000000001330A                 xor     eax, eax
.text:000000000001330C
.text:000000000001330C loc_1330C:                              ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000001330C                 add     rsp, 8
.text:0000000000013310                 pop     rbx
.text:0000000000013311                 pop     rbp
.text:0000000000013312                 pop     r12
.text:0000000000013314                 pop     r13
.text:0000000000013316                 retn
.text:0000000000013316 ; ---------------------------------------------------------------------------
.text:0000000000013317                 align 20h
.text:0000000000013320
.text:0000000000013320 loc_13320:                              ; CODE XREF: re_node_set_add_intersect+45↑j
.text:0000000000013320                 add     r13, rax
.text:0000000000013323                 lea     rsi, ds:0[r13*8] ; size
.text:000000000001332B                 call    _realloc
.text:0000000000013330                 test    rax, rax
.text:0000000000013333                 mov     rdi, rax
.text:0000000000013336                 jz      short loc_13351
.text:0000000000013338                 mov     [rbx+10h], rax
.text:000000000001333C                 mov     [rbx], r13
.text:000000000001333F                 mov     rcx, [rbx+8]
.text:0000000000013343                 mov     r9, [rbp+8]
.text:0000000000013347                 mov     r11, [r12+8]
.text:000000000001334C                 jmp     loc_131FB
.text:0000000000013351 ; ---------------------------------------------------------------------------
.text:0000000000013351
.text:0000000000013351 loc_13351:                              ; CODE XREF: re_node_set_add_intersect+186↑j
.text:0000000000013351                 mov     eax, 0Ch
.text:0000000000013356                 jmp     short loc_1330C
.text:0000000000013356 ; } // starts at 131B0
.text:0000000000013356 re_node_set_add_intersect endp
.text:0000000000013356
.text:0000000000013356 ; ---------------------------------------------------------------------------
.text:0000000000013358                 align 20h
.text:0000000000013360
.text:0000000000013360 ; =============== S U B R O U T I N E =======================================
.text:0000000000013360
.text:0000000000013360
.text:0000000000013360 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:0000000000013360                                         ; lower_subexp+82↓p ...
.text:0000000000013360
.text:0000000000013360 var_28          = qword ptr -28h
.text:0000000000013360 var_20          = qword ptr -20h
.text:0000000000013360 var_18          = qword ptr -18h
.text:0000000000013360 var_10          = qword ptr -10h
.text:0000000000013360
.text:0000000000013360 ; __unwind {
.text:0000000000013360                 push    rbx
.text:0000000000013361                 mov     rbx, rdi
.text:0000000000013364                 sub     rsp, 20h
.text:0000000000013368                 mov     eax, [rsi]
.text:000000000001336A                 cmp     eax, 0Fh
.text:000000000001336D                 jz      short loc_133E8
.text:000000000001336F                 movsxd  r9, eax
.text:0000000000013372                 lea     r10d, [rax+1]
.text:0000000000013376                 mov     rdi, [rdi]
.text:0000000000013379                 mov     rax, r9
.text:000000000001337C                 shl     rax, 6
.text:0000000000013380                 add     rax, 8
.text:0000000000013384
.text:0000000000013384 loc_13384:                              ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:0000000000013384                 shl     r9, 6
.text:0000000000013388                 mov     [rsi], r10d
.text:000000000001338B                 add     rax, rdi
.text:000000000001338E                 lea     rsi, [rdi+r9]
.text:0000000000013392                 mov     qword ptr [rsi+8], 0
.text:000000000001339A                 mov     [rsi+10h], rdx
.text:000000000001339E                 lea     rdi, [rsi+20h]
.text:00000000000133A2                 mov     [rsi+18h], rcx
.text:00000000000133A6                 movdqu  xmm0, xmmword ptr [r8]
.text:00000000000133AB                 movups  xmmword ptr [rsi+30h], xmm0
.text:00000000000133AF                 and     byte ptr [rdi+1Ah], 0F3h
.text:00000000000133B3                 test    rdx, rdx
.text:00000000000133B6                 mov     qword ptr [rsi+20h], 0
.text:00000000000133BE                 mov     qword ptr [rsi+28h], 0
.text:00000000000133C6                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:00000000000133CE                 jz      short loc_133D3
.text:00000000000133D0                 mov     [rdx], rax
.text:00000000000133D3
.text:00000000000133D3 loc_133D3:                              ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:00000000000133D3                 test    rcx, rcx
.text:00000000000133D6                 jz      short loc_133DB
.text:00000000000133D8                 mov     [rcx], rax
.text:00000000000133DB
.text:00000000000133DB loc_133DB:                              ; CODE XREF: create_token_tree_isra_16+76↑j
.text:00000000000133DB                                         ; create_token_tree_isra_16+DE↓j
.text:00000000000133DB                 add     rsp, 20h
.text:00000000000133DF                 pop     rbx
.text:00000000000133E0                 retn
.text:00000000000133E0 ; ---------------------------------------------------------------------------
.text:00000000000133E1                 align 8
.text:00000000000133E8
.text:00000000000133E8 loc_133E8:                              ; CODE XREF: create_token_tree_isra_16+D↑j
.text:00000000000133E8                 mov     edi, 3C8h       ; size
.text:00000000000133ED                 mov     [rsp+28h+var_10], r8
.text:00000000000133F2                 mov     [rsp+28h+var_18], rcx
.text:00000000000133F7                 mov     [rsp+28h+var_20], rdx
.text:00000000000133FC                 mov     [rsp+28h+var_28], rsi
.text:0000000000013400                 call    _malloc
.text:0000000000013405                 test    rax, rax
.text:0000000000013408                 mov     rdi, rax
.text:000000000001340B                 jz      short loc_1343C
.text:000000000001340D                 mov     rax, [rbx]
.text:0000000000013410                 mov     r10d, 1
.text:0000000000013416                 mov     [rbx], rdi
.text:0000000000013419                 xor     r9d, r9d
.text:000000000001341C                 mov     r8, [rsp+28h+var_10]
.text:0000000000013421                 mov     rcx, [rsp+28h+var_18]
.text:0000000000013426                 mov     rdx, [rsp+28h+var_20]
.text:000000000001342B                 mov     rsi, [rsp+28h+var_28]
.text:000000000001342F                 mov     [rdi], rax
.text:0000000000013432                 mov     eax, 8
.text:0000000000013437                 jmp     loc_13384
.text:000000000001343C ; ---------------------------------------------------------------------------
.text:000000000001343C
.text:000000000001343C loc_1343C:                              ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:000000000001343C                 xor     eax, eax
.text:000000000001343E                 jmp     short loc_133DB
.text:000000000001343E ; } // starts at 13360
.text:000000000001343E create_token_tree_isra_16 endp
.text:000000000001343E
.text:0000000000013440
.text:0000000000013440 ; =============== S U B R O U T I N E =======================================
.text:0000000000013440
.text:0000000000013440
.text:0000000000013440 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:0000000000013440                                         ; parse_expression+408↓p ...
.text:0000000000013440
.text:0000000000013440 var_38          = qword ptr -38h
.text:0000000000013440 var_30          = qword ptr -30h
.text:0000000000013440
.text:0000000000013440 ; __unwind {
.text:0000000000013440                 push    r14
.text:0000000000013442                 push    r13
.text:0000000000013444                 lea     r13, [rsi+70h]
.text:0000000000013448                 push    r12
.text:000000000001344A                 push    rbp
.text:000000000001344B                 lea     r12, [rsi+80h]
.text:0000000000013452                 push    rbx
.text:0000000000013453                 mov     rbx, rdi
.text:0000000000013456                 sub     rsp, 10h
.text:000000000001345A                 mov     rbp, [rdi]
.text:000000000001345D                 mov     rax, fs:28h
.text:0000000000013466                 mov     [rsp+38h+var_30], rax
.text:000000000001346B                 xor     eax, eax
.text:000000000001346D                 mov     r14, rsp
.text:0000000000013470
.text:0000000000013470 loc_13470:                              ; CODE XREF: duplicate_tree+65↓j
.text:0000000000013470                                         ; duplicate_tree+C7↓j
.text:0000000000013470                 lea     r8, [rbx+28h]
.text:0000000000013474                 xor     ecx, ecx
.text:0000000000013476                 xor     edx, edx
.text:0000000000013478                 mov     rsi, r12
.text:000000000001347B                 mov     rdi, r13
.text:000000000001347E                 call    create_token_tree_isra_16
.text:0000000000013483                 test    rax, rax
.text:0000000000013486                 mov     [r14], rax
.text:0000000000013489                 jz      short loc_134DC
.text:000000000001348B                 mov     [rax], rbp
.text:000000000001348E                 mov     rbp, [r14]
.text:0000000000013491                 or      byte ptr [rbp+32h], 4
.text:0000000000013495                 mov     rax, [rbx+8]
.text:0000000000013499                 test    rax, rax
.text:000000000001349C                 jz      short loc_134B0
.text:000000000001349E                 lea     r14, [rbp+8]
.text:00000000000134A2                 mov     rbx, rax
.text:00000000000134A5                 jmp     short loc_13470
.text:00000000000134A5 ; ---------------------------------------------------------------------------
.text:00000000000134A7                 align 10h
.text:00000000000134B0
.text:00000000000134B0 loc_134B0:                              ; CODE XREF: duplicate_tree+5C↑j
.text:00000000000134B0                 xor     edx, edx
.text:00000000000134B2                 jmp     short loc_134BB
.text:00000000000134B2 ; ---------------------------------------------------------------------------
.text:00000000000134B4                 align 8
.text:00000000000134B8
.text:00000000000134B8 loc_134B8:                              ; CODE XREF: duplicate_tree+96↓j
.text:00000000000134B8                 mov     rbx, rax
.text:00000000000134BB
.text:00000000000134BB loc_134BB:                              ; CODE XREF: duplicate_tree+72↑j
.text:00000000000134BB                 mov     rax, [rbx+10h]
.text:00000000000134BF                 test    rax, rax
.text:00000000000134C2                 jz      short loc_134C9
.text:00000000000134C4                 cmp     rax, rdx
.text:00000000000134C7                 jnz     short loc_13500
.text:00000000000134C9
.text:00000000000134C9 loc_134C9:                              ; CODE XREF: duplicate_tree+82↑j
.text:00000000000134C9                 mov     rax, [rbx]
.text:00000000000134CC                 mov     rbp, [rbp+0]
.text:00000000000134D0                 mov     rdx, rbx
.text:00000000000134D3                 test    rax, rax
.text:00000000000134D6                 jnz     short loc_134B8
.text:00000000000134D8                 mov     rax, [rsp+38h+var_38]
.text:00000000000134DC
.text:00000000000134DC loc_134DC:                              ; CODE XREF: duplicate_tree+49↑j
.text:00000000000134DC                 mov     rcx, [rsp+38h+var_30]
.text:00000000000134E1                 xor     rcx, fs:28h
.text:00000000000134EA                 jnz     short loc_1350C
.text:00000000000134EC                 add     rsp, 10h
.text:00000000000134F0                 pop     rbx
.text:00000000000134F1                 pop     rbp
.text:00000000000134F2                 pop     r12
.text:00000000000134F4                 pop     r13
.text:00000000000134F6                 pop     r14
.text:00000000000134F8                 retn
.text:00000000000134F8 ; ---------------------------------------------------------------------------
.text:00000000000134F9                 align 20h
.text:0000000000013500
.text:0000000000013500 loc_13500:                              ; CODE XREF: duplicate_tree+87↑j
.text:0000000000013500                 lea     r14, [rbp+10h]
.text:0000000000013504                 mov     rbx, rax
.text:0000000000013507                 jmp     loc_13470
.text:000000000001350C ; ---------------------------------------------------------------------------
.text:000000000001350C
.text:000000000001350C loc_1350C:                              ; CODE XREF: duplicate_tree+AA↑j
.text:000000000001350C                 call    ___stack_chk_fail
.text:000000000001350C ; } // starts at 13440
.text:000000000001350C duplicate_tree  endp
.text:000000000001350C
.text:000000000001350C ; ---------------------------------------------------------------------------
.text:0000000000013511                 align 20h
.text:0000000000013520
.text:0000000000013520 ; =============== S U B R O U T I N E =======================================
.text:0000000000013520
.text:0000000000013520
.text:0000000000013520 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:0000000000013520                                         ; lower_subexps+88↓p
.text:0000000000013520
.text:0000000000013520 var_70          = qword ptr -70h
.text:0000000000013520 var_68          = qword ptr -68h
.text:0000000000013520 var_60          = qword ptr -60h
.text:0000000000013520 var_58          = byte ptr -58h
.text:0000000000013520 var_50          = byte ptr -50h
.text:0000000000013520 var_40          = qword ptr -40h
.text:0000000000013520
.text:0000000000013520 ; __unwind {
.text:0000000000013520                 push    r15
.text:0000000000013522                 push    r14
.text:0000000000013524                 push    r13
.text:0000000000013526                 push    r12
.text:0000000000013528                 mov     r13, rdx
.text:000000000001352B                 push    rbp
.text:000000000001352C                 push    rbx
.text:000000000001352D                 sub     rsp, 48h
.text:0000000000013531                 mov     rbx, [rsi]
.text:0000000000013534                 mov     rbp, [rdx+8]
.text:0000000000013538                 mov     rax, fs:28h
.text:0000000000013541                 mov     [rsp+78h+var_40], rax
.text:0000000000013546                 xor     eax, eax
.text:0000000000013548                 test    byte ptr [rsi+38h], 10h
.text:000000000001354C                 mov     [rsp+78h+var_60], rdi
.text:0000000000013551                 jz      loc_136C8
.text:0000000000013557                 test    rbp, rbp
.text:000000000001355A                 jz      short loc_135D0
.text:000000000001355C                 mov     rax, [rdx+28h]
.text:0000000000013560                 cmp     rax, 3Fh ; '?'
.text:0000000000013564                 jg      loc_1369D
.text:000000000001356A                 mov     rdx, [rbx+0A0h]
.text:0000000000013571                 bt      rdx, rax
.text:0000000000013575                 jnb     loc_1369D
.text:000000000001357B                 lea     rax, [rbx+70h]
.text:000000000001357F                 lea     r14, [rsp+78h+var_58]
.text:0000000000013584                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000013588                 xor     ecx, ecx
.text:000000000001358A                 xor     edx, edx
.text:000000000001358C                 mov     rsi, rbx
.text:000000000001358F                 mov     r15, rax
.text:0000000000013592                 mov     r8, r14
.text:0000000000013595                 mov     rdi, rax
.text:0000000000013598                 mov     [rsp+78h+var_50], 8
.text:000000000001359D                 mov     [rsp+78h+var_70], rax
.text:00000000000135A2                 call    create_token_tree_isra_16
.text:00000000000135A7                 mov     rdi, r15
.text:00000000000135AA                 mov     r8, r14
.text:00000000000135AD                 xor     ecx, ecx
.text:00000000000135AF                 xor     edx, edx
.text:00000000000135B1                 mov     rsi, rbx
.text:00000000000135B4                 mov     r12, rax
.text:00000000000135B7                 mov     [rsp+78h+var_50], 9
.text:00000000000135BC                 call    create_token_tree_isra_16
.text:00000000000135C1                 mov     r15, rax
.text:00000000000135C4                 jmp     loc_1371D
.text:00000000000135C4 ; ---------------------------------------------------------------------------
.text:00000000000135C9                 align 10h
.text:00000000000135D0
.text:00000000000135D0 loc_135D0:                              ; CODE XREF: lower_subexp+3A↑j
.text:00000000000135D0                 lea     rax, [rbx+70h]
.text:00000000000135D4                 lea     r14, [rsp+78h+var_58]
.text:00000000000135D9                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:00000000000135DD                 xor     ecx, ecx
.text:00000000000135DF                 xor     edx, edx
.text:00000000000135E1                 mov     rsi, rbx
.text:00000000000135E4                 mov     r15, rax
.text:00000000000135E7                 mov     r8, r14
.text:00000000000135EA                 mov     rdi, rax
.text:00000000000135ED                 mov     [rsp+78h+var_50], 8
.text:00000000000135F2                 mov     [rsp+78h+var_70], rax
.text:00000000000135F7                 call    create_token_tree_isra_16
.text:00000000000135FC                 mov     rdi, r15
.text:00000000000135FF                 mov     r8, r14
.text:0000000000013602                 xor     ecx, ecx
.text:0000000000013604                 xor     edx, edx
.text:0000000000013606                 mov     rsi, rbx
.text:0000000000013609                 mov     r12, rax
.text:000000000001360C                 mov     [rsp+78h+var_50], 9
.text:0000000000013611                 call    create_token_tree_isra_16
.text:0000000000013616                 mov     r11, rax
.text:0000000000013619                 mov     r15, rax
.text:000000000001361C
.text:000000000001361C loc_1361C:                              ; CODE XREF: lower_subexp+1F7↓j
.text:000000000001361C                                         ; lower_subexp+21B↓j
.text:000000000001361C                 mov     rdi, [rsp+78h+var_70]
.text:0000000000013621                 mov     r8, r14
.text:0000000000013624                 mov     rcx, r11
.text:0000000000013627                 mov     rdx, r12
.text:000000000001362A                 mov     rsi, rbx
.text:000000000001362D                 mov     [rsp+78h+var_50], 10h
.text:0000000000013632                 mov     [rsp+78h+var_68], r11
.text:0000000000013637                 call    create_token_tree_isra_16
.text:000000000001363C                 test    rax, rax
.text:000000000001363F                 mov     rbp, rax
.text:0000000000013642                 jz      loc_13740
.text:0000000000013648                 mov     r11, [rsp+78h+var_68]
.text:000000000001364D                 test    r11, r11
.text:0000000000013650                 jz      loc_13740
.text:0000000000013656                 test    r12, r12
.text:0000000000013659                 jz      loc_13740
.text:000000000001365F                 test    r15, r15
.text:0000000000013662                 jz      loc_13740
.text:0000000000013668                 mov     rax, [r13+28h]
.text:000000000001366C                 mov     [r15+28h], rax
.text:0000000000013670                 mov     [r12+28h], rax
.text:0000000000013675                 movzx   eax, byte ptr [r13+32h]
.text:000000000001367A                 movzx   edx, byte ptr [r15+32h]
.text:000000000001367F                 and     eax, 8
.text:0000000000013682                 and     edx, 0FFFFFFF7h
.text:0000000000013685                 mov     ecx, eax
.text:0000000000013687                 or      edx, ecx
.text:0000000000013689                 mov     [r15+32h], dl
.text:000000000001368D                 movzx   eax, byte ptr [r12+32h]
.text:0000000000013693                 and     eax, 0FFFFFFF7h
.text:0000000000013696                 or      eax, ecx
.text:0000000000013698                 mov     [r12+32h], al
.text:000000000001369D
.text:000000000001369D loc_1369D:                              ; CODE XREF: lower_subexp+44↑j
.text:000000000001369D                                         ; lower_subexp+55↑j ...
.text:000000000001369D                 mov     rdi, [rsp+78h+var_40]
.text:00000000000136A2                 xor     rdi, fs:28h
.text:00000000000136AB                 mov     rax, rbp
.text:00000000000136AE                 jnz     loc_13752
.text:00000000000136B4                 add     rsp, 48h
.text:00000000000136B8                 pop     rbx
.text:00000000000136B9                 pop     rbp
.text:00000000000136BA                 pop     r12
.text:00000000000136BC                 pop     r13
.text:00000000000136BE                 pop     r14
.text:00000000000136C0                 pop     r15
.text:00000000000136C2                 retn
.text:00000000000136C2 ; ---------------------------------------------------------------------------
.text:00000000000136C3                 align 8
.text:00000000000136C8
.text:00000000000136C8 loc_136C8:                              ; CODE XREF: lower_subexp+31↑j
.text:00000000000136C8                 lea     rax, [rbx+70h]
.text:00000000000136CC                 lea     r14, [rsp+78h+var_58]
.text:00000000000136D1                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:00000000000136D5                 xor     ecx, ecx
.text:00000000000136D7                 xor     edx, edx
.text:00000000000136D9                 mov     rsi, rbx
.text:00000000000136DC                 mov     r15, rax
.text:00000000000136DF                 mov     r8, r14
.text:00000000000136E2                 mov     rdi, rax
.text:00000000000136E5                 mov     [rsp+78h+var_50], 8
.text:00000000000136EA                 mov     [rsp+78h+var_70], rax
.text:00000000000136EF                 call    create_token_tree_isra_16
.text:00000000000136F4                 xor     ecx, ecx
.text:00000000000136F6                 xor     edx, edx
.text:00000000000136F8                 mov     rdi, r15
.text:00000000000136FB                 mov     r8, r14
.text:00000000000136FE                 mov     rsi, rbx
.text:0000000000013701                 mov     r12, rax
.text:0000000000013704                 mov     [rsp+78h+var_50], 9
.text:0000000000013709                 call    create_token_tree_isra_16
.text:000000000001370E                 test    rbp, rbp
.text:0000000000013711                 mov     r15, rax
.text:0000000000013714                 mov     r11, rax
.text:0000000000013717                 jz      loc_1361C
.text:000000000001371D
.text:000000000001371D loc_1371D:                              ; CODE XREF: lower_subexp+A4↑j
.text:000000000001371D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000013722                 mov     r8, r14
.text:0000000000013725                 mov     rcx, r15
.text:0000000000013728                 mov     rdx, rbp
.text:000000000001372B                 mov     rsi, rbx
.text:000000000001372E                 mov     [rsp+78h+var_50], 10h
.text:0000000000013733                 call    create_token_tree_isra_16
.text:0000000000013738                 mov     r11, rax
.text:000000000001373B                 jmp     loc_1361C
.text:0000000000013740 ; ---------------------------------------------------------------------------
.text:0000000000013740
.text:0000000000013740 loc_13740:                              ; CODE XREF: lower_subexp+122↑j
.text:0000000000013740                                         ; lower_subexp+130↑j ...
.text:0000000000013740                 mov     rax, [rsp+78h+var_60]
.text:0000000000013745                 xor     ebp, ebp
.text:0000000000013747                 mov     dword ptr [rax], 0Ch
.text:000000000001374D                 jmp     loc_1369D
.text:0000000000013752 ; ---------------------------------------------------------------------------
.text:0000000000013752
.text:0000000000013752 loc_13752:                              ; CODE XREF: lower_subexp+18E↑j
.text:0000000000013752                 call    ___stack_chk_fail
.text:0000000000013752 ; } // starts at 13520
.text:0000000000013752 lower_subexp    endp
.text:0000000000013752
.text:0000000000013752 ; ---------------------------------------------------------------------------
.text:0000000000013757                 align 20h
.text:0000000000013760
.text:0000000000013760 ; =============== S U B R O U T I N E =======================================
.text:0000000000013760
.text:0000000000013760
.text:0000000000013760 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:0000000000013760
.text:0000000000013760 var_24          = dword ptr -24h
.text:0000000000013760 var_20          = qword ptr -20h
.text:0000000000013760
.text:0000000000013760 ; __unwind {
.text:0000000000013760                 push    rbp
.text:0000000000013761                 push    rbx
.text:0000000000013762                 mov     rbp, rdi
.text:0000000000013765                 mov     rbx, rsi
.text:0000000000013768                 sub     rsp, 18h
.text:000000000001376C                 mov     rdx, [rsi+8]
.text:0000000000013770                 mov     rax, fs:28h
.text:0000000000013779                 mov     [rsp+28h+var_20], rax
.text:000000000001377E                 xor     eax, eax
.text:0000000000013780                 mov     [rsp+28h+var_24], 0
.text:0000000000013788                 test    rdx, rdx
.text:000000000001378B                 jz      short loc_13793
.text:000000000001378D                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000013791                 jz      short loc_137E0
.text:0000000000013793
.text:0000000000013793 loc_13793:                              ; CODE XREF: lower_subexps+2B↑j
.text:0000000000013793                                         ; lower_subexps+94↓j ...
.text:0000000000013793                 mov     rdx, [rbx+10h]
.text:0000000000013797                 test    rdx, rdx
.text:000000000001379A                 jz      short loc_137A2
.text:000000000001379C                 cmp     byte ptr [rdx+30h], 11h
.text:00000000000137A0                 jz      short loc_137C0
.text:00000000000137A2
.text:00000000000137A2 loc_137A2:                              ; CODE XREF: lower_subexps+3A↑j
.text:00000000000137A2                                         ; lower_subexps+74↓j ...
.text:00000000000137A2                 mov     rcx, [rsp+28h+var_20]
.text:00000000000137A7                 xor     rcx, fs:28h
.text:00000000000137B0                 mov     eax, [rsp+28h+var_24]
.text:00000000000137B4                 jnz     short loc_137FB
.text:00000000000137B6                 add     rsp, 18h
.text:00000000000137BA                 pop     rbx
.text:00000000000137BB                 pop     rbp
.text:00000000000137BC                 retn
.text:00000000000137BC ; ---------------------------------------------------------------------------
.text:00000000000137BD                 align 20h
.text:00000000000137C0
.text:00000000000137C0 loc_137C0:                              ; CODE XREF: lower_subexps+40↑j
.text:00000000000137C0                 lea     rdi, [rsp+28h+var_24]
.text:00000000000137C5                 mov     rsi, rbp
.text:00000000000137C8                 call    lower_subexp
.text:00000000000137CD                 test    rax, rax
.text:00000000000137D0                 mov     [rbx+10h], rax
.text:00000000000137D4                 jz      short loc_137A2
.text:00000000000137D6                 mov     [rax], rbx
.text:00000000000137D9                 jmp     short loc_137A2
.text:00000000000137D9 ; ---------------------------------------------------------------------------
.text:00000000000137DB                 align 20h
.text:00000000000137E0
.text:00000000000137E0 loc_137E0:                              ; CODE XREF: lower_subexps+31↑j
.text:00000000000137E0                 lea     rdi, [rsp+28h+var_24]
.text:00000000000137E5                 mov     rsi, rbp
.text:00000000000137E8                 call    lower_subexp
.text:00000000000137ED                 test    rax, rax
.text:00000000000137F0                 mov     [rbx+8], rax
.text:00000000000137F4                 jz      short loc_13793
.text:00000000000137F6                 mov     [rax], rbx
.text:00000000000137F9                 jmp     short loc_13793
.text:00000000000137FB ; ---------------------------------------------------------------------------
.text:00000000000137FB
.text:00000000000137FB loc_137FB:                              ; CODE XREF: lower_subexps+54↑j
.text:00000000000137FB                 call    ___stack_chk_fail
.text:00000000000137FB ; } // starts at 13760
.text:00000000000137FB lower_subexps   endp
.text:00000000000137FB
.text:0000000000013800
.text:0000000000013800 ; =============== S U B R O U T I N E =======================================
.text:0000000000013800
.text:0000000000013800
.text:0000000000013800 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:0000000000013800                                         ; re_acquire_state_context+E8↓p ...
.text:0000000000013800 ; __unwind {
.text:0000000000013800                 push    r12
.text:0000000000013802                 push    rbp
.text:0000000000013803                 push    rbx
.text:0000000000013804                 mov     rax, [rsi+8]
.text:0000000000013808                 mov     [rdi+8], rax
.text:000000000001380C                 mov     r12, [rsi+8]
.text:0000000000013810                 test    r12, r12
.text:0000000000013813                 jle     short loc_13850
.text:0000000000013815                 mov     rbx, rdi
.text:0000000000013818                 mov     [rdi], rax
.text:000000000001381B                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000013823                 mov     rbp, rsi
.text:0000000000013826                 call    _malloc
.text:000000000001382B                 test    rax, rax
.text:000000000001382E                 mov     [rbx+10h], rax
.text:0000000000013832                 jz      short loc_13870
.text:0000000000013834                 mov     rsi, [rbp+10h]  ; src
.text:0000000000013838                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000013840                 mov     rdi, rax        ; dest
.text:0000000000013843                 call    _memcpy
.text:0000000000013848                 xor     eax, eax
.text:000000000001384A
.text:000000000001384A loc_1384A:                              ; CODE XREF: re_node_set_init_copy+84↓j
.text:000000000001384A                 pop     rbx
.text:000000000001384B                 pop     rbp
.text:000000000001384C                 pop     r12
.text:000000000001384E                 retn
.text:000000000001384E ; ---------------------------------------------------------------------------
.text:000000000001384F                 align 10h
.text:0000000000013850
.text:0000000000013850 loc_13850:                              ; CODE XREF: re_node_set_init_copy+13↑j
.text:0000000000013850                 pxor    xmm0, xmm0
.text:0000000000013854                 mov     qword ptr [rdi+10h], 0
.text:000000000001385C                 xor     eax, eax
.text:000000000001385E                 movups  xmmword ptr [rdi], xmm0
.text:0000000000013861                 pop     rbx
.text:0000000000013862                 pop     rbp
.text:0000000000013863                 pop     r12
.text:0000000000013865                 retn
.text:0000000000013865 ; ---------------------------------------------------------------------------
.text:0000000000013866                 align 10h
.text:0000000000013870
.text:0000000000013870 loc_13870:                              ; CODE XREF: re_node_set_init_copy+32↑j
.text:0000000000013870                 mov     qword ptr [rbx+8], 0
.text:0000000000013878                 mov     qword ptr [rbx], 0
.text:000000000001387F                 mov     eax, 0Ch
.text:0000000000013884                 jmp     short loc_1384A
.text:0000000000013884 ; } // starts at 13800
.text:0000000000013884 re_node_set_init_copy endp
.text:0000000000013884
.text:0000000000013884 ; ---------------------------------------------------------------------------
.text:0000000000013886                 align 10h
.text:0000000000013890
.text:0000000000013890 ; =============== S U B R O U T I N E =======================================
.text:0000000000013890
.text:0000000000013890
.text:0000000000013890 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:0000000000013890                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:0000000000013890 ; __unwind {
.text:0000000000013890                 test    rsi, rsi
.text:0000000000013893                 push    r14
.text:0000000000013895                 push    r13
.text:0000000000013897                 push    r12
.text:0000000000013899                 push    rbp
.text:000000000001389A                 push    rbx
.text:000000000001389B                 jz      loc_13945
.text:00000000000138A1                 test    rdx, rdx
.text:00000000000138A4                 mov     r13, [rsi+8]
.text:00000000000138A8                 jz      loc_13940
.text:00000000000138AE                 test    r13, r13
.text:00000000000138B1                 jle     loc_13940
.text:00000000000138B7                 mov     r14, [rdx+8]
.text:00000000000138BB                 test    r14, r14
.text:00000000000138BE                 jle     loc_13973
.text:00000000000138C4                 mov     r12, rdi
.text:00000000000138C7                 lea     rdi, [r13+r14+0]
.text:00000000000138CC                 mov     rbx, rdx
.text:00000000000138CF                 mov     rbp, rsi
.text:00000000000138D2                 mov     [r12], rdi
.text:00000000000138D6                 shl     rdi, 3          ; size
.text:00000000000138DA                 call    _malloc
.text:00000000000138DF                 test    rax, rax
.text:00000000000138E2                 mov     [r12+10h], rax
.text:00000000000138E7                 jz      loc_139D8
.text:00000000000138ED                 mov     r9, [rbx+10h]
.text:00000000000138F1                 mov     r8, [rbp+10h]
.text:00000000000138F5                 xor     ebx, ebx
.text:00000000000138F7                 xor     ecx, ecx
.text:00000000000138F9                 xor     esi, esi
.text:00000000000138FB                 jmp     short loc_1391E
.text:00000000000138FB ; ---------------------------------------------------------------------------
.text:00000000000138FD                 align 20h
.text:0000000000013900
.text:0000000000013900 loc_13900:                              ; CODE XREF: re_node_set_init_union+9D↓j
.text:0000000000013900                 setz    dil
.text:0000000000013904                 mov     [rax+rbx*8-8], rdx
.text:0000000000013909                 add     rsi, 1
.text:000000000001390D                 movzx   edi, dil
.text:0000000000013911                 add     rcx, rdi
.text:0000000000013914
.text:0000000000013914 loc_13914:                              ; CODE XREF: re_node_set_init_union+A8↓j
.text:0000000000013914                 cmp     r13, rsi
.text:0000000000013917                 jle     short loc_13980
.text:0000000000013919                 cmp     r14, rcx
.text:000000000001391C                 jle     short loc_13998
.text:000000000001391E
.text:000000000001391E loc_1391E:                              ; CODE XREF: re_node_set_init_union+6B↑j
.text:000000000001391E                 mov     rdx, [r8+rsi*8]
.text:0000000000013922                 mov     rdi, [r9+rcx*8]
.text:0000000000013926                 add     rbx, 1
.text:000000000001392A                 cmp     rdx, rdi
.text:000000000001392D                 jle     short loc_13900
.text:000000000001392F                 add     rcx, 1
.text:0000000000013933                 mov     [rax+rbx*8-8], rdi
.text:0000000000013938                 jmp     short loc_13914
.text:0000000000013938 ; ---------------------------------------------------------------------------
.text:000000000001393A                 align 20h
.text:0000000000013940
.text:0000000000013940 loc_13940:                              ; CODE XREF: re_node_set_init_union+18↑j
.text:0000000000013940                                         ; re_node_set_init_union+21↑j
.text:0000000000013940                 test    r13, r13
.text:0000000000013943                 jg      short loc_13973
.text:0000000000013945
.text:0000000000013945 loc_13945:                              ; CODE XREF: re_node_set_init_union+B↑j
.text:0000000000013945                 test    rdx, rdx
.text:0000000000013948                 jz      short loc_13951
.text:000000000001394A                 cmp     qword ptr [rdx+8], 0
.text:000000000001394F                 jg      short loc_13970
.text:0000000000013951
.text:0000000000013951 loc_13951:                              ; CODE XREF: re_node_set_init_union+B8↑j
.text:0000000000013951                 pxor    xmm0, xmm0
.text:0000000000013955                 mov     qword ptr [rdi+10h], 0
.text:000000000001395D                 xor     eax, eax
.text:000000000001395F                 movaps  xmmword ptr [rdi], xmm0
.text:0000000000013962
.text:0000000000013962 loc_13962:                              ; CODE XREF: re_node_set_init_union+14D↓j
.text:0000000000013962                 pop     rbx
.text:0000000000013963                 pop     rbp
.text:0000000000013964                 pop     r12
.text:0000000000013966                 pop     r13
.text:0000000000013968                 pop     r14
.text:000000000001396A                 retn
.text:000000000001396A ; ---------------------------------------------------------------------------
.text:000000000001396B                 align 10h
.text:0000000000013970
.text:0000000000013970 loc_13970:                              ; CODE XREF: re_node_set_init_union+BF↑j
.text:0000000000013970                 mov     rsi, rdx
.text:0000000000013973
.text:0000000000013973 loc_13973:                              ; CODE XREF: re_node_set_init_union+2E↑j
.text:0000000000013973                                         ; re_node_set_init_union+B3↑j
.text:0000000000013973                 pop     rbx
.text:0000000000013974                 pop     rbp
.text:0000000000013975                 pop     r12
.text:0000000000013977                 pop     r13
.text:0000000000013979                 pop     r14
.text:000000000001397B                 jmp     re_node_set_init_copy
.text:0000000000013980 ; ---------------------------------------------------------------------------
.text:0000000000013980
.text:0000000000013980 loc_13980:                              ; CODE XREF: re_node_set_init_union+87↑j
.text:0000000000013980                 cmp     r14, rcx
.text:0000000000013983                 jg      short loc_139B8
.text:0000000000013985
.text:0000000000013985 loc_13985:                              ; CODE XREF: re_node_set_init_union+123↓j
.text:0000000000013985                                         ; re_node_set_init_union+143↓j
.text:0000000000013985                 mov     [r12+8], rbx
.text:000000000001398A                 xor     eax, eax
.text:000000000001398C                 pop     rbx
.text:000000000001398D                 pop     rbp
.text:000000000001398E                 pop     r12
.text:0000000000013990                 pop     r13
.text:0000000000013992                 pop     r14
.text:0000000000013994                 retn
.text:0000000000013994 ; ---------------------------------------------------------------------------
.text:0000000000013995                 align 8
.text:0000000000013998
.text:0000000000013998 loc_13998:                              ; CODE XREF: re_node_set_init_union+8C↑j
.text:0000000000013998                 sub     r13, rsi
.text:000000000001399B                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000001399F                 lea     rsi, [r8+rsi*8] ; src
.text:00000000000139A3                 lea     rdx, ds:0[r13*8] ; n
.text:00000000000139AB                 add     rbx, r13
.text:00000000000139AE                 call    _memcpy
.text:00000000000139B3                 jmp     short loc_13985
.text:00000000000139B3 ; ---------------------------------------------------------------------------
.text:00000000000139B5                 align 8
.text:00000000000139B8
.text:00000000000139B8 loc_139B8:                              ; CODE XREF: re_node_set_init_union+F3↑j
.text:00000000000139B8                 sub     r14, rcx
.text:00000000000139BB                 lea     rdi, [rax+rbx*8] ; dest
.text:00000000000139BF                 lea     rsi, [r9+rcx*8] ; src
.text:00000000000139C3                 lea     rdx, ds:0[r14*8] ; n
.text:00000000000139CB                 add     rbx, r14
.text:00000000000139CE                 call    _memcpy
.text:00000000000139D3                 jmp     short loc_13985
.text:00000000000139D3 ; ---------------------------------------------------------------------------
.text:00000000000139D5                 align 8
.text:00000000000139D8
.text:00000000000139D8 loc_139D8:                              ; CODE XREF: re_node_set_init_union+57↑j
.text:00000000000139D8                 mov     eax, 0Ch
.text:00000000000139DD                 jmp     loc_13962
.text:00000000000139DD ; } // starts at 13890
.text:00000000000139DD re_node_set_init_union endp
.text:00000000000139DD
.text:00000000000139DD ; ---------------------------------------------------------------------------
.text:00000000000139E2                 align 10h
.text:00000000000139F0
.text:00000000000139F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000139F0
.text:00000000000139F0
.text:00000000000139F0 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:00000000000139F0                                         ; build_trtable+9A0↓p ...
.text:00000000000139F0
.text:00000000000139F0 var_54          = dword ptr -54h
.text:00000000000139F0 var_50          = qword ptr -50h
.text:00000000000139F0 var_48          = qword ptr -48h
.text:00000000000139F0 var_40          = qword ptr -40h
.text:00000000000139F0
.text:00000000000139F0 ; __unwind {
.text:00000000000139F0                 push    r15
.text:00000000000139F2                 push    r14
.text:00000000000139F4                 push    r13
.text:00000000000139F6                 push    r12
.text:00000000000139F8                 push    rbp
.text:00000000000139F9                 push    rbx
.text:00000000000139FA                 sub     rsp, 28h
.text:00000000000139FE                 mov     r10, [rdx+8]
.text:0000000000013A02                 test    r10, r10
.text:0000000000013A05                 jz      loc_13C8F
.text:0000000000013A0B                 mov     r8d, ecx
.text:0000000000013A0E                 test    r10, r10
.text:0000000000013A11                 lea     r12, [r8+r10]
.text:0000000000013A15                 jle     short loc_13A2C
.text:0000000000013A17                 mov     rax, [rdx+10h]
.text:0000000000013A1B                 lea     r10, [rax+r10*8]
.text:0000000000013A1F                 nop
.text:0000000000013A20
.text:0000000000013A20 loc_13A20:                              ; CODE XREF: re_acquire_state_context+3A↓j
.text:0000000000013A20                 add     r12, [rax]
.text:0000000000013A23                 add     rax, 8
.text:0000000000013A27                 cmp     r10, rax
.text:0000000000013A2A                 jnz     short loc_13A20
.text:0000000000013A2C
.text:0000000000013A2C loc_13A2C:                              ; CODE XREF: re_acquire_state_context+25↑j
.text:0000000000013A2C                 mov     rax, [rsi+88h]
.text:0000000000013A33                 mov     rbp, rdx
.text:0000000000013A36                 mov     [rsp+58h+var_54], ecx
.text:0000000000013A3A                 mov     r13, rsi
.text:0000000000013A3D                 mov     [rsp+58h+var_40], rdi
.text:0000000000013A42                 and     rax, r12
.text:0000000000013A45                 lea     rdx, [rax+rax*2]
.text:0000000000013A49                 mov     rax, [rsi+40h]
.text:0000000000013A4D                 lea     rax, [rax+rdx*8]
.text:0000000000013A51                 mov     r11, [rax]
.text:0000000000013A54                 test    r11, r11
.text:0000000000013A57                 jle     short loc_13AB0
.text:0000000000013A59                 mov     rbx, [rax+10h]
.text:0000000000013A5D                 xor     r10d, r10d
.text:0000000000013A60                 mov     r9d, ecx
.text:0000000000013A63                 jmp     short loc_13A71
.text:0000000000013A63 ; ---------------------------------------------------------------------------
.text:0000000000013A65                 align 8
.text:0000000000013A68
.text:0000000000013A68 loc_13A68:                              ; CODE XREF: re_acquire_state_context+88↓j
.text:0000000000013A68                                         ; re_acquire_state_context+95↓j ...
.text:0000000000013A68                 add     r10, 1
.text:0000000000013A6C                 cmp     r10, r11
.text:0000000000013A6F                 jz      short loc_13AB0
.text:0000000000013A71
.text:0000000000013A71 loc_13A71:                              ; CODE XREF: re_acquire_state_context+73↑j
.text:0000000000013A71                 mov     r14, [rbx+r10*8]
.text:0000000000013A75                 cmp     [r14], r12
.text:0000000000013A78                 jnz     short loc_13A68
.text:0000000000013A7A                 movzx   eax, byte ptr [r14+68h]
.text:0000000000013A7F                 and     eax, 0Fh
.text:0000000000013A82                 cmp     eax, r9d
.text:0000000000013A85                 jnz     short loc_13A68
.text:0000000000013A87                 mov     rdi, [r14+50h]
.text:0000000000013A8B                 test    rdi, rdi
.text:0000000000013A8E                 jz      short loc_13A68
.text:0000000000013A90                 mov     rsi, rbp
.text:0000000000013A93                 call    re_node_set_compare_part_2
.text:0000000000013A98                 test    al, al
.text:0000000000013A9A                 jz      short loc_13A68
.text:0000000000013A9C
.text:0000000000013A9C loc_13A9C:                              ; CODE XREF: re_acquire_state_context+208↓j
.text:0000000000013A9C                                         ; re_acquire_state_context+224↓j ...
.text:0000000000013A9C                 add     rsp, 28h
.text:0000000000013AA0                 mov     rax, r14
.text:0000000000013AA3                 pop     rbx
.text:0000000000013AA4                 pop     rbp
.text:0000000000013AA5                 pop     r12
.text:0000000000013AA7                 pop     r13
.text:0000000000013AA9                 pop     r14
.text:0000000000013AAB                 pop     r15
.text:0000000000013AAD                 retn
.text:0000000000013AAD ; ---------------------------------------------------------------------------
.text:0000000000013AAE                 align 10h
.text:0000000000013AB0
.text:0000000000013AB0 loc_13AB0:                              ; CODE XREF: re_acquire_state_context+67↑j
.text:0000000000013AB0                                         ; re_acquire_state_context+7F↑j
.text:0000000000013AB0                 mov     esi, 1          ; size
.text:0000000000013AB5                 mov     edi, 70h ; 'p'  ; nmemb
.text:0000000000013ABA                 call    _calloc
.text:0000000000013ABF                 test    rax, rax
.text:0000000000013AC2                 mov     r14, rax
.text:0000000000013AC5                 jz      loc_13C06
.text:0000000000013ACB                 lea     rax, [rax+8]
.text:0000000000013ACF                 mov     rsi, rbp
.text:0000000000013AD2                 mov     rdi, rax
.text:0000000000013AD5                 mov     rbx, rax
.text:0000000000013AD8                 call    re_node_set_init_copy
.text:0000000000013ADD                 test    eax, eax
.text:0000000000013ADF                 jnz     loc_13C9D
.text:0000000000013AE5                 movzx   eax, byte ptr [r14+68h]
.text:0000000000013AEA                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:0000000000013AEF                 mov     [r14+50h], rbx
.text:0000000000013AF3                 and     edx, 0Fh
.text:0000000000013AF6                 and     eax, 0FFFFFFF0h
.text:0000000000013AF9                 or      eax, edx
.text:0000000000013AFB                 cmp     qword ptr [rbp+8], 0
.text:0000000000013B00                 mov     [r14+68h], al
.text:0000000000013B04                 jle     loc_13BE8
.text:0000000000013B0A                 lea     rcx, [r14+18h]
.text:0000000000013B0E                 xor     r15d, r15d
.text:0000000000013B11                 mov     [rsp+58h+var_48], r12
.text:0000000000013B16                 xor     r10d, r10d
.text:0000000000013B19                 mov     r12, r13
.text:0000000000013B1C                 mov     r13, r15
.text:0000000000013B1F                 mov     [rsp+58h+var_50], rcx
.text:0000000000013B24                 mov     r15, rbx
.text:0000000000013B27                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013B30
.text:0000000000013B30 loc_13B30:                              ; CODE XREF: re_acquire_state_context+1EA↓j
.text:0000000000013B30                 mov     rax, [rbp+10h]
.text:0000000000013B34                 mov     rax, [rax+r13*8]
.text:0000000000013B38                 shl     rax, 4
.text:0000000000013B3C                 add     rax, [r12]
.text:0000000000013B40                 movzx   esi, byte ptr [rax+8]
.text:0000000000013B44                 mov     ebx, [rax+8]
.text:0000000000013B47                 shr     ebx, 8
.text:0000000000013B4A                 and     bx, 3FFh
.text:0000000000013B4F                 cmp     esi, 1
.text:0000000000013B52                 movzx   edi, bx
.text:0000000000013B55                 jnz     short loc_13B5B
.text:0000000000013B57                 test    edi, edi
.text:0000000000013B59                 jz      short loc_13BD2
.text:0000000000013B5B
.text:0000000000013B5B loc_13B5B:                              ; CODE XREF: re_acquire_state_context+165↑j
.text:0000000000013B5B                 movzx   edx, byte ptr [r14+68h]
.text:0000000000013B60                 movzx   eax, byte ptr [rax+0Ah]
.text:0000000000013B64                 mov     r9d, edx
.text:0000000000013B67                 shr     al, 4
.text:0000000000013B6A                 and     edx, 0FFFFFFDFh
.text:0000000000013B6D                 shr     r9b, 5
.text:0000000000013B71                 or      eax, r9d
.text:0000000000013B74                 and     eax, 1
.text:0000000000013B77                 shl     eax, 5
.text:0000000000013B7A                 or      eax, edx
.text:0000000000013B7C                 cmp     esi, 2
.text:0000000000013B7F                 mov     [r14+68h], al
.text:0000000000013B83                 jz      loc_13C50
.text:0000000000013B89                 cmp     esi, 4
.text:0000000000013B8C                 jnz     short loc_13B95
.text:0000000000013B8E                 or      eax, 40h
.text:0000000000013B91                 mov     [r14+68h], al
.text:0000000000013B95
.text:0000000000013B95 loc_13B95:                              ; CODE XREF: re_acquire_state_context+19C↑j
.text:0000000000013B95                                         ; re_acquire_state_context+267↓j
.text:0000000000013B95                 test    edi, edi
.text:0000000000013B97                 jz      short loc_13BD2
.text:0000000000013B99                 cmp     r15, [r14+50h]
.text:0000000000013B9D                 jz      loc_13C60
.text:0000000000013BA3
.text:0000000000013BA3 loc_13BA3:                              ; CODE XREF: re_acquire_state_context+29A↓j
.text:0000000000013BA3                 test    bl, 1
.text:0000000000013BA6                 jz      short loc_13C20
.text:0000000000013BA8                 test    byte ptr [rsp+58h+var_54], 1
.text:0000000000013BAD                 jz      short loc_13BB8
.text:0000000000013BAF                 test    bl, 2
.text:0000000000013BB2                 jz      short loc_13C2C
.text:0000000000013BB4                 nop     dword ptr [rax+00h]
.text:0000000000013BB8
.text:0000000000013BB8 loc_13BB8:                              ; CODE XREF: re_acquire_state_context+1BD↑j
.text:0000000000013BB8                                         ; re_acquire_state_context+23A↓j ...
.text:0000000000013BB8                 mov     rdx, r13
.text:0000000000013BBB                 sub     rdx, r10
.text:0000000000013BBE                 js      short loc_13BCE
.text:0000000000013BC0                 mov     rsi, [rsp+58h+var_50]
.text:0000000000013BC5                 lea     rdi, [r14+10h]
.text:0000000000013BC9                 call    re_node_set_remove_at_isra_4_part_5
.text:0000000000013BCE
.text:0000000000013BCE loc_13BCE:                              ; CODE XREF: re_acquire_state_context+1CE↑j
.text:0000000000013BCE                 add     r10, 1
.text:0000000000013BD2
.text:0000000000013BD2 loc_13BD2:                              ; CODE XREF: re_acquire_state_context+169↑j
.text:0000000000013BD2                                         ; re_acquire_state_context+1A7↑j ...
.text:0000000000013BD2                 add     r13, 1
.text:0000000000013BD6                 cmp     r13, [rbp+8]
.text:0000000000013BDA                 jl      loc_13B30
.text:0000000000013BE0                 mov     r13, r12
.text:0000000000013BE3                 mov     r12, [rsp+58h+var_48]
.text:0000000000013BE8
.text:0000000000013BE8 loc_13BE8:                              ; CODE XREF: re_acquire_state_context+114↑j
.text:0000000000013BE8                 mov     rdx, r12
.text:0000000000013BEB                 mov     rsi, r14
.text:0000000000013BEE                 mov     rdi, r13
.text:0000000000013BF1                 call    register_state
.text:0000000000013BF6                 test    eax, eax
.text:0000000000013BF8                 jz      loc_13A9C
.text:0000000000013BFE
.text:0000000000013BFE loc_13BFE:                              ; CODE XREF: re_acquire_state_context+281↓j
.text:0000000000013BFE                 mov     rdi, r14        ; ptr
.text:0000000000013C01                 call    free_state
.text:0000000000013C06
.text:0000000000013C06 loc_13C06:                              ; CODE XREF: re_acquire_state_context+D5↑j
.text:0000000000013C06                                         ; re_acquire_state_context+290↓j ...
.text:0000000000013C06                 mov     rax, [rsp+58h+var_40]
.text:0000000000013C0B                 xor     r14d, r14d
.text:0000000000013C0E                 mov     dword ptr [rax], 0Ch
.text:0000000000013C14                 jmp     loc_13A9C
.text:0000000000013C14 ; ---------------------------------------------------------------------------
.text:0000000000013C19                 align 20h
.text:0000000000013C20
.text:0000000000013C20 loc_13C20:                              ; CODE XREF: re_acquire_state_context+1B6↑j
.text:0000000000013C20                 test    bl, 2
.text:0000000000013C23                 jz      short loc_13C2C
.text:0000000000013C25                 test    byte ptr [rsp+58h+var_54], 1
.text:0000000000013C2A                 jnz     short loc_13BB8
.text:0000000000013C2C
.text:0000000000013C2C loc_13C2C:                              ; CODE XREF: re_acquire_state_context+1C2↑j
.text:0000000000013C2C                                         ; re_acquire_state_context+233↑j
.text:0000000000013C2C                 test    bl, 10h
.text:0000000000013C2F                 jz      short loc_13C38
.text:0000000000013C31                 test    byte ptr [rsp+58h+var_54], 2
.text:0000000000013C36                 jz      short loc_13BB8
.text:0000000000013C38
.text:0000000000013C38 loc_13C38:                              ; CODE XREF: re_acquire_state_context+23F↑j
.text:0000000000013C38                 and     ebx, 40h
.text:0000000000013C3B                 jz      short loc_13BD2
.text:0000000000013C3D                 test    byte ptr [rsp+58h+var_54], 4
.text:0000000000013C42                 jnz     short loc_13BD2
.text:0000000000013C44                 jmp     loc_13BB8
.text:0000000000013C44 ; ---------------------------------------------------------------------------
.text:0000000000013C49                 align 10h
.text:0000000000013C50
.text:0000000000013C50 loc_13C50:                              ; CODE XREF: re_acquire_state_context+193↑j
.text:0000000000013C50                 or      eax, 10h
.text:0000000000013C53                 mov     [r14+68h], al
.text:0000000000013C57                 jmp     loc_13B95
.text:0000000000013C57 ; ---------------------------------------------------------------------------
.text:0000000000013C5C                 align 20h
.text:0000000000013C60
.text:0000000000013C60 loc_13C60:                              ; CODE XREF: re_acquire_state_context+1AD↑j
.text:0000000000013C60                 mov     edi, 18h        ; size
.text:0000000000013C65                 call    _malloc
.text:0000000000013C6A                 test    rax, rax
.text:0000000000013C6D                 mov     [r14+50h], rax
.text:0000000000013C71                 jz      short loc_13BFE
.text:0000000000013C73                 mov     rsi, rbp
.text:0000000000013C76                 mov     rdi, rax
.text:0000000000013C79                 call    re_node_set_init_copy
.text:0000000000013C7E                 test    eax, eax
.text:0000000000013C80                 jnz     short loc_13C06
.text:0000000000013C82                 or      byte ptr [r14+68h], 80h
.text:0000000000013C87                 xor     r10d, r10d
.text:0000000000013C8A                 jmp     loc_13BA3
.text:0000000000013C8F ; ---------------------------------------------------------------------------
.text:0000000000013C8F
.text:0000000000013C8F loc_13C8F:                              ; CODE XREF: re_acquire_state_context+15↑j
.text:0000000000013C8F                 mov     dword ptr [rdi], 0
.text:0000000000013C95                 xor     r14d, r14d
.text:0000000000013C98                 jmp     loc_13A9C
.text:0000000000013C9D ; ---------------------------------------------------------------------------
.text:0000000000013C9D
.text:0000000000013C9D loc_13C9D:                              ; CODE XREF: re_acquire_state_context+EF↑j
.text:0000000000013C9D                 mov     rdi, r14        ; ptr
.text:0000000000013CA0                 call    free
.text:0000000000013CA5                 jmp     loc_13C06
.text:0000000000013CA5 ; } // starts at 139F0
.text:0000000000013CA5 re_acquire_state_context endp
.text:0000000000013CA5
.text:0000000000013CA5 ; ---------------------------------------------------------------------------
.text:0000000000013CAA                 align 10h
.text:0000000000013CB0
.text:0000000000013CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CB0
.text:0000000000013CB0
.text:0000000000013CB0 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:0000000000013CB0                                         ; expand_bkref_cache+1D0↓p ...
.text:0000000000013CB0 ; __unwind {
.text:0000000000013CB0                 push    r15
.text:0000000000013CB2                 push    r14
.text:0000000000013CB4                 push    r13
.text:0000000000013CB6                 push    r12
.text:0000000000013CB8                 push    rbp
.text:0000000000013CB9                 push    rbx
.text:0000000000013CBA                 sub     rsp, 8
.text:0000000000013CBE                 mov     rbp, [rdx+8]
.text:0000000000013CC2                 test    rbp, rbp
.text:0000000000013CC5                 jz      loc_13EA0
.text:0000000000013CCB                 test    rbp, rbp
.text:0000000000013CCE                 jle     short loc_13CEC
.text:0000000000013CD0                 mov     rax, [rdx+10h]
.text:0000000000013CD4                 lea     rcx, [rax+rbp*8]
.text:0000000000013CD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000013CE0
.text:0000000000013CE0 loc_13CE0:                              ; CODE XREF: re_acquire_state+3A↓j
.text:0000000000013CE0                 add     rbp, [rax]
.text:0000000000013CE3                 add     rax, 8
.text:0000000000013CE7                 cmp     rcx, rax
.text:0000000000013CEA                 jnz     short loc_13CE0
.text:0000000000013CEC
.text:0000000000013CEC loc_13CEC:                              ; CODE XREF: re_acquire_state+1E↑j
.text:0000000000013CEC                 mov     rax, [rsi+88h]
.text:0000000000013CF3                 mov     r14, rdx
.text:0000000000013CF6                 mov     r12, rsi
.text:0000000000013CF9                 mov     r13, rdi
.text:0000000000013CFC                 and     rax, rbp
.text:0000000000013CFF                 lea     rdx, [rax+rax*2]
.text:0000000000013D03                 mov     rax, [rsi+40h]
.text:0000000000013D07                 lea     rax, [rax+rdx*8]
.text:0000000000013D0B                 mov     r10, [rax]
.text:0000000000013D0E                 test    r10, r10
.text:0000000000013D11                 jle     short loc_13D46
.text:0000000000013D13                 mov     r11, [rax+10h]
.text:0000000000013D17                 xor     r9d, r9d
.text:0000000000013D1A                 nop     word ptr [rax+rax+00h]
.text:0000000000013D20
.text:0000000000013D20 loc_13D20:                              ; CODE XREF: re_acquire_state+94↓j
.text:0000000000013D20                 mov     rbx, [r11+r9*8]
.text:0000000000013D24                 cmp     [rbx], rbp
.text:0000000000013D27                 jnz     short loc_13D3D
.text:0000000000013D29                 lea     rdi, [rbx+8]
.text:0000000000013D2D                 mov     rsi, r14
.text:0000000000013D30                 call    re_node_set_compare_part_2
.text:0000000000013D35                 test    al, al
.text:0000000000013D37                 jnz     loc_13E3F
.text:0000000000013D3D
.text:0000000000013D3D loc_13D3D:                              ; CODE XREF: re_acquire_state+77↑j
.text:0000000000013D3D                 add     r9, 1
.text:0000000000013D41                 cmp     r10, r9
.text:0000000000013D44                 jnz     short loc_13D20
.text:0000000000013D46
.text:0000000000013D46 loc_13D46:                              ; CODE XREF: re_acquire_state+61↑j
.text:0000000000013D46                 mov     esi, 1          ; size
.text:0000000000013D4B                 mov     edi, 70h ; 'p'  ; nmemb
.text:0000000000013D50                 call    _calloc
.text:0000000000013D55                 test    rax, rax
.text:0000000000013D58                 mov     rbx, rax
.text:0000000000013D5B                 jz      loc_13E88
.text:0000000000013D61                 lea     r15, [rax+8]
.text:0000000000013D65                 mov     rsi, r14
.text:0000000000013D68                 mov     rdi, r15
.text:0000000000013D6B                 call    re_node_set_init_copy
.text:0000000000013D70                 test    eax, eax
.text:0000000000013D72                 jnz     loc_13E80
.text:0000000000013D78                 mov     rax, [r14+8]
.text:0000000000013D7C                 mov     [rbx+50h], r15
.text:0000000000013D80                 test    rax, rax
.text:0000000000013D83                 jle     loc_13E2D
.text:0000000000013D89                 mov     rsi, [r14+10h]
.text:0000000000013D8D                 mov     r8, [r12]
.text:0000000000013D91                 lea     r9, [rsi+rax*8]
.text:0000000000013D95                 jmp     short loc_13DE4
.text:0000000000013D95 ; ---------------------------------------------------------------------------
.text:0000000000013D97                 align 20h
.text:0000000000013DA0
.text:0000000000013DA0 loc_13DA0:                              ; CODE XREF: re_acquire_state+145↓j
.text:0000000000013DA0                 movzx   ecx, byte ptr [rbx+68h]
.text:0000000000013DA4                 movzx   edx, byte ptr [rax+0Ah]
.text:0000000000013DA8                 mov     r10d, ecx
.text:0000000000013DAB                 shr     dl, 4
.text:0000000000013DAE                 and     ecx, 0FFFFFFDFh
.text:0000000000013DB1                 shr     r10b, 5
.text:0000000000013DB5                 or      edx, r10d
.text:0000000000013DB8                 and     edx, 1
.text:0000000000013DBB                 shl     edx, 5
.text:0000000000013DBE                 or      edx, ecx
.text:0000000000013DC0                 cmp     edi, 2
.text:0000000000013DC3                 mov     [rbx+68h], dl
.text:0000000000013DC6                 jz      loc_13E58
.text:0000000000013DCC                 cmp     edi, 4
.text:0000000000013DCF                 jnz     loc_13E68
.text:0000000000013DD5                 or      edx, 40h
.text:0000000000013DD8                 mov     [rbx+68h], dl
.text:0000000000013DDB
.text:0000000000013DDB loc_13DDB:                              ; CODE XREF: re_acquire_state+14E↓j
.text:0000000000013DDB                                         ; re_acquire_state+1AE↓j ...
.text:0000000000013DDB                 add     rsi, 8
.text:0000000000013DDF                 cmp     r9, rsi
.text:0000000000013DE2                 jz      short loc_13E2D
.text:0000000000013DE4
.text:0000000000013DE4 loc_13DE4:                              ; CODE XREF: re_acquire_state+E5↑j
.text:0000000000013DE4                                         ; re_acquire_state+17B↓j
.text:0000000000013DE4                 mov     rax, [rsi]
.text:0000000000013DE7                 shl     rax, 4
.text:0000000000013DEB                 add     rax, r8
.text:0000000000013DEE                 movzx   edi, byte ptr [rax+8]
.text:0000000000013DF2                 cmp     edi, 1
.text:0000000000013DF5                 jnz     short loc_13DA0
.text:0000000000013DF7                 test    dword ptr [rax+8], 3FF00h
.text:0000000000013DFE                 jz      short loc_13DDB
.text:0000000000013E00                 movzx   edx, byte ptr [rbx+68h]
.text:0000000000013E04                 movzx   eax, byte ptr [rax+0Ah]
.text:0000000000013E08                 mov     ecx, edx
.text:0000000000013E0A                 shr     al, 4
.text:0000000000013E0D                 and     edx, 0FFFFFFDFh
.text:0000000000013E10                 shr     cl, 5
.text:0000000000013E13                 or      eax, ecx
.text:0000000000013E15                 and     eax, 1
.text:0000000000013E18                 shl     eax, 5
.text:0000000000013E1B                 or      eax, edx
.text:0000000000013E1D                 mov     [rbx+68h], al
.text:0000000000013E20
.text:0000000000013E20 loc_13E20:                              ; CODE XREF: re_acquire_state+1BB↓j
.text:0000000000013E20                                         ; re_acquire_state+1CA↓j
.text:0000000000013E20                 add     rsi, 8
.text:0000000000013E24                 or      byte ptr [rbx+68h], 80h
.text:0000000000013E28                 cmp     r9, rsi
.text:0000000000013E2B                 jnz     short loc_13DE4
.text:0000000000013E2D
.text:0000000000013E2D loc_13E2D:                              ; CODE XREF: re_acquire_state+D3↑j
.text:0000000000013E2D                                         ; re_acquire_state+132↑j
.text:0000000000013E2D                 mov     rdx, rbp
.text:0000000000013E30                 mov     rsi, rbx
.text:0000000000013E33                 mov     rdi, r12
.text:0000000000013E36                 call    register_state
.text:0000000000013E3B                 test    eax, eax
.text:0000000000013E3D                 jnz     short loc_13E94
.text:0000000000013E3F
.text:0000000000013E3F loc_13E3F:                              ; CODE XREF: re_acquire_state+87↑j
.text:0000000000013E3F                                         ; re_acquire_state+1E2↓j ...
.text:0000000000013E3F                 add     rsp, 8
.text:0000000000013E43                 mov     rax, rbx
.text:0000000000013E46                 pop     rbx
.text:0000000000013E47                 pop     rbp
.text:0000000000013E48                 pop     r12
.text:0000000000013E4A                 pop     r13
.text:0000000000013E4C                 pop     r14
.text:0000000000013E4E                 pop     r15
.text:0000000000013E50                 retn
.text:0000000000013E50 ; ---------------------------------------------------------------------------
.text:0000000000013E51                 align 8
.text:0000000000013E58
.text:0000000000013E58 loc_13E58:                              ; CODE XREF: re_acquire_state+116↑j
.text:0000000000013E58                 or      edx, 10h
.text:0000000000013E5B                 mov     [rbx+68h], dl
.text:0000000000013E5E                 jmp     loc_13DDB
.text:0000000000013E5E ; ---------------------------------------------------------------------------
.text:0000000000013E63                 align 8
.text:0000000000013E68
.text:0000000000013E68 loc_13E68:                              ; CODE XREF: re_acquire_state+11F↑j
.text:0000000000013E68                 cmp     edi, 0Ch
.text:0000000000013E6B                 jz      short loc_13E20
.text:0000000000013E6D                 test    dword ptr [rax+8], 3FF00h
.text:0000000000013E74                 jz      loc_13DDB
.text:0000000000013E7A                 jmp     short loc_13E20
.text:0000000000013E7A ; ---------------------------------------------------------------------------
.text:0000000000013E7C                 align 20h
.text:0000000000013E80
.text:0000000000013E80 loc_13E80:                              ; CODE XREF: re_acquire_state+C2↑j
.text:0000000000013E80                 mov     rdi, rbx        ; ptr
.text:0000000000013E83                 call    free
.text:0000000000013E88
.text:0000000000013E88 loc_13E88:                              ; CODE XREF: re_acquire_state+AB↑j
.text:0000000000013E88                                         ; re_acquire_state+1EC↓j
.text:0000000000013E88                 mov     dword ptr [r13+0], 0Ch
.text:0000000000013E90                 xor     ebx, ebx
.text:0000000000013E92                 jmp     short loc_13E3F
.text:0000000000013E94 ; ---------------------------------------------------------------------------
.text:0000000000013E94
.text:0000000000013E94 loc_13E94:                              ; CODE XREF: re_acquire_state+18D↑j
.text:0000000000013E94                 mov     rdi, rbx        ; ptr
.text:0000000000013E97                 call    free_state
.text:0000000000013E9C                 jmp     short loc_13E88
.text:0000000000013E9C ; ---------------------------------------------------------------------------
.text:0000000000013E9E                 align 20h
.text:0000000000013EA0
.text:0000000000013EA0 loc_13EA0:                              ; CODE XREF: re_acquire_state+15↑j
.text:0000000000013EA0                 mov     dword ptr [rdi], 0
.text:0000000000013EA6                 xor     ebx, ebx
.text:0000000000013EA8                 jmp     short loc_13E3F
.text:0000000000013EA8 ; } // starts at 13CB0
.text:0000000000013EA8 re_acquire_state endp
.text:0000000000013EA8
.text:0000000000013EA8 ; ---------------------------------------------------------------------------
.text:0000000000013EAA                 align 10h
.text:0000000000013EB0
.text:0000000000013EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013EB0
.text:0000000000013EB0
.text:0000000000013EB0 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:0000000000013EB0                                         ; update_cur_sifted_state+71B↓p
.text:0000000000013EB0
.text:0000000000013EB0 var_70          = qword ptr -70h
.text:0000000000013EB0 var_5C          = dword ptr -5Ch
.text:0000000000013EB0 var_58          = byte ptr -58h
.text:0000000000013EB0 ptr             = qword ptr -48h
.text:0000000000013EB0 var_40          = qword ptr -40h
.text:0000000000013EB0
.text:0000000000013EB0 ; __unwind {
.text:0000000000013EB0                 push    r15
.text:0000000000013EB2                 push    r14
.text:0000000000013EB4                 push    r13
.text:0000000000013EB6                 push    r12
.text:0000000000013EB8                 push    rbp
.text:0000000000013EB9                 push    rbx
.text:0000000000013EBA                 sub     rsp, 48h
.text:0000000000013EBE                 mov     rax, fs:28h
.text:0000000000013EC7                 mov     [rsp+78h+var_40], rax
.text:0000000000013ECC                 xor     eax, eax
.text:0000000000013ECE                 test    rcx, rcx
.text:0000000000013ED1                 jle     loc_13F66
.text:0000000000013ED7                 lea     rax, [rsp+78h+var_5C]
.text:0000000000013EDC                 mov     r14, rdi
.text:0000000000013EDF                 mov     rbx, rsi
.text:0000000000013EE2                 mov     r12, rdx
.text:0000000000013EE5                 mov     rbp, rcx
.text:0000000000013EE8                 xor     r15d, r15d
.text:0000000000013EEB                 lea     r13, [rsp+78h+var_58]
.text:0000000000013EF0                 mov     [rsp+78h+var_70], rax
.text:0000000000013EF5                 jmp     short loc_13F4C
.text:0000000000013EF5 ; ---------------------------------------------------------------------------
.text:0000000000013EF7                 align 20h
.text:0000000000013F00
.text:0000000000013F00 loc_13F00:                              ; CODE XREF: merge_state_array+A7↓j
.text:0000000000013F00                 test    rdx, rdx
.text:0000000000013F03                 jz      short loc_13F43
.text:0000000000013F05                 add     rdx, 8
.text:0000000000013F09                 add     rsi, 8
.text:0000000000013F0D                 mov     rdi, r13
.text:0000000000013F10                 call    re_node_set_init_union
.text:0000000000013F15                 test    eax, eax
.text:0000000000013F17                 mov     [rsp+78h+var_5C], eax
.text:0000000000013F1B                 jnz     short loc_13F68
.text:0000000000013F1D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000013F22                 mov     rdx, r13
.text:0000000000013F25                 mov     rsi, r14
.text:0000000000013F28                 call    re_acquire_state
.text:0000000000013F2D                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000013F32                 mov     [rbx+r15*8], rax
.text:0000000000013F36                 call    free
.text:0000000000013F3B                 mov     eax, [rsp+78h+var_5C]
.text:0000000000013F3F                 test    eax, eax
.text:0000000000013F41                 jnz     short loc_13F68
.text:0000000000013F43
.text:0000000000013F43 loc_13F43:                              ; CODE XREF: merge_state_array+53↑j
.text:0000000000013F43                 add     r15, 1
.text:0000000000013F47                 cmp     rbp, r15
.text:0000000000013F4A                 jz      short loc_13F66
.text:0000000000013F4C
.text:0000000000013F4C loc_13F4C:                              ; CODE XREF: merge_state_array+45↑j
.text:0000000000013F4C                                         ; merge_state_array+B4↓j
.text:0000000000013F4C                 mov     rsi, [rbx+r15*8]
.text:0000000000013F50                 mov     rdx, [r12+r15*8]
.text:0000000000013F54                 test    rsi, rsi
.text:0000000000013F57                 jnz     short loc_13F00
.text:0000000000013F59                 mov     [rbx+r15*8], rdx
.text:0000000000013F5D                 add     r15, 1
.text:0000000000013F61                 cmp     rbp, r15
.text:0000000000013F64                 jnz     short loc_13F4C
.text:0000000000013F66
.text:0000000000013F66 loc_13F66:                              ; CODE XREF: merge_state_array+21↑j
.text:0000000000013F66                                         ; merge_state_array+9A↑j
.text:0000000000013F66                 xor     eax, eax
.text:0000000000013F68
.text:0000000000013F68 loc_13F68:                              ; CODE XREF: merge_state_array+6B↑j
.text:0000000000013F68                                         ; merge_state_array+91↑j
.text:0000000000013F68                 mov     rcx, [rsp+78h+var_40]
.text:0000000000013F6D                 xor     rcx, fs:28h
.text:0000000000013F76                 jnz     short loc_13F87
.text:0000000000013F78                 add     rsp, 48h
.text:0000000000013F7C                 pop     rbx
.text:0000000000013F7D                 pop     rbp
.text:0000000000013F7E                 pop     r12
.text:0000000000013F80                 pop     r13
.text:0000000000013F82                 pop     r14
.text:0000000000013F84                 pop     r15
.text:0000000000013F86                 retn
.text:0000000000013F87 ; ---------------------------------------------------------------------------
.text:0000000000013F87
.text:0000000000013F87 loc_13F87:                              ; CODE XREF: merge_state_array+C6↑j
.text:0000000000013F87                 call    ___stack_chk_fail
.text:0000000000013F87 ; } // starts at 13EB0
.text:0000000000013F87 merge_state_array endp
.text:0000000000013F87
.text:0000000000013F87 ; ---------------------------------------------------------------------------
.text:0000000000013F8C                 align 10h
.text:0000000000013F90
.text:0000000000013F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F90
.text:0000000000013F90
.text:0000000000013F90 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:0000000000013F90                                         ; check_arrival+64E↓p
.text:0000000000013F90
.text:0000000000013F90 var_A8          = qword ptr -0A8h
.text:0000000000013F90 var_A0          = qword ptr -0A0h
.text:0000000000013F90 var_98          = qword ptr -98h
.text:0000000000013F90 var_90          = qword ptr -90h
.text:0000000000013F90 var_88          = qword ptr -88h
.text:0000000000013F90 var_7C          = dword ptr -7Ch
.text:0000000000013F90 var_78          = qword ptr -78h
.text:0000000000013F90 var_70          = qword ptr -70h
.text:0000000000013F90 var_5C          = dword ptr -5Ch
.text:0000000000013F90 var_58          = qword ptr -58h
.text:0000000000013F90 var_50          = qword ptr -50h
.text:0000000000013F90 ptr             = qword ptr -48h
.text:0000000000013F90 var_40          = qword ptr -40h
.text:0000000000013F90
.text:0000000000013F90 ; __unwind {
.text:0000000000013F90                 push    r15
.text:0000000000013F92                 push    r14
.text:0000000000013F94                 push    r13
.text:0000000000013F96                 push    r12
.text:0000000000013F98                 mov     r12, rdx
.text:0000000000013F9B                 push    rbp
.text:0000000000013F9C                 push    rbx
.text:0000000000013F9D                 mov     rbx, rdi
.text:0000000000013FA0                 mov     rbp, rsi
.text:0000000000013FA3                 xor     esi, esi
.text:0000000000013FA5                 sub     rsp, 78h
.text:0000000000013FA9                 mov     rdi, [rdi+0C8h]
.text:0000000000013FB0                 mov     rax, fs:28h
.text:0000000000013FB9                 mov     [rsp+0A8h+var_40], rax
.text:0000000000013FBE                 xor     eax, eax
.text:0000000000013FC0                 mov     [rsp+0A8h+var_88], rcx
.text:0000000000013FC5                 mov     [rsp+0A8h+var_7C], r8d
.text:0000000000013FCA                 mov     rdx, rdi
.text:0000000000013FCD
.text:0000000000013FCD loc_13FCD:                              ; CODE XREF: expand_bkref_cache+F7↓j
.text:0000000000013FCD                 cmp     rsi, rdx
.text:0000000000013FD0                 jge     short loc_14027
.text:0000000000013FD2                 lea     rax, [rsi+rdx]
.text:0000000000013FD6                 mov     r8, [rbx+0D8h]
.text:0000000000013FDD                 mov     rcx, rax
.text:0000000000013FE0                 shr     rcx, 3Fh
.text:0000000000013FE4                 add     rcx, rax
.text:0000000000013FE7                 sar     rcx, 1
.text:0000000000013FEA                 lea     rax, [rcx+rcx*4]
.text:0000000000013FEE                 cmp     r12, [r8+rax*8+8]
.text:0000000000013FF3                 jle     short loc_14022
.text:0000000000013FF5                 jmp     loc_14078
.text:0000000000013FF5 ; ---------------------------------------------------------------------------
.text:0000000000013FFA                 align 20h
.text:0000000000014000
.text:0000000000014000 loc_14000:                              ; CODE XREF: expand_bkref_cache+95↓j
.text:0000000000014000                 lea     rdx, [rsi+rcx]
.text:0000000000014004                 mov     rax, rdx
.text:0000000000014007                 shr     rax, 3Fh
.text:000000000001400B                 add     rax, rdx
.text:000000000001400E                 sar     rax, 1
.text:0000000000014011                 lea     rdx, [rax+rax*4]
.text:0000000000014015                 mov     r9, rax
.text:0000000000014018                 cmp     r12, [r8+rdx*8+8]
.text:000000000001401D                 jg      short loc_14080
.text:000000000001401F                 mov     rcx, rax
.text:0000000000014022
.text:0000000000014022 loc_14022:                              ; CODE XREF: expand_bkref_cache+63↑j
.text:0000000000014022                 cmp     rsi, rcx
.text:0000000000014025                 jl      short loc_14000
.text:0000000000014027
.text:0000000000014027 loc_14027:                              ; CODE XREF: expand_bkref_cache+40↑j
.text:0000000000014027                 cmp     rdi, rsi
.text:000000000001402A                 jle     short loc_1404D
.text:000000000001402C                 mov     rcx, [rbx+0D8h]
.text:0000000000014033                 lea     rax, [rsi+rsi*4]
.text:0000000000014037                 shl     rax, 3
.text:000000000001403B                 cmp     [rcx+rax+8], r12
.text:0000000000014040                 mov     [rsp+0A8h+var_78], rax
.text:0000000000014045                 jnz     short loc_1404D
.text:0000000000014047                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000001404B                 jnz     short loc_14090
.text:000000000001404D
.text:000000000001404D loc_1404D:                              ; CODE XREF: expand_bkref_cache+9A↑j
.text:000000000001404D                                         ; expand_bkref_cache+B5↑j ...
.text:000000000001404D                 xor     eax, eax
.text:000000000001404F
.text:000000000001404F loc_1404F:                              ; CODE XREF: expand_bkref_cache+341↓j
.text:000000000001404F                                         ; expand_bkref_cache+356↓j ...
.text:000000000001404F                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000014054                 xor     rbx, fs:28h
.text:000000000001405D                 jnz     loc_14329
.text:0000000000014063                 add     rsp, 78h
.text:0000000000014067                 pop     rbx
.text:0000000000014068                 pop     rbp
.text:0000000000014069                 pop     r12
.text:000000000001406B                 pop     r13
.text:000000000001406D                 pop     r14
.text:000000000001406F                 pop     r15
.text:0000000000014071                 retn
.text:0000000000014071 ; ---------------------------------------------------------------------------
.text:0000000000014072                 align 8
.text:0000000000014078
.text:0000000000014078 loc_14078:                              ; CODE XREF: expand_bkref_cache+65↑j
.text:0000000000014078                 mov     r9, rcx
.text:000000000001407B                 mov     rcx, rdx
.text:000000000001407E                 xchg    ax, ax
.text:0000000000014080
.text:0000000000014080 loc_14080:                              ; CODE XREF: expand_bkref_cache+8D↑j
.text:0000000000014080                 lea     rsi, [r9+1]
.text:0000000000014084                 mov     rdx, rcx
.text:0000000000014087                 jmp     loc_13FCD
.text:0000000000014087 ; ---------------------------------------------------------------------------
.text:000000000001408C                 align 10h
.text:0000000000014090
.text:0000000000014090 loc_14090:                              ; CODE XREF: expand_bkref_cache+BB↑j
.text:0000000000014090                 lea     rax, [rbp+10h]
.text:0000000000014094                 mov     r13, [rbx+98h]
.text:000000000001409B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000001409F                 lea     rax, [rsp+0A8h+var_5C]
.text:00000000000140A4                 mov     [rsp+0A8h+var_70], rax
.text:00000000000140A9                 lea     rax, [rsp+0A8h+var_58]
.text:00000000000140AE                 mov     [rsp+0A8h+var_98], rax
.text:00000000000140B3
.text:00000000000140B3 loc_140B3:                              ; CODE XREF: expand_bkref_cache+2E1↓j
.text:00000000000140B3                 mov     rax, [rsp+0A8h+var_78]
.text:00000000000140B8                 lea     r15, [rcx+rax]
.text:00000000000140BC                 jmp     loc_14198
.text:00000000000140BC ; ---------------------------------------------------------------------------
.text:00000000000140C1                 align 8
.text:00000000000140C8
.text:00000000000140C8 loc_140C8:                              ; CODE XREF: expand_bkref_cache+234↓j
.text:00000000000140C8                 mov     rax, [r13+18h]
.text:00000000000140CC                 mov     rcx, [rax+r10*8]
.text:00000000000140D0                 mov     r10, [rbx+0B8h]
.text:00000000000140D7                 lea     rax, ds:0[r14*8]
.text:00000000000140DF                 mov     [rsp+0A8h+var_90], rax
.text:00000000000140E4                 add     r10, rax
.text:00000000000140E7                 mov     [rsp+0A8h+var_A0], rcx
.text:00000000000140EC                 mov     r9, [r10]
.text:00000000000140EF                 test    r9, r9
.text:00000000000140F2                 jz      loc_14280
.text:00000000000140F8                 mov     rdi, [r9+10h]
.text:00000000000140FC                 lea     rsi, [r9+18h]
.text:0000000000014100                 mov     rdx, rcx
.text:0000000000014103                 call    re_node_set_contains_isra_3
.text:0000000000014108                 test    rax, rax
.text:000000000001410B                 jnz     short loc_14189
.text:000000000001410D                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000014112                 lea     rsi, [r9+8]
.text:0000000000014116                 call    re_node_set_init_copy
.text:000000000001411B                 mov     rsi, [rsp+0A8h+var_A0]
.text:0000000000014120                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000014125                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000014129                 call    re_node_set_insert
.text:000000000001412E                 mov     edx, [rsp+0A8h+var_5C]
.text:0000000000014132                 test    edx, edx
.text:0000000000014134                 jnz     loc_142D6
.text:000000000001413A                 cmp     al, 1
.text:000000000001413C                 jnz     loc_142D6
.text:0000000000014142                 mov     r10, [rsp+0A8h+var_90]
.text:0000000000014147                 add     r10, [rbx+0B8h]
.text:000000000001414E
.text:000000000001414E loc_1414E:                              ; CODE XREF: expand_bkref_cache+330↓j
.text:000000000001414E                 mov     rdx, [rsp+0A8h+var_98]
.text:0000000000014153                 mov     rdi, [rsp+0A8h+var_70]
.text:0000000000014158                 mov     rsi, r13
.text:000000000001415B                 mov     [rsp+0A8h+var_A0], r10
.text:0000000000014160                 call    re_acquire_state
.text:0000000000014165                 mov     r10, [rsp+0A8h+var_A0]
.text:000000000001416A                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000001416F                 mov     [r10], rax
.text:0000000000014172                 call    free
.text:0000000000014177                 mov     rax, [rbx+0B8h]
.text:000000000001417E                 cmp     qword ptr [rax+r14*8], 0
.text:0000000000014183                 jz      loc_142C5
.text:0000000000014189
.text:0000000000014189 loc_14189:                              ; CODE XREF: expand_bkref_cache+17B↑j
.text:0000000000014189                                         ; expand_bkref_cache+221↓j ...
.text:0000000000014189                 add     r15, 28h ; '('
.text:000000000001418D                 cmp     byte ptr [r15-8], 0
.text:0000000000014192                 jz      loc_1404D
.text:0000000000014198
.text:0000000000014198 loc_14198:                              ; CODE XREF: expand_bkref_cache+12C↑j
.text:0000000000014198                 mov     r10, [r15]
.text:000000000001419B                 mov     r9, [rbp+8]
.text:000000000001419F                 mov     rsi, [rsp+0A8h+var_A8]
.text:00000000000141A3                 mov     rdx, r10
.text:00000000000141A6                 mov     rdi, r9
.text:00000000000141A9                 call    re_node_set_contains_isra_3
.text:00000000000141AE                 test    rax, rax
.text:00000000000141B1                 jz      short loc_14189
.text:00000000000141B3                 mov     r8, [r15+18h]
.text:00000000000141B7                 add     r8, r12
.text:00000000000141BA                 mov     r14, r8
.text:00000000000141BD                 sub     r14, [r15+10h]
.text:00000000000141C1                 cmp     r12, r14
.text:00000000000141C4                 jnz     loc_140C8
.text:00000000000141CA                 mov     rcx, [r13+28h]
.text:00000000000141CE                 lea     rax, [r10+r10*2]
.text:00000000000141D2                 mov     rsi, [rsp+0A8h+var_A8]
.text:00000000000141D6                 mov     rdi, r9
.text:00000000000141D9                 lea     rax, [rcx+rax*8]
.text:00000000000141DD                 mov     rax, [rax+10h]
.text:00000000000141E1                 mov     r14, [rax]
.text:00000000000141E4                 mov     rdx, r14
.text:00000000000141E7                 call    re_node_set_contains_isra_3
.text:00000000000141EC                 test    rax, rax
.text:00000000000141EF                 jnz     short loc_14189
.text:00000000000141F1                 mov     edi, 8          ; size
.text:00000000000141F6                 mov     [rsp+0A8h+var_58], 1
.text:00000000000141FF                 mov     [rsp+0A8h+var_50], 1
.text:0000000000014208                 call    _malloc
.text:000000000001420D                 test    rax, rax
.text:0000000000014210                 mov     [rsp+0A8h+ptr], rax
.text:0000000000014215                 jz      loc_1430D
.text:000000000001421B                 mov     [rax], r14
.text:000000000001421E                 xor     eax, eax
.text:0000000000014220
.text:0000000000014220 loc_14220:                              ; CODE XREF: expand_bkref_cache+394↓j
.text:0000000000014220                 mov     r15, [rsp+0A8h+var_98]
.text:0000000000014225                 mov     rdx, [rsp+0A8h+var_88]
.text:000000000001422A                 mov     rdi, r13
.text:000000000001422D                 mov     ecx, [rsp+0A8h+var_7C]
.text:0000000000014231                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000014235                 mov     rsi, r15
.text:0000000000014238                 call    check_arrival_expand_ecl
.text:000000000001423D                 mov     rsi, r15
.text:0000000000014240                 mov     rdi, rbp
.text:0000000000014243                 mov     r14d, eax
.text:0000000000014246                 call    re_node_set_merge
.text:000000000001424B                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000014250                 mov     r15d, eax
.text:0000000000014253                 call    free
.text:0000000000014258                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000001425C                 mov     edx, r14d
.text:000000000001425F                 or      edx, r15d
.text:0000000000014262                 or      edx, eax
.text:0000000000014264                 jnz     loc_142F6
.text:000000000001426A                 mov     rcx, [rbx+0D8h]
.text:0000000000014271                 jmp     loc_140B3
.text:0000000000014271 ; ---------------------------------------------------------------------------
.text:0000000000014276                 align 20h
.text:0000000000014280
.text:0000000000014280 loc_14280:                              ; CODE XREF: expand_bkref_cache+162↑j
.text:0000000000014280                 mov     edi, 8          ; size
.text:0000000000014285                 mov     [rsp+0A8h+var_90], r10
.text:000000000001428A                 mov     [rsp+0A8h+var_58], 1
.text:0000000000014293                 mov     [rsp+0A8h+var_50], 1
.text:000000000001429C                 call    _malloc
.text:00000000000142A1                 test    rax, rax
.text:00000000000142A4                 mov     [rsp+0A8h+ptr], rax
.text:00000000000142A9                 jz      short loc_142EC
.text:00000000000142AB                 mov     rdi, [rsp+0A8h+var_A0]
.text:00000000000142B0                 mov     [rsp+0A8h+var_5C], 0
.text:00000000000142B8                 mov     r10, [rsp+0A8h+var_90]
.text:00000000000142BD                 mov     [rax], rdi
.text:00000000000142C0                 jmp     loc_1414E
.text:00000000000142C5 ; ---------------------------------------------------------------------------
.text:00000000000142C5
.text:00000000000142C5 loc_142C5:                              ; CODE XREF: expand_bkref_cache+1F3↑j
.text:00000000000142C5                 mov     eax, [rsp+0A8h+var_5C]
.text:00000000000142C9                 test    eax, eax
.text:00000000000142CB                 jz      loc_14189
.text:00000000000142D1                 jmp     loc_1404F
.text:00000000000142D6 ; ---------------------------------------------------------------------------
.text:00000000000142D6
.text:00000000000142D6 loc_142D6:                              ; CODE XREF: expand_bkref_cache+1A4↑j
.text:00000000000142D6                                         ; expand_bkref_cache+1AC↑j
.text:00000000000142D6                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000142DB                 call    free
.text:00000000000142E0                 mov     eax, [rsp+0A8h+var_5C]
.text:00000000000142E4                 test    eax, eax
.text:00000000000142E6                 jnz     loc_1404F
.text:00000000000142EC
.text:00000000000142EC loc_142EC:                              ; CODE XREF: expand_bkref_cache+319↑j
.text:00000000000142EC                 mov     eax, 0Ch
.text:00000000000142F1                 jmp     loc_1404F
.text:00000000000142F6 ; ---------------------------------------------------------------------------
.text:00000000000142F6
.text:00000000000142F6 loc_142F6:                              ; CODE XREF: expand_bkref_cache+2D4↑j
.text:00000000000142F6                 test    eax, eax
.text:00000000000142F8                 jnz     loc_1404F
.text:00000000000142FE                 test    r14d, r14d
.text:0000000000014301                 mov     eax, r14d
.text:0000000000014304                 cmovz   eax, r15d
.text:0000000000014308                 jmp     loc_1404F
.text:000000000001430D ; ---------------------------------------------------------------------------
.text:000000000001430D
.text:000000000001430D loc_1430D:                              ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000001430D                 mov     [rsp+0A8h+var_50], 0
.text:0000000000014316                 mov     [rsp+0A8h+var_58], 0
.text:000000000001431F                 mov     eax, 0Ch
.text:0000000000014324                 jmp     loc_14220
.text:0000000000014329 ; ---------------------------------------------------------------------------
.text:0000000000014329
.text:0000000000014329 loc_14329:                              ; CODE XREF: expand_bkref_cache+CD↑j
.text:0000000000014329                 call    ___stack_chk_fail
.text:0000000000014329 ; } // starts at 13F90
.text:0000000000014329 expand_bkref_cache endp
.text:0000000000014329
.text:0000000000014329 ; ---------------------------------------------------------------------------
.text:000000000001432E                 align 10h
.text:0000000000014330
.text:0000000000014330 ; =============== S U B R O U T I N E =======================================
.text:0000000000014330
.text:0000000000014330
.text:0000000000014330 check_subexp_matching_top_isra_18 proc near
.text:0000000000014330                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:0000000000014330                                         ; merge_state_with_log+1A1↓p ...
.text:0000000000014330
.text:0000000000014330 var_50          = qword ptr -50h
.text:0000000000014330 var_48          = qword ptr -48h
.text:0000000000014330 var_40          = qword ptr -40h
.text:0000000000014330
.text:0000000000014330 ; __unwind {
.text:0000000000014330                 push    r15
.text:0000000000014332                 push    r14
.text:0000000000014334                 push    r13
.text:0000000000014336                 push    r12
.text:0000000000014338                 push    rbp
.text:0000000000014339                 push    rbx
.text:000000000001433A                 sub     rsp, 28h
.text:000000000001433E                 cmp     qword ptr [rsi], 0
.text:0000000000014342                 mov     r13, [rdi+98h]
.text:0000000000014349                 jle     loc_14410
.text:000000000001434F                 mov     r14, rdx
.text:0000000000014352                 mov     r12, rsi
.text:0000000000014355                 mov     r15, rdi
.text:0000000000014358                 xor     ebx, ebx
.text:000000000001435A                 jmp     short loc_1436E
.text:000000000001435A ; ---------------------------------------------------------------------------
.text:000000000001435C                 align 20h
.text:0000000000014360
.text:0000000000014360 loc_14360:                              ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:0000000000014360                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:0000000000014360                 add     rbx, 1
.text:0000000000014364                 cmp     rbx, [r12]
.text:0000000000014368                 jge     loc_14410
.text:000000000001436E
.text:000000000001436E loc_1436E:                              ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:000000000001436E                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:000000000001436E                 mov     rax, [r14]
.text:0000000000014371                 mov     rbp, [rax+rbx*8]
.text:0000000000014375                 mov     rax, rbp
.text:0000000000014378                 shl     rax, 4
.text:000000000001437C                 add     rax, [r13+0]
.text:0000000000014380                 cmp     byte ptr [rax+8], 8
.text:0000000000014384                 jnz     short loc_14360
.text:0000000000014386                 mov     rax, [rax]
.text:0000000000014389                 cmp     rax, 3Fh ; '?'
.text:000000000001438D                 jg      short loc_14360
.text:000000000001438F                 mov     rsi, [r13+0A0h]
.text:0000000000014396                 bt      rsi, rax
.text:000000000001439A                 jnb     short loc_14360
.text:000000000001439C                 mov     r8, [r15+0E8h]
.text:00000000000143A3                 cmp     r8, [r15+0F0h]
.text:00000000000143AA                 mov     r9, [r15+0F8h]
.text:00000000000143B1                 jz      short loc_14428
.text:00000000000143B3
.text:00000000000143B3 loc_143B3:                              ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:00000000000143B3                 mov     esi, 30h ; '0'  ; size
.text:00000000000143B8                 mov     edi, 1          ; nmemb
.text:00000000000143BD                 mov     [rsp+58h+var_48], r9
.text:00000000000143C2                 mov     [rsp+58h+var_50], r8
.text:00000000000143C7                 mov     [rsp+58h+var_40], rcx
.text:00000000000143CC                 call    _calloc
.text:00000000000143D1                 mov     r8, [rsp+58h+var_50]
.text:00000000000143D6                 mov     r9, [rsp+58h+var_48]
.text:00000000000143DB                 test    rax, rax
.text:00000000000143DE                 mov     [r9+r8*8], rax
.text:00000000000143E2                 jz      short loc_14421
.text:00000000000143E4                 add     r8, 1
.text:00000000000143E8                 add     rbx, 1
.text:00000000000143EC                 mov     rcx, [rsp+58h+var_40]
.text:00000000000143F1                 mov     [r15+0E8h], r8
.text:00000000000143F8                 cmp     rbx, [r12]
.text:00000000000143FC                 mov     [rax+8], rbp
.text:0000000000014400                 mov     [rax], rcx
.text:0000000000014403                 jl      loc_1436E
.text:0000000000014409                 nop     dword ptr [rax+00000000h]
.text:0000000000014410
.text:0000000000014410 loc_14410:                              ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:0000000000014410                                         ; check_subexp_matching_top_isra_18+38↑j
.text:0000000000014410                 xor     eax, eax
.text:0000000000014412
.text:0000000000014412 loc_14412:                              ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:0000000000014412                 add     rsp, 28h
.text:0000000000014416                 pop     rbx
.text:0000000000014417                 pop     rbp
.text:0000000000014418                 pop     r12
.text:000000000001441A                 pop     r13
.text:000000000001441C                 pop     r14
.text:000000000001441E                 pop     r15
.text:0000000000014420                 retn
.text:0000000000014421 ; ---------------------------------------------------------------------------
.text:0000000000014421
.text:0000000000014421 loc_14421:                              ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:0000000000014421                                         ; check_subexp_matching_top_isra_18+120↓j
.text:0000000000014421                 mov     eax, 0Ch
.text:0000000000014426                 jmp     short loc_14412
.text:0000000000014428 ; ---------------------------------------------------------------------------
.text:0000000000014428
.text:0000000000014428 loc_14428:                              ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:0000000000014428                 lea     rax, [r8+r8]
.text:000000000001442C                 mov     rsi, r8
.text:000000000001442F                 mov     rdi, r9         ; ptr
.text:0000000000014432                 shl     rsi, 4          ; size
.text:0000000000014436                 mov     [rsp+58h+var_50], rcx
.text:000000000001443B                 mov     [rsp+58h+var_48], rax
.text:0000000000014440                 call    _realloc
.text:0000000000014445                 test    rax, rax
.text:0000000000014448                 mov     r9, rax
.text:000000000001444B                 mov     rcx, [rsp+58h+var_50]
.text:0000000000014450                 jz      short loc_14421
.text:0000000000014452                 mov     [r15+0F8h], rax
.text:0000000000014459                 mov     rax, [rsp+58h+var_48]
.text:000000000001445E                 mov     r8, [r15+0E8h]
.text:0000000000014465                 mov     [r15+0F0h], rax
.text:000000000001446C                 jmp     loc_143B3
.text:000000000001446C ; } // starts at 14330
.text:000000000001446C check_subexp_matching_top_isra_18 endp
.text:000000000001446C
.text:000000000001446C ; ---------------------------------------------------------------------------
.text:0000000000014471                 align 20h
.text:0000000000014480
.text:0000000000014480 ; =============== S U B R O U T I N E =======================================
.text:0000000000014480
.text:0000000000014480
.text:0000000000014480 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:0000000000014480                                         ; check_halt_state_context_isra_20+16↓p ...
.text:0000000000014480 ; __unwind {
.text:0000000000014480                 push    rbp
.text:0000000000014481                 push    rbx
.text:0000000000014482                 mov     rbp, rdi
.text:0000000000014485                 sub     rsp, 8
.text:0000000000014489                 test    rsi, rsi
.text:000000000001448C                 js      short loc_144E0
.text:000000000001448E                 cmp     [rdi+58h], rsi
.text:0000000000014492                 jz      loc_14538
.text:0000000000014498                 cmp     dword ptr [rdi+90h], 1
.text:000000000001449F                 jle     short loc_144F0
.text:00000000000144A1                 mov     rax, [rdi+10h]
.text:00000000000144A5                 jmp     short loc_144BA
.text:00000000000144A5 ; ---------------------------------------------------------------------------
.text:00000000000144A7                 align 10h
.text:00000000000144B0
.text:00000000000144B0 loc_144B0:                              ; CODE XREF: re_string_context_at+40↓j
.text:00000000000144B0                 sub     rsi, 1
.text:00000000000144B4                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000144B8                 jz      short loc_144E0
.text:00000000000144BA
.text:00000000000144BA loc_144BA:                              ; CODE XREF: re_string_context_at+25↑j
.text:00000000000144BA                 mov     ebx, [rax+rsi*4]
.text:00000000000144BD                 cmp     ebx, 0FFFFFFFFh
.text:00000000000144C0                 jz      short loc_144B0
.text:00000000000144C2                 cmp     byte ptr [rbp+8Eh], 0
.text:00000000000144C9                 jnz     short loc_14548
.text:00000000000144CB
.text:00000000000144CB loc_144CB:                              ; CODE XREF: re_string_context_at+D6↓j
.text:00000000000144CB                 xor     eax, eax
.text:00000000000144CD                 cmp     ebx, 0Ah
.text:00000000000144D0                 jz      short loc_1451C
.text:00000000000144D2
.text:00000000000144D2 loc_144D2:                              ; CODE XREF: re_string_context_at+93↓j
.text:00000000000144D2                                         ; re_string_context_at+9A↓j ...
.text:00000000000144D2                 add     rsp, 8
.text:00000000000144D6                 pop     rbx
.text:00000000000144D7                 pop     rbp
.text:00000000000144D8                 retn
.text:00000000000144D8 ; ---------------------------------------------------------------------------
.text:00000000000144D9                 align 20h
.text:00000000000144E0
.text:00000000000144E0 loc_144E0:                              ; CODE XREF: re_string_context_at+C↑j
.text:00000000000144E0                                         ; re_string_context_at+38↑j
.text:00000000000144E0                 mov     eax, [rbp+70h]
.text:00000000000144E3                 add     rsp, 8
.text:00000000000144E7                 pop     rbx
.text:00000000000144E8                 pop     rbp
.text:00000000000144E9                 retn
.text:00000000000144E9 ; ---------------------------------------------------------------------------
.text:00000000000144EA                 align 10h
.text:00000000000144F0
.text:00000000000144F0 loc_144F0:                              ; CODE XREF: re_string_context_at+1F↑j
.text:00000000000144F0                 mov     rax, [rdi+8]
.text:00000000000144F4                 mov     rcx, [rdi+80h]
.text:00000000000144FB                 movzx   eax, byte ptr [rax+rsi]
.text:00000000000144FF                 mov     rdx, rax
.text:0000000000014502                 sar     rax, 6
.text:0000000000014506                 mov     rcx, [rcx+rax*8]
.text:000000000001450A                 mov     eax, 1
.text:000000000001450F                 bt      rcx, rdx
.text:0000000000014513                 jb      short loc_144D2
.text:0000000000014515                 xor     eax, eax
.text:0000000000014517                 cmp     dl, 0Ah
.text:000000000001451A                 jnz     short loc_144D2
.text:000000000001451C
.text:000000000001451C loc_1451C:                              ; CODE XREF: re_string_context_at+50↑j
.text:000000000001451C                 xor     eax, eax
.text:000000000001451E                 cmp     byte ptr [rbp+8Dh], 0
.text:0000000000014525                 setnz   al
.text:0000000000014528                 add     rsp, 8
.text:000000000001452C                 add     eax, eax
.text:000000000001452E                 pop     rbx
.text:000000000001452F                 pop     rbp
.text:0000000000014530                 retn
.text:0000000000014530 ; ---------------------------------------------------------------------------
.text:0000000000014531                 align 8
.text:0000000000014538
.text:0000000000014538 loc_14538:                              ; CODE XREF: re_string_context_at+12↑j
.text:0000000000014538                 and     edx, 2
.text:000000000001453B                 cmp     edx, 1
.text:000000000001453E                 sbb     eax, eax
.text:0000000000014540                 and     eax, 2
.text:0000000000014543                 add     eax, 8
.text:0000000000014546                 jmp     short loc_144D2
.text:0000000000014548 ; ---------------------------------------------------------------------------
.text:0000000000014548
.text:0000000000014548 loc_14548:                              ; CODE XREF: re_string_context_at+49↑j
.text:0000000000014548                 mov     edi, ebx        ; wc
.text:000000000001454A                 call    _iswalnum
.text:000000000001454F                 test    eax, eax
.text:0000000000014551                 jnz     short loc_1455C
.text:0000000000014553                 cmp     ebx, 5Fh ; '_'
.text:0000000000014556                 jnz     loc_144CB
.text:000000000001455C
.text:000000000001455C loc_1455C:                              ; CODE XREF: re_string_context_at+D1↑j
.text:000000000001455C                 mov     eax, 1
.text:0000000000014561                 jmp     loc_144D2
.text:0000000000014561 ; } // starts at 14480
.text:0000000000014561 re_string_context_at endp
.text:0000000000014561
.text:0000000000014561 ; ---------------------------------------------------------------------------
.text:0000000000014566                 align 10h
.text:0000000000014570
.text:0000000000014570 ; =============== S U B R O U T I N E =======================================
.text:0000000000014570
.text:0000000000014570
.text:0000000000014570 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:0000000000014570                                         ; set_regs+17A↓p ...
.text:0000000000014570 ; __unwind {
.text:0000000000014570                 mov     rax, [rdi+8]
.text:0000000000014574                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000014578                 movzx   eax, byte ptr [rsi+8]
.text:000000000001457C                 cmp     al, 3
.text:000000000001457E                 jz      loc_14638
.text:0000000000014584                 jbe     loc_14620
.text:000000000001458A                 cmp     al, 5
.text:000000000001458C                 jz      short loc_145A0
.text:000000000001458E                 cmp     al, 7
.text:0000000000014590                 jnz     loc_14630
.text:0000000000014596                 xor     eax, eax
.text:0000000000014598                 test    cl, cl
.text:000000000001459A                 js      locret_1462A
.text:00000000000145A0
.text:00000000000145A0 loc_145A0:                              ; CODE XREF: check_node_accept+1C↑j
.text:00000000000145A0                 cmp     cl, 0Ah
.text:00000000000145A3                 jz      loc_14668
.text:00000000000145A9                 test    cl, cl
.text:00000000000145AB                 jnz     short loc_145C0
.text:00000000000145AD                 mov     rcx, [rdi+98h]
.text:00000000000145B4                 xor     eax, eax
.text:00000000000145B6                 test    byte ptr [rcx+0D8h], 80h
.text:00000000000145BD                 jnz     short locret_1462A
.text:00000000000145BF                 nop
.text:00000000000145C0
.text:00000000000145C0 loc_145C0:                              ; CODE XREF: check_node_accept+3B↑j
.text:00000000000145C0                                         ; check_node_accept+B8↓j ...
.text:00000000000145C0                 push    rbx
.text:00000000000145C1                 mov     ebx, [rsi+8]
.text:00000000000145C4                 mov     eax, 1
.text:00000000000145C9                 test    ebx, 3FF00h
.text:00000000000145CF                 jz      short loc_1461C
.text:00000000000145D1                 mov     rsi, rdx
.text:00000000000145D4                 mov     edx, [rdi+0A0h]
.text:00000000000145DA                 shr     ebx, 8
.text:00000000000145DD                 call    re_string_context_at
.text:00000000000145E2                 mov     ecx, ebx
.text:00000000000145E4                 mov     edx, eax
.text:00000000000145E6                 and     cx, 3FFh
.text:00000000000145EB                 test    bl, 4
.text:00000000000145EE                 jz      short loc_14658
.text:00000000000145F0                 xor     eax, eax
.text:00000000000145F2                 test    dl, 1
.text:00000000000145F5                 jz      short loc_1461C
.text:00000000000145F7                 and     ebx, 8
.text:00000000000145FA                 jnz     short loc_1461C
.text:00000000000145FC
.text:00000000000145FC loc_145FC:                              ; CODE XREF: check_node_accept+EB↓j
.text:00000000000145FC                                         ; check_node_accept+EF↓j
.text:00000000000145FC                 test    cl, 20h
.text:00000000000145FF                 jz      short loc_14608
.text:0000000000014601                 xor     eax, eax
.text:0000000000014603                 test    dl, 2
.text:0000000000014606                 jz      short loc_1461C
.text:0000000000014608
.text:0000000000014608 loc_14608:                              ; CODE XREF: check_node_accept+8F↑j
.text:0000000000014608                 shr     edx, 3
.text:000000000001460B                 mov     eax, 1
.text:0000000000014610                 and     edx, 1
.text:0000000000014613                 and     ecx, 80h
.text:0000000000014619                 cmovnz  eax, edx
.text:000000000001461C
.text:000000000001461C loc_1461C:                              ; CODE XREF: check_node_accept+5F↑j
.text:000000000001461C                                         ; check_node_accept+85↑j ...
.text:000000000001461C                 pop     rbx
.text:000000000001461D                 retn
.text:000000000001461D ; ---------------------------------------------------------------------------
.text:000000000001461E                 align 20h
.text:0000000000014620
.text:0000000000014620 loc_14620:                              ; CODE XREF: check_node_accept+14↑j
.text:0000000000014620                 cmp     al, 1
.text:0000000000014622                 jnz     short loc_14630
.text:0000000000014624                 xor     eax, eax
.text:0000000000014626                 cmp     [rsi], cl
.text:0000000000014628                 jz      short loc_145C0
.text:000000000001462A
.text:000000000001462A locret_1462A:                           ; CODE XREF: check_node_accept+2A↑j
.text:000000000001462A                                         ; check_node_accept+4D↑j
.text:000000000001462A                 rep retn
.text:000000000001462A ; ---------------------------------------------------------------------------
.text:000000000001462C                 align 10h
.text:0000000000014630
.text:0000000000014630 loc_14630:                              ; CODE XREF: check_node_accept+20↑j
.text:0000000000014630                                         ; check_node_accept+B2↑j
.text:0000000000014630                 xor     eax, eax
.text:0000000000014632                 retn
.text:0000000000014632 ; ---------------------------------------------------------------------------
.text:0000000000014633                 align 8
.text:0000000000014638
.text:0000000000014638 loc_14638:                              ; CODE XREF: check_node_accept+E↑j
.text:0000000000014638                 mov     r8, [rsi]
.text:000000000001463B                 movzx   eax, cl
.text:000000000001463E                 sar     rax, 6
.text:0000000000014642                 mov     r8, [r8+rax*8]
.text:0000000000014646                 xor     eax, eax
.text:0000000000014648                 bt      r8, rcx
.text:000000000001464C                 jb      loc_145C0
.text:0000000000014652                 rep retn
.text:0000000000014652 ; ---------------------------------------------------------------------------
.text:0000000000014654                 align 8
.text:0000000000014658
.text:0000000000014658 loc_14658:                              ; CODE XREF: check_node_accept+7E↑j
.text:0000000000014658                 and     ebx, 8
.text:000000000001465B                 jz      short loc_145FC
.text:000000000001465D                 test    al, 1
.text:000000000001465F                 jz      short loc_145FC
.text:0000000000014661                 xor     eax, eax
.text:0000000000014663                 pop     rbx
.text:0000000000014664                 retn
.text:0000000000014664 ; ---------------------------------------------------------------------------
.text:0000000000014665                 align 8
.text:0000000000014668
.text:0000000000014668 loc_14668:                              ; CODE XREF: check_node_accept+33↑j
.text:0000000000014668                 mov     rcx, [rdi+98h]
.text:000000000001466F                 xor     eax, eax
.text:0000000000014671                 test    byte ptr [rcx+0D8h], 40h
.text:0000000000014678                 jnz     loc_145C0
.text:000000000001467E                 rep retn
.text:000000000001467E ; } // starts at 14570
.text:000000000001467E check_node_accept endp
.text:000000000001467E
.text:0000000000014680
.text:0000000000014680 ; =============== S U B R O U T I N E =======================================
.text:0000000000014680
.text:0000000000014680
.text:0000000000014680 check_halt_state_context_isra_20 proc near
.text:0000000000014680                                         ; CODE XREF: re_search_internal+8C7↓p
.text:0000000000014680                                         ; re_search_internal+A3C↓p ...
.text:0000000000014680 ; __unwind {
.text:0000000000014680                 push    r12
.text:0000000000014682                 mov     r12, rdx
.text:0000000000014685                 push    rbp
.text:0000000000014686                 push    rbx
.text:0000000000014687                 mov     edx, [rdi+0A0h]
.text:000000000001468D                 mov     rbx, rsi
.text:0000000000014690                 mov     rsi, rcx
.text:0000000000014693                 mov     rbp, rdi
.text:0000000000014696                 call    re_string_context_at
.text:000000000001469B                 test    rbx, rbx
.text:000000000001469E                 jle     loc_14748
.text:00000000000146A4                 mov     rdx, [rbp+98h]
.text:00000000000146AB                 mov     r11d, eax
.text:00000000000146AE                 mov     ebp, eax
.text:00000000000146B0                 and     eax, 1
.text:00000000000146B3                 mov     r9, [r12]
.text:00000000000146B7                 xor     esi, esi
.text:00000000000146B9                 and     ebp, 8
.text:00000000000146BC                 and     r11d, 2
.text:00000000000146C0                 mov     r10d, eax
.text:00000000000146C3                 mov     r8, [rdx]
.text:00000000000146C6                 jmp     short loc_146D9
.text:00000000000146C6 ; ---------------------------------------------------------------------------
.text:00000000000146C8                 align 10h
.text:00000000000146D0
.text:00000000000146D0 loc_146D0:                              ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:00000000000146D0                                         ; check_halt_state_context_isra_20+87↓j ...
.text:00000000000146D0                 add     rsi, 1
.text:00000000000146D4                 cmp     rsi, rbx
.text:00000000000146D7                 jz      short loc_14748
.text:00000000000146D9
.text:00000000000146D9 loc_146D9:                              ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:00000000000146D9                 mov     rax, [r9+rsi*8]
.text:00000000000146DD                 mov     rdx, rax
.text:00000000000146E0                 shl     rdx, 4
.text:00000000000146E4                 add     rdx, r8
.text:00000000000146E7                 mov     ecx, [rdx+8]
.text:00000000000146EA                 shr     ecx, 8
.text:00000000000146ED                 mov     edi, ecx
.text:00000000000146EF                 and     di, 3FFh
.text:00000000000146F4                 cmp     byte ptr [rdx+8], 2
.text:00000000000146F8                 jnz     short loc_146D0
.text:00000000000146FA                 test    di, di
.text:00000000000146FD                 jz      short loc_14725
.text:00000000000146FF                 test    cl, 4
.text:0000000000014702                 jz      short loc_14730
.text:0000000000014704                 test    r10d, r10d
.text:0000000000014707                 jz      short loc_146D0
.text:0000000000014709                 and     ecx, 8
.text:000000000001470C                 jnz     short loc_146D0
.text:000000000001470E
.text:000000000001470E loc_1470E:                              ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:000000000001470E                 test    dil, 20h
.text:0000000000014712                 jz      short loc_14719
.text:0000000000014714
.text:0000000000014714 loc_14714:                              ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:0000000000014714                 test    r11d, r11d
.text:0000000000014717                 jz      short loc_146D0
.text:0000000000014719
.text:0000000000014719 loc_14719:                              ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:0000000000014719                                         ; check_halt_state_context_isra_20+BE↓j
.text:0000000000014719                 and     edi, 80h
.text:000000000001471F                 jz      short loc_14725
.text:0000000000014721                 test    ebp, ebp
.text:0000000000014723                 jz      short loc_146D0
.text:0000000000014725
.text:0000000000014725 loc_14725:                              ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:0000000000014725                                         ; check_halt_state_context_isra_20+9F↑j
.text:0000000000014725                 pop     rbx
.text:0000000000014726                 pop     rbp
.text:0000000000014727                 pop     r12
.text:0000000000014729                 retn
.text:0000000000014729 ; ---------------------------------------------------------------------------
.text:000000000001472A                 align 10h
.text:0000000000014730
.text:0000000000014730 loc_14730:                              ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:0000000000014730                 and     ecx, 8
.text:0000000000014733                 jz      short loc_1470E
.text:0000000000014735                 test    r10d, r10d
.text:0000000000014738                 jnz     short loc_146D0
.text:000000000001473A                 test    dil, 20h
.text:000000000001473E                 jz      short loc_14719
.text:0000000000014740                 jmp     short loc_14714
.text:0000000000014740 ; ---------------------------------------------------------------------------
.text:0000000000014742                 align 8
.text:0000000000014748
.text:0000000000014748 loc_14748:                              ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:0000000000014748                                         ; check_halt_state_context_isra_20+57↑j
.text:0000000000014748                 pop     rbx
.text:0000000000014749                 xor     eax, eax
.text:000000000001474B                 pop     rbp
.text:000000000001474C                 pop     r12
.text:000000000001474E                 retn
.text:000000000001474E ; } // starts at 14680
.text:000000000001474E check_halt_state_context_isra_20 endp
.text:000000000001474E
.text:000000000001474E ; ---------------------------------------------------------------------------
.text:000000000001474F                 align 10h
.text:0000000000014750
.text:0000000000014750 ; =============== S U B R O U T I N E =======================================
.text:0000000000014750
.text:0000000000014750
.text:0000000000014750 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:0000000000014750                                         ; re_search_internal+115B↓p
.text:0000000000014750
.text:0000000000014750 var_78          = qword ptr -78h
.text:0000000000014750 var_6C          = dword ptr -6Ch
.text:0000000000014750 var_68          = qword ptr -68h
.text:0000000000014750 var_60          = qword ptr -60h
.text:0000000000014750 wc              = dword ptr -54h
.text:0000000000014750 var_50          = qword ptr -50h
.text:0000000000014750 var_46          = byte ptr -46h
.text:0000000000014750 var_40          = qword ptr -40h
.text:0000000000014750
.text:0000000000014750 ; __unwind {
.text:0000000000014750                 push    r15
.text:0000000000014752                 push    r14
.text:0000000000014754                 mov     r15, rsi
.text:0000000000014757                 push    r13
.text:0000000000014759                 push    r12
.text:000000000001475B                 mov     r10d, edx
.text:000000000001475E                 push    rbp
.text:000000000001475F                 push    rbx
.text:0000000000014760                 mov     rbp, rsi
.text:0000000000014763                 mov     rbx, rdi
.text:0000000000014766                 sub     rsp, 48h
.text:000000000001476A                 mov     rax, fs:28h
.text:0000000000014773                 mov     [rsp+78h+var_40], rax
.text:0000000000014778                 xor     eax, eax
.text:000000000001477A                 mov     rax, [rdi+28h]
.text:000000000001477E                 sub     rbp, rax
.text:0000000000014781                 cmp     rax, rsi
.text:0000000000014784                 jle     short loc_147E6
.text:0000000000014786                 cmp     dword ptr [rdi+90h], 1
.text:000000000001478D                 jg      loc_148C0
.text:0000000000014793
.text:0000000000014793 loc_14793:                              ; CODE XREF: re_string_reconstruct+178↓j
.text:0000000000014793                 mov     rax, [rbx+50h]
.text:0000000000014797                 mov     qword ptr [rbx+30h], 0
.text:000000000001479F                 mov     rbp, r15
.text:00000000000147A2                 mov     qword ptr [rbx+28h], 0
.text:00000000000147AA                 mov     qword ptr [rbx+38h], 0
.text:00000000000147B2                 mov     byte ptr [rbx+8Ch], 0
.text:00000000000147B9                 mov     [rbx+58h], rax
.text:00000000000147BD                 mov     rax, [rbx+60h]
.text:00000000000147C1                 mov     [rbx+68h], rax
.text:00000000000147C5                 mov     eax, r10d
.text:00000000000147C8                 and     eax, 1
.text:00000000000147CB                 cmp     eax, 1
.text:00000000000147CE                 sbb     eax, eax
.text:00000000000147D0                 and     eax, 2
.text:00000000000147D3                 add     eax, 4
.text:00000000000147D6                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000147DD                 mov     [rbx+70h], eax
.text:00000000000147E0                 jz      loc_148B0
.text:00000000000147E6
.text:00000000000147E6 loc_147E6:                              ; CODE XREF: re_string_reconstruct+34↑j
.text:00000000000147E6                                         ; re_string_reconstruct+167↓j
.text:00000000000147E6                 test    rbp, rbp
.text:00000000000147E9                 jz      short loc_1484E
.text:00000000000147EB                 mov     rax, [rbx+38h]
.text:00000000000147EF                 movzx   edx, byte ptr [rbx+8Ch]
.text:00000000000147F6                 mov     r8, [rbx+30h]
.text:00000000000147FA                 cmp     rax, rbp
.text:00000000000147FD                 jle     loc_14920
.text:0000000000014803                 test    dl, dl
.text:0000000000014805                 jnz     loc_14A18
.text:000000000001480B                 lea     rsi, [rbp-1]
.text:000000000001480F                 mov     edx, r10d
.text:0000000000014812                 mov     rdi, rbx
.text:0000000000014815                 mov     [rsp+78h+var_78], r8
.text:0000000000014819                 call    re_string_context_at
.text:000000000001481E                 mov     r8, [rsp+78h+var_78]
.text:0000000000014822                 mov     [rbx+70h], eax
.text:0000000000014825                 sub     r8, rbp
.text:0000000000014828                 cmp     dword ptr [rbx+90h], 1
.text:000000000001482F                 jg      loc_148D0
.text:0000000000014835
.text:0000000000014835 loc_14835:                              ; CODE XREF: re_string_reconstruct+19C↓j
.text:0000000000014835                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000001483C                 jnz     loc_14BE0
.text:0000000000014842                 sub     [rbx+38h], rbp
.text:0000000000014846                 mov     [rbx+30h], r8
.text:000000000001484A
.text:000000000001484A loc_1484A:                              ; CODE XREF: re_string_reconstruct+47E↓j
.text:000000000001484A                                         ; re_string_reconstruct+6F4↓j
.text:000000000001484A                 add     [rbx+8], rbp
.text:000000000001484E
.text:000000000001484E loc_1484E:                              ; CODE XREF: re_string_reconstruct+99↑j
.text:000000000001484E                                         ; re_string_reconstruct+484↓j
.text:000000000001484E                 mov     rax, [rbx+58h]
.text:0000000000014852                 sub     [rbx+68h], rbp
.text:0000000000014856                 mov     [rbx+28h], r15
.text:000000000001485A                 sub     rax, rbp
.text:000000000001485D                 cmp     dword ptr [rbx+90h], 1
.text:0000000000014864                 mov     [rbx+58h], rax
.text:0000000000014868                 jle     loc_14908
.text:000000000001486E                 cmp     byte ptr [rbx+88h], 0
.text:0000000000014875                 mov     rdi, rbx
.text:0000000000014878                 jz      short loc_148F8
.text:000000000001487A                 call    build_wcs_upper_buffer
.text:000000000001487F                 test    eax, eax
.text:0000000000014881                 jnz     short loc_1488D
.text:0000000000014883
.text:0000000000014883 loc_14883:                              ; CODE XREF: re_string_reconstruct+1AD↓j
.text:0000000000014883                                         ; re_string_reconstruct+1C9↓j ...
.text:0000000000014883                 mov     qword ptr [rbx+48h], 0
.text:000000000001488B                 xor     eax, eax
.text:000000000001488D
.text:000000000001488D loc_1488D:                              ; CODE XREF: re_string_reconstruct+131↑j
.text:000000000001488D                 mov     rcx, [rsp+78h+var_40]
.text:0000000000014892                 xor     rcx, fs:28h
.text:000000000001489B                 jnz     loc_14EEA
.text:00000000000148A1                 add     rsp, 48h
.text:00000000000148A5                 pop     rbx
.text:00000000000148A6                 pop     rbp
.text:00000000000148A7                 pop     r12
.text:00000000000148A9                 pop     r13
.text:00000000000148AB                 pop     r14
.text:00000000000148AD                 pop     r15
.text:00000000000148AF                 retn
.text:00000000000148B0 ; ---------------------------------------------------------------------------
.text:00000000000148B0
.text:00000000000148B0 loc_148B0:                              ; CODE XREF: re_string_reconstruct+90↑j
.text:00000000000148B0                 mov     rax, [rbx]
.text:00000000000148B3                 mov     [rbx+8], rax
.text:00000000000148B7                 jmp     loc_147E6
.text:00000000000148B7 ; ---------------------------------------------------------------------------
.text:00000000000148BC                 align 20h
.text:00000000000148C0
.text:00000000000148C0 loc_148C0:                              ; CODE XREF: re_string_reconstruct+3D↑j
.text:00000000000148C0                 mov     qword ptr [rdi+20h], 0
.text:00000000000148C8                 jmp     loc_14793
.text:00000000000148C8 ; ---------------------------------------------------------------------------
.text:00000000000148CD                 align 10h
.text:00000000000148D0
.text:00000000000148D0 loc_148D0:                              ; CODE XREF: re_string_reconstruct+DF↑j
.text:00000000000148D0                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000148D4                 lea     rdx, ds:0[r8*4] ; n
.text:00000000000148DC                 lea     rsi, [rdi+rbp*4] ; src
.text:00000000000148E0                 call    _memmove
.text:00000000000148E5                 mov     r8, [rbx+30h]
.text:00000000000148E9                 sub     r8, rbp
.text:00000000000148EC                 jmp     loc_14835
.text:00000000000148EC ; ---------------------------------------------------------------------------
.text:00000000000148F1                 align 8
.text:00000000000148F8
.text:00000000000148F8 loc_148F8:                              ; CODE XREF: re_string_reconstruct+128↑j
.text:00000000000148F8                 call    build_wcs_buffer
.text:00000000000148FD                 jmp     loc_14883
.text:00000000000148FD ; ---------------------------------------------------------------------------
.text:0000000000014902                 align 8
.text:0000000000014908
.text:0000000000014908 loc_14908:                              ; CODE XREF: re_string_reconstruct+118↑j
.text:0000000000014908                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000001490F                 jnz     loc_14CC0
.text:0000000000014915                 mov     [rbx+30h], rax
.text:0000000000014919                 jmp     loc_14883
.text:0000000000014919 ; ---------------------------------------------------------------------------
.text:000000000001491E                 align 20h
.text:0000000000014920
.text:0000000000014920 loc_14920:                              ; CODE XREF: re_string_reconstruct+AD↑j
.text:0000000000014920                 test    dl, dl
.text:0000000000014922                 jnz     loc_14DCD
.text:0000000000014928
.text:0000000000014928 loc_14928:                              ; CODE XREF: re_string_reconstruct+6A0↓j
.text:0000000000014928                 movsxd  rdx, dword ptr [rbx+90h]
.text:000000000001492F                 mov     qword ptr [rbx+30h], 0
.text:0000000000014937                 mov     r11, [rbx+28h]
.text:000000000001493B                 cmp     edx, 1
.text:000000000001493E                 jle     loc_14D28
.text:0000000000014944                 cmp     byte ptr [rbx+89h], 0
.text:000000000001494B                 jnz     loc_14C08
.text:0000000000014951
.text:0000000000014951 loc_14951:                              ; CODE XREF: re_string_reconstruct+4DC↓j
.text:0000000000014951                                         ; re_string_reconstruct+4EF↓j ...
.text:0000000000014951                 lea     r14, [r11+rax]
.text:0000000000014955                 cmp     r15, r14
.text:0000000000014958                 jle     loc_14D9F
.text:000000000001495E                 lea     rax, [rbx+20h]
.text:0000000000014962                 lea     r13, [rsp+78h+wc]
.text:0000000000014967                 mov     [rsp+78h+var_68], rax
.text:000000000001496C                 nop     dword ptr [rax+00h]
.text:0000000000014970
.text:0000000000014970 loc_14970:                              ; CODE XREF: re_string_reconstruct+270↓j
.text:0000000000014970                 mov     r12, [rbx+50h]
.text:0000000000014974                 mov     rsi, [rbx]
.text:0000000000014977                 mov     rdi, r13
.text:000000000001497A                 mov     rax, [rbx+20h]
.text:000000000001497E                 mov     rcx, [rsp+78h+var_68]
.text:0000000000014983                 mov     [rsp+78h+var_6C], r10d
.text:0000000000014988                 mov     [rsp+78h+var_78], r8
.text:000000000001498C                 sub     r12, r14
.text:000000000001498F                 add     rsi, r14
.text:0000000000014992                 mov     rdx, r12
.text:0000000000014995                 mov     [rsp+78h+var_60], rax
.text:000000000001499A                 call    rpl_mbrtowc
.text:000000000001499F                 lea     rcx, [rax-1]
.text:00000000000149A3                 mov     edx, [rsp+78h+wc]
.text:00000000000149A7                 mov     r8, [rsp+78h+var_78]
.text:00000000000149AB                 mov     r10d, [rsp+78h+var_6C]
.text:00000000000149B0                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:00000000000149B4                 ja      loc_14DF5
.text:00000000000149BA
.text:00000000000149BA loc_149BA:                              ; CODE XREF: re_string_reconstruct+6C5↓j
.text:00000000000149BA                 add     r14, rax
.text:00000000000149BD                 cmp     r15, r14
.text:00000000000149C0                 jg      short loc_14970
.text:00000000000149C2                 sub     r14, r15
.text:00000000000149C5                 cmp     edx, 0FFFFFFFFh
.text:00000000000149C8                 mov     r12, r14
.text:00000000000149CB                 mov     [rbx+30h], r14
.text:00000000000149CF                 jz      loc_14DA9
.text:00000000000149D5
.text:00000000000149D5 loc_149D5:                              ; CODE XREF: re_string_reconstruct+73A↓j
.text:00000000000149D5                 cmp     byte ptr [rbx+8Eh], 0
.text:00000000000149DC                 jnz     loc_14E49
.text:00000000000149E2
.text:00000000000149E2 loc_149E2:                              ; CODE XREF: re_string_reconstruct+70D↓j
.text:00000000000149E2                 xor     eax, eax
.text:00000000000149E4                 cmp     edx, 0Ah
.text:00000000000149E7                 jnz     short loc_149F7
.text:00000000000149E9                 xor     eax, eax
.text:00000000000149EB                 cmp     byte ptr [rbx+8Dh], 0
.text:00000000000149F2                 setnz   al
.text:00000000000149F5                 add     eax, eax
.text:00000000000149F7
.text:00000000000149F7 loc_149F7:                              ; CODE XREF: re_string_reconstruct+297↑j
.text:00000000000149F7                                         ; re_string_reconstruct+718↓j
.text:00000000000149F7                 mov     [rbx+70h], eax
.text:00000000000149FA
.text:00000000000149FA loc_149FA:                              ; CODE XREF: re_string_reconstruct+66B↓j
.text:00000000000149FA                 cmp     r12, 0
.text:00000000000149FE                 jnz     loc_14E1A
.text:0000000000014A04
.text:0000000000014A04 loc_14A04:                              ; CODE XREF: re_string_reconstruct+75D↓j
.text:0000000000014A04                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000014A0B                 mov     [rbx+38h], r12
.text:0000000000014A0F                 jmp     loc_14BCC
.text:0000000000014A0F ; ---------------------------------------------------------------------------
.text:0000000000014A14                 align 8
.text:0000000000014A18
.text:0000000000014A18 loc_14A18:                              ; CODE XREF: re_string_reconstruct+B5↑j
.text:0000000000014A18                 mov     r14, [rbx+18h]
.text:0000000000014A1C                 mov     rcx, r8
.text:0000000000014A1F                 xor     esi, esi
.text:0000000000014A21                 jmp     short loc_14A33
.text:0000000000014A21 ; ---------------------------------------------------------------------------
.text:0000000000014A23                 align 8
.text:0000000000014A28
.text:0000000000014A28 loc_14A28:                              ; CODE XREF: re_string_reconstruct+2FE↓j
.text:0000000000014A28                 jge     short loc_14A63
.text:0000000000014A2A                 lea     rsi, [rax+1]
.text:0000000000014A2E
.text:0000000000014A2E loc_14A2E:                              ; CODE XREF: re_string_reconstruct+303↓j
.text:0000000000014A2E                 cmp     rsi, rcx
.text:0000000000014A31                 jge     short loc_14A58
.text:0000000000014A33
.text:0000000000014A33 loc_14A33:                              ; CODE XREF: re_string_reconstruct+2D1↑j
.text:0000000000014A33                 lea     rdx, [rsi+rcx]
.text:0000000000014A37                 mov     rax, rdx
.text:0000000000014A3A                 shr     rax, 3Fh
.text:0000000000014A3E                 add     rax, rdx
.text:0000000000014A41                 sar     rax, 1
.text:0000000000014A44                 mov     rdx, [r14+rax*8]
.text:0000000000014A48                 mov     r12, rax
.text:0000000000014A4B                 cmp     rdx, rbp
.text:0000000000014A4E                 jle     short loc_14A28
.text:0000000000014A50                 mov     rcx, rax
.text:0000000000014A53                 jmp     short loc_14A2E
.text:0000000000014A53 ; ---------------------------------------------------------------------------
.text:0000000000014A55                 align 8
.text:0000000000014A58
.text:0000000000014A58 loc_14A58:                              ; CODE XREF: re_string_reconstruct+2E1↑j
.text:0000000000014A58                 lea     r12, [rax+1]
.text:0000000000014A5C                 cmp     rdx, rbp
.text:0000000000014A5F                 cmovge  r12, rax
.text:0000000000014A63
.text:0000000000014A63 loc_14A63:                              ; CODE XREF: re_string_reconstruct:loc_14A28↑j
.text:0000000000014A63                 lea     r13, [r12-1]
.text:0000000000014A68                 mov     edx, r10d
.text:0000000000014A6B                 mov     rdi, rbx
.text:0000000000014A6E                 mov     [rsp+78h+var_78], r8
.text:0000000000014A72                 mov     rsi, r13
.text:0000000000014A75                 call    re_string_context_at
.text:0000000000014A7A                 cmp     rbp, r12
.text:0000000000014A7D                 mov     [rbx+70h], eax
.text:0000000000014A80                 mov     r8, [rsp+78h+var_78]
.text:0000000000014A84                 jnz     loc_14B08
.text:0000000000014A8A                 cmp     rbp, r8
.text:0000000000014A8D                 jge     short loc_14B08
.text:0000000000014A8F                 cmp     [r14+r12*8], rbp
.text:0000000000014A93                 jnz     short loc_14B08
.text:0000000000014A95                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000014A99                 sub     r8, rbp
.text:0000000000014A9C                 lea     rdx, ds:0[r8*4] ; n
.text:0000000000014AA4                 lea     rsi, [rdi+rbp*4] ; src
.text:0000000000014AA8                 call    _memmove
.text:0000000000014AAD                 mov     rdi, [rbx+8]    ; dest
.text:0000000000014AB1                 mov     rdx, [rbx+30h]
.text:0000000000014AB5                 lea     rsi, [rdi+rbp]  ; src
.text:0000000000014AB9                 sub     rdx, rbp        ; n
.text:0000000000014ABC                 call    _memmove
.text:0000000000014AC1                 mov     rax, [rbx+30h]
.text:0000000000014AC5                 sub     [rbx+38h], rbp
.text:0000000000014AC9                 sub     rax, rbp
.text:0000000000014ACC                 test    rax, rax
.text:0000000000014ACF                 mov     [rbx+30h], rax
.text:0000000000014AD3                 jle     short loc_14AF8
.text:0000000000014AD5                 mov     rcx, [rbx+18h]
.text:0000000000014AD9                 xor     eax, eax
.text:0000000000014ADB                 lea     rsi, [rcx+rbp*8]
.text:0000000000014ADF                 nop
.text:0000000000014AE0
.text:0000000000014AE0 loc_14AE0:                              ; CODE XREF: re_string_reconstruct+3A3↓j
.text:0000000000014AE0                 mov     rdx, [rsi+rax*8]
.text:0000000000014AE4                 sub     rdx, rbp
.text:0000000000014AE7                 mov     [rcx+rax*8], rdx
.text:0000000000014AEB                 add     rax, 1
.text:0000000000014AEF                 cmp     [rbx+30h], rax
.text:0000000000014AF3                 jg      short loc_14AE0
.text:0000000000014AF5                 nop     dword ptr [rax]
.text:0000000000014AF8
.text:0000000000014AF8 loc_14AF8:                              ; CODE XREF: re_string_reconstruct+383↑j
.text:0000000000014AF8                                         ; re_string_reconstruct+633↓j
.text:0000000000014AF8                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000014AFF                 jmp     loc_14BCC
.text:0000000000014AFF ; ---------------------------------------------------------------------------
.text:0000000000014B04                 align 8
.text:0000000000014B08
.text:0000000000014B08 loc_14B08:                              ; CODE XREF: re_string_reconstruct+334↑j
.text:0000000000014B08                                         ; re_string_reconstruct+33D↑j ...
.text:0000000000014B08                 mov     rax, [rbx+50h]
.text:0000000000014B0C                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000014B13                 add     rax, rbp
.text:0000000000014B16                 sub     rax, r15
.text:0000000000014B19                 mov     [rbx+58h], rax
.text:0000000000014B1D                 mov     rax, [rbx+60h]
.text:0000000000014B21                 add     rax, rbp
.text:0000000000014B24                 sub     rax, r15
.text:0000000000014B27                 test    r12, r12
.text:0000000000014B2A                 mov     [rbx+68h], rax
.text:0000000000014B2E                 jle     short loc_14B53
.text:0000000000014B30                 cmp     [r14+r12*8-8], rbp
.text:0000000000014B35                 jz      short loc_14B4B
.text:0000000000014B37                 jmp     short loc_14B53
.text:0000000000014B37 ; ---------------------------------------------------------------------------
.text:0000000000014B39                 align 20h
.text:0000000000014B40
.text:0000000000014B40 loc_14B40:                              ; CODE XREF: re_string_reconstruct+401↓j
.text:0000000000014B40                 cmp     [r14+r13*8-8], rbp
.text:0000000000014B45                 jnz     short loc_14B53
.text:0000000000014B47                 sub     r13, 1
.text:0000000000014B4B
.text:0000000000014B4B loc_14B4B:                              ; CODE XREF: re_string_reconstruct+3E5↑j
.text:0000000000014B4B                 test    r13, r13
.text:0000000000014B4E                 mov     r12, r13
.text:0000000000014B51                 jnz     short loc_14B40
.text:0000000000014B53
.text:0000000000014B53 loc_14B53:                              ; CODE XREF: re_string_reconstruct+3DE↑j
.text:0000000000014B53                                         ; re_string_reconstruct+3E7↑j ...
.text:0000000000014B53                 cmp     r12, r8
.text:0000000000014B56                 jge     loc_14D88
.text:0000000000014B5C                 mov     rax, [rbx+10h]
.text:0000000000014B60                 jmp     short loc_14B75
.text:0000000000014B60 ; ---------------------------------------------------------------------------
.text:0000000000014B62                 align 8
.text:0000000000014B68
.text:0000000000014B68 loc_14B68:                              ; CODE XREF: re_string_reconstruct+42A↓j
.text:0000000000014B68                 add     r12, 1
.text:0000000000014B6C                 cmp     r12, r8
.text:0000000000014B6F                 jz      loc_14D90
.text:0000000000014B75
.text:0000000000014B75 loc_14B75:                              ; CODE XREF: re_string_reconstruct+410↑j
.text:0000000000014B75                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:0000000000014B7A                 jz      short loc_14B68
.text:0000000000014B7C
.text:0000000000014B7C loc_14B7C:                              ; CODE XREF: re_string_reconstruct:loc_14D88↓j
.text:0000000000014B7C                 mov     rdx, [r14+r12*8]
.text:0000000000014B80                 sub     rdx, rbp        ; n
.text:0000000000014B83                 cmp     rdx, 0
.text:0000000000014B87                 mov     [rbx+30h], rdx
.text:0000000000014B8B                 jz      short loc_14BC1
.text:0000000000014B8D                 jle     short loc_14BAF
.text:0000000000014B8F                 mov     rax, [rbx+10h]
.text:0000000000014B93                 lea     rcx, [rax+rdx*4]
.text:0000000000014B97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014BA0
.text:0000000000014BA0 loc_14BA0:                              ; CODE XREF: re_string_reconstruct+45D↓j
.text:0000000000014BA0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000014BA6                 add     rax, 4
.text:0000000000014BAA                 cmp     rcx, rax
.text:0000000000014BAD                 jnz     short loc_14BA0
.text:0000000000014BAF
.text:0000000000014BAF loc_14BAF:                              ; CODE XREF: re_string_reconstruct+43D↑j
.text:0000000000014BAF                 mov     rdi, [rbx+8]    ; s
.text:0000000000014BB3                 mov     esi, 0FFh       ; c
.text:0000000000014BB8                 call    _memset
.text:0000000000014BBD                 mov     rdx, [rbx+30h]
.text:0000000000014BC1
.text:0000000000014BC1 loc_14BC1:                              ; CODE XREF: re_string_reconstruct+43B↑j
.text:0000000000014BC1                                         ; re_string_reconstruct+64A↓j
.text:0000000000014BC1                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000014BC8                 mov     [rbx+38h], rdx
.text:0000000000014BCC
.text:0000000000014BCC loc_14BCC:                              ; CODE XREF: re_string_reconstruct+2BF↑j
.text:0000000000014BCC                                         ; re_string_reconstruct+3AF↑j ...
.text:0000000000014BCC                 test    al, al
.text:0000000000014BCE                 jz      loc_1484A
.text:0000000000014BD4                 jmp     loc_1484E
.text:0000000000014BD4 ; ---------------------------------------------------------------------------
.text:0000000000014BD9                 align 20h
.text:0000000000014BE0
.text:0000000000014BE0 loc_14BE0:                              ; CODE XREF: re_string_reconstruct+EC↑j
.text:0000000000014BE0                 mov     rdi, [rbx+8]    ; dest
.text:0000000000014BE4                 mov     rdx, r8         ; n
.text:0000000000014BE7                 lea     rsi, [rdi+rbp]  ; src
.text:0000000000014BEB                 call    _memmove
.text:0000000000014BF0                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000014BF7                 sub     [rbx+30h], rbp
.text:0000000000014BFB                 sub     [rbx+38h], rbp
.text:0000000000014BFF                 jmp     short loc_14BCC
.text:0000000000014BFF ; ---------------------------------------------------------------------------
.text:0000000000014C01                 align 8
.text:0000000000014C08
.text:0000000000014C08 loc_14C08:                              ; CODE XREF: re_string_reconstruct+1FB↑j
.text:0000000000014C08                 mov     rcx, [rbx]
.text:0000000000014C0B                 mov     rdi, rbp
.text:0000000000014C0E                 sub     rdi, rdx
.text:0000000000014C11                 mov     rdx, rdi
.text:0000000000014C14                 lea     r12, [rcx+r11]
.text:0000000000014C18                 add     rdx, r12
.text:0000000000014C1B                 lea     rsi, [r12+rbp-1]
.text:0000000000014C20                 cmp     rcx, rdx
.text:0000000000014C23                 cmovb   rcx, rdx
.text:0000000000014C27                 cmp     rcx, rsi
.text:0000000000014C2A                 jbe     short loc_14C45
.text:0000000000014C2C                 jmp     loc_14951
.text:0000000000014C2C ; ---------------------------------------------------------------------------
.text:0000000000014C31                 align 8
.text:0000000000014C38
.text:0000000000014C38 loc_14C38:                              ; CODE XREF: re_string_reconstruct+4FE↓j
.text:0000000000014C38                 sub     rsi, 1
.text:0000000000014C3C                 cmp     rcx, rsi
.text:0000000000014C3F                 ja      loc_14951
.text:0000000000014C45
.text:0000000000014C45 loc_14C45:                              ; CODE XREF: re_string_reconstruct+4DA↑j
.text:0000000000014C45                 movzx   edx, byte ptr [rsi]
.text:0000000000014C48                 and     edx, 0FFFFFFC0h
.text:0000000000014C4B                 cmp     dl, 80h
.text:0000000000014C4E                 jz      short loc_14C38
.text:0000000000014C50                 mov     rdx, [rbx+58h]
.text:0000000000014C54                 mov     rcx, [rbx+78h]
.text:0000000000014C58                 mov     r14, rsi
.text:0000000000014C5B                 add     rdx, r12
.text:0000000000014C5E                 sub     rdx, rsi
.text:0000000000014C61                 test    rcx, rcx
.text:0000000000014C64                 jnz     loc_14EB2
.text:0000000000014C6A
.text:0000000000014C6A loc_14C6A:                              ; CODE XREF: re_string_reconstruct+795↓j
.text:0000000000014C6A                 lea     r13, [rsp+78h+wc]
.text:0000000000014C6F                 add     r12, rbp
.text:0000000000014C72                 lea     rcx, [rsp+78h+var_50]
.text:0000000000014C77                 sub     r12, r14
.text:0000000000014C7A                 mov     [rsp+78h+var_6C], r10d
.text:0000000000014C7F                 mov     [rsp+78h+var_78], r8
.text:0000000000014C83                 mov     rdi, r13
.text:0000000000014C86                 mov     [rsp+78h+var_50], 0
.text:0000000000014C8F                 call    rpl_mbrtowc
.text:0000000000014C94                 cmp     r12, rax
.text:0000000000014C97                 mov     r8, [rsp+78h+var_78]
.text:0000000000014C9B                 mov     r10d, [rsp+78h+var_6C]
.text:0000000000014CA0                 ja      short loc_14CAC
.text:0000000000014CA2                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000014CA6                 jbe     loc_14E71
.text:0000000000014CAC
.text:0000000000014CAC loc_14CAC:                              ; CODE XREF: re_string_reconstruct+550↑j
.text:0000000000014CAC                                         ; re_string_reconstruct+740↓j
.text:0000000000014CAC                 mov     r11, [rbx+28h]
.text:0000000000014CB0                 mov     rax, [rbx+38h]
.text:0000000000014CB4                 jmp     loc_14951
.text:0000000000014CB4 ; ---------------------------------------------------------------------------
.text:0000000000014CB9                 align 20h
.text:0000000000014CC0
.text:0000000000014CC0 loc_14CC0:                              ; CODE XREF: re_string_reconstruct+1BF↑j
.text:0000000000014CC0                 cmp     byte ptr [rbx+88h], 0
.text:0000000000014CC7                 jnz     loc_14DC0
.text:0000000000014CCD                 mov     rcx, [rbx+78h]
.text:0000000000014CD1                 test    rcx, rcx
.text:0000000000014CD4                 jz      loc_14883
.text:0000000000014CDA                 cmp     [rbx+40h], rax
.text:0000000000014CDE                 mov     rdx, [rbx+30h]
.text:0000000000014CE2                 cmovle  rax, [rbx+40h]
.text:0000000000014CE7                 cmp     rax, rdx
.text:0000000000014CEA                 jg      short loc_14CF8
.text:0000000000014CEC                 jmp     short loc_14D18
.text:0000000000014CEC ; ---------------------------------------------------------------------------
.text:0000000000014CEE                 align 10h
.text:0000000000014CF0
.text:0000000000014CF0 loc_14CF0:                              ; CODE XREF: re_string_reconstruct+5C6↓j
.text:0000000000014CF0                 mov     r15, [rbx+28h]
.text:0000000000014CF4                 mov     rcx, [rbx+78h]
.text:0000000000014CF8
.text:0000000000014CF8 loc_14CF8:                              ; CODE XREF: re_string_reconstruct+59A↑j
.text:0000000000014CF8                 mov     rsi, [rbx]
.text:0000000000014CFB                 add     rsi, rdx
.text:0000000000014CFE                 movzx   esi, byte ptr [rsi+r15]
.text:0000000000014D03                 movzx   esi, byte ptr [rcx+rsi]
.text:0000000000014D07                 mov     rcx, [rbx+8]
.text:0000000000014D0B                 mov     [rcx+rdx], sil
.text:0000000000014D0F                 add     rdx, 1
.text:0000000000014D13                 cmp     rax, rdx
.text:0000000000014D16                 jnz     short loc_14CF0
.text:0000000000014D18
.text:0000000000014D18 loc_14D18:                              ; CODE XREF: re_string_reconstruct+59C↑j
.text:0000000000014D18                 mov     [rbx+30h], rdx
.text:0000000000014D1C                 mov     [rbx+38h], rdx
.text:0000000000014D20                 jmp     loc_14883
.text:0000000000014D20 ; ---------------------------------------------------------------------------
.text:0000000000014D25                 align 8
.text:0000000000014D28
.text:0000000000014D28 loc_14D28:                              ; CODE XREF: re_string_reconstruct+1EE↑j
.text:0000000000014D28                 mov     rax, [rbx]
.text:0000000000014D2B                 mov     rdx, [rbx+78h]
.text:0000000000014D2F                 add     rax, rbp
.text:0000000000014D32                 test    rdx, rdx
.text:0000000000014D35                 movzx   eax, byte ptr [r11+rax-1]
.text:0000000000014D3B                 mov     qword ptr [rbx+38h], 0
.text:0000000000014D43                 jz      short loc_14D49
.text:0000000000014D45                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000014D49
.text:0000000000014D49 loc_14D49:                              ; CODE XREF: re_string_reconstruct+5F3↑j
.text:0000000000014D49                 mov     rcx, [rbx+80h]
.text:0000000000014D50                 movzx   edx, al
.text:0000000000014D53                 sar     rdx, 6
.text:0000000000014D57                 mov     rcx, [rcx+rdx*8]
.text:0000000000014D5B                 mov     edx, 1
.text:0000000000014D60                 bt      rcx, rax
.text:0000000000014D64                 jb      short loc_14D80
.text:0000000000014D66                 xor     edx, edx
.text:0000000000014D68                 cmp     al, 0Ah
.text:0000000000014D6A                 jnz     short loc_14D80
.text:0000000000014D6C                 xor     edx, edx
.text:0000000000014D6E                 cmp     byte ptr [rbx+8Dh], 0
.text:0000000000014D75                 setnz   dl
.text:0000000000014D78                 add     edx, edx
.text:0000000000014D7A                 nop     word ptr [rax+rax+00h]
.text:0000000000014D80
.text:0000000000014D80 loc_14D80:                              ; CODE XREF: re_string_reconstruct+614↑j
.text:0000000000014D80                                         ; re_string_reconstruct+61A↑j
.text:0000000000014D80                 mov     [rbx+70h], edx
.text:0000000000014D83                 jmp     loc_14AF8
.text:0000000000014D88 ; ---------------------------------------------------------------------------
.text:0000000000014D88
.text:0000000000014D88 loc_14D88:                              ; CODE XREF: re_string_reconstruct+406↑j
.text:0000000000014D88                 jnz     loc_14B7C
.text:0000000000014D8E                 xchg    ax, ax
.text:0000000000014D90
.text:0000000000014D90 loc_14D90:                              ; CODE XREF: re_string_reconstruct+41F↑j
.text:0000000000014D90                 mov     qword ptr [rbx+30h], 0
.text:0000000000014D98                 xor     edx, edx
.text:0000000000014D9A                 jmp     loc_14BC1
.text:0000000000014D9F ; ---------------------------------------------------------------------------
.text:0000000000014D9F
.text:0000000000014D9F loc_14D9F:                              ; CODE XREF: re_string_reconstruct+208↑j
.text:0000000000014D9F                 sub     r14, r15
.text:0000000000014DA2                 mov     r12, r14
.text:0000000000014DA5                 mov     [rbx+30h], r14
.text:0000000000014DA9
.text:0000000000014DA9 loc_14DA9:                              ; CODE XREF: re_string_reconstruct+27F↑j
.text:0000000000014DA9                 lea     rsi, [r8-1]
.text:0000000000014DAD                 mov     edx, r10d
.text:0000000000014DB0                 mov     rdi, rbx
.text:0000000000014DB3                 call    re_string_context_at
.text:0000000000014DB8                 mov     [rbx+70h], eax
.text:0000000000014DBB                 jmp     loc_149FA
.text:0000000000014DC0 ; ---------------------------------------------------------------------------
.text:0000000000014DC0
.text:0000000000014DC0 loc_14DC0:                              ; CODE XREF: re_string_reconstruct+577↑j
.text:0000000000014DC0                 mov     rdi, rbx
.text:0000000000014DC3                 call    build_upper_buffer
.text:0000000000014DC8                 jmp     loc_14883
.text:0000000000014DCD ; ---------------------------------------------------------------------------
.text:0000000000014DCD
.text:0000000000014DCD loc_14DCD:                              ; CODE XREF: re_string_reconstruct+1D2↑j
.text:0000000000014DCD                 mov     rdx, [rbx+50h]
.text:0000000000014DD1                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000014DD8                 add     rdx, rbp
.text:0000000000014DDB                 sub     rdx, r15
.text:0000000000014DDE                 mov     [rbx+58h], rdx
.text:0000000000014DE2                 mov     rdx, [rbx+60h]
.text:0000000000014DE6                 add     rdx, rbp
.text:0000000000014DE9                 sub     rdx, r15
.text:0000000000014DEC                 mov     [rbx+68h], rdx
.text:0000000000014DF0                 jmp     loc_14928
.text:0000000000014DF5 ; ---------------------------------------------------------------------------
.text:0000000000014DF5
.text:0000000000014DF5 loc_14DF5:                              ; CODE XREF: re_string_reconstruct+264↑j
.text:0000000000014DF5                 test    rax, rax
.text:0000000000014DF8                 jz      short loc_14E6D
.text:0000000000014DFA                 test    r12, r12
.text:0000000000014DFD                 jz      short loc_14E6D
.text:0000000000014DFF                 mov     rax, [rbx]
.text:0000000000014E02                 movzx   edx, byte ptr [rax+r14]
.text:0000000000014E07
.text:0000000000014E07 loc_14E07:                              ; CODE XREF: re_string_reconstruct+71F↓j
.text:0000000000014E07                 mov     rax, [rsp+78h+var_60]
.text:0000000000014E0C                 mov     [rbx+20h], rax
.text:0000000000014E10                 mov     eax, 1
.text:0000000000014E15                 jmp     loc_149BA
.text:0000000000014E1A ; ---------------------------------------------------------------------------
.text:0000000000014E1A
.text:0000000000014E1A loc_14E1A:                              ; CODE XREF: re_string_reconstruct+2AE↑j
.text:0000000000014E1A                 jle     short loc_14E37
.text:0000000000014E1C                 mov     rax, [rbx+10h]
.text:0000000000014E20                 lea     rdx, [rax+r12*4]
.text:0000000000014E24                 nop     dword ptr [rax+00h]
.text:0000000000014E28
.text:0000000000014E28 loc_14E28:                              ; CODE XREF: re_string_reconstruct+6E5↓j
.text:0000000000014E28                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000014E2E                 add     rax, 4
.text:0000000000014E32                 cmp     rdx, rax
.text:0000000000014E35                 jnz     short loc_14E28
.text:0000000000014E37
.text:0000000000014E37 loc_14E37:                              ; CODE XREF: re_string_reconstruct:loc_14E1A↑j
.text:0000000000014E37                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000014E3E                 jnz     short loc_14E98
.text:0000000000014E40                 mov     [rbx+38h], r12
.text:0000000000014E44                 jmp     loc_1484A
.text:0000000000014E49 ; ---------------------------------------------------------------------------
.text:0000000000014E49
.text:0000000000014E49 loc_14E49:                              ; CODE XREF: re_string_reconstruct+28C↑j
.text:0000000000014E49                 mov     edi, edx        ; wc
.text:0000000000014E4B                 mov     dword ptr [rsp+78h+var_78], edx
.text:0000000000014E4E                 call    _iswalnum
.text:0000000000014E53                 test    eax, eax
.text:0000000000014E55                 jnz     short loc_14E63
.text:0000000000014E57                 mov     edx, dword ptr [rsp+78h+var_78]
.text:0000000000014E5A                 cmp     edx, 5Fh ; '_'
.text:0000000000014E5D                 jnz     loc_149E2
.text:0000000000014E63
.text:0000000000014E63 loc_14E63:                              ; CODE XREF: re_string_reconstruct+705↑j
.text:0000000000014E63                 mov     eax, 1
.text:0000000000014E68                 jmp     loc_149F7
.text:0000000000014E6D ; ---------------------------------------------------------------------------
.text:0000000000014E6D
.text:0000000000014E6D loc_14E6D:                              ; CODE XREF: re_string_reconstruct+6A8↑j
.text:0000000000014E6D                                         ; re_string_reconstruct+6AD↑j
.text:0000000000014E6D                 xor     edx, edx
.text:0000000000014E6F                 jmp     short loc_14E07
.text:0000000000014E71 ; ---------------------------------------------------------------------------
.text:0000000000014E71
.text:0000000000014E71 loc_14E71:                              ; CODE XREF: re_string_reconstruct+556↑j
.text:0000000000014E71                 mov     edx, [rsp+78h+wc]
.text:0000000000014E75                 sub     rax, r12
.text:0000000000014E78                 mov     qword ptr [rbx+20h], 0
.text:0000000000014E80                 mov     r12, rax
.text:0000000000014E83                 mov     [rbx+30h], rax
.text:0000000000014E87                 cmp     edx, 0FFFFFFFFh
.text:0000000000014E8A                 jnz     loc_149D5
.text:0000000000014E90                 jmp     loc_14CAC
.text:0000000000014E90 ; ---------------------------------------------------------------------------
.text:0000000000014E95                 align 8
.text:0000000000014E98
.text:0000000000014E98 loc_14E98:                              ; CODE XREF: re_string_reconstruct+6EE↑j
.text:0000000000014E98                 mov     rdi, [rbx+8]    ; s
.text:0000000000014E9C                 mov     rdx, r12        ; n
.text:0000000000014E9F                 mov     esi, 0FFh       ; c
.text:0000000000014EA4                 call    _memset
.text:0000000000014EA9                 mov     r12, [rbx+30h]
.text:0000000000014EAD                 jmp     loc_14A04
.text:0000000000014EB2 ; ---------------------------------------------------------------------------
.text:0000000000014EB2
.text:0000000000014EB2 loc_14EB2:                              ; CODE XREF: re_string_reconstruct+514↑j
.text:0000000000014EB2                 cmp     rdx, 6
.text:0000000000014EB6                 mov     edi, 6
.text:0000000000014EBB                 lea     r11, [rsp+78h+var_46]
.text:0000000000014EC0                 cmovle  rdi, rdx
.text:0000000000014EC4                 sub     edi, 1
.text:0000000000014EC7                 test    edi, edi
.text:0000000000014EC9                 movsxd  rax, edi
.text:0000000000014ECC                 js      short loc_14EE2
.text:0000000000014ECE
.text:0000000000014ECE loc_14ECE:                              ; CODE XREF: re_string_reconstruct+790↓j
.text:0000000000014ECE                 movzx   edi, byte ptr [rsi+rax]
.text:0000000000014ED2                 movzx   edi, byte ptr [rcx+rdi]
.text:0000000000014ED6                 mov     [r11+rax], dil
.text:0000000000014EDA                 sub     rax, 1
.text:0000000000014EDE                 test    eax, eax
.text:0000000000014EE0                 jns     short loc_14ECE
.text:0000000000014EE2
.text:0000000000014EE2 loc_14EE2:                              ; CODE XREF: re_string_reconstruct+77C↑j
.text:0000000000014EE2                 mov     rsi, r11
.text:0000000000014EE5                 jmp     loc_14C6A
.text:0000000000014EEA ; ---------------------------------------------------------------------------
.text:0000000000014EEA
.text:0000000000014EEA loc_14EEA:                              ; CODE XREF: re_string_reconstruct+14B↑j
.text:0000000000014EEA                 call    ___stack_chk_fail
.text:0000000000014EEA ; } // starts at 14750
.text:0000000000014EEA re_string_reconstruct endp
.text:0000000000014EEA
.text:0000000000014EEA ; ---------------------------------------------------------------------------
.text:0000000000014EEF                 align 10h
.text:0000000000014EF0
.text:0000000000014EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014EF0
.text:0000000000014EF0
.text:0000000000014EF0 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:0000000000014EF0                                         ; update_cur_sifted_state+50A↓p ...
.text:0000000000014EF0
.text:0000000000014EF0 var_78          = qword ptr -78h
.text:0000000000014EF0 var_70          = qword ptr -70h
.text:0000000000014EF0 var_68          = qword ptr -68h
.text:0000000000014EF0 var_60          = qword ptr -60h
.text:0000000000014EF0 var_58          = xmmword ptr -58h
.text:0000000000014EF0 ptr             = qword ptr -48h
.text:0000000000014EF0 var_40          = qword ptr -40h
.text:0000000000014EF0
.text:0000000000014EF0 ; __unwind {
.text:0000000000014EF0                 push    r15
.text:0000000000014EF2                 push    r14
.text:0000000000014EF4                 mov     r14, rdx
.text:0000000000014EF7                 push    r13
.text:0000000000014EF9                 push    r12
.text:0000000000014EFB                 lea     rdx, [rsi+rsi*2]
.text:0000000000014EFF                 push    rbp
.text:0000000000014F00                 push    rbx
.text:0000000000014F01                 pxor    xmm0, xmm0
.text:0000000000014F05                 sub     rsp, 48h
.text:0000000000014F09                 mov     rax, fs:28h
.text:0000000000014F12                 mov     [rsp+78h+var_40], rax
.text:0000000000014F17                 xor     eax, eax
.text:0000000000014F19                 mov     rax, [rdi+38h]
.text:0000000000014F1D                 mov     [rsp+78h+ptr], 0
.text:0000000000014F26                 movaps  [rsp+78h+var_58], xmm0
.text:0000000000014F2B                 mov     [rsp+78h+var_68], rcx
.text:0000000000014F30                 lea     rbp, [rax+rdx*8]
.text:0000000000014F34                 mov     r10, [rbp+8]
.text:0000000000014F38                 test    r10, r10
.text:0000000000014F3B                 jle     loc_15122
.text:0000000000014F41                 lea     rax, [rsp+78h+var_58]
.text:0000000000014F46                 mov     r12, rdi
.text:0000000000014F49                 mov     r13, rsi
.text:0000000000014F4C                 xor     ebx, ebx
.text:0000000000014F4E                 mov     [rsp+78h+var_60], rax
.text:0000000000014F53                 jmp     short loc_14FAD
.text:0000000000014F53 ; ---------------------------------------------------------------------------
.text:0000000000014F55                 align 8
.text:0000000000014F58
.text:0000000000014F58 loc_14F58:                              ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:0000000000014F58                 test    rax, rax
.text:0000000000014F5B                 jnz     loc_15038
.text:0000000000014F61                 mov     rdi, [r14+8]
.text:0000000000014F65                 lea     rsi, [r14+10h]
.text:0000000000014F69                 mov     rdx, r8
.text:0000000000014F6C                 call    re_node_set_contains_isra_3
.text:0000000000014F71                 test    rax, rax
.text:0000000000014F74                 jz      loc_15038
.text:0000000000014F7A
.text:0000000000014F7A loc_14F7A:                              ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:0000000000014F7A                                         ; _sub_epsilon_src_nodes+182↓j
.text:0000000000014F7A                 mov     rdx, [r12+38h]
.text:0000000000014F7F                 mov     rsi, [rsp+78h+var_68]
.text:0000000000014F84                 mov     rdi, [rsp+78h+var_60]
.text:0000000000014F89                 add     rdx, r9
.text:0000000000014F8C                 call    re_node_set_add_intersect
.text:0000000000014F91                 test    eax, eax
.text:0000000000014F93                 jnz     loc_15110
.text:0000000000014F99                 mov     r10, [rbp+8]
.text:0000000000014F9D                 nop     dword ptr [rax]
.text:0000000000014FA0
.text:0000000000014FA0 loc_14FA0:                              ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:0000000000014FA0                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:0000000000014FA0                 add     rbx, 1
.text:0000000000014FA4                 cmp     r10, rbx
.text:0000000000014FA7                 jle     loc_15080
.text:0000000000014FAD
.text:0000000000014FAD loc_14FAD:                              ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:0000000000014FAD                 mov     rax, [rbp+10h]
.text:0000000000014FB1                 mov     rax, [rax+rbx*8]
.text:0000000000014FB5                 cmp     r13, rax
.text:0000000000014FB8                 jz      short loc_14FA0
.text:0000000000014FBA                 mov     rdx, rax
.text:0000000000014FBD                 shl     rdx, 4
.text:0000000000014FC1                 add     rdx, [r12]
.text:0000000000014FC5                 test    byte ptr [rdx+8], 8
.text:0000000000014FC9                 jz      short loc_14FA0
.text:0000000000014FCB                 lea     r9, [rax+rax*2]
.text:0000000000014FCF                 mov     rcx, [r12+28h]
.text:0000000000014FD4                 lea     r11, [rbp+10h]
.text:0000000000014FD8                 mov     rdi, r10
.text:0000000000014FDB                 shl     r9, 3
.text:0000000000014FDF                 mov     rsi, r11
.text:0000000000014FE2                 add     rcx, r9
.text:0000000000014FE5                 mov     r15, [rcx+10h]
.text:0000000000014FE9                 mov     [rsp+78h+var_70], rcx
.text:0000000000014FEE                 mov     r8, [r15]
.text:0000000000014FF1                 mov     rdx, r8
.text:0000000000014FF4                 mov     [rsp+78h+var_78], r8
.text:0000000000014FF8                 call    re_node_set_contains_isra_3
.text:0000000000014FFD                 mov     rcx, [rsp+78h+var_70]
.text:0000000000015002                 mov     r8, [rsp+78h+var_78]
.text:0000000000015006                 cmp     qword ptr [rcx+8], 1
.text:000000000001500B                 jg      loc_14F58
.text:0000000000015011                 test    rax, rax
.text:0000000000015014                 jnz     short loc_14FA0
.text:0000000000015016                 mov     rdi, [r14+8]
.text:000000000001501A                 lea     rsi, [r14+10h]
.text:000000000001501E                 mov     rdx, r8
.text:0000000000015021                 call    re_node_set_contains_isra_3
.text:0000000000015026                 test    rax, rax
.text:0000000000015029                 jnz     loc_14F7A
.text:000000000001502F                 jmp     loc_14FA0
.text:000000000001502F ; ---------------------------------------------------------------------------
.text:0000000000015034                 align 8
.text:0000000000015038
.text:0000000000015038 loc_15038:                              ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:0000000000015038                                         ; _sub_epsilon_src_nodes+84↑j
.text:0000000000015038                 mov     r15, [r15+8]
.text:000000000001503C                 test    r15, r15
.text:000000000001503F                 jle     loc_14FA0
.text:0000000000015045                 mov     rdx, r15
.text:0000000000015048                 mov     rsi, r11
.text:000000000001504B                 mov     rdi, r10
.text:000000000001504E                 call    re_node_set_contains_isra_3
.text:0000000000015053                 test    rax, rax
.text:0000000000015056                 jnz     loc_14FA0
.text:000000000001505C                 mov     rdi, [r14+8]
.text:0000000000015060                 lea     rsi, [r14+10h]
.text:0000000000015064                 call    re_node_set_contains_isra_3
.text:0000000000015069                 test    rax, rax
.text:000000000001506C                 jz      loc_14FA0
.text:0000000000015072                 jmp     loc_14F7A
.text:0000000000015072 ; ---------------------------------------------------------------------------
.text:0000000000015077                 align 20h
.text:0000000000015080
.text:0000000000015080 loc_15080:                              ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:0000000000015080                 xor     r9d, r9d
.text:0000000000015083                 test    r10, r10
.text:0000000000015086                 lea     r11, [rsp+78h+ptr]
.text:000000000001508B                 jle     short loc_150DC
.text:000000000001508D                 nop     dword ptr [rax]
.text:0000000000015090
.text:0000000000015090 loc_15090:                              ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:0000000000015090                 mov     rax, [rbp+10h]
.text:0000000000015094                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:0000000000015099                 mov     rsi, r11
.text:000000000001509C                 mov     r10, [rax+r9*8]
.text:00000000000150A0                 mov     rdx, r10
.text:00000000000150A3                 call    re_node_set_contains_isra_3
.text:00000000000150A8                 test    rax, rax
.text:00000000000150AB                 jnz     short loc_150D2
.text:00000000000150AD                 lea     rbx, [r14+10h]
.text:00000000000150B1                 mov     rdi, [r14+8]
.text:00000000000150B5                 mov     rsi, rbx
.text:00000000000150B8                 call    re_node_set_contains_isra_3
.text:00000000000150BD                 sub     rax, 1
.text:00000000000150C1                 mov     rdx, rax
.text:00000000000150C4                 js      short loc_150D2
.text:00000000000150C6                 lea     rdi, [r14+8]
.text:00000000000150CA                 mov     rsi, rbx
.text:00000000000150CD                 call    re_node_set_remove_at_isra_4_part_5
.text:00000000000150D2
.text:00000000000150D2 loc_150D2:                              ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:00000000000150D2                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:00000000000150D2                 add     r9, 1
.text:00000000000150D6                 cmp     [rbp+8], r9
.text:00000000000150DA                 jg      short loc_15090
.text:00000000000150DC
.text:00000000000150DC loc_150DC:                              ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:00000000000150DC                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000150E1
.text:00000000000150E1 loc_150E1:                              ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:00000000000150E1                 call    free
.text:00000000000150E6                 xor     eax, eax
.text:00000000000150E8
.text:00000000000150E8 loc_150E8:                              ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:00000000000150E8                 mov     rsi, [rsp+78h+var_40]
.text:00000000000150ED                 xor     rsi, fs:28h
.text:00000000000150F6                 jnz     short loc_15126
.text:00000000000150F8                 add     rsp, 48h
.text:00000000000150FC                 pop     rbx
.text:00000000000150FD                 pop     rbp
.text:00000000000150FE                 pop     r12
.text:0000000000015100                 pop     r13
.text:0000000000015102                 pop     r14
.text:0000000000015104                 pop     r15
.text:0000000000015106                 retn
.text:0000000000015106 ; ---------------------------------------------------------------------------
.text:0000000000015107                 align 10h
.text:0000000000015110
.text:0000000000015110 loc_15110:                              ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:0000000000015110                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000015115                 mov     dword ptr [rsp+78h+var_78], eax
.text:0000000000015118                 call    free
.text:000000000001511D                 mov     eax, dword ptr [rsp+78h+var_78]
.text:0000000000015120                 jmp     short loc_150E8
.text:0000000000015122 ; ---------------------------------------------------------------------------
.text:0000000000015122
.text:0000000000015122 loc_15122:                              ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:0000000000015122                 xor     edi, edi
.text:0000000000015124                 jmp     short loc_150E1
.text:0000000000015126 ; ---------------------------------------------------------------------------
.text:0000000000015126
.text:0000000000015126 loc_15126:                              ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:0000000000015126                 call    ___stack_chk_fail
.text:0000000000015126 ; } // starts at 14EF0
.text:0000000000015126 _sub_epsilon_src_nodes endp
.text:0000000000015126
.text:0000000000015126 ; ---------------------------------------------------------------------------
.text:000000000001512B                 align 10h
.text:0000000000015130
.text:0000000000015130 ; =============== S U B R O U T I N E =======================================
.text:0000000000015130
.text:0000000000015130
.text:0000000000015130 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:0000000000015130
.text:0000000000015130 var_130         = qword ptr -130h
.text:0000000000015130 ptr             = qword ptr -128h
.text:0000000000015130 var_120         = qword ptr -120h
.text:0000000000015130 var_118         = qword ptr -118h
.text:0000000000015130 var_110         = qword ptr -110h
.text:0000000000015130 var_108         = qword ptr -108h
.text:0000000000015130 var_100         = qword ptr -100h
.text:0000000000015130 var_F8          = qword ptr -0F8h
.text:0000000000015130 var_E9          = byte ptr -0E9h
.text:0000000000015130 var_E8          = qword ptr -0E8h
.text:0000000000015130 var_E0          = qword ptr -0E0h
.text:0000000000015130 var_CC          = dword ptr -0CCh
.text:0000000000015130 var_C8          = qword ptr -0C8h
.text:0000000000015130 var_C0          = qword ptr -0C0h
.text:0000000000015130 var_B8          = qword ptr -0B8h
.text:0000000000015130 var_A8          = xmmword ptr -0A8h
.text:0000000000015130 var_98          = xmmword ptr -98h
.text:0000000000015130 var_88          = xmmword ptr -88h
.text:0000000000015130 var_78          = xmmword ptr -78h
.text:0000000000015130 var_68          = xmmword ptr -68h
.text:0000000000015130 var_58          = xmmword ptr -58h
.text:0000000000015130 var_40          = qword ptr -40h
.text:0000000000015130
.text:0000000000015130 ; __unwind {
.text:0000000000015130                 push    r15
.text:0000000000015132                 push    r14
.text:0000000000015134                 mov     r15, rdi
.text:0000000000015137                 push    r13
.text:0000000000015139                 push    r12
.text:000000000001513B                 mov     edi, 3800h      ; size
.text:0000000000015140                 push    rbp
.text:0000000000015141                 push    rbx
.text:0000000000015142                 sub     rsp, 108h
.text:0000000000015149                 mov     rax, fs:28h
.text:0000000000015152                 mov     [rsp+138h+var_40], rax
.text:000000000001515A                 xor     eax, eax
.text:000000000001515C                 mov     [rsp+138h+var_130], rsi
.text:0000000000015161                 call    _malloc
.text:0000000000015166                 test    rax, rax
.text:0000000000015169                 mov     [rsp+138h+var_120], rax
.text:000000000001516E                 jz      loc_15540
.text:0000000000015174                 mov     rax, [rsp+138h+var_120]
.text:0000000000015179                 pxor    xmm0, xmm0
.text:000000000001517D                 lea     rbx, [rax+1800h]
.text:0000000000015184                 mov     rax, [rsp+138h+var_130]
.text:0000000000015189                 movaps  [rsp+138h+var_A8], xmm0
.text:0000000000015191                 mov     [rsp+138h+var_F8], rbx
.text:0000000000015196                 movaps  [rsp+138h+var_98], xmm0
.text:000000000001519E                 cmp     qword ptr [rax+10h], 0
.text:00000000000151A3                 mov     qword ptr [rax+58h], 0
.text:00000000000151AB                 mov     qword ptr [rax+60h], 0
.text:00000000000151B3                 jle     loc_15C2A
.text:00000000000151B9                 mov     [rsp+138h+var_108], r15
.text:00000000000151BE                 xor     ebp, ebp
.text:00000000000151C0                 mov     [rsp+138h+ptr], 0
.text:00000000000151C9                 mov     r15, rbx
.text:00000000000151CC
.text:00000000000151CC loc_151CC:                              ; CODE XREF: build_trtable+113↓j
.text:00000000000151CC                 mov     rbx, [rsp+138h+ptr]
.text:00000000000151D1                 lea     rax, ds:0[rbx*8]
.text:00000000000151D9                 mov     [rsp+138h+var_118], rax
.text:00000000000151DE                 mov     rax, [rsp+138h+var_130]
.text:00000000000151E3                 mov     rax, [rax+18h]
.text:00000000000151E7                 mov     r13, [rax+rbx*8]
.text:00000000000151EB                 mov     rax, [rsp+138h+var_108]
.text:00000000000151F0                 shl     r13, 4
.text:00000000000151F4                 add     r13, [rax]
.text:00000000000151F7                 movzx   r14d, byte ptr [r13+8]
.text:00000000000151FC                 mov     eax, [r13+8]
.text:0000000000015200                 shr     eax, 8
.text:0000000000015203                 and     ax, 3FFh
.text:0000000000015207                 cmp     r14d, 1
.text:000000000001520B                 jz      loc_15570
.text:0000000000015211                 cmp     r14d, 3
.text:0000000000015215                 jz      loc_159E0
.text:000000000001521B                 cmp     r14d, 5
.text:000000000001521F                 jz      loc_158A0
.text:0000000000015225                 cmp     r14d, 7
.text:0000000000015229                 jz      loc_15A09
.text:000000000001522F
.text:000000000001522F loc_1522F:                              ; CODE XREF: build_trtable+4CF↓j
.text:000000000001522F                                         ; build_trtable+524↓j ...
.text:000000000001522F                 mov     rbx, [rsp+138h+var_130]
.text:0000000000015234                 add     [rsp+138h+ptr], 1
.text:000000000001523A                 mov     rax, [rsp+138h+ptr]
.text:000000000001523F                 cmp     rax, [rbx+10h]
.text:0000000000015243                 jl      short loc_151CC
.text:0000000000015245                 test    rbp, rbp
.text:0000000000015248                 mov     r15, [rsp+138h+var_108]
.text:000000000001524D                 jle     loc_15CA9
.text:0000000000015253                 lea     rbx, [rbp+1]
.text:0000000000015257                 mov     [rsp+138h+var_C0], 0
.text:0000000000015260                 mov     [rsp+138h+var_C8], rbx
.text:0000000000015265                 shl     rbx, 3
.text:0000000000015269                 mov     rdi, rbx        ; size
.text:000000000001526C                 call    _malloc
.text:0000000000015271                 test    rax, rax
.text:0000000000015274                 mov     r12, rax
.text:0000000000015277                 mov     [rsp+138h+var_B8], rax
.text:000000000001527F                 jz      loc_15A7F
.text:0000000000015285                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000001528F                 mov     [rsp+138h+var_CC], 0
.text:0000000000015297                 cmp     rbp, rax
.text:000000000001529A                 jg      loc_15A7F
.text:00000000000152A0                 lea     rax, [rbp+rbp*2+0]
.text:00000000000152A5                 shl     rax, 3
.text:00000000000152A9                 mov     rdi, rax        ; size
.text:00000000000152AC                 mov     [rsp+138h+var_E0], rax
.text:00000000000152B1                 call    _malloc
.text:00000000000152B6                 test    rax, rax
.text:00000000000152B9                 mov     [rsp+138h+ptr], rax
.text:00000000000152BE                 jz      loc_15A7F
.text:00000000000152C4                 mov     rax, [rsp+138h+ptr]
.text:00000000000152C9                 sub     rbx, 8
.text:00000000000152CD                 mov     r12, [rsp+138h+var_F8]
.text:00000000000152D2                 pxor    xmm0, xmm0
.text:00000000000152D6                 lea     r14, [rsp+138h+var_C8]
.text:00000000000152DB                 mov     [rsp+138h+var_118], rbp
.text:00000000000152E0                 mov     [rsp+138h+var_E9], 0
.text:00000000000152E5                 mov     rbp, r15
.text:00000000000152E8                 add     rax, rbx
.text:00000000000152EB                 mov     [rsp+138h+var_E8], r12
.text:00000000000152F0                 add     rbx, rax
.text:00000000000152F3                 mov     [rsp+138h+var_108], rax
.text:00000000000152F8                 mov     rax, [rsp+138h+var_120]
.text:00000000000152FD                 movaps  [rsp+138h+var_68], xmm0
.text:0000000000015305                 mov     [rsp+138h+var_100], rbx
.text:000000000001530A                 xor     ebx, ebx
.text:000000000001530C                 lea     r13, [rax+8]
.text:0000000000015310                 lea     rax, [rsp+138h+var_CC]
.text:0000000000015315                 movaps  [rsp+138h+var_58], xmm0
.text:000000000001531D                 mov     [rsp+138h+var_110], rax
.text:0000000000015322
.text:0000000000015322 loc_15322:                              ; CODE XREF: build_trtable+2C2↓j
.text:0000000000015322                 mov     [rsp+138h+var_C0], 0
.text:000000000001532B                 cmp     qword ptr [r13+0], 0
.text:0000000000015330                 jle     short loc_15378
.text:0000000000015332                 xor     r15d, r15d
.text:0000000000015335                 nop     dword ptr [rax]
.text:0000000000015338
.text:0000000000015338 loc_15338:                              ; CODE XREF: build_trtable+246↓j
.text:0000000000015338                 mov     rax, [r13+8]
.text:000000000001533C                 mov     rdx, [rax+r15*8]
.text:0000000000015340                 mov     rax, [rbp+18h]
.text:0000000000015344                 mov     rax, [rax+rdx*8]
.text:0000000000015348                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001534C                 jz      short loc_1536E
.text:000000000001534E                 lea     rdx, [rax+rax*2]
.text:0000000000015352                 mov     rax, [rbp+30h]
.text:0000000000015356                 mov     rdi, r14
.text:0000000000015359                 lea     rsi, [rax+rdx*8]
.text:000000000001535D                 call    re_node_set_merge
.text:0000000000015362                 test    eax, eax
.text:0000000000015364                 mov     [rsp+138h+var_CC], eax
.text:0000000000015368                 jnz     loc_15A68
.text:000000000001536E
.text:000000000001536E loc_1536E:                              ; CODE XREF: build_trtable+21C↑j
.text:000000000001536E                 add     r15, 1
.text:0000000000015372                 cmp     [r13+0], r15
.text:0000000000015376                 jg      short loc_15338
.text:0000000000015378
.text:0000000000015378 loc_15378:                              ; CODE XREF: build_trtable+200↑j
.text:0000000000015378                 mov     rdi, [rsp+138h+var_110]
.text:000000000001537D                 xor     ecx, ecx
.text:000000000001537F                 mov     rsi, rbp
.text:0000000000015382                 mov     rdx, r14
.text:0000000000015385                 call    re_acquire_state_context
.text:000000000001538A                 mov     rsi, [rsp+138h+ptr]
.text:000000000001538F                 test    rax, rax
.text:0000000000015392                 mov     [rsi+rbx*8], rax
.text:0000000000015396                 jz      loc_15B48
.text:000000000001539C
.text:000000000001539C loc_1539C:                              ; CODE XREF: build_trtable+A1E↓j
.text:000000000001539C                 cmp     byte ptr [rax+68h], 0
.text:00000000000153A0                 js      loc_15AC0
.text:00000000000153A6                 mov     rdi, [rsp+138h+var_108]
.text:00000000000153AB                 mov     rsi, [rsp+138h+var_100]
.text:00000000000153B0                 mov     [rdi+rbx*8], rax
.text:00000000000153B4                 mov     rax, [rsp+138h+ptr]
.text:00000000000153B9                 mov     rax, [rax+rbx*8]
.text:00000000000153BD                 mov     [rsi+rbx*8], rax
.text:00000000000153C1
.text:00000000000153C1 loc_153C1:                              ; CODE XREF: build_trtable+9FC↓j
.text:00000000000153C1                                         ; build_trtable+A08↓j
.text:00000000000153C1                 lea     rdx, [rsp+138h+var_68]
.text:00000000000153C9                 xor     eax, eax
.text:00000000000153CB
.text:00000000000153CB loc_153CB:                              ; CODE XREF: build_trtable+2AF↓j
.text:00000000000153CB                 mov     rcx, [rdx+rax]
.text:00000000000153CF                 or      rcx, [r12+rax]
.text:00000000000153D3                 mov     [rdx+rax], rcx
.text:00000000000153D7                 add     rax, 8
.text:00000000000153DB                 cmp     rax, 20h ; ' '
.text:00000000000153DF                 jnz     short loc_153CB
.text:00000000000153E1                 add     rbx, 1
.text:00000000000153E5                 add     r13, 18h
.text:00000000000153E9                 add     r12, 20h ; ' '
.text:00000000000153ED                 cmp     rbx, [rsp+138h+var_118]
.text:00000000000153F2                 jnz     loc_15322
.text:00000000000153F8                 cmp     [rsp+138h+var_E9], 0
.text:00000000000153FD                 mov     r15, rbp
.text:0000000000015400                 mov     rbp, [rsp+138h+var_118]
.text:0000000000015405                 mov     [rsp+138h+var_118], rdx
.text:000000000001540A                 jnz     loc_15B59
.text:0000000000015410                 mov     esi, 100h       ; size
.text:0000000000015415                 mov     edi, 8          ; nmemb
.text:000000000001541A                 call    _calloc
.text:000000000001541F                 mov     r11, rax
.text:0000000000015422                 mov     rax, [rsp+138h+var_130]
.text:0000000000015427                 test    r11, r11
.text:000000000001542A                 mov     [rax+58h], r11
.text:000000000001542E                 jz      loc_15A6D
.text:0000000000015434                 mov     rbx, [rsp+138h+var_F8]
.text:0000000000015439                 mov     r12, [rsp+138h+ptr]
.text:000000000001543E                 xor     r9d, r9d
.text:0000000000015441                 mov     r13, [rsp+138h+var_108]
.text:0000000000015446                 mov     rdx, [rsp+138h+var_118]
.text:000000000001544B                 add     rbx, 20h ; ' '
.text:000000000001544F
.text:000000000001544F loc_1544F:                              ; CODE XREF: build_trtable+35C↓j
.text:000000000001544F                 mov     rax, [rdx+r9]
.text:0000000000015453                 test    rax, rax
.text:0000000000015456                 jz      short loc_15484
.text:0000000000015458                 mov     rsi, r9
.text:000000000001545B                 mov     ecx, 1
.text:0000000000015460                 shl     rsi, 6
.text:0000000000015464                 add     rsi, r11
.text:0000000000015467                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015470
.text:0000000000015470 loc_15470:                              ; CODE XREF: build_trtable+352↓j
.text:0000000000015470                 test    al, 1
.text:0000000000015472                 jnz     loc_15BD8
.text:0000000000015478
.text:0000000000015478 loc_15478:                              ; CODE XREF: build_trtable+AE9↓j
.text:0000000000015478                                         ; build_trtable+AF5↓j
.text:0000000000015478                 add     rcx, rcx
.text:000000000001547B                 add     rsi, 8
.text:000000000001547F                 shr     rax, 1
.text:0000000000015482                 jnz     short loc_15470
.text:0000000000015484
.text:0000000000015484 loc_15484:                              ; CODE XREF: build_trtable+326↑j
.text:0000000000015484                 add     r9, 8
.text:0000000000015488                 cmp     r9, 20h ; ' '
.text:000000000001548C                 jnz     short loc_1544F
.text:000000000001548E
.text:000000000001548E loc_1548E:                              ; CODE XREF: build_trtable+AA0↓j
.text:000000000001548E                 test    byte ptr [rsp+138h+var_68+1], 4
.text:0000000000015496                 jz      short loc_154D2
.text:0000000000015498                 xor     eax, eax
.text:000000000001549A                 mov     rdx, [rsp+138h+var_E8]
.text:000000000001549F                 jmp     short loc_154AE
.text:00000000000154A1 ; ---------------------------------------------------------------------------
.text:00000000000154A1
.text:00000000000154A1 loc_154A1:                              ; CODE XREF: build_trtable+385↓j
.text:00000000000154A1                 add     rax, 1
.text:00000000000154A5                 add     rdx, 20h ; ' '
.text:00000000000154A9                 cmp     rax, rbp
.text:00000000000154AC                 jz      short loc_154D2
.text:00000000000154AE
.text:00000000000154AE loc_154AE:                              ; CODE XREF: build_trtable+36F↑j
.text:00000000000154AE                 test    qword ptr [rdx], 400h
.text:00000000000154B5                 jz      short loc_154A1
.text:00000000000154B7                 mov     rbx, [rsp+138h+var_100]
.text:00000000000154BC                 cmp     [rsp+138h+var_E9], 0
.text:00000000000154C1                 mov     rax, [rbx+rax*8]
.text:00000000000154C5                 mov     [r11+50h], rax
.text:00000000000154C9                 jz      short loc_154D2
.text:00000000000154CB                 mov     [r11+850h], rax
.text:00000000000154D2
.text:00000000000154D2 loc_154D2:                              ; CODE XREF: build_trtable+366↑j
.text:00000000000154D2                                         ; build_trtable+37C↑j ...
.text:00000000000154D2                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:00000000000154D7                 call    free
.text:00000000000154DC                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:00000000000154E4                 call    free
.text:00000000000154E9                 mov     rax, [rsp+138h+var_120]
.text:00000000000154EE                 mov     rbx, [rsp+138h+var_E0]
.text:00000000000154F3                 lea     rbp, [rax+10h]
.text:00000000000154F7                 add     rbx, rbp
.text:00000000000154FA
.text:00000000000154FA loc_154FA:                              ; CODE XREF: build_trtable+3DA↓j
.text:00000000000154FA                 mov     rdi, [rbp+0]    ; ptr
.text:00000000000154FE                 add     rbp, 18h
.text:0000000000015502                 call    free
.text:0000000000015507                 cmp     rbx, rbp
.text:000000000001550A                 jnz     short loc_154FA
.text:000000000001550C                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:0000000000015511                 call    free
.text:0000000000015516                 mov     eax, 1
.text:000000000001551B                 jmp     short loc_15542
.text:000000000001551D ; ---------------------------------------------------------------------------
.text:000000000001551D
.text:000000000001551D loc_1551D:                              ; CODE XREF: build_trtable+707↓j
.text:000000000001551D                 test    rbp, rbp
.text:0000000000015520                 mov     qword ptr [rbx+8], 0
.text:0000000000015528                 mov     qword ptr [rbx], 0
.text:000000000001552F                 jnz     loc_15860
.text:0000000000015535                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000001553A                 call    free
.text:000000000001553F                 nop
.text:0000000000015540
.text:0000000000015540 loc_15540:                              ; CODE XREF: build_trtable+3E↑j
.text:0000000000015540                                         ; build_trtable+763↓j ...
.text:0000000000015540                 xor     eax, eax
.text:0000000000015542
.text:0000000000015542 loc_15542:                              ; CODE XREF: build_trtable+3EB↑j
.text:0000000000015542                                         ; build_trtable+B22↓j
.text:0000000000015542                 mov     rbx, [rsp+138h+var_40]
.text:000000000001554A                 xor     rbx, fs:28h
.text:0000000000015553                 jnz     loc_15CA4
.text:0000000000015559                 add     rsp, 108h
.text:0000000000015560                 pop     rbx
.text:0000000000015561                 pop     rbp
.text:0000000000015562                 pop     r12
.text:0000000000015564                 pop     r13
.text:0000000000015566                 pop     r14
.text:0000000000015568                 pop     r15
.text:000000000001556A                 retn
.text:000000000001556A ; ---------------------------------------------------------------------------
.text:000000000001556B                 align 10h
.text:0000000000015570
.text:0000000000015570 loc_15570:                              ; CODE XREF: build_trtable+DB↑j
.text:0000000000015570                 movzx   ecx, byte ptr [r13+0]
.text:0000000000015575                 lea     r12, [rsp+138h+var_A8]
.text:000000000001557D                 mov     edi, 1
.text:0000000000015582                 mov     rdx, rcx
.text:0000000000015585                 and     ecx, 3Fh
.text:0000000000015588                 shr     rdx, 3
.text:000000000001558C                 shl     rdi, cl
.text:000000000001558F                 and     edx, 18h
.text:0000000000015592                 or      [r12+rdx], rdi
.text:0000000000015596
.text:0000000000015596 loc_15596:                              ; CODE XREF: build_trtable+7C9↓j
.text:0000000000015596                                         ; build_trtable+7D8↓j ...
.text:0000000000015596                 test    ax, ax
.text:0000000000015599                 jz      loc_15660
.text:000000000001559F                 test    al, 20h
.text:00000000000155A1                 jnz     loc_15910
.text:00000000000155A7
.text:00000000000155A7 loc_155A7:                              ; CODE XREF: build_trtable+80C↓j
.text:00000000000155A7                 test    al, 80h
.text:00000000000155A9                 jnz     loc_15844
.text:00000000000155AF                 test    al, 4
.text:00000000000155B1                 jz      short loc_15605
.text:00000000000155B3                 cmp     r14d, 1
.text:00000000000155B7                 jz      loc_15995
.text:00000000000155BD                 mov     r8, [rsp+138h+var_108]
.text:00000000000155C2                 cmp     dword ptr [r8+0B4h], 1
.text:00000000000155CA                 jle     loc_15A22
.text:00000000000155D0
.text:00000000000155D0 loc_155D0:                              ; CODE XREF: build_trtable+87D↓j
.text:00000000000155D0                 mov     rdi, [r8+78h]
.text:00000000000155D4                 xor     esi, esi
.text:00000000000155D6                 xor     ecx, ecx
.text:00000000000155D8
.text:00000000000155D8 loc_155D8:                              ; CODE XREF: build_trtable+4CA↓j
.text:00000000000155D8                 mov     rdx, [rdi+rcx*8]
.text:00000000000155DC                 not     rdx
.text:00000000000155DF                 or      rdx, [r8+rcx*8+0B8h]
.text:00000000000155E7                 and     rdx, [r12+rcx*8]
.text:00000000000155EB                 mov     [r12+rcx*8], rdx
.text:00000000000155EF                 add     rcx, 1
.text:00000000000155F3                 or      rsi, rdx
.text:00000000000155F6                 cmp     rcx, 4
.text:00000000000155FA                 jnz     short loc_155D8
.text:00000000000155FC                 test    rsi, rsi
.text:00000000000155FF                 jz      loc_1522F
.text:0000000000015605
.text:0000000000015605 loc_15605:                              ; CODE XREF: build_trtable+481↑j
.text:0000000000015605                                         ; build_trtable+91B↓j
.text:0000000000015605                 test    al, 8
.text:0000000000015607                 jz      short loc_15660
.text:0000000000015609                 cmp     r14d, 1
.text:000000000001560D                 jz      loc_15941
.text:0000000000015613                 mov     rdi, [rsp+138h+var_108]
.text:0000000000015618                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000001561F                 jle     loc_1595E
.text:0000000000015625
.text:0000000000015625 loc_15625:                              ; CODE XREF: build_trtable+828↓j
.text:0000000000015625                 mov     rsi, [rdi+78h]
.text:0000000000015629                 xor     ecx, ecx
.text:000000000001562B                 xor     edx, edx
.text:000000000001562D
.text:000000000001562D loc_1562D:                              ; CODE XREF: build_trtable+51F↓j
.text:000000000001562D                 mov     rax, [rdi+rdx*8+0B8h]
.text:0000000000015635                 and     rax, [rsi+rdx*8]
.text:0000000000015639                 not     rax
.text:000000000001563C                 and     rax, [r12+rdx*8]
.text:0000000000015640                 mov     [r12+rdx*8], rax
.text:0000000000015644                 add     rdx, 1
.text:0000000000015648                 or      rcx, rax
.text:000000000001564B                 cmp     rdx, 4
.text:000000000001564F                 jnz     short loc_1562D
.text:0000000000015651                 test    rcx, rcx
.text:0000000000015654                 jz      loc_1522F
.text:000000000001565A                 nop     word ptr [rax+rax+00h]
.text:0000000000015660
.text:0000000000015660 loc_15660:                              ; CODE XREF: build_trtable+469↑j
.text:0000000000015660                                         ; build_trtable+4D7↑j ...
.text:0000000000015660                 xor     ebx, ebx
.text:0000000000015662                 test    rbp, rbp
.text:0000000000015665                 jle     loc_157CB
.text:000000000001566B                 mov     [rsp+138h+var_110], r13
.text:0000000000015670                 mov     r13, r15
.text:0000000000015673                 nop     dword ptr [rax+rax+00h]
.text:0000000000015678
.text:0000000000015678 loc_15678:                              ; CODE XREF: build_trtable+692↓j
.text:0000000000015678                 mov     r10, rbx
.text:000000000001567B                 shl     r10, 5
.text:000000000001567F                 cmp     r14d, 1
.text:0000000000015683                 jnz     short loc_156A8
.text:0000000000015685                 mov     rax, [rsp+138h+var_110]
.text:000000000001568A                 movzx   edx, byte ptr [rax]
.text:000000000001568D                 mov     rax, rdx
.text:0000000000015690                 shr     rax, 3
.text:0000000000015694                 and     eax, 18h
.text:0000000000015697                 add     rax, r13
.text:000000000001569A                 mov     rax, [rax+r10]
.text:000000000001569E                 bt      rax, rdx
.text:00000000000156A2                 jnb     loc_157BB
.text:00000000000156A8
.text:00000000000156A8 loc_156A8:                              ; CODE XREF: build_trtable+553↑j
.text:00000000000156A8                 lea     rdi, [r13+r10+0]
.text:00000000000156AD                 lea     rsi, [rsp+138h+var_88]
.text:00000000000156B5                 xor     ecx, ecx
.text:00000000000156B7                 xor     eax, eax
.text:00000000000156B9
.text:00000000000156B9 loc_156B9:                              ; CODE XREF: build_trtable+5A0↓j
.text:00000000000156B9                 mov     rdx, [r12+rax*8]
.text:00000000000156BD                 and     rdx, [rdi+rax*8]
.text:00000000000156C1                 mov     [rsi+rax*8], rdx
.text:00000000000156C5                 add     rax, 1
.text:00000000000156C9                 or      rcx, rdx
.text:00000000000156CC                 cmp     rax, 4
.text:00000000000156D0                 jnz     short loc_156B9
.text:00000000000156D2                 test    rcx, rcx
.text:00000000000156D5                 jz      loc_157BB
.text:00000000000156DB                 lea     r11, [rsp+138h+var_68]
.text:00000000000156E3                 xor     r15d, r15d
.text:00000000000156E6                 xor     r9d, r9d
.text:00000000000156E9                 xor     ecx, ecx
.text:00000000000156EB
.text:00000000000156EB loc_156EB:                              ; CODE XREF: build_trtable+5E8↓j
.text:00000000000156EB                 mov     rsi, [r12+rcx*8]
.text:00000000000156EF                 mov     rax, [rdi+rcx*8]
.text:00000000000156F3                 mov     rdx, rsi
.text:00000000000156F6                 not     rdx
.text:00000000000156F9                 and     rdx, rax
.text:00000000000156FC                 not     rax
.text:00000000000156FF                 and     rax, rsi
.text:0000000000015702                 mov     [r11+rcx*8], rdx
.text:0000000000015706                 or      r9, rdx
.text:0000000000015709                 mov     [r12+rcx*8], rax
.text:000000000001570D                 add     rcx, 1
.text:0000000000015711                 or      r15, rax
.text:0000000000015714                 cmp     rcx, 4
.text:0000000000015718                 jnz     short loc_156EB
.text:000000000001571A                 mov     rdi, [rsp+138h+var_120]
.text:000000000001571F                 lea     rax, [rbx+rbx*2]
.text:0000000000015723                 test    r9, r9
.text:0000000000015726                 lea     rdx, [rdi+rax*8]
.text:000000000001572A                 jz      short loc_15794
.text:000000000001572C                 mov     rax, rbp
.text:000000000001572F                 movdqa  xmm0, [rsp+138h+var_68]
.text:0000000000015738                 shl     rax, 5
.text:000000000001573C                 mov     rsi, rdx
.text:000000000001573F                 mov     [rsp+138h+var_100], rdx
.text:0000000000015744                 add     rax, r13
.text:0000000000015747                 movups  xmmword ptr [rax], xmm0
.text:000000000001574A                 movdqa  xmm0, [rsp+138h+var_58]
.text:0000000000015753                 movups  xmmword ptr [rax+10h], xmm0
.text:0000000000015757                 lea     rax, [rbp+rbp*2+0]
.text:000000000001575C                 lea     rdi, [rdi+rax*8]
.text:0000000000015760                 movdqa  xmm0, [rsp+138h+var_88]
.text:0000000000015769                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000001576F                 movdqa  xmm0, [rsp+138h+var_78]
.text:0000000000015778                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000001577E                 call    re_node_set_init_copy
.text:0000000000015783                 test    eax, eax
.text:0000000000015785                 jnz     loc_15860
.text:000000000001578B                 mov     rdx, [rsp+138h+var_100]
.text:0000000000015790                 add     rbp, 1
.text:0000000000015794
.text:0000000000015794 loc_15794:                              ; CODE XREF: build_trtable+5FA↑j
.text:0000000000015794                 mov     rax, [rsp+138h+var_130]
.text:0000000000015799                 mov     rsi, [rsp+138h+var_118]
.text:000000000001579E                 mov     rdi, rdx
.text:00000000000157A1                 mov     rax, [rax+18h]
.text:00000000000157A5                 mov     rsi, [rax+rsi]
.text:00000000000157A9                 call    re_node_set_insert
.text:00000000000157AE                 test    al, al
.text:00000000000157B0                 jz      loc_15860
.text:00000000000157B6                 test    r15, r15
.text:00000000000157B9                 jz      short loc_157C8
.text:00000000000157BB
.text:00000000000157BB loc_157BB:                              ; CODE XREF: build_trtable+572↑j
.text:00000000000157BB                                         ; build_trtable+5A5↑j
.text:00000000000157BB                 add     rbx, 1
.text:00000000000157BF                 cmp     rbx, rbp
.text:00000000000157C2                 jl      loc_15678
.text:00000000000157C8
.text:00000000000157C8 loc_157C8:                              ; CODE XREF: build_trtable+689↑j
.text:00000000000157C8                 mov     r15, r13
.text:00000000000157CB
.text:00000000000157CB loc_157CB:                              ; CODE XREF: build_trtable+535↑j
.text:00000000000157CB                 cmp     rbp, rbx
.text:00000000000157CE                 jnz     loc_1522F
.text:00000000000157D4                 mov     rax, rbp
.text:00000000000157D7                 movdqa  xmm0, [rsp+138h+var_A8]
.text:00000000000157E0                 shl     rax, 5
.text:00000000000157E4                 mov     rbx, [rsp+138h+var_118]
.text:00000000000157E9                 mov     edi, 8          ; size
.text:00000000000157EE                 add     rax, r15
.text:00000000000157F1                 movups  xmmword ptr [rax], xmm0
.text:00000000000157F4                 movdqa  xmm0, [rsp+138h+var_98]
.text:00000000000157FD                 movups  xmmword ptr [rax+10h], xmm0
.text:0000000000015801                 mov     rax, [rsp+138h+var_130]
.text:0000000000015806                 mov     rax, [rax+18h]
.text:000000000001580A                 mov     r13, [rax+rbx]
.text:000000000001580E                 mov     rbx, [rsp+138h+var_120]
.text:0000000000015813                 lea     rax, [rbp+rbp*2+0]
.text:0000000000015818                 lea     rbx, [rbx+rax*8]
.text:000000000001581C                 mov     qword ptr [rbx], 1
.text:0000000000015823                 mov     qword ptr [rbx+8], 1
.text:000000000001582B                 call    _malloc
.text:0000000000015830                 test    rax, rax
.text:0000000000015833                 mov     [rbx+10h], rax
.text:0000000000015837                 jz      loc_1551D
.text:000000000001583D                 mov     [rax], r13
.text:0000000000015840                 add     rbp, 1
.text:0000000000015844
.text:0000000000015844 loc_15844:                              ; CODE XREF: build_trtable+479↑j
.text:0000000000015844                                         ; build_trtable+816↓j ...
.text:0000000000015844                 pxor    xmm0, xmm0
.text:0000000000015848                 movaps  xmmword ptr [r12], xmm0
.text:000000000001584D                 movaps  xmmword ptr [r12+10h], xmm0
.text:0000000000015853                 jmp     loc_1522F
.text:0000000000015853 ; ---------------------------------------------------------------------------
.text:0000000000015858                 align 20h
.text:0000000000015860
.text:0000000000015860 loc_15860:                              ; CODE XREF: build_trtable+3FF↑j
.text:0000000000015860                                         ; build_trtable+655↑j ...
.text:0000000000015860                 mov     rax, [rsp+138h+var_120]
.text:0000000000015865                 lea     rbx, [rax+10h]
.text:0000000000015869                 lea     rax, [rbp+rbp*2+0]
.text:000000000001586E                 lea     rbp, [rbx+rax*8]
.text:0000000000015872                 nop     word ptr [rax+rax+00h]
.text:0000000000015878
.text:0000000000015878 loc_15878:                              ; CODE XREF: build_trtable+757↓j
.text:0000000000015878                 mov     rdi, [rbx]      ; ptr
.text:000000000001587B                 add     rbx, 18h
.text:000000000001587F                 call    free
.text:0000000000015884                 cmp     rbp, rbx
.text:0000000000015887                 jnz     short loc_15878
.text:0000000000015889                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000001588E                 call    free
.text:0000000000015893                 jmp     loc_15540
.text:0000000000015893 ; ---------------------------------------------------------------------------
.text:0000000000015898                 align 20h
.text:00000000000158A0
.text:00000000000158A0 loc_158A0:                              ; CODE XREF: build_trtable+EF↑j
.text:00000000000158A0                 mov     rsi, [rsp+138h+var_108]
.text:00000000000158A5                 cmp     dword ptr [rsi+0B4h], 1
.text:00000000000158AC                 jle     loc_159B5
.text:00000000000158B2                 mov     rsi, [rsi+78h]
.text:00000000000158B6                 lea     r12, [rsp+138h+var_A8]
.text:00000000000158BE                 xor     edx, edx
.text:00000000000158C0
.text:00000000000158C0 loc_158C0:                              ; CODE XREF: build_trtable+7A4↓j
.text:00000000000158C0                 mov     rcx, [r12+rdx]
.text:00000000000158C4                 or      rcx, [rsi+rdx]
.text:00000000000158C8                 mov     [r12+rdx], rcx
.text:00000000000158CC                 add     rdx, 8
.text:00000000000158D0                 cmp     rdx, 20h ; ' '
.text:00000000000158D4                 jnz     short loc_158C0
.text:00000000000158D6
.text:00000000000158D6 loc_158D6:                              ; CODE XREF: build_trtable+8A1↓j
.text:00000000000158D6                                         ; build_trtable+8ED↓j
.text:00000000000158D6                 mov     rbx, [rsp+138h+var_108]
.text:00000000000158DB                 mov     rdx, [rbx+0D8h]
.text:00000000000158E2                 test    dl, 40h
.text:00000000000158E5                 jnz     short loc_158F3
.text:00000000000158E7                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:00000000000158F3
.text:00000000000158F3 loc_158F3:                              ; CODE XREF: build_trtable+7B5↑j
.text:00000000000158F3                 and     edx, 80h
.text:00000000000158F9                 jz      loc_15596
.text:00000000000158FF                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:0000000000015908                 jmp     loc_15596
.text:0000000000015908 ; ---------------------------------------------------------------------------
.text:000000000001590D                 align 10h
.text:0000000000015910
.text:0000000000015910 loc_15910:                              ; CODE XREF: build_trtable+471↑j
.text:0000000000015910                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:0000000000015918                 pxor    xmm0, xmm0
.text:000000000001591C                 and     dh, 4
.text:000000000001591F                 movaps  xmmword ptr [r12], xmm0
.text:0000000000015924                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000001592A                 jz      loc_1522F
.text:0000000000015930                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000001593C                 jmp     loc_155A7
.text:0000000000015941 ; ---------------------------------------------------------------------------
.text:0000000000015941
.text:0000000000015941 loc_15941:                              ; CODE XREF: build_trtable+4DD↑j
.text:0000000000015941                 test    byte ptr [r13+0Ah], 40h
.text:0000000000015946                 jnz     loc_15844
.text:000000000001594C                 mov     rdi, [rsp+138h+var_108]
.text:0000000000015951                 cmp     dword ptr [rdi+0B4h], 1
.text:0000000000015958                 jg      loc_15625
.text:000000000001595E
.text:000000000001595E loc_1595E:                              ; CODE XREF: build_trtable+4EF↑j
.text:000000000001595E                 mov     rsi, [rsp+138h+var_108]
.text:0000000000015963                 xor     ecx, ecx
.text:0000000000015965                 xor     edx, edx
.text:0000000000015967
.text:0000000000015967 loc_15967:                              ; CODE XREF: build_trtable+855↓j
.text:0000000000015967                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000001596F                 not     rax
.text:0000000000015972                 and     rax, [r12+rdx*8]
.text:0000000000015976                 mov     [r12+rdx*8], rax
.text:000000000001597A                 add     rdx, 1
.text:000000000001597E                 or      rcx, rax
.text:0000000000015981                 cmp     rdx, 4
.text:0000000000015985                 jnz     short loc_15967
.text:0000000000015987                 test    rcx, rcx
.text:000000000001598A                 jnz     loc_15660
.text:0000000000015990                 jmp     loc_1522F
.text:0000000000015995 ; ---------------------------------------------------------------------------
.text:0000000000015995
.text:0000000000015995 loc_15995:                              ; CODE XREF: build_trtable+487↑j
.text:0000000000015995                 test    byte ptr [r13+0Ah], 40h
.text:000000000001599A                 jz      loc_15844
.text:00000000000159A0                 mov     r8, [rsp+138h+var_108]
.text:00000000000159A5                 cmp     dword ptr [r8+0B4h], 1
.text:00000000000159AD                 jg      loc_155D0
.text:00000000000159B3                 jmp     short loc_15A22
.text:00000000000159B5 ; ---------------------------------------------------------------------------
.text:00000000000159B5
.text:00000000000159B5 loc_159B5:                              ; CODE XREF: build_trtable+77C↑j
.text:00000000000159B5                 pcmpeqd xmm0, xmm0
.text:00000000000159B9                 lea     r12, [rsp+138h+var_A8]
.text:00000000000159C1                 movaps  [rsp+138h+var_A8], xmm0
.text:00000000000159C9                 movaps  [rsp+138h+var_98], xmm0
.text:00000000000159D1                 jmp     loc_158D6
.text:00000000000159D1 ; ---------------------------------------------------------------------------
.text:00000000000159D6                 align 20h
.text:00000000000159E0
.text:00000000000159E0 loc_159E0:                              ; CODE XREF: build_trtable+E5↑j
.text:00000000000159E0                 mov     rsi, [r13+0]
.text:00000000000159E4                 lea     r12, [rsp+138h+var_A8]
.text:00000000000159EC                 xor     edx, edx
.text:00000000000159EE
.text:00000000000159EE loc_159EE:                              ; CODE XREF: build_trtable+8D2↓j
.text:00000000000159EE                 mov     rcx, [r12+rdx]
.text:00000000000159F2                 or      rcx, [rsi+rdx]
.text:00000000000159F6                 mov     [r12+rdx], rcx
.text:00000000000159FA                 add     rdx, 8
.text:00000000000159FE                 cmp     rdx, 20h ; ' '
.text:0000000000015A02                 jnz     short loc_159EE
.text:0000000000015A04                 jmp     loc_15596
.text:0000000000015A09 ; ---------------------------------------------------------------------------
.text:0000000000015A09
.text:0000000000015A09 loc_15A09:                              ; CODE XREF: build_trtable+F9↑j
.text:0000000000015A09                 pcmpeqd xmm0, xmm0
.text:0000000000015A0D                 lea     r12, [rsp+138h+var_A8]
.text:0000000000015A15                 movaps  [rsp+138h+var_A8], xmm0
.text:0000000000015A1D                 jmp     loc_158D6
.text:0000000000015A22 ; ---------------------------------------------------------------------------
.text:0000000000015A22
.text:0000000000015A22 loc_15A22:                              ; CODE XREF: build_trtable+49A↑j
.text:0000000000015A22                                         ; build_trtable+883↑j
.text:0000000000015A22                 mov     rdi, [rsp+138h+var_108]
.text:0000000000015A27                 xor     esi, esi
.text:0000000000015A29                 xor     edx, edx
.text:0000000000015A2B
.text:0000000000015A2B loc_15A2B:                              ; CODE XREF: build_trtable+916↓j
.text:0000000000015A2B                 mov     rcx, [r12+rdx*8]
.text:0000000000015A2F                 and     rcx, [rdi+rdx*8+0B8h]
.text:0000000000015A37                 mov     [r12+rdx*8], rcx
.text:0000000000015A3B                 add     rdx, 1
.text:0000000000015A3F                 or      rsi, rcx
.text:0000000000015A42                 cmp     rdx, 4
.text:0000000000015A46                 jnz     short loc_15A2B
.text:0000000000015A48                 test    rsi, rsi
.text:0000000000015A4B                 jnz     loc_15605
.text:0000000000015A51                 jmp     loc_1522F
.text:0000000000015A56 ; ---------------------------------------------------------------------------
.text:0000000000015A56
.text:0000000000015A56 loc_15A56:                              ; CODE XREF: build_trtable+9B1↓j
.text:0000000000015A56                 mov     edx, [rsp+138h+var_CC]
.text:0000000000015A5A                 test    edx, edx
.text:0000000000015A5C                 jz      loc_15AE7
.text:0000000000015A62                 nop     word ptr [rax+rax+00h]
.text:0000000000015A68
.text:0000000000015A68 loc_15A68:                              ; CODE XREF: build_trtable+238↑j
.text:0000000000015A68                                         ; build_trtable+A0E↓j ...
.text:0000000000015A68                 mov     rbp, [rsp+138h+var_118]
.text:0000000000015A6D
.text:0000000000015A6D loc_15A6D:                              ; CODE XREF: build_trtable+2FE↑j
.text:0000000000015A6D                                         ; build_trtable+A47↓j
.text:0000000000015A6D                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:0000000000015A72                 call    free
.text:0000000000015A77                 mov     r12, [rsp+138h+var_B8]
.text:0000000000015A7F
.text:0000000000015A7F loc_15A7F:                              ; CODE XREF: build_trtable+14F↑j
.text:0000000000015A7F                                         ; build_trtable+16A↑j ...
.text:0000000000015A7F                 mov     rdi, r12        ; ptr
.text:0000000000015A82                 call    free
.text:0000000000015A87                 mov     rax, [rsp+138h+var_120]
.text:0000000000015A8C                 lea     rbx, [rax+10h]
.text:0000000000015A90                 lea     rax, [rbp+rbp*2+0]
.text:0000000000015A95                 lea     rbp, [rbx+rax*8]
.text:0000000000015A99                 nop     dword ptr [rax+00000000h]
.text:0000000000015AA0
.text:0000000000015AA0 loc_15AA0:                              ; CODE XREF: build_trtable+97F↓j
.text:0000000000015AA0                 mov     rdi, [rbx]      ; ptr
.text:0000000000015AA3                 add     rbx, 18h
.text:0000000000015AA7                 call    free
.text:0000000000015AAC                 cmp     rbp, rbx
.text:0000000000015AAF                 jnz     short loc_15AA0
.text:0000000000015AB1                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:0000000000015AB6                 call    free
.text:0000000000015ABB                 jmp     loc_15540
.text:0000000000015AC0 ; ---------------------------------------------------------------------------
.text:0000000000015AC0
.text:0000000000015AC0 loc_15AC0:                              ; CODE XREF: build_trtable+270↑j
.text:0000000000015AC0                 mov     rdi, [rsp+138h+var_110]
.text:0000000000015AC5                 mov     ecx, 1
.text:0000000000015ACA                 mov     rdx, r14
.text:0000000000015ACD                 mov     rsi, rbp
.text:0000000000015AD0                 call    re_acquire_state_context
.text:0000000000015AD5                 mov     rdi, [rsp+138h+var_108]
.text:0000000000015ADA                 test    rax, rax
.text:0000000000015ADD                 mov     [rdi+rbx*8], rax
.text:0000000000015AE1                 jz      loc_15A56
.text:0000000000015AE7
.text:0000000000015AE7 loc_15AE7:                              ; CODE XREF: build_trtable+92C↑j
.text:0000000000015AE7                 mov     rdi, [rsp+138h+ptr]
.text:0000000000015AEC                 cmp     rax, [rdi+rbx*8]
.text:0000000000015AF0                 jz      short loc_15B0B
.text:0000000000015AF2                 movzx   edi, [rsp+138h+var_E9]
.text:0000000000015AF7                 cmp     dword ptr [rbp+0B4h], 2
.text:0000000000015AFE                 mov     eax, 1
.text:0000000000015B03                 cmovge  edi, eax
.text:0000000000015B06                 mov     [rsp+138h+var_E9], dil
.text:0000000000015B0B
.text:0000000000015B0B loc_15B0B:                              ; CODE XREF: build_trtable+9C0↑j
.text:0000000000015B0B                 mov     rdi, [rsp+138h+var_110]
.text:0000000000015B10                 mov     rsi, rbp
.text:0000000000015B13                 mov     ecx, 2
.text:0000000000015B18                 mov     rdx, r14
.text:0000000000015B1B                 call    re_acquire_state_context
.text:0000000000015B20                 mov     rsi, [rsp+138h+var_100]
.text:0000000000015B25                 test    rax, rax
.text:0000000000015B28                 mov     [rsi+rbx*8], rax
.text:0000000000015B2C                 jnz     loc_153C1
.text:0000000000015B32                 mov     eax, [rsp+138h+var_CC]
.text:0000000000015B36                 test    eax, eax
.text:0000000000015B38                 jz      loc_153C1
.text:0000000000015B3E                 jmp     loc_15A68
.text:0000000000015B3E ; ---------------------------------------------------------------------------
.text:0000000000015B43                 align 8
.text:0000000000015B48
.text:0000000000015B48 loc_15B48:                              ; CODE XREF: build_trtable+266↑j
.text:0000000000015B48                 mov     ecx, [rsp+138h+var_CC]
.text:0000000000015B4C                 test    ecx, ecx
.text:0000000000015B4E                 jz      loc_1539C
.text:0000000000015B54                 jmp     loc_15A68
.text:0000000000015B59 ; ---------------------------------------------------------------------------
.text:0000000000015B59
.text:0000000000015B59 loc_15B59:                              ; CODE XREF: build_trtable+2DA↑j
.text:0000000000015B59                 mov     esi, 200h       ; size
.text:0000000000015B5E                 mov     edi, 8          ; nmemb
.text:0000000000015B63                 call    _calloc
.text:0000000000015B68                 mov     r11, rax
.text:0000000000015B6B                 mov     rax, [rsp+138h+var_130]
.text:0000000000015B70                 test    r11, r11
.text:0000000000015B73                 mov     [rax+60h], r11
.text:0000000000015B77                 jz      loc_15A6D
.text:0000000000015B7D                 mov     r13, [rsp+138h+var_F8]
.text:0000000000015B82                 mov     r10, [rsp+138h+ptr]
.text:0000000000015B87                 mov     r12, r11
.text:0000000000015B8A                 mov     r14, [rsp+138h+var_108]
.text:0000000000015B8F                 mov     rdx, [rsp+138h+var_118]
.text:0000000000015B94                 xor     ebx, ebx
.text:0000000000015B96                 add     r13, 20h ; ' '
.text:0000000000015B9A
.text:0000000000015B9A loc_15B9A:                              ; CODE XREF: build_trtable+A9E↓j
.text:0000000000015B9A                 mov     rax, [rdx+rbx]
.text:0000000000015B9E                 test    rax, rax
.text:0000000000015BA1                 jz      short loc_15BBF
.text:0000000000015BA3                 mov     rsi, r12
.text:0000000000015BA6                 mov     ecx, 1
.text:0000000000015BAB
.text:0000000000015BAB loc_15BAB:                              ; CODE XREF: build_trtable+A8D↓j
.text:0000000000015BAB                 test    al, 1
.text:0000000000015BAD                 jnz     loc_15C5C
.text:0000000000015BB3
.text:0000000000015BB3 loc_15BB3:                              ; CODE XREF: build_trtable+B6B↓j
.text:0000000000015BB3                 add     rcx, rcx
.text:0000000000015BB6                 add     rsi, 8
.text:0000000000015BBA                 shr     rax, 1
.text:0000000000015BBD                 jnz     short loc_15BAB
.text:0000000000015BBF
.text:0000000000015BBF loc_15BBF:                              ; CODE XREF: build_trtable+A71↑j
.text:0000000000015BBF                 add     rbx, 8
.text:0000000000015BC3                 add     r12, 200h
.text:0000000000015BCA                 cmp     rbx, 20h ; ' '
.text:0000000000015BCE                 jnz     short loc_15B9A
.text:0000000000015BD0                 jmp     loc_1548E
.text:0000000000015BD0 ; ---------------------------------------------------------------------------
.text:0000000000015BD5                 align 8
.text:0000000000015BD8
.text:0000000000015BD8 loc_15BD8:                              ; CODE XREF: build_trtable+342↑j
.text:0000000000015BD8                 mov     rdi, [rsp+138h+var_120]
.text:0000000000015BDD                 test    [rdi+r9+1800h], rcx
.text:0000000000015BE5                 jnz     short loc_15C57
.text:0000000000015BE7                 lea     rdi, [rbx+r9]
.text:0000000000015BEB                 xor     r8d, r8d
.text:0000000000015BEE                 xchg    ax, ax
.text:0000000000015BF0
.text:0000000000015BF0 loc_15BF0:                              ; CODE XREF: build_trtable+AD1↓j
.text:0000000000015BF0                 mov     r10, [rdi]
.text:0000000000015BF3                 add     r8, 1
.text:0000000000015BF7                 add     rdi, 20h ; ' '
.text:0000000000015BFB                 and     r10, rcx
.text:0000000000015BFE                 test    r10, r10
.text:0000000000015C01                 jz      short loc_15BF0
.text:0000000000015C03                 shl     r8, 3
.text:0000000000015C07
.text:0000000000015C07 loc_15C07:                              ; CODE XREF: build_trtable+B2A↓j
.text:0000000000015C07                 test    [r15+r9+0B8h], rcx
.text:0000000000015C0F                 jz      short loc_15C1E
.text:0000000000015C11                 mov     rdi, [r13+r8+0]
.text:0000000000015C16                 mov     [rsi], rdi
.text:0000000000015C19                 jmp     loc_15478
.text:0000000000015C1E ; ---------------------------------------------------------------------------
.text:0000000000015C1E
.text:0000000000015C1E loc_15C1E:                              ; CODE XREF: build_trtable+ADF↑j
.text:0000000000015C1E                 mov     rdi, [r12+r8]
.text:0000000000015C22                 mov     [rsi], rdi
.text:0000000000015C25                 jmp     loc_15478
.text:0000000000015C2A ; ---------------------------------------------------------------------------
.text:0000000000015C2A
.text:0000000000015C2A loc_15C2A:                              ; CODE XREF: build_trtable+83↑j
.text:0000000000015C2A                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:0000000000015C2F                 call    free
.text:0000000000015C34
.text:0000000000015C34 loc_15C34:                              ; CODE XREF: build_trtable+B8C↓j
.text:0000000000015C34                 mov     esi, 100h       ; size
.text:0000000000015C39                 mov     edi, 8          ; nmemb
.text:0000000000015C3E                 call    _calloc
.text:0000000000015C43                 mov     rbx, [rsp+138h+var_130]
.text:0000000000015C48                 test    rax, rax
.text:0000000000015C4B                 mov     [rbx+58h], rax
.text:0000000000015C4F                 setnz   al
.text:0000000000015C52                 jmp     loc_15542
.text:0000000000015C57 ; ---------------------------------------------------------------------------
.text:0000000000015C57
.text:0000000000015C57 loc_15C57:                              ; CODE XREF: build_trtable+AB5↑j
.text:0000000000015C57                 xor     r8d, r8d
.text:0000000000015C5A                 jmp     short loc_15C07
.text:0000000000015C5C ; ---------------------------------------------------------------------------
.text:0000000000015C5C
.text:0000000000015C5C loc_15C5C:                              ; CODE XREF: build_trtable+A7D↑j
.text:0000000000015C5C                 mov     rdi, [rsp+138h+var_120]
.text:0000000000015C61                 test    [rdi+rbx+1800h], rcx
.text:0000000000015C69                 jnz     short loc_15CA0
.text:0000000000015C6B                 lea     r9, [r13+rbx+0]
.text:0000000000015C70                 xor     r8d, r8d
.text:0000000000015C73
.text:0000000000015C73 loc_15C73:                              ; CODE XREF: build_trtable+B57↓j
.text:0000000000015C73                 mov     r15, [r9]
.text:0000000000015C76                 add     r8, 1
.text:0000000000015C7A                 add     r9, 20h ; ' '
.text:0000000000015C7E                 mov     rdi, r8
.text:0000000000015C81                 and     r15, rcx
.text:0000000000015C84                 test    r15, r15
.text:0000000000015C87                 jz      short loc_15C73
.text:0000000000015C89
.text:0000000000015C89 loc_15C89:                              ; CODE XREF: build_trtable+B72↓j
.text:0000000000015C89                 mov     r8, [r10+rdi*8]
.text:0000000000015C8D                 mov     [rsi], r8
.text:0000000000015C90                 mov     rdi, [r14+rdi*8]
.text:0000000000015C94                 mov     [rsi+800h], rdi
.text:0000000000015C9B                 jmp     loc_15BB3
.text:0000000000015CA0 ; ---------------------------------------------------------------------------
.text:0000000000015CA0
.text:0000000000015CA0 loc_15CA0:                              ; CODE XREF: build_trtable+B39↑j
.text:0000000000015CA0                 xor     edi, edi
.text:0000000000015CA2                 jmp     short loc_15C89
.text:0000000000015CA4 ; ---------------------------------------------------------------------------
.text:0000000000015CA4
.text:0000000000015CA4 loc_15CA4:                              ; CODE XREF: build_trtable+423↑j
.text:0000000000015CA4                 call    ___stack_chk_fail
.text:0000000000015CA9 ; ---------------------------------------------------------------------------
.text:0000000000015CA9
.text:0000000000015CA9 loc_15CA9:                              ; CODE XREF: build_trtable+11D↑j
.text:0000000000015CA9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:0000000000015CAE                 call    free
.text:0000000000015CB3                 test    rbp, rbp
.text:0000000000015CB6                 jnz     loc_15540
.text:0000000000015CBC                 jmp     loc_15C34
.text:0000000000015CBC ; } // starts at 15130
.text:0000000000015CBC build_trtable   endp
.text:0000000000015CBC
.text:0000000000015CBC ; ---------------------------------------------------------------------------
.text:0000000000015CC1                 align 10h
.text:0000000000015CD0
.text:0000000000015CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015CD0
.text:0000000000015CD0
.text:0000000000015CD0 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:0000000000015CD0 ; __unwind {
.text:0000000000015CD0                 cmp     byte ptr [rsi+30h], 10h
.text:0000000000015CD4                 jz      short loc_15D38
.text:0000000000015CD6                 push    rbp
.text:0000000000015CD7                 push    rbx
.text:0000000000015CD8                 mov     rbx, rsi
.text:0000000000015CDB                 mov     rbp, rdi
.text:0000000000015CDE                 sub     rsp, 8
.text:0000000000015CE2                 mov     [rbx+18h], rsi
.text:0000000000015CE6                 mov     rdx, [rbx+30h]
.text:0000000000015CEA                 mov     rsi, [rsi+28h]
.text:0000000000015CEE                 call    re_dfa_add_node
.text:0000000000015CF3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015CF7                 mov     rdx, rax
.text:0000000000015CFA                 mov     [rbx+38h], rax
.text:0000000000015CFE                 jz      short loc_15D50
.text:0000000000015D00                 xor     eax, eax
.text:0000000000015D02                 cmp     byte ptr [rbx+30h], 0Ch
.text:0000000000015D06                 jnz     short loc_15D2C
.text:0000000000015D08                 mov     ecx, [rbx+28h]
.text:0000000000015D0B                 shl     rdx, 4
.text:0000000000015D0F                 add     rdx, [rbp+0]
.text:0000000000015D13                 and     ecx, 3FFh
.text:0000000000015D19                 shl     ecx, 8
.text:0000000000015D1C                 mov     esi, ecx
.text:0000000000015D1E                 mov     ecx, [rdx+8]
.text:0000000000015D21                 and     ecx, 0FFFC00FFh
.text:0000000000015D27                 or      ecx, esi
.text:0000000000015D29                 mov     [rdx+8], ecx
.text:0000000000015D2C
.text:0000000000015D2C loc_15D2C:                              ; CODE XREF: calc_first+36↑j
.text:0000000000015D2C                                         ; calc_first+85↓j
.text:0000000000015D2C                 add     rsp, 8
.text:0000000000015D30                 pop     rbx
.text:0000000000015D31                 pop     rbp
.text:0000000000015D32                 retn
.text:0000000000015D32 ; ---------------------------------------------------------------------------
.text:0000000000015D33                 align 8
.text:0000000000015D38
.text:0000000000015D38 loc_15D38:                              ; CODE XREF: calc_first+4↑j
.text:0000000000015D38                 mov     rax, [rsi+8]
.text:0000000000015D3C                 mov     rdx, [rax+18h]
.text:0000000000015D40                 mov     rax, [rax+38h]
.text:0000000000015D44                 mov     [rsi+18h], rdx
.text:0000000000015D48                 mov     [rsi+38h], rax
.text:0000000000015D4C                 xor     eax, eax
.text:0000000000015D4E                 retn
.text:0000000000015D4E ; ---------------------------------------------------------------------------
.text:0000000000015D4F                 align 10h
.text:0000000000015D50
.text:0000000000015D50 loc_15D50:                              ; CODE XREF: calc_first+2E↑j
.text:0000000000015D50                 mov     eax, 0Ch
.text:0000000000015D55                 jmp     short loc_15D2C
.text:0000000000015D55 ; } // starts at 15CD0
.text:0000000000015D55 calc_first      endp
.text:0000000000015D55
.text:0000000000015D55 ; ---------------------------------------------------------------------------
.text:0000000000015D57                 align 20h
.text:0000000000015D60
.text:0000000000015D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D60
.text:0000000000015D60
.text:0000000000015D60 free_fail_stack_return_part_24 proc near
.text:0000000000015D60                                         ; CODE XREF: set_regs+4FF↓p
.text:0000000000015D60                                         ; set_regs+567↓p ...
.text:0000000000015D60 ; __unwind {
.text:0000000000015D60                 push    r12
.text:0000000000015D62                 push    rbp
.text:0000000000015D63                 mov     rbp, rdi
.text:0000000000015D66                 push    rbx
.text:0000000000015D67                 cmp     qword ptr [rdi], 0
.text:0000000000015D6B                 jle     short loc_15DA2
.text:0000000000015D6D                 xor     ebx, ebx
.text:0000000000015D6F                 xor     r12d, r12d
.text:0000000000015D72                 nop     word ptr [rax+rax+00h]
.text:0000000000015D78
.text:0000000000015D78 loc_15D78:                              ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:0000000000015D78                 mov     rax, [rbp+10h]
.text:0000000000015D7C                 add     r12, 1
.text:0000000000015D80                 mov     rdi, [rax+rbx+28h] ; ptr
.text:0000000000015D85                 call    free
.text:0000000000015D8A                 mov     rax, [rbp+10h]
.text:0000000000015D8E                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000015D93                 add     rbx, 30h ; '0'
.text:0000000000015D97                 call    free
.text:0000000000015D9C                 cmp     r12, [rbp+0]
.text:0000000000015DA0                 jl      short loc_15D78
.text:0000000000015DA2
.text:0000000000015DA2 loc_15DA2:                              ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:0000000000015DA2                 pop     rbx
.text:0000000000015DA3                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000015DA7                 pop     rbp
.text:0000000000015DA8                 pop     r12
.text:0000000000015DAA                 jmp     free
.text:0000000000015DAA ; } // starts at 15D60
.text:0000000000015DAA free_fail_stack_return_part_24 endp
.text:0000000000015DAA
.text:0000000000015DAA ; ---------------------------------------------------------------------------
.text:0000000000015DAF                 align 10h
.text:0000000000015DB0
.text:0000000000015DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015DB0
.text:0000000000015DB0
.text:0000000000015DB0 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:0000000000015DB0                                         ; set_regs+606↓p
.text:0000000000015DB0 ; __unwind {
.text:0000000000015DB0                 push    r12
.text:0000000000015DB2                 push    rbp
.text:0000000000015DB3                 push    rbx
.text:0000000000015DB4                 mov     rax, [rdi]
.text:0000000000015DB7                 sub     rax, 1
.text:0000000000015DBB                 test    rax, rax
.text:0000000000015DBE                 mov     [rdi], rax
.text:0000000000015DC1                 js      short loc_15E25
.text:0000000000015DC3                 lea     rbx, [rax+rax*2]
.text:0000000000015DC7                 mov     rax, [rsi]
.text:0000000000015DCA                 mov     r12, rsi
.text:0000000000015DCD                 shl     rcx, 4
.text:0000000000015DD1                 mov     rbp, r9
.text:0000000000015DD4                 mov     rdi, r8         ; dest
.text:0000000000015DD7                 shl     rbx, 4
.text:0000000000015DDB                 add     rax, rbx
.text:0000000000015DDE                 mov     rsi, [rax]
.text:0000000000015DE1                 mov     [rdx], rsi
.text:0000000000015DE4                 mov     rsi, [rax+10h]  ; src
.text:0000000000015DE8                 mov     rdx, rcx        ; n
.text:0000000000015DEB                 call    _memcpy
.text:0000000000015DF0                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000015DF4                 call    free
.text:0000000000015DF9                 mov     rax, [r12]
.text:0000000000015DFD                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000015E02                 call    free
.text:0000000000015E07                 add     rbx, [r12]
.text:0000000000015E0B                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:0000000000015E10                 movaps  xmmword ptr [rbp+0], xmm0
.text:0000000000015E14                 mov     rax, [rbx+28h]
.text:0000000000015E18                 mov     [rbp+10h], rax
.text:0000000000015E1C                 mov     rax, [rbx+8]
.text:0000000000015E20                 pop     rbx
.text:0000000000015E21                 pop     rbp
.text:0000000000015E22                 pop     r12
.text:0000000000015E24                 retn
.text:0000000000015E25 ; ---------------------------------------------------------------------------
.text:0000000000015E25
.text:0000000000015E25 loc_15E25:                              ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:0000000000015E25                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:0000000000015E2C                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000015E33                 lea     rdi, aNum0      ; "num >= 0"
.text:0000000000015E3A                 mov     edx, 555h       ; line
.text:0000000000015E3F                 call    ___assert_fail
.text:0000000000015E3F ; } // starts at 15DB0
.text:0000000000015E3F pop_fail_stack_isra_25 endp
.text:0000000000015E3F
.text:0000000000015E3F ; ---------------------------------------------------------------------------
.text:0000000000015E44                 align 10h
.text:0000000000015E50
.text:0000000000015E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000015E50
.text:0000000000015E50
.text:0000000000015E50 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:0000000000015E50                                         ; parse_expression+C68↓p
.text:0000000000015E50 ; __unwind {
.text:0000000000015E50                 push    rbp
.text:0000000000015E51                 push    rbx
.text:0000000000015E52                 mov     rbp, rdi
.text:0000000000015E55                 mov     rdi, rsi        ; s
.text:0000000000015E58                 mov     rbx, rsi
.text:0000000000015E5B                 sub     rsp, 8
.text:0000000000015E5F                 call    _strlen
.text:0000000000015E64                 cmp     rax, 1
.text:0000000000015E68                 jnz     short loc_15E90
.text:0000000000015E6A                 movzx   ecx, byte ptr [rbx]
.text:0000000000015E6D                 mov     rdx, rcx
.text:0000000000015E70                 and     ecx, 3Fh
.text:0000000000015E73                 shr     rdx, 3
.text:0000000000015E77                 shl     rax, cl
.text:0000000000015E7A                 and     edx, 18h
.text:0000000000015E7D                 or      [rbp+rdx+0], rax
.text:0000000000015E82                 add     rsp, 8
.text:0000000000015E86                 xor     eax, eax
.text:0000000000015E88                 pop     rbx
.text:0000000000015E89                 pop     rbp
.text:0000000000015E8A                 retn
.text:0000000000015E8A ; ---------------------------------------------------------------------------
.text:0000000000015E8B                 align 10h
.text:0000000000015E90
.text:0000000000015E90 loc_15E90:                              ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:0000000000015E90                 add     rsp, 8
.text:0000000000015E94                 mov     eax, 3
.text:0000000000015E99                 pop     rbx
.text:0000000000015E9A                 pop     rbp
.text:0000000000015E9B                 retn
.text:0000000000015E9B ; } // starts at 15E50
.text:0000000000015E9B build_equiv_class_isra_27 endp
.text:0000000000015E9B
.text:0000000000015E9B ; ---------------------------------------------------------------------------
.text:0000000000015E9C                 align 20h
.text:0000000000015EA0
.text:0000000000015EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015EA0
.text:0000000000015EA0
.text:0000000000015EA0 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:0000000000015EA0                                         ; parse_expression+D1D↓p
.text:0000000000015EA0
.text:0000000000015EA0 var_38          = qword ptr -38h
.text:0000000000015EA0 var_30          = qword ptr -30h
.text:0000000000015EA0 arg_0           = qword ptr  8
.text:0000000000015EA0
.text:0000000000015EA0 ; __unwind {
.text:0000000000015EA0                 push    r14
.text:0000000000015EA2                 push    r13
.text:0000000000015EA4                 mov     r13, rcx
.text:0000000000015EA7                 push    r12
.text:0000000000015EA9                 push    rbp
.text:0000000000015EAA                 mov     r12, r9
.text:0000000000015EAD                 push    rbx
.text:0000000000015EAE                 mov     rbp, rdi
.text:0000000000015EB1                 mov     rbx, rsi
.text:0000000000015EB4                 sub     rsp, 10h
.text:0000000000015EB8                 test    [rsp+38h+arg_0], 400000h
.text:0000000000015EC1                 jz      short loc_15EE8
.text:0000000000015EC3                 lea     rdi, aUpper     ; "upper"
.text:0000000000015ECA                 mov     ecx, 6
.text:0000000000015ECF                 mov     rsi, r9
.text:0000000000015ED2                 repe cmpsb
.text:0000000000015ED4                 setnbe  al
.text:0000000000015ED7                 sbb     al, 0
.text:0000000000015ED9                 test    al, al
.text:0000000000015EDB                 jnz     loc_15FD6
.text:0000000000015EE1                 lea     r12, aAlpha     ; "alpha"
.text:0000000000015EE8
.text:0000000000015EE8 loc_15EE8:                              ; CODE XREF: build_charclass_isra_29+21↑j
.text:0000000000015EE8                 mov     rcx, [r13+0]
.text:0000000000015EEC                 cmp     [r8], rcx
.text:0000000000015EEF                 mov     rax, [rdx]
.text:0000000000015EF2                 jz      loc_16009
.text:0000000000015EF8
.text:0000000000015EF8 loc_15EF8:                              ; CODE XREF: build_charclass_isra_29+163↓j
.text:0000000000015EF8                                         ; build_charclass_isra_29+1A3↓j
.text:0000000000015EF8                 lea     rdx, [rcx+1]
.text:0000000000015EFC                 mov     rdi, r12        ; property
.text:0000000000015EFF                 mov     [r13+0], rdx
.text:0000000000015F03                 lea     r13, [rax+rcx*8]
.text:0000000000015F07                 call    _wctype
.text:0000000000015F0C                 lea     rdi, aAlnum     ; "alnum"
.text:0000000000015F13                 mov     [r13+0], rax
.text:0000000000015F17                 mov     ecx, 6
.text:0000000000015F1C                 mov     rsi, r12
.text:0000000000015F1F                 repe cmpsb
.text:0000000000015F21                 setnbe  al
.text:0000000000015F24                 sbb     al, 0
.text:0000000000015F26                 test    al, al
.text:0000000000015F28                 jz      short loc_15F98
.text:0000000000015F2A                 lea     rdi, aCntrl     ; "cntrl"
.text:0000000000015F31                 mov     ecx, 6
.text:0000000000015F36                 mov     rsi, r12
.text:0000000000015F39                 repe cmpsb
.text:0000000000015F3B                 setnbe  al
.text:0000000000015F3E                 sbb     al, 0
.text:0000000000015F40                 test    al, al
.text:0000000000015F42                 jnz     loc_16048
.text:0000000000015F48                 call    ___ctype_b_loc
.text:0000000000015F4D                 xor     ecx, ecx
.text:0000000000015F4F                 test    rbp, rbp
.text:0000000000015F52                 mov     rdx, [rax]
.text:0000000000015F55                 mov     edi, 1
.text:0000000000015F5A                 jnz     loc_1621A
.text:0000000000015F60
.text:0000000000015F60 loc_15F60:                              ; CODE XREF: build_charclass_isra_29+E2↓j
.text:0000000000015F60                 test    byte ptr [rdx+rcx*2], 2
.text:0000000000015F64                 jz      short loc_15F77
.text:0000000000015F66                 mov     rax, rcx
.text:0000000000015F69                 mov     rsi, rdi
.text:0000000000015F6C                 sar     rax, 6
.text:0000000000015F70                 shl     rsi, cl
.text:0000000000015F73                 or      [rbx+rax*8], rsi
.text:0000000000015F77
.text:0000000000015F77 loc_15F77:                              ; CODE XREF: build_charclass_isra_29+C4↑j
.text:0000000000015F77                 add     rcx, 1
.text:0000000000015F7B                 cmp     rcx, 100h
.text:0000000000015F82                 jnz     short loc_15F60
.text:0000000000015F84
.text:0000000000015F84 loc_15F84:                              ; CODE XREF: build_charclass_isra_29+134↓j
.text:0000000000015F84                                         ; build_charclass_isra_29+225↓j ...
.text:0000000000015F84                 xor     eax, eax
.text:0000000000015F86
.text:0000000000015F86 loc_15F86:                              ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:0000000000015F86                                         ; build_charclass_isra_29+765↓j
.text:0000000000015F86                 add     rsp, 10h
.text:0000000000015F8A                 pop     rbx
.text:0000000000015F8B                 pop     rbp
.text:0000000000015F8C                 pop     r12
.text:0000000000015F8E                 pop     r13
.text:0000000000015F90                 pop     r14
.text:0000000000015F92                 retn
.text:0000000000015F92 ; ---------------------------------------------------------------------------
.text:0000000000015F93                 align 8
.text:0000000000015F98
.text:0000000000015F98 loc_15F98:                              ; CODE XREF: build_charclass_isra_29+88↑j
.text:0000000000015F98                 call    ___ctype_b_loc
.text:0000000000015F9D                 xor     ecx, ecx
.text:0000000000015F9F                 test    rbp, rbp
.text:0000000000015FA2                 mov     rdx, [rax]
.text:0000000000015FA5                 mov     edi, 1
.text:0000000000015FAA                 jnz     loc_1619A
.text:0000000000015FB0
.text:0000000000015FB0 loc_15FB0:                              ; CODE XREF: build_charclass_isra_29+132↓j
.text:0000000000015FB0                 test    byte ptr [rdx+rcx*2], 8
.text:0000000000015FB4                 jz      short loc_15FC7
.text:0000000000015FB6                 mov     rax, rcx
.text:0000000000015FB9                 mov     rsi, rdi
.text:0000000000015FBC                 sar     rax, 6
.text:0000000000015FC0                 shl     rsi, cl
.text:0000000000015FC3                 or      [rbx+rax*8], rsi
.text:0000000000015FC7
.text:0000000000015FC7 loc_15FC7:                              ; CODE XREF: build_charclass_isra_29+114↑j
.text:0000000000015FC7                 add     rcx, 1
.text:0000000000015FCB                 cmp     rcx, 100h
.text:0000000000015FD2                 jnz     short loc_15FB0
.text:0000000000015FD4                 jmp     short loc_15F84
.text:0000000000015FD6 ; ---------------------------------------------------------------------------
.text:0000000000015FD6
.text:0000000000015FD6 loc_15FD6:                              ; CODE XREF: build_charclass_isra_29+3B↑j
.text:0000000000015FD6                 lea     rdi, aLower     ; "lower"
.text:0000000000015FDD                 mov     ecx, 6
.text:0000000000015FE2                 mov     rsi, r9
.text:0000000000015FE5                 repe cmpsb
.text:0000000000015FE7                 mov     rcx, [r13+0]
.text:0000000000015FEB                 setnbe  al
.text:0000000000015FEE                 sbb     al, 0
.text:0000000000015FF0                 test    al, al
.text:0000000000015FF2                 lea     rax, aAlpha     ; "alpha"
.text:0000000000015FF9                 cmovz   r12, rax
.text:0000000000015FFD                 cmp     [r8], rcx
.text:0000000000016000                 mov     rax, [rdx]
.text:0000000000016003                 jnz     loc_15EF8
.text:0000000000016009
.text:0000000000016009 loc_16009:                              ; CODE XREF: build_charclass_isra_29+52↑j
.text:0000000000016009                 lea     r14, [rcx+rcx+1]
.text:000000000001600E                 mov     rdi, rax        ; ptr
.text:0000000000016011                 mov     [rsp+38h+var_30], r8
.text:0000000000016016                 mov     [rsp+38h+var_38], rdx
.text:000000000001601A                 lea     rsi, ds:0[r14*8] ; size
.text:0000000000016022                 call    _realloc
.text:0000000000016027                 test    rax, rax
.text:000000000001602A                 jz      loc_16348
.text:0000000000016030                 mov     rdx, [rsp+38h+var_38]
.text:0000000000016034                 mov     r8, [rsp+38h+var_30]
.text:0000000000016039                 mov     [rdx], rax
.text:000000000001603C                 mov     [r8], r14
.text:000000000001603F                 mov     rcx, [r13+0]
.text:0000000000016043                 jmp     loc_15EF8
.text:0000000000016048 ; ---------------------------------------------------------------------------
.text:0000000000016048
.text:0000000000016048 loc_16048:                              ; CODE XREF: build_charclass_isra_29+A2↑j
.text:0000000000016048                 lea     rdi, aLower     ; "lower"
.text:000000000001604F                 mov     ecx, 6
.text:0000000000016054                 mov     rsi, r12
.text:0000000000016057                 repe cmpsb
.text:0000000000016059                 setnbe  al
.text:000000000001605C                 sbb     al, 0
.text:000000000001605E                 test    al, al
.text:0000000000016060                 jz      short loc_160CA
.text:0000000000016062                 lea     rdi, aSpace     ; "space"
.text:0000000000016069                 mov     ecx, 6
.text:000000000001606E                 mov     rsi, r12
.text:0000000000016071                 repe cmpsb
.text:0000000000016073                 setnbe  al
.text:0000000000016076                 sbb     al, 0
.text:0000000000016078                 test    al, al
.text:000000000001607A                 jnz     loc_16112
.text:0000000000016080                 call    ___ctype_b_loc
.text:0000000000016085                 xor     ecx, ecx
.text:0000000000016087                 test    rbp, rbp
.text:000000000001608A                 mov     rdx, [rax]
.text:000000000001608D                 mov     edi, 1
.text:0000000000016092                 jnz     loc_163EE
.text:0000000000016098                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000160A0
.text:00000000000160A0 loc_160A0:                              ; CODE XREF: build_charclass_isra_29+223↓j
.text:00000000000160A0                 test    byte ptr [rdx+rcx*2+1], 20h
.text:00000000000160A5                 jz      short loc_160B8
.text:00000000000160A7                 mov     rax, rcx
.text:00000000000160AA                 mov     rsi, rdi
.text:00000000000160AD                 sar     rax, 6
.text:00000000000160B1                 shl     rsi, cl
.text:00000000000160B4                 or      [rbx+rax*8], rsi
.text:00000000000160B8
.text:00000000000160B8 loc_160B8:                              ; CODE XREF: build_charclass_isra_29+205↑j
.text:00000000000160B8                 add     rcx, 1
.text:00000000000160BC                 cmp     rcx, 100h
.text:00000000000160C3                 jnz     short loc_160A0
.text:00000000000160C5                 jmp     loc_15F84
.text:00000000000160CA ; ---------------------------------------------------------------------------
.text:00000000000160CA
.text:00000000000160CA loc_160CA:                              ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:00000000000160CA                 call    ___ctype_b_loc
.text:00000000000160CF                 xor     ecx, ecx
.text:00000000000160D1                 test    rbp, rbp
.text:00000000000160D4                 mov     rdx, [rax]
.text:00000000000160D7                 mov     edi, 1
.text:00000000000160DC                 jnz     loc_162B2
.text:00000000000160E2                 nop     word ptr [rax+rax+00h]
.text:00000000000160E8
.text:00000000000160E8 loc_160E8:                              ; CODE XREF: build_charclass_isra_29+26B↓j
.text:00000000000160E8                 test    byte ptr [rdx+rcx*2+1], 2
.text:00000000000160ED                 jz      short loc_16100
.text:00000000000160EF                 mov     rax, rcx
.text:00000000000160F2                 mov     rsi, rdi
.text:00000000000160F5                 sar     rax, 6
.text:00000000000160F9                 shl     rsi, cl
.text:00000000000160FC                 or      [rbx+rax*8], rsi
.text:0000000000016100
.text:0000000000016100 loc_16100:                              ; CODE XREF: build_charclass_isra_29+24D↑j
.text:0000000000016100                 add     rcx, 1
.text:0000000000016104                 cmp     rcx, 100h
.text:000000000001610B                 jnz     short loc_160E8
.text:000000000001610D                 jmp     loc_15F84
.text:0000000000016112 ; ---------------------------------------------------------------------------
.text:0000000000016112
.text:0000000000016112 loc_16112:                              ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:0000000000016112                 lea     rdi, aAlpha     ; "alpha"
.text:0000000000016119                 mov     ecx, 6
.text:000000000001611E                 mov     rsi, r12
.text:0000000000016121                 repe cmpsb
.text:0000000000016123                 setnbe  al
.text:0000000000016126                 sbb     al, 0
.text:0000000000016128                 test    al, al
.text:000000000001612A                 jz      loc_161D3
.text:0000000000016130                 lea     rdi, aDigit     ; "digit"
.text:0000000000016137                 mov     ecx, 6
.text:000000000001613C                 mov     rsi, r12
.text:000000000001613F                 repe cmpsb
.text:0000000000016141                 setnbe  al
.text:0000000000016144                 sbb     al, 0
.text:0000000000016146                 test    al, al
.text:0000000000016148                 jnz     loc_16253
.text:000000000001614E                 call    ___ctype_b_loc
.text:0000000000016153                 xor     ecx, ecx
.text:0000000000016155                 test    rbp, rbp
.text:0000000000016158                 mov     rdx, [rax]
.text:000000000001615B                 mov     edi, 1
.text:0000000000016160                 jnz     loc_1660A
.text:0000000000016166                 db      2Eh
.text:0000000000016166                 nop     word ptr [rax+rax+00000000h]
.text:0000000000016170
.text:0000000000016170 loc_16170:                              ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:0000000000016170                 test    byte ptr [rdx+rcx*2+1], 8
.text:0000000000016175                 jz      short loc_16188
.text:0000000000016177                 mov     rax, rcx
.text:000000000001617A                 mov     rsi, rdi
.text:000000000001617D                 sar     rax, 6
.text:0000000000016181                 shl     rsi, cl
.text:0000000000016184                 or      [rbx+rax*8], rsi
.text:0000000000016188
.text:0000000000016188 loc_16188:                              ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:0000000000016188                 add     rcx, 1
.text:000000000001618C                 cmp     rcx, 100h
.text:0000000000016193                 jnz     short loc_16170
.text:0000000000016195                 jmp     loc_15F84
.text:000000000001619A ; ---------------------------------------------------------------------------
.text:000000000001619A
.text:000000000001619A loc_1619A:                              ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000001619A                 xor     eax, eax
.text:000000000001619C                 nop     dword ptr [rax+00h]
.text:00000000000161A0
.text:00000000000161A0 loc_161A0:                              ; CODE XREF: build_charclass_isra_29+32C↓j
.text:00000000000161A0                 test    byte ptr [rdx+rax*2], 8
.text:00000000000161A4                 jz      short loc_161C2
.text:00000000000161A6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000161AB                 mov     r10, rdi
.text:00000000000161AE                 mov     rsi, rcx
.text:00000000000161B1                 and     ecx, 3Fh
.text:00000000000161B4                 shr     rsi, 3
.text:00000000000161B8                 shl     r10, cl
.text:00000000000161BB                 and     esi, 18h
.text:00000000000161BE                 or      [rbx+rsi], r10
.text:00000000000161C2
.text:00000000000161C2 loc_161C2:                              ; CODE XREF: build_charclass_isra_29+304↑j
.text:00000000000161C2                 add     rax, 1
.text:00000000000161C6                 cmp     rax, 100h
.text:00000000000161CC                 jnz     short loc_161A0
.text:00000000000161CE                 jmp     loc_15F84
.text:00000000000161D3 ; ---------------------------------------------------------------------------
.text:00000000000161D3
.text:00000000000161D3 loc_161D3:                              ; CODE XREF: build_charclass_isra_29+28A↑j
.text:00000000000161D3                 call    ___ctype_b_loc
.text:00000000000161D8                 xor     ecx, ecx
.text:00000000000161DA                 test    rbp, rbp
.text:00000000000161DD                 mov     rdx, [rax]
.text:00000000000161E0                 mov     edi, 1
.text:00000000000161E5                 jnz     loc_163B8
.text:00000000000161EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000161F0
.text:00000000000161F0 loc_161F0:                              ; CODE XREF: build_charclass_isra_29+373↓j
.text:00000000000161F0                 test    byte ptr [rdx+rcx*2+1], 4
.text:00000000000161F5                 jz      short loc_16208
.text:00000000000161F7                 mov     rax, rcx
.text:00000000000161FA                 mov     rsi, rdi
.text:00000000000161FD                 sar     rax, 6
.text:0000000000016201                 shl     rsi, cl
.text:0000000000016204                 or      [rbx+rax*8], rsi
.text:0000000000016208
.text:0000000000016208 loc_16208:                              ; CODE XREF: build_charclass_isra_29+355↑j
.text:0000000000016208                 add     rcx, 1
.text:000000000001620C                 cmp     rcx, 100h
.text:0000000000016213                 jnz     short loc_161F0
.text:0000000000016215                 jmp     loc_15F84
.text:000000000001621A ; ---------------------------------------------------------------------------
.text:000000000001621A
.text:000000000001621A loc_1621A:                              ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000001621A                 xor     eax, eax
.text:000000000001621C                 nop     dword ptr [rax+00h]
.text:0000000000016220
.text:0000000000016220 loc_16220:                              ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:0000000000016220                 test    byte ptr [rdx+rax*2], 2
.text:0000000000016224                 jz      short loc_16242
.text:0000000000016226                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000001622B                 mov     r11, rdi
.text:000000000001622E                 mov     rsi, rcx
.text:0000000000016231                 and     ecx, 3Fh
.text:0000000000016234                 shr     rsi, 3
.text:0000000000016238                 shl     r11, cl
.text:000000000001623B                 and     esi, 18h
.text:000000000001623E                 or      [rbx+rsi], r11
.text:0000000000016242
.text:0000000000016242 loc_16242:                              ; CODE XREF: build_charclass_isra_29+384↑j
.text:0000000000016242                 add     rax, 1
.text:0000000000016246                 cmp     rax, 100h
.text:000000000001624C                 jnz     short loc_16220
.text:000000000001624E                 jmp     loc_15F84
.text:0000000000016253 ; ---------------------------------------------------------------------------
.text:0000000000016253
.text:0000000000016253 loc_16253:                              ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:0000000000016253                 lea     rdi, aPrint     ; "print"
.text:000000000001625A                 mov     ecx, 6
.text:000000000001625F                 mov     rsi, r12
.text:0000000000016262                 repe cmpsb
.text:0000000000016264                 setnbe  al
.text:0000000000016267                 sbb     al, 0
.text:0000000000016269                 test    al, al
.text:000000000001626B                 jnz     short loc_162EC
.text:000000000001626D                 call    ___ctype_b_loc
.text:0000000000016272                 xor     ecx, ecx
.text:0000000000016274                 test    rbp, rbp
.text:0000000000016277                 mov     rdx, [rax]
.text:000000000001627A                 mov     edi, 1
.text:000000000001627F                 jnz     loc_16677
.text:0000000000016285                 nop     dword ptr [rax]
.text:0000000000016288
.text:0000000000016288 loc_16288:                              ; CODE XREF: build_charclass_isra_29+40B↓j
.text:0000000000016288                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000001628D                 jz      short loc_162A0
.text:000000000001628F                 mov     rax, rcx
.text:0000000000016292                 mov     rsi, rdi
.text:0000000000016295                 sar     rax, 6
.text:0000000000016299                 shl     rsi, cl
.text:000000000001629C                 or      [rbx+rax*8], rsi
.text:00000000000162A0
.text:00000000000162A0 loc_162A0:                              ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:00000000000162A0                 add     rcx, 1
.text:00000000000162A4                 cmp     rcx, 100h
.text:00000000000162AB                 jnz     short loc_16288
.text:00000000000162AD                 jmp     loc_15F84
.text:00000000000162B2 ; ---------------------------------------------------------------------------
.text:00000000000162B2
.text:00000000000162B2 loc_162B2:                              ; CODE XREF: build_charclass_isra_29+23C↑j
.text:00000000000162B2                 xor     eax, eax
.text:00000000000162B4                 nop     dword ptr [rax+00h]
.text:00000000000162B8
.text:00000000000162B8 loc_162B8:                              ; CODE XREF: build_charclass_isra_29+445↓j
.text:00000000000162B8                 test    byte ptr [rdx+rax*2+1], 2
.text:00000000000162BD                 jz      short loc_162DB
.text:00000000000162BF                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000162C4                 mov     r14, rdi
.text:00000000000162C7                 mov     rsi, rcx
.text:00000000000162CA                 and     ecx, 3Fh
.text:00000000000162CD                 shr     rsi, 3
.text:00000000000162D1                 shl     r14, cl
.text:00000000000162D4                 and     esi, 18h
.text:00000000000162D7                 or      [rbx+rsi], r14
.text:00000000000162DB
.text:00000000000162DB loc_162DB:                              ; CODE XREF: build_charclass_isra_29+41D↑j
.text:00000000000162DB                 add     rax, 1
.text:00000000000162DF                 cmp     rax, 100h
.text:00000000000162E5                 jnz     short loc_162B8
.text:00000000000162E7                 jmp     loc_15F84
.text:00000000000162EC ; ---------------------------------------------------------------------------
.text:00000000000162EC
.text:00000000000162EC loc_162EC:                              ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:00000000000162EC                 lea     rdi, aUpper     ; "upper"
.text:00000000000162F3                 mov     ecx, 6
.text:00000000000162F8                 mov     rsi, r12
.text:00000000000162FB                 repe cmpsb
.text:00000000000162FD                 setnbe  al
.text:0000000000016300                 sbb     al, 0
.text:0000000000016302                 test    al, al
.text:0000000000016304                 jnz     short loc_16352
.text:0000000000016306                 call    ___ctype_b_loc
.text:000000000001630B                 xor     ecx, ecx
.text:000000000001630D                 test    rbp, rbp
.text:0000000000016310                 mov     rax, [rax]
.text:0000000000016313                 mov     edi, 1
.text:0000000000016318                 jnz     loc_16640
.text:000000000001631E
.text:000000000001631E loc_1631E:                              ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000001631E                 test    byte ptr [rax+rcx*2+1], 1
.text:0000000000016323                 jz      short loc_16336
.text:0000000000016325                 mov     rdx, rcx
.text:0000000000016328                 mov     rsi, rdi
.text:000000000001632B                 sar     rdx, 6
.text:000000000001632F                 shl     rsi, cl
.text:0000000000016332                 or      [rbx+rdx*8], rsi
.text:0000000000016336
.text:0000000000016336 loc_16336:                              ; CODE XREF: build_charclass_isra_29+483↑j
.text:0000000000016336                 add     rcx, 1
.text:000000000001633A                 cmp     rcx, 100h
.text:0000000000016341                 jnz     short loc_1631E
.text:0000000000016343                 jmp     loc_15F84
.text:0000000000016348 ; ---------------------------------------------------------------------------
.text:0000000000016348
.text:0000000000016348 loc_16348:                              ; CODE XREF: build_charclass_isra_29+18A↑j
.text:0000000000016348                 mov     eax, 0Ch
.text:000000000001634D                 jmp     loc_15F86
.text:0000000000016352 ; ---------------------------------------------------------------------------
.text:0000000000016352
.text:0000000000016352 loc_16352:                              ; CODE XREF: build_charclass_isra_29+464↑j
.text:0000000000016352                 lea     rdi, aBlank     ; "blank"
.text:0000000000016359                 mov     ecx, 6
.text:000000000001635E                 mov     rsi, r12
.text:0000000000016361                 repe cmpsb
.text:0000000000016363                 setnbe  al
.text:0000000000016366                 sbb     al, 0
.text:0000000000016368                 test    al, al
.text:000000000001636A                 jnz     loc_1645E
.text:0000000000016370                 call    ___ctype_b_loc
.text:0000000000016375                 xor     ecx, ecx
.text:0000000000016377                 test    rbp, rbp
.text:000000000001637A                 mov     rdx, [rax]
.text:000000000001637D                 mov     esi, 1
.text:0000000000016382                 jnz     loc_16424
.text:0000000000016388
.text:0000000000016388 loc_16388:                              ; CODE XREF: build_charclass_isra_29+50A↓j
.text:0000000000016388                 test    byte ptr [rdx+rcx*2], 1
.text:000000000001638C                 jz      short loc_1639F
.text:000000000001638E                 mov     rax, rcx
.text:0000000000016391                 mov     rdi, rsi
.text:0000000000016394                 sar     rax, 6
.text:0000000000016398                 shl     rdi, cl
.text:000000000001639B                 or      [rbx+rax*8], rdi
.text:000000000001639F
.text:000000000001639F loc_1639F:                              ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000001639F                 add     rcx, 1
.text:00000000000163A3                 cmp     rcx, 100h
.text:00000000000163AA                 jnz     short loc_16388
.text:00000000000163AC                 jmp     loc_15F84
.text:00000000000163AC ; ---------------------------------------------------------------------------
.text:00000000000163B1                 align 8
.text:00000000000163B8
.text:00000000000163B8 loc_163B8:                              ; CODE XREF: build_charclass_isra_29+345↑j
.text:00000000000163B8                 xor     eax, eax
.text:00000000000163BA
.text:00000000000163BA loc_163BA:                              ; CODE XREF: build_charclass_isra_29+547↓j
.text:00000000000163BA                 test    byte ptr [rdx+rax*2+1], 4
.text:00000000000163BF                 jz      short loc_163DD
.text:00000000000163C1                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000163C6                 mov     r9, rdi
.text:00000000000163C9                 mov     rsi, rcx
.text:00000000000163CC                 and     ecx, 3Fh
.text:00000000000163CF                 shr     rsi, 3
.text:00000000000163D3                 shl     r9, cl
.text:00000000000163D6                 and     esi, 18h
.text:00000000000163D9                 or      [rbx+rsi], r9
.text:00000000000163DD
.text:00000000000163DD loc_163DD:                              ; CODE XREF: build_charclass_isra_29+51F↑j
.text:00000000000163DD                 add     rax, 1
.text:00000000000163E1                 cmp     rax, 100h
.text:00000000000163E7                 jnz     short loc_163BA
.text:00000000000163E9                 jmp     loc_15F84
.text:00000000000163EE ; ---------------------------------------------------------------------------
.text:00000000000163EE
.text:00000000000163EE loc_163EE:                              ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:00000000000163EE                 xor     eax, eax
.text:00000000000163F0
.text:00000000000163F0 loc_163F0:                              ; CODE XREF: build_charclass_isra_29+57D↓j
.text:00000000000163F0                 test    byte ptr [rdx+rax*2+1], 20h
.text:00000000000163F5                 jz      short loc_16413
.text:00000000000163F7                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000163FC                 mov     r9, rdi
.text:00000000000163FF                 mov     rsi, rcx
.text:0000000000016402                 and     ecx, 3Fh
.text:0000000000016405                 shr     rsi, 3
.text:0000000000016409                 shl     r9, cl
.text:000000000001640C                 and     esi, 18h
.text:000000000001640F                 or      [rbx+rsi], r9
.text:0000000000016413
.text:0000000000016413 loc_16413:                              ; CODE XREF: build_charclass_isra_29+555↑j
.text:0000000000016413                 add     rax, 1
.text:0000000000016417                 cmp     rax, 100h
.text:000000000001641D                 jnz     short loc_163F0
.text:000000000001641F                 jmp     loc_15F84
.text:0000000000016424 ; ---------------------------------------------------------------------------
.text:0000000000016424
.text:0000000000016424 loc_16424:                              ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:0000000000016424                 xor     eax, eax
.text:0000000000016426                 mov     edi, 1
.text:000000000001642B
.text:000000000001642B loc_1642B:                              ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000001642B                 test    byte ptr [rdx+rax*2], 1
.text:000000000001642F                 jz      short loc_1644D
.text:0000000000016431                 movzx   ecx, byte ptr [rbp+rax+0]
.text:0000000000016436                 mov     r14, rdi
.text:0000000000016439                 mov     rsi, rcx
.text:000000000001643C                 and     ecx, 3Fh
.text:000000000001643F                 shr     rsi, 3
.text:0000000000016443                 shl     r14, cl
.text:0000000000016446                 and     esi, 18h
.text:0000000000016449                 or      [rbx+rsi], r14
.text:000000000001644D
.text:000000000001644D loc_1644D:                              ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000001644D                 add     rax, 1
.text:0000000000016451                 cmp     rax, 100h
.text:0000000000016457                 jnz     short loc_1642B
.text:0000000000016459                 jmp     loc_15F84
.text:000000000001645E ; ---------------------------------------------------------------------------
.text:000000000001645E
.text:000000000001645E loc_1645E:                              ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000001645E                 lea     rsi, aGraph     ; "graph"
.text:0000000000016465                 mov     rdi, r12        ; s1
.text:0000000000016468                 call    _strcmp
.text:000000000001646D                 test    eax, eax
.text:000000000001646F                 jnz     short loc_164EA
.text:0000000000016471                 call    ___ctype_b_loc
.text:0000000000016476                 xor     ecx, ecx
.text:0000000000016478                 test    rbp, rbp
.text:000000000001647B                 mov     rsi, [rax]
.text:000000000001647E                 mov     edx, 1
.text:0000000000016483                 jnz     short loc_164AF
.text:0000000000016485
.text:0000000000016485 loc_16485:                              ; CODE XREF: build_charclass_isra_29+608↓j
.text:0000000000016485                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000001648A                 jns     short loc_1649D
.text:000000000001648C                 mov     rax, rcx
.text:000000000001648F                 mov     rdi, rdx
.text:0000000000016492                 sar     rax, 6
.text:0000000000016496                 shl     rdi, cl
.text:0000000000016499                 or      [rbx+rax*8], rdi
.text:000000000001649D
.text:000000000001649D loc_1649D:                              ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000001649D                 add     rcx, 1
.text:00000000000164A1                 cmp     rcx, 100h
.text:00000000000164A8                 jnz     short loc_16485
.text:00000000000164AA                 jmp     loc_15F84
.text:00000000000164AF ; ---------------------------------------------------------------------------
.text:00000000000164AF
.text:00000000000164AF loc_164AF:                              ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:00000000000164AF                 xor     eax, eax
.text:00000000000164B1                 mov     edi, 1
.text:00000000000164B6
.text:00000000000164B6 loc_164B6:                              ; CODE XREF: build_charclass_isra_29+643↓j
.text:00000000000164B6                 cmp     word ptr [rsi+rax*2], 0
.text:00000000000164BB                 jns     short loc_164D9
.text:00000000000164BD                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000164C2                 mov     r9, rdi
.text:00000000000164C5                 mov     rdx, rcx
.text:00000000000164C8                 and     ecx, 3Fh
.text:00000000000164CB                 shr     rdx, 3
.text:00000000000164CF                 shl     r9, cl
.text:00000000000164D2                 and     edx, 18h
.text:00000000000164D5                 or      [rbx+rdx], r9
.text:00000000000164D9
.text:00000000000164D9 loc_164D9:                              ; CODE XREF: build_charclass_isra_29+61B↑j
.text:00000000000164D9                 add     rax, 1
.text:00000000000164DD                 cmp     rax, 100h
.text:00000000000164E3                 jnz     short loc_164B6
.text:00000000000164E5                 jmp     loc_15F84
.text:00000000000164EA ; ---------------------------------------------------------------------------
.text:00000000000164EA
.text:00000000000164EA loc_164EA:                              ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:00000000000164EA                 lea     rsi, aPunct     ; "punct"
.text:00000000000164F1                 mov     rdi, r12        ; s1
.text:00000000000164F4                 call    _strcmp
.text:00000000000164F9                 test    eax, eax
.text:00000000000164FB                 jnz     short loc_16574
.text:00000000000164FD                 call    ___ctype_b_loc
.text:0000000000016502                 xor     ecx, ecx
.text:0000000000016504                 test    rbp, rbp
.text:0000000000016507                 mov     rsi, [rax]
.text:000000000001650A                 mov     edx, 1
.text:000000000001650F                 jnz     short loc_1653A
.text:0000000000016511
.text:0000000000016511 loc_16511:                              ; CODE XREF: build_charclass_isra_29+693↓j
.text:0000000000016511                 test    byte ptr [rsi+rcx*2], 4
.text:0000000000016515                 jz      short loc_16528
.text:0000000000016517                 mov     rax, rcx
.text:000000000001651A                 mov     rdi, rdx
.text:000000000001651D                 sar     rax, 6
.text:0000000000016521                 shl     rdi, cl
.text:0000000000016524                 or      [rbx+rax*8], rdi
.text:0000000000016528
.text:0000000000016528 loc_16528:                              ; CODE XREF: build_charclass_isra_29+675↑j
.text:0000000000016528                 add     rcx, 1
.text:000000000001652C                 cmp     rcx, 100h
.text:0000000000016533                 jnz     short loc_16511
.text:0000000000016535                 jmp     loc_15F84
.text:000000000001653A ; ---------------------------------------------------------------------------
.text:000000000001653A
.text:000000000001653A loc_1653A:                              ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000001653A                 xor     eax, eax
.text:000000000001653C                 mov     edi, 1
.text:0000000000016541
.text:0000000000016541 loc_16541:                              ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:0000000000016541                 test    byte ptr [rsi+rax*2], 4
.text:0000000000016545                 jz      short loc_16563
.text:0000000000016547                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000001654C                 mov     r14, rdi
.text:000000000001654F                 mov     rdx, rcx
.text:0000000000016552                 and     ecx, 3Fh
.text:0000000000016555                 shr     rdx, 3
.text:0000000000016559                 shl     r14, cl
.text:000000000001655C                 and     edx, 18h
.text:000000000001655F                 or      [rbx+rdx], r14
.text:0000000000016563
.text:0000000000016563 loc_16563:                              ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:0000000000016563                 add     rax, 1
.text:0000000000016567                 cmp     rax, 100h
.text:000000000001656D                 jnz     short loc_16541
.text:000000000001656F                 jmp     loc_15F84
.text:0000000000016574 ; ---------------------------------------------------------------------------
.text:0000000000016574
.text:0000000000016574 loc_16574:                              ; CODE XREF: build_charclass_isra_29+65B↑j
.text:0000000000016574                 lea     rsi, asc_22849  ; "x"
.text:000000000001657B                 mov     rdi, r12        ; s1
.text:000000000001657E                 call    _strcmp
.text:0000000000016583                 test    eax, eax
.text:0000000000016585                 jnz     short loc_16600
.text:0000000000016587                 call    ___ctype_b_loc
.text:000000000001658C                 xor     ecx, ecx
.text:000000000001658E                 test    rbp, rbp
.text:0000000000016591                 mov     rsi, [rax]
.text:0000000000016594                 mov     edx, 1
.text:0000000000016599                 jnz     short loc_165C5
.text:000000000001659B
.text:000000000001659B loc_1659B:                              ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000001659B                 test    byte ptr [rsi+rcx*2+1], 10h
.text:00000000000165A0                 jz      short loc_165B3
.text:00000000000165A2                 mov     rax, rcx
.text:00000000000165A5                 mov     rdi, rdx
.text:00000000000165A8                 sar     rax, 6
.text:00000000000165AC                 shl     rdi, cl
.text:00000000000165AF                 or      [rbx+rax*8], rdi
.text:00000000000165B3
.text:00000000000165B3 loc_165B3:                              ; CODE XREF: build_charclass_isra_29+700↑j
.text:00000000000165B3                 add     rcx, 1
.text:00000000000165B7                 cmp     rcx, 100h
.text:00000000000165BE                 jnz     short loc_1659B
.text:00000000000165C0                 jmp     loc_15F84
.text:00000000000165C5 ; ---------------------------------------------------------------------------
.text:00000000000165C5
.text:00000000000165C5 loc_165C5:                              ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:00000000000165C5                 xor     eax, eax
.text:00000000000165C7                 mov     edi, 1
.text:00000000000165CC
.text:00000000000165CC loc_165CC:                              ; CODE XREF: build_charclass_isra_29+759↓j
.text:00000000000165CC                 test    byte ptr [rsi+rax*2+1], 10h
.text:00000000000165D1                 jz      short loc_165EF
.text:00000000000165D3                 movzx   ecx, byte ptr [rbp+rax+0]
.text:00000000000165D8                 mov     r9, rdi
.text:00000000000165DB                 mov     rdx, rcx
.text:00000000000165DE                 and     ecx, 3Fh
.text:00000000000165E1                 shr     rdx, 3
.text:00000000000165E5                 shl     r9, cl
.text:00000000000165E8                 and     edx, 18h
.text:00000000000165EB                 or      [rbx+rdx], r9
.text:00000000000165EF
.text:00000000000165EF loc_165EF:                              ; CODE XREF: build_charclass_isra_29+731↑j
.text:00000000000165EF                 add     rax, 1
.text:00000000000165F3                 cmp     rax, 100h
.text:00000000000165F9                 jnz     short loc_165CC
.text:00000000000165FB                 jmp     loc_15F84
.text:0000000000016600 ; ---------------------------------------------------------------------------
.text:0000000000016600
.text:0000000000016600 loc_16600:                              ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:0000000000016600                 mov     eax, 4
.text:0000000000016605                 jmp     loc_15F86
.text:000000000001660A ; ---------------------------------------------------------------------------
.text:000000000001660A
.text:000000000001660A loc_1660A:                              ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000001660A                 xor     eax, eax
.text:000000000001660C
.text:000000000001660C loc_1660C:                              ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000001660C                 test    byte ptr [rdx+rax*2+1], 8
.text:0000000000016611                 jz      short loc_1662F
.text:0000000000016613                 movzx   ecx, byte ptr [rbp+rax+0]
.text:0000000000016618                 mov     r14, rdi
.text:000000000001661B                 mov     rsi, rcx
.text:000000000001661E                 and     ecx, 3Fh
.text:0000000000016621                 shr     rsi, 3
.text:0000000000016625                 shl     r14, cl
.text:0000000000016628                 and     esi, 18h
.text:000000000001662B                 or      [rbx+rsi], r14
.text:000000000001662F
.text:000000000001662F loc_1662F:                              ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000001662F                 add     rax, 1
.text:0000000000016633                 cmp     rax, 100h
.text:0000000000016639                 jnz     short loc_1660C
.text:000000000001663B                 jmp     loc_15F84
.text:0000000000016640 ; ---------------------------------------------------------------------------
.text:0000000000016640
.text:0000000000016640 loc_16640:                              ; CODE XREF: build_charclass_isra_29+478↑j
.text:0000000000016640                 xor     edx, edx
.text:0000000000016642
.text:0000000000016642 loc_16642:                              ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:0000000000016642                 test    byte ptr [rax+rdx*2+1], 1
.text:0000000000016647                 jz      short loc_16665
.text:0000000000016649                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000001664E                 mov     r9, rdi
.text:0000000000016651                 mov     rsi, rcx
.text:0000000000016654                 and     ecx, 3Fh
.text:0000000000016657                 shr     rsi, 3
.text:000000000001665B                 shl     r9, cl
.text:000000000001665E                 and     esi, 18h
.text:0000000000016661                 or      [rbx+rsi], r9
.text:0000000000016665
.text:0000000000016665 loc_16665:                              ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:0000000000016665                 add     rdx, 1
.text:0000000000016669                 cmp     rdx, 100h
.text:0000000000016670                 jnz     short loc_16642
.text:0000000000016672                 jmp     loc_15F84
.text:0000000000016677 ; ---------------------------------------------------------------------------
.text:0000000000016677
.text:0000000000016677 loc_16677:                              ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:0000000000016677                 xor     eax, eax
.text:0000000000016679
.text:0000000000016679 loc_16679:                              ; CODE XREF: build_charclass_isra_29+806↓j
.text:0000000000016679                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000001667E                 jz      short loc_1669C
.text:0000000000016680                 movzx   ecx, byte ptr [rbp+rax+0]
.text:0000000000016685                 mov     r14, rdi
.text:0000000000016688                 mov     rsi, rcx
.text:000000000001668B                 and     ecx, 3Fh
.text:000000000001668E                 shr     rsi, 3
.text:0000000000016692                 shl     r14, cl
.text:0000000000016695                 and     esi, 18h
.text:0000000000016698                 or      [rbx+rsi], r14
.text:000000000001669C
.text:000000000001669C loc_1669C:                              ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000001669C                 add     rax, 1
.text:00000000000166A0                 cmp     rax, 100h
.text:00000000000166A6                 jnz     short loc_16679
.text:00000000000166A8                 jmp     loc_15F84
.text:00000000000166A8 ; } // starts at 15EA0
.text:00000000000166A8 build_charclass_isra_29 endp
.text:00000000000166A8
.text:00000000000166A8 ; ---------------------------------------------------------------------------
.text:00000000000166AD                 align 10h
.text:00000000000166B0
.text:00000000000166B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000166B0
.text:00000000000166B0
.text:00000000000166B0 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:00000000000166B0
.text:00000000000166B0 var_88          = qword ptr -88h
.text:00000000000166B0 var_80          = qword ptr -80h
.text:00000000000166B0 var_70          = qword ptr -70h
.text:00000000000166B0 var_68          = qword ptr -68h
.text:00000000000166B0 var_60          = byte ptr -60h
.text:00000000000166B0 var_58          = byte ptr -58h
.text:00000000000166B0 var_50          = byte ptr -50h
.text:00000000000166B0 var_40          = qword ptr -40h
.text:00000000000166B0
.text:00000000000166B0 ; __unwind {
.text:00000000000166B0                 push    r15
.text:00000000000166B2                 push    r14
.text:00000000000166B4                 mov     r14, rdx
.text:00000000000166B7                 push    r13
.text:00000000000166B9                 push    r12
.text:00000000000166BB                 mov     r13, rcx
.text:00000000000166BE                 push    rbp
.text:00000000000166BF                 push    rbx
.text:00000000000166C0                 mov     rbp, rdi
.text:00000000000166C3                 mov     edi, 20h ; ' '  ; nmemb
.text:00000000000166C8                 mov     r12d, r8d
.text:00000000000166CB                 sub     rsp, 58h
.text:00000000000166CF                 mov     [rsp+88h+var_88], rsi
.text:00000000000166D3                 mov     esi, 1          ; size
.text:00000000000166D8                 mov     [rsp+88h+var_80], r9
.text:00000000000166DD                 mov     rax, fs:28h
.text:00000000000166E6                 mov     [rsp+88h+var_40], rax
.text:00000000000166EB                 xor     eax, eax
.text:00000000000166ED                 mov     [rsp+88h+var_70], 0
.text:00000000000166F6                 call    _calloc
.text:00000000000166FB                 test    rax, rax
.text:00000000000166FE                 jz      loc_168C0
.text:0000000000016704                 mov     esi, 1          ; size
.text:0000000000016709                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000001670E                 mov     rbx, rax
.text:0000000000016711                 call    _calloc
.text:0000000000016716                 test    rax, rax
.text:0000000000016719                 mov     r15, rax
.text:000000000001671C                 jz      loc_168D0
.text:0000000000016722                 movzx   eax, byte ptr [rax+20h]
.text:0000000000016726                 sub     rsp, 8
.text:000000000001672A                 mov     edx, r12d
.text:000000000001672D                 push    0
.text:000000000001672F                 and     edx, 1
.text:0000000000016732                 mov     rdi, [rsp+98h+var_88]
.text:0000000000016737                 lea     rcx, [r15+48h]
.text:000000000001673B                 mov     r9, r14
.text:000000000001673E                 mov     rsi, rbx
.text:0000000000016741                 lea     r8, [rsp+98h+var_70]
.text:0000000000016746                 and     eax, 0FFFFFFFEh
.text:0000000000016749                 or      eax, edx
.text:000000000001674B                 lea     rdx, [r15+18h]
.text:000000000001674F                 mov     [r15+20h], al
.text:0000000000016753                 call    build_charclass_isra_29
.text:0000000000016758                 test    eax, eax
.text:000000000001675A                 pop     rdx
.text:000000000001675B                 pop     rcx
.text:000000000001675C                 jnz     loc_168F0
.text:0000000000016762                 movsx   rcx, byte ptr [r13+0]
.text:0000000000016767                 mov     esi, 1
.text:000000000001676C                 test    cl, cl
.text:000000000001676E                 jz      short loc_167AA
.text:0000000000016770
.text:0000000000016770 loc_16770:                              ; CODE XREF: build_charclass_op+F8↓j
.text:0000000000016770                 lea     rax, [rcx+3Fh]
.text:0000000000016774                 test    rcx, rcx
.text:0000000000016777                 mov     rdx, rcx
.text:000000000001677A                 cmovns  rax, rcx
.text:000000000001677E                 sar     rdx, 3Fh
.text:0000000000016782                 add     r13, 1
.text:0000000000016786                 shr     rdx, 3Ah
.text:000000000001678A                 sar     rax, 6
.text:000000000001678E                 add     rcx, rdx
.text:0000000000016791                 and     ecx, 3Fh
.text:0000000000016794                 sub     rcx, rdx
.text:0000000000016797                 mov     rdx, rsi
.text:000000000001679A                 shl     rdx, cl
.text:000000000001679D                 movsx   rcx, byte ptr [r13+0]
.text:00000000000167A2                 or      [rbx+rax*8], rdx
.text:00000000000167A6                 test    cl, cl
.text:00000000000167A8                 jnz     short loc_16770
.text:00000000000167AA
.text:00000000000167AA loc_167AA:                              ; CODE XREF: build_charclass_op+BE↑j
.text:00000000000167AA                 test    r12b, r12b
.text:00000000000167AD                 jz      short loc_167C2
.text:00000000000167AF                 lea     rdx, [rbx+20h]
.text:00000000000167B3                 mov     rax, rbx
.text:00000000000167B6
.text:00000000000167B6 loc_167B6:                              ; CODE XREF: build_charclass_op+110↓j
.text:00000000000167B6                 not     qword ptr [rax]
.text:00000000000167B9                 add     rax, 8
.text:00000000000167BD                 cmp     rdx, rax
.text:00000000000167C0                 jnz     short loc_167B6
.text:00000000000167C2
.text:00000000000167C2 loc_167C2:                              ; CODE XREF: build_charclass_op+FD↑j
.text:00000000000167C2                 cmp     dword ptr [rbp+0B4h], 1
.text:00000000000167C9                 jle     short loc_167E3
.text:00000000000167CB                 mov     rcx, [rbp+78h]
.text:00000000000167CF                 xor     eax, eax
.text:00000000000167D1
.text:00000000000167D1 loc_167D1:                              ; CODE XREF: build_charclass_op+131↓j
.text:00000000000167D1                 mov     rdx, [rcx+rax]
.text:00000000000167D5                 and     [rbx+rax], rdx
.text:00000000000167D9                 add     rax, 8
.text:00000000000167DD                 cmp     rax, 20h ; ' '
.text:00000000000167E1                 jnz     short loc_167D1
.text:00000000000167E3
.text:00000000000167E3 loc_167E3:                              ; CODE XREF: build_charclass_op+119↑j
.text:00000000000167E3                 lea     r9, [rsp+88h+var_68]
.text:00000000000167E8                 lea     r12, [rbp+70h]
.text:00000000000167EC                 lea     r13, [rbp+80h]
.text:00000000000167F3                 xor     ecx, ecx
.text:00000000000167F5                 xor     edx, edx
.text:00000000000167F7                 mov     [rsp+88h+var_60], 3
.text:00000000000167FC                 mov     r8, r9
.text:00000000000167FF                 mov     rsi, r13
.text:0000000000016802                 mov     rdi, r12
.text:0000000000016805                 mov     [rsp+88h+var_68], rbx
.text:000000000001680A                 mov     [rsp+88h+var_88], r9
.text:000000000001680E                 call    create_token_tree_isra_16
.text:0000000000016813                 test    rax, rax
.text:0000000000016816                 mov     r14, rax
.text:0000000000016819                 jz      loc_168B0
.text:000000000001681F                 cmp     dword ptr [rbp+0B4h], 1
.text:0000000000016826                 jle     short loc_168A0
.text:0000000000016828                 or      byte ptr [rbp+0B0h], 2
.text:000000000001682F                 mov     r9, [rsp+88h+var_88]
.text:0000000000016833                 xor     ecx, ecx
.text:0000000000016835                 xor     edx, edx
.text:0000000000016837                 mov     rsi, r13
.text:000000000001683A                 mov     rdi, r12
.text:000000000001683D                 mov     [rsp+88h+var_60], 6
.text:0000000000016842                 mov     [rsp+88h+var_68], r15
.text:0000000000016847                 mov     r8, r9
.text:000000000001684A                 call    create_token_tree_isra_16
.text:000000000001684F                 test    rax, rax
.text:0000000000016852                 jz      short loc_168B0
.text:0000000000016854                 lea     r8, [rsp+88h+var_58]
.text:0000000000016859                 mov     rdx, r14
.text:000000000001685C                 mov     rcx, rax
.text:000000000001685F                 mov     rsi, r13
.text:0000000000016862                 mov     rdi, r12
.text:0000000000016865                 mov     [rsp+88h+var_50], 0Ah
.text:000000000001686A                 call    create_token_tree_isra_16
.text:000000000001686F                 mov     r14, rax
.text:0000000000016872
.text:0000000000016872 loc_16872:                              ; CODE XREF: build_charclass_op+1F8↓j
.text:0000000000016872                                         ; build_charclass_op+21E↓j ...
.text:0000000000016872                 mov     rdi, [rsp+88h+var_40]
.text:0000000000016877                 xor     rdi, fs:28h
.text:0000000000016880                 mov     rax, r14
.text:0000000000016883                 jnz     loc_16915
.text:0000000000016889                 add     rsp, 58h
.text:000000000001688D                 pop     rbx
.text:000000000001688E                 pop     rbp
.text:000000000001688F                 pop     r12
.text:0000000000016891                 pop     r13
.text:0000000000016893                 pop     r14
.text:0000000000016895                 pop     r15
.text:0000000000016897                 retn
.text:0000000000016897 ; ---------------------------------------------------------------------------
.text:0000000000016898                 align 20h
.text:00000000000168A0
.text:00000000000168A0 loc_168A0:                              ; CODE XREF: build_charclass_op+176↑j
.text:00000000000168A0                 mov     rdi, r15        ; ptr
.text:00000000000168A3                 call    isl_union_flow_free_0
.text:00000000000168A8                 jmp     short loc_16872
.text:00000000000168A8 ; ---------------------------------------------------------------------------
.text:00000000000168AA                 align 10h
.text:00000000000168B0
.text:00000000000168B0 loc_168B0:                              ; CODE XREF: build_charclass_op+169↑j
.text:00000000000168B0                                         ; build_charclass_op+1A2↑j
.text:00000000000168B0                 mov     rdi, rbx        ; ptr
.text:00000000000168B3                 call    free
.text:00000000000168B8                 mov     rdi, r15        ; ptr
.text:00000000000168BB                 call    isl_union_flow_free_0
.text:00000000000168C0
.text:00000000000168C0 loc_168C0:                              ; CODE XREF: build_charclass_op+4E↑j
.text:00000000000168C0                 mov     rax, [rsp+88h+var_80]
.text:00000000000168C5                 xor     r14d, r14d
.text:00000000000168C8                 mov     dword ptr [rax], 0Ch
.text:00000000000168CE                 jmp     short loc_16872
.text:00000000000168D0 ; ---------------------------------------------------------------------------
.text:00000000000168D0
.text:00000000000168D0 loc_168D0:                              ; CODE XREF: build_charclass_op+6C↑j
.text:00000000000168D0                 mov     rdi, rbx        ; ptr
.text:00000000000168D3                 xor     r14d, r14d
.text:00000000000168D6                 call    free
.text:00000000000168DB                 mov     rax, [rsp+88h+var_80]
.text:00000000000168E0                 mov     dword ptr [rax], 0Ch
.text:00000000000168E6                 jmp     short loc_16872
.text:00000000000168E6 ; ---------------------------------------------------------------------------
.text:00000000000168E8                 align 10h
.text:00000000000168F0
.text:00000000000168F0 loc_168F0:                              ; CODE XREF: build_charclass_op+AC↑j
.text:00000000000168F0                 mov     rdi, rbx        ; ptr
.text:00000000000168F3                 mov     dword ptr [rsp+88h+var_88], eax
.text:00000000000168F6                 xor     r14d, r14d
.text:00000000000168F9                 call    free
.text:00000000000168FE                 mov     rdi, r15        ; ptr
.text:0000000000016901                 call    isl_union_flow_free_0
.text:0000000000016906                 mov     rdi, [rsp+88h+var_80]
.text:000000000001690B                 mov     eax, dword ptr [rsp+88h+var_88]
.text:000000000001690E                 mov     [rdi], eax
.text:0000000000016910                 jmp     loc_16872
.text:0000000000016915 ; ---------------------------------------------------------------------------
.text:0000000000016915
.text:0000000000016915 loc_16915:                              ; CODE XREF: build_charclass_op+1D3↑j
.text:0000000000016915                 call    ___stack_chk_fail
.text:0000000000016915 ; } // starts at 166B0
.text:0000000000016915 build_charclass_op endp
.text:0000000000016915
.text:0000000000016915 ; ---------------------------------------------------------------------------
.text:000000000001691A                 align 20h
.text:0000000000016920
.text:0000000000016920 ; =============== S U B R O U T I N E =======================================
.text:0000000000016920
.text:0000000000016920
.text:0000000000016920 re_compile_fastmap_iter_isra_30 proc near
.text:0000000000016920                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:0000000000016920                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:0000000000016920
.text:0000000000016920 var_1A8         = qword ptr -1A8h
.text:0000000000016920 var_1A0         = qword ptr -1A0h
.text:0000000000016920 var_198         = qword ptr -198h
.text:0000000000016920 var_190         = qword ptr -190h
.text:0000000000016920 var_188         = qword ptr -188h
.text:0000000000016920 var_180         = qword ptr -180h
.text:0000000000016920 var_178         = qword ptr -178h
.text:0000000000016920 s               = qword ptr -170h
.text:0000000000016920 ps              = qword ptr -168h
.text:0000000000016920 var_160         = qword ptr -160h
.text:0000000000016920 wc              = dword ptr -154h
.text:0000000000016920 var_150         = byte ptr -150h
.text:0000000000016920 var_148         = byte ptr -148h
.text:0000000000016920 var_40          = qword ptr -40h
.text:0000000000016920
.text:0000000000016920 ; __unwind {
.text:0000000000016920                 push    r15
.text:0000000000016922                 push    r14
.text:0000000000016924                 mov     rax, rdi
.text:0000000000016927                 push    r13
.text:0000000000016929                 push    r12
.text:000000000001692B                 push    rbp
.text:000000000001692C                 push    rbx
.text:000000000001692D                 xor     ebx, ebx
.text:000000000001692F                 mov     rbp, rcx
.text:0000000000016932                 sub     rsp, 178h
.text:0000000000016939                 mov     rax, [rax]
.text:000000000001693C                 mov     [rsp+1A8h+var_178], rdi
.text:0000000000016941                 mov     [rsp+1A8h+var_188], rsi
.text:0000000000016946                 mov     rdi, fs:28h
.text:000000000001694F                 mov     [rsp+1A8h+var_40], rdi
.text:0000000000016957                 xor     edi, edi
.text:0000000000016959                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000016960                 mov     [rsp+1A8h+var_180], rdx
.text:0000000000016965                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000001696A                 jnz     short loc_16983
.text:000000000001696C                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000016971                 mov     rax, [rax+18h]
.text:0000000000016975                 mov     rbx, rax
.text:0000000000016978                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000001697C                 shr     rbx, 16h
.text:0000000000016980                 and     ebx, 1
.text:0000000000016983
.text:0000000000016983 loc_16983:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:0000000000016983                 mov     rax, [rsp+1A8h+var_188]
.text:0000000000016988                 cmp     qword ptr [rax], 0
.text:000000000001698C                 jle     loc_16D9D
.text:0000000000016992                 lea     rax, [rsp+1A8h+var_150]
.text:0000000000016997                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000001699F                 mov     [rsp+1A8h+ps], rax
.text:00000000000169A4                 lea     rax, [rsp+1A8h+wc]
.text:00000000000169A9                 mov     [rsp+1A8h+var_160], rax
.text:00000000000169AE                 lea     rax, [rsp+1A8h+var_148]
.text:00000000000169B3                 mov     [rsp+1A8h+s], rax
.text:00000000000169B8                 jmp     short loc_169FE
.text:00000000000169B8 ; ---------------------------------------------------------------------------
.text:00000000000169BA                 align 20h
.text:00000000000169C0
.text:00000000000169C0 loc_169C0:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:00000000000169C0                 cmp     eax, 3
.text:00000000000169C3                 jz      loc_16CB6
.text:00000000000169C9                 cmp     eax, 6
.text:00000000000169CC                 jz      loc_16B58
.text:00000000000169D2                 and     edx, 0FFFFFFFDh
.text:00000000000169D5                 cmp     dl, 5
.text:00000000000169D8                 jz      loc_16DD4
.text:00000000000169DE                 cmp     eax, 2
.text:00000000000169E1                 jz      loc_16D34
.text:00000000000169E7
.text:00000000000169E7 loc_169E7:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:00000000000169E7                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:00000000000169E7                 mov     rdi, [rsp+1A8h+var_188]
.text:00000000000169EC                 add     [rsp+1A8h+var_1A8], 1
.text:00000000000169F1                 mov     rax, [rsp+1A8h+var_1A8]
.text:00000000000169F5                 cmp     rax, [rdi]
.text:00000000000169F8                 jge     loc_16D9D
.text:00000000000169FE
.text:00000000000169FE loc_169FE:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:00000000000169FE                 mov     rax, [rsp+1A8h+var_180]
.text:0000000000016A03                 mov     rdi, [rsp+1A8h+var_1A8]
.text:0000000000016A07                 mov     rax, [rax]
.text:0000000000016A0A                 mov     r12, [rax+rdi*8]
.text:0000000000016A0E                 mov     rax, [rsp+1A8h+var_1A0]
.text:0000000000016A13                 mov     rcx, [rax]
.text:0000000000016A16                 mov     rax, r12
.text:0000000000016A19                 shl     rax, 4
.text:0000000000016A1D                 mov     [rsp+1A8h+var_198], rax
.text:0000000000016A22                 lea     rsi, [rcx+rax]
.text:0000000000016A26                 movzx   eax, byte ptr [rsi+8]
.text:0000000000016A2A                 cmp     eax, 1
.text:0000000000016A2D                 mov     edx, eax
.text:0000000000016A2F                 jnz     short loc_169C0
.text:0000000000016A31                 movzx   r13d, byte ptr [rsi]
.text:0000000000016A35                 test    ebx, ebx
.text:0000000000016A37                 mov     byte ptr [rbp+r13+0], 1
.text:0000000000016A3D                 jz      short loc_16A50
.text:0000000000016A3F                 call    ___ctype_tolower_loc
.text:0000000000016A44                 mov     rax, [rax]
.text:0000000000016A47                 movsxd  rax, dword ptr [rax+r13*4]
.text:0000000000016A4B                 mov     byte ptr [rbp+rax+0], 1
.text:0000000000016A50
.text:0000000000016A50 loc_16A50:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:0000000000016A50                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000016A55                 test    byte ptr [rax+1Ah], 40h
.text:0000000000016A59                 jz      short loc_169E7
.text:0000000000016A5B                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000016A60                 cmp     dword ptr [rsi+0B4h], 1
.text:0000000000016A67                 jle     loc_169E7
.text:0000000000016A6D                 mov     rax, [rsi]
.text:0000000000016A70                 mov     rdi, [rsp+1A8h+var_198]
.text:0000000000016A75                 movzx   edx, byte ptr [rax+rdi]
.text:0000000000016A79                 mov     [rsp+1A8h+var_148], dl
.text:0000000000016A7D                 lea     rdx, [r12+1]
.text:0000000000016A82                 cmp     [rsi+10h], rdx
.text:0000000000016A86                 jbe     loc_16DC6
.text:0000000000016A8C                 lea     rcx, [rax+rdi+10h]
.text:0000000000016A91                 mov     eax, [rcx+8]
.text:0000000000016A94                 and     eax, 2000FFh
.text:0000000000016A99                 cmp     eax, 200001h
.text:0000000000016A9E                 jnz     loc_16DC6
.text:0000000000016AA4                 add     rdi, 20h ; ' '
.text:0000000000016AA8                 mov     r13, rdi
.text:0000000000016AAB                 mov     rdi, [rsp+1A8h+s]
.text:0000000000016AB0                 lea     rax, [rdi+1]
.text:0000000000016AB4                 jmp     short loc_16ADB
.text:0000000000016AB4 ; ---------------------------------------------------------------------------
.text:0000000000016AB6                 align 20h
.text:0000000000016AC0
.text:0000000000016AC0 loc_16AC0:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:0000000000016AC0                 mov     rcx, [rsi]
.text:0000000000016AC3                 add     rcx, r13
.text:0000000000016AC6                 add     r13, 10h
.text:0000000000016ACA                 mov     edx, [rcx+8]
.text:0000000000016ACD                 and     edx, 2000FFh
.text:0000000000016AD3                 cmp     edx, 200001h
.text:0000000000016AD9                 jnz     short loc_16AF4
.text:0000000000016ADB
.text:0000000000016ADB loc_16ADB:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:0000000000016ADB                 movzx   edx, byte ptr [rcx]
.text:0000000000016ADE                 add     rax, 1
.text:0000000000016AE2                 mov     [rax-1], dl
.text:0000000000016AE5                 mov     rdx, rax
.text:0000000000016AE8                 sub     rdx, rdi
.text:0000000000016AEB                 add     rdx, r12
.text:0000000000016AEE                 cmp     [rsi+10h], rdx
.text:0000000000016AF2                 ja      short loc_16AC0
.text:0000000000016AF4
.text:0000000000016AF4 loc_16AF4:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:0000000000016AF4                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:0000000000016AF4                 mov     rsi, [rsp+1A8h+s]
.text:0000000000016AF9                 mov     rcx, [rsp+1A8h+ps]
.text:0000000000016AFE                 mov     rdi, [rsp+1A8h+var_160]
.text:0000000000016B03                 sub     rax, rsi
.text:0000000000016B06                 mov     qword ptr [rcx], 0
.text:0000000000016B0D                 mov     r12, rax
.text:0000000000016B10                 mov     rdx, rax
.text:0000000000016B13                 call    rpl_mbrtowc
.text:0000000000016B18                 cmp     r12, rax
.text:0000000000016B1B                 jnz     loc_169E7
.text:0000000000016B21                 mov     edi, [rsp+1A8h+wc] ; wc
.text:0000000000016B25                 call    _towlower
.text:0000000000016B2A                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:0000000000016B2F                 mov     rdi, [rsp+1A8h+s] ; s
.text:0000000000016B34                 mov     esi, eax        ; wc
.text:0000000000016B36                 call    _wcrtomb
.text:0000000000016B3B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000016B3F                 jz      loc_169E7
.text:0000000000016B45                 movzx   eax, [rsp+1A8h+var_148]
.text:0000000000016B4A                 mov     byte ptr [rbp+rax+0], 1
.text:0000000000016B4F                 jmp     loc_169E7
.text:0000000000016B4F ; ---------------------------------------------------------------------------
.text:0000000000016B54                 align 8
.text:0000000000016B58
.text:0000000000016B58 loc_16B58:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:0000000000016B58                 mov     rax, [rsp+1A8h+var_1A0]
.text:0000000000016B5D                 mov     r12, [rsi]
.text:0000000000016B60                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000016B67                 jle     short loc_16B8D
.text:0000000000016B69                 cmp     qword ptr [r12+48h], 0
.text:0000000000016B6F                 jnz     loc_16C6F
.text:0000000000016B75                 test    byte ptr [r12+20h], 1
.text:0000000000016B7B                 jnz     loc_16C6F
.text:0000000000016B81                 cmp     qword ptr [r12+40h], 0
.text:0000000000016B87                 jnz     loc_16C6F
.text:0000000000016B8D
.text:0000000000016B8D loc_16B8D:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:0000000000016B8D                 xor     r13d, r13d
.text:0000000000016B90                 cmp     qword ptr [r12+28h], 0
.text:0000000000016B96                 jle     loc_169E7
.text:0000000000016B9C                 mov     r15, r12
.text:0000000000016B9F                 mov     r14, [rsp+1A8h+ps]
.text:0000000000016BA4                 mov     r12, rbp
.text:0000000000016BA7                 mov     rbp, r13
.text:0000000000016BAA                 mov     r13d, ebx
.text:0000000000016BAD                 jmp     short loc_16BBD
.text:0000000000016BAF ; ---------------------------------------------------------------------------
.text:0000000000016BAF
.text:0000000000016BAF loc_16BAF:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:0000000000016BAF                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:0000000000016BAF                 add     rbp, 1
.text:0000000000016BB3                 cmp     rbp, [r15+28h]
.text:0000000000016BB7                 jge     loc_16C64
.text:0000000000016BBD
.text:0000000000016BBD loc_16BBD:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:0000000000016BBD                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:0000000000016BBD                 mov     qword ptr [r14], 0
.text:0000000000016BC4                 mov     rax, [r15]
.text:0000000000016BC7                 mov     rdx, r14        ; ps
.text:0000000000016BCA                 mov     rdi, [rsp+1A8h+s] ; s
.text:0000000000016BCF                 lea     rbx, ds:0[rbp*4]
.text:0000000000016BD7                 mov     esi, [rax+rbp*4] ; wc
.text:0000000000016BDA                 call    _wcrtomb
.text:0000000000016BDF                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000016BE3                 jz      short loc_16C0F
.text:0000000000016BE5                 movzx   edx, [rsp+1A8h+var_148]
.text:0000000000016BEA                 test    r13d, r13d
.text:0000000000016BED                 mov     byte ptr [r12+rdx], 1
.text:0000000000016BF2                 mov     [rsp+1A8h+var_198], rdx
.text:0000000000016BF7                 jz      short loc_16C0F
.text:0000000000016BF9                 call    ___ctype_tolower_loc
.text:0000000000016BFE                 mov     rdx, [rsp+1A8h+var_198]
.text:0000000000016C03                 mov     rax, [rax]
.text:0000000000016C06                 movsxd  rax, dword ptr [rax+rdx*4]
.text:0000000000016C0A                 mov     byte ptr [r12+rax], 1
.text:0000000000016C0F
.text:0000000000016C0F loc_16C0F:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:0000000000016C0F                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:0000000000016C0F                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000016C14                 test    byte ptr [rax+1Ah], 40h
.text:0000000000016C18                 jz      short loc_16BAF
.text:0000000000016C1A                 mov     rax, [rsp+1A8h+var_1A0]
.text:0000000000016C1F                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000016C26                 jle     short loc_16BAF
.text:0000000000016C28                 mov     rax, [r15]
.text:0000000000016C2B                 mov     edi, [rax+rbx]  ; wc
.text:0000000000016C2E                 call    _towlower
.text:0000000000016C33                 mov     rdi, [rsp+1A8h+s] ; s
.text:0000000000016C38                 mov     rdx, r14        ; ps
.text:0000000000016C3B                 mov     esi, eax        ; wc
.text:0000000000016C3D                 call    _wcrtomb
.text:0000000000016C42                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000016C46                 jz      loc_16BAF
.text:0000000000016C4C                 movzx   eax, [rsp+1A8h+var_148]
.text:0000000000016C51                 add     rbp, 1
.text:0000000000016C55                 mov     byte ptr [r12+rax], 1
.text:0000000000016C5A                 cmp     rbp, [r15+28h]
.text:0000000000016C5E                 jl      loc_16BBD
.text:0000000000016C64
.text:0000000000016C64 loc_16C64:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:0000000000016C64                 mov     ebx, r13d
.text:0000000000016C67                 mov     rbp, r12
.text:0000000000016C6A                 jmp     loc_169E7
.text:0000000000016C6F ; ---------------------------------------------------------------------------
.text:0000000000016C6F
.text:0000000000016C6F loc_16C6F:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:0000000000016C6F                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:0000000000016C6F                 mov     r12, [rsp+1A8h+ps]
.text:0000000000016C74                 mov     r13, [rsp+1A8h+var_160]
.text:0000000000016C79                 mov     byte ptr [rsp+1A8h+wc], 0
.text:0000000000016C7E                 xchg    ax, ax
.text:0000000000016C80
.text:0000000000016C80 loc_16C80:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:0000000000016C80                 xor     edi, edi
.text:0000000000016C82                 mov     qword ptr [r12], 0
.text:0000000000016C8A                 mov     rcx, r12
.text:0000000000016C8D                 mov     edx, 1
.text:0000000000016C92                 mov     rsi, r13
.text:0000000000016C95                 call    rpl_mbrtowc
.text:0000000000016C9A                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000016C9E                 jnz     short loc_16CAA
.text:0000000000016CA0                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:0000000000016CA5                 mov     byte ptr [rbp+rax+0], 1
.text:0000000000016CAA
.text:0000000000016CAA loc_16CAA:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:0000000000016CAA                 add     byte ptr [rsp+1A8h+wc], 1
.text:0000000000016CAF                 jnz     short loc_16C80
.text:0000000000016CB1                 jmp     loc_169E7
.text:0000000000016CB6 ; ---------------------------------------------------------------------------
.text:0000000000016CB6
.text:0000000000016CB6 loc_16CB6:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:0000000000016CB6                 mov     r13, rbp
.text:0000000000016CB9                 xor     r12d, r12d
.text:0000000000016CBC                 mov     [rsp+1A8h+var_190], 0
.text:0000000000016CC5
.text:0000000000016CC5 loc_16CC5:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:0000000000016CC5                 mov     rax, [rsp+1A8h+var_198]
.text:0000000000016CCA                 mov     rsi, [rsp+1A8h+var_190]
.text:0000000000016CCF                 xor     r14d, r14d
.text:0000000000016CD2                 mov     rax, [rcx+rax]
.text:0000000000016CD6                 mov     r15, [rax+rsi]
.text:0000000000016CDA                 nop     word ptr [rax+rax+00h]
.text:0000000000016CE0
.text:0000000000016CE0 loc_16CE0:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:0000000000016CE0                 bt      r15, r14
.text:0000000000016CE4                 jnb     short loc_16D05
.text:0000000000016CE6                 test    ebx, ebx
.text:0000000000016CE8                 mov     byte ptr [r13+r14+0], 1
.text:0000000000016CEE                 jz      short loc_16D05
.text:0000000000016CF0                 call    ___ctype_tolower_loc
.text:0000000000016CF5                 mov     rax, [rax]
.text:0000000000016CF8                 lea     rdx, [r12+r14]
.text:0000000000016CFC                 movsxd  rax, dword ptr [rax+rdx*4]
.text:0000000000016D00                 mov     byte ptr [rbp+rax+0], 1
.text:0000000000016D05
.text:0000000000016D05 loc_16D05:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:0000000000016D05                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:0000000000016D05                 add     r14, 1
.text:0000000000016D09                 cmp     r14, 40h ; '@'
.text:0000000000016D0D                 jnz     short loc_16CE0
.text:0000000000016D0F                 add     r12, 40h ; '@'
.text:0000000000016D13                 add     [rsp+1A8h+var_190], 8
.text:0000000000016D19                 add     r13, 40h ; '@'
.text:0000000000016D1D                 cmp     r12, 100h
.text:0000000000016D24                 jz      loc_169E7
.text:0000000000016D2A                 mov     rax, [rsp+1A8h+var_1A0]
.text:0000000000016D2F                 mov     rcx, [rax]
.text:0000000000016D32                 jmp     short loc_16CC5
.text:0000000000016D34 ; ---------------------------------------------------------------------------
.text:0000000000016D34
.text:0000000000016D34 loc_16D34:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:0000000000016D34                 movdqa  xmm0, cs:xmmword_23000
.text:0000000000016D3C                 movups  xmmword ptr [rbp+0], xmm0
.text:0000000000016D40                 movups  xmmword ptr [rbp+10h], xmm0
.text:0000000000016D44                 movups  xmmword ptr [rbp+20h], xmm0
.text:0000000000016D48                 movups  xmmword ptr [rbp+30h], xmm0
.text:0000000000016D4C                 movups  xmmword ptr [rbp+40h], xmm0
.text:0000000000016D50                 movups  xmmword ptr [rbp+50h], xmm0
.text:0000000000016D54                 movups  xmmword ptr [rbp+60h], xmm0
.text:0000000000016D58                 movups  xmmword ptr [rbp+70h], xmm0
.text:0000000000016D5C                 movups  xmmword ptr [rbp+80h], xmm0
.text:0000000000016D63                 movups  xmmword ptr [rbp+90h], xmm0
.text:0000000000016D6A                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:0000000000016D71                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:0000000000016D78                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:0000000000016D7F                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:0000000000016D86                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:0000000000016D8D                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:0000000000016D94
.text:0000000000016D94 loc_16D94:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:0000000000016D94                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000016D99                 or      byte ptr [rax+38h], 1
.text:0000000000016D9D
.text:0000000000016D9D loc_16D9D:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:0000000000016D9D                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:0000000000016D9D                 mov     rax, [rsp+1A8h+var_40]
.text:0000000000016DA5                 xor     rax, fs:28h
.text:0000000000016DAE                 jnz     loc_16E42
.text:0000000000016DB4                 add     rsp, 178h
.text:0000000000016DBB                 pop     rbx
.text:0000000000016DBC                 pop     rbp
.text:0000000000016DBD                 pop     r12
.text:0000000000016DBF                 pop     r13
.text:0000000000016DC1                 pop     r14
.text:0000000000016DC3                 pop     r15
.text:0000000000016DC5                 retn
.text:0000000000016DC6 ; ---------------------------------------------------------------------------
.text:0000000000016DC6
.text:0000000000016DC6 loc_16DC6:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:0000000000016DC6                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:0000000000016DC6                 mov     rax, [rsp+1A8h+s]
.text:0000000000016DCB                 add     rax, 1
.text:0000000000016DCF                 jmp     loc_16AF4
.text:0000000000016DD4 ; ---------------------------------------------------------------------------
.text:0000000000016DD4
.text:0000000000016DD4 loc_16DD4:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:0000000000016DD4                 movdqa  xmm0, cs:xmmword_23000
.text:0000000000016DDC                 cmp     eax, 2
.text:0000000000016DDF                 movups  xmmword ptr [rbp+0], xmm0
.text:0000000000016DE3                 movups  xmmword ptr [rbp+10h], xmm0
.text:0000000000016DE7                 movups  xmmword ptr [rbp+20h], xmm0
.text:0000000000016DEB                 movups  xmmword ptr [rbp+30h], xmm0
.text:0000000000016DEF                 movups  xmmword ptr [rbp+40h], xmm0
.text:0000000000016DF3                 movups  xmmword ptr [rbp+50h], xmm0
.text:0000000000016DF7                 movups  xmmword ptr [rbp+60h], xmm0
.text:0000000000016DFB                 movups  xmmword ptr [rbp+70h], xmm0
.text:0000000000016DFF                 movups  xmmword ptr [rbp+80h], xmm0
.text:0000000000016E06                 movups  xmmword ptr [rbp+90h], xmm0
.text:0000000000016E0D                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:0000000000016E14                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:0000000000016E1B                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:0000000000016E22                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:0000000000016E29                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:0000000000016E30                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:0000000000016E37                 jnz     loc_16D9D
.text:0000000000016E3D                 jmp     loc_16D94
.text:0000000000016E42 ; ---------------------------------------------------------------------------
.text:0000000000016E42
.text:0000000000016E42 loc_16E42:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:0000000000016E42                 call    ___stack_chk_fail
.text:0000000000016E42 ; } // starts at 16920
.text:0000000000016E42 re_compile_fastmap_iter_isra_30 endp
.text:0000000000016E42
.text:0000000000016E42 ; ---------------------------------------------------------------------------
.text:0000000000016E47                 align 10h
.text:0000000000016E50
.text:0000000000016E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000016E50
.text:0000000000016E50
.text:0000000000016E50 check_node_accept_bytes_isra_31 proc near
.text:0000000000016E50                                         ; CODE XREF: check_arrival+255↓p
.text:0000000000016E50                                         ; set_regs+378↓p ...
.text:0000000000016E50 ; __unwind {
.text:0000000000016E50                 shl     rdx, 4
.text:0000000000016E54                 push    r13
.text:0000000000016E56                 push    r12
.text:0000000000016E58                 lea     r9, [rdi+rdx]
.text:0000000000016E5C                 push    rbp
.text:0000000000016E5D                 push    rbx
.text:0000000000016E5E                 sub     rsp, 8
.text:0000000000016E62                 movzx   r11d, byte ptr [r9+8]
.text:0000000000016E67                 cmp     r11b, 7
.text:0000000000016E6B                 jz      loc_16F80
.text:0000000000016E71                 cmp     dword ptr [rcx+90h], 1
.text:0000000000016E78                 jz      loc_16F40
.text:0000000000016E7E                 mov     rbx, rsi
.text:0000000000016E81                 mov     rdi, rcx
.text:0000000000016E84                 mov     rsi, r8
.text:0000000000016E87                 mov     r10, rcx
.text:0000000000016E8A                 call    re_string_char_size_at_part_0
.text:0000000000016E8F                 cmp     r11b, 5
.text:0000000000016E93                 mov     ebp, eax
.text:0000000000016E95                 jz      loc_16F50
.text:0000000000016E9B                 cmp     r11b, 6
.text:0000000000016E9F                 jnz     loc_16F40
.text:0000000000016EA5                 cmp     eax, 1
.text:0000000000016EA8                 jle     loc_16F40
.text:0000000000016EAE                 mov     r13, [r9]
.text:0000000000016EB1                 mov     rsi, [r13+40h]
.text:0000000000016EB5                 mov     rdx, [r13+28h]
.text:0000000000016EB9                 test    rsi, rsi
.text:0000000000016EBC                 jnz     short loc_16EC9
.text:0000000000016EBE                 cmp     qword ptr [r13+48h], 0
.text:0000000000016EC3                 jz      loc_16FB8
.text:0000000000016EC9
.text:0000000000016EC9 loc_16EC9:                              ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:0000000000016EC9                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:0000000000016EC9                 mov     rax, [r10+10h]
.text:0000000000016ECD                 test    rdx, rdx
.text:0000000000016ED0                 mov     r12d, [rax+r8*4]
.text:0000000000016ED4                 jle     short loc_16EF7
.text:0000000000016ED6                 mov     rcx, [r13+0]
.text:0000000000016EDA                 cmp     r12d, [rcx]
.text:0000000000016EDD                 jz      short loc_16F32
.text:0000000000016EDF                 xor     eax, eax
.text:0000000000016EE1                 jmp     short loc_16EEE
.text:0000000000016EE1 ; ---------------------------------------------------------------------------
.text:0000000000016EE3                 align 8
.text:0000000000016EE8
.text:0000000000016EE8 loc_16EE8:                              ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:0000000000016EE8                 cmp     r12d, [rcx+rax*4]
.text:0000000000016EEC                 jz      short loc_16F32
.text:0000000000016EEE
.text:0000000000016EEE loc_16EEE:                              ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:0000000000016EEE                 add     rax, 1
.text:0000000000016EF2                 cmp     rax, rdx
.text:0000000000016EF5                 jnz     short loc_16EE8
.text:0000000000016EF7
.text:0000000000016EF7 loc_16EF7:                              ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:0000000000016EF7                 mov     rax, [r13+48h]
.text:0000000000016EFB                 test    rax, rax
.text:0000000000016EFE                 jle     loc_16FDC
.text:0000000000016F04                 xor     ebx, ebx
.text:0000000000016F06                 jmp     short loc_16F1E
.text:0000000000016F06 ; ---------------------------------------------------------------------------
.text:0000000000016F08                 align 10h
.text:0000000000016F10
.text:0000000000016F10 loc_16F10:                              ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:0000000000016F10                 add     rbx, 1
.text:0000000000016F14                 cmp     rbx, [r13+48h]
.text:0000000000016F18                 jge     loc_16FD8
.text:0000000000016F1E
.text:0000000000016F1E loc_16F1E:                              ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:0000000000016F1E                 mov     rax, [r13+18h]
.text:0000000000016F22                 mov     edi, r12d       ; wc
.text:0000000000016F25                 mov     rsi, [rax+rbx*8] ; desc
.text:0000000000016F29                 call    _iswctype
.text:0000000000016F2E                 test    eax, eax
.text:0000000000016F30                 jz      short loc_16F10
.text:0000000000016F32
.text:0000000000016F32 loc_16F32:                              ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:0000000000016F32                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:0000000000016F32                 test    byte ptr [r13+20h], 1
.text:0000000000016F37                 jz      short loc_16F42
.text:0000000000016F39                 nop     dword ptr [rax+00000000h]
.text:0000000000016F40
.text:0000000000016F40 loc_16F40:                              ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:0000000000016F40                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:0000000000016F40                 xor     ebp, ebp
.text:0000000000016F42
.text:0000000000016F42 loc_16F42:                              ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:0000000000016F42                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:0000000000016F42                 add     rsp, 8
.text:0000000000016F46                 mov     eax, ebp
.text:0000000000016F48                 pop     rbx
.text:0000000000016F49                 pop     rbp
.text:0000000000016F4A                 pop     r12
.text:0000000000016F4C                 pop     r13
.text:0000000000016F4E                 retn
.text:0000000000016F4E ; ---------------------------------------------------------------------------
.text:0000000000016F4F                 align 10h
.text:0000000000016F50
.text:0000000000016F50 loc_16F50:                              ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:0000000000016F50                 cmp     eax, 1
.text:0000000000016F53                 jle     short loc_16F40
.text:0000000000016F55                 mov     rax, [rbx]
.text:0000000000016F58                 test    al, 40h
.text:0000000000016F5A                 jz      short loc_16F70
.text:0000000000016F5C
.text:0000000000016F5C loc_16F5C:                              ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:0000000000016F5C                 test    al, 80h
.text:0000000000016F5E                 jz      short loc_16F42
.text:0000000000016F60                 mov     rax, [r10+8]
.text:0000000000016F64                 cmp     byte ptr [rax+r8], 0
.text:0000000000016F69                 jz      short loc_16F40
.text:0000000000016F6B                 jmp     short loc_16F42
.text:0000000000016F6B ; ---------------------------------------------------------------------------
.text:0000000000016F6D                 align 10h
.text:0000000000016F70
.text:0000000000016F70 loc_16F70:                              ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:0000000000016F70                 mov     rdx, [r10+8]
.text:0000000000016F74                 cmp     byte ptr [rdx+r8], 0Ah
.text:0000000000016F79                 jnz     short loc_16F5C
.text:0000000000016F7B                 jmp     short loc_16F40
.text:0000000000016F7B ; ---------------------------------------------------------------------------
.text:0000000000016F7D                 align 20h
.text:0000000000016F80
.text:0000000000016F80 loc_16F80:                              ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:0000000000016F80                 mov     rdx, [rcx+8]
.text:0000000000016F84                 lea     rsi, [rdx+r8]
.text:0000000000016F88                 movzx   eax, byte ptr [rsi]
.text:0000000000016F8B                 cmp     al, 0C1h
.text:0000000000016F8D                 jbe     short loc_16F40
.text:0000000000016F8F                 mov     rcx, [rcx+58h]
.text:0000000000016F93                 lea     rdi, [r8+1]
.text:0000000000016F97                 cmp     rdi, rcx
.text:0000000000016F9A                 jge     short loc_16F40
.text:0000000000016F9C                 cmp     al, 0DFh
.text:0000000000016F9E                 movzx   edx, byte ptr [rdx+r8+1]
.text:0000000000016FA4                 ja      short loc_1700E
.text:0000000000016FA6                 add     edx, 0FFFFFF80h
.text:0000000000016FA9                 mov     ebp, 2
.text:0000000000016FAE                 cmp     dl, 3Fh ; '?'
.text:0000000000016FB1                 ja      short loc_16F40
.text:0000000000016FB3                 jmp     short loc_16F42
.text:0000000000016FB3 ; ---------------------------------------------------------------------------
.text:0000000000016FB5                 align 8
.text:0000000000016FB8
.text:0000000000016FB8 loc_16FB8:                              ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:0000000000016FB8                 test    rdx, rdx
.text:0000000000016FBB                 jnz     loc_16EC9
.text:0000000000016FC1
.text:0000000000016FC1 loc_16FC1:                              ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:0000000000016FC1                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:0000000000016FC1                 test    byte ptr [r13+20h], 1
.text:0000000000016FC6                 jnz     loc_16F42
.text:0000000000016FCC                 jmp     loc_16F40
.text:0000000000016FCC ; ---------------------------------------------------------------------------
.text:0000000000016FD1                 align 8
.text:0000000000016FD8
.text:0000000000016FD8 loc_16FD8:                              ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:0000000000016FD8                 mov     rsi, [r13+40h]
.text:0000000000016FDC
.text:0000000000016FDC loc_16FDC:                              ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:0000000000016FDC                 test    rsi, rsi
.text:0000000000016FDF                 jle     short loc_16FC1
.text:0000000000016FE1                 mov     rdx, [r13+8]
.text:0000000000016FE5                 xor     eax, eax
.text:0000000000016FE7                 jmp     short loc_16FF9
.text:0000000000016FE7 ; ---------------------------------------------------------------------------
.text:0000000000016FE9                 align 10h
.text:0000000000016FF0
.text:0000000000016FF0 loc_16FF0:                              ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:0000000000016FF0                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:0000000000016FF0                 add     rax, 1
.text:0000000000016FF4                 cmp     rax, rsi
.text:0000000000016FF7                 jz      short loc_16FC1
.text:0000000000016FF9
.text:0000000000016FF9 loc_16FF9:                              ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:0000000000016FF9                 cmp     r12d, [rdx+rax*4]
.text:0000000000016FFD                 jl      short loc_16FF0
.text:0000000000016FFF                 mov     rcx, [r13+10h]
.text:0000000000017003                 cmp     r12d, [rcx+rax*4]
.text:0000000000017007                 jg      short loc_16FF0
.text:0000000000017009                 jmp     loc_16F32
.text:000000000001700E ; ---------------------------------------------------------------------------
.text:000000000001700E
.text:000000000001700E loc_1700E:                              ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:000000000001700E                 cmp     al, 0EFh
.text:0000000000017010                 ja      short loc_17058
.text:0000000000017012                 cmp     al, 0E0h
.text:0000000000017014                 jnz     short loc_1701F
.text:0000000000017016                 cmp     dl, 9Fh
.text:0000000000017019                 jbe     loc_16F40
.text:000000000001701F
.text:000000000001701F loc_1701F:                              ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:000000000001701F                 mov     ebp, 3
.text:0000000000017024
.text:0000000000017024 loc_17024:                              ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:0000000000017024                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:0000000000017024                 movsxd  rdi, ebp
.text:0000000000017027                 add     r8, rdi
.text:000000000001702A                 cmp     rcx, r8
.text:000000000001702D                 jl      loc_16F40
.text:0000000000017033                 mov     eax, 1
.text:0000000000017038                 jmp     short loc_17047
.text:000000000001703A ; ---------------------------------------------------------------------------
.text:000000000001703A
.text:000000000001703A loc_1703A:                              ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:000000000001703A                 add     rax, 1
.text:000000000001703E                 cmp     rdi, rax
.text:0000000000017041                 jle     loc_16F42
.text:0000000000017047
.text:0000000000017047 loc_17047:                              ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:0000000000017047                 movzx   ebx, byte ptr [rsi+rax]
.text:000000000001704B                 lea     edx, [rbx-80h]
.text:000000000001704E                 cmp     dl, 3Fh ; '?'
.text:0000000000017051                 jbe     short loc_1703A
.text:0000000000017053                 jmp     loc_16F40
.text:0000000000017058 ; ---------------------------------------------------------------------------
.text:0000000000017058
.text:0000000000017058 loc_17058:                              ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:0000000000017058                 cmp     al, 0F7h
.text:000000000001705A                 ja      short loc_17070
.text:000000000001705C                 cmp     al, 0F0h
.text:000000000001705E                 jnz     short loc_17069
.text:0000000000017060                 cmp     dl, 8Fh
.text:0000000000017063                 jbe     loc_16F40
.text:0000000000017069
.text:0000000000017069 loc_17069:                              ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:0000000000017069                 mov     ebp, 4
.text:000000000001706E                 jmp     short loc_17024
.text:0000000000017070 ; ---------------------------------------------------------------------------
.text:0000000000017070
.text:0000000000017070 loc_17070:                              ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:0000000000017070                 cmp     al, 0FBh
.text:0000000000017072                 ja      short loc_17088
.text:0000000000017074                 cmp     al, 0F8h
.text:0000000000017076                 jnz     short loc_17081
.text:0000000000017078                 cmp     dl, 87h
.text:000000000001707B                 jbe     loc_16F40
.text:0000000000017081
.text:0000000000017081 loc_17081:                              ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:0000000000017081                 mov     ebp, 5
.text:0000000000017086                 jmp     short loc_17024
.text:0000000000017088 ; ---------------------------------------------------------------------------
.text:0000000000017088
.text:0000000000017088 loc_17088:                              ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:0000000000017088                 cmp     al, 0FDh
.text:000000000001708A                 ja      loc_16F40
.text:0000000000017090                 cmp     al, 0FCh
.text:0000000000017092                 jnz     short loc_1709D
.text:0000000000017094                 cmp     dl, 83h
.text:0000000000017097                 jbe     loc_16F40
.text:000000000001709D
.text:000000000001709D loc_1709D:                              ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000001709D                 mov     ebp, 6
.text:00000000000170A2                 jmp     short loc_17024
.text:00000000000170A2 ; } // starts at 16E50
.text:00000000000170A2 check_node_accept_bytes_isra_31 endp
.text:00000000000170A2
.text:00000000000170A2 ; ---------------------------------------------------------------------------
.text:00000000000170A4                 align 10h
.text:00000000000170B0
.text:00000000000170B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000170B0
.text:00000000000170B0
.text:00000000000170B0 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:00000000000170B0                                         ; transit_state_bkref_isra_34+68B↓p
.text:00000000000170B0
.text:00000000000170B0 var_108         = qword ptr -108h
.text:00000000000170B0 var_100         = qword ptr -100h
.text:00000000000170B0 var_F8          = qword ptr -0F8h
.text:00000000000170B0 var_F0          = qword ptr -0F0h
.text:00000000000170B0 var_E8          = qword ptr -0E8h
.text:00000000000170B0 var_E0          = qword ptr -0E0h
.text:00000000000170B0 var_D8          = qword ptr -0D8h
.text:00000000000170B0 var_D0          = qword ptr -0D0h
.text:00000000000170B0 var_C8          = qword ptr -0C8h
.text:00000000000170B0 var_C0          = qword ptr -0C0h
.text:00000000000170B0 var_B8          = qword ptr -0B8h
.text:00000000000170B0 var_B0          = qword ptr -0B0h
.text:00000000000170B0 var_A8          = qword ptr -0A8h
.text:00000000000170B0 var_A0          = qword ptr -0A0h
.text:00000000000170B0 var_98          = qword ptr -98h
.text:00000000000170B0 var_90          = qword ptr -90h
.text:00000000000170B0 var_80          = dword ptr -80h
.text:00000000000170B0 var_7C          = dword ptr -7Ch
.text:00000000000170B0 var_78          = xmmword ptr -78h
.text:00000000000170B0 var_68          = qword ptr -68h
.text:00000000000170B0 var_58          = byte ptr -58h
.text:00000000000170B0 var_50          = qword ptr -50h
.text:00000000000170B0 ptr             = qword ptr -48h
.text:00000000000170B0 var_40          = qword ptr -40h
.text:00000000000170B0 arg_0           = dword ptr  8
.text:00000000000170B0
.text:00000000000170B0 ; __unwind {
.text:00000000000170B0                 push    r15
.text:00000000000170B2                 push    r14
.text:00000000000170B4                 mov     r15, rdi
.text:00000000000170B7                 push    r13
.text:00000000000170B9                 push    r12
.text:00000000000170BB                 push    rbp
.text:00000000000170BC                 push    rbx
.text:00000000000170BD                 mov     rbp, rcx
.text:00000000000170C0                 mov     rbx, rdx
.text:00000000000170C3                 sub     rsp, 0D8h
.text:00000000000170CA                 mov     rcx, [rdi+98h]
.text:00000000000170D1                 mov     r13, [rsi+8]
.text:00000000000170D5                 mov     rax, fs:28h
.text:00000000000170DE                 mov     [rsp+108h+var_40], rax
.text:00000000000170E6                 xor     eax, eax
.text:00000000000170E8                 mov     rax, rdx
.text:00000000000170EB                 mov     [rsp+108h+var_A8], rsi
.text:00000000000170F0                 mov     [rsp+108h+var_90], r8
.text:00000000000170F5                 shl     rax, 4
.text:00000000000170F9                 add     rax, [rcx]
.text:00000000000170FC                 mov     [rsp+108h+var_C8], r9
.text:0000000000017101                 mov     [rsp+108h+var_D8], rcx
.text:0000000000017106                 mov     [rsp+108h+var_80], 0
.text:0000000000017111                 mov     rax, [rax]
.text:0000000000017114                 mov     [rsp+108h+var_C0], rax
.text:0000000000017119                 movsxd  rax, dword ptr [rdi+0E0h]
.text:0000000000017120                 add     rax, r9
.text:0000000000017123                 cmp     rax, r13
.text:0000000000017126                 jge     loc_17746
.text:000000000001712C
.text:000000000001712C loc_1712C:                              ; CODE XREF: check_arrival+6FB↓j
.text:000000000001712C                 mov     rax, [rsp+108h+var_A8]
.text:0000000000017131                 mov     rdx, [r15+0B8h]
.text:0000000000017138                 mov     rcx, [r15+48h]
.text:000000000001713C                 mov     r12, [rax]
.text:000000000001713F                 mov     r14, [rax+10h]
.text:0000000000017143                 mov     [rsp+108h+var_A0], rdx
.text:0000000000017148                 mov     [rsp+108h+var_98], rcx
.text:000000000001714D                 mov     edx, [r15+0A0h]
.text:0000000000017154                 test    r12, r12
.text:0000000000017157                 mov     [r15+0B8h], r14
.text:000000000001715E                 jz      loc_17540
.text:0000000000017164                 lea     rsi, [r12-1]
.text:0000000000017169                 mov     [r15+48h], r12
.text:000000000001716D                 mov     rdi, r15
.text:0000000000017170                 call    re_string_context_at
.text:0000000000017175                 cmp     r12, rbp
.text:0000000000017178                 mov     r13d, eax
.text:000000000001717B                 jz      loc_17553
.text:0000000000017181                 mov     rbp, [r14+r12*8]
.text:0000000000017185                 test    rbp, rbp
.text:0000000000017188                 jz      short loc_17194
.text:000000000001718A                 test    byte ptr [rbp+68h], 40h
.text:000000000001718E                 jnz     loc_176B0
.text:0000000000017194
.text:0000000000017194 loc_17194:                              ; CODE XREF: check_arrival+D8↑j
.text:0000000000017194                 pxor    xmm0, xmm0
.text:0000000000017198                 mov     [rsp+108h+var_68], 0
.text:00000000000171A4                 movaps  [rsp+108h+var_78], xmm0
.text:00000000000171AC
.text:00000000000171AC loc_171AC:                              ; CODE XREF: check_arrival+627↓j
.text:00000000000171AC                                         ; check_arrival+691↓j
.text:00000000000171AC                 cmp     r12, [rsp+108h+var_C8]
.text:00000000000171B1                 jge     loc_174D8
.text:00000000000171B7                 mov     ecx, [r15+0E0h]
.text:00000000000171BE                 test    ecx, ecx
.text:00000000000171C0                 js      loc_174D8
.text:00000000000171C6                 lea     rbx, [rsp+108h+var_78]
.text:00000000000171CE                 lea     rax, ds:8[r12*8]
.text:00000000000171D6                 mov     [rsp+108h+var_108], r12
.text:00000000000171DA                 mov     [rsp+108h+var_E8], 0
.text:00000000000171E3                 mov     [rsp+108h+var_100], rbx
.text:00000000000171E8                 lea     rbx, [rsp+108h+var_58]
.text:00000000000171F0                 mov     [rsp+108h+var_F8], rax
.text:00000000000171F5                 mov     rax, [r15+0B8h]
.text:00000000000171FC                 mov     [rsp+108h+var_F0], rbx
.text:0000000000017201                 lea     rbx, [rsp+108h+var_7C]
.text:0000000000017209                 mov     [rsp+108h+var_B0], rbx
.text:000000000001720E
.text:000000000001720E loc_1720E:                              ; CODE XREF: check_arrival+422↓j
.text:000000000001720E                 mov     rcx, [rsp+108h+var_F8]
.text:0000000000017213                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:000000000001721F                 mov     rsi, [rax+rcx]
.text:0000000000017223                 test    rsi, rsi
.text:0000000000017226                 jz      loc_175E8
.text:000000000001722C                 mov     rdi, [rsp+108h+var_100]
.text:0000000000017231                 add     rsi, 8
.text:0000000000017235                 call    re_node_set_merge
.text:000000000001723A                 test    eax, eax
.text:000000000001723C                 mov     [rsp+108h+var_80], eax
.text:0000000000017243                 jnz     loc_17620
.text:0000000000017249                 test    rbp, rbp
.text:000000000001724C                 jz      loc_173F8
.text:0000000000017252
.text:0000000000017252 loc_17252:                              ; CODE XREF: check_arrival+53B↓j
.text:0000000000017252                 cmp     qword ptr [rbp+28h], 0
.text:0000000000017257                 mov     rax, [rsp+108h+var_F0]
.text:000000000001725C                 pxor    xmm0, xmm0
.text:0000000000017260                 mov     r12, [r15+98h]
.text:0000000000017267                 mov     [rsp+108h+var_7C], 0
.text:0000000000017272                 mov     qword ptr [rax+10h], 0
.text:000000000001727A                 movaps  xmmword ptr [rax], xmm0
.text:000000000001727D                 jle     loc_177B0
.text:0000000000017283                 lea     rax, [r12+0D8h]
.text:000000000001728B                 xor     ebx, ebx
.text:000000000001728D                 mov     [rsp+108h+var_E0], rax
.text:0000000000017292                 jmp     short loc_172D9
.text:0000000000017292 ; ---------------------------------------------------------------------------
.text:0000000000017294                 align 8
.text:0000000000017298
.text:0000000000017298 loc_17298:                              ; CODE XREF: check_arrival+244↓j
.text:0000000000017298                                         ; check_arrival+52F↓j
.text:0000000000017298                 mov     rdx, [rsp+108h+var_108]
.text:000000000001729C                 mov     rdi, r15
.text:000000000001729F                 call    check_node_accept
.text:00000000000172A4                 test    al, al
.text:00000000000172A6                 jz      short loc_172CB
.text:00000000000172A8
.text:00000000000172A8 loc_172A8:                              ; CODE XREF: check_arrival+522↓j
.text:00000000000172A8                 lea     r13, ds:0[r14*8]
.text:00000000000172B0
.text:00000000000172B0 loc_172B0:                              ; CODE XREF: check_arrival+30B↓j
.text:00000000000172B0                                         ; check_arrival+31A↓j
.text:00000000000172B0                 mov     rax, [r12+18h]
.text:00000000000172B5                 mov     rdi, [rsp+108h+var_100]
.text:00000000000172BA                 mov     rsi, [rax+r13]
.text:00000000000172BE                 call    re_node_set_insert
.text:00000000000172C3                 test    al, al
.text:00000000000172C5                 jz      loc_17608
.text:00000000000172CB
.text:00000000000172CB loc_172CB:                              ; CODE XREF: check_arrival+1F6↑j
.text:00000000000172CB                 add     rbx, 1
.text:00000000000172CF                 cmp     rbx, [rbp+28h]
.text:00000000000172D3                 jge     loc_17660
.text:00000000000172D9
.text:00000000000172D9 loc_172D9:                              ; CODE XREF: check_arrival+1E2↑j
.text:00000000000172D9                 mov     rax, [rbp+30h]
.text:00000000000172DD                 mov     rdi, [r12]
.text:00000000000172E1                 mov     r14, [rax+rbx*8]
.text:00000000000172E5                 mov     r13, r14
.text:00000000000172E8                 shl     r13, 4
.text:00000000000172EC                 lea     rsi, [rdi+r13]
.text:00000000000172F0                 test    byte ptr [rsi+0Ah], 10h
.text:00000000000172F4                 jz      short loc_17298
.text:00000000000172F6                 mov     r8, [rsp+108h+var_108]
.text:00000000000172FA                 mov     rsi, [rsp+108h+var_E0]
.text:00000000000172FF                 mov     rcx, r15
.text:0000000000017302                 mov     rdx, r14
.text:0000000000017305                 call    check_node_accept_bytes_isra_31
.text:000000000001730A                 cmp     eax, 1
.text:000000000001730D                 jle     loc_175D0
.text:0000000000017313                 cdqe
.text:0000000000017315                 add     rax, [rsp+108h+var_108]
.text:0000000000017319                 mov     rdx, [r12+18h]
.text:000000000001731E                 lea     r13, ds:0[r14*8]
.text:0000000000017326                 mov     rdx, [rdx+r14*8]
.text:000000000001732A                 mov     rcx, rax
.text:000000000001732D                 mov     [rsp+108h+var_D0], rax
.text:0000000000017332                 lea     r14, ds:0[rax*8]
.text:000000000001733A                 mov     rax, [r15+0B8h]
.text:0000000000017341                 mov     rsi, [rax+rcx*8]
.text:0000000000017345                 mov     [rsp+108h+var_50], 0
.text:0000000000017351                 test    rsi, rsi
.text:0000000000017354                 jz      short loc_17379
.text:0000000000017356                 mov     rdi, [rsp+108h+var_F0]
.text:000000000001735B                 add     rsi, 8
.text:000000000001735F                 mov     [rsp+108h+var_B8], rdx
.text:0000000000017364                 call    re_node_set_merge
.text:0000000000017369                 test    eax, eax
.text:000000000001736B                 mov     [rsp+108h+var_7C], eax
.text:0000000000017372                 mov     rdx, [rsp+108h+var_B8]
.text:0000000000017377                 jnz     short loc_173D0
.text:0000000000017379
.text:0000000000017379 loc_17379:                              ; CODE XREF: check_arrival+2A4↑j
.text:0000000000017379                 mov     rdi, [rsp+108h+var_F0]
.text:000000000001737E                 mov     rsi, rdx
.text:0000000000017381                 call    re_node_set_insert
.text:0000000000017386                 test    al, al
.text:0000000000017388                 jz      loc_17608
.text:000000000001738E                 add     r14, [r15+0B8h]
.text:0000000000017395                 mov     rdx, [rsp+108h+var_F0]
.text:000000000001739A                 mov     rsi, r12
.text:000000000001739D                 mov     rdi, [rsp+108h+var_B0]
.text:00000000000173A2                 call    re_acquire_state
.text:00000000000173A7                 mov     rdx, [rsp+108h+var_D0]
.text:00000000000173AC                 mov     [r14], rax
.text:00000000000173AF                 mov     rax, [r15+0B8h]
.text:00000000000173B6                 cmp     qword ptr [rax+rdx*8], 0
.text:00000000000173BB                 jnz     loc_172B0
.text:00000000000173C1                 mov     edx, [rsp+108h+var_7C]
.text:00000000000173C8                 test    edx, edx
.text:00000000000173CA                 jz      loc_172B0
.text:00000000000173D0
.text:00000000000173D0 loc_173D0:                              ; CODE XREF: check_arrival+2C7↑j
.text:00000000000173D0                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:00000000000173D8                 call    free
.text:00000000000173DD                 mov     eax, [rsp+108h+var_7C]
.text:00000000000173E4                 test    eax, eax
.text:00000000000173E6                 mov     [rsp+108h+var_80], eax
.text:00000000000173ED                 jnz     loc_17620
.text:00000000000173F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000173F8
.text:00000000000173F8 loc_173F8:                              ; CODE XREF: check_arrival+19C↑j
.text:00000000000173F8                                         ; check_arrival+5C8↓j
.text:00000000000173F8                 mov     rax, [rsp+108h+var_108]
.text:00000000000173FC                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:0000000000017405                 lea     rbx, [rax+1]
.text:0000000000017409                 mov     r12, rbx
.text:000000000001740C                 jz      short loc_17464
.text:000000000001740E                 mov     ecx, [rsp+108h+arg_0]
.text:0000000000017415                 mov     rdx, [rsp+108h+var_C0]
.text:000000000001741A                 mov     rsi, [rsp+108h+var_100]
.text:000000000001741F                 mov     rdi, [rsp+108h+var_D8]
.text:0000000000017424                 call    check_arrival_expand_ecl
.text:0000000000017429                 test    eax, eax
.text:000000000001742B                 mov     [rsp+108h+var_80], eax
.text:0000000000017432                 jnz     loc_17620
.text:0000000000017438                 mov     r8d, [rsp+108h+arg_0]
.text:0000000000017440                 mov     rcx, [rsp+108h+var_C0]
.text:0000000000017445                 mov     rdx, rbx
.text:0000000000017448                 mov     rsi, [rsp+108h+var_100]
.text:000000000001744D                 mov     rdi, r15
.text:0000000000017450                 call    expand_bkref_cache
.text:0000000000017455                 test    eax, eax
.text:0000000000017457                 mov     [rsp+108h+var_80], eax
.text:000000000001745E                 jnz     loc_17620
.text:0000000000017464
.text:0000000000017464 loc_17464:                              ; CODE XREF: check_arrival+35C↑j
.text:0000000000017464                                         ; check_arrival+54C↓j
.text:0000000000017464                 mov     edx, [r15+0A0h]
.text:000000000001746B                 mov     rsi, [rsp+108h+var_108]
.text:000000000001746F                 mov     rdi, r15
.text:0000000000017472                 call    re_string_context_at
.text:0000000000017477                 mov     rdx, [rsp+108h+var_100]
.text:000000000001747C                 mov     rsi, [rsp+108h+var_D8]
.text:0000000000017481                 lea     rdi, [rsp+108h+var_80]
.text:0000000000017489                 mov     ecx, eax
.text:000000000001748B                 call    re_acquire_state_context
.text:0000000000017490                 test    rax, rax
.text:0000000000017493                 mov     rbp, rax
.text:0000000000017496                 jz      loc_17680
.text:000000000001749C                 mov     rax, [r15+0B8h]
.text:00000000000174A3                 mov     rdx, [rsp+108h+var_F8]
.text:00000000000174A8                 mov     [rsp+108h+var_E8], 0
.text:00000000000174B1                 mov     [rax+rdx], rbp
.text:00000000000174B5
.text:00000000000174B5 loc_174B5:                              ; CODE XREF: check_arrival+5F5↓j
.text:00000000000174B5                 cmp     [rsp+108h+var_C8], rbx
.text:00000000000174BA                 jle     short loc_174D8
.text:00000000000174BC                 movsxd  rdx, dword ptr [r15+0E0h]
.text:00000000000174C3                 add     [rsp+108h+var_F8], 8
.text:00000000000174C9                 cmp     rdx, [rsp+108h+var_E8]
.text:00000000000174CE                 mov     [rsp+108h+var_108], rbx
.text:00000000000174D2                 jge     loc_1720E
.text:00000000000174D8
.text:00000000000174D8 loc_174D8:                              ; CODE XREF: check_arrival+101↑j
.text:00000000000174D8                                         ; check_arrival+110↑j ...
.text:00000000000174D8                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:00000000000174E0                 call    free
.text:00000000000174E5                 mov     rax, [r15+0B8h]
.text:00000000000174EC                 mov     rbx, [rsp+108h+var_C8]
.text:00000000000174F1                 mov     rax, [rax+rbx*8]
.text:00000000000174F5                 test    rax, rax
.text:00000000000174F8                 jz      loc_177D5
.text:00000000000174FE                 mov     rbx, [rsp+108h+var_A8]
.text:0000000000017503                 mov     rdx, [rsp+108h+var_90]
.text:0000000000017508                 lea     rsi, [rax+18h]
.text:000000000001750C                 mov     [rbx], r12
.text:000000000001750F                 mov     rbx, [rsp+108h+var_A0]
.text:0000000000017514                 mov     [r15+0B8h], rbx
.text:000000000001751B                 mov     rbx, [rsp+108h+var_98]
.text:0000000000017520                 mov     [r15+48h], rbx
.text:0000000000017524                 mov     rdi, [rax+10h]
.text:0000000000017528                 call    re_node_set_contains_isra_3
.text:000000000001752D                 test    rax, rax
.text:0000000000017530                 setz    al
.text:0000000000017533                 movzx   eax, al
.text:0000000000017536                 jmp     loc_17634
.text:0000000000017536 ; ---------------------------------------------------------------------------
.text:000000000001753B                 align 20h
.text:0000000000017540
.text:0000000000017540 loc_17540:                              ; CODE XREF: check_arrival+AE↑j
.text:0000000000017540                 lea     rsi, [rbp-1]
.text:0000000000017544                 mov     [r15+48h], rbp
.text:0000000000017548                 mov     rdi, r15
.text:000000000001754B                 call    re_string_context_at
.text:0000000000017550                 mov     r13d, eax
.text:0000000000017553
.text:0000000000017553 loc_17553:                              ; CODE XREF: check_arrival+CB↑j
.text:0000000000017553                 mov     edi, 8          ; size
.text:0000000000017558                 mov     qword ptr [rsp+108h+var_78], 1
.text:0000000000017564                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:0000000000017570                 call    _malloc
.text:0000000000017575                 test    rax, rax
.text:0000000000017578                 mov     [rsp+108h+var_68], rax
.text:0000000000017580                 jz      loc_177CB
.text:0000000000017586                 mov     [rax], rbx
.text:0000000000017589                 mov     ecx, [rsp+108h+arg_0]
.text:0000000000017590                 lea     rbx, [rsp+108h+var_78]
.text:0000000000017598                 mov     rdx, [rsp+108h+var_C0]
.text:000000000001759D                 mov     rdi, [rsp+108h+var_D8]
.text:00000000000175A2                 mov     r12, rbp
.text:00000000000175A5                 mov     rsi, rbx
.text:00000000000175A8                 mov     [rsp+108h+var_80], 0
.text:00000000000175B3                 call    check_arrival_expand_ecl
.text:00000000000175B8                 test    eax, eax
.text:00000000000175BA                 mov     [rsp+108h+var_80], eax
.text:00000000000175C1                 jz      loc_176DD
.text:00000000000175C7                 jmp     short loc_17620
.text:00000000000175C7 ; ---------------------------------------------------------------------------
.text:00000000000175C9                 align 10h
.text:00000000000175D0
.text:00000000000175D0 loc_175D0:                              ; CODE XREF: check_arrival+25D↑j
.text:00000000000175D0                 test    eax, eax
.text:00000000000175D2                 jnz     loc_172A8
.text:00000000000175D8                 mov     rsi, [r12]
.text:00000000000175DC                 add     rsi, r13
.text:00000000000175DF                 jmp     loc_17298
.text:00000000000175DF ; ---------------------------------------------------------------------------
.text:00000000000175E4                 align 8
.text:00000000000175E8
.text:00000000000175E8 loc_175E8:                              ; CODE XREF: check_arrival+176↑j
.text:00000000000175E8                 test    rbp, rbp
.text:00000000000175EB                 jnz     loc_17252
.text:00000000000175F1                 mov     rax, [rsp+108h+var_108]
.text:00000000000175F5                 lea     rbx, [rax+1]
.text:00000000000175F9                 mov     r12, rbx
.text:00000000000175FC                 jmp     loc_17464
.text:00000000000175FC ; ---------------------------------------------------------------------------
.text:0000000000017601                 align 8
.text:0000000000017608
.text:0000000000017608 loc_17608:                              ; CODE XREF: check_arrival+215↑j
.text:0000000000017608                                         ; check_arrival+2D8↑j
.text:0000000000017608                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000017610                 call    free
.text:0000000000017615                 mov     [rsp+108h+var_80], 0Ch
.text:0000000000017620
.text:0000000000017620 loc_17620:                              ; CODE XREF: check_arrival+193↑j
.text:0000000000017620                                         ; check_arrival+33D↑j ...
.text:0000000000017620                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:0000000000017628                 call    free
.text:000000000001762D                 mov     eax, [rsp+108h+var_80]
.text:0000000000017634
.text:0000000000017634 loc_17634:                              ; CODE XREF: check_arrival+486↑j
.text:0000000000017634                                         ; check_arrival+61D↓j ...
.text:0000000000017634                 mov     rbx, [rsp+108h+var_40]
.text:000000000001763C                 xor     rbx, fs:28h
.text:0000000000017645                 jnz     loc_177FC
.text:000000000001764B                 add     rsp, 0D8h
.text:0000000000017652                 pop     rbx
.text:0000000000017653                 pop     rbp
.text:0000000000017654                 pop     r12
.text:0000000000017656                 pop     r13
.text:0000000000017658                 pop     r14
.text:000000000001765A                 pop     r15
.text:000000000001765C                 retn
.text:000000000001765C ; ---------------------------------------------------------------------------
.text:000000000001765D                 align 20h
.text:0000000000017660
.text:0000000000017660 loc_17660:                              ; CODE XREF: check_arrival+223↑j
.text:0000000000017660                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000017668
.text:0000000000017668 loc_17668:                              ; CODE XREF: check_arrival+702↓j
.text:0000000000017668                 call    free
.text:000000000001766D                 mov     [rsp+108h+var_80], 0
.text:0000000000017678                 jmp     loc_173F8
.text:0000000000017678 ; ---------------------------------------------------------------------------
.text:000000000001767D                 align 20h
.text:0000000000017680
.text:0000000000017680 loc_17680:                              ; CODE XREF: check_arrival+3E6↑j
.text:0000000000017680                 mov     eax, [rsp+108h+var_80]
.text:0000000000017687                 test    eax, eax
.text:0000000000017689                 jnz     short loc_17620
.text:000000000001768B                 mov     rax, [r15+0B8h]
.text:0000000000017692                 mov     rdx, [rsp+108h+var_F8]
.text:0000000000017697                 add     [rsp+108h+var_E8], 1
.text:000000000001769D                 mov     qword ptr [rax+rdx], 0
.text:00000000000176A5                 jmp     loc_174B5
.text:00000000000176A5 ; ---------------------------------------------------------------------------
.text:00000000000176AA                 align 10h
.text:00000000000176B0
.text:00000000000176B0 loc_176B0:                              ; CODE XREF: check_arrival+DE↑j
.text:00000000000176B0                 lea     rbx, [rsp+108h+var_78]
.text:00000000000176B8                 lea     rsi, [rbp+8]
.text:00000000000176BC                 mov     rdi, rbx
.text:00000000000176BF                 call    re_node_set_init_copy
.text:00000000000176C4                 test    eax, eax
.text:00000000000176C6                 mov     [rsp+108h+var_80], eax
.text:00000000000176CD                 jnz     loc_17634
.text:00000000000176D3                 test    byte ptr [rbp+68h], 40h
.text:00000000000176D7                 jz      loc_171AC
.text:00000000000176DD
.text:00000000000176DD loc_176DD:                              ; CODE XREF: check_arrival+511↑j
.text:00000000000176DD                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:00000000000176E6                 jz      short loc_17712
.text:00000000000176E8                 mov     r8d, [rsp+108h+arg_0]
.text:00000000000176F0                 mov     rcx, [rsp+108h+var_C0]
.text:00000000000176F5                 mov     rdx, r12
.text:00000000000176F8                 mov     rsi, rbx
.text:00000000000176FB                 mov     rdi, r15
.text:00000000000176FE                 call    expand_bkref_cache
.text:0000000000017703                 test    eax, eax
.text:0000000000017705                 mov     [rsp+108h+var_80], eax
.text:000000000001770C                 jnz     loc_17620
.text:0000000000017712
.text:0000000000017712 loc_17712:                              ; CODE XREF: check_arrival+636↑j
.text:0000000000017712                 mov     rsi, [rsp+108h+var_D8]
.text:0000000000017717                 lea     rdi, [rsp+108h+var_80]
.text:000000000001771F                 mov     ecx, r13d
.text:0000000000017722                 mov     rdx, rbx
.text:0000000000017725                 call    re_acquire_state_context
.text:000000000001772A                 test    rax, rax
.text:000000000001772D                 mov     rbp, rax
.text:0000000000017730                 jz      loc_177B7
.text:0000000000017736
.text:0000000000017736 loc_17736:                              ; CODE XREF: check_arrival+710↓j
.text:0000000000017736                 mov     rax, [r15+0B8h]
.text:000000000001773D                 mov     [rax+r12*8], rbp
.text:0000000000017741                 jmp     loc_171AC
.text:0000000000017746 ; ---------------------------------------------------------------------------
.text:0000000000017746
.text:0000000000017746 loc_17746:                              ; CODE XREF: check_arrival+76↑j
.text:0000000000017746                 lea     r12, [rax+1]
.text:000000000001774A                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000017754                 sub     rax, r13
.text:0000000000017757                 cmp     rax, r12
.text:000000000001775A                 jl      short loc_177CB
.text:000000000001775C                 lea     r14, [r13+r12+0]
.text:0000000000017761                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000001776B                 cmp     r14, rax
.text:000000000001776E                 ja      short loc_177CB
.text:0000000000017770                 mov     rax, [rsp+108h+var_A8]
.text:0000000000017775                 lea     rsi, ds:0[r14*8] ; size
.text:000000000001777D                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000017781                 call    _realloc
.text:0000000000017786                 test    rax, rax
.text:0000000000017789                 jz      short loc_177CB
.text:000000000001778B                 mov     rcx, [rsp+108h+var_A8]
.text:0000000000017790                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000017798                 lea     rdi, [rax+r13*8] ; s
.text:000000000001779C                 xor     esi, esi        ; c
.text:000000000001779E                 mov     [rcx+10h], rax
.text:00000000000177A2                 mov     [rcx+8], r14
.text:00000000000177A6                 call    _memset
.text:00000000000177AB                 jmp     loc_1712C
.text:00000000000177B0 ; ---------------------------------------------------------------------------
.text:00000000000177B0
.text:00000000000177B0 loc_177B0:                              ; CODE XREF: check_arrival+1CD↑j
.text:00000000000177B0                 xor     edi, edi
.text:00000000000177B2                 jmp     loc_17668
.text:00000000000177B7 ; ---------------------------------------------------------------------------
.text:00000000000177B7
.text:00000000000177B7 loc_177B7:                              ; CODE XREF: check_arrival+680↑j
.text:00000000000177B7                 mov     esi, [rsp+108h+var_80]
.text:00000000000177BE                 test    esi, esi
.text:00000000000177C0                 jz      loc_17736
.text:00000000000177C6                 jmp     loc_17620
.text:00000000000177CB ; ---------------------------------------------------------------------------
.text:00000000000177CB
.text:00000000000177CB loc_177CB:                              ; CODE XREF: check_arrival+4D0↑j
.text:00000000000177CB                                         ; check_arrival+6AA↑j ...
.text:00000000000177CB                 mov     eax, 0Ch
.text:00000000000177D0                 jmp     loc_17634
.text:00000000000177D5 ; ---------------------------------------------------------------------------
.text:00000000000177D5
.text:00000000000177D5 loc_177D5:                              ; CODE XREF: check_arrival+448↑j
.text:00000000000177D5                 mov     rax, [rsp+108h+var_A8]
.text:00000000000177DA                 mov     [rax], r12
.text:00000000000177DD                 mov     rax, [rsp+108h+var_A0]
.text:00000000000177E2                 mov     [r15+0B8h], rax
.text:00000000000177E9                 mov     rax, [rsp+108h+var_98]
.text:00000000000177EE                 mov     [r15+48h], rax
.text:00000000000177F2                 mov     eax, 1
.text:00000000000177F7                 jmp     loc_17634
.text:00000000000177FC ; ---------------------------------------------------------------------------
.text:00000000000177FC
.text:00000000000177FC loc_177FC:                              ; CODE XREF: check_arrival+595↑j
.text:00000000000177FC                 call    ___stack_chk_fail
.text:00000000000177FC ; } // starts at 170B0
.text:00000000000177FC check_arrival   endp
.text:00000000000177FC
.text:00000000000177FC ; ---------------------------------------------------------------------------
.text:0000000000017801                 align 10h
.text:0000000000017810
.text:0000000000017810 ; =============== S U B R O U T I N E =======================================
.text:0000000000017810
.text:0000000000017810 ; Attributes: bp-based frame
.text:0000000000017810
.text:0000000000017810 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:0000000000017810
.text:0000000000017810 var_D1          = byte ptr -0D1h
.text:0000000000017810 var_C9          = byte ptr -0C9h
.text:0000000000017810 var_C8          = qword ptr -0C8h
.text:0000000000017810 dest            = qword ptr -0C0h
.text:0000000000017810 n               = qword ptr -0B8h
.text:0000000000017810 var_B0          = qword ptr -0B0h
.text:0000000000017810 var_A8          = qword ptr -0A8h
.text:0000000000017810 var_A0          = qword ptr -0A0h
.text:0000000000017810 var_98          = qword ptr -98h
.text:0000000000017810 var_90          = qword ptr -90h
.text:0000000000017810 var_88          = qword ptr -88h
.text:0000000000017810 var_78          = qword ptr -78h
.text:0000000000017810 var_70          = xmmword ptr -70h
.text:0000000000017810 ptr             = qword ptr -60h
.text:0000000000017810 var_50          = qword ptr -50h
.text:0000000000017810 var_48          = qword ptr -48h
.text:0000000000017810 var_40          = qword ptr -40h
.text:0000000000017810 var_38          = qword ptr -38h
.text:0000000000017810
.text:0000000000017810 ; __unwind {
.text:0000000000017810                 push    rbp
.text:0000000000017811                 mov     rbp, rsp
.text:0000000000017814                 push    r15
.text:0000000000017816                 push    r14
.text:0000000000017818                 push    r13
.text:000000000001781A                 push    r12
.text:000000000001781C                 mov     r13, rcx
.text:000000000001781F                 push    rbx
.text:0000000000017820                 mov     r12, rsi
.text:0000000000017823                 sub     rsp, 0B8h
.text:000000000001782A                 mov     [rbp+var_98], rdx
.text:0000000000017831                 mov     [rbp+var_50], 0
.text:0000000000017839                 mov     rax, fs:28h
.text:0000000000017842                 mov     [rbp+var_38], rax
.text:0000000000017846                 xor     eax, eax
.text:0000000000017848                 mov     rax, [rdi]
.text:000000000001784B                 test    r8b, r8b
.text:000000000001784E                 mov     [rbp+var_48], 2
.text:0000000000017856                 mov     [rbp+var_40], 0
.text:000000000001785E                 mov     [rbp+var_90], rax
.text:0000000000017865                 jz      loc_1800D
.text:000000000001786B                 mov     edi, 60h ; '`'  ; size
.text:0000000000017870                 call    _malloc
.text:0000000000017875                 lea     rcx, [rbp+var_50]
.text:0000000000017879                 test    rax, rax
.text:000000000001787C                 mov     [rbp+var_40], rax
.text:0000000000017880                 mov     [rbp+var_88], rcx
.text:0000000000017887                 jz      loc_17FAC
.text:000000000001788D
.text:000000000001788D loc_1788D:                              ; CODE XREF: set_regs+808↓j
.text:000000000001788D                 mov     rax, [rbp+var_90]
.text:0000000000017894                 pxor    xmm0, xmm0
.text:0000000000017898                 mov     [rbp+ptr], 0
.text:00000000000178A0                 mov     rbx, [rax+90h]
.text:00000000000178A7                 mov     rax, [rbp+var_98]
.text:00000000000178AE                 movaps  [rbp+var_70], xmm0
.text:00000000000178B2                 shl     rax, 4
.text:00000000000178B6                 cmp     rax, 0FBFh
.text:00000000000178BC                 mov     [rbp+n], rax
.text:00000000000178C3                 ja      loc_17FB6
.text:00000000000178C9                 add     rax, 10h
.text:00000000000178CD                 mov     [rbp+var_C9], 0
.text:00000000000178D4                 sub     rsp, rax
.text:00000000000178D7                 lea     rax, [rsp+0E0h+var_D1]
.text:00000000000178DC                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000178E0                 mov     [rbp+dest], rax
.text:00000000000178E7
.text:00000000000178E7 loc_178E7:                              ; CODE XREF: set_regs+7C3↓j
.text:00000000000178E7                 mov     rdx, [rbp+n]    ; n
.text:00000000000178EE                 mov     rdi, [rbp+dest] ; dest
.text:00000000000178F5                 mov     rsi, r13        ; src
.text:00000000000178F8                 call    _memcpy
.text:00000000000178FD                 lea     rax, [rbp+var_70]
.text:0000000000017901                 mov     rcx, [r13+0]
.text:0000000000017905                 mov     [rbp+var_A8], rax
.text:000000000001790C                 add     rax, 10h
.text:0000000000017910                 mov     [rbp+var_78], rcx
.text:0000000000017914                 mov     [rbp+var_C8], rax
.text:000000000001791B
.text:000000000001791B loc_1791B:                              ; CODE XREF: set_regs+612↓j
.text:000000000001791B                 lea     rax, [rbp+var_78]
.text:000000000001791F                 mov     [rbp+var_B0], rax
.text:0000000000017926                 jmp     loc_17A09
.text:0000000000017926 ; ---------------------------------------------------------------------------
.text:000000000001792B                 align 10h
.text:0000000000017930
.text:0000000000017930 loc_17930:                              ; CODE XREF: set_regs+224↓j
.text:0000000000017930                 cmp     esi, 9
.text:0000000000017933                 jz      loc_17B20
.text:0000000000017939
.text:0000000000017939 loc_17939:                              ; CODE XREF: set_regs+238↓j
.text:0000000000017939                                         ; set_regs+254↓j ...
.text:0000000000017939                 cmp     rax, rcx
.text:000000000001793C                 jnz     short loc_1794C
.text:000000000001793E                 cmp     [r12+0B0h], rbx
.text:0000000000017946                 jz      loc_17D20
.text:000000000001794C
.text:000000000001794C loc_1794C:                              ; CODE XREF: set_regs+12C↑j
.text:000000000001794C                                         ; set_regs+5C5↓j
.text:000000000001794C                 mov     r14, [r12+98h]
.text:0000000000017954                 mov     rdi, [r14]
.text:0000000000017957                 lea     rsi, [rdi+r9]
.text:000000000001795B                 movzx   eax, byte ptr [rsi+8]
.text:000000000001795F                 test    al, 8
.text:0000000000017961                 jnz     loc_17A70
.text:0000000000017967                 test    byte ptr [rsi+0Ah], 10h
.text:000000000001796B                 jnz     loc_17B70
.text:0000000000017971                 cmp     al, 4
.text:0000000000017973                 jz      loc_17BB0
.text:0000000000017979                 mov     rcx, [rbp+var_78]
.text:000000000001797D
.text:000000000001797D loc_1797D:                              ; CODE XREF: set_regs+39A↓j
.text:000000000001797D                                         ; set_regs+6A5↓j
.text:000000000001797D                 mov     rdx, rcx
.text:0000000000017980                 mov     rdi, r12
.text:0000000000017983                 mov     [rbp+var_A0], rcx
.text:000000000001798A                 call    check_node_accept
.text:000000000001798F                 test    al, al
.text:0000000000017991                 mov     rcx, [rbp+var_A0]
.text:0000000000017998                 jz      loc_17DE8
.text:000000000001799E                 mov     rax, [r14+18h]
.text:00000000000179A2                 lea     rdx, [rcx+1]
.text:00000000000179A6                 mov     rbx, [rax+r15*8]
.text:00000000000179AA
.text:00000000000179AA loc_179AA:                              ; CODE XREF: set_regs+431↓j
.text:00000000000179AA                 cmp     [rbp+var_88], 0
.text:00000000000179B2                 mov     [rbp+var_78], rdx
.text:00000000000179B6                 jz      short loc_179F4
.text:00000000000179B8                 cmp     rdx, [r12+0A8h]
.text:00000000000179C0                 jg      loc_17DF6
.text:00000000000179C6                 mov     rax, [r12+0B8h]
.text:00000000000179CE                 mov     rax, [rax+rdx*8]
.text:00000000000179D2                 test    rax, rax
.text:00000000000179D5                 jz      loc_17DF6
.text:00000000000179DB                 mov     rdi, [rax+10h]
.text:00000000000179DF                 lea     rsi, [rax+18h]
.text:00000000000179E3                 mov     rdx, rbx
.text:00000000000179E6                 call    re_node_set_contains_isra_3
.text:00000000000179EB                 test    rax, rax
.text:00000000000179EE                 jz      loc_17DF6
.text:00000000000179F4
.text:00000000000179F4 loc_179F4:                              ; CODE XREF: set_regs+1A6↑j
.text:00000000000179F4                 mov     qword ptr [rbp+var_70+8], 0
.text:00000000000179FC
.text:00000000000179FC loc_179FC:                              ; CODE XREF: set_regs+304↓j
.text:00000000000179FC                                         ; set_regs+470↓j ...
.text:00000000000179FC                 test    rbx, rbx
.text:00000000000179FF                 js      loc_17DDA
.text:0000000000017A05                 mov     rcx, [rbp+var_78]
.text:0000000000017A09
.text:0000000000017A09 loc_17A09:                              ; CODE XREF: set_regs+116↑j
.text:0000000000017A09                 mov     rax, [r13+8]
.text:0000000000017A0D                 cmp     rax, rcx
.text:0000000000017A10                 jl      loc_17F00
.text:0000000000017A16                 mov     rdi, [rbp+var_90]
.text:0000000000017A1D                 mov     r9, rbx
.text:0000000000017A20                 mov     r15, rbx
.text:0000000000017A23                 shl     r9, 4
.text:0000000000017A27                 mov     rdx, [rdi]
.text:0000000000017A2A                 add     rdx, r9
.text:0000000000017A2D                 movzx   esi, byte ptr [rdx+8]
.text:0000000000017A31                 cmp     esi, 8
.text:0000000000017A34                 jnz     loc_17930
.text:0000000000017A3A                 mov     rdx, [rdx]
.text:0000000000017A3D                 add     rdx, 1
.text:0000000000017A41                 cmp     [rbp+var_98], rdx
.text:0000000000017A48                 jle     loc_17939
.text:0000000000017A4E                 shl     rdx, 4
.text:0000000000017A52                 add     rdx, r13
.text:0000000000017A55                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000017A5D                 mov     [rdx], rcx
.text:0000000000017A60                 mov     rax, [r13+8]
.text:0000000000017A64                 jmp     loc_17939
.text:0000000000017A64 ; ---------------------------------------------------------------------------
.text:0000000000017A69                 align 10h
.text:0000000000017A70
.text:0000000000017A70 loc_17A70:                              ; CODE XREF: set_regs+151↑j
.text:0000000000017A70                 mov     rax, [r12+0B8h]
.text:0000000000017A78                 mov     rdx, [rbp+var_78]
.text:0000000000017A7C                 mov     rsi, rbx
.text:0000000000017A7F                 mov     rdi, [rbp+var_A8]
.text:0000000000017A86                 mov     r9, [rax+rdx*8]
.text:0000000000017A8A                 mov     rax, [r14+28h]
.text:0000000000017A8E                 lea     rdx, [rbx+rbx*2]
.text:0000000000017A92                 mov     [rbp+var_A0], r9
.text:0000000000017A99                 lea     r15, [rax+rdx*8]
.text:0000000000017A9D                 call    re_node_set_insert
.text:0000000000017AA2                 test    al, al
.text:0000000000017AA4                 mov     r9, [rbp+var_A0]
.text:0000000000017AAB                 jz      loc_17F88
.text:0000000000017AB1                 mov     r10, [r15+8]
.text:0000000000017AB5                 test    r10, r10
.text:0000000000017AB8                 jle     loc_17DE8
.text:0000000000017ABE                 mov     r15, [r15+10h]
.text:0000000000017AC2                 mov     r11, [r9+10h]
.text:0000000000017AC6                 lea     r14, [r9+18h]
.text:0000000000017ACA                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000017AD1                 xor     r9d, r9d
.text:0000000000017AD4                 mov     [rbp+var_A0], r12
.text:0000000000017ADB                 nop     dword ptr [rax+rax+00h]
.text:0000000000017AE0
.text:0000000000017AE0 loc_17AE0:                              ; CODE XREF: set_regs+2FB↓j
.text:0000000000017AE0                 mov     r12, [r15+r9*8]
.text:0000000000017AE4                 mov     rsi, r14
.text:0000000000017AE7                 mov     rdi, r11
.text:0000000000017AEA                 mov     rdx, r12
.text:0000000000017AED                 call    re_node_set_contains_isra_3
.text:0000000000017AF2                 test    rax, rax
.text:0000000000017AF5                 jz      short loc_17B04
.text:0000000000017AF7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000017AFB                 jnz     loc_17C50
.text:0000000000017B01                 mov     rbx, r12
.text:0000000000017B04
.text:0000000000017B04 loc_17B04:                              ; CODE XREF: set_regs+2E5↑j
.text:0000000000017B04                 add     r9, 1
.text:0000000000017B08                 cmp     r10, r9
.text:0000000000017B0B                 jnz     short loc_17AE0
.text:0000000000017B0D                 mov     r12, [rbp+var_A0]
.text:0000000000017B14                 jmp     loc_179FC
.text:0000000000017B14 ; ---------------------------------------------------------------------------
.text:0000000000017B19                 align 20h
.text:0000000000017B20
.text:0000000000017B20 loc_17B20:                              ; CODE XREF: set_regs+123↑j
.text:0000000000017B20                 mov     rdi, [rdx]
.text:0000000000017B23                 lea     rsi, [rdi+1]
.text:0000000000017B27                 cmp     [rbp+var_98], rsi
.text:0000000000017B2E                 jle     loc_17939
.text:0000000000017B34                 shl     rsi, 4
.text:0000000000017B38                 lea     rax, [r13+rsi+0]
.text:0000000000017B3D                 cmp     [rax], rcx
.text:0000000000017B40                 jl      loc_17EC0
.text:0000000000017B46                 test    byte ptr [rdx+0Ah], 8
.text:0000000000017B4A                 jz      short loc_17B5E
.text:0000000000017B4C                 mov     rdi, [rbp+dest]
.text:0000000000017B53                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:0000000000017B58                 jnz     loc_17F4B
.text:0000000000017B5E
.text:0000000000017B5E loc_17B5E:                              ; CODE XREF: set_regs+33A↑j
.text:0000000000017B5E                 mov     [rax+8], rcx
.text:0000000000017B62                 mov     rax, [r13+8]
.text:0000000000017B66                 jmp     loc_17939
.text:0000000000017B66 ; ---------------------------------------------------------------------------
.text:0000000000017B6B                 align 10h
.text:0000000000017B70
.text:0000000000017B70 loc_17B70:                              ; CODE XREF: set_regs+15B↑j
.text:0000000000017B70                 mov     r8, [rbp+var_78]
.text:0000000000017B74                 lea     rsi, [r14+0D8h]
.text:0000000000017B7B                 mov     rcx, r12
.text:0000000000017B7E                 mov     rdx, rbx
.text:0000000000017B81                 mov     [rbp+var_A0], r9
.text:0000000000017B88                 call    check_node_accept_bytes_isra_31
.text:0000000000017B8D                 movsxd  rcx, eax
.text:0000000000017B90                 test    rcx, rcx
.text:0000000000017B93                 jnz     loc_17D91
.text:0000000000017B99                 mov     r9, [rbp+var_A0]
.text:0000000000017BA0                 mov     rsi, [r14]
.text:0000000000017BA3                 mov     rcx, [rbp+var_78]
.text:0000000000017BA7                 add     rsi, r9
.text:0000000000017BAA                 jmp     loc_1797D
.text:0000000000017BAA ; ---------------------------------------------------------------------------
.text:0000000000017BAF                 align 10h
.text:0000000000017BB0
.text:0000000000017BB0 loc_17BB0:                              ; CODE XREF: set_regs+163↑j
.text:0000000000017BB0                 mov     rax, [rsi]
.text:0000000000017BB3                 add     rax, 1
.text:0000000000017BB7                 shl     rax, 4
.text:0000000000017BBB                 add     rax, r13
.text:0000000000017BBE                 mov     rdx, [rax+8]
.text:0000000000017BC2                 mov     rdi, [rax]
.text:0000000000017BC5                 mov     rcx, rdx
.text:0000000000017BC8                 sub     rcx, rdi
.text:0000000000017BCB                 cmp     [rbp+var_88], 0
.text:0000000000017BD3                 jz      loc_17D88
.text:0000000000017BD9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000017BDD                 jz      loc_17DF6
.text:0000000000017BE3                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000017BE7                 jz      loc_17DF6
.text:0000000000017BED                 test    rcx, rcx
.text:0000000000017BF0                 jz      loc_17E40
.text:0000000000017BF6                 mov     r15, [rbp+var_78]
.text:0000000000017BFA                 mov     rdx, [r12+30h]
.text:0000000000017BFF                 mov     rax, [r12+8]
.text:0000000000017C04                 sub     rdx, r15
.text:0000000000017C07                 cmp     rcx, rdx
.text:0000000000017C0A                 jg      loc_17DF6
.text:0000000000017C10                 lea     rsi, [rax+r15]  ; s2
.text:0000000000017C14                 add     rdi, rax        ; s1
.text:0000000000017C17                 mov     rdx, rcx        ; n
.text:0000000000017C1A                 mov     [rbp+var_A0], rcx
.text:0000000000017C21                 call    _memcmp
.text:0000000000017C26                 test    eax, eax
.text:0000000000017C28                 mov     rcx, [rbp+var_A0]
.text:0000000000017C2F                 jnz     loc_17DF6
.text:0000000000017C35
.text:0000000000017C35 loc_17C35:                              ; CODE XREF: set_regs+585↓j
.text:0000000000017C35                 mov     rax, [r14+18h]
.text:0000000000017C39                 lea     rdx, [r15+rcx]
.text:0000000000017C3D                 mov     rbx, [rax+rbx*8]
.text:0000000000017C41                 jmp     loc_179AA
.text:0000000000017C41 ; ---------------------------------------------------------------------------
.text:0000000000017C46                 align 10h
.text:0000000000017C50
.text:0000000000017C50 loc_17C50:                              ; CODE XREF: set_regs+2EB↑j
.text:0000000000017C50                 mov     rsi, [rbp+var_C8]
.text:0000000000017C57                 mov     rdi, qword ptr [rbp+var_70+8]
.text:0000000000017C5B                 mov     rdx, rbx
.text:0000000000017C5E                 mov     r14, r12
.text:0000000000017C61                 mov     r12, [rbp+var_A0]
.text:0000000000017C68                 call    re_node_set_contains_isra_3
.text:0000000000017C6D                 test    rax, rax
.text:0000000000017C70                 jnz     loc_17E30
.text:0000000000017C76                 mov     rcx, [rbp+var_88]
.text:0000000000017C7D                 test    rcx, rcx
.text:0000000000017C80                 jz      loc_179FC
.text:0000000000017C86                 mov     r15, [rcx]
.text:0000000000017C89                 mov     rdx, [rbp+var_78]
.text:0000000000017C8D                 lea     rax, [r15+1]
.text:0000000000017C91                 cmp     rax, [rcx+8]
.text:0000000000017C95                 mov     [rcx], rax
.text:0000000000017C98                 jz      loc_1801D
.text:0000000000017C9E                 mov     rax, [rcx+10h]
.text:0000000000017CA2
.text:0000000000017CA2 loc_17CA2:                              ; CODE XREF: set_regs+847↓j
.text:0000000000017CA2                 lea     r15, [r15+r15*2]
.text:0000000000017CA6                 shl     r15, 4
.text:0000000000017CAA                 add     r15, rax
.text:0000000000017CAD                 mov     [r15+8], r14
.text:0000000000017CB1                 mov     r14, [rbp+n]
.text:0000000000017CB8                 mov     [r15], rdx
.text:0000000000017CBB                 mov     rdi, r14        ; size
.text:0000000000017CBE                 call    _malloc
.text:0000000000017CC3                 test    rax, rax
.text:0000000000017CC6                 mov     [r15+10h], rax
.text:0000000000017CCA                 jz      short loc_17CF2
.text:0000000000017CCC                 mov     rdx, r14        ; n
.text:0000000000017CCF                 mov     rsi, r13        ; src
.text:0000000000017CD2                 mov     rdi, rax        ; dest
.text:0000000000017CD5                 call    _memcpy
.text:0000000000017CDA                 mov     rsi, [rbp+var_A8]
.text:0000000000017CE1                 lea     rdi, [r15+18h]
.text:0000000000017CE5                 call    re_node_set_init_copy
.text:0000000000017CEA                 test    eax, eax
.text:0000000000017CEC                 jz      loc_179FC
.text:0000000000017CF2
.text:0000000000017CF2 loc_17CF2:                              ; CODE XREF: set_regs+4BA↑j
.text:0000000000017CF2                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000017CF6                 call    free
.text:0000000000017CFB                 cmp     [rbp+var_C9], 0
.text:0000000000017D02                 jnz     loc_1809B
.text:0000000000017D08
.text:0000000000017D08 loc_17D08:                              ; CODE XREF: set_regs+796↓j
.text:0000000000017D08                                         ; set_regs+885↓j
.text:0000000000017D08                 mov     rdi, [rbp+var_88]
.text:0000000000017D0F                 call    free_fail_stack_return_part_24
.text:0000000000017D14                 mov     eax, 0Ch
.text:0000000000017D19                 jmp     loc_17F29
.text:0000000000017D19 ; ---------------------------------------------------------------------------
.text:0000000000017D1E                 align 20h
.text:0000000000017D20
.text:0000000000017D20 loc_17D20:                              ; CODE XREF: set_regs+136↑j
.text:0000000000017D20                 cmp     [rbp+var_88], 0
.text:0000000000017D28                 jz      loc_1805C
.text:0000000000017D2E                 mov     rcx, [rbp+var_98]
.text:0000000000017D35                 test    rcx, rcx
.text:0000000000017D38                 jz      short loc_17D5A
.text:0000000000017D3A                 mov     rax, r13
.text:0000000000017D3D                 xor     edx, edx
.text:0000000000017D3F                 nop
.text:0000000000017D40
.text:0000000000017D40 loc_17D40:                              ; CODE XREF: set_regs+548↓j
.text:0000000000017D40                 cmp     qword ptr [rax], 0
.text:0000000000017D44                 js      short loc_17D4D
.text:0000000000017D46                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000017D4B                 jz      short loc_17DA0
.text:0000000000017D4D
.text:0000000000017D4D loc_17D4D:                              ; CODE XREF: set_regs+534↑j
.text:0000000000017D4D                 add     rdx, 1
.text:0000000000017D51                 add     rax, 10h
.text:0000000000017D55                 cmp     rcx, rdx
.text:0000000000017D58                 jnz     short loc_17D40
.text:0000000000017D5A
.text:0000000000017D5A loc_17D5A:                              ; CODE XREF: set_regs+528↑j
.text:0000000000017D5A                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000017D5E                 call    free
.text:0000000000017D63                 cmp     [rbp+var_C9], 0
.text:0000000000017D6A                 jnz     loc_180E4
.text:0000000000017D70
.text:0000000000017D70 loc_17D70:                              ; CODE XREF: set_regs+8E0↓j
.text:0000000000017D70                 mov     rdi, [rbp+var_88]
.text:0000000000017D77                 call    free_fail_stack_return_part_24
.text:0000000000017D7C                 xor     eax, eax
.text:0000000000017D7E                 jmp     loc_17F29
.text:0000000000017D7E ; ---------------------------------------------------------------------------
.text:0000000000017D83                 align 8
.text:0000000000017D88
.text:0000000000017D88 loc_17D88:                              ; CODE XREF: set_regs+3C3↑j
.text:0000000000017D88                 test    rcx, rcx
.text:0000000000017D8B                 jz      loc_17E40
.text:0000000000017D91
.text:0000000000017D91 loc_17D91:                              ; CODE XREF: set_regs+383↑j
.text:0000000000017D91                 mov     r15, [rbp+var_78]
.text:0000000000017D95                 jmp     loc_17C35
.text:0000000000017D95 ; ---------------------------------------------------------------------------
.text:0000000000017D9A                 align 20h
.text:0000000000017DA0
.text:0000000000017DA0 loc_17DA0:                              ; CODE XREF: set_regs+53B↑j
.text:0000000000017DA0                 mov     rdi, [rbp+var_88]
.text:0000000000017DA7                 mov     r9, [rbp+var_A8]
.text:0000000000017DAE                 mov     r8, r13
.text:0000000000017DB1                 mov     rcx, [rbp+var_98]
.text:0000000000017DB8                 mov     rdx, [rbp+var_B0]
.text:0000000000017DBF                 lea     rsi, [rdi+10h]
.text:0000000000017DC3                 call    pop_fail_stack_isra_25
.text:0000000000017DC8                 mov     r9, rax
.text:0000000000017DCB                 mov     rbx, rax
.text:0000000000017DCE                 mov     r15, rax
.text:0000000000017DD1                 shl     r9, 4
.text:0000000000017DD5                 jmp     loc_1794C
.text:0000000000017DDA ; ---------------------------------------------------------------------------
.text:0000000000017DDA
.text:0000000000017DDA loc_17DDA:                              ; CODE XREF: set_regs+1EF↑j
.text:0000000000017DDA                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000017DDE                 jz      loc_17F88
.text:0000000000017DE4                 nop     dword ptr [rax+00h]
.text:0000000000017DE8
.text:0000000000017DE8 loc_17DE8:                              ; CODE XREF: set_regs+188↑j
.text:0000000000017DE8                                         ; set_regs+2A8↑j
.text:0000000000017DE8                 cmp     [rbp+var_88], 0
.text:0000000000017DF0                 jz      loc_180AC
.text:0000000000017DF6
.text:0000000000017DF6 loc_17DF6:                              ; CODE XREF: set_regs+1B0↑j
.text:0000000000017DF6                                         ; set_regs+1C5↑j ...
.text:0000000000017DF6                 mov     rdi, [rbp+var_88]
.text:0000000000017DFD                 mov     rcx, [rbp+var_98]
.text:0000000000017E04                 lea     rdx, [rbp+var_78]
.text:0000000000017E08                 mov     r9, [rbp+var_A8]
.text:0000000000017E0F                 mov     r8, r13
.text:0000000000017E12                 lea     rsi, [rdi+10h]
.text:0000000000017E16                 call    pop_fail_stack_isra_25
.text:0000000000017E1B                 mov     rcx, [rbp+var_78]
.text:0000000000017E1F                 mov     rbx, rax
.text:0000000000017E22                 jmp     loc_1791B
.text:0000000000017E22 ; ---------------------------------------------------------------------------
.text:0000000000017E27                 align 10h
.text:0000000000017E30
.text:0000000000017E30 loc_17E30:                              ; CODE XREF: set_regs+460↑j
.text:0000000000017E30                 mov     rbx, r14
.text:0000000000017E33                 jmp     loc_179FC
.text:0000000000017E33 ; ---------------------------------------------------------------------------
.text:0000000000017E38                 align 20h
.text:0000000000017E40
.text:0000000000017E40 loc_17E40:                              ; CODE XREF: set_regs+3E0↑j
.text:0000000000017E40                                         ; set_regs+57B↑j
.text:0000000000017E40                 mov     rdi, [rbp+var_A8]
.text:0000000000017E47                 mov     rsi, rbx
.text:0000000000017E4A                 mov     [rbp+var_A0], r9
.text:0000000000017E51                 call    re_node_set_insert
.text:0000000000017E56                 test    al, al
.text:0000000000017E58                 jz      loc_17F88
.text:0000000000017E5E                 mov     rdx, [r14+28h]
.text:0000000000017E62                 lea     rax, [rbx+rbx*2]
.text:0000000000017E66                 mov     rcx, [rbp+var_78]
.text:0000000000017E6A                 lea     rax, [rdx+rax*8]
.text:0000000000017E6E                 mov     [rbp-0D8h], rcx
.text:0000000000017E75                 mov     rax, [rax+10h]
.text:0000000000017E79                 mov     rbx, [rax]
.text:0000000000017E7C                 mov     rax, [r12+0B8h]
.text:0000000000017E84                 mov     rax, [rax+rcx*8]
.text:0000000000017E88                 mov     rdx, rbx
.text:0000000000017E8B                 mov     rdi, [rax+10h]
.text:0000000000017E8F                 lea     rsi, [rax+18h]
.text:0000000000017E93                 call    re_node_set_contains_isra_3
.text:0000000000017E98                 test    rax, rax
.text:0000000000017E9B                 jnz     loc_179FC
.text:0000000000017EA1                 mov     r9, [rbp+var_A0]
.text:0000000000017EA8                 mov     rsi, [r14]
.text:0000000000017EAB                 mov     rcx, [rbp-0D8h]
.text:0000000000017EB2                 add     rsi, r9
.text:0000000000017EB5                 jmp     loc_1797D
.text:0000000000017EB5 ; ---------------------------------------------------------------------------
.text:0000000000017EBA                 align 20h
.text:0000000000017EC0
.text:0000000000017EC0 loc_17EC0:                              ; CODE XREF: set_regs+330↑j
.text:0000000000017EC0                 mov     rdx, [rbp+n]    ; n
.text:0000000000017EC7                 mov     rdi, [rbp+dest] ; dest
.text:0000000000017ECE                 mov     rsi, r13        ; src
.text:0000000000017ED1                 mov     [rax+8], rcx
.text:0000000000017ED5                 mov     [rbp-0D8h], r9
.text:0000000000017EDC                 mov     [rbp+var_A0], rcx
.text:0000000000017EE3                 call    _memcpy
.text:0000000000017EE8                 mov     rax, [r13+8]
.text:0000000000017EEC                 mov     rcx, [rbp+var_A0]
.text:0000000000017EF3                 mov     r9, [rbp-0D8h]
.text:0000000000017EFA                 jmp     loc_17939
.text:0000000000017EFA ; ---------------------------------------------------------------------------
.text:0000000000017EFF                 align 20h
.text:0000000000017F00
.text:0000000000017F00 loc_17F00:                              ; CODE XREF: set_regs+200↑j
.text:0000000000017F00                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000017F04                 call    free
.text:0000000000017F09                 cmp     [rbp+var_C9], 0
.text:0000000000017F10                 jnz     loc_17FEC
.text:0000000000017F16                 mov     rdi, [rbp+var_88]
.text:0000000000017F1D                 test    rdi, rdi
.text:0000000000017F20                 jz      short loc_17F27
.text:0000000000017F22
.text:0000000000017F22 loc_17F22:                              ; CODE XREF: set_regs+7F2↓j
.text:0000000000017F22                 call    free_fail_stack_return_part_24
.text:0000000000017F27
.text:0000000000017F27 loc_17F27:                              ; CODE XREF: set_regs+710↑j
.text:0000000000017F27                                         ; set_regs+7F8↓j ...
.text:0000000000017F27                 xor     eax, eax
.text:0000000000017F29
.text:0000000000017F29 loc_17F29:                              ; CODE XREF: set_regs+509↑j
.text:0000000000017F29                                         ; set_regs+56E↑j ...
.text:0000000000017F29                 mov     rbx, [rbp+var_38]
.text:0000000000017F2D                 xor     rbx, fs:28h
.text:0000000000017F36                 jnz     loc_180F5
.text:0000000000017F3C                 lea     rsp, [rbp-28h]
.text:0000000000017F40                 pop     rbx
.text:0000000000017F41                 pop     r12
.text:0000000000017F43                 pop     r13
.text:0000000000017F45                 pop     r14
.text:0000000000017F47                 pop     r15
.text:0000000000017F49                 pop     rbp
.text:0000000000017F4A                 retn
.text:0000000000017F4B ; ---------------------------------------------------------------------------
.text:0000000000017F4B
.text:0000000000017F4B loc_17F4B:                              ; CODE XREF: set_regs+348↑j
.text:0000000000017F4B                 mov     rdx, [rbp+n]    ; n
.text:0000000000017F52                 mov     rsi, rdi        ; src
.text:0000000000017F55                 mov     rdi, r13        ; dest
.text:0000000000017F58                 mov     [rbp-0D8h], rcx
.text:0000000000017F5F                 mov     [rbp+var_A0], r9
.text:0000000000017F66                 call    _memcpy
.text:0000000000017F6B                 mov     rax, [r13+8]
.text:0000000000017F6F                 mov     r9, [rbp+var_A0]
.text:0000000000017F76                 mov     rcx, [rbp-0D8h]
.text:0000000000017F7D                 jmp     loc_17939
.text:0000000000017F7D ; ---------------------------------------------------------------------------
.text:0000000000017F82                 align 8
.text:0000000000017F88
.text:0000000000017F88 loc_17F88:                              ; CODE XREF: set_regs+29B↑j
.text:0000000000017F88                                         ; set_regs+5CE↑j ...
.text:0000000000017F88                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000017F8C                 call    free
.text:0000000000017F91                 cmp     [rbp+var_C9], 0
.text:0000000000017F98                 jnz     loc_1809B
.text:0000000000017F9E
.text:0000000000017F9E loc_17F9E:                              ; CODE XREF: set_regs+897↓j
.text:0000000000017F9E                 cmp     [rbp+var_88], 0
.text:0000000000017FA6                 jnz     loc_17D08
.text:0000000000017FAC
.text:0000000000017FAC loc_17FAC:                              ; CODE XREF: set_regs+77↑j
.text:0000000000017FAC                                         ; set_regs+7D3↓j ...
.text:0000000000017FAC                 mov     eax, 0Ch
.text:0000000000017FB1                 jmp     loc_17F29
.text:0000000000017FB6 ; ---------------------------------------------------------------------------
.text:0000000000017FB6
.text:0000000000017FB6 loc_17FB6:                              ; CODE XREF: set_regs+B3↑j
.text:0000000000017FB6                 mov     rdi, [rbp+n]    ; size
.text:0000000000017FBD                 call    _malloc
.text:0000000000017FC2                 test    rax, rax
.text:0000000000017FC5                 mov     [rbp+dest], rax
.text:0000000000017FCC                 mov     [rbp+var_C9], 1
.text:0000000000017FD3                 jnz     loc_178E7
.text:0000000000017FD9                 mov     rdi, [rbp+var_88]
.text:0000000000017FE0                 test    rdi, rdi
.text:0000000000017FE3                 jz      short loc_17FAC
.text:0000000000017FE5                 call    free_fail_stack_return_part_24
.text:0000000000017FEA                 jmp     short loc_17FAC
.text:0000000000017FEC ; ---------------------------------------------------------------------------
.text:0000000000017FEC
.text:0000000000017FEC loc_17FEC:                              ; CODE XREF: set_regs+700↑j
.text:0000000000017FEC                 mov     rdi, [rbp+dest] ; ptr
.text:0000000000017FF3                 call    free
.text:0000000000017FF8                 mov     rdi, [rbp+var_88]
.text:0000000000017FFF                 test    rdi, rdi
.text:0000000000018002                 jnz     loc_17F22
.text:0000000000018008                 jmp     loc_17F27
.text:000000000001800D ; ---------------------------------------------------------------------------
.text:000000000001800D
.text:000000000001800D loc_1800D:                              ; CODE XREF: set_regs+55↑j
.text:000000000001800D                 mov     [rbp+var_88], 0
.text:0000000000018018                 jmp     loc_1788D
.text:000000000001801D ; ---------------------------------------------------------------------------
.text:000000000001801D
.text:000000000001801D loc_1801D:                              ; CODE XREF: set_regs+488↑j
.text:000000000001801D                 lea     rsi, [rax+rax*2]
.text:0000000000018021                 mov     rax, [rbp+var_88]
.text:0000000000018028                 mov     [rbp+var_A0], rdx
.text:000000000001802F                 shl     rsi, 5          ; size
.text:0000000000018033                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000018037                 call    _realloc
.text:000000000001803C                 test    rax, rax
.text:000000000001803F                 jz      short loc_18085
.text:0000000000018041                 mov     rcx, [rbp+var_88]
.text:0000000000018048                 mov     rdx, [rbp+var_A0]
.text:000000000001804F                 shl     qword ptr [rcx+8], 1
.text:0000000000018053                 mov     [rcx+10h], rax
.text:0000000000018057                 jmp     loc_17CA2
.text:000000000001805C ; ---------------------------------------------------------------------------
.text:000000000001805C
.text:000000000001805C loc_1805C:                              ; CODE XREF: set_regs+518↑j
.text:000000000001805C                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000018060                 call    free
.text:0000000000018065                 cmp     [rbp+var_C9], 0
.text:000000000001806C                 jz      loc_17F27
.text:0000000000018072                 mov     rdi, [rbp+dest] ; ptr
.text:0000000000018079                 call    free
.text:000000000001807E                 xor     eax, eax
.text:0000000000018080                 jmp     loc_17F29
.text:0000000000018085 ; ---------------------------------------------------------------------------
.text:0000000000018085
.text:0000000000018085 loc_18085:                              ; CODE XREF: set_regs+82F↑j
.text:0000000000018085                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000018089                 call    free
.text:000000000001808E                 cmp     [rbp+var_C9], 0
.text:0000000000018095                 jz      loc_17D08
.text:000000000001809B
.text:000000000001809B loc_1809B:                              ; CODE XREF: set_regs+4F2↑j
.text:000000000001809B                                         ; set_regs+788↑j
.text:000000000001809B                 mov     rdi, [rbp+dest] ; ptr
.text:00000000000180A2                 call    free
.text:00000000000180A7                 jmp     loc_17F9E
.text:00000000000180AC ; ---------------------------------------------------------------------------
.text:00000000000180AC
.text:00000000000180AC loc_180AC:                              ; CODE XREF: set_regs+5E0↑j
.text:00000000000180AC                 mov     rdi, [rbp+ptr]  ; ptr
.text:00000000000180B0                 call    free
.text:00000000000180B5                 cmp     [rbp+var_C9], 0
.text:00000000000180BC                 mov     eax, 1
.text:00000000000180C1                 jz      loc_17F29
.text:00000000000180C7                 mov     rdi, [rbp+dest] ; ptr
.text:00000000000180CE                 mov     dword ptr [rbp+var_88], eax
.text:00000000000180D4                 call    free
.text:00000000000180D9                 mov     eax, dword ptr [rbp+var_88]
.text:00000000000180DF                 jmp     loc_17F29
.text:00000000000180E4 ; ---------------------------------------------------------------------------
.text:00000000000180E4
.text:00000000000180E4 loc_180E4:                              ; CODE XREF: set_regs+55A↑j
.text:00000000000180E4                 mov     rdi, [rbp+dest] ; ptr
.text:00000000000180EB                 call    free
.text:00000000000180F0                 jmp     loc_17D70
.text:00000000000180F5 ; ---------------------------------------------------------------------------
.text:00000000000180F5
.text:00000000000180F5 loc_180F5:                              ; CODE XREF: set_regs+726↑j
.text:00000000000180F5                 call    ___stack_chk_fail
.text:00000000000180F5 ; } // starts at 17810
.text:00000000000180F5 set_regs        endp
.text:00000000000180F5
.text:00000000000180F5 ; ---------------------------------------------------------------------------
.text:00000000000180FA                 align 20h
.text:0000000000018100
.text:0000000000018100 ; =============== S U B R O U T I N E =======================================
.text:0000000000018100
.text:0000000000018100
.text:0000000000018100 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:0000000000018100                                         ; transit_state_bkref_isra_34+6FD↓p
.text:0000000000018100
.text:0000000000018100 var_40          = qword ptr -40h
.text:0000000000018100
.text:0000000000018100 ; __unwind {
.text:0000000000018100                 push    r15
.text:0000000000018102                 push    r14
.text:0000000000018104                 mov     r14, rcx
.text:0000000000018107                 push    r13
.text:0000000000018109                 push    r12
.text:000000000001810B                 mov     r13, rsi
.text:000000000001810E                 push    rbp
.text:000000000001810F                 push    rbx
.text:0000000000018110                 lea     rsi, [rdx+10h]
.text:0000000000018114                 mov     rbp, rdx
.text:0000000000018117                 mov     r9, r8
.text:000000000001811A                 mov     r12, r8
.text:000000000001811D                 sub     rsp, 20h
.text:0000000000018121                 mov     rcx, [rdx+8]
.text:0000000000018125                 mov     r8, r14
.text:0000000000018128                 push    8
.text:000000000001812A                 mov     rdx, [rdx]
.text:000000000001812D                 mov     rbx, rdi
.text:0000000000018130                 call    check_arrival
.text:0000000000018135                 test    eax, eax
.text:0000000000018137                 pop     rdx
.text:0000000000018138                 pop     rcx
.text:0000000000018139                 jz      short loc_18150
.text:000000000001813B
.text:000000000001813B loc_1813B:                              ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:000000000001813B                 add     rsp, 18h
.text:000000000001813F                 pop     rbx
.text:0000000000018140                 pop     rbp
.text:0000000000018141                 pop     r12
.text:0000000000018143                 pop     r13
.text:0000000000018145                 pop     r14
.text:0000000000018147                 pop     r15
.text:0000000000018149                 retn
.text:0000000000018149 ; ---------------------------------------------------------------------------
.text:000000000001814A                 align 10h
.text:0000000000018150
.text:0000000000018150 loc_18150:                              ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:0000000000018150                 mov     rax, [rbx+0C8h]
.text:0000000000018157                 mov     rdx, [rbx+0D0h]
.text:000000000001815E                 mov     r15, [rbp+8]
.text:0000000000018162                 mov     rcx, [r13+0]
.text:0000000000018166                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000001816D                 cmp     rax, rdx
.text:0000000000018170                 mov     rsi, r15
.text:0000000000018173                 jge     loc_18210
.text:0000000000018179
.text:0000000000018179 loc_18179:                              ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:0000000000018179                 lea     rdx, [rax+rax*4]
.text:000000000001817D                 shl     rdx, 3
.text:0000000000018181                 test    rax, rax
.text:0000000000018184                 jle     short loc_18191
.text:0000000000018186                 lea     r8, [rdi+rdx-28h]
.text:000000000001818B                 cmp     r12, [r8+8]
.text:000000000001818F                 jz      short loc_18200
.text:0000000000018191
.text:0000000000018191 loc_18191:                              ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:0000000000018191                                         ; get_subexp_sub_isra_32+105↓j
.text:0000000000018191                 add     rdi, rdx
.text:0000000000018194                 xor     edx, edx
.text:0000000000018196                 cmp     r15, rcx
.text:0000000000018199                 setz    dl
.text:000000000001819C                 add     rax, 1
.text:00000000000181A0                 mov     [rdi], r14
.text:00000000000181A3                 neg     edx
.text:00000000000181A5                 mov     [rdi+8], r12
.text:00000000000181A9                 mov     [rdi+10h], rcx
.text:00000000000181AD                 mov     [rdi+22h], dx
.text:00000000000181B1                 mov     [rdi+18h], r15
.text:00000000000181B5                 mov     [rbx+0C8h], rax
.text:00000000000181BC                 mov     byte ptr [rdi+20h], 0
.text:00000000000181C0                 mov     rax, r15
.text:00000000000181C3                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:00000000000181CA                 sub     rax, rcx
.text:00000000000181CD                 cmp     rdx, rax
.text:00000000000181D0                 jge     short loc_181DC
.text:00000000000181D2                 sub     r15d, ecx
.text:00000000000181D5                 mov     [rbx+0E0h], r15d
.text:00000000000181DC
.text:00000000000181DC loc_181DC:                              ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:00000000000181DC                 add     rsi, r12
.text:00000000000181DF                 sub     rsi, [r13+0]
.text:00000000000181E3                 add     rsp, 18h
.text:00000000000181E7                 mov     rdi, rbx
.text:00000000000181EA                 pop     rbx
.text:00000000000181EB                 pop     rbp
.text:00000000000181EC                 pop     r12
.text:00000000000181EE                 pop     r13
.text:00000000000181F0                 pop     r14
.text:00000000000181F2                 pop     r15
.text:00000000000181F4                 jmp     clean_state_log_if_needed
.text:00000000000181F4 ; ---------------------------------------------------------------------------
.text:00000000000181F9                 align 20h
.text:0000000000018200
.text:0000000000018200 loc_18200:                              ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:0000000000018200                 mov     byte ptr [r8+20h], 1
.text:0000000000018205                 jmp     short loc_18191
.text:0000000000018205 ; ---------------------------------------------------------------------------
.text:0000000000018207                 align 10h
.text:0000000000018210
.text:0000000000018210 loc_18210:                              ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:0000000000018210                 lea     rsi, [rdx+rdx*4]
.text:0000000000018214                 mov     [rsp+48h+var_40], rcx
.text:0000000000018219                 shl     rsi, 4          ; size
.text:000000000001821D                 call    _realloc
.text:0000000000018222                 test    rax, rax
.text:0000000000018225                 mov     rcx, [rsp+48h+var_40]
.text:000000000001822A                 jz      short loc_18280
.text:000000000001822C                 mov     rsi, [rbx+0C8h]
.text:0000000000018233                 mov     rdx, [rbx+0D0h]
.text:000000000001823A                 mov     [rbx+0D8h], rax
.text:0000000000018241                 mov     [rsp+48h+var_40], rcx
.text:0000000000018246                 lea     rsi, [rsi+rsi*4]
.text:000000000001824A                 lea     rdx, [rdx+rdx*4]
.text:000000000001824E                 lea     rdi, [rax+rsi*8] ; s
.text:0000000000018252                 shl     rdx, 3          ; n
.text:0000000000018256                 xor     esi, esi        ; c
.text:0000000000018258                 call    _memset
.text:000000000001825D                 shl     qword ptr [rbx+0D0h], 1
.text:0000000000018264                 mov     rax, [rbx+0C8h]
.text:000000000001826B                 mov     rdi, [rbx+0D8h]
.text:0000000000018272                 mov     rsi, [rbp+8]
.text:0000000000018276                 mov     rcx, [rsp+48h+var_40]
.text:000000000001827B                 jmp     loc_18179
.text:0000000000018280 ; ---------------------------------------------------------------------------
.text:0000000000018280
.text:0000000000018280 loc_18280:                              ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:0000000000018280                 mov     rdi, [rbx+0D8h] ; ptr
.text:0000000000018287                 call    free
.text:000000000001828C                 mov     eax, 0Ch
.text:0000000000018291                 jmp     loc_1813B
.text:0000000000018291 ; } // starts at 18100
.text:0000000000018291 get_subexp_sub_isra_32 endp
.text:0000000000018291
.text:0000000000018291 ; ---------------------------------------------------------------------------
.text:0000000000018296                 align 20h
.text:00000000000182A0
.text:00000000000182A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000182A0
.text:00000000000182A0
.text:00000000000182A0 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:00000000000182A0                                         ; merge_state_with_log+1C1↓p ...
.text:00000000000182A0
.text:00000000000182A0 var_E8          = qword ptr -0E8h
.text:00000000000182A0 var_E0          = qword ptr -0E0h
.text:00000000000182A0 var_D8          = qword ptr -0D8h
.text:00000000000182A0 var_D0          = qword ptr -0D0h
.text:00000000000182A0 var_C8          = qword ptr -0C8h
.text:00000000000182A0 var_C0          = qword ptr -0C0h
.text:00000000000182A0 var_B8          = qword ptr -0B8h
.text:00000000000182A0 var_B0          = qword ptr -0B0h
.text:00000000000182A0 var_A8          = qword ptr -0A8h
.text:00000000000182A0 var_A0          = qword ptr -0A0h
.text:00000000000182A0 var_98          = qword ptr -98h
.text:00000000000182A0 var_90          = qword ptr -90h
.text:00000000000182A0 var_88          = qword ptr -88h
.text:00000000000182A0 var_80          = qword ptr -80h
.text:00000000000182A0 var_78          = qword ptr -78h
.text:00000000000182A0 var_70          = qword ptr -70h
.text:00000000000182A0 var_5C          = byte ptr -5Ch
.text:00000000000182A0 var_58          = byte ptr -58h
.text:00000000000182A0 ptr             = qword ptr -48h
.text:00000000000182A0 var_40          = qword ptr -40h
.text:00000000000182A0
.text:00000000000182A0 ; __unwind {
.text:00000000000182A0                 push    r15
.text:00000000000182A2                 push    r14
.text:00000000000182A4                 push    r13
.text:00000000000182A6                 push    r12
.text:00000000000182A8                 push    rbp
.text:00000000000182A9                 push    rbx
.text:00000000000182AA                 sub     rsp, 0B8h
.text:00000000000182B1                 mov     r15, [rdi+48h]
.text:00000000000182B5                 mov     rax, fs:28h
.text:00000000000182BE                 mov     [rsp+0E8h+var_40], rax
.text:00000000000182C6                 xor     eax, eax
.text:00000000000182C8                 cmp     qword ptr [rsi], 0
.text:00000000000182CC                 mov     rax, [rdi+98h]
.text:00000000000182D3                 mov     [rsp+0E8h+var_A0], rsi
.text:00000000000182D8                 mov     [rsp+0E8h+var_A8], rdx
.text:00000000000182DD                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000182E2                 jle     loc_18610
.text:00000000000182E8                 lea     rax, ds:0[r15*8]
.text:00000000000182F0                 mov     r14, rdi
.text:00000000000182F3                 mov     [rsp+0E8h+var_E8], 0
.text:00000000000182FB                 mov     [rsp+0E8h+var_E0], r15
.text:0000000000018300                 mov     [rsp+0E8h+var_88], rax
.text:0000000000018305                 lea     rax, [rsp+0E8h+var_58]
.text:000000000001830D                 mov     [rsp+0E8h+var_80], rax
.text:0000000000018312                 lea     rax, [rsp+0E8h+var_5C]
.text:000000000001831A                 mov     [rsp+0E8h+var_70], rax
.text:000000000001831F                 jmp     short loc_18367
.text:000000000001831F ; ---------------------------------------------------------------------------
.text:0000000000018321                 align 8
.text:0000000000018328
.text:0000000000018328 loc_18328:                              ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:0000000000018328                 test    al, 1
.text:000000000001832A                 jz      short loc_18350
.text:000000000001832C                 and     edx, 8
.text:000000000001832F                 jnz     short loc_18350
.text:0000000000018331
.text:0000000000018331 loc_18331:                              ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:0000000000018331                                         ; transit_state_bkref_isra_34+12E↓j
.text:0000000000018331                 test    cl, 20h
.text:0000000000018334                 jz      short loc_1833A
.text:0000000000018336                 test    al, 2
.text:0000000000018338                 jz      short loc_18350
.text:000000000001833A
.text:000000000001833A loc_1833A:                              ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:000000000001833A                 and     ecx, 80h
.text:0000000000018340                 jz      loc_183E0
.text:0000000000018346                 test    al, 8
.text:0000000000018348                 jnz     loc_183E0
.text:000000000001834E                 xchg    ax, ax
.text:0000000000018350
.text:0000000000018350 loc_18350:                              ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:0000000000018350                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:0000000000018350                 mov     rdi, [rsp+0E8h+var_A0]
.text:0000000000018355                 add     [rsp+0E8h+var_E8], 1
.text:000000000001835A                 mov     rax, [rsp+0E8h+var_E8]
.text:000000000001835E                 cmp     rax, [rdi]
.text:0000000000018361                 jge     loc_18610
.text:0000000000018367
.text:0000000000018367 loc_18367:                              ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:0000000000018367                 mov     rax, [rsp+0E8h+var_A8]
.text:000000000001836C                 mov     rdi, [rsp+0E8h+var_E8]
.text:0000000000018370                 mov     rax, [rax]
.text:0000000000018373                 mov     r13, [rax+rdi*8]
.text:0000000000018377                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000001837C                 mov     rax, [rdi]
.text:000000000001837F                 mov     rbx, r13
.text:0000000000018382                 shl     rbx, 4
.text:0000000000018386                 add     rax, rbx
.text:0000000000018389                 cmp     byte ptr [rax+8], 4
.text:000000000001838D                 jnz     short loc_18350
.text:000000000001838F                 mov     ebp, [rax+8]
.text:0000000000018392                 test    ebp, 3FF00h
.text:0000000000018398                 jz      short loc_183E0
.text:000000000001839A                 mov     edx, [r14+0A0h]
.text:00000000000183A1                 mov     rsi, [rsp+0E8h+var_E0]
.text:00000000000183A6                 mov     rdi, r14
.text:00000000000183A9                 call    re_string_context_at
.text:00000000000183AE                 mov     edx, ebp
.text:00000000000183B0                 shr     edx, 8
.text:00000000000183B3                 mov     ecx, edx
.text:00000000000183B5                 and     cx, 3FFh
.text:00000000000183BA                 test    dl, 4
.text:00000000000183BD                 jnz     loc_18328
.text:00000000000183C3                 and     edx, 8
.text:00000000000183C6                 jz      loc_18331
.text:00000000000183CC                 test    al, 1
.text:00000000000183CE                 jz      loc_18331
.text:00000000000183D4                 jmp     loc_18350
.text:00000000000183D4 ; ---------------------------------------------------------------------------
.text:00000000000183D9                 align 20h
.text:00000000000183E0
.text:00000000000183E0 loc_183E0:                              ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:00000000000183E0                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:00000000000183E0                 mov     rdi, [r14+0C8h]
.text:00000000000183E7                 mov     rax, [r14+98h]
.text:00000000000183EE                 xor     ecx, ecx
.text:00000000000183F0                 mov     r10, [r14+8]
.text:00000000000183F4                 mov     r9, [rsp+0E8h+var_E0]
.text:00000000000183F9                 mov     [rsp+0E8h+var_78], rdi
.text:00000000000183FE                 mov     [rsp+0E8h+var_98], rax
.text:0000000000018403
.text:0000000000018403 loc_18403:                              ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:0000000000018403                 cmp     rcx, rdi
.text:0000000000018406                 jge     short loc_1845B
.text:0000000000018408                 lea     rax, [rcx+rdi]
.text:000000000001840C                 mov     r11, [r14+0D8h]
.text:0000000000018413                 mov     rsi, rax
.text:0000000000018416                 shr     rsi, 3Fh
.text:000000000001841A                 add     rsi, rax
.text:000000000001841D                 sar     rsi, 1
.text:0000000000018420                 lea     rax, [rsi+rsi*4]
.text:0000000000018424                 cmp     r9, [r11+rax*8+8]
.text:0000000000018429                 jle     short loc_18456
.text:000000000001842B                 jmp     loc_185F8
.text:0000000000018430 ; ---------------------------------------------------------------------------
.text:0000000000018430
.text:0000000000018430 loc_18430:                              ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:0000000000018430                 lea     rdx, [rsi+rcx]
.text:0000000000018434                 mov     rax, rdx
.text:0000000000018437                 shr     rax, 3Fh
.text:000000000001843B                 add     rax, rdx
.text:000000000001843E                 sar     rax, 1
.text:0000000000018441                 lea     rdx, [rax+rax*4]
.text:0000000000018445                 mov     r8, rax
.text:0000000000018448                 cmp     r9, [r11+rdx*8+8]
.text:000000000001844D                 jg      loc_18600
.text:0000000000018453                 mov     rsi, rax
.text:0000000000018456
.text:0000000000018456 loc_18456:                              ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:0000000000018456                 cmp     rsi, rcx
.text:0000000000018459                 jg      short loc_18430
.text:000000000001845B
.text:000000000001845B loc_1845B:                              ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:000000000001845B                 cmp     [rsp+0E8h+var_78], rcx
.text:0000000000018460                 jle     short loc_18486
.text:0000000000018462                 mov     rdx, [r14+0D8h]
.text:0000000000018469                 lea     rax, [rcx+rcx*4]
.text:000000000001846D                 mov     rdi, [rsp+0E8h+var_E0]
.text:0000000000018472                 lea     rax, [rdx+rax*8]
.text:0000000000018476                 cmp     [rax+8], rdi
.text:000000000001847A                 jnz     short loc_18486
.text:000000000001847C                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000018480                 jnz     loc_18656
.text:0000000000018486
.text:0000000000018486 loc_18486:                              ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:0000000000018486                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:0000000000018486                 mov     rax, [rsp+0E8h+var_98]
.text:000000000001848B                 cmp     qword ptr [r14+0E8h], 0
.text:0000000000018493                 mov     rdx, [rax]
.text:0000000000018496                 mov     rax, [rdx+rbx]
.text:000000000001849A                 mov     [rsp+0E8h+var_90], rax
.text:000000000001849F                 jle     loc_1865B
.text:00000000000184A5                 mov     [rsp+0E8h+var_B8], r13
.text:00000000000184AA                 mov     [rsp+0E8h+var_C0], 0
.text:00000000000184B3                 mov     r13, r10
.text:00000000000184B6
.text:00000000000184B6 loc_184B6:                              ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:00000000000184B6                 mov     rax, [r14+0F8h]
.text:00000000000184BD                 mov     rbx, [rsp+0E8h+var_C0]
.text:00000000000184C2                 mov     rdi, [rsp+0E8h+var_90]
.text:00000000000184C7                 mov     rbx, [rax+rbx*8]
.text:00000000000184CB                 mov     rax, [rbx+8]
.text:00000000000184CF                 shl     rax, 4
.text:00000000000184D3                 cmp     rdi, [rdx+rax]
.text:00000000000184D7                 jz      short loc_18500
.text:00000000000184D9
.text:00000000000184D9 loc_184D9:                              ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:00000000000184D9                                         ; transit_state_bkref_isra_34+725↓j ...
.text:00000000000184D9                 add     [rsp+0E8h+var_C0], 1
.text:00000000000184DF                 mov     rax, [rsp+0E8h+var_C0]
.text:00000000000184E4                 cmp     rax, [r14+0E8h]
.text:00000000000184EB                 jge     loc_18B61
.text:00000000000184F1                 mov     rax, [rsp+0E8h+var_98]
.text:00000000000184F6                 mov     rdx, [rax]
.text:00000000000184F9                 jmp     short loc_184B6
.text:00000000000184F9 ; ---------------------------------------------------------------------------
.text:00000000000184FB                 align 20h
.text:0000000000018500
.text:0000000000018500 loc_18500:                              ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:0000000000018500                 cmp     qword ptr [rbx+20h], 0
.text:0000000000018505                 mov     r11, [rbx]
.text:0000000000018508                 jle     loc_18B72
.text:000000000001850E                 mov     rcx, [rsp+0E8h+var_E0]
.text:0000000000018513                 mov     r8, r13
.text:0000000000018516                 xor     ebp, ebp
.text:0000000000018518                 mov     r13, rbx
.text:000000000001851B                 mov     rbx, rcx
.text:000000000001851E                 jmp     short loc_1858C
.text:0000000000018520 ; ---------------------------------------------------------------------------
.text:0000000000018520
.text:0000000000018520 loc_18520:                              ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:0000000000018520                                         ; transit_state_bkref_isra_34+34C↓j
.text:0000000000018520                 lea     rsi, [r8+r11]   ; s2
.text:0000000000018524                 lea     rdi, [r8+rbx]   ; s1
.text:0000000000018528                 mov     [rsp+0E8h+var_C8], r9
.text:000000000001852D                 mov     [rsp+0E8h+var_D0], r11
.text:0000000000018532                 mov     [rsp+0E8h+var_D8], r8
.text:0000000000018537                 call    _memcmp
.text:000000000001853C                 test    eax, eax
.text:000000000001853E                 mov     r8, [rsp+0E8h+var_D8]
.text:0000000000018543                 mov     r11, [rsp+0E8h+var_D0]
.text:0000000000018548                 mov     r9, [rsp+0E8h+var_C8]
.text:000000000001854D                 jnz     loc_18A18
.text:0000000000018553
.text:0000000000018553 loc_18553:                              ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:0000000000018553                 mov     r8, [rsp+0E8h+var_E0]
.text:0000000000018558                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000001855D                 mov     rdx, r9
.text:0000000000018560                 mov     rsi, r13
.text:0000000000018563                 mov     rdi, r14
.text:0000000000018566                 call    get_subexp_sub_isra_32
.text:000000000001856B                 cmp     eax, 1
.text:000000000001856E                 mov     r8, [r14+8]
.text:0000000000018572                 ja      loc_18618
.text:0000000000018578                 add     rbp, 1
.text:000000000001857C                 cmp     rbp, [r13+20h]
.text:0000000000018580                 mov     r11, r15
.text:0000000000018583                 mov     rbx, r12
.text:0000000000018586                 jge     loc_18838
.text:000000000001858C
.text:000000000001858C loc_1858C:                              ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:000000000001858C                 mov     rax, [r13+28h]
.text:0000000000018590                 mov     r9, [rax+rbp*8]
.text:0000000000018594                 mov     r15, [r9+8]
.text:0000000000018598                 mov     rdx, r15
.text:000000000001859B                 sub     rdx, r11        ; n
.text:000000000001859E                 test    rdx, rdx
.text:00000000000185A1                 lea     r12, [rdx+rbx]
.text:00000000000185A5                 jle     short loc_18553
.text:00000000000185A7                 cmp     [r14+30h], r12
.text:00000000000185AB                 jge     loc_18520
.text:00000000000185B1                 cmp     [r14+58h], r12
.text:00000000000185B5                 mov     [rsp+0E8h+var_D0], rdx
.text:00000000000185BA                 mov     [rsp+0E8h+var_D8], r9
.text:00000000000185BF                 jl      loc_18A18
.text:00000000000185C5                 mov     rsi, r12
.text:00000000000185C8                 mov     rdi, r14
.text:00000000000185CB                 mov     [rsp+0E8h+var_C8], r11
.text:00000000000185D0                 call    clean_state_log_if_needed
.text:00000000000185D5                 test    eax, eax
.text:00000000000185D7                 jnz     short loc_18618
.text:00000000000185D9                 mov     r8, [r14+8]
.text:00000000000185DD                 mov     rdx, [rsp+0E8h+var_D0]
.text:00000000000185E2                 mov     r9, [rsp+0E8h+var_D8]
.text:00000000000185E7                 mov     r11, [rsp+0E8h+var_C8]
.text:00000000000185EC                 jmp     loc_18520
.text:00000000000185EC ; ---------------------------------------------------------------------------
.text:00000000000185F1                 align 8
.text:00000000000185F8
.text:00000000000185F8 loc_185F8:                              ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:00000000000185F8                 mov     r8, rsi
.text:00000000000185FB                 mov     rsi, rdi
.text:00000000000185FE                 xchg    ax, ax
.text:0000000000018600
.text:0000000000018600 loc_18600:                              ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:0000000000018600                 lea     rcx, [r8+1]
.text:0000000000018604                 mov     rdi, rsi
.text:0000000000018607                 jmp     loc_18403
.text:0000000000018607 ; ---------------------------------------------------------------------------
.text:000000000001860C                 align 10h
.text:0000000000018610
.text:0000000000018610 loc_18610:                              ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:0000000000018610                                         ; transit_state_bkref_isra_34+C1↑j
.text:0000000000018610                 xor     eax, eax
.text:0000000000018612                 nop     word ptr [rax+rax+00h]
.text:0000000000018618
.text:0000000000018618 loc_18618:                              ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:0000000000018618                                         ; transit_state_bkref_isra_34+337↑j ...
.text:0000000000018618                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000018620                 xor     rbx, fs:28h
.text:0000000000018629                 jnz     loc_18B7C
.text:000000000001862F                 add     rsp, 0B8h
.text:0000000000018636                 pop     rbx
.text:0000000000018637                 pop     rbp
.text:0000000000018638                 pop     r12
.text:000000000001863A                 pop     r13
.text:000000000001863C                 pop     r14
.text:000000000001863E                 pop     r15
.text:0000000000018640                 retn
.text:0000000000018640 ; ---------------------------------------------------------------------------
.text:0000000000018641                 align 8
.text:0000000000018648
.text:0000000000018648 loc_18648:                              ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:0000000000018648                 add     rax, 28h ; '('
.text:000000000001864C                 cmp     byte ptr [rax-8], 0
.text:0000000000018650                 jz      loc_18486
.text:0000000000018656
.text:0000000000018656 loc_18656:                              ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:0000000000018656                 cmp     r13, [rax]
.text:0000000000018659                 jnz     short loc_18648
.text:000000000001865B
.text:000000000001865B loc_1865B:                              ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:000000000001865B                 mov     rax, [rsp+0E8h+var_78]
.text:0000000000018660
.text:0000000000018660 loc_18660:                              ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:0000000000018660                 cmp     [rsp+0E8h+var_78], rax
.text:0000000000018665                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:0000000000018670                 jge     loc_18350
.text:0000000000018676                 lea     rax, ds:0[r13*8]
.text:000000000001867E                 mov     r12, [rsp+0E8h+var_78]
.text:0000000000018683                 mov     rbp, [rsp+0E8h+var_B0]
.text:0000000000018688                 mov     [rsp+0E8h+var_98], rax
.text:000000000001868D                 lea     rax, [r13+r13*2+0]
.text:0000000000018692                 lea     r8, [r12+r12*4]
.text:0000000000018696                 shl     rax, 3
.text:000000000001869A                 mov     [rsp+0E8h+var_90], rax
.text:000000000001869F                 lea     r15, ds:0[r8*8]
.text:00000000000186A7                 jmp     loc_187DD
.text:00000000000186A7 ; ---------------------------------------------------------------------------
.text:00000000000186AC                 align 10h
.text:00000000000186B0
.text:00000000000186B0 loc_186B0:                              ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:00000000000186B0                 mov     rcx, [rbp+28h]
.text:00000000000186B4                 mov     rdi, [rsp+0E8h+var_90]
.text:00000000000186B9                 mov     rcx, [rcx+rdi+10h]
.text:00000000000186BE                 mov     rcx, [rcx]
.text:00000000000186C1                 lea     rcx, [rcx+rcx*2]
.text:00000000000186C5                 lea     rcx, [rdx+rcx*8]
.text:00000000000186C9                 mov     [rsp+0E8h+var_D0], rcx
.text:00000000000186CE
.text:00000000000186CE loc_186CE:                              ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:00000000000186CE                 add     rbx, [rsp+0E8h+var_E0]
.text:00000000000186D3                 mov     edx, [r14+0A0h]
.text:00000000000186DA                 mov     rdi, r14
.text:00000000000186DD                 sub     rbx, rax
.text:00000000000186E0                 lea     rsi, [rbx-1]
.text:00000000000186E4                 call    re_string_context_at
.text:00000000000186E9                 mov     rsi, [rsp+0E8h+var_88]
.text:00000000000186EE                 mov     ecx, eax
.text:00000000000186F0                 mov     rax, [r14+0B8h]
.text:00000000000186F7                 lea     r10, ds:0[rbx*8]
.text:00000000000186FF                 mov     [rsp+0E8h+var_D8], 0
.text:0000000000018708                 lea     r11, [rax+r10]
.text:000000000001870C                 mov     rax, [rax+rsi]
.text:0000000000018710                 mov     rdx, [r11]
.text:0000000000018713                 test    rax, rax
.text:0000000000018716                 jz      short loc_18721
.text:0000000000018718                 mov     rax, [rax+10h]
.text:000000000001871C                 mov     [rsp+0E8h+var_D8], rax
.text:0000000000018721
.text:0000000000018721 loc_18721:                              ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:0000000000018721                 test    rdx, rdx
.text:0000000000018724                 jz      loc_18A40
.text:000000000001872A                 mov     rsi, [rdx+50h]
.text:000000000001872E                 mov     rdi, [rsp+0E8h+var_80]
.text:0000000000018733                 mov     rdx, [rsp+0E8h+var_D0]
.text:0000000000018738                 mov     [rsp+0E8h+var_B8], r10
.text:000000000001873D                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:0000000000018741                 call    re_node_set_init_union
.text:0000000000018746                 test    eax, eax
.text:0000000000018748                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000001874F                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:0000000000018753                 mov     r10, [rsp+0E8h+var_B8]
.text:0000000000018758                 jnz     loc_18AE8
.text:000000000001875E                 add     r10, [r14+0B8h]
.text:0000000000018765                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000001876A                 mov     rsi, rbp
.text:000000000001876D                 mov     rdi, [rsp+0E8h+var_70]
.text:0000000000018772                 mov     [rsp+0E8h+var_C0], r10
.text:0000000000018777                 call    re_acquire_state_context
.text:000000000001877C                 mov     r10, [rsp+0E8h+var_C0]
.text:0000000000018781                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:0000000000018789                 mov     [r10], rax
.text:000000000001878C                 call    free
.text:0000000000018791                 mov     rdx, [r14+0B8h]
.text:0000000000018798                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000001879D                 jz      loc_18A71
.text:00000000000187A3
.text:00000000000187A3 loc_187A3:                              ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:00000000000187A3                                         ; transit_state_bkref_isra_34+7DA↓j
.text:00000000000187A3                 cmp     [rsp+0E8h+var_C8], 0
.text:00000000000187A9                 jnz     short loc_187C8
.text:00000000000187AB                 mov     rax, [rsp+0E8h+var_88]
.text:00000000000187B0                 mov     rbx, [rsp+0E8h+var_D8]
.text:00000000000187B5                 mov     rax, [rdx+rax]
.text:00000000000187B9                 cmp     [rax+10h], rbx
.text:00000000000187BD                 jg      loc_18A88
.text:00000000000187C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000187C8
.text:00000000000187C8 loc_187C8:                              ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:00000000000187C8                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:00000000000187C8                 add     r12, 1
.text:00000000000187CC                 add     r15, 28h ; '('
.text:00000000000187D0                 cmp     r12, [r14+0C8h]
.text:00000000000187D7                 jge     loc_18350
.text:00000000000187DD
.text:00000000000187DD loc_187DD:                              ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:00000000000187DD                 mov     rax, [r14+0D8h]
.text:00000000000187E4                 add     rax, r15
.text:00000000000187E7                 cmp     r13, [rax]
.text:00000000000187EA                 jnz     short loc_187C8
.text:00000000000187EC                 mov     rdi, [rsp+0E8h+var_E0]
.text:00000000000187F1                 cmp     rdi, [rax+8]
.text:00000000000187F5                 jnz     short loc_187C8
.text:00000000000187F7                 mov     rbx, [rax+18h]
.text:00000000000187FB                 mov     rax, [rax+10h]
.text:00000000000187FF                 mov     rdx, [rbp+30h]
.text:0000000000018803                 mov     rcx, rbx
.text:0000000000018806                 sub     rcx, rax
.text:0000000000018809                 mov     [rsp+0E8h+var_C8], rcx
.text:000000000001880E                 jz      loc_186B0
.text:0000000000018814                 mov     rcx, [rbp+18h]
.text:0000000000018818                 mov     rdi, [rsp+0E8h+var_98]
.text:000000000001881D                 mov     rcx, [rcx+rdi]
.text:0000000000018821                 lea     rcx, [rcx+rcx*2]
.text:0000000000018825                 lea     rcx, [rdx+rcx*8]
.text:0000000000018829                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000001882E                 jmp     loc_186CE
.text:000000000001882E ; ---------------------------------------------------------------------------
.text:0000000000018833                 align 8
.text:0000000000018838
.text:0000000000018838 loc_18838:                              ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:0000000000018838                 mov     rbx, r13
.text:000000000001883B                 mov     r13, r8
.text:000000000001883E
.text:000000000001883E loc_1883E:                              ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:000000000001883E                 lea     r11, [r15+1]
.text:0000000000018842
.text:0000000000018842 loc_18842:                              ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:0000000000018842                                         ; transit_state_bkref_isra_34+8D7↓j
.text:0000000000018842                 cmp     [rsp+0E8h+var_E0], r11
.text:0000000000018847                 jl      loc_184D9
.text:000000000001884D                 mov     rax, r12
.text:0000000000018850                 lea     r15, ds:0[r11*8]
.text:0000000000018858                 mov     r12, rbx
.text:000000000001885B                 mov     rbx, r11
.text:000000000001885E                 mov     r11, r13
.text:0000000000018861                 mov     r13, rax
.text:0000000000018864                 nop     dword ptr [rax+00h]
.text:0000000000018868
.text:0000000000018868 loc_18868:                              ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:0000000000018868                 mov     rax, rbx
.text:000000000001886B                 sub     rax, [r12]
.text:000000000001886F                 test    rax, rax
.text:0000000000018872                 jle     short loc_18895
.text:0000000000018874                 cmp     [r14+30h], r13
.text:0000000000018878                 jle     loc_18B01
.text:000000000001887E
.text:000000000001887E loc_1887E:                              ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000001887E                 movzx   ecx, byte ptr [r11+rbx-1]
.text:0000000000018884                 lea     rax, [r13+1]
.text:0000000000018888                 cmp     [r11+r13], cl
.text:000000000001888C                 jnz     loc_189C2
.text:0000000000018892                 mov     r13, rax
.text:0000000000018895
.text:0000000000018895 loc_18895:                              ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:0000000000018895                 mov     rax, [r14+0B8h]
.text:000000000001889C                 mov     rax, [rax+r15]
.text:00000000000188A0                 test    rax, rax
.text:00000000000188A3                 jz      loc_189AF
.text:00000000000188A9                 mov     rcx, [rax+10h]
.text:00000000000188AD                 test    rcx, rcx
.text:00000000000188B0                 jle     loc_189AF
.text:00000000000188B6                 mov     rdi, [rax+18h]
.text:00000000000188BA                 mov     rax, [rsp+0E8h+var_98]
.text:00000000000188BF                 xor     edx, edx
.text:00000000000188C1                 mov     r8, [rsp+0E8h+var_90]
.text:00000000000188C6                 mov     rsi, [rax]
.text:00000000000188C9                 jmp     short loc_188DD
.text:00000000000188C9 ; ---------------------------------------------------------------------------
.text:00000000000188CB                 align 10h
.text:00000000000188D0
.text:00000000000188D0 loc_188D0:                              ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:00000000000188D0                                         ; transit_state_bkref_isra_34+654↓j
.text:00000000000188D0                 add     rdx, 1
.text:00000000000188D4                 cmp     rcx, rdx
.text:00000000000188D7                 jz      loc_189AF
.text:00000000000188DD
.text:00000000000188DD loc_188DD:                              ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:00000000000188DD                 mov     rbp, [rdi+rdx*8]
.text:00000000000188E1                 mov     rax, rbp
.text:00000000000188E4                 shl     rax, 4
.text:00000000000188E8                 add     rax, rsi
.text:00000000000188EB                 cmp     byte ptr [rax+8], 9
.text:00000000000188EF                 jnz     short loc_188D0
.text:00000000000188F1                 cmp     r8, [rax]
.text:00000000000188F4                 jnz     short loc_188D0
.text:00000000000188F6                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000188FA                 jz      loc_189AF
.text:0000000000018900                 mov     rsi, [r12+10h]
.text:0000000000018905                 mov     rcx, [r12]
.text:0000000000018909                 test    rsi, rsi
.text:000000000001890C                 jz      loc_189D0
.text:0000000000018912
.text:0000000000018912 loc_18912:                              ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:0000000000018912                 mov     [rsp+0E8h+var_D8], r11
.text:0000000000018917                 mov     rdx, [r12+8]
.text:000000000001891C                 sub     rsp, 8
.text:0000000000018920                 push    9
.text:0000000000018922                 mov     r9, rbx
.text:0000000000018925                 mov     r8, rbp
.text:0000000000018928                 mov     rdi, r14
.text:000000000001892B                 call    check_arrival
.text:0000000000018930                 pop     rdx
.text:0000000000018931                 cmp     eax, 1
.text:0000000000018934                 pop     rcx
.text:0000000000018935                 mov     r11, [rsp+0E8h+var_D8]
.text:000000000001893A                 jz      short loc_189AF
.text:000000000001893C                 test    eax, eax
.text:000000000001893E                 jnz     loc_18618
.text:0000000000018944                 mov     rax, [r12+20h]
.text:0000000000018949                 cmp     rax, [r12+18h]
.text:000000000001894E                 jz      loc_18B28
.text:0000000000018954
.text:0000000000018954 loc_18954:                              ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:0000000000018954                 mov     esi, 28h ; '('  ; size
.text:0000000000018959                 mov     edi, 1          ; nmemb
.text:000000000001895E                 call    _calloc
.text:0000000000018963                 test    rax, rax
.text:0000000000018966                 jz      loc_18A09
.text:000000000001896C                 mov     rdx, [r12+20h]
.text:0000000000018971                 mov     rcx, [r12+28h]
.text:0000000000018976                 mov     rsi, r12
.text:0000000000018979                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000001897E                 mov     rdi, r14
.text:0000000000018981                 mov     [rcx+rdx*8], rax
.text:0000000000018985                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000001898A                 add     rdx, 1
.text:000000000001898E                 mov     [rax], rbp
.text:0000000000018991                 mov     [rax+8], rbx
.text:0000000000018995                 mov     [r12+20h], rdx
.text:000000000001899A                 mov     rdx, rax
.text:000000000001899D                 call    get_subexp_sub_isra_32
.text:00000000000189A2                 cmp     eax, 1
.text:00000000000189A5                 mov     r11, [r14+8]
.text:00000000000189A9                 ja      loc_18618
.text:00000000000189AF
.text:00000000000189AF loc_189AF:                              ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:00000000000189AF                                         ; transit_state_bkref_isra_34+610↑j ...
.text:00000000000189AF                 add     rbx, 1
.text:00000000000189B3                 add     r15, 8
.text:00000000000189B7                 cmp     [rsp+0E8h+var_E0], rbx
.text:00000000000189BC                 jge     loc_18868
.text:00000000000189C2
.text:00000000000189C2 loc_189C2:                              ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:00000000000189C2                                         ; transit_state_bkref_isra_34+865↓j
.text:00000000000189C2                 mov     r13, r11
.text:00000000000189C5                 jmp     loc_184D9
.text:00000000000189C5 ; ---------------------------------------------------------------------------
.text:00000000000189CA                 align 10h
.text:00000000000189D0
.text:00000000000189D0 loc_189D0:                              ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:00000000000189D0                 mov     rsi, rbx
.text:00000000000189D3                 mov     edi, 18h        ; nmemb
.text:00000000000189D8                 mov     [rsp+0E8h+var_D0], r11
.text:00000000000189DD                 sub     rsi, rcx
.text:00000000000189E0                 mov     [rsp+0E8h+var_D8], rcx
.text:00000000000189E5                 add     rsi, 1          ; size
.text:00000000000189E9                 call    _calloc
.text:00000000000189EE                 test    rax, rax
.text:00000000000189F1                 mov     rsi, rax
.text:00000000000189F4                 mov     [r12+10h], rax
.text:00000000000189F9                 mov     rcx, [rsp+0E8h+var_D8]
.text:00000000000189FE                 mov     r11, [rsp+0E8h+var_D0]
.text:0000000000018A03                 jnz     loc_18912
.text:0000000000018A09
.text:0000000000018A09 loc_18A09:                              ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:0000000000018A09                                         ; transit_state_bkref_isra_34+8A7↓j
.text:0000000000018A09                 mov     eax, 0Ch
.text:0000000000018A0E                 jmp     loc_18618
.text:0000000000018A0E ; ---------------------------------------------------------------------------
.text:0000000000018A13                 align 8
.text:0000000000018A18
.text:0000000000018A18 loc_18A18:                              ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:0000000000018A18                                         ; transit_state_bkref_isra_34+31F↑j
.text:0000000000018A18                 mov     rcx, rbx
.text:0000000000018A1B                 mov     rbx, r13
.text:0000000000018A1E                 mov     r13, r8
.text:0000000000018A21                 cmp     [rbx+20h], rbp
.text:0000000000018A25                 jg      loc_184D9
.text:0000000000018A2B                 test    rbp, rbp
.text:0000000000018A2E                 mov     r12, rcx
.text:0000000000018A31                 jz      loc_18842
.text:0000000000018A37                 mov     r15, r11
.text:0000000000018A3A                 jmp     loc_1883E
.text:0000000000018A3A ; ---------------------------------------------------------------------------
.text:0000000000018A3F                 align 20h
.text:0000000000018A40
.text:0000000000018A40 loc_18A40:                              ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:0000000000018A40                 mov     rdx, [rsp+0E8h+var_D0]
.text:0000000000018A45                 mov     rdi, [rsp+0E8h+var_70]
.text:0000000000018A4A                 mov     rsi, rbp
.text:0000000000018A4D                 mov     [rsp+0E8h+var_C0], r11
.text:0000000000018A52                 call    re_acquire_state_context
.text:0000000000018A57                 mov     r11, [rsp+0E8h+var_C0]
.text:0000000000018A5C                 mov     rdx, [r14+0B8h]
.text:0000000000018A63                 mov     [r11], rax
.text:0000000000018A66                 cmp     qword ptr [rdx+rbx*8], 0
.text:0000000000018A6B                 jnz     loc_187A3
.text:0000000000018A71
.text:0000000000018A71 loc_18A71:                              ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:0000000000018A71                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:0000000000018A78                 test    eax, eax
.text:0000000000018A7A                 jz      loc_187A3
.text:0000000000018A80                 jmp     loc_18618
.text:0000000000018A80 ; ---------------------------------------------------------------------------
.text:0000000000018A85                 align 8
.text:0000000000018A88
.text:0000000000018A88 loc_18A88:                              ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:0000000000018A88                 mov     rax, [rsp+0E8h+var_D0]
.text:0000000000018A8D                 mov     rcx, [rsp+0E8h+var_E0]
.text:0000000000018A92                 mov     rdi, r14
.text:0000000000018A95                 lea     r8, [rax+10h]
.text:0000000000018A99                 lea     rbx, [rax+8]
.text:0000000000018A9D                 mov     rdx, r8
.text:0000000000018AA0                 mov     rsi, rbx
.text:0000000000018AA3                 mov     [rsp+0E8h+var_D8], r8
.text:0000000000018AA8                 call    check_subexp_matching_top_isra_18
.text:0000000000018AAD                 test    eax, eax
.text:0000000000018AAF                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:0000000000018AB6                 jnz     loc_18618
.text:0000000000018ABC                 mov     r8, [rsp+0E8h+var_D8]
.text:0000000000018AC1                 mov     rsi, rbx
.text:0000000000018AC4                 mov     rdi, r14
.text:0000000000018AC7                 mov     rdx, r8
.text:0000000000018ACA                 call    transit_state_bkref_isra_34
.text:0000000000018ACF                 test    eax, eax
.text:0000000000018AD1                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:0000000000018AD8                 jz      loc_187C8
.text:0000000000018ADE                 jmp     loc_18618
.text:0000000000018ADE ; ---------------------------------------------------------------------------
.text:0000000000018AE3                 align 8
.text:0000000000018AE8
.text:0000000000018AE8 loc_18AE8:                              ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:0000000000018AE8                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:0000000000018AF0                 call    free
.text:0000000000018AF5                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:0000000000018AFC                 jmp     loc_18618
.text:0000000000018B01 ; ---------------------------------------------------------------------------
.text:0000000000018B01
.text:0000000000018B01 loc_18B01:                              ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:0000000000018B01                 cmp     [r14+58h], r13
.text:0000000000018B05                 jle     loc_189C2
.text:0000000000018B0B                 lea     esi, [r13+1]
.text:0000000000018B0F                 mov     rdi, r14
.text:0000000000018B12                 call    extend_buffers
.text:0000000000018B17                 test    eax, eax
.text:0000000000018B19                 jnz     loc_18618
.text:0000000000018B1F                 mov     r11, [r14+8]
.text:0000000000018B23                 jmp     loc_1887E
.text:0000000000018B28 ; ---------------------------------------------------------------------------
.text:0000000000018B28
.text:0000000000018B28 loc_18B28:                              ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:0000000000018B28                 lea     rdx, [rax+rax+1]
.text:0000000000018B2D                 mov     rdi, [r12+28h]  ; ptr
.text:0000000000018B32                 lea     rsi, ds:0[rdx*8] ; size
.text:0000000000018B3A                 mov     [rsp+0E8h+var_D8], rdx
.text:0000000000018B3F                 call    _realloc
.text:0000000000018B44                 test    rax, rax
.text:0000000000018B47                 jz      loc_18A09
.text:0000000000018B4D                 mov     rdx, [rsp+0E8h+var_D8]
.text:0000000000018B52                 mov     [r12+28h], rax
.text:0000000000018B57                 mov     [r12+18h], rdx
.text:0000000000018B5C                 jmp     loc_18954
.text:0000000000018B61 ; ---------------------------------------------------------------------------
.text:0000000000018B61
.text:0000000000018B61 loc_18B61:                              ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:0000000000018B61                 mov     r13, [rsp+0E8h+var_B8]
.text:0000000000018B66                 mov     rax, [r14+0C8h]
.text:0000000000018B6D                 jmp     loc_18660
.text:0000000000018B72 ; ---------------------------------------------------------------------------
.text:0000000000018B72
.text:0000000000018B72 loc_18B72:                              ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:0000000000018B72                 mov     r12, [rsp+0E8h+var_E0]
.text:0000000000018B77                 jmp     loc_18842
.text:0000000000018B7C ; ---------------------------------------------------------------------------
.text:0000000000018B7C
.text:0000000000018B7C loc_18B7C:                              ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:0000000000018B7C                 call    ___stack_chk_fail
.text:0000000000018B7C ; } // starts at 182A0
.text:0000000000018B7C transit_state_bkref_isra_34 endp
.text:0000000000018B7C
.text:0000000000018B7C ; ---------------------------------------------------------------------------
.text:0000000000018B81                 align 10h
.text:0000000000018B90
.text:0000000000018B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000018B90
.text:0000000000018B90
.text:0000000000018B90 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:0000000000018B90                                         ; re_search_internal+BC3↓p
.text:0000000000018B90
.text:0000000000018B90 var_68          = qword ptr -68h
.text:0000000000018B90 var_60          = qword ptr -60h
.text:0000000000018B90 var_58          = xmmword ptr -58h
.text:0000000000018B90 ptr             = qword ptr -48h
.text:0000000000018B90 var_40          = qword ptr -40h
.text:0000000000018B90
.text:0000000000018B90 ; __unwind {
.text:0000000000018B90                 push    r15
.text:0000000000018B92                 push    r14
.text:0000000000018B94                 push    r13
.text:0000000000018B96                 push    r12
.text:0000000000018B98                 mov     r13, rdi
.text:0000000000018B9B                 push    rbp
.text:0000000000018B9C                 push    rbx
.text:0000000000018B9D                 mov     rbx, rsi
.text:0000000000018BA0                 sub     rsp, 38h
.text:0000000000018BA4                 mov     r12, [rsi+48h]
.text:0000000000018BA8                 mov     r14, [rsi+0B8h]
.text:0000000000018BAF                 mov     rax, fs:28h
.text:0000000000018BB8                 mov     [rsp+68h+var_40], rax
.text:0000000000018BBD                 xor     eax, eax
.text:0000000000018BBF                 mov     r15, [rsi+98h]
.text:0000000000018BC6                 lea     rbp, ds:0[r12*8]
.text:0000000000018BCE                 add     r14, rbp
.text:0000000000018BD1                 cmp     [rsi+0C0h], r12
.text:0000000000018BD8                 jge     short loc_18C20
.text:0000000000018BDA                 mov     [r14], rdx
.text:0000000000018BDD                 mov     rbp, rdx
.text:0000000000018BE0                 mov     [rsi+0C0h], r12
.text:0000000000018BE7
.text:0000000000018BE7 loc_18BE7:                              ; CODE XREF: merge_state_with_log+111↓j
.text:0000000000018BE7                                         ; merge_state_with_log+121↓j ...
.text:0000000000018BE7                 cmp     qword ptr [r15+98h], 0
.text:0000000000018BEF                 jnz     loc_18D18
.text:0000000000018BF5
.text:0000000000018BF5 loc_18BF5:                              ; CODE XREF: merge_state_with_log+1B2↓j
.text:0000000000018BF5                                         ; merge_state_with_log+1D9↓j ...
.text:0000000000018BF5                 mov     rcx, [rsp+68h+var_40]
.text:0000000000018BFA                 xor     rcx, fs:28h
.text:0000000000018C03                 mov     rax, rbp
.text:0000000000018C06                 jnz     loc_18D77
.text:0000000000018C0C                 add     rsp, 38h
.text:0000000000018C10                 pop     rbx
.text:0000000000018C11                 pop     rbp
.text:0000000000018C12                 pop     r12
.text:0000000000018C14                 pop     r13
.text:0000000000018C16                 pop     r14
.text:0000000000018C18                 pop     r15
.text:0000000000018C1A                 retn
.text:0000000000018C1A ; ---------------------------------------------------------------------------
.text:0000000000018C1B                 align 20h
.text:0000000000018C20
.text:0000000000018C20 loc_18C20:                              ; CODE XREF: merge_state_with_log+48↑j
.text:0000000000018C20                 mov     rax, [r14]
.text:0000000000018C23                 test    rax, rax
.text:0000000000018C26                 jz      loc_18D08
.text:0000000000018C2C                 test    rdx, rdx
.text:0000000000018C2F                 mov     rax, [rax+50h]
.text:0000000000018C33                 jz      loc_18CC0
.text:0000000000018C39                 mov     r14, [rdx+50h]
.text:0000000000018C3D                 lea     rdi, [rsp+68h+var_58]
.text:0000000000018C42                 mov     rdx, rax
.text:0000000000018C45                 mov     [rsp+68h+var_68], rdi
.text:0000000000018C49                 mov     rsi, r14
.text:0000000000018C4C                 call    re_node_set_init_union
.text:0000000000018C51                 test    eax, eax
.text:0000000000018C53                 mov     [r13+0], eax
.text:0000000000018C57                 jnz     loc_18D70
.text:0000000000018C5D                 mov     rax, [rbx+48h]
.text:0000000000018C61                 mov     edx, [rbx+0A0h]
.text:0000000000018C67                 mov     rdi, rbx
.text:0000000000018C6A                 lea     rsi, [rax-1]
.text:0000000000018C6E                 call    re_string_context_at
.text:0000000000018C73                 mov     r8, [rbx+0B8h]
.text:0000000000018C7A                 mov     rdx, [rsp+68h+var_68]
.text:0000000000018C7E                 mov     ecx, eax
.text:0000000000018C80                 mov     rsi, r15
.text:0000000000018C83                 mov     rdi, r13
.text:0000000000018C86                 add     r8, rbp
.text:0000000000018C89                 mov     [rsp+68h+var_60], r8
.text:0000000000018C8E                 call    re_acquire_state_context
.text:0000000000018C93                 mov     r8, [rsp+68h+var_60]
.text:0000000000018C98                 test    r14, r14
.text:0000000000018C9B                 mov     rbp, rax
.text:0000000000018C9E                 mov     [r8], rax
.text:0000000000018CA1                 jz      loc_18BE7
.text:0000000000018CA7                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:0000000000018CAC                 call    free
.text:0000000000018CB1                 jmp     loc_18BE7
.text:0000000000018CB1 ; ---------------------------------------------------------------------------
.text:0000000000018CB6                 align 20h
.text:0000000000018CC0
.text:0000000000018CC0 loc_18CC0:                              ; CODE XREF: merge_state_with_log+A3↑j
.text:0000000000018CC0                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000018CC4                 mov     rdi, rbx
.text:0000000000018CC7                 mov     edx, [rsi+0A0h]
.text:0000000000018CCD                 lea     rsi, [r12-1]
.text:0000000000018CD2                 movaps  [rsp+68h+var_58], xmm0
.text:0000000000018CD7                 mov     rax, [rax+10h]
.text:0000000000018CDB                 mov     [rsp+68h+ptr], rax
.text:0000000000018CE0                 call    re_string_context_at
.text:0000000000018CE5                 lea     rdx, [rsp+68h+var_58]
.text:0000000000018CEA                 mov     ecx, eax
.text:0000000000018CEC                 mov     rsi, r15
.text:0000000000018CEF                 mov     rdi, r13
.text:0000000000018CF2                 call    re_acquire_state_context
.text:0000000000018CF7                 mov     rbp, rax
.text:0000000000018CFA                 mov     [r14], rax
.text:0000000000018CFD                 jmp     loc_18BE7
.text:0000000000018CFD ; ---------------------------------------------------------------------------
.text:0000000000018D02                 align 8
.text:0000000000018D08
.text:0000000000018D08 loc_18D08:                              ; CODE XREF: merge_state_with_log+96↑j
.text:0000000000018D08                 mov     [r14], rdx
.text:0000000000018D0B                 mov     rbp, rdx
.text:0000000000018D0E                 jmp     loc_18BE7
.text:0000000000018D0E ; ---------------------------------------------------------------------------
.text:0000000000018D13                 align 8
.text:0000000000018D18
.text:0000000000018D18 loc_18D18:                              ; CODE XREF: merge_state_with_log+5F↑j
.text:0000000000018D18                 test    rbp, rbp
.text:0000000000018D1B                 jz      short loc_18D70
.text:0000000000018D1D                 lea     r14, [rbp+10h]
.text:0000000000018D21                 lea     r15, [rbp+18h]
.text:0000000000018D25                 mov     rcx, r12
.text:0000000000018D28                 mov     rdi, rbx
.text:0000000000018D2B                 mov     rdx, r15
.text:0000000000018D2E                 mov     rsi, r14
.text:0000000000018D31                 call    check_subexp_matching_top_isra_18
.text:0000000000018D36                 test    eax, eax
.text:0000000000018D38                 mov     [r13+0], eax
.text:0000000000018D3C                 jnz     short loc_18D70
.text:0000000000018D3E                 test    byte ptr [rbp+68h], 40h
.text:0000000000018D42                 jz      loc_18BF5
.text:0000000000018D48                 mov     rdx, r15
.text:0000000000018D4B                 mov     rsi, r14
.text:0000000000018D4E                 mov     rdi, rbx
.text:0000000000018D51                 call    transit_state_bkref_isra_34
.text:0000000000018D56                 test    eax, eax
.text:0000000000018D58                 mov     [r13+0], eax
.text:0000000000018D5C                 jnz     short loc_18D70
.text:0000000000018D5E                 mov     rax, [rbx+0B8h]
.text:0000000000018D65                 mov     rbp, [rax+r12*8]
.text:0000000000018D69                 jmp     loc_18BF5
.text:0000000000018D69 ; ---------------------------------------------------------------------------
.text:0000000000018D6E                 align 10h
.text:0000000000018D70
.text:0000000000018D70 loc_18D70:                              ; CODE XREF: merge_state_with_log+C7↑j
.text:0000000000018D70                                         ; merge_state_with_log+18B↑j ...
.text:0000000000018D70                 xor     ebp, ebp
.text:0000000000018D72                 jmp     loc_18BF5
.text:0000000000018D77 ; ---------------------------------------------------------------------------
.text:0000000000018D77
.text:0000000000018D77 loc_18D77:                              ; CODE XREF: merge_state_with_log+76↑j
.text:0000000000018D77                 call    ___stack_chk_fail
.text:0000000000018D77 ; } // starts at 18B90
.text:0000000000018D77 merge_state_with_log endp
.text:0000000000018D77
.text:0000000000018D77 ; ---------------------------------------------------------------------------
.text:0000000000018D7C                 align 20h
.text:0000000000018D80
.text:0000000000018D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000018D80
.text:0000000000018D80
.text:0000000000018D80 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:0000000000018D80                                         ; re_search_internal+1235↓p ...
.text:0000000000018D80
.text:0000000000018D80 var_98          = qword ptr -98h
.text:0000000000018D80 n               = qword ptr -90h
.text:0000000000018D80 var_88          = qword ptr -88h
.text:0000000000018D80 var_80          = qword ptr -80h
.text:0000000000018D80 var_78          = qword ptr -78h
.text:0000000000018D80 var_6C          = dword ptr -6Ch
.text:0000000000018D80 var_68          = qword ptr -68h
.text:0000000000018D80 var_60          = qword ptr -60h
.text:0000000000018D80 var_58          = qword ptr -58h
.text:0000000000018D80 var_50          = qword ptr -50h
.text:0000000000018D80 ptr             = qword ptr -48h
.text:0000000000018D80 var_40          = qword ptr -40h
.text:0000000000018D80
.text:0000000000018D80 ; __unwind {
.text:0000000000018D80                 push    r15
.text:0000000000018D82                 push    r14
.text:0000000000018D84                 mov     r14, rdi
.text:0000000000018D87                 push    r13
.text:0000000000018D89                 push    r12
.text:0000000000018D8B                 mov     r13, rsi
.text:0000000000018D8E                 push    rbp
.text:0000000000018D8F                 push    rbx
.text:0000000000018D90                 sub     rsp, 68h
.text:0000000000018D94                 mov     r15, [rsi+18h]
.text:0000000000018D98                 mov     rbx, [rsi+10h]
.text:0000000000018D9C                 mov     [rsp+98h+var_98], rdi
.text:0000000000018DA0                 mov     edi, 8          ; size
.text:0000000000018DA5                 mov     [rsp+98h+var_58], 1
.text:0000000000018DAE                 mov     rax, fs:28h
.text:0000000000018DB7                 mov     [rsp+98h+var_40], rax
.text:0000000000018DBC                 xor     eax, eax
.text:0000000000018DBE                 mov     [rsp+98h+var_50], 1
.text:0000000000018DC7                 call    _malloc
.text:0000000000018DCC                 test    rax, rax
.text:0000000000018DCF                 mov     [rsp+98h+ptr], rax
.text:0000000000018DD4                 jz      loc_190B4
.text:0000000000018DDA                 lea     rcx, [rsp+98h+var_58]
.text:0000000000018DDF                 mov     [rax], rbx
.text:0000000000018DE2                 mov     rdx, r15
.text:0000000000018DE5                 mov     rsi, r13
.text:0000000000018DE8                 mov     rdi, r14
.text:0000000000018DEB                 mov     [rsp+98h+var_88], rcx
.text:0000000000018DF0                 call    update_cur_sifted_state
.text:0000000000018DF5                 test    eax, eax
.text:0000000000018DF7                 jnz     loc_19085
.text:0000000000018DFD                 lea     rax, ds:0[r15*8]
.text:0000000000018E05                 test    r15, r15
.text:0000000000018E08                 mov     [rsp+98h+var_6C], 0
.text:0000000000018E10                 mov     [rsp+98h+n], rax
.text:0000000000018E15                 lea     rax, [r13+30h]
.text:0000000000018E19                 mov     [rsp+98h+var_60], rax
.text:0000000000018E1E                 jle     loc_19027
.text:0000000000018E24
.text:0000000000018E24 loc_18E24:                              ; CODE XREF: sift_states_backward+2A1↓j
.text:0000000000018E24                 mov     rdi, [r13+0]    ; s
.text:0000000000018E28                 mov     rax, [rsp+98h+n]
.text:0000000000018E2D                 cmp     qword ptr [rdi+rax], 0
.text:0000000000018E32                 jz      loc_19048
.text:0000000000018E38                 mov     rax, [rsp+98h+var_98]
.text:0000000000018E3C                 mov     [rsp+98h+var_6C], 0
.text:0000000000018E44                 mov     ecx, [rsp+98h+var_6C]
.text:0000000000018E48                 cmp     [rax+0E0h], ecx
.text:0000000000018E4E                 jl      loc_19061
.text:0000000000018E54
.text:0000000000018E54 loc_18E54:                              ; CODE XREF: sift_states_backward+2DB↓j
.text:0000000000018E54                 mov     rbx, [rsp+98h+var_98]
.text:0000000000018E58                 mov     rdi, [rsp+98h+n]
.text:0000000000018E5D                 sub     r15, 1
.text:0000000000018E61                 mov     [rsp+98h+var_50], 0
.text:0000000000018E6A                 mov     rax, [rbx+0B8h]
.text:0000000000018E71                 mov     r12, [rax+rdi-8]
.text:0000000000018E76                 test    r12, r12
.text:0000000000018E79                 jz      loc_19000
.text:0000000000018E7F                 cmp     qword ptr [r12+28h], 0
.text:0000000000018E85                 mov     r14, [rbx+98h]
.text:0000000000018E8C                 jle     loc_19000
.text:0000000000018E92                 xor     ebx, ebx
.text:0000000000018E94                 jmp     loc_18F3B
.text:0000000000018E94 ; ---------------------------------------------------------------------------
.text:0000000000018E99                 align 20h
.text:0000000000018EA0
.text:0000000000018EA0 loc_18EA0:                              ; CODE XREF: sift_states_backward+1D5↓j
.text:0000000000018EA0                                         ; sift_states_backward+271↓j ...
.text:0000000000018EA0                 mov     rdi, [rsp+98h+var_98]
.text:0000000000018EA4                 mov     rdx, r15
.text:0000000000018EA7                 call    check_node_accept
.text:0000000000018EAC                 test    al, al
.text:0000000000018EAE                 jz      short loc_18F2C
.text:0000000000018EB0                 mov     rax, [r13+0]
.text:0000000000018EB4                 mov     rcx, [rsp+98h+n]
.text:0000000000018EB9                 mov     rax, [rax+rcx]
.text:0000000000018EBD                 test    rax, rax
.text:0000000000018EC0                 jz      short loc_18F2C
.text:0000000000018EC2                 mov     rdx, [r14+18h]
.text:0000000000018EC6                 mov     rdi, [rax+10h]
.text:0000000000018ECA                 lea     rsi, [rax+18h]
.text:0000000000018ECE                 mov     rdx, [rdx+rbp*8]
.text:0000000000018ED2                 call    re_node_set_contains_isra_3
.text:0000000000018ED7                 test    rax, rax
.text:0000000000018EDA                 jz      short loc_18F2C
.text:0000000000018EDC                 mov     r10d, 1
.text:0000000000018EE2
.text:0000000000018EE2 loc_18EE2:                              ; CODE XREF: sift_states_backward+22B↓j
.text:0000000000018EE2                                         ; sift_states_backward+260↓j ...
.text:0000000000018EE2                 cmp     qword ptr [r13+28h], 0
.text:0000000000018EE7                 jz      short loc_18F17
.text:0000000000018EE9                 mov     rax, [r14+18h]
.text:0000000000018EED                 sub     rsp, 8
.text:0000000000018EF1                 lea     rsi, [r13+28h]
.text:0000000000018EF5                 lea     r8, [r10+r15]
.text:0000000000018EF9                 mov     r9, rbp
.text:0000000000018EFC                 mov     rcx, [rax+rbp*8]
.text:0000000000018F00                 push    r15
.text:0000000000018F02                 mov     rdx, [rsp+0A8h+var_60]
.text:0000000000018F07                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000018F0C                 call    check_dst_limits_isra_13
.text:0000000000018F11                 test    al, al
.text:0000000000018F13                 pop     rdx
.text:0000000000018F14                 pop     rcx
.text:0000000000018F15                 jnz     short loc_18F2C
.text:0000000000018F17
.text:0000000000018F17 loc_18F17:                              ; CODE XREF: sift_states_backward+167↑j
.text:0000000000018F17                 mov     rdi, [rsp+98h+var_88]
.text:0000000000018F1C                 mov     rsi, rbp
.text:0000000000018F1F                 call    re_node_set_insert
.text:0000000000018F24                 test    al, al
.text:0000000000018F26                 jz      loc_19080
.text:0000000000018F2C
.text:0000000000018F2C loc_18F2C:                              ; CODE XREF: sift_states_backward+12E↑j
.text:0000000000018F2C                                         ; sift_states_backward+140↑j ...
.text:0000000000018F2C                 add     rbx, 1
.text:0000000000018F30                 cmp     rbx, [r12+28h]
.text:0000000000018F35                 jge     loc_19000
.text:0000000000018F3B
.text:0000000000018F3B loc_18F3B:                              ; CODE XREF: sift_states_backward+114↑j
.text:0000000000018F3B                 mov     rax, [r12+30h]
.text:0000000000018F40                 mov     rsi, [r14]
.text:0000000000018F43                 mov     rbp, [rax+rbx*8]
.text:0000000000018F47                 mov     r9, rbp
.text:0000000000018F4A                 shl     r9, 4
.text:0000000000018F4E                 add     rsi, r9
.text:0000000000018F51                 test    byte ptr [rsi+0Ah], 10h
.text:0000000000018F55                 jz      loc_18EA0
.text:0000000000018F5B                 mov     rcx, [rsp+98h+var_98]
.text:0000000000018F5F                 mov     rax, [r13+18h]
.text:0000000000018F63                 mov     r8, r15
.text:0000000000018F66                 mov     rdx, rbp
.text:0000000000018F69                 mov     [rsp+98h+var_80], r9
.text:0000000000018F6E                 mov     r11, [rcx+98h]
.text:0000000000018F75                 mov     [rsp+98h+var_78], rax
.text:0000000000018F7A                 mov     rdi, [r11]
.text:0000000000018F7D                 lea     rsi, [r11+0D8h]
.text:0000000000018F84                 mov     [rsp+98h+var_68], r11
.text:0000000000018F89                 call    check_node_accept_bytes_isra_31
.text:0000000000018F8E                 movsxd  r10, eax
.text:0000000000018F91                 mov     r9, [rsp+98h+var_80]
.text:0000000000018F96                 cmp     r10d, 0
.text:0000000000018F9A                 jle     loc_19030
.text:0000000000018FA0                 movsxd  rax, r10d
.text:0000000000018FA3                 add     rax, r15
.text:0000000000018FA6                 cmp     [rsp+98h+var_78], rax
.text:0000000000018FAB                 jl      loc_18EE2
.text:0000000000018FB1                 mov     rdx, [r13+0]
.text:0000000000018FB5                 mov     r11, [rsp+98h+var_68]
.text:0000000000018FBA                 mov     rax, [rdx+rax*8]
.text:0000000000018FBE                 test    rax, rax
.text:0000000000018FC1                 jz      short loc_19036
.text:0000000000018FC3                 mov     rdx, [r11+18h]
.text:0000000000018FC7                 mov     rdi, [rax+10h]
.text:0000000000018FCB                 lea     rsi, [rax+18h]
.text:0000000000018FCF                 mov     [rsp+98h+var_80], r9
.text:0000000000018FD4                 mov     rdx, [rdx+rbp*8]
.text:0000000000018FD8                 call    re_node_set_contains_isra_3
.text:0000000000018FDD                 test    rax, rax
.text:0000000000018FE0                 jnz     loc_18EE2
.text:0000000000018FE6                 mov     r9, [rsp+98h+var_80]
.text:0000000000018FEB                 mov     rsi, [r14]
.text:0000000000018FEE                 add     rsi, r9
.text:0000000000018FF1                 jmp     loc_18EA0
.text:0000000000018FF1 ; ---------------------------------------------------------------------------
.text:0000000000018FF6                 align 20h
.text:0000000000019000
.text:0000000000019000 loc_19000:                              ; CODE XREF: sift_states_backward+F9↑j
.text:0000000000019000                                         ; sift_states_backward+10C↑j ...
.text:0000000000019000                 mov     rcx, [rsp+98h+var_88]
.text:0000000000019005                 mov     rdi, [rsp+98h+var_98]
.text:0000000000019009                 mov     rdx, r15
.text:000000000001900C                 mov     rsi, r13
.text:000000000001900F                 call    update_cur_sifted_state
.text:0000000000019014                 test    eax, eax
.text:0000000000019016                 jnz     short loc_19085
.text:0000000000019018                 sub     [rsp+98h+n], 8
.text:000000000001901E                 test    r15, r15
.text:0000000000019021                 jnz     loc_18E24
.text:0000000000019027
.text:0000000000019027 loc_19027:                              ; CODE XREF: sift_states_backward+9E↑j
.text:0000000000019027                 xor     eax, eax
.text:0000000000019029                 jmp     short loc_19085
.text:0000000000019029 ; ---------------------------------------------------------------------------
.text:000000000001902B                 align 10h
.text:0000000000019030
.text:0000000000019030 loc_19030:                              ; CODE XREF: sift_states_backward+21A↑j
.text:0000000000019030                 jnz     loc_18EE2
.text:0000000000019036
.text:0000000000019036 loc_19036:                              ; CODE XREF: sift_states_backward+241↑j
.text:0000000000019036                 mov     rsi, [r14]
.text:0000000000019039                 add     rsi, r9
.text:000000000001903C                 jmp     loc_18EA0
.text:000000000001903C ; ---------------------------------------------------------------------------
.text:0000000000019041                 align 8
.text:0000000000019048
.text:0000000000019048 loc_19048:                              ; CODE XREF: sift_states_backward+B2↑j
.text:0000000000019048                 mov     rax, [rsp+98h+var_98]
.text:000000000001904C                 add     [rsp+98h+var_6C], 1
.text:0000000000019051                 mov     ecx, [rsp+98h+var_6C]
.text:0000000000019055                 cmp     [rax+0E0h], ecx
.text:000000000001905B                 jge     loc_18E54
.text:0000000000019061
.text:0000000000019061 loc_19061:                              ; CODE XREF: sift_states_backward+CE↑j
.text:0000000000019061                 mov     rdx, [rsp+98h+n] ; n
.text:0000000000019066                 xor     esi, esi        ; c
.text:0000000000019068                 call    _memset
.text:000000000001906D                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000019072                 call    free
.text:0000000000019077                 xor     eax, eax
.text:0000000000019079                 jmp     short loc_19095
.text:0000000000019079 ; ---------------------------------------------------------------------------
.text:000000000001907B                 align 20h
.text:0000000000019080
.text:0000000000019080 loc_19080:                              ; CODE XREF: sift_states_backward+1A6↑j
.text:0000000000019080                 mov     eax, 0Ch
.text:0000000000019085
.text:0000000000019085 loc_19085:                              ; CODE XREF: sift_states_backward+77↑j
.text:0000000000019085                                         ; sift_states_backward+296↑j ...
.text:0000000000019085                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000001908A                 mov     dword ptr [rsp+98h+var_98], eax
.text:000000000001908D                 call    free
.text:0000000000019092                 mov     eax, dword ptr [rsp+98h+var_98]
.text:0000000000019095
.text:0000000000019095 loc_19095:                              ; CODE XREF: sift_states_backward+2F9↑j
.text:0000000000019095                                         ; sift_states_backward+339↓j
.text:0000000000019095                 mov     rdx, [rsp+98h+var_40]
.text:000000000001909A                 xor     rdx, fs:28h
.text:00000000000190A3                 jnz     short loc_190BB
.text:00000000000190A5                 add     rsp, 68h
.text:00000000000190A9                 pop     rbx
.text:00000000000190AA                 pop     rbp
.text:00000000000190AB                 pop     r12
.text:00000000000190AD                 pop     r13
.text:00000000000190AF                 pop     r14
.text:00000000000190B1                 pop     r15
.text:00000000000190B3                 retn
.text:00000000000190B4 ; ---------------------------------------------------------------------------
.text:00000000000190B4
.text:00000000000190B4 loc_190B4:                              ; CODE XREF: sift_states_backward+54↑j
.text:00000000000190B4                 mov     eax, 0Ch
.text:00000000000190B9                 jmp     short loc_19095
.text:00000000000190BB ; ---------------------------------------------------------------------------
.text:00000000000190BB
.text:00000000000190BB loc_190BB:                              ; CODE XREF: sift_states_backward+323↑j
.text:00000000000190BB                 call    ___stack_chk_fail
.text:00000000000190BB ; } // starts at 18D80
.text:00000000000190BB sift_states_backward endp
.text:00000000000190BB
.text:00000000000190C0
.text:00000000000190C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000190C0
.text:00000000000190C0
.text:00000000000190C0 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:00000000000190C0                                         ; rpl_regexec+58↓p
.text:00000000000190C0
.text:00000000000190C0 var_268         = qword ptr -268h
.text:00000000000190C0 var_260         = qword ptr -260h
.text:00000000000190C0 var_258         = qword ptr -258h
.text:00000000000190C0 var_250         = qword ptr -250h
.text:00000000000190C0 var_248         = qword ptr -248h
.text:00000000000190C0 var_240         = qword ptr -240h
.text:00000000000190C0 var_238         = qword ptr -238h
.text:00000000000190C0 var_230         = qword ptr -230h
.text:00000000000190C0 var_228         = qword ptr -228h
.text:00000000000190C0 var_220         = qword ptr -220h
.text:00000000000190C0 var_218         = qword ptr -218h
.text:00000000000190C0 var_210         = dword ptr -210h
.text:00000000000190C0 var_20C         = dword ptr -20Ch
.text:00000000000190C0 var_208         = qword ptr -208h
.text:00000000000190C0 var_200         = qword ptr -200h
.text:00000000000190C0 var_1F8         = qword ptr -1F8h
.text:00000000000190C0 var_1F0         = qword ptr -1F0h
.text:00000000000190C0 var_1E8         = qword ptr -1E8h
.text:00000000000190C0 var_1E0         = qword ptr -1E0h
.text:00000000000190C0 var_1D8         = qword ptr -1D8h
.text:00000000000190C0 var_1D0         = qword ptr -1D0h
.text:00000000000190C0 var_1C8         = qword ptr -1C8h
.text:00000000000190C0 var_1C0         = dword ptr -1C0h
.text:00000000000190C0 var_1BC         = dword ptr -1BCh
.text:00000000000190C0 var_1B8         = qword ptr -1B8h
.text:00000000000190C0 var_1B0         = qword ptr -1B0h
.text:00000000000190C0 var_1A8         = qword ptr -1A8h
.text:00000000000190C0 var_1A0         = dword ptr -1A0h
.text:00000000000190C0 var_19A         = byte ptr -19Ah
.text:00000000000190C0 var_199         = byte ptr -199h
.text:00000000000190C0 var_198         = dword ptr -198h
.text:00000000000190C0 var_194         = dword ptr -194h
.text:00000000000190C0 var_190         = qword ptr -190h
.text:00000000000190C0 var_188         = xmmword ptr -188h
.text:00000000000190C0 var_178         = qword ptr -178h
.text:00000000000190C0 var_170         = qword ptr -170h
.text:00000000000190C0 var_168         = xmmword ptr -168h
.text:00000000000190C0 ptr             = qword ptr -158h
.text:00000000000190C0 var_148         = qword ptr -148h
.text:00000000000190C0 var_140         = qword ptr -140h
.text:00000000000190C0 var_138         = qword ptr -138h
.text:00000000000190C0 var_130         = qword ptr -130h
.text:00000000000190C0 var_120         = qword ptr -120h
.text:00000000000190C0 var_118         = qword ptr -118h
.text:00000000000190C0 var_110         = qword ptr -110h
.text:00000000000190C0 var_108         = qword ptr -108h
.text:00000000000190C0 var_100         = qword ptr -100h
.text:00000000000190C0 var_F8          = qword ptr -0F8h
.text:00000000000190C0 var_F0          = qword ptr -0F0h
.text:00000000000190C0 var_E8          = qword ptr -0E8h
.text:00000000000190C0 var_E0          = qword ptr -0E0h
.text:00000000000190C0 var_D8          = dword ptr -0D8h
.text:00000000000190C0 var_D0          = qword ptr -0D0h
.text:00000000000190C0 var_C8          = qword ptr -0C8h
.text:00000000000190C0 var_C0          = byte ptr -0C0h
.text:00000000000190C0 var_BF          = byte ptr -0BFh
.text:00000000000190C0 var_BE          = byte ptr -0BEh
.text:00000000000190C0 var_BD          = byte ptr -0BDh
.text:00000000000190C0 var_BC          = byte ptr -0BCh
.text:00000000000190C0 var_BB          = byte ptr -0BBh
.text:00000000000190C0 var_BA          = byte ptr -0BAh
.text:00000000000190C0 var_B8          = dword ptr -0B8h
.text:00000000000190C0 var_B0          = qword ptr -0B0h
.text:00000000000190C0 var_A8          = dword ptr -0A8h
.text:00000000000190C0 var_A0          = qword ptr -0A0h
.text:00000000000190C0 var_98          = qword ptr -98h
.text:00000000000190C0 var_90          = qword ptr -90h
.text:00000000000190C0 var_88          = qword ptr -88h
.text:00000000000190C0 var_80          = qword ptr -80h
.text:00000000000190C0 var_78          = qword ptr -78h
.text:00000000000190C0 var_70          = qword ptr -70h
.text:00000000000190C0 var_68          = dword ptr -68h
.text:00000000000190C0 var_58          = qword ptr -58h
.text:00000000000190C0 var_50          = qword ptr -50h
.text:00000000000190C0 var_40          = qword ptr -40h
.text:00000000000190C0 arg_0           = qword ptr  8
.text:00000000000190C0 arg_8           = qword ptr  10h
.text:00000000000190C0 arg_10          = dword ptr  18h
.text:00000000000190C0
.text:00000000000190C0 ; __unwind {
.text:00000000000190C0                 push    r15
.text:00000000000190C2                 push    r14
.text:00000000000190C4                 push    r13
.text:00000000000190C6                 push    r12
.text:00000000000190C8                 mov     r13, r9
.text:00000000000190CB                 push    rbp
.text:00000000000190CC                 push    rbx
.text:00000000000190CD                 mov     rbp, rcx
.text:00000000000190D0                 mov     ecx, 20h ; ' '
.text:00000000000190D5                 mov     r12, r8
.text:00000000000190D8                 sub     rsp, 238h
.text:00000000000190DF                 mov     rbx, [rdi]
.text:00000000000190E2                 mov     rax, [rsp+268h+arg_8]
.text:00000000000190EA                 mov     [rsp+268h+var_220], rdi
.text:00000000000190EF                 mov     [rsp+268h+var_1F0], rsi
.text:00000000000190F4                 mov     rsi, rdi
.text:00000000000190F7                 lea     rdi, [rsp+268h+var_148]
.text:00000000000190FF                 mov     [rsp+268h+var_1E0], rdx
.text:0000000000019107                 mov     [rsp+268h+var_230], rbx
.text:000000000001910C                 mov     [rsp+268h+var_1B0], rax
.text:0000000000019114                 mov     [rsp+268h+var_268], rdi
.text:0000000000019118                 mov     rax, fs:28h
.text:0000000000019121                 mov     [rsp+268h+var_40], rax
.text:0000000000019129                 xor     eax, eax
.text:000000000001912B                 rep stosq
.text:000000000001912E                 mov     rdi, [rsi+20h]
.text:0000000000019132                 mov     [rsp+268h+var_B0], rbx
.text:000000000001913A                 test    rdi, rdi
.text:000000000001913D                 mov     [rsp+268h+var_200], rdi
.text:0000000000019142                 jz      short loc_19166
.text:0000000000019144                 movzx   edx, byte ptr [rsi+38h]
.text:0000000000019148                 test    dl, 8
.text:000000000001914B                 jz      loc_195E0
.text:0000000000019151                 cmp     rbp, r8
.text:0000000000019154                 jz      loc_195E0
.text:000000000001915A                 and     edx, 1
.text:000000000001915D                 cmovz   rax, rdi
.text:0000000000019161                 mov     [rsp+268h+var_200], rax
.text:0000000000019166
.text:0000000000019166 loc_19166:                              ; CODE XREF: re_search_internal+82↑j
.text:0000000000019166                                         ; re_search_internal+529↓j
.text:0000000000019166                 mov     rax, [rsp+268h+var_220]
.text:000000000001916B                 mov     [rsp+268h+var_1D0], 0
.text:0000000000019177                 mov     rax, [rax+30h]
.text:000000000001917B                 cmp     rax, [rsp+268h+arg_0]
.text:0000000000019183                 jnb     short loc_191A4
.text:0000000000019185                 mov     rcx, [rsp+268h+arg_0]
.text:000000000001918D                 lea     rdx, [rcx-1]
.text:0000000000019191                 sub     rdx, rax
.text:0000000000019194                 sub     [rsp+268h+arg_0], rdx
.text:000000000001919C                 mov     [rsp+268h+var_1D0], rdx
.text:00000000000191A4
.text:00000000000191A4 loc_191A4:                              ; CODE XREF: re_search_internal+C3↑j
.text:00000000000191A4                 mov     rsi, [rsp+268h+var_220]
.text:00000000000191A9                 cmp     qword ptr [rsi+10h], 0
.text:00000000000191AE                 jz      loc_1A040
.text:00000000000191B4                 mov     rdi, [rsp+268h+var_230]
.text:00000000000191B9                 mov     rax, [rdi+48h]
.text:00000000000191BD                 test    rax, rax
.text:00000000000191C0                 jz      loc_1A040
.text:00000000000191C6                 mov     rdx, [rdi+50h]
.text:00000000000191CA                 test    rdx, rdx
.text:00000000000191CD                 jz      loc_1A040
.text:00000000000191D3                 mov     rcx, [rdi+58h]
.text:00000000000191D7                 test    rcx, rcx
.text:00000000000191DA                 jz      loc_1A040
.text:00000000000191E0                 cmp     qword ptr [rdi+60h], 0
.text:00000000000191E5                 jz      loc_1A040
.text:00000000000191EB                 cmp     qword ptr [rax+10h], 0
.text:00000000000191F0                 jnz     short loc_19228
.text:00000000000191F2                 cmp     qword ptr [rdx+10h], 0
.text:00000000000191F7                 jnz     short loc_19228
.text:00000000000191F9                 cmp     qword ptr [rcx+10h], 0
.text:00000000000191FE                 jz      short loc_19206
.text:0000000000019200                 cmp     byte ptr [rsi+38h], 0
.text:0000000000019204                 js      short loc_19228
.text:0000000000019206
.text:0000000000019206 loc_19206:                              ; CODE XREF: re_search_internal+13E↑j
.text:0000000000019206                 test    rbp, rbp
.text:0000000000019209                 jz      short loc_1921C
.text:000000000001920B                 test    r12, r12
.text:000000000001920E                 mov     [rsp+268h+var_20C], 1
.text:0000000000019216                 jnz     loc_19C39
.text:000000000001921C
.text:000000000001921C loc_1921C:                              ; CODE XREF: re_search_internal+149↑j
.text:000000000001921C                 xor     r12d, r12d
.text:000000000001921F                 xor     ebp, ebp
.text:0000000000019221                 nop     dword ptr [rax+00000000h]
.text:0000000000019228
.text:0000000000019228 loc_19228:                              ; CODE XREF: re_search_internal+130↑j
.text:0000000000019228                                         ; re_search_internal+137↑j ...
.text:0000000000019228                 cmp     [rsp+268h+arg_0], 0
.text:0000000000019231                 mov     [rsp+268h+var_210], 1
.text:0000000000019239                 jz      loc_195C0
.text:000000000001923F
.text:000000000001923F loc_1923F:                              ; CODE XREF: re_search_internal+517↓j
.text:000000000001923F                 mov     r11, [rsp+268h+var_230]
.text:0000000000019244                 mov     rax, [rsp+268h+var_220]
.text:0000000000019249                 mov     rdi, [rsp+268h+var_1E0]
.text:0000000000019251                 mov     rsi, [r11+10h]
.text:0000000000019255                 mov     rbx, [rax+28h]
.text:0000000000019259                 mov     edx, [r11+0B4h]
.text:0000000000019260                 mov     rax, [rax+18h]
.text:0000000000019264                 mov     [rsp+268h+var_F0], rdi
.text:000000000001926C                 mov     [rsp+268h+var_F8], rdi
.text:0000000000019274                 mov     [rsp+268h+var_260], rsi
.text:0000000000019279                 lea     rsi, [rsi+1]
.text:000000000001927D                 mov     [rsp+268h+var_1B8], rbx
.text:0000000000019285                 movsxd  rcx, edx
.text:0000000000019288                 shr     rax, 16h
.text:000000000001928C                 mov     [rsp+268h+var_D0], rbx
.text:0000000000019294                 and     eax, 1
.text:0000000000019297                 cmp     rsi, rcx
.text:000000000001929A                 mov     [rsp+268h+var_B8], edx
.text:00000000000192A1                 cmovl   rsi, rcx
.text:00000000000192A5                 lea     rcx, [rdi+1]
.text:00000000000192A9                 mov     [rsp+268h+var_C0], al
.text:00000000000192B0                 mov     [rsp+268h+var_E0], rdi
.text:00000000000192B8                 mov     [rsp+268h+var_E8], rdi
.text:00000000000192C0                 cmp     rsi, rcx
.text:00000000000192C3                 mov     rdi, [rsp+268h+var_268]
.text:00000000000192C7                 cmovg   rsi, rcx
.text:00000000000192CB                 test    rbx, rbx
.text:00000000000192CE                 mov     rcx, [rsp+268h+var_1F0]
.text:00000000000192D3                 setnz   bl
.text:00000000000192D6                 or      eax, ebx
.text:00000000000192D8                 mov     [rsp+268h+var_BD], al
.text:00000000000192DF                 movzx   eax, byte ptr [r11+0B0h]
.text:00000000000192E7                 mov     [rsp+268h+var_148], rcx
.text:00000000000192EF                 mov     edx, eax
.text:00000000000192F1                 shr     al, 3
.text:00000000000192F4                 shr     dl, 2
.text:00000000000192F7                 and     eax, 1
.text:00000000000192FA                 and     edx, 1
.text:00000000000192FD                 mov     [rsp+268h+var_BE], al
.text:0000000000019304                 mov     [rsp+268h+var_BF], dl
.text:000000000001930B                 call    re_string_realloc_buffers
.text:0000000000019310                 test    eax, eax
.text:0000000000019312                 mov     [rsp+268h+var_20C], eax
.text:0000000000019316                 jnz     loc_19C10
.text:000000000001931C                 mov     rdi, [rsp+268h+var_230]
.text:0000000000019321                 lea     rax, [rdi+0B8h]
.text:0000000000019328                 mov     [rsp+268h+var_C8], rax
.text:0000000000019330                 movzx   eax, byte ptr [rdi+0B0h]
.text:0000000000019337                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000001933B                 shr     al, 4
.text:000000000001933E                 and     eax, 1
.text:0000000000019341                 cmp     [rsp+268h+var_BD], 0
.text:0000000000019349                 mov     [rsp+268h+var_BA], al
.text:0000000000019350                 jnz     short loc_19375
.text:0000000000019352                 mov     rsi, [rsp+268h+var_230]
.text:0000000000019357                 mov     rax, [rsp+268h+var_1F0]
.text:000000000001935C                 cmp     dword ptr [rsi+0B4h], 1
.text:0000000000019363                 mov     [rsp+268h+var_140], rax
.text:000000000001936B                 mov     rax, [rsp+268h+var_1E0]
.text:0000000000019373                 jle     short loc_19377
.text:0000000000019375
.text:0000000000019375 loc_19375:                              ; CODE XREF: re_search_internal+290↑j
.text:0000000000019375                 xor     eax, eax
.text:0000000000019377
.text:0000000000019377 loc_19377:                              ; CODE XREF: re_search_internal+2B3↑j
.text:0000000000019377                 mov     [rsp+268h+var_118], rax
.text:000000000001937F                 mov     [rsp+268h+var_110], rax
.text:0000000000019387                 mov     rax, [rsp+268h+var_220]
.text:000000000001938C                 mov     [rsp+268h+var_E0], r13
.text:0000000000019394                 mov     [rsp+268h+var_E8], r13
.text:000000000001939C                 movzx   eax, byte ptr [rax+38h]
.text:00000000000193A0                 mov     byte ptr [rsp+268h+var_260], al
.text:00000000000193A4                 shr     al, 7
.text:00000000000193A7                 mov     [rsp+268h+var_BB], al
.text:00000000000193AE                 mov     rax, [rsp+268h+var_230]
.text:00000000000193B3                 mov     r14, [rax+98h]
.text:00000000000193BA                 mov     eax, [rsp+268h+arg_10]
.text:00000000000193C1                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:00000000000193CD                 lea     r13, [r14+r14]
.text:00000000000193D1                 mov     [rsp+268h+var_A8], eax
.text:00000000000193D8                 test    r13, r13
.text:00000000000193DB                 jle     short loc_1942F
.text:00000000000193DD                 mov     rax, 666666666666666h
.text:00000000000193E7                 cmp     r13, rax
.text:00000000000193EA                 jg      loc_1A130
.text:00000000000193F0                 lea     rdi, [r13+r14*8+0]
.text:00000000000193F5                 shl     rdi, 3          ; size
.text:00000000000193F9                 call    _malloc
.text:00000000000193FE                 mov     rdi, r14
.text:0000000000019401                 mov     r15, rax
.text:0000000000019404                 mov     [rsp+268h+var_70], rax
.text:000000000001940C                 shl     rdi, 4          ; size
.text:0000000000019410                 call    _malloc
.text:0000000000019415                 test    rax, rax
.text:0000000000019418                 mov     [rsp+268h+var_50], rax
.text:0000000000019420                 jz      loc_1A130
.text:0000000000019426                 test    r15, r15
.text:0000000000019429                 jz      loc_1A130
.text:000000000001942F
.text:000000000001942F loc_1942F:                              ; CODE XREF: re_search_internal+31B↑j
.text:000000000001942F                 cmp     [rsp+268h+arg_0], 1
.text:0000000000019438                 mov     [rsp+268h+var_78], r13
.text:0000000000019440                 mov     [rsp+268h+var_68], 1
.text:000000000001944B                 mov     [rsp+268h+var_58], r13
.text:0000000000019453                 jbe     loc_1A578
.text:0000000000019459
.text:0000000000019459 loc_19459:                              ; CODE XREF: re_search_internal+14C4↓j
.text:0000000000019459                 mov     rax, [rsp+268h+var_108]
.text:0000000000019461                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:000000000001946B                 cmp     rax, rdx
.text:000000000001946E                 ja      loc_1A130
.text:0000000000019474                 lea     rdi, ds:8[rax*8] ; size
.text:000000000001947C                 call    _malloc
.text:0000000000019481                 test    rax, rax
.text:0000000000019484                 mov     rdi, rax
.text:0000000000019487                 mov     [rsp+268h+var_90], rax
.text:000000000001948F                 jz      loc_1A180
.text:0000000000019495
.text:0000000000019495 loc_19495:                              ; CODE XREF: re_search_internal+14D6↓j
.text:0000000000019495                 mov     eax, [rsp+268h+arg_10]
.text:000000000001949C                 mov     [rsp+268h+var_190], rbp
.text:00000000000194A4                 and     eax, 1
.text:00000000000194A7                 cmp     eax, 1
.text:00000000000194AA                 sbb     eax, eax
.text:00000000000194AC                 and     eax, 2
.text:00000000000194AF                 add     eax, 4
.text:00000000000194B2                 mov     [rsp+268h+var_D8], eax
.text:00000000000194B9                 xor     eax, eax
.text:00000000000194BB                 cmp     rbp, r12
.text:00000000000194BE                 setle   al
.text:00000000000194C1                 lea     eax, [rax+rax-1]
.text:00000000000194C5                 mov     [rsp+268h+var_1BC], eax
.text:00000000000194CC                 mov     rax, r12
.text:00000000000194CF                 cmovle  rax, rbp
.text:00000000000194D3                 mov     [rsp+268h+var_1D8], rax
.text:00000000000194DB                 mov     rax, r12
.text:00000000000194DE                 cmovge  rax, rbp
.text:00000000000194E2                 cmp     [rsp+268h+var_200], 0
.text:00000000000194E8                 mov     [rsp+268h+var_1F8], rax
.text:00000000000194ED                 mov     rax, [rsp+268h+var_230]
.text:00000000000194F2                 mov     esi, [rax+0B4h]
.text:00000000000194F8                 mov     eax, 8
.text:00000000000194FD                 mov     [rsp+268h+var_1A0], esi
.text:0000000000019504                 jz      short loc_1953F
.text:0000000000019506                 cmp     esi, 1
.text:0000000000019509                 mov     ecx, 4
.text:000000000001950E                 jz      short loc_1952E
.text:0000000000019510                 mov     rax, [rsp+268h+var_220]
.text:0000000000019515                 test    byte ptr [rax+1Ah], 40h
.text:0000000000019519                 jnz     loc_1A29E
.text:000000000001951F                 cmp     [rsp+268h+var_1B8], 0
.text:0000000000019528                 jnz     loc_1A29E
.text:000000000001952E
.text:000000000001952E loc_1952E:                              ; CODE XREF: re_search_internal+44E↑j
.text:000000000001952E                                         ; re_search_internal+11E0↓j
.text:000000000001952E                 xor     edx, edx
.text:0000000000019530                 cmp     rbp, r12
.text:0000000000019533                 movzx   eax, bl
.text:0000000000019536                 setle   dl
.text:0000000000019539                 or      eax, ecx
.text:000000000001953B                 add     edx, edx
.text:000000000001953D                 or      eax, edx
.text:000000000001953F
.text:000000000001953F loc_1953F:                              ; CODE XREF: re_search_internal+444↑j
.text:000000000001953F                 cmp     rbp, [rsp+268h+var_1F8]
.text:0000000000019544                 setnle  cl
.text:0000000000019547                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000001954F                 setl    dl
.text:0000000000019552                 or      cl, dl
.text:0000000000019554                 jnz     loc_1A029
.text:000000000001955A                 lea     rcx, [rsp+268h+var_190]
.text:0000000000019562                 cmp     rbp, r12
.text:0000000000019565                 mov     edx, 0
.text:000000000001956A                 cmovle  rdx, rcx
.text:000000000001956E                 test    rdx, rdx
.text:0000000000019571                 mov     [rsp+268h+var_1A8], rdx
.text:0000000000019579                 setnz   [rsp+268h+var_199]
.text:0000000000019581                 sub     eax, 4
.text:0000000000019584                 mov     [rsp+268h+var_1C0], eax
.text:000000000001958B                 lea     rax, [rsp+268h+var_198]
.text:0000000000019593                 mov     [rsp+268h+var_240], rax
.text:0000000000019598
.text:0000000000019598 loc_19598:                              ; CODE XREF: re_search_internal+F63↓j
.text:0000000000019598                 mov     eax, [rsp+268h+var_1C0]
.text:000000000001959F                 cmp     eax, 4          ; switch 5 cases
.text:00000000000195A2                 ja      def_195B6       ; jumptable 00000000000195B6 default case
.text:00000000000195A8                 lea     rcx, jpt_195B6
.text:00000000000195AF                 movsxd  rax, ds:(jpt_195B6 - 228E0h)[rcx+rax*4]
.text:00000000000195B3                 add     rax, rcx
.text:00000000000195B6                 jmp     rax             ; switch jump
.text:00000000000195B6 ; ---------------------------------------------------------------------------
.text:00000000000195B8                 align 20h
.text:00000000000195C0
.text:00000000000195C0 loc_195C0:                              ; CODE XREF: re_search_internal+179↑j
.text:00000000000195C0                 mov     rax, [rsp+268h+var_230]
.text:00000000000195C5                 cmp     qword ptr [rax+98h], 0
.text:00000000000195CD                 setnz   al
.text:00000000000195D0                 movzx   eax, al
.text:00000000000195D3                 mov     [rsp+268h+var_210], eax
.text:00000000000195D7                 jmp     loc_1923F
.text:00000000000195D7 ; ---------------------------------------------------------------------------
.text:00000000000195DC                 align 20h
.text:00000000000195E0
.text:00000000000195E0 loc_195E0:                              ; CODE XREF: re_search_internal+8B↑j
.text:00000000000195E0                                         ; re_search_internal+94↑j
.text:00000000000195E0                 mov     [rsp+268h+var_200], 0
.text:00000000000195E9                 jmp     loc_19166
.text:00000000000195EE ; ---------------------------------------------------------------------------
.text:00000000000195EE
.text:00000000000195EE loc_195EE:                              ; CODE XREF: re_search_internal+4F6↑j
.text:00000000000195EE                                         ; DATA XREF: .rodata:jpt_195B6↓o
.text:00000000000195EE                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 00000000000195B6 case 2
.text:00000000000195F3                 jle     short loc_1964F
.text:00000000000195F5                 mov     rax, [rsp+268h+var_1F0]
.text:00000000000195FA                 mov     rdi, [rsp+268h+var_200]
.text:00000000000195FF                 movzx   edx, byte ptr [rax+rbp]
.text:0000000000019603                 lea     rax, [rbp+1]
.text:0000000000019607                 cmp     byte ptr [rdi+rdx], 0
.text:000000000001960B                 jnz     loc_19698       ; jumptable 00000000000195B6 case 4
.text:0000000000019611                 mov     rsi, [rsp+268h+var_200]
.text:0000000000019616                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000001961B                 mov     rdi, [rsp+268h+var_1F0]
.text:0000000000019620                 jmp     short loc_1963A
.text:0000000000019620 ; ---------------------------------------------------------------------------
.text:0000000000019622                 align 8
.text:0000000000019628
.text:0000000000019628 loc_19628:                              ; CODE XREF: re_search_internal+580↓j
.text:0000000000019628                 movzx   edx, byte ptr [rdi+rax]
.text:000000000001962C                 lea     rax, [rax+1]
.text:0000000000019630                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000019634                 jnz     loc_1A7D1
.text:000000000001963A
.text:000000000001963A loc_1963A:                              ; CODE XREF: re_search_internal+560↑j
.text:000000000001963A                 cmp     rcx, rax
.text:000000000001963D                 mov     rbp, rax
.text:0000000000019640                 jnz     short loc_19628
.text:0000000000019642
.text:0000000000019642 loc_19642:                              ; CODE XREF: re_search_internal+ABF↓j
.text:0000000000019642                 mov     rax, [rsp+268h+var_1F8]
.text:0000000000019647                 mov     [rsp+268h+var_190], rax
.text:000000000001964F
.text:000000000001964F loc_1964F:                              ; CODE XREF: re_search_internal+533↑j
.text:000000000001964F                                         ; re_search_internal+A57↓j
.text:000000000001964F                 cmp     [rsp+268h+var_1F8], rbp
.text:0000000000019654                 jnz     short loc_19698 ; jumptable 00000000000195B6 case 4
.text:0000000000019656                 xor     eax, eax
.text:0000000000019658                 mov     rsi, [rsp+268h+var_1F8]
.text:000000000001965D                 cmp     [rsp+268h+var_1E0], rsi
.text:0000000000019665                 jle     short loc_19670
.text:0000000000019667                 mov     rax, [rsp+268h+var_1F0]
.text:000000000001966C                 movzx   eax, byte ptr [rax+rsi]
.text:0000000000019670
.text:0000000000019670 loc_19670:                              ; CODE XREF: re_search_internal+5A5↑j
.text:0000000000019670                 mov     rsi, [rsp+268h+var_1B8]
.text:0000000000019678                 test    rsi, rsi
.text:000000000001967B                 jz      short loc_19681
.text:000000000001967D                 movzx   eax, byte ptr [rsi+rax]
.text:0000000000019681
.text:0000000000019681 loc_19681:                              ; CODE XREF: re_search_internal+5BB↑j
.text:0000000000019681                 mov     rdi, [rsp+268h+var_200]
.text:0000000000019686                 cmp     byte ptr [rdi+rax], 0
.text:000000000001968A                 jz      loc_1A029
.text:0000000000019690                 mov     rbp, [rsp+268h+var_1F8]
.text:0000000000019695                 nop     dword ptr [rax]
.text:0000000000019698
.text:0000000000019698 loc_19698:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000019698                                         ; re_search_internal+54B↑j ...
.text:0000000000019698                 mov     edx, [rsp+268h+arg_10] ; jumptable 00000000000195B6 case 4
.text:000000000001969F                 mov     rdi, [rsp+268h+var_268]
.text:00000000000196A3                 mov     rsi, rbp
.text:00000000000196A6                 call    re_string_reconstruct
.text:00000000000196AB                 test    eax, eax
.text:00000000000196AD                 mov     [rsp+268h+var_20C], eax
.text:00000000000196B1                 jnz     loc_19C10
.text:00000000000196B7                 cmp     [rsp+268h+var_1A0], 1
.text:00000000000196BF                 jz      short loc_196DD
.text:00000000000196C1                 cmp     [rsp+268h+var_118], 0
.text:00000000000196CA                 jz      short loc_196DD
.text:00000000000196CC                 mov     rax, [rsp+268h+var_138]
.text:00000000000196D4                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:00000000000196D7                 jz      loc_1A001
.text:00000000000196DD
.text:00000000000196DD loc_196DD:                              ; CODE XREF: re_search_internal+5FF↑j
.text:00000000000196DD                                         ; re_search_internal+60A↑j
.text:00000000000196DD                 mov     rbx, [rsp+268h+var_B0]
.text:00000000000196E5                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:00000000000196EA                 mov     [rsp+268h+var_68], 0
.text:00000000000196F5                 mov     [rsp+268h+var_80], 0
.text:0000000000019701                 mov     [rsp+268h+var_88], 0
.text:000000000001970D                 mov     [rsp+268h+var_198], 0
.text:0000000000019718                 mov     r14, [rbx+48h]
.text:000000000001971C                 and     eax, 1
.text:000000000001971F                 mov     [rsp+268h+var_19A], al
.text:0000000000019726                 mov     rax, [rsp+268h+var_100]
.text:000000000001972E                 cmp     byte ptr [r14+68h], 0
.text:0000000000019733                 mov     [rsp+268h+var_260], rax
.text:0000000000019738                 js      loc_1A0B0
.text:000000000001973E
.text:000000000001973E loc_1973E:                              ; CODE XREF: re_search_internal+1013↓j
.text:000000000001973E                                         ; re_search_internal+1177↓j ...
.text:000000000001973E                 mov     rax, [rsp+268h+var_90]
.text:0000000000019746                 test    rax, rax
.text:0000000000019749                 jz      short loc_19762
.text:000000000001974B                 cmp     qword ptr [rbx+98h], 0
.text:0000000000019753                 mov     rdi, [rsp+268h+var_260]
.text:0000000000019758                 mov     [rax+rdi*8], r14
.text:000000000001975C                 jnz     loc_1A64B
.text:0000000000019762
.text:0000000000019762 loc_19762:                              ; CODE XREF: re_search_internal+689↑j
.text:0000000000019762                 movzx   eax, [rsp+268h+var_199]
.text:000000000001976A                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000001976E                 movzx   eax, byte ptr [r14+68h]
.text:0000000000019773
.text:0000000000019773 loc_19773:                              ; CODE XREF: re_search_internal+15C1↓j
.text:0000000000019773                 test    al, 10h
.text:0000000000019775                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:000000000001977E                 mov     [rsp+268h+var_238], 0
.text:0000000000019787                 jnz     loc_1A610
.text:000000000001978D
.text:000000000001978D loc_1978D:                              ; CODE XREF: re_search_internal+1576↓j
.text:000000000001978D                                         ; re_search_internal+15E4↓j
.text:000000000001978D                 mov     rax, [rsp+268h+var_1A8]
.text:0000000000019795                 mov     r8, [rsp+268h+var_100]
.text:000000000001979D                 mov     [rsp+268h+var_218], rax
.text:00000000000197A2                 lea     rax, [rsp+268h+var_188]
.text:00000000000197AA                 mov     [rsp+268h+var_208], rax
.text:00000000000197AF                 lea     rax, [rsp+268h+var_194]
.text:00000000000197B7                 mov     [rsp+268h+var_1E8], rax
.text:00000000000197BF                 jmp     short loc_1981C
.text:00000000000197BF ; ---------------------------------------------------------------------------
.text:00000000000197C1                 align 8
.text:00000000000197C8
.text:00000000000197C8 loc_197C8:                              ; CODE XREF: re_search_internal+7E7↓j
.text:00000000000197C8                                         ; re_search_internal+1513↓j ...
.text:00000000000197C8                 cmp     r14, r13
.text:00000000000197CB                 mov     r8, [rsp+268h+var_100]
.text:00000000000197D3                 setz    al
.text:00000000000197D6                 and     byte ptr [rsp+268h+var_250], al
.text:00000000000197DA                 movzx   eax, byte ptr [r13+68h]
.text:00000000000197DF                 cmovz   rbx, [rsp+268h+var_260]
.text:00000000000197E5                 test    al, 10h
.text:00000000000197E7                 mov     [rsp+268h+var_260], rbx
.text:00000000000197EC                 jz      short loc_19819
.text:00000000000197EE                 test    al, al
.text:00000000000197F0                 js      loc_19CB0
.text:00000000000197F6
.text:00000000000197F6 loc_197F6:                              ; CODE XREF: re_search_internal+C17↓j
.text:00000000000197F6                 mov     eax, [rsp+268h+var_210]
.text:00000000000197FA                 mov     [rsp+268h+var_248], r8
.text:00000000000197FF                 test    eax, eax
.text:0000000000019801                 jz      loc_19926
.text:0000000000019807                 mov     [rsp+268h+var_238], 1
.text:0000000000019810                 mov     [rsp+268h+var_218], 0
.text:0000000000019819
.text:0000000000019819 loc_19819:                              ; CODE XREF: re_search_internal+72C↑j
.text:0000000000019819                                         ; re_search_internal+C11↓j
.text:0000000000019819                 mov     r14, r13
.text:000000000001981C
.text:000000000001981C loc_1981C:                              ; CODE XREF: re_search_internal+6FF↑j
.text:000000000001981C                 cmp     [rsp+268h+var_E0], r8
.text:0000000000019824                 jle     loc_19914
.text:000000000001982A                 mov     rax, [rsp+268h+var_108]
.text:0000000000019832                 lea     rbx, [r8+1]
.text:0000000000019836                 cmp     rbx, rax
.text:0000000000019839                 jge     loc_19CE0
.text:000000000001983F
.text:000000000001983F loc_1983F:                              ; CODE XREF: re_search_internal+C28↓j
.text:000000000001983F                 mov     rax, [rsp+268h+var_118]
.text:0000000000019847                 cmp     rbx, rax
.text:000000000001984A                 jge     loc_19FD0
.text:0000000000019850
.text:0000000000019850 loc_19850:                              ; CODE XREF: re_search_internal+F18↓j
.text:0000000000019850                 test    byte ptr [r14+68h], 20h
.text:0000000000019855                 jnz     loc_19D20
.text:000000000001985B
.text:000000000001985B loc_1985B:                              ; CODE XREF: re_search_internal+C56↓j
.text:000000000001985B                                         ; re_search_internal+FA6↓j
.text:000000000001985B                 lea     rax, [r8+1]
.text:000000000001985F                 mov     [rsp+268h+var_100], rax
.text:0000000000019867                 mov     rax, [rsp+268h+var_140]
.text:000000000001986F                 movzx   r13d, byte ptr [rax+r8]
.text:0000000000019874
.text:0000000000019874 loc_19874:                              ; CODE XREF: re_search_internal+1097↓j
.text:0000000000019874                 mov     rax, [r14+58h]
.text:0000000000019878                 test    rax, rax
.text:000000000001987B                 jz      loc_19F90
.text:0000000000019881                 mov     r13, [rax+r13*8]
.text:0000000000019885
.text:0000000000019885 loc_19885:                              ; CODE XREF: re_search_internal+F09↓j
.text:0000000000019885                                         ; re_search_internal+FB5↓j
.text:0000000000019885                 cmp     [rsp+268h+var_90], 0
.text:000000000001988E                 jz      short loc_198A4
.text:0000000000019890
.text:0000000000019890 loc_19890:                              ; CODE XREF: re_search_internal+FE3↓j
.text:0000000000019890                 mov     rsi, [rsp+268h+var_268]
.text:0000000000019894                 mov     rdi, [rsp+268h+var_240]
.text:0000000000019899                 mov     rdx, r13
.text:000000000001989C                 call    merge_state_with_log
.text:00000000000198A1                 mov     r13, rax
.text:00000000000198A4
.text:00000000000198A4 loc_198A4:                              ; CODE XREF: re_search_internal+7CE↑j
.text:00000000000198A4                 test    r13, r13
.text:00000000000198A7                 jnz     loc_197C8
.text:00000000000198AD                 mov     ecx, [rsp+268h+var_198]
.text:00000000000198B4                 mov     rdi, [rsp+268h+var_90]
.text:00000000000198BC                 test    ecx, ecx
.text:00000000000198BE                 jnz     loc_1A180
.text:00000000000198C4                 test    rdi, rdi
.text:00000000000198C7                 jz      short loc_19914
.text:00000000000198C9                 movzx   eax, [rsp+268h+var_19A]
.text:00000000000198D1                 xor     eax, 1
.text:00000000000198D4                 test    byte ptr [rsp+268h+var_238], al
.text:00000000000198D8                 jnz     short loc_19914
.text:00000000000198DA
.text:00000000000198DA loc_198DA:                              ; CODE XREF: re_search_internal+BE8↓j
.text:00000000000198DA                 mov     rsi, [rsp+268h+var_88]
.text:00000000000198E2                 mov     rax, [rsp+268h+var_100]
.text:00000000000198EA                 xor     ecx, ecx
.text:00000000000198EC                 jmp     short loc_19903
.text:00000000000198EC ; ---------------------------------------------------------------------------
.text:00000000000198EE                 align 10h
.text:00000000000198F0
.text:00000000000198F0 loc_198F0:                              ; CODE XREF: re_search_internal+84A↓j
.text:00000000000198F0                 cmp     qword ptr [rdi+rdx*8], 0
.text:00000000000198F5                 mov     rax, rdx
.text:00000000000198F8                 mov     ecx, 1
.text:00000000000198FD                 jnz     loc_19C70
.text:0000000000019903
.text:0000000000019903 loc_19903:                              ; CODE XREF: re_search_internal+82C↑j
.text:0000000000019903                 lea     rdx, [rax+1]
.text:0000000000019907                 cmp     rsi, rdx
.text:000000000001990A                 jge     short loc_198F0
.text:000000000001990C                 test    cl, cl
.text:000000000001990E                 jnz     loc_1A7DE
.text:0000000000019914
.text:0000000000019914 loc_19914:                              ; CODE XREF: re_search_internal+764↑j
.text:0000000000019914                                         ; re_search_internal+807↑j ...
.text:0000000000019914                 mov     rax, [rsp+268h+var_218]
.text:0000000000019919                 test    rax, rax
.text:000000000001991C                 jz      short loc_19926
.text:000000000001991E                 mov     rdi, [rsp+268h+var_260]
.text:0000000000019923                 add     [rax], rdi
.text:0000000000019926
.text:0000000000019926 loc_19926:                              ; CODE XREF: re_search_internal+741↑j
.text:0000000000019926                                         ; re_search_internal+85C↑j ...
.text:0000000000019926                 mov     rax, [rsp+268h+var_248]
.text:000000000001992B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001992F                 jz      loc_19FF0
.text:0000000000019935                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000019939                 jz      loc_1A130
.text:000000000001993F                 mov     rax, [rsp+268h+var_248]
.text:0000000000019944                 mov     [rsp+268h+var_A0], rax
.text:000000000001994C                 mov     rax, [rsp+268h+var_220]
.text:0000000000019951                 test    byte ptr [rax+38h], 10h
.text:0000000000019955                 jnz     loc_1A110
.text:000000000001995B                 cmp     [rsp+268h+arg_0], 1
.text:0000000000019964                 jbe     loc_1A25C
.text:000000000001996A                 mov     rcx, [rsp+268h+var_248]
.text:000000000001996F                 mov     rbx, [rsp+268h+var_90]
.text:0000000000019977                 mov     rdi, [rsp+268h+var_268]
.text:000000000001997B                 mov     rax, [rbx+rcx*8]
.text:000000000001997F                 mov     rsi, [rax+10h]
.text:0000000000019983                 lea     rdx, [rax+18h]
.text:0000000000019987                 call    check_halt_state_context_isra_20
.text:000000000001998C                 mov     r13, rax
.text:000000000001998F                 mov     [rsp+268h+var_98], rax
.text:0000000000019997                 mov     rax, [rsp+268h+var_230]
.text:000000000001999C                 test    byte ptr [rax+0B0h], 1
.text:00000000000199A3                 jnz     short loc_199C0
.text:00000000000199A5                 mov     rax, [rsp+268h+var_230]
.text:00000000000199AA                 cmp     qword ptr [rax+98h], 0
.text:00000000000199B2                 jz      loc_1A34C
.text:00000000000199B8
.text:00000000000199B8 loc_199B8:                              ; CODE XREF: re_search_internal+11D9↓j
.text:00000000000199B8                 mov     r13, [rsp+268h+var_98]
.text:00000000000199C0
.text:00000000000199C0 loc_199C0:                              ; CODE XREF: re_search_internal+8E3↑j
.text:00000000000199C0                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:00000000000199CA                 cmp     [rsp+268h+var_248], rsi
.text:00000000000199CF                 mov     r15, [rsp+268h+var_B0]
.text:00000000000199D7                 ja      loc_1A63B
.text:00000000000199DD                 mov     rax, [rsp+268h+var_248]
.text:00000000000199E2                 add     rax, 1
.text:00000000000199E6                 lea     rbx, ds:0[rax*8]
.text:00000000000199EE                 mov     [rsp+268h+var_260], rax
.text:00000000000199F3                 mov     rdi, rbx        ; size
.text:00000000000199F6                 call    _malloc
.text:00000000000199FB                 test    rax, rax
.text:00000000000199FE                 mov     r12, rax
.text:0000000000019A01                 jz      loc_1A130
.text:0000000000019A07                 cmp     qword ptr [r15+98h], 0
.text:0000000000019A0F                 jz      loc_1A2A5
.text:0000000000019A15                 mov     rdi, rbx        ; size
.text:0000000000019A18                 call    _malloc
.text:0000000000019A1D                 test    rax, rax
.text:0000000000019A20                 mov     rbp, rax
.text:0000000000019A23                 jz      loc_1A128
.text:0000000000019A29                 mov     r14, [rsp+268h+var_248]
.text:0000000000019A2E                 lea     rbx, [rsp+268h+var_188]
.text:0000000000019A36                 mov     [rsp+268h+var_258], r15
.text:0000000000019A3B                 mov     [rsp+268h+var_250], rax
.text:0000000000019A40
.text:0000000000019A40 loc_19A40:                              ; CODE XREF: re_search_internal+A4D↓j
.text:0000000000019A40                 mov     rax, [rsp+268h+var_260]
.text:0000000000019A45                 xor     esi, esi        ; c
.text:0000000000019A47                 mov     rdi, rbp        ; s
.text:0000000000019A4A                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000019A52                 call    _memset
.text:0000000000019A57                 pxor    xmm0, xmm0
.text:0000000000019A5B                 mov     qword ptr [rsp+268h+var_188], r12
.text:0000000000019A63                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:0000000000019A6B                 mov     [rsp+268h+var_178], r13
.text:0000000000019A73                 mov     rsi, rbx
.text:0000000000019A76                 mov     [rsp+268h+var_170], r14
.text:0000000000019A7E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019A82                 movaps  xmmword ptr [rbx+20h], xmm0
.text:0000000000019A86                 mov     qword ptr [rbx+30h], 0
.text:0000000000019A8E                 call    sift_states_backward
.text:0000000000019A93                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:0000000000019A9B                 mov     r15d, eax
.text:0000000000019A9E                 call    free
.text:0000000000019AA3                 test    r15d, r15d
.text:0000000000019AA6                 jnz     loc_1A6C4
.text:0000000000019AAC                 cmp     qword ptr [r12], 0
.text:0000000000019AB1                 jnz     loc_1A723
.text:0000000000019AB7                 cmp     qword ptr [rbp+0], 0
.text:0000000000019ABC                 jnz     loc_1A723
.text:0000000000019AC2                 mov     rdx, [rsp+268h+var_90]
.text:0000000000019ACA                 nop     word ptr [rax+rax+00h]
.text:0000000000019AD0
.text:0000000000019AD0 loc_19AD0:                              ; CODE XREF: re_search_internal+A25↓j
.text:0000000000019AD0                                         ; re_search_internal+A2B↓j
.text:0000000000019AD0                 sub     r14, 1
.text:0000000000019AD4                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000019AD8                 jz      loc_1A59B
.text:0000000000019ADE                 mov     rax, [rdx+r14*8]
.text:0000000000019AE2                 test    rax, rax
.text:0000000000019AE5                 jz      short loc_19AD0
.text:0000000000019AE7                 test    byte ptr [rax+68h], 10h
.text:0000000000019AEB                 jz      short loc_19AD0
.text:0000000000019AED                 mov     rsi, [rax+10h]
.text:0000000000019AF1                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019AF5                 lea     rdx, [rax+18h]
.text:0000000000019AF9                 mov     rcx, r14
.text:0000000000019AFC                 call    check_halt_state_context_isra_20
.text:0000000000019B01                 mov     r13, rax
.text:0000000000019B04                 lea     rax, [r14+1]
.text:0000000000019B08                 mov     [rsp+268h+var_260], rax
.text:0000000000019B0D                 jmp     loc_19A40
.text:0000000000019B12 ; ---------------------------------------------------------------------------
.text:0000000000019B12
.text:0000000000019B12 loc_19B12:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000019B12                                         ; DATA XREF: .rodata:jpt_195B6↓o
.text:0000000000019B12                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 00000000000195B6 case 3
.text:0000000000019B17                 jle     loc_1964F
.text:0000000000019B1D                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000019B22                 mov     rdi, [rsp+268h+var_1B8]
.text:0000000000019B2A                 mov     rsi, [rsp+268h+var_200]
.text:0000000000019B2F                 movzx   eax, byte ptr [rax+rbp]
.text:0000000000019B33                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000019B37                 lea     rax, [rbp+1]
.text:0000000000019B3B                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000019B3F                 jnz     loc_19698       ; jumptable 00000000000195B6 case 4
.text:0000000000019B45                 mov     rsi, [rsp+268h+var_200]
.text:0000000000019B4A                 mov     rdi, [rsp+268h+var_1B8]
.text:0000000000019B52                 mov     rcx, [rsp+268h+var_1F8]
.text:0000000000019B57                 mov     r8, [rsp+268h+var_1F0]
.text:0000000000019B5C                 jmp     short loc_19B77
.text:0000000000019B5C ; ---------------------------------------------------------------------------
.text:0000000000019B5E                 align 20h
.text:0000000000019B60
.text:0000000000019B60 loc_19B60:                              ; CODE XREF: re_search_internal+ABD↓j
.text:0000000000019B60                 movzx   eax, byte ptr [r8+rax]
.text:0000000000019B65                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000019B69                 lea     rax, [rbp+1]
.text:0000000000019B6D                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000019B71                 jnz     loc_1A7D1
.text:0000000000019B77
.text:0000000000019B77 loc_19B77:                              ; CODE XREF: re_search_internal+A9C↑j
.text:0000000000019B77                 cmp     rcx, rax
.text:0000000000019B7A                 mov     rbp, rax
.text:0000000000019B7D                 jnz     short loc_19B60
.text:0000000000019B7F                 jmp     loc_19642
.text:0000000000019B84 ; ---------------------------------------------------------------------------
.text:0000000000019B84
.text:0000000000019B84 loc_19B84:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000019B84                                         ; DATA XREF: .rodata:jpt_195B6↓o
.text:0000000000019B84                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 00000000000195B6 cases 0,1
.text:0000000000019B8C                 jg      loc_1A029
.text:0000000000019B92                 xor     ecx, ecx
.text:0000000000019B94                 mov     rax, rbp
.text:0000000000019B97                 mov     rdi, [rsp+268h+var_200]
.text:0000000000019B9C                 mov     rsi, [rsp+268h+var_1B8]
.text:0000000000019BA4                 mov     r9, [rsp+268h+var_1D8]
.text:0000000000019BAC                 mov     r10, [rsp+268h+var_1F0]
.text:0000000000019BB1                 mov     r8, [rsp+268h+var_1E0]
.text:0000000000019BB9                 jmp     short loc_19BD2
.text:0000000000019BB9 ; ---------------------------------------------------------------------------
.text:0000000000019BBB                 align 20h
.text:0000000000019BC0
.text:0000000000019BC0 loc_19BC0:                              ; CODE XREF: re_search_internal+B2B↓j
.text:0000000000019BC0                 sub     rax, 1
.text:0000000000019BC4                 mov     ecx, 1
.text:0000000000019BC9                 cmp     rax, r9
.text:0000000000019BCC                 jl      loc_1A5B0
.text:0000000000019BD2
.text:0000000000019BD2 loc_19BD2:                              ; CODE XREF: re_search_internal+AF9↑j
.text:0000000000019BD2                 xor     edx, edx
.text:0000000000019BD4                 cmp     r8, rax
.text:0000000000019BD7                 jle     short loc_19BDE
.text:0000000000019BD9                 movzx   edx, byte ptr [r10+rax]
.text:0000000000019BDE
.text:0000000000019BDE loc_19BDE:                              ; CODE XREF: re_search_internal+B17↑j
.text:0000000000019BDE                 test    rsi, rsi
.text:0000000000019BE1                 jz      short loc_19BE7
.text:0000000000019BE3                 movzx   edx, byte ptr [rsi+rdx]
.text:0000000000019BE7
.text:0000000000019BE7 loc_19BE7:                              ; CODE XREF: re_search_internal+B21↑j
.text:0000000000019BE7                 cmp     byte ptr [rdi+rdx], 0
.text:0000000000019BEB                 jz      short loc_19BC0
.text:0000000000019BED                 test    cl, cl
.text:0000000000019BEF                 jz      loc_19698       ; jumptable 00000000000195B6 case 4
.text:0000000000019BF5                 mov     [rsp+268h+var_190], rax
.text:0000000000019BFD                 mov     rbp, rax
.text:0000000000019C00                 jmp     loc_19698       ; jumptable 00000000000195B6 case 4
.text:0000000000019C00 ; ---------------------------------------------------------------------------
.text:0000000000019C05                 align 8
.text:0000000000019C08
.text:0000000000019C08 loc_19C08:                              ; CODE XREF: re_search_internal+1162↓j
.text:0000000000019C08                 mov     [rsp+268h+var_20C], eax
.text:0000000000019C0C                 nop     dword ptr [rax+00h]
.text:0000000000019C10
.text:0000000000019C10 loc_19C10:                              ; CODE XREF: re_search_internal+256↑j
.text:0000000000019C10                                         ; re_search_internal+5F1↑j ...
.text:0000000000019C10                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:0000000000019C18
.text:0000000000019C18 loc_19C18:                              ; CODE XREF: re_search_internal+F79↓j
.text:0000000000019C18                                         ; re_search_internal+1080↓j ...
.text:0000000000019C18                 call    free
.text:0000000000019C1D                 mov     rax, [rsp+268h+var_230]
.text:0000000000019C22                 cmp     qword ptr [rax+98h], 0
.text:0000000000019C2A                 jnz     loc_1A550
.text:0000000000019C30
.text:0000000000019C30 loc_19C30:                              ; CODE XREF: re_search_internal+14B3↓j
.text:0000000000019C30                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019C34                 call    re_string_destruct
.text:0000000000019C39
.text:0000000000019C39 loc_19C39:                              ; CODE XREF: re_search_internal+156↑j
.text:0000000000019C39                                         ; re_search_internal+F88↓j
.text:0000000000019C39                 mov     rsi, [rsp+268h+var_40]
.text:0000000000019C41                 xor     rsi, fs:28h
.text:0000000000019C4A                 mov     eax, [rsp+268h+var_20C]
.text:0000000000019C4E                 jnz     loc_1A7EB
.text:0000000000019C54                 add     rsp, 238h
.text:0000000000019C5B                 pop     rbx
.text:0000000000019C5C                 pop     rbp
.text:0000000000019C5D                 pop     r12
.text:0000000000019C5F                 pop     r13
.text:0000000000019C61                 pop     r14
.text:0000000000019C63                 pop     r15
.text:0000000000019C65                 retn
.text:0000000000019C65 ; ---------------------------------------------------------------------------
.text:0000000000019C66                 align 10h
.text:0000000000019C70
.text:0000000000019C70 loc_19C70:                              ; CODE XREF: re_search_internal+83D↑j
.text:0000000000019C70                 mov     rsi, [rsp+268h+var_268]
.text:0000000000019C74                 mov     rdi, [rsp+268h+var_240]
.text:0000000000019C79                 mov     [rsp+268h+var_100], rdx
.text:0000000000019C81                 xor     edx, edx
.text:0000000000019C83                 call    merge_state_with_log
.text:0000000000019C88                 mov     edx, [rsp+268h+var_198]
.text:0000000000019C8F                 test    edx, edx
.text:0000000000019C91                 jnz     loc_1A5CD
.text:0000000000019C97                 test    rax, rax
.text:0000000000019C9A                 jnz     loc_1A5E0
.text:0000000000019CA0                 mov     rdi, [rsp+268h+var_90]
.text:0000000000019CA8                 jmp     loc_198DA
.text:0000000000019CA8 ; ---------------------------------------------------------------------------
.text:0000000000019CAD                 align 10h
.text:0000000000019CB0
.text:0000000000019CB0 loc_19CB0:                              ; CODE XREF: re_search_internal+730↑j
.text:0000000000019CB0                 mov     rsi, [r13+10h]
.text:0000000000019CB4                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019CB8                 lea     rdx, [r13+18h]
.text:0000000000019CBC                 mov     rcx, r8
.text:0000000000019CBF                 mov     [rsp+268h+var_258], r8
.text:0000000000019CC4                 call    check_halt_state_context_isra_20
.text:0000000000019CC9                 test    rax, rax
.text:0000000000019CCC                 mov     r8, [rsp+268h+var_258]
.text:0000000000019CD1                 jz      loc_19819
.text:0000000000019CD7                 jmp     loc_197F6
.text:0000000000019CD7 ; ---------------------------------------------------------------------------
.text:0000000000019CDC                 align 20h
.text:0000000000019CE0
.text:0000000000019CE0 loc_19CE0:                              ; CODE XREF: re_search_internal+779↑j
.text:0000000000019CE0                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000019CE8                 jge     loc_1983F
.text:0000000000019CEE
.text:0000000000019CEE loc_19CEE:                              ; CODE XREF: re_search_internal+F1E↓j
.text:0000000000019CEE                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019CF2                 lea     esi, [rbx+1]
.text:0000000000019CF5                 call    extend_buffers
.text:0000000000019CFA                 test    eax, eax
.text:0000000000019CFC                 mov     [rsp+268h+var_198], eax
.text:0000000000019D03                 jnz     loc_1A5E8
.text:0000000000019D09                 test    byte ptr [r14+68h], 20h
.text:0000000000019D0E                 mov     r8, [rsp+268h+var_100]
.text:0000000000019D16                 jz      loc_1985B
.text:0000000000019D1C                 nop     dword ptr [rax+00h]
.text:0000000000019D20
.text:0000000000019D20 loc_19D20:                              ; CODE XREF: re_search_internal+795↑j
.text:0000000000019D20                 cmp     qword ptr [r14+10h], 0
.text:0000000000019D25                 mov     r13, [rsp+268h+var_B0]
.text:0000000000019D2D                 jle     loc_1A05B
.text:0000000000019D33                 lea     rax, [r13+0D8h]
.text:0000000000019D3A                 xor     r12d, r12d
.text:0000000000019D3D                 mov     [rsp+268h+var_1C8], rbx
.text:0000000000019D45                 mov     rbx, r12
.text:0000000000019D48                 mov     r12, r8
.text:0000000000019D4B                 mov     [rsp+268h+var_228], rax
.text:0000000000019D50                 jmp     loc_19EA8
.text:0000000000019D50 ; ---------------------------------------------------------------------------
.text:0000000000019D55                 align 8
.text:0000000000019D58
.text:0000000000019D58 loc_19D58:                              ; CODE XREF: re_search_internal+E3B↓j
.text:0000000000019D58                 test    al, 1
.text:0000000000019D5A                 jz      loc_19E9A
.text:0000000000019D60                 and     ecx, 8
.text:0000000000019D63                 jnz     loc_19E9A
.text:0000000000019D69
.text:0000000000019D69 loc_19D69:                              ; CODE XREF: re_search_internal+E44↓j
.text:0000000000019D69                                         ; re_search_internal+E4C↓j
.text:0000000000019D69                 test    dl, 20h
.text:0000000000019D6C                 jz      short loc_19D76
.text:0000000000019D6E                 test    al, 2
.text:0000000000019D70                 jz      loc_19E9A
.text:0000000000019D76
.text:0000000000019D76 loc_19D76:                              ; CODE XREF: re_search_internal+CAC↑j
.text:0000000000019D76                 and     edx, 80h
.text:0000000000019D7C                 jz      short loc_19D90
.text:0000000000019D7E                 test    al, 8
.text:0000000000019D80                 jz      loc_19E9A
.text:0000000000019D86                 db      2Eh
.text:0000000000019D86                 nop     word ptr [rax+rax+00000000h]
.text:0000000000019D90
.text:0000000000019D90 loc_19D90:                              ; CODE XREF: re_search_internal+CBC↑j
.text:0000000000019D90                                         ; re_search_internal+E11↓j
.text:0000000000019D90                 mov     rcx, [rsp+268h+var_268]
.text:0000000000019D94                 mov     rsi, [rsp+268h+var_228]
.text:0000000000019D99                 mov     r8, r12
.text:0000000000019D9C                 mov     rdx, r15
.text:0000000000019D9F                 mov     rdi, rbp
.text:0000000000019DA2                 call    check_node_accept_bytes_isra_31
.text:0000000000019DA7                 test    eax, eax
.text:0000000000019DA9                 jz      loc_19E92
.text:0000000000019DAF                 movsxd  rbp, eax
.text:0000000000019DB2                 add     rbp, [rsp+268h+var_100]
.text:0000000000019DBA                 cmp     [rsp+268h+var_68], eax
.text:0000000000019DC1                 cmovge  eax, [rsp+268h+var_68]
.text:0000000000019DC9                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019DCD                 mov     rsi, rbp
.text:0000000000019DD0                 mov     [rsp+268h+var_68], eax
.text:0000000000019DD7                 call    clean_state_log_if_needed
.text:0000000000019DDC                 test    eax, eax
.text:0000000000019DDE                 mov     [rsp+268h+var_194], eax
.text:0000000000019DE5                 jnz     loc_1A080
.text:0000000000019DEB                 mov     rax, [r13+18h]
.text:0000000000019DEF                 lea     r12, ds:0[rbp*8]
.text:0000000000019DF7                 mov     rax, [rax+r15*8]
.text:0000000000019DFB                 mov     r15, [rsp+268h+var_90]
.text:0000000000019E03                 lea     rdx, [rax+rax*2]
.text:0000000000019E07                 mov     rax, [r13+30h]
.text:0000000000019E0B                 add     r15, r12
.text:0000000000019E0E                 lea     rdx, [rax+rdx*8]
.text:0000000000019E12                 mov     rax, [r15]
.text:0000000000019E15                 test    rax, rax
.text:0000000000019E18                 jz      loc_19F18
.text:0000000000019E1E                 mov     rsi, [rax+50h]
.text:0000000000019E22                 mov     rdi, [rsp+268h+var_208]
.text:0000000000019E27                 call    re_node_set_init_union
.text:0000000000019E2C                 test    eax, eax
.text:0000000000019E2E                 mov     [rsp+268h+var_194], eax
.text:0000000000019E35                 jnz     loc_1A080
.text:0000000000019E3B                 mov     edx, [rsp+268h+var_A8]
.text:0000000000019E42                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019E46                 lea     rsi, [rbp-1]
.text:0000000000019E4A                 call    re_string_context_at
.text:0000000000019E4F                 mov     rdx, [rsp+268h+var_208]
.text:0000000000019E54                 mov     rdi, [rsp+268h+var_1E8]
.text:0000000000019E5C                 mov     ecx, eax
.text:0000000000019E5E                 add     r12, [rsp+268h+var_90]
.text:0000000000019E66                 mov     rsi, r13
.text:0000000000019E69                 call    re_acquire_state_context
.text:0000000000019E6E                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:0000000000019E76                 mov     [r12], rax
.text:0000000000019E7A                 call    free
.text:0000000000019E7F                 mov     rdi, [rsp+268h+var_90]
.text:0000000000019E87                 cmp     qword ptr [rdi+rbp*8], 0
.text:0000000000019E8C                 jz      loc_19F71
.text:0000000000019E92
.text:0000000000019E92 loc_19E92:                              ; CODE XREF: re_search_internal+CE9↑j
.text:0000000000019E92                                         ; re_search_internal+EAB↓j ...
.text:0000000000019E92                 mov     r12, [rsp+268h+var_100]
.text:0000000000019E9A
.text:0000000000019E9A loc_19E9A:                              ; CODE XREF: re_search_internal+C9A↑j
.text:0000000000019E9A                                         ; re_search_internal+CA3↑j ...
.text:0000000000019E9A                 add     rbx, 1
.text:0000000000019E9E                 cmp     rbx, [r14+10h]
.text:0000000000019EA2                 jge     loc_1A050
.text:0000000000019EA8
.text:0000000000019EA8 loc_19EA8:                              ; CODE XREF: re_search_internal+C90↑j
.text:0000000000019EA8                 mov     rax, [r14+18h]
.text:0000000000019EAC                 mov     rbp, [r13+0]
.text:0000000000019EB0                 mov     r15, [rax+rbx*8]
.text:0000000000019EB4                 mov     rax, r15
.text:0000000000019EB7                 shl     rax, 4
.text:0000000000019EBB                 add     rax, rbp
.text:0000000000019EBE                 test    byte ptr [rax+0Ah], 10h
.text:0000000000019EC2                 jz      short loc_19E9A
.text:0000000000019EC4                 mov     ecx, [rax+8]
.text:0000000000019EC7                 test    ecx, 3FF00h
.text:0000000000019ECD                 mov     dword ptr [rsp+268h+var_258], ecx
.text:0000000000019ED1                 jz      loc_19D90
.text:0000000000019ED7                 mov     edx, [rsp+268h+var_A8]
.text:0000000000019EDE                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019EE2                 mov     rsi, r12
.text:0000000000019EE5                 call    re_string_context_at
.text:0000000000019EEA                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:0000000000019EEE                 shr     ecx, 8
.text:0000000000019EF1                 mov     edx, ecx
.text:0000000000019EF3                 and     dx, 3FFh
.text:0000000000019EF8                 test    cl, 4
.text:0000000000019EFB                 jnz     loc_19D58
.text:0000000000019F01                 and     ecx, 8
.text:0000000000019F04                 jz      loc_19D69
.text:0000000000019F0A                 test    al, 1
.text:0000000000019F0C                 jz      loc_19D69
.text:0000000000019F12                 jmp     short loc_19E9A
.text:0000000000019F12 ; ---------------------------------------------------------------------------
.text:0000000000019F14                 align 8
.text:0000000000019F18
.text:0000000000019F18 loc_19F18:                              ; CODE XREF: re_search_internal+D58↑j
.text:0000000000019F18                 movdqu  xmm0, xmmword ptr [rdx]
.text:0000000000019F1C                 lea     rsi, [rbp-1]
.text:0000000000019F20                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019F24                 movaps  [rsp+268h+var_188], xmm0
.text:0000000000019F2C                 mov     rax, [rdx+10h]
.text:0000000000019F30                 mov     edx, [rsp+268h+var_A8]
.text:0000000000019F37                 mov     [rsp+268h+var_178], rax
.text:0000000000019F3F                 call    re_string_context_at
.text:0000000000019F44                 mov     rdi, [rsp+268h+var_1E8]
.text:0000000000019F4C                 mov     rdx, [rsp+268h+var_208]
.text:0000000000019F51                 mov     ecx, eax
.text:0000000000019F53                 mov     rsi, r13
.text:0000000000019F56                 call    re_acquire_state_context
.text:0000000000019F5B                 mov     rdi, [rsp+268h+var_90]
.text:0000000000019F63                 mov     [r15], rax
.text:0000000000019F66                 cmp     qword ptr [rdi+rbp*8], 0
.text:0000000000019F6B                 jnz     loc_19E92
.text:0000000000019F71
.text:0000000000019F71 loc_19F71:                              ; CODE XREF: re_search_internal+DCC↑j
.text:0000000000019F71                 mov     eax, [rsp+268h+var_194]
.text:0000000000019F78                 test    eax, eax
.text:0000000000019F7A                 jz      loc_19E92
.text:0000000000019F80                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000019F88                 jmp     loc_1A090
.text:0000000000019F88 ; ---------------------------------------------------------------------------
.text:0000000000019F8D                 align 10h
.text:0000000000019F90
.text:0000000000019F90 loc_19F90:                              ; CODE XREF: re_search_internal+7BB↑j
.text:0000000000019F90                 mov     rbp, [r14+60h]
.text:0000000000019F94                 test    rbp, rbp
.text:0000000000019F97                 jz      loc_1A145
.text:0000000000019F9D                 mov     rax, [rsp+268h+var_100]
.text:0000000000019FA5                 mov     edx, [rsp+268h+var_A8]
.text:0000000000019FAC                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019FB0                 lea     rsi, [rax-1]
.text:0000000000019FB4                 call    re_string_context_at
.text:0000000000019FB9                 test    al, 1
.text:0000000000019FBB                 jz      loc_1A070
.text:0000000000019FC1                 mov     r13, [rbp+r13*8+800h]
.text:0000000000019FC9                 jmp     loc_19885
.text:0000000000019FC9 ; ---------------------------------------------------------------------------
.text:0000000000019FCE                 align 10h
.text:0000000000019FD0
.text:0000000000019FD0 loc_19FD0:                              ; CODE XREF: re_search_internal+78A↑j
.text:0000000000019FD0                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000019FD8                 jge     loc_19850
.text:0000000000019FDE                 jmp     loc_19CEE
.text:0000000000019FE3 ; ---------------------------------------------------------------------------
.text:0000000000019FE3
.text:0000000000019FE3 loc_19FE3:                              ; CODE XREF: re_search_internal+125C↓j
.text:0000000000019FE3                 mov     rdi, r12        ; ptr
.text:0000000000019FE6                 call    free
.text:0000000000019FEB                 nop     dword ptr [rax+rax+00h]
.text:0000000000019FF0
.text:0000000000019FF0 loc_19FF0:                              ; CODE XREF: re_search_internal+86F↑j
.text:0000000000019FF0                                         ; re_search_internal+14EB↓j ...
.text:0000000000019FF0                 mov     rdi, [rsp+268h+var_268]
.text:0000000000019FF4                 call    match_ctx_clean
.text:0000000000019FF9                 mov     rbp, [rsp+268h+var_190]
.text:000000000001A001
.text:000000000001A001 loc_1A001:                              ; CODE XREF: re_search_internal+617↑j
.text:000000000001A001                 movsxd  rax, [rsp+268h+var_1BC]
.text:000000000001A009                 add     rbp, rax
.text:000000000001A00C                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000001A014                 mov     [rsp+268h+var_190], rbp
.text:000000000001A01C                 jl      short loc_1A029
.text:000000000001A01E                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000001A023                 jle     loc_19598
.text:000000000001A029
.text:000000000001A029 loc_1A029:                              ; CODE XREF: re_search_internal+494↑j
.text:000000000001A029                                         ; re_search_internal+5CA↑j ...
.text:000000000001A029                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A031                 mov     [rsp+268h+var_20C], 1
.text:000000000001A039                 jmp     loc_19C18
.text:000000000001A039 ; ---------------------------------------------------------------------------
.text:000000000001A03E                 align 20h
.text:000000000001A040
.text:000000000001A040 loc_1A040:                              ; CODE XREF: re_search_internal+EE↑j
.text:000000000001A040                                         ; re_search_internal+100↑j ...
.text:000000000001A040                 mov     [rsp+268h+var_20C], 1
.text:000000000001A048                 jmp     loc_19C39
.text:000000000001A048 ; ---------------------------------------------------------------------------
.text:000000000001A04D                 align 10h
.text:000000000001A050
.text:000000000001A050 loc_1A050:                              ; CODE XREF: re_search_internal+DE2↑j
.text:000000000001A050                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000001A058                 mov     r8, r12
.text:000000000001A05B
.text:000000000001A05B loc_1A05B:                              ; CODE XREF: re_search_internal+C6D↑j
.text:000000000001A05B                 mov     [rsp+268h+var_198], 0
.text:000000000001A066                 jmp     loc_1985B
.text:000000000001A066 ; ---------------------------------------------------------------------------
.text:000000000001A06B                 align 10h
.text:000000000001A070
.text:000000000001A070 loc_1A070:                              ; CODE XREF: re_search_internal+EFB↑j
.text:000000000001A070                 mov     r13, [rbp+r13*8+0]
.text:000000000001A075                 jmp     loc_19885
.text:000000000001A075 ; ---------------------------------------------------------------------------
.text:000000000001A07A                 align 20h
.text:000000000001A080
.text:000000000001A080 loc_1A080:                              ; CODE XREF: re_search_internal+D25↑j
.text:000000000001A080                                         ; re_search_internal+D75↑j
.text:000000000001A080                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000001A088                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A090
.text:000000000001A090 loc_1A090:                              ; CODE XREF: re_search_internal+EC8↑j
.text:000000000001A090                 test    rdi, rdi
.text:000000000001A093                 mov     [rsp+268h+var_198], eax
.text:000000000001A09A                 jz      loc_1A180
.text:000000000001A0A0
.text:000000000001A0A0 loc_1A0A0:                              ; CODE XREF: re_search_internal+10B3↓j
.text:000000000001A0A0                 xor     r13d, r13d
.text:000000000001A0A3                 jmp     loc_19890
.text:000000000001A0A3 ; ---------------------------------------------------------------------------
.text:000000000001A0A8                 align 10h
.text:000000000001A0B0
.text:000000000001A0B0 loc_1A0B0:                              ; CODE XREF: re_search_internal+678↑j
.text:000000000001A0B0                 mov     edx, [rsp+268h+var_A8]
.text:000000000001A0B7                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A0BB                 lea     rsi, [rax-1]
.text:000000000001A0BF                 call    re_string_context_at
.text:000000000001A0C4                 test    al, 1
.text:000000000001A0C6                 jz      loc_1A235
.text:000000000001A0CC                 mov     r14, [rbx+50h]
.text:000000000001A0D0
.text:000000000001A0D0 loc_1A0D0:                              ; CODE XREF: re_search_internal+1197↓j
.text:000000000001A0D0                                         ; re_search_internal+15F3↓j ...
.text:000000000001A0D0                 test    r14, r14
.text:000000000001A0D3                 jnz     loc_1973E
.text:000000000001A0D9                 mov     eax, [rsp+268h+var_198]
.text:000000000001A0E0                 cmp     eax, 0Ch
.text:000000000001A0E3                 mov     [rsp+268h+var_20C], eax
.text:000000000001A0E7                 jz      loc_19C10
.text:000000000001A0ED                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000001A0F4                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001A0FB                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000001A102                 mov     edx, 435h       ; line
.text:000000000001A107                 call    ___assert_fail
.text:000000000001A107 ; ---------------------------------------------------------------------------
.text:000000000001A10C                 align 10h
.text:000000000001A110
.text:000000000001A110 loc_1A110:                              ; CODE XREF: re_search_internal+895↑j
.text:000000000001A110                 mov     rax, [rsp+268h+var_230]
.text:000000000001A115                 cmp     qword ptr [rax+98h], 0
.text:000000000001A11D                 jz      loc_1A34C
.text:000000000001A123                 jmp     loc_1A26F
.text:000000000001A128 ; ---------------------------------------------------------------------------
.text:000000000001A128
.text:000000000001A128 loc_1A128:                              ; CODE XREF: re_search_internal+963↑j
.text:000000000001A128                 mov     rdi, r12        ; ptr
.text:000000000001A12B                 call    free
.text:000000000001A130
.text:000000000001A130 loc_1A130:                              ; CODE XREF: re_search_internal+32A↑j
.text:000000000001A130                                         ; re_search_internal+360↑j ...
.text:000000000001A130                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A138                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000001A140                 jmp     loc_19C18
.text:000000000001A145 ; ---------------------------------------------------------------------------
.text:000000000001A145
.text:000000000001A145 loc_1A145:                              ; CODE XREF: re_search_internal+ED7↑j
.text:000000000001A145                 mov     rdi, [rsp+268h+var_B0]
.text:000000000001A14D                 mov     rsi, r14
.text:000000000001A150                 call    build_trtable
.text:000000000001A155                 test    al, al
.text:000000000001A157                 jnz     loc_19874
.text:000000000001A15D                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A165                 mov     [rsp+268h+var_198], 0Ch
.text:000000000001A170                 test    rdi, rdi
.text:000000000001A173                 jnz     loc_1A0A0
.text:000000000001A179                 nop     dword ptr [rax+00000000h]
.text:000000000001A180
.text:000000000001A180 loc_1A180:                              ; CODE XREF: re_search_internal+3CF↑j
.text:000000000001A180                                         ; re_search_internal+7FE↑j ...
.text:000000000001A180                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000001A188                 jmp     loc_19C18
.text:000000000001A18D ; ---------------------------------------------------------------------------
.text:000000000001A18D
.text:000000000001A18D def_195B6:                              ; CODE XREF: re_search_internal+4E2↑j
.text:000000000001A18D                 mov     rbx, [rsp+268h+var_200] ; jumptable 00000000000195B6 default case
.text:000000000001A192                 mov     r13d, [rsp+268h+var_1BC]
.text:000000000001A19A                 mov     r14, [rsp+268h+var_1D8]
.text:000000000001A1A2                 mov     r15, [rsp+268h+var_1F8]
.text:000000000001A1A7                 mov     r12, [rsp+268h+var_1E0]
.text:000000000001A1AF                 jmp     short loc_1A1F8
.text:000000000001A1AF ; ---------------------------------------------------------------------------
.text:000000000001A1B1                 align 8
.text:000000000001A1B8
.text:000000000001A1B8 loc_1A1B8:                              ; CODE XREF: re_search_internal+114B↓j
.text:000000000001A1B8                                         ; re_search_internal+1173↓j
.text:000000000001A1B8                 cmp     r12, rbp
.text:000000000001A1BB                 mov     rax, rbx
.text:000000000001A1BE                 jle     short loc_1A1CF
.text:000000000001A1C0                 mov     rax, [rsp+268h+var_140]
.text:000000000001A1C8                 movzx   eax, byte ptr [rax+rdx]
.text:000000000001A1CC                 add     rax, rbx
.text:000000000001A1CF
.text:000000000001A1CF loc_1A1CF:                              ; CODE XREF: re_search_internal+10FE↑j
.text:000000000001A1CF                 cmp     byte ptr [rax], 0
.text:000000000001A1D2                 jnz     loc_19698       ; jumptable 00000000000195B6 case 4
.text:000000000001A1D8                 movsxd  rax, r13d
.text:000000000001A1DB                 add     rbp, rax
.text:000000000001A1DE                 cmp     rbp, r14
.text:000000000001A1E1                 mov     [rsp+268h+var_190], rbp
.text:000000000001A1E9                 jl      loc_1A029
.text:000000000001A1EF                 cmp     rbp, r15
.text:000000000001A1F2                 jg      loc_1A029
.text:000000000001A1F8
.text:000000000001A1F8 loc_1A1F8:                              ; CODE XREF: re_search_internal+10EF↑j
.text:000000000001A1F8                 mov     rdx, rbp
.text:000000000001A1FB                 sub     rdx, [rsp+268h+var_120]
.text:000000000001A203                 cmp     [rsp+268h+var_110], rdx
.text:000000000001A20B                 ja      short loc_1A1B8
.text:000000000001A20D                 mov     edx, [rsp+268h+arg_10]
.text:000000000001A214                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A218                 mov     rsi, rbp
.text:000000000001A21B                 call    re_string_reconstruct
.text:000000000001A220                 test    eax, eax
.text:000000000001A222                 jnz     loc_19C08
.text:000000000001A228                 mov     rdx, rbp
.text:000000000001A22B                 sub     rdx, [rsp+268h+var_120]
.text:000000000001A233                 jmp     short loc_1A1B8
.text:000000000001A235 ; ---------------------------------------------------------------------------
.text:000000000001A235
.text:000000000001A235 loc_1A235:                              ; CODE XREF: re_search_internal+1006↑j
.text:000000000001A235                 test    eax, eax
.text:000000000001A237                 jz      loc_1973E
.text:000000000001A23D                 mov     edx, eax
.text:000000000001A23F                 and     edx, 6
.text:000000000001A242                 cmp     edx, 6
.text:000000000001A245                 jz      loc_1A6AF
.text:000000000001A24B                 test    al, 2
.text:000000000001A24D                 jz      loc_1A700
.text:000000000001A253                 mov     r14, [rbx+58h]
.text:000000000001A257                 jmp     loc_1A0D0
.text:000000000001A25C ; ---------------------------------------------------------------------------
.text:000000000001A25C
.text:000000000001A25C loc_1A25C:                              ; CODE XREF: re_search_internal+8A4↑j
.text:000000000001A25C                 mov     rax, [rsp+268h+var_230]
.text:000000000001A261                 cmp     qword ptr [rax+98h], 0
.text:000000000001A269                 jz      loc_1A34C
.text:000000000001A26F
.text:000000000001A26F loc_1A26F:                              ; CODE XREF: re_search_internal+1063↑j
.text:000000000001A26F                 mov     rcx, [rsp+268h+var_248]
.text:000000000001A274                 mov     rbx, [rsp+268h+var_90]
.text:000000000001A27C                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A280                 mov     rax, [rbx+rcx*8]
.text:000000000001A284                 mov     rsi, [rax+10h]
.text:000000000001A288                 lea     rdx, [rax+18h]
.text:000000000001A28C                 call    check_halt_state_context_isra_20
.text:000000000001A291                 mov     [rsp+268h+var_98], rax
.text:000000000001A299                 jmp     loc_199B8
.text:000000000001A29E ; ---------------------------------------------------------------------------
.text:000000000001A29E
.text:000000000001A29E loc_1A29E:                              ; CODE XREF: re_search_internal+459↑j
.text:000000000001A29E                                         ; re_search_internal+468↑j
.text:000000000001A29E                 xor     ecx, ecx
.text:000000000001A2A0                 jmp     loc_1952E
.text:000000000001A2A5 ; ---------------------------------------------------------------------------
.text:000000000001A2A5
.text:000000000001A2A5 loc_1A2A5:                              ; CODE XREF: re_search_internal+94F↑j
.text:000000000001A2A5                 pxor    xmm0, xmm0
.text:000000000001A2A9                 mov     qword ptr [rsp+268h+var_188], rax
.text:000000000001A2B1                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A2B5                 mov     rax, [rsp+268h+var_248]
.text:000000000001A2BA                 lea     rbx, [rsp+268h+var_188]
.text:000000000001A2C2                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:000000000001A2CE                 mov     [rsp+268h+var_178], r13
.text:000000000001A2D6                 mov     rsi, rbx
.text:000000000001A2D9                 mov     [rsp+268h+ptr], 0
.text:000000000001A2E5                 movaps  [rsp+268h+var_168], xmm0
.text:000000000001A2ED                 mov     [rsp+268h+var_170], rax
.text:000000000001A2F5                 call    sift_states_backward
.text:000000000001A2FA                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000001A302                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000001A306                 call    free
.text:000000000001A30B                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000001A30F                 test    eax, eax
.text:000000000001A311                 jnz     loc_1A758
.text:000000000001A317                 cmp     qword ptr [r12], 0
.text:000000000001A31C                 jz      loc_19FE3
.text:000000000001A322
.text:000000000001A322 loc_1A322:                              ; CODE XREF: re_search_internal+1692↓j
.text:000000000001A322                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000001A32A                 call    free
.text:000000000001A32F                 mov     rax, [rsp+268h+var_248]
.text:000000000001A334                 mov     [rsp+268h+var_90], r12
.text:000000000001A33C                 mov     [rsp+268h+var_98], r13
.text:000000000001A344                 mov     [rsp+268h+var_A0], rax
.text:000000000001A34C
.text:000000000001A34C loc_1A34C:                              ; CODE XREF: re_search_internal+8F2↑j
.text:000000000001A34C                                         ; re_search_internal+105D↑j ...
.text:000000000001A34C                 cmp     [rsp+268h+arg_0], 0
.text:000000000001A355                 jz      loc_19C10
.text:000000000001A35B                 cmp     [rsp+268h+arg_0], 1
.text:000000000001A364                 jz      loc_1A788
.text:000000000001A36A                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000001A372                 mov     rcx, [rsp+268h+arg_0]
.text:000000000001A37A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000001A381                 shl     rcx, 4
.text:000000000001A385                 lea     rax, [rsi+10h]
.text:000000000001A389                 add     rcx, rsi
.text:000000000001A38C
.text:000000000001A38C loc_1A38C:                              ; CODE XREF: re_search_internal+12DA↓j
.text:000000000001A38C                 mov     [rax+8], rdx
.text:000000000001A390                 mov     [rax], rdx
.text:000000000001A393                 add     rax, 10h
.text:000000000001A397                 cmp     rcx, rax
.text:000000000001A39A                 jnz     short loc_1A38C
.text:000000000001A39C                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000001A3A4                 mov     rax, [rsp+268h+var_A0]
.text:000000000001A3AC                 mov     [rdi+8], rax
.text:000000000001A3B0                 mov     rax, [rsp+268h+var_220]
.text:000000000001A3B5                 mov     qword ptr [rdi], 0
.text:000000000001A3BC                 test    byte ptr [rax+38h], 10h
.text:000000000001A3C0                 jnz     loc_1A7A3
.text:000000000001A3C6                 cmp     [rsp+268h+arg_0], 1
.text:000000000001A3CF                 jz      loc_1A7A3
.text:000000000001A3D5                 mov     rax, [rsp+268h+var_230]
.text:000000000001A3DA                 xor     r8d, r8d
.text:000000000001A3DD                 test    byte ptr [rax+0B0h], 1
.text:000000000001A3E4                 jz      short loc_1A3F5
.text:000000000001A3E6                 xor     r8d, r8d
.text:000000000001A3E9                 cmp     qword ptr [rax+98h], 0
.text:000000000001A3F1                 setnle  r8b
.text:000000000001A3F5
.text:000000000001A3F5 loc_1A3F5:                              ; CODE XREF: re_search_internal+1324↑j
.text:000000000001A3F5                 mov     rbx, [rsp+268h+var_1B0]
.text:000000000001A3FD                 mov     rdx, [rsp+268h+arg_0]
.text:000000000001A405                 mov     rsi, [rsp+268h+var_268]
.text:000000000001A409                 mov     rdi, [rsp+268h+var_220]
.text:000000000001A40E                 mov     rcx, rbx
.text:000000000001A411                 call    set_regs
.text:000000000001A416                 test    eax, eax
.text:000000000001A418                 jnz     loc_1A6ED
.text:000000000001A41E                 mov     rax, [rbx]
.text:000000000001A421
.text:000000000001A421 loc_1A421:                              ; CODE XREF: re_search_internal+16E5↓j
.text:000000000001A421                 movzx   r11d, [rsp+268h+var_BC]
.text:000000000001A42A                 mov     r10, [rsp+268h+var_118]
.text:000000000001A432                 xor     ecx, ecx
.text:000000000001A434                 mov     r9, [rsp+268h+var_130]
.text:000000000001A43C                 mov     r8, [rsp+268h+var_110]
.text:000000000001A444                 mov     rdi, [rsp+268h+var_190]
.text:000000000001A44C                 mov     rdx, [rsp+268h+var_1B0]
.text:000000000001A454                 jmp     short loc_1A459
.text:000000000001A456 ; ---------------------------------------------------------------------------
.text:000000000001A456
.text:000000000001A456 loc_1A456:                              ; CODE XREF: re_search_internal+13C9↓j
.text:000000000001A456                 mov     rax, [rdx]
.text:000000000001A459
.text:000000000001A459 loc_1A459:                              ; CODE XREF: re_search_internal+1394↑j
.text:000000000001A459                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A45D                 jz      short loc_1A479
.text:000000000001A45F                 test    r11b, r11b
.text:000000000001A462                 mov     rsi, [rdx+8]
.text:000000000001A466                 jnz     loc_1A7AA
.text:000000000001A46C
.text:000000000001A46C loc_1A46C:                              ; CODE XREF: re_search_internal+16FF↓j
.text:000000000001A46C                                         ; re_search_internal+1707↓j
.text:000000000001A46C                 add     rax, rdi
.text:000000000001A46F                 add     rsi, rdi
.text:000000000001A472                 mov     [rdx], rax
.text:000000000001A475                 mov     [rdx+8], rsi
.text:000000000001A479
.text:000000000001A479 loc_1A479:                              ; CODE XREF: re_search_internal+139D↑j
.text:000000000001A479                 add     rcx, 1
.text:000000000001A47D                 add     rdx, 10h
.text:000000000001A481                 cmp     rcx, [rsp+268h+arg_0]
.text:000000000001A489                 jnz     short loc_1A456
.text:000000000001A48B                 cmp     [rsp+268h+var_1D0], 0
.text:000000000001A494                 jle     short loc_1A4D5
.text:000000000001A496                 mov     rdx, [rsp+268h+var_1D0]
.text:000000000001A49E                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000001A4A6                 mov     rax, rcx
.text:000000000001A4A9                 shl     rax, 4
.text:000000000001A4AD                 add     rdx, rcx
.text:000000000001A4B0                 lea     rax, [rdi+rax+8]
.text:000000000001A4B5                 shl     rdx, 4
.text:000000000001A4B9                 lea     rsi, [rdi+rdx+8]
.text:000000000001A4BE                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000001A4C5
.text:000000000001A4C5 loc_1A4C5:                              ; CODE XREF: re_search_internal+1413↓j
.text:000000000001A4C5                 mov     [rax-8], rdx
.text:000000000001A4C9                 mov     [rax], rdx
.text:000000000001A4CC                 add     rax, 10h
.text:000000000001A4D0                 cmp     rsi, rax
.text:000000000001A4D3                 jnz     short loc_1A4C5
.text:000000000001A4D5
.text:000000000001A4D5 loc_1A4D5:                              ; CODE XREF: re_search_internal+13D4↑j
.text:000000000001A4D5                 mov     rax, [rsp+268h+var_230]
.text:000000000001A4DA                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A4E2                 mov     r9, [rax+0E0h]
.text:000000000001A4E9                 test    r9, r9
.text:000000000001A4EC                 jz      loc_19C18
.text:000000000001A4F2                 mov     r10, [rsp+268h+var_1B0]
.text:000000000001A4FA                 xor     r8d, r8d
.text:000000000001A4FD                 lea     rdx, [r10+10h]
.text:000000000001A501                 jmp     short loc_1A539
.text:000000000001A503 ; ---------------------------------------------------------------------------
.text:000000000001A503
.text:000000000001A503 loc_1A503:                              ; CODE XREF: re_search_internal+1480↓j
.text:000000000001A503                 mov     rax, [r9+rsi*8-8]
.text:000000000001A508                 cmp     rax, r8
.text:000000000001A50B                 jz      short loc_1A532
.text:000000000001A50D                 add     rax, 1
.text:000000000001A511                 shl     rax, 4
.text:000000000001A515                 mov     rax, [r10+rax]
.text:000000000001A519                 mov     [rdx], rax
.text:000000000001A51C                 mov     rax, [r9+rsi*8-8]
.text:000000000001A521                 add     rax, 1
.text:000000000001A525                 shl     rax, 4
.text:000000000001A529                 mov     rax, [r10+rax+8]
.text:000000000001A52E                 mov     [rdx+8], rax
.text:000000000001A532
.text:000000000001A532 loc_1A532:                              ; CODE XREF: re_search_internal+144B↑j
.text:000000000001A532                 add     rdx, 10h
.text:000000000001A536                 mov     r8, rsi
.text:000000000001A539
.text:000000000001A539 loc_1A539:                              ; CODE XREF: re_search_internal+1441↑j
.text:000000000001A539                 lea     rsi, [r8+1]
.text:000000000001A53D                 cmp     rsi, rcx
.text:000000000001A540                 jnz     short loc_1A503
.text:000000000001A542                 jmp     loc_19C18
.text:000000000001A542 ; ---------------------------------------------------------------------------
.text:000000000001A547                 align 10h
.text:000000000001A550
.text:000000000001A550 loc_1A550:                              ; CODE XREF: re_search_internal+B6A↑j
.text:000000000001A550                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A554                 call    match_ctx_clean
.text:000000000001A559                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:000000000001A561                 call    free
.text:000000000001A566                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:000000000001A56E                 call    free
.text:000000000001A573                 jmp     loc_19C30
.text:000000000001A578 ; ---------------------------------------------------------------------------
.text:000000000001A578
.text:000000000001A578 loc_1A578:                              ; CODE XREF: re_search_internal+393↑j
.text:000000000001A578                 mov     rax, [rsp+268h+var_230]
.text:000000000001A57D                 test    byte ptr [rax+0B0h], 2
.text:000000000001A584                 jnz     loc_19459
.text:000000000001A58A                 mov     [rsp+268h+var_90], 0
.text:000000000001A596                 jmp     loc_19495
.text:000000000001A59B ; ---------------------------------------------------------------------------
.text:000000000001A59B
.text:000000000001A59B loc_1A59B:                              ; CODE XREF: re_search_internal+A18↑j
.text:000000000001A59B                 mov     rdi, r12        ; ptr
.text:000000000001A59E                 call    free
.text:000000000001A5A3                 mov     rdi, rbp        ; ptr
.text:000000000001A5A6                 call    free
.text:000000000001A5AB                 jmp     loc_19FF0
.text:000000000001A5B0 ; ---------------------------------------------------------------------------
.text:000000000001A5B0
.text:000000000001A5B0 loc_1A5B0:                              ; CODE XREF: re_search_internal+B0C↑j
.text:000000000001A5B0                 mov     [rsp+268h+var_190], rax
.text:000000000001A5B8                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A5C0                 mov     [rsp+268h+var_20C], 1
.text:000000000001A5C8                 jmp     loc_19C18
.text:000000000001A5CD ; ---------------------------------------------------------------------------
.text:000000000001A5CD
.text:000000000001A5CD loc_1A5CD:                              ; CODE XREF: re_search_internal+BD1↑j
.text:000000000001A5CD                 test    rax, rax
.text:000000000001A5D0                 mov     r13, rax
.text:000000000001A5D3                 jnz     loc_197C8
.text:000000000001A5D9                 jmp     loc_19914
.text:000000000001A5D9 ; ---------------------------------------------------------------------------
.text:000000000001A5DE                 align 20h
.text:000000000001A5E0
.text:000000000001A5E0 loc_1A5E0:                              ; CODE XREF: re_search_internal+BDA↑j
.text:000000000001A5E0                 mov     r13, rax
.text:000000000001A5E3                 jmp     loc_197C8
.text:000000000001A5E8 ; ---------------------------------------------------------------------------
.text:000000000001A5E8
.text:000000000001A5E8 loc_1A5E8:                              ; CODE XREF: re_search_internal+C43↑j
.text:000000000001A5E8                 cmp     eax, 0Ch
.text:000000000001A5EB                 jz      loc_1A130
.text:000000000001A5F1                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000001A5F8                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001A5FF                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000001A606                 mov     edx, 46Ch       ; line
.text:000000000001A60B                 call    ___assert_fail
.text:000000000001A610 ; ---------------------------------------------------------------------------
.text:000000000001A610
.text:000000000001A610 loc_1A610:                              ; CODE XREF: re_search_internal+6C7↑j
.text:000000000001A610                 cmp     byte ptr [r14+68h], 0
.text:000000000001A615                 js      short loc_1A686
.text:000000000001A617
.text:000000000001A617 loc_1A617:                              ; CODE XREF: re_search_internal+15EA↓j
.text:000000000001A617                 mov     esi, [rsp+268h+var_210]
.text:000000000001A61B                 mov     rax, [rsp+268h+var_260]
.text:000000000001A620                 test    esi, esi
.text:000000000001A622                 mov     [rsp+268h+var_248], rax
.text:000000000001A627                 jz      loc_19926
.text:000000000001A62D                 mov     [rsp+268h+var_238], 1
.text:000000000001A636                 jmp     loc_1978D
.text:000000000001A63B ; ---------------------------------------------------------------------------
.text:000000000001A63B
.text:000000000001A63B loc_1A63B:                              ; CODE XREF: re_search_internal+917↑j
.text:000000000001A63B                 mov     rdi, rbx
.text:000000000001A63E                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000001A646                 jmp     loc_19C18
.text:000000000001A64B ; ---------------------------------------------------------------------------
.text:000000000001A64B
.text:000000000001A64B loc_1A64B:                              ; CODE XREF: re_search_internal+69C↑j
.text:000000000001A64B                 lea     rbx, [r14+10h]
.text:000000000001A64F                 lea     rbp, [r14+18h]
.text:000000000001A653                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A657                 xor     ecx, ecx
.text:000000000001A659                 mov     rdx, rbp
.text:000000000001A65C                 mov     rsi, rbx
.text:000000000001A65F                 call    check_subexp_matching_top_isra_18
.text:000000000001A664                 test    eax, eax
.text:000000000001A666                 mov     [rsp+268h+var_198], eax
.text:000000000001A66D                 jnz     short loc_1A6B8
.text:000000000001A66F                 movzx   eax, byte ptr [r14+68h]
.text:000000000001A674                 test    al, 40h
.text:000000000001A676                 jnz     loc_1A760
.text:000000000001A67C
.text:000000000001A67C loc_1A67C:                              ; CODE XREF: re_search_internal+16C3↓j
.text:000000000001A67C                 mov     byte ptr [rsp+268h+var_250], 0
.text:000000000001A681                 jmp     loc_19773
.text:000000000001A686 ; ---------------------------------------------------------------------------
.text:000000000001A686
.text:000000000001A686 loc_1A686:                              ; CODE XREF: re_search_internal+1555↑j
.text:000000000001A686                 mov     rsi, [r14+10h]
.text:000000000001A68A                 mov     rcx, [rsp+268h+var_260]
.text:000000000001A68F                 lea     rdx, [r14+18h]
.text:000000000001A693                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A697                 call    check_halt_state_context_isra_20
.text:000000000001A69C                 test    rax, rax
.text:000000000001A69F                 mov     [rsp+268h+var_238], rax
.text:000000000001A6A4                 jz      loc_1978D
.text:000000000001A6AA                 jmp     loc_1A617
.text:000000000001A6AF ; ---------------------------------------------------------------------------
.text:000000000001A6AF
.text:000000000001A6AF loc_1A6AF:                              ; CODE XREF: re_search_internal+1185↑j
.text:000000000001A6AF                 mov     r14, [rbx+60h]
.text:000000000001A6B3                 jmp     loc_1A0D0
.text:000000000001A6B8 ; ---------------------------------------------------------------------------
.text:000000000001A6B8
.text:000000000001A6B8 loc_1A6B8:                              ; CODE XREF: re_search_internal+15AD↑j
.text:000000000001A6B8                                         ; re_search_internal+16B8↓j
.text:000000000001A6B8                 cdqe
.text:000000000001A6BA                 mov     [rsp+268h+var_248], rax
.text:000000000001A6BF                 jmp     loc_19926
.text:000000000001A6C4 ; ---------------------------------------------------------------------------
.text:000000000001A6C4
.text:000000000001A6C4 loc_1A6C4:                              ; CODE XREF: re_search_internal+9E6↑j
.text:000000000001A6C4                 mov     r14, [rsp+268h+var_250]
.text:000000000001A6C9                 mov     eax, r15d
.text:000000000001A6CC
.text:000000000001A6CC loc_1A6CC:                              ; CODE XREF: re_search_internal+169B↓j
.text:000000000001A6CC                 mov     rdi, r12        ; ptr
.text:000000000001A6CF                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000001A6D3                 call    free
.text:000000000001A6D8                 mov     rdi, r14        ; ptr
.text:000000000001A6DB                 call    free
.text:000000000001A6E0                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000001A6E4                 cmp     eax, 1
.text:000000000001A6E7                 jz      loc_19FF0
.text:000000000001A6ED
.text:000000000001A6ED loc_1A6ED:                              ; CODE XREF: re_search_internal+1358↑j
.text:000000000001A6ED                 mov     rdi, [rsp+268h+var_90]
.text:000000000001A6F5                 mov     [rsp+268h+var_20C], eax
.text:000000000001A6F9                 jmp     loc_19C18
.text:000000000001A6F9 ; ---------------------------------------------------------------------------
.text:000000000001A6FE                 align 20h
.text:000000000001A700
.text:000000000001A700 loc_1A700:                              ; CODE XREF: re_search_internal+118D↑j
.text:000000000001A700                 test    al, 4
.text:000000000001A702                 jz      loc_1973E
.text:000000000001A708                 mov     rdx, [r14+50h]
.text:000000000001A70C                 mov     rdi, [rsp+268h+var_240]
.text:000000000001A711                 mov     ecx, eax
.text:000000000001A713                 mov     rsi, rbx
.text:000000000001A716                 call    re_acquire_state_context
.text:000000000001A71B                 mov     r14, rax
.text:000000000001A71E                 jmp     loc_1A0D0
.text:000000000001A723 ; ---------------------------------------------------------------------------
.text:000000000001A723
.text:000000000001A723 loc_1A723:                              ; CODE XREF: re_search_internal+9F1↑j
.text:000000000001A723                                         ; re_search_internal+9FC↑j
.text:000000000001A723                 mov     r15, [rsp+268h+var_258]
.text:000000000001A728                 mov     rcx, [rsp+268h+var_260]
.text:000000000001A72D                 mov     rdx, rbp
.text:000000000001A730                 mov     rsi, r12
.text:000000000001A733                 mov     [rsp+268h+var_248], r14
.text:000000000001A738                 mov     rdi, r15
.text:000000000001A73B                 call    merge_state_array
.text:000000000001A740                 mov     rdi, rbp        ; ptr
.text:000000000001A743                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000001A747                 call    free
.text:000000000001A74C                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000001A750                 test    eax, eax
.text:000000000001A752                 jz      loc_1A322
.text:000000000001A758
.text:000000000001A758 loc_1A758:                              ; CODE XREF: re_search_internal+1251↑j
.text:000000000001A758                 xor     r14d, r14d
.text:000000000001A75B                 jmp     loc_1A6CC
.text:000000000001A760 ; ---------------------------------------------------------------------------
.text:000000000001A760
.text:000000000001A760 loc_1A760:                              ; CODE XREF: re_search_internal+15B6↑j
.text:000000000001A760                 mov     rdi, [rsp+268h+var_268]
.text:000000000001A764                 mov     rdx, rbp
.text:000000000001A767                 mov     rsi, rbx
.text:000000000001A76A                 call    transit_state_bkref_isra_34
.text:000000000001A76F                 test    eax, eax
.text:000000000001A771                 mov     [rsp+268h+var_198], eax
.text:000000000001A778                 jnz     loc_1A6B8
.text:000000000001A77E                 movzx   eax, byte ptr [r14+68h]
.text:000000000001A783                 jmp     loc_1A67C
.text:000000000001A788 ; ---------------------------------------------------------------------------
.text:000000000001A788
.text:000000000001A788 loc_1A788:                              ; CODE XREF: re_search_internal+12A4↑j
.text:000000000001A788                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000001A790                 mov     rax, [rsp+268h+var_A0]
.text:000000000001A798                 mov     qword ptr [rsi], 0
.text:000000000001A79F                 mov     [rsi+8], rax
.text:000000000001A7A3
.text:000000000001A7A3 loc_1A7A3:                              ; CODE XREF: re_search_internal+1300↑j
.text:000000000001A7A3                                         ; re_search_internal+130F↑j
.text:000000000001A7A3                 xor     eax, eax
.text:000000000001A7A5                 jmp     loc_1A421
.text:000000000001A7AA ; ---------------------------------------------------------------------------
.text:000000000001A7AA
.text:000000000001A7AA loc_1A7AA:                              ; CODE XREF: re_search_internal+13A6↑j
.text:000000000001A7AA                 cmp     r10, rax
.text:000000000001A7AD                 jz      short loc_1A7CC
.text:000000000001A7AF                 mov     rax, [r9+rax*8]
.text:000000000001A7B3
.text:000000000001A7B3 loc_1A7B3:                              ; CODE XREF: re_search_internal+170F↓j
.text:000000000001A7B3                 cmp     r10, rsi
.text:000000000001A7B6                 mov     [rdx], rax
.text:000000000001A7B9                 jz      short loc_1A7C4
.text:000000000001A7BB                 mov     rsi, [r9+rsi*8]
.text:000000000001A7BF                 jmp     loc_1A46C
.text:000000000001A7C4 ; ---------------------------------------------------------------------------
.text:000000000001A7C4
.text:000000000001A7C4 loc_1A7C4:                              ; CODE XREF: re_search_internal+16F9↑j
.text:000000000001A7C4                 mov     rsi, r8
.text:000000000001A7C7                 jmp     loc_1A46C
.text:000000000001A7CC ; ---------------------------------------------------------------------------
.text:000000000001A7CC
.text:000000000001A7CC loc_1A7CC:                              ; CODE XREF: re_search_internal+16ED↑j
.text:000000000001A7CC                 mov     rax, r8
.text:000000000001A7CF                 jmp     short loc_1A7B3
.text:000000000001A7D1 ; ---------------------------------------------------------------------------
.text:000000000001A7D1
.text:000000000001A7D1 loc_1A7D1:                              ; CODE XREF: re_search_internal+574↑j
.text:000000000001A7D1                                         ; re_search_internal+AB1↑j
.text:000000000001A7D1                 mov     [rsp+268h+var_190], rbp
.text:000000000001A7D9                 jmp     loc_19698       ; jumptable 00000000000195B6 case 4
.text:000000000001A7DE ; ---------------------------------------------------------------------------
.text:000000000001A7DE
.text:000000000001A7DE loc_1A7DE:                              ; CODE XREF: re_search_internal+84E↑j
.text:000000000001A7DE                 mov     [rsp+268h+var_100], rax
.text:000000000001A7E6                 jmp     loc_19914
.text:000000000001A7EB ; ---------------------------------------------------------------------------
.text:000000000001A7EB
.text:000000000001A7EB loc_1A7EB:                              ; CODE XREF: re_search_internal+B8E↑j
.text:000000000001A7EB                 call    ___stack_chk_fail
.text:000000000001A7EB ; } // starts at 190C0
.text:000000000001A7EB re_search_internal endp
.text:000000000001A7EB
.text:000000000001A7F0
.text:000000000001A7F0 ; =============== S U B R O U T I N E =======================================
.text:000000000001A7F0
.text:000000000001A7F0
.text:000000000001A7F0 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:000000000001A7F0                                         ; sift_states_backward+28F↑p
.text:000000000001A7F0
.text:000000000001A7F0 var_D0          = qword ptr -0D0h
.text:000000000001A7F0 var_C8          = qword ptr -0C8h
.text:000000000001A7F0 var_C0          = qword ptr -0C0h
.text:000000000001A7F0 var_B8          = qword ptr -0B8h
.text:000000000001A7F0 var_B0          = qword ptr -0B0h
.text:000000000001A7F0 var_A8          = qword ptr -0A8h
.text:000000000001A7F0 var_A0          = qword ptr -0A0h
.text:000000000001A7F0 var_98          = qword ptr -98h
.text:000000000001A7F0 var_90          = qword ptr -90h
.text:000000000001A7F0 var_7C          = dword ptr -7Ch
.text:000000000001A7F0 var_78          = xmmword ptr -78h
.text:000000000001A7F0 var_68          = xmmword ptr -68h
.text:000000000001A7F0 var_50          = qword ptr -50h
.text:000000000001A7F0 ptr             = qword ptr -48h
.text:000000000001A7F0 var_40          = qword ptr -40h
.text:000000000001A7F0
.text:000000000001A7F0 ; __unwind {
.text:000000000001A7F0                 push    r15
.text:000000000001A7F2                 push    r14
.text:000000000001A7F4                 mov     rax, rdi
.text:000000000001A7F7                 push    r13
.text:000000000001A7F9                 push    r12
.text:000000000001A7FB                 mov     r13, rsi
.text:000000000001A7FE                 push    rbp
.text:000000000001A7FF                 push    rbx
.text:000000000001A800                 mov     rbp, rdx
.text:000000000001A803                 mov     rbx, rcx
.text:000000000001A806                 lea     rcx, ds:0[rdx*8]
.text:000000000001A80E                 sub     rsp, 0A8h
.text:000000000001A815                 mov     r12, [rax+98h]
.text:000000000001A81C                 mov     rax, [rax+0B8h]
.text:000000000001A823                 mov     [rsp+0D8h+var_D0], rdi
.text:000000000001A828                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000001A82D                 mov     rdi, fs:28h
.text:000000000001A836                 mov     [rsp+0D8h+var_40], rdi
.text:000000000001A83E                 xor     edi, edi
.text:000000000001A840                 mov     rdx, [rax+rdx*8]
.text:000000000001A844                 mov     [rsp+0D8h+var_7C], 0
.text:000000000001A84C                 mov     rcx, [rbx+8]
.text:000000000001A850                 test    rdx, rdx
.text:000000000001A853                 jz      loc_1AAA8
.text:000000000001A859                 lea     rdi, [rdx+8]
.text:000000000001A85D                 test    rcx, rcx
.text:000000000001A860                 mov     [rsp+0D8h+var_C8], rdi
.text:000000000001A865                 jnz     short loc_1A8B8
.text:000000000001A867                 mov     rdx, [rsi]
.text:000000000001A86A                 mov     qword ptr [rdx+rbp*8], 0
.text:000000000001A872                 mov     rdx, [rax+rbp*8]
.text:000000000001A876                 xor     eax, eax
.text:000000000001A878                 test    byte ptr [rdx+68h], 40h
.text:000000000001A87C                 jnz     loc_1A95F
.text:000000000001A882                 nop     word ptr [rax+rax+00h]
.text:000000000001A888
.text:000000000001A888 loc_1A888:                              ; CODE XREF: update_cur_sifted_state+E9↓j
.text:000000000001A888                                         ; update_cur_sifted_state+112↓j ...
.text:000000000001A888                 mov     rdi, [rsp+0D8h+var_40]
.text:000000000001A890                 xor     rdi, fs:28h
.text:000000000001A899                 jnz     loc_1B03B
.text:000000000001A89F                 add     rsp, 0A8h
.text:000000000001A8A6                 pop     rbx
.text:000000000001A8A7                 pop     rbp
.text:000000000001A8A8                 pop     r12
.text:000000000001A8AA                 pop     r13
.text:000000000001A8AC                 pop     r14
.text:000000000001A8AE                 pop     r15
.text:000000000001A8B0                 retn
.text:000000000001A8B0 ; ---------------------------------------------------------------------------
.text:000000000001A8B1                 align 8
.text:000000000001A8B8
.text:000000000001A8B8 loc_1A8B8:                              ; CODE XREF: update_cur_sifted_state+75↑j
.text:000000000001A8B8                 lea     rdi, [rsp+0D8h+var_78]
.text:000000000001A8BD                 mov     rdx, rbx
.text:000000000001A8C0                 mov     rsi, r12
.text:000000000001A8C3                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000001A8CB                 call    re_acquire_state
.text:000000000001A8D0                 mov     rdx, rax
.text:000000000001A8D3                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:000000000001A8D7                 test    eax, eax
.text:000000000001A8D9                 jnz     short loc_1A888
.text:000000000001A8DB                 mov     r15, [rdx+38h]
.text:000000000001A8DF                 lea     r14, [rdx+38h]
.text:000000000001A8E3                 test    r15, r15
.text:000000000001A8E6                 jz      loc_1AAF0
.text:000000000001A8EC
.text:000000000001A8EC loc_1A8EC:                              ; CODE XREF: update_cur_sifted_state+33B↓j
.text:000000000001A8EC                                         ; update_cur_sifted_state+348↓j
.text:000000000001A8EC                 mov     rsi, [rsp+0D8h+var_C8]
.text:000000000001A8F1                 mov     rdx, r14
.text:000000000001A8F4                 mov     rdi, rbx
.text:000000000001A8F7                 call    re_node_set_add_intersect
.text:000000000001A8FC                 test    eax, eax
.text:000000000001A8FE                 mov     [rsp+0D8h+var_7C], eax
.text:000000000001A902                 jnz     short loc_1A888
.text:000000000001A904                 cmp     qword ptr [r13+28h], 0
.text:000000000001A909                 jnz     loc_1AB80
.text:000000000001A90F
.text:000000000001A90F loc_1A90F:                              ; CODE XREF: update_cur_sifted_state+483↓j
.text:000000000001A90F                 mov     r14, [rsp+0D8h+var_C0]
.text:000000000001A914                 add     r14, [r13+0]
.text:000000000001A918
.text:000000000001A918 loc_1A918:                              ; CODE XREF: update_cur_sifted_state+389↓j
.text:000000000001A918                 lea     rdi, [rsp+0D8h+var_7C]
.text:000000000001A91D                 mov     rdx, rbx
.text:000000000001A920                 mov     rsi, r12
.text:000000000001A923                 call    re_acquire_state
.text:000000000001A928                 mov     [r14], rax
.text:000000000001A92B                 mov     eax, [rsp+0D8h+var_7C]
.text:000000000001A92F                 test    eax, eax
.text:000000000001A931                 jnz     loc_1A888
.text:000000000001A937                 cmp     [rsp+0D8h+var_C8], 0
.text:000000000001A93D                 jz      loc_1A888
.text:000000000001A943                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001A948                 mov     rax, [rax+0B8h]
.text:000000000001A94F                 mov     rdx, [rax+rbp*8]
.text:000000000001A953                 xor     eax, eax
.text:000000000001A955                 test    byte ptr [rdx+68h], 40h
.text:000000000001A959                 jz      loc_1A888
.text:000000000001A95F
.text:000000000001A95F loc_1A95F:                              ; CODE XREF: update_cur_sifted_state+8C↑j
.text:000000000001A95F                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001A964                 xor     ebx, ebx
.text:000000000001A966                 mov     rsi, [rax+0C8h]
.text:000000000001A96D                 mov     rdx, rsi
.text:000000000001A970
.text:000000000001A970 loc_1A970:                              ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:000000000001A970                 cmp     rbx, rdx
.text:000000000001A973                 jge     short loc_1A9D3
.text:000000000001A975                 lea     rax, [rbx+rdx]
.text:000000000001A979                 mov     rcx, rax
.text:000000000001A97C                 shr     rcx, 3Fh
.text:000000000001A980                 add     rcx, rax
.text:000000000001A983                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001A988                 sar     rcx, 1
.text:000000000001A98B                 mov     rdi, [rax+0D8h]
.text:000000000001A992                 lea     rax, [rcx+rcx*4]
.text:000000000001A996                 cmp     rbp, [rdi+rax*8+8]
.text:000000000001A99B                 jle     short loc_1A9CE
.text:000000000001A99D                 jmp     loc_1AAD7
.text:000000000001A99D ; ---------------------------------------------------------------------------
.text:000000000001A9A2                 align 8
.text:000000000001A9A8
.text:000000000001A9A8 loc_1A9A8:                              ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:000000000001A9A8                 lea     rdx, [rbx+rcx]
.text:000000000001A9AC                 mov     rax, rdx
.text:000000000001A9AF                 shr     rax, 3Fh
.text:000000000001A9B3                 add     rax, rdx
.text:000000000001A9B6                 sar     rax, 1
.text:000000000001A9B9                 lea     rdx, [rax+rax*4]
.text:000000000001A9BD                 mov     r8, rax
.text:000000000001A9C0                 cmp     rbp, [rdi+rdx*8+8]
.text:000000000001A9C5                 jg      loc_1AAE0
.text:000000000001A9CB                 mov     rcx, rax
.text:000000000001A9CE
.text:000000000001A9CE loc_1A9CE:                              ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:000000000001A9CE                 cmp     rbx, rcx
.text:000000000001A9D1                 jl      short loc_1A9A8
.text:000000000001A9D3
.text:000000000001A9D3 loc_1A9D3:                              ; CODE XREF: update_cur_sifted_state+183↑j
.text:000000000001A9D3                 cmp     rsi, rbx
.text:000000000001A9D6                 jle     loc_1AAD0
.text:000000000001A9DC                 lea     rax, [rbx+rbx*4]
.text:000000000001A9E0                 lea     rsi, ds:0[rax*8]
.text:000000000001A9E8                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001A9ED                 mov     [rsp+0D8h+var_98], rsi
.text:000000000001A9F2                 mov     rax, [rax+0D8h]
.text:000000000001A9F9                 cmp     rbp, [rax+rsi+8]
.text:000000000001A9FE                 jnz     loc_1AAD0
.text:000000000001AA04                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001AA08                 jz      loc_1AAD0
.text:000000000001AA0E                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001AA13                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:000000000001AA1C                 mov     r12, [rax+98h]
.text:000000000001AA23                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000001AA28                 cmp     qword ptr [rax+8], 0
.text:000000000001AA2D                 jle     loc_1AAD0
.text:000000000001AA33                 lea     rax, [rsp+0D8h+var_78]
.text:000000000001AA38                 mov     [rsp+0D8h+var_B8], 0
.text:000000000001AA41                 mov     [rsp+0D8h+var_90], rbx
.text:000000000001AA46                 mov     r15, r13
.text:000000000001AA49                 mov     [rsp+0D8h+var_A0], rax
.text:000000000001AA4E                 jmp     short loc_1AA72
.text:000000000001AA50 ; ---------------------------------------------------------------------------
.text:000000000001AA50
.text:000000000001AA50 loc_1AA50:                              ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:000000000001AA50                                         ; update_cur_sifted_state+2AD↓j
.text:000000000001AA50                 cmp     al, 4
.text:000000000001AA52                 jz      loc_1ADD8
.text:000000000001AA58
.text:000000000001AA58 loc_1AA58:                              ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:000000000001AA58                                         ; update_cur_sifted_state+7C3↓j
.text:000000000001AA58                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001AA5D                 add     [rsp+0D8h+var_B8], 1
.text:000000000001AA63                 mov     rax, [rsp+0D8h+var_B8]
.text:000000000001AA68                 cmp     rax, [rcx+8]
.text:000000000001AA6C                 jge     loc_1B02B
.text:000000000001AA72
.text:000000000001AA72 loc_1AA72:                              ; CODE XREF: update_cur_sifted_state+25E↑j
.text:000000000001AA72                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000001AA77                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000001AA7C                 mov     rax, [rax+10h]
.text:000000000001AA80                 mov     r14, [rax+rdi*8]
.text:000000000001AA84                 mov     rax, r14
.text:000000000001AA87                 shl     rax, 4
.text:000000000001AA8B                 add     rax, [r12]
.text:000000000001AA8F                 cmp     r14, [r15+10h]
.text:000000000001AA93                 movzx   eax, byte ptr [rax+8]
.text:000000000001AA97                 jnz     short loc_1AA50
.text:000000000001AA99                 cmp     rbp, [r15+18h]
.text:000000000001AA9D                 jnz     short loc_1AA50
.text:000000000001AA9F                 jmp     short loc_1AA58
.text:000000000001AA9F ; ---------------------------------------------------------------------------
.text:000000000001AAA1                 align 8
.text:000000000001AAA8
.text:000000000001AAA8 loc_1AAA8:                              ; CODE XREF: update_cur_sifted_state+63↑j
.text:000000000001AAA8                 lea     r14, ds:0[rbp*8]
.text:000000000001AAB0                 add     r14, [rsi]
.text:000000000001AAB3                 test    rcx, rcx
.text:000000000001AAB6                 jnz     loc_1AB70
.text:000000000001AABC                 mov     qword ptr [r14], 0
.text:000000000001AAC3                 xor     eax, eax
.text:000000000001AAC5                 jmp     loc_1A888
.text:000000000001AAC5 ; ---------------------------------------------------------------------------
.text:000000000001AACA                 align 10h
.text:000000000001AAD0
.text:000000000001AAD0 loc_1AAD0:                              ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:000000000001AAD0                                         ; update_cur_sifted_state+20E↑j ...
.text:000000000001AAD0                 xor     eax, eax
.text:000000000001AAD2                 jmp     loc_1A888
.text:000000000001AAD7 ; ---------------------------------------------------------------------------
.text:000000000001AAD7
.text:000000000001AAD7 loc_1AAD7:                              ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:000000000001AAD7                 mov     r8, rcx
.text:000000000001AADA                 mov     rcx, rdx
.text:000000000001AADD                 nop     dword ptr [rax]
.text:000000000001AAE0
.text:000000000001AAE0 loc_1AAE0:                              ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:000000000001AAE0                 lea     rbx, [r8+1]
.text:000000000001AAE4                 mov     rdx, rcx
.text:000000000001AAE7                 jmp     loc_1A970
.text:000000000001AAE7 ; ---------------------------------------------------------------------------
.text:000000000001AAEC                 align 10h
.text:000000000001AAF0
.text:000000000001AAF0 loc_1AAF0:                              ; CODE XREF: update_cur_sifted_state+F6↑j
.text:000000000001AAF0                 mov     rdi, [rbx+8]
.text:000000000001AAF4                 mov     qword ptr [rdx+40h], 0
.text:000000000001AAFC                 mov     [rsp+0D8h+var_B8], rdx
.text:000000000001AB01                 mov     [rdx+38h], rdi
.text:000000000001AB05                 shl     rdi, 3          ; size
.text:000000000001AB09                 call    _malloc
.text:000000000001AB0E                 mov     rdx, [rsp+0D8h+var_B8]
.text:000000000001AB13                 test    rax, rax
.text:000000000001AB16                 mov     [rdx+48h], rax
.text:000000000001AB1A                 jz      short loc_1AB63
.text:000000000001AB1C                 cmp     qword ptr [rbx+8], 0
.text:000000000001AB21                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000001AB29                 jg      short loc_1AB3E
.text:000000000001AB2B                 jmp     loc_1A8EC
.text:000000000001AB30 ; ---------------------------------------------------------------------------
.text:000000000001AB30
.text:000000000001AB30 loc_1AB30:                              ; CODE XREF: update_cur_sifted_state+371↓j
.text:000000000001AB30                 add     r15, 1
.text:000000000001AB34                 cmp     r15, [rbx+8]
.text:000000000001AB38                 jge     loc_1A8EC
.text:000000000001AB3E
.text:000000000001AB3E loc_1AB3E:                              ; CODE XREF: update_cur_sifted_state+339↑j
.text:000000000001AB3E                 mov     rax, [rbx+10h]
.text:000000000001AB42                 mov     rdi, r14
.text:000000000001AB45                 mov     rax, [rax+r15*8]
.text:000000000001AB49                 lea     rdx, [rax+rax*2]
.text:000000000001AB4D                 mov     rax, [r12+38h]
.text:000000000001AB52                 lea     rsi, [rax+rdx*8]
.text:000000000001AB56                 call    re_node_set_merge
.text:000000000001AB5B                 test    eax, eax
.text:000000000001AB5D                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:000000000001AB61                 jz      short loc_1AB30
.text:000000000001AB63
.text:000000000001AB63 loc_1AB63:                              ; CODE XREF: update_cur_sifted_state+32A↑j
.text:000000000001AB63                 mov     eax, 0Ch
.text:000000000001AB68                 jmp     loc_1A888
.text:000000000001AB68 ; ---------------------------------------------------------------------------
.text:000000000001AB6D                 align 10h
.text:000000000001AB70
.text:000000000001AB70 loc_1AB70:                              ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:000000000001AB70                 mov     [rsp+0D8h+var_C8], 0
.text:000000000001AB79                 jmp     loc_1A918
.text:000000000001AB79 ; ---------------------------------------------------------------------------
.text:000000000001AB7E                 align 20h
.text:000000000001AB80
.text:000000000001AB80 loc_1AB80:                              ; CODE XREF: update_cur_sifted_state+119↑j
.text:000000000001AB80                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001AB85                 mov     rax, [rax+0D8h]
.text:000000000001AB8C                 mov     [rsp+0D8h+var_B8], rax
.text:000000000001AB91                 jle     loc_1AC6B
.text:000000000001AB97                 xor     r15d, r15d
.text:000000000001AB9A                 nop     word ptr [rax+rax+00h]
.text:000000000001ABA0
.text:000000000001ABA0 loc_1ABA0:                              ; CODE XREF: update_cur_sifted_state+475↓j
.text:000000000001ABA0                 mov     rax, [r13+30h]
.text:000000000001ABA4                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000001ABA9                 mov     rax, [rax+r15*8]
.text:000000000001ABAD                 lea     rax, [rax+rax*4]
.text:000000000001ABB1                 lea     rdx, [rdi+rax*8]
.text:000000000001ABB5                 cmp     rbp, [rdx+10h]
.text:000000000001ABB9                 jle     loc_1AC5D
.text:000000000001ABBF                 cmp     rbp, [rdx+8]
.text:000000000001ABC3                 jg      loc_1AC5D
.text:000000000001ABC9                 mov     rcx, [rdx]
.text:000000000001ABCC                 mov     rax, [r12]
.text:000000000001ABD0                 mov     rsi, [rbx+8]
.text:000000000001ABD4                 shl     rcx, 4
.text:000000000001ABD8                 cmp     rbp, [rdx+18h]
.text:000000000001ABDC                 mov     r8, [rax+rcx]
.text:000000000001ABE0                 jz      loc_1AC80
.text:000000000001ABE6                 xor     r14d, r14d
.text:000000000001ABE9                 test    rsi, rsi
.text:000000000001ABEC                 jle     short loc_1AC5D
.text:000000000001ABEE                 mov     [rsp+0D8h+var_B0], rbp
.text:000000000001ABF3                 mov     rbp, r8
.text:000000000001ABF6                 jmp     short loc_1AC0E
.text:000000000001ABF6 ; ---------------------------------------------------------------------------
.text:000000000001ABF8                 align 20h
.text:000000000001AC00
.text:000000000001AC00 loc_1AC00:                              ; CODE XREF: update_cur_sifted_state+43A↓j
.text:000000000001AC00                                         ; update_cur_sifted_state+43F↓j
.text:000000000001AC00                 add     r14, 1
.text:000000000001AC04                 cmp     r14, [rbx+8]
.text:000000000001AC08                 jge     short loc_1AC58
.text:000000000001AC0A
.text:000000000001AC0A loc_1AC0A:                              ; CODE XREF: update_cur_sifted_state+461↓j
.text:000000000001AC0A                 mov     rax, [r12]
.text:000000000001AC0E
.text:000000000001AC0E loc_1AC0E:                              ; CODE XREF: update_cur_sifted_state+406↑j
.text:000000000001AC0E                 mov     rdx, [rbx+10h]
.text:000000000001AC12                 mov     rsi, [rdx+r14*8]
.text:000000000001AC16                 mov     rdx, rsi
.text:000000000001AC19                 shl     rdx, 4
.text:000000000001AC1D                 add     rax, rdx
.text:000000000001AC20                 movzx   edx, byte ptr [rax+8]
.text:000000000001AC24                 sub     edx, 8
.text:000000000001AC27                 cmp     edx, 1
.text:000000000001AC2A                 ja      short loc_1AC00
.text:000000000001AC2C                 cmp     rbp, [rax]
.text:000000000001AC2F                 jnz     short loc_1AC00
.text:000000000001AC31                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001AC36                 mov     rdx, rbx
.text:000000000001AC39                 mov     rdi, r12
.text:000000000001AC3C                 call    _sub_epsilon_src_nodes
.text:000000000001AC41                 test    eax, eax
.text:000000000001AC43                 jnz     loc_1A888
.text:000000000001AC49                 add     r14, 1
.text:000000000001AC4D                 cmp     r14, [rbx+8]
.text:000000000001AC51                 jl      short loc_1AC0A
.text:000000000001AC53                 nop     dword ptr [rax+rax+00h]
.text:000000000001AC58
.text:000000000001AC58 loc_1AC58:                              ; CODE XREF: update_cur_sifted_state+418↑j
.text:000000000001AC58                 mov     rbp, [rsp+0D8h+var_B0]
.text:000000000001AC5D
.text:000000000001AC5D loc_1AC5D:                              ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:000000000001AC5D                                         ; update_cur_sifted_state+3D3↑j ...
.text:000000000001AC5D                 add     r15, 1
.text:000000000001AC61                 cmp     r15, [r13+28h]
.text:000000000001AC65                 jl      loc_1ABA0
.text:000000000001AC6B
.text:000000000001AC6B loc_1AC6B:                              ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:000000000001AC6B                 mov     [rsp+0D8h+var_7C], 0
.text:000000000001AC73                 jmp     loc_1A90F
.text:000000000001AC73 ; ---------------------------------------------------------------------------
.text:000000000001AC78                 align 20h
.text:000000000001AC80
.text:000000000001AC80 loc_1AC80:                              ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:000000000001AC80                 test    rsi, rsi
.text:000000000001AC83                 jle     short loc_1AC5D
.text:000000000001AC85                 mov     r10, [rbx+10h]
.text:000000000001AC89                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:000000000001AC90                 lea     r11, [r10+rsi*8]
.text:000000000001AC94                 mov     rcx, r10
.text:000000000001AC97                 mov     rsi, r9
.text:000000000001AC9A                 jmp     short loc_1ACB6
.text:000000000001AC9A ; ---------------------------------------------------------------------------
.text:000000000001AC9C                 align 20h
.text:000000000001ACA0
.text:000000000001ACA0 loc_1ACA0:                              ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:000000000001ACA0                 cmp     r14d, 9
.text:000000000001ACA4                 jnz     short loc_1ACAD
.text:000000000001ACA6                 cmp     r8, [rdx]
.text:000000000001ACA9                 cmovz   r9, rdi
.text:000000000001ACAD
.text:000000000001ACAD loc_1ACAD:                              ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:000000000001ACAD                 add     rcx, 8
.text:000000000001ACB1                 cmp     r11, rcx
.text:000000000001ACB4                 jz      short loc_1ACDE
.text:000000000001ACB6
.text:000000000001ACB6 loc_1ACB6:                              ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:000000000001ACB6                                         ; update_cur_sifted_state+4EC↓j
.text:000000000001ACB6                 mov     rdi, [rcx]
.text:000000000001ACB9                 mov     rdx, rdi
.text:000000000001ACBC                 shl     rdx, 4
.text:000000000001ACC0                 add     rdx, rax
.text:000000000001ACC3                 movzx   r14d, byte ptr [rdx+8]
.text:000000000001ACC8                 cmp     r14d, 8
.text:000000000001ACCC                 jnz     short loc_1ACA0
.text:000000000001ACCE                 cmp     r8, [rdx]
.text:000000000001ACD1                 cmovz   rsi, rdi
.text:000000000001ACD5                 add     rcx, 8
.text:000000000001ACD9                 cmp     r11, rcx
.text:000000000001ACDC                 jnz     short loc_1ACB6
.text:000000000001ACDE
.text:000000000001ACDE loc_1ACDE:                              ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:000000000001ACDE                 test    rsi, rsi
.text:000000000001ACE1                 mov     r14, r9
.text:000000000001ACE4                 mov     [rsp+0D8h+var_B0], r9
.text:000000000001ACE9                 js      loc_1ADB0
.text:000000000001ACEF                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001ACF4                 mov     rdx, rbx
.text:000000000001ACF7                 mov     rdi, r12
.text:000000000001ACFA                 call    _sub_epsilon_src_nodes
.text:000000000001ACFF                 test    eax, eax
.text:000000000001AD01                 jnz     loc_1A888
.text:000000000001AD07                 test    r14, r14
.text:000000000001AD0A                 js      loc_1AC5D
.text:000000000001AD10                 cmp     qword ptr [rbx+8], 0
.text:000000000001AD15                 jle     loc_1AC5D
.text:000000000001AD1B                 mov     r10, [rbx+10h]
.text:000000000001AD1F
.text:000000000001AD1F loc_1AD1F:                              ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:000000000001AD1F                 xor     r14d, r14d
.text:000000000001AD22                 mov     [rsp+0D8h+var_A8], rbp
.text:000000000001AD27                 mov     rbp, r14
.text:000000000001AD2A                 mov     r14, [rsp+0D8h+var_B0]
.text:000000000001AD2F                 jmp     short loc_1AD4A
.text:000000000001AD2F ; ---------------------------------------------------------------------------
.text:000000000001AD31                 align 8
.text:000000000001AD38
.text:000000000001AD38 loc_1AD38:                              ; CODE XREF: update_cur_sifted_state+581↓j
.text:000000000001AD38                                         ; update_cur_sifted_state+598↓j ...
.text:000000000001AD38                 add     rbp, 1
.text:000000000001AD3C                 cmp     rbp, [rbx+8]
.text:000000000001AD40                 jge     loc_1ADC8
.text:000000000001AD46                 mov     r10, [rbx+10h]
.text:000000000001AD4A
.text:000000000001AD4A loc_1AD4A:                              ; CODE XREF: update_cur_sifted_state+53F↑j
.text:000000000001AD4A                 mov     r10, [r10+rbp*8]
.text:000000000001AD4E                 mov     rax, [r12+38h]
.text:000000000001AD53                 mov     rdx, r14
.text:000000000001AD56                 lea     r9, [r10+r10*2]
.text:000000000001AD5A                 shl     r9, 3
.text:000000000001AD5E                 add     rax, r9
.text:000000000001AD61                 mov     rdi, [rax+8]
.text:000000000001AD65                 lea     rsi, [rax+10h]
.text:000000000001AD69                 call    re_node_set_contains_isra_3
.text:000000000001AD6E                 test    rax, rax
.text:000000000001AD71                 jnz     short loc_1AD38
.text:000000000001AD73                 add     r9, [r12+30h]
.text:000000000001AD78                 mov     rdi, [r9+8]
.text:000000000001AD7C                 lea     rsi, [r9+10h]
.text:000000000001AD80                 call    re_node_set_contains_isra_3
.text:000000000001AD85                 test    rax, rax
.text:000000000001AD88                 jnz     short loc_1AD38
.text:000000000001AD8A                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001AD8F                 mov     rdx, rbx
.text:000000000001AD92                 mov     rsi, r10
.text:000000000001AD95                 mov     rdi, r12
.text:000000000001AD98                 call    _sub_epsilon_src_nodes
.text:000000000001AD9D                 test    eax, eax
.text:000000000001AD9F                 jnz     loc_1A888
.text:000000000001ADA5                 sub     rbp, 1
.text:000000000001ADA9                 jmp     short loc_1AD38
.text:000000000001ADA9 ; ---------------------------------------------------------------------------
.text:000000000001ADAB                 align 10h
.text:000000000001ADB0
.text:000000000001ADB0 loc_1ADB0:                              ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:000000000001ADB0                 cmp     [rsp+0D8h+var_B0], 0
.text:000000000001ADB6                 jns     loc_1AD1F
.text:000000000001ADBC                 jmp     loc_1AC5D
.text:000000000001ADBC ; ---------------------------------------------------------------------------
.text:000000000001ADC1                 align 8
.text:000000000001ADC8
.text:000000000001ADC8 loc_1ADC8:                              ; CODE XREF: update_cur_sifted_state+550↑j
.text:000000000001ADC8                 mov     rbp, [rsp+0D8h+var_A8]
.text:000000000001ADCD                 jmp     loc_1AC5D
.text:000000000001ADCD ; ---------------------------------------------------------------------------
.text:000000000001ADD2                 align 8
.text:000000000001ADD8
.text:000000000001ADD8 loc_1ADD8:                              ; CODE XREF: update_cur_sifted_state+262↑j
.text:000000000001ADD8                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001ADDD                 mov     r13, [rsp+0D8h+var_98]
.text:000000000001ADE2                 mov     rbx, [rsp+0D8h+var_90]
.text:000000000001ADE7                 add     r13, [rax+0D8h]
.text:000000000001ADEE                 lea     rax, [r14+r14*2]
.text:000000000001ADF2                 shl     rax, 3
.text:000000000001ADF6                 mov     [rsp+0D8h+var_A8], rax
.text:000000000001ADFB                 lea     rax, ds:0[r14*8]
.text:000000000001AE03                 mov     [rsp+0D8h+var_B0], rax
.text:000000000001AE08                 mov     rax, r15
.text:000000000001AE0B                 mov     r15, r13
.text:000000000001AE0E                 mov     r13, rbx
.text:000000000001AE11                 mov     rbx, rax
.text:000000000001AE14                 jmp     loc_1AF7E
.text:000000000001AE14 ; ---------------------------------------------------------------------------
.text:000000000001AE19                 align 20h
.text:000000000001AE20
.text:000000000001AE20 loc_1AE20:                              ; CODE XREF: update_cur_sifted_state+791↓j
.text:000000000001AE20                 mov     rax, [r15+18h]
.text:000000000001AE24                 sub     rax, [r15+10h]
.text:000000000001AE28                 test    rax, rax
.text:000000000001AE2B                 lea     r9, [rbp+rax+0]
.text:000000000001AE30                 jz      loc_1AF90
.text:000000000001AE36                 mov     rax, [r12+18h]
.text:000000000001AE3B                 mov     rsi, [rsp+0D8h+var_B0]
.text:000000000001AE40                 mov     r10, [rax+rsi]
.text:000000000001AE44
.text:000000000001AE44 loc_1AE44:                              ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:000000000001AE44                 cmp     r9, [rbx+18h]
.text:000000000001AE48                 jg      loc_1AF87
.text:000000000001AE4E                 mov     rax, [rbx]
.text:000000000001AE51                 mov     rax, [rax+r9*8]
.text:000000000001AE55                 test    rax, rax
.text:000000000001AE58                 jz      loc_1AF87
.text:000000000001AE5E                 mov     rdi, [rax+10h]
.text:000000000001AE62                 lea     rsi, [rax+18h]
.text:000000000001AE66                 mov     rdx, r10
.text:000000000001AE69                 call    re_node_set_contains_isra_3
.text:000000000001AE6E                 test    rax, rax
.text:000000000001AE71                 jz      loc_1AF87
.text:000000000001AE77                 sub     rsp, 8
.text:000000000001AE7B                 lea     rdx, [rbx+30h]
.text:000000000001AE7F                 lea     rsi, [rbx+28h]
.text:000000000001AE83                 push    r9
.text:000000000001AE85                 mov     rdi, [rsp+0E8h+var_D0]
.text:000000000001AE8A                 mov     rcx, r14
.text:000000000001AE8D                 mov     r9, r10
.text:000000000001AE90                 mov     r8, rbp
.text:000000000001AE93                 call    check_dst_limits_isra_13
.text:000000000001AE98                 test    al, al
.text:000000000001AE9A                 pop     rdx
.text:000000000001AE9B                 pop     rcx
.text:000000000001AE9C                 jnz     loc_1AF87
.text:000000000001AEA2                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000001AEA8                 jz      loc_1AFB8
.text:000000000001AEAE
.text:000000000001AEAE loc_1AEAE:                              ; CODE XREF: update_cur_sifted_state+808↓j
.text:000000000001AEAE                 mov     rax, [rsp+0D8h+var_A0]
.text:000000000001AEB3                 mov     rsi, r13
.text:000000000001AEB6                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:000000000001AEBB                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:000000000001AEC0                 lea     rdi, [rax+20h]
.text:000000000001AEC4                 call    re_node_set_insert
.text:000000000001AEC9                 test    al, al
.text:000000000001AECB                 jz      loc_1B024
.text:000000000001AED1                 mov     rdi, [rsp+0D8h+var_C0]
.text:000000000001AED6                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:000000000001AEDB                 mov     rsi, [rsp+0D8h+var_A0]
.text:000000000001AEE0                 mov     r15, [rax+rdi]
.text:000000000001AEE4                 mov     rdi, [rsp+0D8h+var_D0]
.text:000000000001AEE9                 call    sift_states_backward
.text:000000000001AEEE                 test    eax, eax
.text:000000000001AEF0                 jnz     loc_1AFFE
.text:000000000001AEF6                 mov     rsi, [rbx+8]
.text:000000000001AEFA                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001AEFF                 test    rsi, rsi
.text:000000000001AF02                 jz      short loc_1AF1D
.text:000000000001AF04                 lea     rcx, [rbp+1]
.text:000000000001AF08                 mov     rdi, r12
.text:000000000001AF0B                 call    merge_state_array
.text:000000000001AF10                 test    eax, eax
.text:000000000001AF12                 jnz     loc_1AFFE
.text:000000000001AF18                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001AF1D
.text:000000000001AF1D loc_1AF1D:                              ; CODE XREF: update_cur_sifted_state+712↑j
.text:000000000001AF1D                 mov     r11, [rsp+0D8h+var_A0]
.text:000000000001AF22                 mov     rax, [rsp+0D8h+var_C0]
.text:000000000001AF27                 mov     rdi, [rsp+0D8h+var_50]
.text:000000000001AF2F                 lea     r9, [r11+30h]
.text:000000000001AF33                 mov     [rdx+rax], r15
.text:000000000001AF37                 mov     rdx, r13
.text:000000000001AF3A                 mov     rsi, r9
.text:000000000001AF3D                 call    re_node_set_contains_isra_3
.text:000000000001AF42                 sub     rax, 1
.text:000000000001AF46                 mov     rdx, rax
.text:000000000001AF49                 js      short loc_1AF57
.text:000000000001AF4B                 lea     rdi, [r11+28h]
.text:000000000001AF4F                 mov     rsi, r9
.text:000000000001AF52                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000001AF57
.text:000000000001AF57 loc_1AF57:                              ; CODE XREF: update_cur_sifted_state+759↑j
.text:000000000001AF57                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000001AF5C                 lea     rax, [r13+r13*4+0]
.text:000000000001AF61                 mov     rdx, [rcx+0D8h]
.text:000000000001AF68                 lea     rax, [rdx+rax*8]
.text:000000000001AF6C                 nop     dword ptr [rax+00h]
.text:000000000001AF70
.text:000000000001AF70 loc_1AF70:                              ; CODE XREF: update_cur_sifted_state+79A↓j
.text:000000000001AF70                 add     r13, 1
.text:000000000001AF74                 cmp     byte ptr [rax+20h], 0
.text:000000000001AF78                 lea     r15, [rax+28h]
.text:000000000001AF7C                 jz      short loc_1AFB0
.text:000000000001AF7E
.text:000000000001AF7E loc_1AF7E:                              ; CODE XREF: update_cur_sifted_state+624↑j
.text:000000000001AF7E                 cmp     r14, [r15]
.text:000000000001AF81                 jz      loc_1AE20
.text:000000000001AF87
.text:000000000001AF87 loc_1AF87:                              ; CODE XREF: update_cur_sifted_state+658↑j
.text:000000000001AF87                                         ; update_cur_sifted_state+668↑j ...
.text:000000000001AF87                 mov     rax, r15
.text:000000000001AF8A                 jmp     short loc_1AF70
.text:000000000001AF8A ; ---------------------------------------------------------------------------
.text:000000000001AF8C                 align 10h
.text:000000000001AF90
.text:000000000001AF90 loc_1AF90:                              ; CODE XREF: update_cur_sifted_state+640↑j
.text:000000000001AF90                 mov     rax, [r12+28h]
.text:000000000001AF95                 mov     rdi, [rsp+0D8h+var_A8]
.text:000000000001AF9A                 mov     rax, [rax+rdi+10h]
.text:000000000001AF9F                 mov     r10, [rax]
.text:000000000001AFA2                 jmp     loc_1AE44
.text:000000000001AFA2 ; ---------------------------------------------------------------------------
.text:000000000001AFA7                 align 10h
.text:000000000001AFB0
.text:000000000001AFB0 loc_1AFB0:                              ; CODE XREF: update_cur_sifted_state+78C↑j
.text:000000000001AFB0                 mov     r15, rbx
.text:000000000001AFB3                 jmp     loc_1AA58
.text:000000000001AFB8 ; ---------------------------------------------------------------------------
.text:000000000001AFB8
.text:000000000001AFB8 loc_1AFB8:                              ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:000000000001AFB8                 mov     rax, [rbx+30h]
.text:000000000001AFBC                 lea     rsi, [rbx+20h]
.text:000000000001AFC0                 movdqa  xmm0, xmmword ptr [rbx]
.text:000000000001AFC4                 mov     [rsp+0D8h+ptr], rax
.text:000000000001AFCC                 mov     rax, [rsp+0D8h+var_A0]
.text:000000000001AFD1                 movaps  [rsp+0D8h+var_78], xmm0
.text:000000000001AFD6                 lea     rdi, [rax+20h]
.text:000000000001AFDA                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000001AFDF                 movaps  [rsp+0D8h+var_68], xmm0
.text:000000000001AFE4                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:000000000001AFE9                 movaps  xmmword ptr [rsp+80h], xmm0
.text:000000000001AFF1                 call    re_node_set_init_copy
.text:000000000001AFF6                 test    eax, eax
.text:000000000001AFF8                 jz      loc_1AEAE
.text:000000000001AFFE
.text:000000000001AFFE loc_1AFFE:                              ; CODE XREF: update_cur_sifted_state+700↑j
.text:000000000001AFFE                                         ; update_cur_sifted_state+722↑j ...
.text:000000000001AFFE                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000001B004                 jz      loc_1A888
.text:000000000001B00A
.text:000000000001B00A loc_1B00A:                              ; CODE XREF: update_cur_sifted_state+849↓j
.text:000000000001B00A                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:000000000001B012                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:000000000001B016                 call    free
.text:000000000001B01B                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:000000000001B01F                 jmp     loc_1A888
.text:000000000001B024 ; ---------------------------------------------------------------------------
.text:000000000001B024
.text:000000000001B024 loc_1B024:                              ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:000000000001B024                 mov     eax, 0Ch
.text:000000000001B029                 jmp     short loc_1AFFE
.text:000000000001B02B ; ---------------------------------------------------------------------------
.text:000000000001B02B
.text:000000000001B02B loc_1B02B:                              ; CODE XREF: update_cur_sifted_state+27C↑j
.text:000000000001B02B                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000001B031                 jz      loc_1AAD0
.text:000000000001B037                 xor     eax, eax
.text:000000000001B039                 jmp     short loc_1B00A
.text:000000000001B03B ; ---------------------------------------------------------------------------
.text:000000000001B03B
.text:000000000001B03B loc_1B03B:                              ; CODE XREF: update_cur_sifted_state+A9↑j
.text:000000000001B03B                 call    ___stack_chk_fail
.text:000000000001B03B ; } // starts at 1A7F0
.text:000000000001B03B update_cur_sifted_state endp
.text:000000000001B03B
.text:000000000001B040
.text:000000000001B040 ; =============== S U B R O U T I N E =======================================
.text:000000000001B040
.text:000000000001B040
.text:000000000001B040 parse_bracket_element_constprop_37 proc near
.text:000000000001B040                                         ; CODE XREF: parse_expression+90F↓p
.text:000000000001B040                                         ; parse_expression+E67↓p
.text:000000000001B040
.text:000000000001B040 var_40          = byte ptr -40h
.text:000000000001B040 var_30          = qword ptr -30h
.text:000000000001B040
.text:000000000001B040 ; __unwind {
.text:000000000001B040                 push    r14
.text:000000000001B042                 push    r13
.text:000000000001B044                 mov     r10, rsi
.text:000000000001B047                 push    r12
.text:000000000001B049                 push    rbp
.text:000000000001B04A                 movsxd  r11, ecx
.text:000000000001B04D                 push    rbx
.text:000000000001B04E                 mov     rbp, rdx
.text:000000000001B051                 mov     rbx, rdi
.text:000000000001B054                 sub     rsp, 20h
.text:000000000001B058                 mov     r12, [rsi+48h]
.text:000000000001B05C                 mov     rax, fs:28h
.text:000000000001B065                 mov     [rsp+48h+var_30], rax
.text:000000000001B06A                 xor     eax, eax
.text:000000000001B06C                 cmp     dword ptr [rsi+90h], 1
.text:000000000001B073                 jz      short loc_1B0C8
.text:000000000001B075                 mov     rsi, r12
.text:000000000001B078                 mov     rdi, r10
.text:000000000001B07B                 call    re_string_char_size_at_part_0
.text:000000000001B080                 cmp     eax, 1
.text:000000000001B083                 jle     short loc_1B0C8
.text:000000000001B085                 mov     rdx, [r10+10h]
.text:000000000001B089                 cdqe
.text:000000000001B08B                 mov     dword ptr [rbx], 1
.text:000000000001B091                 add     rax, r12
.text:000000000001B094                 mov     edx, [rdx+r12*4]
.text:000000000001B098                 mov     [rbx+8], edx
.text:000000000001B09B                 mov     [r10+48h], rax
.text:000000000001B09F                 xor     eax, eax
.text:000000000001B0A1
.text:000000000001B0A1 loc_1B0A1:                              ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:000000000001B0A1                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:000000000001B0A1                 mov     rcx, [rsp+48h+var_30]
.text:000000000001B0A6                 xor     rcx, fs:28h
.text:000000000001B0AF                 jnz     loc_1B298
.text:000000000001B0B5                 add     rsp, 20h
.text:000000000001B0B9                 pop     rbx
.text:000000000001B0BA                 pop     rbp
.text:000000000001B0BB                 pop     r12
.text:000000000001B0BD                 pop     r13
.text:000000000001B0BF                 pop     r14
.text:000000000001B0C1                 retn
.text:000000000001B0C1 ; ---------------------------------------------------------------------------
.text:000000000001B0C2                 align 8
.text:000000000001B0C8
.text:000000000001B0C8 loc_1B0C8:                              ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:000000000001B0C8                                         ; parse_bracket_element_constprop_37+43↑j
.text:000000000001B0C8                 movzx   eax, byte ptr [rbp+8]
.text:000000000001B0CC                 add     r11, r12
.text:000000000001B0CF                 mov     [r10+48h], r11
.text:000000000001B0D3                 mov     edx, eax
.text:000000000001B0D5                 and     edx, 0FFFFFFFBh
.text:000000000001B0D8                 cmp     dl, 1Ah
.text:000000000001B0DB                 jz      short loc_1B100
.text:000000000001B0DD                 cmp     al, 1Ch
.text:000000000001B0DF                 jz      short loc_1B100
.text:000000000001B0E1                 cmp     al, 16h
.text:000000000001B0E3                 jnz     short loc_1B0EE
.text:000000000001B0E5                 test    r9b, r9b
.text:000000000001B0E8                 jz      loc_1B232
.text:000000000001B0EE
.text:000000000001B0EE loc_1B0EE:                              ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000001B0EE                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000001B0EE                 movzx   eax, byte ptr [rbp+0]
.text:000000000001B0F2                 mov     dword ptr [rbx], 0
.text:000000000001B0F8                 mov     [rbx+8], al
.text:000000000001B0FB                 xor     eax, eax
.text:000000000001B0FD                 jmp     short loc_1B0A1
.text:000000000001B0FD ; ---------------------------------------------------------------------------
.text:000000000001B0FF                 align 20h
.text:000000000001B100
.text:000000000001B100 loc_1B100:                              ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:000000000001B100                                         ; parse_bracket_element_constprop_37+9F↑j
.text:000000000001B100                 mov     r12, [r10+68h]
.text:000000000001B104                 cmp     r11, r12
.text:000000000001B107                 jge     loc_1B228
.text:000000000001B10D                 movzx   r13d, byte ptr [rbp+0]
.text:000000000001B112                 xor     r8d, r8d
.text:000000000001B115                 jmp     short loc_1B142
.text:000000000001B115 ; ---------------------------------------------------------------------------
.text:000000000001B117                 align 20h
.text:000000000001B120
.text:000000000001B120 loc_1B120:                              ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:000000000001B120                                         ; parse_bracket_element_constprop_37+130↓j
.text:000000000001B120                 mov     rax, [rbx+8]
.text:000000000001B124                 mov     [rax+r8], r9b
.text:000000000001B128                 add     r8, 1
.text:000000000001B12C                 cmp     r8, 20h ; ' '
.text:000000000001B130                 jz      loc_1B228
.text:000000000001B136                 movzx   eax, byte ptr [rbp+8]
.text:000000000001B13A                 mov     r11, [r10+48h]
.text:000000000001B13E                 mov     r12, [r10+68h]
.text:000000000001B142
.text:000000000001B142 loc_1B142:                              ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:000000000001B142                 cmp     al, 1Eh
.text:000000000001B144                 movsxd  r14, r8d
.text:000000000001B147                 jz      short loc_1B1B0
.text:000000000001B149
.text:000000000001B149 loc_1B149:                              ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:000000000001B149                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:000000000001B149                 mov     rdx, [r10+8]
.text:000000000001B14D                 lea     rax, [r11+1]
.text:000000000001B151                 mov     [r10+48h], rax
.text:000000000001B155                 movzx   r9d, byte ptr [rdx+r11]
.text:000000000001B15A
.text:000000000001B15A loc_1B15A:                              ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:000000000001B15A                                         ; parse_bracket_element_constprop_37+22C↓j
.text:000000000001B15A                 cmp     rax, r12
.text:000000000001B15D                 jge     loc_1B228
.text:000000000001B163                 cmp     r13b, r9b
.text:000000000001B166                 jnz     short loc_1B120
.text:000000000001B168                 mov     rdx, [r10+8]
.text:000000000001B16C                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:000000000001B170                 jnz     short loc_1B120
.text:000000000001B172                 add     rax, 1
.text:000000000001B176                 mov     [r10+48h], rax
.text:000000000001B17A                 mov     rax, [rbx+8]
.text:000000000001B17E                 mov     byte ptr [rax+r14], 0
.text:000000000001B183                 movzx   eax, byte ptr [rbp+8]
.text:000000000001B187                 cmp     al, 1Ch
.text:000000000001B189                 jz      loc_1B28B
.text:000000000001B18F                 cmp     al, 1Eh
.text:000000000001B191                 jz      loc_1B27E
.text:000000000001B197                 cmp     al, 1Ah
.text:000000000001B199                 jz      loc_1B271
.text:000000000001B19F                 xor     eax, eax
.text:000000000001B1A1                 jmp     loc_1B0A1
.text:000000000001B1A1 ; ---------------------------------------------------------------------------
.text:000000000001B1A6                 align 10h
.text:000000000001B1B0
.text:000000000001B1B0 loc_1B1B0:                              ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:000000000001B1B0                 cmp     byte ptr [r10+8Bh], 0
.text:000000000001B1B8                 jz      short loc_1B149
.text:000000000001B1BA                 cmp     byte ptr [r10+8Ch], 0
.text:000000000001B1C2                 jz      loc_1B258
.text:000000000001B1C8                 cmp     r11, [r10+30h]
.text:000000000001B1CC                 jz      short loc_1B1DD
.text:000000000001B1CE                 mov     rax, [r10+10h]
.text:000000000001B1D2                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:000000000001B1D7                 jz      loc_1B149
.text:000000000001B1DD
.text:000000000001B1DD loc_1B1DD:                              ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:000000000001B1DD                 mov     rax, [r10+18h]
.text:000000000001B1E1                 mov     rax, [rax+r11*8]
.text:000000000001B1E5                 add     rax, [r10]
.text:000000000001B1E8                 add     rax, [r10+28h]
.text:000000000001B1EC                 movzx   r9d, byte ptr [rax]
.text:000000000001B1F0                 test    r9b, 80h
.text:000000000001B1F4                 jnz     loc_1B149
.text:000000000001B1FA                 cmp     dword ptr [r10+90h], 1
.text:000000000001B202                 mov     eax, 1
.text:000000000001B207                 jz      short loc_1B216
.text:000000000001B209                 mov     rsi, r11
.text:000000000001B20C                 mov     rdi, r10
.text:000000000001B20F                 call    re_string_char_size_at_part_0
.text:000000000001B214                 cdqe
.text:000000000001B216
.text:000000000001B216 loc_1B216:                              ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:000000000001B216                 add     rax, r11
.text:000000000001B219                 mov     [r10+48h], rax
.text:000000000001B21D                 jmp     loc_1B15A
.text:000000000001B21D ; ---------------------------------------------------------------------------
.text:000000000001B222                 align 8
.text:000000000001B228
.text:000000000001B228 loc_1B228:                              ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:000000000001B228                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:000000000001B228                 mov     eax, 7
.text:000000000001B22D                 jmp     loc_1B0A1
.text:000000000001B232 ; ---------------------------------------------------------------------------
.text:000000000001B232
.text:000000000001B232 loc_1B232:                              ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:000000000001B232                 mov     rdi, rsp
.text:000000000001B235                 mov     rdx, r8
.text:000000000001B238                 mov     rsi, r10
.text:000000000001B23B                 call    peek_token_bracket
.text:000000000001B240                 cmp     [rsp+48h+var_40], 15h
.text:000000000001B245                 mov     eax, 0Bh
.text:000000000001B24A                 jz      loc_1B0EE
.text:000000000001B250                 jmp     loc_1B0A1
.text:000000000001B250 ; ---------------------------------------------------------------------------
.text:000000000001B255                 align 8
.text:000000000001B258
.text:000000000001B258 loc_1B258:                              ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:000000000001B258                 lea     rax, [r11+1]
.text:000000000001B25C                 add     r11, [r10]
.text:000000000001B25F                 mov     rdx, [r10+28h]
.text:000000000001B263                 mov     [r10+48h], rax
.text:000000000001B267                 movzx   r9d, byte ptr [r11+rdx]
.text:000000000001B26C                 jmp     loc_1B15A
.text:000000000001B271 ; ---------------------------------------------------------------------------
.text:000000000001B271
.text:000000000001B271 loc_1B271:                              ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:000000000001B271                 mov     dword ptr [rbx], 3
.text:000000000001B277                 xor     eax, eax
.text:000000000001B279                 jmp     loc_1B0A1
.text:000000000001B27E ; ---------------------------------------------------------------------------
.text:000000000001B27E
.text:000000000001B27E loc_1B27E:                              ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:000000000001B27E                 mov     dword ptr [rbx], 4
.text:000000000001B284                 xor     eax, eax
.text:000000000001B286                 jmp     loc_1B0A1
.text:000000000001B28B ; ---------------------------------------------------------------------------
.text:000000000001B28B
.text:000000000001B28B loc_1B28B:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:000000000001B28B                 mov     dword ptr [rbx], 2
.text:000000000001B291                 xor     eax, eax
.text:000000000001B293                 jmp     loc_1B0A1
.text:000000000001B298 ; ---------------------------------------------------------------------------
.text:000000000001B298
.text:000000000001B298 loc_1B298:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:000000000001B298                 call    ___stack_chk_fail
.text:000000000001B298 ; } // starts at 1B040
.text:000000000001B298 parse_bracket_element_constprop_37 endp
.text:000000000001B298
.text:000000000001B298 ; ---------------------------------------------------------------------------
.text:000000000001B29D                 align 20h
.text:000000000001B2A0
.text:000000000001B2A0 ; =============== S U B R O U T I N E =======================================
.text:000000000001B2A0
.text:000000000001B2A0
.text:000000000001B2A0 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:000000000001B2A0                                         ; fetch_number+29↓p ...
.text:000000000001B2A0
.text:000000000001B2A0 var_68          = qword ptr -68h
.text:000000000001B2A0 var_60          = qword ptr -60h
.text:000000000001B2A0 var_58          = byte ptr -58h
.text:000000000001B2A0 var_50          = byte ptr -50h
.text:000000000001B2A0 var_40          = qword ptr -40h
.text:000000000001B2A0
.text:000000000001B2A0 ; __unwind {
.text:000000000001B2A0                 push    r15
.text:000000000001B2A2                 push    r14
.text:000000000001B2A4                 push    r13
.text:000000000001B2A6                 push    r12
.text:000000000001B2A8                 push    rbp
.text:000000000001B2A9                 push    rbx
.text:000000000001B2AA                 mov     rbp, rdi
.text:000000000001B2AD                 sub     rsp, 38h
.text:000000000001B2B1                 mov     r14, [rsi+48h]
.text:000000000001B2B5                 mov     rax, fs:28h
.text:000000000001B2BE                 mov     [rsp+68h+var_40], rax
.text:000000000001B2C3                 xor     eax, eax
.text:000000000001B2C5                 cmp     [rsi+68h], r14
.text:000000000001B2C9                 jle     loc_1B360
.text:000000000001B2CF                 movzx   r13d, byte ptr [rdi+0Ah]
.text:000000000001B2D4                 mov     r15, rdx
.text:000000000001B2D7                 mov     rdx, [rsi+8]
.text:000000000001B2DB                 mov     rbx, rsi
.text:000000000001B2DE                 movzx   r12d, byte ptr [rdx+r14]
.text:000000000001B2E3                 and     r13d, 0FFFFFF9Fh
.text:000000000001B2E7                 mov     [rdi+0Ah], r13b
.text:000000000001B2EB                 mov     eax, [rsi+90h]
.text:000000000001B2F1                 mov     [rdi], r12b
.text:000000000001B2F4                 cmp     eax, 1
.text:000000000001B2F7                 jle     loc_1B390
.text:000000000001B2FD                 cmp     r14, [rsi+30h]
.text:000000000001B301                 jz      loc_1B4A0
.text:000000000001B307                 mov     rcx, [rsi+10h]
.text:000000000001B30B                 mov     ecx, [rcx+r14*4]
.text:000000000001B30F                 cmp     ecx, 0FFFFFFFFh
.text:000000000001B312                 jz      loc_1B3F0
.text:000000000001B318                 cmp     r12b, 5Ch ; '\'
.text:000000000001B31C                 jz      loc_1B410
.text:000000000001B322                 mov     byte ptr [rdi+8], 1
.text:000000000001B326
.text:000000000001B326 loc_1B326:                              ; CODE XREF: peek_token+216↓j
.text:000000000001B326                 mov     edi, ecx        ; wc
.text:000000000001B328                 mov     [rsp+68h+var_60], rdx
.text:000000000001B32D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:000000000001B330                 call    _iswalnum
.text:000000000001B335                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:000000000001B338                 test    eax, eax
.text:000000000001B33A                 setnz   al
.text:000000000001B33D                 cmp     ecx, 5Fh ; '_'
.text:000000000001B340                 setz    cl
.text:000000000001B343                 or      eax, ecx
.text:000000000001B345                 shl     eax, 6
.text:000000000001B348                 or      r13d, eax
.text:000000000001B34B                 mov     [rbp+0Ah], r13b
.text:000000000001B34F                 mov     rdx, [rsp+68h+var_60]
.text:000000000001B354                 jmp     short loc_1B3CC
.text:000000000001B354 ; ---------------------------------------------------------------------------
.text:000000000001B356                 align 20h
.text:000000000001B360
.text:000000000001B360 loc_1B360:                              ; CODE XREF: peek_token+29↑j
.text:000000000001B360                 mov     byte ptr [rdi+8], 2
.text:000000000001B364
.text:000000000001B364 loc_1B364:                              ; CODE XREF: peek_token+161↓j
.text:000000000001B364                                         ; peek_token+229↓j ...
.text:000000000001B364                 mov     rdi, [rsp+68h+var_40]
.text:000000000001B369                 xor     rdi, fs:28h
.text:000000000001B372                 jnz     loc_1B998
.text:000000000001B378                 add     rsp, 38h
.text:000000000001B37C                 pop     rbx
.text:000000000001B37D                 pop     rbp
.text:000000000001B37E                 pop     r12
.text:000000000001B380                 pop     r13
.text:000000000001B382                 pop     r14
.text:000000000001B384                 pop     r15
.text:000000000001B386                 retn
.text:000000000001B386 ; ---------------------------------------------------------------------------
.text:000000000001B387                 align 10h
.text:000000000001B390
.text:000000000001B390 loc_1B390:                              ; CODE XREF: peek_token+57↑j
.text:000000000001B390                 cmp     r12b, 5Ch ; '\'
.text:000000000001B394                 jz      short loc_1B410
.text:000000000001B396                 mov     byte ptr [rbp+8], 1
.text:000000000001B39A                 mov     [rsp+68h+var_68], rdx
.text:000000000001B39E                 call    ___ctype_b_loc
.text:000000000001B3A3                 mov     rsi, [rax]
.text:000000000001B3A6                 movzx   ecx, r12b
.text:000000000001B3AA                 movzx   eax, word ptr [rsi+rcx*2]
.text:000000000001B3AE                 shr     ax, 3
.text:000000000001B3B2                 and     eax, 1
.text:000000000001B3B5                 cmp     r12b, 5Fh ; '_'
.text:000000000001B3B9                 setz    cl
.text:000000000001B3BC                 or      eax, ecx
.text:000000000001B3BE                 shl     eax, 6
.text:000000000001B3C1                 or      r13d, eax
.text:000000000001B3C4                 mov     [rbp+0Ah], r13b
.text:000000000001B3C8                 mov     rdx, [rsp+68h+var_68]
.text:000000000001B3CC
.text:000000000001B3CC loc_1B3CC:                              ; CODE XREF: peek_token+B4↑j
.text:000000000001B3CC                 sub     r12d, 0Ah       ; switch 116 cases
.text:000000000001B3D0                 cmp     r12b, 73h
.text:000000000001B3D4                 ja      def_1B3EC       ; jumptable 000000000001B3EC default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001B3DA                 lea     rcx, jpt_1B3EC
.text:000000000001B3E1                 movzx   r12d, r12b
.text:000000000001B3E5                 movsxd  rax, ds:(jpt_1B3EC - 228F4h)[rcx+r12*4]
.text:000000000001B3E9                 add     rax, rcx
.text:000000000001B3EC                 jmp     rax             ; switch jump
.text:000000000001B3EC ; ---------------------------------------------------------------------------
.text:000000000001B3EE                 align 10h
.text:000000000001B3F0
.text:000000000001B3F0 loc_1B3F0:                              ; CODE XREF: peek_token+72↑j
.text:000000000001B3F0                 or      r13d, 20h
.text:000000000001B3F4                 mov     byte ptr [rdi+8], 1
.text:000000000001B3F8                 mov     eax, 1
.text:000000000001B3FD                 mov     [rdi+0Ah], r13b
.text:000000000001B401                 jmp     loc_1B364
.text:000000000001B401 ; ---------------------------------------------------------------------------
.text:000000000001B406                 align 10h
.text:000000000001B410
.text:000000000001B410 loc_1B410:                              ; CODE XREF: peek_token+7C↑j
.text:000000000001B410                                         ; peek_token+F4↑j ...
.text:000000000001B410                 lea     rsi, [r14+1]
.text:000000000001B414                 cmp     rsi, [rbx+58h]
.text:000000000001B418                 jge     loc_1B4C0
.text:000000000001B41E                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000001B425                 jnz     loc_1B8B0
.text:000000000001B42B
.text:000000000001B42B loc_1B42B:                              ; CODE XREF: peek_token+66F↓j
.text:000000000001B42B                 movzx   edi, byte ptr [rdx+r14+1]
.text:000000000001B431                 mov     r12d, edi
.text:000000000001B434                 mov     dword ptr [rsp+68h+var_60], edi
.text:000000000001B438
.text:000000000001B438 loc_1B438:                              ; CODE XREF: peek_token+675↓j
.text:000000000001B438                                         ; peek_token+6A6↓j
.text:000000000001B438                 cmp     eax, 1
.text:000000000001B43B                 mov     [rbp+0], r12b
.text:000000000001B43F                 mov     byte ptr [rbp+8], 1
.text:000000000001B443                 jle     loc_1B890
.text:000000000001B449                 mov     rax, [rbx+10h]
.text:000000000001B44D                 mov     r8d, [rax+rsi*4]
.text:000000000001B451
.text:000000000001B451 loc_1B451:                              ; CODE XREF: peek_token+6F3↓j
.text:000000000001B451                 mov     edi, r8d        ; wc
.text:000000000001B454                 mov     dword ptr [rsp+68h+var_68], r8d
.text:000000000001B458                 call    _iswalnum
.text:000000000001B45D                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:000000000001B461                 test    eax, eax
.text:000000000001B463                 setnz   al
.text:000000000001B466                 cmp     r8d, 5Fh ; '_'
.text:000000000001B46A
.text:000000000001B46A loc_1B46A:                              ; CODE XREF: peek_token+60B↓j
.text:000000000001B46A                 setz    dl
.text:000000000001B46D                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:000000000001B472                 or      eax, edx
.text:000000000001B474                 shl     eax, 6
.text:000000000001B477                 or      r13d, eax
.text:000000000001B47A                 cmp     cl, 56h
.text:000000000001B47D                 mov     [rbp+0Ah], r13b
.text:000000000001B481                 ja      def_1B498       ; jumptable 000000000001B498 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:000000000001B487                 lea     rdx, jpt_1B498
.text:000000000001B48E                 movzx   ecx, cl
.text:000000000001B491                 movsxd  rax, ds:(jpt_1B498 - 22AC4h)[rdx+rcx*4]
.text:000000000001B495                 add     rax, rdx
.text:000000000001B498                 jmp     rax             ; switch jump
.text:000000000001B498 ; ---------------------------------------------------------------------------
.text:000000000001B49A                 align 20h
.text:000000000001B4A0
.text:000000000001B4A0 loc_1B4A0:                              ; CODE XREF: peek_token+61↑j
.text:000000000001B4A0                 cmp     r12b, 5Ch ; '\'
.text:000000000001B4A4                 jz      loc_1B410
.text:000000000001B4AA                 mov     rax, [rbx+10h]
.text:000000000001B4AE                 mov     byte ptr [rbp+8], 1
.text:000000000001B4B2                 mov     ecx, [rax+r14*4]
.text:000000000001B4B6                 jmp     loc_1B326
.text:000000000001B4B6 ; ---------------------------------------------------------------------------
.text:000000000001B4BB                 align 20h
.text:000000000001B4C0
.text:000000000001B4C0 loc_1B4C0:                              ; CODE XREF: peek_token+178↑j
.text:000000000001B4C0                 mov     byte ptr [rbp+8], 24h ; '$'
.text:000000000001B4C4                 mov     eax, 1
.text:000000000001B4C9                 jmp     loc_1B364
.text:000000000001B4C9 ; ---------------------------------------------------------------------------
.text:000000000001B4CE                 align 10h
.text:000000000001B4D0
.text:000000000001B4D0 loc_1B4D0:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B4D0                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B4D0                 and     r15d, 1200h     ; jumptable 000000000001B3EC case 125
.text:000000000001B4D7                 mov     eax, 1
.text:000000000001B4DC                 cmp     r15, 1200h
.text:000000000001B4E3                 jnz     loc_1B364
.text:000000000001B4E9
.text:000000000001B4E9 loc_1B4E9:                              ; CODE XREF: peek_token+451↓j
.text:000000000001B4E9                 mov     byte ptr [rbp+8], 18h
.text:000000000001B4ED                 jmp     loc_1B364
.text:000000000001B4ED ; ---------------------------------------------------------------------------
.text:000000000001B4F2                 align 8
.text:000000000001B4F8
.text:000000000001B4F8 loc_1B4F8:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B4F8                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B4F8                 and     r15d, 8400h     ; jumptable 000000000001B3EC case 124
.text:000000000001B4FF                 cmp     r15, 8000h
.text:000000000001B506                 jz      loc_1B5E2
.text:000000000001B50C
.text:000000000001B50C def_1B3EC:                              ; CODE XREF: peek_token+134↑j
.text:000000000001B50C                                         ; peek_token+14C↑j ...
.text:000000000001B50C                 mov     eax, 1          ; jumptable 000000000001B3EC default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001B511                 jmp     loc_1B364
.text:000000000001B511 ; ---------------------------------------------------------------------------
.text:000000000001B516                 align 20h
.text:000000000001B520
.text:000000000001B520 loc_1B520:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B520                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B520                 and     r15d, 1200h     ; jumptable 000000000001B3EC case 123
.text:000000000001B527                 mov     eax, 1
.text:000000000001B52C                 cmp     r15, 1200h
.text:000000000001B533                 jnz     loc_1B364
.text:000000000001B539
.text:000000000001B539 loc_1B539:                              ; CODE XREF: peek_token+3FD↓j
.text:000000000001B539                 mov     byte ptr [rbp+8], 17h
.text:000000000001B53D                 jmp     loc_1B364
.text:000000000001B53D ; ---------------------------------------------------------------------------
.text:000000000001B542                 align 8
.text:000000000001B548
.text:000000000001B548 loc_1B548:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B548                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B548                 test    r15d, 800008h   ; jumptable 000000000001B3EC case 94
.text:000000000001B54F                 jnz     short loc_1B55A
.text:000000000001B551                 test    r14, r14
.text:000000000001B554                 jnz     loc_1B91A
.text:000000000001B55A
.text:000000000001B55A loc_1B55A:                              ; CODE XREF: peek_token+2AF↑j
.text:000000000001B55A                                         ; peek_token+693↓j
.text:000000000001B55A                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B55E                 mov     dword ptr [rbp+0], 10h
.text:000000000001B565                 mov     eax, 1
.text:000000000001B56A                 jmp     loc_1B364
.text:000000000001B56A ; ---------------------------------------------------------------------------
.text:000000000001B56F                 align 10h
.text:000000000001B570
.text:000000000001B570 loc_1B570:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B570                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B570                 mov     byte ptr [rbp+8], 14h ; jumptable 000000000001B3EC case 91
.text:000000000001B574                 mov     eax, 1
.text:000000000001B579                 jmp     loc_1B364
.text:000000000001B579 ; ---------------------------------------------------------------------------
.text:000000000001B57E                 align 20h
.text:000000000001B580
.text:000000000001B580 loc_1B580:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B580                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B580                 test    r15d, 402h      ; jumptable 000000000001B3EC case 63
.text:000000000001B587                 mov     eax, 1
.text:000000000001B58C                 jnz     loc_1B364
.text:000000000001B592
.text:000000000001B592 loc_1B592:                              ; CODE XREF: peek_token+508↓j
.text:000000000001B592                 mov     byte ptr [rbp+8], 13h
.text:000000000001B596                 jmp     loc_1B364
.text:000000000001B596 ; ---------------------------------------------------------------------------
.text:000000000001B59B                 align 20h
.text:000000000001B5A0
.text:000000000001B5A0 loc_1B5A0:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B5A0                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B5A0                 mov     byte ptr [rbp+8], 5 ; jumptable 000000000001B3EC case 46
.text:000000000001B5A4                 mov     eax, 1
.text:000000000001B5A9                 jmp     loc_1B364
.text:000000000001B5A9 ; ---------------------------------------------------------------------------
.text:000000000001B5AE                 align 10h
.text:000000000001B5B0
.text:000000000001B5B0 loc_1B5B0:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B5B0                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B5B0                 test    r15d, 402h      ; jumptable 000000000001B3EC case 43
.text:000000000001B5B7                 mov     eax, 1
.text:000000000001B5BC                 jnz     loc_1B364
.text:000000000001B5C2
.text:000000000001B5C2 loc_1B5C2:                              ; CODE XREF: peek_token+590↓j
.text:000000000001B5C2                 mov     byte ptr [rbp+8], 12h
.text:000000000001B5C6                 jmp     loc_1B364
.text:000000000001B5C6 ; ---------------------------------------------------------------------------
.text:000000000001B5CB                 align 10h
.text:000000000001B5D0
.text:000000000001B5D0 loc_1B5D0:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B5D0                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B5D0                 test    r15d, 800h      ; jumptable 000000000001B3EC case 10
.text:000000000001B5D7                 mov     eax, 1
.text:000000000001B5DC                 jz      loc_1B364
.text:000000000001B5E2
.text:000000000001B5E2 loc_1B5E2:                              ; CODE XREF: peek_token+266↑j
.text:000000000001B5E2                 mov     byte ptr [rbp+8], 0Ah
.text:000000000001B5E6                 mov     eax, 1
.text:000000000001B5EB                 jmp     loc_1B364
.text:000000000001B5F0 ; ---------------------------------------------------------------------------
.text:000000000001B5F0
.text:000000000001B5F0 loc_1B5F0:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B5F0                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B5F0                 mov     byte ptr [rbp+8], 0Bh ; jumptable 000000000001B3EC case 42
.text:000000000001B5F4                 mov     eax, 1
.text:000000000001B5F9                 jmp     loc_1B364
.text:000000000001B5F9 ; ---------------------------------------------------------------------------
.text:000000000001B5FE                 align 20h
.text:000000000001B600
.text:000000000001B600 loc_1B600:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B600                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B600                 test    r15d, 2000h     ; jumptable 000000000001B3EC case 41
.text:000000000001B607                 mov     eax, 1
.text:000000000001B60C                 jz      loc_1B364
.text:000000000001B612
.text:000000000001B612 loc_1B612:                              ; CODE XREF: peek_token+5A7↓j
.text:000000000001B612                 mov     byte ptr [rbp+8], 9
.text:000000000001B616                 jmp     loc_1B364
.text:000000000001B616 ; ---------------------------------------------------------------------------
.text:000000000001B61B                 align 20h
.text:000000000001B620
.text:000000000001B620 loc_1B620:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B620                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B620                 test    r15d, 2000h     ; jumptable 000000000001B3EC case 40
.text:000000000001B627                 mov     eax, 1
.text:000000000001B62C                 jz      loc_1B364
.text:000000000001B632
.text:000000000001B632 loc_1B632:                              ; CODE XREF: peek_token+5BE↓j
.text:000000000001B632                 mov     byte ptr [rbp+8], 8
.text:000000000001B636                 jmp     loc_1B364
.text:000000000001B636 ; ---------------------------------------------------------------------------
.text:000000000001B63B                 align 20h
.text:000000000001B640
.text:000000000001B640 loc_1B640:                              ; CODE XREF: peek_token+14C↑j
.text:000000000001B640                                         ; DATA XREF: .rodata:jpt_1B3EC↓o
.text:000000000001B640                 test    r15b, 8         ; jumptable 000000000001B3EC case 36
.text:000000000001B644                 jnz     short loc_1B654
.text:000000000001B646                 add     r14, 1
.text:000000000001B64A                 cmp     r14, [rbx+58h]
.text:000000000001B64E                 jnz     loc_1B94B
.text:000000000001B654
.text:000000000001B654 loc_1B654:                              ; CODE XREF: peek_token+3A4↑j
.text:000000000001B654                                         ; peek_token+6DA↓j
.text:000000000001B654                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B658                 mov     dword ptr [rbp+0], 20h ; ' '
.text:000000000001B65F                 mov     eax, 1
.text:000000000001B664                 jmp     loc_1B364
.text:000000000001B669 ; ---------------------------------------------------------------------------
.text:000000000001B669
.text:000000000001B669 loc_1B669:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B669                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B669                 test    r15d, 8400h     ; jumptable 000000000001B498 case 124
.text:000000000001B670                 mov     eax, 2
.text:000000000001B675                 jnz     loc_1B364
.text:000000000001B67B                 mov     byte ptr [rbp+8], 0Ah
.text:000000000001B67F                 jmp     loc_1B364
.text:000000000001B684 ; ---------------------------------------------------------------------------
.text:000000000001B684
.text:000000000001B684 loc_1B684:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B684                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B684                 and     r15d, 1200h     ; jumptable 000000000001B498 case 123
.text:000000000001B68B                 mov     eax, 2
.text:000000000001B690                 cmp     r15, 200h
.text:000000000001B697                 jnz     loc_1B364
.text:000000000001B69D                 jmp     loc_1B539
.text:000000000001B6A2 ; ---------------------------------------------------------------------------
.text:000000000001B6A2
.text:000000000001B6A2 loc_1B6A2:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B6A2                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B6A2                 test    r15d, 80000h    ; jumptable 000000000001B498 case 119
.text:000000000001B6A9                 mov     eax, 2
.text:000000000001B6AE                 jnz     loc_1B364
.text:000000000001B6B4                 mov     byte ptr [rbp+8], 20h ; ' '
.text:000000000001B6B8                 jmp     loc_1B364
.text:000000000001B6BD ; ---------------------------------------------------------------------------
.text:000000000001B6BD
.text:000000000001B6BD loc_1B6BD:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B6BD                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B6BD                 test    r15d, 80000h    ; jumptable 000000000001B498 case 115
.text:000000000001B6C4                 mov     eax, 2
.text:000000000001B6C9                 jnz     loc_1B364
.text:000000000001B6CF                 mov     byte ptr [rbp+8], 22h ; '"'
.text:000000000001B6D3                 jmp     loc_1B364
.text:000000000001B6D8 ; ---------------------------------------------------------------------------
.text:000000000001B6D8
.text:000000000001B6D8 loc_1B6D8:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B6D8                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B6D8                 and     r15d, 1200h     ; jumptable 000000000001B498 case 125
.text:000000000001B6DF                 mov     eax, 2
.text:000000000001B6E4                 cmp     r15, 200h
.text:000000000001B6EB                 jnz     loc_1B364
.text:000000000001B6F1                 jmp     loc_1B4E9
.text:000000000001B6F6 ; ---------------------------------------------------------------------------
.text:000000000001B6F6
.text:000000000001B6F6 loc_1B6F6:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B6F6                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B6F6                 test    r15d, 80000h    ; jumptable 000000000001B498 case 98
.text:000000000001B6FD                 mov     eax, 2
.text:000000000001B702                 jnz     loc_1B364
.text:000000000001B708                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B70C                 mov     dword ptr [rbp+0], 100h
.text:000000000001B713                 jmp     loc_1B364
.text:000000000001B718 ; ---------------------------------------------------------------------------
.text:000000000001B718
.text:000000000001B718 loc_1B718:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B718                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B718                 test    r15d, 80000h    ; jumptable 000000000001B498 case 96
.text:000000000001B71F                 mov     eax, 2
.text:000000000001B724                 jnz     loc_1B364
.text:000000000001B72A                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B72E                 mov     dword ptr [rbp+0], 40h ; '@'
.text:000000000001B735                 jmp     loc_1B364
.text:000000000001B73A ; ---------------------------------------------------------------------------
.text:000000000001B73A
.text:000000000001B73A loc_1B73A:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B73A                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B73A                 test    r15d, 80000h    ; jumptable 000000000001B498 case 87
.text:000000000001B741                 mov     eax, 2
.text:000000000001B746                 jnz     loc_1B364
.text:000000000001B74C                 mov     byte ptr [rbp+8], 21h ; '!'
.text:000000000001B750                 jmp     loc_1B364
.text:000000000001B755 ; ---------------------------------------------------------------------------
.text:000000000001B755
.text:000000000001B755 loc_1B755:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B755                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B755                 test    r15d, 80000h    ; jumptable 000000000001B498 case 83
.text:000000000001B75C                 mov     eax, 2
.text:000000000001B761                 jnz     loc_1B364
.text:000000000001B767                 mov     byte ptr [rbp+8], 23h ; '#'
.text:000000000001B76B                 jmp     loc_1B364
.text:000000000001B770 ; ---------------------------------------------------------------------------
.text:000000000001B770
.text:000000000001B770 loc_1B770:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B770                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B770                 test    r15d, 80000h    ; jumptable 000000000001B498 case 66
.text:000000000001B777                 mov     eax, 2
.text:000000000001B77C                 jnz     loc_1B364
.text:000000000001B782                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B786                 mov     dword ptr [rbp+0], 200h
.text:000000000001B78D                 jmp     loc_1B364
.text:000000000001B792 ; ---------------------------------------------------------------------------
.text:000000000001B792
.text:000000000001B792 loc_1B792:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B792                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B792                 and     r15d, 402h      ; jumptable 000000000001B498 case 63
.text:000000000001B799                 mov     eax, 2
.text:000000000001B79E                 cmp     r15, 2
.text:000000000001B7A2                 jnz     loc_1B364
.text:000000000001B7A8                 jmp     loc_1B592
.text:000000000001B7AD ; ---------------------------------------------------------------------------
.text:000000000001B7AD
.text:000000000001B7AD loc_1B7AD:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B7AD                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B7AD                 test    r15d, 80000h    ; jumptable 000000000001B498 case 62
.text:000000000001B7B4                 mov     eax, 2
.text:000000000001B7B9                 jnz     loc_1B364
.text:000000000001B7BF                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B7C3                 mov     dword ptr [rbp+0], 9
.text:000000000001B7CA                 jmp     loc_1B364
.text:000000000001B7CF ; ---------------------------------------------------------------------------
.text:000000000001B7CF
.text:000000000001B7CF loc_1B7CF:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B7CF                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B7CF                 test    r15d, 80000h    ; jumptable 000000000001B498 case 60
.text:000000000001B7D6                 mov     eax, 2
.text:000000000001B7DB                 jnz     loc_1B364
.text:000000000001B7E1                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B7E5                 mov     dword ptr [rbp+0], 6
.text:000000000001B7EC                 jmp     loc_1B364
.text:000000000001B7F1 ; ---------------------------------------------------------------------------
.text:000000000001B7F1
.text:000000000001B7F1 loc_1B7F1:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B7F1                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B7F1                 test    r15d, 4000h     ; jumptable 000000000001B498 cases 49-57
.text:000000000001B7F8                 mov     eax, 2
.text:000000000001B7FD                 jnz     loc_1B364
.text:000000000001B803                 mov     edx, dword ptr [rsp+68h+var_60]
.text:000000000001B807                 mov     byte ptr [rbp+8], 4
.text:000000000001B80B                 sub     edx, 31h ; '1'
.text:000000000001B80E                 movsxd  rdx, edx
.text:000000000001B811                 mov     [rbp+0], rdx
.text:000000000001B815                 jmp     loc_1B364
.text:000000000001B81A ; ---------------------------------------------------------------------------
.text:000000000001B81A
.text:000000000001B81A loc_1B81A:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B81A                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B81A                 and     r15d, 402h      ; jumptable 000000000001B498 case 43
.text:000000000001B821                 mov     eax, 2
.text:000000000001B826                 cmp     r15, 2
.text:000000000001B82A                 jnz     loc_1B364
.text:000000000001B830                 jmp     loc_1B5C2
.text:000000000001B835 ; ---------------------------------------------------------------------------
.text:000000000001B835
.text:000000000001B835 loc_1B835:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B835                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B835                 test    r15d, 2000h     ; jumptable 000000000001B498 case 41
.text:000000000001B83C                 mov     eax, 2
.text:000000000001B841                 jnz     loc_1B364
.text:000000000001B847                 jmp     loc_1B612
.text:000000000001B84C ; ---------------------------------------------------------------------------
.text:000000000001B84C
.text:000000000001B84C loc_1B84C:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B84C                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B84C                 test    r15d, 2000h     ; jumptable 000000000001B498 case 40
.text:000000000001B853                 mov     eax, 2
.text:000000000001B858                 jnz     loc_1B364
.text:000000000001B85E                 jmp     loc_1B632
.text:000000000001B863 ; ---------------------------------------------------------------------------
.text:000000000001B863
.text:000000000001B863 loc_1B863:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001B863                                         ; DATA XREF: .rodata:jpt_1B498↓o
.text:000000000001B863                 test    r15d, 80000h    ; jumptable 000000000001B498 case 39
.text:000000000001B86A                 mov     eax, 2
.text:000000000001B86F                 jnz     loc_1B364
.text:000000000001B875                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001B879                 mov     dword ptr [rbp+0], 80h
.text:000000000001B880                 jmp     loc_1B364
.text:000000000001B885 ; ---------------------------------------------------------------------------
.text:000000000001B885
.text:000000000001B885 def_1B498:                              ; CODE XREF: peek_token+1E1↑j
.text:000000000001B885                                         ; peek_token+1F8↑j
.text:000000000001B885                                         ; DATA XREF: ...
.text:000000000001B885                 mov     eax, 2          ; jumptable 000000000001B498 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:000000000001B88A                 jmp     loc_1B364
.text:000000000001B88A ; ---------------------------------------------------------------------------
.text:000000000001B88F                 align 10h
.text:000000000001B890
.text:000000000001B890 loc_1B890:                              ; CODE XREF: peek_token+1A3↑j
.text:000000000001B890                 call    ___ctype_b_loc
.text:000000000001B895                 mov     rsi, [rax]
.text:000000000001B898                 movzx   edx, r12b
.text:000000000001B89C                 movzx   eax, word ptr [rsi+rdx*2]
.text:000000000001B8A0                 shr     ax, 3
.text:000000000001B8A4                 and     eax, 1
.text:000000000001B8A7                 cmp     r12b, 5Fh ; '_'
.text:000000000001B8AB                 jmp     loc_1B46A
.text:000000000001B8B0 ; ---------------------------------------------------------------------------
.text:000000000001B8B0
.text:000000000001B8B0 loc_1B8B0:                              ; CODE XREF: peek_token+185↑j
.text:000000000001B8B0                 cmp     eax, 1
.text:000000000001B8B3                 jle     short loc_1B8E4
.text:000000000001B8B5                 mov     rcx, [rbx+10h]
.text:000000000001B8B9                 lea     rdi, ds:0[rsi*4]
.text:000000000001B8C1                 mov     r8d, [rcx+rsi*4]
.text:000000000001B8C5                 cmp     r8d, 0FFFFFFFFh
.text:000000000001B8C9                 jz      loc_1B97F
.text:000000000001B8CF                 lea     r9, [r14+2]
.text:000000000001B8D3                 cmp     [rbx+30h], r9
.text:000000000001B8D7                 jz      short loc_1B8E4
.text:000000000001B8D9                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:000000000001B8DE                 jz      loc_1B97F
.text:000000000001B8E4
.text:000000000001B8E4 loc_1B8E4:                              ; CODE XREF: peek_token+613↑j
.text:000000000001B8E4                                         ; peek_token+637↑j
.text:000000000001B8E4                 cmp     byte ptr [rbx+8Ch], 0
.text:000000000001B8EB                 mov     rcx, [rbx]
.text:000000000001B8EE                 mov     rdi, [rbx+28h]
.text:000000000001B8F2                 jz      short loc_1B938
.text:000000000001B8F4                 mov     r8, [rbx+18h]
.text:000000000001B8F8                 add     rcx, rdi
.text:000000000001B8FB                 add     rcx, [r8+rsi*8]
.text:000000000001B8FF                 movzx   edi, byte ptr [rcx]
.text:000000000001B902                 mov     r12d, edi
.text:000000000001B905                 mov     dword ptr [rsp+68h+var_60], edi
.text:000000000001B909                 and     edi, 80h
.text:000000000001B90F                 jnz     loc_1B42B
.text:000000000001B915                 jmp     loc_1B438
.text:000000000001B91A ; ---------------------------------------------------------------------------
.text:000000000001B91A
.text:000000000001B91A loc_1B91A:                              ; CODE XREF: peek_token+2B4↑j
.text:000000000001B91A                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:000000000001B920                 jnz     def_1B3EC       ; jumptable 000000000001B3EC default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001B926                 test    r15d, 800h
.text:000000000001B92D                 jz      def_1B3EC       ; jumptable 000000000001B3EC default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001B933                 jmp     loc_1B55A
.text:000000000001B938 ; ---------------------------------------------------------------------------
.text:000000000001B938
.text:000000000001B938 loc_1B938:                              ; CODE XREF: peek_token+652↑j
.text:000000000001B938                 add     rcx, rsi
.text:000000000001B93B                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000001B93F                 mov     r12d, edi
.text:000000000001B942                 mov     dword ptr [rsp+68h+var_60], edi
.text:000000000001B946                 jmp     loc_1B438
.text:000000000001B94B ; ---------------------------------------------------------------------------
.text:000000000001B94B
.text:000000000001B94B loc_1B94B:                              ; CODE XREF: peek_token+3AE↑j
.text:000000000001B94B                 lea     rdi, [rsp+68h+var_58]
.text:000000000001B950                 mov     rdx, r15
.text:000000000001B953                 mov     [rbx+48h], r14
.text:000000000001B957                 mov     rsi, rbx
.text:000000000001B95A                 call    peek_token
.text:000000000001B95F                 movzx   eax, [rsp+68h+var_50]
.text:000000000001B964                 sub     qword ptr [rbx+48h], 1
.text:000000000001B969                 lea     edx, [rax-9]
.text:000000000001B96C                 mov     eax, 1
.text:000000000001B971                 cmp     dl, 1
.text:000000000001B974                 ja      loc_1B364
.text:000000000001B97A                 jmp     loc_1B654
.text:000000000001B97F ; ---------------------------------------------------------------------------
.text:000000000001B97F
.text:000000000001B97F loc_1B97F:                              ; CODE XREF: peek_token+629↑j
.text:000000000001B97F                                         ; peek_token+63E↑j
.text:000000000001B97F                 movzx   eax, byte ptr [rdx+r14+1]
.text:000000000001B985                 mov     byte ptr [rbp+8], 1
.text:000000000001B989                 mov     r12d, eax
.text:000000000001B98C                 mov     [rbp+0], al
.text:000000000001B98F                 mov     dword ptr [rsp+68h+var_60], eax
.text:000000000001B993                 jmp     loc_1B451
.text:000000000001B998 ; ---------------------------------------------------------------------------
.text:000000000001B998
.text:000000000001B998 loc_1B998:                              ; CODE XREF: peek_token+D2↑j
.text:000000000001B998                 call    ___stack_chk_fail
.text:000000000001B998 ; } // starts at 1B2A0
.text:000000000001B998 peek_token      endp
.text:000000000001B998
.text:000000000001B998 ; ---------------------------------------------------------------------------
.text:000000000001B99D                 align 20h
.text:000000000001B9A0
.text:000000000001B9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000001B9A0
.text:000000000001B9A0
.text:000000000001B9A0 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:000000000001B9A0                                         ; parse_expression+611↓p
.text:000000000001B9A0 ; __unwind {
.text:000000000001B9A0                 push    r14
.text:000000000001B9A2                 mov     r14, rdi
.text:000000000001B9A5                 push    r13
.text:000000000001B9A7                 mov     r13, rsi
.text:000000000001B9AA                 push    r12
.text:000000000001B9AC                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:000000000001B9B3                 push    rbp
.text:000000000001B9B4                 mov     rbp, rdx
.text:000000000001B9B7                 push    rbx
.text:000000000001B9B8                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001B9BF                 nop
.text:000000000001B9C0
.text:000000000001B9C0 loc_1B9C0:                              ; CODE XREF: fetch_number+52↓j
.text:000000000001B9C0                                         ; fetch_number+87↓j ...
.text:000000000001B9C0                 mov     rdx, rbp
.text:000000000001B9C3                 mov     rsi, r14
.text:000000000001B9C6                 mov     rdi, r13
.text:000000000001B9C9                 call    peek_token
.text:000000000001B9CE                 cdqe
.text:000000000001B9D0                 add     [r14+48h], rax
.text:000000000001B9D4                 movzx   eax, byte ptr [r13+8]
.text:000000000001B9D9                 movzx   edx, byte ptr [r13+0]
.text:000000000001B9DE                 cmp     al, 2
.text:000000000001B9E0                 jz      short loc_1BA30
.text:000000000001B9E2                 cmp     al, 18h
.text:000000000001B9E4                 jz      short loc_1BA37
.text:000000000001B9E6                 cmp     dl, 2Ch ; ','
.text:000000000001B9E9                 jz      short loc_1BA37
.text:000000000001B9EB                 cmp     al, 1
.text:000000000001B9ED                 jz      short loc_1B9F8
.text:000000000001B9EF
.text:000000000001B9EF loc_1B9EF:                              ; CODE XREF: fetch_number+5D↓j
.text:000000000001B9EF                                         ; fetch_number+63↓j
.text:000000000001B9EF                 mov     rbx, r12
.text:000000000001B9F2                 jmp     short loc_1B9C0
.text:000000000001B9F2 ; ---------------------------------------------------------------------------
.text:000000000001B9F4                 align 8
.text:000000000001B9F8
.text:000000000001B9F8 loc_1B9F8:                              ; CODE XREF: fetch_number+4D↑j
.text:000000000001B9F8                 lea     eax, [rdx-30h]
.text:000000000001B9FB                 cmp     al, 9
.text:000000000001B9FD                 ja      short loc_1B9EF
.text:000000000001B9FF                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000001BA03                 jz      short loc_1B9EF
.text:000000000001BA05                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001BA09                 jz      short loc_1BA48
.text:000000000001BA0B                 lea     rax, [rbx+rbx*4]
.text:000000000001BA0F                 lea     rbx, [rdx+rax*2]
.text:000000000001BA13                 mov     eax, 8030h
.text:000000000001BA18                 cmp     rbx, 8030h
.text:000000000001BA1F                 cmovg   rbx, rax
.text:000000000001BA23                 sub     rbx, 30h ; '0'
.text:000000000001BA27                 jmp     short loc_1B9C0
.text:000000000001BA27 ; ---------------------------------------------------------------------------
.text:000000000001BA29                 align 10h
.text:000000000001BA30
.text:000000000001BA30 loc_1BA30:                              ; CODE XREF: fetch_number+40↑j
.text:000000000001BA30                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000001BA37
.text:000000000001BA37 loc_1BA37:                              ; CODE XREF: fetch_number+44↑j
.text:000000000001BA37                                         ; fetch_number+49↑j
.text:000000000001BA37                 mov     rax, rbx
.text:000000000001BA3A                 pop     rbx
.text:000000000001BA3B                 pop     rbp
.text:000000000001BA3C                 pop     r12
.text:000000000001BA3E                 pop     r13
.text:000000000001BA40                 pop     r14
.text:000000000001BA42                 retn
.text:000000000001BA42 ; ---------------------------------------------------------------------------
.text:000000000001BA43                 align 8
.text:000000000001BA48
.text:000000000001BA48 loc_1BA48:                              ; CODE XREF: fetch_number+69↑j
.text:000000000001BA48                 movzx   ebx, dl
.text:000000000001BA4B                 sub     ebx, 30h ; '0'
.text:000000000001BA4E                 movsxd  rbx, ebx
.text:000000000001BA51                 jmp     loc_1B9C0
.text:000000000001BA51 ; } // starts at 1B9A0
.text:000000000001BA51 fetch_number    endp
.text:000000000001BA51
.text:000000000001BA51 ; ---------------------------------------------------------------------------
.text:000000000001BA56                 align 20h
.text:000000000001BA60
.text:000000000001BA60 ; =============== S U B R O U T I N E =======================================
.text:000000000001BA60
.text:000000000001BA60
.text:000000000001BA60 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:000000000001BA60                                         ; parse_branch+39↓p ...
.text:000000000001BA60
.text:000000000001BA60 var_158         = qword ptr -158h
.text:000000000001BA60 var_148         = qword ptr -148h
.text:000000000001BA60 var_140         = qword ptr -140h
.text:000000000001BA60 var_138         = qword ptr -138h
.text:000000000001BA60 var_130         = qword ptr -130h
.text:000000000001BA60 var_128         = xmmword ptr -128h
.text:000000000001BA60 var_118         = qword ptr -118h
.text:000000000001BA60 var_110         = qword ptr -110h
.text:000000000001BA60 var_101         = byte ptr -101h
.text:000000000001BA60 var_100         = qword ptr -100h
.text:000000000001BA60 var_F8          = qword ptr -0F8h
.text:000000000001BA60 var_F0          = qword ptr -0F0h
.text:000000000001BA60 var_E8          = qword ptr -0E8h
.text:000000000001BA60 ptr             = qword ptr -0E0h
.text:000000000001BA60 size            = qword ptr -0D8h
.text:000000000001BA60 var_D0          = dword ptr -0D0h
.text:000000000001BA60 var_CC          = dword ptr -0CCh
.text:000000000001BA60 var_C0          = qword ptr -0C0h
.text:000000000001BA60 var_B8          = dword ptr -0B8h
.text:000000000001BA60 var_B0          = qword ptr -0B0h
.text:000000000001BA60 var_A8          = qword ptr -0A8h
.text:000000000001BA60 var_A0          = qword ptr -0A0h
.text:000000000001BA60 var_98          = byte ptr -98h
.text:000000000001BA60 var_90          = byte ptr -90h
.text:000000000001BA60 var_88          = byte ptr -88h
.text:000000000001BA60 var_68          = byte ptr -68h
.text:000000000001BA60 var_40          = qword ptr -40h
.text:000000000001BA60
.text:000000000001BA60 ; __unwind {
.text:000000000001BA60                 push    r15
.text:000000000001BA62                 push    r14
.text:000000000001BA64                 push    r13
.text:000000000001BA66                 push    r12
.text:000000000001BA68                 push    rbp
.text:000000000001BA69                 push    rbx
.text:000000000001BA6A                 sub     rsp, 128h
.text:000000000001BA71                 mov     [rsp+158h+var_138], rcx
.text:000000000001BA76                 movzx   ecx, byte ptr [rdx+8]
.text:000000000001BA7A                 mov     rax, fs:28h
.text:000000000001BA83                 mov     [rsp+158h+var_40], rax
.text:000000000001BA8B                 xor     eax, eax
.text:000000000001BA8D                 mov     rax, [rsi]
.text:000000000001BA90                 mov     [rsp+158h+var_140], rdx
.text:000000000001BA95                 mov     [rsp+158h+var_118], r9
.text:000000000001BA9A                 cmp     cl, 24h         ; switch 37 cases
.text:000000000001BA9D                 mov     [rsp+158h+var_148], rax
.text:000000000001BAA2                 ja      def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001BAA8                 mov     rbp, rsi
.text:000000000001BAAB                 lea     rsi, jpt_1BABF
.text:000000000001BAB2                 movzx   edx, cl
.text:000000000001BAB5                 mov     r14, rdi
.text:000000000001BAB8                 movsxd  rax, ds:(jpt_1BABF - 22C20h)[rsi+rdx*4]
.text:000000000001BABC                 add     rax, rsi
.text:000000000001BABF                 jmp     rax             ; switch jump
.text:000000000001BAC1 ; ---------------------------------------------------------------------------
.text:000000000001BAC1
.text:000000000001BAC1 loc_1BAC1:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001BAC1                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001BAC1                 mov     rbx, [rbp+30h]  ; jumptable 000000000001BABF case 8
.text:000000000001BAC5                 mov     r15, [rsp+158h+var_138]
.text:000000000001BACA                 mov     rsi, rdi
.text:000000000001BACD                 mov     r13, [rsp+158h+var_140]
.text:000000000001BAD2                 mov     [rsp+158h+var_158], r8
.text:000000000001BAD6                 lea     rax, [rbx+1]
.text:000000000001BADA                 mov     rdx, r15
.text:000000000001BADD                 or      rdx, 800000h
.text:000000000001BAE4                 mov     rdi, r13
.text:000000000001BAE7                 mov     [rbp+30h], rax
.text:000000000001BAEB                 call    peek_token
.text:000000000001BAF0                 cdqe
.text:000000000001BAF2                 add     [r14+48h], rax
.text:000000000001BAF6                 xor     eax, eax
.text:000000000001BAF8                 cmp     byte ptr [r13+8], 9
.text:000000000001BAFD                 mov     rdx, r13
.text:000000000001BB00                 jz      loc_1C600
.text:000000000001BB06                 mov     r13, [rsp+158h+var_118]
.text:000000000001BB0B                 mov     r8, [rsp+158h+var_158]
.text:000000000001BB0F                 mov     rcx, r15
.text:000000000001BB12                 mov     rsi, rbp
.text:000000000001BB15                 mov     rdi, r14
.text:000000000001BB18                 add     r8, 1
.text:000000000001BB1C                 mov     r9, r13
.text:000000000001BB1F                 call    parse_reg_exp
.text:000000000001BB24                 mov     r11d, [r13+0]
.text:000000000001BB28                 test    r11d, r11d
.text:000000000001BB2B                 jnz     short def_1BABF ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001BB2D                 mov     rdx, [rsp+158h+var_140]
.text:000000000001BB32                 cmp     byte ptr [rdx+8], 9
.text:000000000001BB36                 jz      loc_1C600
.text:000000000001BB3C                 test    rax, rax
.text:000000000001BB3F                 jz      short loc_1BB52
.text:000000000001BB41                 lea     rsi, free_tree
.text:000000000001BB48                 xor     edx, edx
.text:000000000001BB4A                 mov     rdi, rax
.text:000000000001BB4D                 call    postorder
.text:000000000001BB52
.text:000000000001BB52 loc_1BB52:                              ; CODE XREF: parse_expression+DF↑j
.text:000000000001BB52                 mov     rax, [rsp+158h+var_118]
.text:000000000001BB57                 mov     dword ptr [rax], 8
.text:000000000001BB5D                 nop     dword ptr [rax]
.text:000000000001BB60
.text:000000000001BB60 def_1BABF:                              ; CODE XREF: parse_expression+42↑j
.text:000000000001BB60                                         ; parse_expression+5F↑j ...
.text:000000000001BB60                 mov     [rsp+158h+var_130], 0 ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001BB69                 nop     dword ptr [rax+00000000h]
.text:000000000001BB70
.text:000000000001BB70 loc_1BB70:                              ; CODE XREF: parse_expression+1CA↓j
.text:000000000001BB70                                         ; parse_expression+1DE↓j ...
.text:000000000001BB70                 mov     rdi, [rsp+158h+var_40]
.text:000000000001BB78                 xor     rdi, fs:28h
.text:000000000001BB81                 mov     rax, [rsp+158h+var_130]
.text:000000000001BB86                 jnz     loc_1CEFE
.text:000000000001BB8C                 add     rsp, 128h
.text:000000000001BB93                 pop     rbx
.text:000000000001BB94                 pop     rbp
.text:000000000001BB95                 pop     r12
.text:000000000001BB97                 pop     r13
.text:000000000001BB99                 pop     r14
.text:000000000001BB9B                 pop     r15
.text:000000000001BB9D                 retn
.text:000000000001BB9E ; ---------------------------------------------------------------------------
.text:000000000001BB9E
.text:000000000001BB9E loc_1BB9E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001BB9E                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001BB9E                 test    [rsp+158h+var_138], 1000000h ; jumptable 000000000001BABF case 23
.text:000000000001BBA7                 jnz     loc_1BDFD
.text:000000000001BBAD
.text:000000000001BBAD loc_1BBAD:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001BBAD                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001BBAD                 mov     rax, [rsp+158h+var_138] ; jumptable 000000000001BABF cases 11,18,19
.text:000000000001BBB2                 test    al, 20h
.text:000000000001BBB4                 jnz     loc_1BDFD
.text:000000000001BBBA                 test    al, 10h
.text:000000000001BBBC                 jnz     loc_1CA25
.text:000000000001BBC2                 cmp     cl, 9
.text:000000000001BBC5                 jz      loc_1C5D8       ; jumptable 000000000001BABF case 9
.text:000000000001BBCB
.text:000000000001BBCB loc_1BBCB:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001BBCB                                         ; parse_expression+B81↓j
.text:000000000001BBCB                                         ; DATA XREF: ...
.text:000000000001BBCB                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001BABF case 24
.text:000000000001BBD0                 mov     r8, [rsp+158h+var_140]
.text:000000000001BBD5                 xor     ecx, ecx
.text:000000000001BBD7                 xor     edx, edx
.text:000000000001BBD9                 lea     rsi, [rax+80h]
.text:000000000001BBE0                 lea     rdi, [rax+70h]
.text:000000000001BBE4                 mov     byte ptr [r8+8], 1
.text:000000000001BBE9                 call    create_token_tree_isra_16
.text:000000000001BBEE                 test    rax, rax
.text:000000000001BBF1                 mov     [rsp+158h+var_130], rax
.text:000000000001BBF6                 jz      loc_1C5C8
.text:000000000001BBFC
.text:000000000001BBFC loc_1BBFC:                              ; CODE XREF: parse_expression+9A0↓j
.text:000000000001BBFC                                         ; parse_expression+9A9↓j ...
.text:000000000001BBFC                 mov     rbx, [rsp+158h+var_140]
.text:000000000001BC01                 mov     rdx, [rsp+158h+var_138]
.text:000000000001BC06                 mov     rsi, r14
.text:000000000001BC09                 lea     r15, [rsp+158h+var_98]
.text:000000000001BC11                 mov     rdi, rbx
.text:000000000001BC14                 call    peek_token
.text:000000000001BC19                 cdqe
.text:000000000001BC1B                 add     [r14+48h], rax
.text:000000000001BC1F                 movzx   eax, byte ptr [rbx+8]
.text:000000000001BC23                 nop     dword ptr [rax+rax+00h]
.text:000000000001BC28
.text:000000000001BC28 loc_1BC28:                              ; CODE XREF: parse_expression+370↓j
.text:000000000001BC28                                         ; parse_expression+37C↓j
.text:000000000001BC28                 cmp     al, 17h
.text:000000000001BC2A                 ja      loc_1BB70
.text:000000000001BC30                 cmp     al, 12h
.text:000000000001BC32                 mov     ecx, 8C0800h
.text:000000000001BC37                 setz    bl
.text:000000000001BC3A                 bt      rcx, rax
.text:000000000001BC3E                 jnb     loc_1BB70
.text:000000000001BC44                 mov     rcx, [rsp+158h+var_140]
.text:000000000001BC49                 cmp     al, 17h
.text:000000000001BC4B                 mov     rbp, [r14+48h]
.text:000000000001BC4F                 movdqa  xmm0, xmmword ptr [rcx]
.text:000000000001BC53                 jz      loc_1BF78
.text:000000000001BC59                 cmp     al, 13h
.text:000000000001BC5B                 movzx   ebx, bl
.text:000000000001BC5E                 jz      loc_1BF10
.text:000000000001BC64                 mov     rdx, [rsp+158h+var_138]
.text:000000000001BC69                 mov     rdi, [rsp+158h+var_140]
.text:000000000001BC6E                 mov     rsi, r14
.text:000000000001BC71                 call    peek_token
.text:000000000001BC76                 cdqe
.text:000000000001BC78                 add     [r14+48h], rax
.text:000000000001BC7C                 cmp     [rsp+158h+var_130], 0
.text:000000000001BC82                 jz      loc_1C010
.text:000000000001BC88                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:000000000001BC90
.text:000000000001BC90 loc_1BC90:                              ; CODE XREF: parse_expression+4E3↓j
.text:000000000001BC90                 test    rbx, rbx
.text:000000000001BC93                 mov     rbp, [rsp+158h+var_130]
.text:000000000001BC98                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001BCA1                 jg      loc_1BE20
.text:000000000001BCA7
.text:000000000001BCA7 loc_1BCA7:                              ; CODE XREF: parse_expression+471↓j
.text:000000000001BCA7                 cmp     byte ptr [rbp+30h], 11h
.text:000000000001BCAB                 jz      loc_1BFF0
.text:000000000001BCB1
.text:000000000001BCB1 loc_1BCB1:                              ; CODE XREF: parse_expression+5A3↓j
.text:000000000001BCB1                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:000000000001BCB6                 mov     rdx, rbp
.text:000000000001BCB9                 mov     r8, r15
.text:000000000001BCBC                 setz    al
.text:000000000001BCBF                 xor     ecx, ecx
.text:000000000001BCC1                 add     eax, 0Ah
.text:000000000001BCC4                 mov     [rsp+158h+var_90], al
.text:000000000001BCCB                 mov     rax, [rsp+158h+var_148]
.text:000000000001BCD0                 lea     r12, [rax+70h]
.text:000000000001BCD4                 lea     r13, [rax+80h]
.text:000000000001BCDB                 mov     rdi, r12
.text:000000000001BCDE                 mov     rsi, r13
.text:000000000001BCE1                 call    create_token_tree_isra_16
.text:000000000001BCE6                 test    rax, rax
.text:000000000001BCE9                 mov     rdx, rax
.text:000000000001BCEC                 jz      loc_1BEE0
.text:000000000001BCF2                 add     rbx, 2
.text:000000000001BCF6                 cmp     rbx, [rsp+158h+var_158]
.text:000000000001BCFA                 jg      short loc_1BD7B
.text:000000000001BCFC                 mov     [rsp+158h+var_110], r14
.text:000000000001BD01                 mov     r14, rax
.text:000000000001BD04
.text:000000000001BD04 loc_1BD04:                              ; CODE XREF: parse_expression+311↓j
.text:000000000001BD04                 mov     rsi, [rsp+158h+var_148]
.text:000000000001BD09                 mov     rdi, rbp
.text:000000000001BD0C                 call    duplicate_tree
.text:000000000001BD11                 mov     r8, r15
.text:000000000001BD14                 mov     rbp, rax
.text:000000000001BD17                 mov     rcx, rax
.text:000000000001BD1A                 mov     rdx, r14
.text:000000000001BD1D                 mov     rsi, r13
.text:000000000001BD20                 mov     rdi, r12
.text:000000000001BD23                 mov     [rsp+158h+var_90], 10h
.text:000000000001BD2B                 call    create_token_tree_isra_16
.text:000000000001BD30                 test    rbp, rbp
.text:000000000001BD33                 jz      loc_1BEE0
.text:000000000001BD39                 test    rax, rax
.text:000000000001BD3C                 jz      loc_1BEE0
.text:000000000001BD42                 xor     ecx, ecx
.text:000000000001BD44                 mov     r8, r15
.text:000000000001BD47                 mov     rdx, rax
.text:000000000001BD4A                 mov     rsi, r13
.text:000000000001BD4D                 mov     rdi, r12
.text:000000000001BD50                 mov     [rsp+158h+var_90], 0Ah
.text:000000000001BD58                 call    create_token_tree_isra_16
.text:000000000001BD5D                 test    rax, rax
.text:000000000001BD60                 mov     r14, rax
.text:000000000001BD63                 jz      loc_1BEE0
.text:000000000001BD69                 add     rbx, 1
.text:000000000001BD6D                 cmp     rbx, [rsp+158h+var_158]
.text:000000000001BD71                 jle     short loc_1BD04
.text:000000000001BD73                 mov     r14, [rsp+158h+var_110]
.text:000000000001BD78                 mov     rdx, rax
.text:000000000001BD7B
.text:000000000001BD7B loc_1BD7B:                              ; CODE XREF: parse_expression+29A↑j
.text:000000000001BD7B                 mov     rax, qword ptr [rsp+158h+var_128]
.text:000000000001BD80                 test    rax, rax
.text:000000000001BD83                 jz      loc_1C030
.text:000000000001BD89                 mov     rcx, rdx
.text:000000000001BD8C                 mov     r8, r15
.text:000000000001BD8F                 mov     rdx, rax
.text:000000000001BD92                 mov     rsi, r13
.text:000000000001BD95                 mov     rdi, r12
.text:000000000001BD98                 mov     [rsp+158h+var_90], 10h
.text:000000000001BDA0                 call    create_token_tree_isra_16
.text:000000000001BDA5
.text:000000000001BDA5 loc_1BDA5:                              ; CODE XREF: parse_expression+581↓j
.text:000000000001BDA5                 mov     rdi, [rsp+158h+var_118]
.text:000000000001BDAA                 mov     edx, [rdi]
.text:000000000001BDAC                 test    edx, edx
.text:000000000001BDAE                 jz      short loc_1BDB9
.text:000000000001BDB0                 test    rax, rax
.text:000000000001BDB3                 jz      loc_1C10B
.text:000000000001BDB9
.text:000000000001BDB9 loc_1BDB9:                              ; CODE XREF: parse_expression+34E↑j
.text:000000000001BDB9                 mov     [rsp+158h+var_130], rax
.text:000000000001BDBE
.text:000000000001BDBE loc_1BDBE:                              ; CODE XREF: parse_expression+510↓j
.text:000000000001BDBE                                         ; parse_expression+5D5↓j
.text:000000000001BDBE                 test    [rsp+158h+var_138], 1000000h
.text:000000000001BDC7                 mov     rax, [rsp+158h+var_140]
.text:000000000001BDCC                 movzx   eax, byte ptr [rax+8]
.text:000000000001BDD0                 jz      loc_1BC28
.text:000000000001BDD6                 cmp     al, 0Bh
.text:000000000001BDD8                 jz      short loc_1BDE2
.text:000000000001BDDA                 cmp     al, 17h
.text:000000000001BDDC                 jnz     loc_1BC28
.text:000000000001BDE2
.text:000000000001BDE2 loc_1BDE2:                              ; CODE XREF: parse_expression+378↑j
.text:000000000001BDE2                 mov     rax, [rsp+158h+var_130]
.text:000000000001BDE7                 test    rax, rax
.text:000000000001BDEA                 jz      short loc_1BDFD
.text:000000000001BDEC                 lea     rsi, free_tree
.text:000000000001BDF3                 xor     edx, edx
.text:000000000001BDF5                 mov     rdi, rax
.text:000000000001BDF8                 call    postorder
.text:000000000001BDFD
.text:000000000001BDFD loc_1BDFD:                              ; CODE XREF: parse_expression+147↑j
.text:000000000001BDFD                                         ; parse_expression+154↑j ...
.text:000000000001BDFD                 mov     rax, [rsp+158h+var_118]
.text:000000000001BE02                 mov     [rsp+158h+var_130], 0
.text:000000000001BE0B                 mov     dword ptr [rax], 0Dh
.text:000000000001BE11                 jmp     loc_1BB70
.text:000000000001BE11 ; ---------------------------------------------------------------------------
.text:000000000001BE16                 align 20h
.text:000000000001BE20
.text:000000000001BE20 loc_1BE20:                              ; CODE XREF: parse_expression+241↑j
.text:000000000001BE20                 cmp     rbx, 1
.text:000000000001BE24                 jz      loc_1C65C
.text:000000000001BE2A                 mov     rax, [rsp+158h+var_148]
.text:000000000001BE2F                 mov     r13, rbp
.text:000000000001BE32                 mov     [rsp+158h+var_110], r14
.text:000000000001BE37                 lea     r12, [rax+80h]
.text:000000000001BE3E                 lea     rdi, [rax+70h]
.text:000000000001BE42                 mov     rax, rbp
.text:000000000001BE45                 mov     r14, rax
.text:000000000001BE48                 mov     ebp, 2
.text:000000000001BE4D                 mov     rsi, r12
.text:000000000001BE50                 mov     qword ptr [rsp+158h+var_128], rdi
.text:000000000001BE55                 mov     r12, r13
.text:000000000001BE58                 mov     r13, rbx
.text:000000000001BE5B                 mov     rbx, rsi
.text:000000000001BE5E                 xchg    ax, ax
.text:000000000001BE60
.text:000000000001BE60 loc_1BE60:                              ; CODE XREF: parse_expression+442↓j
.text:000000000001BE60                 mov     rsi, [rsp+158h+var_148]
.text:000000000001BE65                 mov     rdi, r12
.text:000000000001BE68                 call    duplicate_tree
.text:000000000001BE6D                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:000000000001BE72                 mov     r12, rax
.text:000000000001BE75                 mov     rdx, r14
.text:000000000001BE78                 mov     r8, r15
.text:000000000001BE7B                 mov     rcx, rax
.text:000000000001BE7E                 mov     rsi, rbx
.text:000000000001BE81                 mov     [rsp+158h+var_90], 10h
.text:000000000001BE89                 call    create_token_tree_isra_16
.text:000000000001BE8E                 test    r12, r12
.text:000000000001BE91                 mov     r14, rax
.text:000000000001BE94                 jz      short loc_1BEE0
.text:000000000001BE96                 test    rax, rax
.text:000000000001BE99                 jz      short loc_1BEE0
.text:000000000001BE9B                 add     rbp, 1
.text:000000000001BE9F                 cmp     rbp, r13
.text:000000000001BEA2                 jle     short loc_1BE60
.text:000000000001BEA4                 mov     r14, [rsp+158h+var_110]
.text:000000000001BEA9                 mov     rbx, r13
.text:000000000001BEAC                 mov     qword ptr [rsp+158h+var_128], rax
.text:000000000001BEB1                 mov     r13, r12
.text:000000000001BEB4
.text:000000000001BEB4 loc_1BEB4:                              ; CODE XREF: parse_expression+C06↓j
.text:000000000001BEB4                 cmp     [rsp+158h+var_158], rbx
.text:000000000001BEB8                 jz      loc_1C024
.text:000000000001BEBE                 mov     rsi, [rsp+158h+var_148]
.text:000000000001BEC3                 mov     rdi, r13
.text:000000000001BEC6                 call    duplicate_tree
.text:000000000001BECB                 test    rax, rax
.text:000000000001BECE                 mov     rbp, rax
.text:000000000001BED1                 jnz     loc_1BCA7
.text:000000000001BED7                 nop     word ptr [rax+rax+00000000h]
.text:000000000001BEE0
.text:000000000001BEE0 loc_1BEE0:                              ; CODE XREF: parse_expression+28C↑j
.text:000000000001BEE0                                         ; parse_expression+2D3↑j ...
.text:000000000001BEE0                 mov     rax, [rsp+158h+var_118]
.text:000000000001BEE5                 mov     dword ptr [rax], 0Ch
.text:000000000001BEEB
.text:000000000001BEEB loc_1BEEB:                              ; CODE XREF: parse_expression+505↓j
.text:000000000001BEEB                                         ; parse_expression+6B1↓j
.text:000000000001BEEB                 mov     rdi, [rsp+158h+var_130]
.text:000000000001BEF0                 lea     rsi, free_tree
.text:000000000001BEF7                 xor     edx, edx
.text:000000000001BEF9                 call    postorder
.text:000000000001BEFE                 mov     [rsp+158h+var_130], 0
.text:000000000001BF07                 jmp     loc_1BB70
.text:000000000001BF07 ; ---------------------------------------------------------------------------
.text:000000000001BF0C                 align 10h
.text:000000000001BF10
.text:000000000001BF10 loc_1BF10:                              ; CODE XREF: parse_expression+1FE↑j
.text:000000000001BF10                 mov     [rsp+158h+var_158], 1
.text:000000000001BF18
.text:000000000001BF18 loc_1BF18:                              ; CODE XREF: parse_expression+65A↓j
.text:000000000001BF18                 mov     rdx, [rsp+158h+var_138]
.text:000000000001BF1D                 mov     rdi, [rsp+158h+var_140]
.text:000000000001BF22                 mov     rsi, r14
.text:000000000001BF25                 call    peek_token
.text:000000000001BF2A                 cdqe
.text:000000000001BF2C                 add     [r14+48h], rax
.text:000000000001BF30                 cmp     [rsp+158h+var_130], 0
.text:000000000001BF36                 jz      loc_1C010
.text:000000000001BF3C                 mov     rax, [rsp+158h+var_158]
.text:000000000001BF40                 or      rax, rbx
.text:000000000001BF43                 jnz     loc_1BC90
.text:000000000001BF49                 mov     rdi, [rsp+158h+var_130]
.text:000000000001BF4E                 lea     rsi, free_tree
.text:000000000001BF55                 xor     edx, edx
.text:000000000001BF57                 call    postorder
.text:000000000001BF5C                 mov     rax, [rsp+158h+var_118]
.text:000000000001BF61                 mov     esi, [rax]
.text:000000000001BF63                 test    esi, esi
.text:000000000001BF65                 jnz     short loc_1BEEB
.text:000000000001BF67
.text:000000000001BF67 loc_1BF67:                              ; CODE XREF: parse_expression+5B9↓j
.text:000000000001BF67                 mov     [rsp+158h+var_130], 0
.text:000000000001BF70                 jmp     loc_1BDBE
.text:000000000001BF70 ; ---------------------------------------------------------------------------
.text:000000000001BF75                 align 8
.text:000000000001BF78
.text:000000000001BF78 loc_1BF78:                              ; CODE XREF: parse_expression+1F3↑j
.text:000000000001BF78                 mov     rdx, [rsp+158h+var_138]
.text:000000000001BF7D                 mov     rsi, rcx
.text:000000000001BF80                 mov     rdi, r14
.text:000000000001BF83                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:000000000001BF87                 call    fetch_number
.text:000000000001BF8C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001BF90                 mov     rbx, rax
.text:000000000001BF93                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:000000000001BF98                 jz      loc_1C040
.text:000000000001BF9E                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001BFA2                 jz      short loc_1BFBD
.text:000000000001BFA4                 mov     rax, [rsp+158h+var_140]
.text:000000000001BFA9                 movzx   eax, byte ptr [rax+8]
.text:000000000001BFAD                 cmp     al, 18h
.text:000000000001BFAF                 jz      loc_1C0D0
.text:000000000001BFB5                 cmp     al, 1
.text:000000000001BFB7                 jz      loc_1C0E3
.text:000000000001BFBD
.text:000000000001BFBD loc_1BFBD:                              ; CODE XREF: parse_expression+542↑j
.text:000000000001BFBD                                         ; parse_expression+624↓j
.text:000000000001BFBD                 test    [rsp+158h+var_138], 200000h
.text:000000000001BFC6                 jz      loc_1CF03
.text:000000000001BFCC
.text:000000000001BFCC loc_1BFCC:                              ; CODE XREF: parse_expression+69A↓j
.text:000000000001BFCC                 mov     rax, [rsp+158h+var_140]
.text:000000000001BFD1                 mov     [r14+48h], rbp
.text:000000000001BFD5                 movaps  xmmword ptr [rax], xmm0
.text:000000000001BFD8                 mov     byte ptr [rax+8], 1
.text:000000000001BFDC                 mov     rax, [rsp+158h+var_130]
.text:000000000001BFE1                 jmp     loc_1BDA5
.text:000000000001BFE1 ; ---------------------------------------------------------------------------
.text:000000000001BFE6                 align 10h
.text:000000000001BFF0
.text:000000000001BFF0 loc_1BFF0:                              ; CODE XREF: parse_expression+24B↑j
.text:000000000001BFF0                 mov     rdx, [rbp+28h]
.text:000000000001BFF4                 lea     rsi, mark_opt_subexp
.text:000000000001BFFB                 mov     rdi, rbp
.text:000000000001BFFE                 call    postorder
.text:000000000001C003                 jmp     loc_1BCB1
.text:000000000001C003 ; ---------------------------------------------------------------------------
.text:000000000001C008                 align 10h
.text:000000000001C010
.text:000000000001C010 loc_1C010:                              ; CODE XREF: parse_expression+222↑j
.text:000000000001C010                                         ; parse_expression+4D6↑j
.text:000000000001C010                 mov     rax, [rsp+158h+var_118]
.text:000000000001C015                 mov     ecx, [rax]
.text:000000000001C017                 test    ecx, ecx
.text:000000000001C019                 jz      loc_1BF67
.text:000000000001C01F                 jmp     def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001C024 ; ---------------------------------------------------------------------------
.text:000000000001C024
.text:000000000001C024 loc_1C024:                              ; CODE XREF: parse_expression+458↑j
.text:000000000001C024                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:000000000001C029                 nop     dword ptr [rax+00000000h]
.text:000000000001C030
.text:000000000001C030 loc_1C030:                              ; CODE XREF: parse_expression+323↑j
.text:000000000001C030                 mov     [rsp+158h+var_130], rdx
.text:000000000001C035                 jmp     loc_1BDBE
.text:000000000001C035 ; ---------------------------------------------------------------------------
.text:000000000001C03A                 align 20h
.text:000000000001C040
.text:000000000001C040 loc_1C040:                              ; CODE XREF: parse_expression+538↑j
.text:000000000001C040                 mov     rax, [rsp+158h+var_140]
.text:000000000001C045                 cmp     byte ptr [rax+8], 1
.text:000000000001C049                 jnz     loc_1C100
.text:000000000001C04F                 mov     rax, [rsp+158h+var_140]
.text:000000000001C054                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001C057                 jnz     loc_1C100
.text:000000000001C05D                 xor     ebx, ebx
.text:000000000001C05F
.text:000000000001C05F loc_1C05F:                              ; CODE XREF: parse_expression+68B↓j
.text:000000000001C05F                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C064                 mov     rsi, [rsp+158h+var_140]
.text:000000000001C069                 mov     rdi, r14
.text:000000000001C06C                 movaps  [rsp+158h+var_128], xmm0
.text:000000000001C071                 call    fetch_number
.text:000000000001C076                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001C07A                 mov     [rsp+158h+var_158], rax
.text:000000000001C07E                 movdqa  xmm0, [rsp+158h+var_128]
.text:000000000001C084                 jz      loc_1BFBD
.text:000000000001C08A                 mov     rax, [rsp+158h+var_158]
.text:000000000001C08E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001C092                 jz      short loc_1C099
.text:000000000001C094                 cmp     rax, rbx
.text:000000000001C097                 jl      short loc_1C100
.text:000000000001C099
.text:000000000001C099 loc_1C099:                              ; CODE XREF: parse_expression+632↑j
.text:000000000001C099                 mov     rax, [rsp+158h+var_140]
.text:000000000001C09E                 cmp     byte ptr [rax+8], 18h
.text:000000000001C0A2                 jnz     short loc_1C100
.text:000000000001C0A4                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:000000000001C0A9                 jnz     short loc_1C0D4
.text:000000000001C0AB                 xor     eax, eax
.text:000000000001C0AD                 cmp     rbx, 7FFFh
.text:000000000001C0B4                 setnle  al
.text:000000000001C0B7
.text:000000000001C0B7 loc_1C0B7:                              ; CODE XREF: parse_expression+681↓j
.text:000000000001C0B7                 test    rax, rax
.text:000000000001C0BA                 jz      loc_1BF18
.text:000000000001C0C0                 mov     rax, [rsp+158h+var_118]
.text:000000000001C0C5                 mov     dword ptr [rax], 0Fh
.text:000000000001C0CB                 jmp     short loc_1C10B
.text:000000000001C0CB ; ---------------------------------------------------------------------------
.text:000000000001C0CD                 align 10h
.text:000000000001C0D0
.text:000000000001C0D0 loc_1C0D0:                              ; CODE XREF: parse_expression+54F↑j
.text:000000000001C0D0                 mov     [rsp+158h+var_158], rbx
.text:000000000001C0D4
.text:000000000001C0D4 loc_1C0D4:                              ; CODE XREF: parse_expression+649↑j
.text:000000000001C0D4                 xor     eax, eax
.text:000000000001C0D6                 cmp     [rsp+158h+var_158], 7FFFh
.text:000000000001C0DE                 setnle  al
.text:000000000001C0E1                 jmp     short loc_1C0B7
.text:000000000001C0E3 ; ---------------------------------------------------------------------------
.text:000000000001C0E3
.text:000000000001C0E3 loc_1C0E3:                              ; CODE XREF: parse_expression+557↑j
.text:000000000001C0E3                 mov     rax, [rsp+158h+var_140]
.text:000000000001C0E8                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001C0EB                 jz      loc_1C05F
.text:000000000001C0F1                 test    [rsp+158h+var_138], 200000h
.text:000000000001C0FA                 jnz     loc_1BFCC
.text:000000000001C100
.text:000000000001C100 loc_1C100:                              ; CODE XREF: parse_expression+5E9↑j
.text:000000000001C100                                         ; parse_expression+5F7↑j ...
.text:000000000001C100                 mov     rax, [rsp+158h+var_118]
.text:000000000001C105                 mov     dword ptr [rax], 0Ah
.text:000000000001C10B
.text:000000000001C10B loc_1C10B:                              ; CODE XREF: parse_expression+353↑j
.text:000000000001C10B                                         ; parse_expression+66B↑j ...
.text:000000000001C10B                 cmp     [rsp+158h+var_130], 0
.text:000000000001C111                 jnz     loc_1BEEB
.text:000000000001C117                 jmp     def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001C117 ; ---------------------------------------------------------------------------
.text:000000000001C11C                 align 20h
.text:000000000001C120
.text:000000000001C120 loc_1C120:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C120                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C120                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001BABF case 12
.text:000000000001C125                 mov     ebp, [rax]
.text:000000000001C127                 test    ebp, 30Fh
.text:000000000001C12D                 jz      short loc_1C191
.text:000000000001C12F                 mov     rax, [rsp+158h+var_148]
.text:000000000001C134                 movzx   eax, byte ptr [rax+0B0h]
.text:000000000001C13B                 test    al, 10h
.text:000000000001C13D                 jnz     short loc_1C191
.text:000000000001C13F                 mov     rdi, [rsp+158h+var_148]
.text:000000000001C144                 or      eax, 10h
.text:000000000001C147                 test    al, 8
.text:000000000001C149                 mov     [rdi+0B0h], al
.text:000000000001C14F                 jnz     loc_1CD53
.text:000000000001C155                 mov     rdx, 3FF000000000000h
.text:000000000001C15F                 test    al, 4
.text:000000000001C161                 mov     [rdi+0B8h], rdx
.text:000000000001C168                 mov     rdx, 7FFFFFE87FFFFFEh
.text:000000000001C172                 mov     [rdi+0C0h], rdx
.text:000000000001C179                 jz      loc_1CCD8
.text:000000000001C17F                 pxor    xmm0, xmm0
.text:000000000001C183                 mov     rax, [rsp+158h+var_140]
.text:000000000001C188                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:000000000001C18F                 mov     ebp, [rax]
.text:000000000001C191
.text:000000000001C191 loc_1C191:                              ; CODE XREF: parse_expression+6CD↑j
.text:000000000001C191                                         ; parse_expression+6DD↑j ...
.text:000000000001C191                 mov     rax, [rsp+158h+var_148]
.text:000000000001C196                 lea     rbx, [rax+70h]
.text:000000000001C19A                 lea     r12, [rax+80h]
.text:000000000001C1A1                 lea     eax, [rbp-100h]
.text:000000000001C1A7                 test    eax, 0FFFFFEFFh
.text:000000000001C1AC                 jnz     loc_1C81A
.text:000000000001C1B2                 cmp     ebp, 100h
.text:000000000001C1B8                 mov     r15, [rsp+158h+var_140]
.text:000000000001C1BD                 jz      loc_1C7F2
.text:000000000001C1C3                 mov     dword ptr [r15], 5
.text:000000000001C1CA                 mov     r8, r15
.text:000000000001C1CD                 xor     ecx, ecx
.text:000000000001C1CF                 xor     edx, edx
.text:000000000001C1D1                 mov     rsi, r12
.text:000000000001C1D4                 mov     rdi, rbx
.text:000000000001C1D7                 call    create_token_tree_isra_16
.text:000000000001C1DC                 mov     dword ptr [r15], 0Ah
.text:000000000001C1E3                 mov     rbp, rax
.text:000000000001C1E6
.text:000000000001C1E6 loc_1C1E6:                              ; CODE XREF: parse_expression+DB5↓j
.text:000000000001C1E6                 mov     r8, [rsp+158h+var_140]
.text:000000000001C1EB                 xor     ecx, ecx
.text:000000000001C1ED                 xor     edx, edx
.text:000000000001C1EF                 mov     rsi, r12
.text:000000000001C1F2                 mov     rdi, rbx
.text:000000000001C1F5                 call    create_token_tree_isra_16
.text:000000000001C1FA                 lea     r8, [rsp+158h+var_98]
.text:000000000001C202                 mov     rdx, rbp
.text:000000000001C205                 mov     rdi, rbx
.text:000000000001C208                 mov     rcx, rax
.text:000000000001C20B                 mov     rsi, r12
.text:000000000001C20E                 mov     r13, rax
.text:000000000001C211                 mov     [rsp+158h+var_90], 0Ah
.text:000000000001C219                 call    create_token_tree_isra_16
.text:000000000001C21E                 test    rbp, rbp
.text:000000000001C221                 mov     rdi, rax
.text:000000000001C224                 mov     [rsp+158h+var_130], rax
.text:000000000001C229                 setz    dl
.text:000000000001C22C                 test    r13, r13
.text:000000000001C22F                 setz    al
.text:000000000001C232                 or      dl, al
.text:000000000001C234                 jnz     loc_1C5C8
.text:000000000001C23A                 test    rdi, rdi
.text:000000000001C23D                 jz      loc_1C5C8
.text:000000000001C243
.text:000000000001C243 loc_1C243:                              ; CODE XREF: parse_expression+DD6↓j
.text:000000000001C243                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C248                 mov     rdi, [rsp+158h+var_140]
.text:000000000001C24D                 mov     rsi, r14
.text:000000000001C250                 call    peek_token
.text:000000000001C255                 cdqe
.text:000000000001C257                 add     [r14+48h], rax
.text:000000000001C25B                 jmp     loc_1BB70
.text:000000000001C260 ; ---------------------------------------------------------------------------
.text:000000000001C260
.text:000000000001C260 loc_1C260:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C260                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C260                 mov     esi, 1          ; jumptable 000000000001BABF case 20
.text:000000000001C265                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000001C26A                 mov     [rsp+158h+var_C0], 0
.text:000000000001C276                 call    _calloc
.text:000000000001C27B                 mov     esi, 1          ; size
.text:000000000001C280                 mov     r12, rax
.text:000000000001C283                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000001C288                 call    _calloc
.text:000000000001C28D                 test    r12, r12
.text:000000000001C290                 mov     r13, rax
.text:000000000001C293                 setz    dl
.text:000000000001C296                 test    rax, rax
.text:000000000001C299                 setz    al
.text:000000000001C29C                 or      dl, al
.text:000000000001C29E                 jnz     loc_1CA79
.text:000000000001C2A4                 mov     r10, [rsp+158h+var_140]
.text:000000000001C2A9                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C2AE                 mov     rsi, r14
.text:000000000001C2B1                 mov     rdi, r10
.text:000000000001C2B4                 call    peek_token_bracket
.text:000000000001C2B9                 movsxd  rbx, eax
.text:000000000001C2BC                 movzx   eax, byte ptr [r10+8]
.text:000000000001C2C1                 cmp     al, 2
.text:000000000001C2C3                 jz      loc_1CA69
.text:000000000001C2C9                 cmp     al, 19h
.text:000000000001C2CB                 mov     [rsp+158h+var_101], 0
.text:000000000001C2D0                 jz      loc_1C79A
.text:000000000001C2D6
.text:000000000001C2D6 loc_1C2D6:                              ; CODE XREF: parse_expression+D7F↓j
.text:000000000001C2D6                 cmp     al, 15h
.text:000000000001C2D8                 jz      loc_1C7E4
.text:000000000001C2DE
.text:000000000001C2DE loc_1C2DE:                              ; CODE XREF: parse_expression+D8D↓j
.text:000000000001C2DE                 lea     rax, [rsp+158h+var_88]
.text:000000000001C2E6                 mov     r15, [rsp+158h+var_140]
.text:000000000001C2EB                 lea     rbp, jpt_1C3C6
.text:000000000001C2F2                 mov     [rsp+158h+var_110], 0
.text:000000000001C2FB                 mov     r9d, 1
.text:000000000001C301                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001C30A                 mov     [rsp+158h+var_130], rax
.text:000000000001C30F                 lea     rax, [rsp+158h+var_B8]
.text:000000000001C317                 mov     [rsp+158h+var_158], rax
.text:000000000001C31B                 lea     rax, [rsp+158h+var_C0]
.text:000000000001C323                 mov     [rsp+158h+var_100], rax
.text:000000000001C328                 lea     rax, [rsp+158h+var_98]
.text:000000000001C330                 mov     [rsp+158h+var_F8], rax
.text:000000000001C335                 lea     rax, [rsp+158h+var_68]
.text:000000000001C33D                 mov     [rsp+158h+var_F0], rax
.text:000000000001C342
.text:000000000001C342 loc_1C342:                              ; CODE XREF: parse_expression+C58↓j
.text:000000000001C342                 mov     rax, [rsp+158h+var_130]
.text:000000000001C347                 mov     r8, [rsp+158h+var_138]
.text:000000000001C34C                 and     r9d, 1
.text:000000000001C350                 mov     rdi, [rsp+158h+var_158]
.text:000000000001C354                 mov     ecx, ebx
.text:000000000001C356                 mov     rdx, r15
.text:000000000001C359                 mov     rsi, r14
.text:000000000001C35C                 mov     [rsp+158h+var_B8], 3
.text:000000000001C367                 mov     [rsp+158h+var_B0], rax
.text:000000000001C36F                 call    parse_bracket_element_constprop_37
.text:000000000001C374                 test    eax, eax
.text:000000000001C376                 jnz     loc_1C85B
.text:000000000001C37C                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C381                 mov     rsi, r14
.text:000000000001C384                 mov     rdi, r15
.text:000000000001C387                 call    peek_token_bracket
.text:000000000001C38C                 movsxd  rbx, eax
.text:000000000001C38F                 mov     eax, [rsp+158h+var_B8]
.text:000000000001C396                 lea     edx, [rax-2]
.text:000000000001C399                 and     edx, 0FFFFFFFDh
.text:000000000001C39C                 jz      short loc_1C3B5
.text:000000000001C39E                 movzx   edx, byte ptr [r15+8]
.text:000000000001C3A3                 cmp     dl, 2
.text:000000000001C3A6                 jz      loc_1C841
.text:000000000001C3AC                 cmp     dl, 16h
.text:000000000001C3AF                 jz      loc_1C867
.text:000000000001C3B5
.text:000000000001C3B5 loc_1C3B5:                              ; CODE XREF: parse_expression+93C↑j
.text:000000000001C3B5                                         ; parse_expression+105D↓j
.text:000000000001C3B5                 cmp     eax, 4          ; switch 5 cases
.text:000000000001C3B8                 ja      def_1C3C6       ; jumptable 000000000001C3C6 default case
.text:000000000001C3BE                 movsxd  rax, ss:(jpt_1C3C6 - 22CB4h)[rbp+rax*4]
.text:000000000001C3C3                 add     rax, rbp
.text:000000000001C3C6                 jmp     rax             ; switch jump
.text:000000000001C3C8 ; ---------------------------------------------------------------------------
.text:000000000001C3C8
.text:000000000001C3C8 loc_1C3C8:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C3C8                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C3C8                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001BABF cases 34,35
.text:000000000001C3CD                 cmp     cl, 23h ; '#'
.text:000000000001C3D0                 mov     rsi, [rdi+78h]
.text:000000000001C3D4                 setz    r8b
.text:000000000001C3D8                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:000000000001C3DF                 lea     rdx, aSpace     ; "space"
.text:000000000001C3E6                 movzx   r8d, r8b
.text:000000000001C3EA                 mov     r9, rbx
.text:000000000001C3ED
.text:000000000001C3ED loc_1C3ED:                              ; CODE XREF: parse_expression+9DD↓j
.text:000000000001C3ED                 mov     rdi, [rsp+158h+var_148]
.text:000000000001C3F2                 call    build_charclass_op
.text:000000000001C3F7                 mov     edi, [rbx]
.text:000000000001C3F9                 mov     [rsp+158h+var_130], rax
.text:000000000001C3FE                 test    edi, edi
.text:000000000001C400                 jz      loc_1BBFC
.text:000000000001C406                 test    rax, rax
.text:000000000001C409                 jnz     loc_1BBFC
.text:000000000001C40F                 jmp     def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001C40F ; ---------------------------------------------------------------------------
.text:000000000001C414                 align 8
.text:000000000001C418
.text:000000000001C418 loc_1C418:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C418                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C418                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001BABF cases 32,33
.text:000000000001C41D                 cmp     cl, 21h ; '!'
.text:000000000001C420                 mov     rsi, [rdi+78h]
.text:000000000001C424                 setz    r8b
.text:000000000001C428                 lea     rcx, s2+2       ; "_"
.text:000000000001C42F                 lea     rdx, aAlnum     ; "alnum"
.text:000000000001C436                 movzx   r8d, r8b
.text:000000000001C43A                 mov     r9, rbx
.text:000000000001C43D                 jmp     short loc_1C3ED
.text:000000000001C43F ; ---------------------------------------------------------------------------
.text:000000000001C43F
.text:000000000001C43F loc_1C43F:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C43F                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C43F                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001BABF case 4
.text:000000000001C444                 mov     rdi, [rsp+158h+var_148]
.text:000000000001C449                 mov     rcx, [rax]
.text:000000000001C44C                 mov     eax, 1
.text:000000000001C451                 shl     eax, cl
.text:000000000001C453                 cdqe
.text:000000000001C455                 test    [rdi+0A8h], rax
.text:000000000001C45C                 jz      loc_1CA8E
.text:000000000001C462                 mov     rbx, [rsp+158h+var_148]
.text:000000000001C467                 mov     r8, [rsp+158h+var_140]
.text:000000000001C46C                 xor     ecx, ecx
.text:000000000001C46E                 xor     edx, edx
.text:000000000001C470                 or      [rbx+0A0h], rax
.text:000000000001C477                 lea     rsi, [rbx+80h]
.text:000000000001C47E                 lea     rdi, [rbx+70h]
.text:000000000001C482                 call    create_token_tree_isra_16
.text:000000000001C487                 test    rax, rax
.text:000000000001C48A                 mov     [rsp+158h+var_130], rax
.text:000000000001C48F                 jz      loc_1C5C8
.text:000000000001C495                 add     qword ptr [rbx+98h], 1
.text:000000000001C49D                 or      byte ptr [rbx+0B0h], 2
.text:000000000001C4A4                 jmp     loc_1BBFC
.text:000000000001C4A9 ; ---------------------------------------------------------------------------
.text:000000000001C4A9
.text:000000000001C4A9 loc_1C4A9:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C4A9                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C4A9                 mov     rbx, [rsp+158h+var_148] ; jumptable 000000000001BABF case 5
.text:000000000001C4AE                 mov     r8, [rsp+158h+var_140]
.text:000000000001C4B3                 xor     ecx, ecx
.text:000000000001C4B5                 xor     edx, edx
.text:000000000001C4B7                 lea     rsi, [rbx+80h]
.text:000000000001C4BE                 lea     rdi, [rbx+70h]
.text:000000000001C4C2                 call    create_token_tree_isra_16
.text:000000000001C4C7                 test    rax, rax
.text:000000000001C4CA                 mov     [rsp+158h+var_130], rax
.text:000000000001C4CF                 jz      loc_1C5C8
.text:000000000001C4D5                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000001C4DC                 jle     loc_1BBFC
.text:000000000001C4E2                 or      byte ptr [rbx+0B0h], 2
.text:000000000001C4E9                 jmp     loc_1BBFC
.text:000000000001C4EE ; ---------------------------------------------------------------------------
.text:000000000001C4EE
.text:000000000001C4EE loc_1C4EE:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C4EE                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C4EE                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001BABF case 1
.text:000000000001C4F3                 mov     r8, [rsp+158h+var_140]
.text:000000000001C4F8                 xor     ecx, ecx
.text:000000000001C4FA                 xor     edx, edx
.text:000000000001C4FC                 lea     rbx, [rax+70h]
.text:000000000001C500                 lea     rbp, [rax+80h]
.text:000000000001C507                 mov     rdi, rbx
.text:000000000001C50A                 mov     rsi, rbp
.text:000000000001C50D                 call    create_token_tree_isra_16
.text:000000000001C512                 test    rax, rax
.text:000000000001C515                 mov     [rsp+158h+var_130], rax
.text:000000000001C51A                 jz      loc_1C5C8
.text:000000000001C520                 mov     rax, [rsp+158h+var_148]
.text:000000000001C525                 lea     r12, [rsp+158h+var_98]
.text:000000000001C52D                 mov     r15, [rsp+158h+var_130]
.text:000000000001C532                 cmp     dword ptr [rax+0B4h], 1
.text:000000000001C539                 jle     loc_1BBFC
.text:000000000001C53F
.text:000000000001C53F loc_1C53F:                              ; CODE XREF: parse_expression+B62↓j
.text:000000000001C53F                 mov     rax, [r14+48h]
.text:000000000001C543                 cmp     [r14+68h], rax
.text:000000000001C547                 jle     loc_1C851
.text:000000000001C54D                 cmp     rax, [r14+30h]
.text:000000000001C551                 jz      loc_1C851
.text:000000000001C557                 mov     rdx, [r14+10h]
.text:000000000001C55B                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000001C55F                 jnz     loc_1C851
.text:000000000001C565                 mov     r13, [rsp+158h+var_140]
.text:000000000001C56A                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C56F                 mov     rsi, r14
.text:000000000001C572                 mov     rdi, r13
.text:000000000001C575                 call    peek_token
.text:000000000001C57A                 cdqe
.text:000000000001C57C                 add     [r14+48h], rax
.text:000000000001C580                 mov     r8, r13
.text:000000000001C583                 xor     ecx, ecx
.text:000000000001C585                 xor     edx, edx
.text:000000000001C587                 mov     rsi, rbp
.text:000000000001C58A                 mov     rdi, rbx
.text:000000000001C58D                 call    create_token_tree_isra_16
.text:000000000001C592                 mov     rdx, r15
.text:000000000001C595                 mov     r13, rax
.text:000000000001C598                 mov     r8, r12
.text:000000000001C59B                 mov     rcx, rax
.text:000000000001C59E                 mov     rsi, rbp
.text:000000000001C5A1                 mov     rdi, rbx
.text:000000000001C5A4                 mov     [rsp+158h+var_90], 10h
.text:000000000001C5AC                 call    create_token_tree_isra_16
.text:000000000001C5B1                 test    r13, r13
.text:000000000001C5B4                 mov     r15, rax
.text:000000000001C5B7                 setz    dl
.text:000000000001C5BA                 test    rax, rax
.text:000000000001C5BD                 setz    al
.text:000000000001C5C0                 or      dl, al
.text:000000000001C5C2                 jz      loc_1C53F
.text:000000000001C5C8
.text:000000000001C5C8 loc_1C5C8:                              ; CODE XREF: parse_expression+196↑j
.text:000000000001C5C8                                         ; parse_expression+7D4↑j ...
.text:000000000001C5C8                 mov     rax, [rsp+158h+var_118]
.text:000000000001C5CD                 mov     dword ptr [rax], 0Ch
.text:000000000001C5D3                 jmp     def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001C5D8 ; ---------------------------------------------------------------------------
.text:000000000001C5D8
.text:000000000001C5D8 loc_1C5D8:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C5D8                                         ; parse_expression+165↑j
.text:000000000001C5D8                                         ; DATA XREF: ...
.text:000000000001C5D8                 test    [rsp+158h+var_138], 20000h ; jumptable 000000000001BABF case 9
.text:000000000001C5E1                 jnz     loc_1BBCB       ; jumptable 000000000001BABF case 24
.text:000000000001C5E7                 mov     rax, [rsp+158h+var_118]
.text:000000000001C5EC                 mov     [rsp+158h+var_130], 0
.text:000000000001C5F5                 mov     dword ptr [rax], 10h
.text:000000000001C5FB                 jmp     loc_1BB70
.text:000000000001C600 ; ---------------------------------------------------------------------------
.text:000000000001C600
.text:000000000001C600 loc_1C600:                              ; CODE XREF: parse_expression+A0↑j
.text:000000000001C600                                         ; parse_expression+D6↑j
.text:000000000001C600                 cmp     rbx, 8
.text:000000000001C604                 jbe     short loc_1C66B
.text:000000000001C606
.text:000000000001C606 loc_1C606:                              ; CODE XREF: parse_expression+C23↓j
.text:000000000001C606                 mov     rdi, [rsp+158h+var_148]
.text:000000000001C60B                 lea     r8, [rsp+158h+var_98]
.text:000000000001C613                 xor     ecx, ecx
.text:000000000001C615                 mov     rdx, rax
.text:000000000001C618                 mov     [rsp+158h+var_90], 11h
.text:000000000001C620                 lea     rsi, [rdi+80h]
.text:000000000001C627                 add     rdi, 70h ; 'p'
.text:000000000001C62B                 call    create_token_tree_isra_16
.text:000000000001C630                 test    rax, rax
.text:000000000001C633                 mov     [rsp+158h+var_130], rax
.text:000000000001C638                 jz      short loc_1C5C8
.text:000000000001C63A                 mov     [rax+28h], rbx
.text:000000000001C63E                 jmp     loc_1BBFC
.text:000000000001C643 ; ---------------------------------------------------------------------------
.text:000000000001C643
.text:000000000001C643 loc_1C643:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001C643                                         ; DATA XREF: .rodata:jpt_1BABF↓o
.text:000000000001C643                 mov     rax, [rsp+158h+var_118] ; jumptable 000000000001BABF case 36
.text:000000000001C648                 mov     [rsp+158h+var_130], 0
.text:000000000001C651                 mov     dword ptr [rax], 5
.text:000000000001C657                 jmp     loc_1BB70
.text:000000000001C65C ; ---------------------------------------------------------------------------
.text:000000000001C65C
.text:000000000001C65C loc_1C65C:                              ; CODE XREF: parse_expression+3C4↑j
.text:000000000001C65C                 mov     r13, [rsp+158h+var_130]
.text:000000000001C661                 mov     qword ptr [rsp+158h+var_128], r13
.text:000000000001C666                 jmp     loc_1BEB4
.text:000000000001C66B ; ---------------------------------------------------------------------------
.text:000000000001C66B
.text:000000000001C66B loc_1C66B:                              ; CODE XREF: parse_expression+BA4↑j
.text:000000000001C66B                 mov     rsi, [rsp+158h+var_148]
.text:000000000001C670                 mov     edx, 1
.text:000000000001C675                 mov     ecx, ebx
.text:000000000001C677                 shl     edx, cl
.text:000000000001C679                 movsxd  rdx, edx
.text:000000000001C67C                 or      [rsi+0A8h], rdx
.text:000000000001C683                 jmp     short loc_1C606
.text:000000000001C685 ; ---------------------------------------------------------------------------
.text:000000000001C685
.text:000000000001C685 loc_1C685:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001C685                                         ; DATA XREF: .rodata:jpt_1C3C6↓o
.text:000000000001C685                 mov     rsi, [rsp+158h+var_B0] ; jumptable 000000000001C3C6 case 3
.text:000000000001C68D                 mov     rdi, r12
.text:000000000001C690                 call    build_equiv_class_isra_27
.text:000000000001C695                 mov     rdx, [rsp+158h+var_118]
.text:000000000001C69A                 test    eax, eax
.text:000000000001C69C                 mov     [rdx], eax
.text:000000000001C69E                 jnz     short loc_1C6D8
.text:000000000001C6A0
.text:000000000001C6A0 loc_1C6A0:                              ; CODE XREF: parse_expression+C76↓j
.text:000000000001C6A0                                         ; parse_expression+CCC↓j ...
.text:000000000001C6A0                 movzx   eax, byte ptr [r15+8]
.text:000000000001C6A5                 cmp     al, 2
.text:000000000001C6A7                 jz      loc_1C841
.text:000000000001C6AD                 cmp     al, 15h
.text:000000000001C6AF                 jz      loc_1CAC2
.text:000000000001C6B5                 xor     r9d, r9d
.text:000000000001C6B8                 jmp     loc_1C342
.text:000000000001C6BD ; ---------------------------------------------------------------------------
.text:000000000001C6BD
.text:000000000001C6BD loc_1C6BD:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001C6BD                                         ; DATA XREF: .rodata:jpt_1C3C6↓o
.text:000000000001C6BD                 mov     rsi, [rsp+158h+var_B0] ; jumptable 000000000001C3C6 case 2
.text:000000000001C6C5                 mov     rdi, r12
.text:000000000001C6C8                 call    build_equiv_class_isra_27
.text:000000000001C6CD                 mov     rdx, [rsp+158h+var_118]
.text:000000000001C6D2                 test    eax, eax
.text:000000000001C6D4                 mov     [rdx], eax
.text:000000000001C6D6                 jz      short loc_1C6A0
.text:000000000001C6D8
.text:000000000001C6D8 loc_1C6D8:                              ; CODE XREF: parse_expression+C3E↑j
.text:000000000001C6D8                                         ; parse_expression+D35↓j ...
.text:000000000001C6D8                 mov     rdi, r12        ; ptr
.text:000000000001C6DB                 call    free
.text:000000000001C6E0                 mov     rdi, r13        ; ptr
.text:000000000001C6E3                 call    isl_union_flow_free_0
.text:000000000001C6E8                 mov     rax, [rsp+158h+var_118]
.text:000000000001C6ED                 mov     r8d, [rax]
.text:000000000001C6F0                 test    r8d, r8d
.text:000000000001C6F3                 jnz     def_1BABF       ; jumptable 000000000001BABF default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001C6F9                 mov     [rsp+158h+var_130], 0
.text:000000000001C702                 jmp     loc_1BBFC
.text:000000000001C707 ; ---------------------------------------------------------------------------
.text:000000000001C707
.text:000000000001C707 loc_1C707:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001C707                                         ; DATA XREF: .rodata:jpt_1C3C6↓o
.text:000000000001C707                 mov     rdx, [r13+28h]  ; jumptable 000000000001C3C6 case 1
.text:000000000001C70B                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:000000000001C710                 mov     rax, [r13+0]
.text:000000000001C714                 jz      loc_1CC0E
.text:000000000001C71A
.text:000000000001C71A loc_1C71A:                              ; CODE XREF: parse_expression+11DE↓j
.text:000000000001C71A                 lea     rcx, [rdx+1]
.text:000000000001C71E                 mov     [r13+28h], rcx
.text:000000000001C722                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:000000000001C729                 mov     [rax+rdx*4], ecx
.text:000000000001C72C                 jmp     loc_1C6A0
.text:000000000001C731 ; ---------------------------------------------------------------------------
.text:000000000001C731
.text:000000000001C731 loc_1C731:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001C731                                         ; DATA XREF: .rodata:jpt_1C3C6↓o
.text:000000000001C731                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 000000000001C3C6 case 0
.text:000000000001C739                 mov     esi, 1
.text:000000000001C73E                 mov     rax, rdx
.text:000000000001C741                 and     edx, 3Fh
.text:000000000001C744                 shr     rax, 3
.text:000000000001C748                 mov     ecx, edx
.text:000000000001C74A                 and     eax, 18h
.text:000000000001C74D                 shl     rsi, cl
.text:000000000001C750                 or      [r12+rax], rsi
.text:000000000001C754                 jmp     loc_1C6A0
.text:000000000001C759 ; ---------------------------------------------------------------------------
.text:000000000001C759
.text:000000000001C759 loc_1C759:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001C759                                         ; DATA XREF: .rodata:jpt_1C3C6↓o
.text:000000000001C759                 sub     rsp, 8          ; jumptable 000000000001C3C6 case 4
.text:000000000001C75D                 mov     rdi, [r14+78h]
.text:000000000001C761                 lea     rdx, [r13+18h]
.text:000000000001C765                 push    [rsp+160h+var_138]
.text:000000000001C769                 mov     r9, [rsp+168h+var_B0]
.text:000000000001C771                 lea     rcx, [r13+48h]
.text:000000000001C775                 mov     r8, [rsp+168h+var_100]
.text:000000000001C77A                 mov     rsi, r12
.text:000000000001C77D                 call    build_charclass_isra_29
.text:000000000001C782                 mov     rdx, [rsp+168h+var_118]
.text:000000000001C787                 test    eax, eax
.text:000000000001C789                 mov     [rdx], eax
.text:000000000001C78B                 pop     r9
.text:000000000001C78D                 pop     r10
.text:000000000001C78F                 jz      loc_1C6A0
.text:000000000001C795                 jmp     loc_1C6D8
.text:000000000001C79A ; ---------------------------------------------------------------------------
.text:000000000001C79A
.text:000000000001C79A loc_1C79A:                              ; CODE XREF: parse_expression+870↑j
.text:000000000001C79A                 or      byte ptr [r13+20h], 1
.text:000000000001C79F                 test    [rsp+158h+var_138], 100h
.text:000000000001C7A8                 jz      short loc_1C7B2
.text:000000000001C7AA                 or      qword ptr [r12], 400h
.text:000000000001C7B2
.text:000000000001C7B2 loc_1C7B2:                              ; CODE XREF: parse_expression+D48↑j
.text:000000000001C7B2                 add     [r14+48h], rbx
.text:000000000001C7B6                 mov     r11, [rsp+158h+var_140]
.text:000000000001C7BB                 mov     rsi, r14
.text:000000000001C7BE                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C7C3                 mov     rdi, r11
.text:000000000001C7C6                 call    peek_token_bracket
.text:000000000001C7CB                 mov     ebx, eax
.text:000000000001C7CD                 movzx   eax, byte ptr [r11+8]
.text:000000000001C7D2                 cmp     al, 2
.text:000000000001C7D4                 jz      loc_1CA69
.text:000000000001C7DA                 mov     [rsp+158h+var_101], 1
.text:000000000001C7DF                 jmp     loc_1C2D6
.text:000000000001C7E4 ; ---------------------------------------------------------------------------
.text:000000000001C7E4
.text:000000000001C7E4 loc_1C7E4:                              ; CODE XREF: parse_expression+878↑j
.text:000000000001C7E4                 mov     rax, [rsp+158h+var_140]
.text:000000000001C7E9                 mov     byte ptr [rax+8], 1
.text:000000000001C7ED                 jmp     loc_1C2DE
.text:000000000001C7F2 ; ---------------------------------------------------------------------------
.text:000000000001C7F2
.text:000000000001C7F2 loc_1C7F2:                              ; CODE XREF: parse_expression+75D↑j
.text:000000000001C7F2                 mov     dword ptr [r15], 6
.text:000000000001C7F9                 mov     r8, r15
.text:000000000001C7FC                 xor     ecx, ecx
.text:000000000001C7FE                 xor     edx, edx
.text:000000000001C800                 mov     rsi, r12
.text:000000000001C803                 mov     rdi, rbx
.text:000000000001C806                 call    create_token_tree_isra_16
.text:000000000001C80B                 mov     dword ptr [r15], 9
.text:000000000001C812                 mov     rbp, rax
.text:000000000001C815                 jmp     loc_1C1E6
.text:000000000001C81A ; ---------------------------------------------------------------------------
.text:000000000001C81A
.text:000000000001C81A loc_1C81A:                              ; CODE XREF: parse_expression+74C↑j
.text:000000000001C81A                 mov     r8, [rsp+158h+var_140]
.text:000000000001C81F                 xor     ecx, ecx
.text:000000000001C821                 xor     edx, edx
.text:000000000001C823                 mov     rsi, r12
.text:000000000001C826                 mov     rdi, rbx
.text:000000000001C829                 call    create_token_tree_isra_16
.text:000000000001C82E                 test    rax, rax
.text:000000000001C831                 mov     [rsp+158h+var_130], rax
.text:000000000001C836                 jnz     loc_1C243
.text:000000000001C83C                 jmp     loc_1C5C8
.text:000000000001C841 ; ---------------------------------------------------------------------------
.text:000000000001C841
.text:000000000001C841 loc_1C841:                              ; CODE XREF: parse_expression+946↑j
.text:000000000001C841                                         ; parse_expression+C47↑j ...
.text:000000000001C841                 mov     rax, [rsp+158h+var_118]
.text:000000000001C846                 mov     dword ptr [rax], 7
.text:000000000001C84C                 jmp     loc_1C6D8
.text:000000000001C851 ; ---------------------------------------------------------------------------
.text:000000000001C851
.text:000000000001C851 loc_1C851:                              ; CODE XREF: parse_expression+AE7↑j
.text:000000000001C851                                         ; parse_expression+AF1↑j ...
.text:000000000001C851                 mov     [rsp+158h+var_130], r15
.text:000000000001C856                 jmp     loc_1BBFC
.text:000000000001C85B ; ---------------------------------------------------------------------------
.text:000000000001C85B
.text:000000000001C85B loc_1C85B:                              ; CODE XREF: parse_expression+916↑j
.text:000000000001C85B                                         ; parse_expression+E6E↓j
.text:000000000001C85B                 mov     rdx, [rsp+158h+var_118]
.text:000000000001C860                 mov     [rdx], eax
.text:000000000001C862                 jmp     loc_1C6D8
.text:000000000001C867 ; ---------------------------------------------------------------------------
.text:000000000001C867
.text:000000000001C867 loc_1C867:                              ; CODE XREF: parse_expression+94F↑j
.text:000000000001C867                 movsxd  rax, ebx
.text:000000000001C86A                 mov     r11, [rsp+158h+var_138]
.text:000000000001C86F                 add     [r14+48h], rax
.text:000000000001C873                 mov     r10, [rsp+158h+var_F8]
.text:000000000001C878                 mov     rdx, r11
.text:000000000001C87B                 mov     rdi, r10
.text:000000000001C87E                 call    peek_token_bracket
.text:000000000001C883                 movzx   edx, [rsp+158h+var_90]
.text:000000000001C88B                 cmp     dl, 2
.text:000000000001C88E                 jz      short loc_1C841
.text:000000000001C890                 cmp     dl, 15h
.text:000000000001C893                 jz      loc_1CAA7
.text:000000000001C899                 mov     rdx, [rsp+158h+var_F0]
.text:000000000001C89E                 lea     rdi, [rsp+158h+var_A8]
.text:000000000001C8A6                 mov     r9d, 1
.text:000000000001C8AC                 mov     r8, r11
.text:000000000001C8AF                 mov     ecx, eax
.text:000000000001C8B1                 mov     dword ptr [rsp+158h+var_A8], 3
.text:000000000001C8BC                 mov     [rsp+158h+var_A0], rdx
.text:000000000001C8C4                 mov     rdx, r10
.text:000000000001C8C7                 call    parse_bracket_element_constprop_37
.text:000000000001C8CC                 test    eax, eax
.text:000000000001C8CE                 jnz     short loc_1C85B
.text:000000000001C8D0                 mov     rdx, [rsp+158h+var_138]
.text:000000000001C8D5                 mov     rsi, r14
.text:000000000001C8D8                 mov     rdi, r15
.text:000000000001C8DB                 call    peek_token_bracket
.text:000000000001C8E0                 movsxd  rbx, eax
.text:000000000001C8E3                 mov     rax, [rsp+158h+var_148]
.text:000000000001C8E8                 mov     esi, [rsp+158h+var_B8]
.text:000000000001C8EF                 mov     r9d, 0
.text:000000000001C8F5                 cmp     dword ptr [rax+0B4h], 1
.text:000000000001C8FC                 lea     eax, [rsi-2]
.text:000000000001C8FF                 cmovg   r9, r13
.text:000000000001C903                 and     eax, 0FFFFFFFDh
.text:000000000001C906                 jz      loc_1CD79
.text:000000000001C90C                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:000000000001C914                 lea     eax, [r10-2]
.text:000000000001C918                 and     eax, 0FFFFFFFDh
.text:000000000001C91B                 jz      loc_1CD79
.text:000000000001C921                 cmp     esi, 3
.text:000000000001C924                 setz    r11b
.text:000000000001C928                 jz      loc_1CDBD
.text:000000000001C92E
.text:000000000001C92E loc_1C92E:                              ; CODE XREF: parse_expression+137B↓j
.text:000000000001C92E                 cmp     r10d, 3
.text:000000000001C932                 jz      loc_1CD89
.text:000000000001C938
.text:000000000001C938 loc_1C938:                              ; CODE XREF: parse_expression+1347↓j
.text:000000000001C938                 test    esi, esi
.text:000000000001C93A                 jnz     loc_1CCA9
.text:000000000001C940                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:000000000001C948
.text:000000000001C948 loc_1C948:                              ; CODE XREF: parse_expression+124E↓j
.text:000000000001C948                                         ; parse_expression+125F↓j
.text:000000000001C948                 test    r10d, r10d
.text:000000000001C94B                 jnz     loc_1CC8D
.text:000000000001C951                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:000000000001C95A
.text:000000000001C95A loc_1C95A:                              ; CODE XREF: parse_expression+14CE↓j
.text:000000000001C95A                 test    esi, esi
.text:000000000001C95C                 jz      loc_1CC46
.text:000000000001C962                 test    r11b, r11b
.text:000000000001C965                 jnz     loc_1CC46
.text:000000000001C96B                 test    r9, r9
.text:000000000001C96E                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:000000000001C975                 jz      short loc_1C994
.text:000000000001C977
.text:000000000001C977 loc_1C977:                              ; CODE XREF: parse_expression+1212↓j
.text:000000000001C977                                         ; parse_expression+121A↓j
.text:000000000001C977                 mov     edi, r8d        ; c
.text:000000000001C97A                 mov     dword ptr [rsp+158h+ptr], edx
.text:000000000001C97E                 mov     [rsp+158h+var_E8], r9
.text:000000000001C983                 call    _btowc
.text:000000000001C988                 mov     r9, [rsp+158h+var_E8]
.text:000000000001C98D                 mov     edx, dword ptr [rsp+158h+ptr]
.text:000000000001C991                 mov     r8d, eax
.text:000000000001C994
.text:000000000001C994 loc_1C994:                              ; CODE XREF: parse_expression+F15↑j
.text:000000000001C994                                         ; parse_expression+1228↓j
.text:000000000001C994                 cmp     edx, 0FFFFFFFFh
.text:000000000001C997                 jz      loc_1CDAD
.text:000000000001C99D                 cmp     r8d, 0FFFFFFFFh
.text:000000000001C9A1                 jz      loc_1CDAD
.text:000000000001C9A7
.text:000000000001C9A7 loc_1C9A7:                              ; CODE XREF: parse_expression+1267↓j
.text:000000000001C9A7                                         ; parse_expression+1273↓j
.text:000000000001C9A7                 test    [rsp+158h+var_138], 10000h
.text:000000000001C9B0                 jz      short loc_1C9BB
.text:000000000001C9B2                 cmp     r8d, edx
.text:000000000001C9B5                 jb      loc_1CD79
.text:000000000001C9BB
.text:000000000001C9BB loc_1C9BB:                              ; CODE XREF: parse_expression+F50↑j
.text:000000000001C9BB                 test    r9, r9
.text:000000000001C9BE                 jz      short loc_1C9E6
.text:000000000001C9C0                 mov     rax, [r9+40h]
.text:000000000001C9C4                 cmp     rax, [rsp+158h+var_110]
.text:000000000001C9C9                 mov     rcx, [r9+8]
.text:000000000001C9CD                 jz      loc_1CDE3
.text:000000000001C9D3
.text:000000000001C9D3 loc_1C9D3:                              ; CODE XREF: parse_expression+1410↓j
.text:000000000001C9D3                 mov     [rcx+rax*4], edx
.text:000000000001C9D6                 mov     rcx, [r9+10h]
.text:000000000001C9DA                 lea     rsi, [rax+1]
.text:000000000001C9DE                 mov     [r9+40h], rsi
.text:000000000001C9E2                 mov     [rcx+rax*4], r8d
.text:000000000001C9E6
.text:000000000001C9E6 loc_1C9E6:                              ; CODE XREF: parse_expression+F5E↑j
.text:000000000001C9E6                 xor     eax, eax
.text:000000000001C9E8                 mov     edi, 1
.text:000000000001C9ED
.text:000000000001C9ED loc_1C9ED:                              ; CODE XREF: parse_expression+FB3↓j
.text:000000000001C9ED                 cmp     edx, eax
.text:000000000001C9EF                 mov     ecx, eax
.text:000000000001C9F1                 ja      short loc_1CA09
.text:000000000001C9F3                 cmp     r8d, eax
.text:000000000001C9F6                 jb      short loc_1CA09
.text:000000000001C9F8                 mov     rsi, rax
.text:000000000001C9FB                 mov     r11, rdi
.text:000000000001C9FE                 sar     rsi, 6
.text:000000000001CA02                 shl     r11, cl
.text:000000000001CA05                 or      [r12+rsi*8], r11
.text:000000000001CA09
.text:000000000001CA09 loc_1CA09:                              ; CODE XREF: parse_expression+F91↑j
.text:000000000001CA09                                         ; parse_expression+F96↑j
.text:000000000001CA09                 add     rax, 1
.text:000000000001CA0D                 cmp     rax, 100h
.text:000000000001CA13                 jnz     short loc_1C9ED
.text:000000000001CA15                 mov     rax, [rsp+158h+var_118]
.text:000000000001CA1A                 mov     dword ptr [rax], 0
.text:000000000001CA20                 jmp     loc_1C6A0
.text:000000000001CA25 ; ---------------------------------------------------------------------------
.text:000000000001CA25
.text:000000000001CA25 loc_1CA25:                              ; CODE XREF: parse_expression+15C↑j
.text:000000000001CA25                 mov     rbx, [rsp+158h+var_140]
.text:000000000001CA2A                 mov     rdx, rax
.text:000000000001CA2D                 mov     rsi, r14
.text:000000000001CA30                 mov     [rsp+158h+var_158], r8
.text:000000000001CA34                 mov     r15, rax
.text:000000000001CA37                 mov     rdi, rbx
.text:000000000001CA3A                 call    peek_token
.text:000000000001CA3F                 cdqe
.text:000000000001CA41                 add     [r14+48h], rax
.text:000000000001CA45                 mov     r9, [rsp+158h+var_118]
.text:000000000001CA4A                 mov     r8, [rsp+158h+var_158]
.text:000000000001CA4E                 mov     rcx, r15
.text:000000000001CA51                 mov     rdx, rbx
.text:000000000001CA54                 mov     rsi, rbp
.text:000000000001CA57                 mov     rdi, r14
.text:000000000001CA5A                 call    parse_expression
.text:000000000001CA5F                 mov     [rsp+158h+var_130], rax
.text:000000000001CA64                 jmp     loc_1BB70
.text:000000000001CA69 ; ---------------------------------------------------------------------------
.text:000000000001CA69
.text:000000000001CA69 loc_1CA69:                              ; CODE XREF: parse_expression+863↑j
.text:000000000001CA69                                         ; parse_expression+D74↑j
.text:000000000001CA69                 mov     rax, [rsp+158h+var_118]
.text:000000000001CA6E                 mov     dword ptr [rax], 2
.text:000000000001CA74                 jmp     loc_1C6D8
.text:000000000001CA79 ; ---------------------------------------------------------------------------
.text:000000000001CA79
.text:000000000001CA79 loc_1CA79:                              ; CODE XREF: parse_expression+83E↑j
.text:000000000001CA79                 mov     rdi, r12        ; ptr
.text:000000000001CA7C                 call    free
.text:000000000001CA81                 mov     rdi, r13        ; ptr
.text:000000000001CA84                 call    free
.text:000000000001CA89                 jmp     loc_1C5C8
.text:000000000001CA8E ; ---------------------------------------------------------------------------
.text:000000000001CA8E
.text:000000000001CA8E loc_1CA8E:                              ; CODE XREF: parse_expression+9FC↑j
.text:000000000001CA8E                 mov     rax, [rsp+158h+var_118]
.text:000000000001CA93                 mov     [rsp+158h+var_130], 0
.text:000000000001CA9C                 mov     dword ptr [rax], 6
.text:000000000001CAA2                 jmp     loc_1BB70
.text:000000000001CAA7 ; ---------------------------------------------------------------------------
.text:000000000001CAA7
.text:000000000001CAA7 loc_1CAA7:                              ; CODE XREF: parse_expression+E33↑j
.text:000000000001CAA7                 mov     eax, ebx
.text:000000000001CAA9                 neg     eax
.text:000000000001CAAB                 cdqe
.text:000000000001CAAD                 add     [r14+48h], rax
.text:000000000001CAB1                 mov     byte ptr [r15+8], 1
.text:000000000001CAB6                 mov     eax, [rsp+158h+var_B8]
.text:000000000001CABD                 jmp     loc_1C3B5
.text:000000000001CAC2 ; ---------------------------------------------------------------------------
.text:000000000001CAC2
.text:000000000001CAC2 loc_1CAC2:                              ; CODE XREF: parse_expression+C4F↑j
.text:000000000001CAC2                 add     [r14+48h], rbx
.text:000000000001CAC6                 cmp     [rsp+158h+var_101], 0
.text:000000000001CACB                 jz      short loc_1CAE1
.text:000000000001CACD                 lea     rdx, [r12+20h]
.text:000000000001CAD2                 mov     rax, r12
.text:000000000001CAD5
.text:000000000001CAD5 loc_1CAD5:                              ; CODE XREF: parse_expression+107F↓j
.text:000000000001CAD5                 not     qword ptr [rax]
.text:000000000001CAD8                 add     rax, 8
.text:000000000001CADC                 cmp     rdx, rax
.text:000000000001CADF                 jnz     short loc_1CAD5
.text:000000000001CAE1
.text:000000000001CAE1 loc_1CAE1:                              ; CODE XREF: parse_expression+106B↑j
.text:000000000001CAE1                 mov     rax, [rsp+158h+var_148]
.text:000000000001CAE6                 mov     edx, [rax+0B4h]
.text:000000000001CAEC                 cmp     edx, 1
.text:000000000001CAEF                 jle     short loc_1CB09
.text:000000000001CAF1                 mov     rcx, [rax+78h]
.text:000000000001CAF5                 xor     eax, eax
.text:000000000001CAF7
.text:000000000001CAF7 loc_1CAF7:                              ; CODE XREF: parse_expression+10A7↓j
.text:000000000001CAF7                 mov     rsi, [rcx+rax]
.text:000000000001CAFB                 and     [r12+rax], rsi
.text:000000000001CAFF                 add     rax, 8
.text:000000000001CB03                 cmp     rax, 20h ; ' '
.text:000000000001CB07                 jnz     short loc_1CAF7
.text:000000000001CB09
.text:000000000001CB09 loc_1CB09:                              ; CODE XREF: parse_expression+108F↑j
.text:000000000001CB09                 cmp     qword ptr [r13+28h], 0
.text:000000000001CB0E                 jnz     loc_1CB98
.text:000000000001CB14                 cmp     qword ptr [r13+30h], 0
.text:000000000001CB19                 jnz     short loc_1CB98
.text:000000000001CB1B                 cmp     qword ptr [r13+38h], 0
.text:000000000001CB20                 jnz     short loc_1CB98
.text:000000000001CB22                 cmp     qword ptr [r13+40h], 0
.text:000000000001CB27                 jnz     short loc_1CB98
.text:000000000001CB29                 sub     edx, 1
.text:000000000001CB2C                 jle     short loc_1CB3C
.text:000000000001CB2E                 cmp     qword ptr [r13+48h], 0
.text:000000000001CB33                 jnz     short loc_1CB98
.text:000000000001CB35                 test    byte ptr [r13+20h], 1
.text:000000000001CB3A                 jnz     short loc_1CB98
.text:000000000001CB3C
.text:000000000001CB3C loc_1CB3C:                              ; CODE XREF: parse_expression+10CC↑j
.text:000000000001CB3C                 mov     rdi, r13        ; ptr
.text:000000000001CB3F                 call    isl_union_flow_free_0
.text:000000000001CB44                 mov     rax, [rsp+158h+var_148]
.text:000000000001CB49                 lea     r8, [rsp+158h+var_A8]
.text:000000000001CB51                 xor     ecx, ecx
.text:000000000001CB53                 xor     edx, edx
.text:000000000001CB55                 mov     byte ptr [rsp+158h+var_A0], 3
.text:000000000001CB5D                 mov     [rsp+158h+var_A8], r12
.text:000000000001CB65                 lea     rsi, [rax+80h]
.text:000000000001CB6C                 lea     rdi, [rax+70h]
.text:000000000001CB70                 call    create_token_tree_isra_16
.text:000000000001CB75                 test    rax, rax
.text:000000000001CB78                 mov     [rsp+158h+var_130], rax
.text:000000000001CB7D                 jnz     loc_1BBFC
.text:000000000001CB83
.text:000000000001CB83 loc_1CB83:                              ; CODE XREF: parse_expression+118C↓j
.text:000000000001CB83                                         ; parse_expression+11D0↓j ...
.text:000000000001CB83                 mov     rax, [rsp+158h+var_118]
.text:000000000001CB88                 mov     dword ptr [rax], 0Ch
.text:000000000001CB8E                 jmp     loc_1C6D8
.text:000000000001CB8E ; ---------------------------------------------------------------------------
.text:000000000001CB93                 align 8
.text:000000000001CB98
.text:000000000001CB98 loc_1CB98:                              ; CODE XREF: parse_expression+10AE↑j
.text:000000000001CB98                                         ; parse_expression+10B9↑j ...
.text:000000000001CB98                 mov     rax, [rsp+158h+var_148]
.text:000000000001CB9D                 lea     r15, [rsp+158h+var_A8]
.text:000000000001CBA5                 xor     edx, edx
.text:000000000001CBA7                 xor     ecx, ecx
.text:000000000001CBA9                 mov     r8, r15
.text:000000000001CBAC                 or      byte ptr [rax+0B0h], 2
.text:000000000001CBB3                 lea     rbx, [rax+70h]
.text:000000000001CBB7                 lea     rbp, [rax+80h]
.text:000000000001CBBE                 mov     byte ptr [rsp+158h+var_A0], 6
.text:000000000001CBC6                 mov     [rsp+158h+var_A8], r13
.text:000000000001CBCE                 mov     rdi, rbx
.text:000000000001CBD1                 mov     rsi, rbp
.text:000000000001CBD4                 call    create_token_tree_isra_16
.text:000000000001CBD9                 mov     rdi, rax
.text:000000000001CBDC                 mov     [rsp+158h+var_130], rax
.text:000000000001CBE1                 lea     rdx, [r12+20h]
.text:000000000001CBE6                 test    rdi, rdi
.text:000000000001CBE9                 mov     rax, r12
.text:000000000001CBEC                 jz      short loc_1CB83
.text:000000000001CBEE
.text:000000000001CBEE loc_1CBEE:                              ; CODE XREF: parse_expression+119F↓j
.text:000000000001CBEE                 cmp     qword ptr [rax], 0
.text:000000000001CBF2                 jnz     loc_1CE9D
.text:000000000001CBF8                 add     rax, 8
.text:000000000001CBFC                 cmp     rdx, rax
.text:000000000001CBFF                 jnz     short loc_1CBEE
.text:000000000001CC01                 mov     rdi, r12        ; ptr
.text:000000000001CC04                 call    free
.text:000000000001CC09                 jmp     loc_1BBFC
.text:000000000001CC0E ; ---------------------------------------------------------------------------
.text:000000000001CC0E
.text:000000000001CC0E loc_1CC0E:                              ; CODE XREF: parse_expression+CB4↑j
.text:000000000001CC0E                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:000000000001CC13                 lea     rdi, [rdx+rdx+1]
.text:000000000001CC18                 lea     rsi, ds:0[rdi*4] ; size
.text:000000000001CC20                 mov     qword ptr [rsp+158h+var_128], rdi
.text:000000000001CC25                 mov     rdi, rax        ; ptr
.text:000000000001CC28                 call    _realloc
.text:000000000001CC2D                 test    rax, rax
.text:000000000001CC30                 jz      loc_1CB83
.text:000000000001CC36                 mov     [r13+0], rax
.text:000000000001CC3A                 mov     rdx, [r13+28h]
.text:000000000001CC3E                 jmp     loc_1C71A
.text:000000000001CC43 ; ---------------------------------------------------------------------------
.text:000000000001CC43
.text:000000000001CC43 loc_1CC43:                              ; CODE XREF: parse_expression+1239↓j
.text:000000000001CC43                                         ; parse_expression+123E↓j
.text:000000000001CC43                 xor     r8d, r8d
.text:000000000001CC46
.text:000000000001CC46 loc_1CC46:                              ; CODE XREF: parse_expression+EFC↑j
.text:000000000001CC46                                         ; parse_expression+F05↑j
.text:000000000001CC46                 test    r9, r9
.text:000000000001CC49                 jz      short loc_1CCC4
.text:000000000001CC4B                 mov     edi, edx        ; c
.text:000000000001CC4D                 mov     dword ptr [rsp+158h+ptr], r8d
.text:000000000001CC52                 mov     [rsp+158h+var_E8], r9
.text:000000000001CC57                 call    _btowc
.text:000000000001CC5C                 mov     edx, eax
.text:000000000001CC5E                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:000000000001CC65                 mov     r9, [rsp+158h+var_E8]
.text:000000000001CC6A                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:000000000001CC6F                 cmp     eax, 3
.text:000000000001CC72                 jz      loc_1C977
.text:000000000001CC78                 test    eax, eax
.text:000000000001CC7A                 jz      loc_1C977
.text:000000000001CC80
.text:000000000001CC80 loc_1CC80:                              ; CODE XREF: parse_expression+1247↓j
.text:000000000001CC80                                         ; parse_expression+1271↓j
.text:000000000001CC80                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:000000000001CC88                 jmp     loc_1C994
.text:000000000001CC8D ; ---------------------------------------------------------------------------
.text:000000000001CC8D
.text:000000000001CC8D loc_1CC8D:                              ; CODE XREF: parse_expression+EEB↑j
.text:000000000001CC8D                 cmp     r10d, 3
.text:000000000001CC91                 jz      loc_1CF22
.text:000000000001CC97                 test    esi, esi
.text:000000000001CC99                 jz      short loc_1CC43
.text:000000000001CC9B                 test    r11b, r11b
.text:000000000001CC9E                 jnz     short loc_1CC43
.text:000000000001CCA0                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:000000000001CCA7                 jmp     short loc_1CC80
.text:000000000001CCA9 ; ---------------------------------------------------------------------------
.text:000000000001CCA9
.text:000000000001CCA9 loc_1CCA9:                              ; CODE XREF: parse_expression+EDA↑j
.text:000000000001CCA9                 xor     edx, edx
.text:000000000001CCAB                 cmp     esi, 3
.text:000000000001CCAE                 jnz     loc_1C948
.text:000000000001CCB4                 mov     rax, [rsp+158h+var_B0]
.text:000000000001CCBC                 movzx   edx, byte ptr [rax]
.text:000000000001CCBF                 jmp     loc_1C948
.text:000000000001CCC4 ; ---------------------------------------------------------------------------
.text:000000000001CCC4
.text:000000000001CCC4 loc_1CCC4:                              ; CODE XREF: parse_expression+11E9↑j
.text:000000000001CCC4                 test    r10d, r10d
.text:000000000001CCC7                 jz      loc_1C9A7
.text:000000000001CCCD                 cmp     r10d, 3
.text:000000000001CCD1                 jnz     short loc_1CC80
.text:000000000001CCD3                 jmp     loc_1C9A7
.text:000000000001CCD8 ; ---------------------------------------------------------------------------
.text:000000000001CCD8
.text:000000000001CCD8 loc_1CCD8:                              ; CODE XREF: parse_expression+719↑j
.text:000000000001CCD8                 mov     ebx, 80h
.text:000000000001CCDD                 mov     r12d, 2
.text:000000000001CCE3
.text:000000000001CCE3 loc_1CCE3:                              ; CODE XREF: parse_expression+12F8↓j
.text:000000000001CCE3                 call    ___ctype_b_loc
.text:000000000001CCE8                 movsxd  rdx, ebx
.text:000000000001CCEB                 movsxd  r9, r12d
.text:000000000001CCEE                 mov     r8d, 1
.text:000000000001CCF4                 add     rdx, rdx
.text:000000000001CCF7                 add     rdx, [rax]
.text:000000000001CCFA                 mov     rax, [rsp+158h+var_148]
.text:000000000001CCFF                 lea     rdi, [rax+r9*8]
.text:000000000001CD03
.text:000000000001CD03 loc_1CD03:                              ; CODE XREF: parse_expression+12EC↓j
.text:000000000001CD03                 xor     eax, eax
.text:000000000001CD05                 jmp     short loc_1CD22
.text:000000000001CD05 ; ---------------------------------------------------------------------------
.text:000000000001CD07                 align 10h
.text:000000000001CD10
.text:000000000001CD10 loc_1CD10:                              ; CODE XREF: parse_expression+12C8↓j
.text:000000000001CD10                 lea     esi, [rbx+rax]
.text:000000000001CD13                 cmp     esi, 5Fh ; '_'
.text:000000000001CD16                 jz      short loc_1CD2A
.text:000000000001CD18
.text:000000000001CD18 loc_1CD18:                              ; CODE XREF: parse_expression+12D7↓j
.text:000000000001CD18                 add     rax, 1
.text:000000000001CD1C                 cmp     rax, 40h ; '@'
.text:000000000001CD20                 jz      short loc_1CD39
.text:000000000001CD22
.text:000000000001CD22 loc_1CD22:                              ; CODE XREF: parse_expression+12A5↑j
.text:000000000001CD22                 test    byte ptr [rdx+rax*2], 8
.text:000000000001CD26                 mov     ecx, eax
.text:000000000001CD28                 jz      short loc_1CD10
.text:000000000001CD2A
.text:000000000001CD2A loc_1CD2A:                              ; CODE XREF: parse_expression+12B6↑j
.text:000000000001CD2A                 mov     rsi, r8
.text:000000000001CD2D                 shl     rsi, cl
.text:000000000001CD30                 or      [rdi+0B8h], rsi
.text:000000000001CD37                 jmp     short loc_1CD18
.text:000000000001CD39 ; ---------------------------------------------------------------------------
.text:000000000001CD39
.text:000000000001CD39 loc_1CD39:                              ; CODE XREF: parse_expression+12C0↑j
.text:000000000001CD39                 add     r9, 1
.text:000000000001CD3D                 add     ebx, 40h ; '@'
.text:000000000001CD40                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:000000000001CD44                 add     rdi, 8
.text:000000000001CD48                 cmp     r9d, 3
.text:000000000001CD4C                 jle     short loc_1CD03
.text:000000000001CD4E                 jmp     loc_1C191
.text:000000000001CD53 ; ---------------------------------------------------------------------------
.text:000000000001CD53
.text:000000000001CD53 loc_1CD53:                              ; CODE XREF: parse_expression+6EF↑j
.text:000000000001CD53                 xor     ebx, ebx
.text:000000000001CD55                 xor     r12d, r12d
.text:000000000001CD58                 jmp     short loc_1CCE3
.text:000000000001CD5A ; ---------------------------------------------------------------------------
.text:000000000001CD5A
.text:000000000001CD5A def_1C3C6:                              ; CODE XREF: parse_expression+958↑j
.text:000000000001CD5A                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 000000000001C3C6 default case
.text:000000000001CD61                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001CD68                 lea     rdi, assertion+10h ; assertion
.text:000000000001CD6F                 mov     edx, 0CEDh      ; line
.text:000000000001CD74                 call    ___assert_fail
.text:000000000001CD79 ; ---------------------------------------------------------------------------
.text:000000000001CD79
.text:000000000001CD79 loc_1CD79:                              ; CODE XREF: parse_expression+EA6↑j
.text:000000000001CD79                                         ; parse_expression+EBB↑j ...
.text:000000000001CD79                 mov     rax, [rsp+158h+var_118]
.text:000000000001CD7E                 mov     dword ptr [rax], 0Bh
.text:000000000001CD84                 jmp     loc_1C6D8
.text:000000000001CD89 ; ---------------------------------------------------------------------------
.text:000000000001CD89
.text:000000000001CD89 loc_1CD89:                              ; CODE XREF: parse_expression+ED2↑j
.text:000000000001CD89                 mov     rdi, [rsp+158h+var_A0]
.text:000000000001CD91                 xor     eax, eax
.text:000000000001CD93                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001CD97                 repne scasb
.text:000000000001CD99                 mov     rax, rcx
.text:000000000001CD9C                 not     rax
.text:000000000001CD9F                 sub     rax, 1
.text:000000000001CDA3                 cmp     rax, 1
.text:000000000001CDA7                 jbe     loc_1C938
.text:000000000001CDAD
.text:000000000001CDAD loc_1CDAD:                              ; CODE XREF: parse_expression+F37↑j
.text:000000000001CDAD                                         ; parse_expression+F41↑j ...
.text:000000000001CDAD                 mov     rax, [rsp+158h+var_118]
.text:000000000001CDB2                 mov     dword ptr [rax], 3
.text:000000000001CDB8                 jmp     loc_1C6D8
.text:000000000001CDBD ; ---------------------------------------------------------------------------
.text:000000000001CDBD
.text:000000000001CDBD loc_1CDBD:                              ; CODE XREF: parse_expression+EC8↑j
.text:000000000001CDBD                 mov     rdi, [rsp+158h+var_B0]
.text:000000000001CDC5                 xor     eax, eax
.text:000000000001CDC7                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001CDCB                 repne scasb
.text:000000000001CDCD                 mov     rax, rcx
.text:000000000001CDD0                 not     rax
.text:000000000001CDD3                 sub     rax, 1
.text:000000000001CDD7                 cmp     rax, 1
.text:000000000001CDDB                 jbe     loc_1C92E
.text:000000000001CDE1                 jmp     short loc_1CDAD
.text:000000000001CDE3 ; ---------------------------------------------------------------------------
.text:000000000001CDE3
.text:000000000001CDE3 loc_1CDE3:                              ; CODE XREF: parse_expression+F6D↑j
.text:000000000001CDE3                 mov     rax, [rsp+158h+var_110]
.text:000000000001CDE8                 mov     rdi, rcx        ; ptr
.text:000000000001CDEB                 mov     [rsp+158h+var_CC], r8d
.text:000000000001CDF3                 mov     [rsp+158h+var_D0], edx
.text:000000000001CDFA                 mov     [rsp+158h+var_E8], r9
.text:000000000001CDFF                 add     rax, rax
.text:000000000001CE02                 add     rax, 1
.text:000000000001CE06                 lea     r10, ds:0[rax*4]
.text:000000000001CE0E                 mov     [rsp+158h+var_110], rax
.text:000000000001CE13                 mov     rsi, r10        ; size
.text:000000000001CE16                 mov     [rsp+158h+size], r10
.text:000000000001CE1E                 call    _realloc
.text:000000000001CE23                 mov     r9, [rsp+158h+var_E8]
.text:000000000001CE28                 mov     r10, [rsp+158h+size]
.text:000000000001CE30                 mov     [rsp+158h+ptr], rax
.text:000000000001CE35                 mov     rdi, [r9+10h]   ; ptr
.text:000000000001CE39                 mov     rsi, r10        ; size
.text:000000000001CE3C                 call    _realloc
.text:000000000001CE41                 mov     rcx, [rsp+158h+ptr]
.text:000000000001CE46                 test    rcx, rcx
.text:000000000001CE49                 jz      short loc_1CE75
.text:000000000001CE4B                 test    rax, rax
.text:000000000001CE4E                 mov     r9, [rsp+158h+var_E8]
.text:000000000001CE53                 mov     edx, [rsp+158h+var_D0]
.text:000000000001CE5A                 mov     r8d, [rsp+158h+var_CC]
.text:000000000001CE62                 jz      short loc_1CE75
.text:000000000001CE64                 mov     [r9+10h], rax
.text:000000000001CE68                 mov     [r9+8], rcx
.text:000000000001CE6C                 mov     rax, [r9+40h]
.text:000000000001CE70                 jmp     loc_1C9D3
.text:000000000001CE75 ; ---------------------------------------------------------------------------
.text:000000000001CE75
.text:000000000001CE75 loc_1CE75:                              ; CODE XREF: parse_expression+13E9↑j
.text:000000000001CE75                                         ; parse_expression+1402↑j
.text:000000000001CE75                 mov     rdi, rcx        ; ptr
.text:000000000001CE78                 mov     [rsp+158h+var_158], rax
.text:000000000001CE7C                 call    free
.text:000000000001CE81                 mov     rax, [rsp+158h+var_158]
.text:000000000001CE85                 mov     rdi, rax        ; ptr
.text:000000000001CE88                 call    free
.text:000000000001CE8D                 mov     rax, [rsp+158h+var_118]
.text:000000000001CE92                 mov     dword ptr [rax], 0Ch
.text:000000000001CE98                 jmp     loc_1C6D8
.text:000000000001CE9D ; ---------------------------------------------------------------------------
.text:000000000001CE9D
.text:000000000001CE9D loc_1CE9D:                              ; CODE XREF: parse_expression+1192↑j
.text:000000000001CE9D                 xor     ecx, ecx
.text:000000000001CE9F                 xor     edx, edx
.text:000000000001CEA1                 mov     r8, r15
.text:000000000001CEA4                 mov     rsi, rbp
.text:000000000001CEA7                 mov     rdi, rbx
.text:000000000001CEAA                 mov     byte ptr [rsp+158h+var_A0], 3
.text:000000000001CEB2                 mov     [rsp+158h+var_A8], r12
.text:000000000001CEBA                 call    create_token_tree_isra_16
.text:000000000001CEBF                 test    rax, rax
.text:000000000001CEC2                 jz      loc_1CB83
.text:000000000001CEC8                 mov     rcx, [rsp+158h+var_130]
.text:000000000001CECD                 lea     r8, [rsp+158h+var_98]
.text:000000000001CED5                 mov     rdx, rax
.text:000000000001CED8                 mov     rsi, rbp
.text:000000000001CEDB                 mov     rdi, rbx
.text:000000000001CEDE                 mov     [rsp+158h+var_90], 0Ah
.text:000000000001CEE6                 call    create_token_tree_isra_16
.text:000000000001CEEB                 test    rax, rax
.text:000000000001CEEE                 mov     [rsp+158h+var_130], rax
.text:000000000001CEF3                 jnz     loc_1BBFC
.text:000000000001CEF9                 jmp     loc_1CB83
.text:000000000001CEFE ; ---------------------------------------------------------------------------
.text:000000000001CEFE
.text:000000000001CEFE loc_1CEFE:                              ; CODE XREF: parse_expression+126↑j
.text:000000000001CEFE                 call    ___stack_chk_fail
.text:000000000001CF03 ; ---------------------------------------------------------------------------
.text:000000000001CF03
.text:000000000001CF03 loc_1CF03:                              ; CODE XREF: parse_expression+566↑j
.text:000000000001CF03                 mov     rax, [rsp+158h+var_140]
.text:000000000001CF08                 cmp     byte ptr [rax+8], 2
.text:000000000001CF0C                 jnz     loc_1C100
.text:000000000001CF12                 mov     rax, [rsp+158h+var_118]
.text:000000000001CF17                 mov     dword ptr [rax], 9
.text:000000000001CF1D                 jmp     loc_1C10B
.text:000000000001CF22 ; ---------------------------------------------------------------------------
.text:000000000001CF22
.text:000000000001CF22 loc_1CF22:                              ; CODE XREF: parse_expression+1231↑j
.text:000000000001CF22                 mov     rax, [rsp+158h+var_A0]
.text:000000000001CF2A                 movzx   r8d, byte ptr [rax]
.text:000000000001CF2E                 jmp     loc_1C95A
.text:000000000001CF2E ; } // starts at 1BA60
.text:000000000001CF2E parse_expression endp
.text:000000000001CF2E
.text:000000000001CF2E ; ---------------------------------------------------------------------------
.text:000000000001CF33                 align 20h
.text:000000000001CF40
.text:000000000001CF40 ; =============== S U B R O U T I N E =======================================
.text:000000000001CF40
.text:000000000001CF40
.text:000000000001CF40 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:000000000001CF40                                         ; parse_reg_exp+AE↓p
.text:000000000001CF40
.text:000000000001CF40 var_78          = qword ptr -78h
.text:000000000001CF40 var_70          = qword ptr -70h
.text:000000000001CF40 var_68          = qword ptr -68h
.text:000000000001CF40 var_60          = qword ptr -60h
.text:000000000001CF40 var_58          = byte ptr -58h
.text:000000000001CF40 var_50          = byte ptr -50h
.text:000000000001CF40 var_40          = qword ptr -40h
.text:000000000001CF40
.text:000000000001CF40 ; __unwind {
.text:000000000001CF40                 push    r15
.text:000000000001CF42                 push    r14
.text:000000000001CF44                 mov     r15, rcx
.text:000000000001CF47                 push    r13
.text:000000000001CF49                 push    r12
.text:000000000001CF4B                 mov     r13, rsi
.text:000000000001CF4E                 push    rbp
.text:000000000001CF4F                 push    rbx
.text:000000000001CF50                 mov     rbx, r9
.text:000000000001CF53                 mov     rbp, rdx
.text:000000000001CF56                 mov     r12, r8
.text:000000000001CF59                 sub     rsp, 48h
.text:000000000001CF5D                 mov     rax, fs:28h
.text:000000000001CF66                 mov     [rsp+78h+var_40], rax
.text:000000000001CF6B                 xor     eax, eax
.text:000000000001CF6D                 mov     rax, [rsi]
.text:000000000001CF70                 mov     [rsp+78h+var_78], rdi
.text:000000000001CF74                 mov     [rsp+78h+var_68], rax
.text:000000000001CF79                 call    parse_expression
.text:000000000001CF7E                 mov     edx, [rbx]
.text:000000000001CF80                 mov     r14, rax
.text:000000000001CF83                 test    edx, edx
.text:000000000001CF85                 jz      short loc_1CF90
.text:000000000001CF87                 test    rax, rax
.text:000000000001CF8A                 jz      loc_1D08A
.text:000000000001CF90
.text:000000000001CF90 loc_1CF90:                              ; CODE XREF: parse_branch+45↑j
.text:000000000001CF90                 lea     rax, [rsp+78h+var_58]
.text:000000000001CF95                 mov     [rsp+78h+var_60], rax
.text:000000000001CF9A                 nop     word ptr [rax+rax+00h]
.text:000000000001CFA0
.text:000000000001CFA0 loc_1CFA0:                              ; CODE XREF: parse_branch+12F↓j
.text:000000000001CFA0                 movzx   eax, byte ptr [rbp+8]
.text:000000000001CFA4                 mov     edx, eax
.text:000000000001CFA6                 and     edx, 0FFFFFFF7h
.text:000000000001CFA9                 cmp     dl, 2
.text:000000000001CFAC                 jz      loc_1D040
.text:000000000001CFB2
.text:000000000001CFB2 loc_1CFB2:                              ; CODE XREF: parse_branch+F6↓j
.text:000000000001CFB2                 cmp     al, 9
.text:000000000001CFB4                 jnz     short loc_1CFBF
.text:000000000001CFB6                 test    r12, r12
.text:000000000001CFB9                 jnz     loc_1D040
.text:000000000001CFBF
.text:000000000001CFBF loc_1CFBF:                              ; CODE XREF: parse_branch+74↑j
.text:000000000001CFBF                 mov     rdi, [rsp+78h+var_78]
.text:000000000001CFC3                 mov     r9, rbx
.text:000000000001CFC6                 mov     r8, r12
.text:000000000001CFC9                 mov     rcx, r15
.text:000000000001CFCC                 mov     rdx, rbp
.text:000000000001CFCF                 mov     rsi, r13
.text:000000000001CFD2                 call    parse_expression
.text:000000000001CFD7                 mov     r9, rax
.text:000000000001CFDA                 mov     eax, [rbx]
.text:000000000001CFDC                 test    eax, eax
.text:000000000001CFDE                 jz      short loc_1CFE9
.text:000000000001CFE0                 test    r9, r9
.text:000000000001CFE3                 jz      loc_1D074
.text:000000000001CFE9
.text:000000000001CFE9 loc_1CFE9:                              ; CODE XREF: parse_branch+9E↑j
.text:000000000001CFE9                 test    r14, r14
.text:000000000001CFEC                 jz      short loc_1D068
.text:000000000001CFEE                 test    r9, r9
.text:000000000001CFF1                 jz      short loc_1D068
.text:000000000001CFF3                 mov     rax, [rsp+78h+var_68]
.text:000000000001CFF8                 mov     r8, [rsp+78h+var_60]
.text:000000000001CFFD                 mov     rcx, r9
.text:000000000001D000                 mov     rdx, r14
.text:000000000001D003                 mov     [rsp+78h+var_70], r9
.text:000000000001D008                 mov     [rsp+78h+var_50], 10h
.text:000000000001D00D                 lea     rsi, [rax+80h]
.text:000000000001D014                 lea     rdi, [rax+70h]
.text:000000000001D018                 call    create_token_tree_isra_16
.text:000000000001D01D                 test    rax, rax
.text:000000000001D020                 mov     r9, [rsp+78h+var_70]
.text:000000000001D025                 jz      short loc_1D090
.text:000000000001D027                 mov     r14, rax
.text:000000000001D02A                 movzx   eax, byte ptr [rbp+8]
.text:000000000001D02E                 mov     edx, eax
.text:000000000001D030                 and     edx, 0FFFFFFF7h
.text:000000000001D033                 cmp     dl, 2
.text:000000000001D036                 jnz     loc_1CFB2
.text:000000000001D03C                 nop     dword ptr [rax+00h]
.text:000000000001D040
.text:000000000001D040 loc_1D040:                              ; CODE XREF: parse_branch+6C↑j
.text:000000000001D040                                         ; parse_branch+79↑j ...
.text:000000000001D040                 mov     rcx, [rsp+78h+var_40]
.text:000000000001D045                 xor     rcx, fs:28h
.text:000000000001D04E                 mov     rax, r14
.text:000000000001D051                 jnz     short loc_1D0BD
.text:000000000001D053                 add     rsp, 48h
.text:000000000001D057                 pop     rbx
.text:000000000001D058                 pop     rbp
.text:000000000001D059                 pop     r12
.text:000000000001D05B                 pop     r13
.text:000000000001D05D                 pop     r14
.text:000000000001D05F                 pop     r15
.text:000000000001D061                 retn
.text:000000000001D061 ; ---------------------------------------------------------------------------
.text:000000000001D062                 align 8
.text:000000000001D068
.text:000000000001D068 loc_1D068:                              ; CODE XREF: parse_branch+AC↑j
.text:000000000001D068                                         ; parse_branch+B1↑j
.text:000000000001D068                 test    r14, r14
.text:000000000001D06B                 cmovz   r14, r9
.text:000000000001D06F                 jmp     loc_1CFA0
.text:000000000001D074 ; ---------------------------------------------------------------------------
.text:000000000001D074
.text:000000000001D074 loc_1D074:                              ; CODE XREF: parse_branch+A3↑j
.text:000000000001D074                 test    r14, r14
.text:000000000001D077                 jz      short loc_1D08A
.text:000000000001D079                 lea     rsi, free_tree
.text:000000000001D080                 xor     edx, edx
.text:000000000001D082                 mov     rdi, r14
.text:000000000001D085                 call    postorder
.text:000000000001D08A
.text:000000000001D08A loc_1D08A:                              ; CODE XREF: parse_branch+4A↑j
.text:000000000001D08A                                         ; parse_branch+137↑j
.text:000000000001D08A                 xor     r14d, r14d
.text:000000000001D08D                 jmp     short loc_1D040
.text:000000000001D08D ; ---------------------------------------------------------------------------
.text:000000000001D08F                 align 10h
.text:000000000001D090
.text:000000000001D090 loc_1D090:                              ; CODE XREF: parse_branch+E5↑j
.text:000000000001D090                 lea     rsi, free_tree
.text:000000000001D097                 mov     rdi, r9
.text:000000000001D09A                 xor     edx, edx
.text:000000000001D09C                 call    postorder
.text:000000000001D0A1                 lea     rsi, free_tree
.text:000000000001D0A8                 mov     rdi, r14
.text:000000000001D0AB                 xor     edx, edx
.text:000000000001D0AD                 xor     r14d, r14d
.text:000000000001D0B0                 call    postorder
.text:000000000001D0B5                 mov     dword ptr [rbx], 0Ch
.text:000000000001D0BB                 jmp     short loc_1D040
.text:000000000001D0BD ; ---------------------------------------------------------------------------
.text:000000000001D0BD
.text:000000000001D0BD loc_1D0BD:                              ; CODE XREF: parse_branch+111↑j
.text:000000000001D0BD                 call    ___stack_chk_fail
.text:000000000001D0BD ; } // starts at 1CF40
.text:000000000001D0BD parse_branch    endp
.text:000000000001D0BD
.text:000000000001D0BD ; ---------------------------------------------------------------------------
.text:000000000001D0C2                 align 10h
.text:000000000001D0D0
.text:000000000001D0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001D0D0
.text:000000000001D0D0
.text:000000000001D0D0 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:000000000001D0D0                                         ; re_compile_internal+4B3↓p
.text:000000000001D0D0
.text:000000000001D0D0 var_80          = qword ptr -80h
.text:000000000001D0D0 var_78          = qword ptr -78h
.text:000000000001D0D0 var_70          = qword ptr -70h
.text:000000000001D0D0 var_68          = qword ptr -68h
.text:000000000001D0D0 var_60          = qword ptr -60h
.text:000000000001D0D0 var_58          = byte ptr -58h
.text:000000000001D0D0 var_50          = byte ptr -50h
.text:000000000001D0D0 var_40          = qword ptr -40h
.text:000000000001D0D0
.text:000000000001D0D0 ; __unwind {
.text:000000000001D0D0                 push    r15
.text:000000000001D0D2                 push    r14
.text:000000000001D0D4                 mov     r14, rcx
.text:000000000001D0D7                 push    r13
.text:000000000001D0D9                 push    r12
.text:000000000001D0DB                 mov     r13, r9
.text:000000000001D0DE                 push    rbp
.text:000000000001D0DF                 push    rbx
.text:000000000001D0E0                 mov     rbp, rdx
.text:000000000001D0E3                 mov     r12, rdi
.text:000000000001D0E6                 sub     rsp, 58h
.text:000000000001D0EA                 mov     rbx, [rsi]
.text:000000000001D0ED                 mov     rax, fs:28h
.text:000000000001D0F6                 mov     [rsp+88h+var_40], rax
.text:000000000001D0FB                 xor     eax, eax
.text:000000000001D0FD                 mov     [rsp+88h+var_60], rsi
.text:000000000001D102                 mov     [rsp+88h+var_78], r8
.text:000000000001D107                 mov     rax, [rbx+0A8h]
.text:000000000001D10E                 mov     [rsp+88h+var_68], rax
.text:000000000001D113                 call    parse_branch
.text:000000000001D118                 mov     edx, [r13+0]
.text:000000000001D11C                 mov     r15, rax
.text:000000000001D11F                 test    edx, edx
.text:000000000001D121                 jz      short loc_1D12C
.text:000000000001D123                 test    rax, rax
.text:000000000001D126                 jz      loc_1D212
.text:000000000001D12C
.text:000000000001D12C loc_1D12C:                              ; CODE XREF: parse_reg_exp+51↑j
.text:000000000001D12C                 lea     rax, [rsp+88h+var_58]
.text:000000000001D131                 mov     [rsp+88h+var_80], rax
.text:000000000001D136                 jmp     loc_1D1C4
.text:000000000001D136 ; ---------------------------------------------------------------------------
.text:000000000001D13B                 align 20h
.text:000000000001D140
.text:000000000001D140 loc_1D140:                              ; CODE XREF: parse_reg_exp+122↓j
.text:000000000001D140                 cmp     al, 9
.text:000000000001D142                 jnz     short loc_1D150
.text:000000000001D144                 cmp     [rsp+88h+var_78], 0
.text:000000000001D14A                 jnz     loc_1D1F8
.text:000000000001D150
.text:000000000001D150 loc_1D150:                              ; CODE XREF: parse_reg_exp+72↑j
.text:000000000001D150                 mov     rax, [rbx+0A8h]
.text:000000000001D157                 mov     r8, [rsp+88h+var_78]
.text:000000000001D15C                 mov     rcx, r14
.text:000000000001D15F                 mov     rsi, [rsp+88h+var_60]
.text:000000000001D164                 mov     r9, r13
.text:000000000001D167                 mov     rdx, rbp
.text:000000000001D16A                 mov     rdi, r12
.text:000000000001D16D                 mov     [rsp+88h+var_70], rax
.text:000000000001D172                 mov     rax, [rsp+88h+var_68]
.text:000000000001D177                 mov     [rbx+0A8h], rax
.text:000000000001D17E                 call    parse_branch
.text:000000000001D183                 mov     rcx, rax
.text:000000000001D186                 mov     eax, [r13+0]
.text:000000000001D18A                 test    eax, eax
.text:000000000001D18C                 jz      short loc_1D193
.text:000000000001D18E                 test    rcx, rcx
.text:000000000001D191                 jz      short loc_1D1FC
.text:000000000001D193
.text:000000000001D193 loc_1D193:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:000000000001D193                 mov     rax, [rsp+88h+var_70]
.text:000000000001D198                 or      [rbx+0A8h], rax
.text:000000000001D19F
.text:000000000001D19F loc_1D19F:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:000000000001D19F                 mov     r8, [rsp+88h+var_80]
.text:000000000001D1A4                 lea     rsi, [rbx+80h]
.text:000000000001D1AB                 lea     rdi, [rbx+70h]
.text:000000000001D1AF                 mov     rdx, r15
.text:000000000001D1B2                 mov     [rsp+88h+var_50], 0Ah
.text:000000000001D1B7                 call    create_token_tree_isra_16
.text:000000000001D1BC                 test    rax, rax
.text:000000000001D1BF                 mov     r15, rax
.text:000000000001D1C2                 jz      short loc_1D240
.text:000000000001D1C4
.text:000000000001D1C4 loc_1D1C4:                              ; CODE XREF: parse_reg_exp+66↑j
.text:000000000001D1C4                 cmp     byte ptr [rbp+8], 0Ah
.text:000000000001D1C8                 jnz     short loc_1D218
.text:000000000001D1CA                 mov     rdx, r14
.text:000000000001D1CD                 mov     rsi, r12
.text:000000000001D1D0                 mov     rdi, rbp
.text:000000000001D1D3                 or      rdx, 800000h
.text:000000000001D1DA                 call    peek_token
.text:000000000001D1DF                 cdqe
.text:000000000001D1E1                 add     [r12+48h], rax
.text:000000000001D1E6                 movzx   eax, byte ptr [rbp+8]
.text:000000000001D1EA                 mov     edx, eax
.text:000000000001D1EC                 and     edx, 0FFFFFFF7h
.text:000000000001D1EF                 cmp     dl, 2
.text:000000000001D1F2                 jnz     loc_1D140
.text:000000000001D1F8
.text:000000000001D1F8 loc_1D1F8:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:000000000001D1F8                 xor     ecx, ecx
.text:000000000001D1FA                 jmp     short loc_1D19F
.text:000000000001D1FC ; ---------------------------------------------------------------------------
.text:000000000001D1FC
.text:000000000001D1FC loc_1D1FC:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:000000000001D1FC                 test    r15, r15
.text:000000000001D1FF                 jz      short loc_1D212
.text:000000000001D201                 lea     rsi, free_tree
.text:000000000001D208                 xor     edx, edx
.text:000000000001D20A                 mov     rdi, r15
.text:000000000001D20D                 call    postorder
.text:000000000001D212
.text:000000000001D212 loc_1D212:                              ; CODE XREF: parse_reg_exp+56↑j
.text:000000000001D212                                         ; parse_reg_exp+12F↑j
.text:000000000001D212                 xor     r15d, r15d
.text:000000000001D215                 nop     dword ptr [rax]
.text:000000000001D218
.text:000000000001D218 loc_1D218:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:000000000001D218                                         ; parse_reg_exp+178↓j
.text:000000000001D218                 mov     rcx, [rsp+88h+var_40]
.text:000000000001D21D                 xor     rcx, fs:28h
.text:000000000001D226                 mov     rax, r15
.text:000000000001D229                 jnz     short loc_1D24A
.text:000000000001D22B                 add     rsp, 58h
.text:000000000001D22F                 pop     rbx
.text:000000000001D230                 pop     rbp
.text:000000000001D231                 pop     r12
.text:000000000001D233                 pop     r13
.text:000000000001D235                 pop     r14
.text:000000000001D237                 pop     r15
.text:000000000001D239                 retn
.text:000000000001D239 ; ---------------------------------------------------------------------------
.text:000000000001D23A                 align 20h
.text:000000000001D240
.text:000000000001D240 loc_1D240:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:000000000001D240                 mov     dword ptr [r13+0], 0Ch
.text:000000000001D248                 jmp     short loc_1D218
.text:000000000001D24A ; ---------------------------------------------------------------------------
.text:000000000001D24A
.text:000000000001D24A loc_1D24A:                              ; CODE XREF: parse_reg_exp+159↑j
.text:000000000001D24A                 call    ___stack_chk_fail
.text:000000000001D24A ; } // starts at 1D0D0
.text:000000000001D24A parse_reg_exp   endp
.text:000000000001D24A
.text:000000000001D24A ; ---------------------------------------------------------------------------
.text:000000000001D24F                 align 10h
.text:000000000001D250
.text:000000000001D250 ; =============== S U B R O U T I N E =======================================
.text:000000000001D250
.text:000000000001D250
.text:000000000001D250 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:000000000001D250                                         ; rpl_regcomp+A4↓p
.text:000000000001D250
.text:000000000001D250 size            = qword ptr -158h
.text:000000000001D250 var_150         = qword ptr -150h
.text:000000000001D250 var_148         = qword ptr -148h
.text:000000000001D250 var_140         = qword ptr -140h
.text:000000000001D250 var_138         = qword ptr -138h
.text:000000000001D250 var_130         = qword ptr -130h
.text:000000000001D250 var_128         = qword ptr -128h
.text:000000000001D250 var_120         = qword ptr -120h
.text:000000000001D250 var_10C         = dword ptr -10Ch
.text:000000000001D250 var_108         = dword ptr -108h
.text:000000000001D250 var_F8          = byte ptr -0F8h
.text:000000000001D250 var_F0          = qword ptr -0F0h
.text:000000000001D250 ptr             = qword ptr -0E8h
.text:000000000001D250 var_D8          = qword ptr -0D8h
.text:000000000001D250 var_D0          = qword ptr -0D0h
.text:000000000001D250 var_B0          = qword ptr -0B0h
.text:000000000001D250 var_A8          = qword ptr -0A8h
.text:000000000001D250 var_A0          = qword ptr -0A0h
.text:000000000001D250 var_98          = qword ptr -98h
.text:000000000001D250 var_90          = qword ptr -90h
.text:000000000001D250 var_88          = qword ptr -88h
.text:000000000001D250 var_80          = qword ptr -80h
.text:000000000001D250 var_78          = qword ptr -78h
.text:000000000001D250 var_70          = qword ptr -70h
.text:000000000001D250 var_60          = qword ptr -60h
.text:000000000001D250 var_50          = byte ptr -50h
.text:000000000001D250 var_4F          = byte ptr -4Fh
.text:000000000001D250 var_4E          = byte ptr -4Eh
.text:000000000001D250 var_4D          = byte ptr -4Dh
.text:000000000001D250 var_48          = dword ptr -48h
.text:000000000001D250 var_40          = qword ptr -40h
.text:000000000001D250
.text:000000000001D250 ; __unwind {
.text:000000000001D250                 push    r15
.text:000000000001D252                 push    r14
.text:000000000001D254                 push    r13
.text:000000000001D256                 push    r12
.text:000000000001D258                 push    rbp
.text:000000000001D259                 push    rbx
.text:000000000001D25A                 sub     rsp, 128h
.text:000000000001D261                 mov     [rdi+18h], rcx
.text:000000000001D265                 mov     qword ptr [rdi+10h], 0
.text:000000000001D26D                 mov     rax, fs:28h
.text:000000000001D276                 mov     [rsp+158h+var_40], rax
.text:000000000001D27E                 xor     eax, eax
.text:000000000001D280                 movzx   eax, byte ptr [rdi+38h]
.text:000000000001D284                 mov     [rsp+158h+var_150], rdi
.text:000000000001D289                 mov     [rsp+158h+var_148], rsi
.text:000000000001D28E                 mov     [rsp+158h+size], rdx
.text:000000000001D292                 mov     [rsp+158h+var_140], rcx
.text:000000000001D297                 mov     [rsp+158h+var_10C], 0
.text:000000000001D29F                 mov     qword ptr [rdi+30h], 0
.text:000000000001D2A7                 mov     rbx, [rdi]
.text:000000000001D2AA                 mov     byte ptr [rsp+158h+var_138], al
.text:000000000001D2AE                 and     eax, 0FFFFFF90h
.text:000000000001D2B1                 cmp     qword ptr [rdi+8], 0E7h
.text:000000000001D2B9                 mov     [rdi+38h], al
.text:000000000001D2BC                 jbe     loc_1E0B6
.text:000000000001D2C2
.text:000000000001D2C2 loc_1D2C2:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:000000000001D2C2                 lea     rdi, [rbx+8]
.text:000000000001D2C6                 mov     rax, [rsp+158h+var_150]
.text:000000000001D2CB                 mov     rcx, rbx
.text:000000000001D2CE                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001D2D2                 sub     rcx, rdi
.text:000000000001D2D5                 mov     qword ptr [rax+10h], 0E8h
.text:000000000001D2DD                 xor     eax, eax
.text:000000000001D2DF                 add     ecx, 0E8h
.text:000000000001D2E5                 mov     qword ptr [rbx], 0
.text:000000000001D2EC                 mov     qword ptr [rbx+0E0h], 0
.text:000000000001D2F7                 shr     ecx, 3
.text:000000000001D2FA                 rep stosq
.text:000000000001D2FD                 mov     rax, 555555555555554h
.text:000000000001D307                 mov     dword ptr [rbx+80h], 0Fh
.text:000000000001D311                 cmp     [rsp+158h+size], rax
.text:000000000001D315                 ja      loc_1D956
.text:000000000001D31B                 mov     r14, [rsp+158h+size]
.text:000000000001D31F                 lea     rax, [r14+1]
.text:000000000001D323                 mov     rdi, rax
.text:000000000001D326                 mov     [rbx+8], rax
.text:000000000001D32A                 mov     [rsp+158h+var_130], rax
.text:000000000001D32F                 shl     rdi, 4          ; size
.text:000000000001D333                 call    _malloc
.text:000000000001D338                 test    r14, r14
.text:000000000001D33B                 mov     [rbx], rax
.text:000000000001D33E                 jz      loc_1E025
.text:000000000001D344                 mov     esi, 1
.text:000000000001D349                 nop     dword ptr [rax+00000000h]
.text:000000000001D350
.text:000000000001D350 loc_1D350:                              ; CODE XREF: re_compile_internal+107↓j
.text:000000000001D350                 add     rsi, rsi        ; size
.text:000000000001D353                 cmp     [rsp+158h+size], rsi
.text:000000000001D357                 jnb     short loc_1D350
.text:000000000001D359                 lea     rbp, [rsi-1]
.text:000000000001D35D
.text:000000000001D35D loc_1D35D:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:000000000001D35D                 mov     edi, 18h        ; nmemb
.text:000000000001D362                 call    _calloc
.text:000000000001D367                 mov     [rbx+88h], rbp
.text:000000000001D36E                 mov     [rbx+40h], rax
.text:000000000001D372                 call    ___ctype_get_mb_cur_max
.text:000000000001D377                 mov     edi, 0Eh        ; item
.text:000000000001D37C                 mov     [rbx+0B4h], eax
.text:000000000001D382                 call    _nl_langinfo
.text:000000000001D387                 movzx   edx, byte ptr [rax]
.text:000000000001D38A                 and     edx, 0FFFFFFDFh
.text:000000000001D38D                 cmp     dl, 55h ; 'U'
.text:000000000001D390                 jnz     short loc_1D3E0
.text:000000000001D392                 movzx   edx, byte ptr [rax+1]
.text:000000000001D396                 and     edx, 0FFFFFFDFh
.text:000000000001D399                 cmp     dl, 54h ; 'T'
.text:000000000001D39C                 jnz     short loc_1D3E0
.text:000000000001D39E                 movzx   edx, byte ptr [rax+2]
.text:000000000001D3A2                 and     edx, 0FFFFFFDFh
.text:000000000001D3A5                 cmp     dl, 46h ; 'F'
.text:000000000001D3A8                 jnz     short loc_1D3E0
.text:000000000001D3AA                 xor     edx, edx
.text:000000000001D3AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000001D3B0                 lea     rdi, a8         ; "8"
.text:000000000001D3B7                 mov     ecx, 2
.text:000000000001D3BC                 setz    dl
.text:000000000001D3BF                 lea     rsi, [rax+rdx+3]
.text:000000000001D3C4                 repe cmpsb
.text:000000000001D3C6                 setnbe  al
.text:000000000001D3C9                 sbb     al, 0
.text:000000000001D3CB                 test    al, al
.text:000000000001D3CD                 jnz     short loc_1D3E0
.text:000000000001D3CF                 or      byte ptr [rbx+0B0h], 4
.text:000000000001D3D6                 db      2Eh
.text:000000000001D3D6                 nop     word ptr [rax+rax+00000000h]
.text:000000000001D3E0
.text:000000000001D3E0 loc_1D3E0:                              ; CODE XREF: re_compile_internal+140↑j
.text:000000000001D3E0                                         ; re_compile_internal+14C↑j ...
.text:000000000001D3E0                 movzx   eax, byte ptr [rbx+0B0h]
.text:000000000001D3E7                 mov     edx, eax
.text:000000000001D3E9                 and     edx, 0FFFFFFF7h
.text:000000000001D3EC                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000001D3F3                 mov     [rbx+0B0h], dl
.text:000000000001D3F9                 jle     short loc_1D40E
.text:000000000001D3FB                 test    al, 4
.text:000000000001D3FD                 jz      loc_1D963
.text:000000000001D403                 lea     rax, utf8_sb_map
.text:000000000001D40A                 mov     [rbx+78h], rax
.text:000000000001D40E
.text:000000000001D40E loc_1D40E:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:000000000001D40E                                         ; re_compile_internal+793↓j
.text:000000000001D40E                 cmp     qword ptr [rbx], 0
.text:000000000001D412                 jz      loc_1D956
.text:000000000001D418                 cmp     qword ptr [rbx+40h], 0
.text:000000000001D41D                 jz      loc_1D956
.text:000000000001D423                 mov     rax, [rsp+158h+var_140]
.text:000000000001D428                 lea     rbp, [rsp+158h+var_D8]
.text:000000000001D430                 mov     ecx, 12h
.text:000000000001D435                 mov     [rsp+158h+var_10C], 0
.text:000000000001D43D                 lea     r8, [rbp+8]
.text:000000000001D441                 and     eax, 400000h
.text:000000000001D446                 mov     [rsp+158h+var_138], rax
.text:000000000001D44B                 mov     rax, [rsp+158h+var_150]
.text:000000000001D450                 setnz   dl
.text:000000000001D453                 mov     rdi, r8
.text:000000000001D456                 mov     rsi, [rax+28h]
.text:000000000001D45A                 xor     eax, eax
.text:000000000001D45C                 rep stosq
.text:000000000001D45F                 mov     rax, [rsp+158h+var_148]
.text:000000000001D464                 mov     rdi, [rsp+158h+size]
.text:000000000001D468                 test    rsi, rsi
.text:000000000001D46B                 mov     [rsp+158h+var_50], dl
.text:000000000001D472                 mov     ecx, [rbx+0B4h]
.text:000000000001D478                 setnz   r12b
.text:000000000001D47C                 mov     [rsp+158h+var_60], rsi
.text:000000000001D484                 mov     [rsp+158h+var_D8], rax
.text:000000000001D48C                 movzx   eax, byte ptr [rbx+0B0h]
.text:000000000001D493                 or      r12d, edx
.text:000000000001D496                 mov     [rsp+158h+var_80], rdi
.text:000000000001D49E                 mov     [rsp+158h+var_88], rdi
.text:000000000001D4A6                 mov     esi, r12d
.text:000000000001D4A9                 mov     [rsp+158h+var_4D], r12b
.text:000000000001D4B1                 mov     [rsp+158h+var_48], ecx
.text:000000000001D4B8                 mov     [rsp+158h+var_70], rdi
.text:000000000001D4C0                 mov     [rsp+158h+var_78], rdi
.text:000000000001D4C8                 mov     edx, eax
.text:000000000001D4CA                 shr     al, 3
.text:000000000001D4CD                 shr     dl, 2
.text:000000000001D4D0                 and     eax, 1
.text:000000000001D4D3                 and     edx, 1
.text:000000000001D4D6                 test    rdi, rdi
.text:000000000001D4D9                 mov     [rsp+158h+var_4E], al
.text:000000000001D4E0                 mov     [rsp+158h+var_4F], dl
.text:000000000001D4E7                 jnz     loc_1D925
.text:000000000001D4ED                 test    sil, sil
.text:000000000001D4F0                 jz      short loc_1D4FF
.text:000000000001D4F2
.text:000000000001D4F2 loc_1D4F2:                              ; CODE XREF: re_compile_internal+701↓j
.text:000000000001D4F2                 mov     rax, [rsp+158h+var_D0]
.text:000000000001D4FA                 mov     [rsp+158h+var_148], rax
.text:000000000001D4FF
.text:000000000001D4FF loc_1D4FF:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:000000000001D4FF                                         ; re_compile_internal+6FB↓j
.text:000000000001D4FF                 cmp     [rsp+158h+var_138], 0
.text:000000000001D505                 mov     rax, [rsp+158h+var_148]
.text:000000000001D50A                 mov     [rsp+158h+var_D0], rax
.text:000000000001D512                 jz      loc_1D615
.text:000000000001D518                 cmp     ecx, 1
.text:000000000001D51B                 jle     loc_1E10D
.text:000000000001D521
.text:000000000001D521 loc_1D521:                              ; CODE XREF: re_compile_internal+31C↓j
.text:000000000001D521                 mov     rdi, rbp
.text:000000000001D524                 call    build_wcs_upper_buffer
.text:000000000001D529                 test    eax, eax
.text:000000000001D52B                 jnz     short loc_1D570
.text:000000000001D52D                 mov     rax, [rsp+158h+size]
.text:000000000001D531                 cmp     rax, [rsp+158h+var_A0]
.text:000000000001D539                 jle     loc_1E0F0
.text:000000000001D53F                 movsxd  rax, dword ptr [rbx+0B4h]
.text:000000000001D546                 mov     rsi, [rsp+158h+var_98]
.text:000000000001D54E                 add     rax, [rsp+158h+var_A8]
.text:000000000001D556                 cmp     rsi, rax
.text:000000000001D559                 jg      loc_1E0F0
.text:000000000001D55F                 add     rsi, rsi
.text:000000000001D562                 mov     rdi, rbp
.text:000000000001D565                 call    re_string_realloc_buffers
.text:000000000001D56A                 test    eax, eax
.text:000000000001D56C                 jz      short loc_1D521
.text:000000000001D56E                 xchg    ax, ax
.text:000000000001D570
.text:000000000001D570 loc_1D570:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:000000000001D570                                         ; re_compile_internal+674↓j ...
.text:000000000001D570                 mov     [rsp+158h+var_10C], eax
.text:000000000001D574                 mov     rax, [rsp+158h+var_150]
.text:000000000001D579                 mov     r13, [rax]
.text:000000000001D57C
.text:000000000001D57C loc_1D57C:                              ; CODE XREF: re_compile_internal+D75↓j
.text:000000000001D57C                                         ; re_compile_internal+EE2↓j ...
.text:000000000001D57C                 mov     rdi, [r13+70h]  ; ptr
.text:000000000001D580                 test    rdi, rdi
.text:000000000001D583                 jz      short loc_1D598
.text:000000000001D585                 nop     dword ptr [rax]
.text:000000000001D588
.text:000000000001D588 loc_1D588:                              ; CODE XREF: re_compile_internal+346↓j
.text:000000000001D588                 mov     r12, [rdi]
.text:000000000001D58B                 call    free
.text:000000000001D590                 test    r12, r12
.text:000000000001D593                 mov     rdi, r12
.text:000000000001D596                 jnz     short loc_1D588
.text:000000000001D598
.text:000000000001D598 loc_1D598:                              ; CODE XREF: re_compile_internal+333↑j
.text:000000000001D598                 mov     rdi, [r13+20h]  ; ptr
.text:000000000001D59C                 mov     qword ptr [r13+70h], 0
.text:000000000001D5A4                 mov     dword ptr [r13+80h], 0Fh
.text:000000000001D5AF                 mov     qword ptr [r13+68h], 0
.text:000000000001D5B7                 call    free
.text:000000000001D5BC                 mov     qword ptr [r13+20h], 0
.text:000000000001D5C4                 mov     rdi, rbp
.text:000000000001D5C7                 call    re_string_destruct
.text:000000000001D5CC
.text:000000000001D5CC loc_1D5CC:                              ; CODE XREF: re_compile_internal+70E↓j
.text:000000000001D5CC                                         ; re_compile_internal+D68↓j
.text:000000000001D5CC                 mov     rdi, rbx        ; ptr
.text:000000000001D5CF                 call    free_dfa_content
.text:000000000001D5D4                 mov     rax, [rsp+158h+var_150]
.text:000000000001D5D9                 mov     qword ptr [rax], 0
.text:000000000001D5E0                 mov     qword ptr [rax+8], 0
.text:000000000001D5E8                 mov     eax, [rsp+158h+var_10C]
.text:000000000001D5EC
.text:000000000001D5EC loc_1D5EC:                              ; CODE XREF: re_compile_internal+D62↓j
.text:000000000001D5EC                                         ; re_compile_internal+1016↓j
.text:000000000001D5EC                 mov     rbx, [rsp+158h+var_40]
.text:000000000001D5F4                 xor     rbx, fs:28h
.text:000000000001D5FD                 jnz     loc_1E340
.text:000000000001D603                 add     rsp, 128h
.text:000000000001D60A                 pop     rbx
.text:000000000001D60B                 pop     rbp
.text:000000000001D60C                 pop     r12
.text:000000000001D60E                 pop     r13
.text:000000000001D610                 pop     r14
.text:000000000001D612                 pop     r15
.text:000000000001D614                 retn
.text:000000000001D615 ; ---------------------------------------------------------------------------
.text:000000000001D615
.text:000000000001D615 loc_1D615:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:000000000001D615                 cmp     ecx, 1
.text:000000000001D618                 jg      loc_1DFCA
.text:000000000001D61E                 test    r12b, r12b
.text:000000000001D621                 mov     rsi, [rsp+158h+var_98]
.text:000000000001D629                 jz      loc_1DC44
.text:000000000001D62F                 cmp     [rsp+158h+var_80], rsi
.text:000000000001D637                 mov     rax, [rsp+158h+var_A8]
.text:000000000001D63F                 cmovle  rsi, [rsp+158h+var_80]
.text:000000000001D648                 cmp     rsi, rax
.text:000000000001D64B                 jg      short loc_1D65D
.text:000000000001D64D                 jmp     short loc_1D690
.text:000000000001D64D ; ---------------------------------------------------------------------------
.text:000000000001D64F                 align 10h
.text:000000000001D650
.text:000000000001D650 loc_1D650:                              ; CODE XREF: re_compile_internal+43E↓j
.text:000000000001D650                 mov     rdx, [rsp+158h+var_D0]
.text:000000000001D658                 mov     [rsp+158h+var_148], rdx
.text:000000000001D65D
.text:000000000001D65D loc_1D65D:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:000000000001D65D                 mov     rdx, [rsp+158h+var_D8]
.text:000000000001D665                 mov     rcx, [rsp+158h+var_60]
.text:000000000001D66D                 add     rdx, rax
.text:000000000001D670                 add     rdx, [rsp+158h+var_B0]
.text:000000000001D678                 movzx   edx, byte ptr [rdx]
.text:000000000001D67B                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000001D67F                 mov     rcx, [rsp+158h+var_148]
.text:000000000001D684                 mov     [rcx+rax], dl
.text:000000000001D687                 add     rax, 1
.text:000000000001D68B                 cmp     rsi, rax
.text:000000000001D68E                 jnz     short loc_1D650
.text:000000000001D690
.text:000000000001D690 loc_1D690:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:000000000001D690                 mov     [rsp+158h+var_A8], rax
.text:000000000001D698                 mov     [rsp+158h+var_A0], rax
.text:000000000001D6A0                 mov     [rsp+158h+var_10C], 0
.text:000000000001D6A8
.text:000000000001D6A8 loc_1D6A8:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:000000000001D6A8                                         ; re_compile_internal+D8A↓j ...
.text:000000000001D6A8                 mov     r12, [rsp+158h+var_150]
.text:000000000001D6AD                 mov     r14, [rsp+158h+var_140]
.text:000000000001D6B2                 lea     r13, [rsp+158h+var_108]
.text:000000000001D6B7                 mov     rsi, rbp
.text:000000000001D6BA                 mov     rdi, r13
.text:000000000001D6BD                 mov     [rsp+158h+var_130], r13
.text:000000000001D6C2                 mov     r15, [r12]
.text:000000000001D6C6                 mov     rdx, r14
.text:000000000001D6C9                 mov     qword ptr [r12+30h], 0
.text:000000000001D6D2                 or      rdx, 800000h
.text:000000000001D6D9                 mov     [r15+0D8h], r14
.text:000000000001D6E0                 call    peek_token
.text:000000000001D6E5                 lea     r9, [rsp+158h+var_10C]
.text:000000000001D6EA                 xor     r8d, r8d
.text:000000000001D6ED                 mov     rcx, r14
.text:000000000001D6F0                 mov     rdx, r13
.text:000000000001D6F3                 mov     rsi, r12
.text:000000000001D6F6                 mov     rdi, rbp
.text:000000000001D6F9                 cdqe
.text:000000000001D6FB                 add     [rsp+158h+var_90], rax
.text:000000000001D703                 call    parse_reg_exp
.text:000000000001D708                 mov     ecx, [rsp+158h+var_10C]
.text:000000000001D70C                 test    ecx, ecx
.text:000000000001D70E                 jnz     loc_1E137
.text:000000000001D714                 lea     r13, [r15+70h]
.text:000000000001D718                 lea     r12, [rsp+158h+var_F8]
.text:000000000001D71D                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:000000000001D721                 xor     edx, edx
.text:000000000001D723                 xor     ecx, ecx
.text:000000000001D725                 mov     rsi, r15
.text:000000000001D728                 mov     r8, r12
.text:000000000001D72B                 mov     rdi, r13
.text:000000000001D72E                 mov     [rsp+158h+size], rax
.text:000000000001D732                 mov     byte ptr [rsp+158h+var_F0], 2
.text:000000000001D737                 call    create_token_tree_isra_16
.text:000000000001D73C                 mov     r9, [rsp+158h+size]
.text:000000000001D740                 mov     r11, rax
.text:000000000001D743                 mov     rdx, rax
.text:000000000001D746                 test    r9, r9
.text:000000000001D749                 jz      short loc_1D772
.text:000000000001D74B
.text:000000000001D74B loc_1D74B:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:000000000001D74B                 mov     rcx, r11
.text:000000000001D74E                 mov     rdx, r9
.text:000000000001D751                 mov     r8, r12
.text:000000000001D754                 mov     rsi, r15
.text:000000000001D757                 mov     rdi, r13
.text:000000000001D75A                 mov     [rsp+158h+size], r11
.text:000000000001D75E                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:000000000001D763                 call    create_token_tree_isra_16
.text:000000000001D768                 mov     r11, [rsp+158h+size]
.text:000000000001D76C                 mov     rdx, r11
.text:000000000001D76F                 mov     r11, rax
.text:000000000001D772
.text:000000000001D772 loc_1D772:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:000000000001D772                 test    rdx, rdx
.text:000000000001D775                 mov     rcx, [rsp+158h+var_150]
.text:000000000001D77A                 setz    dl
.text:000000000001D77D                 test    r11, r11
.text:000000000001D780                 setz    al
.text:000000000001D783                 or      dl, al
.text:000000000001D785                 mov     r13, [rcx]
.text:000000000001D788                 jnz     loc_1E122
.text:000000000001D78E                 mov     r15, [r13+8]
.text:000000000001D792                 mov     [rbx+68h], r11
.text:000000000001D796                 lea     rcx, ds:0[r15*8]
.text:000000000001D79E                 lea     r15, [r15+r15*2]
.text:000000000001D7A2                 mov     rdi, rcx        ; size
.text:000000000001D7A5                 mov     [rsp+158h+size], rcx
.text:000000000001D7A9                 shl     r15, 3
.text:000000000001D7AD                 call    _malloc
.text:000000000001D7B2                 mov     rcx, [rsp+158h+size]
.text:000000000001D7B6                 mov     [r13+18h], rax
.text:000000000001D7BA                 mov     [rsp+158h+var_140], rax
.text:000000000001D7BF                 mov     rdi, rcx        ; size
.text:000000000001D7C2                 call    _malloc
.text:000000000001D7C7                 mov     rdi, r15        ; size
.text:000000000001D7CA                 mov     [r13+20h], rax
.text:000000000001D7CE                 mov     [rsp+158h+var_148], rax
.text:000000000001D7D3                 call    _malloc
.text:000000000001D7D8                 mov     rdi, r15        ; size
.text:000000000001D7DB                 mov     [r13+28h], rax
.text:000000000001D7DF                 mov     [rsp+158h+size], rax
.text:000000000001D7E3                 call    _malloc
.text:000000000001D7E8                 mov     rdx, [rsp+158h+var_140]
.text:000000000001D7ED                 mov     [r13+30h], rax
.text:000000000001D7F1                 mov     rsi, [rsp+158h+size]
.text:000000000001D7F5                 mov     rcx, [rsp+158h+var_148]
.text:000000000001D7FA                 test    rdx, rdx
.text:000000000001D7FD                 jz      loc_1DFBD
.text:000000000001D803                 test    rcx, rcx
.text:000000000001D806                 jz      loc_1DFBD
.text:000000000001D80C                 test    rsi, rsi
.text:000000000001D80F                 jz      loc_1DFBD
.text:000000000001D815                 test    rax, rax
.text:000000000001D818                 jz      loc_1DFBD
.text:000000000001D81E                 mov     rax, [rsp+158h+var_150]
.text:000000000001D823                 mov     r15, [rax+30h]
.text:000000000001D827                 lea     rdi, ds:0[r15*8] ; size
.text:000000000001D82F                 call    _malloc
.text:000000000001D834                 test    rax, rax
.text:000000000001D837                 mov     [r13+0E0h], rax
.text:000000000001D83E                 jz      short loc_1D8AD
.text:000000000001D840                 test    r15, r15
.text:000000000001D843                 jz      short loc_1D85D
.text:000000000001D845                 xor     edx, edx
.text:000000000001D847                 nop     word ptr [rax+rax+00000000h]
.text:000000000001D850
.text:000000000001D850 loc_1D850:                              ; CODE XREF: re_compile_internal+60B↓j
.text:000000000001D850                 mov     [rax+rdx*8], rdx
.text:000000000001D854                 add     rdx, 1
.text:000000000001D858                 cmp     rdx, r15
.text:000000000001D85B                 jnz     short loc_1D850
.text:000000000001D85D
.text:000000000001D85D loc_1D85D:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:000000000001D85D                 mov     rdi, [r13+68h]
.text:000000000001D861                 lea     rsi, optimize_subexps
.text:000000000001D868                 mov     rdx, r13
.text:000000000001D86B                 call    preorder
.text:000000000001D870                 mov     rax, [rsp+158h+var_150]
.text:000000000001D875                 mov     rdi, [r13+0E0h] ; ptr
.text:000000000001D87C                 mov     rdx, [rax+30h]
.text:000000000001D880                 test    rdx, rdx
.text:000000000001D883                 jz      loc_1E174
.text:000000000001D889                 mov     rax, [rdi]
.text:000000000001D88C                 test    rax, rax
.text:000000000001D88F                 jz      short loc_1D89E
.text:000000000001D891                 jmp     short loc_1D8AD
.text:000000000001D891 ; ---------------------------------------------------------------------------
.text:000000000001D893                 align 8
.text:000000000001D898
.text:000000000001D898 loc_1D898:                              ; CODE XREF: re_compile_internal+655↓j
.text:000000000001D898                 cmp     [rdi+rax*8], rax
.text:000000000001D89C                 jnz     short loc_1D8AD
.text:000000000001D89E
.text:000000000001D89E loc_1D89E:                              ; CODE XREF: re_compile_internal+63F↑j
.text:000000000001D89E                 add     rax, 1
.text:000000000001D8A2                 cmp     rdx, rax
.text:000000000001D8A5                 ja      short loc_1D898
.text:000000000001D8A7                 jz      loc_1E174
.text:000000000001D8AD
.text:000000000001D8AD loc_1D8AD:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:000000000001D8AD                                         ; re_compile_internal+641↑j ...
.text:000000000001D8AD                 mov     rdi, [r13+68h]
.text:000000000001D8B1                 mov     rdx, [rsp+158h+var_150]
.text:000000000001D8B6                 lea     rsi, lower_subexps
.text:000000000001D8BD                 call    postorder
.text:000000000001D8C2                 test    eax, eax
.text:000000000001D8C4                 jnz     loc_1D570
.text:000000000001D8CA                 mov     rdi, [r13+68h]
.text:000000000001D8CE                 lea     rsi, calc_first
.text:000000000001D8D5                 mov     rdx, r13
.text:000000000001D8D8                 call    postorder
.text:000000000001D8DD                 test    eax, eax
.text:000000000001D8DF                 jnz     loc_1D570
.text:000000000001D8E5                 mov     rdi, [r13+68h]
.text:000000000001D8E9                 lea     rsi, calc_next
.text:000000000001D8F0                 mov     rdx, r13
.text:000000000001D8F3                 call    preorder
.text:000000000001D8F8                 mov     rdx, [r13+68h]
.text:000000000001D8FC                 lea     rsi, jpt_1D923
.text:000000000001D903                 nop     dword ptr [rax+rax+00h]
.text:000000000001D908
.text:000000000001D908 loc_1D908:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:000000000001D908                 movzx   ecx, byte ptr [rdx+30h]
.text:000000000001D90C                 mov     rdi, [rdx+38h]
.text:000000000001D910                 cmp     cl, 10h         ; switch 17 cases
.text:000000000001D913                 ja      def_1D923       ; jumptable 000000000001D923 default case, cases 0,1,3,5-7,13-15
.text:000000000001D919                 movzx   eax, cl
.text:000000000001D91C                 movsxd  rax, ds:(jpt_1D923 - 22CC8h)[rsi+rax*4]
.text:000000000001D920                 add     rax, rsi
.text:000000000001D923                 jmp     rax             ; switch jump
.text:000000000001D925 ; ---------------------------------------------------------------------------
.text:000000000001D925
.text:000000000001D925 loc_1D925:                              ; CODE XREF: re_compile_internal+297↑j
.text:000000000001D925                 mov     rsi, [rsp+158h+var_130]
.text:000000000001D92A                 mov     rdi, rbp
.text:000000000001D92D                 call    re_string_realloc_buffers
.text:000000000001D932                 test    eax, eax
.text:000000000001D934                 jnz     loc_1D570
.text:000000000001D93A                 movzx   esi, [rsp+158h+var_4D]
.text:000000000001D942                 mov     ecx, [rbx+0B4h]
.text:000000000001D948                 test    sil, sil
.text:000000000001D94B                 jz      loc_1D4FF
.text:000000000001D951                 jmp     loc_1D4F2
.text:000000000001D956 ; ---------------------------------------------------------------------------
.text:000000000001D956
.text:000000000001D956 loc_1D956:                              ; CODE XREF: re_compile_internal+C5↑j
.text:000000000001D956                                         ; re_compile_internal+1C2↑j ...
.text:000000000001D956                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001D95E                 jmp     loc_1D5CC
.text:000000000001D963 ; ---------------------------------------------------------------------------
.text:000000000001D963
.text:000000000001D963 loc_1D963:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:000000000001D963                 mov     esi, 1          ; size
.text:000000000001D968                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000001D96D                 call    _calloc
.text:000000000001D972                 test    rax, rax
.text:000000000001D975                 mov     [rbx+78h], rax
.text:000000000001D979                 jz      short loc_1D956
.text:000000000001D97B                 xor     r12d, r12d
.text:000000000001D97E                 xor     ebp, ebp
.text:000000000001D980                 mov     r13d, 1
.text:000000000001D986
.text:000000000001D986 loc_1D986:                              ; CODE XREF: re_compile_internal+791↓j
.text:000000000001D986                 xor     r15d, r15d
.text:000000000001D989                 nop     dword ptr [rax+00000000h]
.text:000000000001D990
.text:000000000001D990 loc_1D990:                              ; CODE XREF: re_compile_internal+782↓j
.text:000000000001D990                 lea     r14d, [rbp+r15+0]
.text:000000000001D995                 mov     edi, r14d       ; c
.text:000000000001D998                 call    _btowc
.text:000000000001D99D                 cmp     eax, 0FFFFFFFFh
.text:000000000001D9A0                 jz      short loc_1D9B5
.text:000000000001D9A2                 mov     rsi, [rbx+78h]
.text:000000000001D9A6                 mov     rdi, r13
.text:000000000001D9A9                 mov     ecx, r15d
.text:000000000001D9AC                 shl     rdi, cl
.text:000000000001D9AF                 add     rsi, r12
.text:000000000001D9B2                 or      [rsi], rdi
.text:000000000001D9B5
.text:000000000001D9B5 loc_1D9B5:                              ; CODE XREF: re_compile_internal+750↑j
.text:000000000001D9B5                 test    r14d, 0FFFFFF80h
.text:000000000001D9BC                 jnz     short loc_1D9CA
.text:000000000001D9BE                 cmp     eax, r14d
.text:000000000001D9C1                 jz      short loc_1D9CA
.text:000000000001D9C3                 or      byte ptr [rbx+0B0h], 8
.text:000000000001D9CA
.text:000000000001D9CA loc_1D9CA:                              ; CODE XREF: re_compile_internal+76C↑j
.text:000000000001D9CA                                         ; re_compile_internal+771↑j
.text:000000000001D9CA                 add     r15, 1
.text:000000000001D9CE                 cmp     r15, 40h ; '@'
.text:000000000001D9D2                 jnz     short loc_1D990
.text:000000000001D9D4                 add     ebp, 40h ; '@'
.text:000000000001D9D7                 add     r12, 8
.text:000000000001D9DB                 cmp     ebp, 100h
.text:000000000001D9E1                 jnz     short loc_1D986
.text:000000000001D9E3                 jmp     loc_1D40E
.text:000000000001D9E8 ; ---------------------------------------------------------------------------
.text:000000000001D9E8
.text:000000000001D9E8 def_1D923:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:000000000001D9E8                                         ; re_compile_internal+6D3↑j
.text:000000000001D9E8                                         ; DATA XREF: ...
.text:000000000001D9E8                 and     ecx, 8          ; jumptable 000000000001D923 default case, cases 0,1,3,5-7,13-15
.text:000000000001D9EB                 jnz     loc_1E302
.text:000000000001D9F1                 mov     rax, [rdx+20h]
.text:000000000001D9F5                 mov     rcx, [rax+38h]
.text:000000000001D9F9                 mov     rax, [r13+18h]
.text:000000000001D9FD                 mov     [rax+rdi*8], rcx
.text:000000000001DA01
.text:000000000001DA01 loc_1DA01:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:000000000001DA01                                         ; re_compile_internal+955↓j ...
.text:000000000001DA01                 mov     r15, [rdx+8]    ; jumptable 000000000001D923 case 16
.text:000000000001DA05
.text:000000000001DA05 loc_1DA05:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:000000000001DA05                                         ; re_compile_internal+94B↓j ...
.text:000000000001DA05                 xor     edi, edi
.text:000000000001DA07                 test    r15, r15
.text:000000000001DA0A                 jz      short loc_1DA1B
.text:000000000001DA0C
.text:000000000001DA0C loc_1DA0C:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:000000000001DA0C                 mov     rdx, r15
.text:000000000001DA0F                 jmp     loc_1D908
.text:000000000001DA0F ; ---------------------------------------------------------------------------
.text:000000000001DA14                 align 8
.text:000000000001DA18
.text:000000000001DA18 loc_1DA18:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:000000000001DA18                 mov     rdx, rax
.text:000000000001DA1B
.text:000000000001DA1B loc_1DA1B:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:000000000001DA1B                 mov     r15, [rdx+10h]
.text:000000000001DA1F                 test    r15, r15
.text:000000000001DA22                 setz    cl
.text:000000000001DA25                 cmp     r15, rdi
.text:000000000001DA28                 setz    al
.text:000000000001DA2B                 or      cl, al
.text:000000000001DA2D                 mov     byte ptr [rsp+158h+var_148], cl
.text:000000000001DA31                 jz      short loc_1DA0C
.text:000000000001DA33                 mov     rax, [rdx]
.text:000000000001DA36                 mov     rdi, rdx
.text:000000000001DA39                 test    rax, rax
.text:000000000001DA3C                 jnz     short loc_1DA18
.text:000000000001DA3E                 xor     r14d, r14d
.text:000000000001DA41                 xor     r15d, r15d
.text:000000000001DA44                 nop     dword ptr [rax+00h]
.text:000000000001DA48
.text:000000000001DA48 loc_1DA48:                              ; CODE XREF: re_compile_internal+A49↓j
.text:000000000001DA48                 mov     rdx, [r13+10h]
.text:000000000001DA4C                 cmp     rdx, r15
.text:000000000001DA4F                 jz      short loc_1DA76
.text:000000000001DA51
.text:000000000001DA51 loc_1DA51:                              ; CODE XREF: re_compile_internal+824↓j
.text:000000000001DA51                                         ; re_compile_internal+835↓j ...
.text:000000000001DA51                 lea     r10, [r15+r15*2]
.text:000000000001DA55                 mov     rax, [r13+30h]
.text:000000000001DA59                 shl     r10, 3
.text:000000000001DA5D                 cmp     qword ptr [rax+r10+8], 0
.text:000000000001DA63                 jz      loc_1DC68
.text:000000000001DA69                 mov     rdx, [r13+10h]
.text:000000000001DA6D                 add     r15, 1
.text:000000000001DA71                 cmp     rdx, r15
.text:000000000001DA74                 jnz     short loc_1DA51
.text:000000000001DA76
.text:000000000001DA76 loc_1DA76:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:000000000001DA76                 test    r14b, r14b
.text:000000000001DA79                 jz      loc_1DCBE
.text:000000000001DA7F
.text:000000000001DA7F loc_1DA7F:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:000000000001DA7F                 xor     r14d, r14d
.text:000000000001DA82                 xor     r15d, r15d
.text:000000000001DA85                 jmp     short loc_1DA51
.text:000000000001DA87 ; ---------------------------------------------------------------------------
.text:000000000001DA87
.text:000000000001DA87 loc_1DA87:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:000000000001DA87                                         ; DATA XREF: .rodata:jpt_1D923↓o
.text:000000000001DA87                 or      byte ptr [r13+0B0h], 1 ; jumptable 000000000001D923 cases 10,11
.text:000000000001DA8F                 mov     r15, [rdx+8]
.text:000000000001DA93                 test    r15, r15
.text:000000000001DA96                 jz      loc_1E0A9
.text:000000000001DA9C                 mov     rax, [r15+18h]
.text:000000000001DAA0                 mov     rcx, [rax+38h]
.text:000000000001DAA4
.text:000000000001DAA4 loc_1DAA4:                              ; CODE XREF: re_compile_internal+E61↓j
.text:000000000001DAA4                 mov     rax, [rdx+10h]
.text:000000000001DAA8                 test    rax, rax
.text:000000000001DAAB                 jz      loc_1E09C
.text:000000000001DAB1                 mov     rax, [rax+18h]
.text:000000000001DAB5                 mov     r9, [rax+38h]
.text:000000000001DAB9
.text:000000000001DAB9 loc_1DAB9:                              ; CODE XREF: re_compile_internal+E54↓j
.text:000000000001DAB9                 test    rcx, rcx
.text:000000000001DABC                 js      loc_1E321
.text:000000000001DAC2                 test    r9, r9
.text:000000000001DAC5                 js      loc_1E2E3
.text:000000000001DACB                 mov     rax, [r13+28h]
.text:000000000001DACF                 lea     rdi, [rdi+rdi*2]
.text:000000000001DAD3                 mov     [rsp+158h+var_120], rsi
.text:000000000001DAD8                 mov     [rsp+158h+var_128], r9
.text:000000000001DADD                 mov     [rsp+158h+var_140], rcx
.text:000000000001DAE2                 mov     [rsp+158h+var_148], rdx
.text:000000000001DAE7                 lea     r10, [rax+rdi*8]
.text:000000000001DAEB                 mov     edi, 10h        ; size
.text:000000000001DAF0                 mov     qword ptr [r10], 2
.text:000000000001DAF7                 mov     [rsp+158h+size], r10
.text:000000000001DAFB                 call    _malloc
.text:000000000001DB00                 mov     r10, [rsp+158h+size]
.text:000000000001DB04                 test    rax, rax
.text:000000000001DB07                 mov     rdx, [rsp+158h+var_148]
.text:000000000001DB0C                 mov     rcx, [rsp+158h+var_140]
.text:000000000001DB11                 mov     r9, [rsp+158h+var_128]
.text:000000000001DB16                 mov     rsi, [rsp+158h+var_120]
.text:000000000001DB1B                 mov     [r10+10h], rax
.text:000000000001DB1F                 jz      loc_1DDBA
.text:000000000001DB25                 cmp     rcx, r9
.text:000000000001DB28                 jz      loc_1E0FD
.text:000000000001DB2E                 mov     qword ptr [r10+8], 2
.text:000000000001DB36                 jl      loc_1E0E4
.text:000000000001DB3C                 mov     [rax], r9
.text:000000000001DB3F                 mov     [rax+8], rcx
.text:000000000001DB43                 jmp     loc_1DA05
.text:000000000001DB48 ; ---------------------------------------------------------------------------
.text:000000000001DB48
.text:000000000001DB48 loc_1DB48:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:000000000001DB48                                         ; DATA XREF: .rodata:jpt_1D923↓o
.text:000000000001DB48                 mov     rax, [rdx+20h]  ; jumptable 000000000001D923 cases 8,9,12
.text:000000000001DB4C                 lea     rcx, [rdi+rdi*2]
.text:000000000001DB50                 mov     edi, 8          ; size
.text:000000000001DB55                 mov     [rsp+158h+var_148], rsi
.text:000000000001DB5A                 mov     [rsp+158h+size], rdx
.text:000000000001DB5E                 mov     r14, [rax+38h]
.text:000000000001DB62                 mov     rax, [r13+28h]
.text:000000000001DB66                 lea     r15, [rax+rcx*8]
.text:000000000001DB6A                 mov     qword ptr [r15], 1
.text:000000000001DB71                 mov     qword ptr [r15+8], 1
.text:000000000001DB79                 call    _malloc
.text:000000000001DB7E                 test    rax, rax
.text:000000000001DB81                 mov     [r15+10h], rax
.text:000000000001DB85                 mov     rdx, [rsp+158h+size]
.text:000000000001DB89                 mov     rsi, [rsp+158h+var_148]
.text:000000000001DB8E                 jz      loc_1E238
.text:000000000001DB94                 mov     [rax], r14
.text:000000000001DB97                 mov     r15, [rdx+8]
.text:000000000001DB9B                 jmp     loc_1DA05
.text:000000000001DBA0 ; ---------------------------------------------------------------------------
.text:000000000001DBA0
.text:000000000001DBA0 loc_1DBA0:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:000000000001DBA0                                         ; DATA XREF: .rodata:jpt_1D923↓o
.text:000000000001DBA0                 cmp     qword ptr [rdx+20h], 0 ; jumptable 000000000001D923 case 2
.text:000000000001DBA5                 jz      loc_1DA01       ; jumptable 000000000001D923 case 16
.text:000000000001DBAB                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001DBB2                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001DBB9                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:000000000001DBC0                 mov     edx, 59Fh       ; line
.text:000000000001DBC5                 call    ___assert_fail
.text:000000000001DBC5 ; ---------------------------------------------------------------------------
.text:000000000001DBCA                 align 10h
.text:000000000001DBD0
.text:000000000001DBD0 loc_1DBD0:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:000000000001DBD0                                         ; DATA XREF: .rodata:jpt_1D923↓o
.text:000000000001DBD0                 mov     rax, [rdx+20h]  ; jumptable 000000000001D923 case 4
.text:000000000001DBD4                 mov     r15, [rax+38h]
.text:000000000001DBD8                 mov     rax, [r13+18h]
.text:000000000001DBDC                 mov     [rax+rdi*8], r15
.text:000000000001DBE0                 cmp     byte ptr [rdx+30h], 4
.text:000000000001DBE4                 jnz     loc_1DA01       ; jumptable 000000000001D923 case 16
.text:000000000001DBEA                 mov     rax, [r13+28h]
.text:000000000001DBEE                 lea     rcx, [rdi+rdi*2]
.text:000000000001DBF2                 mov     edi, 8          ; size
.text:000000000001DBF7                 mov     [rsp+158h+var_140], rsi
.text:000000000001DBFC                 mov     [rsp+158h+var_148], rdx
.text:000000000001DC01                 lea     rcx, [rax+rcx*8]
.text:000000000001DC05                 mov     qword ptr [rcx], 1
.text:000000000001DC0C                 mov     qword ptr [rcx+8], 1
.text:000000000001DC14                 mov     [rsp+158h+size], rcx
.text:000000000001DC18                 call    _malloc
.text:000000000001DC1D                 mov     rcx, [rsp+158h+size]
.text:000000000001DC21                 test    rax, rax
.text:000000000001DC24                 mov     rdx, [rsp+158h+var_148]
.text:000000000001DC29                 mov     rsi, [rsp+158h+var_140]
.text:000000000001DC2E                 mov     [rcx+10h], rax
.text:000000000001DC32                 jz      loc_1E280
.text:000000000001DC38                 mov     [rax], r15
.text:000000000001DC3B                 mov     r15, [rdx+8]
.text:000000000001DC3F                 jmp     loc_1DA05
.text:000000000001DC44 ; ---------------------------------------------------------------------------
.text:000000000001DC44
.text:000000000001DC44 loc_1DC44:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:000000000001DC44                 mov     [rsp+158h+var_A8], rsi
.text:000000000001DC4C                 mov     [rsp+158h+var_A0], rsi
.text:000000000001DC54                 mov     [rsp+158h+var_10C], 0
.text:000000000001DC5C                 jmp     loc_1D6A8
.text:000000000001DC5C ; ---------------------------------------------------------------------------
.text:000000000001DC61                 align 8
.text:000000000001DC68
.text:000000000001DC68 loc_1DC68:                              ; CODE XREF: re_compile_internal+813↑j
.text:000000000001DC68                 mov     ecx, 1
.text:000000000001DC6D                 mov     rdx, r15
.text:000000000001DC70                 mov     rsi, r13
.text:000000000001DC73                 mov     rdi, r12
.text:000000000001DC76                 mov     [rsp+158h+size], r10
.text:000000000001DC7A                 call    calc_eclosure_iter
.text:000000000001DC7F                 test    eax, eax
.text:000000000001DC81                 jnz     loc_1D570
.text:000000000001DC87                 mov     rax, [r13+30h]
.text:000000000001DC8B                 mov     r10, [rsp+158h+size]
.text:000000000001DC8F                 add     r15, 1
.text:000000000001DC93                 cmp     qword ptr [rax+r10+8], 0
.text:000000000001DC99                 jnz     loc_1DA48
.text:000000000001DC9F                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:000000000001DCA4                 call    free
.text:000000000001DCA9                 cmp     [r13+10h], r15
.text:000000000001DCAD                 jz      loc_1DA7F
.text:000000000001DCB3                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:000000000001DCB9                 jmp     loc_1DA51
.text:000000000001DCBE ; ---------------------------------------------------------------------------
.text:000000000001DCBE
.text:000000000001DCBE loc_1DCBE:                              ; CODE XREF: re_compile_internal+829↑j
.text:000000000001DCBE                 mov     rax, [rsp+158h+var_150]
.text:000000000001DCC3                 test    byte ptr [rax+38h], 10h
.text:000000000001DCC7                 jnz     short loc_1DCDA
.text:000000000001DCC9                 cmp     qword ptr [rax+30h], 0
.text:000000000001DCCE                 jz      short loc_1DCDA
.text:000000000001DCD0                 test    byte ptr [r13+0B0h], 1
.text:000000000001DCD8                 jnz     short loc_1DCE8
.text:000000000001DCDA
.text:000000000001DCDA loc_1DCDA:                              ; CODE XREF: re_compile_internal+A77↑j
.text:000000000001DCDA                                         ; re_compile_internal+A7E↑j
.text:000000000001DCDA                 cmp     qword ptr [r13+98h], 0
.text:000000000001DCE2                 jz      loc_1DDDB
.text:000000000001DCE8
.text:000000000001DCE8 loc_1DCE8:                              ; CODE XREF: re_compile_internal+A88↑j
.text:000000000001DCE8                 lea     rdi, [rdx+rdx*2]
.text:000000000001DCEC                 mov     [rsp+158h+size], rdx
.text:000000000001DCF0                 shl     rdi, 3          ; size
.text:000000000001DCF4                 call    _malloc
.text:000000000001DCF9                 test    rax, rax
.text:000000000001DCFC                 mov     [r13+38h], rax
.text:000000000001DD00                 jz      loc_1E24C
.text:000000000001DD06                 mov     rdx, [rsp+158h+size]
.text:000000000001DD0A                 xor     esi, esi
.text:000000000001DD0C                 xor     ecx, ecx
.text:000000000001DD0E                 test    rdx, rdx
.text:000000000001DD11                 jnz     short loc_1DD24
.text:000000000001DD13                 jmp     loc_1DDDB
.text:000000000001DD13 ; ---------------------------------------------------------------------------
.text:000000000001DD18                 align 20h
.text:000000000001DD20
.text:000000000001DD20 loc_1DD20:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:000000000001DD20                 mov     rax, [r13+38h]
.text:000000000001DD24
.text:000000000001DD24 loc_1DD24:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:000000000001DD24                 pxor    xmm0, xmm0
.text:000000000001DD28                 add     rax, rsi
.text:000000000001DD2B                 add     rcx, 1
.text:000000000001DD2F                 mov     qword ptr [rax+10h], 0
.text:000000000001DD37                 add     rsi, 18h
.text:000000000001DD3B                 movups  xmmword ptr [rax], xmm0
.text:000000000001DD3E                 mov     rax, [r13+10h]
.text:000000000001DD42                 cmp     rcx, rax
.text:000000000001DD45                 jb      short loc_1DD20
.text:000000000001DD47                 test    rax, rax
.text:000000000001DD4A                 jz      loc_1DDDB
.text:000000000001DD50                 mov     rax, [r13+30h]
.text:000000000001DD54                 mov     [rsp+158h+var_140], 0
.text:000000000001DD5D                 mov     [rsp+158h+var_148], 0
.text:000000000001DD66
.text:000000000001DD66 loc_1DD66:                              ; CODE XREF: re_compile_internal+B89↓j
.text:000000000001DD66                 mov     rcx, [rsp+158h+var_140]
.text:000000000001DD6B                 lea     rdx, [rax+rcx]
.text:000000000001DD6F                 cmp     qword ptr [rdx+8], 0
.text:000000000001DD74                 mov     rcx, [rdx+10h]
.text:000000000001DD78                 jle     short loc_1DDC4
.text:000000000001DD7A                 xor     r15d, r15d
.text:000000000001DD7D                 jmp     short loc_1DD98
.text:000000000001DD7D ; ---------------------------------------------------------------------------
.text:000000000001DD7F                 align 20h
.text:000000000001DD80
.text:000000000001DD80 loc_1DD80:                              ; CODE XREF: re_compile_internal+B68↓j
.text:000000000001DD80                 mov     rax, [r13+30h]
.text:000000000001DD84                 mov     rdx, [rsp+158h+var_140]
.text:000000000001DD89                 add     r15, 1
.text:000000000001DD8D                 mov     rcx, [rsp+158h+size]
.text:000000000001DD91                 cmp     r15, [rax+rdx+8]
.text:000000000001DD96                 jge     short loc_1DDC4
.text:000000000001DD98
.text:000000000001DD98 loc_1DD98:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:000000000001DD98                 mov     rax, [rcx+r15*8]
.text:000000000001DD9C                 mov     [rsp+158h+size], rcx
.text:000000000001DDA0                 lea     rsi, [rax+rax*2]
.text:000000000001DDA4                 mov     rax, [r13+38h]
.text:000000000001DDA8                 lea     rdi, [rax+rsi*8]
.text:000000000001DDAC                 mov     rsi, [rsp+158h+var_148]
.text:000000000001DDB1                 call    re_node_set_insert_last
.text:000000000001DDB6                 test    al, al
.text:000000000001DDB8                 jnz     short loc_1DD80
.text:000000000001DDBA
.text:000000000001DDBA loc_1DDBA:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:000000000001DDBA                                         ; re_compile_internal+FF7↓j
.text:000000000001DDBA                 mov     eax, 0Ch
.text:000000000001DDBF                 jmp     loc_1D570
.text:000000000001DDC4 ; ---------------------------------------------------------------------------
.text:000000000001DDC4
.text:000000000001DDC4 loc_1DDC4:                              ; CODE XREF: re_compile_internal+B28↑j
.text:000000000001DDC4                                         ; re_compile_internal+B46↑j
.text:000000000001DDC4                 add     [rsp+158h+var_148], 1
.text:000000000001DDCA                 add     [rsp+158h+var_140], 18h
.text:000000000001DDD0                 mov     rdx, [rsp+158h+var_148]
.text:000000000001DDD5                 cmp     rdx, [r13+10h]
.text:000000000001DDD9                 jb      short loc_1DD66
.text:000000000001DDDB
.text:000000000001DDDB loc_1DDDB:                              ; CODE XREF: re_compile_internal+A92↑j
.text:000000000001DDDB                                         ; re_compile_internal+AC3↑j ...
.text:000000000001DDDB                 movzx   eax, byte ptr [rbx+0B0h]
.text:000000000001DDE2                 mov     [rsp+158h+var_10C], 0
.text:000000000001DDEA                 shr     al, 2
.text:000000000001DDED                 cmp     [rsp+158h+var_138], 0
.text:000000000001DDF3                 setz    dl
.text:000000000001DDF6                 and     al, dl
.text:000000000001DDF8                 jnz     loc_1DFDF
.text:000000000001DDFE
.text:000000000001DDFE loc_1DDFE:                              ; CODE XREF: re_compile_internal+D99↓j
.text:000000000001DDFE                                         ; re_compile_internal+DD3↓j ...
.text:000000000001DDFE                 mov     rax, [rbx+68h]  ; jumptable 000000000001E023 case 6
.text:000000000001DE02                 mov     rdi, r12
.text:000000000001DE05                 mov     rax, [rax+18h]
.text:000000000001DE09                 mov     rax, [rax+38h]
.text:000000000001DE0D                 lea     rdx, [rax+rax*2]
.text:000000000001DE11                 mov     [rbx+90h], rax
.text:000000000001DE18                 mov     rax, [rbx+30h]
.text:000000000001DE1C                 lea     rsi, [rax+rdx*8]
.text:000000000001DE20                 call    re_node_set_init_copy
.text:000000000001DE25                 test    eax, eax
.text:000000000001DE27                 mov     r15d, eax
.text:000000000001DE2A                 mov     [rsp+158h+var_108], eax
.text:000000000001DE2E                 jnz     loc_1DF4F
.text:000000000001DE34                 cmp     qword ptr [rbx+98h], 0
.text:000000000001DE3C                 jle     loc_1DF10
.text:000000000001DE42                 mov     r9, [rsp+158h+var_F0]
.text:000000000001DE47                 test    r9, r9
.text:000000000001DE4A                 jle     loc_1DF10
.text:000000000001DE50                 xor     r10d, r10d
.text:000000000001DE53                 lea     r13, [r12+10h]
.text:000000000001DE58                 jmp     short loc_1DE6D
.text:000000000001DE58 ; ---------------------------------------------------------------------------
.text:000000000001DE5A                 align 20h
.text:000000000001DE60
.text:000000000001DE60 loc_1DE60:                              ; CODE XREF: re_compile_internal+C37↓j
.text:000000000001DE60                                         ; re_compile_internal+C47↓j ...
.text:000000000001DE60                 add     r10, 1
.text:000000000001DE64                 cmp     r9, r10
.text:000000000001DE67                 jle     loc_1DF10
.text:000000000001DE6D
.text:000000000001DE6D loc_1DE6D:                              ; CODE XREF: re_compile_internal+C08↑j
.text:000000000001DE6D                                         ; re_compile_internal+CB2↓j
.text:000000000001DE6D                 mov     rcx, [rsp+158h+ptr]
.text:000000000001DE72                 mov     rsi, [rbx]
.text:000000000001DE75                 mov     r8, [rcx+r10*8]
.text:000000000001DE79                 mov     rdi, r8
.text:000000000001DE7C                 shl     rdi, 4
.text:000000000001DE80                 add     rdi, rsi
.text:000000000001DE83                 cmp     byte ptr [rdi+8], 4
.text:000000000001DE87                 jnz     short loc_1DE60
.text:000000000001DE89                 xor     edx, edx
.text:000000000001DE8B                 jmp     short loc_1DE99
.text:000000000001DE8B ; ---------------------------------------------------------------------------
.text:000000000001DE8D                 align 10h
.text:000000000001DE90
.text:000000000001DE90 loc_1DE90:                              ; CODE XREF: re_compile_internal+C58↓j
.text:000000000001DE90                                         ; re_compile_internal+C60↓j
.text:000000000001DE90                 add     rdx, 1
.text:000000000001DE94                 cmp     r9, rdx
.text:000000000001DE97                 jz      short loc_1DE60
.text:000000000001DE99
.text:000000000001DE99 loc_1DE99:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:000000000001DE99                 mov     rax, [rcx+rdx*8]
.text:000000000001DE9D                 shl     rax, 4
.text:000000000001DEA1                 add     rax, rsi
.text:000000000001DEA4                 cmp     byte ptr [rax+8], 9
.text:000000000001DEA8                 jnz     short loc_1DE90
.text:000000000001DEAA                 mov     r11, [rdi]
.text:000000000001DEAD                 cmp     [rax], r11
.text:000000000001DEB0                 jnz     short loc_1DE90
.text:000000000001DEB2                 mov     rdx, [rbx+28h]
.text:000000000001DEB6                 lea     rax, [r8+r8*2]
.text:000000000001DEBA                 mov     rsi, r13
.text:000000000001DEBD                 mov     rdi, r9
.text:000000000001DEC0                 lea     rax, [rdx+rax*8]
.text:000000000001DEC4                 mov     rax, [rax+10h]
.text:000000000001DEC8                 mov     r11, [rax]
.text:000000000001DECB                 mov     rdx, r11
.text:000000000001DECE                 call    re_node_set_contains_isra_3
.text:000000000001DED3                 test    rax, rax
.text:000000000001DED6                 jnz     short loc_1DE60
.text:000000000001DED8                 mov     rax, [rbx+30h]
.text:000000000001DEDC                 lea     rdx, [r11+r11*2]
.text:000000000001DEE0                 mov     rdi, r12
.text:000000000001DEE3                 lea     rsi, [rax+rdx*8]
.text:000000000001DEE7                 call    re_node_set_merge
.text:000000000001DEEC                 test    eax, eax
.text:000000000001DEEE                 jnz     loc_1E230
.text:000000000001DEF4                 mov     r9, [rsp+158h+var_F0]
.text:000000000001DEF9                 mov     r10d, 1
.text:000000000001DEFF                 cmp     r9, r10
.text:000000000001DF02                 jg      loc_1DE6D
.text:000000000001DF08                 nop     dword ptr [rax+rax+00000000h]
.text:000000000001DF10
.text:000000000001DF10 loc_1DF10:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:000000000001DF10                                         ; re_compile_internal+BFA↑j ...
.text:000000000001DF10                 mov     rdi, [rsp+158h+var_130]
.text:000000000001DF15                 xor     ecx, ecx
.text:000000000001DF17                 mov     rdx, r12
.text:000000000001DF1A                 mov     rsi, rbx
.text:000000000001DF1D                 call    re_acquire_state_context
.text:000000000001DF22                 test    rax, rax
.text:000000000001DF25                 mov     [rbx+48h], rax
.text:000000000001DF29                 jz      loc_1E092
.text:000000000001DF2F                 cmp     byte ptr [rax+68h], 0
.text:000000000001DF33                 js      loc_1E031
.text:000000000001DF39                 mov     [rbx+60h], rax
.text:000000000001DF3D                 mov     [rbx+58h], rax
.text:000000000001DF41                 mov     [rbx+50h], rax
.text:000000000001DF45
.text:000000000001DF45 loc_1DF45:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:000000000001DF45                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:000000000001DF4A                 call    free
.text:000000000001DF4F
.text:000000000001DF4F loc_1DF4F:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:000000000001DF4F                                         ; re_compile_internal+E47↓j ...
.text:000000000001DF4F                 mov     rax, [rsp+158h+var_150]
.text:000000000001DF54                 mov     [rsp+158h+var_10C], r15d
.text:000000000001DF59                 mov     r13, [rax]
.text:000000000001DF5C                 mov     rdi, [r13+70h]  ; ptr
.text:000000000001DF60                 test    rdi, rdi
.text:000000000001DF63                 jz      short loc_1DF78
.text:000000000001DF65                 nop     dword ptr [rax]
.text:000000000001DF68
.text:000000000001DF68 loc_1DF68:                              ; CODE XREF: re_compile_internal+D26↓j
.text:000000000001DF68                 mov     r12, [rdi]
.text:000000000001DF6B                 call    free
.text:000000000001DF70                 test    r12, r12
.text:000000000001DF73                 mov     rdi, r12
.text:000000000001DF76                 jnz     short loc_1DF68
.text:000000000001DF78
.text:000000000001DF78 loc_1DF78:                              ; CODE XREF: re_compile_internal+D13↑j
.text:000000000001DF78                 mov     rdi, [r13+20h]  ; ptr
.text:000000000001DF7C                 mov     qword ptr [r13+70h], 0
.text:000000000001DF84                 mov     dword ptr [r13+80h], 0Fh
.text:000000000001DF8F                 mov     qword ptr [r13+68h], 0
.text:000000000001DF97                 call    free
.text:000000000001DF9C                 mov     qword ptr [r13+20h], 0
.text:000000000001DFA4                 mov     rdi, rbp
.text:000000000001DFA7                 call    re_string_destruct
.text:000000000001DFAC                 mov     eax, [rsp+158h+var_10C]
.text:000000000001DFB0                 test    eax, eax
.text:000000000001DFB2                 jz      loc_1D5EC
.text:000000000001DFB8                 jmp     loc_1D5CC
.text:000000000001DFBD ; ---------------------------------------------------------------------------
.text:000000000001DFBD
.text:000000000001DFBD loc_1DFBD:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:000000000001DFBD                                         ; re_compile_internal+5B6↑j ...
.text:000000000001DFBD                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001DFC5                 jmp     loc_1D57C
.text:000000000001DFCA ; ---------------------------------------------------------------------------
.text:000000000001DFCA
.text:000000000001DFCA loc_1DFCA:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:000000000001DFCA                 mov     rdi, rbp
.text:000000000001DFCD                 call    build_wcs_buffer
.text:000000000001DFD2                 mov     [rsp+158h+var_10C], 0
.text:000000000001DFDA                 jmp     loc_1D6A8
.text:000000000001DFDF ; ---------------------------------------------------------------------------
.text:000000000001DFDF
.text:000000000001DFDF loc_1DFDF:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:000000000001DFDF                 mov     rcx, [rsp+158h+var_150]
.text:000000000001DFE4                 cmp     qword ptr [rcx+28h], 0
.text:000000000001DFE9                 jnz     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001DFEF                 mov     r10, [rbx+10h]
.text:000000000001DFF3                 test    r10, r10
.text:000000000001DFF6                 jz      loc_1E2AA
.text:000000000001DFFC                 mov     rsi, [rbx]
.text:000000000001DFFF                 lea     r9, jpt_1E023
.text:000000000001E006                 xor     r8d, r8d
.text:000000000001E009                 xor     edx, edx
.text:000000000001E00B                 mov     rcx, rsi
.text:000000000001E00E
.text:000000000001E00E loc_1E00E:                              ; CODE XREF: re_compile_internal+F47↓j
.text:000000000001E00E                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:000000000001E012                 ja      def_1E023       ; jumptable 000000000001E023 default case, cases 0,7
.text:000000000001E018                 movzx   edi, byte ptr [rcx+8]
.text:000000000001E01C                 movsxd  rdi, ds:(jpt_1E023 - 22D0Ch)[r9+rdi*4]
.text:000000000001E020                 add     rdi, r9
.text:000000000001E023                 jmp     rdi             ; switch jump
.text:000000000001E025 ; ---------------------------------------------------------------------------
.text:000000000001E025
.text:000000000001E025 loc_1E025:                              ; CODE XREF: re_compile_internal+EE↑j
.text:000000000001E025                 xor     ebp, ebp
.text:000000000001E027                 mov     esi, 1
.text:000000000001E02C                 jmp     loc_1D35D
.text:000000000001E031 ; ---------------------------------------------------------------------------
.text:000000000001E031
.text:000000000001E031 loc_1E031:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:000000000001E031                 mov     r14, [rsp+158h+var_130]
.text:000000000001E036                 mov     ecx, 1
.text:000000000001E03B                 mov     rdx, r12
.text:000000000001E03E                 mov     rsi, rbx
.text:000000000001E041                 mov     rdi, r14
.text:000000000001E044                 call    re_acquire_state_context
.text:000000000001E049                 mov     ecx, 2
.text:000000000001E04E                 mov     rdx, r12
.text:000000000001E051                 mov     rsi, rbx
.text:000000000001E054                 mov     rdi, r14
.text:000000000001E057                 mov     [rbx+50h], rax
.text:000000000001E05B                 call    re_acquire_state_context
.text:000000000001E060                 mov     ecx, 6
.text:000000000001E065                 mov     [rbx+58h], rax
.text:000000000001E069                 mov     rdx, r12
.text:000000000001E06C                 mov     rsi, rbx
.text:000000000001E06F                 mov     rdi, r14
.text:000000000001E072                 call    re_acquire_state_context
.text:000000000001E077                 cmp     qword ptr [rbx+50h], 0
.text:000000000001E07C                 mov     [rbx+60h], rax
.text:000000000001E080                 jz      short loc_1E092
.text:000000000001E082                 cmp     qword ptr [rbx+58h], 0
.text:000000000001E087                 jz      short loc_1E092
.text:000000000001E089                 test    rax, rax
.text:000000000001E08C                 jnz     loc_1DF45
.text:000000000001E092
.text:000000000001E092 loc_1E092:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:000000000001E092                                         ; re_compile_internal+E30↑j ...
.text:000000000001E092                 mov     r15d, [rsp+158h+var_108]
.text:000000000001E097                 jmp     loc_1DF4F
.text:000000000001E09C ; ---------------------------------------------------------------------------
.text:000000000001E09C
.text:000000000001E09C loc_1E09C:                              ; CODE XREF: re_compile_internal+85B↑j
.text:000000000001E09C                 mov     rax, [rdx+20h]
.text:000000000001E0A0                 mov     r9, [rax+38h]
.text:000000000001E0A4                 jmp     loc_1DAB9
.text:000000000001E0A9 ; ---------------------------------------------------------------------------
.text:000000000001E0A9
.text:000000000001E0A9 loc_1E0A9:                              ; CODE XREF: re_compile_internal+846↑j
.text:000000000001E0A9                 mov     rax, [rdx+20h]
.text:000000000001E0AD                 mov     rcx, [rax+38h]
.text:000000000001E0B1                 jmp     loc_1DAA4
.text:000000000001E0B6 ; ---------------------------------------------------------------------------
.text:000000000001E0B6
.text:000000000001E0B6 loc_1E0B6:                              ; CODE XREF: re_compile_internal+6C↑j
.text:000000000001E0B6                 mov     rdi, rbx        ; ptr
.text:000000000001E0B9                 mov     esi, 0E8h       ; size
.text:000000000001E0BE                 call    _realloc
.text:000000000001E0C3                 test    rax, rax
.text:000000000001E0C6                 mov     rbx, rax
.text:000000000001E0C9                 jz      loc_1E261
.text:000000000001E0CF                 mov     rax, [rsp+158h+var_150]
.text:000000000001E0D4                 mov     qword ptr [rax+8], 0E8h
.text:000000000001E0DC                 mov     [rax], rbx
.text:000000000001E0DF                 jmp     loc_1D2C2
.text:000000000001E0E4 ; ---------------------------------------------------------------------------
.text:000000000001E0E4
.text:000000000001E0E4 loc_1E0E4:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:000000000001E0E4                 mov     [rax], rcx
.text:000000000001E0E7                 mov     [rax+8], r9
.text:000000000001E0EB                 jmp     loc_1DA05
.text:000000000001E0F0 ; ---------------------------------------------------------------------------
.text:000000000001E0F0
.text:000000000001E0F0 loc_1E0F0:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:000000000001E0F0                                         ; re_compile_internal+309↑j
.text:000000000001E0F0                 mov     [rsp+158h+var_10C], 0
.text:000000000001E0F8                 jmp     loc_1D6A8
.text:000000000001E0FD ; ---------------------------------------------------------------------------
.text:000000000001E0FD
.text:000000000001E0FD loc_1E0FD:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:000000000001E0FD                 mov     qword ptr [r10+8], 1
.text:000000000001E105                 mov     [rax], rcx
.text:000000000001E108                 jmp     loc_1DA05
.text:000000000001E10D ; ---------------------------------------------------------------------------
.text:000000000001E10D
.text:000000000001E10D loc_1E10D:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:000000000001E10D                 mov     rdi, rbp
.text:000000000001E110                 call    build_upper_buffer
.text:000000000001E115                 mov     [rsp+158h+var_10C], 0
.text:000000000001E11D                 jmp     loc_1D6A8
.text:000000000001E122 ; ---------------------------------------------------------------------------
.text:000000000001E122
.text:000000000001E122 loc_1E122:                              ; CODE XREF: re_compile_internal+538↑j
.text:000000000001E122                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001E12A                 mov     qword ptr [rbx+68h], 0
.text:000000000001E132                 jmp     loc_1D57C
.text:000000000001E137 ; ---------------------------------------------------------------------------
.text:000000000001E137
.text:000000000001E137 loc_1E137:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:000000000001E137                 test    rax, rax
.text:000000000001E13A                 jz      loc_1E26B
.text:000000000001E140                 lea     r13, [r15+70h]
.text:000000000001E144                 lea     r12, [rsp+158h+var_F8]
.text:000000000001E149                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:000000000001E14D                 xor     ecx, ecx
.text:000000000001E14F                 xor     edx, edx
.text:000000000001E151                 mov     rsi, r15
.text:000000000001E154                 mov     r8, r12
.text:000000000001E157                 mov     rdi, r13
.text:000000000001E15A                 mov     [rsp+158h+size], rax
.text:000000000001E15E                 mov     byte ptr [rsp+158h+var_F0], 2
.text:000000000001E163                 call    create_token_tree_isra_16
.text:000000000001E168                 mov     r9, [rsp+158h+size]
.text:000000000001E16C                 mov     r11, rax
.text:000000000001E16F                 jmp     loc_1D74B
.text:000000000001E174 ; ---------------------------------------------------------------------------
.text:000000000001E174
.text:000000000001E174 loc_1E174:                              ; CODE XREF: re_compile_internal+633↑j
.text:000000000001E174                                         ; re_compile_internal+657↑j
.text:000000000001E174                 call    free
.text:000000000001E179                 mov     qword ptr [r13+0E0h], 0
.text:000000000001E184                 jmp     loc_1D8AD
.text:000000000001E189 ; ---------------------------------------------------------------------------
.text:000000000001E189
.text:000000000001E189 loc_1E189:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:000000000001E189                                         ; DATA XREF: .rodata:jpt_1E023↓o
.text:000000000001E189                 mov     r8d, eax        ; jumptable 000000000001E023 case 5
.text:000000000001E18C
.text:000000000001E18C loc_1E18C:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:000000000001E18C                                         ; re_compile_internal+F97↓j ...
.text:000000000001E18C                 add     rdx, 1          ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E190                 add     rcx, 10h
.text:000000000001E194                 cmp     rdx, r10
.text:000000000001E197                 jnz     loc_1E00E
.text:000000000001E19D                 or      r14b, r8b
.text:000000000001E1A0                 jz      loc_1E2AA
.text:000000000001E1A6                 mov     rax, rdx
.text:000000000001E1A9                 shl     rax, 4
.text:000000000001E1AD                 add     rax, rsi
.text:000000000001E1B0                 jmp     short loc_1E1C8
.text:000000000001E1B2 ; ---------------------------------------------------------------------------
.text:000000000001E1B2
.text:000000000001E1B2 loc_1E1B2:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:000000000001E1B2                 cmp     dl, 5
.text:000000000001E1B5                 jnz     short loc_1E1BB
.text:000000000001E1B7                 mov     byte ptr [rsi+8], 7
.text:000000000001E1BB
.text:000000000001E1BB loc_1E1BB:                              ; CODE XREF: re_compile_internal+F65↑j
.text:000000000001E1BB                                         ; re_compile_internal+F84↓j ...
.text:000000000001E1BB                 add     rsi, 10h
.text:000000000001E1BF                 cmp     rax, rsi
.text:000000000001E1C2                 jz      loc_1E2A7
.text:000000000001E1C8
.text:000000000001E1C8 loc_1E1C8:                              ; CODE XREF: re_compile_internal+F60↑j
.text:000000000001E1C8                 movzx   edx, byte ptr [rsi+8]
.text:000000000001E1CC                 cmp     dl, 1
.text:000000000001E1CF                 jnz     short loc_1E1B2
.text:000000000001E1D1                 cmp     byte ptr [rsi], 0
.text:000000000001E1D4                 jns     short loc_1E1BB
.text:000000000001E1D6                 and     byte ptr [rsi+0Ah], 0DFh
.text:000000000001E1DA                 jmp     short loc_1E1BB
.text:000000000001E1DA ; ---------------------------------------------------------------------------
.text:000000000001E1DC                 align 20h
.text:000000000001E1E0
.text:000000000001E1E0 loc_1E1E0:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:000000000001E1E0                                         ; DATA XREF: .rodata:jpt_1E023↓o
.text:000000000001E1E0                 cmp     byte ptr [rcx], 0 ; jumptable 000000000001E023 case 1
.text:000000000001E1E3                 cmovs   r14d, eax
.text:000000000001E1E7                 jmp     short loc_1E18C ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E1E9 ; ---------------------------------------------------------------------------
.text:000000000001E1E9
.text:000000000001E1E9 loc_1E1E9:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:000000000001E1E9                                         ; DATA XREF: .rodata:jpt_1E023↓o
.text:000000000001E1E9                 mov     edi, [rcx]      ; jumptable 000000000001E023 case 12
.text:000000000001E1EB                 cmp     edi, 20h ; ' '
.text:000000000001E1EE                 jz      short loc_1E18C ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E1F0                 jbe     loc_1E299
.text:000000000001E1F6                 cmp     edi, 40h ; '@'
.text:000000000001E1F9                 jz      short loc_1E18C ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E1FB                 add     edi, 0FFFFFF80h
.text:000000000001E1FE                 jz      short loc_1E18C ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E200                 jmp     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001E200 ; ---------------------------------------------------------------------------
.text:000000000001E205                 align 8
.text:000000000001E208
.text:000000000001E208 loc_1E208:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:000000000001E208                                         ; DATA XREF: .rodata:jpt_1E023↓o
.text:000000000001E208                 mov     rdi, [rcx]      ; jumptable 000000000001E023 case 3
.text:000000000001E20B                 cmp     qword ptr [rdi+10h], 0
.text:000000000001E210                 jnz     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001E216                 cmp     qword ptr [rdi+18h], 0
.text:000000000001E21B                 jz      loc_1E18C       ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E221                 jmp     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001E221 ; ---------------------------------------------------------------------------
.text:000000000001E226                 align 10h
.text:000000000001E230
.text:000000000001E230 loc_1E230:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:000000000001E230                 mov     r15d, eax
.text:000000000001E233                 jmp     loc_1DF4F
.text:000000000001E238 ; ---------------------------------------------------------------------------
.text:000000000001E238
.text:000000000001E238 loc_1E238:                              ; CODE XREF: re_compile_internal+93E↑j
.text:000000000001E238                 mov     qword ptr [r15+8], 0
.text:000000000001E240                 mov     qword ptr [r15], 0
.text:000000000001E247                 jmp     loc_1DDBA
.text:000000000001E24C ; ---------------------------------------------------------------------------
.text:000000000001E24C
.text:000000000001E24C loc_1E24C:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:000000000001E24C                 mov     rax, [rsp+158h+var_150]
.text:000000000001E251                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001E259                 mov     r13, [rax]
.text:000000000001E25C                 jmp     loc_1D57C
.text:000000000001E261 ; ---------------------------------------------------------------------------
.text:000000000001E261
.text:000000000001E261 loc_1E261:                              ; CODE XREF: re_compile_internal+E79↑j
.text:000000000001E261                 mov     eax, 0Ch
.text:000000000001E266                 jmp     loc_1D5EC
.text:000000000001E26B ; ---------------------------------------------------------------------------
.text:000000000001E26B
.text:000000000001E26B loc_1E26B:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:000000000001E26B                 mov     rax, [rsp+158h+var_150]
.text:000000000001E270                 mov     qword ptr [rbx+68h], 0
.text:000000000001E278                 mov     r13, [rax]
.text:000000000001E27B                 jmp     loc_1D57C
.text:000000000001E280 ; ---------------------------------------------------------------------------
.text:000000000001E280
.text:000000000001E280 loc_1E280:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:000000000001E280                 mov     qword ptr [rcx+8], 0
.text:000000000001E288                 mov     qword ptr [rcx], 0
.text:000000000001E28F                 mov     eax, 0Ch
.text:000000000001E294                 jmp     loc_1D570
.text:000000000001E299 ; ---------------------------------------------------------------------------
.text:000000000001E299
.text:000000000001E299 loc_1E299:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:000000000001E299                 cmp     edi, 10h
.text:000000000001E29C                 jz      loc_1E18C       ; jumptable 000000000001E023 cases 2,4,8-11
.text:000000000001E2A2                 jmp     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001E2A7 ; ---------------------------------------------------------------------------
.text:000000000001E2A7
.text:000000000001E2A7 loc_1E2A7:                              ; CODE XREF: re_compile_internal+F72↑j
.text:000000000001E2A7                 mov     r14d, r8d
.text:000000000001E2AA
.text:000000000001E2AA loc_1E2AA:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:000000000001E2AA                                         ; re_compile_internal+F50↑j
.text:000000000001E2AA                 cmp     qword ptr [rbx+98h], 0
.text:000000000001E2B2                 movzx   edx, byte ptr [rbx+0B0h]
.text:000000000001E2B9                 mov     dword ptr [rbx+0B4h], 1
.text:000000000001E2C3                 setnle  al
.text:000000000001E2C6                 and     edx, 0FFFFFFF9h
.text:000000000001E2C9                 or      eax, r14d
.text:000000000001E2CC                 and     eax, 1
.text:000000000001E2CF                 add     eax, eax
.text:000000000001E2D1                 or      eax, edx
.text:000000000001E2D3                 mov     [rbx+0B0h], al
.text:000000000001E2D9                 jmp     loc_1DDFE       ; jumptable 000000000001E023 case 6
.text:000000000001E2DE ; ---------------------------------------------------------------------------
.text:000000000001E2DE
.text:000000000001E2DE def_1E023:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:000000000001E2DE                                         ; re_compile_internal+DD3↑j
.text:000000000001E2DE                                         ; DATA XREF: ...
.text:000000000001E2DE                 call    _abort          ; jumptable 000000000001E023 default case, cases 0,7
.text:000000000001E2E3 ; ---------------------------------------------------------------------------
.text:000000000001E2E3
.text:000000000001E2E3 loc_1E2E3:                              ; CODE XREF: re_compile_internal+875↑j
.text:000000000001E2E3                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001E2EA                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001E2F1                 lea     rdi, aRight1    ; "right > -1"
.text:000000000001E2F8                 mov     edx, 5B0h       ; line
.text:000000000001E2FD                 call    ___assert_fail
.text:000000000001E302 ; ---------------------------------------------------------------------------
.text:000000000001E302
.text:000000000001E302 loc_1E302:                              ; CODE XREF: re_compile_internal+79B↑j
.text:000000000001E302                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001E309                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001E310                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:000000000001E317                 mov     edx, 5C2h       ; line
.text:000000000001E31C                 call    ___assert_fail
.text:000000000001E321 ; ---------------------------------------------------------------------------
.text:000000000001E321
.text:000000000001E321 loc_1E321:                              ; CODE XREF: re_compile_internal+86C↑j
.text:000000000001E321                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001E328                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001E32F                 lea     rdi, aLeft1     ; "left > -1"
.text:000000000001E336                 mov     edx, 5AFh       ; line
.text:000000000001E33B                 call    ___assert_fail
.text:000000000001E340 ; ---------------------------------------------------------------------------
.text:000000000001E340
.text:000000000001E340 loc_1E340:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:000000000001E340                 call    ___stack_chk_fail
.text:000000000001E340 ; } // starts at 1D250
.text:000000000001E340 re_compile_internal endp
.text:000000000001E340
.text:000000000001E340 ; ---------------------------------------------------------------------------
.text:000000000001E345                 align 10h
.text:000000000001E350
.text:000000000001E350 ; =============== S U B R O U T I N E =======================================
.text:000000000001E350
.text:000000000001E350
.text:000000000001E350                 public rpl_re_compile_pattern
.text:000000000001E350 rpl_re_compile_pattern proc near
.text:000000000001E350 ; __unwind {
.text:000000000001E350                 sub     rsp, 8
.text:000000000001E354                 mov     rcx, cs:rpl_re_syntax_options
.text:000000000001E35B                 mov     r8, rdi
.text:000000000001E35E                 mov     rdi, rdx
.text:000000000001E361                 mov     rax, rcx
.text:000000000001E364                 shr     rax, 19h
.text:000000000001E368                 and     eax, 1
.text:000000000001E36B                 shl     eax, 4
.text:000000000001E36E                 mov     edx, eax
.text:000000000001E370                 movzx   eax, byte ptr [rdi+38h]
.text:000000000001E374                 and     eax, 0FFFFFFEFh
.text:000000000001E377                 or      eax, edx
.text:000000000001E379                 mov     rdx, rsi
.text:000000000001E37C                 mov     rsi, r8
.text:000000000001E37F                 or      eax, 0FFFFFF80h
.text:000000000001E382                 mov     [rdi+38h], al
.text:000000000001E385                 call    re_compile_internal
.text:000000000001E38A                 test    eax, eax
.text:000000000001E38C                 jz      short loc_1E3B8
.text:000000000001E38E                 lea     rdx, __re_error_msgid_idx
.text:000000000001E395                 cdqe
.text:000000000001E397                 lea     rsi, __re_error_msgid ; "Success"
.text:000000000001E39E                 xor     edi, edi        ; domainname
.text:000000000001E3A0                 add     rsi, [rdx+rax*8] ; msgid
.text:000000000001E3A4                 mov     edx, 5          ; category
.text:000000000001E3A9                 add     rsp, 8
.text:000000000001E3AD                 jmp     _dcgettext
.text:000000000001E3AD ; ---------------------------------------------------------------------------
.text:000000000001E3B2                 align 8
.text:000000000001E3B8
.text:000000000001E3B8 loc_1E3B8:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:000000000001E3B8                 xor     eax, eax
.text:000000000001E3BA                 add     rsp, 8
.text:000000000001E3BE                 retn
.text:000000000001E3BE ; } // starts at 1E350
.text:000000000001E3BE rpl_re_compile_pattern endp
.text:000000000001E3BE
.text:000000000001E3BE ; ---------------------------------------------------------------------------
.text:000000000001E3BF                 align 20h
.text:000000000001E3C0
.text:000000000001E3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E3C0
.text:000000000001E3C0
.text:000000000001E3C0                 public rpl_re_set_syntax
.text:000000000001E3C0 rpl_re_set_syntax proc near
.text:000000000001E3C0 ; __unwind {
.text:000000000001E3C0                 mov     rax, cs:rpl_re_syntax_options
.text:000000000001E3C7                 mov     cs:rpl_re_syntax_options, rdi
.text:000000000001E3CE                 retn
.text:000000000001E3CE ; } // starts at 1E3C0
.text:000000000001E3CE rpl_re_set_syntax endp
.text:000000000001E3CE
.text:000000000001E3CE ; ---------------------------------------------------------------------------
.text:000000000001E3CF                 align 10h
.text:000000000001E3D0
.text:000000000001E3D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E3D0
.text:000000000001E3D0
.text:000000000001E3D0                 public rpl_re_compile_fastmap
.text:000000000001E3D0 rpl_re_compile_fastmap proc near        ; CODE XREF: re_search_stub+297↓p
.text:000000000001E3D0                                         ; rpl_regcomp+B7↓p
.text:000000000001E3D0 ; __unwind {
.text:000000000001E3D0                 push    r12
.text:000000000001E3D2                 push    rbp
.text:000000000001E3D3                 xor     eax, eax
.text:000000000001E3D5                 push    rbx
.text:000000000001E3D6                 mov     rbp, [rdi+20h]
.text:000000000001E3DA                 mov     rbx, rdi
.text:000000000001E3DD                 mov     r12, [rdi]
.text:000000000001E3E0                 lea     rdi, [rbp+8]
.text:000000000001E3E4                 mov     rcx, rbp
.text:000000000001E3E7                 mov     qword ptr [rbp+0], 0
.text:000000000001E3EF                 mov     qword ptr [rbp+0F8h], 0
.text:000000000001E3FA                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001E3FE                 sub     rcx, rdi
.text:000000000001E401                 add     ecx, 100h
.text:000000000001E407                 shr     ecx, 3
.text:000000000001E40A                 rep stosq
.text:000000000001E40D                 mov     rcx, rbp
.text:000000000001E410                 mov     rdi, rbx
.text:000000000001E413                 mov     rsi, [r12+48h]
.text:000000000001E418                 lea     rdx, [rsi+18h]
.text:000000000001E41C                 add     rsi, 10h
.text:000000000001E420                 call    re_compile_fastmap_iter_isra_30
.text:000000000001E425                 mov     rax, [r12+50h]
.text:000000000001E42A                 cmp     [r12+48h], rax
.text:000000000001E42F                 jz      short loc_1E449
.text:000000000001E431                 lea     rdx, [rax+18h]
.text:000000000001E435                 lea     rsi, [rax+10h]
.text:000000000001E439                 mov     rcx, rbp
.text:000000000001E43C                 mov     rdi, rbx
.text:000000000001E43F                 call    re_compile_fastmap_iter_isra_30
.text:000000000001E444                 mov     rax, [r12+48h]
.text:000000000001E449
.text:000000000001E449 loc_1E449:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:000000000001E449                 mov     rsi, [r12+58h]
.text:000000000001E44E                 cmp     rsi, rax
.text:000000000001E451                 jz      short loc_1E46B
.text:000000000001E453                 lea     rdx, [rsi+18h]
.text:000000000001E457                 mov     rcx, rbp
.text:000000000001E45A                 add     rsi, 10h
.text:000000000001E45E                 mov     rdi, rbx
.text:000000000001E461                 call    re_compile_fastmap_iter_isra_30
.text:000000000001E466                 mov     rax, [r12+48h]
.text:000000000001E46B
.text:000000000001E46B loc_1E46B:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:000000000001E46B                 mov     rsi, [r12+60h]
.text:000000000001E470                 cmp     rsi, rax
.text:000000000001E473                 jz      short loc_1E488
.text:000000000001E475                 lea     rdx, [rsi+18h]
.text:000000000001E479                 mov     rcx, rbp
.text:000000000001E47C                 add     rsi, 10h
.text:000000000001E480                 mov     rdi, rbx
.text:000000000001E483                 call    re_compile_fastmap_iter_isra_30
.text:000000000001E488
.text:000000000001E488 loc_1E488:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:000000000001E488                 or      byte ptr [rbx+38h], 8
.text:000000000001E48C                 xor     eax, eax
.text:000000000001E48E                 pop     rbx
.text:000000000001E48F                 pop     rbp
.text:000000000001E490                 pop     r12
.text:000000000001E492                 retn
.text:000000000001E492 ; } // starts at 1E3D0
.text:000000000001E492 rpl_re_compile_fastmap endp
.text:000000000001E492
.text:000000000001E492 ; ---------------------------------------------------------------------------
.text:000000000001E493                 align 20h
.text:000000000001E4A0
.text:000000000001E4A0 ; =============== S U B R O U T I N E =======================================
.text:000000000001E4A0
.text:000000000001E4A0
.text:000000000001E4A0 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:000000000001E4A0                                         ; rpl_re_match+E↓p ...
.text:000000000001E4A0
.text:000000000001E4A0 size            = qword ptr -60h
.text:000000000001E4A0 ptr             = qword ptr -58h
.text:000000000001E4A0 var_50          = qword ptr -50h
.text:000000000001E4A0 var_48          = qword ptr -48h
.text:000000000001E4A0 var_40          = dword ptr -40h
.text:000000000001E4A0 var_3C          = dword ptr -3Ch
.text:000000000001E4A0 arg_0           = qword ptr  8
.text:000000000001E4A0 arg_8           = dword ptr  10h
.text:000000000001E4A0
.text:000000000001E4A0 ; __unwind {
.text:000000000001E4A0                 push    r15
.text:000000000001E4A2                 push    r14
.text:000000000001E4A4                 mov     rax, r8
.text:000000000001E4A7                 push    r13
.text:000000000001E4A9                 push    r12
.text:000000000001E4AB                 add     r8, rcx
.text:000000000001E4AE                 push    rbp
.text:000000000001E4AF                 push    rbx
.text:000000000001E4B0                 sub     rsp, 38h
.text:000000000001E4B4                 test    rcx, rcx
.text:000000000001E4B7                 mov     ebx, [rsp+68h+arg_8]
.text:000000000001E4BB                 mov     r12, [rsp+68h+arg_0]
.text:000000000001E4C0                 mov     [rsp+68h+var_40], ebx
.text:000000000001E4C4                 js      loc_1E800
.text:000000000001E4CA                 cmp     rcx, rdx
.text:000000000001E4CD                 jg      loc_1E800
.text:000000000001E4D3                 cmp     r8, rdx
.text:000000000001E4D6                 mov     rbx, rcx
.text:000000000001E4D9                 mov     r15, rdi
.text:000000000001E4DC                 jg      loc_1E760
.text:000000000001E4E2                 test    rax, rax
.text:000000000001E4E5                 js      short loc_1E4F0
.text:000000000001E4E7                 cmp     rcx, r8
.text:000000000001E4EA                 jg      loc_1E760
.text:000000000001E4F0
.text:000000000001E4F0 loc_1E4F0:                              ; CODE XREF: re_search_stub+45↑j
.text:000000000001E4F0                 test    r8, r8
.text:000000000001E4F3                 js      loc_1E7D8
.text:000000000001E4F9                 test    rax, rax
.text:000000000001E4FC                 jns     short loc_1E507
.text:000000000001E4FE                 cmp     rbx, r8
.text:000000000001E501                 jle     loc_1E7D8
.text:000000000001E507
.text:000000000001E507 loc_1E507:                              ; CODE XREF: re_search_stub+5C↑j
.text:000000000001E507                                         ; re_search_stub+2C3↓j
.text:000000000001E507                 movzx   eax, byte ptr [r15+38h]
.text:000000000001E50C                 mov     r13d, eax
.text:000000000001E50F                 shr     r13b, 5
.text:000000000001E513                 mov     edi, r13d
.text:000000000001E516                 and     edi, 3
.text:000000000001E519                 cmp     r8, rbx
.text:000000000001E51C                 mov     [rsp+68h+var_3C], edi
.text:000000000001E520                 jle     short loc_1E531
.text:000000000001E522                 cmp     qword ptr [r15+20h], 0
.text:000000000001E527                 jz      short loc_1E531
.text:000000000001E529                 test    al, 8
.text:000000000001E52B                 jz      loc_1E720
.text:000000000001E531
.text:000000000001E531 loc_1E531:                              ; CODE XREF: re_search_stub+80↑j
.text:000000000001E531                                         ; re_search_stub+87↑j ...
.text:000000000001E531                 test    al, 10h
.text:000000000001E533                 jnz     loc_1E700
.text:000000000001E539                 test    r12, r12
.text:000000000001E53C                 jz      loc_1E700
.text:000000000001E542                 and     eax, 6
.text:000000000001E545                 mov     rcx, [r15+30h]
.text:000000000001E549                 cmp     al, 4
.text:000000000001E54B                 jz      loc_1E6E0
.text:000000000001E551
.text:000000000001E551 loc_1E551:                              ; CODE XREF: re_search_stub+247↓j
.text:000000000001E551                 lea     r14, [rcx+1]
.text:000000000001E555                 mov     r13, r14
.text:000000000001E558
.text:000000000001E558 loc_1E558:                              ; CODE XREF: re_search_stub+253↓j
.text:000000000001E558                 mov     rdi, r14
.text:000000000001E55B                 shl     rdi, 4          ; size
.text:000000000001E55F
.text:000000000001E55F loc_1E55F:                              ; CODE XREF: re_search_stub+274↓j
.text:000000000001E55F                 mov     [rsp+68h+var_48], r9
.text:000000000001E564                 mov     [rsp+68h+var_50], rdx
.text:000000000001E569                 mov     [rsp+68h+ptr], rsi
.text:000000000001E56E                 mov     [rsp+68h+size], r8
.text:000000000001E573                 call    _malloc
.text:000000000001E578                 test    rax, rax
.text:000000000001E57B                 mov     rbp, rax
.text:000000000001E57E                 jz      loc_1E810
.text:000000000001E584                 sub     rsp, 8
.text:000000000001E588                 mov     rcx, rbx
.text:000000000001E58B                 mov     rdi, r15
.text:000000000001E58E                 mov     eax, [rsp+70h+var_3C]
.text:000000000001E592                 push    rax
.text:000000000001E593                 push    rbp
.text:000000000001E594                 push    r14
.text:000000000001E596                 mov     r9, [rsp+88h+var_48]
.text:000000000001E59B                 mov     r8, [rsp+88h+size]
.text:000000000001E5A0                 mov     rdx, [rsp+88h+var_50]
.text:000000000001E5A5                 mov     rsi, [rsp+88h+ptr]
.text:000000000001E5AA                 call    re_search_internal
.text:000000000001E5AF                 add     rsp, 20h
.text:000000000001E5B3                 test    eax, eax
.text:000000000001E5B5                 jz      short loc_1E5E8
.text:000000000001E5B7                 cmp     eax, 1
.text:000000000001E5BA                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000001E5C1                 jz      short loc_1E5CA
.text:000000000001E5C3
.text:000000000001E5C3 loc_1E5C3:                              ; CODE XREF: re_search_stub+212↓j
.text:000000000001E5C3                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:000000000001E5CA
.text:000000000001E5CA loc_1E5CA:                              ; CODE XREF: re_search_stub+121↑j
.text:000000000001E5CA                                         ; re_search_stub+221↓j ...
.text:000000000001E5CA                 mov     rdi, rbp        ; ptr
.text:000000000001E5CD                 call    free
.text:000000000001E5D2
.text:000000000001E5D2 loc_1E5D2:                              ; CODE XREF: re_search_stub+367↓j
.text:000000000001E5D2                                         ; re_search_stub+377↓j
.text:000000000001E5D2                 add     rsp, 38h
.text:000000000001E5D6                 mov     rax, r12
.text:000000000001E5D9                 pop     rbx
.text:000000000001E5DA                 pop     rbp
.text:000000000001E5DB                 pop     r12
.text:000000000001E5DD                 pop     r13
.text:000000000001E5DF                 pop     r14
.text:000000000001E5E1                 pop     r15
.text:000000000001E5E3                 retn
.text:000000000001E5E3 ; ---------------------------------------------------------------------------
.text:000000000001E5E4                 align 8
.text:000000000001E5E8
.text:000000000001E5E8 loc_1E5E8:                              ; CODE XREF: re_search_stub+115↑j
.text:000000000001E5E8                 test    r12, r12
.text:000000000001E5EB                 jz      loc_1E6B8
.text:000000000001E5F1                 movzx   eax, byte ptr [r15+38h]
.text:000000000001E5F6                 lea     rdx, [r13+1]
.text:000000000001E5FA                 shr     al, 1
.text:000000000001E5FC                 and     eax, 3
.text:000000000001E5FF                 jz      loc_1E770
.text:000000000001E605                 cmp     eax, 1
.text:000000000001E608                 jz      loc_1E820
.text:000000000001E60E                 cmp     eax, 2
.text:000000000001E611                 jnz     loc_1E900
.text:000000000001E617                 cmp     r14, [r12]
.text:000000000001E61B                 ja      loc_1E8E1
.text:000000000001E621                 mov     r9d, 2
.text:000000000001E627
.text:000000000001E627 loc_1E627:                              ; CODE XREF: re_search_stub+32C↓j
.text:000000000001E627                                         ; re_search_stub+38A↓j ...
.text:000000000001E627                 test    r13, r13
.text:000000000001E62A                 jle     loc_1E898
.text:000000000001E630                 mov     r8, [r12+8]
.text:000000000001E635                 mov     rdi, [r12+10h]
.text:000000000001E63A                 lea     rsi, ds:0[r13*8]
.text:000000000001E642                 mov     rdx, r13
.text:000000000001E645                 xor     eax, eax
.text:000000000001E647                 nop     word ptr [rax+rax+00000000h]
.text:000000000001E650
.text:000000000001E650 loc_1E650:                              ; CODE XREF: re_search_stub+1C9↓j
.text:000000000001E650                 mov     rcx, [rbp+rax*2+0]
.text:000000000001E655                 mov     [r8+rax], rcx
.text:000000000001E659                 mov     rcx, [rbp+rax*2+8]
.text:000000000001E65E                 mov     [rdi+rax], rcx
.text:000000000001E662                 add     rax, 8
.text:000000000001E666                 cmp     rsi, rax
.text:000000000001E669                 jnz     short loc_1E650
.text:000000000001E66B
.text:000000000001E66B loc_1E66B:                              ; CODE XREF: re_search_stub+3FD↓j
.text:000000000001E66B                 cmp     [r12], rdx
.text:000000000001E66F                 jbe     short loc_1E69D
.text:000000000001E671                 mov     rsi, [r12+10h]
.text:000000000001E676                 mov     rcx, [r12+8]
.text:000000000001E67B                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001E682                 nop     word ptr [rax+rax+00h]
.text:000000000001E688
.text:000000000001E688 loc_1E688:                              ; CODE XREF: re_search_stub+1FB↓j
.text:000000000001E688                 mov     [rsi+rdx*8], rax
.text:000000000001E68C                 add     r13, 1
.text:000000000001E690                 mov     [rcx+rdx*8], rax
.text:000000000001E694                 cmp     r13, [r12]
.text:000000000001E698                 mov     rdx, r13
.text:000000000001E69B                 jb      short loc_1E688
.text:000000000001E69D
.text:000000000001E69D loc_1E69D:                              ; CODE XREF: re_search_stub+1CF↑j
.text:000000000001E69D                                         ; re_search_stub+40D↓j ...
.text:000000000001E69D                 movzx   eax, byte ptr [r15+38h]
.text:000000000001E6A2                 lea     r13d, [r9+r9]
.text:000000000001E6A6                 and     eax, 0FFFFFFF9h
.text:000000000001E6A9                 or      eax, r13d
.text:000000000001E6AC                 test    al, 6
.text:000000000001E6AE                 mov     [r15+38h], al
.text:000000000001E6B2                 jz      loc_1E5C3
.text:000000000001E6B8
.text:000000000001E6B8 loc_1E6B8:                              ; CODE XREF: re_search_stub+14B↑j
.text:000000000001E6B8                 cmp     byte ptr [rsp+68h+var_40], 0
.text:000000000001E6BD                 mov     r12, [rbp+0]
.text:000000000001E6C1                 jz      loc_1E5CA
.text:000000000001E6C7                 cmp     r12, rbx
.text:000000000001E6CA                 jnz     loc_1E8C2
.text:000000000001E6D0                 mov     r12, [rbp+8]
.text:000000000001E6D4                 sub     r12, rbx
.text:000000000001E6D7                 jmp     loc_1E5CA
.text:000000000001E6D7 ; ---------------------------------------------------------------------------
.text:000000000001E6DC                 align 20h
.text:000000000001E6E0
.text:000000000001E6E0 loc_1E6E0:                              ; CODE XREF: re_search_stub+AB↑j
.text:000000000001E6E0                 mov     r14, [r12]
.text:000000000001E6E4                 cmp     r14, rcx
.text:000000000001E6E7                 ja      loc_1E551
.text:000000000001E6ED                 test    r14, r14
.text:000000000001E6F0                 mov     r13, r14
.text:000000000001E6F3                 jg      loc_1E558
.text:000000000001E6F9                 nop     dword ptr [rax+00000000h]
.text:000000000001E700
.text:000000000001E700 loc_1E700:                              ; CODE XREF: re_search_stub+93↑j
.text:000000000001E700                                         ; re_search_stub+9C↑j
.text:000000000001E700                 mov     edi, 10h
.text:000000000001E705                 mov     r14d, 1
.text:000000000001E70B                 mov     r13d, 1
.text:000000000001E711                 xor     r12d, r12d
.text:000000000001E714                 jmp     loc_1E55F
.text:000000000001E714 ; ---------------------------------------------------------------------------
.text:000000000001E719                 align 20h
.text:000000000001E720
.text:000000000001E720 loc_1E720:                              ; CODE XREF: re_search_stub+8B↑j
.text:000000000001E720                 mov     rdi, r15
.text:000000000001E723                 mov     [rsp+68h+var_48], r9
.text:000000000001E728                 mov     [rsp+68h+var_50], rdx
.text:000000000001E72D                 mov     [rsp+68h+ptr], rsi
.text:000000000001E732                 mov     [rsp+68h+size], r8
.text:000000000001E737                 call    rpl_re_compile_fastmap
.text:000000000001E73C                 movzx   eax, byte ptr [r15+38h]
.text:000000000001E741                 mov     r9, [rsp+68h+var_48]
.text:000000000001E746                 mov     rdx, [rsp+68h+var_50]
.text:000000000001E74B                 mov     rsi, [rsp+68h+ptr]
.text:000000000001E750                 mov     r8, [rsp+68h+size]
.text:000000000001E755                 jmp     loc_1E531
.text:000000000001E755 ; ---------------------------------------------------------------------------
.text:000000000001E75A                 align 20h
.text:000000000001E760
.text:000000000001E760 loc_1E760:                              ; CODE XREF: re_search_stub+3C↑j
.text:000000000001E760                                         ; re_search_stub+4A↑j
.text:000000000001E760                 mov     r8, rdx
.text:000000000001E763                 jmp     loc_1E507
.text:000000000001E763 ; ---------------------------------------------------------------------------
.text:000000000001E768                 align 10h
.text:000000000001E770
.text:000000000001E770 loc_1E770:                              ; CODE XREF: re_search_stub+15F↑j
.text:000000000001E770                 lea     r14, ds:0[rdx*8]
.text:000000000001E778                 mov     [rsp+68h+size], rdx
.text:000000000001E77D                 mov     rdi, r14        ; size
.text:000000000001E780                 call    _malloc
.text:000000000001E785                 test    rax, rax
.text:000000000001E788                 mov     [r12+8], rax
.text:000000000001E78D                 mov     rdx, [rsp+68h+size]
.text:000000000001E792                 jz      loc_1E8AA
.text:000000000001E798                 mov     rdi, r14        ; size
.text:000000000001E79B                 mov     [rsp+68h+size], rdx
.text:000000000001E7A0                 mov     [rsp+68h+ptr], rax
.text:000000000001E7A5                 call    _malloc
.text:000000000001E7AA                 test    rax, rax
.text:000000000001E7AD                 mov     [r12+10h], rax
.text:000000000001E7B2                 mov     rdx, [rsp+68h+size]
.text:000000000001E7B7                 mov     rcx, [rsp+68h+ptr]
.text:000000000001E7BC                 jz      loc_1E8A2
.text:000000000001E7C2                 mov     [r12], rdx
.text:000000000001E7C6                 mov     r9d, 1
.text:000000000001E7CC                 jmp     loc_1E627
.text:000000000001E7CC ; ---------------------------------------------------------------------------
.text:000000000001E7D1                 align 8
.text:000000000001E7D8
.text:000000000001E7D8 loc_1E7D8:                              ; CODE XREF: re_search_stub+53↑j
.text:000000000001E7D8                                         ; re_search_stub+61↑j
.text:000000000001E7D8                 movzx   eax, byte ptr [r15+38h]
.text:000000000001E7DD                 xor     r8d, r8d
.text:000000000001E7E0                 mov     r13d, eax
.text:000000000001E7E3                 shr     r13b, 5
.text:000000000001E7E7                 mov     edi, r13d
.text:000000000001E7EA                 and     edi, 3
.text:000000000001E7ED                 mov     [rsp+68h+var_3C], edi
.text:000000000001E7F1                 jmp     loc_1E531
.text:000000000001E7F1 ; ---------------------------------------------------------------------------
.text:000000000001E7F6                 align 20h
.text:000000000001E800
.text:000000000001E800 loc_1E800:                              ; CODE XREF: re_search_stub+24↑j
.text:000000000001E800                                         ; re_search_stub+2D↑j
.text:000000000001E800                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000001E807                 jmp     loc_1E5D2
.text:000000000001E807 ; ---------------------------------------------------------------------------
.text:000000000001E80C                 align 10h
.text:000000000001E810
.text:000000000001E810 loc_1E810:                              ; CODE XREF: re_search_stub+DE↑j
.text:000000000001E810                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:000000000001E817                 jmp     loc_1E5D2
.text:000000000001E817 ; ---------------------------------------------------------------------------
.text:000000000001E81C                 align 20h
.text:000000000001E820
.text:000000000001E820 loc_1E820:                              ; CODE XREF: re_search_stub+168↑j
.text:000000000001E820                 cmp     [r12], rdx
.text:000000000001E824                 mov     r9d, 1
.text:000000000001E82A                 jnb     loc_1E627
.text:000000000001E830                 lea     rcx, ds:0[rdx*8]
.text:000000000001E838                 mov     rdi, [r12+8]    ; ptr
.text:000000000001E83D                 mov     byte ptr [rsp+68h+var_50], r9b
.text:000000000001E842                 mov     [rsp+68h+ptr], rdx
.text:000000000001E847                 mov     rsi, rcx        ; size
.text:000000000001E84A                 mov     [rsp+68h+size], rcx
.text:000000000001E84F                 call    _realloc
.text:000000000001E854                 test    rax, rax
.text:000000000001E857                 mov     r14, rax
.text:000000000001E85A                 jz      short loc_1E8AA
.text:000000000001E85C                 mov     rcx, [rsp+68h+size]
.text:000000000001E861                 mov     rdi, [r12+10h]  ; ptr
.text:000000000001E866                 mov     rsi, rcx        ; size
.text:000000000001E869                 call    _realloc
.text:000000000001E86E                 test    rax, rax
.text:000000000001E871                 mov     rdx, [rsp+68h+ptr]
.text:000000000001E876                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:000000000001E87C                 jz      short loc_1E8B2
.text:000000000001E87E                 mov     [r12+8], r14
.text:000000000001E883                 mov     [r12+10h], rax
.text:000000000001E888                 mov     [r12], rdx
.text:000000000001E88C                 jmp     loc_1E627
.text:000000000001E88C ; ---------------------------------------------------------------------------
.text:000000000001E891                 align 8
.text:000000000001E898
.text:000000000001E898 loc_1E898:                              ; CODE XREF: re_search_stub+18A↑j
.text:000000000001E898                 xor     edx, edx
.text:000000000001E89A                 xor     r13d, r13d
.text:000000000001E89D                 jmp     loc_1E66B
.text:000000000001E8A2 ; ---------------------------------------------------------------------------
.text:000000000001E8A2
.text:000000000001E8A2 loc_1E8A2:                              ; CODE XREF: re_search_stub+31C↑j
.text:000000000001E8A2                 mov     rdi, rcx        ; ptr
.text:000000000001E8A5                 call    free
.text:000000000001E8AA
.text:000000000001E8AA loc_1E8AA:                              ; CODE XREF: re_search_stub+2F2↑j
.text:000000000001E8AA                                         ; re_search_stub+3BA↑j
.text:000000000001E8AA                 xor     r9d, r9d
.text:000000000001E8AD                 jmp     loc_1E69D
.text:000000000001E8B2 ; ---------------------------------------------------------------------------
.text:000000000001E8B2
.text:000000000001E8B2 loc_1E8B2:                              ; CODE XREF: re_search_stub+3DC↑j
.text:000000000001E8B2                 mov     rdi, r14        ; ptr
.text:000000000001E8B5                 call    free
.text:000000000001E8BA                 xor     r9d, r9d
.text:000000000001E8BD                 jmp     loc_1E69D
.text:000000000001E8C2 ; ---------------------------------------------------------------------------
.text:000000000001E8C2
.text:000000000001E8C2 loc_1E8C2:                              ; CODE XREF: re_search_stub+22A↑j
.text:000000000001E8C2                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:000000000001E8C9                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001E8D0                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:000000000001E8D7                 mov     edx, 1BEh       ; line
.text:000000000001E8DC                 call    ___assert_fail
.text:000000000001E8E1 ; ---------------------------------------------------------------------------
.text:000000000001E8E1
.text:000000000001E8E1 loc_1E8E1:                              ; CODE XREF: re_search_stub+17B↑j
.text:000000000001E8E1                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:000000000001E8E8                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001E8EF                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:000000000001E8F6                 mov     edx, 1FBh       ; line
.text:000000000001E8FB                 call    ___assert_fail
.text:000000000001E900 ; ---------------------------------------------------------------------------
.text:000000000001E900
.text:000000000001E900 loc_1E900:                              ; CODE XREF: re_search_stub+171↑j
.text:000000000001E900                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:000000000001E907                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001E90E                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:000000000001E915                 mov     edx, 1F9h       ; line
.text:000000000001E91A                 call    ___assert_fail
.text:000000000001E91A ; } // starts at 1E4A0
.text:000000000001E91A re_search_stub  endp
.text:000000000001E91A
.text:000000000001E91A ; ---------------------------------------------------------------------------
.text:000000000001E91F                 align 20h
.text:000000000001E920
.text:000000000001E920 ; =============== S U B R O U T I N E =======================================
.text:000000000001E920
.text:000000000001E920
.text:000000000001E920 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:000000000001E920                                         ; rpl_re_search_2+12↓p
.text:000000000001E920
.text:000000000001E920 src             = qword ptr -50h
.text:000000000001E920 var_48          = qword ptr -48h
.text:000000000001E920 var_3C          = dword ptr -3Ch
.text:000000000001E920 arg_0           = qword ptr  8
.text:000000000001E920 arg_8           = qword ptr  10h
.text:000000000001E920 arg_10          = qword ptr  18h
.text:000000000001E920 arg_18          = dword ptr  20h
.text:000000000001E920
.text:000000000001E920 ; __unwind {
.text:000000000001E920                 push    r15
.text:000000000001E922                 push    r14
.text:000000000001E924                 push    r13
.text:000000000001E926                 push    r12
.text:000000000001E928                 mov     r12, rdi
.text:000000000001E92B                 push    rbp
.text:000000000001E92C                 push    rbx
.text:000000000001E92D                 mov     rbp, r8
.text:000000000001E930                 mov     rbx, rdx
.text:000000000001E933                 mov     rdx, rbp
.text:000000000001E936                 sub     rsp, 28h
.text:000000000001E93A                 shr     rdx, 3Fh
.text:000000000001E93E                 mov     rax, [rsp+58h+arg_10]
.text:000000000001E943                 mov     edi, edx
.text:000000000001E945                 mov     r8d, [rsp+58h+arg_18]
.text:000000000001E94A                 shr     rax, 3Fh
.text:000000000001E94E                 or      dil, al
.text:000000000001E951                 jnz     loc_1EA20
.text:000000000001E957                 test    rbx, rbx
.text:000000000001E95A                 js      loc_1EA20
.text:000000000001E960                 mov     r15, rbx
.text:000000000001E963                 add     r15, rbp
.text:000000000001E966                 jo      loc_1EA20
.text:000000000001E96C                 test    rbp, rbp
.text:000000000001E96F                 mov     r14, rcx
.text:000000000001E972                 mov     rcx, r9
.text:000000000001E975                 jz      loc_1EA30
.text:000000000001E97B                 xor     r13d, r13d
.text:000000000001E97E                 test    rbx, rbx
.text:000000000001E981                 mov     [rsp+58h+src], rsi
.text:000000000001E986                 jnz     short loc_1E9D0
.text:000000000001E988
.text:000000000001E988 loc_1E988:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:000000000001E988                                         ; re_search_2_stub+116↓j
.text:000000000001E988                 movzx   r8d, r8b
.text:000000000001E98C                 mov     rdx, r15
.text:000000000001E98F                 mov     rsi, r14
.text:000000000001E992                 push    r8
.text:000000000001E994                 push    [rsp+60h+arg_8]
.text:000000000001E998                 mov     rdi, r12
.text:000000000001E99B                 mov     r9, [rsp+68h+arg_10]
.text:000000000001E9A3                 mov     r8, [rsp+68h+arg_0]
.text:000000000001E9A8                 call    re_search_stub
.text:000000000001E9AD                 mov     rdi, r13        ; ptr
.text:000000000001E9B0                 mov     rbx, rax
.text:000000000001E9B3                 call    free
.text:000000000001E9B8                 pop     rax
.text:000000000001E9B9                 pop     rdx
.text:000000000001E9BA
.text:000000000001E9BA loc_1E9BA:                              ; CODE XREF: re_search_2_stub+107↓j
.text:000000000001E9BA                 add     rsp, 28h
.text:000000000001E9BE                 mov     rax, rbx
.text:000000000001E9C1                 pop     rbx
.text:000000000001E9C2                 pop     rbp
.text:000000000001E9C3                 pop     r12
.text:000000000001E9C5                 pop     r13
.text:000000000001E9C7                 pop     r14
.text:000000000001E9C9                 pop     r15
.text:000000000001E9CB                 retn
.text:000000000001E9CB ; ---------------------------------------------------------------------------
.text:000000000001E9CC                 align 10h
.text:000000000001E9D0
.text:000000000001E9D0 loc_1E9D0:                              ; CODE XREF: re_search_2_stub+66↑j
.text:000000000001E9D0                 mov     rdi, r15        ; size
.text:000000000001E9D3                 mov     [rsp+58h+var_3C], r8d
.text:000000000001E9D8                 mov     [rsp+58h+var_48], r9
.text:000000000001E9DD                 call    _malloc
.text:000000000001E9E2                 test    rax, rax
.text:000000000001E9E5                 mov     r13, rax
.text:000000000001E9E8                 jz      short loc_1EA20
.text:000000000001E9EA                 mov     rsi, [rsp+58h+src] ; src
.text:000000000001E9EF                 mov     rdx, rbx        ; n
.text:000000000001E9F2                 mov     rdi, rax        ; dest
.text:000000000001E9F5                 call    _memcpy
.text:000000000001E9FA                 lea     rdi, [r13+rbx+0] ; dest
.text:000000000001E9FF                 mov     rsi, r14        ; src
.text:000000000001EA02                 mov     rdx, rbp        ; n
.text:000000000001EA05                 mov     r14, r13
.text:000000000001EA08                 call    _memcpy
.text:000000000001EA0D                 mov     rcx, [rsp+58h+var_48]
.text:000000000001EA12                 mov     r8d, [rsp+58h+var_3C]
.text:000000000001EA17                 jmp     loc_1E988
.text:000000000001EA17 ; ---------------------------------------------------------------------------
.text:000000000001EA1C                 align 20h
.text:000000000001EA20
.text:000000000001EA20 loc_1EA20:                              ; CODE XREF: re_search_2_stub+31↑j
.text:000000000001EA20                                         ; re_search_2_stub+3A↑j ...
.text:000000000001EA20                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000001EA27                 jmp     short loc_1E9BA
.text:000000000001EA27 ; ---------------------------------------------------------------------------
.text:000000000001EA29                 align 10h
.text:000000000001EA30
.text:000000000001EA30 loc_1EA30:                              ; CODE XREF: re_search_2_stub+55↑j
.text:000000000001EA30                 mov     r14, rsi
.text:000000000001EA33                 xor     r13d, r13d
.text:000000000001EA36                 jmp     loc_1E988
.text:000000000001EA36 ; } // starts at 1E920
.text:000000000001EA36 re_search_2_stub endp
.text:000000000001EA36
.text:000000000001EA36 ; ---------------------------------------------------------------------------
.text:000000000001EA3B                 align 20h
.text:000000000001EA40
.text:000000000001EA40 ; =============== S U B R O U T I N E =======================================
.text:000000000001EA40
.text:000000000001EA40
.text:000000000001EA40                 public rpl_regcomp
.text:000000000001EA40 rpl_regcomp     proc near               ; CODE XREF: add_exclude+2FA↑p
.text:000000000001EA40                                         ; add_exclude+353↑p
.text:000000000001EA40 ; __unwind {
.text:000000000001EA40                 mov     eax, edx
.text:000000000001EA42                 push    r14
.text:000000000001EA44                 push    r13
.text:000000000001EA46                 and     eax, 1
.text:000000000001EA49                 push    r12
.text:000000000001EA4B                 push    rbp
.text:000000000001EA4C                 cmp     eax, 1
.text:000000000001EA4F                 push    rbx
.text:000000000001EA50                 mov     rbx, rdi
.text:000000000001EA53                 sbb     r14, r14
.text:000000000001EA56                 mov     qword ptr [rdi], 0
.text:000000000001EA5D                 mov     qword ptr [rdi+8], 0
.text:000000000001EA65                 and     r14d, 0FD4FCAh
.text:000000000001EA6C                 mov     qword ptr [rdi+10h], 0
.text:000000000001EA74                 mov     edi, 100h       ; size
.text:000000000001EA79                 mov     r12, rsi
.text:000000000001EA7C                 mov     ebp, edx
.text:000000000001EA7E                 add     r14, 3B2FCh
.text:000000000001EA85                 call    _malloc
.text:000000000001EA8A                 test    rax, rax
.text:000000000001EA8D                 mov     [rbx+20h], rax
.text:000000000001EA91                 jz      loc_1EB40
.text:000000000001EA97                 mov     r13, rbp
.text:000000000001EA9A                 shl     r13, 15h
.text:000000000001EA9E                 and     r13d, 400000h
.text:000000000001EAA5                 or      r13, r14
.text:000000000001EAA8                 test    bpl, 4
.text:000000000001EAAC                 jnz     short loc_1EB10
.text:000000000001EAAE                 and     byte ptr [rbx+38h], 7Fh
.text:000000000001EAB2
.text:000000000001EAB2 loc_1EAB2:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:000000000001EAB2                 movzx   edx, byte ptr [rbx+38h]
.text:000000000001EAB6                 shr     ebp, 3
.text:000000000001EAB9                 mov     rdi, r12        ; s
.text:000000000001EABC                 and     ebp, 1
.text:000000000001EABF                 mov     qword ptr [rbx+28h], 0
.text:000000000001EAC7                 shl     ebp, 4
.text:000000000001EACA                 and     edx, 0FFFFFFEFh
.text:000000000001EACD                 or      ebp, edx
.text:000000000001EACF                 mov     [rbx+38h], bpl
.text:000000000001EAD3                 call    _strlen
.text:000000000001EAD8                 mov     rcx, r13
.text:000000000001EADB                 mov     rdx, rax
.text:000000000001EADE                 mov     rsi, r12
.text:000000000001EAE1                 mov     rdi, rbx
.text:000000000001EAE4                 call    re_compile_internal
.text:000000000001EAE9                 cmp     eax, 10h
.text:000000000001EAEC                 mov     ebp, eax
.text:000000000001EAEE                 jz      short loc_1EB28
.text:000000000001EAF0                 test    eax, eax
.text:000000000001EAF2                 jnz     short loc_1EB2D
.text:000000000001EAF4                 mov     rdi, rbx
.text:000000000001EAF7                 call    rpl_re_compile_fastmap
.text:000000000001EAFC
.text:000000000001EAFC loc_1EAFC:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:000000000001EAFC                 pop     rbx
.text:000000000001EAFD                 mov     eax, ebp
.text:000000000001EAFF                 pop     rbp
.text:000000000001EB00                 pop     r12
.text:000000000001EB02                 pop     r13
.text:000000000001EB04                 pop     r14
.text:000000000001EB06                 retn
.text:000000000001EB06 ; ---------------------------------------------------------------------------
.text:000000000001EB07                 align 10h
.text:000000000001EB10
.text:000000000001EB10 loc_1EB10:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:000000000001EB10                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:000000000001EB14                 or      byte ptr [rbx+38h], 80h
.text:000000000001EB18                 or      r13, 100h
.text:000000000001EB1F                 jmp     short loc_1EAB2
.text:000000000001EB1F ; ---------------------------------------------------------------------------
.text:000000000001EB21                 align 8
.text:000000000001EB28
.text:000000000001EB28 loc_1EB28:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:000000000001EB28                 mov     ebp, 8
.text:000000000001EB2D
.text:000000000001EB2D loc_1EB2D:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:000000000001EB2D                 mov     rdi, [rbx+20h]  ; ptr
.text:000000000001EB31                 call    free
.text:000000000001EB36                 mov     qword ptr [rbx+20h], 0
.text:000000000001EB3E                 jmp     short loc_1EAFC
.text:000000000001EB40 ; ---------------------------------------------------------------------------
.text:000000000001EB40
.text:000000000001EB40 loc_1EB40:                              ; CODE XREF: rpl_regcomp+51↑j
.text:000000000001EB40                 mov     ebp, 0Ch
.text:000000000001EB45                 pop     rbx
.text:000000000001EB46                 mov     eax, ebp
.text:000000000001EB48                 pop     rbp
.text:000000000001EB49                 pop     r12
.text:000000000001EB4B                 pop     r13
.text:000000000001EB4D                 pop     r14
.text:000000000001EB4F                 retn
.text:000000000001EB4F ; } // starts at 1EA40
.text:000000000001EB4F rpl_regcomp     endp
.text:000000000001EB4F
.text:000000000001EB50
.text:000000000001EB50 ; =============== S U B R O U T I N E =======================================
.text:000000000001EB50
.text:000000000001EB50
.text:000000000001EB50                 public rpl_regerror
.text:000000000001EB50 rpl_regerror    proc near
.text:000000000001EB50 ; __unwind {
.text:000000000001EB50                 push    r13
.text:000000000001EB52                 push    r12
.text:000000000001EB54                 push    rbp
.text:000000000001EB55                 push    rbx
.text:000000000001EB56                 sub     rsp, 8
.text:000000000001EB5A                 cmp     edi, 10h
.text:000000000001EB5D                 ja      short loc_1EBC0
.text:000000000001EB5F                 lea     rax, __re_error_msgid_idx
.text:000000000001EB66                 movsxd  rdi, edi
.text:000000000001EB69                 lea     rsi, __re_error_msgid ; "Success"
.text:000000000001EB70                 mov     rbp, rdx
.text:000000000001EB73                 mov     edx, 5          ; category
.text:000000000001EB78                 mov     r12, rcx
.text:000000000001EB7B                 add     rsi, [rax+rdi*8] ; msgid
.text:000000000001EB7F                 xor     edi, edi        ; domainname
.text:000000000001EB81                 call    _dcgettext
.text:000000000001EB86                 mov     rdi, rax        ; s
.text:000000000001EB89                 mov     r13, rax
.text:000000000001EB8C                 call    _strlen
.text:000000000001EB91                 test    r12, r12
.text:000000000001EB94                 lea     rbx, [rax+1]
.text:000000000001EB98                 jz      short loc_1EBAD
.text:000000000001EB9A                 cmp     rbx, r12
.text:000000000001EB9D                 mov     rdx, rbx        ; n
.text:000000000001EBA0                 ja      short loc_1EBC8
.text:000000000001EBA2
.text:000000000001EBA2 loc_1EBA2:                              ; CODE XREF: rpl_regerror+83↓j
.text:000000000001EBA2                 mov     rsi, r13        ; src
.text:000000000001EBA5                 mov     rdi, rbp        ; dest
.text:000000000001EBA8                 call    _memcpy
.text:000000000001EBAD
.text:000000000001EBAD loc_1EBAD:                              ; CODE XREF: rpl_regerror+48↑j
.text:000000000001EBAD                 add     rsp, 8
.text:000000000001EBB1                 mov     rax, rbx
.text:000000000001EBB4                 pop     rbx
.text:000000000001EBB5                 pop     rbp
.text:000000000001EBB6                 pop     r12
.text:000000000001EBB8                 pop     r13
.text:000000000001EBBA                 retn
.text:000000000001EBBA ; ---------------------------------------------------------------------------
.text:000000000001EBBB                 align 20h
.text:000000000001EBC0
.text:000000000001EBC0 loc_1EBC0:                              ; CODE XREF: rpl_regerror+D↑j
.text:000000000001EBC0                 call    _abort
.text:000000000001EBC0 ; ---------------------------------------------------------------------------
.text:000000000001EBC5                 align 8
.text:000000000001EBC8
.text:000000000001EBC8 loc_1EBC8:                              ; CODE XREF: rpl_regerror+50↑j
.text:000000000001EBC8                 lea     rdx, [r12-1]
.text:000000000001EBCD                 mov     byte ptr [rbp+r12-1], 0
.text:000000000001EBD3                 jmp     short loc_1EBA2
.text:000000000001EBD3 ; } // starts at 1EB50
.text:000000000001EBD3 rpl_regerror    endp
.text:000000000001EBD3
.text:000000000001EBD3 ; ---------------------------------------------------------------------------
.text:000000000001EBD5                 align 20h
.text:000000000001EBE0
.text:000000000001EBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EBE0
.text:000000000001EBE0 ; Attributes: info_from_lumina
.text:000000000001EBE0
.text:000000000001EBE0                 public regfree
.text:000000000001EBE0 regfree         proc near               ; CODE XREF: free_exclude+66↑p
.text:000000000001EBE0 ; __unwind {
.text:000000000001EBE0                 push    rbx
.text:000000000001EBE1                 mov     rbx, rdi
.text:000000000001EBE4                 mov     rdi, [rdi]      ; ptr
.text:000000000001EBE7                 test    rdi, rdi
.text:000000000001EBEA                 jz      short loc_1EBF1
.text:000000000001EBEC                 call    free_dfa_content
.text:000000000001EBF1
.text:000000000001EBF1 loc_1EBF1:                              ; CODE XREF: regfree+A↑j
.text:000000000001EBF1                 mov     rdi, [rbx+20h]  ; ptr
.text:000000000001EBF5                 mov     qword ptr [rbx], 0
.text:000000000001EBFC                 mov     qword ptr [rbx+8], 0
.text:000000000001EC04                 call    free
.text:000000000001EC09                 mov     rdi, [rbx+28h]  ; ptr
.text:000000000001EC0D                 mov     qword ptr [rbx+20h], 0
.text:000000000001EC15                 call    free
.text:000000000001EC1A                 mov     qword ptr [rbx+28h], 0
.text:000000000001EC22                 pop     rbx
.text:000000000001EC23                 retn
.text:000000000001EC23 ; } // starts at 1EBE0
.text:000000000001EC23 regfree         endp
.text:000000000001EC23
.text:000000000001EC23 ; ---------------------------------------------------------------------------
.text:000000000001EC24                 align 10h
.text:000000000001EC30
.text:000000000001EC30 ; =============== S U B R O U T I N E =======================================
.text:000000000001EC30
.text:000000000001EC30
.text:000000000001EC30                 public rpl_regexec
.text:000000000001EC30 rpl_regexec     proc near               ; CODE XREF: excluded_file_name+164↑p
.text:000000000001EC30
.text:000000000001EC30 var_30          = qword ptr -30h
.text:000000000001EC30
.text:000000000001EC30 ; __unwind {
.text:000000000001EC30                 test    r8d, 0FFFFFFF8h
.text:000000000001EC37                 jnz     loc_1ECC8
.text:000000000001EC3D                 push    r13
.text:000000000001EC3F                 push    r12
.text:000000000001EC41                 mov     r13, rdx
.text:000000000001EC44                 push    rbp
.text:000000000001EC45                 push    rbx
.text:000000000001EC46                 mov     r12, rcx
.text:000000000001EC49                 mov     ebx, r8d
.text:000000000001EC4C                 mov     rbp, rdi
.text:000000000001EC4F                 sub     rsp, 18h
.text:000000000001EC53                 test    r8b, 4
.text:000000000001EC57                 jnz     short loc_1ECA8
.text:000000000001EC59                 mov     rdi, rsi        ; s
.text:000000000001EC5C                 mov     [rsp+38h+var_30], rsi
.text:000000000001EC61                 call    _strlen
.text:000000000001EC66                 xor     ecx, ecx
.text:000000000001EC68                 test    byte ptr [rbp+38h], 10h
.text:000000000001EC6C                 mov     rdx, rax
.text:000000000001EC6F                 mov     rsi, [rsp+38h+var_30]
.text:000000000001EC74                 jz      short loc_1ECB6
.text:000000000001EC76
.text:000000000001EC76 loc_1EC76:                              ; CODE XREF: rpl_regexec+84↓j
.text:000000000001EC76                 sub     rsp, 8
.text:000000000001EC7A                 push    rbx
.text:000000000001EC7B                 push    0
.text:000000000001EC7D                 push    0
.text:000000000001EC7F
.text:000000000001EC7F loc_1EC7F:                              ; CODE XREF: rpl_regexec+8F↓j
.text:000000000001EC7F                 mov     rdi, rbp
.text:000000000001EC82                 mov     r9, rdx
.text:000000000001EC85                 mov     r8, rdx
.text:000000000001EC88                 call    re_search_internal
.text:000000000001EC8D                 add     rsp, 20h
.text:000000000001EC91                 test    eax, eax
.text:000000000001EC93                 setnz   al
.text:000000000001EC96                 add     rsp, 18h
.text:000000000001EC9A                 pop     rbx
.text:000000000001EC9B                 movzx   eax, al
.text:000000000001EC9E                 pop     rbp
.text:000000000001EC9F                 pop     r12
.text:000000000001ECA1                 pop     r13
.text:000000000001ECA3                 retn
.text:000000000001ECA3 ; ---------------------------------------------------------------------------
.text:000000000001ECA4                 align 8
.text:000000000001ECA8
.text:000000000001ECA8 loc_1ECA8:                              ; CODE XREF: rpl_regexec+27↑j
.text:000000000001ECA8                 test    byte ptr [rbp+38h], 10h
.text:000000000001ECAC                 mov     rcx, [rcx]
.text:000000000001ECAF                 mov     rdx, [r12+8]
.text:000000000001ECB4                 jnz     short loc_1EC76
.text:000000000001ECB6
.text:000000000001ECB6 loc_1ECB6:                              ; CODE XREF: rpl_regexec+44↑j
.text:000000000001ECB6                 sub     rsp, 8
.text:000000000001ECBA                 push    rbx
.text:000000000001ECBB                 push    r12
.text:000000000001ECBD                 push    r13
.text:000000000001ECBF                 jmp     short loc_1EC7F
.text:000000000001ECBF ; ---------------------------------------------------------------------------
.text:000000000001ECC1                 align 8
.text:000000000001ECC8
.text:000000000001ECC8 loc_1ECC8:                              ; CODE XREF: rpl_regexec+7↑j
.text:000000000001ECC8                 mov     eax, 2
.text:000000000001ECCD                 retn
.text:000000000001ECCD ; } // starts at 1EC30
.text:000000000001ECCD rpl_regexec     endp
.text:000000000001ECCD
.text:000000000001ECCD ; ---------------------------------------------------------------------------
.text:000000000001ECCE                 align 10h
.text:000000000001ECD0
.text:000000000001ECD0 ; =============== S U B R O U T I N E =======================================
.text:000000000001ECD0
.text:000000000001ECD0
.text:000000000001ECD0                 public rpl_re_match
.text:000000000001ECD0 rpl_re_match    proc near
.text:000000000001ECD0 ; __unwind {
.text:000000000001ECD0                 sub     rsp, 8
.text:000000000001ECD4                 mov     r9, rdx
.text:000000000001ECD7                 push    1
.text:000000000001ECD9                 push    r8
.text:000000000001ECDB                 xor     r8d, r8d
.text:000000000001ECDE                 call    re_search_stub
.text:000000000001ECE3                 add     rsp, 18h
.text:000000000001ECE7                 retn
.text:000000000001ECE7 ; } // starts at 1ECD0
.text:000000000001ECE7 rpl_re_match    endp
.text:000000000001ECE7
.text:000000000001ECE7 ; ---------------------------------------------------------------------------
.text:000000000001ECE8                 align 10h
.text:000000000001ECF0
.text:000000000001ECF0 ; =============== S U B R O U T I N E =======================================
.text:000000000001ECF0
.text:000000000001ECF0
.text:000000000001ECF0                 public rpl_re_search
.text:000000000001ECF0 rpl_re_search   proc near
.text:000000000001ECF0 ; __unwind {
.text:000000000001ECF0                 sub     rsp, 8
.text:000000000001ECF4                 push    0
.text:000000000001ECF6                 push    r9
.text:000000000001ECF8                 mov     r9, rdx
.text:000000000001ECFB                 call    re_search_stub
.text:000000000001ED00                 add     rsp, 18h
.text:000000000001ED04                 retn
.text:000000000001ED04 ; } // starts at 1ECF0
.text:000000000001ED04 rpl_re_search   endp
.text:000000000001ED04
.text:000000000001ED04 ; ---------------------------------------------------------------------------
.text:000000000001ED05                 align 10h
.text:000000000001ED10
.text:000000000001ED10 ; =============== S U B R O U T I N E =======================================
.text:000000000001ED10
.text:000000000001ED10
.text:000000000001ED10                 public rpl_re_match_2
.text:000000000001ED10 rpl_re_match_2  proc near
.text:000000000001ED10
.text:000000000001ED10 arg_0           = qword ptr  8
.text:000000000001ED10 arg_8           = qword ptr  10h
.text:000000000001ED10
.text:000000000001ED10 ; __unwind {
.text:000000000001ED10                 sub     rsp, 8
.text:000000000001ED14                 push    1
.text:000000000001ED16                 push    [rsp+10h+arg_8]
.text:000000000001ED1A                 push    [rsp+18h+arg_0]
.text:000000000001ED1E                 push    0
.text:000000000001ED20                 call    re_search_2_stub
.text:000000000001ED25                 add     rsp, 28h
.text:000000000001ED29                 retn
.text:000000000001ED29 ; } // starts at 1ED10
.text:000000000001ED29 rpl_re_match_2  endp
.text:000000000001ED29
.text:000000000001ED29 ; ---------------------------------------------------------------------------
.text:000000000001ED2A                 align 10h
.text:000000000001ED30
.text:000000000001ED30 ; =============== S U B R O U T I N E =======================================
.text:000000000001ED30
.text:000000000001ED30
.text:000000000001ED30                 public rpl_re_search_2
.text:000000000001ED30 rpl_re_search_2 proc near
.text:000000000001ED30
.text:000000000001ED30 arg_0           = qword ptr  8
.text:000000000001ED30 arg_8           = qword ptr  10h
.text:000000000001ED30 arg_10          = qword ptr  18h
.text:000000000001ED30
.text:000000000001ED30 ; __unwind {
.text:000000000001ED30                 sub     rsp, 8
.text:000000000001ED34                 push    0
.text:000000000001ED36                 push    [rsp+10h+arg_10]
.text:000000000001ED3A                 push    [rsp+18h+arg_8]
.text:000000000001ED3E                 push    [rsp+20h+arg_0]
.text:000000000001ED42                 call    re_search_2_stub
.text:000000000001ED47                 add     rsp, 28h
.text:000000000001ED4B                 retn
.text:000000000001ED4B ; } // starts at 1ED30
.text:000000000001ED4B rpl_re_search_2 endp
.text:000000000001ED4B
.text:000000000001ED4B ; ---------------------------------------------------------------------------
.text:000000000001ED4C                 align 10h
.text:000000000001ED50
.text:000000000001ED50 ; =============== S U B R O U T I N E =======================================
.text:000000000001ED50
.text:000000000001ED50
.text:000000000001ED50                 public rpl_re_set_registers
.text:000000000001ED50 rpl_re_set_registers proc near
.text:000000000001ED50 ; __unwind {
.text:000000000001ED50                 test    rdx, rdx
.text:000000000001ED53                 jnz     short loc_1ED78
.text:000000000001ED55                 and     byte ptr [rdi+38h], 0F9h
.text:000000000001ED59                 mov     qword ptr [rsi], 0
.text:000000000001ED60                 mov     qword ptr [rsi+10h], 0
.text:000000000001ED68                 mov     qword ptr [rsi+8], 0
.text:000000000001ED70                 retn
.text:000000000001ED70 ; ---------------------------------------------------------------------------
.text:000000000001ED71                 align 8
.text:000000000001ED78
.text:000000000001ED78 loc_1ED78:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:000000000001ED78                 movzx   eax, byte ptr [rdi+38h]
.text:000000000001ED7C                 and     eax, 0FFFFFFF9h
.text:000000000001ED7F                 or      eax, 2
.text:000000000001ED82                 mov     [rdi+38h], al
.text:000000000001ED85                 mov     [rsi], rdx
.text:000000000001ED88                 mov     [rsi+8], rcx
.text:000000000001ED8C                 mov     [rsi+10h], r8
.text:000000000001ED90                 retn
.text:000000000001ED90 ; } // starts at 1ED50
.text:000000000001ED90 rpl_re_set_registers endp
.text:000000000001ED90
.text:000000000001ED90 ; ---------------------------------------------------------------------------
.text:000000000001ED91                 align 20h
.text:000000000001EDA0
.text:000000000001EDA0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EDA0
.text:000000000001EDA0 ; Attributes: info_from_lumina
.text:000000000001EDA0
.text:000000000001EDA0 ; int __fastcall setenv_TZ(const char *tz)
.text:000000000001EDA0 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_1EE24↓p
.text:000000000001EDA0                                         ; set_tz:loc_1F075↓p
.text:000000000001EDA0 ; __unwind {
.text:000000000001EDA0                 test    rdi, rdi
.text:000000000001EDA3                 jz      short loc_1EDC0
.text:000000000001EDA5                 mov     rsi, rdi        ; value
.text:000000000001EDA8                 lea     rdi, aTz        ; "TZ"
.text:000000000001EDAF                 mov     edx, 1          ; replace
.text:000000000001EDB4                 jmp     _setenv
.text:000000000001EDB4 ; ---------------------------------------------------------------------------
.text:000000000001EDB9                 align 20h
.text:000000000001EDC0
.text:000000000001EDC0 loc_1EDC0:                              ; CODE XREF: setenv_TZ+3↑j
.text:000000000001EDC0                 lea     rdi, aTz        ; "TZ"
.text:000000000001EDC7                 jmp     _unsetenv
.text:000000000001EDC7 ; } // starts at 1EDA0
.text:000000000001EDC7 setenv_TZ       endp
.text:000000000001EDC7
.text:000000000001EDC7 ; ---------------------------------------------------------------------------
.text:000000000001EDCC                 align 10h
.text:000000000001EDD0
.text:000000000001EDD0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EDD0
.text:000000000001EDD0 ; Attributes: info_from_lumina
.text:000000000001EDD0
.text:000000000001EDD0 ; void __fastcall tzfree_0(timezone_t tz)
.text:000000000001EDD0 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:000000000001EDD0                                         ; set_tz+67↓p ...
.text:000000000001EDD0 ; __unwind {
.text:000000000001EDD0                 test    rdi, rdi
.text:000000000001EDD3                 jz      short locret_1EDF8
.text:000000000001EDD5                 push    rbx
.text:000000000001EDD6                 db      2Eh
.text:000000000001EDD6                 nop     word ptr [rax+rax+00000000h]
.text:000000000001EDE0
.text:000000000001EDE0 loc_1EDE0:                              ; CODE XREF: tzfree_0+1E↓j
.text:000000000001EDE0                 mov     rbx, [rdi]
.text:000000000001EDE3                 call    free
.text:000000000001EDE8                 test    rbx, rbx
.text:000000000001EDEB                 mov     rdi, rbx
.text:000000000001EDEE                 jnz     short loc_1EDE0
.text:000000000001EDF0                 pop     rbx
.text:000000000001EDF1                 retn
.text:000000000001EDF1 ; ---------------------------------------------------------------------------
.text:000000000001EDF2                 align 8
.text:000000000001EDF8
.text:000000000001EDF8 locret_1EDF8:                           ; CODE XREF: tzfree_0+3↑j
.text:000000000001EDF8                 rep retn
.text:000000000001EDF8 ; } // starts at 1EDD0
.text:000000000001EDF8 tzfree_0        endp
.text:000000000001EDF8
.text:000000000001EDF8 ; ---------------------------------------------------------------------------
.text:000000000001EDFA                 align 20h
.text:000000000001EE00
.text:000000000001EE00 ; =============== S U B R O U T I N E =======================================
.text:000000000001EE00
.text:000000000001EE00 ; Attributes: info_from_lumina
.text:000000000001EE00
.text:000000000001EE00 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:000000000001EE00 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:000000000001EE00                                         ; localtime_rz+98↓p ...
.text:000000000001EE00 ; __unwind {
.text:000000000001EE00                 push    r13
.text:000000000001EE02                 push    r12
.text:000000000001EE04                 push    rbp
.text:000000000001EE05                 push    rbx
.text:000000000001EE06                 mov     rbp, rdi
.text:000000000001EE09                 sub     rsp, 8
.text:000000000001EE0D                 call    ___errno_location
.text:000000000001EE12                 cmp     byte ptr [rbp+8], 0
.text:000000000001EE16                 mov     rbx, rax
.text:000000000001EE19                 mov     r12d, [rax]
.text:000000000001EE1C                 lea     rdi, [rbp+9]
.text:000000000001EE20                 jnz     short loc_1EE24
.text:000000000001EE22                 xor     edi, edi        ; value
.text:000000000001EE24
.text:000000000001EE24 loc_1EE24:                              ; CODE XREF: revert_tz+20↑j
.text:000000000001EE24                 call    setenv_TZ
.text:000000000001EE29                 test    eax, eax
.text:000000000001EE2B                 jz      short loc_1EE50
.text:000000000001EE2D                 mov     r12d, [rbx]
.text:000000000001EE30                 xor     r13d, r13d
.text:000000000001EE33
.text:000000000001EE33 loc_1EE33:                              ; CODE XREF: revert_tz+5B↓j
.text:000000000001EE33                 mov     rdi, rbp
.text:000000000001EE36                 call    tzfree_0
.text:000000000001EE3B                 mov     [rbx], r12d
.text:000000000001EE3E                 add     rsp, 8
.text:000000000001EE42                 mov     eax, r13d
.text:000000000001EE45                 pop     rbx
.text:000000000001EE46                 pop     rbp
.text:000000000001EE47                 pop     r12
.text:000000000001EE49                 pop     r13
.text:000000000001EE4B                 retn
.text:000000000001EE4B ; ---------------------------------------------------------------------------
.text:000000000001EE4C                 align 10h
.text:000000000001EE50
.text:000000000001EE50 loc_1EE50:                              ; CODE XREF: revert_tz+2B↑j
.text:000000000001EE50                 call    _tzset
.text:000000000001EE55                 mov     r13d, 1
.text:000000000001EE5B                 jmp     short loc_1EE33
.text:000000000001EE5B ; } // starts at 1EE00
.text:000000000001EE5B revert_tz       endp
.text:000000000001EE5B
.text:000000000001EE5B ; ---------------------------------------------------------------------------
.text:000000000001EE5D                 align 20h
.text:000000000001EE60
.text:000000000001EE60 ; =============== S U B R O U T I N E =======================================
.text:000000000001EE60
.text:000000000001EE60 ; Attributes: info_from_lumina
.text:000000000001EE60
.text:000000000001EE60 ; timezone_t __fastcall tzalloc(const char *name)
.text:000000000001EE60                 public tzalloc
.text:000000000001EE60 tzalloc         proc near               ; CODE XREF: main+42C↑p
.text:000000000001EE60                                         ; save_abbr+EC↓p ...
.text:000000000001EE60 ; __unwind {
.text:000000000001EE60                 test    rdi, rdi
.text:000000000001EE63                 push    r12
.text:000000000001EE65                 push    rbp
.text:000000000001EE66                 push    rbx
.text:000000000001EE67                 jz      short loc_1EEC8
.text:000000000001EE69                 mov     r12, rdi
.text:000000000001EE6C                 call    _strlen
.text:000000000001EE71                 lea     rbp, [rax+1]
.text:000000000001EE75                 mov     edi, 76h ; 'v'
.text:000000000001EE7A                 cmp     rbp, 76h ; 'v'
.text:000000000001EE7E                 cmovnb  rdi, rbp
.text:000000000001EE82                 add     rdi, 11h
.text:000000000001EE86                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000001EE8A                 call    _malloc
.text:000000000001EE8F                 test    rax, rax
.text:000000000001EE92                 mov     rbx, rax
.text:000000000001EE95                 jz      short loc_1EEBB
.text:000000000001EE97                 mov     qword ptr [rax], 0
.text:000000000001EE9E                 lea     rdi, [rbx+9]    ; dest
.text:000000000001EEA2                 mov     eax, 1
.text:000000000001EEA7                 mov     [rbx+8], ax
.text:000000000001EEAB                 mov     rdx, rbp        ; n
.text:000000000001EEAE                 mov     rsi, r12        ; src
.text:000000000001EEB1                 call    _memcpy
.text:000000000001EEB6                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000001EEBB
.text:000000000001EEBB loc_1EEBB:                              ; CODE XREF: tzalloc+35↑j
.text:000000000001EEBB                                         ; tzalloc+78↓j
.text:000000000001EEBB                 mov     rax, rbx
.text:000000000001EEBE                 pop     rbx
.text:000000000001EEBF                 pop     rbp
.text:000000000001EEC0                 pop     r12
.text:000000000001EEC2                 retn
.text:000000000001EEC2 ; ---------------------------------------------------------------------------
.text:000000000001EEC3                 align 8
.text:000000000001EEC8
.text:000000000001EEC8 loc_1EEC8:                              ; CODE XREF: tzalloc+7↑j
.text:000000000001EEC8                 mov     edi, 80h        ; size
.text:000000000001EECD                 call    _malloc
.text:000000000001EED2                 test    rax, rax
.text:000000000001EED5                 mov     rbx, rax
.text:000000000001EED8                 jz      short loc_1EEBB
.text:000000000001EEDA                 xor     edx, edx
.text:000000000001EEDC                 mov     qword ptr [rbx], 0
.text:000000000001EEE3                 mov     rax, rbx
.text:000000000001EEE6                 mov     [rbx+8], dx
.text:000000000001EEEA                 pop     rbx
.text:000000000001EEEB                 pop     rbp
.text:000000000001EEEC                 pop     r12
.text:000000000001EEEE                 retn
.text:000000000001EEEE ; } // starts at 1EE60
.text:000000000001EEEE tzalloc         endp
.text:000000000001EEEE
.text:000000000001EEEE ; ---------------------------------------------------------------------------
.text:000000000001EEEF                 align 10h
.text:000000000001EEF0
.text:000000000001EEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000001EEF0
.text:000000000001EEF0 ; Attributes: info_from_lumina
.text:000000000001EEF0
.text:000000000001EEF0 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:000000000001EEF0 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:000000000001EEF0                                         ; mktime_z+51↓p
.text:000000000001EEF0 ; __unwind {
.text:000000000001EEF0                 push    r15
.text:000000000001EEF2                 push    r14
.text:000000000001EEF4                 mov     eax, 1
.text:000000000001EEF9                 push    r13
.text:000000000001EEFB                 push    r12
.text:000000000001EEFD                 push    rbp
.text:000000000001EEFE                 push    rbx
.text:000000000001EEFF                 sub     rsp, 8
.text:000000000001EF03                 mov     rbp, [rsi+30h]
.text:000000000001EF07                 test    rbp, rbp
.text:000000000001EF0A                 jz      loc_1EFA0
.text:000000000001EF10                 cmp     rsi, rbp
.text:000000000001EF13                 mov     r12, rdi
.text:000000000001EF16                 mov     r13, rsi
.text:000000000001EF19                 ja      short loc_1EF24
.text:000000000001EF1B                 lea     rdx, [rsi+38h]
.text:000000000001EF1F                 cmp     rbp, rdx
.text:000000000001EF22                 jb      short loc_1EFA0
.text:000000000001EF24
.text:000000000001EF24 loc_1EF24:                              ; CODE XREF: save_abbr+29↑j
.text:000000000001EF24                 cmp     byte ptr [rbp+0], 0
.text:000000000001EF28                 lea     rbx, [r12+9]
.text:000000000001EF2D                 jz      short loc_1EF90
.text:000000000001EF2F                 nop
.text:000000000001EF30
.text:000000000001EF30 loc_1EF30:                              ; CODE XREF: save_abbr+76↓j
.text:000000000001EF30                                         ; save_abbr+7F↓j
.text:000000000001EF30                 mov     rsi, rbp        ; s2
.text:000000000001EF33                 mov     rdi, rbx        ; s1
.text:000000000001EF36                 call    _strcmp
.text:000000000001EF3B                 test    eax, eax
.text:000000000001EF3D                 jz      short loc_1EF97
.text:000000000001EF3F
.text:000000000001EF3F loc_1EF3F:                              ; CODE XREF: save_abbr+95↓j
.text:000000000001EF3F                 cmp     byte ptr [rbx], 0
.text:000000000001EF42                 jnz     short loc_1EF56
.text:000000000001EF44                 lea     r14, [r12+9]
.text:000000000001EF49                 cmp     r14, rbx
.text:000000000001EF4C                 jnz     short loc_1EFB0
.text:000000000001EF4E                 cmp     byte ptr [r12+8], 0
.text:000000000001EF54                 jz      short loc_1EFB0
.text:000000000001EF56
.text:000000000001EF56 loc_1EF56:                              ; CODE XREF: save_abbr+52↑j
.text:000000000001EF56                 mov     rdi, rbx        ; s
.text:000000000001EF59                 call    _strlen
.text:000000000001EF5E                 lea     rbx, [rbx+rax+1]
.text:000000000001EF63                 cmp     byte ptr [rbx], 0
.text:000000000001EF66                 jnz     short loc_1EF30
.text:000000000001EF68                 mov     rax, [r12]
.text:000000000001EF6C                 test    rax, rax
.text:000000000001EF6F                 jz      short loc_1EF30
.text:000000000001EF71                 lea     rbx, [rax+9]
.text:000000000001EF75                 mov     rsi, rbp        ; s2
.text:000000000001EF78                 mov     r12, rax
.text:000000000001EF7B                 mov     rdi, rbx        ; s1
.text:000000000001EF7E                 call    _strcmp
.text:000000000001EF83                 test    eax, eax
.text:000000000001EF85                 jnz     short loc_1EF3F
.text:000000000001EF87                 jmp     short loc_1EF97
.text:000000000001EF87 ; ---------------------------------------------------------------------------
.text:000000000001EF89                 align 10h
.text:000000000001EF90
.text:000000000001EF90 loc_1EF90:                              ; CODE XREF: save_abbr+3D↑j
.text:000000000001EF90                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000001EF97
.text:000000000001EF97 loc_1EF97:                              ; CODE XREF: save_abbr+4D↑j
.text:000000000001EF97                                         ; save_abbr+97↑j ...
.text:000000000001EF97                 mov     [r13+30h], rbx
.text:000000000001EF9B                 mov     eax, 1
.text:000000000001EFA0
.text:000000000001EFA0 loc_1EFA0:                              ; CODE XREF: save_abbr+1A↑j
.text:000000000001EFA0                                         ; save_abbr+32↑j ...
.text:000000000001EFA0                 add     rsp, 8
.text:000000000001EFA4                 pop     rbx
.text:000000000001EFA5                 pop     rbp
.text:000000000001EFA6                 pop     r12
.text:000000000001EFA8                 pop     r13
.text:000000000001EFAA                 pop     r14
.text:000000000001EFAC                 pop     r15
.text:000000000001EFAE                 retn
.text:000000000001EFAE ; ---------------------------------------------------------------------------
.text:000000000001EFAF                 align 10h
.text:000000000001EFB0
.text:000000000001EFB0 loc_1EFB0:                              ; CODE XREF: save_abbr+5C↑j
.text:000000000001EFB0                                         ; save_abbr+64↑j
.text:000000000001EFB0                 mov     rdi, rbp        ; s
.text:000000000001EFB3                 call    _strlen
.text:000000000001EFB8                 lea     rdx, [rax+1]    ; n
.text:000000000001EFBC                 mov     r15, rax
.text:000000000001EFBF                 mov     rax, rbx
.text:000000000001EFC2                 sub     rax, r14
.text:000000000001EFC5                 mov     rcx, rax
.text:000000000001EFC8                 not     rcx
.text:000000000001EFCB                 cmp     rcx, rdx
.text:000000000001EFCE                 jb      short loc_1F000
.text:000000000001EFD0                 add     rax, rdx
.text:000000000001EFD3                 cmp     rax, 76h ; 'v'
.text:000000000001EFD7                 jbe     short loc_1F010
.text:000000000001EFD9                 mov     rdi, rbp        ; src
.text:000000000001EFDC                 call    tzalloc
.text:000000000001EFE1                 mov     rbx, rax
.text:000000000001EFE4                 mov     [r12], rax
.text:000000000001EFE8                 xor     eax, eax
.text:000000000001EFEA                 test    rbx, rbx
.text:000000000001EFED                 jz      short loc_1EFA0
.text:000000000001EFEF                 mov     byte ptr [rbx+8], 0
.text:000000000001EFF3                 add     rbx, 9
.text:000000000001EFF7                 jmp     short loc_1EF97
.text:000000000001EFF7 ; ---------------------------------------------------------------------------
.text:000000000001EFF9                 align 20h
.text:000000000001F000
.text:000000000001F000 loc_1F000:                              ; CODE XREF: save_abbr+DE↑j
.text:000000000001F000                 call    ___errno_location
.text:000000000001F005                 mov     dword ptr [rax], 0Ch
.text:000000000001F00B                 xor     eax, eax
.text:000000000001F00D                 jmp     short loc_1EFA0
.text:000000000001F00D ; ---------------------------------------------------------------------------
.text:000000000001F00F                 align 10h
.text:000000000001F010
.text:000000000001F010 loc_1F010:                              ; CODE XREF: save_abbr+E7↑j
.text:000000000001F010                 mov     rsi, rbp        ; src
.text:000000000001F013                 mov     rdi, rbx        ; dest
.text:000000000001F016                 call    _memcpy
.text:000000000001F01B                 mov     byte ptr [rbx+r15+1], 0
.text:000000000001F021                 jmp     loc_1EF97
.text:000000000001F021 ; } // starts at 1EEF0
.text:000000000001F021 save_abbr       endp
.text:000000000001F021
.text:000000000001F021 ; ---------------------------------------------------------------------------
.text:000000000001F026                 align 10h
.text:000000000001F030
.text:000000000001F030 ; =============== S U B R O U T I N E =======================================
.text:000000000001F030
.text:000000000001F030 ; Attributes: info_from_lumina
.text:000000000001F030
.text:000000000001F030 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:000000000001F030 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:000000000001F030                                         ; mktime_z+27↓p
.text:000000000001F030
.text:000000000001F030 var_20          = qword ptr -20h
.text:000000000001F030
.text:000000000001F030 ; __unwind {
.text:000000000001F030                 push    r12
.text:000000000001F032                 push    rbp
.text:000000000001F033                 mov     rbp, rdi
.text:000000000001F036                 push    rbx
.text:000000000001F037                 lea     rdi, aTz        ; "TZ"
.text:000000000001F03E                 sub     rsp, 10h
.text:000000000001F042                 call    _getenv
.text:000000000001F047                 test    rax, rax
.text:000000000001F04A                 mov     rbx, rax
.text:000000000001F04D                 jz      loc_1F0E8
.text:000000000001F053                 cmp     byte ptr [rbp+8], 0
.text:000000000001F057                 jnz     short loc_1F0C0
.text:000000000001F059
.text:000000000001F059 loc_1F059:                              ; CODE XREF: set_tz+A4↓j
.text:000000000001F059                                         ; set_tz+C2↓j
.text:000000000001F059                 mov     rdi, rbx        ; src
.text:000000000001F05C                 call    tzalloc
.text:000000000001F061                 test    rax, rax
.text:000000000001F064                 mov     r12, rax
.text:000000000001F067                 jz      short loc_1F0AD
.text:000000000001F069                 xor     edi, edi
.text:000000000001F06B                 cmp     byte ptr [rbp+8], 0
.text:000000000001F06F                 jz      short loc_1F075
.text:000000000001F071                 lea     rdi, [rbp+9]    ; value
.text:000000000001F075
.text:000000000001F075 loc_1F075:                              ; CODE XREF: set_tz+3F↑j
.text:000000000001F075                 call    setenv_TZ
.text:000000000001F07A                 test    eax, eax
.text:000000000001F07C                 jz      loc_1F108
.text:000000000001F082                 call    ___errno_location
.text:000000000001F087                 cmp     r12, 1
.text:000000000001F08B                 mov     ebx, [rax]
.text:000000000001F08D                 jz      short loc_1F0A8
.text:000000000001F08F                 mov     rdi, r12
.text:000000000001F092                 mov     [rsp+28h+var_20], rax
.text:000000000001F097                 call    tzfree_0
.text:000000000001F09C                 mov     rax, [rsp+28h+var_20]
.text:000000000001F0A1                 nop     dword ptr [rax+00000000h]
.text:000000000001F0A8
.text:000000000001F0A8 loc_1F0A8:                              ; CODE XREF: set_tz+5D↑j
.text:000000000001F0A8                 mov     [rax], ebx
.text:000000000001F0AA                 xor     r12d, r12d
.text:000000000001F0AD
.text:000000000001F0AD loc_1F0AD:                              ; CODE XREF: set_tz+37↑j
.text:000000000001F0AD                                         ; set_tz+DD↓j
.text:000000000001F0AD                 add     rsp, 10h
.text:000000000001F0B1                 mov     rax, r12
.text:000000000001F0B4                 pop     rbx
.text:000000000001F0B5                 pop     rbp
.text:000000000001F0B6                 pop     r12
.text:000000000001F0B8                 retn
.text:000000000001F0B8 ; ---------------------------------------------------------------------------
.text:000000000001F0B9                 align 20h
.text:000000000001F0C0
.text:000000000001F0C0 loc_1F0C0:                              ; CODE XREF: set_tz+27↑j
.text:000000000001F0C0                 lea     rdi, [rbp+9]    ; s1
.text:000000000001F0C4                 mov     rsi, rax        ; s2
.text:000000000001F0C7                 mov     r12d, 1
.text:000000000001F0CD                 call    _strcmp
.text:000000000001F0D2                 test    eax, eax
.text:000000000001F0D4                 jnz     short loc_1F059
.text:000000000001F0D6                 add     rsp, 10h
.text:000000000001F0DA                 mov     rax, r12
.text:000000000001F0DD                 pop     rbx
.text:000000000001F0DE                 pop     rbp
.text:000000000001F0DF                 pop     r12
.text:000000000001F0E1                 retn
.text:000000000001F0E1 ; ---------------------------------------------------------------------------
.text:000000000001F0E2                 align 8
.text:000000000001F0E8
.text:000000000001F0E8 loc_1F0E8:                              ; CODE XREF: set_tz+1D↑j
.text:000000000001F0E8                 cmp     byte ptr [rbp+8], 0
.text:000000000001F0EC                 mov     r12d, 1
.text:000000000001F0F2                 jnz     loc_1F059
.text:000000000001F0F8                 add     rsp, 10h
.text:000000000001F0FC                 mov     rax, r12
.text:000000000001F0FF                 pop     rbx
.text:000000000001F100                 pop     rbp
.text:000000000001F101                 pop     r12
.text:000000000001F103                 retn
.text:000000000001F103 ; ---------------------------------------------------------------------------
.text:000000000001F104                 align 8
.text:000000000001F108
.text:000000000001F108 loc_1F108:                              ; CODE XREF: set_tz+4C↑j
.text:000000000001F108                 call    _tzset
.text:000000000001F10D                 jmp     short loc_1F0AD
.text:000000000001F10D ; } // starts at 1F030
.text:000000000001F10D set_tz          endp
.text:000000000001F10D
.text:000000000001F10D ; ---------------------------------------------------------------------------
.text:000000000001F10F                 align 10h
.text:000000000001F110
.text:000000000001F110 ; =============== S U B R O U T I N E =======================================
.text:000000000001F110
.text:000000000001F110
.text:000000000001F110                 public tzfree
.text:000000000001F110 tzfree          proc near
.text:000000000001F110 ; __unwind {
.text:000000000001F110                 cmp     rdi, 1
.text:000000000001F114                 jz      short locret_1F11B
.text:000000000001F116                 jmp     tzfree_0
.text:000000000001F11B ; ---------------------------------------------------------------------------
.text:000000000001F11B
.text:000000000001F11B locret_1F11B:                           ; CODE XREF: tzfree+4↑j
.text:000000000001F11B                 retn
.text:000000000001F11B ; } // starts at 1F110
.text:000000000001F11B tzfree          endp
.text:000000000001F11B
.text:000000000001F11B ; ---------------------------------------------------------------------------
.text:000000000001F11C                 align 20h
.text:000000000001F120
.text:000000000001F120 ; =============== S U B R O U T I N E =======================================
.text:000000000001F120
.text:000000000001F120 ; Attributes: info_from_lumina
.text:000000000001F120
.text:000000000001F120 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:000000000001F120                 public localtime_rz
.text:000000000001F120 localtime_rz    proc near               ; CODE XREF: print_size+82↑p
.text:000000000001F120 ; __unwind {
.text:000000000001F120                 push    r13
.text:000000000001F122                 push    r12
.text:000000000001F124                 push    rbp
.text:000000000001F125                 push    rbx
.text:000000000001F126                 mov     rbp, rsi
.text:000000000001F129                 sub     rsp, 8
.text:000000000001F12D                 test    rdi, rdi
.text:000000000001F130                 jz      short loc_1F1A0
.text:000000000001F132                 mov     r13, rdx
.text:000000000001F135                 mov     rbx, rdi
.text:000000000001F138                 call    set_tz
.text:000000000001F13D                 test    rax, rax
.text:000000000001F140                 mov     r12, rax
.text:000000000001F143                 jz      short loc_1F18E
.text:000000000001F145                 mov     rsi, r13        ; tp
.text:000000000001F148                 mov     rdi, rbp        ; timer
.text:000000000001F14B                 call    _localtime_r
.text:000000000001F150                 test    rax, rax
.text:000000000001F153                 jz      short loc_1F180
.text:000000000001F155                 mov     rsi, r13
.text:000000000001F158                 mov     rdi, rbx
.text:000000000001F15B                 call    save_abbr
.text:000000000001F160                 test    al, al
.text:000000000001F162                 jz      short loc_1F180
.text:000000000001F164                 cmp     r12, 1
.text:000000000001F168                 jnz     short loc_1F1B5
.text:000000000001F16A
.text:000000000001F16A loc_1F16A:                              ; CODE XREF: localtime_rz+9F↓j
.text:000000000001F16A                 add     rsp, 8
.text:000000000001F16E                 mov     rax, r13
.text:000000000001F171                 pop     rbx
.text:000000000001F172                 pop     rbp
.text:000000000001F173                 pop     r12
.text:000000000001F175                 pop     r13
.text:000000000001F177                 retn
.text:000000000001F177 ; ---------------------------------------------------------------------------
.text:000000000001F178                 align 20h
.text:000000000001F180
.text:000000000001F180 loc_1F180:                              ; CODE XREF: localtime_rz+33↑j
.text:000000000001F180                                         ; localtime_rz+42↑j
.text:000000000001F180                 cmp     r12, 1
.text:000000000001F184                 jz      short loc_1F18E
.text:000000000001F186                 mov     rdi, r12
.text:000000000001F189                 call    revert_tz
.text:000000000001F18E
.text:000000000001F18E loc_1F18E:                              ; CODE XREF: localtime_rz+23↑j
.text:000000000001F18E                                         ; localtime_rz+64↑j ...
.text:000000000001F18E                 add     rsp, 8
.text:000000000001F192                 xor     eax, eax
.text:000000000001F194                 pop     rbx
.text:000000000001F195                 pop     rbp
.text:000000000001F196                 pop     r12
.text:000000000001F198                 pop     r13
.text:000000000001F19A                 retn
.text:000000000001F19A ; ---------------------------------------------------------------------------
.text:000000000001F19B                 align 20h
.text:000000000001F1A0
.text:000000000001F1A0 loc_1F1A0:                              ; CODE XREF: localtime_rz+10↑j
.text:000000000001F1A0                 add     rsp, 8
.text:000000000001F1A4                 mov     rdi, rbp        ; timer
.text:000000000001F1A7                 mov     rsi, rdx        ; tp
.text:000000000001F1AA                 pop     rbx
.text:000000000001F1AB                 pop     rbp
.text:000000000001F1AC                 pop     r12
.text:000000000001F1AE                 pop     r13
.text:000000000001F1B0                 jmp     _gmtime_r
.text:000000000001F1B5 ; ---------------------------------------------------------------------------
.text:000000000001F1B5
.text:000000000001F1B5 loc_1F1B5:                              ; CODE XREF: localtime_rz+48↑j
.text:000000000001F1B5                 mov     rdi, r12
.text:000000000001F1B8                 call    revert_tz
.text:000000000001F1BD                 test    al, al
.text:000000000001F1BF                 jnz     short loc_1F16A
.text:000000000001F1C1                 jmp     short loc_1F18E
.text:000000000001F1C1 ; } // starts at 1F120
.text:000000000001F1C1 localtime_rz    endp
.text:000000000001F1C1
.text:000000000001F1C1 ; ---------------------------------------------------------------------------
.text:000000000001F1C3                 align 10h
.text:000000000001F1D0
.text:000000000001F1D0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F1D0
.text:000000000001F1D0 ; Attributes: info_from_lumina
.text:000000000001F1D0
.text:000000000001F1D0 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:000000000001F1D0                 public mktime_z
.text:000000000001F1D0 mktime_z        proc near               ; CODE XREF: __strftime_internal+74B↑p
.text:000000000001F1D0
.text:000000000001F1D0 timer           = qword ptr -60h
.text:000000000001F1D0 tp              = tm ptr -58h
.text:000000000001F1D0 var_20          = qword ptr -20h
.text:000000000001F1D0
.text:000000000001F1D0 ; __unwind {
.text:000000000001F1D0                 push    r12
.text:000000000001F1D2                 push    rbp
.text:000000000001F1D3                 push    rbx
.text:000000000001F1D4                 mov     rbx, rsi
.text:000000000001F1D7                 sub     rsp, 50h
.text:000000000001F1DB                 mov     rax, fs:28h
.text:000000000001F1E4                 mov     [rsp+68h+var_20], rax
.text:000000000001F1E9                 xor     eax, eax
.text:000000000001F1EB                 test    rdi, rdi
.text:000000000001F1EE                 jz      loc_1F2F0
.text:000000000001F1F4                 mov     rbp, rdi
.text:000000000001F1F7                 call    set_tz
.text:000000000001F1FC                 test    rax, rax
.text:000000000001F1FF                 mov     r12, rax
.text:000000000001F202                 jz      loc_1F300
.text:000000000001F208                 mov     rdi, rbx        ; tp
.text:000000000001F20B                 call    _mktime
.text:000000000001F210                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001F214                 mov     [rsp+68h+timer], rax
.text:000000000001F219                 jz      short loc_1F270
.text:000000000001F21B
.text:000000000001F21B loc_1F21B:                              ; CODE XREF: mktime_z+10D↓j
.text:000000000001F21B                 mov     rsi, rbx
.text:000000000001F21E                 mov     rdi, rbp
.text:000000000001F221                 call    save_abbr
.text:000000000001F226                 test    al, al
.text:000000000001F228                 jnz     short loc_1F233
.text:000000000001F22A                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:000000000001F233
.text:000000000001F233 loc_1F233:                              ; CODE XREF: mktime_z+58↑j
.text:000000000001F233                                         ; mktime_z+B2↓j ...
.text:000000000001F233                 cmp     r12, 1
.text:000000000001F237                 jz      short loc_1F249
.text:000000000001F239                 mov     rdi, r12
.text:000000000001F23C                 call    revert_tz
.text:000000000001F241                 test    al, al
.text:000000000001F243                 jz      loc_1F300
.text:000000000001F249
.text:000000000001F249 loc_1F249:                              ; CODE XREF: mktime_z+67↑j
.text:000000000001F249                 mov     rax, [rsp+68h+timer]
.text:000000000001F24E
.text:000000000001F24E loc_1F24E:                              ; CODE XREF: mktime_z+128↓j
.text:000000000001F24E                                         ; mktime_z+137↓j
.text:000000000001F24E                 mov     rcx, [rsp+68h+var_20]
.text:000000000001F253                 xor     rcx, fs:28h
.text:000000000001F25C                 jnz     loc_1F30C
.text:000000000001F262                 add     rsp, 50h
.text:000000000001F266                 pop     rbx
.text:000000000001F267                 pop     rbp
.text:000000000001F268                 pop     r12
.text:000000000001F26A                 retn
.text:000000000001F26A ; ---------------------------------------------------------------------------
.text:000000000001F26B                 align 10h
.text:000000000001F270
.text:000000000001F270 loc_1F270:                              ; CODE XREF: mktime_z+49↑j
.text:000000000001F270                 lea     rsi, [rsp+68h+tp] ; tp
.text:000000000001F275                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000001F27A                 call    _localtime_r
.text:000000000001F27F                 test    rax, rax
.text:000000000001F282                 jz      short loc_1F233
.text:000000000001F284                 mov     eax, [rbx]
.text:000000000001F286                 mov     edx, [rbx+4]
.text:000000000001F289                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000001F28D                 xor     edx, [rsp+68h+tp.tm_min]
.text:000000000001F291                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:000000000001F295                 or      eax, edx
.text:000000000001F297                 mov     edx, [rbx+8]
.text:000000000001F29A                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000001F29E                 or      eax, edx
.text:000000000001F2A0                 mov     edx, [rbx+0Ch]
.text:000000000001F2A3                 xor     edx, [rsp+68h+tp.tm_mday]
.text:000000000001F2A7                 or      eax, edx
.text:000000000001F2A9                 mov     edx, [rbx+10h]
.text:000000000001F2AC                 xor     edx, [rsp+68h+tp.tm_mon]
.text:000000000001F2B0                 or      eax, edx
.text:000000000001F2B2                 mov     edx, [rbx+14h]
.text:000000000001F2B5                 xor     edx, [rsp+68h+tp.tm_year]
.text:000000000001F2B9                 or      eax, edx
.text:000000000001F2BB                 mov     edx, [rbx+20h]
.text:000000000001F2BE                 test    edx, edx
.text:000000000001F2C0                 setz    dil
.text:000000000001F2C4                 test    ecx, ecx
.text:000000000001F2C6                 setz    sil
.text:000000000001F2CA                 cmp     dil, sil
.text:000000000001F2CD                 jz      short loc_1F2DB
.text:000000000001F2CF                 test    edx, edx
.text:000000000001F2D1                 js      short loc_1F2DB
.text:000000000001F2D3                 test    ecx, ecx
.text:000000000001F2D5                 jns     loc_1F233
.text:000000000001F2DB
.text:000000000001F2DB loc_1F2DB:                              ; CODE XREF: mktime_z+FD↑j
.text:000000000001F2DB                                         ; mktime_z+101↑j
.text:000000000001F2DB                 test    eax, eax
.text:000000000001F2DD                 jz      loc_1F21B
.text:000000000001F2E3                 jmp     loc_1F233
.text:000000000001F2E3 ; ---------------------------------------------------------------------------
.text:000000000001F2E8                 align 10h
.text:000000000001F2F0
.text:000000000001F2F0 loc_1F2F0:                              ; CODE XREF: mktime_z+1E↑j
.text:000000000001F2F0                 mov     rdi, rsi        ; tp
.text:000000000001F2F3                 call    _timegm
.text:000000000001F2F8                 jmp     loc_1F24E
.text:000000000001F2F8 ; ---------------------------------------------------------------------------
.text:000000000001F2FD                 align 20h
.text:000000000001F300
.text:000000000001F300 loc_1F300:                              ; CODE XREF: mktime_z+32↑j
.text:000000000001F300                                         ; mktime_z+73↑j
.text:000000000001F300                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001F307                 jmp     loc_1F24E
.text:000000000001F30C ; ---------------------------------------------------------------------------
.text:000000000001F30C
.text:000000000001F30C loc_1F30C:                              ; CODE XREF: mktime_z+8C↑j
.text:000000000001F30C                 call    ___stack_chk_fail
.text:000000000001F30C ; } // starts at 1F1D0
.text:000000000001F30C mktime_z        endp
.text:000000000001F30C
.text:000000000001F30C ; ---------------------------------------------------------------------------
.text:000000000001F311                 align 20h
.text:000000000001F320
.text:000000000001F320 ; =============== S U B R O U T I N E =======================================
.text:000000000001F320
.text:000000000001F320 ; Attributes: info_from_lumina
.text:000000000001F320
.text:000000000001F320 ; int __fastcall close_stream(FILE *stream)
.text:000000000001F320                 public close_stream
.text:000000000001F320 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000001F320                                         ; close_stdout+33↑p
.text:000000000001F320 ; __unwind {
.text:000000000001F320                 push    r12
.text:000000000001F322                 push    rbp
.text:000000000001F323                 mov     rbp, rdi
.text:000000000001F326                 push    rbx
.text:000000000001F327                 call    ___fpending
.text:000000000001F32C                 mov     ebx, [rbp+0]
.text:000000000001F32F                 mov     rdi, rbp        ; stream
.text:000000000001F332                 mov     r12, rax
.text:000000000001F335                 call    rpl_fclose
.text:000000000001F33A                 and     ebx, 20h
.text:000000000001F33D                 test    ebx, ebx
.text:000000000001F33F                 jnz     short loc_1F358
.text:000000000001F341                 test    eax, eax
.text:000000000001F343                 jz      short loc_1F34F
.text:000000000001F345                 test    r12, r12
.text:000000000001F348                 mov     eax, 0FFFFFFFFh
.text:000000000001F34D                 jz      short loc_1F388
.text:000000000001F34F
.text:000000000001F34F loc_1F34F:                              ; CODE XREF: close_stream+23↑j
.text:000000000001F34F                 pop     rbx
.text:000000000001F350                 pop     rbp
.text:000000000001F351                 pop     r12
.text:000000000001F353                 retn
.text:000000000001F353 ; ---------------------------------------------------------------------------
.text:000000000001F354                 align 8
.text:000000000001F358
.text:000000000001F358 loc_1F358:                              ; CODE XREF: close_stream+1F↑j
.text:000000000001F358                 test    eax, eax
.text:000000000001F35A                 jnz     short loc_1F378
.text:000000000001F35C                 call    ___errno_location
.text:000000000001F361                 mov     dword ptr [rax], 0
.text:000000000001F367                 mov     eax, 0FFFFFFFFh
.text:000000000001F36C                 pop     rbx
.text:000000000001F36D                 pop     rbp
.text:000000000001F36E                 pop     r12
.text:000000000001F370                 retn
.text:000000000001F370 ; ---------------------------------------------------------------------------
.text:000000000001F371                 align 8
.text:000000000001F378
.text:000000000001F378 loc_1F378:                              ; CODE XREF: close_stream+3A↑j
.text:000000000001F378                 pop     rbx
.text:000000000001F379                 mov     eax, 0FFFFFFFFh
.text:000000000001F37E                 pop     rbp
.text:000000000001F37F                 pop     r12
.text:000000000001F381                 retn
.text:000000000001F381 ; ---------------------------------------------------------------------------
.text:000000000001F382                 align 8
.text:000000000001F388
.text:000000000001F388 loc_1F388:                              ; CODE XREF: close_stream+2D↑j
.text:000000000001F388                 call    ___errno_location
.text:000000000001F38D                 cmp     dword ptr [rax], 9
.text:000000000001F390                 pop     rbx
.text:000000000001F391                 pop     rbp
.text:000000000001F392                 pop     r12
.text:000000000001F394                 setnz   al
.text:000000000001F397                 movzx   eax, al
.text:000000000001F39A                 neg     eax
.text:000000000001F39C                 retn
.text:000000000001F39C ; } // starts at 1F320
.text:000000000001F39C close_stream    endp
.text:000000000001F39C
.text:000000000001F39C ; ---------------------------------------------------------------------------
.text:000000000001F39D                 align 20h
.text:000000000001F3A0
.text:000000000001F3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F3A0
.text:000000000001F3A0
.text:000000000001F3A0                 public cycle_check_init
.text:000000000001F3A0 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:000000000001F3A0 ; __unwind {
.text:000000000001F3A0                 mov     qword ptr [rdi+10h], 0
.text:000000000001F3A8                 mov     dword ptr [rdi+18h], 95F616h
.text:000000000001F3AF                 retn
.text:000000000001F3AF ; } // starts at 1F3A0
.text:000000000001F3AF cycle_check_init endp
.text:000000000001F3AF
.text:000000000001F3B0
.text:000000000001F3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F3B0
.text:000000000001F3B0
.text:000000000001F3B0                 public cycle_check
.text:000000000001F3B0 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:000000000001F3B0 ; __unwind {
.text:000000000001F3B0                 cmp     dword ptr [rdi+18h], 95F616h
.text:000000000001F3B7                 jnz     short loc_1F417
.text:000000000001F3B9                 mov     rdx, [rdi+10h]
.text:000000000001F3BD                 mov     rcx, [rsi+8]
.text:000000000001F3C1                 test    rdx, rdx
.text:000000000001F3C4                 jz      short loc_1F3E0
.text:000000000001F3C6                 cmp     [rdi], rcx
.text:000000000001F3C9                 jz      short loc_1F3F8
.text:000000000001F3CB
.text:000000000001F3CB loc_1F3CB:                              ; CODE XREF: cycle_check+4F↓j
.text:000000000001F3CB                 lea     r8, [rdx+1]
.text:000000000001F3CF                 xor     eax, eax
.text:000000000001F3D1                 test    rdx, r8
.text:000000000001F3D4                 mov     [rdi+10h], r8
.text:000000000001F3D8                 jz      short loc_1F410
.text:000000000001F3DA                 rep retn
.text:000000000001F3DA ; ---------------------------------------------------------------------------
.text:000000000001F3DC                 align 20h
.text:000000000001F3E0
.text:000000000001F3E0 loc_1F3E0:                              ; CODE XREF: cycle_check+14↑j
.text:000000000001F3E0                 mov     qword ptr [rdi+10h], 1
.text:000000000001F3E8
.text:000000000001F3E8 loc_1F3E8:                              ; CODE XREF: cycle_check+65↓j
.text:000000000001F3E8                 mov     rax, [rsi]
.text:000000000001F3EB                 mov     [rdi], rcx
.text:000000000001F3EE                 mov     [rdi+8], rax
.text:000000000001F3F2                 xor     eax, eax
.text:000000000001F3F4                 retn
.text:000000000001F3F4 ; ---------------------------------------------------------------------------
.text:000000000001F3F5                 align 8
.text:000000000001F3F8
.text:000000000001F3F8 loc_1F3F8:                              ; CODE XREF: cycle_check+19↑j
.text:000000000001F3F8                 mov     rax, [rdi+8]
.text:000000000001F3FC                 cmp     [rsi], rax
.text:000000000001F3FF                 jnz     short loc_1F3CB
.text:000000000001F401
.text:000000000001F401 loc_1F401:                              ; CODE XREF: cycle_check+63↓j
.text:000000000001F401                 mov     eax, 1
.text:000000000001F406                 retn
.text:000000000001F406 ; ---------------------------------------------------------------------------
.text:000000000001F407                 align 10h
.text:000000000001F410
.text:000000000001F410 loc_1F410:                              ; CODE XREF: cycle_check+28↑j
.text:000000000001F410                 test    r8, r8
.text:000000000001F413                 jz      short loc_1F401
.text:000000000001F415                 jmp     short loc_1F3E8
.text:000000000001F417 ; ---------------------------------------------------------------------------
.text:000000000001F417
.text:000000000001F417 loc_1F417:                              ; CODE XREF: cycle_check+7↑j
.text:000000000001F417                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:000000000001F41E                 lea     rsi, aCoreutils831Li_4 ; "../coreutils-8.31/lib/cycle-check.c"
.text:000000000001F425                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:000000000001F42C                 sub     rsp, 8
.text:000000000001F430                 mov     edx, 3Ch ; '<'  ; line
.text:000000000001F435                 call    ___assert_fail
.text:000000000001F435 ; } // starts at 1F3B0
.text:000000000001F435 cycle_check     endp
.text:000000000001F435
.text:000000000001F435 ; ---------------------------------------------------------------------------
.text:000000000001F43A                 align 20h
.text:000000000001F440
.text:000000000001F440 ; =============== S U B R O U T I N E =======================================
.text:000000000001F440
.text:000000000001F440
.text:000000000001F440                 public open_safer
.text:000000000001F440 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:000000000001F440
.text:000000000001F440 var_58          = dword ptr -58h
.text:000000000001F440 var_50          = qword ptr -50h
.text:000000000001F440 var_48          = qword ptr -48h
.text:000000000001F440 var_40          = qword ptr -40h
.text:000000000001F440 var_38          = byte ptr -38h
.text:000000000001F440 var_28          = qword ptr -28h
.text:000000000001F440 arg_0           = byte ptr  8
.text:000000000001F440
.text:000000000001F440 ; __unwind {
.text:000000000001F440                 sub     rsp, 58h
.text:000000000001F444                 mov     [rsp+58h+var_28], rdx
.text:000000000001F449                 xor     edx, edx
.text:000000000001F44B                 mov     rax, fs:28h
.text:000000000001F454                 mov     [rsp+58h+var_40], rax
.text:000000000001F459                 xor     eax, eax
.text:000000000001F45B                 test    sil, 40h
.text:000000000001F45F                 jnz     short loc_1F488
.text:000000000001F461
.text:000000000001F461 loc_1F461:                              ; CODE XREF: open_safer+67↓j
.text:000000000001F461                 xor     eax, eax
.text:000000000001F463                 call    _open
.text:000000000001F468                 mov     edi, eax        ; fd
.text:000000000001F46A                 call    fd_safer_flag
.text:000000000001F46F                 mov     rcx, [rsp+58h+var_40]
.text:000000000001F474                 xor     rcx, fs:28h
.text:000000000001F47D                 jnz     short loc_1F4A9
.text:000000000001F47F                 add     rsp, 58h
.text:000000000001F483                 retn
.text:000000000001F483 ; ---------------------------------------------------------------------------
.text:000000000001F484                 align 8
.text:000000000001F488
.text:000000000001F488 loc_1F488:                              ; CODE XREF: open_safer+1F↑j
.text:000000000001F488                 lea     rax, [rsp+58h+arg_0]
.text:000000000001F48D                 mov     [rsp+58h+var_58], 10h
.text:000000000001F494                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000001F498                 mov     [rsp+58h+var_50], rax
.text:000000000001F49D                 lea     rax, [rsp+58h+var_38]
.text:000000000001F4A2                 mov     [rsp+58h+var_48], rax
.text:000000000001F4A7                 jmp     short loc_1F461
.text:000000000001F4A9 ; ---------------------------------------------------------------------------
.text:000000000001F4A9
.text:000000000001F4A9 loc_1F4A9:                              ; CODE XREF: open_safer+3D↑j
.text:000000000001F4A9                 call    ___stack_chk_fail
.text:000000000001F4A9 ; } // starts at 1F440
.text:000000000001F4A9 open_safer      endp
.text:000000000001F4A9
.text:000000000001F4A9 ; ---------------------------------------------------------------------------
.text:000000000001F4AE                 align 10h
.text:000000000001F4B0
.text:000000000001F4B0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F4B0
.text:000000000001F4B0
.text:000000000001F4B0                 public hard_locale
.text:000000000001F4B0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000001F4B0 ; __unwind {
.text:000000000001F4B0                 sub     rsp, 8
.text:000000000001F4B4                 xor     esi, esi        ; locale
.text:000000000001F4B6                 call    _setlocale
.text:000000000001F4BB                 mov     rdx, rax
.text:000000000001F4BE                 mov     eax, 1
.text:000000000001F4C3                 test    rdx, rdx
.text:000000000001F4C6                 jz      short loc_1F4E5
.text:000000000001F4C8                 lea     rdi, aC         ; "C"
.text:000000000001F4CF                 mov     ecx, 2
.text:000000000001F4D4                 mov     rsi, rdx
.text:000000000001F4D7                 repe cmpsb
.text:000000000001F4D9                 setnbe  cl
.text:000000000001F4DC                 sbb     cl, 0
.text:000000000001F4DF                 xor     eax, eax
.text:000000000001F4E1                 test    cl, cl
.text:000000000001F4E3                 jnz     short loc_1F4F0
.text:000000000001F4E5
.text:000000000001F4E5 loc_1F4E5:                              ; CODE XREF: hard_locale+16↑j
.text:000000000001F4E5                 add     rsp, 8
.text:000000000001F4E9                 retn
.text:000000000001F4E9 ; ---------------------------------------------------------------------------
.text:000000000001F4EA                 align 10h
.text:000000000001F4F0
.text:000000000001F4F0 loc_1F4F0:                              ; CODE XREF: hard_locale+33↑j
.text:000000000001F4F0                 lea     rdi, aPosix     ; "POSIX"
.text:000000000001F4F7                 mov     ecx, 6
.text:000000000001F4FC                 mov     rsi, rdx
.text:000000000001F4FF                 repe cmpsb
.text:000000000001F501                 setnbe  al
.text:000000000001F504                 sbb     al, 0
.text:000000000001F506                 test    al, al
.text:000000000001F508                 setnz   al
.text:000000000001F50B                 add     rsp, 8
.text:000000000001F50F                 retn
.text:000000000001F50F ; } // starts at 1F4B0
.text:000000000001F50F hard_locale     endp
.text:000000000001F50F
.text:000000000001F510
.text:000000000001F510 ; =============== S U B R O U T I N E =======================================
.text:000000000001F510
.text:000000000001F510
.text:000000000001F510                 public i_ring_init
.text:000000000001F510 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:000000000001F510 ; __unwind {
.text:000000000001F510                 mov     byte ptr [rdi+1Ch], 1
.text:000000000001F514                 mov     qword ptr [rdi+14h], 0
.text:000000000001F51C                 mov     [rdi], esi
.text:000000000001F51E                 mov     [rdi+4], esi
.text:000000000001F521                 mov     [rdi+8], esi
.text:000000000001F524                 mov     [rdi+0Ch], esi
.text:000000000001F527                 mov     [rdi+10h], esi
.text:000000000001F52A                 retn
.text:000000000001F52A ; } // starts at 1F510
.text:000000000001F52A i_ring_init     endp
.text:000000000001F52A
.text:000000000001F52A ; ---------------------------------------------------------------------------
.text:000000000001F52B                 align 10h
.text:000000000001F530
.text:000000000001F530 ; =============== S U B R O U T I N E =======================================
.text:000000000001F530
.text:000000000001F530
.text:000000000001F530                 public i_ring_empty
.text:000000000001F530 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:000000000001F530                                         ; fts_safe_changedir+1C7↑p
.text:000000000001F530 ; __unwind {
.text:000000000001F530                 movzx   eax, byte ptr [rdi+1Ch]
.text:000000000001F534                 retn
.text:000000000001F534 ; } // starts at 1F530
.text:000000000001F534 i_ring_empty    endp
.text:000000000001F534
.text:000000000001F534 ; ---------------------------------------------------------------------------
.text:000000000001F535                 align 20h
.text:000000000001F540
.text:000000000001F540 ; =============== S U B R O U T I N E =======================================
.text:000000000001F540
.text:000000000001F540
.text:000000000001F540                 public i_ring_push
.text:000000000001F540 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:000000000001F540 ; __unwind {
.text:000000000001F540                 movzx   edx, byte ptr [rdi+1Ch]
.text:000000000001F544                 mov     ecx, [rdi+14h]
.text:000000000001F547                 xor     edx, 1
.text:000000000001F54A                 movzx   edx, dl
.text:000000000001F54D                 add     ecx, edx
.text:000000000001F54F                 and     ecx, 3
.text:000000000001F552                 mov     eax, ecx
.text:000000000001F554                 lea     r8, [rdi+rax*4]
.text:000000000001F558                 mov     eax, [r8]
.text:000000000001F55B                 mov     [r8], esi
.text:000000000001F55E                 mov     esi, [rdi+18h]
.text:000000000001F561                 mov     [rdi+14h], ecx
.text:000000000001F564                 cmp     esi, ecx
.text:000000000001F566                 jnz     short loc_1F570
.text:000000000001F568                 add     edx, esi
.text:000000000001F56A                 and     edx, 3
.text:000000000001F56D                 mov     [rdi+18h], edx
.text:000000000001F570
.text:000000000001F570 loc_1F570:                              ; CODE XREF: i_ring_push+26↑j
.text:000000000001F570                 mov     byte ptr [rdi+1Ch], 0
.text:000000000001F574                 retn
.text:000000000001F574 ; } // starts at 1F540
.text:000000000001F574 i_ring_push     endp
.text:000000000001F574
.text:000000000001F574 ; ---------------------------------------------------------------------------
.text:000000000001F575                 align 20h
.text:000000000001F580
.text:000000000001F580 ; =============== S U B R O U T I N E =======================================
.text:000000000001F580
.text:000000000001F580
.text:000000000001F580                 public i_ring_pop
.text:000000000001F580 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:000000000001F580                                         ; fts_safe_changedir+1DB↑p
.text:000000000001F580 ; __unwind {
.text:000000000001F580                 cmp     byte ptr [rdi+1Ch], 0
.text:000000000001F584                 jnz     short loc_1F5B5
.text:000000000001F586                 mov     eax, [rdi+14h]
.text:000000000001F589                 mov     esi, [rdi+10h]
.text:000000000001F58C                 lea     rcx, [rdi+rax*4]
.text:000000000001F590                 mov     rdx, rax
.text:000000000001F593                 mov     eax, [rcx]
.text:000000000001F595                 mov     [rcx], esi
.text:000000000001F597                 cmp     edx, [rdi+18h]
.text:000000000001F59A                 jz      short loc_1F5B0
.text:000000000001F59C                 add     edx, 3
.text:000000000001F59F                 and     edx, 3
.text:000000000001F5A2                 mov     [rdi+14h], edx
.text:000000000001F5A5                 retn
.text:000000000001F5A5 ; ---------------------------------------------------------------------------
.text:000000000001F5A6                 align 10h
.text:000000000001F5B0
.text:000000000001F5B0 loc_1F5B0:                              ; CODE XREF: i_ring_pop+1A↑j
.text:000000000001F5B0                 mov     byte ptr [rdi+1Ch], 1
.text:000000000001F5B4                 retn
.text:000000000001F5B5 ; ---------------------------------------------------------------------------
.text:000000000001F5B5
.text:000000000001F5B5 loc_1F5B5:                              ; CODE XREF: i_ring_pop+4↑j
.text:000000000001F5B5                 sub     rsp, 8
.text:000000000001F5B9                 call    _abort
.text:000000000001F5B9 ; } // starts at 1F580
.text:000000000001F5B9 i_ring_pop      endp
.text:000000000001F5B9
.text:000000000001F5B9 ; ---------------------------------------------------------------------------
.text:000000000001F5BE                 align 20h
.text:000000000001F5C0
.text:000000000001F5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F5C0
.text:000000000001F5C0
.text:000000000001F5C0                 public locale_charset
.text:000000000001F5C0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000001F5C0 ; __unwind {
.text:000000000001F5C0                 sub     rsp, 8
.text:000000000001F5C4                 mov     edi, 0Eh        ; item
.text:000000000001F5C9                 call    _nl_langinfo
.text:000000000001F5CE                 test    rax, rax
.text:000000000001F5D1                 jz      short loc_1F5F0
.text:000000000001F5D3                 cmp     byte ptr [rax], 0
.text:000000000001F5D6                 lea     rdx, aAscii     ; "ASCII"
.text:000000000001F5DD                 cmovz   rax, rdx
.text:000000000001F5E1                 add     rsp, 8
.text:000000000001F5E5                 retn
.text:000000000001F5E5 ; ---------------------------------------------------------------------------
.text:000000000001F5E6                 align 10h
.text:000000000001F5F0
.text:000000000001F5F0 loc_1F5F0:                              ; CODE XREF: locale_charset+11↑j
.text:000000000001F5F0                 lea     rax, aAscii     ; "ASCII"
.text:000000000001F5F7                 add     rsp, 8
.text:000000000001F5FB                 retn
.text:000000000001F5FB ; } // starts at 1F5C0
.text:000000000001F5FB locale_charset  endp
.text:000000000001F5FB
.text:000000000001F5FB ; ---------------------------------------------------------------------------
.text:000000000001F5FC                 align 20h
.text:000000000001F600
.text:000000000001F600 ; =============== S U B R O U T I N E =======================================
.text:000000000001F600
.text:000000000001F600
.text:000000000001F600                 public openat_safer
.text:000000000001F600 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:000000000001F600                                         ; opendirat+15↓p
.text:000000000001F600
.text:000000000001F600 var_58          = dword ptr -58h
.text:000000000001F600 var_50          = qword ptr -50h
.text:000000000001F600 var_48          = qword ptr -48h
.text:000000000001F600 var_40          = qword ptr -40h
.text:000000000001F600 var_38          = byte ptr -38h
.text:000000000001F600 var_20          = qword ptr -20h
.text:000000000001F600 arg_0           = byte ptr  8
.text:000000000001F600
.text:000000000001F600 ; __unwind {
.text:000000000001F600                 sub     rsp, 58h
.text:000000000001F604                 mov     [rsp+58h+var_20], rcx
.text:000000000001F609                 xor     ecx, ecx
.text:000000000001F60B                 mov     rax, fs:28h
.text:000000000001F614                 mov     [rsp+58h+var_40], rax
.text:000000000001F619                 xor     eax, eax
.text:000000000001F61B                 test    dl, 40h
.text:000000000001F61E                 jnz     short loc_1F648
.text:000000000001F620
.text:000000000001F620 loc_1F620:                              ; CODE XREF: openat_safer+67↓j
.text:000000000001F620                 xor     eax, eax
.text:000000000001F622                 call    _openat
.text:000000000001F627                 mov     edi, eax        ; fd
.text:000000000001F629                 call    fd_safer_flag
.text:000000000001F62E                 mov     rsi, [rsp+58h+var_40]
.text:000000000001F633                 xor     rsi, fs:28h
.text:000000000001F63C                 jnz     short loc_1F669
.text:000000000001F63E                 add     rsp, 58h
.text:000000000001F642                 retn
.text:000000000001F642 ; ---------------------------------------------------------------------------
.text:000000000001F643                 align 8
.text:000000000001F648
.text:000000000001F648 loc_1F648:                              ; CODE XREF: openat_safer+1E↑j
.text:000000000001F648                 lea     rax, [rsp+58h+arg_0]
.text:000000000001F64D                 mov     [rsp+58h+var_58], 18h
.text:000000000001F654                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:000000000001F658                 mov     [rsp+58h+var_50], rax
.text:000000000001F65D                 lea     rax, [rsp+58h+var_38]
.text:000000000001F662                 mov     [rsp+58h+var_48], rax
.text:000000000001F667                 jmp     short loc_1F620
.text:000000000001F669 ; ---------------------------------------------------------------------------
.text:000000000001F669
.text:000000000001F669 loc_1F669:                              ; CODE XREF: openat_safer+3C↑j
.text:000000000001F669                 call    ___stack_chk_fail
.text:000000000001F669 ; } // starts at 1F600
.text:000000000001F669 openat_safer    endp
.text:000000000001F669
.text:000000000001F669 ; ---------------------------------------------------------------------------
.text:000000000001F66E                 align 10h
.text:000000000001F670
.text:000000000001F670 ; =============== S U B R O U T I N E =======================================
.text:000000000001F670
.text:000000000001F670
.text:000000000001F670                 public opendirat
.text:000000000001F670 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:000000000001F670 ; __unwind {
.text:000000000001F670                 push    r13
.text:000000000001F672                 push    r12
.text:000000000001F674                 or      edx, 90900h
.text:000000000001F67A                 push    rbp
.text:000000000001F67B                 push    rbx
.text:000000000001F67C                 xor     eax, eax
.text:000000000001F67E                 mov     r12, rcx
.text:000000000001F681                 sub     rsp, 8
.text:000000000001F685                 call    openat_safer
.text:000000000001F68A                 test    eax, eax
.text:000000000001F68C                 js      short loc_1F6E0
.text:000000000001F68E                 mov     edi, eax        ; fd
.text:000000000001F690                 mov     ebx, eax
.text:000000000001F692                 call    _fdopendir
.text:000000000001F697                 test    rax, rax
.text:000000000001F69A                 mov     rbp, rax
.text:000000000001F69D                 jz      short loc_1F6B8
.text:000000000001F69F                 mov     [r12], ebx
.text:000000000001F6A3                 add     rsp, 8
.text:000000000001F6A7                 mov     rax, rbp
.text:000000000001F6AA                 pop     rbx
.text:000000000001F6AB                 pop     rbp
.text:000000000001F6AC                 pop     r12
.text:000000000001F6AE                 pop     r13
.text:000000000001F6B0                 retn
.text:000000000001F6B0 ; ---------------------------------------------------------------------------
.text:000000000001F6B1                 align 8
.text:000000000001F6B8
.text:000000000001F6B8 loc_1F6B8:                              ; CODE XREF: opendirat+2D↑j
.text:000000000001F6B8                 call    ___errno_location
.text:000000000001F6BD                 mov     r13d, [rax]
.text:000000000001F6C0                 mov     r12, rax
.text:000000000001F6C3                 mov     edi, ebx        ; fd
.text:000000000001F6C5                 call    _close
.text:000000000001F6CA                 mov     rax, rbp
.text:000000000001F6CD                 mov     [r12], r13d
.text:000000000001F6D1                 add     rsp, 8
.text:000000000001F6D5                 pop     rbx
.text:000000000001F6D6                 pop     rbp
.text:000000000001F6D7                 pop     r12
.text:000000000001F6D9                 pop     r13
.text:000000000001F6DB                 retn
.text:000000000001F6DB ; ---------------------------------------------------------------------------
.text:000000000001F6DC                 align 20h
.text:000000000001F6E0
.text:000000000001F6E0 loc_1F6E0:                              ; CODE XREF: opendirat+1C↑j
.text:000000000001F6E0                 add     rsp, 8
.text:000000000001F6E4                 xor     ebp, ebp
.text:000000000001F6E6                 pop     rbx
.text:000000000001F6E7                 mov     rax, rbp
.text:000000000001F6EA                 pop     rbp
.text:000000000001F6EB                 pop     r12
.text:000000000001F6ED                 pop     r13
.text:000000000001F6EF                 retn
.text:000000000001F6EF ; } // starts at 1F670
.text:000000000001F6EF opendirat       endp
.text:000000000001F6EF
.text:000000000001F6F0
.text:000000000001F6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F6F0
.text:000000000001F6F0 ; Attributes: info_from_lumina
.text:000000000001F6F0
.text:000000000001F6F0 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000001F6F0                 public fd_safer_flag
.text:000000000001F6F0 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000001F6F0                                         ; openat_safer+29↑p
.text:000000000001F6F0 ; __unwind {
.text:000000000001F6F0                 push    r13
.text:000000000001F6F2                 push    r12
.text:000000000001F6F4                 push    rbp
.text:000000000001F6F5                 push    rbx
.text:000000000001F6F6                 mov     ebx, edi
.text:000000000001F6F8                 sub     rsp, 8
.text:000000000001F6FC                 cmp     edi, 2
.text:000000000001F6FF                 ja      short loc_1F722
.text:000000000001F701                 call    dup_safer
.text:000000000001F706                 mov     r12d, eax
.text:000000000001F709                 call    ___errno_location
.text:000000000001F70E                 mov     r13d, [rax]
.text:000000000001F711                 mov     rbp, rax
.text:000000000001F714                 mov     edi, ebx        ; fd
.text:000000000001F716                 call    _close
.text:000000000001F71B                 mov     ebx, r12d
.text:000000000001F71E                 mov     [rbp+0], r13d
.text:000000000001F722
.text:000000000001F722 loc_1F722:                              ; CODE XREF: fd_safer_flag+F↑j
.text:000000000001F722                 add     rsp, 8
.text:000000000001F726                 mov     eax, ebx
.text:000000000001F728                 pop     rbx
.text:000000000001F729                 pop     rbp
.text:000000000001F72A                 pop     r12
.text:000000000001F72C                 pop     r13
.text:000000000001F72E                 retn
.text:000000000001F72E ; } // starts at 1F6F0
.text:000000000001F72E fd_safer_flag   endp
.text:000000000001F72E
.text:000000000001F72E ; ---------------------------------------------------------------------------
.text:000000000001F72F                 align 10h
.text:000000000001F730
.text:000000000001F730 ; =============== S U B R O U T I N E =======================================
.text:000000000001F730
.text:000000000001F730
.text:000000000001F730 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000001F730                 public rpl_fcntl
.text:000000000001F730 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:000000000001F730                                         ; dup_safer+9↓j
.text:000000000001F730
.text:000000000001F730 var_68          = dword ptr -68h
.text:000000000001F730 var_60          = qword ptr -60h
.text:000000000001F730 var_58          = qword ptr -58h
.text:000000000001F730 var_50          = qword ptr -50h
.text:000000000001F730 var_48          = byte ptr -48h
.text:000000000001F730 var_38          = qword ptr -38h
.text:000000000001F730 var_30          = qword ptr -30h
.text:000000000001F730 var_28          = qword ptr -28h
.text:000000000001F730 var_20          = qword ptr -20h
.text:000000000001F730 arg_0           = byte ptr  8
.text:000000000001F730
.text:000000000001F730 ; __unwind {
.text:000000000001F730                 push    r12
.text:000000000001F732                 push    rbp
.text:000000000001F733                 mov     ebp, edi
.text:000000000001F735                 push    rbx
.text:000000000001F736                 sub     rsp, 50h
.text:000000000001F73A                 mov     rax, fs:28h
.text:000000000001F743                 mov     [rsp+68h+var_50], rax
.text:000000000001F748                 xor     eax, eax
.text:000000000001F74A                 lea     rax, [rsp+68h+arg_0]
.text:000000000001F74F                 test    esi, esi
.text:000000000001F751                 mov     [rsp+68h+var_38], rdx
.text:000000000001F756                 mov     [rsp+68h+var_30], rcx
.text:000000000001F75B                 mov     [rsp+68h+var_28], r8
.text:000000000001F760                 mov     [rsp+68h+var_60], rax
.text:000000000001F765                 lea     rax, [rsp+68h+var_48]
.text:000000000001F76A                 mov     [rsp+68h+var_20], r9
.text:000000000001F76F                 mov     [rsp+68h+var_68], 10h
.text:000000000001F776                 mov     [rsp+68h+var_58], rax
.text:000000000001F77B                 jz      loc_1F982
.text:000000000001F781                 cmp     esi, 406h
.text:000000000001F787                 jnz     short loc_1F7D0
.text:000000000001F789                 mov     rax, [rsp+68h+var_58]
.text:000000000001F78E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000001F795                 mov     [rsp+68h+var_68], 18h
.text:000000000001F79C                 mov     r12d, [rax+10h]
.text:000000000001F7A0                 mov     edx, r12d
.text:000000000001F7A3                 js      loc_1F8D3
.text:000000000001F7A9                 xor     eax, eax
.text:000000000001F7AB                 mov     esi, 406h       ; cmd
.text:000000000001F7B0                 call    _fcntl
.text:000000000001F7B5                 test    eax, eax
.text:000000000001F7B7                 mov     ebx, eax
.text:000000000001F7B9                 js      loc_1F948
.text:000000000001F7BF
.text:000000000001F7BF loc_1F7BF:                              ; CODE XREF: rpl_fcntl+220↓j
.text:000000000001F7BF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000001F7C9                 jmp     short loc_1F810
.text:000000000001F7C9 ; ---------------------------------------------------------------------------
.text:000000000001F7CB                 align 10h
.text:000000000001F7D0
.text:000000000001F7D0 loc_1F7D0:                              ; CODE XREF: rpl_fcntl+57↑j
.text:000000000001F7D0                 cmp     esi, 0Bh
.text:000000000001F7D3                 jz      short loc_1F800
.text:000000000001F7D5                 jg      short loc_1F830
.text:000000000001F7D7                 cmp     esi, 4
.text:000000000001F7DA                 jz      loc_1F8B0
.text:000000000001F7E0                 jg      loc_1F8A0
.text:000000000001F7E6                 cmp     esi, 2
.text:000000000001F7E9                 jz      loc_1F8B0
.text:000000000001F7EF                 jg      short loc_1F800
.text:000000000001F7F1                 cmp     esi, 1
.text:000000000001F7F4                 jnz     short loc_1F858
.text:000000000001F7F6                 db      2Eh
.text:000000000001F7F6                 nop     word ptr [rax+rax+00000000h]
.text:000000000001F800
.text:000000000001F800 loc_1F800:                              ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000001F800                                         ; rpl_fcntl+BF↑j ...
.text:000000000001F800                 mov     edi, ebp        ; fd
.text:000000000001F802                 xor     eax, eax
.text:000000000001F804                 call    _fcntl
.text:000000000001F809                 mov     ebx, eax
.text:000000000001F80B                 nop     dword ptr [rax+rax+00h]
.text:000000000001F810
.text:000000000001F810 loc_1F810:                              ; CODE XREF: rpl_fcntl+99↑j
.text:000000000001F810                                         ; rpl_fcntl+147↓j ...
.text:000000000001F810                 mov     rcx, [rsp+68h+var_50]
.text:000000000001F815                 xor     rcx, fs:28h
.text:000000000001F81E                 mov     eax, ebx
.text:000000000001F820                 jnz     loc_1F97D
.text:000000000001F826                 add     rsp, 50h
.text:000000000001F82A                 pop     rbx
.text:000000000001F82B                 pop     rbp
.text:000000000001F82C                 pop     r12
.text:000000000001F82E                 retn
.text:000000000001F82E ; ---------------------------------------------------------------------------
.text:000000000001F82F                 align 10h
.text:000000000001F830
.text:000000000001F830 loc_1F830:                              ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000001F830                 cmp     esi, 407h
.text:000000000001F836                 jg      short loc_1F880
.text:000000000001F838                 cmp     esi, 406h
.text:000000000001F83E                 jge     short loc_1F8B0
.text:000000000001F840                 cmp     esi, 401h
.text:000000000001F846                 jz      short loc_1F800
.text:000000000001F848                 cmp     esi, 402h
.text:000000000001F84E                 jz      short loc_1F8B0
.text:000000000001F850                 cmp     esi, 400h
.text:000000000001F856                 jz      short loc_1F8B0
.text:000000000001F858
.text:000000000001F858 loc_1F858:                              ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000001F858                                         ; rpl_fcntl+164↓j ...
.text:000000000001F858                 mov     eax, [rsp+68h+var_68]
.text:000000000001F85B                 cmp     eax, 2Fh ; '/'
.text:000000000001F85E                 ja      loc_1F99A
.text:000000000001F864                 add     rax, [rsp+68h+var_58]
.text:000000000001F869
.text:000000000001F869 loc_1F869:                              ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000001F869                 mov     rdx, [rax]
.text:000000000001F86C                 mov     edi, ebp        ; fd
.text:000000000001F86E                 xor     eax, eax
.text:000000000001F870                 call    _fcntl
.text:000000000001F875                 mov     ebx, eax
.text:000000000001F877                 jmp     short loc_1F810
.text:000000000001F877 ; ---------------------------------------------------------------------------
.text:000000000001F879                 align 20h
.text:000000000001F880
.text:000000000001F880 loc_1F880:                              ; CODE XREF: rpl_fcntl+106↑j
.text:000000000001F880                 cmp     esi, 409h
.text:000000000001F886                 jz      short loc_1F8B0
.text:000000000001F888                 jl      loc_1F800
.text:000000000001F88E                 cmp     esi, 40Ah
.text:000000000001F894                 jnz     short loc_1F858
.text:000000000001F896                 jmp     loc_1F800
.text:000000000001F896 ; ---------------------------------------------------------------------------
.text:000000000001F89B                 align 20h
.text:000000000001F8A0
.text:000000000001F8A0 loc_1F8A0:                              ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000001F8A0                 cmp     esi, 9
.text:000000000001F8A3                 jz      loc_1F800
.text:000000000001F8A9                 jg      short loc_1F8B0
.text:000000000001F8AB                 cmp     esi, 8
.text:000000000001F8AE                 jnz     short loc_1F858
.text:000000000001F8B0
.text:000000000001F8B0 loc_1F8B0:                              ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000001F8B0                                         ; rpl_fcntl+B9↑j ...
.text:000000000001F8B0                 mov     eax, [rsp+68h+var_68]
.text:000000000001F8B3                 cmp     eax, 2Fh ; '/'
.text:000000000001F8B6                 ja      loc_1F9A4
.text:000000000001F8BC                 add     rax, [rsp+68h+var_58]
.text:000000000001F8C1
.text:000000000001F8C1 loc_1F8C1:                              ; CODE XREF: rpl_fcntl+279↓j
.text:000000000001F8C1                 mov     edx, [rax]
.text:000000000001F8C3                 mov     edi, ebp        ; fd
.text:000000000001F8C5                 xor     eax, eax
.text:000000000001F8C7                 call    _fcntl
.text:000000000001F8CC                 mov     ebx, eax
.text:000000000001F8CE                 jmp     loc_1F810
.text:000000000001F8D3 ; ---------------------------------------------------------------------------
.text:000000000001F8D3
.text:000000000001F8D3 loc_1F8D3:                              ; CODE XREF: rpl_fcntl+73↑j
.text:000000000001F8D3                 xor     esi, esi        ; cmd
.text:000000000001F8D5                 xor     eax, eax
.text:000000000001F8D7                 call    _fcntl
.text:000000000001F8DC                 test    eax, eax
.text:000000000001F8DE                 mov     ebx, eax
.text:000000000001F8E0                 js      loc_1F810
.text:000000000001F8E6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000001F8ED                 jnz     loc_1F810
.text:000000000001F8F3
.text:000000000001F8F3 loc_1F8F3:                              ; CODE XREF: rpl_fcntl+248↓j
.text:000000000001F8F3                 xor     eax, eax
.text:000000000001F8F5                 mov     esi, 1          ; cmd
.text:000000000001F8FA                 mov     edi, ebx        ; fd
.text:000000000001F8FC                 call    _fcntl
.text:000000000001F901                 test    eax, eax
.text:000000000001F903                 js      short loc_1F921
.text:000000000001F905                 or      eax, 1
.text:000000000001F908                 mov     esi, 2          ; cmd
.text:000000000001F90D                 mov     edi, ebx        ; fd
.text:000000000001F90F                 mov     edx, eax
.text:000000000001F911                 xor     eax, eax
.text:000000000001F913                 call    _fcntl
.text:000000000001F918                 cmp     eax, 0FFFFFFFFh
.text:000000000001F91B                 jnz     loc_1F810
.text:000000000001F921
.text:000000000001F921 loc_1F921:                              ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000001F921                 call    ___errno_location
.text:000000000001F926                 mov     r12d, [rax]
.text:000000000001F929                 mov     rbp, rax
.text:000000000001F92C                 mov     edi, ebx        ; fd
.text:000000000001F92E                 call    _close
.text:000000000001F933                 mov     ebx, 0FFFFFFFFh
.text:000000000001F938                 mov     [rbp+0], r12d
.text:000000000001F93C                 jmp     loc_1F810
.text:000000000001F93C ; ---------------------------------------------------------------------------
.text:000000000001F941                 align 8
.text:000000000001F948
.text:000000000001F948 loc_1F948:                              ; CODE XREF: rpl_fcntl+89↑j
.text:000000000001F948                 call    ___errno_location
.text:000000000001F94D                 cmp     dword ptr [rax], 16h
.text:000000000001F950                 jnz     loc_1F7BF
.text:000000000001F956                 xor     esi, esi        ; cmd
.text:000000000001F958                 xor     eax, eax
.text:000000000001F95A                 mov     edx, r12d
.text:000000000001F95D                 mov     edi, ebp        ; fd
.text:000000000001F95F                 call    _fcntl
.text:000000000001F964                 test    eax, eax
.text:000000000001F966                 mov     ebx, eax
.text:000000000001F968                 js      loc_1F810
.text:000000000001F96E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000001F978                 jmp     loc_1F8F3
.text:000000000001F97D ; ---------------------------------------------------------------------------
.text:000000000001F97D
.text:000000000001F97D loc_1F97D:                              ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000001F97D                 call    ___stack_chk_fail
.text:000000000001F982 ; ---------------------------------------------------------------------------
.text:000000000001F982
.text:000000000001F982 loc_1F982:                              ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000001F982                 mov     rax, [rsp+68h+var_58]
.text:000000000001F987                 xor     esi, esi        ; cmd
.text:000000000001F989                 mov     edx, [rax+10h]
.text:000000000001F98C                 xor     eax, eax
.text:000000000001F98E                 call    _fcntl
.text:000000000001F993                 mov     ebx, eax
.text:000000000001F995                 jmp     loc_1F810
.text:000000000001F99A ; ---------------------------------------------------------------------------
.text:000000000001F99A
.text:000000000001F99A loc_1F99A:                              ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000001F99A                 mov     rax, [rsp+68h+var_60]
.text:000000000001F99F                 jmp     loc_1F869
.text:000000000001F9A4 ; ---------------------------------------------------------------------------
.text:000000000001F9A4
.text:000000000001F9A4 loc_1F9A4:                              ; CODE XREF: rpl_fcntl+186↑j
.text:000000000001F9A4                 mov     rax, [rsp+68h+var_60]
.text:000000000001F9A9                 jmp     loc_1F8C1
.text:000000000001F9A9 ; } // starts at 1F730
.text:000000000001F9A9 rpl_fcntl       endp
.text:000000000001F9A9
.text:000000000001F9A9 ; ---------------------------------------------------------------------------
.text:000000000001F9AE                 align 10h
.text:000000000001F9B0
.text:000000000001F9B0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F9B0
.text:000000000001F9B0
.text:000000000001F9B0                 public dup_safer
.text:000000000001F9B0 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000001F9B0 ; __unwind {
.text:000000000001F9B0                 mov     edx, 3
.text:000000000001F9B5                 xor     esi, esi
.text:000000000001F9B7                 xor     eax, eax
.text:000000000001F9B9                 jmp     rpl_fcntl
.text:000000000001F9B9 ; } // starts at 1F9B0
.text:000000000001F9B9 dup_safer       endp
.text:000000000001F9B9
.text:000000000001F9B9 ; ---------------------------------------------------------------------------
.text:000000000001F9BE                 align 20h
.text:000000000001F9C0
.text:000000000001F9C0 ; =============== S U B R O U T I N E =======================================
.text:000000000001F9C0
.text:000000000001F9C0 ; Attributes: info_from_lumina
.text:000000000001F9C0
.text:000000000001F9C0 ; void _libc_csu_init(void)
.text:000000000001F9C0                 public __libc_csu_init
.text:000000000001F9C0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000001F9C0 ; __unwind {
.text:000000000001F9C0                 push    r15
.text:000000000001F9C2                 push    r14
.text:000000000001F9C4                 mov     r15, rdx
.text:000000000001F9C7                 push    r13
.text:000000000001F9C9                 push    r12
.text:000000000001F9CB                 lea     r12, __frame_dummy_init_array_entry
.text:000000000001F9D2                 push    rbp
.text:000000000001F9D3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001F9DA                 push    rbx
.text:000000000001F9DB                 mov     r13d, edi
.text:000000000001F9DE                 mov     r14, rsi
.text:000000000001F9E1                 sub     rbp, r12
.text:000000000001F9E4                 sub     rsp, 8
.text:000000000001F9E8                 sar     rbp, 3
.text:000000000001F9EC                 call    _init_proc
.text:000000000001F9F1                 test    rbp, rbp
.text:000000000001F9F4                 jz      short loc_1FA16
.text:000000000001F9F6                 xor     ebx, ebx
.text:000000000001F9F8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000001FA00
.text:000000000001FA00 loc_1FA00:                              ; CODE XREF: __libc_csu_init+54↓j
.text:000000000001FA00                 mov     rdx, r15
.text:000000000001FA03                 mov     rsi, r14
.text:000000000001FA06                 mov     edi, r13d
.text:000000000001FA09                 call    ds:(__frame_dummy_init_array_entry - 227670h)[r12+rbx*8]
.text:000000000001FA0D                 add     rbx, 1
.text:000000000001FA11                 cmp     rbp, rbx
.text:000000000001FA14                 jnz     short loc_1FA00
.text:000000000001FA16
.text:000000000001FA16 loc_1FA16:                              ; CODE XREF: __libc_csu_init+34↑j
.text:000000000001FA16                 add     rsp, 8
.text:000000000001FA1A                 pop     rbx
.text:000000000001FA1B                 pop     rbp
.text:000000000001FA1C                 pop     r12
.text:000000000001FA1E                 pop     r13
.text:000000000001FA20                 pop     r14
.text:000000000001FA22                 pop     r15
.text:000000000001FA24                 retn
.text:000000000001FA24 ; } // starts at 1F9C0
.text:000000000001FA24 __libc_csu_init endp
.text:000000000001FA24
.text:000000000001FA24 ; ---------------------------------------------------------------------------
.text:000000000001FA25                 align 10h
.text:000000000001FA30
.text:000000000001FA30 ; =============== S U B R O U T I N E =======================================
.text:000000000001FA30
.text:000000000001FA30
.text:000000000001FA30 ; void _libc_csu_fini(void)
.text:000000000001FA30                 public __libc_csu_fini
.text:000000000001FA30 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000001FA30 ; __unwind {
.text:000000000001FA30                 rep retn
.text:000000000001FA30 ; } // starts at 1FA30
.text:000000000001FA30 __libc_csu_fini endp
.text:000000000001FA30
.text:000000000001FA30 ; ---------------------------------------------------------------------------
.text:000000000001FA32                 align 20h
.text:000000000001FA40
.text:000000000001FA40 ; =============== S U B R O U T I N E =======================================
.text:000000000001FA40
.text:000000000001FA40
.text:000000000001FA40 atexit          proc near               ; CODE XREF: main+96↑p
.text:000000000001FA40 ; __unwind {
.text:000000000001FA40                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000001FA47                 xor     esi, esi        ; obj
.text:000000000001FA49                 jmp     ___cxa_atexit
.text:000000000001FA49 ; } // starts at 1FA40
.text:000000000001FA49 atexit          endp
.text:000000000001FA49
.text:000000000001FA49 _text           ends
.text:000000000001FA49
LOAD:000000000001FA4E ; ===========================================================================
LOAD:000000000001FA4E
LOAD:000000000001FA4E ; Segment type: Pure code
LOAD:000000000001FA4E ; Segment permissions: Read/Execute
LOAD:000000000001FA4E LOAD            segment byte public 'CODE' use64
LOAD:000000000001FA4E                 assume cs:LOAD
LOAD:000000000001FA4E                 ;org 1FA4Eh
LOAD:000000000001FA4E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001FA4E                 align 10h
LOAD:000000000001FA4E LOAD            ends
LOAD:000000000001FA4E
.fini:000000000001FA50 ; ===========================================================================
.fini:000000000001FA50
.fini:000000000001FA50 ; Segment type: Pure code
.fini:000000000001FA50 ; Segment permissions: Read/Execute
.fini:000000000001FA50 _fini           segment dword public 'CODE' use64
.fini:000000000001FA50                 assume cs:_fini
.fini:000000000001FA50                 ;org 1FA50h
.fini:000000000001FA50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000001FA50
.fini:000000000001FA50 ; =============== S U B R O U T I N E =======================================
.fini:000000000001FA50
.fini:000000000001FA50
.fini:000000000001FA50                 public _term_proc
.fini:000000000001FA50 _term_proc      proc near
.fini:000000000001FA50                 sub     rsp, 8          ; _fini
.fini:000000000001FA54                 add     rsp, 8
.fini:000000000001FA58                 retn
.fini:000000000001FA58 _term_proc      endp
.fini:000000000001FA58
.fini:000000000001FA58 _fini           ends
.fini:000000000001FA58
LOAD:000000000001FA59 ; ===========================================================================
LOAD:000000000001FA59
LOAD:000000000001FA59 ; Segment type: Pure code
LOAD:000000000001FA59 ; Segment permissions: Read/Execute
LOAD:000000000001FA59 LOAD            segment byte public 'CODE' use64
LOAD:000000000001FA59                 assume cs:LOAD
LOAD:000000000001FA59                 ;org 1FA59h
LOAD:000000000001FA59                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001FA59                 align 20h
LOAD:000000000001FA59 LOAD            ends
LOAD:000000000001FA59
.rodata:000000000001FA60 ; ===========================================================================
.rodata:000000000001FA60
.rodata:000000000001FA60 ; Segment type: Pure data
.rodata:000000000001FA60 ; Segment permissions: Read
.rodata:000000000001FA60 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000001FA60                 assume cs:_rodata
.rodata:000000000001FA60                 ;org 1FA60h
.rodata:000000000001FA60                 public _IO_stdin_used
.rodata:000000000001FA60 _IO_stdin_used  db    1
.rodata:000000000001FA61                 db    0
.rodata:000000000001FA62                 db    2
.rodata:000000000001FA63                 db    0
.rodata:000000000001FA64 ; const char aInfinity[]
.rodata:000000000001FA64 aInfinity       db 'Infinity',0         ; DATA XREF: print_only_size:loc_40C0↑o
.rodata:000000000001FA6D ; const char aTimeSIsOutOfRa[]
.rodata:000000000001FA6D aTimeSIsOutOfRa db 'time %s is out of range',0
.rodata:000000000001FA6D                                         ; DATA XREF: print_size+119↑o
.rodata:000000000001FA85 aSC             db 9,'%s%c',0           ; DATA XREF: print_size+AD↑o
.rodata:000000000001FA8B aDu             db 'du',0               ; DATA XREF: main+398↑o
.rodata:000000000001FA8B                                         ; usage+260↑o ...
.rodata:000000000001FA8E aDu_0           db 'DU',0               ; DATA XREF: usage+22A↑o
.rodata:000000000001FA91 asc_1FA91       db '[',0                ; DATA XREF: usage+26C↑o
.rodata:000000000001FA93 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+293↑o
.rodata:000000000001FAA3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000001FAA3                                         ; DATA XREF: usage+2C3↑o
.rodata:000000000001FAA3                                         ; usage+3BC↑o ...
.rodata:000000000001FAB9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2D4↑o
.rodata:000000000001FAC3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2E0↑o
.rodata:000000000001FAD2 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+273↑o
.rodata:000000000001FADC aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+29F↑o
.rodata:000000000001FAE6 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2B7↑o
.rodata:000000000001FAF0 ; const char aSOnlineHelpS[]
.rodata:000000000001FAF0 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+32A↑o
.rodata:000000000001FAF0                 db '%s online help: <%s>',0Ah,0
.rodata:000000000001FB07 unk_1FB07       db  47h ; G             ; DATA XREF: main+391↑o
.rodata:000000000001FB07                                         ; usage+346↑o ...
.rodata:000000000001FB08                 db  4Eh ; N
.rodata:000000000001FB09                 db  55h ; U
.rodata:000000000001FB0A                 db  20h
.rodata:000000000001FB0B ; const char domainname[]
.rodata:000000000001FB0B domainname      db 'coreutils',0        ; DATA XREF: main+77↑o
.rodata:000000000001FB0B                                         ; main+83↑o ...
.rodata:000000000001FB15 ; const char s2[]
.rodata:000000000001FB15 s2              db 'en_',0              ; DATA XREF: usage+36D↑o
.rodata:000000000001FB15                                         ; usage+42E↑o ...
.rodata:000000000001FB19 ; const char aFullDocumentat[]
.rodata:000000000001FB19 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000001FB19                                         ; DATA XREF: usage:loc_45C9↑o
.rodata:000000000001FB19                                         ; usage:loc_4686↑o
.rodata:000000000001FB34 aLongIso        db 'long-iso',0         ; DATA XREF: main:loc_3AF7↑o
.rodata:000000000001FB34                                         ; .data.rel.ro:0000000000227688↓o ...
.rodata:000000000001FB3D ; const char dirname[]
.rodata:000000000001FB3D dirname         db '/usr/local/share/locale',0
.rodata:000000000001FB3D                                         ; DATA XREF: main+70↑o
.rodata:000000000001FB55 ; const char name[]
.rodata:000000000001FB55 name            db 'DU_BLOCK_SIZE',0    ; DATA XREF: main+A0↑o
.rodata:000000000001FB55                                         ; human_options:loc_9BF0↑o
.rodata:000000000001FB63 ; const char shortopts[]
.rodata:000000000001FB63 shortopts       db '0abd:chHklmst:xB:DLPSX:',0
.rodata:000000000001FB63                                         ; DATA XREF: main+FF↑o
.rodata:000000000001FB7B ; const char aInvalidMaximum[]
.rodata:000000000001FB7B aInvalidMaximum db 'invalid maximum depth %s',0
.rodata:000000000001FB7B                                         ; DATA XREF: main+D2E↑o
.rodata:000000000001FB94 aKkmmgtpezy0    db 'kKmMGTPEZY0',0      ; DATA XREF: main+14F↑o
.rodata:000000000001FBA0 aTime           db '--time',0           ; DATA XREF: main+3FB↑o
.rodata:000000000001FBA0                                         ; .data.rel.ro:0000000000227980↓o
.rodata:000000000001FBA7 ; const char aTz[]
.rodata:000000000001FBA7 aTz             db 'TZ',0               ; DATA XREF: main:loc_2E67↑o
.rodata:000000000001FBA7                                         ; setenv_TZ+8↑o ...
.rodata:000000000001FBAA aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+37B↑o
.rodata:000000000001FBBA aTorbjornGranlu db 'Torbjorn Granlund',0
.rodata:000000000001FBBA                                         ; DATA XREF: main+38A↑o
.rodata:000000000001FBCC aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main:loc_2DB0↑o
.rodata:000000000001FBD9 aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+383↑o
.rodata:000000000001FBE5 ; const char aTimeStyle_0[]
.rodata:000000000001FBE5 aTimeStyle_0    db 'TIME_STYLE',0       ; DATA XREF: main:loc_3BE8↑o
.rodata:000000000001FBF0 aTimeStyle      db 'time style',0       ; DATA XREF: main+10CA↑o
.rodata:000000000001FBFB aYMDHMSNZ       db '%Y-%m-%d %H:%M:%S.%N %z',0
.rodata:000000000001FBFB                                         ; DATA XREF: main:loc_3D25↑o
.rodata:000000000001FC13 aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: main:loc_3D38↑o
.rodata:000000000001FC13                                         ; __strftime_internal:loc_64DD↑o
.rodata:000000000001FC22 aYMD            db '%Y-%m-%d',0         ; DATA XREF: main+1101↑o
.rodata:000000000001FC22                                         ; __strftime_internal+DAE↑o ...
.rodata:000000000001FC2B ; const char aExtraOperandS[]
.rodata:000000000001FC2B aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+13A3↑o
.rodata:000000000001FC3C ; const char aCannotOpenSFor[]
.rodata:000000000001FC3C aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:000000000001FC3C                                         ; DATA XREF: main+E99↑o
.rodata:000000000001FC57 ; const char aSReadError[]
.rodata:000000000001FC57 aSReadError     db '%s: read error',0   ; DATA XREF: main+B1E↑o
.rodata:000000000001FC66 ; const char aCoreutils831Sr[]
.rodata:000000000001FC66 aCoreutils831Sr db '../coreutils-8.31/src/du.c',0
.rodata:000000000001FC66                                         ; DATA XREF: main+AF7↑o
.rodata:000000000001FC66                                         ; main+101C↑o ...
.rodata:000000000001FC81 ; const char aFtsReadFailedS[]
.rodata:000000000001FC81 aFtsReadFailedS db 'fts_read failed: %s',0
.rodata:000000000001FC81                                         ; DATA XREF: main+F1E↑o
.rodata:000000000001FC95 ; const char aCannotReadDire[]
.rodata:000000000001FC95 aCannotReadDire db 'cannot read directory %s',0
.rodata:000000000001FC95                                         ; DATA XREF: main+C48↑o
.rodata:000000000001FCAE ; const char aEEnt[]
.rodata:000000000001FCAE aEEnt           db 'e == ent',0         ; DATA XREF: main+1023↑o
.rodata:000000000001FCAE                                         ; main+148B↑o
.rodata:000000000001FCB7 ; const char aCannotAccessS[]
.rodata:000000000001FCB7 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: main+F5A↑o
.rodata:000000000001FCC8 ; const char aLevelPrevLevel[]
.rodata:000000000001FCC8 aLevelPrevLevel db 'level == prev_level - 1',0
.rodata:000000000001FCC8                                         ; DATA XREF: main+14AA↑o
.rodata:000000000001FCE0 ; const char aFtsCloseFailed[]
.rodata:000000000001FCE0 aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: main:loc_392D↑o
.rodata:000000000001FCF1 ; const char aErrorReadingS[]
.rodata:000000000001FCF1 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: main+143F↑o
.rodata:000000000001FD02 ; const char aTotal[]
.rodata:000000000001FD02 aTotal          db 'total',0            ; DATA XREF: main+BA0↑o
.rodata:000000000001FD02                                         ; .data.rel.ro:0000000000227940↓o
.rodata:000000000001FD08 ; const char aInvalidZeroLen[]
.rodata:000000000001FD08 aInvalidZeroLen db 'invalid zero-length file name',0
.rodata:000000000001FD08                                         ; DATA XREF: main+A10↑o
.rodata:000000000001FD08                                         ; main+A69↑o
.rodata:000000000001FD26 ; const char format[]
.rodata:000000000001FD26 format          db '%s:%lu: %s',0       ; DATA XREF: main+A38↑o
.rodata:000000000001FD31 aFullIso        db 'full-iso',0         ; DATA XREF: .data.rel.ro:time_style_args↓o
.rodata:000000000001FD3A aAtime          db 'atime',0            ; DATA XREF: .data.rel.ro:time_args↓o
.rodata:000000000001FD40 aAccess         db 'access',0           ; DATA XREF: .data.rel.ro:00000000002276A8↓o
.rodata:000000000001FD47 aUse            db 'use',0              ; DATA XREF: .data.rel.ro:00000000002276B0↓o
.rodata:000000000001FD4B aCtime          db 'ctime',0            ; DATA XREF: .data.rel.ro:00000000002276B8↓o
.rodata:000000000001FD51 aStatus         db 'status',0           ; DATA XREF: .data.rel.ro:00000000002276C0↓o
.rodata:000000000001FD58 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000001FD5C aApparentSize   db 'apparent-size',0    ; DATA XREF: .data.rel.ro:0000000000227700↓o
.rodata:000000000001FD6A aBlockSize      db 'block-size',0       ; DATA XREF: .data.rel.ro:0000000000227720↓o
.rodata:000000000001FD75 aBytes          db 'bytes',0            ; DATA XREF: .data.rel.ro:0000000000227740↓o
.rodata:000000000001FD7B aCountLinks     db 'count-links',0      ; DATA XREF: .data.rel.ro:0000000000227760↓o
.rodata:000000000001FD87 aDereferenceArg db 'dereference-args',0 ; DATA XREF: .data.rel.ro:00000000002277A0↓o
.rodata:000000000001FD98 aExclude        db 'exclude',0          ; DATA XREF: .data.rel.ro:00000000002277C0↓o
.rodata:000000000001FDA0 aExcludeFrom    db 'exclude-from',0     ; DATA XREF: .data.rel.ro:00000000002277E0↓o
.rodata:000000000001FDAD aFiles0From     db 'files0-from',0      ; DATA XREF: .data.rel.ro:0000000000227800↓o
.rodata:000000000001FDB9 aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:0000000000227820↓o
.rodata:000000000001FDB9                                         ; .data.rel.ro:block_size_args↓o
.rodata:000000000001FDC8 aInodes         db 'inodes',0           ; DATA XREF: .data.rel.ro:0000000000227840↓o
.rodata:000000000001FDCF aSi             db 'si',0               ; DATA XREF: .data.rel.ro:0000000000227860↓o
.rodata:000000000001FDCF                                         ; .data.rel.ro:0000000000227A28↓o
.rodata:000000000001FDD2 aMaxDepth       db 'max-depth',0        ; DATA XREF: .data.rel.ro:0000000000227880↓o
.rodata:000000000001FDDC aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:00000000002278C0↓o
.rodata:000000000001FDDC                                         ; .data.rel.ro:0000000000227780↓o
.rodata:000000000001FDEB aOneFileSystem  db 'one-file-system',0  ; DATA XREF: .data.rel.ro:00000000002278E0↓o
.rodata:000000000001FDFB aSeparateDirs   db 'separate-dirs',0    ; DATA XREF: .data.rel.ro:0000000000227900↓o
.rodata:000000000001FE09 aSummarize      db 'summarize',0        ; DATA XREF: .data.rel.ro:0000000000227920↓o
.rodata:000000000001FE13 aThreshold      db 'threshold',0        ; DATA XREF: .data.rel.ro:0000000000227960↓o
.rodata:000000000001FE1D aTimeStyle_1    db 'time-style',0       ; DATA XREF: .data.rel.ro:00000000002279A0↓o
.rodata:000000000001FE28 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:00000000002279C0↓o
.rodata:000000000001FE2D aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:00000000002279E0↓o
.rodata:000000000001FE35                 align 8
.rodata:000000000001FE38 ; const char aTrySHelpForMor[]
.rodata:000000000001FE38 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000001FE38                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001FE5F                 align 20h
.rodata:000000000001FE60 ; const char aUsageSOptionFi[]
.rodata:000000000001FE60 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.rodata:000000000001FE60                                         ; DATA XREF: usage:loc_429D↑o
.rodata:000000000001FE60                 db '  or:  %s [OPTION]... --files0-from=F',0Ah,0
.rodata:000000000001FEA7                 align 8
.rodata:000000000001FEA8 ; const char aSummarizeDiskU[]
.rodata:000000000001FEA8 aSummarizeDiskU db 'Summarize disk usage of the set of FILEs, recursively for directo'
.rodata:000000000001FEA8                                         ; DATA XREF: usage+87↑o
.rodata:000000000001FEA8                 db 'ries.',0Ah,0
.rodata:000000000001FEF0 ; const char aMandatoryArgum[]
.rodata:000000000001FEF0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:000000000001FEF0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000001FEF0                 db 'ns too.',0Ah,0
.rodata:000000000001FF3B                 align 20h
.rodata:000000000001FF40 ; const char a0NullEndEachOu[]
.rodata:000000000001FF40 a0NullEndEachOu db '  -0, --null            end each output line with NUL, not newlin'
.rodata:000000000001FF40                                         ; DATA XREF: usage+D1↑o
.rodata:000000000001FF40                 db 'e',0Ah
.rodata:000000000001FF40                 db '  -a, --all             write counts for all files, not just dire'
.rodata:000000000001FF40                 db 'ctories',0Ah
.rodata:000000000001FF40                 db '      --apparent-size   print apparent sizes, rather than disk us'
.rodata:000000000001FF40                 db 'age; although',0Ah
.rodata:000000000001FF40                 db '                          the apparent size is usually smaller, i'
.rodata:000000000001FF40                 db 't may be',0Ah
.rodata:000000000001FF40                 db '                          larger due to holes in (',27h,'sparse',27h
.rodata:000000000001FF40                 db ') files, internal',0Ah
.rodata:000000000001FF40                 db '                          fragmentation, indirect blocks, and the'
.rodata:000000000001FF40                 db ' like',0Ah,0
.rodata:00000000000200F9                 align 20h
.rodata:0000000000020100 ; const char aBBlockSizeSize[]
.rodata:0000000000020100 aBBlockSizeSize db '  -B, --block-size=SIZE  scale sizes by SIZE before printing them'
.rodata:0000000000020100                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000020100                 db '; e.g.,',0Ah
.rodata:0000000000020100                 db '                           ',27h,'-BM',27h,' prints sizes in unit'
.rodata:0000000000020100                 db 's of 1,048,576 bytes;',0Ah
.rodata:0000000000020100                 db '                           see SIZE format below',0Ah
.rodata:0000000000020100                 db '  -b, --bytes           equivalent to ',27h,'--apparent-size --bl'
.rodata:0000000000020100                 db 'ock-size=1',27h,0Ah
.rodata:0000000000020100                 db '  -c, --total           produce a grand total',0Ah
.rodata:0000000000020100                 db '  -D, --dereference-args  dereference only symlinks that are list'
.rodata:0000000000020100                 db 'ed on the',0Ah
.rodata:0000000000020100                 db '                          command line',0Ah
.rodata:0000000000020100                 db '  -d, --max-depth=N     print the total for a directory (or file,'
.rodata:0000000000020100                 db ' with --all)',0Ah
.rodata:0000000000020100                 db '                          only if it is N or fewer levels below t'
.rodata:0000000000020100                 db 'he command',0Ah
.rodata:0000000000020100                 db '                          line argument;  --max-depth=0 is the sa'
.rodata:0000000000020100                 db 'me as',0Ah
.rodata:0000000000020100                 db '                          --summarize',0Ah,0
.rodata:00000000000203B4                 align 8
.rodata:00000000000203B8 ; const char aFiles0FromFSum[]
.rodata:00000000000203B8 aFiles0FromFSum db '      --files0-from=F   summarize disk usage of the',0Ah
.rodata:00000000000203B8                                         ; DATA XREF: usage+11B↑o
.rodata:00000000000203B8                 db '                          NUL-terminated file names specified in '
.rodata:00000000000203B8                 db 'file F;',0Ah
.rodata:00000000000203B8                 db '                          if F is -, then read names from standar'
.rodata:00000000000203B8                 db 'd input',0Ah
.rodata:00000000000203B8                 db '  -H                    equivalent to --dereference-args (-D)',0Ah
.rodata:00000000000203B8                 db '  -h, --human-readable  print sizes in human readable format (e.g'
.rodata:00000000000203B8                 db '., 1K 234M 2G)',0Ah
.rodata:00000000000203B8                 db '      --inodes          list inode usage information instead of b'
.rodata:00000000000203B8                 db 'lock usage',0Ah,0
.rodata:0000000000020559                 align 20h
.rodata:0000000000020560 ; const char aKLikeBlockSize[]
.rodata:0000000000020560 aKLikeBlockSize db '  -k                    like --block-size=1K',0Ah
.rodata:0000000000020560                                         ; DATA XREF: usage+140↑o
.rodata:0000000000020560                 db '  -L, --dereference     dereference all symbolic links',0Ah
.rodata:0000000000020560                 db '  -l, --count-links     count sizes many times if hard linked',0Ah
.rodata:0000000000020560                 db '  -m                    like --block-size=1M',0Ah,0
.rodata:0000000000020630 ; const char aPNoDereference[]
.rodata:0000000000020630 aPNoDereference db '  -P, --no-dereference  don',27h,'t follow any symbolic links (th'
.rodata:0000000000020630                                         ; DATA XREF: usage+165↑o
.rodata:0000000000020630                 db 'is is the default)',0Ah
.rodata:0000000000020630                 db '  -S, --separate-dirs   for directories do not include size of su'
.rodata:0000000000020630                 db 'bdirectories',0Ah
.rodata:0000000000020630                 db '      --si              like -h, but use powers of 1000 not 1024',0Ah
.rodata:0000000000020630                 db '  -s, --summarize       display only a total for each argument',0Ah
.rodata:0000000000020630                 db 0
.rodata:000000000002074D                 align 10h
.rodata:0000000000020750 ; const char aTThresholdSize[]
.rodata:0000000000020750 aTThresholdSize db '  -t, --threshold=SIZE  exclude entries smaller than SIZE if posi'
.rodata:0000000000020750                                         ; DATA XREF: usage+18A↑o
.rodata:0000000000020750                 db 'tive,',0Ah
.rodata:0000000000020750                 db '                          or entries greater than SIZE if negativ'
.rodata:0000000000020750                 db 'e',0Ah
.rodata:0000000000020750                 db '      --time            show time of the last modification of any'
.rodata:0000000000020750                 db ' file in the',0Ah
.rodata:0000000000020750                 db '                          directory, or any of its subdirectories'
.rodata:0000000000020750                 db 0Ah
.rodata:0000000000020750                 db '      --time=WORD       show time as WORD instead of modification'
.rodata:0000000000020750                 db ' time:',0Ah
.rodata:0000000000020750                 db '                          atime, access, use, ctime or status',0Ah
.rodata:0000000000020750                 db '      --time-style=STYLE  show times using STYLE, which can be:',0Ah
.rodata:0000000000020750                 db '                            full-iso, long-iso, iso, or +FORMAT;',0Ah
.rodata:0000000000020750                 db '                            FORMAT is interpreted like in ',27h,'d'
.rodata:0000000000020750                 db 'ate',27h,0Ah,0
.rodata:00000000000209B3                 align 8
.rodata:00000000000209B8 ; const char aXExcludeFromFi[]
.rodata:00000000000209B8 aXExcludeFromFi db '  -X, --exclude-from=FILE  exclude files that match any pattern i'
.rodata:00000000000209B8                                         ; DATA XREF: usage+1AF↑o
.rodata:00000000000209B8                 db 'n FILE',0Ah
.rodata:00000000000209B8                 db '      --exclude=PATTERN    exclude files that match PATTERN',0Ah
.rodata:00000000000209B8                 db '  -x, --one-file-system    skip directories on different file sys'
.rodata:00000000000209B8                 db 'tems',0Ah,0
.rodata:0000000000020A83                 align 8
.rodata:0000000000020A88 ; const char aHelpDisplayThi[]
.rodata:0000000000020A88 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000020A88                                         ; DATA XREF: usage+1D4↑o
.rodata:0000000000020AB5                 align 8
.rodata:0000000000020AB8 ; const char aVersionOutputV[]
.rodata:0000000000020AB8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000020AB8                                         ; DATA XREF: usage+1F9↑o
.rodata:0000000000020AEE                 align 10h
.rodata:0000000000020AF0 ; const char aDisplayValuesA[]
.rodata:0000000000020AF0 aDisplayValuesA db 0Ah                  ; DATA XREF: usage+217↑o
.rodata:0000000000020AF0                 db 'Display values are in units of the first available SIZE from --bl'
.rodata:0000000000020AF0                 db 'ock-size,',0Ah
.rodata:0000000000020AF0                 db 'and the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment varia'
.rodata:0000000000020AF0                 db 'bles.',0Ah
.rodata:0000000000020AF0                 db 'Otherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT'
.rodata:0000000000020AF0                 db ' is set).',0Ah,0
.rodata:0000000000020BCF                 align 10h
.rodata:0000000000020BD0 ; const char aTheSizeArgumen[]
.rodata:0000000000020BD0 aTheSizeArgumen db 0Ah                  ; DATA XREF: usage+247↑o
.rodata:0000000000020BD0                 db 'The SIZE argument is an integer and optional unit (example: 10K i'
.rodata:0000000000020BD0                 db 's 10*1024).',0Ah
.rodata:0000000000020BD0                 db 'Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers o'
.rodata:0000000000020BD0                 db 'f 1000).',0Ah
.rodata:0000000000020BD0                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:0000000000020CA4                 align 8
.rodata:0000000000020CA8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000020CA8                                         ; DATA XREF: usage+33F↑o
.rodata:0000000000020CA8                                         ; usage+3A3↑o ...
.rodata:0000000000020CD0 ; const char aReportAnyTrans[]
.rodata:0000000000020CD0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000020CD0                                         ; DATA XREF: usage+497↑o
.rodata:0000000000020CD0                 db 'am/>',0Ah,0
.rodata:0000000000020D17                 align 8
.rodata:0000000000020D18 ; const char aOrAvailableLoc[]
.rodata:0000000000020D18 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000020D18                                         ; DATA XREF: usage:loc_460E↑o
.rodata:0000000000020D4B                 align 10h
.rodata:0000000000020D50 ; const char msgid[]
.rodata:0000000000020D50 msgid           db 'invalid --threshold argument ',27h,'-0',27h,0
.rodata:0000000000020D50                                         ; DATA XREF: main+188↑o
.rodata:0000000000020D72                 align 8
.rodata:0000000000020D78 ; const char aCannotBothSumm[]
.rodata:0000000000020D78 aCannotBothSumm db 'cannot both summarize and show all entries',0
.rodata:0000000000020D78                                         ; DATA XREF: main:loc_3F0B↑o
.rodata:0000000000020DA3                 align 8
.rodata:0000000000020DA8 ; const char aWarningSummari_0[]
.rodata:0000000000020DA8 aWarningSummari_0 db 'warning: summarizing is the same as using --max-depth=0',0
.rodata:0000000000020DA8                                         ; DATA XREF: main:loc_39D8↑o
.rodata:0000000000020DE0 ; const char aWarningSummari[]
.rodata:0000000000020DE0 aWarningSummari db 'warning: summarizing conflicts with --max-depth=%lu',0
.rodata:0000000000020DE0                                         ; DATA XREF: main:loc_3744↑o
.rodata:0000000000020E14                 align 8
.rodata:0000000000020E18 ; const char aWarningOptions[]
.rodata:0000000000020E18 aWarningOptions db 'warning: options --apparent-size and -b are ineffective with --in'
.rodata:0000000000020E18                                         ; DATA XREF: main:loc_3A19↑o
.rodata:0000000000020E18                 db 'odes',0
.rodata:0000000000020E5E                 align 20h
.rodata:0000000000020E60 ; const char aFileOperandsCa[]
.rodata:0000000000020E60 aFileOperandsCa db 'file operands cannot be combined with --files0-from',0
.rodata:0000000000020E60                                         ; DATA XREF: main+13CA↑o
.rodata:0000000000020E94                 align 8
.rodata:0000000000020E98 ; const char aUnexpectedErro[]
.rodata:0000000000020E98 aUnexpectedErro db '!"unexpected error code from argv_iter"',0
.rodata:0000000000020E98                                         ; DATA XREF: main+AFE↑o
.rodata:0000000000020EC0 ; const char aWhenReadingFil[]
.rodata:0000000000020EC0 aWhenReadingFil db 'when reading file names from stdin, no file name of %s allowed',0
.rodata:0000000000020EC0                                         ; DATA XREF: main+9D5↑o
.rodata:0000000000020EFF                 align 20h
.rodata:0000000000020F00 ; const char aWarningCircula[]
.rodata:0000000000020F00 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:0000000000020F00                                         ; DATA XREF: main+12A9↑o
.rodata:0000000000020F00                 db 'This almost certainly means that you have a corrupted file system'
.rodata:0000000000020F00                 db '.',0Ah
.rodata:0000000000020F00                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:0000000000020F00                 db 'The following directory is part of the cycle:',0Ah
.rodata:0000000000020F00                 db '  %s',0Ah,0
.rodata:0000000000020FBA                 align 20h
.rodata:0000000000020FC0 jpt_2B8C        dd offset loc_2DB0 - 20FC0h, offset loc_3C5B - 20FC0h
.rodata:0000000000020FC0                                         ; DATA XREF: main+13↑o
.rodata:0000000000020FC0                                         ; main+135↑r
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h ; jump table for switch statement
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2DA4 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2D64 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2D57 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2D57 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2D4A - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2D3D - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2D31 - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2CC6 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2CBA - 20FC0h, offset loc_2C9C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2C90 - 20FC0h, offset loc_2C5A - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2C40 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2C29 - 20FC0h, offset loc_2C1D - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2C06 - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2BFC - 20FC0h, offset loc_2B98 - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2B8E - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset def_2B8C - 20FC0h, offset loc_2EC4 - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2EA7 - 20FC0h, offset loc_2ED0 - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2E8D - 20FC0h, offset def_2B8C - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2E21 - 20FC0h, offset loc_2E0E - 20FC0h
.rodata:0000000000020FC0                 dd offset loc_2E02 - 20FC0h
.rodata:00000000000213EC                 align 10h
.rodata:00000000000213F0 ; const char _PRETTY_FUNCTION___7293[]
.rodata:00000000000213F0 __PRETTY_FUNCTION___7293 db 'process_file',0
.rodata:00000000000213F0                                         ; DATA XREF: main+1015↑o
.rodata:00000000000213F0                                         ; main:loc_3ECD↑o ...
.rodata:00000000000213FD ; const char _PRETTY_FUNCTION___7387[]
.rodata:00000000000213FD __PRETTY_FUNCTION___7387 db 'main',0    ; DATA XREF: main+AF0↑o
.rodata:0000000000021402 ; const char posix_prefix_7365[]
.rodata:0000000000021402 posix_prefix_7365 db 'posix-',0         ; DATA XREF: main+11D2↑o
.rodata:0000000000021409                 align 10h
.rodata:0000000000021410 time_style_types db    0                ; DATA XREF: main+10C3↑o
.rodata:0000000000021410                                         ; main+10DF↑o
.rodata:0000000000021411                 db    0
.rodata:0000000000021412                 db    0
.rodata:0000000000021413                 db    0
.rodata:0000000000021414                 db    1
.rodata:0000000000021415                 db    0
.rodata:0000000000021416                 db    0
.rodata:0000000000021417                 db    0
.rodata:0000000000021418                 db    2
.rodata:0000000000021419                 db    0
.rodata:000000000002141A                 db    0
.rodata:000000000002141B                 db    0
.rodata:000000000002141C                 db    0
.rodata:000000000002141D                 db    0
.rodata:000000000002141E                 db    0
.rodata:000000000002141F                 db    0
.rodata:0000000000021420 time_types      db    2                 ; DATA XREF: main+3F4↑o
.rodata:0000000000021420                                         ; main+40D↑o
.rodata:0000000000021421                 db    0
.rodata:0000000000021422                 db    0
.rodata:0000000000021423                 db    0
.rodata:0000000000021424                 db    2
.rodata:0000000000021425                 db    0
.rodata:0000000000021426                 db    0
.rodata:0000000000021427                 db    0
.rodata:0000000000021428                 db    2
.rodata:0000000000021429                 db    0
.rodata:000000000002142A                 db    0
.rodata:000000000002142B                 db    0
.rodata:000000000002142C                 db    1
.rodata:000000000002142D                 db    0
.rodata:000000000002142E                 db    0
.rodata:000000000002142F                 db    0
.rodata:0000000000021430                 db    1
.rodata:0000000000021431                 db    0
.rodata:0000000000021432                 db    0
.rodata:0000000000021433                 db    0
.rodata:0000000000021434 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000021439 ; const char aInvalidArgumen[]
.rodata:0000000000021439 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000021439                                         ; DATA XREF: argmatch_invalid:loc_4890↑o
.rodata:0000000000021454 ; const char aAmbiguousArgum[]
.rodata:0000000000021454 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000021454                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000021471 ; const char aValidArguments[]
.rodata:0000000000021471 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000021471                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000021486 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000021486                 db '  - %s',0
.rodata:000000000002148E aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000002148E                                         ; main+2C7↑o ...
.rodata:0000000000021493 ; const char aWriteError[]
.rodata:0000000000021493 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_4C33↑o
.rodata:000000000002149F ; const char aSS[]
.rodata:000000000002149F aSS             db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000214A6                 align 8
.rodata:00000000000214A8 ; const char file[]
.rodata:00000000000214A8 file            db '../coreutils-8.31/lib/mbuiter.h',0
.rodata:00000000000214A8                                         ; DATA XREF: mbuiter_multi_next_part_0+7↑o
.rodata:00000000000214A8                                         ; string_hasher_ci+229↑o ...
.rodata:00000000000214C8 ; const char aMbsinitIterSta[]
.rodata:00000000000214C8 aMbsinitIterSta db 'mbsinit (&iter->state)',0
.rodata:00000000000214C8                                         ; DATA XREF: string_hasher_ci+230↑o
.rodata:00000000000214C8                                         ; mbscasecmp+6CE↑o
.rodata:00000000000214DF ; const char aIterCurPtr0[]
.rodata:00000000000214DF aIterCurPtr0    db '*iter->cur.ptr == ',27h,'\0',27h,0
.rodata:00000000000214DF                                         ; DATA XREF: string_hasher_ci+26E↑o
.rodata:00000000000214DF                                         ; mbscasecmp+6F2↑o
.rodata:00000000000214F6 ; const char assertion[]
.rodata:00000000000214F6 assertion       db 'iter->cur.wc == 0',0
.rodata:00000000000214F6                                         ; DATA XREF: mbuiter_multi_next_part_0+E↑o
.rodata:00000000000214F6                                         ; string_hasher_ci+24F↑o
.rodata:0000000000021508                 align 10h
.rodata:0000000000021510 jpt_53AD        dd offset loc_53B0 - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                                         ; DATA XREF: fnmatch_pattern_has_wildcards+9↑o
.rodata:0000000000021510                                         ; fnmatch_pattern_has_wildcards+26↑r
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h ; jump table for switch statement
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset loc_53F8 - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset loc_53B8 - 21510h, offset loc_53B8 - 21510h
.rodata:0000000000021510                 dd offset loc_53BD - 21510h, offset loc_53F8 - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset loc_53B8 - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset loc_53BD - 21510h
.rodata:0000000000021510                 dd offset loc_53F8 - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset loc_53BD - 21510h
.rodata:0000000000021510                 dd offset loc_53D8 - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset def_53AD - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset loc_53B8 - 21510h
.rodata:0000000000021510                 dd offset def_53AD - 21510h, offset loc_53B8 - 21510h
.rodata:0000000000021708                 align 10h
.rodata:0000000000021710 ; const char _PRETTY_FUNCTION___5373[]
.rodata:0000000000021710 __PRETTY_FUNCTION___5373 db 'mbuiter_multi_next',0
.rodata:0000000000021710                                         ; DATA XREF: string_hasher_ci:loc_52E2↑o
.rodata:0000000000021710                                         ; string_hasher_ci:loc_5301↑o ...
.rodata:0000000000021723 aHMS            db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_690A↑o
.rodata:000000000002172C aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+D77↑o
.rodata:0000000000021735                 align 8
.rodata:0000000000021738 jpt_6043        dd offset loc_6C4D - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                                         ; DATA XREF: __strftime_internal+1B1↑o
.rodata:0000000000021738                                         ; __strftime_internal+1BC↑r
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h ; jump table for switch statement
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_6CB1 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_6D31 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_6350 - 21738h
.rodata:0000000000021738                 dd offset loc_6C94 - 21738h, offset loc_6B77 - 21738h
.rodata:0000000000021738                 dd offset loc_6BEE - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_6C0E - 21738h, offset loc_6956 - 21738h
.rodata:0000000000021738                 dd offset loc_6AD4 - 21738h, offset loc_6B5F - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_6AEF - 21738h
.rodata:0000000000021738                 dd offset loc_6B0A - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_64C1 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_64DD - 21738h, offset loc_656A - 21738h
.rodata:0000000000021738                 dd offset loc_690A - 21738h, offset loc_6921 - 21738h
.rodata:0000000000021738                 dd offset loc_6956 - 21738h, offset loc_6E28 - 21738h
.rodata:0000000000021738                 dd offset loc_6220 - 21738h, offset loc_6E75 - 21738h
.rodata:0000000000021738                 dd offset loc_6ED3 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_6350 - 21738h
.rodata:0000000000021738                 dd offset loc_714B - 21738h, offset loc_6220 - 21738h
.rodata:0000000000021738                 dd offset loc_6FF2 - 21738h, offset loc_700D - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_6956 - 21738h
.rodata:0000000000021738                 dd offset loc_714B - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_703E - 21738h, offset loc_706F - 21738h
.rodata:0000000000021738                 dd offset loc_7082 - 21738h, offset loc_7092 - 21738h
.rodata:0000000000021738                 dd offset loc_70C3 - 21738h, offset def_6043 - 21738h
.rodata:0000000000021738                 dd offset loc_7144 - 21738h, offset loc_6736 - 21738h
.rodata:0000000000021738                 dd offset loc_622A - 21738h, offset loc_6584 - 21738h
.rodata:0000000000021738                 dd offset loc_6390 - 21738h, offset loc_6411 - 21738h
.rodata:0000000000021738                 dd offset def_6043 - 21738h, offset loc_64A9 - 21738h
.rodata:0000000000021738                 dd offset loc_6220 - 21738h, offset loc_6FAA - 21738h
.rodata:0000000000021738                 dd offset loc_7170 - 21738h
.rodata:0000000000021924 ; const char aDevNull[]
.rodata:0000000000021924 aDevNull        db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:0000000000021924                                         ; .data.rel.ro:00000000002278A0↓o
.rodata:000000000002192E aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000002192E                                         ; DATA XREF: hash_print_statistics:loc_8205↑o
.rodata:0000000000021946 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:0000000000021946                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000002195E aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000002195E                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:0000000000021976                 align 8
.rodata:0000000000021978 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:0000000000021978                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:0000000000021999                 align 20h
.rodata:00000000000219A0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:00000000000219A0                                         ; hash_initialize:loc_8670↑o
.rodata:00000000000219A1                 db    0
.rodata:00000000000219A2                 db    0
.rodata:00000000000219A3                 db    0
.rodata:00000000000219A4                 db    0
.rodata:00000000000219A5                 db    0
.rodata:00000000000219A6                 db  80h
.rodata:00000000000219A7                 db  3Fh ; ?
.rodata:00000000000219A8                 db 0CDh
.rodata:00000000000219A9                 db 0CCh
.rodata:00000000000219AA                 db  4Ch ; L
.rodata:00000000000219AB                 db  3Fh ; ?
.rodata:00000000000219AC                 db 0F4h
.rodata:00000000000219AD                 db 0FDh
.rodata:00000000000219AE                 db 0B4h
.rodata:00000000000219AF                 db  3Fh ; ?
.rodata:00000000000219B0                 db    0
.rodata:00000000000219B1                 db    0
.rodata:00000000000219B2                 db    0
.rodata:00000000000219B3                 db    0
.rodata:00000000000219B4 dword_219B4     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:00000000000219B4                                         ; check_tuning+4A↑r
.rodata:00000000000219B8 dword_219B8     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:00000000000219BC dword_219BC     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:00000000000219C0 dword_219C0     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:00000000000219C4 dword_219C4     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:00000000000219C8 dword_219C8     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:00000000000219CC dword_219CC     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:00000000000219CC                                         ; hash_rehash+40↑r ...
.rodata:00000000000219D0 dword_219D0     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:00000000000219D0                                         ; hash_initialize+150↑r ...
.rodata:00000000000219D4                 align 8
.rodata:00000000000219D8 qword_219D8     dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:00000000000219D8                                         ; hash_print_statistics+11F↑r
.rodata:00000000000219E0 a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:00000000000219E0                                         ; human_readable+749↑o
.rodata:00000000000219E6 a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:00000000000219E6                                         ; human_readable+6F4↑o
.rodata:00000000000219EC ; const char aBlocksize[]
.rodata:00000000000219EC aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:00000000000219F6 ; const char aPosixlyCorrect[]
.rodata:00000000000219F6 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: human_options+10D↑o
.rodata:00000000000219F6                                         ; human_options+170↑o
.rodata:0000000000021A06 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:0000000000021A06                                         ; DATA XREF: human_options:loc_9B48↑o
.rodata:0000000000021A18 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_9AEC↑o
.rodata:0000000000021A18                                         ; human_options+5B↑o
.rodata:0000000000021A19                 db    0
.rodata:0000000000021A1A                 db    0
.rodata:0000000000021A1B                 db    0
.rodata:0000000000021A1C                 db  90h
.rodata:0000000000021A1D                 db    0
.rodata:0000000000021A1E                 db    0
.rodata:0000000000021A1F                 db    0
.rodata:0000000000021A20 power_letter    db    0                 ; DATA XREF: human_readable:loc_946C↑o
.rodata:0000000000021A21                 db  4Bh ; K
.rodata:0000000000021A22                 db  4Dh ; M
.rodata:0000000000021A23                 db  47h ; G
.rodata:0000000000021A24                 db  54h ; T
.rodata:0000000000021A25                 db  50h ; P
.rodata:0000000000021A26                 db  45h ; E
.rodata:0000000000021A27                 db  5Ah ; Z
.rodata:0000000000021A28                 db  59h ; Y
.rodata:0000000000021A29                 db    0
.rodata:0000000000021A2A                 db    0
.rodata:0000000000021A2B                 db    0
.rodata:0000000000021A2C flt_21A2C       dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:0000000000021A2C                                         ; human_readable+73B↑r ...
.rodata:0000000000021A30 tbyte_21A30     dt 1.8446744073709551615e19
.rodata:0000000000021A30                                         ; DATA XREF: human_readable+189↑r
.rodata:0000000000021A30                                         ; human_readable+2FE↑r ...
.rodata:0000000000021A3A                 align 20h
.rodata:0000000000021A40                 public is_basic_table
.rodata:0000000000021A40 is_basic_table  db    0                 ; DATA XREF: string_hasher_ci+B↑o
.rodata:0000000000021A40                                         ; is_basic+2↑o ...
.rodata:0000000000021A41                 db  1Ah
.rodata:0000000000021A42                 db    0
.rodata:0000000000021A43                 db    0
.rodata:0000000000021A44                 db 0EFh
.rodata:0000000000021A45                 db 0FFh
.rodata:0000000000021A46                 db 0FFh
.rodata:0000000000021A47                 db 0FFh
.rodata:0000000000021A48                 db 0FEh
.rodata:0000000000021A49                 db 0FFh
.rodata:0000000000021A4A                 db 0FFh
.rodata:0000000000021A4B                 db 0FFh
.rodata:0000000000021A4C                 db 0FEh
.rodata:0000000000021A4D                 db 0FFh
.rodata:0000000000021A4E                 db 0FFh
.rodata:0000000000021A4F                 db  7Fh ; 
.rodata:0000000000021A50                 db    0
.rodata:0000000000021A51                 db    0
.rodata:0000000000021A52                 db    0
.rodata:0000000000021A53                 db    0
.rodata:0000000000021A54                 db    0
.rodata:0000000000021A55                 db    0
.rodata:0000000000021A56                 db    0
.rodata:0000000000021A57                 db    0
.rodata:0000000000021A58                 db    0
.rodata:0000000000021A59                 db    0
.rodata:0000000000021A5A                 db    0
.rodata:0000000000021A5B                 db    0
.rodata:0000000000021A5C                 db    0
.rodata:0000000000021A5D                 db    0
.rodata:0000000000021A5E                 db    0
.rodata:0000000000021A5F                 db    0
.rodata:0000000000021A60 ; const char _PRETTY_FUNCTION___5133[]
.rodata:0000000000021A60 __PRETTY_FUNCTION___5133 db 'mbuiter_multi_next',0
.rodata:0000000000021A60                                         ; DATA XREF: mbuiter_multi_next_part_0↑o
.rodata:0000000000021A60                                         ; mbscasecmp:loc_A600↑o ...
.rodata:0000000000021A73                 align 8
.rodata:0000000000021A78 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000021A78                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000021AB0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000021AB8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000021ABC unk_21ABC       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000021ABD                 db  80h
.rodata:0000000000021ABE                 db  98h
.rodata:0000000000021ABF                 db    0
.rodata:0000000000021AC0 unk_21AC0       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000021AC1                 db  80h
.rodata:0000000000021AC2                 db  99h
.rodata:0000000000021AC3                 db    0
.rodata:0000000000021AC4 unk_21AC4       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000021AC5                 db    7
.rodata:0000000000021AC6                 db  65h ; e
.rodata:0000000000021AC7                 db    0
.rodata:0000000000021AC8 unk_21AC8       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000021AC9                 db 0AFh
.rodata:0000000000021ACA                 db    0
.rodata:0000000000021ACB unk_21ACB       db  22h ; "             ; DATA XREF: gettext_quote:loc_A710↑o
.rodata:0000000000021ACB                                         ; quotearg_buffer_restyled:loc_B4CB↑o ...
.rodata:0000000000021ACC                 db    0
.rodata:0000000000021ACD ; const char asc_21ACD[2]
.rodata:0000000000021ACD asc_21ACD       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000021ACD                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000021ACF aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000021AD7 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000227A48↓o
.rodata:0000000000021ADD aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000227A50↓o
.rodata:0000000000021AEA aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000227A58↓o
.rodata:0000000000021AEA                                         ; .data.rel.ro:0000000000227A78↓o
.rodata:0000000000021AF7 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000021AF7                                         ; DATA XREF: .data.rel.ro:0000000000227A60↓o
.rodata:0000000000021B0B aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000227A70↓o
.rodata:0000000000021B13 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000227A88↓o
.rodata:0000000000021B1B                 align 20h
.rodata:0000000000021B20 jpt_A871        dd offset loc_B61A - 21B20h
.rodata:0000000000021B20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000021B20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000021B20                 dd offset loc_A873 - 21B20h ; jump table for switch statement
.rodata:0000000000021B20                 dd offset loc_B848 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B654 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B444 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B4A0 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B4F5 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B53A - 21B20h
.rodata:0000000000021B20                 dd offset loc_B574 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B574 - 21B20h
.rodata:0000000000021B20                 dd offset loc_B574 - 21B20h
.rodata:0000000000021B4C jpt_A9CE        dd offset loc_ABF0 - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000021B4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch ; jump table for switch statement
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset loc_AC30 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AB38 - 21B4Ch, offset loc_AAF8 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_ACC0 - 21B4Ch, offset loc_ACB0 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_ACA0 - 21B4Ch, offset loc_AC90 - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset def_A9CE - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC80 - 21B4Ch, offset loc_AC70 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC40 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AAD3 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC70 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC70 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC70 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AAA3 - 21B4Ch
.rodata:0000000000021B4C                 dd offset def_A9CE - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC70 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AB48 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_AC18 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC18 - 21B4Ch, offset loc_A9D3 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC70 - 21B4Ch, offset loc_A9D3 - 21B4Ch
.rodata:0000000000021B4C                 dd offset loc_AC40 - 21B4Ch
.rodata:0000000000021D48 jpt_AD5A        dd offset loc_ADC0 - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000021D48                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h ; jump table for switch statement
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset loc_ADB0 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AF00 - 21D48h, offset loc_AEE8 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AD98 - 21D48h, offset loc_AED8 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AD80 - 21D48h, offset loc_AEC0 - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset def_AD5A - 21D48h
.rodata:0000000000021D48                 dd offset loc_AEA8 - 21D48h, offset loc_AE90 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE78 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AAD0 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE90 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE90 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE90 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AAA0 - 21D48h
.rodata:0000000000021D48                 dd offset def_AD5A - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE90 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AD60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_AE60 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE60 - 21D48h, offset loc_A9D0 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE90 - 21D48h, offset loc_A9D0 - 21D48h
.rodata:0000000000021D48                 dd offset loc_AE78 - 21D48h
.rodata:0000000000021F44                 align 20h
.rodata:0000000000021F60                 public quoting_style_vals
.rodata:0000000000021F60 quoting_style_vals db    0
.rodata:0000000000021F61                 db    0
.rodata:0000000000021F62                 db    0
.rodata:0000000000021F63                 db    0
.rodata:0000000000021F64                 db    1
.rodata:0000000000021F65                 db    0
.rodata:0000000000021F66                 db    0
.rodata:0000000000021F67                 db    0
.rodata:0000000000021F68                 db    2
.rodata:0000000000021F69                 db    0
.rodata:0000000000021F6A                 db    0
.rodata:0000000000021F6B                 db    0
.rodata:0000000000021F6C                 db    3
.rodata:0000000000021F6D                 db    0
.rodata:0000000000021F6E                 db    0
.rodata:0000000000021F6F                 db    0
.rodata:0000000000021F70                 db    4
.rodata:0000000000021F71                 db    0
.rodata:0000000000021F72                 db    0
.rodata:0000000000021F73                 db    0
.rodata:0000000000021F74                 db    5
.rodata:0000000000021F75                 db    0
.rodata:0000000000021F76                 db    0
.rodata:0000000000021F77                 db    0
.rodata:0000000000021F78                 db    6
.rodata:0000000000021F79                 db    0
.rodata:0000000000021F7A                 db    0
.rodata:0000000000021F7B                 db    0
.rodata:0000000000021F7C                 db    7
.rodata:0000000000021F7D                 db    0
.rodata:0000000000021F7E                 db    0
.rodata:0000000000021F7F                 db    0
.rodata:0000000000021F80                 db    8
.rodata:0000000000021F81                 db    0
.rodata:0000000000021F82                 db    0
.rodata:0000000000021F83                 db    0
.rodata:0000000000021F84                 db    9
.rodata:0000000000021F85                 db    0
.rodata:0000000000021F86                 db    0
.rodata:0000000000021F87                 db    0
.rodata:0000000000021F88 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000021F88                                         ; main+13E4↑o
.rodata:0000000000021F94 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000021F9B ; const char aC_0[]
.rodata:0000000000021F9B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_C3FC↑o
.rodata:0000000000021F9F ; const char aWrittenByS[]
.rodata:0000000000021F9F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000021F9F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000021FAF ; const char aWrittenBySAndS[]
.rodata:0000000000021FAF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000021FAF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000021FC6 ; const char aWrittenBySSAnd[]
.rodata:0000000000021FC6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000021FC6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000021FE2 ; const char aReportBugsToS[]
.rodata:0000000000021FE2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000021FE2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000021FF7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000021FF7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000002200D ; const char aSHomePageS[]
.rodata:000000000002200D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000002200D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000022021                 align 8
.rodata:0000000000022028 ; const char aLicenseGplv3Gn[]
.rodata:0000000000022028 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000022028                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000022028                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000022028                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000022028                 db '.',0Ah
.rodata:0000000000022028                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000022028                 db 0Ah,0
.rodata:00000000000220F4                 align 8
.rodata:00000000000220F8 ; const char aWrittenBySSSAn[]
.rodata:00000000000220F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000220F8                                         ; DATA XREF: version_etc_arn:loc_C650↑o
.rodata:00000000000220F8                 db 'and %s.',0Ah,0
.rodata:0000000000022118 ; const char aWrittenBySSSSA[]
.rodata:0000000000022118 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000022118                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000022118                 db '%s, and %s.',0Ah,0
.rodata:000000000002213C                 align 20h
.rodata:0000000000022140 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000022140 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000022140                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000022140                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000022168 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000022168 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000022168                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000022168                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000022194                 align 8
.rodata:0000000000022198 ; const char aWrittenBySSSSS[]
.rodata:0000000000022198 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000022198                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000022198                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000022198                 db 'and %s.',0Ah,0
.rodata:00000000000221C8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000221C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000221C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000221C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000221C8                 db '%s, and %s.',0Ah,0
.rodata:00000000000221FC                 align 20h
.rodata:0000000000022200 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000022200                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000022200                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000022200                 db '%s, %s, and others.',0Ah,0
.rodata:000000000002223C                 align 20h
.rodata:0000000000022240 ; const char aGeneralHelpUsi[]
.rodata:0000000000022240 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000022240                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000022240                 db 0
.rodata:0000000000022281                 align 4
.rodata:0000000000022284 jpt_C464        dd offset loc_C4E6 - 22284h
.rodata:0000000000022284                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000022284                                         ; version_etc_arn+9D↑r
.rodata:0000000000022284                 dd offset loc_C578 - 22284h ; jump table for switch statement
.rodata:0000000000022284                 dd offset loc_C5B8 - 22284h
.rodata:0000000000022284                 dd offset loc_C600 - 22284h
.rodata:0000000000022284                 dd offset loc_C650 - 22284h
.rodata:0000000000022284                 dd offset loc_C6A8 - 22284h
.rodata:0000000000022284                 dd offset loc_C6D8 - 22284h
.rodata:0000000000022284                 dd offset loc_C740 - 22284h
.rodata:0000000000022284                 dd offset loc_C470 - 22284h
.rodata:0000000000022284                 dd offset loc_C520 - 22284h
.rodata:00000000000222AC                 align 20h
.rodata:00000000000222C0                 public version_etc_copyright
.rodata:00000000000222C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000222C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000222EF ; const char aMemoryExhauste[]
.rodata:00000000000222EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000022300 ; const char aCoreutils831Li_0[]
.rodata:0000000000022300 aCoreutils831Li_0 db '../coreutils-8.31/lib/xfts.c',0
.rodata:0000000000022300                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000002231D ; const char aErrnoEinval[]
.rodata:000000000002231D aErrnoEinval    db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000002232D                 align 10h
.rodata:0000000000022330 ; const char _PRETTY_FUNCTION___3434[]
.rodata:0000000000022330 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:0000000000022330                                         ; DATA XREF: xfts_open:loc_CCA0↑o
.rodata:000000000002233A                 align 20h
.rodata:0000000000022340 ; const char aCoreutils831Li_1[]
.rodata:0000000000022340 aCoreutils831Li_1 db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000022340                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:0000000000022340                                         ; xstrtoul+38C↑o ...
.rodata:0000000000022360 ; const char a0StrtolBaseStr[]
.rodata:0000000000022360 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000022360                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:0000000000022360                                         ; xstrtoul+393↑o ...
.rodata:0000000000022386                 align 8
.rodata:0000000000022388 jpt_CE9E        dd offset loc_D1D0 - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:0000000000022388                                         ; xstrtoimax+1A7↑r
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_D100 - 22388h ; jump table for switch statement
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_D0A0 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_D060 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_CEA0 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset loc_D168 - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset loc_D200 - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_CFF0 - 22388h
.rodata:0000000000022388                 dd offset loc_CF80 - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset loc_CF50 - 22388h, offset loc_CF00 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_D0A0 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_D060 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_CEA0 - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset loc_D200 - 22388h, offset def_CE9E - 22388h
.rodata:0000000000022388                 dd offset def_CE9E - 22388h, offset loc_CF20 - 22388h
.rodata:0000000000022460 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000022460 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:0000000000022460                                         ; DATA XREF: xstrtoimax:loc_D37F↑o
.rodata:000000000002246B                 align 10h
.rodata:0000000000022470 jpt_D586        dd offset loc_D6D6 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:0000000000022470                                         ; xstrtoul+1CF↑r
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D6B3 - 22470h ; jump table for switch statement
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D6EC - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D66F - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D588 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset loc_D690 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset loc_D64F - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D62A - 22470h
.rodata:0000000000022470                 dd offset loc_D604 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset loc_D5ED - 22470h, offset loc_D5B0 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D6EC - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D66F - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D588 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset loc_D64F - 22470h, offset def_D586 - 22470h
.rodata:0000000000022470                 dd offset def_D586 - 22470h, offset loc_D5D7 - 22470h
.rodata:0000000000022548 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:0000000000022548 __PRETTY_FUNCTION___4162_0 db 'xstrtoul',0
.rodata:0000000000022548                                         ; DATA XREF: xstrtoul:loc_D735↑o
.rodata:0000000000022551 aInvalidSSArgum db 'invalid %s%s argument ',27h,'%s',27h,0
.rodata:0000000000022551                                         ; DATA XREF: xstrtol_fatal+87↑o
.rodata:000000000002256C ; const char aSSArgumentSToo[]
.rodata:000000000002256C aSSArgumentSToo db '%s%s argument ',27h,'%s',27h,' too large',0
.rodata:000000000002256C                                         ; DATA XREF: xstrtol_fatal+33↑o
.rodata:0000000000022589 asc_22589       db '--',0               ; DATA XREF: xstrtol_fatal+48↑o
.rodata:0000000000022589                                         ; xstrtol_fatal:loc_D862↑o ...
.rodata:000000000002258C                 align 10h
.rodata:0000000000022590 aInvalidSuffixI db 'invalid suffix in %s%s argument ',27h,'%s',27h,0
.rodata:0000000000022590                                         ; DATA XREF: xstrtol_fatal:loc_D84B↑o
.rodata:00000000000225B5                 align 8
.rodata:00000000000225B8 jpt_DA56        dd offset loc_DBA6 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:00000000000225B8                                         ; xstrtoumax+1CF↑r
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DB83 - 225B8h ; jump table for switch statement
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DBBC - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DB3F - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DA58 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset loc_DB60 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset loc_DB1F - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DAFA - 225B8h
.rodata:00000000000225B8                 dd offset loc_DAD4 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset loc_DABD - 225B8h, offset loc_DA80 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DBBC - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DB3F - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DA58 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset loc_DB1F - 225B8h, offset def_DA56 - 225B8h
.rodata:00000000000225B8                 dd offset def_DA56 - 225B8h, offset loc_DAA7 - 225B8h
.rodata:0000000000022690 ; const char _PRETTY_FUNCTION___4162_1[]
.rodata:0000000000022690 __PRETTY_FUNCTION___4162_1 db 'xstrtoumax',0
.rodata:0000000000022690                                         ; DATA XREF: xstrtoumax:loc_DC05↑o
.rodata:000000000002269B asc_2269B       db '..',0               ; DATA XREF: fts_safe_changedir+43↑o
.rodata:000000000002269B                                         ; fts_safe_changedir+14F↑o ...
.rodata:000000000002269E                 align 20h
.rodata:00000000000226A0 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:00000000000226A0                                         ; fts_build:loc_F376↑o
.rodata:00000000000226A1                 db  10h
.rodata:00000000000226A2                 db    0
.rodata:00000000000226A3                 db    0
.rodata:00000000000226A4                 db    0
.rodata:00000000000226A5                 db  20h
.rodata:00000000000226A6                 db    0
.rodata:00000000000226A7                 db    0
.rodata:00000000000226A8                 db    0
.rodata:00000000000226A9                 db    0
.rodata:00000000000226AA                 db    0
.rodata:00000000000226AB                 db    0
.rodata:00000000000226AC                 db    0
.rodata:00000000000226AD                 db  40h ; @
.rodata:00000000000226AE                 db    0
.rodata:00000000000226AF                 db    0
.rodata:00000000000226B0                 db    0
.rodata:00000000000226B1                 db    0
.rodata:00000000000226B2                 db    0
.rodata:00000000000226B3                 db    0
.rodata:00000000000226B4                 db    0
.rodata:00000000000226B5                 db  60h ; `
.rodata:00000000000226B6                 db    0
.rodata:00000000000226B7                 db    0
.rodata:00000000000226B8                 db    0
.rodata:00000000000226B9                 db    0
.rodata:00000000000226BA                 db    0
.rodata:00000000000226BB                 db    0
.rodata:00000000000226BC                 db    0
.rodata:00000000000226BD                 db  80h
.rodata:00000000000226BE                 db    0
.rodata:00000000000226BF                 db    0
.rodata:00000000000226C0                 db    0
.rodata:00000000000226C1                 db    0
.rodata:00000000000226C2                 db    0
.rodata:00000000000226C3                 db    0
.rodata:00000000000226C4                 db    0
.rodata:00000000000226C5                 db 0A0h
.rodata:00000000000226C6                 db    0
.rodata:00000000000226C7                 db    0
.rodata:00000000000226C8                 db    0
.rodata:00000000000226C9                 db    0
.rodata:00000000000226CA                 db    0
.rodata:00000000000226CB                 db    0
.rodata:00000000000226CC                 db    0
.rodata:00000000000226CD                 db 0C0h
.rodata:00000000000226CE                 db    0
.rodata:00000000000226CF                 db    0
.rodata:00000000000226D0 ; const char filename[]
.rodata:00000000000226D0 filename        db '/proc/self/mountinfo',0
.rodata:00000000000226D0                                         ; DATA XREF: read_file_system_list+F↑o
.rodata:00000000000226E5 ; const char needle[]
.rodata:00000000000226E5 needle          db ' - ',0              ; DATA XREF: read_file_system_list+CB↑o
.rodata:00000000000226E9 ; const char aNSNNSNC[]
.rodata:00000000000226E9 aNSNNSNC        db ' - %n%*s%n %n%*s%n %c',0
.rodata:00000000000226E9                                         ; DATA XREF: read_file_system_list+F7↑o
.rodata:00000000000226FF aAutofs         db 'autofs',0           ; DATA XREF: read_file_system_list+1E4↑o
.rodata:00000000000226FF                                         ; read_file_system_list+4A7↑o
.rodata:0000000000022706 aProc           db 'proc',0             ; DATA XREF: read_file_system_list+23C↑o
.rodata:0000000000022706                                         ; read_file_system_list+539↑o
.rodata:000000000002270B aSubfs          db 'subfs',0            ; DATA XREF: read_file_system_list:loc_10648↑o
.rodata:000000000002270B                                         ; read_file_system_list+557↑o
.rodata:0000000000022711 aDebugfs        db 'debugfs',0          ; DATA XREF: read_file_system_list+326↑o
.rodata:0000000000022711                                         ; read_file_system_list+575↑o
.rodata:0000000000022719 aDevpts         db 'devpts',0           ; DATA XREF: read_file_system_list+344↑o
.rodata:0000000000022719                                         ; read_file_system_list+593↑o
.rodata:0000000000022720 aFusectl        db 'fusectl',0          ; DATA XREF: read_file_system_list+362↑o
.rodata:0000000000022720                                         ; read_file_system_list+5B1↑o
.rodata:0000000000022728 aMqueue         db 'mqueue',0           ; DATA XREF: read_file_system_list+380↑o
.rodata:0000000000022728                                         ; read_file_system_list+5CF↑o
.rodata:000000000002272F aRpcPipefs      db 'rpc_pipefs',0       ; DATA XREF: read_file_system_list+39E↑o
.rodata:000000000002272F                                         ; read_file_system_list+5ED↑o
.rodata:000000000002273A aSysfs          db 'sysfs',0            ; DATA XREF: read_file_system_list+3BC↑o
.rodata:000000000002273A                                         ; read_file_system_list+60B↑o
.rodata:0000000000022740 aDevfs          db 'devfs',0            ; DATA XREF: read_file_system_list+3DA↑o
.rodata:0000000000022740                                         ; read_file_system_list+625↑o
.rodata:0000000000022746 aKernfs         db 'kernfs',0           ; DATA XREF: read_file_system_list+3F8↑o
.rodata:0000000000022746                                         ; read_file_system_list+63F↑o
.rodata:000000000002274D ; const char aIgnore[]
.rodata:000000000002274D aIgnore         db 'ignore',0           ; DATA XREF: read_file_system_list+416↑o
.rodata:000000000002274D                                         ; read_file_system_list+659↑o
.rodata:0000000000022754 ; const char aNone[]
.rodata:0000000000022754 aNone           db 'none',0             ; DATA XREF: read_file_system_list+436↑o
.rodata:0000000000022754                                         ; read_file_system_list+675↑o
.rodata:0000000000022759 aSmbfs          db 'smbfs',0            ; DATA XREF: read_file_system_list+78B↑o
.rodata:0000000000022759                                         ; read_file_system_list+7D7↑o
.rodata:000000000002275F aCifs           db 'cifs',0             ; DATA XREF: read_file_system_list+7A9↑o
.rodata:000000000002275F                                         ; read_file_system_list+7F5↑o
.rodata:0000000000022764 aHosts          db '-hosts',0           ; DATA XREF: read_file_system_list:loc_1079A↑o
.rodata:0000000000022764                                         ; read_file_system_list:loc_10A9E↑o
.rodata:000000000002276B ; const char aEtcMtab[]
.rodata:000000000002276B aEtcMtab        db '/etc/mtab',0        ; DATA XREF: read_file_system_list+487↑o
.rodata:0000000000022775 ; const char opt[]
.rodata:0000000000022775 opt             db 'bind',0             ; DATA XREF: read_file_system_list:loc_10800↑o
.rodata:000000000002277A                 align 20h
.rodata:0000000000022780 ; const char aUUUUNSNNSNC[]
.rodata:0000000000022780 aUUUUNSNNSNC    db '%*u %*u %u:%u %n%*s%n %n%*s%n%c',0
.rodata:0000000000022780                                         ; DATA XREF: read_file_system_list+90↑o
.rodata:00000000000227A0 ; const char aCoreutils831Li_2[]
.rodata:00000000000227A0 aCoreutils831Li_2 db '../coreutils-8.31/lib/regexec.c',0
.rodata:00000000000227A0                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:00000000000227A0                                         ; re_search_internal+1034↑o ...
.rodata:00000000000227C0 ; const char aCoreutils831Li_3[]
.rodata:00000000000227C0 aCoreutils831Li_3 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:00000000000227C0                                         ; DATA XREF: parse_expression+1301↑o
.rodata:00000000000227C0                                         ; re_compile_internal+962↑o ...
.rodata:00000000000227E0 ; const char aIsEpsilonNodeN[]
.rodata:00000000000227E0 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:00000000000227E0                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:0000000000022804 ; const char aNum0[]
.rodata:0000000000022804 aNum0           db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:000000000002280D aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:000000000002280D                                         ; build_charclass_isra_29+152↑o ...
.rodata:0000000000022813 aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:0000000000022813                                         ; build_charclass_isra_29:loc_162EC↑o ...
.rodata:0000000000022819 aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_15FD6↑o
.rodata:0000000000022819                                         ; build_charclass_isra_29:loc_16048↑o
.rodata:000000000002281F aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:000000000002281F                                         ; parse_expression+9CF↑o
.rodata:0000000000022825 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:000000000002282B aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:000000000002282B                                         ; parse_expression+97F↑o
.rodata:0000000000022831 aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_16253↑o
.rodata:0000000000022837 aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_16352↑o
.rodata:000000000002283D ; const char aGraph[]
.rodata:000000000002283D aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_1645E↑o
.rodata:0000000000022843 ; const char aPunct[]
.rodata:0000000000022843 aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_164EA↑o
.rodata:0000000000022849 ; const char asc_22849[1]
.rodata:0000000000022849 asc_22849       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_16574↑o
.rodata:000000000002284A aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:0000000000022850 ; const char aErrRegEspace[]
.rodata:0000000000022850 aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:0000000000022850                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:0000000000022850                                         ; re_search_internal+153F↑o
.rodata:0000000000022862 a8              db '8',0                ; DATA XREF: re_compile_internal+160↑o
.rodata:0000000000022864 ; const char aNodeNextNull[]
.rodata:0000000000022864 aNodeNextNull   db 'node->next == NULL',0
.rodata:0000000000022864                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:0000000000022877 ; const char aLeft1[]
.rodata:0000000000022877 aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:0000000000022881 ; const char aRight1[]
.rodata:0000000000022881 aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:000000000002288C ; const char aRegsAllocatedR[]
.rodata:000000000002288C aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:000000000002288C                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:00000000000228A9 ; const char aRegsNumRegsNre[]
.rodata:00000000000228A9 aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:00000000000228A9                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:00000000000228C1 ; const char aPmatch0RmSoSta[]
.rodata:00000000000228C1 aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:00000000000228C1                                         ; DATA XREF: re_search_stub+430↑o
.rodata:00000000000228DA                 align 20h
.rodata:00000000000228E0 jpt_195B6       dd offset loc_19B84 - 228E0h
.rodata:00000000000228E0                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:00000000000228E0                                         ; re_search_internal+4EF↑r
.rodata:00000000000228E0                 dd offset loc_19B84 - 228E0h ; jump table for switch statement
.rodata:00000000000228E0                 dd offset loc_195EE - 228E0h
.rodata:00000000000228E0                 dd offset loc_19B12 - 228E0h
.rodata:00000000000228E0                 dd offset loc_19698 - 228E0h
.rodata:00000000000228F4 jpt_1B3EC       dd offset loc_1B5D0 - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                                         ; DATA XREF: peek_token+13A↑o
.rodata:00000000000228F4                                         ; peek_token+145↑r
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h ; jump table for switch statement
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B640 - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B620 - 228F4h, offset loc_1B600 - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B5F0 - 228F4h, offset loc_1B5B0 - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B5A0 - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset loc_1B580 - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset loc_1B570 - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B548 - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset def_1B3EC - 228F4h
.rodata:00000000000228F4                 dd offset def_1B3EC - 228F4h, offset loc_1B520 - 228F4h
.rodata:00000000000228F4                 dd offset loc_1B4F8 - 228F4h, offset loc_1B4D0 - 228F4h
.rodata:0000000000022AC4 jpt_1B498       dd offset loc_1B863 - 22AC4h, offset loc_1B84C - 22AC4h
.rodata:0000000000022AC4                                         ; DATA XREF: peek_token+1E7↑o
.rodata:0000000000022AC4                                         ; peek_token+1F1↑r
.rodata:0000000000022AC4                 dd offset loc_1B835 - 22AC4h, offset def_1B498 - 22AC4h ; jump table for switch statement
.rodata:0000000000022AC4                 dd offset loc_1B81A - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B7F1 - 22AC4h, offset loc_1B7F1 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B7F1 - 22AC4h, offset loc_1B7F1 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B7F1 - 22AC4h, offset loc_1B7F1 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B7F1 - 22AC4h, offset loc_1B7F1 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B7F1 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset loc_1B7CF - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset loc_1B7AD - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B792 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset loc_1B770 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B755 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B73A - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset loc_1B718 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset loc_1B6F6 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B6BD - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B6A2 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset def_1B498 - 22AC4h, offset def_1B498 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B684 - 22AC4h, offset loc_1B669 - 22AC4h
.rodata:0000000000022AC4                 dd offset loc_1B6D8 - 22AC4h
.rodata:0000000000022C20 jpt_1BABF       dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                                         ; DATA XREF: parse_expression+4B↑o
.rodata:0000000000022C20                                         ; parse_expression+58↑r
.rodata:0000000000022C20                 dd offset loc_1C4EE - 22C20h ; jump table for switch statement
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C43F - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C4A9 - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BAC1 - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C5D8 - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BBAD - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C120 - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BBAD - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BBAD - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C260 - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BB9E - 22C20h
.rodata:0000000000022C20                 dd offset loc_1BBCB - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset def_1BABF - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C418 - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C418 - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C3C8 - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C3C8 - 22C20h
.rodata:0000000000022C20                 dd offset loc_1C643 - 22C20h
.rodata:0000000000022CB4 jpt_1C3C6       dd offset loc_1C731 - 22CB4h
.rodata:0000000000022CB4                                         ; DATA XREF: parse_expression+88B↑o
.rodata:0000000000022CB4                                         ; parse_expression+95E↑r
.rodata:0000000000022CB4                 dd offset loc_1C707 - 22CB4h ; jump table for switch statement
.rodata:0000000000022CB4                 dd offset loc_1C6BD - 22CB4h
.rodata:0000000000022CB4                 dd offset loc_1C685 - 22CB4h
.rodata:0000000000022CB4                 dd offset loc_1C759 - 22CB4h
.rodata:0000000000022CC8 jpt_1D923       dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:0000000000022CC8                                         ; re_compile_internal+6CC↑r
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h ; jump table for switch statement
.rodata:0000000000022CC8                 dd offset loc_1DBA0 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DBD0 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DB48 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DB48 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DA87 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DA87 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DB48 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset def_1D923 - 22CC8h
.rodata:0000000000022CC8                 dd offset loc_1DA01 - 22CC8h
.rodata:0000000000022D0C jpt_1E023       dd offset def_1E023 - 22D0Ch
.rodata:0000000000022D0C                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:0000000000022D0C                                         ; re_compile_internal+DCC↑r
.rodata:0000000000022D0C                 dd offset loc_1E1E0 - 22D0Ch ; jump table for switch statement
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E208 - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E189 - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1DDFE - 22D0Ch
.rodata:0000000000022D0C                 dd offset def_1E023 - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E18C - 22D0Ch
.rodata:0000000000022D0C                 dd offset loc_1E1E9 - 22D0Ch
.rodata:0000000000022D40 ; const char _PRETTY_FUNCTION___7859[]
.rodata:0000000000022D40 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:0000000000022D40                                         ; DATA XREF: re_search_stub:loc_1E8E1↑o
.rodata:0000000000022D40                                         ; re_search_stub:loc_1E900↑o
.rodata:0000000000022D4D                 align 10h
.rodata:0000000000022D50 ; const char _PRETTY_FUNCTION___7847[]
.rodata:0000000000022D50 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:0000000000022D50                                         ; DATA XREF: re_search_stub:loc_1E8C2↑o
.rodata:0000000000022D5F                 align 20h
.rodata:0000000000022D60 ; const char _PRETTY_FUNCTION___8040[]
.rodata:0000000000022D60 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:0000000000022D60                                         ; DATA XREF: pop_fail_stack_isra_25:loc_15E25↑o
.rodata:0000000000022D6F                 align 10h
.rodata:0000000000022D70 ; const char _PRETTY_FUNCTION___7972[]
.rodata:0000000000022D70 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:0000000000022D70                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:0000000000022D70                                         ; re_search_internal+1531↑o
.rodata:0000000000022D7F                 align 20h
.rodata:0000000000022D80 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000022D80 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:0000000000022D80                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:0000000000022D80                                         ; re_compile_internal:loc_1E2E3↑o ...
.rodata:0000000000022D8F                 align 10h
.rodata:0000000000022D90 ; const char _PRETTY_FUNCTION___7327[]
.rodata:0000000000022D90 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:0000000000022D90                                         ; DATA XREF: parse_expression:def_1C3C6↑o
.rodata:0000000000022DA2                 align 20h
.rodata:0000000000022DC0 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:0000000000022DC0                                         ; re_compile_internal+1B3↑o
.rodata:0000000000022DC1                 db 0FFh
.rodata:0000000000022DC2                 db 0FFh
.rodata:0000000000022DC3                 db 0FFh
.rodata:0000000000022DC4                 db 0FFh
.rodata:0000000000022DC5                 db 0FFh
.rodata:0000000000022DC6                 db 0FFh
.rodata:0000000000022DC7                 db 0FFh
.rodata:0000000000022DC8                 db 0FFh
.rodata:0000000000022DC9                 db 0FFh
.rodata:0000000000022DCA                 db 0FFh
.rodata:0000000000022DCB                 db 0FFh
.rodata:0000000000022DCC                 db 0FFh
.rodata:0000000000022DCD                 db 0FFh
.rodata:0000000000022DCE                 db 0FFh
.rodata:0000000000022DCF                 db 0FFh
.rodata:0000000000022DD0                 db    0
.rodata:0000000000022DD1                 db    0
.rodata:0000000000022DD2                 db    0
.rodata:0000000000022DD3                 db    0
.rodata:0000000000022DD4                 db    0
.rodata:0000000000022DD5                 db    0
.rodata:0000000000022DD6                 db    0
.rodata:0000000000022DD7                 db    0
.rodata:0000000000022DD8                 db    0
.rodata:0000000000022DD9                 db    0
.rodata:0000000000022DDA                 db    0
.rodata:0000000000022DDB                 db    0
.rodata:0000000000022DDC                 db    0
.rodata:0000000000022DDD                 db    0
.rodata:0000000000022DDE                 db    0
.rodata:0000000000022DDF                 db    0
.rodata:0000000000022DE0 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:0000000000022DE0                                         ; rpl_regerror+F↑o
.rodata:0000000000022DE1                 db    0
.rodata:0000000000022DE2                 db    0
.rodata:0000000000022DE3                 db    0
.rodata:0000000000022DE4                 db    0
.rodata:0000000000022DE5                 db    0
.rodata:0000000000022DE6                 db    0
.rodata:0000000000022DE7                 db    0
.rodata:0000000000022DE8                 db    8
.rodata:0000000000022DE9                 db    0
.rodata:0000000000022DEA                 db    0
.rodata:0000000000022DEB                 db    0
.rodata:0000000000022DEC                 db    0
.rodata:0000000000022DED                 db    0
.rodata:0000000000022DEE                 db    0
.rodata:0000000000022DEF                 db    0
.rodata:0000000000022DF0                 db  11h
.rodata:0000000000022DF1                 db    0
.rodata:0000000000022DF2                 db    0
.rodata:0000000000022DF3                 db    0
.rodata:0000000000022DF4                 db    0
.rodata:0000000000022DF5                 db    0
.rodata:0000000000022DF6                 db    0
.rodata:0000000000022DF7                 db    0
.rodata:0000000000022DF8                 db  2Ch ; ,
.rodata:0000000000022DF9                 db    0
.rodata:0000000000022DFA                 db    0
.rodata:0000000000022DFB                 db    0
.rodata:0000000000022DFC                 db    0
.rodata:0000000000022DFD                 db    0
.rodata:0000000000022DFE                 db    0
.rodata:0000000000022DFF                 db    0
.rodata:0000000000022E00                 db  48h ; H
.rodata:0000000000022E01                 db    0
.rodata:0000000000022E02                 db    0
.rodata:0000000000022E03                 db    0
.rodata:0000000000022E04                 db    0
.rodata:0000000000022E05                 db    0
.rodata:0000000000022E06                 db    0
.rodata:0000000000022E07                 db    0
.rodata:0000000000022E08                 db  65h ; e
.rodata:0000000000022E09                 db    0
.rodata:0000000000022E0A                 db    0
.rodata:0000000000022E0B                 db    0
.rodata:0000000000022E0C                 db    0
.rodata:0000000000022E0D                 db    0
.rodata:0000000000022E0E                 db    0
.rodata:0000000000022E0F                 db    0
.rodata:0000000000022E10                 db  78h ; x
.rodata:0000000000022E11                 db    0
.rodata:0000000000022E12                 db    0
.rodata:0000000000022E13                 db    0
.rodata:0000000000022E14                 db    0
.rodata:0000000000022E15                 db    0
.rodata:0000000000022E16                 db    0
.rodata:0000000000022E17                 db    0
.rodata:0000000000022E18                 db  8Fh
.rodata:0000000000022E19                 db    0
.rodata:0000000000022E1A                 db    0
.rodata:0000000000022E1B                 db    0
.rodata:0000000000022E1C                 db    0
.rodata:0000000000022E1D                 db    0
.rodata:0000000000022E1E                 db    0
.rodata:0000000000022E1F                 db    0
.rodata:0000000000022E20                 db 0AEh
.rodata:0000000000022E21                 db    0
.rodata:0000000000022E22                 db    0
.rodata:0000000000022E23                 db    0
.rodata:0000000000022E24                 db    0
.rodata:0000000000022E25                 db    0
.rodata:0000000000022E26                 db    0
.rodata:0000000000022E27                 db    0
.rodata:0000000000022E28                 db 0C0h
.rodata:0000000000022E29                 db    0
.rodata:0000000000022E2A                 db    0
.rodata:0000000000022E2B                 db    0
.rodata:0000000000022E2C                 db    0
.rodata:0000000000022E2D                 db    0
.rodata:0000000000022E2E                 db    0
.rodata:0000000000022E2F                 db    0
.rodata:0000000000022E30                 db 0CDh
.rodata:0000000000022E31                 db    0
.rodata:0000000000022E32                 db    0
.rodata:0000000000022E33                 db    0
.rodata:0000000000022E34                 db    0
.rodata:0000000000022E35                 db    0
.rodata:0000000000022E36                 db    0
.rodata:0000000000022E37                 db    0
.rodata:0000000000022E38                 db 0E5h
.rodata:0000000000022E39                 db    0
.rodata:0000000000022E3A                 db    0
.rodata:0000000000022E3B                 db    0
.rodata:0000000000022E3C                 db    0
.rodata:0000000000022E3D                 db    0
.rodata:0000000000022E3E                 db    0
.rodata:0000000000022E3F                 db    0
.rodata:0000000000022E40                 db 0F7h
.rodata:0000000000022E41                 db    0
.rodata:0000000000022E42                 db    0
.rodata:0000000000022E43                 db    0
.rodata:0000000000022E44                 db    0
.rodata:0000000000022E45                 db    0
.rodata:0000000000022E46                 db    0
.rodata:0000000000022E47                 db    0
.rodata:0000000000022E48                 db    8
.rodata:0000000000022E49                 db    1
.rodata:0000000000022E4A                 db    0
.rodata:0000000000022E4B                 db    0
.rodata:0000000000022E4C                 db    0
.rodata:0000000000022E4D                 db    0
.rodata:0000000000022E4E                 db    0
.rodata:0000000000022E4F                 db    0
.rodata:0000000000022E50                 db  2Dh ; -
.rodata:0000000000022E51                 db    1
.rodata:0000000000022E52                 db    0
.rodata:0000000000022E53                 db    0
.rodata:0000000000022E54                 db    0
.rodata:0000000000022E55                 db    0
.rodata:0000000000022E56                 db    0
.rodata:0000000000022E57                 db    0
.rodata:0000000000022E58                 db  51h ; Q
.rodata:0000000000022E59                 db    1
.rodata:0000000000022E5A                 db    0
.rodata:0000000000022E5B                 db    0
.rodata:0000000000022E5C                 db    0
.rodata:0000000000022E5D                 db    0
.rodata:0000000000022E5E                 db    0
.rodata:0000000000022E5F                 db    0
.rodata:0000000000022E60                 db  6Ch ; l
.rodata:0000000000022E61                 db    1
.rodata:0000000000022E62                 db    0
.rodata:0000000000022E63                 db    0
.rodata:0000000000022E64                 db    0
.rodata:0000000000022E65                 db    0
.rodata:0000000000022E66                 db    0
.rodata:0000000000022E67                 db    0
.rodata:0000000000022E68                 db    0
.rodata:0000000000022E69                 db    0
.rodata:0000000000022E6A                 db    0
.rodata:0000000000022E6B                 db    0
.rodata:0000000000022E6C                 db    0
.rodata:0000000000022E6D                 db    0
.rodata:0000000000022E6E                 db    0
.rodata:0000000000022E6F                 db    0
.rodata:0000000000022E70                 db    0
.rodata:0000000000022E71                 db    0
.rodata:0000000000022E72                 db    0
.rodata:0000000000022E73                 db    0
.rodata:0000000000022E74                 db    0
.rodata:0000000000022E75                 db    0
.rodata:0000000000022E76                 db    0
.rodata:0000000000022E77                 db    0
.rodata:0000000000022E78                 db    0
.rodata:0000000000022E79                 db    0
.rodata:0000000000022E7A                 db    0
.rodata:0000000000022E7B                 db    0
.rodata:0000000000022E7C                 db    0
.rodata:0000000000022E7D                 db    0
.rodata:0000000000022E7E                 db    0
.rodata:0000000000022E7F                 db    0
.rodata:0000000000022E80 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:0000000000022E80                                         ; rpl_regerror+19↑o
.rodata:0000000000022E88 aNoMatch        db 'No match',0
.rodata:0000000000022E91 aInvalidRegular db 'Invalid regular expression',0
.rodata:0000000000022EAC aInvalidCollati db 'Invalid collation character',0
.rodata:0000000000022EC8 aInvalidCharact db 'Invalid character class name',0
.rodata:0000000000022EE5 aTrailingBacksl db 'Trailing backslash',0
.rodata:0000000000022EF8 aInvalidBackRef db 'Invalid back reference',0
.rodata:0000000000022F0F aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:0000000000022F2E aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:0000000000022F40 aUnmatched      db 'Unmatched \{',0
.rodata:0000000000022F4D aInvalidContent db 'Invalid content of \{\}',0
.rodata:0000000000022F65 aInvalidRangeEn db 'Invalid range end',0
.rodata:0000000000022F77 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:0000000000022F88 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:0000000000022FAD aPrematureEndOf db 'Premature end of regular expression',0
.rodata:0000000000022FD1 aRegularExpress db 'Regular expression too big',0
.rodata:0000000000022FEC aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:0000000000022FFE                 align 20h
.rodata:0000000000023000 xmmword_23000   xmmword 1010101010101010101010101010101h
.rodata:0000000000023000                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_16D34↑r
.rodata:0000000000023000                                         ; re_compile_fastmap_iter_isra_30:loc_16DD4↑r
.rodata:0000000000023010 ; const char aCoreutils831Li_4[]
.rodata:0000000000023010 aCoreutils831Li_4 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:0000000000023010                                         ; DATA XREF: cycle_check+6E↑o
.rodata:0000000000023034                 align 8
.rodata:0000000000023038 ; const char aStateMagic9827[]
.rodata:0000000000023038 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:0000000000023038                                         ; DATA XREF: cycle_check+75↑o
.rodata:0000000000023050 ; const char _PRETTY_FUNCTION___3994[]
.rodata:0000000000023050 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:0000000000023050                                         ; DATA XREF: cycle_check:loc_1F417↑o
.rodata:000000000002305C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000002305E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_1F4F0↑o
.rodata:0000000000023064 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000023064                                         ; locale_charset:loc_1F5F0↑o
.rodata:0000000000023064 _rodata         ends
.rodata:0000000000023064
LOAD:000000000002306A ; ===========================================================================
LOAD:000000000002306A
LOAD:000000000002306A ; Segment type: Pure code
LOAD:000000000002306A ; Segment permissions: Read/Execute
LOAD:000000000002306A LOAD            segment byte public 'CODE' use64
LOAD:000000000002306A                 assume cs:LOAD
LOAD:000000000002306A                 ;org 2306Ah
LOAD:000000000002306A                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000002306A                 align 4
LOAD:000000000002306A LOAD            ends
LOAD:000000000002306A
.eh_frame_hdr:000000000002306C ; ===========================================================================
.eh_frame_hdr:000000000002306C
.eh_frame_hdr:000000000002306C ; Segment type: Pure data
.eh_frame_hdr:000000000002306C ; Segment permissions: Read
.eh_frame_hdr:000000000002306C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000002306C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000002306C                 ;org 2306Ch
.eh_frame_hdr:000000000002306C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000002306D                 db  1Bh
.eh_frame_hdr:000000000002306E                 db    3
.eh_frame_hdr:000000000002306F                 db  3Bh ; ;
.eh_frame_hdr:0000000000023070                 db  88h
.eh_frame_hdr:0000000000023071                 db    9
.eh_frame_hdr:0000000000023072                 db    0
.eh_frame_hdr:0000000000023073                 db    0
.eh_frame_hdr:0000000000023074                 db  30h ; 0
.eh_frame_hdr:0000000000023075                 db    1
.eh_frame_hdr:0000000000023076                 db    0
.eh_frame_hdr:0000000000023077                 db    0
.eh_frame_hdr:0000000000023078                 db  44h ; D
.eh_frame_hdr:0000000000023079                 db 0F3h
.eh_frame_hdr:000000000002307A                 db 0FDh
.eh_frame_hdr:000000000002307B                 db 0FFh
.eh_frame_hdr:000000000002307C                 db 0D4h
.eh_frame_hdr:000000000002307D                 db    9
.eh_frame_hdr:000000000002307E                 db    0
.eh_frame_hdr:000000000002307F                 db    0
.eh_frame_hdr:0000000000023080                 db 0A4h
.eh_frame_hdr:0000000000023081                 db 0F9h
.eh_frame_hdr:0000000000023082                 db 0FDh
.eh_frame_hdr:0000000000023083                 db 0FFh
.eh_frame_hdr:0000000000023084                 db 0FCh
.eh_frame_hdr:0000000000023085                 db    9
.eh_frame_hdr:0000000000023086                 db    0
.eh_frame_hdr:0000000000023087                 db    0
.eh_frame_hdr:0000000000023088                 db 0B4h
.eh_frame_hdr:0000000000023089                 db 0F9h
.eh_frame_hdr:000000000002308A                 db 0FDh
.eh_frame_hdr:000000000002308B                 db 0FFh
.eh_frame_hdr:000000000002308C                 db  3Ch ; <
.eh_frame_hdr:000000000002308D                 db  1Ah
.eh_frame_hdr:000000000002308E                 db    0
.eh_frame_hdr:000000000002308F                 db    0
.eh_frame_hdr:0000000000023090                 db 0E4h
.eh_frame_hdr:0000000000023091                 db 0F9h
.eh_frame_hdr:0000000000023092                 db 0FDh
.eh_frame_hdr:0000000000023093                 db 0FFh
.eh_frame_hdr:0000000000023094                 db 0A0h
.eh_frame_hdr:0000000000023095                 db  0Ah
.eh_frame_hdr:0000000000023096                 db    0
.eh_frame_hdr:0000000000023097                 db    0
.eh_frame_hdr:0000000000023098                 db 0D4h
.eh_frame_hdr:0000000000023099                 db  0Eh
.eh_frame_hdr:000000000002309A                 db 0FEh
.eh_frame_hdr:000000000002309B                 db 0FFh
.eh_frame_hdr:000000000002309C                 db 0A4h
.eh_frame_hdr:000000000002309D                 db    9
.eh_frame_hdr:000000000002309E                 db    0
.eh_frame_hdr:000000000002309F                 db    0
.eh_frame_hdr:00000000000230A0                 db 0E4h
.eh_frame_hdr:00000000000230A1                 db  0Fh
.eh_frame_hdr:00000000000230A2                 db 0FEh
.eh_frame_hdr:00000000000230A3                 db 0FFh
.eh_frame_hdr:00000000000230A4                 db  14h
.eh_frame_hdr:00000000000230A5                 db  0Ah
.eh_frame_hdr:00000000000230A6                 db    0
.eh_frame_hdr:00000000000230A7                 db    0
.eh_frame_hdr:00000000000230A8                 db  74h ; t
.eh_frame_hdr:00000000000230A9                 db  10h
.eh_frame_hdr:00000000000230AA                 db 0FEh
.eh_frame_hdr:00000000000230AB                 db 0FFh
.eh_frame_hdr:00000000000230AC                 db  38h ; 8
.eh_frame_hdr:00000000000230AD                 db  0Ah
.eh_frame_hdr:00000000000230AE                 db    0
.eh_frame_hdr:00000000000230AF                 db    0
.eh_frame_hdr:00000000000230B0                 db 0D4h
.eh_frame_hdr:00000000000230B1                 db  11h
.eh_frame_hdr:00000000000230B2                 db 0FEh
.eh_frame_hdr:00000000000230B3                 db 0FFh
.eh_frame_hdr:00000000000230B4                 db  74h ; t
.eh_frame_hdr:00000000000230B5                 db  0Ah
.eh_frame_hdr:00000000000230B6                 db    0
.eh_frame_hdr:00000000000230B7                 db    0
.eh_frame_hdr:00000000000230B8                 db  94h
.eh_frame_hdr:00000000000230B9                 db  16h
.eh_frame_hdr:00000000000230BA                 db 0FEh
.eh_frame_hdr:00000000000230BB                 db 0FFh
.eh_frame_hdr:00000000000230BC                 db    4
.eh_frame_hdr:00000000000230BD                 db  0Bh
.eh_frame_hdr:00000000000230BE                 db    0
.eh_frame_hdr:00000000000230BF                 db    0
.eh_frame_hdr:00000000000230C0                 db 0A4h
.eh_frame_hdr:00000000000230C1                 db  16h
.eh_frame_hdr:00000000000230C2                 db 0FEh
.eh_frame_hdr:00000000000230C3                 db 0FFh
.eh_frame_hdr:00000000000230C4                 db  18h
.eh_frame_hdr:00000000000230C5                 db  0Bh
.eh_frame_hdr:00000000000230C6                 db    0
.eh_frame_hdr:00000000000230C7                 db    0
.eh_frame_hdr:00000000000230C8                 db 0C4h
.eh_frame_hdr:00000000000230C9                 db  17h
.eh_frame_hdr:00000000000230CA                 db 0FEh
.eh_frame_hdr:00000000000230CB                 db 0FFh
.eh_frame_hdr:00000000000230CC                 db  64h ; d
.eh_frame_hdr:00000000000230CD                 db  0Bh
.eh_frame_hdr:00000000000230CE                 db    0
.eh_frame_hdr:00000000000230CF                 db    0
.eh_frame_hdr:00000000000230D0                 db  44h ; D
.eh_frame_hdr:00000000000230D1                 db  18h
.eh_frame_hdr:00000000000230D2                 db 0FEh
.eh_frame_hdr:00000000000230D3                 db 0FFh
.eh_frame_hdr:00000000000230D4                 db  90h
.eh_frame_hdr:00000000000230D5                 db  0Bh
.eh_frame_hdr:00000000000230D6                 db    0
.eh_frame_hdr:00000000000230D7                 db    0
.eh_frame_hdr:00000000000230D8                 db  64h ; d
.eh_frame_hdr:00000000000230D9                 db  19h
.eh_frame_hdr:00000000000230DA                 db 0FEh
.eh_frame_hdr:00000000000230DB                 db 0FFh
.eh_frame_hdr:00000000000230DC                 db 0F0h
.eh_frame_hdr:00000000000230DD                 db  0Bh
.eh_frame_hdr:00000000000230DE                 db    0
.eh_frame_hdr:00000000000230DF                 db    0
.eh_frame_hdr:00000000000230E0                 db 0D4h
.eh_frame_hdr:00000000000230E1                 db  19h
.eh_frame_hdr:00000000000230E2                 db 0FEh
.eh_frame_hdr:00000000000230E3                 db 0FFh
.eh_frame_hdr:00000000000230E4                 db  3Ch ; <
.eh_frame_hdr:00000000000230E5                 db  0Ch
.eh_frame_hdr:00000000000230E6                 db    0
.eh_frame_hdr:00000000000230E7                 db    0
.eh_frame_hdr:00000000000230E8                 db  24h ; $
.eh_frame_hdr:00000000000230E9                 db  1Ah
.eh_frame_hdr:00000000000230EA                 db 0FEh
.eh_frame_hdr:00000000000230EB                 db 0FFh
.eh_frame_hdr:00000000000230EC                 db  7Ch ; |
.eh_frame_hdr:00000000000230ED                 db  0Ch
.eh_frame_hdr:00000000000230EE                 db    0
.eh_frame_hdr:00000000000230EF                 db    0
.eh_frame_hdr:00000000000230F0                 db  54h ; T
.eh_frame_hdr:00000000000230F1                 db  1Ah
.eh_frame_hdr:00000000000230F2                 db 0FEh
.eh_frame_hdr:00000000000230F3                 db 0FFh
.eh_frame_hdr:00000000000230F4                 db  98h
.eh_frame_hdr:00000000000230F5                 db  0Ch
.eh_frame_hdr:00000000000230F6                 db    0
.eh_frame_hdr:00000000000230F7                 db    0
.eh_frame_hdr:00000000000230F8                 db  94h
.eh_frame_hdr:00000000000230F9                 db  1Ah
.eh_frame_hdr:00000000000230FA                 db 0FEh
.eh_frame_hdr:00000000000230FB                 db 0FFh
.eh_frame_hdr:00000000000230FC                 db 0B4h
.eh_frame_hdr:00000000000230FD                 db  0Ch
.eh_frame_hdr:00000000000230FE                 db    0
.eh_frame_hdr:00000000000230FF                 db    0
.eh_frame_hdr:0000000000023100                 db  24h ; $
.eh_frame_hdr:0000000000023101                 db  1Bh
.eh_frame_hdr:0000000000023102                 db 0FEh
.eh_frame_hdr:0000000000023103                 db 0FFh
.eh_frame_hdr:0000000000023104                 db 0E8h
.eh_frame_hdr:0000000000023105                 db  0Ch
.eh_frame_hdr:0000000000023106                 db    0
.eh_frame_hdr:0000000000023107                 db    0
.eh_frame_hdr:0000000000023108                 db  44h ; D
.eh_frame_hdr:0000000000023109                 db  1Bh
.eh_frame_hdr:000000000002310A                 db 0FEh
.eh_frame_hdr:000000000002310B                 db 0FFh
.eh_frame_hdr:000000000002310C                 db 0FCh
.eh_frame_hdr:000000000002310D                 db  0Ch
.eh_frame_hdr:000000000002310E                 db    0
.eh_frame_hdr:000000000002310F                 db    0
.eh_frame_hdr:0000000000023110                 db  64h ; d
.eh_frame_hdr:0000000000023111                 db  1Bh
.eh_frame_hdr:0000000000023112                 db 0FEh
.eh_frame_hdr:0000000000023113                 db 0FFh
.eh_frame_hdr:0000000000023114                 db  1Ch
.eh_frame_hdr:0000000000023115                 db  0Dh
.eh_frame_hdr:0000000000023116                 db    0
.eh_frame_hdr:0000000000023117                 db    0
.eh_frame_hdr:0000000000023118                 db  74h ; t
.eh_frame_hdr:0000000000023119                 db  1Bh
.eh_frame_hdr:000000000002311A                 db 0FEh
.eh_frame_hdr:000000000002311B                 db 0FFh
.eh_frame_hdr:000000000002311C                 db  30h ; 0
.eh_frame_hdr:000000000002311D                 db  0Dh
.eh_frame_hdr:000000000002311E                 db    0
.eh_frame_hdr:000000000002311F                 db    0
.eh_frame_hdr:0000000000023120                 db  84h
.eh_frame_hdr:0000000000023121                 db  1Bh
.eh_frame_hdr:0000000000023122                 db 0FEh
.eh_frame_hdr:0000000000023123                 db 0FFh
.eh_frame_hdr:0000000000023124                 db  44h ; D
.eh_frame_hdr:0000000000023125                 db  0Dh
.eh_frame_hdr:0000000000023126                 db    0
.eh_frame_hdr:0000000000023127                 db    0
.eh_frame_hdr:0000000000023128                 db  34h ; 4
.eh_frame_hdr:0000000000023129                 db  1Ch
.eh_frame_hdr:000000000002312A                 db 0FEh
.eh_frame_hdr:000000000002312B                 db 0FFh
.eh_frame_hdr:000000000002312C                 db  74h ; t
.eh_frame_hdr:000000000002312D                 db  0Dh
.eh_frame_hdr:000000000002312E                 db    0
.eh_frame_hdr:000000000002312F                 db    0
.eh_frame_hdr:0000000000023130                 db  44h ; D
.eh_frame_hdr:0000000000023131                 db  1Ch
.eh_frame_hdr:0000000000023132                 db 0FEh
.eh_frame_hdr:0000000000023133                 db 0FFh
.eh_frame_hdr:0000000000023134                 db  88h
.eh_frame_hdr:0000000000023135                 db  0Dh
.eh_frame_hdr:0000000000023136                 db    0
.eh_frame_hdr:0000000000023137                 db    0
.eh_frame_hdr:0000000000023138                 db  54h ; T
.eh_frame_hdr:0000000000023139                 db  1Ch
.eh_frame_hdr:000000000002313A                 db 0FEh
.eh_frame_hdr:000000000002313B                 db 0FFh
.eh_frame_hdr:000000000002313C                 db  9Ch
.eh_frame_hdr:000000000002313D                 db  0Dh
.eh_frame_hdr:000000000002313E                 db    0
.eh_frame_hdr:000000000002313F                 db    0
.eh_frame_hdr:0000000000023140                 db  64h ; d
.eh_frame_hdr:0000000000023141                 db  1Ch
.eh_frame_hdr:0000000000023142                 db 0FEh
.eh_frame_hdr:0000000000023143                 db 0FFh
.eh_frame_hdr:0000000000023144                 db 0B0h
.eh_frame_hdr:0000000000023145                 db  0Dh
.eh_frame_hdr:0000000000023146                 db    0
.eh_frame_hdr:0000000000023147                 db    0
.eh_frame_hdr:0000000000023148                 db  84h
.eh_frame_hdr:0000000000023149                 db  1Ch
.eh_frame_hdr:000000000002314A                 db 0FEh
.eh_frame_hdr:000000000002314B                 db 0FFh
.eh_frame_hdr:000000000002314C                 db 0CCh
.eh_frame_hdr:000000000002314D                 db  0Dh
.eh_frame_hdr:000000000002314E                 db    0
.eh_frame_hdr:000000000002314F                 db    0
.eh_frame_hdr:0000000000023150                 db  44h ; D
.eh_frame_hdr:0000000000023151                 db  1Dh
.eh_frame_hdr:0000000000023152                 db 0FEh
.eh_frame_hdr:0000000000023153                 db 0FFh
.eh_frame_hdr:0000000000023154                 db  1Ch
.eh_frame_hdr:0000000000023155                 db  0Eh
.eh_frame_hdr:0000000000023156                 db    0
.eh_frame_hdr:0000000000023157                 db    0
.eh_frame_hdr:0000000000023158                 db 0B4h
.eh_frame_hdr:0000000000023159                 db  1Dh
.eh_frame_hdr:000000000002315A                 db 0FEh
.eh_frame_hdr:000000000002315B                 db 0FFh
.eh_frame_hdr:000000000002315C                 db  48h ; H
.eh_frame_hdr:000000000002315D                 db  0Eh
.eh_frame_hdr:000000000002315E                 db    0
.eh_frame_hdr:000000000002315F                 db    0
.eh_frame_hdr:0000000000023160                 db  24h ; $
.eh_frame_hdr:0000000000023161                 db  1Eh
.eh_frame_hdr:0000000000023162                 db 0FEh
.eh_frame_hdr:0000000000023163                 db 0FFh
.eh_frame_hdr:0000000000023164                 db  68h ; h
.eh_frame_hdr:0000000000023165                 db  0Eh
.eh_frame_hdr:0000000000023166                 db    0
.eh_frame_hdr:0000000000023167                 db    0
.eh_frame_hdr:0000000000023168                 db  54h ; T
.eh_frame_hdr:0000000000023169                 db  1Eh
.eh_frame_hdr:000000000002316A                 db 0FEh
.eh_frame_hdr:000000000002316B                 db 0FFh
.eh_frame_hdr:000000000002316C                 db  84h
.eh_frame_hdr:000000000002316D                 db  0Eh
.eh_frame_hdr:000000000002316E                 db    0
.eh_frame_hdr:000000000002316F                 db    0
.eh_frame_hdr:0000000000023170                 db 0B4h
.eh_frame_hdr:0000000000023171                 db  1Eh
.eh_frame_hdr:0000000000023172                 db 0FEh
.eh_frame_hdr:0000000000023173                 db 0FFh
.eh_frame_hdr:0000000000023174                 db 0BCh
.eh_frame_hdr:0000000000023175                 db  0Eh
.eh_frame_hdr:0000000000023176                 db    0
.eh_frame_hdr:0000000000023177                 db    0
.eh_frame_hdr:0000000000023178                 db  14h
.eh_frame_hdr:0000000000023179                 db  1Fh
.eh_frame_hdr:000000000002317A                 db 0FEh
.eh_frame_hdr:000000000002317B                 db 0FFh
.eh_frame_hdr:000000000002317C                 db 0ECh
.eh_frame_hdr:000000000002317D                 db  0Eh
.eh_frame_hdr:000000000002317E                 db    0
.eh_frame_hdr:000000000002317F                 db    0
.eh_frame_hdr:0000000000023180                 db  24h ; $
.eh_frame_hdr:0000000000023181                 db  1Fh
.eh_frame_hdr:0000000000023182                 db 0FEh
.eh_frame_hdr:0000000000023183                 db 0FFh
.eh_frame_hdr:0000000000023184                 db    0
.eh_frame_hdr:0000000000023185                 db  0Fh
.eh_frame_hdr:0000000000023186                 db    0
.eh_frame_hdr:0000000000023187                 db    0
.eh_frame_hdr:0000000000023188                 db  34h ; 4
.eh_frame_hdr:0000000000023189                 db  1Fh
.eh_frame_hdr:000000000002318A                 db 0FEh
.eh_frame_hdr:000000000002318B                 db 0FFh
.eh_frame_hdr:000000000002318C                 db  14h
.eh_frame_hdr:000000000002318D                 db  0Fh
.eh_frame_hdr:000000000002318E                 db    0
.eh_frame_hdr:000000000002318F                 db    0
.eh_frame_hdr:0000000000023190                 db  54h ; T
.eh_frame_hdr:0000000000023191                 db  1Fh
.eh_frame_hdr:0000000000023192                 db 0FEh
.eh_frame_hdr:0000000000023193                 db 0FFh
.eh_frame_hdr:0000000000023194                 db  2Ch ; ,
.eh_frame_hdr:0000000000023195                 db  0Fh
.eh_frame_hdr:0000000000023196                 db    0
.eh_frame_hdr:0000000000023197                 db    0
.eh_frame_hdr:0000000000023198                 db  74h ; t
.eh_frame_hdr:0000000000023199                 db  1Fh
.eh_frame_hdr:000000000002319A                 db 0FEh
.eh_frame_hdr:000000000002319B                 db 0FFh
.eh_frame_hdr:000000000002319C                 db  44h ; D
.eh_frame_hdr:000000000002319D                 db  0Fh
.eh_frame_hdr:000000000002319E                 db    0
.eh_frame_hdr:000000000002319F                 db    0
.eh_frame_hdr:00000000000231A0                 db  84h
.eh_frame_hdr:00000000000231A1                 db  1Fh
.eh_frame_hdr:00000000000231A2                 db 0FEh
.eh_frame_hdr:00000000000231A3                 db 0FFh
.eh_frame_hdr:00000000000231A4                 db  58h ; X
.eh_frame_hdr:00000000000231A5                 db  0Fh
.eh_frame_hdr:00000000000231A6                 db    0
.eh_frame_hdr:00000000000231A7                 db    0
.eh_frame_hdr:00000000000231A8                 db  54h ; T
.eh_frame_hdr:00000000000231A9                 db  20h
.eh_frame_hdr:00000000000231AA                 db 0FEh
.eh_frame_hdr:00000000000231AB                 db 0FFh
.eh_frame_hdr:00000000000231AC                 db 0A4h
.eh_frame_hdr:00000000000231AD                 db  0Fh
.eh_frame_hdr:00000000000231AE                 db    0
.eh_frame_hdr:00000000000231AF                 db    0
.eh_frame_hdr:00000000000231B0                 db 0E4h
.eh_frame_hdr:00000000000231B1                 db  22h ; "
.eh_frame_hdr:00000000000231B2                 db 0FEh
.eh_frame_hdr:00000000000231B3                 db 0FFh
.eh_frame_hdr:00000000000231B4                 db 0F4h
.eh_frame_hdr:00000000000231B5                 db  0Fh
.eh_frame_hdr:00000000000231B6                 db    0
.eh_frame_hdr:00000000000231B7                 db    0
.eh_frame_hdr:00000000000231B8                 db  14h
.eh_frame_hdr:00000000000231B9                 db  23h ; #
.eh_frame_hdr:00000000000231BA                 db 0FEh
.eh_frame_hdr:00000000000231BB                 db 0FFh
.eh_frame_hdr:00000000000231BC                 db  1Ch
.eh_frame_hdr:00000000000231BD                 db  10h
.eh_frame_hdr:00000000000231BE                 db    0
.eh_frame_hdr:00000000000231BF                 db    0
.eh_frame_hdr:00000000000231C0                 db 0A4h
.eh_frame_hdr:00000000000231C1                 db  23h ; #
.eh_frame_hdr:00000000000231C2                 db 0FEh
.eh_frame_hdr:00000000000231C3                 db 0FFh
.eh_frame_hdr:00000000000231C4                 db  30h ; 0
.eh_frame_hdr:00000000000231C5                 db  10h
.eh_frame_hdr:00000000000231C6                 db    0
.eh_frame_hdr:00000000000231C7                 db    0
.eh_frame_hdr:00000000000231C8                 db 0B4h
.eh_frame_hdr:00000000000231C9                 db  23h ; #
.eh_frame_hdr:00000000000231CA                 db 0FEh
.eh_frame_hdr:00000000000231CB                 db 0FFh
.eh_frame_hdr:00000000000231CC                 db  44h ; D
.eh_frame_hdr:00000000000231CD                 db  10h
.eh_frame_hdr:00000000000231CE                 db    0
.eh_frame_hdr:00000000000231CF                 db    0
.eh_frame_hdr:00000000000231D0                 db 0A4h
.eh_frame_hdr:00000000000231D1                 db  24h ; $
.eh_frame_hdr:00000000000231D2                 db 0FEh
.eh_frame_hdr:00000000000231D3                 db 0FFh
.eh_frame_hdr:00000000000231D4                 db  84h
.eh_frame_hdr:00000000000231D5                 db  10h
.eh_frame_hdr:00000000000231D6                 db    0
.eh_frame_hdr:00000000000231D7                 db    0
.eh_frame_hdr:00000000000231D8                 db  74h ; t
.eh_frame_hdr:00000000000231D9                 db  25h ; %
.eh_frame_hdr:00000000000231DA                 db 0FEh
.eh_frame_hdr:00000000000231DB                 db 0FFh
.eh_frame_hdr:00000000000231DC                 db 0D4h
.eh_frame_hdr:00000000000231DD                 db  10h
.eh_frame_hdr:00000000000231DE                 db    0
.eh_frame_hdr:00000000000231DF                 db    0
.eh_frame_hdr:00000000000231E0                 db  14h
.eh_frame_hdr:00000000000231E1                 db  27h ; '
.eh_frame_hdr:00000000000231E2                 db 0FEh
.eh_frame_hdr:00000000000231E3                 db 0FFh
.eh_frame_hdr:00000000000231E4                 db  20h
.eh_frame_hdr:00000000000231E5                 db  11h
.eh_frame_hdr:00000000000231E6                 db    0
.eh_frame_hdr:00000000000231E7                 db    0
.eh_frame_hdr:00000000000231E8                 db  84h
.eh_frame_hdr:00000000000231E9                 db  2Ah ; *
.eh_frame_hdr:00000000000231EA                 db 0FEh
.eh_frame_hdr:00000000000231EB                 db 0FFh
.eh_frame_hdr:00000000000231EC                 db 0A0h
.eh_frame_hdr:00000000000231ED                 db  11h
.eh_frame_hdr:00000000000231EE                 db    0
.eh_frame_hdr:00000000000231EF                 db    0
.eh_frame_hdr:00000000000231F0                 db 0A4h
.eh_frame_hdr:00000000000231F1                 db  2Ch ; ,
.eh_frame_hdr:00000000000231F2                 db 0FEh
.eh_frame_hdr:00000000000231F3                 db 0FFh
.eh_frame_hdr:00000000000231F4                 db 0F0h
.eh_frame_hdr:00000000000231F5                 db  11h
.eh_frame_hdr:00000000000231F6                 db    0
.eh_frame_hdr:00000000000231F7                 db    0
.eh_frame_hdr:00000000000231F8                 db  54h ; T
.eh_frame_hdr:00000000000231F9                 db  2Dh ; -
.eh_frame_hdr:00000000000231FA                 db 0FEh
.eh_frame_hdr:00000000000231FB                 db 0FFh
.eh_frame_hdr:00000000000231FC                 db  34h ; 4
.eh_frame_hdr:00000000000231FD                 db  12h
.eh_frame_hdr:00000000000231FE                 db    0
.eh_frame_hdr:00000000000231FF                 db    0
.eh_frame_hdr:0000000000023200                 db 0B4h
.eh_frame_hdr:0000000000023201                 db  2Dh ; -
.eh_frame_hdr:0000000000023202                 db 0FEh
.eh_frame_hdr:0000000000023203                 db 0FFh
.eh_frame_hdr:0000000000023204                 db  70h ; p
.eh_frame_hdr:0000000000023205                 db  12h
.eh_frame_hdr:0000000000023206                 db    0
.eh_frame_hdr:0000000000023207                 db    0
.eh_frame_hdr:0000000000023208                 db  14h
.eh_frame_hdr:0000000000023209                 db  2Eh ; .
.eh_frame_hdr:000000000002320A                 db 0FEh
.eh_frame_hdr:000000000002320B                 db 0FFh
.eh_frame_hdr:000000000002320C                 db 0ACh
.eh_frame_hdr:000000000002320D                 db  12h
.eh_frame_hdr:000000000002320E                 db    0
.eh_frame_hdr:000000000002320F                 db    0
.eh_frame_hdr:0000000000023210                 db  34h ; 4
.eh_frame_hdr:0000000000023211                 db  4Ah ; J
.eh_frame_hdr:0000000000023212                 db 0FEh
.eh_frame_hdr:0000000000023213                 db 0FFh
.eh_frame_hdr:0000000000023214                 db  24h ; $
.eh_frame_hdr:0000000000023215                 db  13h
.eh_frame_hdr:0000000000023216                 db    0
.eh_frame_hdr:0000000000023217                 db    0
.eh_frame_hdr:0000000000023218                 db  84h
.eh_frame_hdr:0000000000023219                 db  4Ah ; J
.eh_frame_hdr:000000000002321A                 db 0FEh
.eh_frame_hdr:000000000002321B                 db 0FFh
.eh_frame_hdr:000000000002321C                 db  4Ch ; L
.eh_frame_hdr:000000000002321D                 db  13h
.eh_frame_hdr:000000000002321E                 db    0
.eh_frame_hdr:000000000002321F                 db    0
.eh_frame_hdr:0000000000023220                 db 0D4h
.eh_frame_hdr:0000000000023221                 db  4Ah ; J
.eh_frame_hdr:0000000000023222                 db 0FEh
.eh_frame_hdr:0000000000023223                 db 0FFh
.eh_frame_hdr:0000000000023224                 db  74h ; t
.eh_frame_hdr:0000000000023225                 db  13h
.eh_frame_hdr:0000000000023226                 db    0
.eh_frame_hdr:0000000000023227                 db    0
.eh_frame_hdr:0000000000023228                 db  84h
.eh_frame_hdr:0000000000023229                 db  4Ch ; L
.eh_frame_hdr:000000000002322A                 db 0FEh
.eh_frame_hdr:000000000002322B                 db 0FFh
.eh_frame_hdr:000000000002322C                 db 0C4h
.eh_frame_hdr:000000000002322D                 db  13h
.eh_frame_hdr:000000000002322E                 db    0
.eh_frame_hdr:000000000002322F                 db    0
.eh_frame_hdr:0000000000023230                 db  24h ; $
.eh_frame_hdr:0000000000023231                 db  4Dh ; M
.eh_frame_hdr:0000000000023232                 db 0FEh
.eh_frame_hdr:0000000000023233                 db 0FFh
.eh_frame_hdr:0000000000023234                 db 0D8h
.eh_frame_hdr:0000000000023235                 db  13h
.eh_frame_hdr:0000000000023236                 db    0
.eh_frame_hdr:0000000000023237                 db    0
.eh_frame_hdr:0000000000023238                 db  34h ; 4
.eh_frame_hdr:0000000000023239                 db  4Dh ; M
.eh_frame_hdr:000000000002323A                 db 0FEh
.eh_frame_hdr:000000000002323B                 db 0FFh
.eh_frame_hdr:000000000002323C                 db 0ECh
.eh_frame_hdr:000000000002323D                 db  13h
.eh_frame_hdr:000000000002323E                 db    0
.eh_frame_hdr:000000000002323F                 db    0
.eh_frame_hdr:0000000000023240                 db  44h ; D
.eh_frame_hdr:0000000000023241                 db  4Dh ; M
.eh_frame_hdr:0000000000023242                 db 0FEh
.eh_frame_hdr:0000000000023243                 db 0FFh
.eh_frame_hdr:0000000000023244                 db    0
.eh_frame_hdr:0000000000023245                 db  14h
.eh_frame_hdr:0000000000023246                 db    0
.eh_frame_hdr:0000000000023247                 db    0
.eh_frame_hdr:0000000000023248                 db  74h ; t
.eh_frame_hdr:0000000000023249                 db  4Dh ; M
.eh_frame_hdr:000000000002324A                 db 0FEh
.eh_frame_hdr:000000000002324B                 db 0FFh
.eh_frame_hdr:000000000002324C                 db  1Ch
.eh_frame_hdr:000000000002324D                 db  14h
.eh_frame_hdr:000000000002324E                 db    0
.eh_frame_hdr:000000000002324F                 db    0
.eh_frame_hdr:0000000000023250                 db  94h
.eh_frame_hdr:0000000000023251                 db  4Eh ; N
.eh_frame_hdr:0000000000023252                 db 0FEh
.eh_frame_hdr:0000000000023253                 db 0FFh
.eh_frame_hdr:0000000000023254                 db  7Ch ; |
.eh_frame_hdr:0000000000023255                 db  14h
.eh_frame_hdr:0000000000023256                 db    0
.eh_frame_hdr:0000000000023257                 db    0
.eh_frame_hdr:0000000000023258                 db  14h
.eh_frame_hdr:0000000000023259                 db  4Fh ; O
.eh_frame_hdr:000000000002325A                 db 0FEh
.eh_frame_hdr:000000000002325B                 db 0FFh
.eh_frame_hdr:000000000002325C                 db  90h
.eh_frame_hdr:000000000002325D                 db  14h
.eh_frame_hdr:000000000002325E                 db    0
.eh_frame_hdr:000000000002325F                 db    0
.eh_frame_hdr:0000000000023260                 db  54h ; T
.eh_frame_hdr:0000000000023261                 db  50h ; P
.eh_frame_hdr:0000000000023262                 db 0FEh
.eh_frame_hdr:0000000000023263                 db 0FFh
.eh_frame_hdr:0000000000023264                 db 0F0h
.eh_frame_hdr:0000000000023265                 db  14h
.eh_frame_hdr:0000000000023266                 db    0
.eh_frame_hdr:0000000000023267                 db    0
.eh_frame_hdr:0000000000023268                 db  64h ; d
.eh_frame_hdr:0000000000023269                 db  50h ; P
.eh_frame_hdr:000000000002326A                 db 0FEh
.eh_frame_hdr:000000000002326B                 db 0FFh
.eh_frame_hdr:000000000002326C                 db    4
.eh_frame_hdr:000000000002326D                 db  15h
.eh_frame_hdr:000000000002326E                 db    0
.eh_frame_hdr:000000000002326F                 db    0
.eh_frame_hdr:0000000000023270                 db  74h ; t
.eh_frame_hdr:0000000000023271                 db  50h ; P
.eh_frame_hdr:0000000000023272                 db 0FEh
.eh_frame_hdr:0000000000023273                 db 0FFh
.eh_frame_hdr:0000000000023274                 db  18h
.eh_frame_hdr:0000000000023275                 db  15h
.eh_frame_hdr:0000000000023276                 db    0
.eh_frame_hdr:0000000000023277                 db    0
.eh_frame_hdr:0000000000023278                 db  84h
.eh_frame_hdr:0000000000023279                 db  50h ; P
.eh_frame_hdr:000000000002327A                 db 0FEh
.eh_frame_hdr:000000000002327B                 db 0FFh
.eh_frame_hdr:000000000002327C                 db  2Ch ; ,
.eh_frame_hdr:000000000002327D                 db  15h
.eh_frame_hdr:000000000002327E                 db    0
.eh_frame_hdr:000000000002327F                 db    0
.eh_frame_hdr:0000000000023280                 db 0D4h
.eh_frame_hdr:0000000000023281                 db  50h ; P
.eh_frame_hdr:0000000000023282                 db 0FEh
.eh_frame_hdr:0000000000023283                 db 0FFh
.eh_frame_hdr:0000000000023284                 db  40h ; @
.eh_frame_hdr:0000000000023285                 db  15h
.eh_frame_hdr:0000000000023286                 db    0
.eh_frame_hdr:0000000000023287                 db    0
.eh_frame_hdr:0000000000023288                 db  34h ; 4
.eh_frame_hdr:0000000000023289                 db  51h ; Q
.eh_frame_hdr:000000000002328A                 db 0FEh
.eh_frame_hdr:000000000002328B                 db 0FFh
.eh_frame_hdr:000000000002328C                 db  54h ; T
.eh_frame_hdr:000000000002328D                 db  15h
.eh_frame_hdr:000000000002328E                 db    0
.eh_frame_hdr:000000000002328F                 db    0
.eh_frame_hdr:0000000000023290                 db  84h
.eh_frame_hdr:0000000000023291                 db  52h ; R
.eh_frame_hdr:0000000000023292                 db 0FEh
.eh_frame_hdr:0000000000023293                 db 0FFh
.eh_frame_hdr:0000000000023294                 db  90h
.eh_frame_hdr:0000000000023295                 db  15h
.eh_frame_hdr:0000000000023296                 db    0
.eh_frame_hdr:0000000000023297                 db    0
.eh_frame_hdr:0000000000023298                 db 0E4h
.eh_frame_hdr:0000000000023299                 db  52h ; R
.eh_frame_hdr:000000000002329A                 db 0FEh
.eh_frame_hdr:000000000002329B                 db 0FFh
.eh_frame_hdr:000000000002329C                 db 0C8h
.eh_frame_hdr:000000000002329D                 db  15h
.eh_frame_hdr:000000000002329E                 db    0
.eh_frame_hdr:000000000002329F                 db    0
.eh_frame_hdr:00000000000232A0                 db  34h ; 4
.eh_frame_hdr:00000000000232A1                 db  53h ; S
.eh_frame_hdr:00000000000232A2                 db 0FEh
.eh_frame_hdr:00000000000232A3                 db 0FFh
.eh_frame_hdr:00000000000232A4                 db 0DCh
.eh_frame_hdr:00000000000232A5                 db  15h
.eh_frame_hdr:00000000000232A6                 db    0
.eh_frame_hdr:00000000000232A7                 db    0
.eh_frame_hdr:00000000000232A8                 db 0B4h
.eh_frame_hdr:00000000000232A9                 db  53h ; S
.eh_frame_hdr:00000000000232AA                 db 0FEh
.eh_frame_hdr:00000000000232AB                 db 0FFh
.eh_frame_hdr:00000000000232AC                 db  10h
.eh_frame_hdr:00000000000232AD                 db  16h
.eh_frame_hdr:00000000000232AE                 db    0
.eh_frame_hdr:00000000000232AF                 db    0
.eh_frame_hdr:00000000000232B0                 db  24h ; $
.eh_frame_hdr:00000000000232B1                 db  54h ; T
.eh_frame_hdr:00000000000232B2                 db 0FEh
.eh_frame_hdr:00000000000232B3                 db 0FFh
.eh_frame_hdr:00000000000232B4                 db  24h ; $
.eh_frame_hdr:00000000000232B5                 db  16h
.eh_frame_hdr:00000000000232B6                 db    0
.eh_frame_hdr:00000000000232B7                 db    0
.eh_frame_hdr:00000000000232B8                 db  94h
.eh_frame_hdr:00000000000232B9                 db  54h ; T
.eh_frame_hdr:00000000000232BA                 db 0FEh
.eh_frame_hdr:00000000000232BB                 db 0FFh
.eh_frame_hdr:00000000000232BC                 db  70h ; p
.eh_frame_hdr:00000000000232BD                 db  16h
.eh_frame_hdr:00000000000232BE                 db    0
.eh_frame_hdr:00000000000232BF                 db    0
.eh_frame_hdr:00000000000232C0                 db 0D4h
.eh_frame_hdr:00000000000232C1                 db  54h ; T
.eh_frame_hdr:00000000000232C2                 db 0FEh
.eh_frame_hdr:00000000000232C3                 db 0FFh
.eh_frame_hdr:00000000000232C4                 db  84h
.eh_frame_hdr:00000000000232C5                 db  16h
.eh_frame_hdr:00000000000232C6                 db    0
.eh_frame_hdr:00000000000232C7                 db    0
.eh_frame_hdr:00000000000232C8                 db 0F4h
.eh_frame_hdr:00000000000232C9                 db  54h ; T
.eh_frame_hdr:00000000000232CA                 db 0FEh
.eh_frame_hdr:00000000000232CB                 db 0FFh
.eh_frame_hdr:00000000000232CC                 db  98h
.eh_frame_hdr:00000000000232CD                 db  16h
.eh_frame_hdr:00000000000232CE                 db    0
.eh_frame_hdr:00000000000232CF                 db    0
.eh_frame_hdr:00000000000232D0                 db 0B4h
.eh_frame_hdr:00000000000232D1                 db  56h ; V
.eh_frame_hdr:00000000000232D2                 db 0FEh
.eh_frame_hdr:00000000000232D3                 db 0FFh
.eh_frame_hdr:00000000000232D4                 db 0E4h
.eh_frame_hdr:00000000000232D5                 db  16h
.eh_frame_hdr:00000000000232D6                 db    0
.eh_frame_hdr:00000000000232D7                 db    0
.eh_frame_hdr:00000000000232D8                 db  44h ; D
.eh_frame_hdr:00000000000232D9                 db  57h ; W
.eh_frame_hdr:00000000000232DA                 db 0FEh
.eh_frame_hdr:00000000000232DB                 db 0FFh
.eh_frame_hdr:00000000000232DC                 db  10h
.eh_frame_hdr:00000000000232DD                 db  17h
.eh_frame_hdr:00000000000232DE                 db    0
.eh_frame_hdr:00000000000232DF                 db    0
.eh_frame_hdr:00000000000232E0                 db  24h ; $
.eh_frame_hdr:00000000000232E1                 db  58h ; X
.eh_frame_hdr:00000000000232E2                 db 0FEh
.eh_frame_hdr:00000000000232E3                 db 0FFh
.eh_frame_hdr:00000000000232E4                 db  3Ch ; <
.eh_frame_hdr:00000000000232E5                 db  17h
.eh_frame_hdr:00000000000232E6                 db    0
.eh_frame_hdr:00000000000232E7                 db    0
.eh_frame_hdr:00000000000232E8                 db  64h ; d
.eh_frame_hdr:00000000000232E9                 db  5Ah ; Z
.eh_frame_hdr:00000000000232EA                 db 0FEh
.eh_frame_hdr:00000000000232EB                 db 0FFh
.eh_frame_hdr:00000000000232EC                 db  74h ; t
.eh_frame_hdr:00000000000232ED                 db  17h
.eh_frame_hdr:00000000000232EE                 db    0
.eh_frame_hdr:00000000000232EF                 db    0
.eh_frame_hdr:00000000000232F0                 db 0F4h
.eh_frame_hdr:00000000000232F1                 db  5Ch ; \
.eh_frame_hdr:00000000000232F2                 db 0FEh
.eh_frame_hdr:00000000000232F3                 db 0FFh
.eh_frame_hdr:00000000000232F4                 db 0B0h
.eh_frame_hdr:00000000000232F5                 db  17h
.eh_frame_hdr:00000000000232F6                 db    0
.eh_frame_hdr:00000000000232F7                 db    0
.eh_frame_hdr:00000000000232F8                 db  54h ; T
.eh_frame_hdr:00000000000232F9                 db  5Dh ; ]
.eh_frame_hdr:00000000000232FA                 db 0FEh
.eh_frame_hdr:00000000000232FB                 db 0FFh
.eh_frame_hdr:00000000000232FC                 db 0D4h
.eh_frame_hdr:00000000000232FD                 db  17h
.eh_frame_hdr:00000000000232FE                 db    0
.eh_frame_hdr:00000000000232FF                 db    0
.eh_frame_hdr:0000000000023300                 db  64h ; d
.eh_frame_hdr:0000000000023301                 db  5Fh ; _
.eh_frame_hdr:0000000000023302                 db 0FEh
.eh_frame_hdr:0000000000023303                 db 0FFh
.eh_frame_hdr:0000000000023304                 db  0Ch
.eh_frame_hdr:0000000000023305                 db  18h
.eh_frame_hdr:0000000000023306                 db    0
.eh_frame_hdr:0000000000023307                 db    0
.eh_frame_hdr:0000000000023308                 db  34h ; 4
.eh_frame_hdr:0000000000023309                 db  60h ; `
.eh_frame_hdr:000000000002330A                 db 0FEh
.eh_frame_hdr:000000000002330B                 db 0FFh
.eh_frame_hdr:000000000002330C                 db  20h
.eh_frame_hdr:000000000002330D                 db  18h
.eh_frame_hdr:000000000002330E                 db    0
.eh_frame_hdr:000000000002330F                 db    0
.eh_frame_hdr:0000000000023310                 db  44h ; D
.eh_frame_hdr:0000000000023311                 db  6Ah ; j
.eh_frame_hdr:0000000000023312                 db 0FEh
.eh_frame_hdr:0000000000023313                 db 0FFh
.eh_frame_hdr:0000000000023314                 db 0C8h
.eh_frame_hdr:0000000000023315                 db  18h
.eh_frame_hdr:0000000000023316                 db    0
.eh_frame_hdr:0000000000023317                 db    0
.eh_frame_hdr:0000000000023318                 db  34h ; 4
.eh_frame_hdr:0000000000023319                 db  6Ch ; l
.eh_frame_hdr:000000000002331A                 db 0FEh
.eh_frame_hdr:000000000002331B                 db 0FFh
.eh_frame_hdr:000000000002331C                 db    4
.eh_frame_hdr:000000000002331D                 db  19h
.eh_frame_hdr:000000000002331E                 db    0
.eh_frame_hdr:000000000002331F                 db    0
.eh_frame_hdr:0000000000023320                 db  44h ; D
.eh_frame_hdr:0000000000023321                 db  6Ch ; l
.eh_frame_hdr:0000000000023322                 db 0FEh
.eh_frame_hdr:0000000000023323                 db 0FFh
.eh_frame_hdr:0000000000023324                 db  18h
.eh_frame_hdr:0000000000023325                 db  19h
.eh_frame_hdr:0000000000023326                 db    0
.eh_frame_hdr:0000000000023327                 db    0
.eh_frame_hdr:0000000000023328                 db  54h ; T
.eh_frame_hdr:0000000000023329                 db  6Ch ; l
.eh_frame_hdr:000000000002332A                 db 0FEh
.eh_frame_hdr:000000000002332B                 db 0FFh
.eh_frame_hdr:000000000002332C                 db  2Ch ; ,
.eh_frame_hdr:000000000002332D                 db  19h
.eh_frame_hdr:000000000002332E                 db    0
.eh_frame_hdr:000000000002332F                 db    0
.eh_frame_hdr:0000000000023330                 db 0C4h
.eh_frame_hdr:0000000000023331                 db  6Ch ; l
.eh_frame_hdr:0000000000023332                 db 0FEh
.eh_frame_hdr:0000000000023333                 db 0FFh
.eh_frame_hdr:0000000000023334                 db  58h ; X
.eh_frame_hdr:0000000000023335                 db  19h
.eh_frame_hdr:0000000000023336                 db    0
.eh_frame_hdr:0000000000023337                 db    0
.eh_frame_hdr:0000000000023338                 db 0E4h
.eh_frame_hdr:0000000000023339                 db  6Ch ; l
.eh_frame_hdr:000000000002333A                 db 0FEh
.eh_frame_hdr:000000000002333B                 db 0FFh
.eh_frame_hdr:000000000002333C                 db  74h ; t
.eh_frame_hdr:000000000002333D                 db  19h
.eh_frame_hdr:000000000002333E                 db    0
.eh_frame_hdr:000000000002333F                 db    0
.eh_frame_hdr:0000000000023340                 db  84h
.eh_frame_hdr:0000000000023341                 db  6Dh ; m
.eh_frame_hdr:0000000000023342                 db 0FEh
.eh_frame_hdr:0000000000023343                 db 0FFh
.eh_frame_hdr:0000000000023344                 db 0C4h
.eh_frame_hdr:0000000000023345                 db  19h
.eh_frame_hdr:0000000000023346                 db    0
.eh_frame_hdr:0000000000023347                 db    0
.eh_frame_hdr:0000000000023348                 db  24h ; $
.eh_frame_hdr:0000000000023349                 db  6Eh ; n
.eh_frame_hdr:000000000002334A                 db 0FEh
.eh_frame_hdr:000000000002334B                 db 0FFh
.eh_frame_hdr:000000000002334C                 db 0DCh
.eh_frame_hdr:000000000002334D                 db  19h
.eh_frame_hdr:000000000002334E                 db    0
.eh_frame_hdr:000000000002334F                 db    0
.eh_frame_hdr:0000000000023350                 db  54h ; T
.eh_frame_hdr:0000000000023351                 db  6Eh ; n
.eh_frame_hdr:0000000000023352                 db 0FEh
.eh_frame_hdr:0000000000023353                 db 0FFh
.eh_frame_hdr:0000000000023354                 db 0FCh
.eh_frame_hdr:0000000000023355                 db  19h
.eh_frame_hdr:0000000000023356                 db    0
.eh_frame_hdr:0000000000023357                 db    0
.eh_frame_hdr:0000000000023358                 db 0B4h
.eh_frame_hdr:0000000000023359                 db  6Eh ; n
.eh_frame_hdr:000000000002335A                 db 0FEh
.eh_frame_hdr:000000000002335B                 db 0FFh
.eh_frame_hdr:000000000002335C                 db  28h ; (
.eh_frame_hdr:000000000002335D                 db  1Ah
.eh_frame_hdr:000000000002335E                 db    0
.eh_frame_hdr:000000000002335F                 db    0
.eh_frame_hdr:0000000000023360                 db 0D4h
.eh_frame_hdr:0000000000023361                 db  6Eh ; n
.eh_frame_hdr:0000000000023362                 db 0FEh
.eh_frame_hdr:0000000000023363                 db 0FFh
.eh_frame_hdr:0000000000023364                 db  50h ; P
.eh_frame_hdr:0000000000023365                 db  1Ah
.eh_frame_hdr:0000000000023366                 db    0
.eh_frame_hdr:0000000000023367                 db    0
.eh_frame_hdr:0000000000023368                 db 0E4h
.eh_frame_hdr:0000000000023369                 db  75h ; u
.eh_frame_hdr:000000000002336A                 db 0FEh
.eh_frame_hdr:000000000002336B                 db 0FFh
.eh_frame_hdr:000000000002336C                 db  9Ch
.eh_frame_hdr:000000000002336D                 db  1Ah
.eh_frame_hdr:000000000002336E                 db    0
.eh_frame_hdr:000000000002336F                 db    0
.eh_frame_hdr:0000000000023370                 db  84h
.eh_frame_hdr:0000000000023371                 db  76h ; v
.eh_frame_hdr:0000000000023372                 db 0FEh
.eh_frame_hdr:0000000000023373                 db 0FFh
.eh_frame_hdr:0000000000023374                 db 0BCh
.eh_frame_hdr:0000000000023375                 db  1Ah
.eh_frame_hdr:0000000000023376                 db    0
.eh_frame_hdr:0000000000023377                 db    0
.eh_frame_hdr:0000000000023378                 db  74h ; t
.eh_frame_hdr:0000000000023379                 db  77h ; w
.eh_frame_hdr:000000000002337A                 db 0FEh
.eh_frame_hdr:000000000002337B                 db 0FFh
.eh_frame_hdr:000000000002337C                 db    0
.eh_frame_hdr:000000000002337D                 db  1Bh
.eh_frame_hdr:000000000002337E                 db    0
.eh_frame_hdr:000000000002337F                 db    0
.eh_frame_hdr:0000000000023380                 db 0B4h
.eh_frame_hdr:0000000000023381                 db  89h
.eh_frame_hdr:0000000000023382                 db 0FEh
.eh_frame_hdr:0000000000023383                 db 0FFh
.eh_frame_hdr:0000000000023384                 db  78h ; x
.eh_frame_hdr:0000000000023385                 db  1Bh
.eh_frame_hdr:0000000000023386                 db    0
.eh_frame_hdr:0000000000023387                 db    0
.eh_frame_hdr:0000000000023388                 db  64h ; d
.eh_frame_hdr:0000000000023389                 db  8Bh
.eh_frame_hdr:000000000002338A                 db 0FEh
.eh_frame_hdr:000000000002338B                 db 0FFh
.eh_frame_hdr:000000000002338C                 db 0E4h
.eh_frame_hdr:000000000002338D                 db  1Bh
.eh_frame_hdr:000000000002338E                 db    0
.eh_frame_hdr:000000000002338F                 db    0
.eh_frame_hdr:0000000000023390                 db 0A4h
.eh_frame_hdr:0000000000023391                 db  8Bh
.eh_frame_hdr:0000000000023392                 db 0FEh
.eh_frame_hdr:0000000000023393                 db 0FFh
.eh_frame_hdr:0000000000023394                 db  10h
.eh_frame_hdr:0000000000023395                 db  1Ch
.eh_frame_hdr:0000000000023396                 db    0
.eh_frame_hdr:0000000000023397                 db    0
.eh_frame_hdr:0000000000023398                 db 0C4h
.eh_frame_hdr:0000000000023399                 db  8Bh
.eh_frame_hdr:000000000002339A                 db 0FEh
.eh_frame_hdr:000000000002339B                 db 0FFh
.eh_frame_hdr:000000000002339C                 db  24h ; $
.eh_frame_hdr:000000000002339D                 db  1Ch
.eh_frame_hdr:000000000002339E                 db    0
.eh_frame_hdr:000000000002339F                 db    0
.eh_frame_hdr:00000000000233A0                 db 0E4h
.eh_frame_hdr:00000000000233A1                 db  8Bh
.eh_frame_hdr:00000000000233A2                 db 0FEh
.eh_frame_hdr:00000000000233A3                 db 0FFh
.eh_frame_hdr:00000000000233A4                 db  38h ; 8
.eh_frame_hdr:00000000000233A5                 db  1Ch
.eh_frame_hdr:00000000000233A6                 db    0
.eh_frame_hdr:00000000000233A7                 db    0
.eh_frame_hdr:00000000000233A8                 db  24h ; $
.eh_frame_hdr:00000000000233A9                 db  8Ch
.eh_frame_hdr:00000000000233AA                 db 0FEh
.eh_frame_hdr:00000000000233AB                 db 0FFh
.eh_frame_hdr:00000000000233AC                 db  4Ch ; L
.eh_frame_hdr:00000000000233AD                 db  1Ch
.eh_frame_hdr:00000000000233AE                 db    0
.eh_frame_hdr:00000000000233AF                 db    0
.eh_frame_hdr:00000000000233B0                 db  44h ; D
.eh_frame_hdr:00000000000233B1                 db  8Ch
.eh_frame_hdr:00000000000233B2                 db 0FEh
.eh_frame_hdr:00000000000233B3                 db 0FFh
.eh_frame_hdr:00000000000233B4                 db  60h ; `
.eh_frame_hdr:00000000000233B5                 db  1Ch
.eh_frame_hdr:00000000000233B6                 db    0
.eh_frame_hdr:00000000000233B7                 db    0
.eh_frame_hdr:00000000000233B8                 db  74h ; t
.eh_frame_hdr:00000000000233B9                 db  8Ch
.eh_frame_hdr:00000000000233BA                 db 0FEh
.eh_frame_hdr:00000000000233BB                 db 0FFh
.eh_frame_hdr:00000000000233BC                 db  74h ; t
.eh_frame_hdr:00000000000233BD                 db  1Ch
.eh_frame_hdr:00000000000233BE                 db    0
.eh_frame_hdr:00000000000233BF                 db    0
.eh_frame_hdr:00000000000233C0                 db 0F4h
.eh_frame_hdr:00000000000233C1                 db  8Ch
.eh_frame_hdr:00000000000233C2                 db 0FEh
.eh_frame_hdr:00000000000233C3                 db 0FFh
.eh_frame_hdr:00000000000233C4                 db 0C8h
.eh_frame_hdr:00000000000233C5                 db  1Ch
.eh_frame_hdr:00000000000233C6                 db    0
.eh_frame_hdr:00000000000233C7                 db    0
.eh_frame_hdr:00000000000233C8                 db 0E4h
.eh_frame_hdr:00000000000233C9                 db  8Dh
.eh_frame_hdr:00000000000233CA                 db 0FEh
.eh_frame_hdr:00000000000233CB                 db 0FFh
.eh_frame_hdr:00000000000233CC                 db  34h ; 4
.eh_frame_hdr:00000000000233CD                 db  1Dh
.eh_frame_hdr:00000000000233CE                 db    0
.eh_frame_hdr:00000000000233CF                 db    0
.eh_frame_hdr:00000000000233D0                 db 0F4h
.eh_frame_hdr:00000000000233D1                 db  8Dh
.eh_frame_hdr:00000000000233D2                 db 0FEh
.eh_frame_hdr:00000000000233D3                 db 0FFh
.eh_frame_hdr:00000000000233D4                 db  48h ; H
.eh_frame_hdr:00000000000233D5                 db  1Dh
.eh_frame_hdr:00000000000233D6                 db    0
.eh_frame_hdr:00000000000233D7                 db    0
.eh_frame_hdr:00000000000233D8                 db  94h
.eh_frame_hdr:00000000000233D9                 db  8Eh
.eh_frame_hdr:00000000000233DA                 db 0FEh
.eh_frame_hdr:00000000000233DB                 db 0FFh
.eh_frame_hdr:00000000000233DC                 db  74h ; t
.eh_frame_hdr:00000000000233DD                 db  1Dh
.eh_frame_hdr:00000000000233DE                 db    0
.eh_frame_hdr:00000000000233DF                 db    0
.eh_frame_hdr:00000000000233E0                 db 0B4h
.eh_frame_hdr:00000000000233E1                 db  8Eh
.eh_frame_hdr:00000000000233E2                 db 0FEh
.eh_frame_hdr:00000000000233E3                 db 0FFh
.eh_frame_hdr:00000000000233E4                 db  88h
.eh_frame_hdr:00000000000233E5                 db  1Dh
.eh_frame_hdr:00000000000233E6                 db    0
.eh_frame_hdr:00000000000233E7                 db    0
.eh_frame_hdr:00000000000233E8                 db 0C4h
.eh_frame_hdr:00000000000233E9                 db  8Eh
.eh_frame_hdr:00000000000233EA                 db 0FEh
.eh_frame_hdr:00000000000233EB                 db 0FFh
.eh_frame_hdr:00000000000233EC                 db  9Ch
.eh_frame_hdr:00000000000233ED                 db  1Dh
.eh_frame_hdr:00000000000233EE                 db    0
.eh_frame_hdr:00000000000233EF                 db    0
.eh_frame_hdr:00000000000233F0                 db 0E4h
.eh_frame_hdr:00000000000233F1                 db  8Eh
.eh_frame_hdr:00000000000233F2                 db 0FEh
.eh_frame_hdr:00000000000233F3                 db 0FFh
.eh_frame_hdr:00000000000233F4                 db 0B0h
.eh_frame_hdr:00000000000233F5                 db  1Dh
.eh_frame_hdr:00000000000233F6                 db    0
.eh_frame_hdr:00000000000233F7                 db    0
.eh_frame_hdr:00000000000233F8                 db    4
.eh_frame_hdr:00000000000233F9                 db  8Fh
.eh_frame_hdr:00000000000233FA                 db 0FEh
.eh_frame_hdr:00000000000233FB                 db 0FFh
.eh_frame_hdr:00000000000233FC                 db 0C4h
.eh_frame_hdr:00000000000233FD                 db  1Dh
.eh_frame_hdr:00000000000233FE                 db    0
.eh_frame_hdr:00000000000233FF                 db    0
.eh_frame_hdr:0000000000023400                 db  94h
.eh_frame_hdr:0000000000023401                 db  8Fh
.eh_frame_hdr:0000000000023402                 db 0FEh
.eh_frame_hdr:0000000000023403                 db 0FFh
.eh_frame_hdr:0000000000023404                 db 0E0h
.eh_frame_hdr:0000000000023405                 db  1Dh
.eh_frame_hdr:0000000000023406                 db    0
.eh_frame_hdr:0000000000023407                 db    0
.eh_frame_hdr:0000000000023408                 db  24h ; $
.eh_frame_hdr:0000000000023409                 db  90h
.eh_frame_hdr:000000000002340A                 db 0FEh
.eh_frame_hdr:000000000002340B                 db 0FFh
.eh_frame_hdr:000000000002340C                 db 0FCh
.eh_frame_hdr:000000000002340D                 db  1Dh
.eh_frame_hdr:000000000002340E                 db    0
.eh_frame_hdr:000000000002340F                 db    0
.eh_frame_hdr:0000000000023410                 db  34h ; 4
.eh_frame_hdr:0000000000023411                 db  90h
.eh_frame_hdr:0000000000023412                 db 0FEh
.eh_frame_hdr:0000000000023413                 db 0FFh
.eh_frame_hdr:0000000000023414                 db  10h
.eh_frame_hdr:0000000000023415                 db  1Eh
.eh_frame_hdr:0000000000023416                 db    0
.eh_frame_hdr:0000000000023417                 db    0
.eh_frame_hdr:0000000000023418                 db  44h ; D
.eh_frame_hdr:0000000000023419                 db  90h
.eh_frame_hdr:000000000002341A                 db 0FEh
.eh_frame_hdr:000000000002341B                 db 0FFh
.eh_frame_hdr:000000000002341C                 db  24h ; $
.eh_frame_hdr:000000000002341D                 db  1Eh
.eh_frame_hdr:000000000002341E                 db    0
.eh_frame_hdr:000000000002341F                 db    0
.eh_frame_hdr:0000000000023420                 db 0E4h
.eh_frame_hdr:0000000000023421                 db  90h
.eh_frame_hdr:0000000000023422                 db 0FEh
.eh_frame_hdr:0000000000023423                 db 0FFh
.eh_frame_hdr:0000000000023424                 db  40h ; @
.eh_frame_hdr:0000000000023425                 db  1Eh
.eh_frame_hdr:0000000000023426                 db    0
.eh_frame_hdr:0000000000023427                 db    0
.eh_frame_hdr:0000000000023428                 db 0F4h
.eh_frame_hdr:0000000000023429                 db  90h
.eh_frame_hdr:000000000002342A                 db 0FEh
.eh_frame_hdr:000000000002342B                 db 0FFh
.eh_frame_hdr:000000000002342C                 db  54h ; T
.eh_frame_hdr:000000000002342D                 db  1Eh
.eh_frame_hdr:000000000002342E                 db    0
.eh_frame_hdr:000000000002342F                 db    0
.eh_frame_hdr:0000000000023430                 db  14h
.eh_frame_hdr:0000000000023431                 db  91h
.eh_frame_hdr:0000000000023432                 db 0FEh
.eh_frame_hdr:0000000000023433                 db 0FFh
.eh_frame_hdr:0000000000023434                 db  68h ; h
.eh_frame_hdr:0000000000023435                 db  1Eh
.eh_frame_hdr:0000000000023436                 db    0
.eh_frame_hdr:0000000000023437                 db    0
.eh_frame_hdr:0000000000023438                 db  24h ; $
.eh_frame_hdr:0000000000023439                 db  91h
.eh_frame_hdr:000000000002343A                 db 0FEh
.eh_frame_hdr:000000000002343B                 db 0FFh
.eh_frame_hdr:000000000002343C                 db  7Ch ; |
.eh_frame_hdr:000000000002343D                 db  1Eh
.eh_frame_hdr:000000000002343E                 db    0
.eh_frame_hdr:000000000002343F                 db    0
.eh_frame_hdr:0000000000023440                 db 0B4h
.eh_frame_hdr:0000000000023441                 db  91h
.eh_frame_hdr:0000000000023442                 db 0FEh
.eh_frame_hdr:0000000000023443                 db 0FFh
.eh_frame_hdr:0000000000023444                 db  98h
.eh_frame_hdr:0000000000023445                 db  1Eh
.eh_frame_hdr:0000000000023446                 db    0
.eh_frame_hdr:0000000000023447                 db    0
.eh_frame_hdr:0000000000023448                 db  54h ; T
.eh_frame_hdr:0000000000023449                 db  92h
.eh_frame_hdr:000000000002344A                 db 0FEh
.eh_frame_hdr:000000000002344B                 db 0FFh
.eh_frame_hdr:000000000002344C                 db 0B4h
.eh_frame_hdr:000000000002344D                 db  1Eh
.eh_frame_hdr:000000000002344E                 db    0
.eh_frame_hdr:000000000002344F                 db    0
.eh_frame_hdr:0000000000023450                 db  64h ; d
.eh_frame_hdr:0000000000023451                 db  92h
.eh_frame_hdr:0000000000023452                 db 0FEh
.eh_frame_hdr:0000000000023453                 db 0FFh
.eh_frame_hdr:0000000000023454                 db 0C8h
.eh_frame_hdr:0000000000023455                 db  1Eh
.eh_frame_hdr:0000000000023456                 db    0
.eh_frame_hdr:0000000000023457                 db    0
.eh_frame_hdr:0000000000023458                 db  84h
.eh_frame_hdr:0000000000023459                 db  92h
.eh_frame_hdr:000000000002345A                 db 0FEh
.eh_frame_hdr:000000000002345B                 db 0FFh
.eh_frame_hdr:000000000002345C                 db 0DCh
.eh_frame_hdr:000000000002345D                 db  1Eh
.eh_frame_hdr:000000000002345E                 db    0
.eh_frame_hdr:000000000002345F                 db    0
.eh_frame_hdr:0000000000023460                 db 0A4h
.eh_frame_hdr:0000000000023461                 db  92h
.eh_frame_hdr:0000000000023462                 db 0FEh
.eh_frame_hdr:0000000000023463                 db 0FFh
.eh_frame_hdr:0000000000023464                 db 0F0h
.eh_frame_hdr:0000000000023465                 db  1Eh
.eh_frame_hdr:0000000000023466                 db    0
.eh_frame_hdr:0000000000023467                 db    0
.eh_frame_hdr:0000000000023468                 db 0B4h
.eh_frame_hdr:0000000000023469                 db  92h
.eh_frame_hdr:000000000002346A                 db 0FEh
.eh_frame_hdr:000000000002346B                 db 0FFh
.eh_frame_hdr:000000000002346C                 db    4
.eh_frame_hdr:000000000002346D                 db  1Fh
.eh_frame_hdr:000000000002346E                 db    0
.eh_frame_hdr:000000000002346F                 db    0
.eh_frame_hdr:0000000000023470                 db 0D4h
.eh_frame_hdr:0000000000023471                 db  92h
.eh_frame_hdr:0000000000023472                 db 0FEh
.eh_frame_hdr:0000000000023473                 db 0FFh
.eh_frame_hdr:0000000000023474                 db  18h
.eh_frame_hdr:0000000000023475                 db  1Fh
.eh_frame_hdr:0000000000023476                 db    0
.eh_frame_hdr:0000000000023477                 db    0
.eh_frame_hdr:0000000000023478                 db 0F4h
.eh_frame_hdr:0000000000023479                 db  92h
.eh_frame_hdr:000000000002347A                 db 0FEh
.eh_frame_hdr:000000000002347B                 db 0FFh
.eh_frame_hdr:000000000002347C                 db  2Ch ; ,
.eh_frame_hdr:000000000002347D                 db  1Fh
.eh_frame_hdr:000000000002347E                 db    0
.eh_frame_hdr:000000000002347F                 db    0
.eh_frame_hdr:0000000000023480                 db  14h
.eh_frame_hdr:0000000000023481                 db  93h
.eh_frame_hdr:0000000000023482                 db 0FEh
.eh_frame_hdr:0000000000023483                 db 0FFh
.eh_frame_hdr:0000000000023484                 db  44h ; D
.eh_frame_hdr:0000000000023485                 db  1Fh
.eh_frame_hdr:0000000000023486                 db    0
.eh_frame_hdr:0000000000023487                 db    0
.eh_frame_hdr:0000000000023488                 db  54h ; T
.eh_frame_hdr:0000000000023489                 db  93h
.eh_frame_hdr:000000000002348A                 db 0FEh
.eh_frame_hdr:000000000002348B                 db 0FFh
.eh_frame_hdr:000000000002348C                 db  6Ch ; l
.eh_frame_hdr:000000000002348D                 db  1Fh
.eh_frame_hdr:000000000002348E                 db    0
.eh_frame_hdr:000000000002348F                 db    0
.eh_frame_hdr:0000000000023490                 db  74h ; t
.eh_frame_hdr:0000000000023491                 db  97h
.eh_frame_hdr:0000000000023492                 db 0FEh
.eh_frame_hdr:0000000000023493                 db 0FFh
.eh_frame_hdr:0000000000023494                 db  80h
.eh_frame_hdr:0000000000023495                 db  20h
.eh_frame_hdr:0000000000023496                 db    0
.eh_frame_hdr:0000000000023497                 db    0
.eh_frame_hdr:0000000000023498                 db  94h
.eh_frame_hdr:0000000000023499                 db  97h
.eh_frame_hdr:000000000002349A                 db 0FEh
.eh_frame_hdr:000000000002349B                 db 0FFh
.eh_frame_hdr:000000000002349C                 db  94h
.eh_frame_hdr:000000000002349D                 db  20h
.eh_frame_hdr:000000000002349E                 db    0
.eh_frame_hdr:000000000002349F                 db    0
.eh_frame_hdr:00000000000234A0                 db  14h
.eh_frame_hdr:00000000000234A1                 db  98h
.eh_frame_hdr:00000000000234A2                 db 0FEh
.eh_frame_hdr:00000000000234A3                 db 0FFh
.eh_frame_hdr:00000000000234A4                 db 0B0h
.eh_frame_hdr:00000000000234A5                 db  20h
.eh_frame_hdr:00000000000234A6                 db    0
.eh_frame_hdr:00000000000234A7                 db    0
.eh_frame_hdr:00000000000234A8                 db 0F4h
.eh_frame_hdr:00000000000234A9                 db  98h
.eh_frame_hdr:00000000000234AA                 db 0FEh
.eh_frame_hdr:00000000000234AB                 db 0FFh
.eh_frame_hdr:00000000000234AC                 db 0DCh
.eh_frame_hdr:00000000000234AD                 db  20h
.eh_frame_hdr:00000000000234AE                 db    0
.eh_frame_hdr:00000000000234AF                 db    0
.eh_frame_hdr:00000000000234B0                 db  74h ; t
.eh_frame_hdr:00000000000234B1                 db  99h
.eh_frame_hdr:00000000000234B2                 db 0FEh
.eh_frame_hdr:00000000000234B3                 db 0FFh
.eh_frame_hdr:00000000000234B4                 db 0FCh
.eh_frame_hdr:00000000000234B5                 db  20h
.eh_frame_hdr:00000000000234B6                 db    0
.eh_frame_hdr:00000000000234B7                 db    0
.eh_frame_hdr:00000000000234B8                 db  94h
.eh_frame_hdr:00000000000234B9                 db  99h
.eh_frame_hdr:00000000000234BA                 db 0FEh
.eh_frame_hdr:00000000000234BB                 db 0FFh
.eh_frame_hdr:00000000000234BC                 db  18h
.eh_frame_hdr:00000000000234BD                 db  21h ; !
.eh_frame_hdr:00000000000234BE                 db    0
.eh_frame_hdr:00000000000234BF                 db    0
.eh_frame_hdr:00000000000234C0                 db 0C4h
.eh_frame_hdr:00000000000234C1                 db  99h
.eh_frame_hdr:00000000000234C2                 db 0FEh
.eh_frame_hdr:00000000000234C3                 db 0FFh
.eh_frame_hdr:00000000000234C4                 db  2Ch ; ,
.eh_frame_hdr:00000000000234C5                 db  21h ; !
.eh_frame_hdr:00000000000234C6                 db    0
.eh_frame_hdr:00000000000234C7                 db    0
.eh_frame_hdr:00000000000234C8                 db 0D4h
.eh_frame_hdr:00000000000234C9                 db  99h
.eh_frame_hdr:00000000000234CA                 db 0FEh
.eh_frame_hdr:00000000000234CB                 db 0FFh
.eh_frame_hdr:00000000000234CC                 db  40h ; @
.eh_frame_hdr:00000000000234CD                 db  21h ; !
.eh_frame_hdr:00000000000234CE                 db    0
.eh_frame_hdr:00000000000234CF                 db    0
.eh_frame_hdr:00000000000234D0                 db  14h
.eh_frame_hdr:00000000000234D1                 db  9Ah
.eh_frame_hdr:00000000000234D2                 db 0FEh
.eh_frame_hdr:00000000000234D3                 db 0FFh
.eh_frame_hdr:00000000000234D4                 db  64h ; d
.eh_frame_hdr:00000000000234D5                 db  21h ; !
.eh_frame_hdr:00000000000234D6                 db    0
.eh_frame_hdr:00000000000234D7                 db    0
.eh_frame_hdr:00000000000234D8                 db  44h ; D
.eh_frame_hdr:00000000000234D9                 db  9Ah
.eh_frame_hdr:00000000000234DA                 db 0FEh
.eh_frame_hdr:00000000000234DB                 db 0FFh
.eh_frame_hdr:00000000000234DC                 db  78h ; x
.eh_frame_hdr:00000000000234DD                 db  21h ; !
.eh_frame_hdr:00000000000234DE                 db    0
.eh_frame_hdr:00000000000234DF                 db    0
.eh_frame_hdr:00000000000234E0                 db 0D4h
.eh_frame_hdr:00000000000234E1                 db  9Ah
.eh_frame_hdr:00000000000234E2                 db 0FEh
.eh_frame_hdr:00000000000234E3                 db 0FFh
.eh_frame_hdr:00000000000234E4                 db  90h
.eh_frame_hdr:00000000000234E5                 db  21h ; !
.eh_frame_hdr:00000000000234E6                 db    0
.eh_frame_hdr:00000000000234E7                 db    0
.eh_frame_hdr:00000000000234E8                 db  24h ; $
.eh_frame_hdr:00000000000234E9                 db  9Bh
.eh_frame_hdr:00000000000234EA                 db 0FEh
.eh_frame_hdr:00000000000234EB                 db 0FFh
.eh_frame_hdr:00000000000234EC                 db 0A8h
.eh_frame_hdr:00000000000234ED                 db  21h ; !
.eh_frame_hdr:00000000000234EE                 db    0
.eh_frame_hdr:00000000000234EF                 db    0
.eh_frame_hdr:00000000000234F0                 db  44h ; D
.eh_frame_hdr:00000000000234F1                 db  9Bh
.eh_frame_hdr:00000000000234F2                 db 0FEh
.eh_frame_hdr:00000000000234F3                 db 0FFh
.eh_frame_hdr:00000000000234F4                 db 0C4h
.eh_frame_hdr:00000000000234F5                 db  21h ; !
.eh_frame_hdr:00000000000234F6                 db    0
.eh_frame_hdr:00000000000234F7                 db    0
.eh_frame_hdr:00000000000234F8                 db  74h ; t
.eh_frame_hdr:00000000000234F9                 db  9Bh
.eh_frame_hdr:00000000000234FA                 db 0FEh
.eh_frame_hdr:00000000000234FB                 db 0FFh
.eh_frame_hdr:00000000000234FC                 db 0E0h
.eh_frame_hdr:00000000000234FD                 db  21h ; !
.eh_frame_hdr:00000000000234FE                 db    0
.eh_frame_hdr:00000000000234FF                 db    0
.eh_frame_hdr:0000000000023500                 db 0A4h
.eh_frame_hdr:0000000000023501                 db  9Bh
.eh_frame_hdr:0000000000023502                 db 0FEh
.eh_frame_hdr:0000000000023503                 db 0FFh
.eh_frame_hdr:0000000000023504                 db    8
.eh_frame_hdr:0000000000023505                 db  22h ; "
.eh_frame_hdr:0000000000023506                 db    0
.eh_frame_hdr:0000000000023507                 db    0
.eh_frame_hdr:0000000000023508                 db 0C4h
.eh_frame_hdr:0000000000023509                 db  9Bh
.eh_frame_hdr:000000000002350A                 db 0FEh
.eh_frame_hdr:000000000002350B                 db 0FFh
.eh_frame_hdr:000000000002350C                 db  24h ; $
.eh_frame_hdr:000000000002350D                 db  22h ; "
.eh_frame_hdr:000000000002350E                 db    0
.eh_frame_hdr:000000000002350F                 db    0
.eh_frame_hdr:0000000000023510                 db    4
.eh_frame_hdr:0000000000023511                 db  9Ch
.eh_frame_hdr:0000000000023512                 db 0FEh
.eh_frame_hdr:0000000000023513                 db 0FFh
.eh_frame_hdr:0000000000023514                 db  3Ch ; <
.eh_frame_hdr:0000000000023515                 db  22h ; "
.eh_frame_hdr:0000000000023516                 db    0
.eh_frame_hdr:0000000000023517                 db    0
.eh_frame_hdr:0000000000023518                 db  54h ; T
.eh_frame_hdr:0000000000023519                 db  9Ch
.eh_frame_hdr:000000000002351A                 db 0FEh
.eh_frame_hdr:000000000002351B                 db 0FFh
.eh_frame_hdr:000000000002351C                 db  58h ; X
.eh_frame_hdr:000000000002351D                 db  22h ; "
.eh_frame_hdr:000000000002351E                 db    0
.eh_frame_hdr:000000000002351F                 db    0
.eh_frame_hdr:0000000000023520                 db  84h
.eh_frame_hdr:0000000000023521                 db  9Ch
.eh_frame_hdr:0000000000023522                 db 0FEh
.eh_frame_hdr:0000000000023523                 db 0FFh
.eh_frame_hdr:0000000000023524                 db  6Ch ; l
.eh_frame_hdr:0000000000023525                 db  22h ; "
.eh_frame_hdr:0000000000023526                 db    0
.eh_frame_hdr:0000000000023527                 db    0
.eh_frame_hdr:0000000000023528                 db  44h ; D
.eh_frame_hdr:0000000000023529                 db 0A3h
.eh_frame_hdr:000000000002352A                 db 0FEh
.eh_frame_hdr:000000000002352B                 db 0FFh
.eh_frame_hdr:000000000002352C                 db 0BCh
.eh_frame_hdr:000000000002352D                 db  22h ; "
.eh_frame_hdr:000000000002352E                 db    0
.eh_frame_hdr:000000000002352F                 db    0
.eh_frame_hdr:0000000000023530                 db  64h ; d
.eh_frame_hdr:0000000000023531                 db 0A7h
.eh_frame_hdr:0000000000023532                 db 0FEh
.eh_frame_hdr:0000000000023533                 db 0FFh
.eh_frame_hdr:0000000000023534                 db  0Ch
.eh_frame_hdr:0000000000023535                 db  23h ; #
.eh_frame_hdr:0000000000023536                 db    0
.eh_frame_hdr:0000000000023537                 db    0
.eh_frame_hdr:0000000000023538                 db  14h
.eh_frame_hdr:0000000000023539                 db 0A8h
.eh_frame_hdr:000000000002353A                 db 0FEh
.eh_frame_hdr:000000000002353B                 db 0FFh
.eh_frame_hdr:000000000002353C                 db  34h ; 4
.eh_frame_hdr:000000000002353D                 db  23h ; #
.eh_frame_hdr:000000000002353E                 db    0
.eh_frame_hdr:000000000002353F                 db    0
.eh_frame_hdr:0000000000023540                 db  34h ; 4
.eh_frame_hdr:0000000000023541                 db 0ACh
.eh_frame_hdr:0000000000023542                 db 0FEh
.eh_frame_hdr:0000000000023543                 db 0FFh
.eh_frame_hdr:0000000000023544                 db  84h
.eh_frame_hdr:0000000000023545                 db  23h ; #
.eh_frame_hdr:0000000000023546                 db    0
.eh_frame_hdr:0000000000023547                 db    0
.eh_frame_hdr:0000000000023548                 db 0B4h
.eh_frame_hdr:0000000000023549                 db 0ACh
.eh_frame_hdr:000000000002354A                 db 0FEh
.eh_frame_hdr:000000000002354B                 db 0FFh
.eh_frame_hdr:000000000002354C                 db 0BCh
.eh_frame_hdr:000000000002354D                 db  23h ; #
.eh_frame_hdr:000000000002354E                 db    0
.eh_frame_hdr:000000000002354F                 db    0
.eh_frame_hdr:0000000000023550                 db 0F4h
.eh_frame_hdr:0000000000023551                 db 0ACh
.eh_frame_hdr:0000000000023552                 db 0FEh
.eh_frame_hdr:0000000000023553                 db 0FFh
.eh_frame_hdr:0000000000023554                 db 0DCh
.eh_frame_hdr:0000000000023555                 db  23h ; #
.eh_frame_hdr:0000000000023556                 db    0
.eh_frame_hdr:0000000000023557                 db    0
.eh_frame_hdr:0000000000023558                 db  54h ; T
.eh_frame_hdr:0000000000023559                 db 0ADh
.eh_frame_hdr:000000000002355A                 db 0FEh
.eh_frame_hdr:000000000002355B                 db 0FFh
.eh_frame_hdr:000000000002355C                 db  0Ch
.eh_frame_hdr:000000000002355D                 db  24h ; $
.eh_frame_hdr:000000000002355E                 db    0
.eh_frame_hdr:000000000002355F                 db    0
.eh_frame_hdr:0000000000023560                 db  74h ; t
.eh_frame_hdr:0000000000023561                 db 0ADh
.eh_frame_hdr:0000000000023562                 db 0FEh
.eh_frame_hdr:0000000000023563                 db 0FFh
.eh_frame_hdr:0000000000023564                 db  20h
.eh_frame_hdr:0000000000023565                 db  24h ; $
.eh_frame_hdr:0000000000023566                 db    0
.eh_frame_hdr:0000000000023567                 db    0
.eh_frame_hdr:0000000000023568                 db  84h
.eh_frame_hdr:0000000000023569                 db 0ADh
.eh_frame_hdr:000000000002356A                 db 0FEh
.eh_frame_hdr:000000000002356B                 db 0FFh
.eh_frame_hdr:000000000002356C                 db  34h ; 4
.eh_frame_hdr:000000000002356D                 db  24h ; $
.eh_frame_hdr:000000000002356E                 db    0
.eh_frame_hdr:000000000002356F                 db    0
.eh_frame_hdr:0000000000023570                 db  94h
.eh_frame_hdr:0000000000023571                 db 0ADh
.eh_frame_hdr:0000000000023572                 db 0FEh
.eh_frame_hdr:0000000000023573                 db 0FFh
.eh_frame_hdr:0000000000023574                 db  48h ; H
.eh_frame_hdr:0000000000023575                 db  24h ; $
.eh_frame_hdr:0000000000023576                 db    0
.eh_frame_hdr:0000000000023577                 db    0
.eh_frame_hdr:0000000000023578                 db 0A4h
.eh_frame_hdr:0000000000023579                 db 0ADh
.eh_frame_hdr:000000000002357A                 db 0FEh
.eh_frame_hdr:000000000002357B                 db 0FFh
.eh_frame_hdr:000000000002357C                 db  5Ch ; \
.eh_frame_hdr:000000000002357D                 db  24h ; $
.eh_frame_hdr:000000000002357E                 db    0
.eh_frame_hdr:000000000002357F                 db    0
.eh_frame_hdr:0000000000023580                 db 0D4h
.eh_frame_hdr:0000000000023581                 db 0ADh
.eh_frame_hdr:0000000000023582                 db 0FEh
.eh_frame_hdr:0000000000023583                 db 0FFh
.eh_frame_hdr:0000000000023584                 db  70h ; p
.eh_frame_hdr:0000000000023585                 db  24h ; $
.eh_frame_hdr:0000000000023586                 db    0
.eh_frame_hdr:0000000000023587                 db    0
.eh_frame_hdr:0000000000023588                 db 0A4h
.eh_frame_hdr:0000000000023589                 db 0AFh
.eh_frame_hdr:000000000002358A                 db 0FEh
.eh_frame_hdr:000000000002358B                 db 0FFh
.eh_frame_hdr:000000000002358C                 db 0ACh
.eh_frame_hdr:000000000002358D                 db  24h ; $
.eh_frame_hdr:000000000002358E                 db    0
.eh_frame_hdr:000000000002358F                 db    0
.eh_frame_hdr:0000000000023590                 db 0B4h
.eh_frame_hdr:0000000000023591                 db 0B0h
.eh_frame_hdr:0000000000023592                 db 0FEh
.eh_frame_hdr:0000000000023593                 db 0FFh
.eh_frame_hdr:0000000000023594                 db 0FCh
.eh_frame_hdr:0000000000023595                 db  24h ; $
.eh_frame_hdr:0000000000023596                 db    0
.eh_frame_hdr:0000000000023597                 db    0
.eh_frame_hdr:0000000000023598                 db  44h ; D
.eh_frame_hdr:0000000000023599                 db 0B1h
.eh_frame_hdr:000000000002359A                 db 0FEh
.eh_frame_hdr:000000000002359B                 db 0FFh
.eh_frame_hdr:000000000002359C                 db  34h ; 4
.eh_frame_hdr:000000000002359D                 db  25h ; %
.eh_frame_hdr:000000000002359E                 db    0
.eh_frame_hdr:000000000002359F                 db    0
.eh_frame_hdr:00000000000235A0                 db  94h
.eh_frame_hdr:00000000000235A1                 db 0B1h
.eh_frame_hdr:00000000000235A2                 db 0FEh
.eh_frame_hdr:00000000000235A3                 db 0FFh
.eh_frame_hdr:00000000000235A4                 db  60h ; `
.eh_frame_hdr:00000000000235A5                 db  25h ; %
.eh_frame_hdr:00000000000235A6                 db    0
.eh_frame_hdr:00000000000235A7                 db    0
.eh_frame_hdr:00000000000235A8                 db 0D4h
.eh_frame_hdr:00000000000235A9                 db 0B1h
.eh_frame_hdr:00000000000235AA                 db 0FEh
.eh_frame_hdr:00000000000235AB                 db 0FFh
.eh_frame_hdr:00000000000235AC                 db  7Ch ; |
.eh_frame_hdr:00000000000235AD                 db  25h ; %
.eh_frame_hdr:00000000000235AE                 db    0
.eh_frame_hdr:00000000000235AF                 db    0
.eh_frame_hdr:00000000000235B0                 db    4
.eh_frame_hdr:00000000000235B1                 db 0B3h
.eh_frame_hdr:00000000000235B2                 db 0FEh
.eh_frame_hdr:00000000000235B3                 db 0FFh
.eh_frame_hdr:00000000000235B4                 db 0B8h
.eh_frame_hdr:00000000000235B5                 db  25h ; %
.eh_frame_hdr:00000000000235B6                 db    0
.eh_frame_hdr:00000000000235B7                 db    0
.eh_frame_hdr:00000000000235B8                 db  74h ; t
.eh_frame_hdr:00000000000235B9                 db 0B3h
.eh_frame_hdr:00000000000235BA                 db 0FEh
.eh_frame_hdr:00000000000235BB                 db 0FFh
.eh_frame_hdr:00000000000235BC                 db 0DCh
.eh_frame_hdr:00000000000235BD                 db  25h ; %
.eh_frame_hdr:00000000000235BE                 db    0
.eh_frame_hdr:00000000000235BF                 db    0
.eh_frame_hdr:00000000000235C0                 db 0E4h
.eh_frame_hdr:00000000000235C1                 db 0B3h
.eh_frame_hdr:00000000000235C2                 db 0FEh
.eh_frame_hdr:00000000000235C3                 db 0FFh
.eh_frame_hdr:00000000000235C4                 db  20h
.eh_frame_hdr:00000000000235C5                 db  26h ; &
.eh_frame_hdr:00000000000235C6                 db    0
.eh_frame_hdr:00000000000235C7                 db    0
.eh_frame_hdr:00000000000235C8                 db  44h ; D
.eh_frame_hdr:00000000000235C9                 db 0B4h
.eh_frame_hdr:00000000000235CA                 db 0FEh
.eh_frame_hdr:00000000000235CB                 db 0FFh
.eh_frame_hdr:00000000000235CC                 db  4Ch ; L
.eh_frame_hdr:00000000000235CD                 db  26h ; &
.eh_frame_hdr:00000000000235CE                 db    0
.eh_frame_hdr:00000000000235CF                 db    0
.eh_frame_hdr:00000000000235D0                 db 0B4h
.eh_frame_hdr:00000000000235D1                 db 0B4h
.eh_frame_hdr:00000000000235D2                 db 0FEh
.eh_frame_hdr:00000000000235D3                 db 0FFh
.eh_frame_hdr:00000000000235D4                 db  74h ; t
.eh_frame_hdr:00000000000235D5                 db  26h ; &
.eh_frame_hdr:00000000000235D6                 db    0
.eh_frame_hdr:00000000000235D7                 db    0
.eh_frame_hdr:00000000000235D8                 db  24h ; $
.eh_frame_hdr:00000000000235D9                 db 0B5h
.eh_frame_hdr:00000000000235DA                 db 0FEh
.eh_frame_hdr:00000000000235DB                 db 0FFh
.eh_frame_hdr:00000000000235DC                 db  94h
.eh_frame_hdr:00000000000235DD                 db  26h ; &
.eh_frame_hdr:00000000000235DE                 db    0
.eh_frame_hdr:00000000000235DF                 db    0
.eh_frame_hdr:00000000000235E0                 db  64h ; d
.eh_frame_hdr:00000000000235E1                 db 0B5h
.eh_frame_hdr:00000000000235E2                 db 0FEh
.eh_frame_hdr:00000000000235E3                 db 0FFh
.eh_frame_hdr:00000000000235E4                 db 0A8h
.eh_frame_hdr:00000000000235E5                 db  26h ; &
.eh_frame_hdr:00000000000235E6                 db    0
.eh_frame_hdr:00000000000235E7                 db    0
.eh_frame_hdr:00000000000235E8                 db 0E4h
.eh_frame_hdr:00000000000235E9                 db 0B7h
.eh_frame_hdr:00000000000235EA                 db 0FEh
.eh_frame_hdr:00000000000235EB                 db 0FFh
.eh_frame_hdr:00000000000235EC                 db 0F8h
.eh_frame_hdr:00000000000235ED                 db  26h ; &
.eh_frame_hdr:00000000000235EE                 db    0
.eh_frame_hdr:00000000000235EF                 db    0
.eh_frame_hdr:00000000000235F0                 db  94h
.eh_frame_hdr:00000000000235F1                 db 0B8h
.eh_frame_hdr:00000000000235F2                 db 0FEh
.eh_frame_hdr:00000000000235F3                 db 0FFh
.eh_frame_hdr:00000000000235F4                 db  3Ch ; <
.eh_frame_hdr:00000000000235F5                 db  27h ; '
.eh_frame_hdr:00000000000235F6                 db    0
.eh_frame_hdr:00000000000235F7                 db    0
.eh_frame_hdr:00000000000235F8                 db  54h ; T
.eh_frame_hdr:00000000000235F9                 db 0B9h
.eh_frame_hdr:00000000000235FA                 db 0FEh
.eh_frame_hdr:00000000000235FB                 db 0FFh
.eh_frame_hdr:00000000000235FC                 db  58h ; X
.eh_frame_hdr:00000000000235FD                 db  27h ; '
.eh_frame_hdr:00000000000235FE                 db    0
.eh_frame_hdr:00000000000235FF                 db    0
.eh_frame_hdr:0000000000023600                 db  34h ; 4
.eh_frame_hdr:0000000000023601                 db 0C3h
.eh_frame_hdr:0000000000023602                 db 0FEh
.eh_frame_hdr:0000000000023603                 db 0FFh
.eh_frame_hdr:0000000000023604                 db 0A8h
.eh_frame_hdr:0000000000023605                 db  27h ; '
.eh_frame_hdr:0000000000023606                 db    0
.eh_frame_hdr:0000000000023607                 db    0
.eh_frame_hdr:0000000000023608                 db 0E4h
.eh_frame_hdr:0000000000023609                 db 0C6h
.eh_frame_hdr:000000000002360A                 db 0FEh
.eh_frame_hdr:000000000002360B                 db 0FFh
.eh_frame_hdr:000000000002360C                 db 0F4h
.eh_frame_hdr:000000000002360D                 db  27h ; '
.eh_frame_hdr:000000000002360E                 db    0
.eh_frame_hdr:000000000002360F                 db    0
.eh_frame_hdr:0000000000023610                 db  74h ; t
.eh_frame_hdr:0000000000023611                 db 0C8h
.eh_frame_hdr:0000000000023612                 db 0FEh
.eh_frame_hdr:0000000000023613                 db 0FFh
.eh_frame_hdr:0000000000023614                 db  24h ; $
.eh_frame_hdr:0000000000023615                 db  28h ; (
.eh_frame_hdr:0000000000023616                 db    0
.eh_frame_hdr:0000000000023617                 db    0
.eh_frame_hdr:0000000000023618                 db 0F4h
.eh_frame_hdr:0000000000023619                 db 0CFh
.eh_frame_hdr:000000000002361A                 db 0FEh
.eh_frame_hdr:000000000002361B                 db 0FFh
.eh_frame_hdr:000000000002361C                 db  88h
.eh_frame_hdr:000000000002361D                 db  28h ; (
.eh_frame_hdr:000000000002361E                 db    0
.eh_frame_hdr:000000000002361F                 db    0
.eh_frame_hdr:0000000000023620                 db  24h ; $
.eh_frame_hdr:0000000000023621                 db 0D0h
.eh_frame_hdr:0000000000023622                 db 0FEh
.eh_frame_hdr:0000000000023623                 db 0FFh
.eh_frame_hdr:0000000000023624                 db 0A0h
.eh_frame_hdr:0000000000023625                 db  28h ; (
.eh_frame_hdr:0000000000023626                 db    0
.eh_frame_hdr:0000000000023627                 db    0
.eh_frame_hdr:0000000000023628                 db  74h ; t
.eh_frame_hdr:0000000000023629                 db 0D1h
.eh_frame_hdr:000000000002362A                 db 0FEh
.eh_frame_hdr:000000000002362B                 db 0FFh
.eh_frame_hdr:000000000002362C                 db    4
.eh_frame_hdr:000000000002362D                 db  29h ; )
.eh_frame_hdr:000000000002362E                 db    0
.eh_frame_hdr:000000000002362F                 db    0
.eh_frame_hdr:0000000000023630                 db    4
.eh_frame_hdr:0000000000023631                 db 0D2h
.eh_frame_hdr:0000000000023632                 db 0FEh
.eh_frame_hdr:0000000000023633                 db 0FFh
.eh_frame_hdr:0000000000023634                 db  44h ; D
.eh_frame_hdr:0000000000023635                 db  29h ; )
.eh_frame_hdr:0000000000023636                 db    0
.eh_frame_hdr:0000000000023637                 db    0
.eh_frame_hdr:0000000000023638                 db  94h
.eh_frame_hdr:0000000000023639                 db 0D2h
.eh_frame_hdr:000000000002363A                 db 0FEh
.eh_frame_hdr:000000000002363B                 db 0FFh
.eh_frame_hdr:000000000002363C                 db  60h ; `
.eh_frame_hdr:000000000002363D                 db  29h ; )
.eh_frame_hdr:000000000002363E                 db    0
.eh_frame_hdr:000000000002363F                 db    0
.eh_frame_hdr:0000000000023640                 db 0D4h
.eh_frame_hdr:0000000000023641                 db 0D2h
.eh_frame_hdr:0000000000023642                 db 0FEh
.eh_frame_hdr:0000000000023643                 db 0FFh
.eh_frame_hdr:0000000000023644                 db  7Ch ; |
.eh_frame_hdr:0000000000023645                 db  29h ; )
.eh_frame_hdr:0000000000023646                 db    0
.eh_frame_hdr:0000000000023647                 db    0
.eh_frame_hdr:0000000000023648                 db  24h ; $
.eh_frame_hdr:0000000000023649                 db 0DBh
.eh_frame_hdr:000000000002364A                 db 0FEh
.eh_frame_hdr:000000000002364B                 db 0FFh
.eh_frame_hdr:000000000002364C                 db 0F4h
.eh_frame_hdr:000000000002364D                 db  29h ; )
.eh_frame_hdr:000000000002364E                 db    0
.eh_frame_hdr:000000000002364F                 db    0
.eh_frame_hdr:0000000000023650                 db  54h ; T
.eh_frame_hdr:0000000000023651                 db 0DCh
.eh_frame_hdr:0000000000023652                 db 0FEh
.eh_frame_hdr:0000000000023653                 db 0FFh
.eh_frame_hdr:0000000000023654                 db    8
.eh_frame_hdr:0000000000023655                 db  2Ah ; *
.eh_frame_hdr:0000000000023656                 db    0
.eh_frame_hdr:0000000000023657                 db    0
.eh_frame_hdr:0000000000023658                 db  74h ; t
.eh_frame_hdr:0000000000023659                 db 0DCh
.eh_frame_hdr:000000000002365A                 db 0FEh
.eh_frame_hdr:000000000002365B                 db 0FFh
.eh_frame_hdr:000000000002365C                 db  1Ch
.eh_frame_hdr:000000000002365D                 db  2Ah ; *
.eh_frame_hdr:000000000002365E                 db    0
.eh_frame_hdr:000000000002365F                 db    0
.eh_frame_hdr:0000000000023660                 db 0A4h
.eh_frame_hdr:0000000000023661                 db 0DEh
.eh_frame_hdr:0000000000023662                 db 0FEh
.eh_frame_hdr:0000000000023663                 db 0FFh
.eh_frame_hdr:0000000000023664                 db 0B0h
.eh_frame_hdr:0000000000023665                 db  2Ah ; *
.eh_frame_hdr:0000000000023666                 db    0
.eh_frame_hdr:0000000000023667                 db    0
.eh_frame_hdr:0000000000023668                 db  14h
.eh_frame_hdr:0000000000023669                 db 0DFh
.eh_frame_hdr:000000000002366A                 db 0FEh
.eh_frame_hdr:000000000002366B                 db 0FFh
.eh_frame_hdr:000000000002366C                 db 0C4h
.eh_frame_hdr:000000000002366D                 db  2Ah ; *
.eh_frame_hdr:000000000002366E                 db    0
.eh_frame_hdr:000000000002366F                 db    0
.eh_frame_hdr:0000000000023670                 db  84h
.eh_frame_hdr:0000000000023671                 db 0DFh
.eh_frame_hdr:0000000000023672                 db 0FEh
.eh_frame_hdr:0000000000023673                 db 0FFh
.eh_frame_hdr:0000000000023674                 db 0F0h
.eh_frame_hdr:0000000000023675                 db  2Ah ; *
.eh_frame_hdr:0000000000023676                 db    0
.eh_frame_hdr:0000000000023677                 db    0
.eh_frame_hdr:0000000000023678                 db 0E4h
.eh_frame_hdr:0000000000023679                 db 0DFh
.eh_frame_hdr:000000000002367A                 db 0FEh
.eh_frame_hdr:000000000002367B                 db 0FFh
.eh_frame_hdr:000000000002367C                 db  1Ch
.eh_frame_hdr:000000000002367D                 db  2Bh ; +
.eh_frame_hdr:000000000002367E                 db    0
.eh_frame_hdr:000000000002367F                 db    0
.eh_frame_hdr:0000000000023680                 db  84h
.eh_frame_hdr:0000000000023681                 db 0E0h
.eh_frame_hdr:0000000000023682                 db 0FEh
.eh_frame_hdr:0000000000023683                 db 0FFh
.eh_frame_hdr:0000000000023684                 db  50h ; P
.eh_frame_hdr:0000000000023685                 db  2Bh ; +
.eh_frame_hdr:0000000000023686                 db    0
.eh_frame_hdr:0000000000023687                 db    0
.eh_frame_hdr:0000000000023688                 db 0F4h
.eh_frame_hdr:0000000000023689                 db 0E0h
.eh_frame_hdr:000000000002368A                 db 0FEh
.eh_frame_hdr:000000000002368B                 db 0FFh
.eh_frame_hdr:000000000002368C                 db  7Ch ; |
.eh_frame_hdr:000000000002368D                 db  2Bh ; +
.eh_frame_hdr:000000000002368E                 db    0
.eh_frame_hdr:000000000002368F                 db    0
.eh_frame_hdr:0000000000023690                 db  24h ; $
.eh_frame_hdr:0000000000023691                 db 0E2h
.eh_frame_hdr:0000000000023692                 db 0FEh
.eh_frame_hdr:0000000000023693                 db 0FFh
.eh_frame_hdr:0000000000023694                 db 0B4h
.eh_frame_hdr:0000000000023695                 db  2Bh ; +
.eh_frame_hdr:0000000000023696                 db    0
.eh_frame_hdr:0000000000023697                 db    0
.eh_frame_hdr:0000000000023698                 db  14h
.eh_frame_hdr:0000000000023699                 db 0E3h
.eh_frame_hdr:000000000002369A                 db 0FEh
.eh_frame_hdr:000000000002369B                 db 0FFh
.eh_frame_hdr:000000000002369C                 db    4
.eh_frame_hdr:000000000002369D                 db  2Ch ; ,
.eh_frame_hdr:000000000002369E                 db    0
.eh_frame_hdr:000000000002369F                 db    0
.eh_frame_hdr:00000000000236A0                 db  84h
.eh_frame_hdr:00000000000236A1                 db 0E3h
.eh_frame_hdr:00000000000236A2                 db 0FEh
.eh_frame_hdr:00000000000236A3                 db 0FFh
.eh_frame_hdr:00000000000236A4                 db  34h ; 4
.eh_frame_hdr:00000000000236A5                 db  2Ch ; ,
.eh_frame_hdr:00000000000236A6                 db    0
.eh_frame_hdr:00000000000236A7                 db    0
.eh_frame_hdr:00000000000236A8                 db  54h ; T
.eh_frame_hdr:00000000000236A9                 db 0E5h
.eh_frame_hdr:00000000000236AA                 db 0FEh
.eh_frame_hdr:00000000000236AB                 db 0FFh
.eh_frame_hdr:00000000000236AC                 db  80h
.eh_frame_hdr:00000000000236AD                 db  2Ch ; ,
.eh_frame_hdr:00000000000236AE                 db    0
.eh_frame_hdr:00000000000236AF                 db    0
.eh_frame_hdr:00000000000236B0                 db  74h ; t
.eh_frame_hdr:00000000000236B1                 db 0EBh
.eh_frame_hdr:00000000000236B2                 db 0FEh
.eh_frame_hdr:00000000000236B3                 db 0FFh
.eh_frame_hdr:00000000000236B4                 db 0CCh
.eh_frame_hdr:00000000000236B5                 db  2Ch ; ,
.eh_frame_hdr:00000000000236B6                 db    0
.eh_frame_hdr:00000000000236B7                 db    0
.eh_frame_hdr:00000000000236B8                 db 0C4h
.eh_frame_hdr:00000000000236B9                 db 0ECh
.eh_frame_hdr:00000000000236BA                 db 0FEh
.eh_frame_hdr:00000000000236BB                 db 0FFh
.eh_frame_hdr:00000000000236BC                 db  28h ; (
.eh_frame_hdr:00000000000236BD                 db  2Dh ; -
.eh_frame_hdr:00000000000236BE                 db    0
.eh_frame_hdr:00000000000236BF                 db    0
.eh_frame_hdr:00000000000236C0                 db  54h ; T
.eh_frame_hdr:00000000000236C1                 db 0EDh
.eh_frame_hdr:00000000000236C2                 db 0FEh
.eh_frame_hdr:00000000000236C3                 db 0FFh
.eh_frame_hdr:00000000000236C4                 db  54h ; T
.eh_frame_hdr:00000000000236C5                 db  2Dh ; -
.eh_frame_hdr:00000000000236C6                 db    0
.eh_frame_hdr:00000000000236C7                 db    0
.eh_frame_hdr:00000000000236C8                 db  84h
.eh_frame_hdr:00000000000236C9                 db 0EDh
.eh_frame_hdr:00000000000236CA                 db 0FEh
.eh_frame_hdr:00000000000236CB                 db 0FFh
.eh_frame_hdr:00000000000236CC                 db  70h ; p
.eh_frame_hdr:00000000000236CD                 db  2Dh ; -
.eh_frame_hdr:00000000000236CE                 db    0
.eh_frame_hdr:00000000000236CF                 db    0
.eh_frame_hdr:00000000000236D0                 db 0B4h
.eh_frame_hdr:00000000000236D1                 db 0EDh
.eh_frame_hdr:00000000000236D2                 db 0FEh
.eh_frame_hdr:00000000000236D3                 db 0FFh
.eh_frame_hdr:00000000000236D4                 db  84h
.eh_frame_hdr:00000000000236D5                 db  2Dh ; -
.eh_frame_hdr:00000000000236D6                 db    0
.eh_frame_hdr:00000000000236D7                 db    0
.eh_frame_hdr:00000000000236D8                 db 0D4h
.eh_frame_hdr:00000000000236D9                 db 0EDh
.eh_frame_hdr:00000000000236DA                 db 0FEh
.eh_frame_hdr:00000000000236DB                 db 0FFh
.eh_frame_hdr:00000000000236DC                 db  9Ch
.eh_frame_hdr:00000000000236DD                 db  2Dh ; -
.eh_frame_hdr:00000000000236DE                 db    0
.eh_frame_hdr:00000000000236DF                 db    0
.eh_frame_hdr:00000000000236E0                 db 0A4h
.eh_frame_hdr:00000000000236E1                 db 0EFh
.eh_frame_hdr:00000000000236E2                 db 0FEh
.eh_frame_hdr:00000000000236E3                 db 0FFh
.eh_frame_hdr:00000000000236E4                 db 0E8h
.eh_frame_hdr:00000000000236E5                 db  2Dh ; -
.eh_frame_hdr:00000000000236E6                 db    0
.eh_frame_hdr:00000000000236E7                 db    0
.eh_frame_hdr:00000000000236E8                 db  44h ; D
.eh_frame_hdr:00000000000236E9                 db 0F0h
.eh_frame_hdr:00000000000236EA                 db 0FEh
.eh_frame_hdr:00000000000236EB                 db 0FFh
.eh_frame_hdr:00000000000236EC                 db  20h
.eh_frame_hdr:00000000000236ED                 db  2Eh ; .
.eh_frame_hdr:00000000000236EE                 db    0
.eh_frame_hdr:00000000000236EF                 db    0
.eh_frame_hdr:00000000000236F0                 db 0C4h
.eh_frame_hdr:00000000000236F1                 db 0F2h
.eh_frame_hdr:00000000000236F2                 db 0FEh
.eh_frame_hdr:00000000000236F3                 db 0FFh
.eh_frame_hdr:00000000000236F4                 db  6Ch ; l
.eh_frame_hdr:00000000000236F5                 db  2Eh ; .
.eh_frame_hdr:00000000000236F6                 db    0
.eh_frame_hdr:00000000000236F7                 db    0
.eh_frame_hdr:00000000000236F8                 db  24h ; $
.eh_frame_hdr:00000000000236F9                 db 0F3h
.eh_frame_hdr:00000000000236FA                 db 0FEh
.eh_frame_hdr:00000000000236FB                 db 0FFh
.eh_frame_hdr:00000000000236FC                 db  88h
.eh_frame_hdr:00000000000236FD                 db  2Eh ; .
.eh_frame_hdr:00000000000236FE                 db    0
.eh_frame_hdr:00000000000236FF                 db    0
.eh_frame_hdr:0000000000023700                 db  64h ; d
.eh_frame_hdr:0000000000023701                 db 0F3h
.eh_frame_hdr:0000000000023702                 db 0FEh
.eh_frame_hdr:0000000000023703                 db 0FFh
.eh_frame_hdr:0000000000023704                 db 0A8h
.eh_frame_hdr:0000000000023705                 db  2Eh ; .
.eh_frame_hdr:0000000000023706                 db    0
.eh_frame_hdr:0000000000023707                 db    0
.eh_frame_hdr:0000000000023708                 db 0C4h
.eh_frame_hdr:0000000000023709                 db 0F4h
.eh_frame_hdr:000000000002370A                 db 0FEh
.eh_frame_hdr:000000000002370B                 db 0FFh
.eh_frame_hdr:000000000002370C                 db 0E4h
.eh_frame_hdr:000000000002370D                 db  2Eh ; .
.eh_frame_hdr:000000000002370E                 db    0
.eh_frame_hdr:000000000002370F                 db    0
.eh_frame_hdr:0000000000023710                 db  84h
.eh_frame_hdr:0000000000023711                 db 0F5h
.eh_frame_hdr:0000000000023712                 db 0FEh
.eh_frame_hdr:0000000000023713                 db 0FFh
.eh_frame_hdr:0000000000023714                 db  20h
.eh_frame_hdr:0000000000023715                 db  2Fh ; /
.eh_frame_hdr:0000000000023716                 db    0
.eh_frame_hdr:0000000000023717                 db    0
.eh_frame_hdr:0000000000023718                 db 0D4h
.eh_frame_hdr:0000000000023719                 db 0F5h
.eh_frame_hdr:000000000002371A                 db 0FEh
.eh_frame_hdr:000000000002371B                 db 0FFh
.eh_frame_hdr:000000000002371C                 db  34h ; 4
.eh_frame_hdr:000000000002371D                 db  2Fh ; /
.eh_frame_hdr:000000000002371E                 db    0
.eh_frame_hdr:000000000002371F                 db    0
.eh_frame_hdr:0000000000023720                 db  34h ; 4
.eh_frame_hdr:0000000000023721                 db 0F6h
.eh_frame_hdr:0000000000023722                 db 0FEh
.eh_frame_hdr:0000000000023723                 db 0FFh
.eh_frame_hdr:0000000000023724                 db  48h ; H
.eh_frame_hdr:0000000000023725                 db  2Fh ; /
.eh_frame_hdr:0000000000023726                 db    0
.eh_frame_hdr:0000000000023727                 db    0
.eh_frame_hdr:0000000000023728                 db 0B4h
.eh_frame_hdr:0000000000023729                 db 0F6h
.eh_frame_hdr:000000000002372A                 db 0FEh
.eh_frame_hdr:000000000002372B                 db 0FFh
.eh_frame_hdr:000000000002372C                 db  5Ch ; \
.eh_frame_hdr:000000000002372D                 db  2Fh ; /
.eh_frame_hdr:000000000002372E                 db    0
.eh_frame_hdr:000000000002372F                 db    0
.eh_frame_hdr:0000000000023730                 db 0B4h
.eh_frame_hdr:0000000000023731                 db 0F7h
.eh_frame_hdr:0000000000023732                 db 0FEh
.eh_frame_hdr:0000000000023733                 db 0FFh
.eh_frame_hdr:0000000000023734                 db 0C0h
.eh_frame_hdr:0000000000023735                 db  2Fh ; /
.eh_frame_hdr:0000000000023736                 db    0
.eh_frame_hdr:0000000000023737                 db    0
.eh_frame_hdr:0000000000023738                 db 0F4h
.eh_frame_hdr:0000000000023739                 db 0F7h
.eh_frame_hdr:000000000002373A                 db 0FEh
.eh_frame_hdr:000000000002373B                 db 0FFh
.eh_frame_hdr:000000000002373C                 db 0D4h
.eh_frame_hdr:000000000002373D                 db  2Fh ; /
.eh_frame_hdr:000000000002373E                 db    0
.eh_frame_hdr:000000000002373F                 db    0
.eh_frame_hdr:0000000000023740                 db  84h
.eh_frame_hdr:0000000000023741                 db 0F8h
.eh_frame_hdr:0000000000023742                 db 0FEh
.eh_frame_hdr:0000000000023743                 db 0FFh
.eh_frame_hdr:0000000000023744                 db 0E8h
.eh_frame_hdr:0000000000023745                 db  2Fh ; /
.eh_frame_hdr:0000000000023746                 db    0
.eh_frame_hdr:0000000000023747                 db    0
.eh_frame_hdr:0000000000023748                 db 0E4h
.eh_frame_hdr:0000000000023749                 db 0F8h
.eh_frame_hdr:000000000002374A                 db 0FEh
.eh_frame_hdr:000000000002374B                 db 0FFh
.eh_frame_hdr:000000000002374C                 db 0FCh
.eh_frame_hdr:000000000002374D                 db  2Fh ; /
.eh_frame_hdr:000000000002374E                 db    0
.eh_frame_hdr:000000000002374F                 db    0
.eh_frame_hdr:0000000000023750                 db  54h ; T
.eh_frame_hdr:0000000000023751                 db 0FBh
.eh_frame_hdr:0000000000023752                 db 0FEh
.eh_frame_hdr:0000000000023753                 db 0FFh
.eh_frame_hdr:0000000000023754                 db  4Ch ; L
.eh_frame_hdr:0000000000023755                 db  30h ; 0
.eh_frame_hdr:0000000000023756                 db    0
.eh_frame_hdr:0000000000023757                 db    0
.eh_frame_hdr:0000000000023758                 db  34h ; 4
.eh_frame_hdr:0000000000023759                 db 0FDh
.eh_frame_hdr:000000000002375A                 db 0FEh
.eh_frame_hdr:000000000002375B                 db 0FFh
.eh_frame_hdr:000000000002375C                 db  84h
.eh_frame_hdr:000000000002375D                 db  30h ; 0
.eh_frame_hdr:000000000002375E                 db    0
.eh_frame_hdr:000000000002375F                 db    0
.eh_frame_hdr:0000000000023760                 db 0E4h
.eh_frame_hdr:0000000000023761                 db 0FFh
.eh_frame_hdr:0000000000023762                 db 0FEh
.eh_frame_hdr:0000000000023763                 db 0FFh
.eh_frame_hdr:0000000000023764                 db 0D4h
.eh_frame_hdr:0000000000023765                 db  30h ; 0
.eh_frame_hdr:0000000000023766                 db    0
.eh_frame_hdr:0000000000023767                 db    0
.eh_frame_hdr:0000000000023768                 db  44h ; D
.eh_frame_hdr:0000000000023769                 db    1
.eh_frame_hdr:000000000002376A                 db 0FFh
.eh_frame_hdr:000000000002376B                 db 0FFh
.eh_frame_hdr:000000000002376C                 db  20h
.eh_frame_hdr:000000000002376D                 db  31h ; 1
.eh_frame_hdr:000000000002376E                 db    0
.eh_frame_hdr:000000000002376F                 db    0
.eh_frame_hdr:0000000000023770                 db 0F4h
.eh_frame_hdr:0000000000023771                 db    2
.eh_frame_hdr:0000000000023772                 db 0FFh
.eh_frame_hdr:0000000000023773                 db 0FFh
.eh_frame_hdr:0000000000023774                 db  70h ; p
.eh_frame_hdr:0000000000023775                 db  31h ; 1
.eh_frame_hdr:0000000000023776                 db    0
.eh_frame_hdr:0000000000023777                 db    0
.eh_frame_hdr:0000000000023778                 db 0D4h
.eh_frame_hdr:0000000000023779                 db    3
.eh_frame_hdr:000000000002377A                 db 0FFh
.eh_frame_hdr:000000000002377B                 db 0FFh
.eh_frame_hdr:000000000002377C                 db  94h
.eh_frame_hdr:000000000002377D                 db  31h ; 1
.eh_frame_hdr:000000000002377E                 db    0
.eh_frame_hdr:000000000002377F                 db    0
.eh_frame_hdr:0000000000023780                 db 0B4h
.eh_frame_hdr:0000000000023781                 db    4
.eh_frame_hdr:0000000000023782                 db 0FFh
.eh_frame_hdr:0000000000023783                 db 0FFh
.eh_frame_hdr:0000000000023784                 db 0D8h
.eh_frame_hdr:0000000000023785                 db  31h ; 1
.eh_frame_hdr:0000000000023786                 db    0
.eh_frame_hdr:0000000000023787                 db    0
.eh_frame_hdr:0000000000023788                 db 0F4h
.eh_frame_hdr:0000000000023789                 db    6
.eh_frame_hdr:000000000002378A                 db 0FFh
.eh_frame_hdr:000000000002378B                 db 0FFh
.eh_frame_hdr:000000000002378C                 db  28h ; (
.eh_frame_hdr:000000000002378D                 db  32h ; 2
.eh_frame_hdr:000000000002378E                 db    0
.eh_frame_hdr:000000000002378F                 db    0
.eh_frame_hdr:0000000000023790                 db  94h
.eh_frame_hdr:0000000000023791                 db    7
.eh_frame_hdr:0000000000023792                 db 0FFh
.eh_frame_hdr:0000000000023793                 db 0FFh
.eh_frame_hdr:0000000000023794                 db  54h ; T
.eh_frame_hdr:0000000000023795                 db  32h ; 2
.eh_frame_hdr:0000000000023796                 db    0
.eh_frame_hdr:0000000000023797                 db    0
.eh_frame_hdr:0000000000023798                 db  24h ; $
.eh_frame_hdr:0000000000023799                 db    8
.eh_frame_hdr:000000000002379A                 db 0FFh
.eh_frame_hdr:000000000002379B                 db 0FFh
.eh_frame_hdr:000000000002379C                 db  90h
.eh_frame_hdr:000000000002379D                 db  32h ; 2
.eh_frame_hdr:000000000002379E                 db    0
.eh_frame_hdr:000000000002379F                 db    0
.eh_frame_hdr:00000000000237A0                 db  84h
.eh_frame_hdr:00000000000237A1                 db    9
.eh_frame_hdr:00000000000237A2                 db 0FFh
.eh_frame_hdr:00000000000237A3                 db 0FFh
.eh_frame_hdr:00000000000237A4                 db 0F4h
.eh_frame_hdr:00000000000237A5                 db  32h ; 2
.eh_frame_hdr:00000000000237A6                 db    0
.eh_frame_hdr:00000000000237A7                 db    0
.eh_frame_hdr:00000000000237A8                 db  44h ; D
.eh_frame_hdr:00000000000237A9                 db  0Ch
.eh_frame_hdr:00000000000237AA                 db 0FFh
.eh_frame_hdr:00000000000237AB                 db 0FFh
.eh_frame_hdr:00000000000237AC                 db  40h ; @
.eh_frame_hdr:00000000000237AD                 db  33h ; 3
.eh_frame_hdr:00000000000237AE                 db    0
.eh_frame_hdr:00000000000237AF                 db    0
.eh_frame_hdr:00000000000237B0                 db  44h ; D
.eh_frame_hdr:00000000000237B1                 db  0Eh
.eh_frame_hdr:00000000000237B2                 db 0FFh
.eh_frame_hdr:00000000000237B3                 db 0FFh
.eh_frame_hdr:00000000000237B4                 db  8Ch
.eh_frame_hdr:00000000000237B5                 db  33h ; 3
.eh_frame_hdr:00000000000237B6                 db    0
.eh_frame_hdr:00000000000237B7                 db    0
.eh_frame_hdr:00000000000237B8                 db  24h ; $
.eh_frame_hdr:00000000000237B9                 db  0Fh
.eh_frame_hdr:00000000000237BA                 db 0FFh
.eh_frame_hdr:00000000000237BB                 db 0FFh
.eh_frame_hdr:00000000000237BC                 db 0D8h
.eh_frame_hdr:00000000000237BD                 db  33h ; 3
.eh_frame_hdr:00000000000237BE                 db    0
.eh_frame_hdr:00000000000237BF                 db    0
.eh_frame_hdr:00000000000237C0                 db 0C4h
.eh_frame_hdr:00000000000237C1                 db  12h
.eh_frame_hdr:00000000000237C2                 db 0FFh
.eh_frame_hdr:00000000000237C3                 db 0FFh
.eh_frame_hdr:00000000000237C4                 db  24h ; $
.eh_frame_hdr:00000000000237C5                 db  34h ; 4
.eh_frame_hdr:00000000000237C6                 db    0
.eh_frame_hdr:00000000000237C7                 db    0
.eh_frame_hdr:00000000000237C8                 db  14h
.eh_frame_hdr:00000000000237C9                 db  14h
.eh_frame_hdr:00000000000237CA                 db 0FFh
.eh_frame_hdr:00000000000237CB                 db 0FFh
.eh_frame_hdr:00000000000237CC                 db  70h ; p
.eh_frame_hdr:00000000000237CD                 db  34h ; 4
.eh_frame_hdr:00000000000237CE                 db    0
.eh_frame_hdr:00000000000237CF                 db    0
.eh_frame_hdr:00000000000237D0                 db    4
.eh_frame_hdr:00000000000237D1                 db  15h
.eh_frame_hdr:00000000000237D2                 db 0FFh
.eh_frame_hdr:00000000000237D3                 db 0FFh
.eh_frame_hdr:00000000000237D4                 db 0B4h
.eh_frame_hdr:00000000000237D5                 db  34h ; 4
.eh_frame_hdr:00000000000237D6                 db    0
.eh_frame_hdr:00000000000237D7                 db    0
.eh_frame_hdr:00000000000237D8                 db  14h
.eh_frame_hdr:00000000000237D9                 db  16h
.eh_frame_hdr:00000000000237DA                 db 0FFh
.eh_frame_hdr:00000000000237DB                 db 0FFh
.eh_frame_hdr:00000000000237DC                 db 0DCh
.eh_frame_hdr:00000000000237DD                 db  34h ; 4
.eh_frame_hdr:00000000000237DE                 db    0
.eh_frame_hdr:00000000000237DF                 db    0
.eh_frame_hdr:00000000000237E0                 db 0E4h
.eh_frame_hdr:00000000000237E1                 db  16h
.eh_frame_hdr:00000000000237E2                 db 0FFh
.eh_frame_hdr:00000000000237E3                 db 0FFh
.eh_frame_hdr:00000000000237E4                 db  14h
.eh_frame_hdr:00000000000237E5                 db  35h ; 5
.eh_frame_hdr:00000000000237E6                 db    0
.eh_frame_hdr:00000000000237E7                 db    0
.eh_frame_hdr:00000000000237E8                 db  84h
.eh_frame_hdr:00000000000237E9                 db  1Eh
.eh_frame_hdr:00000000000237EA                 db 0FFh
.eh_frame_hdr:00000000000237EB                 db 0FFh
.eh_frame_hdr:00000000000237EC                 db  64h ; d
.eh_frame_hdr:00000000000237ED                 db  35h ; 5
.eh_frame_hdr:00000000000237EE                 db    0
.eh_frame_hdr:00000000000237EF                 db    0
.eh_frame_hdr:00000000000237F0                 db 0C4h
.eh_frame_hdr:00000000000237F1                 db  20h
.eh_frame_hdr:00000000000237F2                 db 0FFh
.eh_frame_hdr:00000000000237F3                 db 0FFh
.eh_frame_hdr:00000000000237F4                 db 0B4h
.eh_frame_hdr:00000000000237F5                 db  35h ; 5
.eh_frame_hdr:00000000000237F6                 db    0
.eh_frame_hdr:00000000000237F7                 db    0
.eh_frame_hdr:00000000000237F8                 db  64h ; d
.eh_frame_hdr:00000000000237F9                 db  2Ch ; ,
.eh_frame_hdr:00000000000237FA                 db 0FFh
.eh_frame_hdr:00000000000237FB                 db 0FFh
.eh_frame_hdr:00000000000237FC                 db    4
.eh_frame_hdr:00000000000237FD                 db  36h ; 6
.eh_frame_hdr:00000000000237FE                 db    0
.eh_frame_hdr:00000000000237FF                 db    0
.eh_frame_hdr:0000000000023800                 db 0F4h
.eh_frame_hdr:0000000000023801                 db  2Ch ; ,
.eh_frame_hdr:0000000000023802                 db 0FFh
.eh_frame_hdr:0000000000023803                 db 0FFh
.eh_frame_hdr:0000000000023804                 db  38h ; 8
.eh_frame_hdr:0000000000023805                 db  36h ; 6
.eh_frame_hdr:0000000000023806                 db    0
.eh_frame_hdr:0000000000023807                 db    0
.eh_frame_hdr:0000000000023808                 db  44h ; D
.eh_frame_hdr:0000000000023809                 db  2Dh ; -
.eh_frame_hdr:000000000002380A                 db 0FFh
.eh_frame_hdr:000000000002380B                 db 0FFh
.eh_frame_hdr:000000000002380C                 db  64h ; d
.eh_frame_hdr:000000000002380D                 db  36h ; 6
.eh_frame_hdr:000000000002380E                 db    0
.eh_frame_hdr:000000000002380F                 db    0
.eh_frame_hdr:0000000000023810                 db 0E4h
.eh_frame_hdr:0000000000023811                 db  2Dh ; -
.eh_frame_hdr:0000000000023812                 db 0FFh
.eh_frame_hdr:0000000000023813                 db 0FFh
.eh_frame_hdr:0000000000023814                 db  94h
.eh_frame_hdr:0000000000023815                 db  36h ; 6
.eh_frame_hdr:0000000000023816                 db    0
.eh_frame_hdr:0000000000023817                 db    0
.eh_frame_hdr:0000000000023818                 db  34h ; 4
.eh_frame_hdr:0000000000023819                 db  2Eh ; .
.eh_frame_hdr:000000000002381A                 db 0FFh
.eh_frame_hdr:000000000002381B                 db 0FFh
.eh_frame_hdr:000000000002381C                 db 0C8h
.eh_frame_hdr:000000000002381D                 db  36h ; 6
.eh_frame_hdr:000000000002381E                 db    0
.eh_frame_hdr:000000000002381F                 db    0
.eh_frame_hdr:0000000000023820                 db  44h ; D
.eh_frame_hdr:0000000000023821                 db  36h ; 6
.eh_frame_hdr:0000000000023822                 db 0FFh
.eh_frame_hdr:0000000000023823                 db 0FFh
.eh_frame_hdr:0000000000023824                 db  0Ch
.eh_frame_hdr:0000000000023825                 db  37h ; 7
.eh_frame_hdr:0000000000023826                 db    0
.eh_frame_hdr:0000000000023827                 db    0
.eh_frame_hdr:0000000000023828                 db 0B4h
.eh_frame_hdr:0000000000023829                 db  38h ; 8
.eh_frame_hdr:000000000002382A                 db 0FFh
.eh_frame_hdr:000000000002382B                 db 0FFh
.eh_frame_hdr:000000000002382C                 db  6Ch ; l
.eh_frame_hdr:000000000002382D                 db  37h ; 7
.eh_frame_hdr:000000000002382E                 db    0
.eh_frame_hdr:000000000002382F                 db    0
.eh_frame_hdr:0000000000023830                 db 0E4h
.eh_frame_hdr:0000000000023831                 db  3Dh ; =
.eh_frame_hdr:0000000000023832                 db 0FFh
.eh_frame_hdr:0000000000023833                 db 0FFh
.eh_frame_hdr:0000000000023834                 db 0BCh
.eh_frame_hdr:0000000000023835                 db  37h ; 7
.eh_frame_hdr:0000000000023836                 db    0
.eh_frame_hdr:0000000000023837                 db    0
.eh_frame_hdr:0000000000023838                 db  44h ; D
.eh_frame_hdr:0000000000023839                 db  40h ; @
.eh_frame_hdr:000000000002383A                 db 0FFh
.eh_frame_hdr:000000000002383B                 db 0FFh
.eh_frame_hdr:000000000002383C                 db 0F8h
.eh_frame_hdr:000000000002383D                 db  37h ; 7
.eh_frame_hdr:000000000002383E                 db    0
.eh_frame_hdr:000000000002383F                 db    0
.eh_frame_hdr:0000000000023840                 db 0A4h
.eh_frame_hdr:0000000000023841                 db  47h ; G
.eh_frame_hdr:0000000000023842                 db 0FFh
.eh_frame_hdr:0000000000023843                 db 0FFh
.eh_frame_hdr:0000000000023844                 db  48h ; H
.eh_frame_hdr:0000000000023845                 db  38h ; 8
.eh_frame_hdr:0000000000023846                 db    0
.eh_frame_hdr:0000000000023847                 db    0
.eh_frame_hdr:0000000000023848                 db  94h
.eh_frame_hdr:0000000000023849                 db  50h ; P
.eh_frame_hdr:000000000002384A                 db 0FFh
.eh_frame_hdr:000000000002384B                 db 0FFh
.eh_frame_hdr:000000000002384C                 db  78h ; x
.eh_frame_hdr:000000000002384D                 db  38h ; 8
.eh_frame_hdr:000000000002384E                 db    0
.eh_frame_hdr:000000000002384F                 db    0
.eh_frame_hdr:0000000000023850                 db  34h ; 4
.eh_frame_hdr:0000000000023851                 db  52h ; R
.eh_frame_hdr:0000000000023852                 db 0FFh
.eh_frame_hdr:0000000000023853                 db 0FFh
.eh_frame_hdr:0000000000023854                 db 0E4h
.eh_frame_hdr:0000000000023855                 db  38h ; 8
.eh_frame_hdr:0000000000023856                 db    0
.eh_frame_hdr:0000000000023857                 db    0
.eh_frame_hdr:0000000000023858                 db  24h ; $
.eh_frame_hdr:0000000000023859                 db  5Bh ; [
.eh_frame_hdr:000000000002385A                 db 0FFh
.eh_frame_hdr:000000000002385B                 db 0FFh
.eh_frame_hdr:000000000002385C                 db  44h ; D
.eh_frame_hdr:000000000002385D                 db  39h ; 9
.eh_frame_hdr:000000000002385E                 db    0
.eh_frame_hdr:000000000002385F                 db    0
.eh_frame_hdr:0000000000023860                 db  14h
.eh_frame_hdr:0000000000023861                 db  5Dh ; ]
.eh_frame_hdr:0000000000023862                 db 0FFh
.eh_frame_hdr:0000000000023863                 db 0FFh
.eh_frame_hdr:0000000000023864                 db  90h
.eh_frame_hdr:0000000000023865                 db  39h ; 9
.eh_frame_hdr:0000000000023866                 db    0
.eh_frame_hdr:0000000000023867                 db    0
.eh_frame_hdr:0000000000023868                 db  54h ; T
.eh_frame_hdr:0000000000023869                 db  60h ; `
.eh_frame_hdr:000000000002386A                 db 0FFh
.eh_frame_hdr:000000000002386B                 db 0FFh
.eh_frame_hdr:000000000002386C                 db 0F0h
.eh_frame_hdr:000000000002386D                 db  39h ; 9
.eh_frame_hdr:000000000002386E                 db    0
.eh_frame_hdr:000000000002386F                 db    0
.eh_frame_hdr:0000000000023870                 db  84h
.eh_frame_hdr:0000000000023871                 db  77h ; w
.eh_frame_hdr:0000000000023872                 db 0FFh
.eh_frame_hdr:0000000000023873                 db 0FFh
.eh_frame_hdr:0000000000023874                 db  40h ; @
.eh_frame_hdr:0000000000023875                 db  3Ah ; :
.eh_frame_hdr:0000000000023876                 db    0
.eh_frame_hdr:0000000000023877                 db    0
.eh_frame_hdr:0000000000023878                 db 0D4h
.eh_frame_hdr:0000000000023879                 db  7Fh ; 
.eh_frame_hdr:000000000002387A                 db 0FFh
.eh_frame_hdr:000000000002387B                 db 0FFh
.eh_frame_hdr:000000000002387C                 db 0A0h
.eh_frame_hdr:000000000002387D                 db  3Ah ; :
.eh_frame_hdr:000000000002387E                 db    0
.eh_frame_hdr:000000000002387F                 db    0
.eh_frame_hdr:0000000000023880                 db  34h ; 4
.eh_frame_hdr:0000000000023881                 db  82h
.eh_frame_hdr:0000000000023882                 db 0FFh
.eh_frame_hdr:0000000000023883                 db 0FFh
.eh_frame_hdr:0000000000023884                 db 0E4h
.eh_frame_hdr:0000000000023885                 db  3Ah ; :
.eh_frame_hdr:0000000000023886                 db    0
.eh_frame_hdr:0000000000023887                 db    0
.eh_frame_hdr:0000000000023888                 db  34h ; 4
.eh_frame_hdr:0000000000023889                 db  89h
.eh_frame_hdr:000000000002388A                 db 0FFh
.eh_frame_hdr:000000000002388B                 db 0FFh
.eh_frame_hdr:000000000002388C                 db  30h ; 0
.eh_frame_hdr:000000000002388D                 db  3Bh ; ;
.eh_frame_hdr:000000000002388E                 db    0
.eh_frame_hdr:000000000002388F                 db    0
.eh_frame_hdr:0000000000023890                 db 0F4h
.eh_frame_hdr:0000000000023891                 db  89h
.eh_frame_hdr:0000000000023892                 db 0FFh
.eh_frame_hdr:0000000000023893                 db 0FFh
.eh_frame_hdr:0000000000023894                 db  70h ; p
.eh_frame_hdr:0000000000023895                 db  3Bh ; ;
.eh_frame_hdr:0000000000023896                 db    0
.eh_frame_hdr:0000000000023897                 db    0
.eh_frame_hdr:0000000000023898                 db 0D4h
.eh_frame_hdr:0000000000023899                 db  9Eh
.eh_frame_hdr:000000000002389A                 db 0FFh
.eh_frame_hdr:000000000002389B                 db 0FFh
.eh_frame_hdr:000000000002389C                 db 0D0h
.eh_frame_hdr:000000000002389D                 db  3Bh ; ;
.eh_frame_hdr:000000000002389E                 db    0
.eh_frame_hdr:000000000002389F                 db    0
.eh_frame_hdr:00000000000238A0                 db  64h ; d
.eh_frame_hdr:00000000000238A1                 db 0A0h
.eh_frame_hdr:00000000000238A2                 db 0FFh
.eh_frame_hdr:00000000000238A3                 db 0FFh
.eh_frame_hdr:00000000000238A4                 db  1Ch
.eh_frame_hdr:00000000000238A5                 db  3Ch ; <
.eh_frame_hdr:00000000000238A6                 db    0
.eh_frame_hdr:00000000000238A7                 db    0
.eh_frame_hdr:00000000000238A8                 db 0E4h
.eh_frame_hdr:00000000000238A9                 db 0A1h
.eh_frame_hdr:00000000000238AA                 db 0FFh
.eh_frame_hdr:00000000000238AB                 db 0FFh
.eh_frame_hdr:00000000000238AC                 db  6Ch ; l
.eh_frame_hdr:00000000000238AD                 db  3Ch ; <
.eh_frame_hdr:00000000000238AE                 db    0
.eh_frame_hdr:00000000000238AF                 db    0
.eh_frame_hdr:00000000000238B0                 db 0E4h
.eh_frame_hdr:00000000000238B1                 db 0B2h
.eh_frame_hdr:00000000000238B2                 db 0FFh
.eh_frame_hdr:00000000000238B3                 db 0FFh
.eh_frame_hdr:00000000000238B4                 db 0BCh
.eh_frame_hdr:00000000000238B5                 db  3Ch ; <
.eh_frame_hdr:00000000000238B6                 db    0
.eh_frame_hdr:00000000000238B7                 db    0
.eh_frame_hdr:00000000000238B8                 db  54h ; T
.eh_frame_hdr:00000000000238B9                 db 0B3h
.eh_frame_hdr:00000000000238BA                 db 0FFh
.eh_frame_hdr:00000000000238BB                 db 0FFh
.eh_frame_hdr:00000000000238BC                 db 0DCh
.eh_frame_hdr:00000000000238BD                 db  3Ch ; <
.eh_frame_hdr:00000000000238BE                 db    0
.eh_frame_hdr:00000000000238BF                 db    0
.eh_frame_hdr:00000000000238C0                 db  64h ; d
.eh_frame_hdr:00000000000238C1                 db 0B3h
.eh_frame_hdr:00000000000238C2                 db 0FFh
.eh_frame_hdr:00000000000238C3                 db 0FFh
.eh_frame_hdr:00000000000238C4                 db 0F0h
.eh_frame_hdr:00000000000238C5                 db  3Ch ; <
.eh_frame_hdr:00000000000238C6                 db    0
.eh_frame_hdr:00000000000238C7                 db    0
.eh_frame_hdr:00000000000238C8                 db  34h ; 4
.eh_frame_hdr:00000000000238C9                 db 0B4h
.eh_frame_hdr:00000000000238CA                 db 0FFh
.eh_frame_hdr:00000000000238CB                 db 0FFh
.eh_frame_hdr:00000000000238CC                 db  1Ch
.eh_frame_hdr:00000000000238CD                 db  3Dh ; =
.eh_frame_hdr:00000000000238CE                 db    0
.eh_frame_hdr:00000000000238CF                 db    0
.eh_frame_hdr:00000000000238D0                 db 0B4h
.eh_frame_hdr:00000000000238D1                 db 0B8h
.eh_frame_hdr:00000000000238D2                 db 0FFh
.eh_frame_hdr:00000000000238D3                 db 0FFh
.eh_frame_hdr:00000000000238D4                 db  7Ch ; |
.eh_frame_hdr:00000000000238D5                 db  3Dh ; =
.eh_frame_hdr:00000000000238D6                 db    0
.eh_frame_hdr:00000000000238D7                 db    0
.eh_frame_hdr:00000000000238D8                 db 0D4h
.eh_frame_hdr:00000000000238D9                 db 0B9h
.eh_frame_hdr:00000000000238DA                 db 0FFh
.eh_frame_hdr:00000000000238DB                 db 0FFh
.eh_frame_hdr:00000000000238DC                 db 0D4h
.eh_frame_hdr:00000000000238DD                 db  3Dh ; =
.eh_frame_hdr:00000000000238DE                 db    0
.eh_frame_hdr:00000000000238DF                 db    0
.eh_frame_hdr:00000000000238E0                 db 0E4h
.eh_frame_hdr:00000000000238E1                 db 0BAh
.eh_frame_hdr:00000000000238E2                 db 0FFh
.eh_frame_hdr:00000000000238E3                 db 0FFh
.eh_frame_hdr:00000000000238E4                 db  20h
.eh_frame_hdr:00000000000238E5                 db  3Eh ; >
.eh_frame_hdr:00000000000238E6                 db    0
.eh_frame_hdr:00000000000238E7                 db    0
.eh_frame_hdr:00000000000238E8                 db  74h ; t
.eh_frame_hdr:00000000000238E9                 db 0BBh
.eh_frame_hdr:00000000000238EA                 db 0FFh
.eh_frame_hdr:00000000000238EB                 db 0FFh
.eh_frame_hdr:00000000000238EC                 db  5Ch ; \
.eh_frame_hdr:00000000000238ED                 db  3Eh ; >
.eh_frame_hdr:00000000000238EE                 db    0
.eh_frame_hdr:00000000000238EF                 db    0
.eh_frame_hdr:00000000000238F0                 db 0C4h
.eh_frame_hdr:00000000000238F1                 db 0BBh
.eh_frame_hdr:00000000000238F2                 db 0FFh
.eh_frame_hdr:00000000000238F3                 db 0FFh
.eh_frame_hdr:00000000000238F4                 db  78h ; x
.eh_frame_hdr:00000000000238F5                 db  3Eh ; >
.eh_frame_hdr:00000000000238F6                 db    0
.eh_frame_hdr:00000000000238F7                 db    0
.eh_frame_hdr:00000000000238F8                 db  64h ; d
.eh_frame_hdr:00000000000238F9                 db 0BCh
.eh_frame_hdr:00000000000238FA                 db 0FFh
.eh_frame_hdr:00000000000238FB                 db 0FFh
.eh_frame_hdr:00000000000238FC                 db 0D4h
.eh_frame_hdr:00000000000238FD                 db  3Eh ; >
.eh_frame_hdr:00000000000238FE                 db    0
.eh_frame_hdr:00000000000238FF                 db    0
.eh_frame_hdr:0000000000023900                 db  84h
.eh_frame_hdr:0000000000023901                 db 0BCh
.eh_frame_hdr:0000000000023902                 db 0FFh
.eh_frame_hdr:0000000000023903                 db 0FFh
.eh_frame_hdr:0000000000023904                 db 0F4h
.eh_frame_hdr:0000000000023905                 db  3Eh ; >
.eh_frame_hdr:0000000000023906                 db    0
.eh_frame_hdr:0000000000023907                 db    0
.eh_frame_hdr:0000000000023908                 db 0A4h
.eh_frame_hdr:0000000000023909                 db 0BCh
.eh_frame_hdr:000000000002390A                 db 0FFh
.eh_frame_hdr:000000000002390B                 db 0FFh
.eh_frame_hdr:000000000002390C                 db  14h
.eh_frame_hdr:000000000002390D                 db  3Fh ; ?
.eh_frame_hdr:000000000002390E                 db    0
.eh_frame_hdr:000000000002390F                 db    0
.eh_frame_hdr:0000000000023910                 db 0C4h
.eh_frame_hdr:0000000000023911                 db 0BCh
.eh_frame_hdr:0000000000023912                 db 0FFh
.eh_frame_hdr:0000000000023913                 db 0FFh
.eh_frame_hdr:0000000000023914                 db  38h ; 8
.eh_frame_hdr:0000000000023915                 db  3Fh ; ?
.eh_frame_hdr:0000000000023916                 db    0
.eh_frame_hdr:0000000000023917                 db    0
.eh_frame_hdr:0000000000023918                 db 0E4h
.eh_frame_hdr:0000000000023919                 db 0BCh
.eh_frame_hdr:000000000002391A                 db 0FFh
.eh_frame_hdr:000000000002391B                 db 0FFh
.eh_frame_hdr:000000000002391C                 db  5Ch ; \
.eh_frame_hdr:000000000002391D                 db  3Fh ; ?
.eh_frame_hdr:000000000002391E                 db    0
.eh_frame_hdr:000000000002391F                 db    0
.eh_frame_hdr:0000000000023920                 db  34h ; 4
.eh_frame_hdr:0000000000023921                 db 0BDh
.eh_frame_hdr:0000000000023922                 db 0FFh
.eh_frame_hdr:0000000000023923                 db 0FFh
.eh_frame_hdr:0000000000023924                 db  74h ; t
.eh_frame_hdr:0000000000023925                 db  3Fh ; ?
.eh_frame_hdr:0000000000023926                 db    0
.eh_frame_hdr:0000000000023927                 db    0
.eh_frame_hdr:0000000000023928                 db  64h ; d
.eh_frame_hdr:0000000000023929                 db 0BDh
.eh_frame_hdr:000000000002392A                 db 0FFh
.eh_frame_hdr:000000000002392B                 db 0FFh
.eh_frame_hdr:000000000002392C                 db  88h
.eh_frame_hdr:000000000002392D                 db  3Fh ; ?
.eh_frame_hdr:000000000002392E                 db    0
.eh_frame_hdr:000000000002392F                 db    0
.eh_frame_hdr:0000000000023930                 db  94h
.eh_frame_hdr:0000000000023931                 db 0BDh
.eh_frame_hdr:0000000000023932                 db 0FFh
.eh_frame_hdr:0000000000023933                 db 0FFh
.eh_frame_hdr:0000000000023934                 db 0A4h
.eh_frame_hdr:0000000000023935                 db  3Fh ; ?
.eh_frame_hdr:0000000000023936                 db    0
.eh_frame_hdr:0000000000023937                 db    0
.eh_frame_hdr:0000000000023938                 db 0F4h
.eh_frame_hdr:0000000000023939                 db 0BDh
.eh_frame_hdr:000000000002393A                 db 0FFh
.eh_frame_hdr:000000000002393B                 db 0FFh
.eh_frame_hdr:000000000002393C                 db 0E0h
.eh_frame_hdr:000000000002393D                 db  3Fh ; ?
.eh_frame_hdr:000000000002393E                 db    0
.eh_frame_hdr:000000000002393F                 db    0
.eh_frame_hdr:0000000000023940                 db  84h
.eh_frame_hdr:0000000000023941                 db 0BEh
.eh_frame_hdr:0000000000023942                 db 0FFh
.eh_frame_hdr:0000000000023943                 db 0FFh
.eh_frame_hdr:0000000000023944                 db  18h
.eh_frame_hdr:0000000000023945                 db  40h ; @
.eh_frame_hdr:0000000000023946                 db    0
.eh_frame_hdr:0000000000023947                 db    0
.eh_frame_hdr:0000000000023948                 db 0C4h
.eh_frame_hdr:0000000000023949                 db 0BFh
.eh_frame_hdr:000000000002394A                 db 0FFh
.eh_frame_hdr:000000000002394B                 db 0FFh
.eh_frame_hdr:000000000002394C                 db  64h ; d
.eh_frame_hdr:000000000002394D                 db  40h ; @
.eh_frame_hdr:000000000002394E                 db    0
.eh_frame_hdr:000000000002394F                 db    0
.eh_frame_hdr:0000000000023950                 db 0A4h
.eh_frame_hdr:0000000000023951                 db 0C0h
.eh_frame_hdr:0000000000023952                 db 0FFh
.eh_frame_hdr:0000000000023953                 db 0FFh
.eh_frame_hdr:0000000000023954                 db 0B8h
.eh_frame_hdr:0000000000023955                 db  40h ; @
.eh_frame_hdr:0000000000023956                 db    0
.eh_frame_hdr:0000000000023957                 db    0
.eh_frame_hdr:0000000000023958                 db 0B4h
.eh_frame_hdr:0000000000023959                 db 0C0h
.eh_frame_hdr:000000000002395A                 db 0FFh
.eh_frame_hdr:000000000002395B                 db 0FFh
.eh_frame_hdr:000000000002395C                 db 0CCh
.eh_frame_hdr:000000000002395D                 db  40h ; @
.eh_frame_hdr:000000000002395E                 db    0
.eh_frame_hdr:000000000002395F                 db    0
.eh_frame_hdr:0000000000023960                 db  64h ; d
.eh_frame_hdr:0000000000023961                 db 0C1h
.eh_frame_hdr:0000000000023962                 db 0FFh
.eh_frame_hdr:0000000000023963                 db 0FFh
.eh_frame_hdr:0000000000023964                 db  2Ch ; ,
.eh_frame_hdr:0000000000023965                 db  41h ; A
.eh_frame_hdr:0000000000023966                 db    0
.eh_frame_hdr:0000000000023967                 db    0
.eh_frame_hdr:0000000000023968                 db 0B4h
.eh_frame_hdr:0000000000023969                 db 0C2h
.eh_frame_hdr:000000000002396A                 db 0FFh
.eh_frame_hdr:000000000002396B                 db 0FFh
.eh_frame_hdr:000000000002396C                 db  64h ; d
.eh_frame_hdr:000000000002396D                 db  41h ; A
.eh_frame_hdr:000000000002396E                 db    0
.eh_frame_hdr:000000000002396F                 db    0
.eh_frame_hdr:0000000000023970                 db  34h ; 4
.eh_frame_hdr:0000000000023971                 db 0C3h
.eh_frame_hdr:0000000000023972                 db 0FFh
.eh_frame_hdr:0000000000023973                 db 0FFh
.eh_frame_hdr:0000000000023974                 db 0B4h
.eh_frame_hdr:0000000000023975                 db  41h ; A
.eh_frame_hdr:0000000000023976                 db    0
.eh_frame_hdr:0000000000023977                 db    0
.eh_frame_hdr:0000000000023978                 db  44h ; D
.eh_frame_hdr:0000000000023979                 db 0C3h
.eh_frame_hdr:000000000002397A                 db 0FFh
.eh_frame_hdr:000000000002397B                 db 0FFh
.eh_frame_hdr:000000000002397C                 db 0C8h
.eh_frame_hdr:000000000002397D                 db  41h ; A
.eh_frame_hdr:000000000002397E                 db    0
.eh_frame_hdr:000000000002397F                 db    0
.eh_frame_hdr:0000000000023980                 db 0D4h
.eh_frame_hdr:0000000000023981                 db 0C3h
.eh_frame_hdr:0000000000023982                 db 0FFh
.eh_frame_hdr:0000000000023983                 db 0FFh
.eh_frame_hdr:0000000000023984                 db 0E4h
.eh_frame_hdr:0000000000023985                 db  41h ; A
.eh_frame_hdr:0000000000023986                 db    0
.eh_frame_hdr:0000000000023987                 db    0
.eh_frame_hdr:0000000000023988                 db  44h ; D
.eh_frame_hdr:0000000000023989                 db 0C4h
.eh_frame_hdr:000000000002398A                 db 0FFh
.eh_frame_hdr:000000000002398B                 db 0FFh
.eh_frame_hdr:000000000002398C                 db    4
.eh_frame_hdr:000000000002398D                 db  42h ; B
.eh_frame_hdr:000000000002398E                 db    0
.eh_frame_hdr:000000000002398F                 db    0
.eh_frame_hdr:0000000000023990                 db 0A4h
.eh_frame_hdr:0000000000023991                 db 0C4h
.eh_frame_hdr:0000000000023992                 db 0FFh
.eh_frame_hdr:0000000000023993                 db 0FFh
.eh_frame_hdr:0000000000023994                 db  24h ; $
.eh_frame_hdr:0000000000023995                 db  42h ; B
.eh_frame_hdr:0000000000023996                 db    0
.eh_frame_hdr:0000000000023997                 db    0
.eh_frame_hdr:0000000000023998                 db 0C4h
.eh_frame_hdr:0000000000023999                 db 0C4h
.eh_frame_hdr:000000000002399A                 db 0FFh
.eh_frame_hdr:000000000002399B                 db 0FFh
.eh_frame_hdr:000000000002399C                 db  38h ; 8
.eh_frame_hdr:000000000002399D                 db  42h ; B
.eh_frame_hdr:000000000002399E                 db    0
.eh_frame_hdr:000000000002399F                 db    0
.eh_frame_hdr:00000000000239A0                 db 0D4h
.eh_frame_hdr:00000000000239A1                 db 0C4h
.eh_frame_hdr:00000000000239A2                 db 0FFh
.eh_frame_hdr:00000000000239A3                 db 0FFh
.eh_frame_hdr:00000000000239A4                 db  4Ch ; L
.eh_frame_hdr:00000000000239A5                 db  42h ; B
.eh_frame_hdr:00000000000239A6                 db    0
.eh_frame_hdr:00000000000239A7                 db    0
.eh_frame_hdr:00000000000239A8                 db  14h
.eh_frame_hdr:00000000000239A9                 db 0C5h
.eh_frame_hdr:00000000000239AA                 db 0FFh
.eh_frame_hdr:00000000000239AB                 db 0FFh
.eh_frame_hdr:00000000000239AC                 db  60h ; `
.eh_frame_hdr:00000000000239AD                 db  42h ; B
.eh_frame_hdr:00000000000239AE                 db    0
.eh_frame_hdr:00000000000239AF                 db    0
.eh_frame_hdr:00000000000239B0                 db  54h ; T
.eh_frame_hdr:00000000000239B1                 db 0C5h
.eh_frame_hdr:00000000000239B2                 db 0FFh
.eh_frame_hdr:00000000000239B3                 db 0FFh
.eh_frame_hdr:00000000000239B4                 db  74h ; t
.eh_frame_hdr:00000000000239B5                 db  42h ; B
.eh_frame_hdr:00000000000239B6                 db    0
.eh_frame_hdr:00000000000239B7                 db    0
.eh_frame_hdr:00000000000239B8                 db  94h
.eh_frame_hdr:00000000000239B9                 db 0C5h
.eh_frame_hdr:00000000000239BA                 db 0FFh
.eh_frame_hdr:00000000000239BB                 db 0FFh
.eh_frame_hdr:00000000000239BC                 db  94h
.eh_frame_hdr:00000000000239BD                 db  42h ; B
.eh_frame_hdr:00000000000239BE                 db    0
.eh_frame_hdr:00000000000239BF                 db    0
.eh_frame_hdr:00000000000239C0                 db    4
.eh_frame_hdr:00000000000239C1                 db 0C6h
.eh_frame_hdr:00000000000239C2                 db 0FFh
.eh_frame_hdr:00000000000239C3                 db 0FFh
.eh_frame_hdr:00000000000239C4                 db 0B4h
.eh_frame_hdr:00000000000239C5                 db  42h ; B
.eh_frame_hdr:00000000000239C6                 db    0
.eh_frame_hdr:00000000000239C7                 db    0
.eh_frame_hdr:00000000000239C8                 db  84h
.eh_frame_hdr:00000000000239C9                 db 0C6h
.eh_frame_hdr:00000000000239CA                 db 0FFh
.eh_frame_hdr:00000000000239CB                 db 0FFh
.eh_frame_hdr:00000000000239CC                 db  14h
.eh_frame_hdr:00000000000239CD                 db  43h ; C
.eh_frame_hdr:00000000000239CE                 db    0
.eh_frame_hdr:00000000000239CF                 db    0
.eh_frame_hdr:00000000000239D0                 db 0C4h
.eh_frame_hdr:00000000000239D1                 db 0C6h
.eh_frame_hdr:00000000000239D2                 db 0FFh
.eh_frame_hdr:00000000000239D3                 db 0FFh
.eh_frame_hdr:00000000000239D4                 db  4Ch ; L
.eh_frame_hdr:00000000000239D5                 db  43h ; C
.eh_frame_hdr:00000000000239D6                 db    0
.eh_frame_hdr:00000000000239D7                 db    0
.eh_frame_hdr:00000000000239D8                 db  44h ; D
.eh_frame_hdr:00000000000239D9                 db 0C9h
.eh_frame_hdr:00000000000239DA                 db 0FFh
.eh_frame_hdr:00000000000239DB                 db 0FFh
.eh_frame_hdr:00000000000239DC                 db  84h
.eh_frame_hdr:00000000000239DD                 db  43h ; C
.eh_frame_hdr:00000000000239DE                 db    0
.eh_frame_hdr:00000000000239DF                 db    0
.eh_frame_hdr:00000000000239E0                 db  54h ; T
.eh_frame_hdr:00000000000239E1                 db 0C9h
.eh_frame_hdr:00000000000239E2                 db 0FFh
.eh_frame_hdr:00000000000239E3                 db 0FFh
.eh_frame_hdr:00000000000239E4                 db  9Ch
.eh_frame_hdr:00000000000239E5                 db  43h ; C
.eh_frame_hdr:00000000000239E6                 db    0
.eh_frame_hdr:00000000000239E7                 db    0
.eh_frame_hdr:00000000000239E8                 db 0C4h
.eh_frame_hdr:00000000000239E9                 db 0C9h
.eh_frame_hdr:00000000000239EA                 db 0FFh
.eh_frame_hdr:00000000000239EB                 db 0FFh
.eh_frame_hdr:00000000000239EC                 db 0E4h
.eh_frame_hdr:00000000000239ED                 db  43h ; C
.eh_frame_hdr:00000000000239EE                 db    0
.eh_frame_hdr:00000000000239EF                 db    0
.eh_frame_hdr:00000000000239F0                 db 0D4h
.eh_frame_hdr:00000000000239F1                 db 0C9h
.eh_frame_hdr:00000000000239F2                 db 0FFh
.eh_frame_hdr:00000000000239F3                 db 0FFh
.eh_frame_hdr:00000000000239F4                 db 0FCh
.eh_frame_hdr:00000000000239F5                 db  43h ; C
.eh_frame_hdr:00000000000239F6                 db    0
.eh_frame_hdr:00000000000239F7                 db    0
.eh_frame_hdr:00000000000239F7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000239F7
.eh_frame:00000000000239F8 ; ===========================================================================
.eh_frame:00000000000239F8
.eh_frame:00000000000239F8 ; Segment type: Pure data
.eh_frame:00000000000239F8 ; Segment permissions: Read
.eh_frame:00000000000239F8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000239F8                 assume cs:_eh_frame
.eh_frame:00000000000239F8                 ;org 239F8h
.eh_frame:00000000000239F8                 db  14h
.eh_frame:00000000000239F9                 db    0
.eh_frame:00000000000239FA                 db    0
.eh_frame:00000000000239FB                 db    0
.eh_frame:00000000000239FC                 db    0
.eh_frame:00000000000239FD                 db    0
.eh_frame:00000000000239FE                 db    0
.eh_frame:00000000000239FF                 db    0
.eh_frame:0000000000023A00                 db    1
.eh_frame:0000000000023A01                 db  7Ah ; z
.eh_frame:0000000000023A02                 db  52h ; R
.eh_frame:0000000000023A03                 db    0
.eh_frame:0000000000023A04                 db    1
.eh_frame:0000000000023A05                 db  78h ; x
.eh_frame:0000000000023A06                 db  10h
.eh_frame:0000000000023A07                 db    1
.eh_frame:0000000000023A08                 db  1Bh
.eh_frame:0000000000023A09                 db  0Ch
.eh_frame:0000000000023A0A                 db    7
.eh_frame:0000000000023A0B                 db    8
.eh_frame:0000000000023A0C                 db  90h
.eh_frame:0000000000023A0D                 db    1
.eh_frame:0000000000023A0E                 db    7
.eh_frame:0000000000023A0F                 db  10h
.eh_frame:0000000000023A10                 db  14h
.eh_frame:0000000000023A11                 db    0
.eh_frame:0000000000023A12                 db    0
.eh_frame:0000000000023A13                 db    0
.eh_frame:0000000000023A14                 db  1Ch
.eh_frame:0000000000023A15                 db    0
.eh_frame:0000000000023A16                 db    0
.eh_frame:0000000000023A17                 db    0
.eh_frame:0000000000023A18                 db  28h ; (
.eh_frame:0000000000023A19                 db    5
.eh_frame:0000000000023A1A                 db 0FEh
.eh_frame:0000000000023A1B                 db 0FFh
.eh_frame:0000000000023A1C                 db  2Bh ; +
.eh_frame:0000000000023A1D                 db    0
.eh_frame:0000000000023A1E                 db    0
.eh_frame:0000000000023A1F                 db    0
.eh_frame:0000000000023A20                 db    0
.eh_frame:0000000000023A21                 db    0
.eh_frame:0000000000023A22                 db    0
.eh_frame:0000000000023A23                 db    0
.eh_frame:0000000000023A24                 db    0
.eh_frame:0000000000023A25                 db    0
.eh_frame:0000000000023A26                 db    0
.eh_frame:0000000000023A27                 db    0
.eh_frame:0000000000023A28                 db  14h
.eh_frame:0000000000023A29                 db    0
.eh_frame:0000000000023A2A                 db    0
.eh_frame:0000000000023A2B                 db    0
.eh_frame:0000000000023A2C                 db    0
.eh_frame:0000000000023A2D                 db    0
.eh_frame:0000000000023A2E                 db    0
.eh_frame:0000000000023A2F                 db    0
.eh_frame:0000000000023A30                 db    1
.eh_frame:0000000000023A31                 db  7Ah ; z
.eh_frame:0000000000023A32                 db  52h ; R
.eh_frame:0000000000023A33                 db    0
.eh_frame:0000000000023A34                 db    1
.eh_frame:0000000000023A35                 db  78h ; x
.eh_frame:0000000000023A36                 db  10h
.eh_frame:0000000000023A37                 db    1
.eh_frame:0000000000023A38                 db  1Bh
.eh_frame:0000000000023A39                 db  0Ch
.eh_frame:0000000000023A3A                 db    7
.eh_frame:0000000000023A3B                 db    8
.eh_frame:0000000000023A3C                 db  90h
.eh_frame:0000000000023A3D                 db    1
.eh_frame:0000000000023A3E                 db    0
.eh_frame:0000000000023A3F                 db    0
.eh_frame:0000000000023A40                 db  24h ; $
.eh_frame:0000000000023A41                 db    0
.eh_frame:0000000000023A42                 db    0
.eh_frame:0000000000023A43                 db    0
.eh_frame:0000000000023A44                 db  1Ch
.eh_frame:0000000000023A45                 db    0
.eh_frame:0000000000023A46                 db    0
.eh_frame:0000000000023A47                 db    0
.eh_frame:0000000000023A48                 db  68h ; h
.eh_frame:0000000000023A49                 db 0E9h
.eh_frame:0000000000023A4A                 db 0FDh
.eh_frame:0000000000023A4B                 db 0FFh
.eh_frame:0000000000023A4C                 db  60h ; `
.eh_frame:0000000000023A4D                 db    6
.eh_frame:0000000000023A4E                 db    0
.eh_frame:0000000000023A4F                 db    0
.eh_frame:0000000000023A50                 db    0
.eh_frame:0000000000023A51                 db  0Eh
.eh_frame:0000000000023A52                 db  10h
.eh_frame:0000000000023A53                 db  46h ; F
.eh_frame:0000000000023A54                 db  0Eh
.eh_frame:0000000000023A55                 db  18h
.eh_frame:0000000000023A56                 db  4Ah ; J
.eh_frame:0000000000023A57                 db  0Fh
.eh_frame:0000000000023A58                 db  0Bh
.eh_frame:0000000000023A59                 db  77h ; w
.eh_frame:0000000000023A5A                 db    8
.eh_frame:0000000000023A5B                 db  80h
.eh_frame:0000000000023A5C                 db    0
.eh_frame:0000000000023A5D                 db  3Fh ; ?
.eh_frame:0000000000023A5E                 db  1Ah
.eh_frame:0000000000023A5F                 db  3Bh ; ;
.eh_frame:0000000000023A60                 db  2Ah ; *
.eh_frame:0000000000023A61                 db  33h ; 3
.eh_frame:0000000000023A62                 db  24h ; $
.eh_frame:0000000000023A63                 db  22h ; "
.eh_frame:0000000000023A64                 db    0
.eh_frame:0000000000023A65                 db    0
.eh_frame:0000000000023A66                 db    0
.eh_frame:0000000000023A67                 db    0
.eh_frame:0000000000023A68                 db  14h
.eh_frame:0000000000023A69                 db    0
.eh_frame:0000000000023A6A                 db    0
.eh_frame:0000000000023A6B                 db    0
.eh_frame:0000000000023A6C                 db  44h ; D
.eh_frame:0000000000023A6D                 db    0
.eh_frame:0000000000023A6E                 db    0
.eh_frame:0000000000023A6F                 db    0
.eh_frame:0000000000023A70                 db 0A0h
.eh_frame:0000000000023A71                 db 0EFh
.eh_frame:0000000000023A72                 db 0FDh
.eh_frame:0000000000023A73                 db 0FFh
.eh_frame:0000000000023A74                 db  10h
.eh_frame:0000000000023A75                 db    0
.eh_frame:0000000000023A76                 db    0
.eh_frame:0000000000023A77                 db    0
.eh_frame:0000000000023A78                 db    0
.eh_frame:0000000000023A79                 db    0
.eh_frame:0000000000023A7A                 db    0
.eh_frame:0000000000023A7B                 db    0
.eh_frame:0000000000023A7C                 db    0
.eh_frame:0000000000023A7D                 db    0
.eh_frame:0000000000023A7E                 db    0
.eh_frame:0000000000023A7F                 db    0
.eh_frame:0000000000023A80                 db  20h
.eh_frame:0000000000023A81                 db    0
.eh_frame:0000000000023A82                 db    0
.eh_frame:0000000000023A83                 db    0
.eh_frame:0000000000023A84                 db  5Ch ; \
.eh_frame:0000000000023A85                 db    0
.eh_frame:0000000000023A86                 db    0
.eh_frame:0000000000023A87                 db    0
.eh_frame:0000000000023A88                 db 0C8h
.eh_frame:0000000000023A89                 db    5
.eh_frame:0000000000023A8A                 db 0FEh
.eh_frame:0000000000023A8B                 db 0FFh
.eh_frame:0000000000023A8C                 db  8Ah
.eh_frame:0000000000023A8D                 db    0
.eh_frame:0000000000023A8E                 db    0
.eh_frame:0000000000023A8F                 db    0
.eh_frame:0000000000023A90                 db    0
.eh_frame:0000000000023A91                 db  41h ; A
.eh_frame:0000000000023A92                 db  0Eh
.eh_frame:0000000000023A93                 db  10h
.eh_frame:0000000000023A94                 db  83h
.eh_frame:0000000000023A95                 db    2
.eh_frame:0000000000023A96                 db  47h ; G
.eh_frame:0000000000023A97                 db  0Eh
.eh_frame:0000000000023A98                 db 0B0h
.eh_frame:0000000000023A99                 db    5
.eh_frame:0000000000023A9A                 db    2
.eh_frame:0000000000023A9B                 db  5Fh ; _
.eh_frame:0000000000023A9C                 db  0Ah
.eh_frame:0000000000023A9D                 db  0Eh
.eh_frame:0000000000023A9E                 db  10h
.eh_frame:0000000000023A9F                 db  41h ; A
.eh_frame:0000000000023AA0                 db  0Eh
.eh_frame:0000000000023AA1                 db    8
.eh_frame:0000000000023AA2                 db  48h ; H
.eh_frame:0000000000023AA3                 db  0Bh
.eh_frame:0000000000023AA4                 db  38h ; 8
.eh_frame:0000000000023AA5                 db    0
.eh_frame:0000000000023AA6                 db    0
.eh_frame:0000000000023AA7                 db    0
.eh_frame:0000000000023AA8                 db  80h
.eh_frame:0000000000023AA9                 db    0
.eh_frame:0000000000023AAA                 db    0
.eh_frame:0000000000023AAB                 db    0
.eh_frame:0000000000023AAC                 db  34h ; 4
.eh_frame:0000000000023AAD                 db    6
.eh_frame:0000000000023AAE                 db 0FEh
.eh_frame:0000000000023AAF                 db 0FFh
.eh_frame:0000000000023AB0                 db  59h ; Y
.eh_frame:0000000000023AB1                 db    1
.eh_frame:0000000000023AB2                 db    0
.eh_frame:0000000000023AB3                 db    0
.eh_frame:0000000000023AB4                 db    0
.eh_frame:0000000000023AB5                 db  42h ; B
.eh_frame:0000000000023AB6                 db  0Eh
.eh_frame:0000000000023AB7                 db  10h
.eh_frame:0000000000023AB8                 db  8Dh
.eh_frame:0000000000023AB9                 db    2
.eh_frame:0000000000023ABA                 db  42h ; B
.eh_frame:0000000000023ABB                 db  0Eh
.eh_frame:0000000000023ABC                 db  18h
.eh_frame:0000000000023ABD                 db  8Ch
.eh_frame:0000000000023ABE                 db    3
.eh_frame:0000000000023ABF                 db  41h ; A
.eh_frame:0000000000023AC0                 db  0Eh
.eh_frame:0000000000023AC1                 db  20h
.eh_frame:0000000000023AC2                 db  86h
.eh_frame:0000000000023AC3                 db    4
.eh_frame:0000000000023AC4                 db  41h ; A
.eh_frame:0000000000023AC5                 db  0Eh
.eh_frame:0000000000023AC6                 db  28h ; (
.eh_frame:0000000000023AC7                 db  83h
.eh_frame:0000000000023AC8                 db    5
.eh_frame:0000000000023AC9                 db  4Ah ; J
.eh_frame:0000000000023ACA                 db  0Eh
.eh_frame:0000000000023ACB                 db 0A0h
.eh_frame:0000000000023ACC                 db    1
.eh_frame:0000000000023ACD                 db    2
.eh_frame:0000000000023ACE                 db 0D8h
.eh_frame:0000000000023ACF                 db  0Ah
.eh_frame:0000000000023AD0                 db  0Eh
.eh_frame:0000000000023AD1                 db  28h ; (
.eh_frame:0000000000023AD2                 db  41h ; A
.eh_frame:0000000000023AD3                 db  0Eh
.eh_frame:0000000000023AD4                 db  20h
.eh_frame:0000000000023AD5                 db  41h ; A
.eh_frame:0000000000023AD6                 db  0Eh
.eh_frame:0000000000023AD7                 db  18h
.eh_frame:0000000000023AD8                 db  42h ; B
.eh_frame:0000000000023AD9                 db  0Eh
.eh_frame:0000000000023ADA                 db  10h
.eh_frame:0000000000023ADB                 db  42h ; B
.eh_frame:0000000000023ADC                 db  0Eh
.eh_frame:0000000000023ADD                 db    8
.eh_frame:0000000000023ADE                 db  42h ; B
.eh_frame:0000000000023ADF                 db  0Bh
.eh_frame:0000000000023AE0                 db  28h ; (
.eh_frame:0000000000023AE1                 db    0
.eh_frame:0000000000023AE2                 db    0
.eh_frame:0000000000023AE3                 db    0
.eh_frame:0000000000023AE4                 db 0BCh
.eh_frame:0000000000023AE5                 db    0
.eh_frame:0000000000023AE6                 db    0
.eh_frame:0000000000023AE7                 db    0
.eh_frame:0000000000023AE8                 db  58h ; X
.eh_frame:0000000000023AE9                 db    7
.eh_frame:0000000000023AEA                 db 0FEh
.eh_frame:0000000000023AEB                 db 0FFh
.eh_frame:0000000000023AEC                 db 0BAh
.eh_frame:0000000000023AED                 db    4
.eh_frame:0000000000023AEE                 db    0
.eh_frame:0000000000023AEF                 db    0
.eh_frame:0000000000023AF0                 db    0
.eh_frame:0000000000023AF1                 db  42h ; B
.eh_frame:0000000000023AF2                 db  0Eh
.eh_frame:0000000000023AF3                 db  10h
.eh_frame:0000000000023AF4                 db  8Dh
.eh_frame:0000000000023AF5                 db    2
.eh_frame:0000000000023AF6                 db  42h ; B
.eh_frame:0000000000023AF7                 db  0Eh
.eh_frame:0000000000023AF8                 db  18h
.eh_frame:0000000000023AF9                 db  8Ch
.eh_frame:0000000000023AFA                 db    3
.eh_frame:0000000000023AFB                 db  46h ; F
.eh_frame:0000000000023AFC                 db  0Eh
.eh_frame:0000000000023AFD                 db  20h
.eh_frame:0000000000023AFE                 db  86h
.eh_frame:0000000000023AFF                 db    4
.eh_frame:0000000000023B00                 db  41h ; A
.eh_frame:0000000000023B01                 db  0Eh
.eh_frame:0000000000023B02                 db  28h ; (
.eh_frame:0000000000023B03                 db  83h
.eh_frame:0000000000023B04                 db    5
.eh_frame:0000000000023B05                 db  49h ; I
.eh_frame:0000000000023B06                 db  0Eh
.eh_frame:0000000000023B07                 db 0B0h
.eh_frame:0000000000023B08                 db    1
.eh_frame:0000000000023B09                 db    0
.eh_frame:0000000000023B0A                 db    0
.eh_frame:0000000000023B0B                 db    0
.eh_frame:0000000000023B0C                 db  60h ; `
.eh_frame:0000000000023B0D                 db    0
.eh_frame:0000000000023B0E                 db    0
.eh_frame:0000000000023B0F                 db    0
.eh_frame:0000000000023B10                 db 0E8h
.eh_frame:0000000000023B11                 db    0
.eh_frame:0000000000023B12                 db    0
.eh_frame:0000000000023B13                 db    0
.eh_frame:0000000000023B14                 db  3Ch ; <
.eh_frame:0000000000023B15                 db 0EFh
.eh_frame:0000000000023B16                 db 0FDh
.eh_frame:0000000000023B17                 db 0FFh
.eh_frame:0000000000023B18                 db 0E6h
.eh_frame:0000000000023B19                 db  14h
.eh_frame:0000000000023B1A                 db    0
.eh_frame:0000000000023B1B                 db    0
.eh_frame:0000000000023B1C                 db    0
.eh_frame:0000000000023B1D                 db  42h ; B
.eh_frame:0000000000023B1E                 db  0Eh
.eh_frame:0000000000023B1F                 db  10h
.eh_frame:0000000000023B20                 db  8Fh
.eh_frame:0000000000023B21                 db    2
.eh_frame:0000000000023B22                 db  42h ; B
.eh_frame:0000000000023B23                 db  0Eh
.eh_frame:0000000000023B24                 db  18h
.eh_frame:0000000000023B25                 db  8Eh
.eh_frame:0000000000023B26                 db    3
.eh_frame:0000000000023B27                 db  45h ; E
.eh_frame:0000000000023B28                 db  0Eh
.eh_frame:0000000000023B29                 db  20h
.eh_frame:0000000000023B2A                 db  8Dh
.eh_frame:0000000000023B2B                 db    4
.eh_frame:0000000000023B2C                 db  42h ; B
.eh_frame:0000000000023B2D                 db  0Eh
.eh_frame:0000000000023B2E                 db  28h ; (
.eh_frame:0000000000023B2F                 db  8Ch
.eh_frame:0000000000023B30                 db    5
.eh_frame:0000000000023B31                 db  44h ; D
.eh_frame:0000000000023B32                 db  0Eh
.eh_frame:0000000000023B33                 db  30h ; 0
.eh_frame:0000000000023B34                 db  86h
.eh_frame:0000000000023B35                 db    6
.eh_frame:0000000000023B36                 db  41h ; A
.eh_frame:0000000000023B37                 db  0Eh
.eh_frame:0000000000023B38                 db  38h ; 8
.eh_frame:0000000000023B39                 db  83h
.eh_frame:0000000000023B3A                 db    7
.eh_frame:0000000000023B3B                 db  54h ; T
.eh_frame:0000000000023B3C                 db  0Eh
.eh_frame:0000000000023B3D                 db 0F0h
.eh_frame:0000000000023B3E                 db    2
.eh_frame:0000000000023B3F                 db    3
.eh_frame:0000000000023B40                 db  47h ; G
.eh_frame:0000000000023B41                 db    3
.eh_frame:0000000000023B42                 db  0Eh
.eh_frame:0000000000023B43                 db 0F8h
.eh_frame:0000000000023B44                 db    2
.eh_frame:0000000000023B45                 db  49h ; I
.eh_frame:0000000000023B46                 db  0Eh
.eh_frame:0000000000023B47                 db  80h
.eh_frame:0000000000023B48                 db    3
.eh_frame:0000000000023B49                 db  4Fh ; O
.eh_frame:0000000000023B4A                 db  0Eh
.eh_frame:0000000000023B4B                 db  88h
.eh_frame:0000000000023B4C                 db    3
.eh_frame:0000000000023B4D                 db  5Dh ; ]
.eh_frame:0000000000023B4E                 db  0Eh
.eh_frame:0000000000023B4F                 db  90h
.eh_frame:0000000000023B50                 db    3
.eh_frame:0000000000023B51                 db  4Bh ; K
.eh_frame:0000000000023B52                 db  0Eh
.eh_frame:0000000000023B53                 db 0F0h
.eh_frame:0000000000023B54                 db    2
.eh_frame:0000000000023B55                 db    3
.eh_frame:0000000000023B56                 db  40h ; @
.eh_frame:0000000000023B57                 db    8
.eh_frame:0000000000023B58                 db  0Ah
.eh_frame:0000000000023B59                 db  0Eh
.eh_frame:0000000000023B5A                 db  38h ; 8
.eh_frame:0000000000023B5B                 db  41h ; A
.eh_frame:0000000000023B5C                 db  0Eh
.eh_frame:0000000000023B5D                 db  30h ; 0
.eh_frame:0000000000023B5E                 db  41h ; A
.eh_frame:0000000000023B5F                 db  0Eh
.eh_frame:0000000000023B60                 db  28h ; (
.eh_frame:0000000000023B61                 db  42h ; B
.eh_frame:0000000000023B62                 db  0Eh
.eh_frame:0000000000023B63                 db  20h
.eh_frame:0000000000023B64                 db  42h ; B
.eh_frame:0000000000023B65                 db  0Eh
.eh_frame:0000000000023B66                 db  18h
.eh_frame:0000000000023B67                 db  42h ; B
.eh_frame:0000000000023B68                 db  0Eh
.eh_frame:0000000000023B69                 db  10h
.eh_frame:0000000000023B6A                 db  42h ; B
.eh_frame:0000000000023B6B                 db  0Eh
.eh_frame:0000000000023B6C                 db    8
.eh_frame:0000000000023B6D                 db  41h ; A
.eh_frame:0000000000023B6E                 db  0Bh
.eh_frame:0000000000023B6F                 db    0
.eh_frame:0000000000023B70                 db  10h
.eh_frame:0000000000023B71                 db    0
.eh_frame:0000000000023B72                 db    0
.eh_frame:0000000000023B73                 db    0
.eh_frame:0000000000023B74                 db  4Ch ; L
.eh_frame:0000000000023B75                 db    1
.eh_frame:0000000000023B76                 db    0
.eh_frame:0000000000023B77                 db    0
.eh_frame:0000000000023B78                 db  88h
.eh_frame:0000000000023B79                 db  0Bh
.eh_frame:0000000000023B7A                 db 0FEh
.eh_frame:0000000000023B7B                 db 0FFh
.eh_frame:0000000000023B7C                 db  0Ah
.eh_frame:0000000000023B7D                 db    0
.eh_frame:0000000000023B7E                 db    0
.eh_frame:0000000000023B7F                 db    0
.eh_frame:0000000000023B80                 db    0
.eh_frame:0000000000023B81                 db    0
.eh_frame:0000000000023B82                 db    0
.eh_frame:0000000000023B83                 db    0
.eh_frame:0000000000023B84                 db  48h ; H
.eh_frame:0000000000023B85                 db    0
.eh_frame:0000000000023B86                 db    0
.eh_frame:0000000000023B87                 db    0
.eh_frame:0000000000023B88                 db  60h ; `
.eh_frame:0000000000023B89                 db    1
.eh_frame:0000000000023B8A                 db    0
.eh_frame:0000000000023B8B                 db    0
.eh_frame:0000000000023B8C                 db  84h
.eh_frame:0000000000023B8D                 db  0Bh
.eh_frame:0000000000023B8E                 db 0FEh
.eh_frame:0000000000023B8F                 db 0FFh
.eh_frame:0000000000023B90                 db  16h
.eh_frame:0000000000023B91                 db    1
.eh_frame:0000000000023B92                 db    0
.eh_frame:0000000000023B93                 db    0
.eh_frame:0000000000023B94                 db    0
.eh_frame:0000000000023B95                 db  42h ; B
.eh_frame:0000000000023B96                 db  0Eh
.eh_frame:0000000000023B97                 db  10h
.eh_frame:0000000000023B98                 db  8Fh
.eh_frame:0000000000023B99                 db    2
.eh_frame:0000000000023B9A                 db  42h ; B
.eh_frame:0000000000023B9B                 db  0Eh
.eh_frame:0000000000023B9C                 db  18h
.eh_frame:0000000000023B9D                 db  8Eh
.eh_frame:0000000000023B9E                 db    3
.eh_frame:0000000000023B9F                 db  45h ; E
.eh_frame:0000000000023BA0                 db  0Eh
.eh_frame:0000000000023BA1                 db  20h
.eh_frame:0000000000023BA2                 db  8Dh
.eh_frame:0000000000023BA3                 db    4
.eh_frame:0000000000023BA4                 db  42h ; B
.eh_frame:0000000000023BA5                 db  0Eh
.eh_frame:0000000000023BA6                 db  28h ; (
.eh_frame:0000000000023BA7                 db  8Ch
.eh_frame:0000000000023BA8                 db    5
.eh_frame:0000000000023BA9                 db  44h ; D
.eh_frame:0000000000023BAA                 db  0Eh
.eh_frame:0000000000023BAB                 db  30h ; 0
.eh_frame:0000000000023BAC                 db  86h
.eh_frame:0000000000023BAD                 db    6
.eh_frame:0000000000023BAE                 db  41h ; A
.eh_frame:0000000000023BAF                 db  0Eh
.eh_frame:0000000000023BB0                 db  38h ; 8
.eh_frame:0000000000023BB1                 db  83h
.eh_frame:0000000000023BB2                 db    7
.eh_frame:0000000000023BB3                 db  47h ; G
.eh_frame:0000000000023BB4                 db  0Eh
.eh_frame:0000000000023BB5                 db  60h ; `
.eh_frame:0000000000023BB6                 db    2
.eh_frame:0000000000023BB7                 db 0DEh
.eh_frame:0000000000023BB8                 db  0Ah
.eh_frame:0000000000023BB9                 db  0Eh
.eh_frame:0000000000023BBA                 db  38h ; 8
.eh_frame:0000000000023BBB                 db  41h ; A
.eh_frame:0000000000023BBC                 db  0Eh
.eh_frame:0000000000023BBD                 db  30h ; 0
.eh_frame:0000000000023BBE                 db  41h ; A
.eh_frame:0000000000023BBF                 db  0Eh
.eh_frame:0000000000023BC0                 db  28h ; (
.eh_frame:0000000000023BC1                 db  42h ; B
.eh_frame:0000000000023BC2                 db  0Eh
.eh_frame:0000000000023BC3                 db  20h
.eh_frame:0000000000023BC4                 db  42h ; B
.eh_frame:0000000000023BC5                 db  0Eh
.eh_frame:0000000000023BC6                 db  18h
.eh_frame:0000000000023BC7                 db  42h ; B
.eh_frame:0000000000023BC8                 db  0Eh
.eh_frame:0000000000023BC9                 db  10h
.eh_frame:0000000000023BCA                 db  42h ; B
.eh_frame:0000000000023BCB                 db  0Eh
.eh_frame:0000000000023BCC                 db    8
.eh_frame:0000000000023BCD                 db  41h ; A
.eh_frame:0000000000023BCE                 db  0Bh
.eh_frame:0000000000023BCF                 db    0
.eh_frame:0000000000023BD0                 db  28h ; (
.eh_frame:0000000000023BD1                 db    0
.eh_frame:0000000000023BD2                 db    0
.eh_frame:0000000000023BD3                 db    0
.eh_frame:0000000000023BD4                 db 0ACh
.eh_frame:0000000000023BD5                 db    1
.eh_frame:0000000000023BD6                 db    0
.eh_frame:0000000000023BD7                 db    0
.eh_frame:0000000000023BD8                 db  58h ; X
.eh_frame:0000000000023BD9                 db  0Ch
.eh_frame:0000000000023BDA                 db 0FEh
.eh_frame:0000000000023BDB                 db 0FFh
.eh_frame:0000000000023BDC                 db  73h ; s
.eh_frame:0000000000023BDD                 db    0
.eh_frame:0000000000023BDE                 db    0
.eh_frame:0000000000023BDF                 db    0
.eh_frame:0000000000023BE0                 db    0
.eh_frame:0000000000023BE1                 db  46h ; F
.eh_frame:0000000000023BE2                 db  0Eh
.eh_frame:0000000000023BE3                 db  10h
.eh_frame:0000000000023BE4                 db  8Ch
.eh_frame:0000000000023BE5                 db    2
.eh_frame:0000000000023BE6                 db  46h ; F
.eh_frame:0000000000023BE7                 db  0Eh
.eh_frame:0000000000023BE8                 db  18h
.eh_frame:0000000000023BE9                 db  86h
.eh_frame:0000000000023BEA                 db    3
.eh_frame:0000000000023BEB                 db  44h ; D
.eh_frame:0000000000023BEC                 db  0Eh
.eh_frame:0000000000023BED                 db  20h
.eh_frame:0000000000023BEE                 db  83h
.eh_frame:0000000000023BEF                 db    4
.eh_frame:0000000000023BF0                 db  7Fh ; 
.eh_frame:0000000000023BF1                 db  0Ah
.eh_frame:0000000000023BF2                 db  0Eh
.eh_frame:0000000000023BF3                 db  18h
.eh_frame:0000000000023BF4                 db  41h ; A
.eh_frame:0000000000023BF5                 db  0Eh
.eh_frame:0000000000023BF6                 db  10h
.eh_frame:0000000000023BF7                 db  42h ; B
.eh_frame:0000000000023BF8                 db  0Eh
.eh_frame:0000000000023BF9                 db    8
.eh_frame:0000000000023BFA                 db  4Eh ; N
.eh_frame:0000000000023BFB                 db  0Bh
.eh_frame:0000000000023BFC                 db  5Ch ; \
.eh_frame:0000000000023BFD                 db    0
.eh_frame:0000000000023BFE                 db    0
.eh_frame:0000000000023BFF                 db    0
.eh_frame:0000000000023C00                 db 0D8h
.eh_frame:0000000000023C01                 db    1
.eh_frame:0000000000023C02                 db    0
.eh_frame:0000000000023C03                 db    0
.eh_frame:0000000000023C04                 db 0ACh
.eh_frame:0000000000023C05                 db  0Ch
.eh_frame:0000000000023C06                 db 0FEh
.eh_frame:0000000000023C07                 db 0FFh
.eh_frame:0000000000023C08                 db  20h
.eh_frame:0000000000023C09                 db    1
.eh_frame:0000000000023C0A                 db    0
.eh_frame:0000000000023C0B                 db    0
.eh_frame:0000000000023C0C                 db    0
.eh_frame:0000000000023C0D                 db  42h ; B
.eh_frame:0000000000023C0E                 db  0Eh
.eh_frame:0000000000023C0F                 db  10h
.eh_frame:0000000000023C10                 db  8Fh
.eh_frame:0000000000023C11                 db    2
.eh_frame:0000000000023C12                 db  42h ; B
.eh_frame:0000000000023C13                 db  0Eh
.eh_frame:0000000000023C14                 db  18h
.eh_frame:0000000000023C15                 db  8Eh
.eh_frame:0000000000023C16                 db    3
.eh_frame:0000000000023C17                 db  45h ; E
.eh_frame:0000000000023C18                 db  0Eh
.eh_frame:0000000000023C19                 db  20h
.eh_frame:0000000000023C1A                 db  8Dh
.eh_frame:0000000000023C1B                 db    4
.eh_frame:0000000000023C1C                 db  42h ; B
.eh_frame:0000000000023C1D                 db  0Eh
.eh_frame:0000000000023C1E                 db  28h ; (
.eh_frame:0000000000023C1F                 db  8Ch
.eh_frame:0000000000023C20                 db    5
.eh_frame:0000000000023C21                 db  43h ; C
.eh_frame:0000000000023C22                 db  0Eh
.eh_frame:0000000000023C23                 db  30h ; 0
.eh_frame:0000000000023C24                 db  86h
.eh_frame:0000000000023C25                 db    6
.eh_frame:0000000000023C26                 db  41h ; A
.eh_frame:0000000000023C27                 db  0Eh
.eh_frame:0000000000023C28                 db  38h ; 8
.eh_frame:0000000000023C29                 db  83h
.eh_frame:0000000000023C2A                 db    7
.eh_frame:0000000000023C2B                 db  56h ; V
.eh_frame:0000000000023C2C                 db  0Eh
.eh_frame:0000000000023C2D                 db  40h ; @
.eh_frame:0000000000023C2E                 db    2
.eh_frame:0000000000023C2F                 db 0D3h
.eh_frame:0000000000023C30                 db  0Ah
.eh_frame:0000000000023C31                 db  0Eh
.eh_frame:0000000000023C32                 db  38h ; 8
.eh_frame:0000000000023C33                 db  41h ; A
.eh_frame:0000000000023C34                 db  0Eh
.eh_frame:0000000000023C35                 db  30h ; 0
.eh_frame:0000000000023C36                 db  41h ; A
.eh_frame:0000000000023C37                 db  0Eh
.eh_frame:0000000000023C38                 db  28h ; (
.eh_frame:0000000000023C39                 db  42h ; B
.eh_frame:0000000000023C3A                 db  0Eh
.eh_frame:0000000000023C3B                 db  20h
.eh_frame:0000000000023C3C                 db  42h ; B
.eh_frame:0000000000023C3D                 db  0Eh
.eh_frame:0000000000023C3E                 db  18h
.eh_frame:0000000000023C3F                 db  42h ; B
.eh_frame:0000000000023C40                 db  0Eh
.eh_frame:0000000000023C41                 db  10h
.eh_frame:0000000000023C42                 db  42h ; B
.eh_frame:0000000000023C43                 db  0Eh
.eh_frame:0000000000023C44                 db    8
.eh_frame:0000000000023C45                 db  46h ; F
.eh_frame:0000000000023C46                 db  0Bh
.eh_frame:0000000000023C47                 db  44h ; D
.eh_frame:0000000000023C48                 db  0Eh
.eh_frame:0000000000023C49                 db  38h ; 8
.eh_frame:0000000000023C4A                 db  46h ; F
.eh_frame:0000000000023C4B                 db  0Eh
.eh_frame:0000000000023C4C                 db  30h ; 0
.eh_frame:0000000000023C4D                 db  41h ; A
.eh_frame:0000000000023C4E                 db  0Eh
.eh_frame:0000000000023C4F                 db  28h ; (
.eh_frame:0000000000023C50                 db  42h ; B
.eh_frame:0000000000023C51                 db  0Eh
.eh_frame:0000000000023C52                 db  20h
.eh_frame:0000000000023C53                 db  42h ; B
.eh_frame:0000000000023C54                 db  0Eh
.eh_frame:0000000000023C55                 db  18h
.eh_frame:0000000000023C56                 db  42h ; B
.eh_frame:0000000000023C57                 db  0Eh
.eh_frame:0000000000023C58                 db  10h
.eh_frame:0000000000023C59                 db  42h ; B
.eh_frame:0000000000023C5A                 db  0Eh
.eh_frame:0000000000023C5B                 db    8
.eh_frame:0000000000023C5C                 db  48h ; H
.eh_frame:0000000000023C5D                 db    0
.eh_frame:0000000000023C5E                 db    0
.eh_frame:0000000000023C5F                 db    0
.eh_frame:0000000000023C60                 db  38h ; 8
.eh_frame:0000000000023C61                 db    2
.eh_frame:0000000000023C62                 db    0
.eh_frame:0000000000023C63                 db    0
.eh_frame:0000000000023C64                 db  6Ch ; l
.eh_frame:0000000000023C65                 db  0Dh
.eh_frame:0000000000023C66                 db 0FEh
.eh_frame:0000000000023C67                 db 0FFh
.eh_frame:0000000000023C68                 db  6Dh ; m
.eh_frame:0000000000023C69                 db    0
.eh_frame:0000000000023C6A                 db    0
.eh_frame:0000000000023C6B                 db    0
.eh_frame:0000000000023C6C                 db    0
.eh_frame:0000000000023C6D                 db  42h ; B
.eh_frame:0000000000023C6E                 db  0Eh
.eh_frame:0000000000023C6F                 db  10h
.eh_frame:0000000000023C70                 db  8Fh
.eh_frame:0000000000023C71                 db    2
.eh_frame:0000000000023C72                 db  42h ; B
.eh_frame:0000000000023C73                 db  0Eh
.eh_frame:0000000000023C74                 db  18h
.eh_frame:0000000000023C75                 db  8Eh
.eh_frame:0000000000023C76                 db    3
.eh_frame:0000000000023C77                 db  45h ; E
.eh_frame:0000000000023C78                 db  0Eh
.eh_frame:0000000000023C79                 db  20h
.eh_frame:0000000000023C7A                 db  8Dh
.eh_frame:0000000000023C7B                 db    4
.eh_frame:0000000000023C7C                 db  42h ; B
.eh_frame:0000000000023C7D                 db  0Eh
.eh_frame:0000000000023C7E                 db  28h ; (
.eh_frame:0000000000023C7F                 db  8Ch
.eh_frame:0000000000023C80                 db    5
.eh_frame:0000000000023C81                 db  44h ; D
.eh_frame:0000000000023C82                 db  0Eh
.eh_frame:0000000000023C83                 db  30h ; 0
.eh_frame:0000000000023C84                 db  86h
.eh_frame:0000000000023C85                 db    6
.eh_frame:0000000000023C86                 db  41h ; A
.eh_frame:0000000000023C87                 db  0Eh
.eh_frame:0000000000023C88                 db  38h ; 8
.eh_frame:0000000000023C89                 db  83h
.eh_frame:0000000000023C8A                 db    7
.eh_frame:0000000000023C8B                 db  50h ; P
.eh_frame:0000000000023C8C                 db  0Eh
.eh_frame:0000000000023C8D                 db  40h ; @
.eh_frame:0000000000023C8E                 db  5Ah ; Z
.eh_frame:0000000000023C8F                 db  0Ah
.eh_frame:0000000000023C90                 db  0Eh
.eh_frame:0000000000023C91                 db  38h ; 8
.eh_frame:0000000000023C92                 db  41h ; A
.eh_frame:0000000000023C93                 db  0Eh
.eh_frame:0000000000023C94                 db  30h ; 0
.eh_frame:0000000000023C95                 db  41h ; A
.eh_frame:0000000000023C96                 db  0Eh
.eh_frame:0000000000023C97                 db  28h ; (
.eh_frame:0000000000023C98                 db  42h ; B
.eh_frame:0000000000023C99                 db  0Eh
.eh_frame:0000000000023C9A                 db  20h
.eh_frame:0000000000023C9B                 db  42h ; B
.eh_frame:0000000000023C9C                 db  0Eh
.eh_frame:0000000000023C9D                 db  18h
.eh_frame:0000000000023C9E                 db  42h ; B
.eh_frame:0000000000023C9F                 db  0Eh
.eh_frame:0000000000023CA0                 db  10h
.eh_frame:0000000000023CA1                 db  42h ; B
.eh_frame:0000000000023CA2                 db  0Eh
.eh_frame:0000000000023CA3                 db    8
.eh_frame:0000000000023CA4                 db  41h ; A
.eh_frame:0000000000023CA5                 db  0Bh
.eh_frame:0000000000023CA6                 db    0
.eh_frame:0000000000023CA7                 db    0
.eh_frame:0000000000023CA8                 db  3Ch ; <
.eh_frame:0000000000023CA9                 db    0
.eh_frame:0000000000023CAA                 db    0
.eh_frame:0000000000023CAB                 db    0
.eh_frame:0000000000023CAC                 db  84h
.eh_frame:0000000000023CAD                 db    2
.eh_frame:0000000000023CAE                 db    0
.eh_frame:0000000000023CAF                 db    0
.eh_frame:0000000000023CB0                 db  90h
.eh_frame:0000000000023CB1                 db  0Dh
.eh_frame:0000000000023CB2                 db 0FEh
.eh_frame:0000000000023CB3                 db 0FFh
.eh_frame:0000000000023CB4                 db  4Dh ; M
.eh_frame:0000000000023CB5                 db    0
.eh_frame:0000000000023CB6                 db    0
.eh_frame:0000000000023CB7                 db    0
.eh_frame:0000000000023CB8                 db    0
.eh_frame:0000000000023CB9                 db  42h ; B
.eh_frame:0000000000023CBA                 db  0Eh
.eh_frame:0000000000023CBB                 db  10h
.eh_frame:0000000000023CBC                 db  8Eh
.eh_frame:0000000000023CBD                 db    2
.eh_frame:0000000000023CBE                 db  42h ; B
.eh_frame:0000000000023CBF                 db  0Eh
.eh_frame:0000000000023CC0                 db  18h
.eh_frame:0000000000023CC1                 db  8Dh
.eh_frame:0000000000023CC2                 db    3
.eh_frame:0000000000023CC3                 db  42h ; B
.eh_frame:0000000000023CC4                 db  0Eh
.eh_frame:0000000000023CC5                 db  20h
.eh_frame:0000000000023CC6                 db  8Ch
.eh_frame:0000000000023CC7                 db    4
.eh_frame:0000000000023CC8                 db  41h ; A
.eh_frame:0000000000023CC9                 db  0Eh
.eh_frame:0000000000023CCA                 db  28h ; (
.eh_frame:0000000000023CCB                 db  86h
.eh_frame:0000000000023CCC                 db    5
.eh_frame:0000000000023CCD                 db  41h ; A
.eh_frame:0000000000023CCE                 db  0Eh
.eh_frame:0000000000023CCF                 db  30h ; 0
.eh_frame:0000000000023CD0                 db  83h
.eh_frame:0000000000023CD1                 db    6
.eh_frame:0000000000023CD2                 db  7Ah ; z
.eh_frame:0000000000023CD3                 db  0Eh
.eh_frame:0000000000023CD4                 db  28h ; (
.eh_frame:0000000000023CD5                 db  44h ; D
.eh_frame:0000000000023CD6                 db  0Eh
.eh_frame:0000000000023CD7                 db  20h
.eh_frame:0000000000023CD8                 db  42h ; B
.eh_frame:0000000000023CD9                 db  0Eh
.eh_frame:0000000000023CDA                 db  18h
.eh_frame:0000000000023CDB                 db  42h ; B
.eh_frame:0000000000023CDC                 db  0Eh
.eh_frame:0000000000023CDD                 db  10h
.eh_frame:0000000000023CDE                 db  42h ; B
.eh_frame:0000000000023CDF                 db  0Eh
.eh_frame:0000000000023CE0                 db    8
.eh_frame:0000000000023CE1                 db    0
.eh_frame:0000000000023CE2                 db    0
.eh_frame:0000000000023CE3                 db    0
.eh_frame:0000000000023CE4                 db    0
.eh_frame:0000000000023CE5                 db    0
.eh_frame:0000000000023CE6                 db    0
.eh_frame:0000000000023CE7                 db    0
.eh_frame:0000000000023CE8                 db  18h
.eh_frame:0000000000023CE9                 db    0
.eh_frame:0000000000023CEA                 db    0
.eh_frame:0000000000023CEB                 db    0
.eh_frame:0000000000023CEC                 db 0C4h
.eh_frame:0000000000023CED                 db    2
.eh_frame:0000000000023CEE                 db    0
.eh_frame:0000000000023CEF                 db    0
.eh_frame:0000000000023CF0                 db 0A0h
.eh_frame:0000000000023CF1                 db  0Dh
.eh_frame:0000000000023CF2                 db 0FEh
.eh_frame:0000000000023CF3                 db 0FFh
.eh_frame:0000000000023CF4                 db  24h ; $
.eh_frame:0000000000023CF5                 db    0
.eh_frame:0000000000023CF6                 db    0
.eh_frame:0000000000023CF7                 db    0
.eh_frame:0000000000023CF8                 db    0
.eh_frame:0000000000023CF9                 db  41h ; A
.eh_frame:0000000000023CFA                 db  0Eh
.eh_frame:0000000000023CFB                 db  10h
.eh_frame:0000000000023CFC                 db  83h
.eh_frame:0000000000023CFD                 db    2
.eh_frame:0000000000023CFE                 db  62h ; b
.eh_frame:0000000000023CFF                 db  0Eh
.eh_frame:0000000000023D00                 db    8
.eh_frame:0000000000023D01                 db    0
.eh_frame:0000000000023D02                 db    0
.eh_frame:0000000000023D03                 db    0
.eh_frame:0000000000023D04                 db  18h
.eh_frame:0000000000023D05                 db    0
.eh_frame:0000000000023D06                 db    0
.eh_frame:0000000000023D07                 db    0
.eh_frame:0000000000023D08                 db 0E0h
.eh_frame:0000000000023D09                 db    2
.eh_frame:0000000000023D0A                 db    0
.eh_frame:0000000000023D0B                 db    0
.eh_frame:0000000000023D0C                 db 0B4h
.eh_frame:0000000000023D0D                 db  0Dh
.eh_frame:0000000000023D0E                 db 0FEh
.eh_frame:0000000000023D0F                 db 0FFh
.eh_frame:0000000000023D10                 db  38h ; 8
.eh_frame:0000000000023D11                 db    0
.eh_frame:0000000000023D12                 db    0
.eh_frame:0000000000023D13                 db    0
.eh_frame:0000000000023D14                 db    0
.eh_frame:0000000000023D15                 db  41h ; A
.eh_frame:0000000000023D16                 db  0Eh
.eh_frame:0000000000023D17                 db  10h
.eh_frame:0000000000023D18                 db  83h
.eh_frame:0000000000023D19                 db    2
.eh_frame:0000000000023D1A                 db  76h ; v
.eh_frame:0000000000023D1B                 db  0Eh
.eh_frame:0000000000023D1C                 db    8
.eh_frame:0000000000023D1D                 db    0
.eh_frame:0000000000023D1E                 db    0
.eh_frame:0000000000023D1F                 db    0
.eh_frame:0000000000023D20                 db  30h ; 0
.eh_frame:0000000000023D21                 db    0
.eh_frame:0000000000023D22                 db    0
.eh_frame:0000000000023D23                 db    0
.eh_frame:0000000000023D24                 db 0FCh
.eh_frame:0000000000023D25                 db    2
.eh_frame:0000000000023D26                 db    0
.eh_frame:0000000000023D27                 db    0
.eh_frame:0000000000023D28                 db 0D8h
.eh_frame:0000000000023D29                 db  0Dh
.eh_frame:0000000000023D2A                 db 0FEh
.eh_frame:0000000000023D2B                 db 0FFh
.eh_frame:0000000000023D2C                 db  8Ah
.eh_frame:0000000000023D2D                 db    0
.eh_frame:0000000000023D2E                 db    0
.eh_frame:0000000000023D2F                 db    0
.eh_frame:0000000000023D30                 db    0
.eh_frame:0000000000023D31                 db  49h ; I
.eh_frame:0000000000023D32                 db  0Eh
.eh_frame:0000000000023D33                 db  10h
.eh_frame:0000000000023D34                 db  86h
.eh_frame:0000000000023D35                 db    2
.eh_frame:0000000000023D36                 db  41h ; A
.eh_frame:0000000000023D37                 db  0Eh
.eh_frame:0000000000023D38                 db  18h
.eh_frame:0000000000023D39                 db  83h
.eh_frame:0000000000023D3A                 db    3
.eh_frame:0000000000023D3B                 db  52h ; R
.eh_frame:0000000000023D3C                 db  0Eh
.eh_frame:0000000000023D3D                 db  20h
.eh_frame:0000000000023D3E                 db  60h ; `
.eh_frame:0000000000023D3F                 db  0Eh
.eh_frame:0000000000023D40                 db  18h
.eh_frame:0000000000023D41                 db  41h ; A
.eh_frame:0000000000023D42                 db  0Eh
.eh_frame:0000000000023D43                 db  10h
.eh_frame:0000000000023D44                 db  41h ; A
.eh_frame:0000000000023D45                 db  0Eh
.eh_frame:0000000000023D46                 db    8
.eh_frame:0000000000023D47                 db  42h ; B
.eh_frame:0000000000023D48                 db 0C3h
.eh_frame:0000000000023D49                 db 0C6h
.eh_frame:0000000000023D4A                 db  70h ; p
.eh_frame:0000000000023D4B                 db  0Eh
.eh_frame:0000000000023D4C                 db  20h
.eh_frame:0000000000023D4D                 db  83h
.eh_frame:0000000000023D4E                 db    3
.eh_frame:0000000000023D4F                 db  86h
.eh_frame:0000000000023D50                 db    2
.eh_frame:0000000000023D51                 db    0
.eh_frame:0000000000023D52                 db    0
.eh_frame:0000000000023D53                 db    0
.eh_frame:0000000000023D54                 db  10h
.eh_frame:0000000000023D55                 db    0
.eh_frame:0000000000023D56                 db    0
.eh_frame:0000000000023D57                 db    0
.eh_frame:0000000000023D58                 db  30h ; 0
.eh_frame:0000000000023D59                 db    3
.eh_frame:0000000000023D5A                 db    0
.eh_frame:0000000000023D5B                 db    0
.eh_frame:0000000000023D5C                 db  34h ; 4
.eh_frame:0000000000023D5D                 db  0Eh
.eh_frame:0000000000023D5E                 db 0FEh
.eh_frame:0000000000023D5F                 db 0FFh
.eh_frame:0000000000023D60                 db  1Dh
.eh_frame:0000000000023D61                 db    0
.eh_frame:0000000000023D62                 db    0
.eh_frame:0000000000023D63                 db    0
.eh_frame:0000000000023D64                 db    0
.eh_frame:0000000000023D65                 db    0
.eh_frame:0000000000023D66                 db    0
.eh_frame:0000000000023D67                 db    0
.eh_frame:0000000000023D68                 db  1Ch
.eh_frame:0000000000023D69                 db    0
.eh_frame:0000000000023D6A                 db    0
.eh_frame:0000000000023D6B                 db    0
.eh_frame:0000000000023D6C                 db  44h ; D
.eh_frame:0000000000023D6D                 db    3
.eh_frame:0000000000023D6E                 db    0
.eh_frame:0000000000023D6F                 db    0
.eh_frame:0000000000023D70                 db  40h ; @
.eh_frame:0000000000023D71                 db  0Eh
.eh_frame:0000000000023D72                 db 0FEh
.eh_frame:0000000000023D73                 db 0FFh
.eh_frame:0000000000023D74                 db  1Ch
.eh_frame:0000000000023D75                 db    0
.eh_frame:0000000000023D76                 db    0
.eh_frame:0000000000023D77                 db    0
.eh_frame:0000000000023D78                 db    0
.eh_frame:0000000000023D79                 db  41h ; A
.eh_frame:0000000000023D7A                 db  0Eh
.eh_frame:0000000000023D7B                 db  10h
.eh_frame:0000000000023D7C                 db  83h
.eh_frame:0000000000023D7D                 db    2
.eh_frame:0000000000023D7E                 db  56h ; V
.eh_frame:0000000000023D7F                 db  0Eh
.eh_frame:0000000000023D80                 db    8
.eh_frame:0000000000023D81                 db    0
.eh_frame:0000000000023D82                 db    0
.eh_frame:0000000000023D83                 db    0
.eh_frame:0000000000023D84                 db    0
.eh_frame:0000000000023D85                 db    0
.eh_frame:0000000000023D86                 db    0
.eh_frame:0000000000023D87                 db    0
.eh_frame:0000000000023D88                 db  10h
.eh_frame:0000000000023D89                 db    0
.eh_frame:0000000000023D8A                 db    0
.eh_frame:0000000000023D8B                 db    0
.eh_frame:0000000000023D8C                 db  64h ; d
.eh_frame:0000000000023D8D                 db    3
.eh_frame:0000000000023D8E                 db    0
.eh_frame:0000000000023D8F                 db    0
.eh_frame:0000000000023D90                 db  40h ; @
.eh_frame:0000000000023D91                 db  0Eh
.eh_frame:0000000000023D92                 db 0FEh
.eh_frame:0000000000023D93                 db 0FFh
.eh_frame:0000000000023D94                 db    8
.eh_frame:0000000000023D95                 db    0
.eh_frame:0000000000023D96                 db    0
.eh_frame:0000000000023D97                 db    0
.eh_frame:0000000000023D98                 db    0
.eh_frame:0000000000023D99                 db    0
.eh_frame:0000000000023D9A                 db    0
.eh_frame:0000000000023D9B                 db    0
.eh_frame:0000000000023D9C                 db  10h
.eh_frame:0000000000023D9D                 db    0
.eh_frame:0000000000023D9E                 db    0
.eh_frame:0000000000023D9F                 db    0
.eh_frame:0000000000023DA0                 db  78h ; x
.eh_frame:0000000000023DA1                 db    3
.eh_frame:0000000000023DA2                 db    0
.eh_frame:0000000000023DA3                 db    0
.eh_frame:0000000000023DA4                 db  3Ch ; <
.eh_frame:0000000000023DA5                 db  0Eh
.eh_frame:0000000000023DA6                 db 0FEh
.eh_frame:0000000000023DA7                 db 0FFh
.eh_frame:0000000000023DA8                 db    8
.eh_frame:0000000000023DA9                 db    0
.eh_frame:0000000000023DAA                 db    0
.eh_frame:0000000000023DAB                 db    0
.eh_frame:0000000000023DAC                 db    0
.eh_frame:0000000000023DAD                 db    0
.eh_frame:0000000000023DAE                 db    0
.eh_frame:0000000000023DAF                 db    0
.eh_frame:0000000000023DB0                 db  2Ch ; ,
.eh_frame:0000000000023DB1                 db    0
.eh_frame:0000000000023DB2                 db    0
.eh_frame:0000000000023DB3                 db    0
.eh_frame:0000000000023DB4                 db  8Ch
.eh_frame:0000000000023DB5                 db    3
.eh_frame:0000000000023DB6                 db    0
.eh_frame:0000000000023DB7                 db    0
.eh_frame:0000000000023DB8                 db  38h ; 8
.eh_frame:0000000000023DB9                 db  0Eh
.eh_frame:0000000000023DBA                 db 0FEh
.eh_frame:0000000000023DBB                 db 0FFh
.eh_frame:0000000000023DBC                 db 0A4h
.eh_frame:0000000000023DBD                 db    0
.eh_frame:0000000000023DBE                 db    0
.eh_frame:0000000000023DBF                 db    0
.eh_frame:0000000000023DC0                 db    0
.eh_frame:0000000000023DC1                 db  41h ; A
.eh_frame:0000000000023DC2                 db  0Eh
.eh_frame:0000000000023DC3                 db  10h
.eh_frame:0000000000023DC4                 db  86h
.eh_frame:0000000000023DC5                 db    2
.eh_frame:0000000000023DC6                 db  41h ; A
.eh_frame:0000000000023DC7                 db  0Eh
.eh_frame:0000000000023DC8                 db  18h
.eh_frame:0000000000023DC9                 db  83h
.eh_frame:0000000000023DCA                 db    3
.eh_frame:0000000000023DCB                 db  44h ; D
.eh_frame:0000000000023DCC                 db  0Eh
.eh_frame:0000000000023DCD                 db  20h
.eh_frame:0000000000023DCE                 db  7Ah ; z
.eh_frame:0000000000023DCF                 db  0Ah
.eh_frame:0000000000023DD0                 db  0Eh
.eh_frame:0000000000023DD1                 db  18h
.eh_frame:0000000000023DD2                 db  41h ; A
.eh_frame:0000000000023DD3                 db  0Eh
.eh_frame:0000000000023DD4                 db  10h
.eh_frame:0000000000023DD5                 db  41h ; A
.eh_frame:0000000000023DD6                 db  0Eh
.eh_frame:0000000000023DD7                 db    8
.eh_frame:0000000000023DD8                 db  41h ; A
.eh_frame:0000000000023DD9                 db  0Bh
.eh_frame:0000000000023DDA                 db    0
.eh_frame:0000000000023DDB                 db    0
.eh_frame:0000000000023DDC                 db    0
.eh_frame:0000000000023DDD                 db    0
.eh_frame:0000000000023DDE                 db    0
.eh_frame:0000000000023DDF                 db    0
.eh_frame:0000000000023DE0                 db  10h
.eh_frame:0000000000023DE1                 db    0
.eh_frame:0000000000023DE2                 db    0
.eh_frame:0000000000023DE3                 db    0
.eh_frame:0000000000023DE4                 db 0BCh
.eh_frame:0000000000023DE5                 db    3
.eh_frame:0000000000023DE6                 db    0
.eh_frame:0000000000023DE7                 db    0
.eh_frame:0000000000023DE8                 db 0B8h
.eh_frame:0000000000023DE9                 db  0Eh
.eh_frame:0000000000023DEA                 db 0FEh
.eh_frame:0000000000023DEB                 db 0FFh
.eh_frame:0000000000023DEC                 db  0Ch
.eh_frame:0000000000023DED                 db    0
.eh_frame:0000000000023DEE                 db    0
.eh_frame:0000000000023DEF                 db    0
.eh_frame:0000000000023DF0                 db    0
.eh_frame:0000000000023DF1                 db    0
.eh_frame:0000000000023DF2                 db    0
.eh_frame:0000000000023DF3                 db    0
.eh_frame:0000000000023DF4                 db  10h
.eh_frame:0000000000023DF5                 db    0
.eh_frame:0000000000023DF6                 db    0
.eh_frame:0000000000023DF7                 db    0
.eh_frame:0000000000023DF8                 db 0D0h
.eh_frame:0000000000023DF9                 db    3
.eh_frame:0000000000023DFA                 db    0
.eh_frame:0000000000023DFB                 db    0
.eh_frame:0000000000023DFC                 db 0B4h
.eh_frame:0000000000023DFD                 db  0Eh
.eh_frame:0000000000023DFE                 db 0FEh
.eh_frame:0000000000023DFF                 db 0FFh
.eh_frame:0000000000023E00                 db  0Ah
.eh_frame:0000000000023E01                 db    0
.eh_frame:0000000000023E02                 db    0
.eh_frame:0000000000023E03                 db    0
.eh_frame:0000000000023E04                 db    0
.eh_frame:0000000000023E05                 db    0
.eh_frame:0000000000023E06                 db    0
.eh_frame:0000000000023E07                 db    0
.eh_frame:0000000000023E08                 db  10h
.eh_frame:0000000000023E09                 db    0
.eh_frame:0000000000023E0A                 db    0
.eh_frame:0000000000023E0B                 db    0
.eh_frame:0000000000023E0C                 db 0E4h
.eh_frame:0000000000023E0D                 db    3
.eh_frame:0000000000023E0E                 db    0
.eh_frame:0000000000023E0F                 db    0
.eh_frame:0000000000023E10                 db 0B0h
.eh_frame:0000000000023E11                 db  0Eh
.eh_frame:0000000000023E12                 db 0FEh
.eh_frame:0000000000023E13                 db 0FFh
.eh_frame:0000000000023E14                 db  0Ch
.eh_frame:0000000000023E15                 db    0
.eh_frame:0000000000023E16                 db    0
.eh_frame:0000000000023E17                 db    0
.eh_frame:0000000000023E18                 db    0
.eh_frame:0000000000023E19                 db    0
.eh_frame:0000000000023E1A                 db    0
.eh_frame:0000000000023E1B                 db    0
.eh_frame:0000000000023E1C                 db  18h
.eh_frame:0000000000023E1D                 db    0
.eh_frame:0000000000023E1E                 db    0
.eh_frame:0000000000023E1F                 db    0
.eh_frame:0000000000023E20                 db 0F8h
.eh_frame:0000000000023E21                 db    3
.eh_frame:0000000000023E22                 db    0
.eh_frame:0000000000023E23                 db    0
.eh_frame:0000000000023E24                 db 0ACh
.eh_frame:0000000000023E25                 db  0Eh
.eh_frame:0000000000023E26                 db 0FEh
.eh_frame:0000000000023E27                 db 0FFh
.eh_frame:0000000000023E28                 db  16h
.eh_frame:0000000000023E29                 db    0
.eh_frame:0000000000023E2A                 db    0
.eh_frame:0000000000023E2B                 db    0
.eh_frame:0000000000023E2C                 db    0
.eh_frame:0000000000023E2D                 db  41h ; A
.eh_frame:0000000000023E2E                 db  0Eh
.eh_frame:0000000000023E2F                 db  10h
.eh_frame:0000000000023E30                 db  83h
.eh_frame:0000000000023E31                 db    2
.eh_frame:0000000000023E32                 db  50h ; P
.eh_frame:0000000000023E33                 db  0Eh
.eh_frame:0000000000023E34                 db    8
.eh_frame:0000000000023E35                 db    0
.eh_frame:0000000000023E36                 db    0
.eh_frame:0000000000023E37                 db    0
.eh_frame:0000000000023E38                 db  4Ch ; L
.eh_frame:0000000000023E39                 db    0
.eh_frame:0000000000023E3A                 db    0
.eh_frame:0000000000023E3B                 db    0
.eh_frame:0000000000023E3C                 db  14h
.eh_frame:0000000000023E3D                 db    4
.eh_frame:0000000000023E3E                 db    0
.eh_frame:0000000000023E3F                 db    0
.eh_frame:0000000000023E40                 db 0B0h
.eh_frame:0000000000023E41                 db  0Eh
.eh_frame:0000000000023E42                 db 0FEh
.eh_frame:0000000000023E43                 db 0FFh
.eh_frame:0000000000023E44                 db 0B5h
.eh_frame:0000000000023E45                 db    0
.eh_frame:0000000000023E46                 db    0
.eh_frame:0000000000023E47                 db    0
.eh_frame:0000000000023E48                 db    0
.eh_frame:0000000000023E49                 db  42h ; B
.eh_frame:0000000000023E4A                 db  0Eh
.eh_frame:0000000000023E4B                 db  10h
.eh_frame:0000000000023E4C                 db  8Ch
.eh_frame:0000000000023E4D                 db    2
.eh_frame:0000000000023E4E                 db  41h ; A
.eh_frame:0000000000023E4F                 db  0Eh
.eh_frame:0000000000023E50                 db  18h
.eh_frame:0000000000023E51                 db  86h
.eh_frame:0000000000023E52                 db    3
.eh_frame:0000000000023E53                 db  44h ; D
.eh_frame:0000000000023E54                 db  0Eh
.eh_frame:0000000000023E55                 db  20h
.eh_frame:0000000000023E56                 db  83h
.eh_frame:0000000000023E57                 db    4
.eh_frame:0000000000023E58                 db  47h ; G
.eh_frame:0000000000023E59                 db  0Eh
.eh_frame:0000000000023E5A                 db  30h ; 0
.eh_frame:0000000000023E5B                 db  71h ; q
.eh_frame:0000000000023E5C                 db  0Ah
.eh_frame:0000000000023E5D                 db  0Eh
.eh_frame:0000000000023E5E                 db  20h
.eh_frame:0000000000023E5F                 db  41h ; A
.eh_frame:0000000000023E60                 db  0Eh
.eh_frame:0000000000023E61                 db  18h
.eh_frame:0000000000023E62                 db  41h ; A
.eh_frame:0000000000023E63                 db  0Eh
.eh_frame:0000000000023E64                 db  10h
.eh_frame:0000000000023E65                 db  42h ; B
.eh_frame:0000000000023E66                 db  0Eh
.eh_frame:0000000000023E67                 db    8
.eh_frame:0000000000023E68                 db  45h ; E
.eh_frame:0000000000023E69                 db  0Bh
.eh_frame:0000000000023E6A                 db  48h ; H
.eh_frame:0000000000023E6B                 db  0Ah
.eh_frame:0000000000023E6C                 db  0Eh
.eh_frame:0000000000023E6D                 db  20h
.eh_frame:0000000000023E6E                 db  41h ; A
.eh_frame:0000000000023E6F                 db  0Eh
.eh_frame:0000000000023E70                 db  18h
.eh_frame:0000000000023E71                 db  41h ; A
.eh_frame:0000000000023E72                 db  0Eh
.eh_frame:0000000000023E73                 db  10h
.eh_frame:0000000000023E74                 db  42h ; B
.eh_frame:0000000000023E75                 db  0Eh
.eh_frame:0000000000023E76                 db    8
.eh_frame:0000000000023E77                 db  44h ; D
.eh_frame:0000000000023E78                 db  0Bh
.eh_frame:0000000000023E79                 db    2
.eh_frame:0000000000023E7A                 db  58h ; X
.eh_frame:0000000000023E7B                 db  0Eh
.eh_frame:0000000000023E7C                 db  20h
.eh_frame:0000000000023E7D                 db  41h ; A
.eh_frame:0000000000023E7E                 db  0Eh
.eh_frame:0000000000023E7F                 db  18h
.eh_frame:0000000000023E80                 db  41h ; A
.eh_frame:0000000000023E81                 db  0Eh
.eh_frame:0000000000023E82                 db  10h
.eh_frame:0000000000023E83                 db  42h ; B
.eh_frame:0000000000023E84                 db  0Eh
.eh_frame:0000000000023E85                 db    8
.eh_frame:0000000000023E86                 db    0
.eh_frame:0000000000023E87                 db    0
.eh_frame:0000000000023E88                 db  28h ; (
.eh_frame:0000000000023E89                 db    0
.eh_frame:0000000000023E8A                 db    0
.eh_frame:0000000000023E8B                 db    0
.eh_frame:0000000000023E8C                 db  64h ; d
.eh_frame:0000000000023E8D                 db    4
.eh_frame:0000000000023E8E                 db    0
.eh_frame:0000000000023E8F                 db    0
.eh_frame:0000000000023E90                 db  20h
.eh_frame:0000000000023E91                 db  0Fh
.eh_frame:0000000000023E92                 db 0FEh
.eh_frame:0000000000023E93                 db 0FFh
.eh_frame:0000000000023E94                 db  69h ; i
.eh_frame:0000000000023E95                 db    0
.eh_frame:0000000000023E96                 db    0
.eh_frame:0000000000023E97                 db    0
.eh_frame:0000000000023E98                 db    0
.eh_frame:0000000000023E99                 db  54h ; T
.eh_frame:0000000000023E9A                 db  0Eh
.eh_frame:0000000000023E9B                 db  10h
.eh_frame:0000000000023E9C                 db  83h
.eh_frame:0000000000023E9D                 db    2
.eh_frame:0000000000023E9E                 db  47h ; G
.eh_frame:0000000000023E9F                 db  0Eh
.eh_frame:0000000000023EA0                 db  20h
.eh_frame:0000000000023EA1                 db  4Ch ; L
.eh_frame:0000000000023EA2                 db  0Eh
.eh_frame:0000000000023EA3                 db  10h
.eh_frame:0000000000023EA4                 db  41h ; A
.eh_frame:0000000000023EA5                 db 0C3h
.eh_frame:0000000000023EA6                 db  0Eh
.eh_frame:0000000000023EA7                 db    8
.eh_frame:0000000000023EA8                 db  50h ; P
.eh_frame:0000000000023EA9                 db  0Eh
.eh_frame:0000000000023EAA                 db  20h
.eh_frame:0000000000023EAB                 db  83h
.eh_frame:0000000000023EAC                 db    2
.eh_frame:0000000000023EAD                 db  68h ; h
.eh_frame:0000000000023EAE                 db  0Eh
.eh_frame:0000000000023EAF                 db  10h
.eh_frame:0000000000023EB0                 db  48h ; H
.eh_frame:0000000000023EB1                 db  0Eh
.eh_frame:0000000000023EB2                 db    8
.eh_frame:0000000000023EB3                 db    0
.eh_frame:0000000000023EB4                 db  1Ch
.eh_frame:0000000000023EB5                 db    0
.eh_frame:0000000000023EB6                 db    0
.eh_frame:0000000000023EB7                 db    0
.eh_frame:0000000000023EB8                 db  90h
.eh_frame:0000000000023EB9                 db    4
.eh_frame:0000000000023EBA                 db    0
.eh_frame:0000000000023EBB                 db    0
.eh_frame:0000000000023EBC                 db  64h ; d
.eh_frame:0000000000023EBD                 db  0Fh
.eh_frame:0000000000023EBE                 db 0FEh
.eh_frame:0000000000023EBF                 db 0FFh
.eh_frame:0000000000023EC0                 db  64h ; d
.eh_frame:0000000000023EC1                 db    0
.eh_frame:0000000000023EC2                 db    0
.eh_frame:0000000000023EC3                 db    0
.eh_frame:0000000000023EC4                 db    0
.eh_frame:0000000000023EC5                 db  41h ; A
.eh_frame:0000000000023EC6                 db  0Eh
.eh_frame:0000000000023EC7                 db  10h
.eh_frame:0000000000023EC8                 db  83h
.eh_frame:0000000000023EC9                 db    2
.eh_frame:0000000000023ECA                 db    2
.eh_frame:0000000000023ECB                 db  4Fh ; O
.eh_frame:0000000000023ECC                 db  0Ah
.eh_frame:0000000000023ECD                 db  0Eh
.eh_frame:0000000000023ECE                 db    8
.eh_frame:0000000000023ECF                 db  48h ; H
.eh_frame:0000000000023ED0                 db  0Bh
.eh_frame:0000000000023ED1                 db    0
.eh_frame:0000000000023ED2                 db    0
.eh_frame:0000000000023ED3                 db    0
.eh_frame:0000000000023ED4                 db  18h
.eh_frame:0000000000023ED5                 db    0
.eh_frame:0000000000023ED6                 db    0
.eh_frame:0000000000023ED7                 db    0
.eh_frame:0000000000023ED8                 db 0B0h
.eh_frame:0000000000023ED9                 db    4
.eh_frame:0000000000023EDA                 db    0
.eh_frame:0000000000023EDB                 db    0
.eh_frame:0000000000023EDC                 db 0B4h
.eh_frame:0000000000023EDD                 db  0Fh
.eh_frame:0000000000023EDE                 db 0FEh
.eh_frame:0000000000023EDF                 db 0FFh
.eh_frame:0000000000023EE0                 db  27h ; '
.eh_frame:0000000000023EE1                 db    0
.eh_frame:0000000000023EE2                 db    0
.eh_frame:0000000000023EE3                 db    0
.eh_frame:0000000000023EE4                 db    0
.eh_frame:0000000000023EE5                 db  41h ; A
.eh_frame:0000000000023EE6                 db  0Eh
.eh_frame:0000000000023EE7                 db  10h
.eh_frame:0000000000023EE8                 db  83h
.eh_frame:0000000000023EE9                 db    2
.eh_frame:0000000000023EEA                 db  61h ; a
.eh_frame:0000000000023EEB                 db  0Eh
.eh_frame:0000000000023EEC                 db    8
.eh_frame:0000000000023EED                 db    0
.eh_frame:0000000000023EEE                 db    0
.eh_frame:0000000000023EEF                 db    0
.eh_frame:0000000000023EF0                 db  34h ; 4
.eh_frame:0000000000023EF1                 db    0
.eh_frame:0000000000023EF2                 db    0
.eh_frame:0000000000023EF3                 db    0
.eh_frame:0000000000023EF4                 db 0CCh
.eh_frame:0000000000023EF5                 db    4
.eh_frame:0000000000023EF6                 db    0
.eh_frame:0000000000023EF7                 db    0
.eh_frame:0000000000023EF8                 db 0C8h
.eh_frame:0000000000023EF9                 db  0Fh
.eh_frame:0000000000023EFA                 db 0FEh
.eh_frame:0000000000023EFB                 db 0FFh
.eh_frame:0000000000023EFC                 db  5Ah ; Z
.eh_frame:0000000000023EFD                 db    0
.eh_frame:0000000000023EFE                 db    0
.eh_frame:0000000000023EFF                 db    0
.eh_frame:0000000000023F00                 db    0
.eh_frame:0000000000023F01                 db  42h ; B
.eh_frame:0000000000023F02                 db  0Eh
.eh_frame:0000000000023F03                 db  10h
.eh_frame:0000000000023F04                 db  8Ch
.eh_frame:0000000000023F05                 db    2
.eh_frame:0000000000023F06                 db  44h ; D
.eh_frame:0000000000023F07                 db  0Eh
.eh_frame:0000000000023F08                 db  18h
.eh_frame:0000000000023F09                 db  86h
.eh_frame:0000000000023F0A                 db    3
.eh_frame:0000000000023F0B                 db  45h ; E
.eh_frame:0000000000023F0C                 db  0Eh
.eh_frame:0000000000023F0D                 db  20h
.eh_frame:0000000000023F0E                 db  83h
.eh_frame:0000000000023F0F                 db    4
.eh_frame:0000000000023F10                 db  6Ch ; l
.eh_frame:0000000000023F11                 db  0Ah
.eh_frame:0000000000023F12                 db  0Eh
.eh_frame:0000000000023F13                 db  18h
.eh_frame:0000000000023F14                 db  49h ; I
.eh_frame:0000000000023F15                 db  0Eh
.eh_frame:0000000000023F16                 db  10h
.eh_frame:0000000000023F17                 db  42h ; B
.eh_frame:0000000000023F18                 db  0Eh
.eh_frame:0000000000023F19                 db    8
.eh_frame:0000000000023F1A                 db  4Eh ; N
.eh_frame:0000000000023F1B                 db  0Bh
.eh_frame:0000000000023F1C                 db  41h ; A
.eh_frame:0000000000023F1D                 db  0Eh
.eh_frame:0000000000023F1E                 db  18h
.eh_frame:0000000000023F1F                 db  46h ; F
.eh_frame:0000000000023F20                 db  0Eh
.eh_frame:0000000000023F21                 db  10h
.eh_frame:0000000000023F22                 db  42h ; B
.eh_frame:0000000000023F23                 db  0Eh
.eh_frame:0000000000023F24                 db    8
.eh_frame:0000000000023F25                 db    0
.eh_frame:0000000000023F26                 db    0
.eh_frame:0000000000023F27                 db    0
.eh_frame:0000000000023F28                 db  2Ch ; ,
.eh_frame:0000000000023F29                 db    0
.eh_frame:0000000000023F2A                 db    0
.eh_frame:0000000000023F2B                 db    0
.eh_frame:0000000000023F2C                 db    4
.eh_frame:0000000000023F2D                 db    5
.eh_frame:0000000000023F2E                 db    0
.eh_frame:0000000000023F2F                 db    0
.eh_frame:0000000000023F30                 db 0F0h
.eh_frame:0000000000023F31                 db  0Fh
.eh_frame:0000000000023F32                 db 0FEh
.eh_frame:0000000000023F33                 db 0FFh
.eh_frame:0000000000023F34                 db  57h ; W
.eh_frame:0000000000023F35                 db    0
.eh_frame:0000000000023F36                 db    0
.eh_frame:0000000000023F37                 db    0
.eh_frame:0000000000023F38                 db    0
.eh_frame:0000000000023F39                 db  42h ; B
.eh_frame:0000000000023F3A                 db  0Eh
.eh_frame:0000000000023F3B                 db  10h
.eh_frame:0000000000023F3C                 db  8Ch
.eh_frame:0000000000023F3D                 db    2
.eh_frame:0000000000023F3E                 db  44h ; D
.eh_frame:0000000000023F3F                 db  0Eh
.eh_frame:0000000000023F40                 db  18h
.eh_frame:0000000000023F41                 db  86h
.eh_frame:0000000000023F42                 db    3
.eh_frame:0000000000023F43                 db  45h ; E
.eh_frame:0000000000023F44                 db  0Eh
.eh_frame:0000000000023F45                 db  20h
.eh_frame:0000000000023F46                 db  83h
.eh_frame:0000000000023F47                 db    4
.eh_frame:0000000000023F48                 db    2
.eh_frame:0000000000023F49                 db  40h ; @
.eh_frame:0000000000023F4A                 db  0Ah
.eh_frame:0000000000023F4B                 db  0Eh
.eh_frame:0000000000023F4C                 db  18h
.eh_frame:0000000000023F4D                 db  41h ; A
.eh_frame:0000000000023F4E                 db  0Eh
.eh_frame:0000000000023F4F                 db  10h
.eh_frame:0000000000023F50                 db  42h ; B
.eh_frame:0000000000023F51                 db  0Eh
.eh_frame:0000000000023F52                 db    8
.eh_frame:0000000000023F53                 db  42h ; B
.eh_frame:0000000000023F54                 db  0Bh
.eh_frame:0000000000023F55                 db    0
.eh_frame:0000000000023F56                 db    0
.eh_frame:0000000000023F57                 db    0
.eh_frame:0000000000023F58                 db  10h
.eh_frame:0000000000023F59                 db    0
.eh_frame:0000000000023F5A                 db    0
.eh_frame:0000000000023F5B                 db    0
.eh_frame:0000000000023F5C                 db  34h ; 4
.eh_frame:0000000000023F5D                 db    5
.eh_frame:0000000000023F5E                 db    0
.eh_frame:0000000000023F5F                 db    0
.eh_frame:0000000000023F60                 db  20h
.eh_frame:0000000000023F61                 db  10h
.eh_frame:0000000000023F62                 db 0FEh
.eh_frame:0000000000023F63                 db 0FFh
.eh_frame:0000000000023F64                 db    2
.eh_frame:0000000000023F65                 db    0
.eh_frame:0000000000023F66                 db    0
.eh_frame:0000000000023F67                 db    0
.eh_frame:0000000000023F68                 db    0
.eh_frame:0000000000023F69                 db    0
.eh_frame:0000000000023F6A                 db    0
.eh_frame:0000000000023F6B                 db    0
.eh_frame:0000000000023F6C                 db  10h
.eh_frame:0000000000023F6D                 db    0
.eh_frame:0000000000023F6E                 db    0
.eh_frame:0000000000023F6F                 db    0
.eh_frame:0000000000023F70                 db  48h ; H
.eh_frame:0000000000023F71                 db    5
.eh_frame:0000000000023F72                 db    0
.eh_frame:0000000000023F73                 db    0
.eh_frame:0000000000023F74                 db  1Ch
.eh_frame:0000000000023F75                 db  10h
.eh_frame:0000000000023F76                 db 0FEh
.eh_frame:0000000000023F77                 db 0FFh
.eh_frame:0000000000023F78                 db    5
.eh_frame:0000000000023F79                 db    0
.eh_frame:0000000000023F7A                 db    0
.eh_frame:0000000000023F7B                 db    0
.eh_frame:0000000000023F7C                 db    0
.eh_frame:0000000000023F7D                 db    0
.eh_frame:0000000000023F7E                 db    0
.eh_frame:0000000000023F7F                 db    0
.eh_frame:0000000000023F80                 db  14h
.eh_frame:0000000000023F81                 db    0
.eh_frame:0000000000023F82                 db    0
.eh_frame:0000000000023F83                 db    0
.eh_frame:0000000000023F84                 db  5Ch ; \
.eh_frame:0000000000023F85                 db    5
.eh_frame:0000000000023F86                 db    0
.eh_frame:0000000000023F87                 db    0
.eh_frame:0000000000023F88                 db  18h
.eh_frame:0000000000023F89                 db  10h
.eh_frame:0000000000023F8A                 db 0FEh
.eh_frame:0000000000023F8B                 db 0FFh
.eh_frame:0000000000023F8C                 db  13h
.eh_frame:0000000000023F8D                 db    0
.eh_frame:0000000000023F8E                 db    0
.eh_frame:0000000000023F8F                 db    0
.eh_frame:0000000000023F90                 db    0
.eh_frame:0000000000023F91                 db  44h ; D
.eh_frame:0000000000023F92                 db  0Eh
.eh_frame:0000000000023F93                 db  10h
.eh_frame:0000000000023F94                 db  4Eh ; N
.eh_frame:0000000000023F95                 db  0Eh
.eh_frame:0000000000023F96                 db    8
.eh_frame:0000000000023F97                 db    0
.eh_frame:0000000000023F98                 db  14h
.eh_frame:0000000000023F99                 db    0
.eh_frame:0000000000023F9A                 db    0
.eh_frame:0000000000023F9B                 db    0
.eh_frame:0000000000023F9C                 db  74h ; t
.eh_frame:0000000000023F9D                 db    5
.eh_frame:0000000000023F9E                 db    0
.eh_frame:0000000000023F9F                 db    0
.eh_frame:0000000000023FA0                 db  20h
.eh_frame:0000000000023FA1                 db  10h
.eh_frame:0000000000023FA2                 db 0FEh
.eh_frame:0000000000023FA3                 db 0FFh
.eh_frame:0000000000023FA4                 db  13h
.eh_frame:0000000000023FA5                 db    0
.eh_frame:0000000000023FA6                 db    0
.eh_frame:0000000000023FA7                 db    0
.eh_frame:0000000000023FA8                 db    0
.eh_frame:0000000000023FA9                 db  44h ; D
.eh_frame:0000000000023FAA                 db  0Eh
.eh_frame:0000000000023FAB                 db  10h
.eh_frame:0000000000023FAC                 db  4Eh ; N
.eh_frame:0000000000023FAD                 db  0Eh
.eh_frame:0000000000023FAE                 db    8
.eh_frame:0000000000023FAF                 db    0
.eh_frame:0000000000023FB0                 db  10h
.eh_frame:0000000000023FB1                 db    0
.eh_frame:0000000000023FB2                 db    0
.eh_frame:0000000000023FB3                 db    0
.eh_frame:0000000000023FB4                 db  8Ch
.eh_frame:0000000000023FB5                 db    5
.eh_frame:0000000000023FB6                 db    0
.eh_frame:0000000000023FB7                 db    0
.eh_frame:0000000000023FB8                 db  28h ; (
.eh_frame:0000000000023FB9                 db  10h
.eh_frame:0000000000023FBA                 db 0FEh
.eh_frame:0000000000023FBB                 db 0FFh
.eh_frame:0000000000023FBC                 db    5
.eh_frame:0000000000023FBD                 db    0
.eh_frame:0000000000023FBE                 db    0
.eh_frame:0000000000023FBF                 db    0
.eh_frame:0000000000023FC0                 db    0
.eh_frame:0000000000023FC1                 db    0
.eh_frame:0000000000023FC2                 db    0
.eh_frame:0000000000023FC3                 db    0
.eh_frame:0000000000023FC4                 db  48h ; H
.eh_frame:0000000000023FC5                 db    0
.eh_frame:0000000000023FC6                 db    0
.eh_frame:0000000000023FC7                 db    0
.eh_frame:0000000000023FC8                 db 0A0h
.eh_frame:0000000000023FC9                 db    5
.eh_frame:0000000000023FCA                 db    0
.eh_frame:0000000000023FCB                 db    0
.eh_frame:0000000000023FCC                 db  24h ; $
.eh_frame:0000000000023FCD                 db  10h
.eh_frame:0000000000023FCE                 db 0FEh
.eh_frame:0000000000023FCF                 db 0FFh
.eh_frame:0000000000023FD0                 db 0CFh
.eh_frame:0000000000023FD1                 db    0
.eh_frame:0000000000023FD2                 db    0
.eh_frame:0000000000023FD3                 db    0
.eh_frame:0000000000023FD4                 db    0
.eh_frame:0000000000023FD5                 db  5Ah ; Z
.eh_frame:0000000000023FD6                 db  0Eh
.eh_frame:0000000000023FD7                 db  10h
.eh_frame:0000000000023FD8                 db  8Ch
.eh_frame:0000000000023FD9                 db    2
.eh_frame:0000000000023FDA                 db  41h ; A
.eh_frame:0000000000023FDB                 db  0Eh
.eh_frame:0000000000023FDC                 db  18h
.eh_frame:0000000000023FDD                 db  86h
.eh_frame:0000000000023FDE                 db    3
.eh_frame:0000000000023FDF                 db  44h ; D
.eh_frame:0000000000023FE0                 db  0Eh
.eh_frame:0000000000023FE1                 db  20h
.eh_frame:0000000000023FE2                 db  83h
.eh_frame:0000000000023FE3                 db    4
.eh_frame:0000000000023FE4                 db  47h ; G
.eh_frame:0000000000023FE5                 db  0Eh
.eh_frame:0000000000023FE6                 db  30h ; 0
.eh_frame:0000000000023FE7                 db  6Dh ; m
.eh_frame:0000000000023FE8                 db  0Eh
.eh_frame:0000000000023FE9                 db  20h
.eh_frame:0000000000023FEA                 db  41h ; A
.eh_frame:0000000000023FEB                 db  0Eh
.eh_frame:0000000000023FEC                 db  18h
.eh_frame:0000000000023FED                 db  41h ; A
.eh_frame:0000000000023FEE                 db  0Eh
.eh_frame:0000000000023FEF                 db  10h
.eh_frame:0000000000023FF0                 db  42h ; B
.eh_frame:0000000000023FF1                 db  0Eh
.eh_frame:0000000000023FF2                 db    8
.eh_frame:0000000000023FF3                 db  49h ; I
.eh_frame:0000000000023FF4                 db 0C3h
.eh_frame:0000000000023FF5                 db 0C6h
.eh_frame:0000000000023FF6                 db 0CCh
.eh_frame:0000000000023FF7                 db  48h ; H
.eh_frame:0000000000023FF8                 db  0Eh
.eh_frame:0000000000023FF9                 db  30h ; 0
.eh_frame:0000000000023FFA                 db  83h
.eh_frame:0000000000023FFB                 db    4
.eh_frame:0000000000023FFC                 db  86h
.eh_frame:0000000000023FFD                 db    3
.eh_frame:0000000000023FFE                 db  8Ch
.eh_frame:0000000000023FFF                 db    2
.eh_frame:0000000000024000                 db    2
.eh_frame:0000000000024001                 db  62h ; b
.eh_frame:0000000000024002                 db  0Eh
.eh_frame:0000000000024003                 db  20h
.eh_frame:0000000000024004                 db  41h ; A
.eh_frame:0000000000024005                 db  0Eh
.eh_frame:0000000000024006                 db  18h
.eh_frame:0000000000024007                 db  41h ; A
.eh_frame:0000000000024008                 db  0Eh
.eh_frame:0000000000024009                 db  10h
.eh_frame:000000000002400A                 db  42h ; B
.eh_frame:000000000002400B                 db  0Eh
.eh_frame:000000000002400C                 db    8
.eh_frame:000000000002400D                 db    0
.eh_frame:000000000002400E                 db    0
.eh_frame:000000000002400F                 db    0
.eh_frame:0000000000024010                 db  4Ch ; L
.eh_frame:0000000000024011                 db    0
.eh_frame:0000000000024012                 db    0
.eh_frame:0000000000024013                 db    0
.eh_frame:0000000000024014                 db 0ECh
.eh_frame:0000000000024015                 db    5
.eh_frame:0000000000024016                 db    0
.eh_frame:0000000000024017                 db    0
.eh_frame:0000000000024018                 db 0A8h
.eh_frame:0000000000024019                 db  10h
.eh_frame:000000000002401A                 db 0FEh
.eh_frame:000000000002401B                 db 0FFh
.eh_frame:000000000002401C                 db  84h
.eh_frame:000000000002401D                 db    2
.eh_frame:000000000002401E                 db    0
.eh_frame:000000000002401F                 db    0
.eh_frame:0000000000024020                 db    0
.eh_frame:0000000000024021                 db  42h ; B
.eh_frame:0000000000024022                 db  0Eh
.eh_frame:0000000000024023                 db  10h
.eh_frame:0000000000024024                 db  8Fh
.eh_frame:0000000000024025                 db    2
.eh_frame:0000000000024026                 db  42h ; B
.eh_frame:0000000000024027                 db  0Eh
.eh_frame:0000000000024028                 db  18h
.eh_frame:0000000000024029                 db  8Eh
.eh_frame:000000000002402A                 db    3
.eh_frame:000000000002402B                 db  45h ; E
.eh_frame:000000000002402C                 db  0Eh
.eh_frame:000000000002402D                 db  20h
.eh_frame:000000000002402E                 db  8Dh
.eh_frame:000000000002402F                 db    4
.eh_frame:0000000000024030                 db  42h ; B
.eh_frame:0000000000024031                 db  0Eh
.eh_frame:0000000000024032                 db  28h ; (
.eh_frame:0000000000024033                 db  8Ch
.eh_frame:0000000000024034                 db    5
.eh_frame:0000000000024035                 db  48h ; H
.eh_frame:0000000000024036                 db  0Eh
.eh_frame:0000000000024037                 db  30h ; 0
.eh_frame:0000000000024038                 db  86h
.eh_frame:0000000000024039                 db    6
.eh_frame:000000000002403A                 db  41h ; A
.eh_frame:000000000002403B                 db  0Eh
.eh_frame:000000000002403C                 db  38h ; 8
.eh_frame:000000000002403D                 db  83h
.eh_frame:000000000002403E                 db    7
.eh_frame:000000000002403F                 db  47h ; G
.eh_frame:0000000000024040                 db  0Eh
.eh_frame:0000000000024041                 db 0A0h
.eh_frame:0000000000024042                 db    1
.eh_frame:0000000000024043                 db    3
.eh_frame:0000000000024044                 db  90h
.eh_frame:0000000000024045                 db    1
.eh_frame:0000000000024046                 db  0Ah
.eh_frame:0000000000024047                 db  0Eh
.eh_frame:0000000000024048                 db  38h ; 8
.eh_frame:0000000000024049                 db  41h ; A
.eh_frame:000000000002404A                 db  0Eh
.eh_frame:000000000002404B                 db  30h ; 0
.eh_frame:000000000002404C                 db  41h ; A
.eh_frame:000000000002404D                 db  0Eh
.eh_frame:000000000002404E                 db  28h ; (
.eh_frame:000000000002404F                 db  42h ; B
.eh_frame:0000000000024050                 db  0Eh
.eh_frame:0000000000024051                 db  20h
.eh_frame:0000000000024052                 db  42h ; B
.eh_frame:0000000000024053                 db  0Eh
.eh_frame:0000000000024054                 db  18h
.eh_frame:0000000000024055                 db  42h ; B
.eh_frame:0000000000024056                 db  0Eh
.eh_frame:0000000000024057                 db  10h
.eh_frame:0000000000024058                 db  42h ; B
.eh_frame:0000000000024059                 db  0Eh
.eh_frame:000000000002405A                 db    8
.eh_frame:000000000002405B                 db  4Bh ; K
.eh_frame:000000000002405C                 db  0Bh
.eh_frame:000000000002405D                 db    0
.eh_frame:000000000002405E                 db    0
.eh_frame:000000000002405F                 db    0
.eh_frame:0000000000024060                 db  24h ; $
.eh_frame:0000000000024061                 db    0
.eh_frame:0000000000024062                 db    0
.eh_frame:0000000000024063                 db    0
.eh_frame:0000000000024064                 db  3Ch ; <
.eh_frame:0000000000024065                 db    6
.eh_frame:0000000000024066                 db    0
.eh_frame:0000000000024067                 db    0
.eh_frame:0000000000024068                 db 0E8h
.eh_frame:0000000000024069                 db  12h
.eh_frame:000000000002406A                 db 0FEh
.eh_frame:000000000002406B                 db 0FFh
.eh_frame:000000000002406C                 db  2Ch ; ,
.eh_frame:000000000002406D                 db    0
.eh_frame:000000000002406E                 db    0
.eh_frame:000000000002406F                 db    0
.eh_frame:0000000000024070                 db    0
.eh_frame:0000000000024071                 db  41h ; A
.eh_frame:0000000000024072                 db  0Eh
.eh_frame:0000000000024073                 db  10h
.eh_frame:0000000000024074                 db  86h
.eh_frame:0000000000024075                 db    2
.eh_frame:0000000000024076                 db  41h ; A
.eh_frame:0000000000024077                 db  0Eh
.eh_frame:0000000000024078                 db  18h
.eh_frame:0000000000024079                 db  83h
.eh_frame:000000000002407A                 db    3
.eh_frame:000000000002407B                 db  4Fh ; O
.eh_frame:000000000002407C                 db  0Eh
.eh_frame:000000000002407D                 db  20h
.eh_frame:000000000002407E                 db  58h ; X
.eh_frame:000000000002407F                 db  0Eh
.eh_frame:0000000000024080                 db  18h
.eh_frame:0000000000024081                 db  41h ; A
.eh_frame:0000000000024082                 db  0Eh
.eh_frame:0000000000024083                 db  10h
.eh_frame:0000000000024084                 db  41h ; A
.eh_frame:0000000000024085                 db  0Eh
.eh_frame:0000000000024086                 db    8
.eh_frame:0000000000024087                 db    0
.eh_frame:0000000000024088                 db  10h
.eh_frame:0000000000024089                 db    0
.eh_frame:000000000002408A                 db    0
.eh_frame:000000000002408B                 db    0
.eh_frame:000000000002408C                 db  64h ; d
.eh_frame:000000000002408D                 db    6
.eh_frame:000000000002408E                 db    0
.eh_frame:000000000002408F                 db    0
.eh_frame:0000000000024090                 db 0F0h
.eh_frame:0000000000024091                 db  12h
.eh_frame:0000000000024092                 db 0FEh
.eh_frame:0000000000024093                 db 0FFh
.eh_frame:0000000000024094                 db  8Ah
.eh_frame:0000000000024095                 db    0
.eh_frame:0000000000024096                 db    0
.eh_frame:0000000000024097                 db    0
.eh_frame:0000000000024098                 db    0
.eh_frame:0000000000024099                 db    0
.eh_frame:000000000002409A                 db    0
.eh_frame:000000000002409B                 db    0
.eh_frame:000000000002409C                 db  10h
.eh_frame:000000000002409D                 db    0
.eh_frame:000000000002409E                 db    0
.eh_frame:000000000002409F                 db    0
.eh_frame:00000000000240A0                 db  78h ; x
.eh_frame:00000000000240A1                 db    6
.eh_frame:00000000000240A2                 db    0
.eh_frame:00000000000240A3                 db    0
.eh_frame:00000000000240A4                 db  6Ch ; l
.eh_frame:00000000000240A5                 db  13h
.eh_frame:00000000000240A6                 db 0FEh
.eh_frame:00000000000240A7                 db 0FFh
.eh_frame:00000000000240A8                 db  0Ah
.eh_frame:00000000000240A9                 db    0
.eh_frame:00000000000240AA                 db    0
.eh_frame:00000000000240AB                 db    0
.eh_frame:00000000000240AC                 db    0
.eh_frame:00000000000240AD                 db    0
.eh_frame:00000000000240AE                 db    0
.eh_frame:00000000000240AF                 db    0
.eh_frame:00000000000240B0                 db  3Ch ; <
.eh_frame:00000000000240B1                 db    0
.eh_frame:00000000000240B2                 db    0
.eh_frame:00000000000240B3                 db    0
.eh_frame:00000000000240B4                 db  8Ch
.eh_frame:00000000000240B5                 db    6
.eh_frame:00000000000240B6                 db    0
.eh_frame:00000000000240B7                 db    0
.eh_frame:00000000000240B8                 db  68h ; h
.eh_frame:00000000000240B9                 db  13h
.eh_frame:00000000000240BA                 db 0FEh
.eh_frame:00000000000240BB                 db 0FFh
.eh_frame:00000000000240BC                 db 0E7h
.eh_frame:00000000000240BD                 db    0
.eh_frame:00000000000240BE                 db    0
.eh_frame:00000000000240BF                 db    0
.eh_frame:00000000000240C0                 db    0
.eh_frame:00000000000240C1                 db  42h ; B
.eh_frame:00000000000240C2                 db  0Eh
.eh_frame:00000000000240C3                 db  10h
.eh_frame:00000000000240C4                 db  8Eh
.eh_frame:00000000000240C5                 db    2
.eh_frame:00000000000240C6                 db  42h ; B
.eh_frame:00000000000240C7                 db  0Eh
.eh_frame:00000000000240C8                 db  18h
.eh_frame:00000000000240C9                 db  8Dh
.eh_frame:00000000000240CA                 db    3
.eh_frame:00000000000240CB                 db  45h ; E
.eh_frame:00000000000240CC                 db  0Eh
.eh_frame:00000000000240CD                 db  20h
.eh_frame:00000000000240CE                 db  8Ch
.eh_frame:00000000000240CF                 db    4
.eh_frame:00000000000240D0                 db  41h ; A
.eh_frame:00000000000240D1                 db  0Eh
.eh_frame:00000000000240D2                 db  28h ; (
.eh_frame:00000000000240D3                 db  86h
.eh_frame:00000000000240D4                 db    5
.eh_frame:00000000000240D5                 db  41h ; A
.eh_frame:00000000000240D6                 db  0Eh
.eh_frame:00000000000240D7                 db  30h ; 0
.eh_frame:00000000000240D8                 db  83h
.eh_frame:00000000000240D9                 db    6
.eh_frame:00000000000240DA                 db    2
.eh_frame:00000000000240DB                 db 0AAh
.eh_frame:00000000000240DC                 db  0Ah
.eh_frame:00000000000240DD                 db  0Eh
.eh_frame:00000000000240DE                 db  28h ; (
.eh_frame:00000000000240DF                 db  44h ; D
.eh_frame:00000000000240E0                 db  0Eh
.eh_frame:00000000000240E1                 db  20h
.eh_frame:00000000000240E2                 db  42h ; B
.eh_frame:00000000000240E3                 db  0Eh
.eh_frame:00000000000240E4                 db  18h
.eh_frame:00000000000240E5                 db  42h ; B
.eh_frame:00000000000240E6                 db  0Eh
.eh_frame:00000000000240E7                 db  10h
.eh_frame:00000000000240E8                 db  42h ; B
.eh_frame:00000000000240E9                 db  0Eh
.eh_frame:00000000000240EA                 db    8
.eh_frame:00000000000240EB                 db  49h ; I
.eh_frame:00000000000240EC                 db  0Bh
.eh_frame:00000000000240ED                 db    0
.eh_frame:00000000000240EE                 db    0
.eh_frame:00000000000240EF                 db    0
.eh_frame:00000000000240F0                 db  4Ch ; L
.eh_frame:00000000000240F1                 db    0
.eh_frame:00000000000240F2                 db    0
.eh_frame:00000000000240F3                 db    0
.eh_frame:00000000000240F4                 db 0CCh
.eh_frame:00000000000240F5                 db    6
.eh_frame:00000000000240F6                 db    0
.eh_frame:00000000000240F7                 db    0
.eh_frame:00000000000240F8                 db  18h
.eh_frame:00000000000240F9                 db  14h
.eh_frame:00000000000240FA                 db 0FEh
.eh_frame:00000000000240FB                 db 0FFh
.eh_frame:00000000000240FC                 db 0C7h
.eh_frame:00000000000240FD                 db    0
.eh_frame:00000000000240FE                 db    0
.eh_frame:00000000000240FF                 db    0
.eh_frame:0000000000024100                 db    0
.eh_frame:0000000000024101                 db  42h ; B
.eh_frame:0000000000024102                 db  0Eh
.eh_frame:0000000000024103                 db  10h
.eh_frame:0000000000024104                 db  8Eh
.eh_frame:0000000000024105                 db    2
.eh_frame:0000000000024106                 db  42h ; B
.eh_frame:0000000000024107                 db  0Eh
.eh_frame:0000000000024108                 db  18h
.eh_frame:0000000000024109                 db  8Dh
.eh_frame:000000000002410A                 db    3
.eh_frame:000000000002410B                 db  45h ; E
.eh_frame:000000000002410C                 db  0Eh
.eh_frame:000000000002410D                 db  20h
.eh_frame:000000000002410E                 db  8Ch
.eh_frame:000000000002410F                 db    4
.eh_frame:0000000000024110                 db  4Ah ; J
.eh_frame:0000000000024111                 db  0Eh
.eh_frame:0000000000024112                 db  28h ; (
.eh_frame:0000000000024113                 db  86h
.eh_frame:0000000000024114                 db    5
.eh_frame:0000000000024115                 db  48h ; H
.eh_frame:0000000000024116                 db  0Eh
.eh_frame:0000000000024117                 db  30h ; 0
.eh_frame:0000000000024118                 db  83h
.eh_frame:0000000000024119                 db    6
.eh_frame:000000000002411A                 db    2
.eh_frame:000000000002411B                 db  4Eh ; N
.eh_frame:000000000002411C                 db  0Ah
.eh_frame:000000000002411D                 db  0Eh
.eh_frame:000000000002411E                 db  28h ; (
.eh_frame:000000000002411F                 db  43h ; C
.eh_frame:0000000000024120                 db  0Eh
.eh_frame:0000000000024121                 db  20h
.eh_frame:0000000000024122                 db  42h ; B
.eh_frame:0000000000024123                 db  0Eh
.eh_frame:0000000000024124                 db  18h
.eh_frame:0000000000024125                 db  42h ; B
.eh_frame:0000000000024126                 db  0Eh
.eh_frame:0000000000024127                 db  10h
.eh_frame:0000000000024128                 db  42h ; B
.eh_frame:0000000000024129                 db  0Eh
.eh_frame:000000000002412A                 db    8
.eh_frame:000000000002412B                 db  46h ; F
.eh_frame:000000000002412C                 db  0Bh
.eh_frame:000000000002412D                 db  75h ; u
.eh_frame:000000000002412E                 db  0Ah
.eh_frame:000000000002412F                 db  0Eh
.eh_frame:0000000000024130                 db  28h ; (
.eh_frame:0000000000024131                 db  43h ; C
.eh_frame:0000000000024132                 db  0Eh
.eh_frame:0000000000024133                 db  20h
.eh_frame:0000000000024134                 db  42h ; B
.eh_frame:0000000000024135                 db  0Eh
.eh_frame:0000000000024136                 db  18h
.eh_frame:0000000000024137                 db  42h ; B
.eh_frame:0000000000024138                 db  0Eh
.eh_frame:0000000000024139                 db  10h
.eh_frame:000000000002413A                 db  42h ; B
.eh_frame:000000000002413B                 db  0Eh
.eh_frame:000000000002413C                 db    8
.eh_frame:000000000002413D                 db  4Ah ; J
.eh_frame:000000000002413E                 db  0Bh
.eh_frame:000000000002413F                 db    0
.eh_frame:0000000000024140                 db  48h ; H
.eh_frame:0000000000024141                 db    0
.eh_frame:0000000000024142                 db    0
.eh_frame:0000000000024143                 db    0
.eh_frame:0000000000024144                 db  1Ch
.eh_frame:0000000000024145                 db    7
.eh_frame:0000000000024146                 db    0
.eh_frame:0000000000024147                 db    0
.eh_frame:0000000000024148                 db  98h
.eh_frame:0000000000024149                 db  14h
.eh_frame:000000000002414A                 db 0FEh
.eh_frame:000000000002414B                 db 0FFh
.eh_frame:000000000002414C                 db  95h
.eh_frame:000000000002414D                 db    1
.eh_frame:000000000002414E                 db    0
.eh_frame:000000000002414F                 db    0
.eh_frame:0000000000024150                 db    0
.eh_frame:0000000000024151                 db  42h ; B
.eh_frame:0000000000024152                 db  0Eh
.eh_frame:0000000000024153                 db  10h
.eh_frame:0000000000024154                 db  8Fh
.eh_frame:0000000000024155                 db    2
.eh_frame:0000000000024156                 db  42h ; B
.eh_frame:0000000000024157                 db  0Eh
.eh_frame:0000000000024158                 db  18h
.eh_frame:0000000000024159                 db  8Eh
.eh_frame:000000000002415A                 db    3
.eh_frame:000000000002415B                 db  44h ; D
.eh_frame:000000000002415C                 db  0Eh
.eh_frame:000000000002415D                 db  20h
.eh_frame:000000000002415E                 db  8Dh
.eh_frame:000000000002415F                 db    4
.eh_frame:0000000000024160                 db  42h ; B
.eh_frame:0000000000024161                 db  0Eh
.eh_frame:0000000000024162                 db  28h ; (
.eh_frame:0000000000024163                 db  8Ch
.eh_frame:0000000000024164                 db    5
.eh_frame:0000000000024165                 db  41h ; A
.eh_frame:0000000000024166                 db  0Eh
.eh_frame:0000000000024167                 db  30h ; 0
.eh_frame:0000000000024168                 db  86h
.eh_frame:0000000000024169                 db    6
.eh_frame:000000000002416A                 db  41h ; A
.eh_frame:000000000002416B                 db  0Eh
.eh_frame:000000000002416C                 db  38h ; 8
.eh_frame:000000000002416D                 db  83h
.eh_frame:000000000002416E                 db    7
.eh_frame:000000000002416F                 db  44h ; D
.eh_frame:0000000000024170                 db  0Eh
.eh_frame:0000000000024171                 db  50h ; P
.eh_frame:0000000000024172                 db    2
.eh_frame:0000000000024173                 db  9Fh
.eh_frame:0000000000024174                 db  0Ah
.eh_frame:0000000000024175                 db  0Eh
.eh_frame:0000000000024176                 db  38h ; 8
.eh_frame:0000000000024177                 db  41h ; A
.eh_frame:0000000000024178                 db  0Eh
.eh_frame:0000000000024179                 db  30h ; 0
.eh_frame:000000000002417A                 db  41h ; A
.eh_frame:000000000002417B                 db  0Eh
.eh_frame:000000000002417C                 db  28h ; (
.eh_frame:000000000002417D                 db  42h ; B
.eh_frame:000000000002417E                 db  0Eh
.eh_frame:000000000002417F                 db  20h
.eh_frame:0000000000024180                 db  42h ; B
.eh_frame:0000000000024181                 db  0Eh
.eh_frame:0000000000024182                 db  18h
.eh_frame:0000000000024183                 db  42h ; B
.eh_frame:0000000000024184                 db  0Eh
.eh_frame:0000000000024185                 db  10h
.eh_frame:0000000000024186                 db  42h ; B
.eh_frame:0000000000024187                 db  0Eh
.eh_frame:0000000000024188                 db    8
.eh_frame:0000000000024189                 db  47h ; G
.eh_frame:000000000002418A                 db  0Bh
.eh_frame:000000000002418B                 db    0
.eh_frame:000000000002418C                 db  7Ch ; |
.eh_frame:000000000002418D                 db    0
.eh_frame:000000000002418E                 db    0
.eh_frame:000000000002418F                 db    0
.eh_frame:0000000000024190                 db  68h ; h
.eh_frame:0000000000024191                 db    7
.eh_frame:0000000000024192                 db    0
.eh_frame:0000000000024193                 db    0
.eh_frame:0000000000024194                 db 0ECh
.eh_frame:0000000000024195                 db  15h
.eh_frame:0000000000024196                 db 0FEh
.eh_frame:0000000000024197                 db 0FFh
.eh_frame:0000000000024198                 db  6Eh ; n
.eh_frame:0000000000024199                 db    3
.eh_frame:000000000002419A                 db    0
.eh_frame:000000000002419B                 db    0
.eh_frame:000000000002419C                 db    0
.eh_frame:000000000002419D                 db  42h ; B
.eh_frame:000000000002419E                 db  0Eh
.eh_frame:000000000002419F                 db  10h
.eh_frame:00000000000241A0                 db  8Fh
.eh_frame:00000000000241A1                 db    2
.eh_frame:00000000000241A2                 db  42h ; B
.eh_frame:00000000000241A3                 db  0Eh
.eh_frame:00000000000241A4                 db  18h
.eh_frame:00000000000241A5                 db  8Eh
.eh_frame:00000000000241A6                 db    3
.eh_frame:00000000000241A7                 db  42h ; B
.eh_frame:00000000000241A8                 db  0Eh
.eh_frame:00000000000241A9                 db  20h
.eh_frame:00000000000241AA                 db  8Dh
.eh_frame:00000000000241AB                 db    4
.eh_frame:00000000000241AC                 db  42h ; B
.eh_frame:00000000000241AD                 db  0Eh
.eh_frame:00000000000241AE                 db  28h ; (
.eh_frame:00000000000241AF                 db  8Ch
.eh_frame:00000000000241B0                 db    5
.eh_frame:00000000000241B1                 db  44h ; D
.eh_frame:00000000000241B2                 db  0Eh
.eh_frame:00000000000241B3                 db  30h ; 0
.eh_frame:00000000000241B4                 db  86h
.eh_frame:00000000000241B5                 db    6
.eh_frame:00000000000241B6                 db  41h ; A
.eh_frame:00000000000241B7                 db  0Eh
.eh_frame:00000000000241B8                 db  38h ; 8
.eh_frame:00000000000241B9                 db  83h
.eh_frame:00000000000241BA                 db    7
.eh_frame:00000000000241BB                 db  49h ; I
.eh_frame:00000000000241BC                 db  0Eh
.eh_frame:00000000000241BD                 db  40h ; @
.eh_frame:00000000000241BE                 db    2
.eh_frame:00000000000241BF                 db 0DEh
.eh_frame:00000000000241C0                 db  0Ah
.eh_frame:00000000000241C1                 db  0Eh
.eh_frame:00000000000241C2                 db  38h ; 8
.eh_frame:00000000000241C3                 db  41h ; A
.eh_frame:00000000000241C4                 db  0Eh
.eh_frame:00000000000241C5                 db  30h ; 0
.eh_frame:00000000000241C6                 db  41h ; A
.eh_frame:00000000000241C7                 db  0Eh
.eh_frame:00000000000241C8                 db  28h ; (
.eh_frame:00000000000241C9                 db  42h ; B
.eh_frame:00000000000241CA                 db  0Eh
.eh_frame:00000000000241CB                 db  20h
.eh_frame:00000000000241CC                 db  42h ; B
.eh_frame:00000000000241CD                 db  0Eh
.eh_frame:00000000000241CE                 db  18h
.eh_frame:00000000000241CF                 db  42h ; B
.eh_frame:00000000000241D0                 db  0Eh
.eh_frame:00000000000241D1                 db  10h
.eh_frame:00000000000241D2                 db  42h ; B
.eh_frame:00000000000241D3                 db  0Eh
.eh_frame:00000000000241D4                 db    8
.eh_frame:00000000000241D5                 db  42h ; B
.eh_frame:00000000000241D6                 db  0Bh
.eh_frame:00000000000241D7                 db    2
.eh_frame:00000000000241D8                 db 0A1h
.eh_frame:00000000000241D9                 db  0Ah
.eh_frame:00000000000241DA                 db  0Eh
.eh_frame:00000000000241DB                 db  38h ; 8
.eh_frame:00000000000241DC                 db  44h ; D
.eh_frame:00000000000241DD                 db  0Eh
.eh_frame:00000000000241DE                 db  30h ; 0
.eh_frame:00000000000241DF                 db  41h ; A
.eh_frame:00000000000241E0                 db  0Eh
.eh_frame:00000000000241E1                 db  28h ; (
.eh_frame:00000000000241E2                 db  42h ; B
.eh_frame:00000000000241E3                 db  0Eh
.eh_frame:00000000000241E4                 db  20h
.eh_frame:00000000000241E5                 db  42h ; B
.eh_frame:00000000000241E6                 db  0Eh
.eh_frame:00000000000241E7                 db  18h
.eh_frame:00000000000241E8                 db  42h ; B
.eh_frame:00000000000241E9                 db  0Eh
.eh_frame:00000000000241EA                 db  10h
.eh_frame:00000000000241EB                 db  42h ; B
.eh_frame:00000000000241EC                 db  0Eh
.eh_frame:00000000000241ED                 db    8
.eh_frame:00000000000241EE                 db  4Ah ; J
.eh_frame:00000000000241EF                 db  0Bh
.eh_frame:00000000000241F0                 db    2
.eh_frame:00000000000241F1                 db  9Eh
.eh_frame:00000000000241F2                 db  0Ah
.eh_frame:00000000000241F3                 db  0Eh
.eh_frame:00000000000241F4                 db  38h ; 8
.eh_frame:00000000000241F5                 db  41h ; A
.eh_frame:00000000000241F6                 db  0Eh
.eh_frame:00000000000241F7                 db  30h ; 0
.eh_frame:00000000000241F8                 db  41h ; A
.eh_frame:00000000000241F9                 db  0Eh
.eh_frame:00000000000241FA                 db  28h ; (
.eh_frame:00000000000241FB                 db  42h ; B
.eh_frame:00000000000241FC                 db  0Eh
.eh_frame:00000000000241FD                 db  20h
.eh_frame:00000000000241FE                 db  42h ; B
.eh_frame:00000000000241FF                 db  0Eh
.eh_frame:0000000000024200                 db  18h
.eh_frame:0000000000024201                 db  42h ; B
.eh_frame:0000000000024202                 db  0Eh
.eh_frame:0000000000024203                 db  10h
.eh_frame:0000000000024204                 db  42h ; B
.eh_frame:0000000000024205                 db  0Eh
.eh_frame:0000000000024206                 db    8
.eh_frame:0000000000024207                 db  48h ; H
.eh_frame:0000000000024208                 db  0Bh
.eh_frame:0000000000024209                 db    0
.eh_frame:000000000002420A                 db    0
.eh_frame:000000000002420B                 db    0
.eh_frame:000000000002420C                 db  4Ch ; L
.eh_frame:000000000002420D                 db    0
.eh_frame:000000000002420E                 db    0
.eh_frame:000000000002420F                 db    0
.eh_frame:0000000000024210                 db 0E8h
.eh_frame:0000000000024211                 db    7
.eh_frame:0000000000024212                 db    0
.eh_frame:0000000000024213                 db    0
.eh_frame:0000000000024214                 db 0DCh
.eh_frame:0000000000024215                 db  18h
.eh_frame:0000000000024216                 db 0FEh
.eh_frame:0000000000024217                 db 0FFh
.eh_frame:0000000000024218                 db  13h
.eh_frame:0000000000024219                 db    2
.eh_frame:000000000002421A                 db    0
.eh_frame:000000000002421B                 db    0
.eh_frame:000000000002421C                 db    0
.eh_frame:000000000002421D                 db  42h ; B
.eh_frame:000000000002421E                 db  0Eh
.eh_frame:000000000002421F                 db  10h
.eh_frame:0000000000024220                 db  8Fh
.eh_frame:0000000000024221                 db    2
.eh_frame:0000000000024222                 db  42h ; B
.eh_frame:0000000000024223                 db  0Eh
.eh_frame:0000000000024224                 db  18h
.eh_frame:0000000000024225                 db  8Eh
.eh_frame:0000000000024226                 db    3
.eh_frame:0000000000024227                 db  45h ; E
.eh_frame:0000000000024228                 db  0Eh
.eh_frame:0000000000024229                 db  20h
.eh_frame:000000000002422A                 db  8Dh
.eh_frame:000000000002422B                 db    4
.eh_frame:000000000002422C                 db  42h ; B
.eh_frame:000000000002422D                 db  0Eh
.eh_frame:000000000002422E                 db  28h ; (
.eh_frame:000000000002422F                 db  8Ch
.eh_frame:0000000000024230                 db    5
.eh_frame:0000000000024231                 db  44h ; D
.eh_frame:0000000000024232                 db  0Eh
.eh_frame:0000000000024233                 db  30h ; 0
.eh_frame:0000000000024234                 db  86h
.eh_frame:0000000000024235                 db    6
.eh_frame:0000000000024236                 db  41h ; A
.eh_frame:0000000000024237                 db  0Eh
.eh_frame:0000000000024238                 db  38h ; 8
.eh_frame:0000000000024239                 db  83h
.eh_frame:000000000002423A                 db    7
.eh_frame:000000000002423B                 db  4Ch ; L
.eh_frame:000000000002423C                 db  0Eh
.eh_frame:000000000002423D                 db  80h
.eh_frame:000000000002423E                 db    1
.eh_frame:000000000002423F                 db    3
.eh_frame:0000000000024240                 db  83h
.eh_frame:0000000000024241                 db    1
.eh_frame:0000000000024242                 db  0Ah
.eh_frame:0000000000024243                 db  0Eh
.eh_frame:0000000000024244                 db  38h ; 8
.eh_frame:0000000000024245                 db  41h ; A
.eh_frame:0000000000024246                 db  0Eh
.eh_frame:0000000000024247                 db  30h ; 0
.eh_frame:0000000000024248                 db  41h ; A
.eh_frame:0000000000024249                 db  0Eh
.eh_frame:000000000002424A                 db  28h ; (
.eh_frame:000000000002424B                 db  42h ; B
.eh_frame:000000000002424C                 db  0Eh
.eh_frame:000000000002424D                 db  20h
.eh_frame:000000000002424E                 db  42h ; B
.eh_frame:000000000002424F                 db  0Eh
.eh_frame:0000000000024250                 db  18h
.eh_frame:0000000000024251                 db  42h ; B
.eh_frame:0000000000024252                 db  0Eh
.eh_frame:0000000000024253                 db  10h
.eh_frame:0000000000024254                 db  42h ; B
.eh_frame:0000000000024255                 db  0Eh
.eh_frame:0000000000024256                 db    8
.eh_frame:0000000000024257                 db  47h ; G
.eh_frame:0000000000024258                 db  0Bh
.eh_frame:0000000000024259                 db    0
.eh_frame:000000000002425A                 db    0
.eh_frame:000000000002425B                 db    0
.eh_frame:000000000002425C                 db  40h ; @
.eh_frame:000000000002425D                 db    0
.eh_frame:000000000002425E                 db    0
.eh_frame:000000000002425F                 db    0
.eh_frame:0000000000024260                 db  38h ; 8
.eh_frame:0000000000024261                 db    8
.eh_frame:0000000000024262                 db    0
.eh_frame:0000000000024263                 db    0
.eh_frame:0000000000024264                 db 0ACh
.eh_frame:0000000000024265                 db  1Ah
.eh_frame:0000000000024266                 db 0FEh
.eh_frame:0000000000024267                 db 0FFh
.eh_frame:0000000000024268                 db 0A7h
.eh_frame:0000000000024269                 db    0
.eh_frame:000000000002426A                 db    0
.eh_frame:000000000002426B                 db    0
.eh_frame:000000000002426C                 db    0
.eh_frame:000000000002426D                 db  42h ; B
.eh_frame:000000000002426E                 db  0Eh
.eh_frame:000000000002426F                 db  10h
.eh_frame:0000000000024270                 db  8Ch
.eh_frame:0000000000024271                 db    2
.eh_frame:0000000000024272                 db  41h ; A
.eh_frame:0000000000024273                 db  0Eh
.eh_frame:0000000000024274                 db  18h
.eh_frame:0000000000024275                 db  86h
.eh_frame:0000000000024276                 db    3
.eh_frame:0000000000024277                 db  44h ; D
.eh_frame:0000000000024278                 db  0Eh
.eh_frame:0000000000024279                 db  20h
.eh_frame:000000000002427A                 db  83h
.eh_frame:000000000002427B                 db    4
.eh_frame:000000000002427C                 db  47h ; G
.eh_frame:000000000002427D                 db  0Eh
.eh_frame:000000000002427E                 db  30h ; 0
.eh_frame:000000000002427F                 db    2
.eh_frame:0000000000024280                 db  56h ; V
.eh_frame:0000000000024281                 db  0Ah
.eh_frame:0000000000024282                 db  0Eh
.eh_frame:0000000000024283                 db  20h
.eh_frame:0000000000024284                 db  43h ; C
.eh_frame:0000000000024285                 db  0Eh
.eh_frame:0000000000024286                 db  18h
.eh_frame:0000000000024287                 db  41h ; A
.eh_frame:0000000000024288                 db  0Eh
.eh_frame:0000000000024289                 db  10h
.eh_frame:000000000002428A                 db  42h ; B
.eh_frame:000000000002428B                 db  0Eh
.eh_frame:000000000002428C                 db    8
.eh_frame:000000000002428D                 db  46h ; F
.eh_frame:000000000002428E                 db  0Bh
.eh_frame:000000000002428F                 db  66h ; f
.eh_frame:0000000000024290                 db  0Ah
.eh_frame:0000000000024291                 db  0Eh
.eh_frame:0000000000024292                 db  20h
.eh_frame:0000000000024293                 db  45h ; E
.eh_frame:0000000000024294                 db  0Eh
.eh_frame:0000000000024295                 db  18h
.eh_frame:0000000000024296                 db  41h ; A
.eh_frame:0000000000024297                 db  0Eh
.eh_frame:0000000000024298                 db  10h
.eh_frame:0000000000024299                 db  42h ; B
.eh_frame:000000000002429A                 db  0Eh
.eh_frame:000000000002429B                 db    8
.eh_frame:000000000002429C                 db  42h ; B
.eh_frame:000000000002429D                 db  0Bh
.eh_frame:000000000002429E                 db    0
.eh_frame:000000000002429F                 db    0
.eh_frame:00000000000242A0                 db  38h ; 8
.eh_frame:00000000000242A1                 db    0
.eh_frame:00000000000242A2                 db    0
.eh_frame:00000000000242A3                 db    0
.eh_frame:00000000000242A4                 db  7Ch ; |
.eh_frame:00000000000242A5                 db    8
.eh_frame:00000000000242A6                 db    0
.eh_frame:00000000000242A7                 db    0
.eh_frame:00000000000242A8                 db  18h
.eh_frame:00000000000242A9                 db  1Bh
.eh_frame:00000000000242AA                 db 0FEh
.eh_frame:00000000000242AB                 db 0FFh
.eh_frame:00000000000242AC                 db  52h ; R
.eh_frame:00000000000242AD                 db    0
.eh_frame:00000000000242AE                 db    0
.eh_frame:00000000000242AF                 db    0
.eh_frame:00000000000242B0                 db    0
.eh_frame:00000000000242B1                 db  47h ; G
.eh_frame:00000000000242B2                 db  0Eh
.eh_frame:00000000000242B3                 db  10h
.eh_frame:00000000000242B4                 db  8Dh
.eh_frame:00000000000242B5                 db    2
.eh_frame:00000000000242B6                 db  42h ; B
.eh_frame:00000000000242B7                 db  0Eh
.eh_frame:00000000000242B8                 db  18h
.eh_frame:00000000000242B9                 db  8Ch
.eh_frame:00000000000242BA                 db    3
.eh_frame:00000000000242BB                 db  44h ; D
.eh_frame:00000000000242BC                 db  0Eh
.eh_frame:00000000000242BD                 db  20h
.eh_frame:00000000000242BE                 db  86h
.eh_frame:00000000000242BF                 db    4
.eh_frame:00000000000242C0                 db  41h ; A
.eh_frame:00000000000242C1                 db  0Eh
.eh_frame:00000000000242C2                 db  28h ; (
.eh_frame:00000000000242C3                 db  83h
.eh_frame:00000000000242C4                 db    5
.eh_frame:00000000000242C5                 db  4Ah ; J
.eh_frame:00000000000242C6                 db  0Eh
.eh_frame:00000000000242C7                 db  30h ; 0
.eh_frame:00000000000242C8                 db  6Fh ; o
.eh_frame:00000000000242C9                 db  0Eh
.eh_frame:00000000000242CA                 db  28h ; (
.eh_frame:00000000000242CB                 db  41h ; A
.eh_frame:00000000000242CC                 db  0Eh
.eh_frame:00000000000242CD                 db  20h
.eh_frame:00000000000242CE                 db  41h ; A
.eh_frame:00000000000242CF                 db  0Eh
.eh_frame:00000000000242D0                 db  18h
.eh_frame:00000000000242D1                 db  42h ; B
.eh_frame:00000000000242D2                 db  0Eh
.eh_frame:00000000000242D3                 db  10h
.eh_frame:00000000000242D4                 db  42h ; B
.eh_frame:00000000000242D5                 db  0Eh
.eh_frame:00000000000242D6                 db    8
.eh_frame:00000000000242D7                 db  43h ; C
.eh_frame:00000000000242D8                 db 0C3h
.eh_frame:00000000000242D9                 db 0C6h
.eh_frame:00000000000242DA                 db 0CCh
.eh_frame:00000000000242DB                 db 0CDh
.eh_frame:00000000000242DC                 db  38h ; 8
.eh_frame:00000000000242DD                 db    0
.eh_frame:00000000000242DE                 db    0
.eh_frame:00000000000242DF                 db    0
.eh_frame:00000000000242E0                 db 0B8h
.eh_frame:00000000000242E1                 db    8
.eh_frame:00000000000242E2                 db    0
.eh_frame:00000000000242E3                 db    0
.eh_frame:00000000000242E4                 db  3Ch ; <
.eh_frame:00000000000242E5                 db  1Bh
.eh_frame:00000000000242E6                 db 0FEh
.eh_frame:00000000000242E7                 db 0FFh
.eh_frame:00000000000242E8                 db  52h ; R
.eh_frame:00000000000242E9                 db    0
.eh_frame:00000000000242EA                 db    0
.eh_frame:00000000000242EB                 db    0
.eh_frame:00000000000242EC                 db    0
.eh_frame:00000000000242ED                 db  47h ; G
.eh_frame:00000000000242EE                 db  0Eh
.eh_frame:00000000000242EF                 db  10h
.eh_frame:00000000000242F0                 db  8Dh
.eh_frame:00000000000242F1                 db    2
.eh_frame:00000000000242F2                 db  42h ; B
.eh_frame:00000000000242F3                 db  0Eh
.eh_frame:00000000000242F4                 db  18h
.eh_frame:00000000000242F5                 db  8Ch
.eh_frame:00000000000242F6                 db    3
.eh_frame:00000000000242F7                 db  44h ; D
.eh_frame:00000000000242F8                 db  0Eh
.eh_frame:00000000000242F9                 db  20h
.eh_frame:00000000000242FA                 db  86h
.eh_frame:00000000000242FB                 db    4
.eh_frame:00000000000242FC                 db  41h ; A
.eh_frame:00000000000242FD                 db  0Eh
.eh_frame:00000000000242FE                 db  28h ; (
.eh_frame:00000000000242FF                 db  83h
.eh_frame:0000000000024300                 db    5
.eh_frame:0000000000024301                 db  4Ah ; J
.eh_frame:0000000000024302                 db  0Eh
.eh_frame:0000000000024303                 db  30h ; 0
.eh_frame:0000000000024304                 db  6Fh ; o
.eh_frame:0000000000024305                 db  0Eh
.eh_frame:0000000000024306                 db  28h ; (
.eh_frame:0000000000024307                 db  41h ; A
.eh_frame:0000000000024308                 db  0Eh
.eh_frame:0000000000024309                 db  20h
.eh_frame:000000000002430A                 db  41h ; A
.eh_frame:000000000002430B                 db  0Eh
.eh_frame:000000000002430C                 db  18h
.eh_frame:000000000002430D                 db  42h ; B
.eh_frame:000000000002430E                 db  0Eh
.eh_frame:000000000002430F                 db  10h
.eh_frame:0000000000024310                 db  42h ; B
.eh_frame:0000000000024311                 db  0Eh
.eh_frame:0000000000024312                 db    8
.eh_frame:0000000000024313                 db  43h ; C
.eh_frame:0000000000024314                 db 0C3h
.eh_frame:0000000000024315                 db 0C6h
.eh_frame:0000000000024316                 db 0CCh
.eh_frame:0000000000024317                 db 0CDh
.eh_frame:0000000000024318                 db  74h ; t
.eh_frame:0000000000024319                 db    0
.eh_frame:000000000002431A                 db    0
.eh_frame:000000000002431B                 db    0
.eh_frame:000000000002431C                 db 0F4h
.eh_frame:000000000002431D                 db    8
.eh_frame:000000000002431E                 db    0
.eh_frame:000000000002431F                 db    0
.eh_frame:0000000000024320                 db  60h ; `
.eh_frame:0000000000024321                 db  1Bh
.eh_frame:0000000000024322                 db 0FEh
.eh_frame:0000000000024323                 db 0FFh
.eh_frame:0000000000024324                 db  17h
.eh_frame:0000000000024325                 db  1Ch
.eh_frame:0000000000024326                 db    0
.eh_frame:0000000000024327                 db    0
.eh_frame:0000000000024328                 db    0
.eh_frame:0000000000024329                 db  42h ; B
.eh_frame:000000000002432A                 db  0Eh
.eh_frame:000000000002432B                 db  10h
.eh_frame:000000000002432C                 db  8Fh
.eh_frame:000000000002432D                 db    2
.eh_frame:000000000002432E                 db  42h ; B
.eh_frame:000000000002432F                 db  0Eh
.eh_frame:0000000000024330                 db  18h
.eh_frame:0000000000024331                 db  8Eh
.eh_frame:0000000000024332                 db    3
.eh_frame:0000000000024333                 db  45h ; E
.eh_frame:0000000000024334                 db  0Eh
.eh_frame:0000000000024335                 db  20h
.eh_frame:0000000000024336                 db  8Dh
.eh_frame:0000000000024337                 db    4
.eh_frame:0000000000024338                 db  42h ; B
.eh_frame:0000000000024339                 db  0Eh
.eh_frame:000000000002433A                 db  28h ; (
.eh_frame:000000000002433B                 db  8Ch
.eh_frame:000000000002433C                 db    5
.eh_frame:000000000002433D                 db  44h ; D
.eh_frame:000000000002433E                 db  0Eh
.eh_frame:000000000002433F                 db  30h ; 0
.eh_frame:0000000000024340                 db  86h
.eh_frame:0000000000024341                 db    6
.eh_frame:0000000000024342                 db  41h ; A
.eh_frame:0000000000024343                 db  0Eh
.eh_frame:0000000000024344                 db  38h ; 8
.eh_frame:0000000000024345                 db  83h
.eh_frame:0000000000024346                 db    7
.eh_frame:0000000000024347                 db  4Ah ; J
.eh_frame:0000000000024348                 db  0Eh
.eh_frame:0000000000024349                 db 0F0h
.eh_frame:000000000002434A                 db    9
.eh_frame:000000000002434B                 db    2
.eh_frame:000000000002434C                 db 0C9h
.eh_frame:000000000002434D                 db  0Ah
.eh_frame:000000000002434E                 db  0Eh
.eh_frame:000000000002434F                 db  38h ; 8
.eh_frame:0000000000024350                 db  41h ; A
.eh_frame:0000000000024351                 db  0Eh
.eh_frame:0000000000024352                 db  30h ; 0
.eh_frame:0000000000024353                 db  41h ; A
.eh_frame:0000000000024354                 db  0Eh
.eh_frame:0000000000024355                 db  28h ; (
.eh_frame:0000000000024356                 db  42h ; B
.eh_frame:0000000000024357                 db  0Eh
.eh_frame:0000000000024358                 db  20h
.eh_frame:0000000000024359                 db  42h ; B
.eh_frame:000000000002435A                 db  0Eh
.eh_frame:000000000002435B                 db  18h
.eh_frame:000000000002435C                 db  42h ; B
.eh_frame:000000000002435D                 db  0Eh
.eh_frame:000000000002435E                 db  10h
.eh_frame:000000000002435F                 db  42h ; B
.eh_frame:0000000000024360                 db  0Eh
.eh_frame:0000000000024361                 db    8
.eh_frame:0000000000024362                 db  43h ; C
.eh_frame:0000000000024363                 db  0Bh
.eh_frame:0000000000024364                 db    3
.eh_frame:0000000000024365                 db  8Dh
.eh_frame:0000000000024366                 db    5
.eh_frame:0000000000024367                 db  0Eh
.eh_frame:0000000000024368                 db 0F8h
.eh_frame:0000000000024369                 db    9
.eh_frame:000000000002436A                 db  4Dh ; M
.eh_frame:000000000002436B                 db  0Eh
.eh_frame:000000000002436C                 db  80h
.eh_frame:000000000002436D                 db  0Ah
.eh_frame:000000000002436E                 db  44h ; D
.eh_frame:000000000002436F                 db  0Eh
.eh_frame:0000000000024370                 db  88h
.eh_frame:0000000000024371                 db  0Ah
.eh_frame:0000000000024372                 db  46h ; F
.eh_frame:0000000000024373                 db  0Eh
.eh_frame:0000000000024374                 db  90h
.eh_frame:0000000000024375                 db  0Ah
.eh_frame:0000000000024376                 db  58h ; X
.eh_frame:0000000000024377                 db  0Eh
.eh_frame:0000000000024378                 db 0F0h
.eh_frame:0000000000024379                 db    9
.eh_frame:000000000002437A                 db    3
.eh_frame:000000000002437B                 db  8Fh
.eh_frame:000000000002437C                 db  0Eh
.eh_frame:000000000002437D                 db  0Eh
.eh_frame:000000000002437E                 db 0F8h
.eh_frame:000000000002437F                 db    9
.eh_frame:0000000000024380                 db  50h ; P
.eh_frame:0000000000024381                 db  0Eh
.eh_frame:0000000000024382                 db  80h
.eh_frame:0000000000024383                 db  0Ah
.eh_frame:0000000000024384                 db  44h ; D
.eh_frame:0000000000024385                 db  0Eh
.eh_frame:0000000000024386                 db  88h
.eh_frame:0000000000024387                 db  0Ah
.eh_frame:0000000000024388                 db  44h ; D
.eh_frame:0000000000024389                 db  0Eh
.eh_frame:000000000002438A                 db  90h
.eh_frame:000000000002438B                 db  0Ah
.eh_frame:000000000002438C                 db  58h ; X
.eh_frame:000000000002438D                 db  0Eh
.eh_frame:000000000002438E                 db 0F0h
.eh_frame:000000000002438F                 db    9
.eh_frame:0000000000024390                 db  24h ; $
.eh_frame:0000000000024391                 db    0
.eh_frame:0000000000024392                 db    0
.eh_frame:0000000000024393                 db    0
.eh_frame:0000000000024394                 db  6Ch ; l
.eh_frame:0000000000024395                 db    9
.eh_frame:0000000000024396                 db    0
.eh_frame:0000000000024397                 db    0
.eh_frame:0000000000024398                 db    8
.eh_frame:0000000000024399                 db  37h ; 7
.eh_frame:000000000002439A                 db 0FEh
.eh_frame:000000000002439B                 db 0FFh
.eh_frame:000000000002439C                 db  50h ; P
.eh_frame:000000000002439D                 db    0
.eh_frame:000000000002439E                 db    0
.eh_frame:000000000002439F                 db    0
.eh_frame:00000000000243A0                 db    0
.eh_frame:00000000000243A1                 db  44h ; D
.eh_frame:00000000000243A2                 db  0Eh
.eh_frame:00000000000243A3                 db  28h ; (
.eh_frame:00000000000243A4                 db  5Dh ; ]
.eh_frame:00000000000243A5                 db  0Eh
.eh_frame:00000000000243A6                 db  30h ; 0
.eh_frame:00000000000243A7                 db  44h ; D
.eh_frame:00000000000243A8                 db  0Eh
.eh_frame:00000000000243A9                 db  38h ; 8
.eh_frame:00000000000243AA                 db  48h ; H
.eh_frame:00000000000243AB                 db  0Eh
.eh_frame:00000000000243AC                 db  40h ; @
.eh_frame:00000000000243AD                 db  49h ; I
.eh_frame:00000000000243AE                 db  0Eh
.eh_frame:00000000000243AF                 db  20h
.eh_frame:00000000000243B0                 db  54h ; T
.eh_frame:00000000000243B1                 db  0Ah
.eh_frame:00000000000243B2                 db  0Eh
.eh_frame:00000000000243B3                 db    8
.eh_frame:00000000000243B4                 db  41h ; A
.eh_frame:00000000000243B5                 db  0Bh
.eh_frame:00000000000243B6                 db    0
.eh_frame:00000000000243B7                 db    0
.eh_frame:00000000000243B8                 db  24h ; $
.eh_frame:00000000000243B9                 db    0
.eh_frame:00000000000243BA                 db    0
.eh_frame:00000000000243BB                 db    0
.eh_frame:00000000000243BC                 db  94h
.eh_frame:00000000000243BD                 db    9
.eh_frame:00000000000243BE                 db    0
.eh_frame:00000000000243BF                 db    0
.eh_frame:00000000000243C0                 db  30h ; 0
.eh_frame:00000000000243C1                 db  37h ; 7
.eh_frame:00000000000243C2                 db 0FEh
.eh_frame:00000000000243C3                 db 0FFh
.eh_frame:00000000000243C4                 db  42h ; B
.eh_frame:00000000000243C5                 db    0
.eh_frame:00000000000243C6                 db    0
.eh_frame:00000000000243C7                 db    0
.eh_frame:00000000000243C8                 db    0
.eh_frame:00000000000243C9                 db  41h ; A
.eh_frame:00000000000243CA                 db  0Eh
.eh_frame:00000000000243CB                 db  10h
.eh_frame:00000000000243CC                 db  86h
.eh_frame:00000000000243CD                 db    2
.eh_frame:00000000000243CE                 db  41h ; A
.eh_frame:00000000000243CF                 db  0Eh
.eh_frame:00000000000243D0                 db  18h
.eh_frame:00000000000243D1                 db  83h
.eh_frame:00000000000243D2                 db    3
.eh_frame:00000000000243D3                 db  51h ; Q
.eh_frame:00000000000243D4                 db  0Eh
.eh_frame:00000000000243D5                 db  20h
.eh_frame:00000000000243D6                 db  6Ah ; j
.eh_frame:00000000000243D7                 db  0Eh
.eh_frame:00000000000243D8                 db  18h
.eh_frame:00000000000243D9                 db  43h ; C
.eh_frame:00000000000243DA                 db  0Eh
.eh_frame:00000000000243DB                 db  10h
.eh_frame:00000000000243DC                 db  41h ; A
.eh_frame:00000000000243DD                 db  0Eh
.eh_frame:00000000000243DE                 db    8
.eh_frame:00000000000243DF                 db    0
.eh_frame:00000000000243E0                 db  4Ch ; L
.eh_frame:00000000000243E1                 db    0
.eh_frame:00000000000243E2                 db    0
.eh_frame:00000000000243E3                 db    0
.eh_frame:00000000000243E4                 db 0BCh
.eh_frame:00000000000243E5                 db    9
.eh_frame:00000000000243E6                 db    0
.eh_frame:00000000000243E7                 db    0
.eh_frame:00000000000243E8                 db  58h ; X
.eh_frame:00000000000243E9                 db  37h ; 7
.eh_frame:00000000000243EA                 db 0FEh
.eh_frame:00000000000243EB                 db 0FFh
.eh_frame:00000000000243EC                 db 0AEh
.eh_frame:00000000000243ED                 db    1
.eh_frame:00000000000243EE                 db    0
.eh_frame:00000000000243EF                 db    0
.eh_frame:00000000000243F0                 db    0
.eh_frame:00000000000243F1                 db  42h ; B
.eh_frame:00000000000243F2                 db  0Eh
.eh_frame:00000000000243F3                 db  10h
.eh_frame:00000000000243F4                 db  8Fh
.eh_frame:00000000000243F5                 db    2
.eh_frame:00000000000243F6                 db  42h ; B
.eh_frame:00000000000243F7                 db  0Eh
.eh_frame:00000000000243F8                 db  18h
.eh_frame:00000000000243F9                 db  8Eh
.eh_frame:00000000000243FA                 db    3
.eh_frame:00000000000243FB                 db  45h ; E
.eh_frame:00000000000243FC                 db  0Eh
.eh_frame:00000000000243FD                 db  20h
.eh_frame:00000000000243FE                 db  8Dh
.eh_frame:00000000000243FF                 db    4
.eh_frame:0000000000024400                 db  42h ; B
.eh_frame:0000000000024401                 db  0Eh
.eh_frame:0000000000024402                 db  28h ; (
.eh_frame:0000000000024403                 db  8Ch
.eh_frame:0000000000024404                 db    5
.eh_frame:0000000000024405                 db  44h ; D
.eh_frame:0000000000024406                 db  0Eh
.eh_frame:0000000000024407                 db  30h ; 0
.eh_frame:0000000000024408                 db  86h
.eh_frame:0000000000024409                 db    6
.eh_frame:000000000002440A                 db  41h ; A
.eh_frame:000000000002440B                 db  0Eh
.eh_frame:000000000002440C                 db  38h ; 8
.eh_frame:000000000002440D                 db  83h
.eh_frame:000000000002440E                 db    7
.eh_frame:000000000002440F                 db  44h ; D
.eh_frame:0000000000024410                 db  0Eh
.eh_frame:0000000000024411                 db  50h ; P
.eh_frame:0000000000024412                 db    2
.eh_frame:0000000000024413                 db 0D0h
.eh_frame:0000000000024414                 db  0Ah
.eh_frame:0000000000024415                 db  0Eh
.eh_frame:0000000000024416                 db  38h ; 8
.eh_frame:0000000000024417                 db  44h ; D
.eh_frame:0000000000024418                 db  0Eh
.eh_frame:0000000000024419                 db  30h ; 0
.eh_frame:000000000002441A                 db  41h ; A
.eh_frame:000000000002441B                 db  0Eh
.eh_frame:000000000002441C                 db  28h ; (
.eh_frame:000000000002441D                 db  42h ; B
.eh_frame:000000000002441E                 db  0Eh
.eh_frame:000000000002441F                 db  20h
.eh_frame:0000000000024420                 db  42h ; B
.eh_frame:0000000000024421                 db  0Eh
.eh_frame:0000000000024422                 db  18h
.eh_frame:0000000000024423                 db  42h ; B
.eh_frame:0000000000024424                 db  0Eh
.eh_frame:0000000000024425                 db  10h
.eh_frame:0000000000024426                 db  42h ; B
.eh_frame:0000000000024427                 db  0Eh
.eh_frame:0000000000024428                 db    8
.eh_frame:0000000000024429                 db  47h ; G
.eh_frame:000000000002442A                 db  0Bh
.eh_frame:000000000002442B                 db    0
.eh_frame:000000000002442C                 db    0
.eh_frame:000000000002442D                 db    0
.eh_frame:000000000002442E                 db    0
.eh_frame:000000000002442F                 db    0
.eh_frame:0000000000024430                 db  10h
.eh_frame:0000000000024431                 db    0
.eh_frame:0000000000024432                 db    0
.eh_frame:0000000000024433                 db    0
.eh_frame:0000000000024434                 db  0Ch
.eh_frame:0000000000024435                 db  0Ah
.eh_frame:0000000000024436                 db    0
.eh_frame:0000000000024437                 db    0
.eh_frame:0000000000024438                 db 0B8h
.eh_frame:0000000000024439                 db  38h ; 8
.eh_frame:000000000002443A                 db 0FEh
.eh_frame:000000000002443B                 db 0FFh
.eh_frame:000000000002443C                 db  93h
.eh_frame:000000000002443D                 db    0
.eh_frame:000000000002443E                 db    0
.eh_frame:000000000002443F                 db    0
.eh_frame:0000000000024440                 db    0
.eh_frame:0000000000024441                 db    0
.eh_frame:0000000000024442                 db    0
.eh_frame:0000000000024443                 db    0
.eh_frame:0000000000024444                 db  10h
.eh_frame:0000000000024445                 db    0
.eh_frame:0000000000024446                 db    0
.eh_frame:0000000000024447                 db    0
.eh_frame:0000000000024448                 db  20h
.eh_frame:0000000000024449                 db  0Ah
.eh_frame:000000000002444A                 db    0
.eh_frame:000000000002444B                 db    0
.eh_frame:000000000002444C                 db  44h ; D
.eh_frame:000000000002444D                 db  39h ; 9
.eh_frame:000000000002444E                 db 0FEh
.eh_frame:000000000002444F                 db 0FFh
.eh_frame:0000000000024450                 db  10h
.eh_frame:0000000000024451                 db    0
.eh_frame:0000000000024452                 db    0
.eh_frame:0000000000024453                 db    0
.eh_frame:0000000000024454                 db    0
.eh_frame:0000000000024455                 db    0
.eh_frame:0000000000024456                 db    0
.eh_frame:0000000000024457                 db    0
.eh_frame:0000000000024458                 db  10h
.eh_frame:0000000000024459                 db    0
.eh_frame:000000000002445A                 db    0
.eh_frame:000000000002445B                 db    0
.eh_frame:000000000002445C                 db  34h ; 4
.eh_frame:000000000002445D                 db  0Ah
.eh_frame:000000000002445E                 db    0
.eh_frame:000000000002445F                 db    0
.eh_frame:0000000000024460                 db  40h ; @
.eh_frame:0000000000024461                 db  39h ; 9
.eh_frame:0000000000024462                 db 0FEh
.eh_frame:0000000000024463                 db 0FFh
.eh_frame:0000000000024464                 db    7
.eh_frame:0000000000024465                 db    0
.eh_frame:0000000000024466                 db    0
.eh_frame:0000000000024467                 db    0
.eh_frame:0000000000024468                 db    0
.eh_frame:0000000000024469                 db    0
.eh_frame:000000000002446A                 db    0
.eh_frame:000000000002446B                 db    0
.eh_frame:000000000002446C                 db  18h
.eh_frame:000000000002446D                 db    0
.eh_frame:000000000002446E                 db    0
.eh_frame:000000000002446F                 db    0
.eh_frame:0000000000024470                 db  48h ; H
.eh_frame:0000000000024471                 db  0Ah
.eh_frame:0000000000024472                 db    0
.eh_frame:0000000000024473                 db    0
.eh_frame:0000000000024474                 db  3Ch ; <
.eh_frame:0000000000024475                 db  39h ; 9
.eh_frame:0000000000024476                 db 0FEh
.eh_frame:0000000000024477                 db 0FFh
.eh_frame:0000000000024478                 db  22h ; "
.eh_frame:0000000000024479                 db    0
.eh_frame:000000000002447A                 db    0
.eh_frame:000000000002447B                 db    0
.eh_frame:000000000002447C                 db    0
.eh_frame:000000000002447D                 db  41h ; A
.eh_frame:000000000002447E                 db  0Eh
.eh_frame:000000000002447F                 db  10h
.eh_frame:0000000000024480                 db  83h
.eh_frame:0000000000024481                 db    2
.eh_frame:0000000000024482                 db  5Bh ; [
.eh_frame:0000000000024483                 db  0Ah
.eh_frame:0000000000024484                 db  0Eh
.eh_frame:0000000000024485                 db    8
.eh_frame:0000000000024486                 db  41h ; A
.eh_frame:0000000000024487                 db  0Bh
.eh_frame:0000000000024488                 db  5Ch ; \
.eh_frame:0000000000024489                 db    0
.eh_frame:000000000002448A                 db    0
.eh_frame:000000000002448B                 db    0
.eh_frame:000000000002448C                 db  64h ; d
.eh_frame:000000000002448D                 db  0Ah
.eh_frame:000000000002448E                 db    0
.eh_frame:000000000002448F                 db    0
.eh_frame:0000000000024490                 db  50h ; P
.eh_frame:0000000000024491                 db  39h ; 9
.eh_frame:0000000000024492                 db 0FEh
.eh_frame:0000000000024493                 db 0FFh
.eh_frame:0000000000024494                 db  1Eh
.eh_frame:0000000000024495                 db    1
.eh_frame:0000000000024496                 db    0
.eh_frame:0000000000024497                 db    0
.eh_frame:0000000000024498                 db    0
.eh_frame:0000000000024499                 db  42h ; B
.eh_frame:000000000002449A                 db  0Eh
.eh_frame:000000000002449B                 db  10h
.eh_frame:000000000002449C                 db  8Eh
.eh_frame:000000000002449D                 db    2
.eh_frame:000000000002449E                 db  42h ; B
.eh_frame:000000000002449F                 db  0Eh
.eh_frame:00000000000244A0                 db  18h
.eh_frame:00000000000244A1                 db  8Dh
.eh_frame:00000000000244A2                 db    3
.eh_frame:00000000000244A3                 db  45h ; E
.eh_frame:00000000000244A4                 db  0Eh
.eh_frame:00000000000244A5                 db  20h
.eh_frame:00000000000244A6                 db  8Ch
.eh_frame:00000000000244A7                 db    4
.eh_frame:00000000000244A8                 db  41h ; A
.eh_frame:00000000000244A9                 db  0Eh
.eh_frame:00000000000244AA                 db  28h ; (
.eh_frame:00000000000244AB                 db  86h
.eh_frame:00000000000244AC                 db    5
.eh_frame:00000000000244AD                 db  44h ; D
.eh_frame:00000000000244AE                 db  0Eh
.eh_frame:00000000000244AF                 db  30h ; 0
.eh_frame:00000000000244B0                 db  83h
.eh_frame:00000000000244B1                 db    6
.eh_frame:00000000000244B2                 db    2
.eh_frame:00000000000244B3                 db 0A1h
.eh_frame:00000000000244B4                 db  0Ah
.eh_frame:00000000000244B5                 db  0Eh
.eh_frame:00000000000244B6                 db  28h ; (
.eh_frame:00000000000244B7                 db  44h ; D
.eh_frame:00000000000244B8                 db  0Eh
.eh_frame:00000000000244B9                 db  20h
.eh_frame:00000000000244BA                 db  42h ; B
.eh_frame:00000000000244BB                 db  0Eh
.eh_frame:00000000000244BC                 db  18h
.eh_frame:00000000000244BD                 db  42h ; B
.eh_frame:00000000000244BE                 db  0Eh
.eh_frame:00000000000244BF                 db  10h
.eh_frame:00000000000244C0                 db  42h ; B
.eh_frame:00000000000244C1                 db  0Eh
.eh_frame:00000000000244C2                 db    8
.eh_frame:00000000000244C3                 db  47h ; G
.eh_frame:00000000000244C4                 db  0Bh
.eh_frame:00000000000244C5                 db  71h ; q
.eh_frame:00000000000244C6                 db  0Ah
.eh_frame:00000000000244C7                 db  0Eh
.eh_frame:00000000000244C8                 db  28h ; (
.eh_frame:00000000000244C9                 db  41h ; A
.eh_frame:00000000000244CA                 db  0Eh
.eh_frame:00000000000244CB                 db  20h
.eh_frame:00000000000244CC                 db  42h ; B
.eh_frame:00000000000244CD                 db  0Eh
.eh_frame:00000000000244CE                 db  18h
.eh_frame:00000000000244CF                 db  42h ; B
.eh_frame:00000000000244D0                 db  0Eh
.eh_frame:00000000000244D1                 db  10h
.eh_frame:00000000000244D2                 db  42h ; B
.eh_frame:00000000000244D3                 db  0Eh
.eh_frame:00000000000244D4                 db    8
.eh_frame:00000000000244D5                 db  48h ; H
.eh_frame:00000000000244D6                 db  0Bh
.eh_frame:00000000000244D7                 db  53h ; S
.eh_frame:00000000000244D8                 db  0Eh
.eh_frame:00000000000244D9                 db  28h ; (
.eh_frame:00000000000244DA                 db  44h ; D
.eh_frame:00000000000244DB                 db  0Eh
.eh_frame:00000000000244DC                 db  20h
.eh_frame:00000000000244DD                 db  42h ; B
.eh_frame:00000000000244DE                 db  0Eh
.eh_frame:00000000000244DF                 db  18h
.eh_frame:00000000000244E0                 db  42h ; B
.eh_frame:00000000000244E1                 db  0Eh
.eh_frame:00000000000244E2                 db  10h
.eh_frame:00000000000244E3                 db  42h ; B
.eh_frame:00000000000244E4                 db  0Eh
.eh_frame:00000000000244E5                 db    8
.eh_frame:00000000000244E6                 db    0
.eh_frame:00000000000244E7                 db    0
.eh_frame:00000000000244E8                 db  10h
.eh_frame:00000000000244E9                 db    0
.eh_frame:00000000000244EA                 db    0
.eh_frame:00000000000244EB                 db    0
.eh_frame:00000000000244EC                 db 0C4h
.eh_frame:00000000000244ED                 db  0Ah
.eh_frame:00000000000244EE                 db    0
.eh_frame:00000000000244EF                 db    0
.eh_frame:00000000000244F0                 db  10h
.eh_frame:00000000000244F1                 db  3Ah ; :
.eh_frame:00000000000244F2                 db 0FEh
.eh_frame:00000000000244F3                 db 0FFh
.eh_frame:00000000000244F4                 db  77h ; w
.eh_frame:00000000000244F5                 db    0
.eh_frame:00000000000244F6                 db    0
.eh_frame:00000000000244F7                 db    0
.eh_frame:00000000000244F8                 db    0
.eh_frame:00000000000244F9                 db    0
.eh_frame:00000000000244FA                 db    0
.eh_frame:00000000000244FB                 db    0
.eh_frame:00000000000244FC                 db  5Ch ; \
.eh_frame:00000000000244FD                 db    0
.eh_frame:00000000000244FE                 db    0
.eh_frame:00000000000244FF                 db    0
.eh_frame:0000000000024500                 db 0D8h
.eh_frame:0000000000024501                 db  0Ah
.eh_frame:0000000000024502                 db    0
.eh_frame:0000000000024503                 db    0
.eh_frame:0000000000024504                 db  7Ch ; |
.eh_frame:0000000000024505                 db  3Ah ; :
.eh_frame:0000000000024506                 db 0FEh
.eh_frame:0000000000024507                 db 0FFh
.eh_frame:0000000000024508                 db  40h ; @
.eh_frame:0000000000024509                 db    1
.eh_frame:000000000002450A                 db    0
.eh_frame:000000000002450B                 db    0
.eh_frame:000000000002450C                 db    0
.eh_frame:000000000002450D                 db  42h ; B
.eh_frame:000000000002450E                 db  0Eh
.eh_frame:000000000002450F                 db  10h
.eh_frame:0000000000024510                 db  8Fh
.eh_frame:0000000000024511                 db    2
.eh_frame:0000000000024512                 db  42h ; B
.eh_frame:0000000000024513                 db  0Eh
.eh_frame:0000000000024514                 db  18h
.eh_frame:0000000000024515                 db  8Eh
.eh_frame:0000000000024516                 db    3
.eh_frame:0000000000024517                 db  42h ; B
.eh_frame:0000000000024518                 db  0Eh
.eh_frame:0000000000024519                 db  20h
.eh_frame:000000000002451A                 db  8Dh
.eh_frame:000000000002451B                 db    4
.eh_frame:000000000002451C                 db  42h ; B
.eh_frame:000000000002451D                 db  0Eh
.eh_frame:000000000002451E                 db  28h ; (
.eh_frame:000000000002451F                 db  8Ch
.eh_frame:0000000000024520                 db    5
.eh_frame:0000000000024521                 db  41h ; A
.eh_frame:0000000000024522                 db  0Eh
.eh_frame:0000000000024523                 db  30h ; 0
.eh_frame:0000000000024524                 db  86h
.eh_frame:0000000000024525                 db    6
.eh_frame:0000000000024526                 db  41h ; A
.eh_frame:0000000000024527                 db  0Eh
.eh_frame:0000000000024528                 db  38h ; 8
.eh_frame:0000000000024529                 db  83h
.eh_frame:000000000002452A                 db    7
.eh_frame:000000000002452B                 db  44h ; D
.eh_frame:000000000002452C                 db  0Eh
.eh_frame:000000000002452D                 db  40h ; @
.eh_frame:000000000002452E                 db    2
.eh_frame:000000000002452F                 db 0EEh
.eh_frame:0000000000024530                 db  0Ah
.eh_frame:0000000000024531                 db  0Eh
.eh_frame:0000000000024532                 db  38h ; 8
.eh_frame:0000000000024533                 db  46h ; F
.eh_frame:0000000000024534                 db  0Eh
.eh_frame:0000000000024535                 db  30h ; 0
.eh_frame:0000000000024536                 db  41h ; A
.eh_frame:0000000000024537                 db  0Eh
.eh_frame:0000000000024538                 db  28h ; (
.eh_frame:0000000000024539                 db  42h ; B
.eh_frame:000000000002453A                 db  0Eh
.eh_frame:000000000002453B                 db  20h
.eh_frame:000000000002453C                 db  42h ; B
.eh_frame:000000000002453D                 db  0Eh
.eh_frame:000000000002453E                 db  18h
.eh_frame:000000000002453F                 db  42h ; B
.eh_frame:0000000000024540                 db  0Eh
.eh_frame:0000000000024541                 db  10h
.eh_frame:0000000000024542                 db  42h ; B
.eh_frame:0000000000024543                 db  0Eh
.eh_frame:0000000000024544                 db    8
.eh_frame:0000000000024545                 db  45h ; E
.eh_frame:0000000000024546                 db  0Bh
.eh_frame:0000000000024547                 db  63h ; c
.eh_frame:0000000000024548                 db  0Eh
.eh_frame:0000000000024549                 db  38h ; 8
.eh_frame:000000000002454A                 db  43h ; C
.eh_frame:000000000002454B                 db  0Eh
.eh_frame:000000000002454C                 db  30h ; 0
.eh_frame:000000000002454D                 db  41h ; A
.eh_frame:000000000002454E                 db  0Eh
.eh_frame:000000000002454F                 db  28h ; (
.eh_frame:0000000000024550                 db  42h ; B
.eh_frame:0000000000024551                 db  0Eh
.eh_frame:0000000000024552                 db  20h
.eh_frame:0000000000024553                 db  42h ; B
.eh_frame:0000000000024554                 db  0Eh
.eh_frame:0000000000024555                 db  18h
.eh_frame:0000000000024556                 db  42h ; B
.eh_frame:0000000000024557                 db  0Eh
.eh_frame:0000000000024558                 db  10h
.eh_frame:0000000000024559                 db  42h ; B
.eh_frame:000000000002455A                 db  0Eh
.eh_frame:000000000002455B                 db    8
.eh_frame:000000000002455C                 db  10h
.eh_frame:000000000002455D                 db    0
.eh_frame:000000000002455E                 db    0
.eh_frame:000000000002455F                 db    0
.eh_frame:0000000000024560                 db  38h ; 8
.eh_frame:0000000000024561                 db  0Bh
.eh_frame:0000000000024562                 db    0
.eh_frame:0000000000024563                 db    0
.eh_frame:0000000000024564                 db  5Ch ; \
.eh_frame:0000000000024565                 db  3Bh ; ;
.eh_frame:0000000000024566                 db 0FEh
.eh_frame:0000000000024567                 db 0FFh
.eh_frame:0000000000024568                 db    5
.eh_frame:0000000000024569                 db    0
.eh_frame:000000000002456A                 db    0
.eh_frame:000000000002456B                 db    0
.eh_frame:000000000002456C                 db    0
.eh_frame:000000000002456D                 db    0
.eh_frame:000000000002456E                 db    0
.eh_frame:000000000002456F                 db    0
.eh_frame:0000000000024570                 db  10h
.eh_frame:0000000000024571                 db    0
.eh_frame:0000000000024572                 db    0
.eh_frame:0000000000024573                 db    0
.eh_frame:0000000000024574                 db  4Ch ; L
.eh_frame:0000000000024575                 db  0Bh
.eh_frame:0000000000024576                 db    0
.eh_frame:0000000000024577                 db    0
.eh_frame:0000000000024578                 db  58h ; X
.eh_frame:0000000000024579                 db  3Bh ; ;
.eh_frame:000000000002457A                 db 0FEh
.eh_frame:000000000002457B                 db 0FFh
.eh_frame:000000000002457C                 db    5
.eh_frame:000000000002457D                 db    0
.eh_frame:000000000002457E                 db    0
.eh_frame:000000000002457F                 db    0
.eh_frame:0000000000024580                 db    0
.eh_frame:0000000000024581                 db    0
.eh_frame:0000000000024582                 db    0
.eh_frame:0000000000024583                 db    0
.eh_frame:0000000000024584                 db  10h
.eh_frame:0000000000024585                 db    0
.eh_frame:0000000000024586                 db    0
.eh_frame:0000000000024587                 db    0
.eh_frame:0000000000024588                 db  60h ; `
.eh_frame:0000000000024589                 db  0Bh
.eh_frame:000000000002458A                 db    0
.eh_frame:000000000002458B                 db    0
.eh_frame:000000000002458C                 db  54h ; T
.eh_frame:000000000002458D                 db  3Bh ; ;
.eh_frame:000000000002458E                 db 0FEh
.eh_frame:000000000002458F                 db 0FFh
.eh_frame:0000000000024590                 db    5
.eh_frame:0000000000024591                 db    0
.eh_frame:0000000000024592                 db    0
.eh_frame:0000000000024593                 db    0
.eh_frame:0000000000024594                 db    0
.eh_frame:0000000000024595                 db    0
.eh_frame:0000000000024596                 db    0
.eh_frame:0000000000024597                 db    0
.eh_frame:0000000000024598                 db  10h
.eh_frame:0000000000024599                 db    0
.eh_frame:000000000002459A                 db    0
.eh_frame:000000000002459B                 db    0
.eh_frame:000000000002459C                 db  74h ; t
.eh_frame:000000000002459D                 db  0Bh
.eh_frame:000000000002459E                 db    0
.eh_frame:000000000002459F                 db    0
.eh_frame:00000000000245A0                 db  50h ; P
.eh_frame:00000000000245A1                 db  3Bh ; ;
.eh_frame:00000000000245A2                 db 0FEh
.eh_frame:00000000000245A3                 db 0FFh
.eh_frame:00000000000245A4                 db  49h ; I
.eh_frame:00000000000245A5                 db    0
.eh_frame:00000000000245A6                 db    0
.eh_frame:00000000000245A7                 db    0
.eh_frame:00000000000245A8                 db    0
.eh_frame:00000000000245A9                 db    0
.eh_frame:00000000000245AA                 db    0
.eh_frame:00000000000245AB                 db    0
.eh_frame:00000000000245AC                 db  10h
.eh_frame:00000000000245AD                 db    0
.eh_frame:00000000000245AE                 db    0
.eh_frame:00000000000245AF                 db    0
.eh_frame:00000000000245B0                 db  88h
.eh_frame:00000000000245B1                 db  0Bh
.eh_frame:00000000000245B2                 db    0
.eh_frame:00000000000245B3                 db    0
.eh_frame:00000000000245B4                 db  8Ch
.eh_frame:00000000000245B5                 db  3Bh ; ;
.eh_frame:00000000000245B6                 db 0FEh
.eh_frame:00000000000245B7                 db 0FFh
.eh_frame:00000000000245B8                 db  58h ; X
.eh_frame:00000000000245B9                 db    0
.eh_frame:00000000000245BA                 db    0
.eh_frame:00000000000245BB                 db    0
.eh_frame:00000000000245BC                 db    0
.eh_frame:00000000000245BD                 db    0
.eh_frame:00000000000245BE                 db    0
.eh_frame:00000000000245BF                 db    0
.eh_frame:00000000000245C0                 db  38h ; 8
.eh_frame:00000000000245C1                 db    0
.eh_frame:00000000000245C2                 db    0
.eh_frame:00000000000245C3                 db    0
.eh_frame:00000000000245C4                 db  9Ch
.eh_frame:00000000000245C5                 db  0Bh
.eh_frame:00000000000245C6                 db    0
.eh_frame:00000000000245C7                 db    0
.eh_frame:00000000000245C8                 db 0D8h
.eh_frame:00000000000245C9                 db  3Bh ; ;
.eh_frame:00000000000245CA                 db 0FEh
.eh_frame:00000000000245CB                 db 0FFh
.eh_frame:00000000000245CC                 db  47h ; G
.eh_frame:00000000000245CD                 db    1
.eh_frame:00000000000245CE                 db    0
.eh_frame:00000000000245CF                 db    0
.eh_frame:00000000000245D0                 db    0
.eh_frame:00000000000245D1                 db  42h ; B
.eh_frame:00000000000245D2                 db  0Eh
.eh_frame:00000000000245D3                 db  10h
.eh_frame:00000000000245D4                 db  8Dh
.eh_frame:00000000000245D5                 db    2
.eh_frame:00000000000245D6                 db  42h ; B
.eh_frame:00000000000245D7                 db  0Eh
.eh_frame:00000000000245D8                 db  18h
.eh_frame:00000000000245D9                 db  8Ch
.eh_frame:00000000000245DA                 db    3
.eh_frame:00000000000245DB                 db  44h ; D
.eh_frame:00000000000245DC                 db  0Eh
.eh_frame:00000000000245DD                 db  20h
.eh_frame:00000000000245DE                 db  86h
.eh_frame:00000000000245DF                 db    4
.eh_frame:00000000000245E0                 db  41h ; A
.eh_frame:00000000000245E1                 db  0Eh
.eh_frame:00000000000245E2                 db  28h ; (
.eh_frame:00000000000245E3                 db  83h
.eh_frame:00000000000245E4                 db    5
.eh_frame:00000000000245E5                 db  46h ; F
.eh_frame:00000000000245E6                 db  0Eh
.eh_frame:00000000000245E7                 db  30h ; 0
.eh_frame:00000000000245E8                 db    2
.eh_frame:00000000000245E9                 db 0CDh
.eh_frame:00000000000245EA                 db  0Ah
.eh_frame:00000000000245EB                 db  0Eh
.eh_frame:00000000000245EC                 db  28h ; (
.eh_frame:00000000000245ED                 db  47h ; G
.eh_frame:00000000000245EE                 db  0Eh
.eh_frame:00000000000245EF                 db  20h
.eh_frame:00000000000245F0                 db  41h ; A
.eh_frame:00000000000245F1                 db  0Eh
.eh_frame:00000000000245F2                 db  18h
.eh_frame:00000000000245F3                 db  42h ; B
.eh_frame:00000000000245F4                 db  0Eh
.eh_frame:00000000000245F5                 db  10h
.eh_frame:00000000000245F6                 db  42h ; B
.eh_frame:00000000000245F7                 db  0Eh
.eh_frame:00000000000245F8                 db    8
.eh_frame:00000000000245F9                 db  58h ; X
.eh_frame:00000000000245FA                 db  0Bh
.eh_frame:00000000000245FB                 db    0
.eh_frame:00000000000245FC                 db  34h ; 4
.eh_frame:00000000000245FD                 db    0
.eh_frame:00000000000245FE                 db    0
.eh_frame:00000000000245FF                 db    0
.eh_frame:0000000000024600                 db 0D8h
.eh_frame:0000000000024601                 db  0Bh
.eh_frame:0000000000024602                 db    0
.eh_frame:0000000000024603                 db    0
.eh_frame:0000000000024604                 db 0ECh
.eh_frame:0000000000024605                 db  3Ch ; <
.eh_frame:0000000000024606                 db 0FEh
.eh_frame:0000000000024607                 db 0FFh
.eh_frame:0000000000024608                 db  5Bh ; [
.eh_frame:0000000000024609                 db    0
.eh_frame:000000000002460A                 db    0
.eh_frame:000000000002460B                 db    0
.eh_frame:000000000002460C                 db    0
.eh_frame:000000000002460D                 db  42h ; B
.eh_frame:000000000002460E                 db  0Eh
.eh_frame:000000000002460F                 db  10h
.eh_frame:0000000000024610                 db  8Ch
.eh_frame:0000000000024611                 db    2
.eh_frame:0000000000024612                 db  41h ; A
.eh_frame:0000000000024613                 db  0Eh
.eh_frame:0000000000024614                 db  18h
.eh_frame:0000000000024615                 db  86h
.eh_frame:0000000000024616                 db    3
.eh_frame:0000000000024617                 db  44h ; D
.eh_frame:0000000000024618                 db  0Eh
.eh_frame:0000000000024619                 db  20h
.eh_frame:000000000002461A                 db  83h
.eh_frame:000000000002461B                 db    4
.eh_frame:000000000002461C                 db  79h ; y
.eh_frame:000000000002461D                 db  0Ah
.eh_frame:000000000002461E                 db  0Eh
.eh_frame:000000000002461F                 db  18h
.eh_frame:0000000000024620                 db  44h ; D
.eh_frame:0000000000024621                 db  0Eh
.eh_frame:0000000000024622                 db  10h
.eh_frame:0000000000024623                 db  42h ; B
.eh_frame:0000000000024624                 db  0Eh
.eh_frame:0000000000024625                 db    8
.eh_frame:0000000000024626                 db  4Ah ; J
.eh_frame:0000000000024627                 db  0Bh
.eh_frame:0000000000024628                 db  44h ; D
.eh_frame:0000000000024629                 db  0Eh
.eh_frame:000000000002462A                 db  18h
.eh_frame:000000000002462B                 db  41h ; A
.eh_frame:000000000002462C                 db  0Eh
.eh_frame:000000000002462D                 db  10h
.eh_frame:000000000002462E                 db  45h ; E
.eh_frame:000000000002462F                 db  0Eh
.eh_frame:0000000000024630                 db    8
.eh_frame:0000000000024631                 db    0
.eh_frame:0000000000024632                 db    0
.eh_frame:0000000000024633                 db    0
.eh_frame:0000000000024634                 db  10h
.eh_frame:0000000000024635                 db    0
.eh_frame:0000000000024636                 db    0
.eh_frame:0000000000024637                 db    0
.eh_frame:0000000000024638                 db  10h
.eh_frame:0000000000024639                 db  0Ch
.eh_frame:000000000002463A                 db    0
.eh_frame:000000000002463B                 db    0
.eh_frame:000000000002463C                 db  14h
.eh_frame:000000000002463D                 db  3Dh ; =
.eh_frame:000000000002463E                 db 0FEh
.eh_frame:000000000002463F                 db 0FFh
.eh_frame:0000000000024640                 db  41h ; A
.eh_frame:0000000000024641                 db    0
.eh_frame:0000000000024642                 db    0
.eh_frame:0000000000024643                 db    0
.eh_frame:0000000000024644                 db    0
.eh_frame:0000000000024645                 db  7Ch ; |
.eh_frame:0000000000024646                 db  0Eh
.eh_frame:0000000000024647                 db  10h
.eh_frame:0000000000024648                 db  30h ; 0
.eh_frame:0000000000024649                 db    0
.eh_frame:000000000002464A                 db    0
.eh_frame:000000000002464B                 db    0
.eh_frame:000000000002464C                 db  24h ; $
.eh_frame:000000000002464D                 db  0Ch
.eh_frame:000000000002464E                 db    0
.eh_frame:000000000002464F                 db    0
.eh_frame:0000000000024650                 db  50h ; P
.eh_frame:0000000000024651                 db  3Dh ; =
.eh_frame:0000000000024652                 db 0FEh
.eh_frame:0000000000024653                 db 0FFh
.eh_frame:0000000000024654                 db  72h ; r
.eh_frame:0000000000024655                 db    0
.eh_frame:0000000000024656                 db    0
.eh_frame:0000000000024657                 db    0
.eh_frame:0000000000024658                 db    0
.eh_frame:0000000000024659                 db  41h ; A
.eh_frame:000000000002465A                 db  0Eh
.eh_frame:000000000002465B                 db  10h
.eh_frame:000000000002465C                 db  86h
.eh_frame:000000000002465D                 db    2
.eh_frame:000000000002465E                 db  41h ; A
.eh_frame:000000000002465F                 db  0Eh
.eh_frame:0000000000024660                 db  18h
.eh_frame:0000000000024661                 db  83h
.eh_frame:0000000000024662                 db    3
.eh_frame:0000000000024663                 db  4Ah ; J
.eh_frame:0000000000024664                 db  0Eh
.eh_frame:0000000000024665                 db  20h
.eh_frame:0000000000024666                 db    2
.eh_frame:0000000000024667                 db  53h ; S
.eh_frame:0000000000024668                 db  0Ah
.eh_frame:0000000000024669                 db  0Eh
.eh_frame:000000000002466A                 db  18h
.eh_frame:000000000002466B                 db  41h ; A
.eh_frame:000000000002466C                 db  0Eh
.eh_frame:000000000002466D                 db  10h
.eh_frame:000000000002466E                 db  41h ; A
.eh_frame:000000000002466F                 db  0Eh
.eh_frame:0000000000024670                 db    8
.eh_frame:0000000000024671                 db  47h ; G
.eh_frame:0000000000024672                 db  0Bh
.eh_frame:0000000000024673                 db  47h ; G
.eh_frame:0000000000024674                 db  0Eh
.eh_frame:0000000000024675                 db  18h
.eh_frame:0000000000024676                 db  41h ; A
.eh_frame:0000000000024677                 db  0Eh
.eh_frame:0000000000024678                 db  10h
.eh_frame:0000000000024679                 db  41h ; A
.eh_frame:000000000002467A                 db  0Eh
.eh_frame:000000000002467B                 db    8
.eh_frame:000000000002467C                 db  10h
.eh_frame:000000000002467D                 db    0
.eh_frame:000000000002467E                 db    0
.eh_frame:000000000002467F                 db    0
.eh_frame:0000000000024680                 db  58h ; X
.eh_frame:0000000000024681                 db  0Ch
.eh_frame:0000000000024682                 db    0
.eh_frame:0000000000024683                 db    0
.eh_frame:0000000000024684                 db  9Ch
.eh_frame:0000000000024685                 db  3Dh ; =
.eh_frame:0000000000024686                 db 0FEh
.eh_frame:0000000000024687                 db 0FFh
.eh_frame:0000000000024688                 db  65h ; e
.eh_frame:0000000000024689                 db    0
.eh_frame:000000000002468A                 db    0
.eh_frame:000000000002468B                 db    0
.eh_frame:000000000002468C                 db    0
.eh_frame:000000000002468D                 db    0
.eh_frame:000000000002468E                 db    0
.eh_frame:000000000002468F                 db    0
.eh_frame:0000000000024690                 db  48h ; H
.eh_frame:0000000000024691                 db    0
.eh_frame:0000000000024692                 db    0
.eh_frame:0000000000024693                 db    0
.eh_frame:0000000000024694                 db  6Ch ; l
.eh_frame:0000000000024695                 db  0Ch
.eh_frame:0000000000024696                 db    0
.eh_frame:0000000000024697                 db    0
.eh_frame:0000000000024698                 db 0F8h
.eh_frame:0000000000024699                 db  3Dh ; =
.eh_frame:000000000002469A                 db 0FEh
.eh_frame:000000000002469B                 db 0FFh
.eh_frame:000000000002469C                 db  6Ah ; j
.eh_frame:000000000002469D                 db    0
.eh_frame:000000000002469E                 db    0
.eh_frame:000000000002469F                 db    0
.eh_frame:00000000000246A0                 db    0
.eh_frame:00000000000246A1                 db  42h ; B
.eh_frame:00000000000246A2                 db  0Eh
.eh_frame:00000000000246A3                 db  10h
.eh_frame:00000000000246A4                 db  8Fh
.eh_frame:00000000000246A5                 db    2
.eh_frame:00000000000246A6                 db  42h ; B
.eh_frame:00000000000246A7                 db  0Eh
.eh_frame:00000000000246A8                 db  18h
.eh_frame:00000000000246A9                 db  8Eh
.eh_frame:00000000000246AA                 db    3
.eh_frame:00000000000246AB                 db  42h ; B
.eh_frame:00000000000246AC                 db  0Eh
.eh_frame:00000000000246AD                 db  20h
.eh_frame:00000000000246AE                 db  8Dh
.eh_frame:00000000000246AF                 db    4
.eh_frame:00000000000246B0                 db  42h ; B
.eh_frame:00000000000246B1                 db  0Eh
.eh_frame:00000000000246B2                 db  28h ; (
.eh_frame:00000000000246B3                 db  8Ch
.eh_frame:00000000000246B4                 db    5
.eh_frame:00000000000246B5                 db  41h ; A
.eh_frame:00000000000246B6                 db  0Eh
.eh_frame:00000000000246B7                 db  30h ; 0
.eh_frame:00000000000246B8                 db  86h
.eh_frame:00000000000246B9                 db    6
.eh_frame:00000000000246BA                 db  41h ; A
.eh_frame:00000000000246BB                 db  0Eh
.eh_frame:00000000000246BC                 db  38h ; 8
.eh_frame:00000000000246BD                 db  83h
.eh_frame:00000000000246BE                 db    7
.eh_frame:00000000000246BF                 db  44h ; D
.eh_frame:00000000000246C0                 db  0Eh
.eh_frame:00000000000246C1                 db  40h ; @
.eh_frame:00000000000246C2                 db    2
.eh_frame:00000000000246C3                 db  4Ah ; J
.eh_frame:00000000000246C4                 db  0Ah
.eh_frame:00000000000246C5                 db  0Eh
.eh_frame:00000000000246C6                 db  38h ; 8
.eh_frame:00000000000246C7                 db  44h ; D
.eh_frame:00000000000246C8                 db  0Eh
.eh_frame:00000000000246C9                 db  30h ; 0
.eh_frame:00000000000246CA                 db  41h ; A
.eh_frame:00000000000246CB                 db  0Eh
.eh_frame:00000000000246CC                 db  28h ; (
.eh_frame:00000000000246CD                 db  42h ; B
.eh_frame:00000000000246CE                 db  0Eh
.eh_frame:00000000000246CF                 db  20h
.eh_frame:00000000000246D0                 db  42h ; B
.eh_frame:00000000000246D1                 db  0Eh
.eh_frame:00000000000246D2                 db  18h
.eh_frame:00000000000246D3                 db  42h ; B
.eh_frame:00000000000246D4                 db  0Eh
.eh_frame:00000000000246D5                 db  10h
.eh_frame:00000000000246D6                 db  42h ; B
.eh_frame:00000000000246D7                 db  0Eh
.eh_frame:00000000000246D8                 db    8
.eh_frame:00000000000246D9                 db  41h ; A
.eh_frame:00000000000246DA                 db  0Bh
.eh_frame:00000000000246DB                 db    0
.eh_frame:00000000000246DC                 db  10h
.eh_frame:00000000000246DD                 db    0
.eh_frame:00000000000246DE                 db    0
.eh_frame:00000000000246DF                 db    0
.eh_frame:00000000000246E0                 db 0B8h
.eh_frame:00000000000246E1                 db  0Ch
.eh_frame:00000000000246E2                 db    0
.eh_frame:00000000000246E3                 db    0
.eh_frame:00000000000246E4                 db  1Ch
.eh_frame:00000000000246E5                 db  3Eh ; >
.eh_frame:00000000000246E6                 db 0FEh
.eh_frame:00000000000246E7                 db 0FFh
.eh_frame:00000000000246E8                 db  31h ; 1
.eh_frame:00000000000246E9                 db    0
.eh_frame:00000000000246EA                 db    0
.eh_frame:00000000000246EB                 db    0
.eh_frame:00000000000246EC                 db    0
.eh_frame:00000000000246ED                 db    0
.eh_frame:00000000000246EE                 db    0
.eh_frame:00000000000246EF                 db    0
.eh_frame:00000000000246F0                 db  10h
.eh_frame:00000000000246F1                 db    0
.eh_frame:00000000000246F2                 db    0
.eh_frame:00000000000246F3                 db    0
.eh_frame:00000000000246F4                 db 0CCh
.eh_frame:00000000000246F5                 db  0Ch
.eh_frame:00000000000246F6                 db    0
.eh_frame:00000000000246F7                 db    0
.eh_frame:00000000000246F8                 db  48h ; H
.eh_frame:00000000000246F9                 db  3Eh ; >
.eh_frame:00000000000246FA                 db 0FEh
.eh_frame:00000000000246FB                 db 0FFh
.eh_frame:00000000000246FC                 db  20h
.eh_frame:00000000000246FD                 db    0
.eh_frame:00000000000246FE                 db    0
.eh_frame:00000000000246FF                 db    0
.eh_frame:0000000000024700                 db    0
.eh_frame:0000000000024701                 db    0
.eh_frame:0000000000024702                 db    0
.eh_frame:0000000000024703                 db    0
.eh_frame:0000000000024704                 db  48h ; H
.eh_frame:0000000000024705                 db    0
.eh_frame:0000000000024706                 db    0
.eh_frame:0000000000024707                 db    0
.eh_frame:0000000000024708                 db 0E0h
.eh_frame:0000000000024709                 db  0Ch
.eh_frame:000000000002470A                 db    0
.eh_frame:000000000002470B                 db    0
.eh_frame:000000000002470C                 db  54h ; T
.eh_frame:000000000002470D                 db  3Eh ; >
.eh_frame:000000000002470E                 db 0FEh
.eh_frame:000000000002470F                 db 0FFh
.eh_frame:0000000000024710                 db 0B4h
.eh_frame:0000000000024711                 db    1
.eh_frame:0000000000024712                 db    0
.eh_frame:0000000000024713                 db    0
.eh_frame:0000000000024714                 db    0
.eh_frame:0000000000024715                 db  42h ; B
.eh_frame:0000000000024716                 db  0Eh
.eh_frame:0000000000024717                 db  10h
.eh_frame:0000000000024718                 db  8Fh
.eh_frame:0000000000024719                 db    2
.eh_frame:000000000002471A                 db  42h ; B
.eh_frame:000000000002471B                 db  0Eh
.eh_frame:000000000002471C                 db  18h
.eh_frame:000000000002471D                 db  8Eh
.eh_frame:000000000002471E                 db    3
.eh_frame:000000000002471F                 db  49h ; I
.eh_frame:0000000000024720                 db  0Eh
.eh_frame:0000000000024721                 db  20h
.eh_frame:0000000000024722                 db  8Dh
.eh_frame:0000000000024723                 db    4
.eh_frame:0000000000024724                 db  42h ; B
.eh_frame:0000000000024725                 db  0Eh
.eh_frame:0000000000024726                 db  28h ; (
.eh_frame:0000000000024727                 db  8Ch
.eh_frame:0000000000024728                 db    5
.eh_frame:0000000000024729                 db  44h ; D
.eh_frame:000000000002472A                 db  0Eh
.eh_frame:000000000002472B                 db  30h ; 0
.eh_frame:000000000002472C                 db  86h
.eh_frame:000000000002472D                 db    6
.eh_frame:000000000002472E                 db  41h ; A
.eh_frame:000000000002472F                 db  0Eh
.eh_frame:0000000000024730                 db  38h ; 8
.eh_frame:0000000000024731                 db  83h
.eh_frame:0000000000024732                 db    7
.eh_frame:0000000000024733                 db  52h ; R
.eh_frame:0000000000024734                 db  0Eh
.eh_frame:0000000000024735                 db  40h ; @
.eh_frame:0000000000024736                 db    2
.eh_frame:0000000000024737                 db 0D8h
.eh_frame:0000000000024738                 db  0Ah
.eh_frame:0000000000024739                 db  0Eh
.eh_frame:000000000002473A                 db  38h ; 8
.eh_frame:000000000002473B                 db  44h ; D
.eh_frame:000000000002473C                 db  0Eh
.eh_frame:000000000002473D                 db  30h ; 0
.eh_frame:000000000002473E                 db  41h ; A
.eh_frame:000000000002473F                 db  0Eh
.eh_frame:0000000000024740                 db  28h ; (
.eh_frame:0000000000024741                 db  42h ; B
.eh_frame:0000000000024742                 db  0Eh
.eh_frame:0000000000024743                 db  20h
.eh_frame:0000000000024744                 db  42h ; B
.eh_frame:0000000000024745                 db  0Eh
.eh_frame:0000000000024746                 db  18h
.eh_frame:0000000000024747                 db  42h ; B
.eh_frame:0000000000024748                 db  0Eh
.eh_frame:0000000000024749                 db  10h
.eh_frame:000000000002474A                 db  42h ; B
.eh_frame:000000000002474B                 db  0Eh
.eh_frame:000000000002474C                 db    8
.eh_frame:000000000002474D                 db  45h ; E
.eh_frame:000000000002474E                 db  0Bh
.eh_frame:000000000002474F                 db    0
.eh_frame:0000000000024750                 db  28h ; (
.eh_frame:0000000000024751                 db    0
.eh_frame:0000000000024752                 db    0
.eh_frame:0000000000024753                 db    0
.eh_frame:0000000000024754                 db  2Ch ; ,
.eh_frame:0000000000024755                 db  0Dh
.eh_frame:0000000000024756                 db    0
.eh_frame:0000000000024757                 db    0
.eh_frame:0000000000024758                 db 0C8h
.eh_frame:0000000000024759                 db  3Fh ; ?
.eh_frame:000000000002475A                 db 0FEh
.eh_frame:000000000002475B                 db 0FFh
.eh_frame:000000000002475C                 db  90h
.eh_frame:000000000002475D                 db    0
.eh_frame:000000000002475E                 db    0
.eh_frame:000000000002475F                 db    0
.eh_frame:0000000000024760                 db    0
.eh_frame:0000000000024761                 db  42h ; B
.eh_frame:0000000000024762                 db  0Eh
.eh_frame:0000000000024763                 db  10h
.eh_frame:0000000000024764                 db  8Ch
.eh_frame:0000000000024765                 db    2
.eh_frame:0000000000024766                 db  41h ; A
.eh_frame:0000000000024767                 db  0Eh
.eh_frame:0000000000024768                 db  18h
.eh_frame:0000000000024769                 db  86h
.eh_frame:000000000002476A                 db    3
.eh_frame:000000000002476B                 db  44h ; D
.eh_frame:000000000002476C                 db  0Eh
.eh_frame:000000000002476D                 db  20h
.eh_frame:000000000002476E                 db  83h
.eh_frame:000000000002476F                 db    4
.eh_frame:0000000000024770                 db    2
.eh_frame:0000000000024771                 db  85h
.eh_frame:0000000000024772                 db  0Eh
.eh_frame:0000000000024773                 db  18h
.eh_frame:0000000000024774                 db  41h ; A
.eh_frame:0000000000024775                 db  0Eh
.eh_frame:0000000000024776                 db  10h
.eh_frame:0000000000024777                 db  42h ; B
.eh_frame:0000000000024778                 db  0Eh
.eh_frame:0000000000024779                 db    8
.eh_frame:000000000002477A                 db    0
.eh_frame:000000000002477B                 db    0
.eh_frame:000000000002477C                 db  28h ; (
.eh_frame:000000000002477D                 db    0
.eh_frame:000000000002477E                 db    0
.eh_frame:000000000002477F                 db    0
.eh_frame:0000000000024780                 db  58h ; X
.eh_frame:0000000000024781                 db  0Dh
.eh_frame:0000000000024782                 db    0
.eh_frame:0000000000024783                 db    0
.eh_frame:0000000000024784                 db  2Ch ; ,
.eh_frame:0000000000024785                 db  40h ; @
.eh_frame:0000000000024786                 db 0FEh
.eh_frame:0000000000024787                 db 0FFh
.eh_frame:0000000000024788                 db 0D6h
.eh_frame:0000000000024789                 db    0
.eh_frame:000000000002478A                 db    0
.eh_frame:000000000002478B                 db    0
.eh_frame:000000000002478C                 db    0
.eh_frame:000000000002478D                 db  42h ; B
.eh_frame:000000000002478E                 db  0Eh
.eh_frame:000000000002478F                 db  10h
.eh_frame:0000000000024790                 db  8Ch
.eh_frame:0000000000024791                 db    2
.eh_frame:0000000000024792                 db  41h ; A
.eh_frame:0000000000024793                 db  0Eh
.eh_frame:0000000000024794                 db  18h
.eh_frame:0000000000024795                 db  86h
.eh_frame:0000000000024796                 db    3
.eh_frame:0000000000024797                 db  44h ; D
.eh_frame:0000000000024798                 db  0Eh
.eh_frame:0000000000024799                 db  20h
.eh_frame:000000000002479A                 db  83h
.eh_frame:000000000002479B                 db    4
.eh_frame:000000000002479C                 db    2
.eh_frame:000000000002479D                 db 0C4h
.eh_frame:000000000002479E                 db  0Eh
.eh_frame:000000000002479F                 db  18h
.eh_frame:00000000000247A0                 db  44h ; D
.eh_frame:00000000000247A1                 db  0Eh
.eh_frame:00000000000247A2                 db  10h
.eh_frame:00000000000247A3                 db  42h ; B
.eh_frame:00000000000247A4                 db  0Eh
.eh_frame:00000000000247A5                 db    8
.eh_frame:00000000000247A6                 db    0
.eh_frame:00000000000247A7                 db    0
.eh_frame:00000000000247A8                 db  34h ; 4
.eh_frame:00000000000247A9                 db    0
.eh_frame:00000000000247AA                 db    0
.eh_frame:00000000000247AB                 db    0
.eh_frame:00000000000247AC                 db  84h
.eh_frame:00000000000247AD                 db  0Dh
.eh_frame:00000000000247AE                 db    0
.eh_frame:00000000000247AF                 db    0
.eh_frame:00000000000247B0                 db 0E0h
.eh_frame:00000000000247B1                 db  40h ; @
.eh_frame:00000000000247B2                 db 0FEh
.eh_frame:00000000000247B3                 db 0FFh
.eh_frame:00000000000247B4                 db  3Eh ; >
.eh_frame:00000000000247B5                 db    2
.eh_frame:00000000000247B6                 db    0
.eh_frame:00000000000247B7                 db    0
.eh_frame:00000000000247B8                 db    0
.eh_frame:00000000000247B9                 db  42h ; B
.eh_frame:00000000000247BA                 db  0Eh
.eh_frame:00000000000247BB                 db  10h
.eh_frame:00000000000247BC                 db  8Ch
.eh_frame:00000000000247BD                 db    2
.eh_frame:00000000000247BE                 db  41h ; A
.eh_frame:00000000000247BF                 db  0Eh
.eh_frame:00000000000247C0                 db  18h
.eh_frame:00000000000247C1                 db  86h
.eh_frame:00000000000247C2                 db    3
.eh_frame:00000000000247C3                 db  44h ; D
.eh_frame:00000000000247C4                 db  0Eh
.eh_frame:00000000000247C5                 db  20h
.eh_frame:00000000000247C6                 db  83h
.eh_frame:00000000000247C7                 db    4
.eh_frame:00000000000247C8                 db  44h ; D
.eh_frame:00000000000247C9                 db  0Eh
.eh_frame:00000000000247CA                 db  80h
.eh_frame:00000000000247CB                 db    1
.eh_frame:00000000000247CC                 db    3
.eh_frame:00000000000247CD                 db  91h
.eh_frame:00000000000247CE                 db    1
.eh_frame:00000000000247CF                 db  0Ah
.eh_frame:00000000000247D0                 db  0Eh
.eh_frame:00000000000247D1                 db  20h
.eh_frame:00000000000247D2                 db  41h ; A
.eh_frame:00000000000247D3                 db  0Eh
.eh_frame:00000000000247D4                 db  18h
.eh_frame:00000000000247D5                 db  41h ; A
.eh_frame:00000000000247D6                 db  0Eh
.eh_frame:00000000000247D7                 db  10h
.eh_frame:00000000000247D8                 db  42h ; B
.eh_frame:00000000000247D9                 db  0Eh
.eh_frame:00000000000247DA                 db    8
.eh_frame:00000000000247DB                 db  48h ; H
.eh_frame:00000000000247DC                 db  0Bh
.eh_frame:00000000000247DD                 db    0
.eh_frame:00000000000247DE                 db    0
.eh_frame:00000000000247DF                 db    0
.eh_frame:00000000000247E0                 db  38h ; 8
.eh_frame:00000000000247E1                 db    0
.eh_frame:00000000000247E2                 db    0
.eh_frame:00000000000247E3                 db    0
.eh_frame:00000000000247E4                 db 0BCh
.eh_frame:00000000000247E5                 db  0Dh
.eh_frame:00000000000247E6                 db    0
.eh_frame:00000000000247E7                 db    0
.eh_frame:00000000000247E8                 db 0E8h
.eh_frame:00000000000247E9                 db  42h ; B
.eh_frame:00000000000247EA                 db 0FEh
.eh_frame:00000000000247EB                 db 0FFh
.eh_frame:00000000000247EC                 db  84h
.eh_frame:00000000000247ED                 db    2
.eh_frame:00000000000247EE                 db    0
.eh_frame:00000000000247EF                 db    0
.eh_frame:00000000000247F0                 db    0
.eh_frame:00000000000247F1                 db  42h ; B
.eh_frame:00000000000247F2                 db  0Eh
.eh_frame:00000000000247F3                 db  10h
.eh_frame:00000000000247F4                 db  8Dh
.eh_frame:00000000000247F5                 db    2
.eh_frame:00000000000247F6                 db  42h ; B
.eh_frame:00000000000247F7                 db  0Eh
.eh_frame:00000000000247F8                 db  18h
.eh_frame:00000000000247F9                 db  8Ch
.eh_frame:00000000000247FA                 db    3
.eh_frame:00000000000247FB                 db  41h ; A
.eh_frame:00000000000247FC                 db  0Eh
.eh_frame:00000000000247FD                 db  20h
.eh_frame:00000000000247FE                 db  86h
.eh_frame:00000000000247FF                 db    4
.eh_frame:0000000000024800                 db  41h ; A
.eh_frame:0000000000024801                 db  0Eh
.eh_frame:0000000000024802                 db  28h ; (
.eh_frame:0000000000024803                 db  83h
.eh_frame:0000000000024804                 db    5
.eh_frame:0000000000024805                 db  44h ; D
.eh_frame:0000000000024806                 db  0Eh
.eh_frame:0000000000024807                 db  40h ; @
.eh_frame:0000000000024808                 db    2
.eh_frame:0000000000024809                 db  5Ah ; Z
.eh_frame:000000000002480A                 db  0Ah
.eh_frame:000000000002480B                 db  0Eh
.eh_frame:000000000002480C                 db  28h ; (
.eh_frame:000000000002480D                 db  41h ; A
.eh_frame:000000000002480E                 db  0Eh
.eh_frame:000000000002480F                 db  20h
.eh_frame:0000000000024810                 db  41h ; A
.eh_frame:0000000000024811                 db  0Eh
.eh_frame:0000000000024812                 db  18h
.eh_frame:0000000000024813                 db  42h ; B
.eh_frame:0000000000024814                 db  0Eh
.eh_frame:0000000000024815                 db  10h
.eh_frame:0000000000024816                 db  42h ; B
.eh_frame:0000000000024817                 db  0Eh
.eh_frame:0000000000024818                 db    8
.eh_frame:0000000000024819                 db  46h ; F
.eh_frame:000000000002481A                 db  0Bh
.eh_frame:000000000002481B                 db    0
.eh_frame:000000000002481C                 db  20h
.eh_frame:000000000002481D                 db    0
.eh_frame:000000000002481E                 db    0
.eh_frame:000000000002481F                 db    0
.eh_frame:0000000000024820                 db 0F8h
.eh_frame:0000000000024821                 db  0Dh
.eh_frame:0000000000024822                 db    0
.eh_frame:0000000000024823                 db    0
.eh_frame:0000000000024824                 db  3Ch ; <
.eh_frame:0000000000024825                 db  45h ; E
.eh_frame:0000000000024826                 db 0FEh
.eh_frame:0000000000024827                 db 0FFh
.eh_frame:0000000000024828                 db  59h ; Y
.eh_frame:0000000000024829                 db    0
.eh_frame:000000000002482A                 db    0
.eh_frame:000000000002482B                 db    0
.eh_frame:000000000002482C                 db    0
.eh_frame:000000000002482D                 db  41h ; A
.eh_frame:000000000002482E                 db  0Eh
.eh_frame:000000000002482F                 db  10h
.eh_frame:0000000000024830                 db  83h
.eh_frame:0000000000024831                 db    2
.eh_frame:0000000000024832                 db  47h ; G
.eh_frame:0000000000024833                 db  0Eh
.eh_frame:0000000000024834                 db  20h
.eh_frame:0000000000024835                 db  7Ch ; |
.eh_frame:0000000000024836                 db  0Ah
.eh_frame:0000000000024837                 db  0Eh
.eh_frame:0000000000024838                 db  10h
.eh_frame:0000000000024839                 db  41h ; A
.eh_frame:000000000002483A                 db  0Eh
.eh_frame:000000000002483B                 db    8
.eh_frame:000000000002483C                 db  4Bh ; K
.eh_frame:000000000002483D                 db  0Bh
.eh_frame:000000000002483E                 db    0
.eh_frame:000000000002483F                 db    0
.eh_frame:0000000000024840                 db  34h ; 4
.eh_frame:0000000000024841                 db    0
.eh_frame:0000000000024842                 db    0
.eh_frame:0000000000024843                 db    0
.eh_frame:0000000000024844                 db  1Ch
.eh_frame:0000000000024845                 db  0Eh
.eh_frame:0000000000024846                 db    0
.eh_frame:0000000000024847                 db    0
.eh_frame:0000000000024848                 db  78h ; x
.eh_frame:0000000000024849                 db  45h ; E
.eh_frame:000000000002484A                 db 0FEh
.eh_frame:000000000002484B                 db 0FFh
.eh_frame:000000000002484C                 db    3
.eh_frame:000000000002484D                 db    2
.eh_frame:000000000002484E                 db    0
.eh_frame:000000000002484F                 db    0
.eh_frame:0000000000024850                 db    0
.eh_frame:0000000000024851                 db  42h ; B
.eh_frame:0000000000024852                 db  0Eh
.eh_frame:0000000000024853                 db  10h
.eh_frame:0000000000024854                 db  8Ch
.eh_frame:0000000000024855                 db    2
.eh_frame:0000000000024856                 db  41h ; A
.eh_frame:0000000000024857                 db  0Eh
.eh_frame:0000000000024858                 db  18h
.eh_frame:0000000000024859                 db  86h
.eh_frame:000000000002485A                 db    3
.eh_frame:000000000002485B                 db  46h ; F
.eh_frame:000000000002485C                 db  0Eh
.eh_frame:000000000002485D                 db  20h
.eh_frame:000000000002485E                 db  83h
.eh_frame:000000000002485F                 db    4
.eh_frame:0000000000024860                 db  47h ; G
.eh_frame:0000000000024861                 db  0Eh
.eh_frame:0000000000024862                 db  30h ; 0
.eh_frame:0000000000024863                 db    2
.eh_frame:0000000000024864                 db  4Ah ; J
.eh_frame:0000000000024865                 db  0Ah
.eh_frame:0000000000024866                 db  0Eh
.eh_frame:0000000000024867                 db  20h
.eh_frame:0000000000024868                 db  41h ; A
.eh_frame:0000000000024869                 db  0Eh
.eh_frame:000000000002486A                 db  18h
.eh_frame:000000000002486B                 db  41h ; A
.eh_frame:000000000002486C                 db  0Eh
.eh_frame:000000000002486D                 db  10h
.eh_frame:000000000002486E                 db  42h ; B
.eh_frame:000000000002486F                 db  0Eh
.eh_frame:0000000000024870                 db    8
.eh_frame:0000000000024871                 db  42h ; B
.eh_frame:0000000000024872                 db  0Bh
.eh_frame:0000000000024873                 db    0
.eh_frame:0000000000024874                 db    0
.eh_frame:0000000000024875                 db    0
.eh_frame:0000000000024876                 db    0
.eh_frame:0000000000024877                 db    0
.eh_frame:0000000000024878                 db  10h
.eh_frame:0000000000024879                 db    0
.eh_frame:000000000002487A                 db    0
.eh_frame:000000000002487B                 db    0
.eh_frame:000000000002487C                 db  54h ; T
.eh_frame:000000000002487D                 db  0Eh
.eh_frame:000000000002487E                 db    0
.eh_frame:000000000002487F                 db    0
.eh_frame:0000000000024880                 db  50h ; P
.eh_frame:0000000000024881                 db  47h ; G
.eh_frame:0000000000024882                 db 0FEh
.eh_frame:0000000000024883                 db 0FFh
.eh_frame:0000000000024884                 db 0C7h
.eh_frame:0000000000024885                 db    0
.eh_frame:0000000000024886                 db    0
.eh_frame:0000000000024887                 db    0
.eh_frame:0000000000024888                 db    0
.eh_frame:0000000000024889                 db    0
.eh_frame:000000000002488A                 db    0
.eh_frame:000000000002488B                 db    0
.eh_frame:000000000002488C                 db 0A4h
.eh_frame:000000000002488D                 db    0
.eh_frame:000000000002488E                 db    0
.eh_frame:000000000002488F                 db    0
.eh_frame:0000000000024890                 db  68h ; h
.eh_frame:0000000000024891                 db  0Eh
.eh_frame:0000000000024892                 db    0
.eh_frame:0000000000024893                 db    0
.eh_frame:0000000000024894                 db  0Ch
.eh_frame:0000000000024895                 db  48h ; H
.eh_frame:0000000000024896                 db 0FEh
.eh_frame:0000000000024897                 db 0FFh
.eh_frame:0000000000024898                 db    7
.eh_frame:0000000000024899                 db  0Ah
.eh_frame:000000000002489A                 db    0
.eh_frame:000000000002489B                 db    0
.eh_frame:000000000002489C                 db    0
.eh_frame:000000000002489D                 db  42h ; B
.eh_frame:000000000002489E                 db  0Eh
.eh_frame:000000000002489F                 db  10h
.eh_frame:00000000000248A0                 db  8Fh
.eh_frame:00000000000248A1                 db    2
.eh_frame:00000000000248A2                 db  42h ; B
.eh_frame:00000000000248A3                 db  0Eh
.eh_frame:00000000000248A4                 db  18h
.eh_frame:00000000000248A5                 db  8Eh
.eh_frame:00000000000248A6                 db    3
.eh_frame:00000000000248A7                 db  44h ; D
.eh_frame:00000000000248A8                 db  0Eh
.eh_frame:00000000000248A9                 db  20h
.eh_frame:00000000000248AA                 db  8Dh
.eh_frame:00000000000248AB                 db    4
.eh_frame:00000000000248AC                 db  42h ; B
.eh_frame:00000000000248AD                 db  0Eh
.eh_frame:00000000000248AE                 db  28h ; (
.eh_frame:00000000000248AF                 db  8Ch
.eh_frame:00000000000248B0                 db    5
.eh_frame:00000000000248B1                 db  44h ; D
.eh_frame:00000000000248B2                 db  0Eh
.eh_frame:00000000000248B3                 db  30h ; 0
.eh_frame:00000000000248B4                 db  86h
.eh_frame:00000000000248B5                 db    6
.eh_frame:00000000000248B6                 db  41h ; A
.eh_frame:00000000000248B7                 db  0Eh
.eh_frame:00000000000248B8                 db  38h ; 8
.eh_frame:00000000000248B9                 db  83h
.eh_frame:00000000000248BA                 db    7
.eh_frame:00000000000248BB                 db  54h ; T
.eh_frame:00000000000248BC                 db  0Eh
.eh_frame:00000000000248BD                 db 0D0h
.eh_frame:00000000000248BE                 db    1
.eh_frame:00000000000248BF                 db    3
.eh_frame:00000000000248C0                 db  7Eh ; ~
.eh_frame:00000000000248C1                 db    1
.eh_frame:00000000000248C2                 db  0Eh
.eh_frame:00000000000248C3                 db 0E0h
.eh_frame:00000000000248C4                 db    1
.eh_frame:00000000000248C5                 db  6Eh ; n
.eh_frame:00000000000248C6                 db  0Eh
.eh_frame:00000000000248C7                 db 0D8h
.eh_frame:00000000000248C8                 db    1
.eh_frame:00000000000248C9                 db  41h ; A
.eh_frame:00000000000248CA                 db  0Eh
.eh_frame:00000000000248CB                 db 0D0h
.eh_frame:00000000000248CC                 db    1
.eh_frame:00000000000248CD                 db    3
.eh_frame:00000000000248CE                 db  40h ; @
.eh_frame:00000000000248CF                 db    1
.eh_frame:00000000000248D0                 db  0Eh
.eh_frame:00000000000248D1                 db 0E0h
.eh_frame:00000000000248D2                 db    1
.eh_frame:00000000000248D3                 db  75h ; u
.eh_frame:00000000000248D4                 db  0Eh
.eh_frame:00000000000248D5                 db 0D8h
.eh_frame:00000000000248D6                 db    1
.eh_frame:00000000000248D7                 db  41h ; A
.eh_frame:00000000000248D8                 db  0Eh
.eh_frame:00000000000248D9                 db 0D0h
.eh_frame:00000000000248DA                 db    1
.eh_frame:00000000000248DB                 db    2
.eh_frame:00000000000248DC                 db 0EAh
.eh_frame:00000000000248DD                 db  0Ah
.eh_frame:00000000000248DE                 db  0Eh
.eh_frame:00000000000248DF                 db  38h ; 8
.eh_frame:00000000000248E0                 db  41h ; A
.eh_frame:00000000000248E1                 db  0Eh
.eh_frame:00000000000248E2                 db  30h ; 0
.eh_frame:00000000000248E3                 db  41h ; A
.eh_frame:00000000000248E4                 db  0Eh
.eh_frame:00000000000248E5                 db  28h ; (
.eh_frame:00000000000248E6                 db  42h ; B
.eh_frame:00000000000248E7                 db  0Eh
.eh_frame:00000000000248E8                 db  20h
.eh_frame:00000000000248E9                 db  42h ; B
.eh_frame:00000000000248EA                 db  0Eh
.eh_frame:00000000000248EB                 db  18h
.eh_frame:00000000000248EC                 db  42h ; B
.eh_frame:00000000000248ED                 db  0Eh
.eh_frame:00000000000248EE                 db  10h
.eh_frame:00000000000248EF                 db  42h ; B
.eh_frame:00000000000248F0                 db  0Eh
.eh_frame:00000000000248F1                 db    8
.eh_frame:00000000000248F2                 db  46h ; F
.eh_frame:00000000000248F3                 db  0Bh
.eh_frame:00000000000248F4                 db    3
.eh_frame:00000000000248F5                 db  2Ch ; ,
.eh_frame:00000000000248F6                 db    1
.eh_frame:00000000000248F7                 db  0Eh
.eh_frame:00000000000248F8                 db 0E0h
.eh_frame:00000000000248F9                 db    1
.eh_frame:00000000000248FA                 db  52h ; R
.eh_frame:00000000000248FB                 db  0Eh
.eh_frame:00000000000248FC                 db 0D8h
.eh_frame:00000000000248FD                 db    1
.eh_frame:00000000000248FE                 db  41h ; A
.eh_frame:00000000000248FF                 db  0Eh
.eh_frame:0000000000024900                 db 0D0h
.eh_frame:0000000000024901                 db    1
.eh_frame:0000000000024902                 db  55h ; U
.eh_frame:0000000000024903                 db  0Eh
.eh_frame:0000000000024904                 db 0E0h
.eh_frame:0000000000024905                 db    1
.eh_frame:0000000000024906                 db  4Dh ; M
.eh_frame:0000000000024907                 db  0Eh
.eh_frame:0000000000024908                 db 0D8h
.eh_frame:0000000000024909                 db    1
.eh_frame:000000000002490A                 db  42h ; B
.eh_frame:000000000002490B                 db  0Eh
.eh_frame:000000000002490C                 db 0D0h
.eh_frame:000000000002490D                 db    1
.eh_frame:000000000002490E                 db    3
.eh_frame:000000000002490F                 db  51h ; Q
.eh_frame:0000000000024910                 db    1
.eh_frame:0000000000024911                 db  0Eh
.eh_frame:0000000000024912                 db 0E0h
.eh_frame:0000000000024913                 db    1
.eh_frame:0000000000024914                 db  77h ; w
.eh_frame:0000000000024915                 db  0Eh
.eh_frame:0000000000024916                 db 0D8h
.eh_frame:0000000000024917                 db    1
.eh_frame:0000000000024918                 db  41h ; A
.eh_frame:0000000000024919                 db  0Eh
.eh_frame:000000000002491A                 db 0D0h
.eh_frame:000000000002491B                 db    1
.eh_frame:000000000002491C                 db  5Dh ; ]
.eh_frame:000000000002491D                 db  0Eh
.eh_frame:000000000002491E                 db 0E0h
.eh_frame:000000000002491F                 db    1
.eh_frame:0000000000024920                 db  71h ; q
.eh_frame:0000000000024921                 db  0Eh
.eh_frame:0000000000024922                 db 0D8h
.eh_frame:0000000000024923                 db    1
.eh_frame:0000000000024924                 db  45h ; E
.eh_frame:0000000000024925                 db  0Eh
.eh_frame:0000000000024926                 db 0D0h
.eh_frame:0000000000024927                 db    1
.eh_frame:0000000000024928                 db  63h ; c
.eh_frame:0000000000024929                 db  0Eh
.eh_frame:000000000002492A                 db 0E0h
.eh_frame:000000000002492B                 db    1
.eh_frame:000000000002492C                 db  4Ch ; L
.eh_frame:000000000002492D                 db  0Eh
.eh_frame:000000000002492E                 db 0D8h
.eh_frame:000000000002492F                 db    1
.eh_frame:0000000000024930                 db  42h ; B
.eh_frame:0000000000024931                 db  0Eh
.eh_frame:0000000000024932                 db 0D0h
.eh_frame:0000000000024933                 db    1
.eh_frame:0000000000024934                 db  38h ; 8
.eh_frame:0000000000024935                 db    0
.eh_frame:0000000000024936                 db    0
.eh_frame:0000000000024937                 db    0
.eh_frame:0000000000024938                 db  10h
.eh_frame:0000000000024939                 db  0Fh
.eh_frame:000000000002493A                 db    0
.eh_frame:000000000002493B                 db    0
.eh_frame:000000000002493C                 db  74h ; t
.eh_frame:000000000002493D                 db  51h ; Q
.eh_frame:000000000002493E                 db 0FEh
.eh_frame:000000000002493F                 db 0FFh
.eh_frame:0000000000024940                 db 0E6h
.eh_frame:0000000000024941                 db    1
.eh_frame:0000000000024942                 db    0
.eh_frame:0000000000024943                 db    0
.eh_frame:0000000000024944                 db    0
.eh_frame:0000000000024945                 db  42h ; B
.eh_frame:0000000000024946                 db  0Eh
.eh_frame:0000000000024947                 db  10h
.eh_frame:0000000000024948                 db  8Dh
.eh_frame:0000000000024949                 db    2
.eh_frame:000000000002494A                 db  42h ; B
.eh_frame:000000000002494B                 db  0Eh
.eh_frame:000000000002494C                 db  18h
.eh_frame:000000000002494D                 db  8Ch
.eh_frame:000000000002494E                 db    3
.eh_frame:000000000002494F                 db  44h ; D
.eh_frame:0000000000024950                 db  0Eh
.eh_frame:0000000000024951                 db  20h
.eh_frame:0000000000024952                 db  86h
.eh_frame:0000000000024953                 db    4
.eh_frame:0000000000024954                 db  41h ; A
.eh_frame:0000000000024955                 db  0Eh
.eh_frame:0000000000024956                 db  28h ; (
.eh_frame:0000000000024957                 db  83h
.eh_frame:0000000000024958                 db    5
.eh_frame:0000000000024959                 db  4Ah ; J
.eh_frame:000000000002495A                 db  0Eh
.eh_frame:000000000002495B                 db  40h ; @
.eh_frame:000000000002495C                 db    2
.eh_frame:000000000002495D                 db  7Ah ; z
.eh_frame:000000000002495E                 db  0Ah
.eh_frame:000000000002495F                 db  0Eh
.eh_frame:0000000000024960                 db  28h ; (
.eh_frame:0000000000024961                 db  41h ; A
.eh_frame:0000000000024962                 db  0Eh
.eh_frame:0000000000024963                 db  20h
.eh_frame:0000000000024964                 db  41h ; A
.eh_frame:0000000000024965                 db  0Eh
.eh_frame:0000000000024966                 db  18h
.eh_frame:0000000000024967                 db  42h ; B
.eh_frame:0000000000024968                 db  0Eh
.eh_frame:0000000000024969                 db  10h
.eh_frame:000000000002496A                 db  42h ; B
.eh_frame:000000000002496B                 db  0Eh
.eh_frame:000000000002496C                 db    8
.eh_frame:000000000002496D                 db  45h ; E
.eh_frame:000000000002496E                 db  0Bh
.eh_frame:000000000002496F                 db    0
.eh_frame:0000000000024970                 db  10h
.eh_frame:0000000000024971                 db    0
.eh_frame:0000000000024972                 db    0
.eh_frame:0000000000024973                 db    0
.eh_frame:0000000000024974                 db  4Ch ; L
.eh_frame:0000000000024975                 db  0Fh
.eh_frame:0000000000024976                 db    0
.eh_frame:0000000000024977                 db    0
.eh_frame:0000000000024978                 db  28h ; (
.eh_frame:0000000000024979                 db  53h ; S
.eh_frame:000000000002497A                 db 0FEh
.eh_frame:000000000002497B                 db 0FFh
.eh_frame:000000000002497C                 db  0Ch
.eh_frame:000000000002497D                 db    0
.eh_frame:000000000002497E                 db    0
.eh_frame:000000000002497F                 db    0
.eh_frame:0000000000024980                 db    0
.eh_frame:0000000000024981                 db    0
.eh_frame:0000000000024982                 db    0
.eh_frame:0000000000024983                 db    0
.eh_frame:0000000000024984                 db  10h
.eh_frame:0000000000024985                 db    0
.eh_frame:0000000000024986                 db    0
.eh_frame:0000000000024987                 db    0
.eh_frame:0000000000024988                 db  60h ; `
.eh_frame:0000000000024989                 db  0Fh
.eh_frame:000000000002498A                 db    0
.eh_frame:000000000002498B                 db    0
.eh_frame:000000000002498C                 db  24h ; $
.eh_frame:000000000002498D                 db  53h ; S
.eh_frame:000000000002498E                 db 0FEh
.eh_frame:000000000002498F                 db 0FFh
.eh_frame:0000000000024990                 db  0Ah
.eh_frame:0000000000024991                 db    0
.eh_frame:0000000000024992                 db    0
.eh_frame:0000000000024993                 db    0
.eh_frame:0000000000024994                 db    0
.eh_frame:0000000000024995                 db    0
.eh_frame:0000000000024996                 db    0
.eh_frame:0000000000024997                 db    0
.eh_frame:0000000000024998                 db  28h ; (
.eh_frame:0000000000024999                 db    0
.eh_frame:000000000002499A                 db    0
.eh_frame:000000000002499B                 db    0
.eh_frame:000000000002499C                 db  74h ; t
.eh_frame:000000000002499D                 db  0Fh
.eh_frame:000000000002499E                 db    0
.eh_frame:000000000002499F                 db    0
.eh_frame:00000000000249A0                 db  20h
.eh_frame:00000000000249A1                 db  53h ; S
.eh_frame:00000000000249A2                 db 0FEh
.eh_frame:00000000000249A3                 db 0FFh
.eh_frame:00000000000249A4                 db  6Ch ; l
.eh_frame:00000000000249A5                 db    0
.eh_frame:00000000000249A6                 db    0
.eh_frame:00000000000249A7                 db    0
.eh_frame:00000000000249A8                 db    0
.eh_frame:00000000000249A9                 db  41h ; A
.eh_frame:00000000000249AA                 db  0Eh
.eh_frame:00000000000249AB                 db  10h
.eh_frame:00000000000249AC                 db  86h
.eh_frame:00000000000249AD                 db    2
.eh_frame:00000000000249AE                 db  41h ; A
.eh_frame:00000000000249AF                 db  0Eh
.eh_frame:00000000000249B0                 db  18h
.eh_frame:00000000000249B1                 db  83h
.eh_frame:00000000000249B2                 db    3
.eh_frame:00000000000249B3                 db  4Ch ; L
.eh_frame:00000000000249B4                 db  0Eh
.eh_frame:00000000000249B5                 db  20h
.eh_frame:00000000000249B6                 db    2
.eh_frame:00000000000249B7                 db  46h ; F
.eh_frame:00000000000249B8                 db  0Ah
.eh_frame:00000000000249B9                 db  0Eh
.eh_frame:00000000000249BA                 db  18h
.eh_frame:00000000000249BB                 db  44h ; D
.eh_frame:00000000000249BC                 db  0Eh
.eh_frame:00000000000249BD                 db  10h
.eh_frame:00000000000249BE                 db  41h ; A
.eh_frame:00000000000249BF                 db  0Eh
.eh_frame:00000000000249C0                 db    8
.eh_frame:00000000000249C1                 db  47h ; G
.eh_frame:00000000000249C2                 db  0Bh
.eh_frame:00000000000249C3                 db    0
.eh_frame:00000000000249C4                 db  18h
.eh_frame:00000000000249C5                 db    0
.eh_frame:00000000000249C6                 db    0
.eh_frame:00000000000249C7                 db    0
.eh_frame:00000000000249C8                 db 0A0h
.eh_frame:00000000000249C9                 db  0Fh
.eh_frame:00000000000249CA                 db    0
.eh_frame:00000000000249CB                 db    0
.eh_frame:00000000000249CC                 db  64h ; d
.eh_frame:00000000000249CD                 db  53h ; S
.eh_frame:00000000000249CE                 db 0FEh
.eh_frame:00000000000249CF                 db 0FFh
.eh_frame:00000000000249D0                 db  1Eh
.eh_frame:00000000000249D1                 db    0
.eh_frame:00000000000249D2                 db    0
.eh_frame:00000000000249D3                 db    0
.eh_frame:00000000000249D4                 db    0
.eh_frame:00000000000249D5                 db  41h ; A
.eh_frame:00000000000249D6                 db  0Eh
.eh_frame:00000000000249D7                 db  10h
.eh_frame:00000000000249D8                 db  83h
.eh_frame:00000000000249D9                 db    2
.eh_frame:00000000000249DA                 db  58h ; X
.eh_frame:00000000000249DB                 db  0Eh
.eh_frame:00000000000249DC                 db    8
.eh_frame:00000000000249DD                 db    0
.eh_frame:00000000000249DE                 db    0
.eh_frame:00000000000249DF                 db    0
.eh_frame:00000000000249E0                 db  4Ch ; L
.eh_frame:00000000000249E1                 db    0
.eh_frame:00000000000249E2                 db    0
.eh_frame:00000000000249E3                 db    0
.eh_frame:00000000000249E4                 db 0BCh
.eh_frame:00000000000249E5                 db  0Fh
.eh_frame:00000000000249E6                 db    0
.eh_frame:00000000000249E7                 db    0
.eh_frame:00000000000249E8                 db  68h ; h
.eh_frame:00000000000249E9                 db  53h ; S
.eh_frame:00000000000249EA                 db 0FEh
.eh_frame:00000000000249EB                 db 0FFh
.eh_frame:00000000000249EC                 db  9Eh
.eh_frame:00000000000249ED                 db    0
.eh_frame:00000000000249EE                 db    0
.eh_frame:00000000000249EF                 db    0
.eh_frame:00000000000249F0                 db    0
.eh_frame:00000000000249F1                 db  41h ; A
.eh_frame:00000000000249F2                 db  0Eh
.eh_frame:00000000000249F3                 db  10h
.eh_frame:00000000000249F4                 db  86h
.eh_frame:00000000000249F5                 db    2
.eh_frame:00000000000249F6                 db  41h ; A
.eh_frame:00000000000249F7                 db  0Eh
.eh_frame:00000000000249F8                 db  18h
.eh_frame:00000000000249F9                 db  83h
.eh_frame:00000000000249FA                 db    3
.eh_frame:00000000000249FB                 db  47h ; G
.eh_frame:00000000000249FC                 db  0Eh
.eh_frame:00000000000249FD                 db  30h ; 0
.eh_frame:00000000000249FE                 db  73h ; s
.eh_frame:00000000000249FF                 db  0Ah
.eh_frame:0000000000024A00                 db  0Eh
.eh_frame:0000000000024A01                 db  18h
.eh_frame:0000000000024A02                 db  41h ; A
.eh_frame:0000000000024A03                 db  0Eh
.eh_frame:0000000000024A04                 db  10h
.eh_frame:0000000000024A05                 db  41h ; A
.eh_frame:0000000000024A06                 db  0Eh
.eh_frame:0000000000024A07                 db    8
.eh_frame:0000000000024A08                 db  42h ; B
.eh_frame:0000000000024A09                 db  0Bh
.eh_frame:0000000000024A0A                 db  48h ; H
.eh_frame:0000000000024A0B                 db  0Ah
.eh_frame:0000000000024A0C                 db  0Eh
.eh_frame:0000000000024A0D                 db  18h
.eh_frame:0000000000024A0E                 db  41h ; A
.eh_frame:0000000000024A0F                 db  0Eh
.eh_frame:0000000000024A10                 db  10h
.eh_frame:0000000000024A11                 db  41h ; A
.eh_frame:0000000000024A12                 db  0Eh
.eh_frame:0000000000024A13                 db    8
.eh_frame:0000000000024A14                 db  46h ; F
.eh_frame:0000000000024A15                 db  0Bh
.eh_frame:0000000000024A16                 db  5Ch ; \
.eh_frame:0000000000024A17                 db  0Ah
.eh_frame:0000000000024A18                 db  0Eh
.eh_frame:0000000000024A19                 db  18h
.eh_frame:0000000000024A1A                 db  41h ; A
.eh_frame:0000000000024A1B                 db  0Eh
.eh_frame:0000000000024A1C                 db  10h
.eh_frame:0000000000024A1D                 db  41h ; A
.eh_frame:0000000000024A1E                 db  0Eh
.eh_frame:0000000000024A1F                 db    8
.eh_frame:0000000000024A20                 db  42h ; B
.eh_frame:0000000000024A21                 db  0Bh
.eh_frame:0000000000024A22                 db  64h ; d
.eh_frame:0000000000024A23                 db  0Eh
.eh_frame:0000000000024A24                 db  18h
.eh_frame:0000000000024A25                 db  48h ; H
.eh_frame:0000000000024A26                 db  0Eh
.eh_frame:0000000000024A27                 db  10h
.eh_frame:0000000000024A28                 db  41h ; A
.eh_frame:0000000000024A29                 db  0Eh
.eh_frame:0000000000024A2A                 db    8
.eh_frame:0000000000024A2B                 db    0
.eh_frame:0000000000024A2C                 db    0
.eh_frame:0000000000024A2D                 db    0
.eh_frame:0000000000024A2E                 db    0
.eh_frame:0000000000024A2F                 db    0
.eh_frame:0000000000024A30                 db  14h
.eh_frame:0000000000024A31                 db    0
.eh_frame:0000000000024A32                 db    0
.eh_frame:0000000000024A33                 db    0
.eh_frame:0000000000024A34                 db  0Ch
.eh_frame:0000000000024A35                 db  10h
.eh_frame:0000000000024A36                 db    0
.eh_frame:0000000000024A37                 db    0
.eh_frame:0000000000024A38                 db 0B8h
.eh_frame:0000000000024A39                 db  53h ; S
.eh_frame:0000000000024A3A                 db 0FEh
.eh_frame:0000000000024A3B                 db 0FFh
.eh_frame:0000000000024A3C                 db  9Ch
.eh_frame:0000000000024A3D                 db    0
.eh_frame:0000000000024A3E                 db    0
.eh_frame:0000000000024A3F                 db    0
.eh_frame:0000000000024A40                 db    0
.eh_frame:0000000000024A41                 db    0
.eh_frame:0000000000024A42                 db    0
.eh_frame:0000000000024A43                 db    0
.eh_frame:0000000000024A44                 db    0
.eh_frame:0000000000024A45                 db    0
.eh_frame:0000000000024A46                 db    0
.eh_frame:0000000000024A47                 db    0
.eh_frame:0000000000024A48                 db  1Ch
.eh_frame:0000000000024A49                 db    0
.eh_frame:0000000000024A4A                 db    0
.eh_frame:0000000000024A4B                 db    0
.eh_frame:0000000000024A4C                 db  24h ; $
.eh_frame:0000000000024A4D                 db  10h
.eh_frame:0000000000024A4E                 db    0
.eh_frame:0000000000024A4F                 db    0
.eh_frame:0000000000024A50                 db  40h ; @
.eh_frame:0000000000024A51                 db  54h ; T
.eh_frame:0000000000024A52                 db 0FEh
.eh_frame:0000000000024A53                 db 0FFh
.eh_frame:0000000000024A54                 db  21h ; !
.eh_frame:0000000000024A55                 db    0
.eh_frame:0000000000024A56                 db    0
.eh_frame:0000000000024A57                 db    0
.eh_frame:0000000000024A58                 db    0
.eh_frame:0000000000024A59                 db  41h ; A
.eh_frame:0000000000024A5A                 db  0Eh
.eh_frame:0000000000024A5B                 db  10h
.eh_frame:0000000000024A5C                 db  83h
.eh_frame:0000000000024A5D                 db    2
.eh_frame:0000000000024A5E                 db  4Ch ; L
.eh_frame:0000000000024A5F                 db  0Ah
.eh_frame:0000000000024A60                 db  0Eh
.eh_frame:0000000000024A61                 db    8
.eh_frame:0000000000024A62                 db  43h ; C
.eh_frame:0000000000024A63                 db  0Bh
.eh_frame:0000000000024A64                 db  50h ; P
.eh_frame:0000000000024A65                 db  0Eh
.eh_frame:0000000000024A66                 db    8
.eh_frame:0000000000024A67                 db    0
.eh_frame:0000000000024A68                 db  28h ; (
.eh_frame:0000000000024A69                 db    0
.eh_frame:0000000000024A6A                 db    0
.eh_frame:0000000000024A6B                 db    0
.eh_frame:0000000000024A6C                 db  44h ; D
.eh_frame:0000000000024A6D                 db  10h
.eh_frame:0000000000024A6E                 db    0
.eh_frame:0000000000024A6F                 db    0
.eh_frame:0000000000024A70                 db  50h ; P
.eh_frame:0000000000024A71                 db  54h ; T
.eh_frame:0000000000024A72                 db 0FEh
.eh_frame:0000000000024A73                 db 0FFh
.eh_frame:0000000000024A74                 db  56h ; V
.eh_frame:0000000000024A75                 db    0
.eh_frame:0000000000024A76                 db    0
.eh_frame:0000000000024A77                 db    0
.eh_frame:0000000000024A78                 db    0
.eh_frame:0000000000024A79                 db  41h ; A
.eh_frame:0000000000024A7A                 db  0Eh
.eh_frame:0000000000024A7B                 db  10h
.eh_frame:0000000000024A7C                 db  86h
.eh_frame:0000000000024A7D                 db    2
.eh_frame:0000000000024A7E                 db  41h ; A
.eh_frame:0000000000024A7F                 db  0Eh
.eh_frame:0000000000024A80                 db  18h
.eh_frame:0000000000024A81                 db  83h
.eh_frame:0000000000024A82                 db    3
.eh_frame:0000000000024A83                 db  4Eh ; N
.eh_frame:0000000000024A84                 db  0Eh
.eh_frame:0000000000024A85                 db  20h
.eh_frame:0000000000024A86                 db  68h ; h
.eh_frame:0000000000024A87                 db  0Ah
.eh_frame:0000000000024A88                 db  0Eh
.eh_frame:0000000000024A89                 db  18h
.eh_frame:0000000000024A8A                 db  41h ; A
.eh_frame:0000000000024A8B                 db  0Eh
.eh_frame:0000000000024A8C                 db  10h
.eh_frame:0000000000024A8D                 db  41h ; A
.eh_frame:0000000000024A8E                 db  0Eh
.eh_frame:0000000000024A8F                 db    8
.eh_frame:0000000000024A90                 db  46h ; F
.eh_frame:0000000000024A91                 db  0Bh
.eh_frame:0000000000024A92                 db    0
.eh_frame:0000000000024A93                 db    0
.eh_frame:0000000000024A94                 db  10h
.eh_frame:0000000000024A95                 db    0
.eh_frame:0000000000024A96                 db    0
.eh_frame:0000000000024A97                 db    0
.eh_frame:0000000000024A98                 db  70h ; p
.eh_frame:0000000000024A99                 db  10h
.eh_frame:0000000000024A9A                 db    0
.eh_frame:0000000000024A9B                 db    0
.eh_frame:0000000000024A9C                 db  84h
.eh_frame:0000000000024A9D                 db  54h ; T
.eh_frame:0000000000024A9E                 db 0FEh
.eh_frame:0000000000024A9F                 db 0FFh
.eh_frame:0000000000024AA0                 db  1Dh
.eh_frame:0000000000024AA1                 db    0
.eh_frame:0000000000024AA2                 db    0
.eh_frame:0000000000024AA3                 db    0
.eh_frame:0000000000024AA4                 db    0
.eh_frame:0000000000024AA5                 db    0
.eh_frame:0000000000024AA6                 db    0
.eh_frame:0000000000024AA7                 db    0
.eh_frame:0000000000024AA8                 db  10h
.eh_frame:0000000000024AA9                 db    0
.eh_frame:0000000000024AAA                 db    0
.eh_frame:0000000000024AAB                 db    0
.eh_frame:0000000000024AAC                 db  84h
.eh_frame:0000000000024AAD                 db  10h
.eh_frame:0000000000024AAE                 db    0
.eh_frame:0000000000024AAF                 db    0
.eh_frame:0000000000024AB0                 db  70h ; p
.eh_frame:0000000000024AB1                 db 0DFh
.eh_frame:0000000000024AB2                 db 0FDh
.eh_frame:0000000000024AB3                 db 0FFh
.eh_frame:0000000000024AB4                 db  23h ; #
.eh_frame:0000000000024AB5                 db    0
.eh_frame:0000000000024AB6                 db    0
.eh_frame:0000000000024AB7                 db    0
.eh_frame:0000000000024AB8                 db    0
.eh_frame:0000000000024AB9                 db  59h ; Y
.eh_frame:0000000000024ABA                 db  0Eh
.eh_frame:0000000000024ABB                 db  10h
.eh_frame:0000000000024ABC                 db  48h ; H
.eh_frame:0000000000024ABD                 db    0
.eh_frame:0000000000024ABE                 db    0
.eh_frame:0000000000024ABF                 db    0
.eh_frame:0000000000024AC0                 db  98h
.eh_frame:0000000000024AC1                 db  10h
.eh_frame:0000000000024AC2                 db    0
.eh_frame:0000000000024AC3                 db    0
.eh_frame:0000000000024AC4                 db  7Ch ; |
.eh_frame:0000000000024AC5                 db  54h ; T
.eh_frame:0000000000024AC6                 db 0FEh
.eh_frame:0000000000024AC7                 db 0FFh
.eh_frame:0000000000024AC8                 db    3
.eh_frame:0000000000024AC9                 db    7
.eh_frame:0000000000024ACA                 db    0
.eh_frame:0000000000024ACB                 db    0
.eh_frame:0000000000024ACC                 db    0
.eh_frame:0000000000024ACD                 db  42h ; B
.eh_frame:0000000000024ACE                 db  0Eh
.eh_frame:0000000000024ACF                 db  10h
.eh_frame:0000000000024AD0                 db  8Fh
.eh_frame:0000000000024AD1                 db    2
.eh_frame:0000000000024AD2                 db  42h ; B
.eh_frame:0000000000024AD3                 db  0Eh
.eh_frame:0000000000024AD4                 db  18h
.eh_frame:0000000000024AD5                 db  8Eh
.eh_frame:0000000000024AD6                 db    3
.eh_frame:0000000000024AD7                 db  42h ; B
.eh_frame:0000000000024AD8                 db  0Eh
.eh_frame:0000000000024AD9                 db  20h
.eh_frame:0000000000024ADA                 db  8Dh
.eh_frame:0000000000024ADB                 db    4
.eh_frame:0000000000024ADC                 db  42h ; B
.eh_frame:0000000000024ADD                 db  0Eh
.eh_frame:0000000000024ADE                 db  28h ; (
.eh_frame:0000000000024ADF                 db  8Ch
.eh_frame:0000000000024AE0                 db    5
.eh_frame:0000000000024AE1                 db  41h ; A
.eh_frame:0000000000024AE2                 db  0Eh
.eh_frame:0000000000024AE3                 db  30h ; 0
.eh_frame:0000000000024AE4                 db  86h
.eh_frame:0000000000024AE5                 db    6
.eh_frame:0000000000024AE6                 db  41h ; A
.eh_frame:0000000000024AE7                 db  0Eh
.eh_frame:0000000000024AE8                 db  38h ; 8
.eh_frame:0000000000024AE9                 db  83h
.eh_frame:0000000000024AEA                 db    7
.eh_frame:0000000000024AEB                 db  47h ; G
.eh_frame:0000000000024AEC                 db  0Eh
.eh_frame:0000000000024AED                 db 0D0h
.eh_frame:0000000000024AEE                 db    1
.eh_frame:0000000000024AEF                 db    2
.eh_frame:0000000000024AF0                 db 0B5h
.eh_frame:0000000000024AF1                 db  0Ah
.eh_frame:0000000000024AF2                 db  0Eh
.eh_frame:0000000000024AF3                 db  38h ; 8
.eh_frame:0000000000024AF4                 db  41h ; A
.eh_frame:0000000000024AF5                 db  0Eh
.eh_frame:0000000000024AF6                 db  30h ; 0
.eh_frame:0000000000024AF7                 db  41h ; A
.eh_frame:0000000000024AF8                 db  0Eh
.eh_frame:0000000000024AF9                 db  28h ; (
.eh_frame:0000000000024AFA                 db  42h ; B
.eh_frame:0000000000024AFB                 db  0Eh
.eh_frame:0000000000024AFC                 db  20h
.eh_frame:0000000000024AFD                 db  42h ; B
.eh_frame:0000000000024AFE                 db  0Eh
.eh_frame:0000000000024AFF                 db  18h
.eh_frame:0000000000024B00                 db  42h ; B
.eh_frame:0000000000024B01                 db  0Eh
.eh_frame:0000000000024B02                 db  10h
.eh_frame:0000000000024B03                 db  42h ; B
.eh_frame:0000000000024B04                 db  0Eh
.eh_frame:0000000000024B05                 db    8
.eh_frame:0000000000024B06                 db  48h ; H
.eh_frame:0000000000024B07                 db  0Bh
.eh_frame:0000000000024B08                 db  1Ch
.eh_frame:0000000000024B09                 db    0
.eh_frame:0000000000024B0A                 db    0
.eh_frame:0000000000024B0B                 db    0
.eh_frame:0000000000024B0C                 db 0E4h
.eh_frame:0000000000024B0D                 db  10h
.eh_frame:0000000000024B0E                 db    0
.eh_frame:0000000000024B0F                 db    0
.eh_frame:0000000000024B10                 db  40h ; @
.eh_frame:0000000000024B11                 db  5Bh ; [
.eh_frame:0000000000024B12                 db 0FEh
.eh_frame:0000000000024B13                 db 0FFh
.eh_frame:0000000000024B14                 db  9Fh
.eh_frame:0000000000024B15                 db    0
.eh_frame:0000000000024B16                 db    0
.eh_frame:0000000000024B17                 db    0
.eh_frame:0000000000024B18                 db    0
.eh_frame:0000000000024B19                 db  44h ; D
.eh_frame:0000000000024B1A                 db  0Eh
.eh_frame:0000000000024B1B                 db  10h
.eh_frame:0000000000024B1C                 db  83h
.eh_frame:0000000000024B1D                 db    2
.eh_frame:0000000000024B1E                 db    2
.eh_frame:0000000000024B1F                 db  78h ; x
.eh_frame:0000000000024B20                 db  0Ah
.eh_frame:0000000000024B21                 db  0Eh
.eh_frame:0000000000024B22                 db    8
.eh_frame:0000000000024B23                 db  41h ; A
.eh_frame:0000000000024B24                 db  0Bh
.eh_frame:0000000000024B25                 db    0
.eh_frame:0000000000024B26                 db    0
.eh_frame:0000000000024B27                 db    0
.eh_frame:0000000000024B28                 db  40h ; @
.eh_frame:0000000000024B29                 db    0
.eh_frame:0000000000024B2A                 db    0
.eh_frame:0000000000024B2B                 db    0
.eh_frame:0000000000024B2C                 db    4
.eh_frame:0000000000024B2D                 db  11h
.eh_frame:0000000000024B2E                 db    0
.eh_frame:0000000000024B2F                 db    0
.eh_frame:0000000000024B30                 db 0C0h
.eh_frame:0000000000024B31                 db  5Bh ; [
.eh_frame:0000000000024B32                 db 0FEh
.eh_frame:0000000000024B33                 db 0FFh
.eh_frame:0000000000024B34                 db 0E7h
.eh_frame:0000000000024B35                 db    0
.eh_frame:0000000000024B36                 db    0
.eh_frame:0000000000024B37                 db    0
.eh_frame:0000000000024B38                 db    0
.eh_frame:0000000000024B39                 db  41h ; A
.eh_frame:0000000000024B3A                 db  0Eh
.eh_frame:0000000000024B3B                 db  10h
.eh_frame:0000000000024B3C                 db  86h
.eh_frame:0000000000024B3D                 db    2
.eh_frame:0000000000024B3E                 db  41h ; A
.eh_frame:0000000000024B3F                 db  0Eh
.eh_frame:0000000000024B40                 db  18h
.eh_frame:0000000000024B41                 db  83h
.eh_frame:0000000000024B42                 db    3
.eh_frame:0000000000024B43                 db  49h ; I
.eh_frame:0000000000024B44                 db  0Eh
.eh_frame:0000000000024B45                 db  20h
.eh_frame:0000000000024B46                 db  6Eh ; n
.eh_frame:0000000000024B47                 db  0Ah
.eh_frame:0000000000024B48                 db  0Eh
.eh_frame:0000000000024B49                 db  18h
.eh_frame:0000000000024B4A                 db  41h ; A
.eh_frame:0000000000024B4B                 db  0Eh
.eh_frame:0000000000024B4C                 db  10h
.eh_frame:0000000000024B4D                 db  41h ; A
.eh_frame:0000000000024B4E                 db  0Eh
.eh_frame:0000000000024B4F                 db    8
.eh_frame:0000000000024B50                 db  45h ; E
.eh_frame:0000000000024B51                 db  0Bh
.eh_frame:0000000000024B52                 db    2
.eh_frame:0000000000024B53                 db  4Ah ; J
.eh_frame:0000000000024B54                 db  0Ah
.eh_frame:0000000000024B55                 db  0Eh
.eh_frame:0000000000024B56                 db  18h
.eh_frame:0000000000024B57                 db  41h ; A
.eh_frame:0000000000024B58                 db  0Eh
.eh_frame:0000000000024B59                 db  10h
.eh_frame:0000000000024B5A                 db  41h ; A
.eh_frame:0000000000024B5B                 db  0Eh
.eh_frame:0000000000024B5C                 db    8
.eh_frame:0000000000024B5D                 db  44h ; D
.eh_frame:0000000000024B5E                 db  0Bh
.eh_frame:0000000000024B5F                 db    2
.eh_frame:0000000000024B60                 db  54h ; T
.eh_frame:0000000000024B61                 db  0Eh
.eh_frame:0000000000024B62                 db  18h
.eh_frame:0000000000024B63                 db  41h ; A
.eh_frame:0000000000024B64                 db  0Eh
.eh_frame:0000000000024B65                 db  10h
.eh_frame:0000000000024B66                 db  41h ; A
.eh_frame:0000000000024B67                 db  0Eh
.eh_frame:0000000000024B68                 db    8
.eh_frame:0000000000024B69                 db    0
.eh_frame:0000000000024B6A                 db    0
.eh_frame:0000000000024B6B                 db    0
.eh_frame:0000000000024B6C                 db  74h ; t
.eh_frame:0000000000024B6D                 db    0
.eh_frame:0000000000024B6E                 db    0
.eh_frame:0000000000024B6F                 db    0
.eh_frame:0000000000024B70                 db  48h ; H
.eh_frame:0000000000024B71                 db  11h
.eh_frame:0000000000024B72                 db    0
.eh_frame:0000000000024B73                 db    0
.eh_frame:0000000000024B74                 db  6Ch ; l
.eh_frame:0000000000024B75                 db  5Ch ; \
.eh_frame:0000000000024B76                 db 0FEh
.eh_frame:0000000000024B77                 db 0FFh
.eh_frame:0000000000024B78                 db  34h ; 4
.eh_frame:0000000000024B79                 db  12h
.eh_frame:0000000000024B7A                 db    0
.eh_frame:0000000000024B7B                 db    0
.eh_frame:0000000000024B7C                 db    0
.eh_frame:0000000000024B7D                 db  42h ; B
.eh_frame:0000000000024B7E                 db  0Eh
.eh_frame:0000000000024B7F                 db  10h
.eh_frame:0000000000024B80                 db  8Fh
.eh_frame:0000000000024B81                 db    2
.eh_frame:0000000000024B82                 db  42h ; B
.eh_frame:0000000000024B83                 db  0Eh
.eh_frame:0000000000024B84                 db  18h
.eh_frame:0000000000024B85                 db  8Eh
.eh_frame:0000000000024B86                 db    3
.eh_frame:0000000000024B87                 db  45h ; E
.eh_frame:0000000000024B88                 db  0Eh
.eh_frame:0000000000024B89                 db  20h
.eh_frame:0000000000024B8A                 db  8Dh
.eh_frame:0000000000024B8B                 db    4
.eh_frame:0000000000024B8C                 db  42h ; B
.eh_frame:0000000000024B8D                 db  0Eh
.eh_frame:0000000000024B8E                 db  28h ; (
.eh_frame:0000000000024B8F                 db  8Ch
.eh_frame:0000000000024B90                 db    5
.eh_frame:0000000000024B91                 db  44h ; D
.eh_frame:0000000000024B92                 db  0Eh
.eh_frame:0000000000024B93                 db  30h ; 0
.eh_frame:0000000000024B94                 db  86h
.eh_frame:0000000000024B95                 db    6
.eh_frame:0000000000024B96                 db  41h ; A
.eh_frame:0000000000024B97                 db  0Eh
.eh_frame:0000000000024B98                 db  38h ; 8
.eh_frame:0000000000024B99                 db  83h
.eh_frame:0000000000024B9A                 db    7
.eh_frame:0000000000024B9B                 db  53h ; S
.eh_frame:0000000000024B9C                 db  0Eh
.eh_frame:0000000000024B9D                 db 0F0h
.eh_frame:0000000000024B9E                 db    1
.eh_frame:0000000000024B9F                 db    3
.eh_frame:0000000000024BA0                 db  81h
.eh_frame:0000000000024BA1                 db  0Bh
.eh_frame:0000000000024BA2                 db  0Eh
.eh_frame:0000000000024BA3                 db 0F8h
.eh_frame:0000000000024BA4                 db    1
.eh_frame:0000000000024BA5                 db  4Ah ; J
.eh_frame:0000000000024BA6                 db  0Eh
.eh_frame:0000000000024BA7                 db  80h
.eh_frame:0000000000024BA8                 db    2
.eh_frame:0000000000024BA9                 db  44h ; D
.eh_frame:0000000000024BAA                 db  0Eh
.eh_frame:0000000000024BAB                 db  88h
.eh_frame:0000000000024BAC                 db    2
.eh_frame:0000000000024BAD                 db  45h ; E
.eh_frame:0000000000024BAE                 db  0Eh
.eh_frame:0000000000024BAF                 db  90h
.eh_frame:0000000000024BB0                 db    2
.eh_frame:0000000000024BB1                 db  5Fh ; _
.eh_frame:0000000000024BB2                 db  0Eh
.eh_frame:0000000000024BB3                 db 0F0h
.eh_frame:0000000000024BB4                 db    1
.eh_frame:0000000000024BB5                 db  64h ; d
.eh_frame:0000000000024BB6                 db  0Ah
.eh_frame:0000000000024BB7                 db  0Eh
.eh_frame:0000000000024BB8                 db  38h ; 8
.eh_frame:0000000000024BB9                 db  41h ; A
.eh_frame:0000000000024BBA                 db  0Eh
.eh_frame:0000000000024BBB                 db  30h ; 0
.eh_frame:0000000000024BBC                 db  41h ; A
.eh_frame:0000000000024BBD                 db  0Eh
.eh_frame:0000000000024BBE                 db  28h ; (
.eh_frame:0000000000024BBF                 db  42h ; B
.eh_frame:0000000000024BC0                 db  0Eh
.eh_frame:0000000000024BC1                 db  20h
.eh_frame:0000000000024BC2                 db  42h ; B
.eh_frame:0000000000024BC3                 db  0Eh
.eh_frame:0000000000024BC4                 db  18h
.eh_frame:0000000000024BC5                 db  42h ; B
.eh_frame:0000000000024BC6                 db  0Eh
.eh_frame:0000000000024BC7                 db  10h
.eh_frame:0000000000024BC8                 db  42h ; B
.eh_frame:0000000000024BC9                 db  0Eh
.eh_frame:0000000000024BCA                 db    8
.eh_frame:0000000000024BCB                 db  44h ; D
.eh_frame:0000000000024BCC                 db  0Bh
.eh_frame:0000000000024BCD                 db    3
.eh_frame:0000000000024BCE                 db  99h
.eh_frame:0000000000024BCF                 db    5
.eh_frame:0000000000024BD0                 db  0Eh
.eh_frame:0000000000024BD1                 db 0F8h
.eh_frame:0000000000024BD2                 db    1
.eh_frame:0000000000024BD3                 db  4Dh ; M
.eh_frame:0000000000024BD4                 db  0Eh
.eh_frame:0000000000024BD5                 db  80h
.eh_frame:0000000000024BD6                 db    2
.eh_frame:0000000000024BD7                 db  44h ; D
.eh_frame:0000000000024BD8                 db  0Eh
.eh_frame:0000000000024BD9                 db  88h
.eh_frame:0000000000024BDA                 db    2
.eh_frame:0000000000024BDB                 db  47h ; G
.eh_frame:0000000000024BDC                 db  0Eh
.eh_frame:0000000000024BDD                 db  90h
.eh_frame:0000000000024BDE                 db    2
.eh_frame:0000000000024BDF                 db  5Bh ; [
.eh_frame:0000000000024BE0                 db  0Eh
.eh_frame:0000000000024BE1                 db 0F0h
.eh_frame:0000000000024BE2                 db    1
.eh_frame:0000000000024BE3                 db    0
.eh_frame:0000000000024BE4                 db  68h ; h
.eh_frame:0000000000024BE5                 db    0
.eh_frame:0000000000024BE6                 db    0
.eh_frame:0000000000024BE7                 db    0
.eh_frame:0000000000024BE8                 db 0C0h
.eh_frame:0000000000024BE9                 db  11h
.eh_frame:0000000000024BEA                 db    0
.eh_frame:0000000000024BEB                 db    0
.eh_frame:0000000000024BEC                 db  34h ; 4
.eh_frame:0000000000024BED                 db  6Eh ; n
.eh_frame:0000000000024BEE                 db 0FEh
.eh_frame:0000000000024BEF                 db 0FFh
.eh_frame:0000000000024BF0                 db 0ABh
.eh_frame:0000000000024BF1                 db    1
.eh_frame:0000000000024BF2                 db    0
.eh_frame:0000000000024BF3                 db    0
.eh_frame:0000000000024BF4                 db    0
.eh_frame:0000000000024BF5                 db  42h ; B
.eh_frame:0000000000024BF6                 db  0Eh
.eh_frame:0000000000024BF7                 db  10h
.eh_frame:0000000000024BF8                 db  8Fh
.eh_frame:0000000000024BF9                 db    2
.eh_frame:0000000000024BFA                 db  42h ; B
.eh_frame:0000000000024BFB                 db  0Eh
.eh_frame:0000000000024BFC                 db  18h
.eh_frame:0000000000024BFD                 db  8Eh
.eh_frame:0000000000024BFE                 db    3
.eh_frame:0000000000024BFF                 db  45h ; E
.eh_frame:0000000000024C00                 db  0Eh
.eh_frame:0000000000024C01                 db  20h
.eh_frame:0000000000024C02                 db  8Dh
.eh_frame:0000000000024C03                 db    4
.eh_frame:0000000000024C04                 db  42h ; B
.eh_frame:0000000000024C05                 db  0Eh
.eh_frame:0000000000024C06                 db  28h ; (
.eh_frame:0000000000024C07                 db  8Ch
.eh_frame:0000000000024C08                 db    5
.eh_frame:0000000000024C09                 db  44h ; D
.eh_frame:0000000000024C0A                 db  0Eh
.eh_frame:0000000000024C0B                 db  30h ; 0
.eh_frame:0000000000024C0C                 db  86h
.eh_frame:0000000000024C0D                 db    6
.eh_frame:0000000000024C0E                 db  41h ; A
.eh_frame:0000000000024C0F                 db  0Eh
.eh_frame:0000000000024C10                 db  38h ; 8
.eh_frame:0000000000024C11                 db  83h
.eh_frame:0000000000024C12                 db    7
.eh_frame:0000000000024C13                 db  47h ; G
.eh_frame:0000000000024C14                 db  0Eh
.eh_frame:0000000000024C15                 db  60h ; `
.eh_frame:0000000000024C16                 db    2
.eh_frame:0000000000024C17                 db  99h
.eh_frame:0000000000024C18                 db  0Eh
.eh_frame:0000000000024C19                 db  68h ; h
.eh_frame:0000000000024C1A                 db  5Fh ; _
.eh_frame:0000000000024C1B                 db  0Eh
.eh_frame:0000000000024C1C                 db  70h ; p
.eh_frame:0000000000024C1D                 db  46h ; F
.eh_frame:0000000000024C1E                 db  0Eh
.eh_frame:0000000000024C1F                 db  78h ; x
.eh_frame:0000000000024C20                 db  42h ; B
.eh_frame:0000000000024C21                 db  0Eh
.eh_frame:0000000000024C22                 db  80h
.eh_frame:0000000000024C23                 db    1
.eh_frame:0000000000024C24                 db  59h ; Y
.eh_frame:0000000000024C25                 db  0Eh
.eh_frame:0000000000024C26                 db  60h ; `
.eh_frame:0000000000024C27                 db    2
.eh_frame:0000000000024C28                 db  40h ; @
.eh_frame:0000000000024C29                 db  0Eh
.eh_frame:0000000000024C2A                 db  68h ; h
.eh_frame:0000000000024C2B                 db  4Bh ; K
.eh_frame:0000000000024C2C                 db  0Eh
.eh_frame:0000000000024C2D                 db  70h ; p
.eh_frame:0000000000024C2E                 db  43h ; C
.eh_frame:0000000000024C2F                 db  0Eh
.eh_frame:0000000000024C30                 db  78h ; x
.eh_frame:0000000000024C31                 db  45h ; E
.eh_frame:0000000000024C32                 db  0Eh
.eh_frame:0000000000024C33                 db  80h
.eh_frame:0000000000024C34                 db    1
.eh_frame:0000000000024C35                 db  5Eh ; ^
.eh_frame:0000000000024C36                 db  0Eh
.eh_frame:0000000000024C37                 db  60h ; `
.eh_frame:0000000000024C38                 db  4Ch ; L
.eh_frame:0000000000024C39                 db  0Ah
.eh_frame:0000000000024C3A                 db  0Eh
.eh_frame:0000000000024C3B                 db  38h ; 8
.eh_frame:0000000000024C3C                 db  44h ; D
.eh_frame:0000000000024C3D                 db  0Eh
.eh_frame:0000000000024C3E                 db  30h ; 0
.eh_frame:0000000000024C3F                 db  41h ; A
.eh_frame:0000000000024C40                 db  0Eh
.eh_frame:0000000000024C41                 db  28h ; (
.eh_frame:0000000000024C42                 db  42h ; B
.eh_frame:0000000000024C43                 db  0Eh
.eh_frame:0000000000024C44                 db  20h
.eh_frame:0000000000024C45                 db  42h ; B
.eh_frame:0000000000024C46                 db  0Eh
.eh_frame:0000000000024C47                 db  18h
.eh_frame:0000000000024C48                 db  42h ; B
.eh_frame:0000000000024C49                 db  0Eh
.eh_frame:0000000000024C4A                 db  10h
.eh_frame:0000000000024C4B                 db  42h ; B
.eh_frame:0000000000024C4C                 db  0Eh
.eh_frame:0000000000024C4D                 db    8
.eh_frame:0000000000024C4E                 db  46h ; F
.eh_frame:0000000000024C4F                 db  0Bh
.eh_frame:0000000000024C50                 db  28h ; (
.eh_frame:0000000000024C51                 db    0
.eh_frame:0000000000024C52                 db    0
.eh_frame:0000000000024C53                 db    0
.eh_frame:0000000000024C54                 db  2Ch ; ,
.eh_frame:0000000000024C55                 db  12h
.eh_frame:0000000000024C56                 db    0
.eh_frame:0000000000024C57                 db    0
.eh_frame:0000000000024C58                 db  78h ; x
.eh_frame:0000000000024C59                 db  6Fh ; o
.eh_frame:0000000000024C5A                 db 0FEh
.eh_frame:0000000000024C5B                 db 0FFh
.eh_frame:0000000000024C5C                 db  36h ; 6
.eh_frame:0000000000024C5D                 db    0
.eh_frame:0000000000024C5E                 db    0
.eh_frame:0000000000024C5F                 db    0
.eh_frame:0000000000024C60                 db    0
.eh_frame:0000000000024C61                 db  42h ; B
.eh_frame:0000000000024C62                 db  0Eh
.eh_frame:0000000000024C63                 db  10h
.eh_frame:0000000000024C64                 db  8Ch
.eh_frame:0000000000024C65                 db    2
.eh_frame:0000000000024C66                 db  41h ; A
.eh_frame:0000000000024C67                 db  0Eh
.eh_frame:0000000000024C68                 db  18h
.eh_frame:0000000000024C69                 db  86h
.eh_frame:0000000000024C6A                 db    3
.eh_frame:0000000000024C6B                 db  41h ; A
.eh_frame:0000000000024C6C                 db  0Eh
.eh_frame:0000000000024C6D                 db  20h
.eh_frame:0000000000024C6E                 db  83h
.eh_frame:0000000000024C6F                 db    4
.eh_frame:0000000000024C70                 db  6Eh ; n
.eh_frame:0000000000024C71                 db  0Eh
.eh_frame:0000000000024C72                 db  18h
.eh_frame:0000000000024C73                 db  41h ; A
.eh_frame:0000000000024C74                 db  0Eh
.eh_frame:0000000000024C75                 db  10h
.eh_frame:0000000000024C76                 db  42h ; B
.eh_frame:0000000000024C77                 db  0Eh
.eh_frame:0000000000024C78                 db    8
.eh_frame:0000000000024C79                 db    0
.eh_frame:0000000000024C7A                 db    0
.eh_frame:0000000000024C7B                 db    0
.eh_frame:0000000000024C7C                 db  10h
.eh_frame:0000000000024C7D                 db    0
.eh_frame:0000000000024C7E                 db    0
.eh_frame:0000000000024C7F                 db    0
.eh_frame:0000000000024C80                 db  58h ; X
.eh_frame:0000000000024C81                 db  12h
.eh_frame:0000000000024C82                 db    0
.eh_frame:0000000000024C83                 db    0
.eh_frame:0000000000024C84                 db  8Ch
.eh_frame:0000000000024C85                 db  6Fh ; o
.eh_frame:0000000000024C86                 db 0FEh
.eh_frame:0000000000024C87                 db 0FFh
.eh_frame:0000000000024C88                 db  11h
.eh_frame:0000000000024C89                 db    0
.eh_frame:0000000000024C8A                 db    0
.eh_frame:0000000000024C8B                 db    0
.eh_frame:0000000000024C8C                 db    0
.eh_frame:0000000000024C8D                 db    0
.eh_frame:0000000000024C8E                 db    0
.eh_frame:0000000000024C8F                 db    0
.eh_frame:0000000000024C90                 db  10h
.eh_frame:0000000000024C91                 db    0
.eh_frame:0000000000024C92                 db    0
.eh_frame:0000000000024C93                 db    0
.eh_frame:0000000000024C94                 db  6Ch ; l
.eh_frame:0000000000024C95                 db  12h
.eh_frame:0000000000024C96                 db    0
.eh_frame:0000000000024C97                 db    0
.eh_frame:0000000000024C98                 db  98h
.eh_frame:0000000000024C99                 db  6Fh ; o
.eh_frame:0000000000024C9A                 db 0FEh
.eh_frame:0000000000024C9B                 db 0FFh
.eh_frame:0000000000024C9C                 db  11h
.eh_frame:0000000000024C9D                 db    0
.eh_frame:0000000000024C9E                 db    0
.eh_frame:0000000000024C9F                 db    0
.eh_frame:0000000000024CA0                 db    0
.eh_frame:0000000000024CA1                 db    0
.eh_frame:0000000000024CA2                 db    0
.eh_frame:0000000000024CA3                 db    0
.eh_frame:0000000000024CA4                 db  10h
.eh_frame:0000000000024CA5                 db    0
.eh_frame:0000000000024CA6                 db    0
.eh_frame:0000000000024CA7                 db    0
.eh_frame:0000000000024CA8                 db  80h
.eh_frame:0000000000024CA9                 db  12h
.eh_frame:0000000000024CAA                 db    0
.eh_frame:0000000000024CAB                 db    0
.eh_frame:0000000000024CAC                 db 0A4h
.eh_frame:0000000000024CAD                 db  6Fh ; o
.eh_frame:0000000000024CAE                 db 0FEh
.eh_frame:0000000000024CAF                 db 0FFh
.eh_frame:0000000000024CB0                 db  35h ; 5
.eh_frame:0000000000024CB1                 db    0
.eh_frame:0000000000024CB2                 db    0
.eh_frame:0000000000024CB3                 db    0
.eh_frame:0000000000024CB4                 db    0
.eh_frame:0000000000024CB5                 db    0
.eh_frame:0000000000024CB6                 db    0
.eh_frame:0000000000024CB7                 db    0
.eh_frame:0000000000024CB8                 db  10h
.eh_frame:0000000000024CB9                 db    0
.eh_frame:0000000000024CBA                 db    0
.eh_frame:0000000000024CBB                 db    0
.eh_frame:0000000000024CBC                 db  94h
.eh_frame:0000000000024CBD                 db  12h
.eh_frame:0000000000024CBE                 db    0
.eh_frame:0000000000024CBF                 db    0
.eh_frame:0000000000024CC0                 db 0D0h
.eh_frame:0000000000024CC1                 db  6Fh ; o
.eh_frame:0000000000024CC2                 db 0FEh
.eh_frame:0000000000024CC3                 db 0FFh
.eh_frame:0000000000024CC4                 db  15h
.eh_frame:0000000000024CC5                 db    0
.eh_frame:0000000000024CC6                 db    0
.eh_frame:0000000000024CC7                 db    0
.eh_frame:0000000000024CC8                 db    0
.eh_frame:0000000000024CC9                 db    0
.eh_frame:0000000000024CCA                 db    0
.eh_frame:0000000000024CCB                 db    0
.eh_frame:0000000000024CCC                 db  10h
.eh_frame:0000000000024CCD                 db    0
.eh_frame:0000000000024CCE                 db    0
.eh_frame:0000000000024CCF                 db    0
.eh_frame:0000000000024CD0                 db 0A8h
.eh_frame:0000000000024CD1                 db  12h
.eh_frame:0000000000024CD2                 db    0
.eh_frame:0000000000024CD3                 db    0
.eh_frame:0000000000024CD4                 db 0DCh
.eh_frame:0000000000024CD5                 db  6Fh ; o
.eh_frame:0000000000024CD6                 db 0FEh
.eh_frame:0000000000024CD7                 db 0FFh
.eh_frame:0000000000024CD8                 db  30h ; 0
.eh_frame:0000000000024CD9                 db    0
.eh_frame:0000000000024CDA                 db    0
.eh_frame:0000000000024CDB                 db    0
.eh_frame:0000000000024CDC                 db    0
.eh_frame:0000000000024CDD                 db  6Bh ; k
.eh_frame:0000000000024CDE                 db  0Eh
.eh_frame:0000000000024CDF                 db  10h
.eh_frame:0000000000024CE0                 db  50h ; P
.eh_frame:0000000000024CE1                 db    0
.eh_frame:0000000000024CE2                 db    0
.eh_frame:0000000000024CE3                 db    0
.eh_frame:0000000000024CE4                 db 0BCh
.eh_frame:0000000000024CE5                 db  12h
.eh_frame:0000000000024CE6                 db    0
.eh_frame:0000000000024CE7                 db    0
.eh_frame:0000000000024CE8                 db 0F8h
.eh_frame:0000000000024CE9                 db  6Fh ; o
.eh_frame:0000000000024CEA                 db 0FEh
.eh_frame:0000000000024CEB                 db 0FFh
.eh_frame:0000000000024CEC                 db  74h ; t
.eh_frame:0000000000024CED                 db    0
.eh_frame:0000000000024CEE                 db    0
.eh_frame:0000000000024CEF                 db    0
.eh_frame:0000000000024CF0                 db    0
.eh_frame:0000000000024CF1                 db  42h ; B
.eh_frame:0000000000024CF2                 db  0Eh
.eh_frame:0000000000024CF3                 db  10h
.eh_frame:0000000000024CF4                 db  8Fh
.eh_frame:0000000000024CF5                 db    2
.eh_frame:0000000000024CF6                 db  42h ; B
.eh_frame:0000000000024CF7                 db  0Eh
.eh_frame:0000000000024CF8                 db  18h
.eh_frame:0000000000024CF9                 db  8Eh
.eh_frame:0000000000024CFA                 db    3
.eh_frame:0000000000024CFB                 db  49h ; I
.eh_frame:0000000000024CFC                 db  0Eh
.eh_frame:0000000000024CFD                 db  20h
.eh_frame:0000000000024CFE                 db  8Dh
.eh_frame:0000000000024CFF                 db    4
.eh_frame:0000000000024D00                 db  42h ; B
.eh_frame:0000000000024D01                 db  0Eh
.eh_frame:0000000000024D02                 db  28h ; (
.eh_frame:0000000000024D03                 db  8Ch
.eh_frame:0000000000024D04                 db    5
.eh_frame:0000000000024D05                 db  44h ; D
.eh_frame:0000000000024D06                 db  0Eh
.eh_frame:0000000000024D07                 db  30h ; 0
.eh_frame:0000000000024D08                 db  86h
.eh_frame:0000000000024D09                 db    6
.eh_frame:0000000000024D0A                 db  41h ; A
.eh_frame:0000000000024D0B                 db  0Eh
.eh_frame:0000000000024D0C                 db  38h ; 8
.eh_frame:0000000000024D0D                 db  83h
.eh_frame:0000000000024D0E                 db    7
.eh_frame:0000000000024D0F                 db  4Dh ; M
.eh_frame:0000000000024D10                 db  0Eh
.eh_frame:0000000000024D11                 db  50h ; P
.eh_frame:0000000000024D12                 db  5Fh ; _
.eh_frame:0000000000024D13                 db  0Eh
.eh_frame:0000000000024D14                 db  58h ; X
.eh_frame:0000000000024D15                 db  47h ; G
.eh_frame:0000000000024D16                 db  0Eh
.eh_frame:0000000000024D17                 db  60h ; `
.eh_frame:0000000000024D18                 db  46h ; F
.eh_frame:0000000000024D19                 db  0Eh
.eh_frame:0000000000024D1A                 db  68h ; h
.eh_frame:0000000000024D1B                 db  44h ; D
.eh_frame:0000000000024D1C                 db  0Eh
.eh_frame:0000000000024D1D                 db  70h ; p
.eh_frame:0000000000024D1E                 db  58h ; X
.eh_frame:0000000000024D1F                 db  0Eh
.eh_frame:0000000000024D20                 db  38h ; 8
.eh_frame:0000000000024D21                 db  41h ; A
.eh_frame:0000000000024D22                 db  0Eh
.eh_frame:0000000000024D23                 db  30h ; 0
.eh_frame:0000000000024D24                 db  41h ; A
.eh_frame:0000000000024D25                 db  0Eh
.eh_frame:0000000000024D26                 db  28h ; (
.eh_frame:0000000000024D27                 db  42h ; B
.eh_frame:0000000000024D28                 db  0Eh
.eh_frame:0000000000024D29                 db  20h
.eh_frame:0000000000024D2A                 db  42h ; B
.eh_frame:0000000000024D2B                 db  0Eh
.eh_frame:0000000000024D2C                 db  18h
.eh_frame:0000000000024D2D                 db  42h ; B
.eh_frame:0000000000024D2E                 db  0Eh
.eh_frame:0000000000024D2F                 db  10h
.eh_frame:0000000000024D30                 db  42h ; B
.eh_frame:0000000000024D31                 db  0Eh
.eh_frame:0000000000024D32                 db    8
.eh_frame:0000000000024D33                 db    0
.eh_frame:0000000000024D34                 db  68h ; h
.eh_frame:0000000000024D35                 db    0
.eh_frame:0000000000024D36                 db    0
.eh_frame:0000000000024D37                 db    0
.eh_frame:0000000000024D38                 db  10h
.eh_frame:0000000000024D39                 db  13h
.eh_frame:0000000000024D3A                 db    0
.eh_frame:0000000000024D3B                 db    0
.eh_frame:0000000000024D3C                 db  24h ; $
.eh_frame:0000000000024D3D                 db  70h ; p
.eh_frame:0000000000024D3E                 db 0FEh
.eh_frame:0000000000024D3F                 db 0FFh
.eh_frame:0000000000024D40                 db 0E3h
.eh_frame:0000000000024D41                 db    0
.eh_frame:0000000000024D42                 db    0
.eh_frame:0000000000024D43                 db    0
.eh_frame:0000000000024D44                 db    0
.eh_frame:0000000000024D45                 db  42h ; B
.eh_frame:0000000000024D46                 db  0Eh
.eh_frame:0000000000024D47                 db  10h
.eh_frame:0000000000024D48                 db  8Fh
.eh_frame:0000000000024D49                 db    2
.eh_frame:0000000000024D4A                 db  42h ; B
.eh_frame:0000000000024D4B                 db  0Eh
.eh_frame:0000000000024D4C                 db  18h
.eh_frame:0000000000024D4D                 db  8Eh
.eh_frame:0000000000024D4E                 db    3
.eh_frame:0000000000024D4F                 db  49h ; I
.eh_frame:0000000000024D50                 db  0Eh
.eh_frame:0000000000024D51                 db  20h
.eh_frame:0000000000024D52                 db  8Dh
.eh_frame:0000000000024D53                 db    4
.eh_frame:0000000000024D54                 db  42h ; B
.eh_frame:0000000000024D55                 db  0Eh
.eh_frame:0000000000024D56                 db  28h ; (
.eh_frame:0000000000024D57                 db  8Ch
.eh_frame:0000000000024D58                 db    5
.eh_frame:0000000000024D59                 db  44h ; D
.eh_frame:0000000000024D5A                 db  0Eh
.eh_frame:0000000000024D5B                 db  30h ; 0
.eh_frame:0000000000024D5C                 db  86h
.eh_frame:0000000000024D5D                 db    6
.eh_frame:0000000000024D5E                 db  41h ; A
.eh_frame:0000000000024D5F                 db  0Eh
.eh_frame:0000000000024D60                 db  38h ; 8
.eh_frame:0000000000024D61                 db  83h
.eh_frame:0000000000024D62                 db    7
.eh_frame:0000000000024D63                 db  4Dh ; M
.eh_frame:0000000000024D64                 db  0Eh
.eh_frame:0000000000024D65                 db  70h ; p
.eh_frame:0000000000024D66                 db  65h ; e
.eh_frame:0000000000024D67                 db  0Eh
.eh_frame:0000000000024D68                 db  78h ; x
.eh_frame:0000000000024D69                 db  4Dh ; M
.eh_frame:0000000000024D6A                 db  0Eh
.eh_frame:0000000000024D6B                 db  80h
.eh_frame:0000000000024D6C                 db    1
.eh_frame:0000000000024D6D                 db  46h ; F
.eh_frame:0000000000024D6E                 db  0Eh
.eh_frame:0000000000024D6F                 db  88h
.eh_frame:0000000000024D70                 db    1
.eh_frame:0000000000024D71                 db  42h ; B
.eh_frame:0000000000024D72                 db  0Eh
.eh_frame:0000000000024D73                 db  90h
.eh_frame:0000000000024D74                 db    1
.eh_frame:0000000000024D75                 db  5Eh ; ^
.eh_frame:0000000000024D76                 db  0Eh
.eh_frame:0000000000024D77                 db  70h ; p
.eh_frame:0000000000024D78                 db  56h ; V
.eh_frame:0000000000024D79                 db  0Eh
.eh_frame:0000000000024D7A                 db  78h ; x
.eh_frame:0000000000024D7B                 db  43h ; C
.eh_frame:0000000000024D7C                 db  0Eh
.eh_frame:0000000000024D7D                 db  80h
.eh_frame:0000000000024D7E                 db    1
.eh_frame:0000000000024D7F                 db  43h ; C
.eh_frame:0000000000024D80                 db  0Eh
.eh_frame:0000000000024D81                 db  88h
.eh_frame:0000000000024D82                 db    1
.eh_frame:0000000000024D83                 db  56h ; V
.eh_frame:0000000000024D84                 db  0Eh
.eh_frame:0000000000024D85                 db  90h
.eh_frame:0000000000024D86                 db    1
.eh_frame:0000000000024D87                 db  52h ; R
.eh_frame:0000000000024D88                 db  0Eh
.eh_frame:0000000000024D89                 db  70h ; p
.eh_frame:0000000000024D8A                 db  5Bh ; [
.eh_frame:0000000000024D8B                 db  0Eh
.eh_frame:0000000000024D8C                 db  38h ; 8
.eh_frame:0000000000024D8D                 db  41h ; A
.eh_frame:0000000000024D8E                 db  0Eh
.eh_frame:0000000000024D8F                 db  30h ; 0
.eh_frame:0000000000024D90                 db  41h ; A
.eh_frame:0000000000024D91                 db  0Eh
.eh_frame:0000000000024D92                 db  28h ; (
.eh_frame:0000000000024D93                 db  42h ; B
.eh_frame:0000000000024D94                 db  0Eh
.eh_frame:0000000000024D95                 db  20h
.eh_frame:0000000000024D96                 db  42h ; B
.eh_frame:0000000000024D97                 db  0Eh
.eh_frame:0000000000024D98                 db  18h
.eh_frame:0000000000024D99                 db  42h ; B
.eh_frame:0000000000024D9A                 db  0Eh
.eh_frame:0000000000024D9B                 db  10h
.eh_frame:0000000000024D9C                 db  42h ; B
.eh_frame:0000000000024D9D                 db  0Eh
.eh_frame:0000000000024D9E                 db    8
.eh_frame:0000000000024D9F                 db    0
.eh_frame:0000000000024DA0                 db  10h
.eh_frame:0000000000024DA1                 db    0
.eh_frame:0000000000024DA2                 db    0
.eh_frame:0000000000024DA3                 db    0
.eh_frame:0000000000024DA4                 db  7Ch ; |
.eh_frame:0000000000024DA5                 db  13h
.eh_frame:0000000000024DA6                 db    0
.eh_frame:0000000000024DA7                 db    0
.eh_frame:0000000000024DA8                 db 0A8h
.eh_frame:0000000000024DA9                 db  70h ; p
.eh_frame:0000000000024DAA                 db 0FEh
.eh_frame:0000000000024DAB                 db 0FFh
.eh_frame:0000000000024DAC                 db  0Ah
.eh_frame:0000000000024DAD                 db    0
.eh_frame:0000000000024DAE                 db    0
.eh_frame:0000000000024DAF                 db    0
.eh_frame:0000000000024DB0                 db    0
.eh_frame:0000000000024DB1                 db    0
.eh_frame:0000000000024DB2                 db    0
.eh_frame:0000000000024DB3                 db    0
.eh_frame:0000000000024DB4                 db  28h ; (
.eh_frame:0000000000024DB5                 db    0
.eh_frame:0000000000024DB6                 db    0
.eh_frame:0000000000024DB7                 db    0
.eh_frame:0000000000024DB8                 db  90h
.eh_frame:0000000000024DB9                 db  13h
.eh_frame:0000000000024DBA                 db    0
.eh_frame:0000000000024DBB                 db    0
.eh_frame:0000000000024DBC                 db 0A4h
.eh_frame:0000000000024DBD                 db  70h ; p
.eh_frame:0000000000024DBE                 db 0FEh
.eh_frame:0000000000024DBF                 db 0FFh
.eh_frame:0000000000024DC0                 db  93h
.eh_frame:0000000000024DC1                 db    0
.eh_frame:0000000000024DC2                 db    0
.eh_frame:0000000000024DC3                 db    0
.eh_frame:0000000000024DC4                 db    0
.eh_frame:0000000000024DC5                 db  48h ; H
.eh_frame:0000000000024DC6                 db  0Eh
.eh_frame:0000000000024DC7                 db  10h
.eh_frame:0000000000024DC8                 db  8Ch
.eh_frame:0000000000024DC9                 db    2
.eh_frame:0000000000024DCA                 db  48h ; H
.eh_frame:0000000000024DCB                 db  0Eh
.eh_frame:0000000000024DCC                 db  18h
.eh_frame:0000000000024DCD                 db  86h
.eh_frame:0000000000024DCE                 db    3
.eh_frame:0000000000024DCF                 db  41h ; A
.eh_frame:0000000000024DD0                 db  0Eh
.eh_frame:0000000000024DD1                 db  20h
.eh_frame:0000000000024DD2                 db  83h
.eh_frame:0000000000024DD3                 db    4
.eh_frame:0000000000024DD4                 db    2
.eh_frame:0000000000024DD5                 db  74h ; t
.eh_frame:0000000000024DD6                 db  0Eh
.eh_frame:0000000000024DD7                 db  18h
.eh_frame:0000000000024DD8                 db  4Bh ; K
.eh_frame:0000000000024DD9                 db  0Eh
.eh_frame:0000000000024DDA                 db  10h
.eh_frame:0000000000024DDB                 db  42h ; B
.eh_frame:0000000000024DDC                 db  0Eh
.eh_frame:0000000000024DDD                 db    8
.eh_frame:0000000000024DDE                 db    0
.eh_frame:0000000000024DDF                 db    0
.eh_frame:0000000000024DE0                 db  10h
.eh_frame:0000000000024DE1                 db    0
.eh_frame:0000000000024DE2                 db    0
.eh_frame:0000000000024DE3                 db    0
.eh_frame:0000000000024DE4                 db 0BCh
.eh_frame:0000000000024DE5                 db  13h
.eh_frame:0000000000024DE6                 db    0
.eh_frame:0000000000024DE7                 db    0
.eh_frame:0000000000024DE8                 db  18h
.eh_frame:0000000000024DE9                 db  71h ; q
.eh_frame:0000000000024DEA                 db 0FEh
.eh_frame:0000000000024DEB                 db 0FFh
.eh_frame:0000000000024DEC                 db  13h
.eh_frame:0000000000024DED                 db    0
.eh_frame:0000000000024DEE                 db    0
.eh_frame:0000000000024DEF                 db    0
.eh_frame:0000000000024DF0                 db    0
.eh_frame:0000000000024DF1                 db    0
.eh_frame:0000000000024DF2                 db    0
.eh_frame:0000000000024DF3                 db    0
.eh_frame:0000000000024DF4                 db  10h
.eh_frame:0000000000024DF5                 db    0
.eh_frame:0000000000024DF6                 db    0
.eh_frame:0000000000024DF7                 db    0
.eh_frame:0000000000024DF8                 db 0D0h
.eh_frame:0000000000024DF9                 db  13h
.eh_frame:0000000000024DFA                 db    0
.eh_frame:0000000000024DFB                 db    0
.eh_frame:0000000000024DFC                 db  24h ; $
.eh_frame:0000000000024DFD                 db  71h ; q
.eh_frame:0000000000024DFE                 db 0FEh
.eh_frame:0000000000024DFF                 db 0FFh
.eh_frame:0000000000024E00                 db  0Ch
.eh_frame:0000000000024E01                 db    0
.eh_frame:0000000000024E02                 db    0
.eh_frame:0000000000024E03                 db    0
.eh_frame:0000000000024E04                 db    0
.eh_frame:0000000000024E05                 db    0
.eh_frame:0000000000024E06                 db    0
.eh_frame:0000000000024E07                 db    0
.eh_frame:0000000000024E08                 db  10h
.eh_frame:0000000000024E09                 db    0
.eh_frame:0000000000024E0A                 db    0
.eh_frame:0000000000024E0B                 db    0
.eh_frame:0000000000024E0C                 db 0E4h
.eh_frame:0000000000024E0D                 db  13h
.eh_frame:0000000000024E0E                 db    0
.eh_frame:0000000000024E0F                 db    0
.eh_frame:0000000000024E10                 db  20h
.eh_frame:0000000000024E11                 db  71h ; q
.eh_frame:0000000000024E12                 db 0FEh
.eh_frame:0000000000024E13                 db 0FFh
.eh_frame:0000000000024E14                 db  18h
.eh_frame:0000000000024E15                 db    0
.eh_frame:0000000000024E16                 db    0
.eh_frame:0000000000024E17                 db    0
.eh_frame:0000000000024E18                 db    0
.eh_frame:0000000000024E19                 db    0
.eh_frame:0000000000024E1A                 db    0
.eh_frame:0000000000024E1B                 db    0
.eh_frame:0000000000024E1C                 db  10h
.eh_frame:0000000000024E1D                 db    0
.eh_frame:0000000000024E1E                 db    0
.eh_frame:0000000000024E1F                 db    0
.eh_frame:0000000000024E20                 db 0F8h
.eh_frame:0000000000024E21                 db  13h
.eh_frame:0000000000024E22                 db    0
.eh_frame:0000000000024E23                 db    0
.eh_frame:0000000000024E24                 db  2Ch ; ,
.eh_frame:0000000000024E25                 db  71h ; q
.eh_frame:0000000000024E26                 db 0FEh
.eh_frame:0000000000024E27                 db 0FFh
.eh_frame:0000000000024E28                 db  14h
.eh_frame:0000000000024E29                 db    0
.eh_frame:0000000000024E2A                 db    0
.eh_frame:0000000000024E2B                 db    0
.eh_frame:0000000000024E2C                 db    0
.eh_frame:0000000000024E2D                 db    0
.eh_frame:0000000000024E2E                 db    0
.eh_frame:0000000000024E2F                 db    0
.eh_frame:0000000000024E30                 db  18h
.eh_frame:0000000000024E31                 db    0
.eh_frame:0000000000024E32                 db    0
.eh_frame:0000000000024E33                 db    0
.eh_frame:0000000000024E34                 db  0Ch
.eh_frame:0000000000024E35                 db  14h
.eh_frame:0000000000024E36                 db    0
.eh_frame:0000000000024E37                 db    0
.eh_frame:0000000000024E38                 db  38h ; 8
.eh_frame:0000000000024E39                 db  71h ; q
.eh_frame:0000000000024E3A                 db 0FEh
.eh_frame:0000000000024E3B                 db 0FFh
.eh_frame:0000000000024E3C                 db  8Eh
.eh_frame:0000000000024E3D                 db    0
.eh_frame:0000000000024E3E                 db    0
.eh_frame:0000000000024E3F                 db    0
.eh_frame:0000000000024E40                 db    0
.eh_frame:0000000000024E41                 db  44h ; D
.eh_frame:0000000000024E42                 db  0Eh
.eh_frame:0000000000024E43                 db  50h ; P
.eh_frame:0000000000024E44                 db    2
.eh_frame:0000000000024E45                 db  7Fh ; 
.eh_frame:0000000000024E46                 db  0Ah
.eh_frame:0000000000024E47                 db  0Eh
.eh_frame:0000000000024E48                 db    8
.eh_frame:0000000000024E49                 db  41h ; A
.eh_frame:0000000000024E4A                 db  0Bh
.eh_frame:0000000000024E4B                 db    0
.eh_frame:0000000000024E4C                 db  18h
.eh_frame:0000000000024E4D                 db    0
.eh_frame:0000000000024E4E                 db    0
.eh_frame:0000000000024E4F                 db    0
.eh_frame:0000000000024E50                 db  28h ; (
.eh_frame:0000000000024E51                 db  14h
.eh_frame:0000000000024E52                 db    0
.eh_frame:0000000000024E53                 db    0
.eh_frame:0000000000024E54                 db 0ACh
.eh_frame:0000000000024E55                 db  71h ; q
.eh_frame:0000000000024E56                 db 0FEh
.eh_frame:0000000000024E57                 db 0FFh
.eh_frame:0000000000024E58                 db  8Ah
.eh_frame:0000000000024E59                 db    0
.eh_frame:0000000000024E5A                 db    0
.eh_frame:0000000000024E5B                 db    0
.eh_frame:0000000000024E5C                 db    0
.eh_frame:0000000000024E5D                 db  44h ; D
.eh_frame:0000000000024E5E                 db  0Eh
.eh_frame:0000000000024E5F                 db  50h ; P
.eh_frame:0000000000024E60                 db    2
.eh_frame:0000000000024E61                 db  7Bh ; {
.eh_frame:0000000000024E62                 db  0Ah
.eh_frame:0000000000024E63                 db  0Eh
.eh_frame:0000000000024E64                 db    8
.eh_frame:0000000000024E65                 db  41h ; A
.eh_frame:0000000000024E66                 db  0Bh
.eh_frame:0000000000024E67                 db    0
.eh_frame:0000000000024E68                 db  10h
.eh_frame:0000000000024E69                 db    0
.eh_frame:0000000000024E6A                 db    0
.eh_frame:0000000000024E6B                 db    0
.eh_frame:0000000000024E6C                 db  44h ; D
.eh_frame:0000000000024E6D                 db  14h
.eh_frame:0000000000024E6E                 db    0
.eh_frame:0000000000024E6F                 db    0
.eh_frame:0000000000024E70                 db  20h
.eh_frame:0000000000024E71                 db  72h ; r
.eh_frame:0000000000024E72                 db 0FEh
.eh_frame:0000000000024E73                 db 0FFh
.eh_frame:0000000000024E74                 db  0Ch
.eh_frame:0000000000024E75                 db    0
.eh_frame:0000000000024E76                 db    0
.eh_frame:0000000000024E77                 db    0
.eh_frame:0000000000024E78                 db    0
.eh_frame:0000000000024E79                 db    0
.eh_frame:0000000000024E7A                 db    0
.eh_frame:0000000000024E7B                 db    0
.eh_frame:0000000000024E7C                 db  10h
.eh_frame:0000000000024E7D                 db    0
.eh_frame:0000000000024E7E                 db    0
.eh_frame:0000000000024E7F                 db    0
.eh_frame:0000000000024E80                 db  58h ; X
.eh_frame:0000000000024E81                 db  14h
.eh_frame:0000000000024E82                 db    0
.eh_frame:0000000000024E83                 db    0
.eh_frame:0000000000024E84                 db  1Ch
.eh_frame:0000000000024E85                 db  72h ; r
.eh_frame:0000000000024E86                 db 0FEh
.eh_frame:0000000000024E87                 db 0FFh
.eh_frame:0000000000024E88                 db  0Fh
.eh_frame:0000000000024E89                 db    0
.eh_frame:0000000000024E8A                 db    0
.eh_frame:0000000000024E8B                 db    0
.eh_frame:0000000000024E8C                 db    0
.eh_frame:0000000000024E8D                 db    0
.eh_frame:0000000000024E8E                 db    0
.eh_frame:0000000000024E8F                 db    0
.eh_frame:0000000000024E90                 db  18h
.eh_frame:0000000000024E91                 db    0
.eh_frame:0000000000024E92                 db    0
.eh_frame:0000000000024E93                 db    0
.eh_frame:0000000000024E94                 db  6Ch ; l
.eh_frame:0000000000024E95                 db  14h
.eh_frame:0000000000024E96                 db    0
.eh_frame:0000000000024E97                 db    0
.eh_frame:0000000000024E98                 db  18h
.eh_frame:0000000000024E99                 db  72h ; r
.eh_frame:0000000000024E9A                 db 0FEh
.eh_frame:0000000000024E9B                 db 0FFh
.eh_frame:0000000000024E9C                 db  98h
.eh_frame:0000000000024E9D                 db    0
.eh_frame:0000000000024E9E                 db    0
.eh_frame:0000000000024E9F                 db    0
.eh_frame:0000000000024EA0                 db    0
.eh_frame:0000000000024EA1                 db  44h ; D
.eh_frame:0000000000024EA2                 db  0Eh
.eh_frame:0000000000024EA3                 db  50h ; P
.eh_frame:0000000000024EA4                 db    2
.eh_frame:0000000000024EA5                 db  8Eh
.eh_frame:0000000000024EA6                 db  0Ah
.eh_frame:0000000000024EA7                 db  0Eh
.eh_frame:0000000000024EA8                 db    8
.eh_frame:0000000000024EA9                 db  41h ; A
.eh_frame:0000000000024EAA                 db  0Bh
.eh_frame:0000000000024EAB                 db    0
.eh_frame:0000000000024EAC                 db  10h
.eh_frame:0000000000024EAD                 db    0
.eh_frame:0000000000024EAE                 db    0
.eh_frame:0000000000024EAF                 db    0
.eh_frame:0000000000024EB0                 db  88h
.eh_frame:0000000000024EB1                 db  14h
.eh_frame:0000000000024EB2                 db    0
.eh_frame:0000000000024EB3                 db    0
.eh_frame:0000000000024EB4                 db  9Ch
.eh_frame:0000000000024EB5                 db  72h ; r
.eh_frame:0000000000024EB6                 db 0FEh
.eh_frame:0000000000024EB7                 db 0FFh
.eh_frame:0000000000024EB8                 db  10h
.eh_frame:0000000000024EB9                 db    0
.eh_frame:0000000000024EBA                 db    0
.eh_frame:0000000000024EBB                 db    0
.eh_frame:0000000000024EBC                 db    0
.eh_frame:0000000000024EBD                 db    0
.eh_frame:0000000000024EBE                 db    0
.eh_frame:0000000000024EBF                 db    0
.eh_frame:0000000000024EC0                 db  10h
.eh_frame:0000000000024EC1                 db    0
.eh_frame:0000000000024EC2                 db    0
.eh_frame:0000000000024EC3                 db    0
.eh_frame:0000000000024EC4                 db  9Ch
.eh_frame:0000000000024EC5                 db  14h
.eh_frame:0000000000024EC6                 db    0
.eh_frame:0000000000024EC7                 db    0
.eh_frame:0000000000024EC8                 db  98h
.eh_frame:0000000000024EC9                 db  72h ; r
.eh_frame:0000000000024ECA                 db 0FEh
.eh_frame:0000000000024ECB                 db 0FFh
.eh_frame:0000000000024ECC                 db  11h
.eh_frame:0000000000024ECD                 db    0
.eh_frame:0000000000024ECE                 db    0
.eh_frame:0000000000024ECF                 db    0
.eh_frame:0000000000024ED0                 db    0
.eh_frame:0000000000024ED1                 db    0
.eh_frame:0000000000024ED2                 db    0
.eh_frame:0000000000024ED3                 db    0
.eh_frame:0000000000024ED4                 db  10h
.eh_frame:0000000000024ED5                 db    0
.eh_frame:0000000000024ED6                 db    0
.eh_frame:0000000000024ED7                 db    0
.eh_frame:0000000000024ED8                 db 0B0h
.eh_frame:0000000000024ED9                 db  14h
.eh_frame:0000000000024EDA                 db    0
.eh_frame:0000000000024EDB                 db    0
.eh_frame:0000000000024EDC                 db 0A4h
.eh_frame:0000000000024EDD                 db  72h ; r
.eh_frame:0000000000024EDE                 db 0FEh
.eh_frame:0000000000024EDF                 db 0FFh
.eh_frame:0000000000024EE0                 db  0Ah
.eh_frame:0000000000024EE1                 db    0
.eh_frame:0000000000024EE2                 db    0
.eh_frame:0000000000024EE3                 db    0
.eh_frame:0000000000024EE4                 db    0
.eh_frame:0000000000024EE5                 db    0
.eh_frame:0000000000024EE6                 db    0
.eh_frame:0000000000024EE7                 db    0
.eh_frame:0000000000024EE8                 db  18h
.eh_frame:0000000000024EE9                 db    0
.eh_frame:0000000000024EEA                 db    0
.eh_frame:0000000000024EEB                 db    0
.eh_frame:0000000000024EEC                 db 0C4h
.eh_frame:0000000000024EED                 db  14h
.eh_frame:0000000000024EEE                 db    0
.eh_frame:0000000000024EEF                 db    0
.eh_frame:0000000000024EF0                 db 0A0h
.eh_frame:0000000000024EF1                 db  72h ; r
.eh_frame:0000000000024EF2                 db 0FEh
.eh_frame:0000000000024EF3                 db 0FFh
.eh_frame:0000000000024EF4                 db  8Eh
.eh_frame:0000000000024EF5                 db    0
.eh_frame:0000000000024EF6                 db    0
.eh_frame:0000000000024EF7                 db    0
.eh_frame:0000000000024EF8                 db    0
.eh_frame:0000000000024EF9                 db  44h ; D
.eh_frame:0000000000024EFA                 db  0Eh
.eh_frame:0000000000024EFB                 db  50h ; P
.eh_frame:0000000000024EFC                 db    2
.eh_frame:0000000000024EFD                 db  7Fh ; 
.eh_frame:0000000000024EFE                 db  0Ah
.eh_frame:0000000000024EFF                 db  0Eh
.eh_frame:0000000000024F00                 db    8
.eh_frame:0000000000024F01                 db  41h ; A
.eh_frame:0000000000024F02                 db  0Bh
.eh_frame:0000000000024F03                 db    0
.eh_frame:0000000000024F04                 db  18h
.eh_frame:0000000000024F05                 db    0
.eh_frame:0000000000024F06                 db    0
.eh_frame:0000000000024F07                 db    0
.eh_frame:0000000000024F08                 db 0E0h
.eh_frame:0000000000024F09                 db  14h
.eh_frame:0000000000024F0A                 db    0
.eh_frame:0000000000024F0B                 db    0
.eh_frame:0000000000024F0C                 db  14h
.eh_frame:0000000000024F0D                 db  73h ; s
.eh_frame:0000000000024F0E                 db 0FEh
.eh_frame:0000000000024F0F                 db 0FFh
.eh_frame:0000000000024F10                 db  91h
.eh_frame:0000000000024F11                 db    0
.eh_frame:0000000000024F12                 db    0
.eh_frame:0000000000024F13                 db    0
.eh_frame:0000000000024F14                 db    0
.eh_frame:0000000000024F15                 db  44h ; D
.eh_frame:0000000000024F16                 db  0Eh
.eh_frame:0000000000024F17                 db  50h ; P
.eh_frame:0000000000024F18                 db    2
.eh_frame:0000000000024F19                 db  82h
.eh_frame:0000000000024F1A                 db  0Ah
.eh_frame:0000000000024F1B                 db  0Eh
.eh_frame:0000000000024F1C                 db    8
.eh_frame:0000000000024F1D                 db  41h ; A
.eh_frame:0000000000024F1E                 db  0Bh
.eh_frame:0000000000024F1F                 db    0
.eh_frame:0000000000024F20                 db  10h
.eh_frame:0000000000024F21                 db    0
.eh_frame:0000000000024F22                 db    0
.eh_frame:0000000000024F23                 db    0
.eh_frame:0000000000024F24                 db 0FCh
.eh_frame:0000000000024F25                 db  14h
.eh_frame:0000000000024F26                 db    0
.eh_frame:0000000000024F27                 db    0
.eh_frame:0000000000024F28                 db  98h
.eh_frame:0000000000024F29                 db  73h ; s
.eh_frame:0000000000024F2A                 db 0FEh
.eh_frame:0000000000024F2B                 db 0FFh
.eh_frame:0000000000024F2C                 db  0Ch
.eh_frame:0000000000024F2D                 db    0
.eh_frame:0000000000024F2E                 db    0
.eh_frame:0000000000024F2F                 db    0
.eh_frame:0000000000024F30                 db    0
.eh_frame:0000000000024F31                 db    0
.eh_frame:0000000000024F32                 db    0
.eh_frame:0000000000024F33                 db    0
.eh_frame:0000000000024F34                 db  10h
.eh_frame:0000000000024F35                 db    0
.eh_frame:0000000000024F36                 db    0
.eh_frame:0000000000024F37                 db    0
.eh_frame:0000000000024F38                 db  10h
.eh_frame:0000000000024F39                 db  15h
.eh_frame:0000000000024F3A                 db    0
.eh_frame:0000000000024F3B                 db    0
.eh_frame:0000000000024F3C                 db  94h
.eh_frame:0000000000024F3D                 db  73h ; s
.eh_frame:0000000000024F3E                 db 0FEh
.eh_frame:0000000000024F3F                 db 0FFh
.eh_frame:0000000000024F40                 db  17h
.eh_frame:0000000000024F41                 db    0
.eh_frame:0000000000024F42                 db    0
.eh_frame:0000000000024F43                 db    0
.eh_frame:0000000000024F44                 db    0
.eh_frame:0000000000024F45                 db    0
.eh_frame:0000000000024F46                 db    0
.eh_frame:0000000000024F47                 db    0
.eh_frame:0000000000024F48                 db  10h
.eh_frame:0000000000024F49                 db    0
.eh_frame:0000000000024F4A                 db    0
.eh_frame:0000000000024F4B                 db    0
.eh_frame:0000000000024F4C                 db  24h ; $
.eh_frame:0000000000024F4D                 db  15h
.eh_frame:0000000000024F4E                 db    0
.eh_frame:0000000000024F4F                 db    0
.eh_frame:0000000000024F50                 db 0A0h
.eh_frame:0000000000024F51                 db  73h ; s
.eh_frame:0000000000024F52                 db 0FEh
.eh_frame:0000000000024F53                 db 0FFh
.eh_frame:0000000000024F54                 db  13h
.eh_frame:0000000000024F55                 db    0
.eh_frame:0000000000024F56                 db    0
.eh_frame:0000000000024F57                 db    0
.eh_frame:0000000000024F58                 db    0
.eh_frame:0000000000024F59                 db    0
.eh_frame:0000000000024F5A                 db    0
.eh_frame:0000000000024F5B                 db    0
.eh_frame:0000000000024F5C                 db  10h
.eh_frame:0000000000024F5D                 db    0
.eh_frame:0000000000024F5E                 db    0
.eh_frame:0000000000024F5F                 db    0
.eh_frame:0000000000024F60                 db  38h ; 8
.eh_frame:0000000000024F61                 db  15h
.eh_frame:0000000000024F62                 db    0
.eh_frame:0000000000024F63                 db    0
.eh_frame:0000000000024F64                 db 0ACh
.eh_frame:0000000000024F65                 db  73h ; s
.eh_frame:0000000000024F66                 db 0FEh
.eh_frame:0000000000024F67                 db 0FFh
.eh_frame:0000000000024F68                 db  0Ch
.eh_frame:0000000000024F69                 db    0
.eh_frame:0000000000024F6A                 db    0
.eh_frame:0000000000024F6B                 db    0
.eh_frame:0000000000024F6C                 db    0
.eh_frame:0000000000024F6D                 db    0
.eh_frame:0000000000024F6E                 db    0
.eh_frame:0000000000024F6F                 db    0
.eh_frame:0000000000024F70                 db  10h
.eh_frame:0000000000024F71                 db    0
.eh_frame:0000000000024F72                 db    0
.eh_frame:0000000000024F73                 db    0
.eh_frame:0000000000024F74                 db  4Ch ; L
.eh_frame:0000000000024F75                 db  15h
.eh_frame:0000000000024F76                 db    0
.eh_frame:0000000000024F77                 db    0
.eh_frame:0000000000024F78                 db 0A8h
.eh_frame:0000000000024F79                 db  73h ; s
.eh_frame:0000000000024F7A                 db 0FEh
.eh_frame:0000000000024F7B                 db 0FFh
.eh_frame:0000000000024F7C                 db  14h
.eh_frame:0000000000024F7D                 db    0
.eh_frame:0000000000024F7E                 db    0
.eh_frame:0000000000024F7F                 db    0
.eh_frame:0000000000024F80                 db    0
.eh_frame:0000000000024F81                 db    0
.eh_frame:0000000000024F82                 db    0
.eh_frame:0000000000024F83                 db    0
.eh_frame:0000000000024F84                 db  10h
.eh_frame:0000000000024F85                 db    0
.eh_frame:0000000000024F86                 db    0
.eh_frame:0000000000024F87                 db    0
.eh_frame:0000000000024F88                 db  60h ; `
.eh_frame:0000000000024F89                 db  15h
.eh_frame:0000000000024F8A                 db    0
.eh_frame:0000000000024F8B                 db    0
.eh_frame:0000000000024F8C                 db 0B4h
.eh_frame:0000000000024F8D                 db  73h ; s
.eh_frame:0000000000024F8E                 db 0FEh
.eh_frame:0000000000024F8F                 db 0FFh
.eh_frame:0000000000024F90                 db  13h
.eh_frame:0000000000024F91                 db    0
.eh_frame:0000000000024F92                 db    0
.eh_frame:0000000000024F93                 db    0
.eh_frame:0000000000024F94                 db    0
.eh_frame:0000000000024F95                 db    0
.eh_frame:0000000000024F96                 db    0
.eh_frame:0000000000024F97                 db    0
.eh_frame:0000000000024F98                 db  14h
.eh_frame:0000000000024F99                 db    0
.eh_frame:0000000000024F9A                 db    0
.eh_frame:0000000000024F9B                 db    0
.eh_frame:0000000000024F9C                 db  74h ; t
.eh_frame:0000000000024F9D                 db  15h
.eh_frame:0000000000024F9E                 db    0
.eh_frame:0000000000024F9F                 db    0
.eh_frame:0000000000024FA0                 db 0C0h
.eh_frame:0000000000024FA1                 db  73h ; s
.eh_frame:0000000000024FA2                 db 0FEh
.eh_frame:0000000000024FA3                 db 0FFh
.eh_frame:0000000000024FA4                 db  18h
.eh_frame:0000000000024FA5                 db    0
.eh_frame:0000000000024FA6                 db    0
.eh_frame:0000000000024FA7                 db    0
.eh_frame:0000000000024FA8                 db    0
.eh_frame:0000000000024FA9                 db    0
.eh_frame:0000000000024FAA                 db    0
.eh_frame:0000000000024FAB                 db    0
.eh_frame:0000000000024FAC                 db    0
.eh_frame:0000000000024FAD                 db    0
.eh_frame:0000000000024FAE                 db    0
.eh_frame:0000000000024FAF                 db    0
.eh_frame:0000000000024FB0                 db  24h ; $
.eh_frame:0000000000024FB1                 db    0
.eh_frame:0000000000024FB2                 db    0
.eh_frame:0000000000024FB3                 db    0
.eh_frame:0000000000024FB4                 db  8Ch
.eh_frame:0000000000024FB5                 db  15h
.eh_frame:0000000000024FB6                 db    0
.eh_frame:0000000000024FB7                 db    0
.eh_frame:0000000000024FB8                 db 0C8h
.eh_frame:0000000000024FB9                 db  73h ; s
.eh_frame:0000000000024FBA                 db 0FEh
.eh_frame:0000000000024FBB                 db 0FFh
.eh_frame:0000000000024FBC                 db  31h ; 1
.eh_frame:0000000000024FBD                 db    0
.eh_frame:0000000000024FBE                 db    0
.eh_frame:0000000000024FBF                 db    0
.eh_frame:0000000000024FC0                 db    0
.eh_frame:0000000000024FC1                 db  41h ; A
.eh_frame:0000000000024FC2                 db  0Eh
.eh_frame:0000000000024FC3                 db  10h
.eh_frame:0000000000024FC4                 db  86h
.eh_frame:0000000000024FC5                 db    2
.eh_frame:0000000000024FC6                 db  41h ; A
.eh_frame:0000000000024FC7                 db  0Eh
.eh_frame:0000000000024FC8                 db  18h
.eh_frame:0000000000024FC9                 db  83h
.eh_frame:0000000000024FCA                 db    3
.eh_frame:0000000000024FCB                 db  4Fh ; O
.eh_frame:0000000000024FCC                 db  0Eh
.eh_frame:0000000000024FCD                 db  20h
.eh_frame:0000000000024FCE                 db  5Dh ; ]
.eh_frame:0000000000024FCF                 db  0Eh
.eh_frame:0000000000024FD0                 db  18h
.eh_frame:0000000000024FD1                 db  41h ; A
.eh_frame:0000000000024FD2                 db  0Eh
.eh_frame:0000000000024FD3                 db  10h
.eh_frame:0000000000024FD4                 db  41h ; A
.eh_frame:0000000000024FD5                 db  0Eh
.eh_frame:0000000000024FD6                 db    8
.eh_frame:0000000000024FD7                 db    0
.eh_frame:0000000000024FD8                 db  10h
.eh_frame:0000000000024FD9                 db    1
.eh_frame:0000000000024FDA                 db    0
.eh_frame:0000000000024FDB                 db    0
.eh_frame:0000000000024FDC                 db 0B4h
.eh_frame:0000000000024FDD                 db  15h
.eh_frame:0000000000024FDE                 db    0
.eh_frame:0000000000024FDF                 db    0
.eh_frame:0000000000024FE0                 db 0E0h
.eh_frame:0000000000024FE1                 db  73h ; s
.eh_frame:0000000000024FE2                 db 0FEh
.eh_frame:0000000000024FE3                 db 0FFh
.eh_frame:0000000000024FE4                 db  17h
.eh_frame:0000000000024FE5                 db    4
.eh_frame:0000000000024FE6                 db    0
.eh_frame:0000000000024FE7                 db    0
.eh_frame:0000000000024FE8                 db    0
.eh_frame:0000000000024FE9                 db  42h ; B
.eh_frame:0000000000024FEA                 db  0Eh
.eh_frame:0000000000024FEB                 db  10h
.eh_frame:0000000000024FEC                 db  8Fh
.eh_frame:0000000000024FED                 db    2
.eh_frame:0000000000024FEE                 db  42h ; B
.eh_frame:0000000000024FEF                 db  0Eh
.eh_frame:0000000000024FF0                 db  18h
.eh_frame:0000000000024FF1                 db  8Eh
.eh_frame:0000000000024FF2                 db    3
.eh_frame:0000000000024FF3                 db  42h ; B
.eh_frame:0000000000024FF4                 db  0Eh
.eh_frame:0000000000024FF5                 db  20h
.eh_frame:0000000000024FF6                 db  8Dh
.eh_frame:0000000000024FF7                 db    4
.eh_frame:0000000000024FF8                 db  42h ; B
.eh_frame:0000000000024FF9                 db  0Eh
.eh_frame:0000000000024FFA                 db  28h ; (
.eh_frame:0000000000024FFB                 db  8Ch
.eh_frame:0000000000024FFC                 db    5
.eh_frame:0000000000024FFD                 db  44h ; D
.eh_frame:0000000000024FFE                 db  0Eh
.eh_frame:0000000000024FFF                 db  30h ; 0
.eh_frame:0000000000025000                 db  86h
.eh_frame:0000000000025001                 db    6
.eh_frame:0000000000025002                 db  41h ; A
.eh_frame:0000000000025003                 db  0Eh
.eh_frame:0000000000025004                 db  38h ; 8
.eh_frame:0000000000025005                 db  83h
.eh_frame:0000000000025006                 db    7
.eh_frame:0000000000025007                 db  4Ah ; J
.eh_frame:0000000000025008                 db  0Eh
.eh_frame:0000000000025009                 db  60h ; `
.eh_frame:000000000002500A                 db    2
.eh_frame:000000000002500B                 db 0DDh
.eh_frame:000000000002500C                 db  0Eh
.eh_frame:000000000002500D                 db  68h ; h
.eh_frame:000000000002500E                 db  57h ; W
.eh_frame:000000000002500F                 db  0Eh
.eh_frame:0000000000025010                 db  70h ; p
.eh_frame:0000000000025011                 db  42h ; B
.eh_frame:0000000000025012                 db  0Eh
.eh_frame:0000000000025013                 db  78h ; x
.eh_frame:0000000000025014                 db  42h ; B
.eh_frame:0000000000025015                 db  0Eh
.eh_frame:0000000000025016                 db  80h
.eh_frame:0000000000025017                 db    1
.eh_frame:0000000000025018                 db  42h ; B
.eh_frame:0000000000025019                 db  0Eh
.eh_frame:000000000002501A                 db  88h
.eh_frame:000000000002501B                 db    1
.eh_frame:000000000002501C                 db  42h ; B
.eh_frame:000000000002501D                 db  0Eh
.eh_frame:000000000002501E                 db  90h
.eh_frame:000000000002501F                 db    1
.eh_frame:0000000000025020                 db  53h ; S
.eh_frame:0000000000025021                 db  0Eh
.eh_frame:0000000000025022                 db  60h ; `
.eh_frame:0000000000025023                 db  44h ; D
.eh_frame:0000000000025024                 db  0Ah
.eh_frame:0000000000025025                 db  0Eh
.eh_frame:0000000000025026                 db  38h ; 8
.eh_frame:0000000000025027                 db  41h ; A
.eh_frame:0000000000025028                 db  0Eh
.eh_frame:0000000000025029                 db  30h ; 0
.eh_frame:000000000002502A                 db  41h ; A
.eh_frame:000000000002502B                 db  0Eh
.eh_frame:000000000002502C                 db  28h ; (
.eh_frame:000000000002502D                 db  42h ; B
.eh_frame:000000000002502E                 db  0Eh
.eh_frame:000000000002502F                 db  20h
.eh_frame:0000000000025030                 db  42h ; B
.eh_frame:0000000000025031                 db  0Eh
.eh_frame:0000000000025032                 db  18h
.eh_frame:0000000000025033                 db  42h ; B
.eh_frame:0000000000025034                 db  0Eh
.eh_frame:0000000000025035                 db  10h
.eh_frame:0000000000025036                 db  42h ; B
.eh_frame:0000000000025037                 db  0Eh
.eh_frame:0000000000025038                 db    8
.eh_frame:0000000000025039                 db  44h ; D
.eh_frame:000000000002503A                 db  0Bh
.eh_frame:000000000002503B                 db    2
.eh_frame:000000000002503C                 db  78h ; x
.eh_frame:000000000002503D                 db  0Ah
.eh_frame:000000000002503E                 db  0Eh
.eh_frame:000000000002503F                 db  68h ; h
.eh_frame:0000000000025040                 db  48h ; H
.eh_frame:0000000000025041                 db  0Bh
.eh_frame:0000000000025042                 db  5Ah ; Z
.eh_frame:0000000000025043                 db  0Ah
.eh_frame:0000000000025044                 db  0Eh
.eh_frame:0000000000025045                 db  38h ; 8
.eh_frame:0000000000025046                 db  47h ; G
.eh_frame:0000000000025047                 db  0Eh
.eh_frame:0000000000025048                 db  30h ; 0
.eh_frame:0000000000025049                 db  41h ; A
.eh_frame:000000000002504A                 db  0Eh
.eh_frame:000000000002504B                 db  28h ; (
.eh_frame:000000000002504C                 db  42h ; B
.eh_frame:000000000002504D                 db  0Eh
.eh_frame:000000000002504E                 db  20h
.eh_frame:000000000002504F                 db  42h ; B
.eh_frame:0000000000025050                 db  0Eh
.eh_frame:0000000000025051                 db  18h
.eh_frame:0000000000025052                 db  42h ; B
.eh_frame:0000000000025053                 db  0Eh
.eh_frame:0000000000025054                 db  10h
.eh_frame:0000000000025055                 db  42h ; B
.eh_frame:0000000000025056                 db  0Eh
.eh_frame:0000000000025057                 db    8
.eh_frame:0000000000025058                 db  56h ; V
.eh_frame:0000000000025059                 db  0Bh
.eh_frame:000000000002505A                 db  5Eh ; ^
.eh_frame:000000000002505B                 db  0Ah
.eh_frame:000000000002505C                 db  0Eh
.eh_frame:000000000002505D                 db  38h ; 8
.eh_frame:000000000002505E                 db  52h ; R
.eh_frame:000000000002505F                 db  0Eh
.eh_frame:0000000000025060                 db  30h ; 0
.eh_frame:0000000000025061                 db  41h ; A
.eh_frame:0000000000025062                 db  0Eh
.eh_frame:0000000000025063                 db  28h ; (
.eh_frame:0000000000025064                 db  42h ; B
.eh_frame:0000000000025065                 db  0Eh
.eh_frame:0000000000025066                 db  20h
.eh_frame:0000000000025067                 db  42h ; B
.eh_frame:0000000000025068                 db  0Eh
.eh_frame:0000000000025069                 db  18h
.eh_frame:000000000002506A                 db  42h ; B
.eh_frame:000000000002506B                 db  0Eh
.eh_frame:000000000002506C                 db  10h
.eh_frame:000000000002506D                 db  42h ; B
.eh_frame:000000000002506E                 db  0Eh
.eh_frame:000000000002506F                 db    8
.eh_frame:0000000000025070                 db  4Fh ; O
.eh_frame:0000000000025071                 db  0Bh
.eh_frame:0000000000025072                 db  62h ; b
.eh_frame:0000000000025073                 db  0Ah
.eh_frame:0000000000025074                 db  0Eh
.eh_frame:0000000000025075                 db  38h ; 8
.eh_frame:0000000000025076                 db  50h ; P
.eh_frame:0000000000025077                 db  0Eh
.eh_frame:0000000000025078                 db  30h ; 0
.eh_frame:0000000000025079                 db  41h ; A
.eh_frame:000000000002507A                 db  0Eh
.eh_frame:000000000002507B                 db  28h ; (
.eh_frame:000000000002507C                 db  42h ; B
.eh_frame:000000000002507D                 db  0Eh
.eh_frame:000000000002507E                 db  20h
.eh_frame:000000000002507F                 db  42h ; B
.eh_frame:0000000000025080                 db  0Eh
.eh_frame:0000000000025081                 db  18h
.eh_frame:0000000000025082                 db  42h ; B
.eh_frame:0000000000025083                 db  0Eh
.eh_frame:0000000000025084                 db  10h
.eh_frame:0000000000025085                 db  42h ; B
.eh_frame:0000000000025086                 db  0Eh
.eh_frame:0000000000025087                 db    8
.eh_frame:0000000000025088                 db  55h ; U
.eh_frame:0000000000025089                 db  0Bh
.eh_frame:000000000002508A                 db  66h ; f
.eh_frame:000000000002508B                 db  0Eh
.eh_frame:000000000002508C                 db  68h ; h
.eh_frame:000000000002508D                 db  42h ; B
.eh_frame:000000000002508E                 db  0Eh
.eh_frame:000000000002508F                 db  70h ; p
.eh_frame:0000000000025090                 db  5Ch ; \
.eh_frame:0000000000025091                 db  0Eh
.eh_frame:0000000000025092                 db  68h ; h
.eh_frame:0000000000025093                 db  41h ; A
.eh_frame:0000000000025094                 db  0Eh
.eh_frame:0000000000025095                 db  60h ; `
.eh_frame:0000000000025096                 db  44h ; D
.eh_frame:0000000000025097                 db  0Ah
.eh_frame:0000000000025098                 db  0Eh
.eh_frame:0000000000025099                 db  38h ; 8
.eh_frame:000000000002509A                 db  41h ; A
.eh_frame:000000000002509B                 db  0Eh
.eh_frame:000000000002509C                 db  30h ; 0
.eh_frame:000000000002509D                 db  41h ; A
.eh_frame:000000000002509E                 db  0Eh
.eh_frame:000000000002509F                 db  28h ; (
.eh_frame:00000000000250A0                 db  42h ; B
.eh_frame:00000000000250A1                 db  0Eh
.eh_frame:00000000000250A2                 db  20h
.eh_frame:00000000000250A3                 db  42h ; B
.eh_frame:00000000000250A4                 db  0Eh
.eh_frame:00000000000250A5                 db  18h
.eh_frame:00000000000250A6                 db  42h ; B
.eh_frame:00000000000250A7                 db  0Eh
.eh_frame:00000000000250A8                 db  10h
.eh_frame:00000000000250A9                 db  42h ; B
.eh_frame:00000000000250AA                 db  0Eh
.eh_frame:00000000000250AB                 db    8
.eh_frame:00000000000250AC                 db  45h ; E
.eh_frame:00000000000250AD                 db  0Bh
.eh_frame:00000000000250AE                 db  68h ; h
.eh_frame:00000000000250AF                 db  0Ah
.eh_frame:00000000000250B0                 db  0Eh
.eh_frame:00000000000250B1                 db  68h ; h
.eh_frame:00000000000250B2                 db  48h ; H
.eh_frame:00000000000250B3                 db  0Bh
.eh_frame:00000000000250B4                 db  72h ; r
.eh_frame:00000000000250B5                 db  0Eh
.eh_frame:00000000000250B6                 db  68h ; h
.eh_frame:00000000000250B7                 db  45h ; E
.eh_frame:00000000000250B8                 db  0Eh
.eh_frame:00000000000250B9                 db  70h ; p
.eh_frame:00000000000250BA                 db  42h ; B
.eh_frame:00000000000250BB                 db  0Eh
.eh_frame:00000000000250BC                 db  78h ; x
.eh_frame:00000000000250BD                 db  42h ; B
.eh_frame:00000000000250BE                 db  0Eh
.eh_frame:00000000000250BF                 db  80h
.eh_frame:00000000000250C0                 db    1
.eh_frame:00000000000250C1                 db  5Eh ; ^
.eh_frame:00000000000250C2                 db  0Eh
.eh_frame:00000000000250C3                 db  60h ; `
.eh_frame:00000000000250C4                 db  44h ; D
.eh_frame:00000000000250C5                 db  0Ah
.eh_frame:00000000000250C6                 db  0Eh
.eh_frame:00000000000250C7                 db  38h ; 8
.eh_frame:00000000000250C8                 db  41h ; A
.eh_frame:00000000000250C9                 db  0Eh
.eh_frame:00000000000250CA                 db  30h ; 0
.eh_frame:00000000000250CB                 db  41h ; A
.eh_frame:00000000000250CC                 db  0Eh
.eh_frame:00000000000250CD                 db  28h ; (
.eh_frame:00000000000250CE                 db  42h ; B
.eh_frame:00000000000250CF                 db  0Eh
.eh_frame:00000000000250D0                 db  20h
.eh_frame:00000000000250D1                 db  42h ; B
.eh_frame:00000000000250D2                 db  0Eh
.eh_frame:00000000000250D3                 db  18h
.eh_frame:00000000000250D4                 db  42h ; B
.eh_frame:00000000000250D5                 db  0Eh
.eh_frame:00000000000250D6                 db  10h
.eh_frame:00000000000250D7                 db  42h ; B
.eh_frame:00000000000250D8                 db  0Eh
.eh_frame:00000000000250D9                 db    8
.eh_frame:00000000000250DA                 db  41h ; A
.eh_frame:00000000000250DB                 db  0Bh
.eh_frame:00000000000250DC                 db  79h ; y
.eh_frame:00000000000250DD                 db  0Ah
.eh_frame:00000000000250DE                 db  0Eh
.eh_frame:00000000000250DF                 db  68h ; h
.eh_frame:00000000000250E0                 db  42h ; B
.eh_frame:00000000000250E1                 db  0Eh
.eh_frame:00000000000250E2                 db  70h ; p
.eh_frame:00000000000250E3                 db  42h ; B
.eh_frame:00000000000250E4                 db  0Eh
.eh_frame:00000000000250E5                 db  78h ; x
.eh_frame:00000000000250E6                 db  42h ; B
.eh_frame:00000000000250E7                 db  0Eh
.eh_frame:00000000000250E8                 db  80h
.eh_frame:00000000000250E9                 db    1
.eh_frame:00000000000250EA                 db  51h ; Q
.eh_frame:00000000000250EB                 db  0Bh
.eh_frame:00000000000250EC                 db  10h
.eh_frame:00000000000250ED                 db    0
.eh_frame:00000000000250EE                 db    0
.eh_frame:00000000000250EF                 db    0
.eh_frame:00000000000250F0                 db 0C8h
.eh_frame:00000000000250F1                 db  16h
.eh_frame:00000000000250F2                 db    0
.eh_frame:00000000000250F3                 db    0
.eh_frame:00000000000250F4                 db 0ECh
.eh_frame:00000000000250F5                 db  76h ; v
.eh_frame:00000000000250F6                 db 0FEh
.eh_frame:00000000000250F7                 db 0FFh
.eh_frame:00000000000250F8                 db  20h
.eh_frame:00000000000250F9                 db    0
.eh_frame:00000000000250FA                 db    0
.eh_frame:00000000000250FB                 db    0
.eh_frame:00000000000250FC                 db    0
.eh_frame:00000000000250FD                 db    0
.eh_frame:00000000000250FE                 db    0
.eh_frame:00000000000250FF                 db    0
.eh_frame:0000000000025100                 db  18h
.eh_frame:0000000000025101                 db    0
.eh_frame:0000000000025102                 db    0
.eh_frame:0000000000025103                 db    0
.eh_frame:0000000000025104                 db 0DCh
.eh_frame:0000000000025105                 db  16h
.eh_frame:0000000000025106                 db    0
.eh_frame:0000000000025107                 db    0
.eh_frame:0000000000025108                 db 0F8h
.eh_frame:0000000000025109                 db  76h ; v
.eh_frame:000000000002510A                 db 0FEh
.eh_frame:000000000002510B                 db 0FFh
.eh_frame:000000000002510C                 db  78h ; x
.eh_frame:000000000002510D                 db    0
.eh_frame:000000000002510E                 db    0
.eh_frame:000000000002510F                 db    0
.eh_frame:0000000000025110                 db    0
.eh_frame:0000000000025111                 db  44h ; D
.eh_frame:0000000000025112                 db  0Eh
.eh_frame:0000000000025113                 db  70h ; p
.eh_frame:0000000000025114                 db    2
.eh_frame:0000000000025115                 db  60h ; `
.eh_frame:0000000000025116                 db  0Ah
.eh_frame:0000000000025117                 db  0Eh
.eh_frame:0000000000025118                 db    8
.eh_frame:0000000000025119                 db  41h ; A
.eh_frame:000000000002511A                 db  0Bh
.eh_frame:000000000002511B                 db    0
.eh_frame:000000000002511C                 db  28h ; (
.eh_frame:000000000002511D                 db    0
.eh_frame:000000000002511E                 db    0
.eh_frame:000000000002511F                 db    0
.eh_frame:0000000000025120                 db 0F8h
.eh_frame:0000000000025121                 db  16h
.eh_frame:0000000000025122                 db    0
.eh_frame:0000000000025123                 db    0
.eh_frame:0000000000025124                 db  5Ch ; \
.eh_frame:0000000000025125                 db  77h ; w
.eh_frame:0000000000025126                 db 0FEh
.eh_frame:0000000000025127                 db 0FFh
.eh_frame:0000000000025128                 db 0D5h
.eh_frame:0000000000025129                 db    0
.eh_frame:000000000002512A                 db    0
.eh_frame:000000000002512B                 db    0
.eh_frame:000000000002512C                 db    0
.eh_frame:000000000002512D                 db  41h ; A
.eh_frame:000000000002512E                 db  0Eh
.eh_frame:000000000002512F                 db  10h
.eh_frame:0000000000025130                 db  86h
.eh_frame:0000000000025131                 db    2
.eh_frame:0000000000025132                 db  41h ; A
.eh_frame:0000000000025133                 db  0Eh
.eh_frame:0000000000025134                 db  18h
.eh_frame:0000000000025135                 db  83h
.eh_frame:0000000000025136                 db    3
.eh_frame:0000000000025137                 db  50h ; P
.eh_frame:0000000000025138                 db  0Eh
.eh_frame:0000000000025139                 db 0D0h
.eh_frame:000000000002513A                 db    1
.eh_frame:000000000002513B                 db    2
.eh_frame:000000000002513C                 db 0ABh
.eh_frame:000000000002513D                 db  0Ah
.eh_frame:000000000002513E                 db  0Eh
.eh_frame:000000000002513F                 db  18h
.eh_frame:0000000000025140                 db  41h ; A
.eh_frame:0000000000025141                 db  0Eh
.eh_frame:0000000000025142                 db  10h
.eh_frame:0000000000025143                 db  41h ; A
.eh_frame:0000000000025144                 db  0Eh
.eh_frame:0000000000025145                 db    8
.eh_frame:0000000000025146                 db  41h ; A
.eh_frame:0000000000025147                 db  0Bh
.eh_frame:0000000000025148                 db  1Ch
.eh_frame:0000000000025149                 db    0
.eh_frame:000000000002514A                 db    0
.eh_frame:000000000002514B                 db    0
.eh_frame:000000000002514C                 db  24h ; $
.eh_frame:000000000002514D                 db  17h
.eh_frame:000000000002514E                 db    0
.eh_frame:000000000002514F                 db    0
.eh_frame:0000000000025150                 db  10h
.eh_frame:0000000000025151                 db  78h ; x
.eh_frame:0000000000025152                 db 0FEh
.eh_frame:0000000000025153                 db 0FFh
.eh_frame:0000000000025154                 db  80h
.eh_frame:0000000000025155                 db    0
.eh_frame:0000000000025156                 db    0
.eh_frame:0000000000025157                 db    0
.eh_frame:0000000000025158                 db    0
.eh_frame:0000000000025159                 db  41h ; A
.eh_frame:000000000002515A                 db  0Eh
.eh_frame:000000000002515B                 db  10h
.eh_frame:000000000002515C                 db  83h
.eh_frame:000000000002515D                 db    2
.eh_frame:000000000002515E                 db    2
.eh_frame:000000000002515F                 db  7Ah ; z
.eh_frame:0000000000025160                 db  0Eh
.eh_frame:0000000000025161                 db    8
.eh_frame:0000000000025162                 db    0
.eh_frame:0000000000025163                 db    0
.eh_frame:0000000000025164                 db    0
.eh_frame:0000000000025165                 db    0
.eh_frame:0000000000025166                 db    0
.eh_frame:0000000000025167                 db    0
.eh_frame:0000000000025168                 db  18h
.eh_frame:0000000000025169                 db    0
.eh_frame:000000000002516A                 db    0
.eh_frame:000000000002516B                 db    0
.eh_frame:000000000002516C                 db  44h ; D
.eh_frame:000000000002516D                 db  17h
.eh_frame:000000000002516E                 db    0
.eh_frame:000000000002516F                 db    0
.eh_frame:0000000000025170                 db  70h ; p
.eh_frame:0000000000025171                 db  78h ; x
.eh_frame:0000000000025172                 db 0FEh
.eh_frame:0000000000025173                 db 0FFh
.eh_frame:0000000000025174                 db  1Ah
.eh_frame:0000000000025175                 db    0
.eh_frame:0000000000025176                 db    0
.eh_frame:0000000000025177                 db    0
.eh_frame:0000000000025178                 db    0
.eh_frame:0000000000025179                 db  41h ; A
.eh_frame:000000000002517A                 db  0Eh
.eh_frame:000000000002517B                 db  10h
.eh_frame:000000000002517C                 db  83h
.eh_frame:000000000002517D                 db    2
.eh_frame:000000000002517E                 db  53h ; S
.eh_frame:000000000002517F                 db  0Ah
.eh_frame:0000000000025180                 db  0Eh
.eh_frame:0000000000025181                 db    8
.eh_frame:0000000000025182                 db  41h ; A
.eh_frame:0000000000025183                 db  0Bh
.eh_frame:0000000000025184                 db  10h
.eh_frame:0000000000025185                 db    0
.eh_frame:0000000000025186                 db    0
.eh_frame:0000000000025187                 db    0
.eh_frame:0000000000025188                 db  60h ; `
.eh_frame:0000000000025189                 db  17h
.eh_frame:000000000002518A                 db    0
.eh_frame:000000000002518B                 db    0
.eh_frame:000000000002518C                 db  74h ; t
.eh_frame:000000000002518D                 db  78h ; x
.eh_frame:000000000002518E                 db 0FEh
.eh_frame:000000000002518F                 db 0FFh
.eh_frame:0000000000025190                 db  24h ; $
.eh_frame:0000000000025191                 db    0
.eh_frame:0000000000025192                 db    0
.eh_frame:0000000000025193                 db    0
.eh_frame:0000000000025194                 db    0
.eh_frame:0000000000025195                 db  5Fh ; _
.eh_frame:0000000000025196                 db  0Eh
.eh_frame:0000000000025197                 db  10h
.eh_frame:0000000000025198                 db  10h
.eh_frame:0000000000025199                 db    0
.eh_frame:000000000002519A                 db    0
.eh_frame:000000000002519B                 db    0
.eh_frame:000000000002519C                 db  74h ; t
.eh_frame:000000000002519D                 db  17h
.eh_frame:000000000002519E                 db    0
.eh_frame:000000000002519F                 db    0
.eh_frame:00000000000251A0                 db  90h
.eh_frame:00000000000251A1                 db  78h ; x
.eh_frame:00000000000251A2                 db 0FEh
.eh_frame:00000000000251A3                 db 0FFh
.eh_frame:00000000000251A4                 db    2
.eh_frame:00000000000251A5                 db    0
.eh_frame:00000000000251A6                 db    0
.eh_frame:00000000000251A7                 db    0
.eh_frame:00000000000251A8                 db    0
.eh_frame:00000000000251A9                 db    0
.eh_frame:00000000000251AA                 db    0
.eh_frame:00000000000251AB                 db    0
.eh_frame:00000000000251AC                 db  20h
.eh_frame:00000000000251AD                 db    0
.eh_frame:00000000000251AE                 db    0
.eh_frame:00000000000251AF                 db    0
.eh_frame:00000000000251B0                 db  88h
.eh_frame:00000000000251B1                 db  17h
.eh_frame:00000000000251B2                 db    0
.eh_frame:00000000000251B3                 db    0
.eh_frame:00000000000251B4                 db  8Ch
.eh_frame:00000000000251B5                 db  78h ; x
.eh_frame:00000000000251B6                 db 0FEh
.eh_frame:00000000000251B7                 db 0FFh
.eh_frame:00000000000251B8                 db  36h ; 6
.eh_frame:00000000000251B9                 db    0
.eh_frame:00000000000251BA                 db    0
.eh_frame:00000000000251BB                 db    0
.eh_frame:00000000000251BC                 db    0
.eh_frame:00000000000251BD                 db  44h ; D
.eh_frame:00000000000251BE                 db  0Eh
.eh_frame:00000000000251BF                 db  10h
.eh_frame:00000000000251C0                 db  83h
.eh_frame:00000000000251C1                 db    2
.eh_frame:00000000000251C2                 db  5Dh ; ]
.eh_frame:00000000000251C3                 db  0Ah
.eh_frame:00000000000251C4                 db  0Eh
.eh_frame:00000000000251C5                 db    8
.eh_frame:00000000000251C6                 db  47h ; G
.eh_frame:00000000000251C7                 db  0Bh
.eh_frame:00000000000251C8                 db  48h ; H
.eh_frame:00000000000251C9                 db  0Ah
.eh_frame:00000000000251CA                 db  0Eh
.eh_frame:00000000000251CB                 db    8
.eh_frame:00000000000251CC                 db  41h ; A
.eh_frame:00000000000251CD                 db  0Bh
.eh_frame:00000000000251CE                 db    0
.eh_frame:00000000000251CF                 db    0
.eh_frame:00000000000251D0                 db  10h
.eh_frame:00000000000251D1                 db    0
.eh_frame:00000000000251D2                 db    0
.eh_frame:00000000000251D3                 db    0
.eh_frame:00000000000251D4                 db 0ACh
.eh_frame:00000000000251D5                 db  17h
.eh_frame:00000000000251D6                 db    0
.eh_frame:00000000000251D7                 db    0
.eh_frame:00000000000251D8                 db 0A8h
.eh_frame:00000000000251D9                 db  78h ; x
.eh_frame:00000000000251DA                 db 0FEh
.eh_frame:00000000000251DB                 db 0FFh
.eh_frame:00000000000251DC                 db  24h ; $
.eh_frame:00000000000251DD                 db    0
.eh_frame:00000000000251DE                 db    0
.eh_frame:00000000000251DF                 db    0
.eh_frame:00000000000251E0                 db    0
.eh_frame:00000000000251E1                 db  5Fh ; _
.eh_frame:00000000000251E2                 db  0Eh
.eh_frame:00000000000251E3                 db  10h
.eh_frame:00000000000251E4                 db  14h
.eh_frame:00000000000251E5                 db    0
.eh_frame:00000000000251E6                 db    0
.eh_frame:00000000000251E7                 db    0
.eh_frame:00000000000251E8                 db 0C0h
.eh_frame:00000000000251E9                 db  17h
.eh_frame:00000000000251EA                 db    0
.eh_frame:00000000000251EB                 db    0
.eh_frame:00000000000251EC                 db 0C4h
.eh_frame:00000000000251ED                 db  78h ; x
.eh_frame:00000000000251EE                 db 0FEh
.eh_frame:00000000000251EF                 db 0FFh
.eh_frame:00000000000251F0                 db  82h
.eh_frame:00000000000251F1                 db    0
.eh_frame:00000000000251F2                 db    0
.eh_frame:00000000000251F3                 db    0
.eh_frame:00000000000251F4                 db    0
.eh_frame:00000000000251F5                 db    2
.eh_frame:00000000000251F6                 db  5Fh ; _
.eh_frame:00000000000251F7                 db  0Eh
.eh_frame:00000000000251F8                 db  10h
.eh_frame:00000000000251F9                 db  49h ; I
.eh_frame:00000000000251FA                 db  0Eh
.eh_frame:00000000000251FB                 db    8
.eh_frame:00000000000251FC                 db  14h
.eh_frame:00000000000251FD                 db    0
.eh_frame:00000000000251FE                 db    0
.eh_frame:00000000000251FF                 db    0
.eh_frame:0000000000025200                 db 0D8h
.eh_frame:0000000000025201                 db  17h
.eh_frame:0000000000025202                 db    0
.eh_frame:0000000000025203                 db    0
.eh_frame:0000000000025204                 db  3Ch ; <
.eh_frame:0000000000025205                 db  79h ; y
.eh_frame:0000000000025206                 db 0FEh
.eh_frame:0000000000025207                 db 0FFh
.eh_frame:0000000000025208                 db  4Ah ; J
.eh_frame:0000000000025209                 db    0
.eh_frame:000000000002520A                 db    0
.eh_frame:000000000002520B                 db    0
.eh_frame:000000000002520C                 db    0
.eh_frame:000000000002520D                 db    2
.eh_frame:000000000002520E                 db  45h ; E
.eh_frame:000000000002520F                 db  0Eh
.eh_frame:0000000000025210                 db  10h
.eh_frame:0000000000025211                 db    0
.eh_frame:0000000000025212                 db    0
.eh_frame:0000000000025213                 db    0
.eh_frame:0000000000025214                 db  18h
.eh_frame:0000000000025215                 db    0
.eh_frame:0000000000025216                 db    0
.eh_frame:0000000000025217                 db    0
.eh_frame:0000000000025218                 db 0F0h
.eh_frame:0000000000025219                 db  17h
.eh_frame:000000000002521A                 db    0
.eh_frame:000000000002521B                 db    0
.eh_frame:000000000002521C                 db  74h ; t
.eh_frame:000000000002521D                 db  79h ; y
.eh_frame:000000000002521E                 db 0FEh
.eh_frame:000000000002521F                 db 0FFh
.eh_frame:0000000000025220                 db  17h
.eh_frame:0000000000025221                 db    0
.eh_frame:0000000000025222                 db    0
.eh_frame:0000000000025223                 db    0
.eh_frame:0000000000025224                 db    0
.eh_frame:0000000000025225                 db  41h ; A
.eh_frame:0000000000025226                 db  0Eh
.eh_frame:0000000000025227                 db  10h
.eh_frame:0000000000025228                 db  83h
.eh_frame:0000000000025229                 db    2
.eh_frame:000000000002522A                 db  51h ; Q
.eh_frame:000000000002522B                 db  0Eh
.eh_frame:000000000002522C                 db    8
.eh_frame:000000000002522D                 db    0
.eh_frame:000000000002522E                 db    0
.eh_frame:000000000002522F                 db    0
.eh_frame:0000000000025230                 db  18h
.eh_frame:0000000000025231                 db    0
.eh_frame:0000000000025232                 db    0
.eh_frame:0000000000025233                 db    0
.eh_frame:0000000000025234                 db  0Ch
.eh_frame:0000000000025235                 db  18h
.eh_frame:0000000000025236                 db    0
.eh_frame:0000000000025237                 db    0
.eh_frame:0000000000025238                 db  78h ; x
.eh_frame:0000000000025239                 db  79h ; y
.eh_frame:000000000002523A                 db 0FEh
.eh_frame:000000000002523B                 db 0FFh
.eh_frame:000000000002523C                 db  2Eh ; .
.eh_frame:000000000002523D                 db    0
.eh_frame:000000000002523E                 db    0
.eh_frame:000000000002523F                 db    0
.eh_frame:0000000000025240                 db    0
.eh_frame:0000000000025241                 db  47h ; G
.eh_frame:0000000000025242                 db  0Eh
.eh_frame:0000000000025243                 db  10h
.eh_frame:0000000000025244                 db  61h ; a
.eh_frame:0000000000025245                 db  0Ah
.eh_frame:0000000000025246                 db  0Eh
.eh_frame:0000000000025247                 db    8
.eh_frame:0000000000025248                 db  41h ; A
.eh_frame:0000000000025249                 db  0Bh
.eh_frame:000000000002524A                 db    0
.eh_frame:000000000002524B                 db    0
.eh_frame:000000000002524C                 db  24h ; $
.eh_frame:000000000002524D                 db    0
.eh_frame:000000000002524E                 db    0
.eh_frame:000000000002524F                 db    0
.eh_frame:0000000000025250                 db  28h ; (
.eh_frame:0000000000025251                 db  18h
.eh_frame:0000000000025252                 db    0
.eh_frame:0000000000025253                 db    0
.eh_frame:0000000000025254                 db  8Ch
.eh_frame:0000000000025255                 db  79h ; y
.eh_frame:0000000000025256                 db 0FEh
.eh_frame:0000000000025257                 db 0FFh
.eh_frame:0000000000025258                 db  28h ; (
.eh_frame:0000000000025259                 db    0
.eh_frame:000000000002525A                 db    0
.eh_frame:000000000002525B                 db    0
.eh_frame:000000000002525C                 db    0
.eh_frame:000000000002525D                 db  41h ; A
.eh_frame:000000000002525E                 db  0Eh
.eh_frame:000000000002525F                 db  10h
.eh_frame:0000000000025260                 db  86h
.eh_frame:0000000000025261                 db    2
.eh_frame:0000000000025262                 db  41h ; A
.eh_frame:0000000000025263                 db  0Eh
.eh_frame:0000000000025264                 db  18h
.eh_frame:0000000000025265                 db  83h
.eh_frame:0000000000025266                 db    3
.eh_frame:0000000000025267                 db  4Dh ; M
.eh_frame:0000000000025268                 db  0Eh
.eh_frame:0000000000025269                 db  20h
.eh_frame:000000000002526A                 db  49h ; I
.eh_frame:000000000002526B                 db  0Eh
.eh_frame:000000000002526C                 db  18h
.eh_frame:000000000002526D                 db  47h ; G
.eh_frame:000000000002526E                 db  0Eh
.eh_frame:000000000002526F                 db  10h
.eh_frame:0000000000025270                 db  41h ; A
.eh_frame:0000000000025271                 db  0Eh
.eh_frame:0000000000025272                 db    8
.eh_frame:0000000000025273                 db    0
.eh_frame:0000000000025274                 db  18h
.eh_frame:0000000000025275                 db    0
.eh_frame:0000000000025276                 db    0
.eh_frame:0000000000025277                 db    0
.eh_frame:0000000000025278                 db  50h ; P
.eh_frame:0000000000025279                 db  18h
.eh_frame:000000000002527A                 db    0
.eh_frame:000000000002527B                 db    0
.eh_frame:000000000002527C                 db  94h
.eh_frame:000000000002527D                 db  79h ; y
.eh_frame:000000000002527E                 db 0FEh
.eh_frame:000000000002527F                 db 0FFh
.eh_frame:0000000000025280                 db  13h
.eh_frame:0000000000025281                 db    0
.eh_frame:0000000000025282                 db    0
.eh_frame:0000000000025283                 db    0
.eh_frame:0000000000025284                 db    0
.eh_frame:0000000000025285                 db  41h ; A
.eh_frame:0000000000025286                 db  0Eh
.eh_frame:0000000000025287                 db  10h
.eh_frame:0000000000025288                 db  83h
.eh_frame:0000000000025289                 db    2
.eh_frame:000000000002528A                 db  50h ; P
.eh_frame:000000000002528B                 db  0Eh
.eh_frame:000000000002528C                 db    8
.eh_frame:000000000002528D                 db    0
.eh_frame:000000000002528E                 db    0
.eh_frame:000000000002528F                 db    0
.eh_frame:0000000000025290                 db  14h
.eh_frame:0000000000025291                 db    0
.eh_frame:0000000000025292                 db    0
.eh_frame:0000000000025293                 db    0
.eh_frame:0000000000025294                 db  6Ch ; l
.eh_frame:0000000000025295                 db  18h
.eh_frame:0000000000025296                 db    0
.eh_frame:0000000000025297                 db    0
.eh_frame:0000000000025298                 db  98h
.eh_frame:0000000000025299                 db  79h ; y
.eh_frame:000000000002529A                 db 0FEh
.eh_frame:000000000002529B                 db 0FFh
.eh_frame:000000000002529C                 db  35h ; 5
.eh_frame:000000000002529D                 db    0
.eh_frame:000000000002529E                 db    0
.eh_frame:000000000002529F                 db    0
.eh_frame:00000000000252A0                 db    0
.eh_frame:00000000000252A1                 db  4Bh ; K
.eh_frame:00000000000252A2                 db  0Eh
.eh_frame:00000000000252A3                 db  10h
.eh_frame:00000000000252A4                 db    0
.eh_frame:00000000000252A5                 db    0
.eh_frame:00000000000252A6                 db    0
.eh_frame:00000000000252A7                 db    0
.eh_frame:00000000000252A8                 db  18h
.eh_frame:00000000000252A9                 db    0
.eh_frame:00000000000252AA                 db    0
.eh_frame:00000000000252AB                 db    0
.eh_frame:00000000000252AC                 db  84h
.eh_frame:00000000000252AD                 db  18h
.eh_frame:00000000000252AE                 db    0
.eh_frame:00000000000252AF                 db    0
.eh_frame:00000000000252B0                 db 0C0h
.eh_frame:00000000000252B1                 db  79h ; y
.eh_frame:00000000000252B2                 db 0FEh
.eh_frame:00000000000252B3                 db 0FFh
.eh_frame:00000000000252B4                 db  4Fh ; O
.eh_frame:00000000000252B5                 db    0
.eh_frame:00000000000252B6                 db    0
.eh_frame:00000000000252B7                 db    0
.eh_frame:00000000000252B8                 db    0
.eh_frame:00000000000252B9                 db  44h ; D
.eh_frame:00000000000252BA                 db  0Eh
.eh_frame:00000000000252BB                 db  10h
.eh_frame:00000000000252BC                 db  54h ; T
.eh_frame:00000000000252BD                 db  0Ah
.eh_frame:00000000000252BE                 db  0Eh
.eh_frame:00000000000252BF                 db    8
.eh_frame:00000000000252C0                 db  48h ; H
.eh_frame:00000000000252C1                 db  0Bh
.eh_frame:00000000000252C2                 db    0
.eh_frame:00000000000252C3                 db    0
.eh_frame:00000000000252C4                 db  10h
.eh_frame:00000000000252C5                 db    0
.eh_frame:00000000000252C6                 db    0
.eh_frame:00000000000252C7                 db    0
.eh_frame:00000000000252C8                 db 0A0h
.eh_frame:00000000000252C9                 db  18h
.eh_frame:00000000000252CA                 db    0
.eh_frame:00000000000252CB                 db    0
.eh_frame:00000000000252CC                 db 0F4h
.eh_frame:00000000000252CD                 db  79h ; y
.eh_frame:00000000000252CE                 db 0FEh
.eh_frame:00000000000252CF                 db 0FFh
.eh_frame:00000000000252D0                 db  29h ; )
.eh_frame:00000000000252D1                 db    0
.eh_frame:00000000000252D2                 db    0
.eh_frame:00000000000252D3                 db    0
.eh_frame:00000000000252D4                 db    0
.eh_frame:00000000000252D5                 db    0
.eh_frame:00000000000252D6                 db    0
.eh_frame:00000000000252D7                 db    0
.eh_frame:00000000000252D8                 db  4Ch ; L
.eh_frame:00000000000252D9                 db    0
.eh_frame:00000000000252DA                 db    0
.eh_frame:00000000000252DB                 db    0
.eh_frame:00000000000252DC                 db 0B4h
.eh_frame:00000000000252DD                 db  18h
.eh_frame:00000000000252DE                 db    0
.eh_frame:00000000000252DF                 db    0
.eh_frame:00000000000252E0                 db  10h
.eh_frame:00000000000252E1                 db  7Ah ; z
.eh_frame:00000000000252E2                 db 0FEh
.eh_frame:00000000000252E3                 db 0FFh
.eh_frame:00000000000252E4                 db 0B3h
.eh_frame:00000000000252E5                 db    6
.eh_frame:00000000000252E6                 db    0
.eh_frame:00000000000252E7                 db    0
.eh_frame:00000000000252E8                 db    0
.eh_frame:00000000000252E9                 db  42h ; B
.eh_frame:00000000000252EA                 db  0Eh
.eh_frame:00000000000252EB                 db  10h
.eh_frame:00000000000252EC                 db  8Fh
.eh_frame:00000000000252ED                 db    2
.eh_frame:00000000000252EE                 db  42h ; B
.eh_frame:00000000000252EF                 db  0Eh
.eh_frame:00000000000252F0                 db  18h
.eh_frame:00000000000252F1                 db  8Eh
.eh_frame:00000000000252F2                 db    3
.eh_frame:00000000000252F3                 db  42h ; B
.eh_frame:00000000000252F4                 db  0Eh
.eh_frame:00000000000252F5                 db  20h
.eh_frame:00000000000252F6                 db  8Dh
.eh_frame:00000000000252F7                 db    4
.eh_frame:00000000000252F8                 db  42h ; B
.eh_frame:00000000000252F9                 db  0Eh
.eh_frame:00000000000252FA                 db  28h ; (
.eh_frame:00000000000252FB                 db  8Ch
.eh_frame:00000000000252FC                 db    5
.eh_frame:00000000000252FD                 db  41h ; A
.eh_frame:00000000000252FE                 db  0Eh
.eh_frame:00000000000252FF                 db  30h ; 0
.eh_frame:0000000000025300                 db  86h
.eh_frame:0000000000025301                 db    6
.eh_frame:0000000000025302                 db  41h ; A
.eh_frame:0000000000025303                 db  0Eh
.eh_frame:0000000000025304                 db  38h ; 8
.eh_frame:0000000000025305                 db  83h
.eh_frame:0000000000025306                 db    7
.eh_frame:0000000000025307                 db  44h ; D
.eh_frame:0000000000025308                 db  0Eh
.eh_frame:0000000000025309                 db  60h ; `
.eh_frame:000000000002530A                 db    2
.eh_frame:000000000002530B                 db  96h
.eh_frame:000000000002530C                 db  0Ah
.eh_frame:000000000002530D                 db  0Eh
.eh_frame:000000000002530E                 db  38h ; 8
.eh_frame:000000000002530F                 db  41h ; A
.eh_frame:0000000000025310                 db  0Eh
.eh_frame:0000000000025311                 db  30h ; 0
.eh_frame:0000000000025312                 db  41h ; A
.eh_frame:0000000000025313                 db  0Eh
.eh_frame:0000000000025314                 db  28h ; (
.eh_frame:0000000000025315                 db  42h ; B
.eh_frame:0000000000025316                 db  0Eh
.eh_frame:0000000000025317                 db  20h
.eh_frame:0000000000025318                 db  42h ; B
.eh_frame:0000000000025319                 db  0Eh
.eh_frame:000000000002531A                 db  18h
.eh_frame:000000000002531B                 db  42h ; B
.eh_frame:000000000002531C                 db  0Eh
.eh_frame:000000000002531D                 db  10h
.eh_frame:000000000002531E                 db  42h ; B
.eh_frame:000000000002531F                 db  0Eh
.eh_frame:0000000000025320                 db    8
.eh_frame:0000000000025321                 db  42h ; B
.eh_frame:0000000000025322                 db  0Bh
.eh_frame:0000000000025323                 db    0
.eh_frame:0000000000025324                 db    0
.eh_frame:0000000000025325                 db    0
.eh_frame:0000000000025326                 db    0
.eh_frame:0000000000025327                 db    0
.eh_frame:0000000000025328                 db  4Ch ; L
.eh_frame:0000000000025329                 db    0
.eh_frame:000000000002532A                 db    0
.eh_frame:000000000002532B                 db    0
.eh_frame:000000000002532C                 db    4
.eh_frame:000000000002532D                 db  19h
.eh_frame:000000000002532E                 db    0
.eh_frame:000000000002532F                 db    0
.eh_frame:0000000000025330                 db  80h
.eh_frame:0000000000025331                 db  80h
.eh_frame:0000000000025332                 db 0FEh
.eh_frame:0000000000025333                 db 0FFh
.eh_frame:0000000000025334                 db  1Ch
.eh_frame:0000000000025335                 db    4
.eh_frame:0000000000025336                 db    0
.eh_frame:0000000000025337                 db    0
.eh_frame:0000000000025338                 db    0
.eh_frame:0000000000025339                 db  42h ; B
.eh_frame:000000000002533A                 db  0Eh
.eh_frame:000000000002533B                 db  10h
.eh_frame:000000000002533C                 db  8Fh
.eh_frame:000000000002533D                 db    2
.eh_frame:000000000002533E                 db  42h ; B
.eh_frame:000000000002533F                 db  0Eh
.eh_frame:0000000000025340                 db  18h
.eh_frame:0000000000025341                 db  8Eh
.eh_frame:0000000000025342                 db    3
.eh_frame:0000000000025343                 db  42h ; B
.eh_frame:0000000000025344                 db  0Eh
.eh_frame:0000000000025345                 db  20h
.eh_frame:0000000000025346                 db  8Dh
.eh_frame:0000000000025347                 db    4
.eh_frame:0000000000025348                 db  42h ; B
.eh_frame:0000000000025349                 db  0Eh
.eh_frame:000000000002534A                 db  28h ; (
.eh_frame:000000000002534B                 db  8Ch
.eh_frame:000000000002534C                 db    5
.eh_frame:000000000002534D                 db  41h ; A
.eh_frame:000000000002534E                 db  0Eh
.eh_frame:000000000002534F                 db  30h ; 0
.eh_frame:0000000000025350                 db  86h
.eh_frame:0000000000025351                 db    6
.eh_frame:0000000000025352                 db  41h ; A
.eh_frame:0000000000025353                 db  0Eh
.eh_frame:0000000000025354                 db  38h ; 8
.eh_frame:0000000000025355                 db  83h
.eh_frame:0000000000025356                 db    7
.eh_frame:0000000000025357                 db  44h ; D
.eh_frame:0000000000025358                 db  0Eh
.eh_frame:0000000000025359                 db  60h ; `
.eh_frame:000000000002535A                 db    2
.eh_frame:000000000002535B                 db 0E9h
.eh_frame:000000000002535C                 db  0Ah
.eh_frame:000000000002535D                 db  0Eh
.eh_frame:000000000002535E                 db  38h ; 8
.eh_frame:000000000002535F                 db  41h ; A
.eh_frame:0000000000025360                 db  0Eh
.eh_frame:0000000000025361                 db  30h ; 0
.eh_frame:0000000000025362                 db  41h ; A
.eh_frame:0000000000025363                 db  0Eh
.eh_frame:0000000000025364                 db  28h ; (
.eh_frame:0000000000025365                 db  42h ; B
.eh_frame:0000000000025366                 db  0Eh
.eh_frame:0000000000025367                 db  20h
.eh_frame:0000000000025368                 db  42h ; B
.eh_frame:0000000000025369                 db  0Eh
.eh_frame:000000000002536A                 db  18h
.eh_frame:000000000002536B                 db  42h ; B
.eh_frame:000000000002536C                 db  0Eh
.eh_frame:000000000002536D                 db  10h
.eh_frame:000000000002536E                 db  42h ; B
.eh_frame:000000000002536F                 db  0Eh
.eh_frame:0000000000025370                 db    8
.eh_frame:0000000000025371                 db  47h ; G
.eh_frame:0000000000025372                 db  0Bh
.eh_frame:0000000000025373                 db    0
.eh_frame:0000000000025374                 db    0
.eh_frame:0000000000025375                 db    0
.eh_frame:0000000000025376                 db    0
.eh_frame:0000000000025377                 db    0
.eh_frame:0000000000025378                 db  24h ; $
.eh_frame:0000000000025379                 db    0
.eh_frame:000000000002537A                 db    0
.eh_frame:000000000002537B                 db    0
.eh_frame:000000000002537C                 db  54h ; T
.eh_frame:000000000002537D                 db  19h
.eh_frame:000000000002537E                 db    0
.eh_frame:000000000002537F                 db    0
.eh_frame:0000000000025380                 db  50h ; P
.eh_frame:0000000000025381                 db  84h
.eh_frame:0000000000025382                 db 0FEh
.eh_frame:0000000000025383                 db 0FFh
.eh_frame:0000000000025384                 db 0ACh
.eh_frame:0000000000025385                 db    0
.eh_frame:0000000000025386                 db    0
.eh_frame:0000000000025387                 db    0
.eh_frame:0000000000025388                 db    0
.eh_frame:0000000000025389                 db  42h ; B
.eh_frame:000000000002538A                 db  0Eh
.eh_frame:000000000002538B                 db  10h
.eh_frame:000000000002538C                 db  8Dh
.eh_frame:000000000002538D                 db    2
.eh_frame:000000000002538E                 db  42h ; B
.eh_frame:000000000002538F                 db  0Eh
.eh_frame:0000000000025390                 db  18h
.eh_frame:0000000000025391                 db  8Ch
.eh_frame:0000000000025392                 db    3
.eh_frame:0000000000025393                 db  44h ; D
.eh_frame:0000000000025394                 db  0Eh
.eh_frame:0000000000025395                 db  20h
.eh_frame:0000000000025396                 db  86h
.eh_frame:0000000000025397                 db    4
.eh_frame:0000000000025398                 db  41h ; A
.eh_frame:0000000000025399                 db  0Eh
.eh_frame:000000000002539A                 db  28h ; (
.eh_frame:000000000002539B                 db  83h
.eh_frame:000000000002539C                 db    5
.eh_frame:000000000002539D                 db  47h ; G
.eh_frame:000000000002539E                 db  0Eh
.eh_frame:000000000002539F                 db  40h ; @
.eh_frame:00000000000253A0                 db  4Ch ; L
.eh_frame:00000000000253A1                 db    0
.eh_frame:00000000000253A2                 db    0
.eh_frame:00000000000253A3                 db    0
.eh_frame:00000000000253A4                 db  7Ch ; |
.eh_frame:00000000000253A5                 db  19h
.eh_frame:00000000000253A6                 db    0
.eh_frame:00000000000253A7                 db    0
.eh_frame:00000000000253A8                 db 0D8h
.eh_frame:00000000000253A9                 db  84h
.eh_frame:00000000000253AA                 db 0FEh
.eh_frame:00000000000253AB                 db 0FFh
.eh_frame:00000000000253AC                 db  1Ch
.eh_frame:00000000000253AD                 db    4
.eh_frame:00000000000253AE                 db    0
.eh_frame:00000000000253AF                 db    0
.eh_frame:00000000000253B0                 db    0
.eh_frame:00000000000253B1                 db  42h ; B
.eh_frame:00000000000253B2                 db  0Eh
.eh_frame:00000000000253B3                 db  10h
.eh_frame:00000000000253B4                 db  8Fh
.eh_frame:00000000000253B5                 db    2
.eh_frame:00000000000253B6                 db  42h ; B
.eh_frame:00000000000253B7                 db  0Eh
.eh_frame:00000000000253B8                 db  18h
.eh_frame:00000000000253B9                 db  8Eh
.eh_frame:00000000000253BA                 db    3
.eh_frame:00000000000253BB                 db  42h ; B
.eh_frame:00000000000253BC                 db  0Eh
.eh_frame:00000000000253BD                 db  20h
.eh_frame:00000000000253BE                 db  8Dh
.eh_frame:00000000000253BF                 db    4
.eh_frame:00000000000253C0                 db  42h ; B
.eh_frame:00000000000253C1                 db  0Eh
.eh_frame:00000000000253C2                 db  28h ; (
.eh_frame:00000000000253C3                 db  8Ch
.eh_frame:00000000000253C4                 db    5
.eh_frame:00000000000253C5                 db  41h ; A
.eh_frame:00000000000253C6                 db  0Eh
.eh_frame:00000000000253C7                 db  30h ; 0
.eh_frame:00000000000253C8                 db  86h
.eh_frame:00000000000253C9                 db    6
.eh_frame:00000000000253CA                 db  41h ; A
.eh_frame:00000000000253CB                 db  0Eh
.eh_frame:00000000000253CC                 db  38h ; 8
.eh_frame:00000000000253CD                 db  83h
.eh_frame:00000000000253CE                 db    7
.eh_frame:00000000000253CF                 db  44h ; D
.eh_frame:00000000000253D0                 db  0Eh
.eh_frame:00000000000253D1                 db  60h ; `
.eh_frame:00000000000253D2                 db    2
.eh_frame:00000000000253D3                 db 0E9h
.eh_frame:00000000000253D4                 db  0Ah
.eh_frame:00000000000253D5                 db  0Eh
.eh_frame:00000000000253D6                 db  38h ; 8
.eh_frame:00000000000253D7                 db  41h ; A
.eh_frame:00000000000253D8                 db  0Eh
.eh_frame:00000000000253D9                 db  30h ; 0
.eh_frame:00000000000253DA                 db  41h ; A
.eh_frame:00000000000253DB                 db  0Eh
.eh_frame:00000000000253DC                 db  28h ; (
.eh_frame:00000000000253DD                 db  42h ; B
.eh_frame:00000000000253DE                 db  0Eh
.eh_frame:00000000000253DF                 db  20h
.eh_frame:00000000000253E0                 db  42h ; B
.eh_frame:00000000000253E1                 db  0Eh
.eh_frame:00000000000253E2                 db  18h
.eh_frame:00000000000253E3                 db  42h ; B
.eh_frame:00000000000253E4                 db  0Eh
.eh_frame:00000000000253E5                 db  10h
.eh_frame:00000000000253E6                 db  42h ; B
.eh_frame:00000000000253E7                 db  0Eh
.eh_frame:00000000000253E8                 db    8
.eh_frame:00000000000253E9                 db  47h ; G
.eh_frame:00000000000253EA                 db  0Bh
.eh_frame:00000000000253EB                 db    0
.eh_frame:00000000000253EC                 db    0
.eh_frame:00000000000253ED                 db    0
.eh_frame:00000000000253EE                 db    0
.eh_frame:00000000000253EF                 db    0
.eh_frame:00000000000253F0                 db  34h ; 4
.eh_frame:00000000000253F1                 db    0
.eh_frame:00000000000253F2                 db    0
.eh_frame:00000000000253F3                 db    0
.eh_frame:00000000000253F4                 db 0CCh
.eh_frame:00000000000253F5                 db  19h
.eh_frame:00000000000253F6                 db    0
.eh_frame:00000000000253F7                 db    0
.eh_frame:00000000000253F8                 db 0A8h
.eh_frame:00000000000253F9                 db  88h
.eh_frame:00000000000253FA                 db 0FEh
.eh_frame:00000000000253FB                 db 0FFh
.eh_frame:00000000000253FC                 db  7Bh ; {
.eh_frame:00000000000253FD                 db    0
.eh_frame:00000000000253FE                 db    0
.eh_frame:00000000000253FF                 db    0
.eh_frame:0000000000025400                 db    0
.eh_frame:0000000000025401                 db  42h ; B
.eh_frame:0000000000025402                 db  0Eh
.eh_frame:0000000000025403                 db  10h
.eh_frame:0000000000025404                 db  8Ch
.eh_frame:0000000000025405                 db    2
.eh_frame:0000000000025406                 db  41h ; A
.eh_frame:0000000000025407                 db  0Eh
.eh_frame:0000000000025408                 db  18h
.eh_frame:0000000000025409                 db  86h
.eh_frame:000000000002540A                 db    3
.eh_frame:000000000002540B                 db  41h ; A
.eh_frame:000000000002540C                 db  0Eh
.eh_frame:000000000002540D                 db  20h
.eh_frame:000000000002540E                 db  83h
.eh_frame:000000000002540F                 db    4
.eh_frame:0000000000025410                 db  7Dh ; }
.eh_frame:0000000000025411                 db  0Ah
.eh_frame:0000000000025412                 db  0Eh
.eh_frame:0000000000025413                 db  18h
.eh_frame:0000000000025414                 db  41h ; A
.eh_frame:0000000000025415                 db  0Eh
.eh_frame:0000000000025416                 db  10h
.eh_frame:0000000000025417                 db  42h ; B
.eh_frame:0000000000025418                 db  0Eh
.eh_frame:0000000000025419                 db    8
.eh_frame:000000000002541A                 db  44h ; D
.eh_frame:000000000002541B                 db  0Bh
.eh_frame:000000000002541C                 db  60h ; `
.eh_frame:000000000002541D                 db  0Ah
.eh_frame:000000000002541E                 db  0Eh
.eh_frame:000000000002541F                 db  18h
.eh_frame:0000000000025420                 db  41h ; A
.eh_frame:0000000000025421                 db  0Eh
.eh_frame:0000000000025422                 db  10h
.eh_frame:0000000000025423                 db  42h ; B
.eh_frame:0000000000025424                 db  0Eh
.eh_frame:0000000000025425                 db    8
.eh_frame:0000000000025426                 db  45h ; E
.eh_frame:0000000000025427                 db  0Bh
.eh_frame:0000000000025428                 db  1Ch
.eh_frame:0000000000025429                 db    0
.eh_frame:000000000002542A                 db    0
.eh_frame:000000000002542B                 db    0
.eh_frame:000000000002542C                 db    4
.eh_frame:000000000002542D                 db  1Ah
.eh_frame:000000000002542E                 db    0
.eh_frame:000000000002542F                 db    0
.eh_frame:0000000000025430                 db 0F0h
.eh_frame:0000000000025431                 db  88h
.eh_frame:0000000000025432                 db 0FEh
.eh_frame:0000000000025433                 db 0FFh
.eh_frame:0000000000025434                 db  40h ; @
.eh_frame:0000000000025435                 db    0
.eh_frame:0000000000025436                 db    0
.eh_frame:0000000000025437                 db    0
.eh_frame:0000000000025438                 db    0
.eh_frame:0000000000025439                 db  44h ; D
.eh_frame:000000000002543A                 db  0Eh
.eh_frame:000000000002543B                 db  10h
.eh_frame:000000000002543C                 db  83h
.eh_frame:000000000002543D                 db    2
.eh_frame:000000000002543E                 db  5Ah ; Z
.eh_frame:000000000002543F                 db  0Ah
.eh_frame:0000000000025440                 db  0Eh
.eh_frame:0000000000025441                 db    8
.eh_frame:0000000000025442                 db  4Ah ; J
.eh_frame:0000000000025443                 db  0Bh
.eh_frame:0000000000025444                 db  53h ; S
.eh_frame:0000000000025445                 db  0Eh
.eh_frame:0000000000025446                 db    8
.eh_frame:0000000000025447                 db    0
.eh_frame:0000000000025448                 db  2Ch ; ,
.eh_frame:0000000000025449                 db    0
.eh_frame:000000000002544A                 db    0
.eh_frame:000000000002544B                 db    0
.eh_frame:000000000002544C                 db  24h ; $
.eh_frame:000000000002544D                 db  1Ah
.eh_frame:000000000002544E                 db    0
.eh_frame:000000000002544F                 db    0
.eh_frame:0000000000025450                 db  10h
.eh_frame:0000000000025451                 db  89h
.eh_frame:0000000000025452                 db 0FEh
.eh_frame:0000000000025453                 db 0FFh
.eh_frame:0000000000025454                 db  57h ; W
.eh_frame:0000000000025455                 db    0
.eh_frame:0000000000025456                 db    0
.eh_frame:0000000000025457                 db    0
.eh_frame:0000000000025458                 db    0
.eh_frame:0000000000025459                 db  63h ; c
.eh_frame:000000000002545A                 db  0Eh
.eh_frame:000000000002545B                 db  10h
.eh_frame:000000000002545C                 db  8Ch
.eh_frame:000000000002545D                 db    2
.eh_frame:000000000002545E                 db  41h ; A
.eh_frame:000000000002545F                 db  0Eh
.eh_frame:0000000000025460                 db  18h
.eh_frame:0000000000025461                 db  86h
.eh_frame:0000000000025462                 db    3
.eh_frame:0000000000025463                 db  44h ; D
.eh_frame:0000000000025464                 db  0Eh
.eh_frame:0000000000025465                 db  20h
.eh_frame:0000000000025466                 db  83h
.eh_frame:0000000000025467                 db    4
.eh_frame:0000000000025468                 db  6Bh ; k
.eh_frame:0000000000025469                 db  0Eh
.eh_frame:000000000002546A                 db  18h
.eh_frame:000000000002546B                 db  41h ; A
.eh_frame:000000000002546C                 db  0Eh
.eh_frame:000000000002546D                 db  10h
.eh_frame:000000000002546E                 db  42h ; B
.eh_frame:000000000002546F                 db  0Eh
.eh_frame:0000000000025470                 db    8
.eh_frame:0000000000025471                 db    0
.eh_frame:0000000000025472                 db    0
.eh_frame:0000000000025473                 db    0
.eh_frame:0000000000025474                 db    0
.eh_frame:0000000000025475                 db    0
.eh_frame:0000000000025476                 db    0
.eh_frame:0000000000025477                 db    0
.eh_frame:0000000000025478                 db  10h
.eh_frame:0000000000025479                 db    0
.eh_frame:000000000002547A                 db    0
.eh_frame:000000000002547B                 db    0
.eh_frame:000000000002547C                 db  54h ; T
.eh_frame:000000000002547D                 db  1Ah
.eh_frame:000000000002547E                 db    0
.eh_frame:000000000002547F                 db    0
.eh_frame:0000000000025480                 db  40h ; @
.eh_frame:0000000000025481                 db  89h
.eh_frame:0000000000025482                 db 0FEh
.eh_frame:0000000000025483                 db 0FFh
.eh_frame:0000000000025484                 db  1Ah
.eh_frame:0000000000025485                 db    0
.eh_frame:0000000000025486                 db    0
.eh_frame:0000000000025487                 db    0
.eh_frame:0000000000025488                 db    0
.eh_frame:0000000000025489                 db    0
.eh_frame:000000000002548A                 db    0
.eh_frame:000000000002548B                 db    0
.eh_frame:000000000002548C                 db  10h
.eh_frame:000000000002548D                 db    0
.eh_frame:000000000002548E                 db    0
.eh_frame:000000000002548F                 db    0
.eh_frame:0000000000025490                 db  68h ; h
.eh_frame:0000000000025491                 db  1Ah
.eh_frame:0000000000025492                 db    0
.eh_frame:0000000000025493                 db    0
.eh_frame:0000000000025494                 db  4Ch ; L
.eh_frame:0000000000025495                 db  89h
.eh_frame:0000000000025496                 db 0FEh
.eh_frame:0000000000025497                 db 0FFh
.eh_frame:0000000000025498                 db  0Dh
.eh_frame:0000000000025499                 db    0
.eh_frame:000000000002549A                 db    0
.eh_frame:000000000002549B                 db    0
.eh_frame:000000000002549C                 db    0
.eh_frame:000000000002549D                 db    0
.eh_frame:000000000002549E                 db    0
.eh_frame:000000000002549F                 db    0
.eh_frame:00000000000254A0                 db  10h
.eh_frame:00000000000254A1                 db    0
.eh_frame:00000000000254A2                 db    0
.eh_frame:00000000000254A3                 db    0
.eh_frame:00000000000254A4                 db  7Ch ; |
.eh_frame:00000000000254A5                 db  1Ah
.eh_frame:00000000000254A6                 db    0
.eh_frame:00000000000254A7                 db    0
.eh_frame:00000000000254A8                 db  48h ; H
.eh_frame:00000000000254A9                 db  89h
.eh_frame:00000000000254AA                 db 0FEh
.eh_frame:00000000000254AB                 db 0FFh
.eh_frame:00000000000254AC                 db  0Ch
.eh_frame:00000000000254AD                 db    0
.eh_frame:00000000000254AE                 db    0
.eh_frame:00000000000254AF                 db    0
.eh_frame:00000000000254B0                 db    0
.eh_frame:00000000000254B1                 db    0
.eh_frame:00000000000254B2                 db    0
.eh_frame:00000000000254B3                 db    0
.eh_frame:00000000000254B4                 db  10h
.eh_frame:00000000000254B5                 db    0
.eh_frame:00000000000254B6                 db    0
.eh_frame:00000000000254B7                 db    0
.eh_frame:00000000000254B8                 db  90h
.eh_frame:00000000000254B9                 db  1Ah
.eh_frame:00000000000254BA                 db    0
.eh_frame:00000000000254BB                 db    0
.eh_frame:00000000000254BC                 db  44h ; D
.eh_frame:00000000000254BD                 db  89h
.eh_frame:00000000000254BE                 db 0FEh
.eh_frame:00000000000254BF                 db 0FFh
.eh_frame:00000000000254C0                 db  0Ah
.eh_frame:00000000000254C1                 db    0
.eh_frame:00000000000254C2                 db    0
.eh_frame:00000000000254C3                 db    0
.eh_frame:00000000000254C4                 db    0
.eh_frame:00000000000254C5                 db    0
.eh_frame:00000000000254C6                 db    0
.eh_frame:00000000000254C7                 db    0
.eh_frame:00000000000254C8                 db  10h
.eh_frame:00000000000254C9                 db    0
.eh_frame:00000000000254CA                 db    0
.eh_frame:00000000000254CB                 db    0
.eh_frame:00000000000254CC                 db 0A4h
.eh_frame:00000000000254CD                 db  1Ah
.eh_frame:00000000000254CE                 db    0
.eh_frame:00000000000254CF                 db    0
.eh_frame:00000000000254D0                 db  40h ; @
.eh_frame:00000000000254D1                 db  89h
.eh_frame:00000000000254D2                 db 0FEh
.eh_frame:00000000000254D3                 db 0FFh
.eh_frame:00000000000254D4                 db  26h ; &
.eh_frame:00000000000254D5                 db    0
.eh_frame:00000000000254D6                 db    0
.eh_frame:00000000000254D7                 db    0
.eh_frame:00000000000254D8                 db    0
.eh_frame:00000000000254D9                 db    0
.eh_frame:00000000000254DA                 db    0
.eh_frame:00000000000254DB                 db    0
.eh_frame:00000000000254DC                 db  38h ; 8
.eh_frame:00000000000254DD                 db    0
.eh_frame:00000000000254DE                 db    0
.eh_frame:00000000000254DF                 db    0
.eh_frame:00000000000254E0                 db 0B8h
.eh_frame:00000000000254E1                 db  1Ah
.eh_frame:00000000000254E2                 db    0
.eh_frame:00000000000254E3                 db    0
.eh_frame:00000000000254E4                 db  5Ch ; \
.eh_frame:00000000000254E5                 db  89h
.eh_frame:00000000000254E6                 db 0FEh
.eh_frame:00000000000254E7                 db 0FFh
.eh_frame:00000000000254E8                 db 0C5h
.eh_frame:00000000000254E9                 db    1
.eh_frame:00000000000254EA                 db    0
.eh_frame:00000000000254EB                 db    0
.eh_frame:00000000000254EC                 db    0
.eh_frame:00000000000254ED                 db  42h ; B
.eh_frame:00000000000254EE                 db  0Eh
.eh_frame:00000000000254EF                 db  10h
.eh_frame:00000000000254F0                 db  8Ch
.eh_frame:00000000000254F1                 db    2
.eh_frame:00000000000254F2                 db  41h ; A
.eh_frame:00000000000254F3                 db  0Eh
.eh_frame:00000000000254F4                 db  18h
.eh_frame:00000000000254F5                 db  86h
.eh_frame:00000000000254F6                 db    3
.eh_frame:00000000000254F7                 db  44h ; D
.eh_frame:00000000000254F8                 db  0Eh
.eh_frame:00000000000254F9                 db  20h
.eh_frame:00000000000254FA                 db  83h
.eh_frame:00000000000254FB                 db    4
.eh_frame:00000000000254FC                 db    2
.eh_frame:00000000000254FD                 db  72h ; r
.eh_frame:00000000000254FE                 db  0Ah
.eh_frame:00000000000254FF                 db  0Eh
.eh_frame:0000000000025500                 db  18h
.eh_frame:0000000000025501                 db  41h ; A
.eh_frame:0000000000025502                 db  0Eh
.eh_frame:0000000000025503                 db  10h
.eh_frame:0000000000025504                 db  42h ; B
.eh_frame:0000000000025505                 db  0Eh
.eh_frame:0000000000025506                 db    8
.eh_frame:0000000000025507                 db  44h ; D
.eh_frame:0000000000025508                 db  0Bh
.eh_frame:0000000000025509                 db    2
.eh_frame:000000000002550A                 db  54h ; T
.eh_frame:000000000002550B                 db  0Ah
.eh_frame:000000000002550C                 db  0Eh
.eh_frame:000000000002550D                 db  18h
.eh_frame:000000000002550E                 db  45h ; E
.eh_frame:000000000002550F                 db  0Eh
.eh_frame:0000000000025510                 db  10h
.eh_frame:0000000000025511                 db  42h ; B
.eh_frame:0000000000025512                 db  0Eh
.eh_frame:0000000000025513                 db    8
.eh_frame:0000000000025514                 db  45h ; E
.eh_frame:0000000000025515                 db  0Bh
.eh_frame:0000000000025516                 db    0
.eh_frame:0000000000025517                 db    0
.eh_frame:0000000000025518                 db  4Ch ; L
.eh_frame:0000000000025519                 db    0
.eh_frame:000000000002551A                 db    0
.eh_frame:000000000002551B                 db    0
.eh_frame:000000000002551C                 db 0F4h
.eh_frame:000000000002551D                 db  1Ah
.eh_frame:000000000002551E                 db    0
.eh_frame:000000000002551F                 db    0
.eh_frame:0000000000025520                 db 0F0h
.eh_frame:0000000000025521                 db  8Ah
.eh_frame:0000000000025522                 db 0FEh
.eh_frame:0000000000025523                 db 0FFh
.eh_frame:0000000000025524                 db    5
.eh_frame:0000000000025525                 db    1
.eh_frame:0000000000025526                 db    0
.eh_frame:0000000000025527                 db    0
.eh_frame:0000000000025528                 db    0
.eh_frame:0000000000025529                 db  42h ; B
.eh_frame:000000000002552A                 db  0Eh
.eh_frame:000000000002552B                 db  10h
.eh_frame:000000000002552C                 db  8Dh
.eh_frame:000000000002552D                 db    2
.eh_frame:000000000002552E                 db  42h ; B
.eh_frame:000000000002552F                 db  0Eh
.eh_frame:0000000000025530                 db  18h
.eh_frame:0000000000025531                 db  8Ch
.eh_frame:0000000000025532                 db    3
.eh_frame:0000000000025533                 db  44h ; D
.eh_frame:0000000000025534                 db  0Eh
.eh_frame:0000000000025535                 db  20h
.eh_frame:0000000000025536                 db  86h
.eh_frame:0000000000025537                 db    4
.eh_frame:0000000000025538                 db  41h ; A
.eh_frame:0000000000025539                 db  0Eh
.eh_frame:000000000002553A                 db  28h ; (
.eh_frame:000000000002553B                 db  83h
.eh_frame:000000000002553C                 db    5
.eh_frame:000000000002553D                 db  4Ah ; J
.eh_frame:000000000002553E                 db  0Eh
.eh_frame:000000000002553F                 db  30h ; 0
.eh_frame:0000000000025540                 db    2
.eh_frame:0000000000025541                 db 0B3h
.eh_frame:0000000000025542                 db  0Ah
.eh_frame:0000000000025543                 db  0Eh
.eh_frame:0000000000025544                 db  28h ; (
.eh_frame:0000000000025545                 db  41h ; A
.eh_frame:0000000000025546                 db  0Eh
.eh_frame:0000000000025547                 db  20h
.eh_frame:0000000000025548                 db  41h ; A
.eh_frame:0000000000025549                 db  0Eh
.eh_frame:000000000002554A                 db  18h
.eh_frame:000000000002554B                 db  42h ; B
.eh_frame:000000000002554C                 db  0Eh
.eh_frame:000000000002554D                 db  10h
.eh_frame:000000000002554E                 db  42h ; B
.eh_frame:000000000002554F                 db  0Eh
.eh_frame:0000000000025550                 db    8
.eh_frame:0000000000025551                 db  44h ; D
.eh_frame:0000000000025552                 db  0Bh
.eh_frame:0000000000025553                 db  5Dh ; ]
.eh_frame:0000000000025554                 db  0Ah
.eh_frame:0000000000025555                 db  0Eh
.eh_frame:0000000000025556                 db  28h ; (
.eh_frame:0000000000025557                 db  44h ; D
.eh_frame:0000000000025558                 db  0Eh
.eh_frame:0000000000025559                 db  20h
.eh_frame:000000000002555A                 db  41h ; A
.eh_frame:000000000002555B                 db  0Eh
.eh_frame:000000000002555C                 db  18h
.eh_frame:000000000002555D                 db  42h ; B
.eh_frame:000000000002555E                 db  0Eh
.eh_frame:000000000002555F                 db  10h
.eh_frame:0000000000025560                 db  42h ; B
.eh_frame:0000000000025561                 db  0Eh
.eh_frame:0000000000025562                 db    8
.eh_frame:0000000000025563                 db  4Ah ; J
.eh_frame:0000000000025564                 db  0Bh
.eh_frame:0000000000025565                 db    0
.eh_frame:0000000000025566                 db    0
.eh_frame:0000000000025567                 db    0
.eh_frame:0000000000025568                 db  34h ; 4
.eh_frame:0000000000025569                 db    0
.eh_frame:000000000002556A                 db    0
.eh_frame:000000000002556B                 db    0
.eh_frame:000000000002556C                 db  44h ; D
.eh_frame:000000000002556D                 db  1Bh
.eh_frame:000000000002556E                 db    0
.eh_frame:000000000002556F                 db    0
.eh_frame:0000000000025570                 db 0B0h
.eh_frame:0000000000025571                 db  8Bh
.eh_frame:0000000000025572                 db 0FEh
.eh_frame:0000000000025573                 db 0FFh
.eh_frame:0000000000025574                 db  8Ah
.eh_frame:0000000000025575                 db    0
.eh_frame:0000000000025576                 db    0
.eh_frame:0000000000025577                 db    0
.eh_frame:0000000000025578                 db    0
.eh_frame:0000000000025579                 db  42h ; B
.eh_frame:000000000002557A                 db  0Eh
.eh_frame:000000000002557B                 db  10h
.eh_frame:000000000002557C                 db  8Dh
.eh_frame:000000000002557D                 db    2
.eh_frame:000000000002557E                 db  42h ; B
.eh_frame:000000000002557F                 db  0Eh
.eh_frame:0000000000025580                 db  18h
.eh_frame:0000000000025581                 db  8Ch
.eh_frame:0000000000025582                 db    3
.eh_frame:0000000000025583                 db  44h ; D
.eh_frame:0000000000025584                 db  0Eh
.eh_frame:0000000000025585                 db  20h
.eh_frame:0000000000025586                 db  86h
.eh_frame:0000000000025587                 db    4
.eh_frame:0000000000025588                 db  48h ; H
.eh_frame:0000000000025589                 db  0Eh
.eh_frame:000000000002558A                 db  28h ; (
.eh_frame:000000000002558B                 db  83h
.eh_frame:000000000002558C                 db    5
.eh_frame:000000000002558D                 db  4Ah ; J
.eh_frame:000000000002558E                 db  0Eh
.eh_frame:000000000002558F                 db  30h ; 0
.eh_frame:0000000000025590                 db    2
.eh_frame:0000000000025591                 db  66h ; f
.eh_frame:0000000000025592                 db  0Eh
.eh_frame:0000000000025593                 db  28h ; (
.eh_frame:0000000000025594                 db  44h ; D
.eh_frame:0000000000025595                 db  0Eh
.eh_frame:0000000000025596                 db  20h
.eh_frame:0000000000025597                 db  41h ; A
.eh_frame:0000000000025598                 db  0Eh
.eh_frame:0000000000025599                 db  18h
.eh_frame:000000000002559A                 db  42h ; B
.eh_frame:000000000002559B                 db  0Eh
.eh_frame:000000000002559C                 db  10h
.eh_frame:000000000002559D                 db  42h ; B
.eh_frame:000000000002559E                 db  0Eh
.eh_frame:000000000002559F                 db    8
.eh_frame:00000000000255A0                 db  28h ; (
.eh_frame:00000000000255A1                 db    0
.eh_frame:00000000000255A2                 db    0
.eh_frame:00000000000255A3                 db    0
.eh_frame:00000000000255A4                 db  7Ch ; |
.eh_frame:00000000000255A5                 db  1Bh
.eh_frame:00000000000255A6                 db    0
.eh_frame:00000000000255A7                 db    0
.eh_frame:00000000000255A8                 db    8
.eh_frame:00000000000255A9                 db  8Ch
.eh_frame:00000000000255AA                 db 0FEh
.eh_frame:00000000000255AB                 db 0FFh
.eh_frame:00000000000255AC                 db  42h ; B
.eh_frame:00000000000255AD                 db    0
.eh_frame:00000000000255AE                 db    0
.eh_frame:00000000000255AF                 db    0
.eh_frame:00000000000255B0                 db    0
.eh_frame:00000000000255B1                 db  46h ; F
.eh_frame:00000000000255B2                 db  0Eh
.eh_frame:00000000000255B3                 db  10h
.eh_frame:00000000000255B4                 db  86h
.eh_frame:00000000000255B5                 db    2
.eh_frame:00000000000255B6                 db  41h ; A
.eh_frame:00000000000255B7                 db  0Eh
.eh_frame:00000000000255B8                 db  18h
.eh_frame:00000000000255B9                 db  83h
.eh_frame:00000000000255BA                 db    3
.eh_frame:00000000000255BB                 db  47h ; G
.eh_frame:00000000000255BC                 db  0Eh
.eh_frame:00000000000255BD                 db  20h
.eh_frame:00000000000255BE                 db  68h ; h
.eh_frame:00000000000255BF                 db  0Eh
.eh_frame:00000000000255C0                 db  18h
.eh_frame:00000000000255C1                 db  41h ; A
.eh_frame:00000000000255C2                 db  0Eh
.eh_frame:00000000000255C3                 db  10h
.eh_frame:00000000000255C4                 db  41h ; A
.eh_frame:00000000000255C5                 db  0Eh
.eh_frame:00000000000255C6                 db    8
.eh_frame:00000000000255C7                 db  48h ; H
.eh_frame:00000000000255C8                 db 0C3h
.eh_frame:00000000000255C9                 db 0C6h
.eh_frame:00000000000255CA                 db    0
.eh_frame:00000000000255CB                 db    0
.eh_frame:00000000000255CC                 db  18h
.eh_frame:00000000000255CD                 db    0
.eh_frame:00000000000255CE                 db    0
.eh_frame:00000000000255CF                 db    0
.eh_frame:00000000000255D0                 db 0A8h
.eh_frame:00000000000255D1                 db  1Bh
.eh_frame:00000000000255D2                 db    0
.eh_frame:00000000000255D3                 db    0
.eh_frame:00000000000255D4                 db  2Ch ; ,
.eh_frame:00000000000255D5                 db  8Ch
.eh_frame:00000000000255D6                 db 0FEh
.eh_frame:00000000000255D7                 db 0FFh
.eh_frame:00000000000255D8                 db  39h ; 9
.eh_frame:00000000000255D9                 db    0
.eh_frame:00000000000255DA                 db    0
.eh_frame:00000000000255DB                 db    0
.eh_frame:00000000000255DC                 db    0
.eh_frame:00000000000255DD                 db  41h ; A
.eh_frame:00000000000255DE                 db  0Eh
.eh_frame:00000000000255DF                 db  10h
.eh_frame:00000000000255E0                 db  83h
.eh_frame:00000000000255E1                 db    2
.eh_frame:00000000000255E2                 db  68h ; h
.eh_frame:00000000000255E3                 db  0Ah
.eh_frame:00000000000255E4                 db  0Eh
.eh_frame:00000000000255E5                 db    8
.eh_frame:00000000000255E6                 db  47h ; G
.eh_frame:00000000000255E7                 db  0Bh
.eh_frame:00000000000255E8                 db  38h ; 8
.eh_frame:00000000000255E9                 db    0
.eh_frame:00000000000255EA                 db    0
.eh_frame:00000000000255EB                 db    0
.eh_frame:00000000000255EC                 db 0C4h
.eh_frame:00000000000255ED                 db  1Bh
.eh_frame:00000000000255EE                 db    0
.eh_frame:00000000000255EF                 db    0
.eh_frame:00000000000255F0                 db  50h ; P
.eh_frame:00000000000255F1                 db  8Ch
.eh_frame:00000000000255F2                 db 0FEh
.eh_frame:00000000000255F3                 db 0FFh
.eh_frame:00000000000255F4                 db  2Ch ; ,
.eh_frame:00000000000255F5                 db    1
.eh_frame:00000000000255F6                 db    0
.eh_frame:00000000000255F7                 db    0
.eh_frame:00000000000255F8                 db    0
.eh_frame:00000000000255F9                 db  42h ; B
.eh_frame:00000000000255FA                 db  0Eh
.eh_frame:00000000000255FB                 db  10h
.eh_frame:00000000000255FC                 db  8Dh
.eh_frame:00000000000255FD                 db    2
.eh_frame:00000000000255FE                 db  42h ; B
.eh_frame:00000000000255FF                 db  0Eh
.eh_frame:0000000000025600                 db  18h
.eh_frame:0000000000025601                 db  8Ch
.eh_frame:0000000000025602                 db    3
.eh_frame:0000000000025603                 db  41h ; A
.eh_frame:0000000000025604                 db  0Eh
.eh_frame:0000000000025605                 db  20h
.eh_frame:0000000000025606                 db  86h
.eh_frame:0000000000025607                 db    4
.eh_frame:0000000000025608                 db  41h ; A
.eh_frame:0000000000025609                 db  0Eh
.eh_frame:000000000002560A                 db  28h ; (
.eh_frame:000000000002560B                 db  83h
.eh_frame:000000000002560C                 db    5
.eh_frame:000000000002560D                 db  47h ; G
.eh_frame:000000000002560E                 db  0Eh
.eh_frame:000000000002560F                 db 0C0h
.eh_frame:0000000000025610                 db    1
.eh_frame:0000000000025611                 db    2
.eh_frame:0000000000025612                 db 0A4h
.eh_frame:0000000000025613                 db  0Ah
.eh_frame:0000000000025614                 db  0Eh
.eh_frame:0000000000025615                 db  28h ; (
.eh_frame:0000000000025616                 db  41h ; A
.eh_frame:0000000000025617                 db  0Eh
.eh_frame:0000000000025618                 db  20h
.eh_frame:0000000000025619                 db  41h ; A
.eh_frame:000000000002561A                 db  0Eh
.eh_frame:000000000002561B                 db  18h
.eh_frame:000000000002561C                 db  42h ; B
.eh_frame:000000000002561D                 db  0Eh
.eh_frame:000000000002561E                 db  10h
.eh_frame:000000000002561F                 db  42h ; B
.eh_frame:0000000000025620                 db  0Eh
.eh_frame:0000000000025621                 db    8
.eh_frame:0000000000025622                 db  49h ; I
.eh_frame:0000000000025623                 db  0Bh
.eh_frame:0000000000025624                 db  20h
.eh_frame:0000000000025625                 db    0
.eh_frame:0000000000025626                 db    0
.eh_frame:0000000000025627                 db    0
.eh_frame:0000000000025628                 db    0
.eh_frame:0000000000025629                 db  1Ch
.eh_frame:000000000002562A                 db    0
.eh_frame:000000000002562B                 db    0
.eh_frame:000000000002562C                 db  44h ; D
.eh_frame:000000000002562D                 db  8Dh
.eh_frame:000000000002562E                 db 0FEh
.eh_frame:000000000002562F                 db 0FFh
.eh_frame:0000000000025630                 db  6Ah ; j
.eh_frame:0000000000025631                 db    0
.eh_frame:0000000000025632                 db    0
.eh_frame:0000000000025633                 db    0
.eh_frame:0000000000025634                 db    0
.eh_frame:0000000000025635                 db  44h ; D
.eh_frame:0000000000025636                 db  0Eh
.eh_frame:0000000000025637                 db  10h
.eh_frame:0000000000025638                 db  72h ; r
.eh_frame:0000000000025639                 db  0Ah
.eh_frame:000000000002563A                 db  0Eh
.eh_frame:000000000002563B                 db    8
.eh_frame:000000000002563C                 db  4Ah ; J
.eh_frame:000000000002563D                 db  0Bh
.eh_frame:000000000002563E                 db  5Bh ; [
.eh_frame:000000000002563F                 db  0Ah
.eh_frame:0000000000025640                 db  0Eh
.eh_frame:0000000000025641                 db    8
.eh_frame:0000000000025642                 db  45h ; E
.eh_frame:0000000000025643                 db  0Bh
.eh_frame:0000000000025644                 db  49h ; I
.eh_frame:0000000000025645                 db  0Eh
.eh_frame:0000000000025646                 db    8
.eh_frame:0000000000025647                 db    0
.eh_frame:0000000000025648                 db  40h ; @
.eh_frame:0000000000025649                 db    0
.eh_frame:000000000002564A                 db    0
.eh_frame:000000000002564B                 db    0
.eh_frame:000000000002564C                 db  24h ; $
.eh_frame:000000000002564D                 db  1Ch
.eh_frame:000000000002564E                 db    0
.eh_frame:000000000002564F                 db    0
.eh_frame:0000000000025650                 db  90h
.eh_frame:0000000000025651                 db  8Dh
.eh_frame:0000000000025652                 db 0FEh
.eh_frame:0000000000025653                 db 0FFh
.eh_frame:0000000000025654                 db  66h ; f
.eh_frame:0000000000025655                 db    0
.eh_frame:0000000000025656                 db    0
.eh_frame:0000000000025657                 db    0
.eh_frame:0000000000025658                 db    0
.eh_frame:0000000000025659                 db  41h ; A
.eh_frame:000000000002565A                 db  0Eh
.eh_frame:000000000002565B                 db  10h
.eh_frame:000000000002565C                 db  86h
.eh_frame:000000000002565D                 db    2
.eh_frame:000000000002565E                 db  41h ; A
.eh_frame:000000000002565F                 db  0Eh
.eh_frame:0000000000025660                 db  18h
.eh_frame:0000000000025661                 db  83h
.eh_frame:0000000000025662                 db    3
.eh_frame:0000000000025663                 db  49h ; I
.eh_frame:0000000000025664                 db  0Eh
.eh_frame:0000000000025665                 db  20h
.eh_frame:0000000000025666                 db  61h ; a
.eh_frame:0000000000025667                 db  0Ah
.eh_frame:0000000000025668                 db  0Eh
.eh_frame:0000000000025669                 db  18h
.eh_frame:000000000002566A                 db  41h ; A
.eh_frame:000000000002566B                 db  0Eh
.eh_frame:000000000002566C                 db  10h
.eh_frame:000000000002566D                 db  41h ; A
.eh_frame:000000000002566E                 db  0Eh
.eh_frame:000000000002566F                 db    8
.eh_frame:0000000000025670                 db  42h ; B
.eh_frame:0000000000025671                 db  0Bh
.eh_frame:0000000000025672                 db  5Bh ; [
.eh_frame:0000000000025673                 db  0Ah
.eh_frame:0000000000025674                 db  0Eh
.eh_frame:0000000000025675                 db  18h
.eh_frame:0000000000025676                 db  41h ; A
.eh_frame:0000000000025677                 db  0Eh
.eh_frame:0000000000025678                 db  10h
.eh_frame:0000000000025679                 db  41h ; A
.eh_frame:000000000002567A                 db  0Eh
.eh_frame:000000000002567B                 db    8
.eh_frame:000000000002567C                 db  43h ; C
.eh_frame:000000000002567D                 db  0Bh
.eh_frame:000000000002567E                 db  4Eh ; N
.eh_frame:000000000002567F                 db  0Ah
.eh_frame:0000000000025680                 db  0Eh
.eh_frame:0000000000025681                 db  18h
.eh_frame:0000000000025682                 db  41h ; A
.eh_frame:0000000000025683                 db  0Eh
.eh_frame:0000000000025684                 db  10h
.eh_frame:0000000000025685                 db  41h ; A
.eh_frame:0000000000025686                 db  0Eh
.eh_frame:0000000000025687                 db    8
.eh_frame:0000000000025688                 db  41h ; A
.eh_frame:0000000000025689                 db  0Bh
.eh_frame:000000000002568A                 db    0
.eh_frame:000000000002568B                 db    0
.eh_frame:000000000002568C                 db  28h ; (
.eh_frame:000000000002568D                 db    0
.eh_frame:000000000002568E                 db    0
.eh_frame:000000000002568F                 db    0
.eh_frame:0000000000025690                 db  68h ; h
.eh_frame:0000000000025691                 db  1Ch
.eh_frame:0000000000025692                 db    0
.eh_frame:0000000000025693                 db    0
.eh_frame:0000000000025694                 db 0BCh
.eh_frame:0000000000025695                 db  8Dh
.eh_frame:0000000000025696                 db 0FEh
.eh_frame:0000000000025697                 db 0FFh
.eh_frame:0000000000025698                 db  5Ch ; \
.eh_frame:0000000000025699                 db    0
.eh_frame:000000000002569A                 db    0
.eh_frame:000000000002569B                 db    0
.eh_frame:000000000002569C                 db    0
.eh_frame:000000000002569D                 db  41h ; A
.eh_frame:000000000002569E                 db  0Eh
.eh_frame:000000000002569F                 db  10h
.eh_frame:00000000000256A0                 db  86h
.eh_frame:00000000000256A1                 db    2
.eh_frame:00000000000256A2                 db  41h ; A
.eh_frame:00000000000256A3                 db  0Eh
.eh_frame:00000000000256A4                 db  18h
.eh_frame:00000000000256A5                 db  83h
.eh_frame:00000000000256A6                 db    3
.eh_frame:00000000000256A7                 db  47h ; G
.eh_frame:00000000000256A8                 db  0Eh
.eh_frame:00000000000256A9                 db  20h
.eh_frame:00000000000256AA                 db  6Ch ; l
.eh_frame:00000000000256AB                 db  0Ah
.eh_frame:00000000000256AC                 db  0Eh
.eh_frame:00000000000256AD                 db  18h
.eh_frame:00000000000256AE                 db  43h ; C
.eh_frame:00000000000256AF                 db  0Eh
.eh_frame:00000000000256B0                 db  10h
.eh_frame:00000000000256B1                 db  41h ; A
.eh_frame:00000000000256B2                 db  0Eh
.eh_frame:00000000000256B3                 db    8
.eh_frame:00000000000256B4                 db  47h ; G
.eh_frame:00000000000256B5                 db  0Bh
.eh_frame:00000000000256B6                 db    0
.eh_frame:00000000000256B7                 db    0
.eh_frame:00000000000256B8                 db  24h ; $
.eh_frame:00000000000256B9                 db    0
.eh_frame:00000000000256BA                 db    0
.eh_frame:00000000000256BB                 db    0
.eh_frame:00000000000256BC                 db  94h
.eh_frame:00000000000256BD                 db  1Ch
.eh_frame:00000000000256BE                 db    0
.eh_frame:00000000000256BF                 db    0
.eh_frame:00000000000256C0                 db 0F0h
.eh_frame:00000000000256C1                 db  8Dh
.eh_frame:00000000000256C2                 db 0FEh
.eh_frame:00000000000256C3                 db 0FFh
.eh_frame:00000000000256C4                 db  6Bh ; k
.eh_frame:00000000000256C5                 db    0
.eh_frame:00000000000256C6                 db    0
.eh_frame:00000000000256C7                 db    0
.eh_frame:00000000000256C8                 db    0
.eh_frame:00000000000256C9                 db  41h ; A
.eh_frame:00000000000256CA                 db  0Eh
.eh_frame:00000000000256CB                 db  10h
.eh_frame:00000000000256CC                 db  83h
.eh_frame:00000000000256CD                 db    2
.eh_frame:00000000000256CE                 db  6Fh ; o
.eh_frame:00000000000256CF                 db  0Ah
.eh_frame:00000000000256D0                 db  0Eh
.eh_frame:00000000000256D1                 db    8
.eh_frame:00000000000256D2                 db  48h ; H
.eh_frame:00000000000256D3                 db  0Bh
.eh_frame:00000000000256D4                 db  5Ah ; Z
.eh_frame:00000000000256D5                 db  0Ah
.eh_frame:00000000000256D6                 db  0Eh
.eh_frame:00000000000256D7                 db    8
.eh_frame:00000000000256D8                 db  46h ; F
.eh_frame:00000000000256D9                 db  0Bh
.eh_frame:00000000000256DA                 db  52h ; R
.eh_frame:00000000000256DB                 db  0Eh
.eh_frame:00000000000256DC                 db    8
.eh_frame:00000000000256DD                 db    0
.eh_frame:00000000000256DE                 db    0
.eh_frame:00000000000256DF                 db    0
.eh_frame:00000000000256E0                 db  1Ch
.eh_frame:00000000000256E1                 db    0
.eh_frame:00000000000256E2                 db    0
.eh_frame:00000000000256E3                 db    0
.eh_frame:00000000000256E4                 db 0BCh
.eh_frame:00000000000256E5                 db  1Ch
.eh_frame:00000000000256E6                 db    0
.eh_frame:00000000000256E7                 db    0
.eh_frame:00000000000256E8                 db  38h ; 8
.eh_frame:00000000000256E9                 db  8Eh
.eh_frame:00000000000256EA                 db 0FEh
.eh_frame:00000000000256EB                 db 0FFh
.eh_frame:00000000000256EC                 db  63h ; c
.eh_frame:00000000000256ED                 db    0
.eh_frame:00000000000256EE                 db    0
.eh_frame:00000000000256EF                 db    0
.eh_frame:00000000000256F0                 db    0
.eh_frame:00000000000256F1                 db  47h ; G
.eh_frame:00000000000256F2                 db  0Eh
.eh_frame:00000000000256F3                 db  10h
.eh_frame:00000000000256F4                 db  83h
.eh_frame:00000000000256F5                 db    2
.eh_frame:00000000000256F6                 db  70h ; p
.eh_frame:00000000000256F7                 db  0Ah
.eh_frame:00000000000256F8                 db  0Eh
.eh_frame:00000000000256F9                 db    8
.eh_frame:00000000000256FA                 db  49h ; I
.eh_frame:00000000000256FB                 db  0Bh
.eh_frame:00000000000256FC                 db  62h ; b
.eh_frame:00000000000256FD                 db  0Eh
.eh_frame:00000000000256FE                 db    8
.eh_frame:00000000000256FF                 db    0
.eh_frame:0000000000025700                 db  10h
.eh_frame:0000000000025701                 db    0
.eh_frame:0000000000025702                 db    0
.eh_frame:0000000000025703                 db    0
.eh_frame:0000000000025704                 db 0DCh
.eh_frame:0000000000025705                 db  1Ch
.eh_frame:0000000000025706                 db    0
.eh_frame:0000000000025707                 db    0
.eh_frame:0000000000025708                 db  88h
.eh_frame:0000000000025709                 db  8Eh
.eh_frame:000000000002570A                 db 0FEh
.eh_frame:000000000002570B                 db 0FFh
.eh_frame:000000000002570C                 db  3Ah ; :
.eh_frame:000000000002570D                 db    0
.eh_frame:000000000002570E                 db    0
.eh_frame:000000000002570F                 db    0
.eh_frame:0000000000025710                 db    0
.eh_frame:0000000000025711                 db    0
.eh_frame:0000000000025712                 db    0
.eh_frame:0000000000025713                 db    0
.eh_frame:0000000000025714                 db  4Ch ; L
.eh_frame:0000000000025715                 db    0
.eh_frame:0000000000025716                 db    0
.eh_frame:0000000000025717                 db    0
.eh_frame:0000000000025718                 db 0F0h
.eh_frame:0000000000025719                 db  1Ch
.eh_frame:000000000002571A                 db    0
.eh_frame:000000000002571B                 db    0
.eh_frame:000000000002571C                 db 0B4h
.eh_frame:000000000002571D                 db  8Eh
.eh_frame:000000000002571E                 db 0FEh
.eh_frame:000000000002571F                 db 0FFh
.eh_frame:0000000000025720                 db  7Ah ; z
.eh_frame:0000000000025721                 db    2
.eh_frame:0000000000025722                 db    0
.eh_frame:0000000000025723                 db    0
.eh_frame:0000000000025724                 db    0
.eh_frame:0000000000025725                 db  42h ; B
.eh_frame:0000000000025726                 db  0Eh
.eh_frame:0000000000025727                 db  10h
.eh_frame:0000000000025728                 db  8Fh
.eh_frame:0000000000025729                 db    2
.eh_frame:000000000002572A                 db  42h ; B
.eh_frame:000000000002572B                 db  0Eh
.eh_frame:000000000002572C                 db  18h
.eh_frame:000000000002572D                 db  8Eh
.eh_frame:000000000002572E                 db    3
.eh_frame:000000000002572F                 db  45h ; E
.eh_frame:0000000000025730                 db  0Eh
.eh_frame:0000000000025731                 db  20h
.eh_frame:0000000000025732                 db  8Dh
.eh_frame:0000000000025733                 db    4
.eh_frame:0000000000025734                 db  42h ; B
.eh_frame:0000000000025735                 db  0Eh
.eh_frame:0000000000025736                 db  28h ; (
.eh_frame:0000000000025737                 db  8Ch
.eh_frame:0000000000025738                 db    5
.eh_frame:0000000000025739                 db  44h ; D
.eh_frame:000000000002573A                 db  0Eh
.eh_frame:000000000002573B                 db  30h ; 0
.eh_frame:000000000002573C                 db  86h
.eh_frame:000000000002573D                 db    6
.eh_frame:000000000002573E                 db  41h ; A
.eh_frame:000000000002573F                 db  0Eh
.eh_frame:0000000000025740                 db  38h ; 8
.eh_frame:0000000000025741                 db  83h
.eh_frame:0000000000025742                 db    7
.eh_frame:0000000000025743                 db  4Dh ; M
.eh_frame:0000000000025744                 db  0Eh
.eh_frame:0000000000025745                 db 0F0h
.eh_frame:0000000000025746                 db    1
.eh_frame:0000000000025747                 db    3
.eh_frame:0000000000025748                 db    8
.eh_frame:0000000000025749                 db    1
.eh_frame:000000000002574A                 db  0Ah
.eh_frame:000000000002574B                 db  0Eh
.eh_frame:000000000002574C                 db  38h ; 8
.eh_frame:000000000002574D                 db  41h ; A
.eh_frame:000000000002574E                 db  0Eh
.eh_frame:000000000002574F                 db  30h ; 0
.eh_frame:0000000000025750                 db  41h ; A
.eh_frame:0000000000025751                 db  0Eh
.eh_frame:0000000000025752                 db  28h ; (
.eh_frame:0000000000025753                 db  42h ; B
.eh_frame:0000000000025754                 db  0Eh
.eh_frame:0000000000025755                 db  20h
.eh_frame:0000000000025756                 db  42h ; B
.eh_frame:0000000000025757                 db  0Eh
.eh_frame:0000000000025758                 db  18h
.eh_frame:0000000000025759                 db  42h ; B
.eh_frame:000000000002575A                 db  0Eh
.eh_frame:000000000002575B                 db  10h
.eh_frame:000000000002575C                 db  42h ; B
.eh_frame:000000000002575D                 db  0Eh
.eh_frame:000000000002575E                 db    8
.eh_frame:000000000002575F                 db  41h ; A
.eh_frame:0000000000025760                 db  0Bh
.eh_frame:0000000000025761                 db    0
.eh_frame:0000000000025762                 db    0
.eh_frame:0000000000025763                 db    0
.eh_frame:0000000000025764                 db  40h ; @
.eh_frame:0000000000025765                 db    0
.eh_frame:0000000000025766                 db    0
.eh_frame:0000000000025767                 db    0
.eh_frame:0000000000025768                 db  40h ; @
.eh_frame:0000000000025769                 db  1Dh
.eh_frame:000000000002576A                 db    0
.eh_frame:000000000002576B                 db    0
.eh_frame:000000000002576C                 db 0E4h
.eh_frame:000000000002576D                 db  90h
.eh_frame:000000000002576E                 db 0FEh
.eh_frame:000000000002576F                 db 0FFh
.eh_frame:0000000000025770                 db 0AFh
.eh_frame:0000000000025771                 db    0
.eh_frame:0000000000025772                 db    0
.eh_frame:0000000000025773                 db    0
.eh_frame:0000000000025774                 db    0
.eh_frame:0000000000025775                 db  48h ; H
.eh_frame:0000000000025776                 db  0Eh
.eh_frame:0000000000025777                 db  10h
.eh_frame:0000000000025778                 db  8Ch
.eh_frame:0000000000025779                 db    2
.eh_frame:000000000002577A                 db  44h ; D
.eh_frame:000000000002577B                 db  0Eh
.eh_frame:000000000002577C                 db  18h
.eh_frame:000000000002577D                 db  86h
.eh_frame:000000000002577E                 db    3
.eh_frame:000000000002577F                 db  41h ; A
.eh_frame:0000000000025780                 db  0Eh
.eh_frame:0000000000025781                 db  20h
.eh_frame:0000000000025782                 db  83h
.eh_frame:0000000000025783                 db    4
.eh_frame:0000000000025784                 db    2
.eh_frame:0000000000025785                 db  65h ; e
.eh_frame:0000000000025786                 db  0Ah
.eh_frame:0000000000025787                 db  0Eh
.eh_frame:0000000000025788                 db  18h
.eh_frame:0000000000025789                 db  46h ; F
.eh_frame:000000000002578A                 db  0Eh
.eh_frame:000000000002578B                 db  10h
.eh_frame:000000000002578C                 db  42h ; B
.eh_frame:000000000002578D                 db  0Eh
.eh_frame:000000000002578E                 db    8
.eh_frame:000000000002578F                 db  46h ; F
.eh_frame:0000000000025790                 db  0Bh
.eh_frame:0000000000025791                 db  5Eh ; ^
.eh_frame:0000000000025792                 db  0Ah
.eh_frame:0000000000025793                 db  0Eh
.eh_frame:0000000000025794                 db  18h
.eh_frame:0000000000025795                 db  41h ; A
.eh_frame:0000000000025796                 db  0Eh
.eh_frame:0000000000025797                 db  10h
.eh_frame:0000000000025798                 db  42h ; B
.eh_frame:0000000000025799                 db  0Eh
.eh_frame:000000000002579A                 db    8
.eh_frame:000000000002579B                 db  47h ; G
.eh_frame:000000000002579C                 db  0Bh
.eh_frame:000000000002579D                 db  41h ; A
.eh_frame:000000000002579E                 db  0Eh
.eh_frame:000000000002579F                 db  18h
.eh_frame:00000000000257A0                 db  43h ; C
.eh_frame:00000000000257A1                 db  0Eh
.eh_frame:00000000000257A2                 db  10h
.eh_frame:00000000000257A3                 db  42h ; B
.eh_frame:00000000000257A4                 db  0Eh
.eh_frame:00000000000257A5                 db    8
.eh_frame:00000000000257A6                 db    0
.eh_frame:00000000000257A7                 db    0
.eh_frame:00000000000257A8                 db  18h
.eh_frame:00000000000257A9                 db    0
.eh_frame:00000000000257AA                 db    0
.eh_frame:00000000000257AB                 db    0
.eh_frame:00000000000257AC                 db  84h
.eh_frame:00000000000257AD                 db  1Dh
.eh_frame:00000000000257AE                 db    0
.eh_frame:00000000000257AF                 db    0
.eh_frame:00000000000257B0                 db  50h ; P
.eh_frame:00000000000257B1                 db  91h
.eh_frame:00000000000257B2                 db 0FEh
.eh_frame:00000000000257B3                 db 0FFh
.eh_frame:00000000000257B4                 db 0B8h
.eh_frame:00000000000257B5                 db    0
.eh_frame:00000000000257B6                 db    0
.eh_frame:00000000000257B7                 db    0
.eh_frame:00000000000257B8                 db    0
.eh_frame:00000000000257B9                 db  44h ; D
.eh_frame:00000000000257BA                 db  0Eh
.eh_frame:00000000000257BB                 db  30h ; 0
.eh_frame:00000000000257BC                 db    2
.eh_frame:00000000000257BD                 db  55h ; U
.eh_frame:00000000000257BE                 db  0Ah
.eh_frame:00000000000257BF                 db  0Eh
.eh_frame:00000000000257C0                 db    8
.eh_frame:00000000000257C1                 db  47h ; G
.eh_frame:00000000000257C2                 db  0Bh
.eh_frame:00000000000257C3                 db    0
.eh_frame:00000000000257C4                 db  4Ch ; L
.eh_frame:00000000000257C5                 db    0
.eh_frame:00000000000257C6                 db    0
.eh_frame:00000000000257C7                 db    0
.eh_frame:00000000000257C8                 db 0A0h
.eh_frame:00000000000257C9                 db  1Dh
.eh_frame:00000000000257CA                 db    0
.eh_frame:00000000000257CB                 db    0
.eh_frame:00000000000257CC                 db 0F4h
.eh_frame:00000000000257CD                 db  91h
.eh_frame:00000000000257CE                 db 0FEh
.eh_frame:00000000000257CF                 db 0FFh
.eh_frame:00000000000257D0                 db 0D1h
.eh_frame:00000000000257D1                 db    9
.eh_frame:00000000000257D2                 db    0
.eh_frame:00000000000257D3                 db    0
.eh_frame:00000000000257D4                 db    0
.eh_frame:00000000000257D5                 db  42h ; B
.eh_frame:00000000000257D6                 db  0Eh
.eh_frame:00000000000257D7                 db  10h
.eh_frame:00000000000257D8                 db  8Fh
.eh_frame:00000000000257D9                 db    2
.eh_frame:00000000000257DA                 db  42h ; B
.eh_frame:00000000000257DB                 db  0Eh
.eh_frame:00000000000257DC                 db  18h
.eh_frame:00000000000257DD                 db  8Eh
.eh_frame:00000000000257DE                 db    3
.eh_frame:00000000000257DF                 db  45h ; E
.eh_frame:00000000000257E0                 db  0Eh
.eh_frame:00000000000257E1                 db  20h
.eh_frame:00000000000257E2                 db  8Dh
.eh_frame:00000000000257E3                 db    4
.eh_frame:00000000000257E4                 db  42h ; B
.eh_frame:00000000000257E5                 db  0Eh
.eh_frame:00000000000257E6                 db  28h ; (
.eh_frame:00000000000257E7                 db  8Ch
.eh_frame:00000000000257E8                 db    5
.eh_frame:00000000000257E9                 db  41h ; A
.eh_frame:00000000000257EA                 db  0Eh
.eh_frame:00000000000257EB                 db  30h ; 0
.eh_frame:00000000000257EC                 db  86h
.eh_frame:00000000000257ED                 db    6
.eh_frame:00000000000257EE                 db  41h ; A
.eh_frame:00000000000257EF                 db  0Eh
.eh_frame:00000000000257F0                 db  38h ; 8
.eh_frame:00000000000257F1                 db  83h
.eh_frame:00000000000257F2                 db    7
.eh_frame:00000000000257F3                 db  44h ; D
.eh_frame:00000000000257F4                 db  0Eh
.eh_frame:00000000000257F5                 db 0B0h
.eh_frame:00000000000257F6                 db    1
.eh_frame:00000000000257F7                 db    3
.eh_frame:00000000000257F8                 db 0D1h
.eh_frame:00000000000257F9                 db    5
.eh_frame:00000000000257FA                 db  0Ah
.eh_frame:00000000000257FB                 db  0Eh
.eh_frame:00000000000257FC                 db  38h ; 8
.eh_frame:00000000000257FD                 db  41h ; A
.eh_frame:00000000000257FE                 db  0Eh
.eh_frame:00000000000257FF                 db  30h ; 0
.eh_frame:0000000000025800                 db  41h ; A
.eh_frame:0000000000025801                 db  0Eh
.eh_frame:0000000000025802                 db  28h ; (
.eh_frame:0000000000025803                 db  42h ; B
.eh_frame:0000000000025804                 db  0Eh
.eh_frame:0000000000025805                 db  20h
.eh_frame:0000000000025806                 db  42h ; B
.eh_frame:0000000000025807                 db  0Eh
.eh_frame:0000000000025808                 db  18h
.eh_frame:0000000000025809                 db  42h ; B
.eh_frame:000000000002580A                 db  0Eh
.eh_frame:000000000002580B                 db  10h
.eh_frame:000000000002580C                 db  42h ; B
.eh_frame:000000000002580D                 db  0Eh
.eh_frame:000000000002580E                 db    8
.eh_frame:000000000002580F                 db  44h ; D
.eh_frame:0000000000025810                 db  0Bh
.eh_frame:0000000000025811                 db    0
.eh_frame:0000000000025812                 db    0
.eh_frame:0000000000025813                 db    0
.eh_frame:0000000000025814                 db  48h ; H
.eh_frame:0000000000025815                 db    0
.eh_frame:0000000000025816                 db    0
.eh_frame:0000000000025817                 db    0
.eh_frame:0000000000025818                 db 0F0h
.eh_frame:0000000000025819                 db  1Dh
.eh_frame:000000000002581A                 db    0
.eh_frame:000000000002581B                 db    0
.eh_frame:000000000002581C                 db  84h
.eh_frame:000000000002581D                 db  9Bh
.eh_frame:000000000002581E                 db 0FEh
.eh_frame:000000000002581F                 db 0FFh
.eh_frame:0000000000025820                 db 0AAh
.eh_frame:0000000000025821                 db    3
.eh_frame:0000000000025822                 db    0
.eh_frame:0000000000025823                 db    0
.eh_frame:0000000000025824                 db    0
.eh_frame:0000000000025825                 db  42h ; B
.eh_frame:0000000000025826                 db  0Eh
.eh_frame:0000000000025827                 db  10h
.eh_frame:0000000000025828                 db  8Fh
.eh_frame:0000000000025829                 db    2
.eh_frame:000000000002582A                 db  42h ; B
.eh_frame:000000000002582B                 db  0Eh
.eh_frame:000000000002582C                 db  18h
.eh_frame:000000000002582D                 db  8Eh
.eh_frame:000000000002582E                 db    3
.eh_frame:000000000002582F                 db  42h ; B
.eh_frame:0000000000025830                 db  0Eh
.eh_frame:0000000000025831                 db  20h
.eh_frame:0000000000025832                 db  8Dh
.eh_frame:0000000000025833                 db    4
.eh_frame:0000000000025834                 db  42h ; B
.eh_frame:0000000000025835                 db  0Eh
.eh_frame:0000000000025836                 db  28h ; (
.eh_frame:0000000000025837                 db  8Ch
.eh_frame:0000000000025838                 db    5
.eh_frame:0000000000025839                 db  41h ; A
.eh_frame:000000000002583A                 db  0Eh
.eh_frame:000000000002583B                 db  30h ; 0
.eh_frame:000000000002583C                 db  86h
.eh_frame:000000000002583D                 db    6
.eh_frame:000000000002583E                 db  41h ; A
.eh_frame:000000000002583F                 db  0Eh
.eh_frame:0000000000025840                 db  38h ; 8
.eh_frame:0000000000025841                 db  83h
.eh_frame:0000000000025842                 db    7
.eh_frame:0000000000025843                 db  44h ; D
.eh_frame:0000000000025844                 db  0Eh
.eh_frame:0000000000025845                 db  60h ; `
.eh_frame:0000000000025846                 db    3
.eh_frame:0000000000025847                 db 0A4h
.eh_frame:0000000000025848                 db    2
.eh_frame:0000000000025849                 db  0Ah
.eh_frame:000000000002584A                 db  0Eh
.eh_frame:000000000002584B                 db  38h ; 8
.eh_frame:000000000002584C                 db  44h ; D
.eh_frame:000000000002584D                 db  0Eh
.eh_frame:000000000002584E                 db  30h ; 0
.eh_frame:000000000002584F                 db  41h ; A
.eh_frame:0000000000025850                 db  0Eh
.eh_frame:0000000000025851                 db  28h ; (
.eh_frame:0000000000025852                 db  42h ; B
.eh_frame:0000000000025853                 db  0Eh
.eh_frame:0000000000025854                 db  20h
.eh_frame:0000000000025855                 db  42h ; B
.eh_frame:0000000000025856                 db  0Eh
.eh_frame:0000000000025857                 db  18h
.eh_frame:0000000000025858                 db  42h ; B
.eh_frame:0000000000025859                 db  0Eh
.eh_frame:000000000002585A                 db  10h
.eh_frame:000000000002585B                 db  42h ; B
.eh_frame:000000000002585C                 db  0Eh
.eh_frame:000000000002585D                 db    8
.eh_frame:000000000002585E                 db  41h ; A
.eh_frame:000000000002585F                 db  0Bh
.eh_frame:0000000000025860                 db  2Ch ; ,
.eh_frame:0000000000025861                 db    0
.eh_frame:0000000000025862                 db    0
.eh_frame:0000000000025863                 db    0
.eh_frame:0000000000025864                 db  3Ch ; <
.eh_frame:0000000000025865                 db  1Eh
.eh_frame:0000000000025866                 db    0
.eh_frame:0000000000025867                 db    0
.eh_frame:0000000000025868                 db 0E8h
.eh_frame:0000000000025869                 db  9Eh
.eh_frame:000000000002586A                 db 0FEh
.eh_frame:000000000002586B                 db 0FFh
.eh_frame:000000000002586C                 db  82h
.eh_frame:000000000002586D                 db    1
.eh_frame:000000000002586E                 db    0
.eh_frame:000000000002586F                 db    0
.eh_frame:0000000000025870                 db    0
.eh_frame:0000000000025871                 db  42h ; B
.eh_frame:0000000000025872                 db  0Eh
.eh_frame:0000000000025873                 db  10h
.eh_frame:0000000000025874                 db  8Ch
.eh_frame:0000000000025875                 db    2
.eh_frame:0000000000025876                 db  41h ; A
.eh_frame:0000000000025877                 db  0Eh
.eh_frame:0000000000025878                 db  18h
.eh_frame:0000000000025879                 db  86h
.eh_frame:000000000002587A                 db    3
.eh_frame:000000000002587B                 db  44h ; D
.eh_frame:000000000002587C                 db  0Eh
.eh_frame:000000000002587D                 db  20h
.eh_frame:000000000002587E                 db  83h
.eh_frame:000000000002587F                 db    4
.eh_frame:0000000000025880                 db    2
.eh_frame:0000000000025881                 db 0C2h
.eh_frame:0000000000025882                 db  0Ah
.eh_frame:0000000000025883                 db  0Eh
.eh_frame:0000000000025884                 db  18h
.eh_frame:0000000000025885                 db  41h ; A
.eh_frame:0000000000025886                 db  0Eh
.eh_frame:0000000000025887                 db  10h
.eh_frame:0000000000025888                 db  42h ; B
.eh_frame:0000000000025889                 db  0Eh
.eh_frame:000000000002588A                 db    8
.eh_frame:000000000002588B                 db  44h ; D
.eh_frame:000000000002588C                 db  0Bh
.eh_frame:000000000002588D                 db    0
.eh_frame:000000000002588E                 db    0
.eh_frame:000000000002588F                 db    0
.eh_frame:0000000000025890                 db  60h ; `
.eh_frame:0000000000025891                 db    0
.eh_frame:0000000000025892                 db    0
.eh_frame:0000000000025893                 db    0
.eh_frame:0000000000025894                 db  6Ch ; l
.eh_frame:0000000000025895                 db  1Eh
.eh_frame:0000000000025896                 db    0
.eh_frame:0000000000025897                 db    0
.eh_frame:0000000000025898                 db  48h ; H
.eh_frame:0000000000025899                 db 0A0h
.eh_frame:000000000002589A                 db 0FEh
.eh_frame:000000000002589B                 db 0FFh
.eh_frame:000000000002589C                 db  78h ; x
.eh_frame:000000000002589D                 db    7
.eh_frame:000000000002589E                 db    0
.eh_frame:000000000002589F                 db    0
.eh_frame:00000000000258A0                 db    0
.eh_frame:00000000000258A1                 db  42h ; B
.eh_frame:00000000000258A2                 db  0Eh
.eh_frame:00000000000258A3                 db  10h
.eh_frame:00000000000258A4                 db  8Eh
.eh_frame:00000000000258A5                 db    2
.eh_frame:00000000000258A6                 db  42h ; B
.eh_frame:00000000000258A7                 db  0Eh
.eh_frame:00000000000258A8                 db  18h
.eh_frame:00000000000258A9                 db  8Dh
.eh_frame:00000000000258AA                 db    3
.eh_frame:00000000000258AB                 db  42h ; B
.eh_frame:00000000000258AC                 db  0Eh
.eh_frame:00000000000258AD                 db  20h
.eh_frame:00000000000258AE                 db  8Ch
.eh_frame:00000000000258AF                 db    4
.eh_frame:00000000000258B0                 db  41h ; A
.eh_frame:00000000000258B1                 db  0Eh
.eh_frame:00000000000258B2                 db  28h ; (
.eh_frame:00000000000258B3                 db  86h
.eh_frame:00000000000258B4                 db    5
.eh_frame:00000000000258B5                 db  41h ; A
.eh_frame:00000000000258B6                 db  0Eh
.eh_frame:00000000000258B7                 db  30h ; 0
.eh_frame:00000000000258B8                 db  83h
.eh_frame:00000000000258B9                 db    6
.eh_frame:00000000000258BA                 db    3
.eh_frame:00000000000258BB                 db  19h
.eh_frame:00000000000258BC                 db    1
.eh_frame:00000000000258BD                 db  0Ah
.eh_frame:00000000000258BE                 db  0Eh
.eh_frame:00000000000258BF                 db  28h ; (
.eh_frame:00000000000258C0                 db  44h ; D
.eh_frame:00000000000258C1                 db  0Eh
.eh_frame:00000000000258C2                 db  20h
.eh_frame:00000000000258C3                 db  42h ; B
.eh_frame:00000000000258C4                 db  0Eh
.eh_frame:00000000000258C5                 db  18h
.eh_frame:00000000000258C6                 db  42h ; B
.eh_frame:00000000000258C7                 db  0Eh
.eh_frame:00000000000258C8                 db  10h
.eh_frame:00000000000258C9                 db  42h ; B
.eh_frame:00000000000258CA                 db  0Eh
.eh_frame:00000000000258CB                 db    8
.eh_frame:00000000000258CC                 db  45h ; E
.eh_frame:00000000000258CD                 db  0Bh
.eh_frame:00000000000258CE                 db    2
.eh_frame:00000000000258CF                 db  6Bh ; k
.eh_frame:00000000000258D0                 db  0Ah
.eh_frame:00000000000258D1                 db  0Eh
.eh_frame:00000000000258D2                 db  28h ; (
.eh_frame:00000000000258D3                 db  44h ; D
.eh_frame:00000000000258D4                 db  0Eh
.eh_frame:00000000000258D5                 db  20h
.eh_frame:00000000000258D6                 db  42h ; B
.eh_frame:00000000000258D7                 db  0Eh
.eh_frame:00000000000258D8                 db  18h
.eh_frame:00000000000258D9                 db  42h ; B
.eh_frame:00000000000258DA                 db  0Eh
.eh_frame:00000000000258DB                 db  10h
.eh_frame:00000000000258DC                 db  42h ; B
.eh_frame:00000000000258DD                 db  0Eh
.eh_frame:00000000000258DE                 db    8
.eh_frame:00000000000258DF                 db  4Bh ; K
.eh_frame:00000000000258E0                 db  0Bh
.eh_frame:00000000000258E1                 db    2
.eh_frame:00000000000258E2                 db 0E2h
.eh_frame:00000000000258E3                 db  0Ah
.eh_frame:00000000000258E4                 db  0Eh
.eh_frame:00000000000258E5                 db  28h ; (
.eh_frame:00000000000258E6                 db  41h ; A
.eh_frame:00000000000258E7                 db  0Eh
.eh_frame:00000000000258E8                 db  20h
.eh_frame:00000000000258E9                 db  42h ; B
.eh_frame:00000000000258EA                 db  0Eh
.eh_frame:00000000000258EB                 db  18h
.eh_frame:00000000000258EC                 db  42h ; B
.eh_frame:00000000000258ED                 db  0Eh
.eh_frame:00000000000258EE                 db  10h
.eh_frame:00000000000258EF                 db  42h ; B
.eh_frame:00000000000258F0                 db  0Eh
.eh_frame:00000000000258F1                 db    8
.eh_frame:00000000000258F2                 db  47h ; G
.eh_frame:00000000000258F3                 db  0Bh
.eh_frame:00000000000258F4                 db  14h
.eh_frame:00000000000258F5                 db    0
.eh_frame:00000000000258F6                 db    0
.eh_frame:00000000000258F7                 db    0
.eh_frame:00000000000258F8                 db 0D0h
.eh_frame:00000000000258F9                 db  1Eh
.eh_frame:00000000000258FA                 db    0
.eh_frame:00000000000258FB                 db    0
.eh_frame:00000000000258FC                 db  64h ; d
.eh_frame:00000000000258FD                 db 0A7h
.eh_frame:00000000000258FE                 db 0FEh
.eh_frame:00000000000258FF                 db 0FFh
.eh_frame:0000000000025900                 db  29h ; )
.eh_frame:0000000000025901                 db    0
.eh_frame:0000000000025902                 db    0
.eh_frame:0000000000025903                 db    0
.eh_frame:0000000000025904                 db    0
.eh_frame:0000000000025905                 db  54h ; T
.eh_frame:0000000000025906                 db  0Eh
.eh_frame:0000000000025907                 db  10h
.eh_frame:0000000000025908                 db  54h ; T
.eh_frame:0000000000025909                 db  0Eh
.eh_frame:000000000002590A                 db    8
.eh_frame:000000000002590B                 db    0
.eh_frame:000000000002590C                 db  60h ; `
.eh_frame:000000000002590D                 db    0
.eh_frame:000000000002590E                 db    0
.eh_frame:000000000002590F                 db    0
.eh_frame:0000000000025910                 db 0E8h
.eh_frame:0000000000025911                 db  1Eh
.eh_frame:0000000000025912                 db    0
.eh_frame:0000000000025913                 db    0
.eh_frame:0000000000025914                 db  7Ch ; |
.eh_frame:0000000000025915                 db 0A7h
.eh_frame:0000000000025916                 db 0FEh
.eh_frame:0000000000025917                 db 0FFh
.eh_frame:0000000000025918                 db  4Eh ; N
.eh_frame:0000000000025919                 db    1
.eh_frame:000000000002591A                 db    0
.eh_frame:000000000002591B                 db    0
.eh_frame:000000000002591C                 db    0
.eh_frame:000000000002591D                 db  42h ; B
.eh_frame:000000000002591E                 db  0Eh
.eh_frame:000000000002591F                 db  10h
.eh_frame:0000000000025920                 db  8Eh
.eh_frame:0000000000025921                 db    2
.eh_frame:0000000000025922                 db  42h ; B
.eh_frame:0000000000025923                 db  0Eh
.eh_frame:0000000000025924                 db  18h
.eh_frame:0000000000025925                 db  8Dh
.eh_frame:0000000000025926                 db    3
.eh_frame:0000000000025927                 db  42h ; B
.eh_frame:0000000000025928                 db  0Eh
.eh_frame:0000000000025929                 db  20h
.eh_frame:000000000002592A                 db  8Ch
.eh_frame:000000000002592B                 db    4
.eh_frame:000000000002592C                 db  41h ; A
.eh_frame:000000000002592D                 db  0Eh
.eh_frame:000000000002592E                 db  28h ; (
.eh_frame:000000000002592F                 db  86h
.eh_frame:0000000000025930                 db    5
.eh_frame:0000000000025931                 db  44h ; D
.eh_frame:0000000000025932                 db  0Eh
.eh_frame:0000000000025933                 db  30h ; 0
.eh_frame:0000000000025934                 db  83h
.eh_frame:0000000000025935                 db    6
.eh_frame:0000000000025936                 db    2
.eh_frame:0000000000025937                 db  8Ah
.eh_frame:0000000000025938                 db  0Ah
.eh_frame:0000000000025939                 db  0Eh
.eh_frame:000000000002593A                 db  28h ; (
.eh_frame:000000000002593B                 db  41h ; A
.eh_frame:000000000002593C                 db  0Eh
.eh_frame:000000000002593D                 db  20h
.eh_frame:000000000002593E                 db  42h ; B
.eh_frame:000000000002593F                 db  0Eh
.eh_frame:0000000000025940                 db  18h
.eh_frame:0000000000025941                 db  42h ; B
.eh_frame:0000000000025942                 db  0Eh
.eh_frame:0000000000025943                 db  10h
.eh_frame:0000000000025944                 db  42h ; B
.eh_frame:0000000000025945                 db  0Eh
.eh_frame:0000000000025946                 db    8
.eh_frame:0000000000025947                 db  44h ; D
.eh_frame:0000000000025948                 db  0Bh
.eh_frame:0000000000025949                 db  41h ; A
.eh_frame:000000000002594A                 db  0Ah
.eh_frame:000000000002594B                 db  0Eh
.eh_frame:000000000002594C                 db  28h ; (
.eh_frame:000000000002594D                 db  45h ; E
.eh_frame:000000000002594E                 db  0Eh
.eh_frame:000000000002594F                 db  20h
.eh_frame:0000000000025950                 db  42h ; B
.eh_frame:0000000000025951                 db  0Eh
.eh_frame:0000000000025952                 db  18h
.eh_frame:0000000000025953                 db  42h ; B
.eh_frame:0000000000025954                 db  0Eh
.eh_frame:0000000000025955                 db  10h
.eh_frame:0000000000025956                 db  42h ; B
.eh_frame:0000000000025957                 db  0Eh
.eh_frame:0000000000025958                 db    8
.eh_frame:0000000000025959                 db  44h ; D
.eh_frame:000000000002595A                 db  0Bh
.eh_frame:000000000002595B                 db  41h ; A
.eh_frame:000000000002595C                 db  0Ah
.eh_frame:000000000002595D                 db  0Eh
.eh_frame:000000000002595E                 db  28h ; (
.eh_frame:000000000002595F                 db  43h ; C
.eh_frame:0000000000025960                 db  0Eh
.eh_frame:0000000000025961                 db  20h
.eh_frame:0000000000025962                 db  42h ; B
.eh_frame:0000000000025963                 db  0Eh
.eh_frame:0000000000025964                 db  18h
.eh_frame:0000000000025965                 db  42h ; B
.eh_frame:0000000000025966                 db  0Eh
.eh_frame:0000000000025967                 db  10h
.eh_frame:0000000000025968                 db  42h ; B
.eh_frame:0000000000025969                 db  0Eh
.eh_frame:000000000002596A                 db    8
.eh_frame:000000000002596B                 db  46h ; F
.eh_frame:000000000002596C                 db  0Bh
.eh_frame:000000000002596D                 db    0
.eh_frame:000000000002596E                 db    0
.eh_frame:000000000002596F                 db    0
.eh_frame:0000000000025970                 db  3Ch ; <
.eh_frame:0000000000025971                 db    0
.eh_frame:0000000000025972                 db    0
.eh_frame:0000000000025973                 db    0
.eh_frame:0000000000025974                 db  4Ch ; L
.eh_frame:0000000000025975                 db  1Fh
.eh_frame:0000000000025976                 db    0
.eh_frame:0000000000025977                 db    0
.eh_frame:0000000000025978                 db  68h ; h
.eh_frame:0000000000025979                 db 0A8h
.eh_frame:000000000002597A                 db 0FEh
.eh_frame:000000000002597B                 db 0FFh
.eh_frame:000000000002597C                 db  83h
.eh_frame:000000000002597D                 db    0
.eh_frame:000000000002597E                 db    0
.eh_frame:000000000002597F                 db    0
.eh_frame:0000000000025980                 db    0
.eh_frame:0000000000025981                 db  42h ; B
.eh_frame:0000000000025982                 db  0Eh
.eh_frame:0000000000025983                 db  10h
.eh_frame:0000000000025984                 db  8Dh
.eh_frame:0000000000025985                 db    2
.eh_frame:0000000000025986                 db  42h ; B
.eh_frame:0000000000025987                 db  0Eh
.eh_frame:0000000000025988                 db  18h
.eh_frame:0000000000025989                 db  8Ch
.eh_frame:000000000002598A                 db    3
.eh_frame:000000000002598B                 db  44h ; D
.eh_frame:000000000002598C                 db  0Eh
.eh_frame:000000000002598D                 db  20h
.eh_frame:000000000002598E                 db  86h
.eh_frame:000000000002598F                 db    4
.eh_frame:0000000000025990                 db  41h ; A
.eh_frame:0000000000025991                 db  0Eh
.eh_frame:0000000000025992                 db  28h ; (
.eh_frame:0000000000025993                 db  83h
.eh_frame:0000000000025994                 db    5
.eh_frame:0000000000025995                 db  4Ah ; J
.eh_frame:0000000000025996                 db  0Eh
.eh_frame:0000000000025997                 db  40h ; @
.eh_frame:0000000000025998                 db    2
.eh_frame:0000000000025999                 db  64h ; d
.eh_frame:000000000002599A                 db  0Ah
.eh_frame:000000000002599B                 db  0Eh
.eh_frame:000000000002599C                 db  28h ; (
.eh_frame:000000000002599D                 db  41h ; A
.eh_frame:000000000002599E                 db  0Eh
.eh_frame:000000000002599F                 db  20h
.eh_frame:00000000000259A0                 db  41h ; A
.eh_frame:00000000000259A1                 db  0Eh
.eh_frame:00000000000259A2                 db  18h
.eh_frame:00000000000259A3                 db  42h ; B
.eh_frame:00000000000259A4                 db  0Eh
.eh_frame:00000000000259A5                 db  10h
.eh_frame:00000000000259A6                 db  42h ; B
.eh_frame:00000000000259A7                 db  0Eh
.eh_frame:00000000000259A8                 db    8
.eh_frame:00000000000259A9                 db  41h ; A
.eh_frame:00000000000259AA                 db  0Bh
.eh_frame:00000000000259AB                 db    0
.eh_frame:00000000000259AC                 db    0
.eh_frame:00000000000259AD                 db    0
.eh_frame:00000000000259AE                 db    0
.eh_frame:00000000000259AF                 db    0
.eh_frame:00000000000259B0                 db  18h
.eh_frame:00000000000259B1                 db    0
.eh_frame:00000000000259B2                 db    0
.eh_frame:00000000000259B3                 db    0
.eh_frame:00000000000259B4                 db  8Ch
.eh_frame:00000000000259B5                 db  1Fh
.eh_frame:00000000000259B6                 db    0
.eh_frame:00000000000259B7                 db    0
.eh_frame:00000000000259B8                 db 0B8h
.eh_frame:00000000000259B9                 db 0A8h
.eh_frame:00000000000259BA                 db 0FEh
.eh_frame:00000000000259BB                 db 0FFh
.eh_frame:00000000000259BC                 db  82h
.eh_frame:00000000000259BD                 db    0
.eh_frame:00000000000259BE                 db    0
.eh_frame:00000000000259BF                 db    0
.eh_frame:00000000000259C0                 db    0
.eh_frame:00000000000259C1                 db  41h ; A
.eh_frame:00000000000259C2                 db  0Eh
.eh_frame:00000000000259C3                 db  10h
.eh_frame:00000000000259C4                 db  83h
.eh_frame:00000000000259C5                 db    2
.eh_frame:00000000000259C6                 db    2
.eh_frame:00000000000259C7                 db  80h
.eh_frame:00000000000259C8                 db  0Eh
.eh_frame:00000000000259C9                 db    8
.eh_frame:00000000000259CA                 db    0
.eh_frame:00000000000259CB                 db    0
.eh_frame:00000000000259CC                 db  18h
.eh_frame:00000000000259CD                 db    0
.eh_frame:00000000000259CE                 db    0
.eh_frame:00000000000259CF                 db    0
.eh_frame:00000000000259D0                 db 0A8h
.eh_frame:00000000000259D1                 db  1Fh
.eh_frame:00000000000259D2                 db    0
.eh_frame:00000000000259D3                 db    0
.eh_frame:00000000000259D4                 db  2Ch ; ,
.eh_frame:00000000000259D5                 db 0A9h
.eh_frame:00000000000259D6                 db 0FEh
.eh_frame:00000000000259D7                 db 0FFh
.eh_frame:00000000000259D8                 db  36h ; 6
.eh_frame:00000000000259D9                 db    0
.eh_frame:00000000000259DA                 db    0
.eh_frame:00000000000259DB                 db    0
.eh_frame:00000000000259DC                 db    0
.eh_frame:00000000000259DD                 db  41h ; A
.eh_frame:00000000000259DE                 db  0Eh
.eh_frame:00000000000259DF                 db  10h
.eh_frame:00000000000259E0                 db  83h
.eh_frame:00000000000259E1                 db    2
.eh_frame:00000000000259E2                 db  70h ; p
.eh_frame:00000000000259E3                 db  0Eh
.eh_frame:00000000000259E4                 db    8
.eh_frame:00000000000259E5                 db    0
.eh_frame:00000000000259E6                 db    0
.eh_frame:00000000000259E7                 db    0
.eh_frame:00000000000259E8                 db  74h ; t
.eh_frame:00000000000259E9                 db    0
.eh_frame:00000000000259EA                 db    0
.eh_frame:00000000000259EB                 db    0
.eh_frame:00000000000259EC                 db 0C4h
.eh_frame:00000000000259ED                 db  1Fh
.eh_frame:00000000000259EE                 db    0
.eh_frame:00000000000259EF                 db    0
.eh_frame:00000000000259F0                 db  50h ; P
.eh_frame:00000000000259F1                 db 0A9h
.eh_frame:00000000000259F2                 db 0FEh
.eh_frame:00000000000259F3                 db 0FFh
.eh_frame:00000000000259F4                 db  48h ; H
.eh_frame:00000000000259F5                 db    8
.eh_frame:00000000000259F6                 db    0
.eh_frame:00000000000259F7                 db    0
.eh_frame:00000000000259F8                 db    0
.eh_frame:00000000000259F9                 db  42h ; B
.eh_frame:00000000000259FA                 db  0Eh
.eh_frame:00000000000259FB                 db  10h
.eh_frame:00000000000259FC                 db  8Fh
.eh_frame:00000000000259FD                 db    2
.eh_frame:00000000000259FE                 db  42h ; B
.eh_frame:00000000000259FF                 db  0Eh
.eh_frame:0000000000025A00                 db  18h
.eh_frame:0000000000025A01                 db  8Eh
.eh_frame:0000000000025A02                 db    3
.eh_frame:0000000000025A03                 db  49h ; I
.eh_frame:0000000000025A04                 db  0Eh
.eh_frame:0000000000025A05                 db  20h
.eh_frame:0000000000025A06                 db  8Dh
.eh_frame:0000000000025A07                 db    4
.eh_frame:0000000000025A08                 db  42h ; B
.eh_frame:0000000000025A09                 db  0Eh
.eh_frame:0000000000025A0A                 db  28h ; (
.eh_frame:0000000000025A0B                 db  8Ch
.eh_frame:0000000000025A0C                 db    5
.eh_frame:0000000000025A0D                 db  48h ; H
.eh_frame:0000000000025A0E                 db  0Eh
.eh_frame:0000000000025A0F                 db  30h ; 0
.eh_frame:0000000000025A10                 db  86h
.eh_frame:0000000000025A11                 db    6
.eh_frame:0000000000025A12                 db  41h ; A
.eh_frame:0000000000025A13                 db  0Eh
.eh_frame:0000000000025A14                 db  38h ; 8
.eh_frame:0000000000025A15                 db  83h
.eh_frame:0000000000025A16                 db    7
.eh_frame:0000000000025A17                 db  44h ; D
.eh_frame:0000000000025A18                 db  0Eh
.eh_frame:0000000000025A19                 db 0A0h
.eh_frame:0000000000025A1A                 db    1
.eh_frame:0000000000025A1B                 db    2
.eh_frame:0000000000025A1C                 db  6Fh ; o
.eh_frame:0000000000025A1D                 db  0Eh
.eh_frame:0000000000025A1E                 db 0A8h
.eh_frame:0000000000025A1F                 db    1
.eh_frame:0000000000025A20                 db  4Dh ; M
.eh_frame:0000000000025A21                 db  0Eh
.eh_frame:0000000000025A22                 db 0B0h
.eh_frame:0000000000025A23                 db    1
.eh_frame:0000000000025A24                 db  46h ; F
.eh_frame:0000000000025A25                 db  0Eh
.eh_frame:0000000000025A26                 db 0B8h
.eh_frame:0000000000025A27                 db    1
.eh_frame:0000000000025A28                 db  46h ; F
.eh_frame:0000000000025A29                 db  0Eh
.eh_frame:0000000000025A2A                 db 0C0h
.eh_frame:0000000000025A2B                 db    1
.eh_frame:0000000000025A2C                 db  5Dh ; ]
.eh_frame:0000000000025A2D                 db  0Eh
.eh_frame:0000000000025A2E                 db 0A0h
.eh_frame:0000000000025A2F                 db    1
.eh_frame:0000000000025A30                 db  75h ; u
.eh_frame:0000000000025A31                 db  0Eh
.eh_frame:0000000000025A32                 db 0A8h
.eh_frame:0000000000025A33                 db    1
.eh_frame:0000000000025A34                 db  41h ; A
.eh_frame:0000000000025A35                 db  0Eh
.eh_frame:0000000000025A36                 db 0B0h
.eh_frame:0000000000025A37                 db    1
.eh_frame:0000000000025A38                 db  62h ; b
.eh_frame:0000000000025A39                 db  0Eh
.eh_frame:0000000000025A3A                 db 0A8h
.eh_frame:0000000000025A3B                 db    1
.eh_frame:0000000000025A3C                 db  41h ; A
.eh_frame:0000000000025A3D                 db  0Eh
.eh_frame:0000000000025A3E                 db 0A0h
.eh_frame:0000000000025A3F                 db    1
.eh_frame:0000000000025A40                 db    3
.eh_frame:0000000000025A41                 db 0DFh
.eh_frame:0000000000025A42                 db    1
.eh_frame:0000000000025A43                 db  0Ah
.eh_frame:0000000000025A44                 db  0Eh
.eh_frame:0000000000025A45                 db  38h ; 8
.eh_frame:0000000000025A46                 db  41h ; A
.eh_frame:0000000000025A47                 db  0Eh
.eh_frame:0000000000025A48                 db  30h ; 0
.eh_frame:0000000000025A49                 db  41h ; A
.eh_frame:0000000000025A4A                 db  0Eh
.eh_frame:0000000000025A4B                 db  28h ; (
.eh_frame:0000000000025A4C                 db  42h ; B
.eh_frame:0000000000025A4D                 db  0Eh
.eh_frame:0000000000025A4E                 db  20h
.eh_frame:0000000000025A4F                 db  42h ; B
.eh_frame:0000000000025A50                 db  0Eh
.eh_frame:0000000000025A51                 db  18h
.eh_frame:0000000000025A52                 db  42h ; B
.eh_frame:0000000000025A53                 db  0Eh
.eh_frame:0000000000025A54                 db  10h
.eh_frame:0000000000025A55                 db  42h ; B
.eh_frame:0000000000025A56                 db  0Eh
.eh_frame:0000000000025A57                 db    8
.eh_frame:0000000000025A58                 db  45h ; E
.eh_frame:0000000000025A59                 db  0Bh
.eh_frame:0000000000025A5A                 db    0
.eh_frame:0000000000025A5B                 db    0
.eh_frame:0000000000025A5C                 db    0
.eh_frame:0000000000025A5D                 db    0
.eh_frame:0000000000025A5E                 db    0
.eh_frame:0000000000025A5F                 db    0
.eh_frame:0000000000025A60                 db  10h
.eh_frame:0000000000025A61                 db    0
.eh_frame:0000000000025A62                 db    0
.eh_frame:0000000000025A63                 db    0
.eh_frame:0000000000025A64                 db  3Ch ; <
.eh_frame:0000000000025A65                 db  20h
.eh_frame:0000000000025A66                 db    0
.eh_frame:0000000000025A67                 db    0
.eh_frame:0000000000025A68                 db  28h ; (
.eh_frame:0000000000025A69                 db 0B1h
.eh_frame:0000000000025A6A                 db 0FEh
.eh_frame:0000000000025A6B                 db 0FFh
.eh_frame:0000000000025A6C                 db  2Fh ; /
.eh_frame:0000000000025A6D                 db    1
.eh_frame:0000000000025A6E                 db    0
.eh_frame:0000000000025A6F                 db    0
.eh_frame:0000000000025A70                 db    0
.eh_frame:0000000000025A71                 db    0
.eh_frame:0000000000025A72                 db    0
.eh_frame:0000000000025A73                 db    0
.eh_frame:0000000000025A74                 db  10h
.eh_frame:0000000000025A75                 db    0
.eh_frame:0000000000025A76                 db    0
.eh_frame:0000000000025A77                 db    0
.eh_frame:0000000000025A78                 db  50h ; P
.eh_frame:0000000000025A79                 db  20h
.eh_frame:0000000000025A7A                 db    0
.eh_frame:0000000000025A7B                 db    0
.eh_frame:0000000000025A7C                 db  44h ; D
.eh_frame:0000000000025A7D                 db 0B2h
.eh_frame:0000000000025A7E                 db 0FEh
.eh_frame:0000000000025A7F                 db 0FFh
.eh_frame:0000000000025A80                 db  1Dh
.eh_frame:0000000000025A81                 db    0
.eh_frame:0000000000025A82                 db    0
.eh_frame:0000000000025A83                 db    0
.eh_frame:0000000000025A84                 db    0
.eh_frame:0000000000025A85                 db    0
.eh_frame:0000000000025A86                 db    0
.eh_frame:0000000000025A87                 db    0
.eh_frame:0000000000025A88                 db  90h
.eh_frame:0000000000025A89                 db    0
.eh_frame:0000000000025A8A                 db    0
.eh_frame:0000000000025A8B                 db    0
.eh_frame:0000000000025A8C                 db  64h ; d
.eh_frame:0000000000025A8D                 db  20h
.eh_frame:0000000000025A8E                 db    0
.eh_frame:0000000000025A8F                 db    0
.eh_frame:0000000000025A90                 db  50h ; P
.eh_frame:0000000000025A91                 db 0B2h
.eh_frame:0000000000025A92                 db 0FEh
.eh_frame:0000000000025A93                 db 0FFh
.eh_frame:0000000000025A94                 db  2Ch ; ,
.eh_frame:0000000000025A95                 db    2
.eh_frame:0000000000025A96                 db    0
.eh_frame:0000000000025A97                 db    0
.eh_frame:0000000000025A98                 db    0
.eh_frame:0000000000025A99                 db  42h ; B
.eh_frame:0000000000025A9A                 db  0Eh
.eh_frame:0000000000025A9B                 db  10h
.eh_frame:0000000000025A9C                 db  8Fh
.eh_frame:0000000000025A9D                 db    2
.eh_frame:0000000000025A9E                 db  42h ; B
.eh_frame:0000000000025A9F                 db  0Eh
.eh_frame:0000000000025AA0                 db  18h
.eh_frame:0000000000025AA1                 db  8Eh
.eh_frame:0000000000025AA2                 db    3
.eh_frame:0000000000025AA3                 db  45h ; E
.eh_frame:0000000000025AA4                 db  0Eh
.eh_frame:0000000000025AA5                 db  20h
.eh_frame:0000000000025AA6                 db  8Dh
.eh_frame:0000000000025AA7                 db    4
.eh_frame:0000000000025AA8                 db  42h ; B
.eh_frame:0000000000025AA9                 db  0Eh
.eh_frame:0000000000025AAA                 db  28h ; (
.eh_frame:0000000000025AAB                 db  8Ch
.eh_frame:0000000000025AAC                 db    5
.eh_frame:0000000000025AAD                 db  45h ; E
.eh_frame:0000000000025AAE                 db  0Eh
.eh_frame:0000000000025AAF                 db  30h ; 0
.eh_frame:0000000000025AB0                 db  86h
.eh_frame:0000000000025AB1                 db    6
.eh_frame:0000000000025AB2                 db  41h ; A
.eh_frame:0000000000025AB3                 db  0Eh
.eh_frame:0000000000025AB4                 db  38h ; 8
.eh_frame:0000000000025AB5                 db  83h
.eh_frame:0000000000025AB6                 db    7
.eh_frame:0000000000025AB7                 db  47h ; G
.eh_frame:0000000000025AB8                 db  0Eh
.eh_frame:0000000000025AB9                 db  80h
.eh_frame:0000000000025ABA                 db    1
.eh_frame:0000000000025ABB                 db    2
.eh_frame:0000000000025ABC                 db 0BAh
.eh_frame:0000000000025ABD                 db  0Ah
.eh_frame:0000000000025ABE                 db  0Eh
.eh_frame:0000000000025ABF                 db  38h ; 8
.eh_frame:0000000000025AC0                 db  46h ; F
.eh_frame:0000000000025AC1                 db  0Eh
.eh_frame:0000000000025AC2                 db  30h ; 0
.eh_frame:0000000000025AC3                 db  41h ; A
.eh_frame:0000000000025AC4                 db  0Eh
.eh_frame:0000000000025AC5                 db  28h ; (
.eh_frame:0000000000025AC6                 db  42h ; B
.eh_frame:0000000000025AC7                 db  0Eh
.eh_frame:0000000000025AC8                 db  20h
.eh_frame:0000000000025AC9                 db  42h ; B
.eh_frame:0000000000025ACA                 db  0Eh
.eh_frame:0000000000025ACB                 db  18h
.eh_frame:0000000000025ACC                 db  42h ; B
.eh_frame:0000000000025ACD                 db  0Eh
.eh_frame:0000000000025ACE                 db  10h
.eh_frame:0000000000025ACF                 db  42h ; B
.eh_frame:0000000000025AD0                 db  0Eh
.eh_frame:0000000000025AD1                 db    8
.eh_frame:0000000000025AD2                 db  47h ; G
.eh_frame:0000000000025AD3                 db  0Bh
.eh_frame:0000000000025AD4                 db    2
.eh_frame:0000000000025AD5                 db 0E1h
.eh_frame:0000000000025AD6                 db  0Ah
.eh_frame:0000000000025AD7                 db  0Eh
.eh_frame:0000000000025AD8                 db  38h ; 8
.eh_frame:0000000000025AD9                 db  44h ; D
.eh_frame:0000000000025ADA                 db  0Eh
.eh_frame:0000000000025ADB                 db  30h ; 0
.eh_frame:0000000000025ADC                 db  43h ; C
.eh_frame:0000000000025ADD                 db  0Eh
.eh_frame:0000000000025ADE                 db  28h ; (
.eh_frame:0000000000025ADF                 db  42h ; B
.eh_frame:0000000000025AE0                 db  0Eh
.eh_frame:0000000000025AE1                 db  20h
.eh_frame:0000000000025AE2                 db  42h ; B
.eh_frame:0000000000025AE3                 db  0Eh
.eh_frame:0000000000025AE4                 db  18h
.eh_frame:0000000000025AE5                 db  42h ; B
.eh_frame:0000000000025AE6                 db  0Eh
.eh_frame:0000000000025AE7                 db  10h
.eh_frame:0000000000025AE8                 db  42h ; B
.eh_frame:0000000000025AE9                 db  0Eh
.eh_frame:0000000000025AEA                 db    8
.eh_frame:0000000000025AEB                 db  48h ; H
.eh_frame:0000000000025AEC                 db  0Bh
.eh_frame:0000000000025AED                 db  59h ; Y
.eh_frame:0000000000025AEE                 db  0Ah
.eh_frame:0000000000025AEF                 db  0Eh
.eh_frame:0000000000025AF0                 db  38h ; 8
.eh_frame:0000000000025AF1                 db  43h ; C
.eh_frame:0000000000025AF2                 db  0Eh
.eh_frame:0000000000025AF3                 db  30h ; 0
.eh_frame:0000000000025AF4                 db  41h ; A
.eh_frame:0000000000025AF5                 db  0Eh
.eh_frame:0000000000025AF6                 db  28h ; (
.eh_frame:0000000000025AF7                 db  42h ; B
.eh_frame:0000000000025AF8                 db  0Eh
.eh_frame:0000000000025AF9                 db  20h
.eh_frame:0000000000025AFA                 db  42h ; B
.eh_frame:0000000000025AFB                 db  0Eh
.eh_frame:0000000000025AFC                 db  18h
.eh_frame:0000000000025AFD                 db  42h ; B
.eh_frame:0000000000025AFE                 db  0Eh
.eh_frame:0000000000025AFF                 db  10h
.eh_frame:0000000000025B00                 db  42h ; B
.eh_frame:0000000000025B01                 db  0Eh
.eh_frame:0000000000025B02                 db    8
.eh_frame:0000000000025B03                 db  4Bh ; K
.eh_frame:0000000000025B04                 db  0Bh
.eh_frame:0000000000025B05                 db  49h ; I
.eh_frame:0000000000025B06                 db  0Eh
.eh_frame:0000000000025B07                 db  38h ; 8
.eh_frame:0000000000025B08                 db  41h ; A
.eh_frame:0000000000025B09                 db  0Eh
.eh_frame:0000000000025B0A                 db  30h ; 0
.eh_frame:0000000000025B0B                 db  41h ; A
.eh_frame:0000000000025B0C                 db  0Eh
.eh_frame:0000000000025B0D                 db  28h ; (
.eh_frame:0000000000025B0E                 db  48h ; H
.eh_frame:0000000000025B0F                 db  0Eh
.eh_frame:0000000000025B10                 db  20h
.eh_frame:0000000000025B11                 db  44h ; D
.eh_frame:0000000000025B12                 db  0Eh
.eh_frame:0000000000025B13                 db  18h
.eh_frame:0000000000025B14                 db  42h ; B
.eh_frame:0000000000025B15                 db  0Eh
.eh_frame:0000000000025B16                 db  10h
.eh_frame:0000000000025B17                 db  42h ; B
.eh_frame:0000000000025B18                 db  0Eh
.eh_frame:0000000000025B19                 db    8
.eh_frame:0000000000025B1A                 db    0
.eh_frame:0000000000025B1B                 db    0
.eh_frame:0000000000025B1C                 db  10h
.eh_frame:0000000000025B1D                 db    0
.eh_frame:0000000000025B1E                 db    0
.eh_frame:0000000000025B1F                 db    0
.eh_frame:0000000000025B20                 db 0F8h
.eh_frame:0000000000025B21                 db  20h
.eh_frame:0000000000025B22                 db    0
.eh_frame:0000000000025B23                 db    0
.eh_frame:0000000000025B24                 db 0ECh
.eh_frame:0000000000025B25                 db 0B3h
.eh_frame:0000000000025B26                 db 0FEh
.eh_frame:0000000000025B27                 db 0FFh
.eh_frame:0000000000025B28                 db  66h ; f
.eh_frame:0000000000025B29                 db    0
.eh_frame:0000000000025B2A                 db    0
.eh_frame:0000000000025B2B                 db    0
.eh_frame:0000000000025B2C                 db    0
.eh_frame:0000000000025B2D                 db    0
.eh_frame:0000000000025B2E                 db    0
.eh_frame:0000000000025B2F                 db    0
.eh_frame:0000000000025B30                 db  28h ; (
.eh_frame:0000000000025B31                 db    0
.eh_frame:0000000000025B32                 db    0
.eh_frame:0000000000025B33                 db    0
.eh_frame:0000000000025B34                 db  0Ch
.eh_frame:0000000000025B35                 db  21h ; !
.eh_frame:0000000000025B36                 db    0
.eh_frame:0000000000025B37                 db    0
.eh_frame:0000000000025B38                 db  48h ; H
.eh_frame:0000000000025B39                 db 0B4h
.eh_frame:0000000000025B3A                 db 0FEh
.eh_frame:0000000000025B3B                 db 0FFh
.eh_frame:0000000000025B3C                 db  6Bh ; k
.eh_frame:0000000000025B3D                 db    0
.eh_frame:0000000000025B3E                 db    0
.eh_frame:0000000000025B3F                 db    0
.eh_frame:0000000000025B40                 db    0
.eh_frame:0000000000025B41                 db  42h ; B
.eh_frame:0000000000025B42                 db  0Eh
.eh_frame:0000000000025B43                 db  10h
.eh_frame:0000000000025B44                 db  8Ch
.eh_frame:0000000000025B45                 db    2
.eh_frame:0000000000025B46                 db  44h ; D
.eh_frame:0000000000025B47                 db  0Eh
.eh_frame:0000000000025B48                 db  18h
.eh_frame:0000000000025B49                 db  86h
.eh_frame:0000000000025B4A                 db    3
.eh_frame:0000000000025B4B                 db  44h ; D
.eh_frame:0000000000025B4C                 db  0Eh
.eh_frame:0000000000025B4D                 db  20h
.eh_frame:0000000000025B4E                 db  83h
.eh_frame:0000000000025B4F                 db    4
.eh_frame:0000000000025B50                 db    2
.eh_frame:0000000000025B51                 db  5Dh ; ]
.eh_frame:0000000000025B52                 db  0Eh
.eh_frame:0000000000025B53                 db  18h
.eh_frame:0000000000025B54                 db  41h ; A
.eh_frame:0000000000025B55                 db  0Eh
.eh_frame:0000000000025B56                 db  10h
.eh_frame:0000000000025B57                 db  42h ; B
.eh_frame:0000000000025B58                 db  0Eh
.eh_frame:0000000000025B59                 db    8
.eh_frame:0000000000025B5A                 db    0
.eh_frame:0000000000025B5B                 db    0
.eh_frame:0000000000025B5C                 db  28h ; (
.eh_frame:0000000000025B5D                 db    0
.eh_frame:0000000000025B5E                 db    0
.eh_frame:0000000000025B5F                 db    0
.eh_frame:0000000000025B60                 db  38h ; 8
.eh_frame:0000000000025B61                 db  21h ; !
.eh_frame:0000000000025B62                 db    0
.eh_frame:0000000000025B63                 db    0
.eh_frame:0000000000025B64                 db  8Ch
.eh_frame:0000000000025B65                 db 0B4h
.eh_frame:0000000000025B66                 db 0FEh
.eh_frame:0000000000025B67                 db 0FFh
.eh_frame:0000000000025B68                 db  51h ; Q
.eh_frame:0000000000025B69                 db    0
.eh_frame:0000000000025B6A                 db    0
.eh_frame:0000000000025B6B                 db    0
.eh_frame:0000000000025B6C                 db    0
.eh_frame:0000000000025B6D                 db  42h ; B
.eh_frame:0000000000025B6E                 db  0Eh
.eh_frame:0000000000025B6F                 db  10h
.eh_frame:0000000000025B70                 db  8Ch
.eh_frame:0000000000025B71                 db    2
.eh_frame:0000000000025B72                 db  44h ; D
.eh_frame:0000000000025B73                 db  0Eh
.eh_frame:0000000000025B74                 db  18h
.eh_frame:0000000000025B75                 db  86h
.eh_frame:0000000000025B76                 db    3
.eh_frame:0000000000025B77                 db  44h ; D
.eh_frame:0000000000025B78                 db  0Eh
.eh_frame:0000000000025B79                 db  20h
.eh_frame:0000000000025B7A                 db  83h
.eh_frame:0000000000025B7B                 db    4
.eh_frame:0000000000025B7C                 db    2
.eh_frame:0000000000025B7D                 db  43h ; C
.eh_frame:0000000000025B7E                 db  0Eh
.eh_frame:0000000000025B7F                 db  18h
.eh_frame:0000000000025B80                 db  41h ; A
.eh_frame:0000000000025B81                 db  0Eh
.eh_frame:0000000000025B82                 db  10h
.eh_frame:0000000000025B83                 db  42h ; B
.eh_frame:0000000000025B84                 db  0Eh
.eh_frame:0000000000025B85                 db    8
.eh_frame:0000000000025B86                 db    0
.eh_frame:0000000000025B87                 db    0
.eh_frame:0000000000025B88                 db  30h ; 0
.eh_frame:0000000000025B89                 db    0
.eh_frame:0000000000025B8A                 db    0
.eh_frame:0000000000025B8B                 db    0
.eh_frame:0000000000025B8C                 db  64h ; d
.eh_frame:0000000000025B8D                 db  21h ; !
.eh_frame:0000000000025B8E                 db    0
.eh_frame:0000000000025B8F                 db    0
.eh_frame:0000000000025B90                 db 0C0h
.eh_frame:0000000000025B91                 db 0B4h
.eh_frame:0000000000025B92                 db 0FEh
.eh_frame:0000000000025B93                 db 0FFh
.eh_frame:0000000000025B94                 db  9Ch
.eh_frame:0000000000025B95                 db    0
.eh_frame:0000000000025B96                 db    0
.eh_frame:0000000000025B97                 db    0
.eh_frame:0000000000025B98                 db    0
.eh_frame:0000000000025B99                 db  41h ; A
.eh_frame:0000000000025B9A                 db  0Eh
.eh_frame:0000000000025B9B                 db  10h
.eh_frame:0000000000025B9C                 db  86h
.eh_frame:0000000000025B9D                 db    2
.eh_frame:0000000000025B9E                 db  41h ; A
.eh_frame:0000000000025B9F                 db  0Eh
.eh_frame:0000000000025BA0                 db  18h
.eh_frame:0000000000025BA1                 db  83h
.eh_frame:0000000000025BA2                 db    3
.eh_frame:0000000000025BA3                 db  4Ah ; J
.eh_frame:0000000000025BA4                 db  0Eh
.eh_frame:0000000000025BA5                 db  20h
.eh_frame:0000000000025BA6                 db    2
.eh_frame:0000000000025BA7                 db  62h ; b
.eh_frame:0000000000025BA8                 db  0Ah
.eh_frame:0000000000025BA9                 db  0Eh
.eh_frame:0000000000025BAA                 db  18h
.eh_frame:0000000000025BAB                 db  43h ; C
.eh_frame:0000000000025BAC                 db  0Eh
.eh_frame:0000000000025BAD                 db  10h
.eh_frame:0000000000025BAE                 db  41h ; A
.eh_frame:0000000000025BAF                 db  0Eh
.eh_frame:0000000000025BB0                 db    8
.eh_frame:0000000000025BB1                 db  46h ; F
.eh_frame:0000000000025BB2                 db  0Bh
.eh_frame:0000000000025BB3                 db  5Ch ; \
.eh_frame:0000000000025BB4                 db  0Eh
.eh_frame:0000000000025BB5                 db  18h
.eh_frame:0000000000025BB6                 db  46h ; F
.eh_frame:0000000000025BB7                 db  0Eh
.eh_frame:0000000000025BB8                 db  10h
.eh_frame:0000000000025BB9                 db  41h ; A
.eh_frame:0000000000025BBA                 db  0Eh
.eh_frame:0000000000025BBB                 db    8
.eh_frame:0000000000025BBC                 db  28h ; (
.eh_frame:0000000000025BBD                 db    0
.eh_frame:0000000000025BBE                 db    0
.eh_frame:0000000000025BBF                 db    0
.eh_frame:0000000000025BC0                 db  98h
.eh_frame:0000000000025BC1                 db  21h ; !
.eh_frame:0000000000025BC2                 db    0
.eh_frame:0000000000025BC3                 db    0
.eh_frame:0000000000025BC4                 db  2Ch ; ,
.eh_frame:0000000000025BC5                 db 0B5h
.eh_frame:0000000000025BC6                 db 0FEh
.eh_frame:0000000000025BC7                 db 0FFh
.eh_frame:0000000000025BC8                 db  64h ; d
.eh_frame:0000000000025BC9                 db    0
.eh_frame:0000000000025BCA                 db    0
.eh_frame:0000000000025BCB                 db    0
.eh_frame:0000000000025BCC                 db    0
.eh_frame:0000000000025BCD                 db  41h ; A
.eh_frame:0000000000025BCE                 db  0Eh
.eh_frame:0000000000025BCF                 db  10h
.eh_frame:0000000000025BD0                 db  86h
.eh_frame:0000000000025BD1                 db    2
.eh_frame:0000000000025BD2                 db  41h ; A
.eh_frame:0000000000025BD3                 db  0Eh
.eh_frame:0000000000025BD4                 db  18h
.eh_frame:0000000000025BD5                 db  83h
.eh_frame:0000000000025BD6                 db    3
.eh_frame:0000000000025BD7                 db  4Ah ; J
.eh_frame:0000000000025BD8                 db  0Eh
.eh_frame:0000000000025BD9                 db  20h
.eh_frame:0000000000025BDA                 db  62h ; b
.eh_frame:0000000000025BDB                 db  0Ah
.eh_frame:0000000000025BDC                 db  0Eh
.eh_frame:0000000000025BDD                 db  18h
.eh_frame:0000000000025BDE                 db  41h ; A
.eh_frame:0000000000025BDF                 db  0Eh
.eh_frame:0000000000025BE0                 db  10h
.eh_frame:0000000000025BE1                 db  41h ; A
.eh_frame:0000000000025BE2                 db  0Eh
.eh_frame:0000000000025BE3                 db    8
.eh_frame:0000000000025BE4                 db  48h ; H
.eh_frame:0000000000025BE5                 db  0Bh
.eh_frame:0000000000025BE6                 db    0
.eh_frame:0000000000025BE7                 db    0
.eh_frame:0000000000025BE8                 db  34h ; 4
.eh_frame:0000000000025BE9                 db    0
.eh_frame:0000000000025BEA                 db    0
.eh_frame:0000000000025BEB                 db    0
.eh_frame:0000000000025BEC                 db 0C4h
.eh_frame:0000000000025BED                 db  21h ; !
.eh_frame:0000000000025BEE                 db    0
.eh_frame:0000000000025BEF                 db    0
.eh_frame:0000000000025BF0                 db  70h ; p
.eh_frame:0000000000025BF1                 db 0B5h
.eh_frame:0000000000025BF2                 db 0FEh
.eh_frame:0000000000025BF3                 db 0FFh
.eh_frame:0000000000025BF4                 db  2Ch ; ,
.eh_frame:0000000000025BF5                 db    1
.eh_frame:0000000000025BF6                 db    0
.eh_frame:0000000000025BF7                 db    0
.eh_frame:0000000000025BF8                 db    0
.eh_frame:0000000000025BF9                 db  41h ; A
.eh_frame:0000000000025BFA                 db  0Eh
.eh_frame:0000000000025BFB                 db  10h
.eh_frame:0000000000025BFC                 db  86h
.eh_frame:0000000000025BFD                 db    2
.eh_frame:0000000000025BFE                 db  41h ; A
.eh_frame:0000000000025BFF                 db  0Eh
.eh_frame:0000000000025C00                 db  18h
.eh_frame:0000000000025C01                 db  83h
.eh_frame:0000000000025C02                 db    3
.eh_frame:0000000000025C03                 db  4Ah ; J
.eh_frame:0000000000025C04                 db  0Eh
.eh_frame:0000000000025C05                 db  20h
.eh_frame:0000000000025C06                 db  66h ; f
.eh_frame:0000000000025C07                 db  0Ah
.eh_frame:0000000000025C08                 db  0Eh
.eh_frame:0000000000025C09                 db  18h
.eh_frame:0000000000025C0A                 db  41h ; A
.eh_frame:0000000000025C0B                 db  0Eh
.eh_frame:0000000000025C0C                 db  10h
.eh_frame:0000000000025C0D                 db  41h ; A
.eh_frame:0000000000025C0E                 db  0Eh
.eh_frame:0000000000025C0F                 db    8
.eh_frame:0000000000025C10                 db  44h ; D
.eh_frame:0000000000025C11                 db  0Bh
.eh_frame:0000000000025C12                 db  6Dh ; m
.eh_frame:0000000000025C13                 db  0Ah
.eh_frame:0000000000025C14                 db  0Eh
.eh_frame:0000000000025C15                 db  18h
.eh_frame:0000000000025C16                 db  46h ; F
.eh_frame:0000000000025C17                 db  0Eh
.eh_frame:0000000000025C18                 db  10h
.eh_frame:0000000000025C19                 db  41h ; A
.eh_frame:0000000000025C1A                 db  0Eh
.eh_frame:0000000000025C1B                 db    8
.eh_frame:0000000000025C1C                 db  44h ; D
.eh_frame:0000000000025C1D                 db  0Bh
.eh_frame:0000000000025C1E                 db    0
.eh_frame:0000000000025C1F                 db    0
.eh_frame:0000000000025C20                 db  4Ch ; L
.eh_frame:0000000000025C21                 db    0
.eh_frame:0000000000025C22                 db    0
.eh_frame:0000000000025C23                 db    0
.eh_frame:0000000000025C24                 db 0FCh
.eh_frame:0000000000025C25                 db  21h ; !
.eh_frame:0000000000025C26                 db    0
.eh_frame:0000000000025C27                 db    0
.eh_frame:0000000000025C28                 db  68h ; h
.eh_frame:0000000000025C29                 db 0B6h
.eh_frame:0000000000025C2A                 db 0FEh
.eh_frame:0000000000025C2B                 db 0FFh
.eh_frame:0000000000025C2C                 db 0ECh
.eh_frame:0000000000025C2D                 db    0
.eh_frame:0000000000025C2E                 db    0
.eh_frame:0000000000025C2F                 db    0
.eh_frame:0000000000025C30                 db    0
.eh_frame:0000000000025C31                 db  42h ; B
.eh_frame:0000000000025C32                 db  0Eh
.eh_frame:0000000000025C33                 db  10h
.eh_frame:0000000000025C34                 db  8Eh
.eh_frame:0000000000025C35                 db    2
.eh_frame:0000000000025C36                 db  42h ; B
.eh_frame:0000000000025C37                 db  0Eh
.eh_frame:0000000000025C38                 db  18h
.eh_frame:0000000000025C39                 db  8Dh
.eh_frame:0000000000025C3A                 db    3
.eh_frame:0000000000025C3B                 db  45h ; E
.eh_frame:0000000000025C3C                 db  0Eh
.eh_frame:0000000000025C3D                 db  20h
.eh_frame:0000000000025C3E                 db  8Ch
.eh_frame:0000000000025C3F                 db    4
.eh_frame:0000000000025C40                 db  41h ; A
.eh_frame:0000000000025C41                 db  0Eh
.eh_frame:0000000000025C42                 db  28h ; (
.eh_frame:0000000000025C43                 db  86h
.eh_frame:0000000000025C44                 db    5
.eh_frame:0000000000025C45                 db  44h ; D
.eh_frame:0000000000025C46                 db  0Eh
.eh_frame:0000000000025C47                 db  30h ; 0
.eh_frame:0000000000025C48                 db  83h
.eh_frame:0000000000025C49                 db    6
.eh_frame:0000000000025C4A                 db    2
.eh_frame:0000000000025C4B                 db  71h ; q
.eh_frame:0000000000025C4C                 db  0Ah
.eh_frame:0000000000025C4D                 db  0Eh
.eh_frame:0000000000025C4E                 db  28h ; (
.eh_frame:0000000000025C4F                 db  46h ; F
.eh_frame:0000000000025C50                 db  0Eh
.eh_frame:0000000000025C51                 db  20h
.eh_frame:0000000000025C52                 db  42h ; B
.eh_frame:0000000000025C53                 db  0Eh
.eh_frame:0000000000025C54                 db  18h
.eh_frame:0000000000025C55                 db  42h ; B
.eh_frame:0000000000025C56                 db  0Eh
.eh_frame:0000000000025C57                 db  10h
.eh_frame:0000000000025C58                 db  42h ; B
.eh_frame:0000000000025C59                 db  0Eh
.eh_frame:0000000000025C5A                 db    8
.eh_frame:0000000000025C5B                 db  45h ; E
.eh_frame:0000000000025C5C                 db  0Bh
.eh_frame:0000000000025C5D                 db  6Eh ; n
.eh_frame:0000000000025C5E                 db  0Ah
.eh_frame:0000000000025C5F                 db  0Eh
.eh_frame:0000000000025C60                 db  28h ; (
.eh_frame:0000000000025C61                 db  41h ; A
.eh_frame:0000000000025C62                 db  0Eh
.eh_frame:0000000000025C63                 db  20h
.eh_frame:0000000000025C64                 db  42h ; B
.eh_frame:0000000000025C65                 db  0Eh
.eh_frame:0000000000025C66                 db  18h
.eh_frame:0000000000025C67                 db  42h ; B
.eh_frame:0000000000025C68                 db  0Eh
.eh_frame:0000000000025C69                 db  10h
.eh_frame:0000000000025C6A                 db  42h ; B
.eh_frame:0000000000025C6B                 db  0Eh
.eh_frame:0000000000025C6C                 db    8
.eh_frame:0000000000025C6D                 db  41h ; A
.eh_frame:0000000000025C6E                 db  0Bh
.eh_frame:0000000000025C6F                 db    0
.eh_frame:0000000000025C70                 db  2Ch ; ,
.eh_frame:0000000000025C71                 db    0
.eh_frame:0000000000025C72                 db    0
.eh_frame:0000000000025C73                 db    0
.eh_frame:0000000000025C74                 db  4Ch ; L
.eh_frame:0000000000025C75                 db  22h ; "
.eh_frame:0000000000025C76                 db    0
.eh_frame:0000000000025C77                 db    0
.eh_frame:0000000000025C78                 db    8
.eh_frame:0000000000025C79                 db 0B7h
.eh_frame:0000000000025C7A                 db 0FEh
.eh_frame:0000000000025C7B                 db 0FFh
.eh_frame:0000000000025C7C                 db  6Eh ; n
.eh_frame:0000000000025C7D                 db    0
.eh_frame:0000000000025C7E                 db    0
.eh_frame:0000000000025C7F                 db    0
.eh_frame:0000000000025C80                 db    0
.eh_frame:0000000000025C81                 db  42h ; B
.eh_frame:0000000000025C82                 db  0Eh
.eh_frame:0000000000025C83                 db  10h
.eh_frame:0000000000025C84                 db  8Ch
.eh_frame:0000000000025C85                 db    2
.eh_frame:0000000000025C86                 db  49h ; I
.eh_frame:0000000000025C87                 db  0Eh
.eh_frame:0000000000025C88                 db  18h
.eh_frame:0000000000025C89                 db  86h
.eh_frame:0000000000025C8A                 db    3
.eh_frame:0000000000025C8B                 db  49h ; I
.eh_frame:0000000000025C8C                 db  0Eh
.eh_frame:0000000000025C8D                 db  20h
.eh_frame:0000000000025C8E                 db  83h
.eh_frame:0000000000025C8F                 db    4
.eh_frame:0000000000025C90                 db    2
.eh_frame:0000000000025C91                 db  4Ah ; J
.eh_frame:0000000000025C92                 db  0Ah
.eh_frame:0000000000025C93                 db  0Eh
.eh_frame:0000000000025C94                 db  18h
.eh_frame:0000000000025C95                 db  41h ; A
.eh_frame:0000000000025C96                 db  0Eh
.eh_frame:0000000000025C97                 db  10h
.eh_frame:0000000000025C98                 db  42h ; B
.eh_frame:0000000000025C99                 db  0Eh
.eh_frame:0000000000025C9A                 db    8
.eh_frame:0000000000025C9B                 db  47h ; G
.eh_frame:0000000000025C9C                 db  0Bh
.eh_frame:0000000000025C9D                 db    0
.eh_frame:0000000000025C9E                 db    0
.eh_frame:0000000000025C9F                 db    0
.eh_frame:0000000000025CA0                 db  48h ; H
.eh_frame:0000000000025CA1                 db    0
.eh_frame:0000000000025CA2                 db    0
.eh_frame:0000000000025CA3                 db    0
.eh_frame:0000000000025CA4                 db  7Ch ; |
.eh_frame:0000000000025CA5                 db  22h ; "
.eh_frame:0000000000025CA6                 db    0
.eh_frame:0000000000025CA7                 db    0
.eh_frame:0000000000025CA8                 db  48h ; H
.eh_frame:0000000000025CA9                 db 0B7h
.eh_frame:0000000000025CAA                 db 0FEh
.eh_frame:0000000000025CAB                 db 0FFh
.eh_frame:0000000000025CAC                 db 0C3h
.eh_frame:0000000000025CAD                 db    1
.eh_frame:0000000000025CAE                 db    0
.eh_frame:0000000000025CAF                 db    0
.eh_frame:0000000000025CB0                 db    0
.eh_frame:0000000000025CB1                 db  42h ; B
.eh_frame:0000000000025CB2                 db  0Eh
.eh_frame:0000000000025CB3                 db  10h
.eh_frame:0000000000025CB4                 db  8Fh
.eh_frame:0000000000025CB5                 db    2
.eh_frame:0000000000025CB6                 db  42h ; B
.eh_frame:0000000000025CB7                 db  0Eh
.eh_frame:0000000000025CB8                 db  18h
.eh_frame:0000000000025CB9                 db  8Eh
.eh_frame:0000000000025CBA                 db    3
.eh_frame:0000000000025CBB                 db  42h ; B
.eh_frame:0000000000025CBC                 db  0Eh
.eh_frame:0000000000025CBD                 db  20h
.eh_frame:0000000000025CBE                 db  8Dh
.eh_frame:0000000000025CBF                 db    4
.eh_frame:0000000000025CC0                 db  42h ; B
.eh_frame:0000000000025CC1                 db  0Eh
.eh_frame:0000000000025CC2                 db  28h ; (
.eh_frame:0000000000025CC3                 db  8Ch
.eh_frame:0000000000025CC4                 db    5
.eh_frame:0000000000025CC5                 db  41h ; A
.eh_frame:0000000000025CC6                 db  0Eh
.eh_frame:0000000000025CC7                 db  30h ; 0
.eh_frame:0000000000025CC8                 db  86h
.eh_frame:0000000000025CC9                 db    6
.eh_frame:0000000000025CCA                 db  41h ; A
.eh_frame:0000000000025CCB                 db  0Eh
.eh_frame:0000000000025CCC                 db  38h ; 8
.eh_frame:0000000000025CCD                 db  83h
.eh_frame:0000000000025CCE                 db    7
.eh_frame:0000000000025CCF                 db  47h ; G
.eh_frame:0000000000025CD0                 db  0Eh
.eh_frame:0000000000025CD1                 db 0A0h
.eh_frame:0000000000025CD2                 db    1
.eh_frame:0000000000025CD3                 db    2
.eh_frame:0000000000025CD4                 db 0D3h
.eh_frame:0000000000025CD5                 db  0Ah
.eh_frame:0000000000025CD6                 db  0Eh
.eh_frame:0000000000025CD7                 db  38h ; 8
.eh_frame:0000000000025CD8                 db  41h ; A
.eh_frame:0000000000025CD9                 db  0Eh
.eh_frame:0000000000025CDA                 db  30h ; 0
.eh_frame:0000000000025CDB                 db  41h ; A
.eh_frame:0000000000025CDC                 db  0Eh
.eh_frame:0000000000025CDD                 db  28h ; (
.eh_frame:0000000000025CDE                 db  42h ; B
.eh_frame:0000000000025CDF                 db  0Eh
.eh_frame:0000000000025CE0                 db  20h
.eh_frame:0000000000025CE1                 db  42h ; B
.eh_frame:0000000000025CE2                 db  0Eh
.eh_frame:0000000000025CE3                 db  18h
.eh_frame:0000000000025CE4                 db  42h ; B
.eh_frame:0000000000025CE5                 db  0Eh
.eh_frame:0000000000025CE6                 db  10h
.eh_frame:0000000000025CE7                 db  42h ; B
.eh_frame:0000000000025CE8                 db  0Eh
.eh_frame:0000000000025CE9                 db    8
.eh_frame:0000000000025CEA                 db  42h ; B
.eh_frame:0000000000025CEB                 db  0Bh
.eh_frame:0000000000025CEC                 db  48h ; H
.eh_frame:0000000000025CED                 db    0
.eh_frame:0000000000025CEE                 db    0
.eh_frame:0000000000025CEF                 db    0
.eh_frame:0000000000025CF0                 db 0C8h
.eh_frame:0000000000025CF1                 db  22h ; "
.eh_frame:0000000000025CF2                 db    0
.eh_frame:0000000000025CF3                 db    0
.eh_frame:0000000000025CF4                 db 0CCh
.eh_frame:0000000000025CF5                 db 0B8h
.eh_frame:0000000000025CF6                 db 0FEh
.eh_frame:0000000000025CF7                 db 0FFh
.eh_frame:0000000000025CF8                 db  15h
.eh_frame:0000000000025CF9                 db    6
.eh_frame:0000000000025CFA                 db    0
.eh_frame:0000000000025CFB                 db    0
.eh_frame:0000000000025CFC                 db    0
.eh_frame:0000000000025CFD                 db  42h ; B
.eh_frame:0000000000025CFE                 db  0Eh
.eh_frame:0000000000025CFF                 db  10h
.eh_frame:0000000000025D00                 db  8Fh
.eh_frame:0000000000025D01                 db    2
.eh_frame:0000000000025D02                 db  42h ; B
.eh_frame:0000000000025D03                 db  0Eh
.eh_frame:0000000000025D04                 db  18h
.eh_frame:0000000000025D05                 db  8Eh
.eh_frame:0000000000025D06                 db    3
.eh_frame:0000000000025D07                 db  45h ; E
.eh_frame:0000000000025D08                 db  0Eh
.eh_frame:0000000000025D09                 db  20h
.eh_frame:0000000000025D0A                 db  8Dh
.eh_frame:0000000000025D0B                 db    4
.eh_frame:0000000000025D0C                 db  42h ; B
.eh_frame:0000000000025D0D                 db  0Eh
.eh_frame:0000000000025D0E                 db  28h ; (
.eh_frame:0000000000025D0F                 db  8Ch
.eh_frame:0000000000025D10                 db    5
.eh_frame:0000000000025D11                 db  41h ; A
.eh_frame:0000000000025D12                 db  0Eh
.eh_frame:0000000000025D13                 db  30h ; 0
.eh_frame:0000000000025D14                 db  86h
.eh_frame:0000000000025D15                 db    6
.eh_frame:0000000000025D16                 db  41h ; A
.eh_frame:0000000000025D17                 db  0Eh
.eh_frame:0000000000025D18                 db  38h ; 8
.eh_frame:0000000000025D19                 db  83h
.eh_frame:0000000000025D1A                 db    7
.eh_frame:0000000000025D1B                 db  47h ; G
.eh_frame:0000000000025D1C                 db  0Eh
.eh_frame:0000000000025D1D                 db 0E0h
.eh_frame:0000000000025D1E                 db    1
.eh_frame:0000000000025D1F                 db    2
.eh_frame:0000000000025D20                 db  69h ; i
.eh_frame:0000000000025D21                 db  0Ah
.eh_frame:0000000000025D22                 db  0Eh
.eh_frame:0000000000025D23                 db  38h ; 8
.eh_frame:0000000000025D24                 db  41h ; A
.eh_frame:0000000000025D25                 db  0Eh
.eh_frame:0000000000025D26                 db  30h ; 0
.eh_frame:0000000000025D27                 db  41h ; A
.eh_frame:0000000000025D28                 db  0Eh
.eh_frame:0000000000025D29                 db  28h ; (
.eh_frame:0000000000025D2A                 db  42h ; B
.eh_frame:0000000000025D2B                 db  0Eh
.eh_frame:0000000000025D2C                 db  20h
.eh_frame:0000000000025D2D                 db  42h ; B
.eh_frame:0000000000025D2E                 db  0Eh
.eh_frame:0000000000025D2F                 db  18h
.eh_frame:0000000000025D30                 db  42h ; B
.eh_frame:0000000000025D31                 db  0Eh
.eh_frame:0000000000025D32                 db  10h
.eh_frame:0000000000025D33                 db  42h ; B
.eh_frame:0000000000025D34                 db  0Eh
.eh_frame:0000000000025D35                 db    8
.eh_frame:0000000000025D36                 db  49h ; I
.eh_frame:0000000000025D37                 db  0Bh
.eh_frame:0000000000025D38                 db  58h ; X
.eh_frame:0000000000025D39                 db    0
.eh_frame:0000000000025D3A                 db    0
.eh_frame:0000000000025D3B                 db    0
.eh_frame:0000000000025D3C                 db  14h
.eh_frame:0000000000025D3D                 db  23h ; #
.eh_frame:0000000000025D3E                 db    0
.eh_frame:0000000000025D3F                 db    0
.eh_frame:0000000000025D40                 db 0A0h
.eh_frame:0000000000025D41                 db 0BEh
.eh_frame:0000000000025D42                 db 0FEh
.eh_frame:0000000000025D43                 db 0FFh
.eh_frame:0000000000025D44                 db  4Eh ; N
.eh_frame:0000000000025D45                 db    1
.eh_frame:0000000000025D46                 db    0
.eh_frame:0000000000025D47                 db    0
.eh_frame:0000000000025D48                 db    0
.eh_frame:0000000000025D49                 db  41h ; A
.eh_frame:0000000000025D4A                 db  0Eh
.eh_frame:0000000000025D4B                 db  10h
.eh_frame:0000000000025D4C                 db  86h
.eh_frame:0000000000025D4D                 db    2
.eh_frame:0000000000025D4E                 db  41h ; A
.eh_frame:0000000000025D4F                 db  0Eh
.eh_frame:0000000000025D50                 db  18h
.eh_frame:0000000000025D51                 db  83h
.eh_frame:0000000000025D52                 db    3
.eh_frame:0000000000025D53                 db  4Eh ; N
.eh_frame:0000000000025D54                 db  0Eh
.eh_frame:0000000000025D55                 db  20h
.eh_frame:0000000000025D56                 db    2
.eh_frame:0000000000025D57                 db  83h
.eh_frame:0000000000025D58                 db  0Ah
.eh_frame:0000000000025D59                 db  0Eh
.eh_frame:0000000000025D5A                 db  18h
.eh_frame:0000000000025D5B                 db  41h ; A
.eh_frame:0000000000025D5C                 db  0Eh
.eh_frame:0000000000025D5D                 db  10h
.eh_frame:0000000000025D5E                 db  41h ; A
.eh_frame:0000000000025D5F                 db  0Eh
.eh_frame:0000000000025D60                 db    8
.eh_frame:0000000000025D61                 db  4Bh ; K
.eh_frame:0000000000025D62                 db  0Bh
.eh_frame:0000000000025D63                 db    2
.eh_frame:0000000000025D64                 db  61h ; a
.eh_frame:0000000000025D65                 db  0Ah
.eh_frame:0000000000025D66                 db  0Eh
.eh_frame:0000000000025D67                 db  18h
.eh_frame:0000000000025D68                 db  43h ; C
.eh_frame:0000000000025D69                 db  0Eh
.eh_frame:0000000000025D6A                 db  10h
.eh_frame:0000000000025D6B                 db  41h ; A
.eh_frame:0000000000025D6C                 db  0Eh
.eh_frame:0000000000025D6D                 db    8
.eh_frame:0000000000025D6E                 db  4Bh ; K
.eh_frame:0000000000025D6F                 db  0Bh
.eh_frame:0000000000025D70                 db  4Ch ; L
.eh_frame:0000000000025D71                 db  0Ah
.eh_frame:0000000000025D72                 db  0Eh
.eh_frame:0000000000025D73                 db  18h
.eh_frame:0000000000025D74                 db  43h ; C
.eh_frame:0000000000025D75                 db  0Eh
.eh_frame:0000000000025D76                 db  10h
.eh_frame:0000000000025D77                 db  41h ; A
.eh_frame:0000000000025D78                 db  0Eh
.eh_frame:0000000000025D79                 db    8
.eh_frame:0000000000025D7A                 db  48h ; H
.eh_frame:0000000000025D7B                 db  0Bh
.eh_frame:0000000000025D7C                 db  49h ; I
.eh_frame:0000000000025D7D                 db  0Ah
.eh_frame:0000000000025D7E                 db  0Eh
.eh_frame:0000000000025D7F                 db  18h
.eh_frame:0000000000025D80                 db  43h ; C
.eh_frame:0000000000025D81                 db  0Eh
.eh_frame:0000000000025D82                 db  10h
.eh_frame:0000000000025D83                 db  41h ; A
.eh_frame:0000000000025D84                 db  0Eh
.eh_frame:0000000000025D85                 db    8
.eh_frame:0000000000025D86                 db  4Bh ; K
.eh_frame:0000000000025D87                 db  0Bh
.eh_frame:0000000000025D88                 db  49h ; I
.eh_frame:0000000000025D89                 db  0Eh
.eh_frame:0000000000025D8A                 db  18h
.eh_frame:0000000000025D8B                 db  43h ; C
.eh_frame:0000000000025D8C                 db  0Eh
.eh_frame:0000000000025D8D                 db  10h
.eh_frame:0000000000025D8E                 db  41h ; A
.eh_frame:0000000000025D8F                 db  0Eh
.eh_frame:0000000000025D90                 db    8
.eh_frame:0000000000025D91                 db    0
.eh_frame:0000000000025D92                 db    0
.eh_frame:0000000000025D93                 db    0
.eh_frame:0000000000025D94                 db  28h ; (
.eh_frame:0000000000025D95                 db    0
.eh_frame:0000000000025D96                 db    0
.eh_frame:0000000000025D97                 db    0
.eh_frame:0000000000025D98                 db  70h ; p
.eh_frame:0000000000025D99                 db  23h ; #
.eh_frame:0000000000025D9A                 db    0
.eh_frame:0000000000025D9B                 db    0
.eh_frame:0000000000025D9C                 db  94h
.eh_frame:0000000000025D9D                 db 0BFh
.eh_frame:0000000000025D9E                 db 0FEh
.eh_frame:0000000000025D9F                 db 0FFh
.eh_frame:0000000000025DA0                 db  86h
.eh_frame:0000000000025DA1                 db    0
.eh_frame:0000000000025DA2                 db    0
.eh_frame:0000000000025DA3                 db    0
.eh_frame:0000000000025DA4                 db    0
.eh_frame:0000000000025DA5                 db  42h ; B
.eh_frame:0000000000025DA6                 db  0Eh
.eh_frame:0000000000025DA7                 db  10h
.eh_frame:0000000000025DA8                 db  8Ch
.eh_frame:0000000000025DA9                 db    2
.eh_frame:0000000000025DAA                 db  41h ; A
.eh_frame:0000000000025DAB                 db  0Eh
.eh_frame:0000000000025DAC                 db  18h
.eh_frame:0000000000025DAD                 db  86h
.eh_frame:0000000000025DAE                 db    3
.eh_frame:0000000000025DAF                 db  44h ; D
.eh_frame:0000000000025DB0                 db  0Eh
.eh_frame:0000000000025DB1                 db  20h
.eh_frame:0000000000025DB2                 db  83h
.eh_frame:0000000000025DB3                 db    4
.eh_frame:0000000000025DB4                 db  70h ; p
.eh_frame:0000000000025DB5                 db  0Ah
.eh_frame:0000000000025DB6                 db  0Eh
.eh_frame:0000000000025DB7                 db  18h
.eh_frame:0000000000025DB8                 db  41h ; A
.eh_frame:0000000000025DB9                 db  0Eh
.eh_frame:0000000000025DBA                 db  10h
.eh_frame:0000000000025DBB                 db  42h ; B
.eh_frame:0000000000025DBC                 db  0Eh
.eh_frame:0000000000025DBD                 db    8
.eh_frame:0000000000025DBE                 db  46h ; F
.eh_frame:0000000000025DBF                 db  0Bh
.eh_frame:0000000000025DC0                 db  18h
.eh_frame:0000000000025DC1                 db    0
.eh_frame:0000000000025DC2                 db    0
.eh_frame:0000000000025DC3                 db    0
.eh_frame:0000000000025DC4                 db  9Ch
.eh_frame:0000000000025DC5                 db  23h ; #
.eh_frame:0000000000025DC6                 db    0
.eh_frame:0000000000025DC7                 db    0
.eh_frame:0000000000025DC8                 db 0F8h
.eh_frame:0000000000025DC9                 db 0BFh
.eh_frame:0000000000025DCA                 db 0FEh
.eh_frame:0000000000025DCB                 db 0FFh
.eh_frame:0000000000025DCC                 db  30h ; 0
.eh_frame:0000000000025DCD                 db    0
.eh_frame:0000000000025DCE                 db    0
.eh_frame:0000000000025DCF                 db    0
.eh_frame:0000000000025DD0                 db    0
.eh_frame:0000000000025DD1                 db  41h ; A
.eh_frame:0000000000025DD2                 db  0Eh
.eh_frame:0000000000025DD3                 db  10h
.eh_frame:0000000000025DD4                 db  83h
.eh_frame:0000000000025DD5                 db    2
.eh_frame:0000000000025DD6                 db  6Ah ; j
.eh_frame:0000000000025DD7                 db  0Eh
.eh_frame:0000000000025DD8                 db    8
.eh_frame:0000000000025DD9                 db    0
.eh_frame:0000000000025DDA                 db    0
.eh_frame:0000000000025DDB                 db    0
.eh_frame:0000000000025DDC                 db  10h
.eh_frame:0000000000025DDD                 db    0
.eh_frame:0000000000025DDE                 db    0
.eh_frame:0000000000025DDF                 db    0
.eh_frame:0000000000025DE0                 db 0B8h
.eh_frame:0000000000025DE1                 db  23h ; #
.eh_frame:0000000000025DE2                 db    0
.eh_frame:0000000000025DE3                 db    0
.eh_frame:0000000000025DE4                 db  0Ch
.eh_frame:0000000000025DE5                 db 0C0h
.eh_frame:0000000000025DE6                 db 0FEh
.eh_frame:0000000000025DE7                 db 0FFh
.eh_frame:0000000000025DE8                 db  25h ; %
.eh_frame:0000000000025DE9                 db    0
.eh_frame:0000000000025DEA                 db    0
.eh_frame:0000000000025DEB                 db    0
.eh_frame:0000000000025DEC                 db    0
.eh_frame:0000000000025DED                 db    0
.eh_frame:0000000000025DEE                 db    0
.eh_frame:0000000000025DEF                 db    0
.eh_frame:0000000000025DF0                 db  14h
.eh_frame:0000000000025DF1                 db    0
.eh_frame:0000000000025DF2                 db    0
.eh_frame:0000000000025DF3                 db    0
.eh_frame:0000000000025DF4                 db 0CCh
.eh_frame:0000000000025DF5                 db  23h ; #
.eh_frame:0000000000025DF6                 db    0
.eh_frame:0000000000025DF7                 db    0
.eh_frame:0000000000025DF8                 db  28h ; (
.eh_frame:0000000000025DF9                 db 0C0h
.eh_frame:0000000000025DFA                 db 0FEh
.eh_frame:0000000000025DFB                 db 0FFh
.eh_frame:0000000000025DFC                 db  14h
.eh_frame:0000000000025DFD                 db    0
.eh_frame:0000000000025DFE                 db    0
.eh_frame:0000000000025DFF                 db    0
.eh_frame:0000000000025E00                 db    0
.eh_frame:0000000000025E01                 db  48h ; H
.eh_frame:0000000000025E02                 db  0Eh
.eh_frame:0000000000025E03                 db  10h
.eh_frame:0000000000025E04                 db  4Bh ; K
.eh_frame:0000000000025E05                 db  0Eh
.eh_frame:0000000000025E06                 db    8
.eh_frame:0000000000025E07                 db    0
.eh_frame:0000000000025E08                 db  48h ; H
.eh_frame:0000000000025E09                 db    0
.eh_frame:0000000000025E0A                 db    0
.eh_frame:0000000000025E0B                 db    0
.eh_frame:0000000000025E0C                 db 0E4h
.eh_frame:0000000000025E0D                 db  23h ; #
.eh_frame:0000000000025E0E                 db    0
.eh_frame:0000000000025E0F                 db    0
.eh_frame:0000000000025E10                 db  30h ; 0
.eh_frame:0000000000025E11                 db 0C0h
.eh_frame:0000000000025E12                 db 0FEh
.eh_frame:0000000000025E13                 db 0FFh
.eh_frame:0000000000025E14                 db 0CEh
.eh_frame:0000000000025E15                 db    1
.eh_frame:0000000000025E16                 db    0
.eh_frame:0000000000025E17                 db    0
.eh_frame:0000000000025E18                 db    0
.eh_frame:0000000000025E19                 db  42h ; B
.eh_frame:0000000000025E1A                 db  0Eh
.eh_frame:0000000000025E1B                 db  10h
.eh_frame:0000000000025E1C                 db  8Fh
.eh_frame:0000000000025E1D                 db    2
.eh_frame:0000000000025E1E                 db  42h ; B
.eh_frame:0000000000025E1F                 db  0Eh
.eh_frame:0000000000025E20                 db  18h
.eh_frame:0000000000025E21                 db  8Eh
.eh_frame:0000000000025E22                 db    3
.eh_frame:0000000000025E23                 db  45h ; E
.eh_frame:0000000000025E24                 db  0Eh
.eh_frame:0000000000025E25                 db  20h
.eh_frame:0000000000025E26                 db  8Dh
.eh_frame:0000000000025E27                 db    4
.eh_frame:0000000000025E28                 db  42h ; B
.eh_frame:0000000000025E29                 db  0Eh
.eh_frame:0000000000025E2A                 db  28h ; (
.eh_frame:0000000000025E2B                 db  8Ch
.eh_frame:0000000000025E2C                 db    5
.eh_frame:0000000000025E2D                 db  41h ; A
.eh_frame:0000000000025E2E                 db  0Eh
.eh_frame:0000000000025E2F                 db  30h ; 0
.eh_frame:0000000000025E30                 db  86h
.eh_frame:0000000000025E31                 db    6
.eh_frame:0000000000025E32                 db  41h ; A
.eh_frame:0000000000025E33                 db  0Eh
.eh_frame:0000000000025E34                 db  38h ; 8
.eh_frame:0000000000025E35                 db  83h
.eh_frame:0000000000025E36                 db    7
.eh_frame:0000000000025E37                 db  47h ; G
.eh_frame:0000000000025E38                 db  0Eh
.eh_frame:0000000000025E39                 db  50h ; P
.eh_frame:0000000000025E3A                 db    2
.eh_frame:0000000000025E3B                 db 0ACh
.eh_frame:0000000000025E3C                 db  0Ah
.eh_frame:0000000000025E3D                 db  0Eh
.eh_frame:0000000000025E3E                 db  38h ; 8
.eh_frame:0000000000025E3F                 db  41h ; A
.eh_frame:0000000000025E40                 db  0Eh
.eh_frame:0000000000025E41                 db  30h ; 0
.eh_frame:0000000000025E42                 db  41h ; A
.eh_frame:0000000000025E43                 db  0Eh
.eh_frame:0000000000025E44                 db  28h ; (
.eh_frame:0000000000025E45                 db  42h ; B
.eh_frame:0000000000025E46                 db  0Eh
.eh_frame:0000000000025E47                 db  20h
.eh_frame:0000000000025E48                 db  42h ; B
.eh_frame:0000000000025E49                 db  0Eh
.eh_frame:0000000000025E4A                 db  18h
.eh_frame:0000000000025E4B                 db  42h ; B
.eh_frame:0000000000025E4C                 db  0Eh
.eh_frame:0000000000025E4D                 db  10h
.eh_frame:0000000000025E4E                 db  42h ; B
.eh_frame:0000000000025E4F                 db  0Eh
.eh_frame:0000000000025E50                 db    8
.eh_frame:0000000000025E51                 db  46h ; F
.eh_frame:0000000000025E52                 db  0Bh
.eh_frame:0000000000025E53                 db    0
.eh_frame:0000000000025E54                 db  34h ; 4
.eh_frame:0000000000025E55                 db    0
.eh_frame:0000000000025E56                 db    0
.eh_frame:0000000000025E57                 db    0
.eh_frame:0000000000025E58                 db  30h ; 0
.eh_frame:0000000000025E59                 db  24h ; $
.eh_frame:0000000000025E5A                 db    0
.eh_frame:0000000000025E5B                 db    0
.eh_frame:0000000000025E5C                 db 0B4h
.eh_frame:0000000000025E5D                 db 0C1h
.eh_frame:0000000000025E5E                 db 0FEh
.eh_frame:0000000000025E5F                 db 0FFh
.eh_frame:0000000000025E60                 db  9Fh
.eh_frame:0000000000025E61                 db    0
.eh_frame:0000000000025E62                 db    0
.eh_frame:0000000000025E63                 db    0
.eh_frame:0000000000025E64                 db    0
.eh_frame:0000000000025E65                 db  42h ; B
.eh_frame:0000000000025E66                 db  0Eh
.eh_frame:0000000000025E67                 db  10h
.eh_frame:0000000000025E68                 db  8Dh
.eh_frame:0000000000025E69                 db    2
.eh_frame:0000000000025E6A                 db  42h ; B
.eh_frame:0000000000025E6B                 db  0Eh
.eh_frame:0000000000025E6C                 db  18h
.eh_frame:0000000000025E6D                 db  8Ch
.eh_frame:0000000000025E6E                 db    3
.eh_frame:0000000000025E6F                 db  44h ; D
.eh_frame:0000000000025E70                 db  0Eh
.eh_frame:0000000000025E71                 db  20h
.eh_frame:0000000000025E72                 db  86h
.eh_frame:0000000000025E73                 db    4
.eh_frame:0000000000025E74                 db  41h ; A
.eh_frame:0000000000025E75                 db  0Eh
.eh_frame:0000000000025E76                 db  28h ; (
.eh_frame:0000000000025E77                 db  83h
.eh_frame:0000000000025E78                 db    5
.eh_frame:0000000000025E79                 db  51h ; Q
.eh_frame:0000000000025E7A                 db  0Eh
.eh_frame:0000000000025E7B                 db  30h ; 0
.eh_frame:0000000000025E7C                 db    2
.eh_frame:0000000000025E7D                 db  7Eh ; ~
.eh_frame:0000000000025E7E                 db  0Eh
.eh_frame:0000000000025E7F                 db  28h ; (
.eh_frame:0000000000025E80                 db  41h ; A
.eh_frame:0000000000025E81                 db  0Eh
.eh_frame:0000000000025E82                 db  20h
.eh_frame:0000000000025E83                 db  41h ; A
.eh_frame:0000000000025E84                 db  0Eh
.eh_frame:0000000000025E85                 db  18h
.eh_frame:0000000000025E86                 db  42h ; B
.eh_frame:0000000000025E87                 db  0Eh
.eh_frame:0000000000025E88                 db  10h
.eh_frame:0000000000025E89                 db  42h ; B
.eh_frame:0000000000025E8A                 db  0Eh
.eh_frame:0000000000025E8B                 db    8
.eh_frame:0000000000025E8C                 db  48h ; H
.eh_frame:0000000000025E8D                 db    0
.eh_frame:0000000000025E8E                 db    0
.eh_frame:0000000000025E8F                 db    0
.eh_frame:0000000000025E90                 db  68h ; h
.eh_frame:0000000000025E91                 db  24h ; $
.eh_frame:0000000000025E92                 db    0
.eh_frame:0000000000025E93                 db    0
.eh_frame:0000000000025E94                 db  1Ch
.eh_frame:0000000000025E95                 db 0C2h
.eh_frame:0000000000025E96                 db 0FEh
.eh_frame:0000000000025E97                 db 0FFh
.eh_frame:0000000000025E98                 db  75h ; u
.eh_frame:0000000000025E99                 db    2
.eh_frame:0000000000025E9A                 db    0
.eh_frame:0000000000025E9B                 db    0
.eh_frame:0000000000025E9C                 db    0
.eh_frame:0000000000025E9D                 db  42h ; B
.eh_frame:0000000000025E9E                 db  0Eh
.eh_frame:0000000000025E9F                 db  10h
.eh_frame:0000000000025EA0                 db  8Fh
.eh_frame:0000000000025EA1                 db    2
.eh_frame:0000000000025EA2                 db  42h ; B
.eh_frame:0000000000025EA3                 db  0Eh
.eh_frame:0000000000025EA4                 db  18h
.eh_frame:0000000000025EA5                 db  8Eh
.eh_frame:0000000000025EA6                 db    3
.eh_frame:0000000000025EA7                 db  45h ; E
.eh_frame:0000000000025EA8                 db  0Eh
.eh_frame:0000000000025EA9                 db  20h
.eh_frame:0000000000025EAA                 db  8Dh
.eh_frame:0000000000025EAB                 db    4
.eh_frame:0000000000025EAC                 db  42h ; B
.eh_frame:0000000000025EAD                 db  0Eh
.eh_frame:0000000000025EAE                 db  28h ; (
.eh_frame:0000000000025EAF                 db  8Ch
.eh_frame:0000000000025EB0                 db    5
.eh_frame:0000000000025EB1                 db  44h ; D
.eh_frame:0000000000025EB2                 db  0Eh
.eh_frame:0000000000025EB3                 db  30h ; 0
.eh_frame:0000000000025EB4                 db  86h
.eh_frame:0000000000025EB5                 db    6
.eh_frame:0000000000025EB6                 db  41h ; A
.eh_frame:0000000000025EB7                 db  0Eh
.eh_frame:0000000000025EB8                 db  38h ; 8
.eh_frame:0000000000025EB9                 db  83h
.eh_frame:0000000000025EBA                 db    7
.eh_frame:0000000000025EBB                 db  4Ah ; J
.eh_frame:0000000000025EBC                 db  0Eh
.eh_frame:0000000000025EBD                 db  50h ; P
.eh_frame:0000000000025EBE                 db    3
.eh_frame:0000000000025EBF                 db  1Ah
.eh_frame:0000000000025EC0                 db    1
.eh_frame:0000000000025EC1                 db  0Ah
.eh_frame:0000000000025EC2                 db  0Eh
.eh_frame:0000000000025EC3                 db  38h ; 8
.eh_frame:0000000000025EC4                 db  41h ; A
.eh_frame:0000000000025EC5                 db  0Eh
.eh_frame:0000000000025EC6                 db  30h ; 0
.eh_frame:0000000000025EC7                 db  41h ; A
.eh_frame:0000000000025EC8                 db  0Eh
.eh_frame:0000000000025EC9                 db  28h ; (
.eh_frame:0000000000025ECA                 db  42h ; B
.eh_frame:0000000000025ECB                 db  0Eh
.eh_frame:0000000000025ECC                 db  20h
.eh_frame:0000000000025ECD                 db  42h ; B
.eh_frame:0000000000025ECE                 db  0Eh
.eh_frame:0000000000025ECF                 db  18h
.eh_frame:0000000000025ED0                 db  42h ; B
.eh_frame:0000000000025ED1                 db  0Eh
.eh_frame:0000000000025ED2                 db  10h
.eh_frame:0000000000025ED3                 db  42h ; B
.eh_frame:0000000000025ED4                 db  0Eh
.eh_frame:0000000000025ED5                 db    8
.eh_frame:0000000000025ED6                 db  42h ; B
.eh_frame:0000000000025ED7                 db  0Bh
.eh_frame:0000000000025ED8                 db  18h
.eh_frame:0000000000025ED9                 db    0
.eh_frame:0000000000025EDA                 db    0
.eh_frame:0000000000025EDB                 db    0
.eh_frame:0000000000025EDC                 db 0B4h
.eh_frame:0000000000025EDD                 db  24h ; $
.eh_frame:0000000000025EDE                 db    0
.eh_frame:0000000000025EDF                 db    0
.eh_frame:0000000000025EE0                 db  50h ; P
.eh_frame:0000000000025EE1                 db 0C4h
.eh_frame:0000000000025EE2                 db 0FEh
.eh_frame:0000000000025EE3                 db 0FFh
.eh_frame:0000000000025EE4                 db  59h ; Y
.eh_frame:0000000000025EE5                 db    0
.eh_frame:0000000000025EE6                 db    0
.eh_frame:0000000000025EE7                 db    0
.eh_frame:0000000000025EE8                 db    0
.eh_frame:0000000000025EE9                 db  41h ; A
.eh_frame:0000000000025EEA                 db  0Eh
.eh_frame:0000000000025EEB                 db  10h
.eh_frame:0000000000025EEC                 db  83h
.eh_frame:0000000000025EED                 db    2
.eh_frame:0000000000025EEE                 db    2
.eh_frame:0000000000025EEF                 db  53h ; S
.eh_frame:0000000000025EF0                 db  0Eh
.eh_frame:0000000000025EF1                 db    8
.eh_frame:0000000000025EF2                 db    0
.eh_frame:0000000000025EF3                 db    0
.eh_frame:0000000000025EF4                 db  1Ch
.eh_frame:0000000000025EF5                 db    0
.eh_frame:0000000000025EF6                 db    0
.eh_frame:0000000000025EF7                 db    0
.eh_frame:0000000000025EF8                 db 0D0h
.eh_frame:0000000000025EF9                 db  24h ; $
.eh_frame:0000000000025EFA                 db    0
.eh_frame:0000000000025EFB                 db    0
.eh_frame:0000000000025EFC                 db  94h
.eh_frame:0000000000025EFD                 db 0C4h
.eh_frame:0000000000025EFE                 db 0FEh
.eh_frame:0000000000025EFF                 db 0FFh
.eh_frame:0000000000025F00                 db  32h ; 2
.eh_frame:0000000000025F01                 db    0
.eh_frame:0000000000025F02                 db    0
.eh_frame:0000000000025F03                 db    0
.eh_frame:0000000000025F04                 db    0
.eh_frame:0000000000025F05                 db  41h ; A
.eh_frame:0000000000025F06                 db  0Eh
.eh_frame:0000000000025F07                 db  10h
.eh_frame:0000000000025F08                 db  83h
.eh_frame:0000000000025F09                 db    2
.eh_frame:0000000000025F0A                 db  5Fh ; _
.eh_frame:0000000000025F0B                 db  0Ah
.eh_frame:0000000000025F0C                 db  0Eh
.eh_frame:0000000000025F0D                 db    8
.eh_frame:0000000000025F0E                 db  48h ; H
.eh_frame:0000000000025F0F                 db  0Bh
.eh_frame:0000000000025F10                 db  45h ; E
.eh_frame:0000000000025F11                 db  0Eh
.eh_frame:0000000000025F12                 db    8
.eh_frame:0000000000025F13                 db    0
.eh_frame:0000000000025F14                 db  38h ; 8
.eh_frame:0000000000025F15                 db    0
.eh_frame:0000000000025F16                 db    0
.eh_frame:0000000000025F17                 db    0
.eh_frame:0000000000025F18                 db 0F0h
.eh_frame:0000000000025F19                 db  24h ; $
.eh_frame:0000000000025F1A                 db    0
.eh_frame:0000000000025F1B                 db    0
.eh_frame:0000000000025F1C                 db 0B4h
.eh_frame:0000000000025F1D                 db 0C4h
.eh_frame:0000000000025F1E                 db 0FEh
.eh_frame:0000000000025F1F                 db 0FFh
.eh_frame:0000000000025F20                 db  5Fh ; _
.eh_frame:0000000000025F21                 db    1
.eh_frame:0000000000025F22                 db    0
.eh_frame:0000000000025F23                 db    0
.eh_frame:0000000000025F24                 db    0
.eh_frame:0000000000025F25                 db  42h ; B
.eh_frame:0000000000025F26                 db  0Eh
.eh_frame:0000000000025F27                 db  10h
.eh_frame:0000000000025F28                 db  8Eh
.eh_frame:0000000000025F29                 db    2
.eh_frame:0000000000025F2A                 db  42h ; B
.eh_frame:0000000000025F2B                 db  0Eh
.eh_frame:0000000000025F2C                 db  18h
.eh_frame:0000000000025F2D                 db  8Dh
.eh_frame:0000000000025F2E                 db    3
.eh_frame:0000000000025F2F                 db  42h ; B
.eh_frame:0000000000025F30                 db  0Eh
.eh_frame:0000000000025F31                 db  20h
.eh_frame:0000000000025F32                 db  8Ch
.eh_frame:0000000000025F33                 db    4
.eh_frame:0000000000025F34                 db  44h ; D
.eh_frame:0000000000025F35                 db  0Eh
.eh_frame:0000000000025F36                 db  28h ; (
.eh_frame:0000000000025F37                 db  86h
.eh_frame:0000000000025F38                 db    5
.eh_frame:0000000000025F39                 db  41h ; A
.eh_frame:0000000000025F3A                 db  0Eh
.eh_frame:0000000000025F3B                 db  30h ; 0
.eh_frame:0000000000025F3C                 db  83h
.eh_frame:0000000000025F3D                 db    6
.eh_frame:0000000000025F3E                 db    3
.eh_frame:0000000000025F3F                 db  45h ; E
.eh_frame:0000000000025F40                 db    1
.eh_frame:0000000000025F41                 db  0Eh
.eh_frame:0000000000025F42                 db  28h ; (
.eh_frame:0000000000025F43                 db  44h ; D
.eh_frame:0000000000025F44                 db  0Eh
.eh_frame:0000000000025F45                 db  20h
.eh_frame:0000000000025F46                 db  42h ; B
.eh_frame:0000000000025F47                 db  0Eh
.eh_frame:0000000000025F48                 db  18h
.eh_frame:0000000000025F49                 db  42h ; B
.eh_frame:0000000000025F4A                 db  0Eh
.eh_frame:0000000000025F4B                 db  10h
.eh_frame:0000000000025F4C                 db  42h ; B
.eh_frame:0000000000025F4D                 db  0Eh
.eh_frame:0000000000025F4E                 db    8
.eh_frame:0000000000025F4F                 db    0
.eh_frame:0000000000025F50                 db  38h ; 8
.eh_frame:0000000000025F51                 db    0
.eh_frame:0000000000025F52                 db    0
.eh_frame:0000000000025F53                 db    0
.eh_frame:0000000000025F54                 db  2Ch ; ,
.eh_frame:0000000000025F55                 db  25h ; %
.eh_frame:0000000000025F56                 db    0
.eh_frame:0000000000025F57                 db    0
.eh_frame:0000000000025F58                 db 0D8h
.eh_frame:0000000000025F59                 db 0C5h
.eh_frame:0000000000025F5A                 db 0FEh
.eh_frame:0000000000025F5B                 db 0FFh
.eh_frame:0000000000025F5C                 db 0B8h
.eh_frame:0000000000025F5D                 db    0
.eh_frame:0000000000025F5E                 db    0
.eh_frame:0000000000025F5F                 db    0
.eh_frame:0000000000025F60                 db    0
.eh_frame:0000000000025F61                 db  42h ; B
.eh_frame:0000000000025F62                 db  0Eh
.eh_frame:0000000000025F63                 db  10h
.eh_frame:0000000000025F64                 db  8Eh
.eh_frame:0000000000025F65                 db    2
.eh_frame:0000000000025F66                 db  42h ; B
.eh_frame:0000000000025F67                 db  0Eh
.eh_frame:0000000000025F68                 db  18h
.eh_frame:0000000000025F69                 db  8Dh
.eh_frame:0000000000025F6A                 db    3
.eh_frame:0000000000025F6B                 db  45h ; E
.eh_frame:0000000000025F6C                 db  0Eh
.eh_frame:0000000000025F6D                 db  20h
.eh_frame:0000000000025F6E                 db  8Ch
.eh_frame:0000000000025F6F                 db    4
.eh_frame:0000000000025F70                 db  41h ; A
.eh_frame:0000000000025F71                 db  0Eh
.eh_frame:0000000000025F72                 db  28h ; (
.eh_frame:0000000000025F73                 db  86h
.eh_frame:0000000000025F74                 db    5
.eh_frame:0000000000025F75                 db  41h ; A
.eh_frame:0000000000025F76                 db  0Eh
.eh_frame:0000000000025F77                 db  30h ; 0
.eh_frame:0000000000025F78                 db  83h
.eh_frame:0000000000025F79                 db    6
.eh_frame:0000000000025F7A                 db    2
.eh_frame:0000000000025F7B                 db  8Fh
.eh_frame:0000000000025F7C                 db  0Eh
.eh_frame:0000000000025F7D                 db  28h ; (
.eh_frame:0000000000025F7E                 db  57h ; W
.eh_frame:0000000000025F7F                 db  0Eh
.eh_frame:0000000000025F80                 db  20h
.eh_frame:0000000000025F81                 db  42h ; B
.eh_frame:0000000000025F82                 db  0Eh
.eh_frame:0000000000025F83                 db  18h
.eh_frame:0000000000025F84                 db  42h ; B
.eh_frame:0000000000025F85                 db  0Eh
.eh_frame:0000000000025F86                 db  10h
.eh_frame:0000000000025F87                 db  42h ; B
.eh_frame:0000000000025F88                 db  0Eh
.eh_frame:0000000000025F89                 db    8
.eh_frame:0000000000025F8A                 db    0
.eh_frame:0000000000025F8B                 db    0
.eh_frame:0000000000025F8C                 db  10h
.eh_frame:0000000000025F8D                 db    0
.eh_frame:0000000000025F8E                 db    0
.eh_frame:0000000000025F8F                 db    0
.eh_frame:0000000000025F90                 db  68h ; h
.eh_frame:0000000000025F91                 db  25h ; %
.eh_frame:0000000000025F92                 db    0
.eh_frame:0000000000025F93                 db    0
.eh_frame:0000000000025F94                 db  5Ch ; \
.eh_frame:0000000000025F95                 db 0C6h
.eh_frame:0000000000025F96                 db 0FEh
.eh_frame:0000000000025F97                 db 0FFh
.eh_frame:0000000000025F98                 db  4Fh ; O
.eh_frame:0000000000025F99                 db    0
.eh_frame:0000000000025F9A                 db    0
.eh_frame:0000000000025F9B                 db    0
.eh_frame:0000000000025F9C                 db    0
.eh_frame:0000000000025F9D                 db    0
.eh_frame:0000000000025F9E                 db    0
.eh_frame:0000000000025F9F                 db    0
.eh_frame:0000000000025FA0                 db  10h
.eh_frame:0000000000025FA1                 db    0
.eh_frame:0000000000025FA2                 db    0
.eh_frame:0000000000025FA3                 db    0
.eh_frame:0000000000025FA4                 db  7Ch ; |
.eh_frame:0000000000025FA5                 db  25h ; %
.eh_frame:0000000000025FA6                 db    0
.eh_frame:0000000000025FA7                 db    0
.eh_frame:0000000000025FA8                 db  98h
.eh_frame:0000000000025FA9                 db 0C6h
.eh_frame:0000000000025FAA                 db 0FEh
.eh_frame:0000000000025FAB                 db 0FFh
.eh_frame:0000000000025FAC                 db  53h ; S
.eh_frame:0000000000025FAD                 db    0
.eh_frame:0000000000025FAE                 db    0
.eh_frame:0000000000025FAF                 db    0
.eh_frame:0000000000025FB0                 db    0
.eh_frame:0000000000025FB1                 db    0
.eh_frame:0000000000025FB2                 db    0
.eh_frame:0000000000025FB3                 db    0
.eh_frame:0000000000025FB4                 db  10h
.eh_frame:0000000000025FB5                 db    0
.eh_frame:0000000000025FB6                 db    0
.eh_frame:0000000000025FB7                 db    0
.eh_frame:0000000000025FB8                 db  90h
.eh_frame:0000000000025FB9                 db  25h ; %
.eh_frame:0000000000025FBA                 db    0
.eh_frame:0000000000025FBB                 db    0
.eh_frame:0000000000025FBC                 db 0E4h
.eh_frame:0000000000025FBD                 db 0C6h
.eh_frame:0000000000025FBE                 db 0FEh
.eh_frame:0000000000025FBF                 db 0FFh
.eh_frame:0000000000025FC0                 db  75h ; u
.eh_frame:0000000000025FC1                 db    0
.eh_frame:0000000000025FC2                 db    0
.eh_frame:0000000000025FC3                 db    0
.eh_frame:0000000000025FC4                 db    0
.eh_frame:0000000000025FC5                 db    0
.eh_frame:0000000000025FC6                 db    0
.eh_frame:0000000000025FC7                 db    0
.eh_frame:0000000000025FC8                 db  60h ; `
.eh_frame:0000000000025FC9                 db    0
.eh_frame:0000000000025FCA                 db    0
.eh_frame:0000000000025FCB                 db    0
.eh_frame:0000000000025FCC                 db 0A4h
.eh_frame:0000000000025FCD                 db  25h ; %
.eh_frame:0000000000025FCE                 db    0
.eh_frame:0000000000025FCF                 db    0
.eh_frame:0000000000025FD0                 db  50h ; P
.eh_frame:0000000000025FD1                 db 0C7h
.eh_frame:0000000000025FD2                 db 0FEh
.eh_frame:0000000000025FD3                 db 0FFh
.eh_frame:0000000000025FD4                 db 0F5h
.eh_frame:0000000000025FD5                 db    0
.eh_frame:0000000000025FD6                 db    0
.eh_frame:0000000000025FD7                 db    0
.eh_frame:0000000000025FD8                 db    0
.eh_frame:0000000000025FD9                 db  42h ; B
.eh_frame:0000000000025FDA                 db  0Eh
.eh_frame:0000000000025FDB                 db  10h
.eh_frame:0000000000025FDC                 db  8Fh
.eh_frame:0000000000025FDD                 db    2
.eh_frame:0000000000025FDE                 db  42h ; B
.eh_frame:0000000000025FDF                 db  0Eh
.eh_frame:0000000000025FE0                 db  18h
.eh_frame:0000000000025FE1                 db  8Eh
.eh_frame:0000000000025FE2                 db    3
.eh_frame:0000000000025FE3                 db  46h ; F
.eh_frame:0000000000025FE4                 db  0Eh
.eh_frame:0000000000025FE5                 db  20h
.eh_frame:0000000000025FE6                 db  8Dh
.eh_frame:0000000000025FE7                 db    4
.eh_frame:0000000000025FE8                 db  42h ; B
.eh_frame:0000000000025FE9                 db  0Eh
.eh_frame:0000000000025FEA                 db  28h ; (
.eh_frame:0000000000025FEB                 db  8Ch
.eh_frame:0000000000025FEC                 db    5
.eh_frame:0000000000025FED                 db  44h ; D
.eh_frame:0000000000025FEE                 db  0Eh
.eh_frame:0000000000025FEF                 db  30h ; 0
.eh_frame:0000000000025FF0                 db  86h
.eh_frame:0000000000025FF1                 db    6
.eh_frame:0000000000025FF2                 db  41h ; A
.eh_frame:0000000000025FF3                 db  0Eh
.eh_frame:0000000000025FF4                 db  38h ; 8
.eh_frame:0000000000025FF5                 db  83h
.eh_frame:0000000000025FF6                 db    7
.eh_frame:0000000000025FF7                 db  50h ; P
.eh_frame:0000000000025FF8                 db  0Eh
.eh_frame:0000000000025FF9                 db  40h ; @
.eh_frame:0000000000025FFA                 db    2
.eh_frame:0000000000025FFB                 db  85h
.eh_frame:0000000000025FFC                 db  0Ah
.eh_frame:0000000000025FFD                 db  0Eh
.eh_frame:0000000000025FFE                 db  38h ; 8
.eh_frame:0000000000025FFF                 db  41h ; A
.eh_frame:0000000000026000                 db  0Eh
.eh_frame:0000000000026001                 db  30h ; 0
.eh_frame:0000000000026002                 db  41h ; A
.eh_frame:0000000000026003                 db  0Eh
.eh_frame:0000000000026004                 db  28h ; (
.eh_frame:0000000000026005                 db  42h ; B
.eh_frame:0000000000026006                 db  0Eh
.eh_frame:0000000000026007                 db  20h
.eh_frame:0000000000026008                 db  42h ; B
.eh_frame:0000000000026009                 db  0Eh
.eh_frame:000000000002600A                 db  18h
.eh_frame:000000000002600B                 db  42h ; B
.eh_frame:000000000002600C                 db  0Eh
.eh_frame:000000000002600D                 db  10h
.eh_frame:000000000002600E                 db  42h ; B
.eh_frame:000000000002600F                 db  0Eh
.eh_frame:0000000000026010                 db    8
.eh_frame:0000000000026011                 db  48h ; H
.eh_frame:0000000000026012                 db  0Bh
.eh_frame:0000000000026013                 db  44h ; D
.eh_frame:0000000000026014                 db  0Ah
.eh_frame:0000000000026015                 db  0Eh
.eh_frame:0000000000026016                 db  38h ; 8
.eh_frame:0000000000026017                 db  46h ; F
.eh_frame:0000000000026018                 db  0Eh
.eh_frame:0000000000026019                 db  30h ; 0
.eh_frame:000000000002601A                 db  41h ; A
.eh_frame:000000000002601B                 db  0Eh
.eh_frame:000000000002601C                 db  28h ; (
.eh_frame:000000000002601D                 db  42h ; B
.eh_frame:000000000002601E                 db  0Eh
.eh_frame:000000000002601F                 db  20h
.eh_frame:0000000000026020                 db  42h ; B
.eh_frame:0000000000026021                 db  0Eh
.eh_frame:0000000000026022                 db  18h
.eh_frame:0000000000026023                 db  42h ; B
.eh_frame:0000000000026024                 db  0Eh
.eh_frame:0000000000026025                 db  10h
.eh_frame:0000000000026026                 db  42h ; B
.eh_frame:0000000000026027                 db  0Eh
.eh_frame:0000000000026028                 db    8
.eh_frame:0000000000026029                 db  45h ; E
.eh_frame:000000000002602A                 db  0Bh
.eh_frame:000000000002602B                 db    0
.eh_frame:000000000002602C                 db  10h
.eh_frame:000000000002602D                 db    0
.eh_frame:000000000002602E                 db    0
.eh_frame:000000000002602F                 db    0
.eh_frame:0000000000026030                 db    8
.eh_frame:0000000000026031                 db  26h ; &
.eh_frame:0000000000026032                 db    0
.eh_frame:0000000000026033                 db    0
.eh_frame:0000000000026034                 db 0ECh
.eh_frame:0000000000026035                 db 0C7h
.eh_frame:0000000000026036                 db 0FEh
.eh_frame:0000000000026037                 db 0FFh
.eh_frame:0000000000026038                 db  34h ; 4
.eh_frame:0000000000026039                 db    0
.eh_frame:000000000002603A                 db    0
.eh_frame:000000000002603B                 db    0
.eh_frame:000000000002603C                 db    0
.eh_frame:000000000002603D                 db    0
.eh_frame:000000000002603E                 db    0
.eh_frame:000000000002603F                 db    0
.eh_frame:0000000000026040                 db  10h
.eh_frame:0000000000026041                 db    0
.eh_frame:0000000000026042                 db    0
.eh_frame:0000000000026043                 db    0
.eh_frame:0000000000026044                 db  1Ch
.eh_frame:0000000000026045                 db  26h ; &
.eh_frame:0000000000026046                 db    0
.eh_frame:0000000000026047                 db    0
.eh_frame:0000000000026048                 db  18h
.eh_frame:0000000000026049                 db 0C8h
.eh_frame:000000000002604A                 db 0FEh
.eh_frame:000000000002604B                 db 0FFh
.eh_frame:000000000002604C                 db  8Bh
.eh_frame:000000000002604D                 db    0
.eh_frame:000000000002604E                 db    0
.eh_frame:000000000002604F                 db    0
.eh_frame:0000000000026050                 db    0
.eh_frame:0000000000026051                 db    0
.eh_frame:0000000000026052                 db    0
.eh_frame:0000000000026053                 db    0
.eh_frame:0000000000026054                 db  10h
.eh_frame:0000000000026055                 db    0
.eh_frame:0000000000026056                 db    0
.eh_frame:0000000000026057                 db    0
.eh_frame:0000000000026058                 db  30h ; 0
.eh_frame:0000000000026059                 db  26h ; &
.eh_frame:000000000002605A                 db    0
.eh_frame:000000000002605B                 db    0
.eh_frame:000000000002605C                 db  94h
.eh_frame:000000000002605D                 db 0C8h
.eh_frame:000000000002605E                 db 0FEh
.eh_frame:000000000002605F                 db 0FFh
.eh_frame:0000000000026060                 db  57h ; W
.eh_frame:0000000000026061                 db    0
.eh_frame:0000000000026062                 db    0
.eh_frame:0000000000026063                 db    0
.eh_frame:0000000000026064                 db    0
.eh_frame:0000000000026065                 db    0
.eh_frame:0000000000026066                 db    0
.eh_frame:0000000000026067                 db    0
.eh_frame:0000000000026068                 db  4Ch ; L
.eh_frame:0000000000026069                 db    0
.eh_frame:000000000002606A                 db    0
.eh_frame:000000000002606B                 db    0
.eh_frame:000000000002606C                 db  44h ; D
.eh_frame:000000000002606D                 db  26h ; &
.eh_frame:000000000002606E                 db    0
.eh_frame:000000000002606F                 db    0
.eh_frame:0000000000026070                 db 0E0h
.eh_frame:0000000000026071                 db 0C8h
.eh_frame:0000000000026072                 db 0FEh
.eh_frame:0000000000026073                 db 0FFh
.eh_frame:0000000000026074                 db  69h ; i
.eh_frame:0000000000026075                 db    2
.eh_frame:0000000000026076                 db    0
.eh_frame:0000000000026077                 db    0
.eh_frame:0000000000026078                 db    0
.eh_frame:0000000000026079                 db  42h ; B
.eh_frame:000000000002607A                 db  0Eh
.eh_frame:000000000002607B                 db  10h
.eh_frame:000000000002607C                 db  8Fh
.eh_frame:000000000002607D                 db    2
.eh_frame:000000000002607E                 db  42h ; B
.eh_frame:000000000002607F                 db  0Eh
.eh_frame:0000000000026080                 db  18h
.eh_frame:0000000000026081                 db  8Eh
.eh_frame:0000000000026082                 db    3
.eh_frame:0000000000026083                 db  42h ; B
.eh_frame:0000000000026084                 db  0Eh
.eh_frame:0000000000026085                 db  20h
.eh_frame:0000000000026086                 db  8Dh
.eh_frame:0000000000026087                 db    4
.eh_frame:0000000000026088                 db  42h ; B
.eh_frame:0000000000026089                 db  0Eh
.eh_frame:000000000002608A                 db  28h ; (
.eh_frame:000000000002608B                 db  8Ch
.eh_frame:000000000002608C                 db    5
.eh_frame:000000000002608D                 db  41h ; A
.eh_frame:000000000002608E                 db  0Eh
.eh_frame:000000000002608F                 db  30h ; 0
.eh_frame:0000000000026090                 db  86h
.eh_frame:0000000000026091                 db    6
.eh_frame:0000000000026092                 db  41h ; A
.eh_frame:0000000000026093                 db  0Eh
.eh_frame:0000000000026094                 db  38h ; 8
.eh_frame:0000000000026095                 db  83h
.eh_frame:0000000000026096                 db    7
.eh_frame:0000000000026097                 db  46h ; F
.eh_frame:0000000000026098                 db  0Eh
.eh_frame:0000000000026099                 db  80h
.eh_frame:000000000002609A                 db    1
.eh_frame:000000000002609B                 db    3
.eh_frame:000000000002609C                 db 0D2h
.eh_frame:000000000002609D                 db    1
.eh_frame:000000000002609E                 db  0Ah
.eh_frame:000000000002609F                 db  0Eh
.eh_frame:00000000000260A0                 db  38h ; 8
.eh_frame:00000000000260A1                 db  41h ; A
.eh_frame:00000000000260A2                 db  0Eh
.eh_frame:00000000000260A3                 db  30h ; 0
.eh_frame:00000000000260A4                 db  41h ; A
.eh_frame:00000000000260A5                 db  0Eh
.eh_frame:00000000000260A6                 db  28h ; (
.eh_frame:00000000000260A7                 db  42h ; B
.eh_frame:00000000000260A8                 db  0Eh
.eh_frame:00000000000260A9                 db  20h
.eh_frame:00000000000260AA                 db  42h ; B
.eh_frame:00000000000260AB                 db  0Eh
.eh_frame:00000000000260AC                 db  18h
.eh_frame:00000000000260AD                 db  42h ; B
.eh_frame:00000000000260AE                 db  0Eh
.eh_frame:00000000000260AF                 db  10h
.eh_frame:00000000000260B0                 db  42h ; B
.eh_frame:00000000000260B1                 db  0Eh
.eh_frame:00000000000260B2                 db    8
.eh_frame:00000000000260B3                 db  44h ; D
.eh_frame:00000000000260B4                 db  0Bh
.eh_frame:00000000000260B5                 db    0
.eh_frame:00000000000260B6                 db    0
.eh_frame:00000000000260B7                 db    0
.eh_frame:00000000000260B8                 db  34h ; 4
.eh_frame:00000000000260B9                 db    0
.eh_frame:00000000000260BA                 db    0
.eh_frame:00000000000260BB                 db    0
.eh_frame:00000000000260BC                 db  94h
.eh_frame:00000000000260BD                 db  26h ; &
.eh_frame:00000000000260BE                 db    0
.eh_frame:00000000000260BF                 db    0
.eh_frame:00000000000260C0                 db    0
.eh_frame:00000000000260C1                 db 0CBh
.eh_frame:00000000000260C2                 db 0FEh
.eh_frame:00000000000260C3                 db 0FFh
.eh_frame:00000000000260C4                 db 0DEh
.eh_frame:00000000000260C5                 db    1
.eh_frame:00000000000260C6                 db    0
.eh_frame:00000000000260C7                 db    0
.eh_frame:00000000000260C8                 db    0
.eh_frame:00000000000260C9                 db  58h ; X
.eh_frame:00000000000260CA                 db  0Eh
.eh_frame:00000000000260CB                 db  10h
.eh_frame:00000000000260CC                 db  8Ch
.eh_frame:00000000000260CD                 db    2
.eh_frame:00000000000260CE                 db  41h ; A
.eh_frame:00000000000260CF                 db  0Eh
.eh_frame:00000000000260D0                 db  18h
.eh_frame:00000000000260D1                 db  86h
.eh_frame:00000000000260D2                 db    3
.eh_frame:00000000000260D3                 db  44h ; D
.eh_frame:00000000000260D4                 db  0Eh
.eh_frame:00000000000260D5                 db  20h
.eh_frame:00000000000260D6                 db  83h
.eh_frame:00000000000260D7                 db    4
.eh_frame:00000000000260D8                 db    2
.eh_frame:00000000000260D9                 db 0D0h
.eh_frame:00000000000260DA                 db  0Eh
.eh_frame:00000000000260DB                 db  18h
.eh_frame:00000000000260DC                 db  41h ; A
.eh_frame:00000000000260DD                 db  0Eh
.eh_frame:00000000000260DE                 db  10h
.eh_frame:00000000000260DF                 db  42h ; B
.eh_frame:00000000000260E0                 db  0Eh
.eh_frame:00000000000260E1                 db    8
.eh_frame:00000000000260E2                 db  48h ; H
.eh_frame:00000000000260E3                 db 0C3h
.eh_frame:00000000000260E4                 db 0C6h
.eh_frame:00000000000260E5                 db 0CCh
.eh_frame:00000000000260E6                 db  48h ; H
.eh_frame:00000000000260E7                 db  0Eh
.eh_frame:00000000000260E8                 db  20h
.eh_frame:00000000000260E9                 db  83h
.eh_frame:00000000000260EA                 db    4
.eh_frame:00000000000260EB                 db  86h
.eh_frame:00000000000260EC                 db    3
.eh_frame:00000000000260ED                 db  8Ch
.eh_frame:00000000000260EE                 db    2
.eh_frame:00000000000260EF                 db    0
.eh_frame:00000000000260F0                 db  4Ch ; L
.eh_frame:00000000000260F1                 db    0
.eh_frame:00000000000260F2                 db    0
.eh_frame:00000000000260F3                 db    0
.eh_frame:00000000000260F4                 db 0CCh
.eh_frame:00000000000260F5                 db  26h ; &
.eh_frame:00000000000260F6                 db    0
.eh_frame:00000000000260F7                 db    0
.eh_frame:00000000000260F8                 db 0A8h
.eh_frame:00000000000260F9                 db 0CCh
.eh_frame:00000000000260FA                 db 0FEh
.eh_frame:00000000000260FB                 db 0FFh
.eh_frame:00000000000260FC                 db 0AFh
.eh_frame:00000000000260FD                 db    2
.eh_frame:00000000000260FE                 db    0
.eh_frame:00000000000260FF                 db    0
.eh_frame:0000000000026100                 db    0
.eh_frame:0000000000026101                 db  42h ; B
.eh_frame:0000000000026102                 db  0Eh
.eh_frame:0000000000026103                 db  10h
.eh_frame:0000000000026104                 db  8Fh
.eh_frame:0000000000026105                 db    2
.eh_frame:0000000000026106                 db  42h ; B
.eh_frame:0000000000026107                 db  0Eh
.eh_frame:0000000000026108                 db  18h
.eh_frame:0000000000026109                 db  8Eh
.eh_frame:000000000002610A                 db    3
.eh_frame:000000000002610B                 db  45h ; E
.eh_frame:000000000002610C                 db  0Eh
.eh_frame:000000000002610D                 db  20h
.eh_frame:000000000002610E                 db  8Dh
.eh_frame:000000000002610F                 db    4
.eh_frame:0000000000026110                 db  42h ; B
.eh_frame:0000000000026111                 db  0Eh
.eh_frame:0000000000026112                 db  28h ; (
.eh_frame:0000000000026113                 db  8Ch
.eh_frame:0000000000026114                 db    5
.eh_frame:0000000000026115                 db  41h ; A
.eh_frame:0000000000026116                 db  0Eh
.eh_frame:0000000000026117                 db  30h ; 0
.eh_frame:0000000000026118                 db  86h
.eh_frame:0000000000026119                 db    6
.eh_frame:000000000002611A                 db  41h ; A
.eh_frame:000000000002611B                 db  0Eh
.eh_frame:000000000002611C                 db  38h ; 8
.eh_frame:000000000002611D                 db  83h
.eh_frame:000000000002611E                 db    7
.eh_frame:000000000002611F                 db  4Bh ; K
.eh_frame:0000000000026120                 db  0Eh
.eh_frame:0000000000026121                 db 0A0h
.eh_frame:0000000000026122                 db    1
.eh_frame:0000000000026123                 db    3
.eh_frame:0000000000026124                 db 0A6h
.eh_frame:0000000000026125                 db    1
.eh_frame:0000000000026126                 db  0Ah
.eh_frame:0000000000026127                 db  0Eh
.eh_frame:0000000000026128                 db  38h ; 8
.eh_frame:0000000000026129                 db  41h ; A
.eh_frame:000000000002612A                 db  0Eh
.eh_frame:000000000002612B                 db  30h ; 0
.eh_frame:000000000002612C                 db  41h ; A
.eh_frame:000000000002612D                 db  0Eh
.eh_frame:000000000002612E                 db  28h ; (
.eh_frame:000000000002612F                 db  42h ; B
.eh_frame:0000000000026130                 db  0Eh
.eh_frame:0000000000026131                 db  20h
.eh_frame:0000000000026132                 db  42h ; B
.eh_frame:0000000000026133                 db  0Eh
.eh_frame:0000000000026134                 db  18h
.eh_frame:0000000000026135                 db  42h ; B
.eh_frame:0000000000026136                 db  0Eh
.eh_frame:0000000000026137                 db  10h
.eh_frame:0000000000026138                 db  42h ; B
.eh_frame:0000000000026139                 db  0Eh
.eh_frame:000000000002613A                 db    8
.eh_frame:000000000002613B                 db  48h ; H
.eh_frame:000000000002613C                 db  0Bh
.eh_frame:000000000002613D                 db    0
.eh_frame:000000000002613E                 db    0
.eh_frame:000000000002613F                 db    0
.eh_frame:0000000000026140                 db  48h ; H
.eh_frame:0000000000026141                 db    0
.eh_frame:0000000000026142                 db    0
.eh_frame:0000000000026143                 db    0
.eh_frame:0000000000026144                 db  1Ch
.eh_frame:0000000000026145                 db  27h ; '
.eh_frame:0000000000026146                 db    0
.eh_frame:0000000000026147                 db    0
.eh_frame:0000000000026148                 db    8
.eh_frame:0000000000026149                 db 0CFh
.eh_frame:000000000002614A                 db 0FEh
.eh_frame:000000000002614B                 db 0FFh
.eh_frame:000000000002614C                 db  59h ; Y
.eh_frame:000000000002614D                 db    1
.eh_frame:000000000002614E                 db    0
.eh_frame:000000000002614F                 db    0
.eh_frame:0000000000026150                 db    0
.eh_frame:0000000000026151                 db  42h ; B
.eh_frame:0000000000026152                 db  0Eh
.eh_frame:0000000000026153                 db  10h
.eh_frame:0000000000026154                 db  8Fh
.eh_frame:0000000000026155                 db    2
.eh_frame:0000000000026156                 db  42h ; B
.eh_frame:0000000000026157                 db  0Eh
.eh_frame:0000000000026158                 db  18h
.eh_frame:0000000000026159                 db  8Eh
.eh_frame:000000000002615A                 db    3
.eh_frame:000000000002615B                 db  45h ; E
.eh_frame:000000000002615C                 db  0Eh
.eh_frame:000000000002615D                 db  20h
.eh_frame:000000000002615E                 db  8Dh
.eh_frame:000000000002615F                 db    4
.eh_frame:0000000000026160                 db  42h ; B
.eh_frame:0000000000026161                 db  0Eh
.eh_frame:0000000000026162                 db  28h ; (
.eh_frame:0000000000026163                 db  8Ch
.eh_frame:0000000000026164                 db    5
.eh_frame:0000000000026165                 db  44h ; D
.eh_frame:0000000000026166                 db  0Eh
.eh_frame:0000000000026167                 db  30h ; 0
.eh_frame:0000000000026168                 db  86h
.eh_frame:0000000000026169                 db    6
.eh_frame:000000000002616A                 db  41h ; A
.eh_frame:000000000002616B                 db  0Eh
.eh_frame:000000000002616C                 db  38h ; 8
.eh_frame:000000000002616D                 db  83h
.eh_frame:000000000002616E                 db    7
.eh_frame:000000000002616F                 db  49h ; I
.eh_frame:0000000000026170                 db  0Eh
.eh_frame:0000000000026171                 db  70h ; p
.eh_frame:0000000000026172                 db    3
.eh_frame:0000000000026173                 db  29h ; )
.eh_frame:0000000000026174                 db    1
.eh_frame:0000000000026175                 db  0Ah
.eh_frame:0000000000026176                 db  0Eh
.eh_frame:0000000000026177                 db  38h ; 8
.eh_frame:0000000000026178                 db  41h ; A
.eh_frame:0000000000026179                 db  0Eh
.eh_frame:000000000002617A                 db  30h ; 0
.eh_frame:000000000002617B                 db  41h ; A
.eh_frame:000000000002617C                 db  0Eh
.eh_frame:000000000002617D                 db  28h ; (
.eh_frame:000000000002617E                 db  42h ; B
.eh_frame:000000000002617F                 db  0Eh
.eh_frame:0000000000026180                 db  20h
.eh_frame:0000000000026181                 db  42h ; B
.eh_frame:0000000000026182                 db  0Eh
.eh_frame:0000000000026183                 db  18h
.eh_frame:0000000000026184                 db  42h ; B
.eh_frame:0000000000026185                 db  0Eh
.eh_frame:0000000000026186                 db  10h
.eh_frame:0000000000026187                 db  42h ; B
.eh_frame:0000000000026188                 db  0Eh
.eh_frame:0000000000026189                 db    8
.eh_frame:000000000002618A                 db  41h ; A
.eh_frame:000000000002618B                 db  0Bh
.eh_frame:000000000002618C                 db  4Ch ; L
.eh_frame:000000000002618D                 db    0
.eh_frame:000000000002618E                 db    0
.eh_frame:000000000002618F                 db    0
.eh_frame:0000000000026190                 db  68h ; h
.eh_frame:0000000000026191                 db  27h ; '
.eh_frame:0000000000026192                 db    0
.eh_frame:0000000000026193                 db    0
.eh_frame:0000000000026194                 db  1Ch
.eh_frame:0000000000026195                 db 0D0h
.eh_frame:0000000000026196                 db 0FEh
.eh_frame:0000000000026197                 db 0FFh
.eh_frame:0000000000026198                 db 0A8h
.eh_frame:0000000000026199                 db    1
.eh_frame:000000000002619A                 db    0
.eh_frame:000000000002619B                 db    0
.eh_frame:000000000002619C                 db    0
.eh_frame:000000000002619D                 db  5Eh ; ^
.eh_frame:000000000002619E                 db  0Eh
.eh_frame:000000000002619F                 db  10h
.eh_frame:00000000000261A0                 db  8Dh
.eh_frame:00000000000261A1                 db    2
.eh_frame:00000000000261A2                 db  42h ; B
.eh_frame:00000000000261A3                 db  0Eh
.eh_frame:00000000000261A4                 db  18h
.eh_frame:00000000000261A5                 db  8Ch
.eh_frame:00000000000261A6                 db    3
.eh_frame:00000000000261A7                 db  45h ; E
.eh_frame:00000000000261A8                 db  0Eh
.eh_frame:00000000000261A9                 db  20h
.eh_frame:00000000000261AA                 db  86h
.eh_frame:00000000000261AB                 db    4
.eh_frame:00000000000261AC                 db  41h ; A
.eh_frame:00000000000261AD                 db  0Eh
.eh_frame:00000000000261AE                 db  28h ; (
.eh_frame:00000000000261AF                 db  83h
.eh_frame:00000000000261B0                 db    5
.eh_frame:00000000000261B1                 db  4Dh ; M
.eh_frame:00000000000261B2                 db  0Eh
.eh_frame:00000000000261B3                 db  30h ; 0
.eh_frame:00000000000261B4                 db    2
.eh_frame:00000000000261B5                 db  95h
.eh_frame:00000000000261B6                 db  0Eh
.eh_frame:00000000000261B7                 db    8
.eh_frame:00000000000261B8                 db 0C3h
.eh_frame:00000000000261B9                 db 0C6h
.eh_frame:00000000000261BA                 db 0CCh
.eh_frame:00000000000261BB                 db 0CDh
.eh_frame:00000000000261BC                 db  48h ; H
.eh_frame:00000000000261BD                 db  0Eh
.eh_frame:00000000000261BE                 db  30h ; 0
.eh_frame:00000000000261BF                 db  83h
.eh_frame:00000000000261C0                 db    5
.eh_frame:00000000000261C1                 db  86h
.eh_frame:00000000000261C2                 db    4
.eh_frame:00000000000261C3                 db  8Ch
.eh_frame:00000000000261C4                 db    3
.eh_frame:00000000000261C5                 db  8Dh
.eh_frame:00000000000261C6                 db    2
.eh_frame:00000000000261C7                 db    2
.eh_frame:00000000000261C8                 db  90h
.eh_frame:00000000000261C9                 db  0Ah
.eh_frame:00000000000261CA                 db  0Eh
.eh_frame:00000000000261CB                 db  28h ; (
.eh_frame:00000000000261CC                 db  41h ; A
.eh_frame:00000000000261CD                 db  0Eh
.eh_frame:00000000000261CE                 db  20h
.eh_frame:00000000000261CF                 db  41h ; A
.eh_frame:00000000000261D0                 db  0Eh
.eh_frame:00000000000261D1                 db  18h
.eh_frame:00000000000261D2                 db  42h ; B
.eh_frame:00000000000261D3                 db  0Eh
.eh_frame:00000000000261D4                 db  10h
.eh_frame:00000000000261D5                 db  42h ; B
.eh_frame:00000000000261D6                 db  0Eh
.eh_frame:00000000000261D7                 db    8
.eh_frame:00000000000261D8                 db  4Ah ; J
.eh_frame:00000000000261D9                 db  0Bh
.eh_frame:00000000000261DA                 db    0
.eh_frame:00000000000261DB                 db    0
.eh_frame:00000000000261DC                 db  20h
.eh_frame:00000000000261DD                 db    0
.eh_frame:00000000000261DE                 db    0
.eh_frame:00000000000261DF                 db    0
.eh_frame:00000000000261E0                 db 0B8h
.eh_frame:00000000000261E1                 db  27h ; '
.eh_frame:00000000000261E2                 db    0
.eh_frame:00000000000261E3                 db    0
.eh_frame:00000000000261E4                 db  7Ch ; |
.eh_frame:00000000000261E5                 db 0D1h
.eh_frame:00000000000261E6                 db 0FEh
.eh_frame:00000000000261E7                 db 0FFh
.eh_frame:00000000000261E8                 db 0E0h
.eh_frame:00000000000261E9                 db    0
.eh_frame:00000000000261EA                 db    0
.eh_frame:00000000000261EB                 db    0
.eh_frame:00000000000261EC                 db    0
.eh_frame:00000000000261ED                 db  41h ; A
.eh_frame:00000000000261EE                 db  0Eh
.eh_frame:00000000000261EF                 db  10h
.eh_frame:00000000000261F0                 db  83h
.eh_frame:00000000000261F1                 db    2
.eh_frame:00000000000261F2                 db  47h ; G
.eh_frame:00000000000261F3                 db  0Eh
.eh_frame:00000000000261F4                 db  30h ; 0
.eh_frame:00000000000261F5                 db    2
.eh_frame:00000000000261F6                 db  77h ; w
.eh_frame:00000000000261F7                 db  0Ah
.eh_frame:00000000000261F8                 db  0Eh
.eh_frame:00000000000261F9                 db  10h
.eh_frame:00000000000261FA                 db  41h ; A
.eh_frame:00000000000261FB                 db  0Eh
.eh_frame:00000000000261FC                 db    8
.eh_frame:00000000000261FD                 db  48h ; H
.eh_frame:00000000000261FE                 db  0Bh
.eh_frame:00000000000261FF                 db    0
.eh_frame:0000000000026200                 db  40h ; @
.eh_frame:0000000000026201                 db    0
.eh_frame:0000000000026202                 db    0
.eh_frame:0000000000026203                 db    0
.eh_frame:0000000000026204                 db 0DCh
.eh_frame:0000000000026205                 db  27h ; '
.eh_frame:0000000000026206                 db    0
.eh_frame:0000000000026207                 db    0
.eh_frame:0000000000026208                 db  38h ; 8
.eh_frame:0000000000026209                 db 0D2h
.eh_frame:000000000002620A                 db 0FEh
.eh_frame:000000000002620B                 db 0FFh
.eh_frame:000000000002620C                 db 0D1h
.eh_frame:000000000002620D                 db    0
.eh_frame:000000000002620E                 db    0
.eh_frame:000000000002620F                 db    0
.eh_frame:0000000000026210                 db    0
.eh_frame:0000000000026211                 db  42h ; B
.eh_frame:0000000000026212                 db  0Eh
.eh_frame:0000000000026213                 db  10h
.eh_frame:0000000000026214                 db  8Eh
.eh_frame:0000000000026215                 db    2
.eh_frame:0000000000026216                 db  42h ; B
.eh_frame:0000000000026217                 db  0Eh
.eh_frame:0000000000026218                 db  18h
.eh_frame:0000000000026219                 db  8Dh
.eh_frame:000000000002621A                 db    3
.eh_frame:000000000002621B                 db  46h ; F
.eh_frame:000000000002621C                 db  0Eh
.eh_frame:000000000002621D                 db  20h
.eh_frame:000000000002621E                 db  8Ch
.eh_frame:000000000002621F                 db    4
.eh_frame:0000000000026220                 db  41h ; A
.eh_frame:0000000000026221                 db  0Eh
.eh_frame:0000000000026222                 db  28h ; (
.eh_frame:0000000000026223                 db  86h
.eh_frame:0000000000026224                 db    5
.eh_frame:0000000000026225                 db  48h ; H
.eh_frame:0000000000026226                 db  0Eh
.eh_frame:0000000000026227                 db  30h ; 0
.eh_frame:0000000000026228                 db  83h
.eh_frame:0000000000026229                 db    6
.eh_frame:000000000002622A                 db  47h ; G
.eh_frame:000000000002622B                 db  0Eh
.eh_frame:000000000002622C                 db  40h ; @
.eh_frame:000000000002622D                 db    2
.eh_frame:000000000002622E                 db  96h
.eh_frame:000000000002622F                 db  0Ah
.eh_frame:0000000000026230                 db  0Eh
.eh_frame:0000000000026231                 db  30h ; 0
.eh_frame:0000000000026232                 db  41h ; A
.eh_frame:0000000000026233                 db  0Eh
.eh_frame:0000000000026234                 db  28h ; (
.eh_frame:0000000000026235                 db  41h ; A
.eh_frame:0000000000026236                 db  0Eh
.eh_frame:0000000000026237                 db  20h
.eh_frame:0000000000026238                 db  42h ; B
.eh_frame:0000000000026239                 db  0Eh
.eh_frame:000000000002623A                 db  18h
.eh_frame:000000000002623B                 db  42h ; B
.eh_frame:000000000002623C                 db  0Eh
.eh_frame:000000000002623D                 db  10h
.eh_frame:000000000002623E                 db  42h ; B
.eh_frame:000000000002623F                 db  0Eh
.eh_frame:0000000000026240                 db    8
.eh_frame:0000000000026241                 db  48h ; H
.eh_frame:0000000000026242                 db  0Bh
.eh_frame:0000000000026243                 db    0
.eh_frame:0000000000026244                 db  4Ch ; L
.eh_frame:0000000000026245                 db    0
.eh_frame:0000000000026246                 db    0
.eh_frame:0000000000026247                 db    0
.eh_frame:0000000000026248                 db  20h
.eh_frame:0000000000026249                 db  28h ; (
.eh_frame:000000000002624A                 db    0
.eh_frame:000000000002624B                 db    0
.eh_frame:000000000002624C                 db 0D4h
.eh_frame:000000000002624D                 db 0D2h
.eh_frame:000000000002624E                 db 0FEh
.eh_frame:000000000002624F                 db 0FFh
.eh_frame:0000000000026250                 db  37h ; 7
.eh_frame:0000000000026251                 db    2
.eh_frame:0000000000026252                 db    0
.eh_frame:0000000000026253                 db    0
.eh_frame:0000000000026254                 db    0
.eh_frame:0000000000026255                 db  42h ; B
.eh_frame:0000000000026256                 db  0Eh
.eh_frame:0000000000026257                 db  10h
.eh_frame:0000000000026258                 db  8Fh
.eh_frame:0000000000026259                 db    2
.eh_frame:000000000002625A                 db  42h ; B
.eh_frame:000000000002625B                 db  0Eh
.eh_frame:000000000002625C                 db  18h
.eh_frame:000000000002625D                 db  8Eh
.eh_frame:000000000002625E                 db    3
.eh_frame:000000000002625F                 db  42h ; B
.eh_frame:0000000000026260                 db  0Eh
.eh_frame:0000000000026261                 db  20h
.eh_frame:0000000000026262                 db  8Dh
.eh_frame:0000000000026263                 db    4
.eh_frame:0000000000026264                 db  42h ; B
.eh_frame:0000000000026265                 db  0Eh
.eh_frame:0000000000026266                 db  28h ; (
.eh_frame:0000000000026267                 db  8Ch
.eh_frame:0000000000026268                 db    5
.eh_frame:0000000000026269                 db  44h ; D
.eh_frame:000000000002626A                 db  0Eh
.eh_frame:000000000002626B                 db  30h ; 0
.eh_frame:000000000002626C                 db  86h
.eh_frame:000000000002626D                 db    6
.eh_frame:000000000002626E                 db  41h ; A
.eh_frame:000000000002626F                 db  0Eh
.eh_frame:0000000000026270                 db  38h ; 8
.eh_frame:0000000000026271                 db  83h
.eh_frame:0000000000026272                 db    7
.eh_frame:0000000000026273                 db  44h ; D
.eh_frame:0000000000026274                 db  0Eh
.eh_frame:0000000000026275                 db  80h
.eh_frame:0000000000026276                 db    1
.eh_frame:0000000000026277                 db    3
.eh_frame:0000000000026278                 db  87h
.eh_frame:0000000000026279                 db    1
.eh_frame:000000000002627A                 db  0Ah
.eh_frame:000000000002627B                 db  0Eh
.eh_frame:000000000002627C                 db  38h ; 8
.eh_frame:000000000002627D                 db  41h ; A
.eh_frame:000000000002627E                 db  0Eh
.eh_frame:000000000002627F                 db  30h ; 0
.eh_frame:0000000000026280                 db  41h ; A
.eh_frame:0000000000026281                 db  0Eh
.eh_frame:0000000000026282                 db  28h ; (
.eh_frame:0000000000026283                 db  42h ; B
.eh_frame:0000000000026284                 db  0Eh
.eh_frame:0000000000026285                 db  20h
.eh_frame:0000000000026286                 db  42h ; B
.eh_frame:0000000000026287                 db  0Eh
.eh_frame:0000000000026288                 db  18h
.eh_frame:0000000000026289                 db  42h ; B
.eh_frame:000000000002628A                 db  0Eh
.eh_frame:000000000002628B                 db  10h
.eh_frame:000000000002628C                 db  42h ; B
.eh_frame:000000000002628D                 db  0Eh
.eh_frame:000000000002628E                 db    8
.eh_frame:000000000002628F                 db  46h ; F
.eh_frame:0000000000026290                 db  0Bh
.eh_frame:0000000000026291                 db    0
.eh_frame:0000000000026292                 db    0
.eh_frame:0000000000026293                 db    0
.eh_frame:0000000000026294                 db  28h ; (
.eh_frame:0000000000026295                 db    0
.eh_frame:0000000000026296                 db    0
.eh_frame:0000000000026297                 db    0
.eh_frame:0000000000026298                 db  70h ; p
.eh_frame:0000000000026299                 db  28h ; (
.eh_frame:000000000002629A                 db    0
.eh_frame:000000000002629B                 db    0
.eh_frame:000000000002629C                 db 0C4h
.eh_frame:000000000002629D                 db 0D4h
.eh_frame:000000000002629E                 db 0FEh
.eh_frame:000000000002629F                 db 0FFh
.eh_frame:00000000000262A0                 db 0A0h
.eh_frame:00000000000262A1                 db    0
.eh_frame:00000000000262A2                 db    0
.eh_frame:00000000000262A3                 db    0
.eh_frame:00000000000262A4                 db    0
.eh_frame:00000000000262A5                 db  41h ; A
.eh_frame:00000000000262A6                 db  0Eh
.eh_frame:00000000000262A7                 db  10h
.eh_frame:00000000000262A8                 db  86h
.eh_frame:00000000000262A9                 db    2
.eh_frame:00000000000262AA                 db  41h ; A
.eh_frame:00000000000262AB                 db  0Eh
.eh_frame:00000000000262AC                 db  18h
.eh_frame:00000000000262AD                 db  83h
.eh_frame:00000000000262AE                 db    3
.eh_frame:00000000000262AF                 db  4Ah ; J
.eh_frame:00000000000262B0                 db  0Eh
.eh_frame:00000000000262B1                 db  30h ; 0
.eh_frame:00000000000262B2                 db    2
.eh_frame:00000000000262B3                 db  4Eh ; N
.eh_frame:00000000000262B4                 db  0Ah
.eh_frame:00000000000262B5                 db  0Eh
.eh_frame:00000000000262B6                 db  18h
.eh_frame:00000000000262B7                 db  41h ; A
.eh_frame:00000000000262B8                 db  0Eh
.eh_frame:00000000000262B9                 db  10h
.eh_frame:00000000000262BA                 db  41h ; A
.eh_frame:00000000000262BB                 db  0Eh
.eh_frame:00000000000262BC                 db    8
.eh_frame:00000000000262BD                 db  44h ; D
.eh_frame:00000000000262BE                 db  0Bh
.eh_frame:00000000000262BF                 db    0
.eh_frame:00000000000262C0                 db  38h ; 8
.eh_frame:00000000000262C1                 db    0
.eh_frame:00000000000262C2                 db    0
.eh_frame:00000000000262C3                 db    0
.eh_frame:00000000000262C4                 db  9Ch
.eh_frame:00000000000262C5                 db  28h ; (
.eh_frame:00000000000262C6                 db    0
.eh_frame:00000000000262C7                 db    0
.eh_frame:00000000000262C8                 db  38h ; 8
.eh_frame:00000000000262C9                 db 0D5h
.eh_frame:00000000000262CA                 db 0FEh
.eh_frame:00000000000262CB                 db 0FFh
.eh_frame:00000000000262CC                 db  86h
.eh_frame:00000000000262CD                 db    0
.eh_frame:00000000000262CE                 db    0
.eh_frame:00000000000262CF                 db    0
.eh_frame:00000000000262D0                 db    0
.eh_frame:00000000000262D1                 db  42h ; B
.eh_frame:00000000000262D2                 db  0Eh
.eh_frame:00000000000262D3                 db  10h
.eh_frame:00000000000262D4                 db  8Ch
.eh_frame:00000000000262D5                 db    2
.eh_frame:00000000000262D6                 db  41h ; A
.eh_frame:00000000000262D7                 db  0Eh
.eh_frame:00000000000262D8                 db  18h
.eh_frame:00000000000262D9                 db  86h
.eh_frame:00000000000262DA                 db    3
.eh_frame:00000000000262DB                 db  41h ; A
.eh_frame:00000000000262DC                 db  0Eh
.eh_frame:00000000000262DD                 db  20h
.eh_frame:00000000000262DE                 db  83h
.eh_frame:00000000000262DF                 db    4
.eh_frame:00000000000262E0                 db    2
.eh_frame:00000000000262E1                 db  47h ; G
.eh_frame:00000000000262E2                 db  0Ah
.eh_frame:00000000000262E3                 db  0Eh
.eh_frame:00000000000262E4                 db  18h
.eh_frame:00000000000262E5                 db  41h ; A
.eh_frame:00000000000262E6                 db  0Eh
.eh_frame:00000000000262E7                 db  10h
.eh_frame:00000000000262E8                 db  42h ; B
.eh_frame:00000000000262E9                 db  0Eh
.eh_frame:00000000000262EA                 db    8
.eh_frame:00000000000262EB                 db  42h ; B
.eh_frame:00000000000262EC                 db  0Bh
.eh_frame:00000000000262ED                 db  52h ; R
.eh_frame:00000000000262EE                 db  0Ah
.eh_frame:00000000000262EF                 db  0Eh
.eh_frame:00000000000262F0                 db  18h
.eh_frame:00000000000262F1                 db  41h ; A
.eh_frame:00000000000262F2                 db  0Eh
.eh_frame:00000000000262F3                 db  10h
.eh_frame:00000000000262F4                 db  42h ; B
.eh_frame:00000000000262F5                 db  0Eh
.eh_frame:00000000000262F6                 db    8
.eh_frame:00000000000262F7                 db  4Bh ; K
.eh_frame:00000000000262F8                 db  0Bh
.eh_frame:00000000000262F9                 db    0
.eh_frame:00000000000262FA                 db    0
.eh_frame:00000000000262FB                 db    0
.eh_frame:00000000000262FC                 db  60h ; `
.eh_frame:00000000000262FD                 db    0
.eh_frame:00000000000262FE                 db    0
.eh_frame:00000000000262FF                 db    0
.eh_frame:0000000000026300                 db 0D8h
.eh_frame:0000000000026301                 db  28h ; (
.eh_frame:0000000000026302                 db    0
.eh_frame:0000000000026303                 db    0
.eh_frame:0000000000026304                 db  8Ch
.eh_frame:0000000000026305                 db 0D5h
.eh_frame:0000000000026306                 db 0FEh
.eh_frame:0000000000026307                 db 0FFh
.eh_frame:0000000000026308                 db  52h ; R
.eh_frame:0000000000026309                 db    1
.eh_frame:000000000002630A                 db    0
.eh_frame:000000000002630B                 db    0
.eh_frame:000000000002630C                 db    0
.eh_frame:000000000002630D                 db  45h ; E
.eh_frame:000000000002630E                 db  0Eh
.eh_frame:000000000002630F                 db  10h
.eh_frame:0000000000026310                 db  8Eh
.eh_frame:0000000000026311                 db    2
.eh_frame:0000000000026312                 db  42h ; B
.eh_frame:0000000000026313                 db  0Eh
.eh_frame:0000000000026314                 db  18h
.eh_frame:0000000000026315                 db  8Dh
.eh_frame:0000000000026316                 db    3
.eh_frame:0000000000026317                 db  42h ; B
.eh_frame:0000000000026318                 db  0Eh
.eh_frame:0000000000026319                 db  20h
.eh_frame:000000000002631A                 db  8Ch
.eh_frame:000000000002631B                 db    4
.eh_frame:000000000002631C                 db  41h ; A
.eh_frame:000000000002631D                 db  0Eh
.eh_frame:000000000002631E                 db  28h ; (
.eh_frame:000000000002631F                 db  86h
.eh_frame:0000000000026320                 db    5
.eh_frame:0000000000026321                 db  41h ; A
.eh_frame:0000000000026322                 db  0Eh
.eh_frame:0000000000026323                 db  30h ; 0
.eh_frame:0000000000026324                 db  83h
.eh_frame:0000000000026325                 db    6
.eh_frame:0000000000026326                 db    2
.eh_frame:0000000000026327                 db 0C8h
.eh_frame:0000000000026328                 db  0Ah
.eh_frame:0000000000026329                 db  0Eh
.eh_frame:000000000002632A                 db  28h ; (
.eh_frame:000000000002632B                 db  41h ; A
.eh_frame:000000000002632C                 db  0Eh
.eh_frame:000000000002632D                 db  20h
.eh_frame:000000000002632E                 db  42h ; B
.eh_frame:000000000002632F                 db  0Eh
.eh_frame:0000000000026330                 db  18h
.eh_frame:0000000000026331                 db  42h ; B
.eh_frame:0000000000026332                 db  0Eh
.eh_frame:0000000000026333                 db  10h
.eh_frame:0000000000026334                 db  42h ; B
.eh_frame:0000000000026335                 db  0Eh
.eh_frame:0000000000026336                 db    8
.eh_frame:0000000000026337                 db  46h ; F
.eh_frame:0000000000026338                 db  0Bh
.eh_frame:0000000000026339                 db  44h ; D
.eh_frame:000000000002633A                 db  0Ah
.eh_frame:000000000002633B                 db  0Eh
.eh_frame:000000000002633C                 db  28h ; (
.eh_frame:000000000002633D                 db  41h ; A
.eh_frame:000000000002633E                 db  0Eh
.eh_frame:000000000002633F                 db  20h
.eh_frame:0000000000026340                 db  42h ; B
.eh_frame:0000000000026341                 db  0Eh
.eh_frame:0000000000026342                 db  18h
.eh_frame:0000000000026343                 db  42h ; B
.eh_frame:0000000000026344                 db  0Eh
.eh_frame:0000000000026345                 db  10h
.eh_frame:0000000000026346                 db  42h ; B
.eh_frame:0000000000026347                 db  0Eh
.eh_frame:0000000000026348                 db    8
.eh_frame:0000000000026349                 db  45h ; E
.eh_frame:000000000002634A                 db  0Bh
.eh_frame:000000000002634B                 db  4Dh ; M
.eh_frame:000000000002634C                 db  0Ah
.eh_frame:000000000002634D                 db  0Eh
.eh_frame:000000000002634E                 db  28h ; (
.eh_frame:000000000002634F                 db  41h ; A
.eh_frame:0000000000026350                 db  0Eh
.eh_frame:0000000000026351                 db  20h
.eh_frame:0000000000026352                 db  42h ; B
.eh_frame:0000000000026353                 db  0Eh
.eh_frame:0000000000026354                 db  18h
.eh_frame:0000000000026355                 db  42h ; B
.eh_frame:0000000000026356                 db  0Eh
.eh_frame:0000000000026357                 db  10h
.eh_frame:0000000000026358                 db  42h ; B
.eh_frame:0000000000026359                 db  0Eh
.eh_frame:000000000002635A                 db    8
.eh_frame:000000000002635B                 db  44h ; D
.eh_frame:000000000002635C                 db  0Bh
.eh_frame:000000000002635D                 db    0
.eh_frame:000000000002635E                 db    0
.eh_frame:000000000002635F                 db    0
.eh_frame:0000000000026360                 db  48h ; H
.eh_frame:0000000000026361                 db    0
.eh_frame:0000000000026362                 db    0
.eh_frame:0000000000026363                 db    0
.eh_frame:0000000000026364                 db  3Ch ; <
.eh_frame:0000000000026365                 db  29h ; )
.eh_frame:0000000000026366                 db    0
.eh_frame:0000000000026367                 db    0
.eh_frame:0000000000026368                 db  88h
.eh_frame:0000000000026369                 db 0D6h
.eh_frame:000000000002636A                 db 0FEh
.eh_frame:000000000002636B                 db 0FFh
.eh_frame:000000000002636C                 db 0BAh
.eh_frame:000000000002636D                 db    2
.eh_frame:000000000002636E                 db    0
.eh_frame:000000000002636F                 db    0
.eh_frame:0000000000026370                 db    0
.eh_frame:0000000000026371                 db  42h ; B
.eh_frame:0000000000026372                 db  0Eh
.eh_frame:0000000000026373                 db  10h
.eh_frame:0000000000026374                 db  8Fh
.eh_frame:0000000000026375                 db    2
.eh_frame:0000000000026376                 db  42h ; B
.eh_frame:0000000000026377                 db  0Eh
.eh_frame:0000000000026378                 db  18h
.eh_frame:0000000000026379                 db  8Eh
.eh_frame:000000000002637A                 db    3
.eh_frame:000000000002637B                 db  42h ; B
.eh_frame:000000000002637C                 db  0Eh
.eh_frame:000000000002637D                 db  20h
.eh_frame:000000000002637E                 db  8Dh
.eh_frame:000000000002637F                 db    4
.eh_frame:0000000000026380                 db  42h ; B
.eh_frame:0000000000026381                 db  0Eh
.eh_frame:0000000000026382                 db  28h ; (
.eh_frame:0000000000026383                 db  8Ch
.eh_frame:0000000000026384                 db    5
.eh_frame:0000000000026385                 db  41h ; A
.eh_frame:0000000000026386                 db  0Eh
.eh_frame:0000000000026387                 db  30h ; 0
.eh_frame:0000000000026388                 db  86h
.eh_frame:0000000000026389                 db    6
.eh_frame:000000000002638A                 db  41h ; A
.eh_frame:000000000002638B                 db  0Eh
.eh_frame:000000000002638C                 db  38h ; 8
.eh_frame:000000000002638D                 db  83h
.eh_frame:000000000002638E                 db    7
.eh_frame:000000000002638F                 db  44h ; D
.eh_frame:0000000000026390                 db  0Eh
.eh_frame:0000000000026391                 db  60h ; `
.eh_frame:0000000000026392                 db    2
.eh_frame:0000000000026393                 db 0A2h
.eh_frame:0000000000026394                 db  0Ah
.eh_frame:0000000000026395                 db  0Eh
.eh_frame:0000000000026396                 db  38h ; 8
.eh_frame:0000000000026397                 db  44h ; D
.eh_frame:0000000000026398                 db  0Eh
.eh_frame:0000000000026399                 db  30h ; 0
.eh_frame:000000000002639A                 db  41h ; A
.eh_frame:000000000002639B                 db  0Eh
.eh_frame:000000000002639C                 db  28h ; (
.eh_frame:000000000002639D                 db  42h ; B
.eh_frame:000000000002639E                 db  0Eh
.eh_frame:000000000002639F                 db  20h
.eh_frame:00000000000263A0                 db  42h ; B
.eh_frame:00000000000263A1                 db  0Eh
.eh_frame:00000000000263A2                 db  18h
.eh_frame:00000000000263A3                 db  42h ; B
.eh_frame:00000000000263A4                 db  0Eh
.eh_frame:00000000000263A5                 db  10h
.eh_frame:00000000000263A6                 db  42h ; B
.eh_frame:00000000000263A7                 db  0Eh
.eh_frame:00000000000263A8                 db    8
.eh_frame:00000000000263A9                 db  43h ; C
.eh_frame:00000000000263AA                 db  0Bh
.eh_frame:00000000000263AB                 db    0
.eh_frame:00000000000263AC                 db  48h ; H
.eh_frame:00000000000263AD                 db    0
.eh_frame:00000000000263AE                 db    0
.eh_frame:00000000000263AF                 db    0
.eh_frame:00000000000263B0                 db  88h
.eh_frame:00000000000263B1                 db  29h ; )
.eh_frame:00000000000263B2                 db    0
.eh_frame:00000000000263B3                 db    0
.eh_frame:00000000000263B4                 db 0FCh
.eh_frame:00000000000263B5                 db 0D8h
.eh_frame:00000000000263B6                 db 0FEh
.eh_frame:00000000000263B7                 db 0FFh
.eh_frame:00000000000263B8                 db 0FAh
.eh_frame:00000000000263B9                 db    1
.eh_frame:00000000000263BA                 db    0
.eh_frame:00000000000263BB                 db    0
.eh_frame:00000000000263BC                 db    0
.eh_frame:00000000000263BD                 db  42h ; B
.eh_frame:00000000000263BE                 db  0Eh
.eh_frame:00000000000263BF                 db  10h
.eh_frame:00000000000263C0                 db  8Fh
.eh_frame:00000000000263C1                 db    2
.eh_frame:00000000000263C2                 db  42h ; B
.eh_frame:00000000000263C3                 db  0Eh
.eh_frame:00000000000263C4                 db  18h
.eh_frame:00000000000263C5                 db  8Eh
.eh_frame:00000000000263C6                 db    3
.eh_frame:00000000000263C7                 db  42h ; B
.eh_frame:00000000000263C8                 db  0Eh
.eh_frame:00000000000263C9                 db  20h
.eh_frame:00000000000263CA                 db  8Dh
.eh_frame:00000000000263CB                 db    4
.eh_frame:00000000000263CC                 db  42h ; B
.eh_frame:00000000000263CD                 db  0Eh
.eh_frame:00000000000263CE                 db  28h ; (
.eh_frame:00000000000263CF                 db  8Ch
.eh_frame:00000000000263D0                 db    5
.eh_frame:00000000000263D1                 db  41h ; A
.eh_frame:00000000000263D2                 db  0Eh
.eh_frame:00000000000263D3                 db  30h ; 0
.eh_frame:00000000000263D4                 db  86h
.eh_frame:00000000000263D5                 db    6
.eh_frame:00000000000263D6                 db  41h ; A
.eh_frame:00000000000263D7                 db  0Eh
.eh_frame:00000000000263D8                 db  38h ; 8
.eh_frame:00000000000263D9                 db  83h
.eh_frame:00000000000263DA                 db    7
.eh_frame:00000000000263DB                 db  44h ; D
.eh_frame:00000000000263DC                 db  0Eh
.eh_frame:00000000000263DD                 db  40h ; @
.eh_frame:00000000000263DE                 db    3
.eh_frame:00000000000263DF                 db  85h
.eh_frame:00000000000263E0                 db    1
.eh_frame:00000000000263E1                 db  0Ah
.eh_frame:00000000000263E2                 db  0Eh
.eh_frame:00000000000263E3                 db  38h ; 8
.eh_frame:00000000000263E4                 db  44h ; D
.eh_frame:00000000000263E5                 db  0Eh
.eh_frame:00000000000263E6                 db  30h ; 0
.eh_frame:00000000000263E7                 db  41h ; A
.eh_frame:00000000000263E8                 db  0Eh
.eh_frame:00000000000263E9                 db  28h ; (
.eh_frame:00000000000263EA                 db  42h ; B
.eh_frame:00000000000263EB                 db  0Eh
.eh_frame:00000000000263EC                 db  20h
.eh_frame:00000000000263ED                 db  42h ; B
.eh_frame:00000000000263EE                 db  0Eh
.eh_frame:00000000000263EF                 db  18h
.eh_frame:00000000000263F0                 db  42h ; B
.eh_frame:00000000000263F1                 db  0Eh
.eh_frame:00000000000263F2                 db  10h
.eh_frame:00000000000263F3                 db  42h ; B
.eh_frame:00000000000263F4                 db  0Eh
.eh_frame:00000000000263F5                 db    8
.eh_frame:00000000000263F6                 db  48h ; H
.eh_frame:00000000000263F7                 db  0Bh
.eh_frame:00000000000263F8                 db  48h ; H
.eh_frame:00000000000263F9                 db    0
.eh_frame:00000000000263FA                 db    0
.eh_frame:00000000000263FB                 db    0
.eh_frame:00000000000263FC                 db 0D4h
.eh_frame:00000000000263FD                 db  29h ; )
.eh_frame:00000000000263FE                 db    0
.eh_frame:00000000000263FF                 db    0
.eh_frame:0000000000026400                 db 0B0h
.eh_frame:0000000000026401                 db 0DAh
.eh_frame:0000000000026402                 db 0FEh
.eh_frame:0000000000026403                 db 0FFh
.eh_frame:0000000000026404                 db 0DCh
.eh_frame:0000000000026405                 db    0
.eh_frame:0000000000026406                 db    0
.eh_frame:0000000000026407                 db    0
.eh_frame:0000000000026408                 db    0
.eh_frame:0000000000026409                 db  42h ; B
.eh_frame:000000000002640A                 db  0Eh
.eh_frame:000000000002640B                 db  10h
.eh_frame:000000000002640C                 db  8Fh
.eh_frame:000000000002640D                 db    2
.eh_frame:000000000002640E                 db  42h ; B
.eh_frame:000000000002640F                 db  0Eh
.eh_frame:0000000000026410                 db  18h
.eh_frame:0000000000026411                 db  8Eh
.eh_frame:0000000000026412                 db    3
.eh_frame:0000000000026413                 db  42h ; B
.eh_frame:0000000000026414                 db  0Eh
.eh_frame:0000000000026415                 db  20h
.eh_frame:0000000000026416                 db  8Dh
.eh_frame:0000000000026417                 db    4
.eh_frame:0000000000026418                 db  42h ; B
.eh_frame:0000000000026419                 db  0Eh
.eh_frame:000000000002641A                 db  28h ; (
.eh_frame:000000000002641B                 db  8Ch
.eh_frame:000000000002641C                 db    5
.eh_frame:000000000002641D                 db  41h ; A
.eh_frame:000000000002641E                 db  0Eh
.eh_frame:000000000002641F                 db  30h ; 0
.eh_frame:0000000000026420                 db  86h
.eh_frame:0000000000026421                 db    6
.eh_frame:0000000000026422                 db  41h ; A
.eh_frame:0000000000026423                 db  0Eh
.eh_frame:0000000000026424                 db  38h ; 8
.eh_frame:0000000000026425                 db  83h
.eh_frame:0000000000026426                 db    7
.eh_frame:0000000000026427                 db  44h ; D
.eh_frame:0000000000026428                 db  0Eh
.eh_frame:0000000000026429                 db  80h
.eh_frame:000000000002642A                 db    1
.eh_frame:000000000002642B                 db    2
.eh_frame:000000000002642C                 db 0BEh
.eh_frame:000000000002642D                 db  0Ah
.eh_frame:000000000002642E                 db  0Eh
.eh_frame:000000000002642F                 db  38h ; 8
.eh_frame:0000000000026430                 db  41h ; A
.eh_frame:0000000000026431                 db  0Eh
.eh_frame:0000000000026432                 db  30h ; 0
.eh_frame:0000000000026433                 db  41h ; A
.eh_frame:0000000000026434                 db  0Eh
.eh_frame:0000000000026435                 db  28h ; (
.eh_frame:0000000000026436                 db  42h ; B
.eh_frame:0000000000026437                 db  0Eh
.eh_frame:0000000000026438                 db  20h
.eh_frame:0000000000026439                 db  42h ; B
.eh_frame:000000000002643A                 db  0Eh
.eh_frame:000000000002643B                 db  18h
.eh_frame:000000000002643C                 db  42h ; B
.eh_frame:000000000002643D                 db  0Eh
.eh_frame:000000000002643E                 db  10h
.eh_frame:000000000002643F                 db  42h ; B
.eh_frame:0000000000026440                 db  0Eh
.eh_frame:0000000000026441                 db    8
.eh_frame:0000000000026442                 db  41h ; A
.eh_frame:0000000000026443                 db  0Bh
.eh_frame:0000000000026444                 db  48h ; H
.eh_frame:0000000000026445                 db    0
.eh_frame:0000000000026446                 db    0
.eh_frame:0000000000026447                 db    0
.eh_frame:0000000000026448                 db  20h
.eh_frame:0000000000026449                 db  2Ah ; *
.eh_frame:000000000002644A                 db    0
.eh_frame:000000000002644B                 db    0
.eh_frame:000000000002644C                 db  44h ; D
.eh_frame:000000000002644D                 db 0DBh
.eh_frame:000000000002644E                 db 0FEh
.eh_frame:000000000002644F                 db 0FFh
.eh_frame:0000000000026450                 db  9Eh
.eh_frame:0000000000026451                 db    3
.eh_frame:0000000000026452                 db    0
.eh_frame:0000000000026453                 db    0
.eh_frame:0000000000026454                 db    0
.eh_frame:0000000000026455                 db  42h ; B
.eh_frame:0000000000026456                 db  0Eh
.eh_frame:0000000000026457                 db  10h
.eh_frame:0000000000026458                 db  8Fh
.eh_frame:0000000000026459                 db    2
.eh_frame:000000000002645A                 db  42h ; B
.eh_frame:000000000002645B                 db  0Eh
.eh_frame:000000000002645C                 db  18h
.eh_frame:000000000002645D                 db  8Eh
.eh_frame:000000000002645E                 db    3
.eh_frame:000000000002645F                 db  42h ; B
.eh_frame:0000000000026460                 db  0Eh
.eh_frame:0000000000026461                 db  20h
.eh_frame:0000000000026462                 db  8Dh
.eh_frame:0000000000026463                 db    4
.eh_frame:0000000000026464                 db  42h ; B
.eh_frame:0000000000026465                 db  0Eh
.eh_frame:0000000000026466                 db  28h ; (
.eh_frame:0000000000026467                 db  8Ch
.eh_frame:0000000000026468                 db    5
.eh_frame:0000000000026469                 db  44h ; D
.eh_frame:000000000002646A                 db  0Eh
.eh_frame:000000000002646B                 db  30h ; 0
.eh_frame:000000000002646C                 db  86h
.eh_frame:000000000002646D                 db    6
.eh_frame:000000000002646E                 db  41h ; A
.eh_frame:000000000002646F                 db  0Eh
.eh_frame:0000000000026470                 db  38h ; 8
.eh_frame:0000000000026471                 db  83h
.eh_frame:0000000000026472                 db    7
.eh_frame:0000000000026473                 db  4Ch ; L
.eh_frame:0000000000026474                 db  0Eh
.eh_frame:0000000000026475                 db 0B0h
.eh_frame:0000000000026476                 db    1
.eh_frame:0000000000026477                 db    2
.eh_frame:0000000000026478                 db 0BEh
.eh_frame:0000000000026479                 db  0Ah
.eh_frame:000000000002647A                 db  0Eh
.eh_frame:000000000002647B                 db  38h ; 8
.eh_frame:000000000002647C                 db  41h ; A
.eh_frame:000000000002647D                 db  0Eh
.eh_frame:000000000002647E                 db  30h ; 0
.eh_frame:000000000002647F                 db  41h ; A
.eh_frame:0000000000026480                 db  0Eh
.eh_frame:0000000000026481                 db  28h ; (
.eh_frame:0000000000026482                 db  42h ; B
.eh_frame:0000000000026483                 db  0Eh
.eh_frame:0000000000026484                 db  20h
.eh_frame:0000000000026485                 db  42h ; B
.eh_frame:0000000000026486                 db  0Eh
.eh_frame:0000000000026487                 db  18h
.eh_frame:0000000000026488                 db  42h ; B
.eh_frame:0000000000026489                 db  0Eh
.eh_frame:000000000002648A                 db  10h
.eh_frame:000000000002648B                 db  42h ; B
.eh_frame:000000000002648C                 db  0Eh
.eh_frame:000000000002648D                 db    8
.eh_frame:000000000002648E                 db  47h ; G
.eh_frame:000000000002648F                 db  0Bh
.eh_frame:0000000000026490                 db  48h ; H
.eh_frame:0000000000026491                 db    0
.eh_frame:0000000000026492                 db    0
.eh_frame:0000000000026493                 db    0
.eh_frame:0000000000026494                 db  6Ch ; l
.eh_frame:0000000000026495                 db  2Ah ; *
.eh_frame:0000000000026496                 db    0
.eh_frame:0000000000026497                 db    0
.eh_frame:0000000000026498                 db  98h
.eh_frame:0000000000026499                 db 0DEh
.eh_frame:000000000002649A                 db 0FEh
.eh_frame:000000000002649B                 db 0FFh
.eh_frame:000000000002649C                 db  41h ; A
.eh_frame:000000000002649D                 db    1
.eh_frame:000000000002649E                 db    0
.eh_frame:000000000002649F                 db    0
.eh_frame:00000000000264A0                 db    0
.eh_frame:00000000000264A1                 db  42h ; B
.eh_frame:00000000000264A2                 db  0Eh
.eh_frame:00000000000264A3                 db  10h
.eh_frame:00000000000264A4                 db  8Fh
.eh_frame:00000000000264A5                 db    2
.eh_frame:00000000000264A6                 db  42h ; B
.eh_frame:00000000000264A7                 db  0Eh
.eh_frame:00000000000264A8                 db  18h
.eh_frame:00000000000264A9                 db  8Eh
.eh_frame:00000000000264AA                 db    3
.eh_frame:00000000000264AB                 db  42h ; B
.eh_frame:00000000000264AC                 db  0Eh
.eh_frame:00000000000264AD                 db  20h
.eh_frame:00000000000264AE                 db  8Dh
.eh_frame:00000000000264AF                 db    4
.eh_frame:00000000000264B0                 db  42h ; B
.eh_frame:00000000000264B1                 db  0Eh
.eh_frame:00000000000264B2                 db  28h ; (
.eh_frame:00000000000264B3                 db  8Ch
.eh_frame:00000000000264B4                 db    5
.eh_frame:00000000000264B5                 db  41h ; A
.eh_frame:00000000000264B6                 db  0Eh
.eh_frame:00000000000264B7                 db  30h ; 0
.eh_frame:00000000000264B8                 db  86h
.eh_frame:00000000000264B9                 db    6
.eh_frame:00000000000264BA                 db  41h ; A
.eh_frame:00000000000264BB                 db  0Eh
.eh_frame:00000000000264BC                 db  38h ; 8
.eh_frame:00000000000264BD                 db  83h
.eh_frame:00000000000264BE                 db    7
.eh_frame:00000000000264BF                 db  44h ; D
.eh_frame:00000000000264C0                 db  0Eh
.eh_frame:00000000000264C1                 db  60h ; `
.eh_frame:00000000000264C2                 db    2
.eh_frame:00000000000264C3                 db 0D8h
.eh_frame:00000000000264C4                 db  0Ah
.eh_frame:00000000000264C5                 db  0Eh
.eh_frame:00000000000264C6                 db  38h ; 8
.eh_frame:00000000000264C7                 db  41h ; A
.eh_frame:00000000000264C8                 db  0Eh
.eh_frame:00000000000264C9                 db  30h ; 0
.eh_frame:00000000000264CA                 db  41h ; A
.eh_frame:00000000000264CB                 db  0Eh
.eh_frame:00000000000264CC                 db  28h ; (
.eh_frame:00000000000264CD                 db  42h ; B
.eh_frame:00000000000264CE                 db  0Eh
.eh_frame:00000000000264CF                 db  20h
.eh_frame:00000000000264D0                 db  42h ; B
.eh_frame:00000000000264D1                 db  0Eh
.eh_frame:00000000000264D2                 db  18h
.eh_frame:00000000000264D3                 db  42h ; B
.eh_frame:00000000000264D4                 db  0Eh
.eh_frame:00000000000264D5                 db  10h
.eh_frame:00000000000264D6                 db  42h ; B
.eh_frame:00000000000264D7                 db  0Eh
.eh_frame:00000000000264D8                 db    8
.eh_frame:00000000000264D9                 db  41h ; A
.eh_frame:00000000000264DA                 db  0Bh
.eh_frame:00000000000264DB                 db    0
.eh_frame:00000000000264DC                 db  40h ; @
.eh_frame:00000000000264DD                 db    0
.eh_frame:00000000000264DE                 db    0
.eh_frame:00000000000264DF                 db    0
.eh_frame:00000000000264E0                 db 0B8h
.eh_frame:00000000000264E1                 db  2Ah ; *
.eh_frame:00000000000264E2                 db    0
.eh_frame:00000000000264E3                 db    0
.eh_frame:00000000000264E4                 db  9Ch
.eh_frame:00000000000264E5                 db 0DFh
.eh_frame:00000000000264E6                 db 0FEh
.eh_frame:00000000000264E7                 db 0FFh
.eh_frame:00000000000264E8                 db 0E6h
.eh_frame:00000000000264E9                 db    0
.eh_frame:00000000000264EA                 db    0
.eh_frame:00000000000264EB                 db    0
.eh_frame:00000000000264EC                 db    0
.eh_frame:00000000000264ED                 db  41h ; A
.eh_frame:00000000000264EE                 db  0Eh
.eh_frame:00000000000264EF                 db  10h
.eh_frame:00000000000264F0                 db  86h
.eh_frame:00000000000264F1                 db    2
.eh_frame:00000000000264F2                 db  41h ; A
.eh_frame:00000000000264F3                 db  0Eh
.eh_frame:00000000000264F4                 db  18h
.eh_frame:00000000000264F5                 db  83h
.eh_frame:00000000000264F6                 db    3
.eh_frame:00000000000264F7                 db  47h ; G
.eh_frame:00000000000264F8                 db  0Eh
.eh_frame:00000000000264F9                 db  20h
.eh_frame:00000000000264FA                 db    2
.eh_frame:00000000000264FB                 db  4Dh ; M
.eh_frame:00000000000264FC                 db  0Ah
.eh_frame:00000000000264FD                 db  0Eh
.eh_frame:00000000000264FE                 db  18h
.eh_frame:00000000000264FF                 db  41h ; A
.eh_frame:0000000000026500                 db  0Eh
.eh_frame:0000000000026501                 db  10h
.eh_frame:0000000000026502                 db  41h ; A
.eh_frame:0000000000026503                 db  0Eh
.eh_frame:0000000000026504                 db    8
.eh_frame:0000000000026505                 db  48h ; H
.eh_frame:0000000000026506                 db  0Bh
.eh_frame:0000000000026507                 db  47h ; G
.eh_frame:0000000000026508                 db  0Ah
.eh_frame:0000000000026509                 db  0Eh
.eh_frame:000000000002650A                 db  18h
.eh_frame:000000000002650B                 db  41h ; A
.eh_frame:000000000002650C                 db  0Eh
.eh_frame:000000000002650D                 db  10h
.eh_frame:000000000002650E                 db  41h ; A
.eh_frame:000000000002650F                 db  0Eh
.eh_frame:0000000000026510                 db    8
.eh_frame:0000000000026511                 db  47h ; G
.eh_frame:0000000000026512                 db  0Bh
.eh_frame:0000000000026513                 db  7Ch ; |
.eh_frame:0000000000026514                 db  0Ah
.eh_frame:0000000000026515                 db  0Eh
.eh_frame:0000000000026516                 db  18h
.eh_frame:0000000000026517                 db  43h ; C
.eh_frame:0000000000026518                 db  0Eh
.eh_frame:0000000000026519                 db  10h
.eh_frame:000000000002651A                 db  41h ; A
.eh_frame:000000000002651B                 db  0Eh
.eh_frame:000000000002651C                 db    8
.eh_frame:000000000002651D                 db  48h ; H
.eh_frame:000000000002651E                 db  0Bh
.eh_frame:000000000002651F                 db    0
.eh_frame:0000000000026520                 db  24h ; $
.eh_frame:0000000000026521                 db    0
.eh_frame:0000000000026522                 db    0
.eh_frame:0000000000026523                 db    0
.eh_frame:0000000000026524                 db 0FCh
.eh_frame:0000000000026525                 db  2Ah ; *
.eh_frame:0000000000026526                 db    0
.eh_frame:0000000000026527                 db    0
.eh_frame:0000000000026528                 db  48h ; H
.eh_frame:0000000000026529                 db 0E0h
.eh_frame:000000000002652A                 db 0FEh
.eh_frame:000000000002652B                 db 0FFh
.eh_frame:000000000002652C                 db  10h
.eh_frame:000000000002652D                 db    1
.eh_frame:000000000002652E                 db    0
.eh_frame:000000000002652F                 db    0
.eh_frame:0000000000026530                 db    0
.eh_frame:0000000000026531                 db    2
.eh_frame:0000000000026532                 db  51h ; Q
.eh_frame:0000000000026533                 db  0Eh
.eh_frame:0000000000026534                 db  10h
.eh_frame:0000000000026535                 db  83h
.eh_frame:0000000000026536                 db    2
.eh_frame:0000000000026537                 db    2
.eh_frame:0000000000026538                 db  5Ch ; \
.eh_frame:0000000000026539                 db  0Eh
.eh_frame:000000000002653A                 db    8
.eh_frame:000000000002653B                 db  43h ; C
.eh_frame:000000000002653C                 db 0C3h
.eh_frame:000000000002653D                 db  78h ; x
.eh_frame:000000000002653E                 db  0Eh
.eh_frame:000000000002653F                 db  10h
.eh_frame:0000000000026540                 db  83h
.eh_frame:0000000000026541                 db    2
.eh_frame:0000000000026542                 db  4Ch ; L
.eh_frame:0000000000026543                 db  0Eh
.eh_frame:0000000000026544                 db    8
.eh_frame:0000000000026545                 db  44h ; D
.eh_frame:0000000000026546                 db 0C3h
.eh_frame:0000000000026547                 db    0
.eh_frame:0000000000026548                 db  34h ; 4
.eh_frame:0000000000026549                 db    0
.eh_frame:000000000002654A                 db    0
.eh_frame:000000000002654B                 db    0
.eh_frame:000000000002654C                 db  24h ; $
.eh_frame:000000000002654D                 db  2Bh ; +
.eh_frame:000000000002654E                 db    0
.eh_frame:000000000002654F                 db    0
.eh_frame:0000000000026550                 db  30h ; 0
.eh_frame:0000000000026551                 db 0E1h
.eh_frame:0000000000026552                 db 0FEh
.eh_frame:0000000000026553                 db 0FFh
.eh_frame:0000000000026554                 db 0CFh
.eh_frame:0000000000026555                 db    0
.eh_frame:0000000000026556                 db    0
.eh_frame:0000000000026557                 db    0
.eh_frame:0000000000026558                 db    0
.eh_frame:0000000000026559                 db  42h ; B
.eh_frame:000000000002655A                 db  0Eh
.eh_frame:000000000002655B                 db  10h
.eh_frame:000000000002655C                 db  8Ch
.eh_frame:000000000002655D                 db    2
.eh_frame:000000000002655E                 db  44h ; D
.eh_frame:000000000002655F                 db  0Eh
.eh_frame:0000000000026560                 db  18h
.eh_frame:0000000000026561                 db  86h
.eh_frame:0000000000026562                 db    3
.eh_frame:0000000000026563                 db  41h ; A
.eh_frame:0000000000026564                 db  0Eh
.eh_frame:0000000000026565                 db  20h
.eh_frame:0000000000026566                 db  83h
.eh_frame:0000000000026567                 db    4
.eh_frame:0000000000026568                 db    2
.eh_frame:0000000000026569                 db  9Fh
.eh_frame:000000000002656A                 db  0Ah
.eh_frame:000000000002656B                 db  0Eh
.eh_frame:000000000002656C                 db  18h
.eh_frame:000000000002656D                 db  41h ; A
.eh_frame:000000000002656E                 db  0Eh
.eh_frame:000000000002656F                 db  10h
.eh_frame:0000000000026570                 db  42h ; B
.eh_frame:0000000000026571                 db  0Eh
.eh_frame:0000000000026572                 db    8
.eh_frame:0000000000026573                 db  47h ; G
.eh_frame:0000000000026574                 db  0Bh
.eh_frame:0000000000026575                 db  59h ; Y
.eh_frame:0000000000026576                 db  0Eh
.eh_frame:0000000000026577                 db  18h
.eh_frame:0000000000026578                 db  43h ; C
.eh_frame:0000000000026579                 db  0Eh
.eh_frame:000000000002657A                 db  10h
.eh_frame:000000000002657B                 db  42h ; B
.eh_frame:000000000002657C                 db  0Eh
.eh_frame:000000000002657D                 db    8
.eh_frame:000000000002657E                 db    0
.eh_frame:000000000002657F                 db    0
.eh_frame:0000000000026580                 db  4Ch ; L
.eh_frame:0000000000026581                 db    0
.eh_frame:0000000000026582                 db    0
.eh_frame:0000000000026583                 db    0
.eh_frame:0000000000026584                 db  5Ch ; \
.eh_frame:0000000000026585                 db  2Bh ; +
.eh_frame:0000000000026586                 db    0
.eh_frame:0000000000026587                 db    0
.eh_frame:0000000000026588                 db 0C8h
.eh_frame:0000000000026589                 db 0E1h
.eh_frame:000000000002658A                 db 0FEh
.eh_frame:000000000002658B                 db 0FFh
.eh_frame:000000000002658C                 db  9Fh
.eh_frame:000000000002658D                 db    7
.eh_frame:000000000002658E                 db    0
.eh_frame:000000000002658F                 db    0
.eh_frame:0000000000026590                 db    0
.eh_frame:0000000000026591                 db  42h ; B
.eh_frame:0000000000026592                 db  0Eh
.eh_frame:0000000000026593                 db  10h
.eh_frame:0000000000026594                 db  8Fh
.eh_frame:0000000000026595                 db    2
.eh_frame:0000000000026596                 db  42h ; B
.eh_frame:0000000000026597                 db  0Eh
.eh_frame:0000000000026598                 db  18h
.eh_frame:0000000000026599                 db  8Eh
.eh_frame:000000000002659A                 db    3
.eh_frame:000000000002659B                 db  45h ; E
.eh_frame:000000000002659C                 db  0Eh
.eh_frame:000000000002659D                 db  20h
.eh_frame:000000000002659E                 db  8Dh
.eh_frame:000000000002659F                 db    4
.eh_frame:00000000000265A0                 db  42h ; B
.eh_frame:00000000000265A1                 db  0Eh
.eh_frame:00000000000265A2                 db  28h ; (
.eh_frame:00000000000265A3                 db  8Ch
.eh_frame:00000000000265A4                 db    5
.eh_frame:00000000000265A5                 db  44h ; D
.eh_frame:00000000000265A6                 db  0Eh
.eh_frame:00000000000265A7                 db  30h ; 0
.eh_frame:00000000000265A8                 db  86h
.eh_frame:00000000000265A9                 db    6
.eh_frame:00000000000265AA                 db  41h ; A
.eh_frame:00000000000265AB                 db  0Eh
.eh_frame:00000000000265AC                 db  38h ; 8
.eh_frame:00000000000265AD                 db  83h
.eh_frame:00000000000265AE                 db    7
.eh_frame:00000000000265AF                 db  4Ah ; J
.eh_frame:00000000000265B0                 db  0Eh
.eh_frame:00000000000265B1                 db  80h
.eh_frame:00000000000265B2                 db    1
.eh_frame:00000000000265B3                 db    3
.eh_frame:00000000000265B4                 db  3Bh ; ;
.eh_frame:00000000000265B5                 db    1
.eh_frame:00000000000265B6                 db  0Ah
.eh_frame:00000000000265B7                 db  0Eh
.eh_frame:00000000000265B8                 db  38h ; 8
.eh_frame:00000000000265B9                 db  41h ; A
.eh_frame:00000000000265BA                 db  0Eh
.eh_frame:00000000000265BB                 db  30h ; 0
.eh_frame:00000000000265BC                 db  41h ; A
.eh_frame:00000000000265BD                 db  0Eh
.eh_frame:00000000000265BE                 db  28h ; (
.eh_frame:00000000000265BF                 db  42h ; B
.eh_frame:00000000000265C0                 db  0Eh
.eh_frame:00000000000265C1                 db  20h
.eh_frame:00000000000265C2                 db  42h ; B
.eh_frame:00000000000265C3                 db  0Eh
.eh_frame:00000000000265C4                 db  18h
.eh_frame:00000000000265C5                 db  42h ; B
.eh_frame:00000000000265C6                 db  0Eh
.eh_frame:00000000000265C7                 db  10h
.eh_frame:00000000000265C8                 db  42h ; B
.eh_frame:00000000000265C9                 db  0Eh
.eh_frame:00000000000265CA                 db    8
.eh_frame:00000000000265CB                 db  41h ; A
.eh_frame:00000000000265CC                 db  0Bh
.eh_frame:00000000000265CD                 db    0
.eh_frame:00000000000265CE                 db    0
.eh_frame:00000000000265CF                 db    0
.eh_frame:00000000000265D0                 db  4Ch ; L
.eh_frame:00000000000265D1                 db    0
.eh_frame:00000000000265D2                 db    0
.eh_frame:00000000000265D3                 db    0
.eh_frame:00000000000265D4                 db 0ACh
.eh_frame:00000000000265D5                 db  2Bh ; +
.eh_frame:00000000000265D6                 db    0
.eh_frame:00000000000265D7                 db    0
.eh_frame:00000000000265D8                 db  18h
.eh_frame:00000000000265D9                 db 0E9h
.eh_frame:00000000000265DA                 db 0FEh
.eh_frame:00000000000265DB                 db 0FFh
.eh_frame:00000000000265DC                 db  3Bh ; ;
.eh_frame:00000000000265DD                 db    2
.eh_frame:00000000000265DE                 db    0
.eh_frame:00000000000265DF                 db    0
.eh_frame:00000000000265E0                 db    0
.eh_frame:00000000000265E1                 db  42h ; B
.eh_frame:00000000000265E2                 db  0Eh
.eh_frame:00000000000265E3                 db  10h
.eh_frame:00000000000265E4                 db  8Fh
.eh_frame:00000000000265E5                 db    2
.eh_frame:00000000000265E6                 db  42h ; B
.eh_frame:00000000000265E7                 db  0Eh
.eh_frame:00000000000265E8                 db  18h
.eh_frame:00000000000265E9                 db  8Eh
.eh_frame:00000000000265EA                 db    3
.eh_frame:00000000000265EB                 db  45h ; E
.eh_frame:00000000000265EC                 db  0Eh
.eh_frame:00000000000265ED                 db  20h
.eh_frame:00000000000265EE                 db  8Dh
.eh_frame:00000000000265EF                 db    4
.eh_frame:00000000000265F0                 db  42h ; B
.eh_frame:00000000000265F1                 db  0Eh
.eh_frame:00000000000265F2                 db  28h ; (
.eh_frame:00000000000265F3                 db  8Ch
.eh_frame:00000000000265F4                 db    5
.eh_frame:00000000000265F5                 db  45h ; E
.eh_frame:00000000000265F6                 db  0Eh
.eh_frame:00000000000265F7                 db  30h ; 0
.eh_frame:00000000000265F8                 db  86h
.eh_frame:00000000000265F9                 db    6
.eh_frame:00000000000265FA                 db  41h ; A
.eh_frame:00000000000265FB                 db  0Eh
.eh_frame:00000000000265FC                 db  38h ; 8
.eh_frame:00000000000265FD                 db  83h
.eh_frame:00000000000265FE                 db    7
.eh_frame:00000000000265FF                 db  48h ; H
.eh_frame:0000000000026600                 db  0Eh
.eh_frame:0000000000026601                 db  80h
.eh_frame:0000000000026602                 db    1
.eh_frame:0000000000026603                 db    3
.eh_frame:0000000000026604                 db 0F3h
.eh_frame:0000000000026605                 db    1
.eh_frame:0000000000026606                 db  0Ah
.eh_frame:0000000000026607                 db  0Eh
.eh_frame:0000000000026608                 db  38h ; 8
.eh_frame:0000000000026609                 db  41h ; A
.eh_frame:000000000002660A                 db  0Eh
.eh_frame:000000000002660B                 db  30h ; 0
.eh_frame:000000000002660C                 db  41h ; A
.eh_frame:000000000002660D                 db  0Eh
.eh_frame:000000000002660E                 db  28h ; (
.eh_frame:000000000002660F                 db  42h ; B
.eh_frame:0000000000026610                 db  0Eh
.eh_frame:0000000000026611                 db  20h
.eh_frame:0000000000026612                 db  42h ; B
.eh_frame:0000000000026613                 db  0Eh
.eh_frame:0000000000026614                 db  18h
.eh_frame:0000000000026615                 db  42h ; B
.eh_frame:0000000000026616                 db  0Eh
.eh_frame:0000000000026617                 db  10h
.eh_frame:0000000000026618                 db  42h ; B
.eh_frame:0000000000026619                 db  0Eh
.eh_frame:000000000002661A                 db    8
.eh_frame:000000000002661B                 db  4Ah ; J
.eh_frame:000000000002661C                 db  0Bh
.eh_frame:000000000002661D                 db    0
.eh_frame:000000000002661E                 db    0
.eh_frame:000000000002661F                 db    0
.eh_frame:0000000000026620                 db  4Ch ; L
.eh_frame:0000000000026621                 db    0
.eh_frame:0000000000026622                 db    0
.eh_frame:0000000000026623                 db    0
.eh_frame:0000000000026624                 db 0FCh
.eh_frame:0000000000026625                 db  2Bh ; +
.eh_frame:0000000000026626                 db    0
.eh_frame:0000000000026627                 db    0
.eh_frame:0000000000026628                 db    8
.eh_frame:0000000000026629                 db 0EBh
.eh_frame:000000000002662A                 db 0FEh
.eh_frame:000000000002662B                 db 0FFh
.eh_frame:000000000002662C                 db  91h
.eh_frame:000000000002662D                 db  0Bh
.eh_frame:000000000002662E                 db    0
.eh_frame:000000000002662F                 db    0
.eh_frame:0000000000026630                 db    0
.eh_frame:0000000000026631                 db  42h ; B
.eh_frame:0000000000026632                 db  0Eh
.eh_frame:0000000000026633                 db  10h
.eh_frame:0000000000026634                 db  8Fh
.eh_frame:0000000000026635                 db    2
.eh_frame:0000000000026636                 db  42h ; B
.eh_frame:0000000000026637                 db  0Eh
.eh_frame:0000000000026638                 db  18h
.eh_frame:0000000000026639                 db  8Eh
.eh_frame:000000000002663A                 db    3
.eh_frame:000000000002663B                 db  45h ; E
.eh_frame:000000000002663C                 db  0Eh
.eh_frame:000000000002663D                 db  20h
.eh_frame:000000000002663E                 db  8Dh
.eh_frame:000000000002663F                 db    4
.eh_frame:0000000000026640                 db  42h ; B
.eh_frame:0000000000026641                 db  0Eh
.eh_frame:0000000000026642                 db  28h ; (
.eh_frame:0000000000026643                 db  8Ch
.eh_frame:0000000000026644                 db    5
.eh_frame:0000000000026645                 db  46h ; F
.eh_frame:0000000000026646                 db  0Eh
.eh_frame:0000000000026647                 db  30h ; 0
.eh_frame:0000000000026648                 db  86h
.eh_frame:0000000000026649                 db    6
.eh_frame:000000000002664A                 db  41h ; A
.eh_frame:000000000002664B                 db  0Eh
.eh_frame:000000000002664C                 db  38h ; 8
.eh_frame:000000000002664D                 db  83h
.eh_frame:000000000002664E                 db    7
.eh_frame:000000000002664F                 db  47h ; G
.eh_frame:0000000000026650                 db  0Eh
.eh_frame:0000000000026651                 db 0C0h
.eh_frame:0000000000026652                 db    2
.eh_frame:0000000000026653                 db    3
.eh_frame:0000000000026654                 db  17h
.eh_frame:0000000000026655                 db    4
.eh_frame:0000000000026656                 db  0Ah
.eh_frame:0000000000026657                 db  0Eh
.eh_frame:0000000000026658                 db  38h ; 8
.eh_frame:0000000000026659                 db  41h ; A
.eh_frame:000000000002665A                 db  0Eh
.eh_frame:000000000002665B                 db  30h ; 0
.eh_frame:000000000002665C                 db  41h ; A
.eh_frame:000000000002665D                 db  0Eh
.eh_frame:000000000002665E                 db  28h ; (
.eh_frame:000000000002665F                 db  42h ; B
.eh_frame:0000000000026660                 db  0Eh
.eh_frame:0000000000026661                 db  20h
.eh_frame:0000000000026662                 db  42h ; B
.eh_frame:0000000000026663                 db  0Eh
.eh_frame:0000000000026664                 db  18h
.eh_frame:0000000000026665                 db  42h ; B
.eh_frame:0000000000026666                 db  0Eh
.eh_frame:0000000000026667                 db  10h
.eh_frame:0000000000026668                 db  42h ; B
.eh_frame:0000000000026669                 db  0Eh
.eh_frame:000000000002666A                 db    8
.eh_frame:000000000002666B                 db  46h ; F
.eh_frame:000000000002666C                 db  0Bh
.eh_frame:000000000002666D                 db    0
.eh_frame:000000000002666E                 db    0
.eh_frame:000000000002666F                 db    0
.eh_frame:0000000000026670                 db  30h ; 0
.eh_frame:0000000000026671                 db    0
.eh_frame:0000000000026672                 db    0
.eh_frame:0000000000026673                 db    0
.eh_frame:0000000000026674                 db  4Ch ; L
.eh_frame:0000000000026675                 db  2Ch ; ,
.eh_frame:0000000000026676                 db    0
.eh_frame:0000000000026677                 db    0
.eh_frame:0000000000026678                 db  58h ; X
.eh_frame:0000000000026679                 db 0F6h
.eh_frame:000000000002667A                 db 0FEh
.eh_frame:000000000002667B                 db 0FFh
.eh_frame:000000000002667C                 db  87h
.eh_frame:000000000002667D                 db    0
.eh_frame:000000000002667E                 db    0
.eh_frame:000000000002667F                 db    0
.eh_frame:0000000000026680                 db    0
.eh_frame:0000000000026681                 db  47h ; G
.eh_frame:0000000000026682                 db  0Eh
.eh_frame:0000000000026683                 db  10h
.eh_frame:0000000000026684                 db  86h
.eh_frame:0000000000026685                 db    2
.eh_frame:0000000000026686                 db  41h ; A
.eh_frame:0000000000026687                 db  0Eh
.eh_frame:0000000000026688                 db  18h
.eh_frame:0000000000026689                 db  83h
.eh_frame:000000000002668A                 db    3
.eh_frame:000000000002668B                 db  4Ah ; J
.eh_frame:000000000002668C                 db  0Eh
.eh_frame:000000000002668D                 db  20h
.eh_frame:000000000002668E                 db    2
.eh_frame:000000000002668F                 db  4Eh ; N
.eh_frame:0000000000026690                 db  0Eh
.eh_frame:0000000000026691                 db  18h
.eh_frame:0000000000026692                 db  41h ; A
.eh_frame:0000000000026693                 db  0Eh
.eh_frame:0000000000026694                 db  10h
.eh_frame:0000000000026695                 db  41h ; A
.eh_frame:0000000000026696                 db  0Eh
.eh_frame:0000000000026697                 db    8
.eh_frame:0000000000026698                 db  46h ; F
.eh_frame:0000000000026699                 db 0C3h
.eh_frame:000000000002669A                 db 0C6h
.eh_frame:000000000002669B                 db  58h ; X
.eh_frame:000000000002669C                 db  0Eh
.eh_frame:000000000002669D                 db  20h
.eh_frame:000000000002669E                 db  83h
.eh_frame:000000000002669F                 db    3
.eh_frame:00000000000266A0                 db  86h
.eh_frame:00000000000266A1                 db    2
.eh_frame:00000000000266A2                 db    0
.eh_frame:00000000000266A3                 db    0
.eh_frame:00000000000266A4                 db  28h ; (
.eh_frame:00000000000266A5                 db    0
.eh_frame:00000000000266A6                 db    0
.eh_frame:00000000000266A7                 db    0
.eh_frame:00000000000266A8                 db  80h
.eh_frame:00000000000266A9                 db  2Ch ; ,
.eh_frame:00000000000266AA                 db    0
.eh_frame:00000000000266AB                 db    0
.eh_frame:00000000000266AC                 db 0B4h
.eh_frame:00000000000266AD                 db 0F6h
.eh_frame:00000000000266AE                 db 0FEh
.eh_frame:00000000000266AF                 db 0FFh
.eh_frame:00000000000266B0                 db  4Fh ; O
.eh_frame:00000000000266B1                 db    0
.eh_frame:00000000000266B2                 db    0
.eh_frame:00000000000266B3                 db    0
.eh_frame:00000000000266B4                 db    0
.eh_frame:00000000000266B5                 db  42h ; B
.eh_frame:00000000000266B6                 db  0Eh
.eh_frame:00000000000266B7                 db  10h
.eh_frame:00000000000266B8                 db  8Ch
.eh_frame:00000000000266B9                 db    2
.eh_frame:00000000000266BA                 db  41h ; A
.eh_frame:00000000000266BB                 db  0Eh
.eh_frame:00000000000266BC                 db  18h
.eh_frame:00000000000266BD                 db  86h
.eh_frame:00000000000266BE                 db    3
.eh_frame:00000000000266BF                 db  44h ; D
.eh_frame:00000000000266C0                 db  0Eh
.eh_frame:00000000000266C1                 db  20h
.eh_frame:00000000000266C2                 db  83h
.eh_frame:00000000000266C3                 db    4
.eh_frame:00000000000266C4                 db  7Ch ; |
.eh_frame:00000000000266C5                 db  0Eh
.eh_frame:00000000000266C6                 db  18h
.eh_frame:00000000000266C7                 db  45h ; E
.eh_frame:00000000000266C8                 db  0Eh
.eh_frame:00000000000266C9                 db  10h
.eh_frame:00000000000266CA                 db  42h ; B
.eh_frame:00000000000266CB                 db  0Eh
.eh_frame:00000000000266CC                 db    8
.eh_frame:00000000000266CD                 db    0
.eh_frame:00000000000266CE                 db    0
.eh_frame:00000000000266CF                 db    0
.eh_frame:00000000000266D0                 db  2Ch ; ,
.eh_frame:00000000000266D1                 db    0
.eh_frame:00000000000266D2                 db    0
.eh_frame:00000000000266D3                 db    0
.eh_frame:00000000000266D4                 db 0ACh
.eh_frame:00000000000266D5                 db  2Ch ; ,
.eh_frame:00000000000266D6                 db    0
.eh_frame:00000000000266D7                 db    0
.eh_frame:00000000000266D8                 db 0D8h
.eh_frame:00000000000266D9                 db 0F6h
.eh_frame:00000000000266DA                 db 0FEh
.eh_frame:00000000000266DB                 db 0FFh
.eh_frame:00000000000266DC                 db  94h
.eh_frame:00000000000266DD                 db    0
.eh_frame:00000000000266DE                 db    0
.eh_frame:00000000000266DF                 db    0
.eh_frame:00000000000266E0                 db    0
.eh_frame:00000000000266E1                 db  42h ; B
.eh_frame:00000000000266E2                 db  0Eh
.eh_frame:00000000000266E3                 db  10h
.eh_frame:00000000000266E4                 db  8Ch
.eh_frame:00000000000266E5                 db    2
.eh_frame:00000000000266E6                 db  41h ; A
.eh_frame:00000000000266E7                 db  0Eh
.eh_frame:00000000000266E8                 db  18h
.eh_frame:00000000000266E9                 db  86h
.eh_frame:00000000000266EA                 db    3
.eh_frame:00000000000266EB                 db  41h ; A
.eh_frame:00000000000266EC                 db  0Eh
.eh_frame:00000000000266ED                 db  20h
.eh_frame:00000000000266EE                 db  83h
.eh_frame:00000000000266EF                 db    4
.eh_frame:00000000000266F0                 db    2
.eh_frame:00000000000266F1                 db  6Dh ; m
.eh_frame:00000000000266F2                 db  0Ah
.eh_frame:00000000000266F3                 db  0Eh
.eh_frame:00000000000266F4                 db  18h
.eh_frame:00000000000266F5                 db  41h ; A
.eh_frame:00000000000266F6                 db  0Eh
.eh_frame:00000000000266F7                 db  10h
.eh_frame:00000000000266F8                 db  42h ; B
.eh_frame:00000000000266F9                 db  0Eh
.eh_frame:00000000000266FA                 db    8
.eh_frame:00000000000266FB                 db  41h ; A
.eh_frame:00000000000266FC                 db  0Bh
.eh_frame:00000000000266FD                 db    0
.eh_frame:00000000000266FE                 db    0
.eh_frame:00000000000266FF                 db    0
.eh_frame:0000000000026700                 db  30h ; 0
.eh_frame:0000000000026701                 db    0
.eh_frame:0000000000026702                 db    0
.eh_frame:0000000000026703                 db    0
.eh_frame:0000000000026704                 db 0DCh
.eh_frame:0000000000026705                 db  2Ch ; ,
.eh_frame:0000000000026706                 db    0
.eh_frame:0000000000026707                 db    0
.eh_frame:0000000000026708                 db  48h ; H
.eh_frame:0000000000026709                 db 0F7h
.eh_frame:000000000002670A                 db 0FEh
.eh_frame:000000000002670B                 db 0FFh
.eh_frame:000000000002670C                 db  4Ch ; L
.eh_frame:000000000002670D                 db    0
.eh_frame:000000000002670E                 db    0
.eh_frame:000000000002670F                 db    0
.eh_frame:0000000000026710                 db    0
.eh_frame:0000000000026711                 db  41h ; A
.eh_frame:0000000000026712                 db  0Eh
.eh_frame:0000000000026713                 db  10h
.eh_frame:0000000000026714                 db  86h
.eh_frame:0000000000026715                 db    2
.eh_frame:0000000000026716                 db  41h ; A
.eh_frame:0000000000026717                 db  0Eh
.eh_frame:0000000000026718                 db  18h
.eh_frame:0000000000026719                 db  83h
.eh_frame:000000000002671A                 db    3
.eh_frame:000000000002671B                 db  4Dh ; M
.eh_frame:000000000002671C                 db  0Eh
.eh_frame:000000000002671D                 db  20h
.eh_frame:000000000002671E                 db  67h ; g
.eh_frame:000000000002671F                 db  0Ah
.eh_frame:0000000000026720                 db  0Eh
.eh_frame:0000000000026721                 db  18h
.eh_frame:0000000000026722                 db  43h ; C
.eh_frame:0000000000026723                 db  0Eh
.eh_frame:0000000000026724                 db  10h
.eh_frame:0000000000026725                 db  41h ; A
.eh_frame:0000000000026726                 db  0Eh
.eh_frame:0000000000026727                 db    8
.eh_frame:0000000000026728                 db  46h ; F
.eh_frame:0000000000026729                 db  0Bh
.eh_frame:000000000002672A                 db  44h ; D
.eh_frame:000000000002672B                 db  0Eh
.eh_frame:000000000002672C                 db  18h
.eh_frame:000000000002672D                 db  46h ; F
.eh_frame:000000000002672E                 db  0Eh
.eh_frame:000000000002672F                 db  10h
.eh_frame:0000000000026730                 db  41h ; A
.eh_frame:0000000000026731                 db  0Eh
.eh_frame:0000000000026732                 db    8
.eh_frame:0000000000026733                 db    0
.eh_frame:0000000000026734                 db  40h ; @
.eh_frame:0000000000026735                 db    0
.eh_frame:0000000000026736                 db    0
.eh_frame:0000000000026737                 db    0
.eh_frame:0000000000026738                 db  10h
.eh_frame:0000000000026739                 db  2Dh ; -
.eh_frame:000000000002673A                 db    0
.eh_frame:000000000002673B                 db    0
.eh_frame:000000000002673C                 db  64h ; d
.eh_frame:000000000002673D                 db 0F7h
.eh_frame:000000000002673E                 db 0FEh
.eh_frame:000000000002673F                 db 0FFh
.eh_frame:0000000000026740                 db  0Dh
.eh_frame:0000000000026741                 db    8
.eh_frame:0000000000026742                 db    0
.eh_frame:0000000000026743                 db    0
.eh_frame:0000000000026744                 db    0
.eh_frame:0000000000026745                 db  42h ; B
.eh_frame:0000000000026746                 db  0Eh
.eh_frame:0000000000026747                 db  10h
.eh_frame:0000000000026748                 db  8Eh
.eh_frame:0000000000026749                 db    2
.eh_frame:000000000002674A                 db  42h ; B
.eh_frame:000000000002674B                 db  0Eh
.eh_frame:000000000002674C                 db  18h
.eh_frame:000000000002674D                 db  8Dh
.eh_frame:000000000002674E                 db    3
.eh_frame:000000000002674F                 db  45h ; E
.eh_frame:0000000000026750                 db  0Eh
.eh_frame:0000000000026751                 db  20h
.eh_frame:0000000000026752                 db  8Ch
.eh_frame:0000000000026753                 db    4
.eh_frame:0000000000026754                 db  41h ; A
.eh_frame:0000000000026755                 db  0Eh
.eh_frame:0000000000026756                 db  28h ; (
.eh_frame:0000000000026757                 db  86h
.eh_frame:0000000000026758                 db    5
.eh_frame:0000000000026759                 db  44h ; D
.eh_frame:000000000002675A                 db  0Eh
.eh_frame:000000000002675B                 db  30h ; 0
.eh_frame:000000000002675C                 db  83h
.eh_frame:000000000002675D                 db    6
.eh_frame:000000000002675E                 db  4Ah ; J
.eh_frame:000000000002675F                 db  0Eh
.eh_frame:0000000000026760                 db  40h ; @
.eh_frame:0000000000026761                 db    2
.eh_frame:0000000000026762                 db 0D2h
.eh_frame:0000000000026763                 db  0Ah
.eh_frame:0000000000026764                 db  0Eh
.eh_frame:0000000000026765                 db  30h ; 0
.eh_frame:0000000000026766                 db  41h ; A
.eh_frame:0000000000026767                 db  0Eh
.eh_frame:0000000000026768                 db  28h ; (
.eh_frame:0000000000026769                 db  41h ; A
.eh_frame:000000000002676A                 db  0Eh
.eh_frame:000000000002676B                 db  20h
.eh_frame:000000000002676C                 db  42h ; B
.eh_frame:000000000002676D                 db  0Eh
.eh_frame:000000000002676E                 db  18h
.eh_frame:000000000002676F                 db  42h ; B
.eh_frame:0000000000026770                 db  0Eh
.eh_frame:0000000000026771                 db  10h
.eh_frame:0000000000026772                 db  42h ; B
.eh_frame:0000000000026773                 db  0Eh
.eh_frame:0000000000026774                 db    8
.eh_frame:0000000000026775                 db  46h ; F
.eh_frame:0000000000026776                 db  0Bh
.eh_frame:0000000000026777                 db    0
.eh_frame:0000000000026778                 db  5Ch ; \
.eh_frame:0000000000026779                 db    0
.eh_frame:000000000002677A                 db    0
.eh_frame:000000000002677B                 db    0
.eh_frame:000000000002677C                 db  54h ; T
.eh_frame:000000000002677D                 db  2Dh ; -
.eh_frame:000000000002677E                 db    0
.eh_frame:000000000002677F                 db    0
.eh_frame:0000000000026780                 db  30h ; 0
.eh_frame:0000000000026781                 db 0FFh
.eh_frame:0000000000026782                 db 0FEh
.eh_frame:0000000000026783                 db 0FFh
.eh_frame:0000000000026784                 db  6Ah ; j
.eh_frame:0000000000026785                 db    2
.eh_frame:0000000000026786                 db    0
.eh_frame:0000000000026787                 db    0
.eh_frame:0000000000026788                 db    0
.eh_frame:0000000000026789                 db  42h ; B
.eh_frame:000000000002678A                 db  0Eh
.eh_frame:000000000002678B                 db  10h
.eh_frame:000000000002678C                 db  8Fh
.eh_frame:000000000002678D                 db    2
.eh_frame:000000000002678E                 db  42h ; B
.eh_frame:000000000002678F                 db  0Eh
.eh_frame:0000000000026790                 db  18h
.eh_frame:0000000000026791                 db  8Eh
.eh_frame:0000000000026792                 db    3
.eh_frame:0000000000026793                 db  45h ; E
.eh_frame:0000000000026794                 db  0Eh
.eh_frame:0000000000026795                 db  20h
.eh_frame:0000000000026796                 db  8Dh
.eh_frame:0000000000026797                 db    4
.eh_frame:0000000000026798                 db  42h ; B
.eh_frame:0000000000026799                 db  0Eh
.eh_frame:000000000002679A                 db  28h ; (
.eh_frame:000000000002679B                 db  8Ch
.eh_frame:000000000002679C                 db    5
.eh_frame:000000000002679D                 db  44h ; D
.eh_frame:000000000002679E                 db  0Eh
.eh_frame:000000000002679F                 db  30h ; 0
.eh_frame:00000000000267A0                 db  86h
.eh_frame:00000000000267A1                 db    6
.eh_frame:00000000000267A2                 db  41h ; A
.eh_frame:00000000000267A3                 db  0Eh
.eh_frame:00000000000267A4                 db  38h ; 8
.eh_frame:00000000000267A5                 db  83h
.eh_frame:00000000000267A6                 db    7
.eh_frame:00000000000267A7                 db  4Fh ; O
.eh_frame:00000000000267A8                 db  0Eh
.eh_frame:00000000000267A9                 db  90h
.eh_frame:00000000000267AA                 db    1
.eh_frame:00000000000267AB                 db    2
.eh_frame:00000000000267AC                 db  5Bh ; [
.eh_frame:00000000000267AD                 db  0Eh
.eh_frame:00000000000267AE                 db  98h
.eh_frame:00000000000267AF                 db    1
.eh_frame:00000000000267B0                 db  45h ; E
.eh_frame:00000000000267B1                 db  0Eh
.eh_frame:00000000000267B2                 db 0A0h
.eh_frame:00000000000267B3                 db    1
.eh_frame:00000000000267B4                 db  6Ch ; l
.eh_frame:00000000000267B5                 db  0Eh
.eh_frame:00000000000267B6                 db  98h
.eh_frame:00000000000267B7                 db    1
.eh_frame:00000000000267B8                 db  41h ; A
.eh_frame:00000000000267B9                 db  0Eh
.eh_frame:00000000000267BA                 db  90h
.eh_frame:00000000000267BB                 db    1
.eh_frame:00000000000267BC                 db    3
.eh_frame:00000000000267BD                 db  31h ; 1
.eh_frame:00000000000267BE                 db    1
.eh_frame:00000000000267BF                 db  0Ah
.eh_frame:00000000000267C0                 db  0Eh
.eh_frame:00000000000267C1                 db  38h ; 8
.eh_frame:00000000000267C2                 db  41h ; A
.eh_frame:00000000000267C3                 db  0Eh
.eh_frame:00000000000267C4                 db  30h ; 0
.eh_frame:00000000000267C5                 db  41h ; A
.eh_frame:00000000000267C6                 db  0Eh
.eh_frame:00000000000267C7                 db  28h ; (
.eh_frame:00000000000267C8                 db  42h ; B
.eh_frame:00000000000267C9                 db  0Eh
.eh_frame:00000000000267CA                 db  20h
.eh_frame:00000000000267CB                 db  42h ; B
.eh_frame:00000000000267CC                 db  0Eh
.eh_frame:00000000000267CD                 db  18h
.eh_frame:00000000000267CE                 db  42h ; B
.eh_frame:00000000000267CF                 db  0Eh
.eh_frame:00000000000267D0                 db  10h
.eh_frame:00000000000267D1                 db  42h ; B
.eh_frame:00000000000267D2                 db  0Eh
.eh_frame:00000000000267D3                 db    8
.eh_frame:00000000000267D4                 db  49h ; I
.eh_frame:00000000000267D5                 db  0Bh
.eh_frame:00000000000267D6                 db    0
.eh_frame:00000000000267D7                 db    0
.eh_frame:00000000000267D8                 db  4Ch ; L
.eh_frame:00000000000267D9                 db    0
.eh_frame:00000000000267DA                 db    0
.eh_frame:00000000000267DB                 db    0
.eh_frame:00000000000267DC                 db 0B4h
.eh_frame:00000000000267DD                 db  2Dh ; -
.eh_frame:00000000000267DE                 db    0
.eh_frame:00000000000267DF                 db    0
.eh_frame:00000000000267E0                 db  40h ; @
.eh_frame:00000000000267E1                 db    1
.eh_frame:00000000000267E2                 db 0FFh
.eh_frame:00000000000267E3                 db 0FFh
.eh_frame:00000000000267E4                 db  27h ; '
.eh_frame:00000000000267E5                 db    5
.eh_frame:00000000000267E6                 db    0
.eh_frame:00000000000267E7                 db    0
.eh_frame:00000000000267E8                 db    0
.eh_frame:00000000000267E9                 db  42h ; B
.eh_frame:00000000000267EA                 db  0Eh
.eh_frame:00000000000267EB                 db  10h
.eh_frame:00000000000267EC                 db  8Fh
.eh_frame:00000000000267ED                 db    2
.eh_frame:00000000000267EE                 db  42h ; B
.eh_frame:00000000000267EF                 db  0Eh
.eh_frame:00000000000267F0                 db  18h
.eh_frame:00000000000267F1                 db  8Eh
.eh_frame:00000000000267F2                 db    3
.eh_frame:00000000000267F3                 db  45h ; E
.eh_frame:00000000000267F4                 db  0Eh
.eh_frame:00000000000267F5                 db  20h
.eh_frame:00000000000267F6                 db  8Dh
.eh_frame:00000000000267F7                 db    4
.eh_frame:00000000000267F8                 db  42h ; B
.eh_frame:00000000000267F9                 db  0Eh
.eh_frame:00000000000267FA                 db  28h ; (
.eh_frame:00000000000267FB                 db  8Ch
.eh_frame:00000000000267FC                 db    5
.eh_frame:00000000000267FD                 db  41h ; A
.eh_frame:00000000000267FE                 db  0Eh
.eh_frame:00000000000267FF                 db  30h ; 0
.eh_frame:0000000000026800                 db  86h
.eh_frame:0000000000026801                 db    6
.eh_frame:0000000000026802                 db  41h ; A
.eh_frame:0000000000026803                 db  0Eh
.eh_frame:0000000000026804                 db  38h ; 8
.eh_frame:0000000000026805                 db  83h
.eh_frame:0000000000026806                 db    7
.eh_frame:0000000000026807                 db  4Ch ; L
.eh_frame:0000000000026808                 db  0Eh
.eh_frame:0000000000026809                 db 0B0h
.eh_frame:000000000002680A                 db    3
.eh_frame:000000000002680B                 db    3
.eh_frame:000000000002680C                 db  82h
.eh_frame:000000000002680D                 db    4
.eh_frame:000000000002680E                 db  0Ah
.eh_frame:000000000002680F                 db  0Eh
.eh_frame:0000000000026810                 db  38h ; 8
.eh_frame:0000000000026811                 db  41h ; A
.eh_frame:0000000000026812                 db  0Eh
.eh_frame:0000000000026813                 db  30h ; 0
.eh_frame:0000000000026814                 db  41h ; A
.eh_frame:0000000000026815                 db  0Eh
.eh_frame:0000000000026816                 db  28h ; (
.eh_frame:0000000000026817                 db  42h ; B
.eh_frame:0000000000026818                 db  0Eh
.eh_frame:0000000000026819                 db  20h
.eh_frame:000000000002681A                 db  42h ; B
.eh_frame:000000000002681B                 db  0Eh
.eh_frame:000000000002681C                 db  18h
.eh_frame:000000000002681D                 db  42h ; B
.eh_frame:000000000002681E                 db  0Eh
.eh_frame:000000000002681F                 db  10h
.eh_frame:0000000000026820                 db  42h ; B
.eh_frame:0000000000026821                 db  0Eh
.eh_frame:0000000000026822                 db    8
.eh_frame:0000000000026823                 db  41h ; A
.eh_frame:0000000000026824                 db  0Bh
.eh_frame:0000000000026825                 db    0
.eh_frame:0000000000026826                 db    0
.eh_frame:0000000000026827                 db    0
.eh_frame:0000000000026828                 db  38h ; 8
.eh_frame:0000000000026829                 db    0
.eh_frame:000000000002682A                 db    0
.eh_frame:000000000002682B                 db    0
.eh_frame:000000000002682C                 db    4
.eh_frame:000000000002682D                 db  2Eh ; .
.eh_frame:000000000002682E                 db    0
.eh_frame:000000000002682F                 db    0
.eh_frame:0000000000026830                 db  20h
.eh_frame:0000000000026831                 db    6
.eh_frame:0000000000026832                 db 0FFh
.eh_frame:0000000000026833                 db 0FFh
.eh_frame:0000000000026834                 db  54h ; T
.eh_frame:0000000000026835                 db    2
.eh_frame:0000000000026836                 db    0
.eh_frame:0000000000026837                 db    0
.eh_frame:0000000000026838                 db    0
.eh_frame:0000000000026839                 db  46h ; F
.eh_frame:000000000002683A                 db  0Eh
.eh_frame:000000000002683B                 db  10h
.eh_frame:000000000002683C                 db  8Dh
.eh_frame:000000000002683D                 db    2
.eh_frame:000000000002683E                 db  42h ; B
.eh_frame:000000000002683F                 db  0Eh
.eh_frame:0000000000026840                 db  18h
.eh_frame:0000000000026841                 db  8Ch
.eh_frame:0000000000026842                 db    3
.eh_frame:0000000000026843                 db  45h ; E
.eh_frame:0000000000026844                 db  0Eh
.eh_frame:0000000000026845                 db  20h
.eh_frame:0000000000026846                 db  86h
.eh_frame:0000000000026847                 db    4
.eh_frame:0000000000026848                 db  41h ; A
.eh_frame:0000000000026849                 db  0Eh
.eh_frame:000000000002684A                 db  28h ; (
.eh_frame:000000000002684B                 db  83h
.eh_frame:000000000002684C                 db    5
.eh_frame:000000000002684D                 db  44h ; D
.eh_frame:000000000002684E                 db  0Eh
.eh_frame:000000000002684F                 db  30h ; 0
.eh_frame:0000000000026850                 db    2
.eh_frame:0000000000026851                 db 0E4h
.eh_frame:0000000000026852                 db  0Ah
.eh_frame:0000000000026853                 db  0Eh
.eh_frame:0000000000026854                 db  28h ; (
.eh_frame:0000000000026855                 db  43h ; C
.eh_frame:0000000000026856                 db  0Eh
.eh_frame:0000000000026857                 db  20h
.eh_frame:0000000000026858                 db  41h ; A
.eh_frame:0000000000026859                 db  0Eh
.eh_frame:000000000002685A                 db  18h
.eh_frame:000000000002685B                 db  42h ; B
.eh_frame:000000000002685C                 db  0Eh
.eh_frame:000000000002685D                 db  10h
.eh_frame:000000000002685E                 db  42h ; B
.eh_frame:000000000002685F                 db  0Eh
.eh_frame:0000000000026860                 db    8
.eh_frame:0000000000026861                 db  42h ; B
.eh_frame:0000000000026862                 db  0Bh
.eh_frame:0000000000026863                 db    0
.eh_frame:0000000000026864                 db  4Ch ; L
.eh_frame:0000000000026865                 db    0
.eh_frame:0000000000026866                 db    0
.eh_frame:0000000000026867                 db    0
.eh_frame:0000000000026868                 db  40h ; @
.eh_frame:0000000000026869                 db  2Eh ; .
.eh_frame:000000000002686A                 db    0
.eh_frame:000000000002686B                 db    0
.eh_frame:000000000002686C                 db  44h ; D
.eh_frame:000000000002686D                 db    8
.eh_frame:000000000002686E                 db 0FFh
.eh_frame:000000000002686F                 db 0FFh
.eh_frame:0000000000026870                 db  51h ; Q
.eh_frame:0000000000026871                 db    7
.eh_frame:0000000000026872                 db    0
.eh_frame:0000000000026873                 db    0
.eh_frame:0000000000026874                 db    0
.eh_frame:0000000000026875                 db  42h ; B
.eh_frame:0000000000026876                 db  0Eh
.eh_frame:0000000000026877                 db  10h
.eh_frame:0000000000026878                 db  8Fh
.eh_frame:0000000000026879                 db    2
.eh_frame:000000000002687A                 db  42h ; B
.eh_frame:000000000002687B                 db  0Eh
.eh_frame:000000000002687C                 db  18h
.eh_frame:000000000002687D                 db  8Eh
.eh_frame:000000000002687E                 db    3
.eh_frame:000000000002687F                 db  45h ; E
.eh_frame:0000000000026880                 db  0Eh
.eh_frame:0000000000026881                 db  20h
.eh_frame:0000000000026882                 db  8Dh
.eh_frame:0000000000026883                 db    4
.eh_frame:0000000000026884                 db  42h ; B
.eh_frame:0000000000026885                 db  0Eh
.eh_frame:0000000000026886                 db  28h ; (
.eh_frame:0000000000026887                 db  8Ch
.eh_frame:0000000000026888                 db    5
.eh_frame:0000000000026889                 db  41h ; A
.eh_frame:000000000002688A                 db  0Eh
.eh_frame:000000000002688B                 db  30h ; 0
.eh_frame:000000000002688C                 db  86h
.eh_frame:000000000002688D                 db    6
.eh_frame:000000000002688E                 db  41h ; A
.eh_frame:000000000002688F                 db  0Eh
.eh_frame:0000000000026890                 db  38h ; 8
.eh_frame:0000000000026891                 db  83h
.eh_frame:0000000000026892                 db    7
.eh_frame:0000000000026893                 db  4Dh ; M
.eh_frame:0000000000026894                 db  0Eh
.eh_frame:0000000000026895                 db  90h
.eh_frame:0000000000026896                 db    2
.eh_frame:0000000000026897                 db    3
.eh_frame:0000000000026898                 db  88h
.eh_frame:0000000000026899                 db    5
.eh_frame:000000000002689A                 db  0Ah
.eh_frame:000000000002689B                 db  0Eh
.eh_frame:000000000002689C                 db  38h ; 8
.eh_frame:000000000002689D                 db  41h ; A
.eh_frame:000000000002689E                 db  0Eh
.eh_frame:000000000002689F                 db  30h ; 0
.eh_frame:00000000000268A0                 db  41h ; A
.eh_frame:00000000000268A1                 db  0Eh
.eh_frame:00000000000268A2                 db  28h ; (
.eh_frame:00000000000268A3                 db  42h ; B
.eh_frame:00000000000268A4                 db  0Eh
.eh_frame:00000000000268A5                 db  20h
.eh_frame:00000000000268A6                 db  42h ; B
.eh_frame:00000000000268A7                 db  0Eh
.eh_frame:00000000000268A8                 db  18h
.eh_frame:00000000000268A9                 db  42h ; B
.eh_frame:00000000000268AA                 db  0Eh
.eh_frame:00000000000268AB                 db  10h
.eh_frame:00000000000268AC                 db  42h ; B
.eh_frame:00000000000268AD                 db  0Eh
.eh_frame:00000000000268AE                 db    8
.eh_frame:00000000000268AF                 db  44h ; D
.eh_frame:00000000000268B0                 db  0Bh
.eh_frame:00000000000268B1                 db    0
.eh_frame:00000000000268B2                 db    0
.eh_frame:00000000000268B3                 db    0
.eh_frame:00000000000268B4                 db  2Ch ; ,
.eh_frame:00000000000268B5                 db    0
.eh_frame:00000000000268B6                 db    0
.eh_frame:00000000000268B7                 db    0
.eh_frame:00000000000268B8                 db  90h
.eh_frame:00000000000268B9                 db  2Eh ; .
.eh_frame:00000000000268BA                 db    0
.eh_frame:00000000000268BB                 db    0
.eh_frame:00000000000268BC                 db  54h ; T
.eh_frame:00000000000268BD                 db  0Fh
.eh_frame:00000000000268BE                 db 0FFh
.eh_frame:00000000000268BF                 db 0FFh
.eh_frame:00000000000268C0                 db 0EAh
.eh_frame:00000000000268C1                 db    8
.eh_frame:00000000000268C2                 db    0
.eh_frame:00000000000268C3                 db    0
.eh_frame:00000000000268C4                 db    0
.eh_frame:00000000000268C5                 db  41h ; A
.eh_frame:00000000000268C6                 db  0Eh
.eh_frame:00000000000268C7                 db  10h
.eh_frame:00000000000268C8                 db  86h
.eh_frame:00000000000268C9                 db    2
.eh_frame:00000000000268CA                 db  43h ; C
.eh_frame:00000000000268CB                 db  0Dh
.eh_frame:00000000000268CC                 db    6
.eh_frame:00000000000268CD                 db  48h ; H
.eh_frame:00000000000268CE                 db  8Fh
.eh_frame:00000000000268CF                 db    3
.eh_frame:00000000000268D0                 db  8Eh
.eh_frame:00000000000268D1                 db    4
.eh_frame:00000000000268D2                 db  8Dh
.eh_frame:00000000000268D3                 db    5
.eh_frame:00000000000268D4                 db  8Ch
.eh_frame:00000000000268D5                 db    6
.eh_frame:00000000000268D6                 db  4Eh ; N
.eh_frame:00000000000268D7                 db  83h
.eh_frame:00000000000268D8                 db    7
.eh_frame:00000000000268D9                 db    3
.eh_frame:00000000000268DA                 db  20h
.eh_frame:00000000000268DB                 db    7
.eh_frame:00000000000268DC                 db  0Ah
.eh_frame:00000000000268DD                 db  0Ch
.eh_frame:00000000000268DE                 db    7
.eh_frame:00000000000268DF                 db    8
.eh_frame:00000000000268E0                 db  41h ; A
.eh_frame:00000000000268E1                 db  0Bh
.eh_frame:00000000000268E2                 db    0
.eh_frame:00000000000268E3                 db    0
.eh_frame:00000000000268E4                 db  68h ; h
.eh_frame:00000000000268E5                 db    0
.eh_frame:00000000000268E6                 db    0
.eh_frame:00000000000268E7                 db    0
.eh_frame:00000000000268E8                 db 0C0h
.eh_frame:00000000000268E9                 db  2Eh ; .
.eh_frame:00000000000268EA                 db    0
.eh_frame:00000000000268EB                 db    0
.eh_frame:00000000000268EC                 db  14h
.eh_frame:00000000000268ED                 db  18h
.eh_frame:00000000000268EE                 db 0FFh
.eh_frame:00000000000268EF                 db 0FFh
.eh_frame:00000000000268F0                 db  96h
.eh_frame:00000000000268F1                 db    1
.eh_frame:00000000000268F2                 db    0
.eh_frame:00000000000268F3                 db    0
.eh_frame:00000000000268F4                 db    0
.eh_frame:00000000000268F5                 db  42h ; B
.eh_frame:00000000000268F6                 db  0Eh
.eh_frame:00000000000268F7                 db  10h
.eh_frame:00000000000268F8                 db  8Fh
.eh_frame:00000000000268F9                 db    2
.eh_frame:00000000000268FA                 db  42h ; B
.eh_frame:00000000000268FB                 db  0Eh
.eh_frame:00000000000268FC                 db  18h
.eh_frame:00000000000268FD                 db  8Eh
.eh_frame:00000000000268FE                 db    3
.eh_frame:00000000000268FF                 db  45h ; E
.eh_frame:0000000000026900                 db  0Eh
.eh_frame:0000000000026901                 db  20h
.eh_frame:0000000000026902                 db  8Dh
.eh_frame:0000000000026903                 db    4
.eh_frame:0000000000026904                 db  42h ; B
.eh_frame:0000000000026905                 db  0Eh
.eh_frame:0000000000026906                 db  28h ; (
.eh_frame:0000000000026907                 db  8Ch
.eh_frame:0000000000026908                 db    5
.eh_frame:0000000000026909                 db  44h ; D
.eh_frame:000000000002690A                 db  0Eh
.eh_frame:000000000002690B                 db  30h ; 0
.eh_frame:000000000002690C                 db  86h
.eh_frame:000000000002690D                 db    6
.eh_frame:000000000002690E                 db  41h ; A
.eh_frame:000000000002690F                 db  0Eh
.eh_frame:0000000000026910                 db  38h ; 8
.eh_frame:0000000000026911                 db  83h
.eh_frame:0000000000026912                 db    7
.eh_frame:0000000000026913                 db  51h ; Q
.eh_frame:0000000000026914                 db  0Eh
.eh_frame:0000000000026915                 db  58h ; X
.eh_frame:0000000000026916                 db  49h ; I
.eh_frame:0000000000026917                 db  0Eh
.eh_frame:0000000000026918                 db  60h ; `
.eh_frame:0000000000026919                 db  4Eh ; N
.eh_frame:000000000002691A                 db  0Eh
.eh_frame:000000000002691B                 db  58h ; X
.eh_frame:000000000002691C                 db  41h ; A
.eh_frame:000000000002691D                 db  0Eh
.eh_frame:000000000002691E                 db  50h ; P
.eh_frame:000000000002691F                 db  46h ; F
.eh_frame:0000000000026920                 db  0Ah
.eh_frame:0000000000026921                 db  0Eh
.eh_frame:0000000000026922                 db  38h ; 8
.eh_frame:0000000000026923                 db  41h ; A
.eh_frame:0000000000026924                 db  0Eh
.eh_frame:0000000000026925                 db  30h ; 0
.eh_frame:0000000000026926                 db  41h ; A
.eh_frame:0000000000026927                 db  0Eh
.eh_frame:0000000000026928                 db  28h ; (
.eh_frame:0000000000026929                 db  42h ; B
.eh_frame:000000000002692A                 db  0Eh
.eh_frame:000000000002692B                 db  20h
.eh_frame:000000000002692C                 db  42h ; B
.eh_frame:000000000002692D                 db  0Eh
.eh_frame:000000000002692E                 db  18h
.eh_frame:000000000002692F                 db  42h ; B
.eh_frame:0000000000026930                 db  0Eh
.eh_frame:0000000000026931                 db  10h
.eh_frame:0000000000026932                 db  42h ; B
.eh_frame:0000000000026933                 db  0Eh
.eh_frame:0000000000026934                 db    8
.eh_frame:0000000000026935                 db  47h ; G
.eh_frame:0000000000026936                 db  0Bh
.eh_frame:0000000000026937                 db    2
.eh_frame:0000000000026938                 db  97h
.eh_frame:0000000000026939                 db  0Ah
.eh_frame:000000000002693A                 db  0Eh
.eh_frame:000000000002693B                 db  38h ; 8
.eh_frame:000000000002693C                 db  44h ; D
.eh_frame:000000000002693D                 db  0Eh
.eh_frame:000000000002693E                 db  30h ; 0
.eh_frame:000000000002693F                 db  41h ; A
.eh_frame:0000000000026940                 db  0Eh
.eh_frame:0000000000026941                 db  28h ; (
.eh_frame:0000000000026942                 db  42h ; B
.eh_frame:0000000000026943                 db  0Eh
.eh_frame:0000000000026944                 db  20h
.eh_frame:0000000000026945                 db  42h ; B
.eh_frame:0000000000026946                 db  0Eh
.eh_frame:0000000000026947                 db  18h
.eh_frame:0000000000026948                 db  42h ; B
.eh_frame:0000000000026949                 db  0Eh
.eh_frame:000000000002694A                 db  10h
.eh_frame:000000000002694B                 db  42h ; B
.eh_frame:000000000002694C                 db  0Eh
.eh_frame:000000000002694D                 db    8
.eh_frame:000000000002694E                 db  4Ch ; L
.eh_frame:000000000002694F                 db  0Bh
.eh_frame:0000000000026950                 db  5Ch ; \
.eh_frame:0000000000026951                 db    0
.eh_frame:0000000000026952                 db    0
.eh_frame:0000000000026953                 db    0
.eh_frame:0000000000026954                 db  2Ch ; ,
.eh_frame:0000000000026955                 db  2Fh ; /
.eh_frame:0000000000026956                 db    0
.eh_frame:0000000000026957                 db    0
.eh_frame:0000000000026958                 db  48h ; H
.eh_frame:0000000000026959                 db  19h
.eh_frame:000000000002695A                 db 0FFh
.eh_frame:000000000002695B                 db 0FFh
.eh_frame:000000000002695C                 db 0E1h
.eh_frame:000000000002695D                 db    8
.eh_frame:000000000002695E                 db    0
.eh_frame:000000000002695F                 db    0
.eh_frame:0000000000026960                 db    0
.eh_frame:0000000000026961                 db  42h ; B
.eh_frame:0000000000026962                 db  0Eh
.eh_frame:0000000000026963                 db  10h
.eh_frame:0000000000026964                 db  8Fh
.eh_frame:0000000000026965                 db    2
.eh_frame:0000000000026966                 db  42h ; B
.eh_frame:0000000000026967                 db  0Eh
.eh_frame:0000000000026968                 db  18h
.eh_frame:0000000000026969                 db  8Eh
.eh_frame:000000000002696A                 db    3
.eh_frame:000000000002696B                 db  42h ; B
.eh_frame:000000000002696C                 db  0Eh
.eh_frame:000000000002696D                 db  20h
.eh_frame:000000000002696E                 db  8Dh
.eh_frame:000000000002696F                 db    4
.eh_frame:0000000000026970                 db  42h ; B
.eh_frame:0000000000026971                 db  0Eh
.eh_frame:0000000000026972                 db  28h ; (
.eh_frame:0000000000026973                 db  8Ch
.eh_frame:0000000000026974                 db    5
.eh_frame:0000000000026975                 db  41h ; A
.eh_frame:0000000000026976                 db  0Eh
.eh_frame:0000000000026977                 db  30h ; 0
.eh_frame:0000000000026978                 db  86h
.eh_frame:0000000000026979                 db    6
.eh_frame:000000000002697A                 db  41h ; A
.eh_frame:000000000002697B                 db  0Eh
.eh_frame:000000000002697C                 db  38h ; 8
.eh_frame:000000000002697D                 db  83h
.eh_frame:000000000002697E                 db    7
.eh_frame:000000000002697F                 db  47h ; G
.eh_frame:0000000000026980                 db  0Eh
.eh_frame:0000000000026981                 db 0F0h
.eh_frame:0000000000026982                 db    1
.eh_frame:0000000000026983                 db    3
.eh_frame:0000000000026984                 db  85h
.eh_frame:0000000000026985                 db    3
.eh_frame:0000000000026986                 db  0Ah
.eh_frame:0000000000026987                 db  0Eh
.eh_frame:0000000000026988                 db  38h ; 8
.eh_frame:0000000000026989                 db  41h ; A
.eh_frame:000000000002698A                 db  0Eh
.eh_frame:000000000002698B                 db  30h ; 0
.eh_frame:000000000002698C                 db  41h ; A
.eh_frame:000000000002698D                 db  0Eh
.eh_frame:000000000002698E                 db  28h ; (
.eh_frame:000000000002698F                 db  42h ; B
.eh_frame:0000000000026990                 db  0Eh
.eh_frame:0000000000026991                 db  20h
.eh_frame:0000000000026992                 db  42h ; B
.eh_frame:0000000000026993                 db  0Eh
.eh_frame:0000000000026994                 db  18h
.eh_frame:0000000000026995                 db  42h ; B
.eh_frame:0000000000026996                 db  0Eh
.eh_frame:0000000000026997                 db  10h
.eh_frame:0000000000026998                 db  42h ; B
.eh_frame:0000000000026999                 db  0Eh
.eh_frame:000000000002699A                 db    8
.eh_frame:000000000002699B                 db  48h ; H
.eh_frame:000000000002699C                 db  0Bh
.eh_frame:000000000002699D                 db    3
.eh_frame:000000000002699E                 db 0D8h
.eh_frame:000000000002699F                 db    2
.eh_frame:00000000000269A0                 db  0Eh
.eh_frame:00000000000269A1                 db 0F8h
.eh_frame:00000000000269A2                 db    1
.eh_frame:00000000000269A3                 db  42h ; B
.eh_frame:00000000000269A4                 db  0Eh
.eh_frame:00000000000269A5                 db  80h
.eh_frame:00000000000269A6                 db    2
.eh_frame:00000000000269A7                 db  4Fh ; O
.eh_frame:00000000000269A8                 db  0Eh
.eh_frame:00000000000269A9                 db 0F8h
.eh_frame:00000000000269AA                 db    1
.eh_frame:00000000000269AB                 db  44h ; D
.eh_frame:00000000000269AC                 db  0Eh
.eh_frame:00000000000269AD                 db 0F0h
.eh_frame:00000000000269AE                 db    1
.eh_frame:00000000000269AF                 db    0
.eh_frame:00000000000269B0                 db  48h ; H
.eh_frame:00000000000269B1                 db    0
.eh_frame:00000000000269B2                 db    0
.eh_frame:00000000000269B3                 db    0
.eh_frame:00000000000269B4                 db  8Ch
.eh_frame:00000000000269B5                 db  2Fh ; /
.eh_frame:00000000000269B6                 db    0
.eh_frame:00000000000269B7                 db    0
.eh_frame:00000000000269B8                 db 0D8h
.eh_frame:00000000000269B9                 db  21h ; !
.eh_frame:00000000000269BA                 db 0FFh
.eh_frame:00000000000269BB                 db 0FFh
.eh_frame:00000000000269BC                 db 0ECh
.eh_frame:00000000000269BD                 db    1
.eh_frame:00000000000269BE                 db    0
.eh_frame:00000000000269BF                 db    0
.eh_frame:00000000000269C0                 db    0
.eh_frame:00000000000269C1                 db  42h ; B
.eh_frame:00000000000269C2                 db  0Eh
.eh_frame:00000000000269C3                 db  10h
.eh_frame:00000000000269C4                 db  8Fh
.eh_frame:00000000000269C5                 db    2
.eh_frame:00000000000269C6                 db  42h ; B
.eh_frame:00000000000269C7                 db  0Eh
.eh_frame:00000000000269C8                 db  18h
.eh_frame:00000000000269C9                 db  8Eh
.eh_frame:00000000000269CA                 db    3
.eh_frame:00000000000269CB                 db  42h ; B
.eh_frame:00000000000269CC                 db  0Eh
.eh_frame:00000000000269CD                 db  20h
.eh_frame:00000000000269CE                 db  8Dh
.eh_frame:00000000000269CF                 db    4
.eh_frame:00000000000269D0                 db  42h ; B
.eh_frame:00000000000269D1                 db  0Eh
.eh_frame:00000000000269D2                 db  28h ; (
.eh_frame:00000000000269D3                 db  8Ch
.eh_frame:00000000000269D4                 db    5
.eh_frame:00000000000269D5                 db  44h ; D
.eh_frame:00000000000269D6                 db  0Eh
.eh_frame:00000000000269D7                 db  30h ; 0
.eh_frame:00000000000269D8                 db  86h
.eh_frame:00000000000269D9                 db    6
.eh_frame:00000000000269DA                 db  41h ; A
.eh_frame:00000000000269DB                 db  0Eh
.eh_frame:00000000000269DC                 db  38h ; 8
.eh_frame:00000000000269DD                 db  83h
.eh_frame:00000000000269DE                 db    7
.eh_frame:00000000000269DF                 db  47h ; G
.eh_frame:00000000000269E0                 db  0Eh
.eh_frame:00000000000269E1                 db  70h ; p
.eh_frame:00000000000269E2                 db    2
.eh_frame:00000000000269E3                 db  6Ch ; l
.eh_frame:00000000000269E4                 db  0Ah
.eh_frame:00000000000269E5                 db  0Eh
.eh_frame:00000000000269E6                 db  38h ; 8
.eh_frame:00000000000269E7                 db  41h ; A
.eh_frame:00000000000269E8                 db  0Eh
.eh_frame:00000000000269E9                 db  30h ; 0
.eh_frame:00000000000269EA                 db  41h ; A
.eh_frame:00000000000269EB                 db  0Eh
.eh_frame:00000000000269EC                 db  28h ; (
.eh_frame:00000000000269ED                 db  42h ; B
.eh_frame:00000000000269EE                 db  0Eh
.eh_frame:00000000000269EF                 db  20h
.eh_frame:00000000000269F0                 db  42h ; B
.eh_frame:00000000000269F1                 db  0Eh
.eh_frame:00000000000269F2                 db  18h
.eh_frame:00000000000269F3                 db  42h ; B
.eh_frame:00000000000269F4                 db  0Eh
.eh_frame:00000000000269F5                 db  10h
.eh_frame:00000000000269F6                 db  42h ; B
.eh_frame:00000000000269F7                 db  0Eh
.eh_frame:00000000000269F8                 db    8
.eh_frame:00000000000269F9                 db  46h ; F
.eh_frame:00000000000269FA                 db  0Bh
.eh_frame:00000000000269FB                 db    0
.eh_frame:00000000000269FC                 db  5Ch ; \
.eh_frame:00000000000269FD                 db    0
.eh_frame:00000000000269FE                 db    0
.eh_frame:00000000000269FF                 db    0
.eh_frame:0000000000026A00                 db 0D8h
.eh_frame:0000000000026A01                 db  2Fh ; /
.eh_frame:0000000000026A02                 db    0
.eh_frame:0000000000026A03                 db    0
.eh_frame:0000000000026A04                 db  7Ch ; |
.eh_frame:0000000000026A05                 db  23h ; #
.eh_frame:0000000000026A06                 db 0FFh
.eh_frame:0000000000026A07                 db 0FFh
.eh_frame:0000000000026A08                 db  40h ; @
.eh_frame:0000000000026A09                 db    3
.eh_frame:0000000000026A0A                 db    0
.eh_frame:0000000000026A0B                 db    0
.eh_frame:0000000000026A0C                 db    0
.eh_frame:0000000000026A0D                 db  42h ; B
.eh_frame:0000000000026A0E                 db  0Eh
.eh_frame:0000000000026A0F                 db  10h
.eh_frame:0000000000026A10                 db  8Fh
.eh_frame:0000000000026A11                 db    2
.eh_frame:0000000000026A12                 db  42h ; B
.eh_frame:0000000000026A13                 db  0Eh
.eh_frame:0000000000026A14                 db  18h
.eh_frame:0000000000026A15                 db  8Eh
.eh_frame:0000000000026A16                 db    3
.eh_frame:0000000000026A17                 db  45h ; E
.eh_frame:0000000000026A18                 db  0Eh
.eh_frame:0000000000026A19                 db  20h
.eh_frame:0000000000026A1A                 db  8Dh
.eh_frame:0000000000026A1B                 db    4
.eh_frame:0000000000026A1C                 db  42h ; B
.eh_frame:0000000000026A1D                 db  0Eh
.eh_frame:0000000000026A1E                 db  28h ; (
.eh_frame:0000000000026A1F                 db  8Ch
.eh_frame:0000000000026A20                 db    5
.eh_frame:0000000000026A21                 db  44h ; D
.eh_frame:0000000000026A22                 db  0Eh
.eh_frame:0000000000026A23                 db  30h ; 0
.eh_frame:0000000000026A24                 db  86h
.eh_frame:0000000000026A25                 db    6
.eh_frame:0000000000026A26                 db  41h ; A
.eh_frame:0000000000026A27                 db  0Eh
.eh_frame:0000000000026A28                 db  38h ; 8
.eh_frame:0000000000026A29                 db  83h
.eh_frame:0000000000026A2A                 db    7
.eh_frame:0000000000026A2B                 db  44h ; D
.eh_frame:0000000000026A2C                 db  0Eh
.eh_frame:0000000000026A2D                 db 0A0h
.eh_frame:0000000000026A2E                 db    1
.eh_frame:0000000000026A2F                 db    3
.eh_frame:0000000000026A30                 db  5Dh ; ]
.eh_frame:0000000000026A31                 db    1
.eh_frame:0000000000026A32                 db  0Eh
.eh_frame:0000000000026A33                 db 0A8h
.eh_frame:0000000000026A34                 db    1
.eh_frame:0000000000026A35                 db  51h ; Q
.eh_frame:0000000000026A36                 db  0Eh
.eh_frame:0000000000026A37                 db 0B0h
.eh_frame:0000000000026A38                 db    1
.eh_frame:0000000000026A39                 db  52h ; R
.eh_frame:0000000000026A3A                 db  0Eh
.eh_frame:0000000000026A3B                 db 0A8h
.eh_frame:0000000000026A3C                 db    1
.eh_frame:0000000000026A3D                 db  41h ; A
.eh_frame:0000000000026A3E                 db  0Eh
.eh_frame:0000000000026A3F                 db 0A0h
.eh_frame:0000000000026A40                 db    1
.eh_frame:0000000000026A41                 db    3
.eh_frame:0000000000026A42                 db  94h
.eh_frame:0000000000026A43                 db    1
.eh_frame:0000000000026A44                 db  0Ah
.eh_frame:0000000000026A45                 db  0Eh
.eh_frame:0000000000026A46                 db  38h ; 8
.eh_frame:0000000000026A47                 db  41h ; A
.eh_frame:0000000000026A48                 db  0Eh
.eh_frame:0000000000026A49                 db  30h ; 0
.eh_frame:0000000000026A4A                 db  41h ; A
.eh_frame:0000000000026A4B                 db  0Eh
.eh_frame:0000000000026A4C                 db  28h ; (
.eh_frame:0000000000026A4D                 db  42h ; B
.eh_frame:0000000000026A4E                 db  0Eh
.eh_frame:0000000000026A4F                 db  20h
.eh_frame:0000000000026A50                 db  42h ; B
.eh_frame:0000000000026A51                 db  0Eh
.eh_frame:0000000000026A52                 db  18h
.eh_frame:0000000000026A53                 db  42h ; B
.eh_frame:0000000000026A54                 db  0Eh
.eh_frame:0000000000026A55                 db  10h
.eh_frame:0000000000026A56                 db  42h ; B
.eh_frame:0000000000026A57                 db  0Eh
.eh_frame:0000000000026A58                 db    8
.eh_frame:0000000000026A59                 db  41h ; A
.eh_frame:0000000000026A5A                 db  0Bh
.eh_frame:0000000000026A5B                 db    0
.eh_frame:0000000000026A5C                 db  4Ch ; L
.eh_frame:0000000000026A5D                 db    0
.eh_frame:0000000000026A5E                 db    0
.eh_frame:0000000000026A5F                 db    0
.eh_frame:0000000000026A60                 db  38h ; 8
.eh_frame:0000000000026A61                 db  30h ; 0
.eh_frame:0000000000026A62                 db    0
.eh_frame:0000000000026A63                 db    0
.eh_frame:0000000000026A64                 db  5Ch ; \
.eh_frame:0000000000026A65                 db  26h ; &
.eh_frame:0000000000026A66                 db 0FFh
.eh_frame:0000000000026A67                 db 0FFh
.eh_frame:0000000000026A68                 db  30h ; 0
.eh_frame:0000000000026A69                 db  17h
.eh_frame:0000000000026A6A                 db    0
.eh_frame:0000000000026A6B                 db    0
.eh_frame:0000000000026A6C                 db    0
.eh_frame:0000000000026A6D                 db  42h ; B
.eh_frame:0000000000026A6E                 db  0Eh
.eh_frame:0000000000026A6F                 db  10h
.eh_frame:0000000000026A70                 db  8Fh
.eh_frame:0000000000026A71                 db    2
.eh_frame:0000000000026A72                 db  42h ; B
.eh_frame:0000000000026A73                 db  0Eh
.eh_frame:0000000000026A74                 db  18h
.eh_frame:0000000000026A75                 db  8Eh
.eh_frame:0000000000026A76                 db    3
.eh_frame:0000000000026A77                 db  42h ; B
.eh_frame:0000000000026A78                 db  0Eh
.eh_frame:0000000000026A79                 db  20h
.eh_frame:0000000000026A7A                 db  8Dh
.eh_frame:0000000000026A7B                 db    4
.eh_frame:0000000000026A7C                 db  42h ; B
.eh_frame:0000000000026A7D                 db  0Eh
.eh_frame:0000000000026A7E                 db  28h ; (
.eh_frame:0000000000026A7F                 db  8Ch
.eh_frame:0000000000026A80                 db    5
.eh_frame:0000000000026A81                 db  44h ; D
.eh_frame:0000000000026A82                 db  0Eh
.eh_frame:0000000000026A83                 db  30h ; 0
.eh_frame:0000000000026A84                 db  86h
.eh_frame:0000000000026A85                 db    6
.eh_frame:0000000000026A86                 db  41h ; A
.eh_frame:0000000000026A87                 db  0Eh
.eh_frame:0000000000026A88                 db  38h ; 8
.eh_frame:0000000000026A89                 db  83h
.eh_frame:0000000000026A8A                 db    7
.eh_frame:0000000000026A8B                 db  52h ; R
.eh_frame:0000000000026A8C                 db  0Eh
.eh_frame:0000000000026A8D                 db 0F0h
.eh_frame:0000000000026A8E                 db    4
.eh_frame:0000000000026A8F                 db    3
.eh_frame:0000000000026A90                 db  7Ch ; |
.eh_frame:0000000000026A91                 db  0Bh
.eh_frame:0000000000026A92                 db  0Ah
.eh_frame:0000000000026A93                 db  0Eh
.eh_frame:0000000000026A94                 db  38h ; 8
.eh_frame:0000000000026A95                 db  41h ; A
.eh_frame:0000000000026A96                 db  0Eh
.eh_frame:0000000000026A97                 db  30h ; 0
.eh_frame:0000000000026A98                 db  41h ; A
.eh_frame:0000000000026A99                 db  0Eh
.eh_frame:0000000000026A9A                 db  28h ; (
.eh_frame:0000000000026A9B                 db  42h ; B
.eh_frame:0000000000026A9C                 db  0Eh
.eh_frame:0000000000026A9D                 db  20h
.eh_frame:0000000000026A9E                 db  42h ; B
.eh_frame:0000000000026A9F                 db  0Eh
.eh_frame:0000000000026AA0                 db  18h
.eh_frame:0000000000026AA1                 db  42h ; B
.eh_frame:0000000000026AA2                 db  0Eh
.eh_frame:0000000000026AA3                 db  10h
.eh_frame:0000000000026AA4                 db  42h ; B
.eh_frame:0000000000026AA5                 db  0Eh
.eh_frame:0000000000026AA6                 db    8
.eh_frame:0000000000026AA7                 db  4Bh ; K
.eh_frame:0000000000026AA8                 db  0Bh
.eh_frame:0000000000026AA9                 db    0
.eh_frame:0000000000026AAA                 db    0
.eh_frame:0000000000026AAB                 db    0
.eh_frame:0000000000026AAC                 db  5Ch ; \
.eh_frame:0000000000026AAD                 db    0
.eh_frame:0000000000026AAE                 db    0
.eh_frame:0000000000026AAF                 db    0
.eh_frame:0000000000026AB0                 db  88h
.eh_frame:0000000000026AB1                 db  30h ; 0
.eh_frame:0000000000026AB2                 db    0
.eh_frame:0000000000026AB3                 db    0
.eh_frame:0000000000026AB4                 db  3Ch ; <
.eh_frame:0000000000026AB5                 db  3Dh ; =
.eh_frame:0000000000026AB6                 db 0FFh
.eh_frame:0000000000026AB7                 db 0FFh
.eh_frame:0000000000026AB8                 db  50h ; P
.eh_frame:0000000000026AB9                 db    8
.eh_frame:0000000000026ABA                 db    0
.eh_frame:0000000000026ABB                 db    0
.eh_frame:0000000000026ABC                 db    0
.eh_frame:0000000000026ABD                 db  42h ; B
.eh_frame:0000000000026ABE                 db  0Eh
.eh_frame:0000000000026ABF                 db  10h
.eh_frame:0000000000026AC0                 db  8Fh
.eh_frame:0000000000026AC1                 db    2
.eh_frame:0000000000026AC2                 db  42h ; B
.eh_frame:0000000000026AC3                 db  0Eh
.eh_frame:0000000000026AC4                 db  18h
.eh_frame:0000000000026AC5                 db  8Eh
.eh_frame:0000000000026AC6                 db    3
.eh_frame:0000000000026AC7                 db  45h ; E
.eh_frame:0000000000026AC8                 db  0Eh
.eh_frame:0000000000026AC9                 db  20h
.eh_frame:0000000000026ACA                 db  8Dh
.eh_frame:0000000000026ACB                 db    4
.eh_frame:0000000000026ACC                 db  42h ; B
.eh_frame:0000000000026ACD                 db  0Eh
.eh_frame:0000000000026ACE                 db  28h ; (
.eh_frame:0000000000026ACF                 db  8Ch
.eh_frame:0000000000026AD0                 db    5
.eh_frame:0000000000026AD1                 db  44h ; D
.eh_frame:0000000000026AD2                 db  0Eh
.eh_frame:0000000000026AD3                 db  30h ; 0
.eh_frame:0000000000026AD4                 db  86h
.eh_frame:0000000000026AD5                 db    6
.eh_frame:0000000000026AD6                 db  41h ; A
.eh_frame:0000000000026AD7                 db  0Eh
.eh_frame:0000000000026AD8                 db  38h ; 8
.eh_frame:0000000000026AD9                 db  83h
.eh_frame:0000000000026ADA                 db    7
.eh_frame:0000000000026ADB                 db  55h ; U
.eh_frame:0000000000026ADC                 db  0Eh
.eh_frame:0000000000026ADD                 db 0E0h
.eh_frame:0000000000026ADE                 db    1
.eh_frame:0000000000026ADF                 db    2
.eh_frame:0000000000026AE0                 db  91h
.eh_frame:0000000000026AE1                 db  0Ah
.eh_frame:0000000000026AE2                 db  0Eh
.eh_frame:0000000000026AE3                 db  38h ; 8
.eh_frame:0000000000026AE4                 db  41h ; A
.eh_frame:0000000000026AE5                 db  0Eh
.eh_frame:0000000000026AE6                 db  30h ; 0
.eh_frame:0000000000026AE7                 db  41h ; A
.eh_frame:0000000000026AE8                 db  0Eh
.eh_frame:0000000000026AE9                 db  28h ; (
.eh_frame:0000000000026AEA                 db  42h ; B
.eh_frame:0000000000026AEB                 db  0Eh
.eh_frame:0000000000026AEC                 db  20h
.eh_frame:0000000000026AED                 db  42h ; B
.eh_frame:0000000000026AEE                 db  0Eh
.eh_frame:0000000000026AEF                 db  18h
.eh_frame:0000000000026AF0                 db  42h ; B
.eh_frame:0000000000026AF1                 db  0Eh
.eh_frame:0000000000026AF2                 db  10h
.eh_frame:0000000000026AF3                 db  42h ; B
.eh_frame:0000000000026AF4                 db  0Eh
.eh_frame:0000000000026AF5                 db    8
.eh_frame:0000000000026AF6                 db  48h ; H
.eh_frame:0000000000026AF7                 db  0Bh
.eh_frame:0000000000026AF8                 db    3
.eh_frame:0000000000026AF9                 db 0C3h
.eh_frame:0000000000026AFA                 db    5
.eh_frame:0000000000026AFB                 db  0Eh
.eh_frame:0000000000026AFC                 db 0E8h
.eh_frame:0000000000026AFD                 db    1
.eh_frame:0000000000026AFE                 db  4Ah ; J
.eh_frame:0000000000026AFF                 db  0Eh
.eh_frame:0000000000026B00                 db 0F0h
.eh_frame:0000000000026B01                 db    1
.eh_frame:0000000000026B02                 db  56h ; V
.eh_frame:0000000000026B03                 db  0Eh
.eh_frame:0000000000026B04                 db 0E8h
.eh_frame:0000000000026B05                 db    1
.eh_frame:0000000000026B06                 db  41h ; A
.eh_frame:0000000000026B07                 db  0Eh
.eh_frame:0000000000026B08                 db 0E0h
.eh_frame:0000000000026B09                 db    1
.eh_frame:0000000000026B0A                 db    0
.eh_frame:0000000000026B0B                 db    0
.eh_frame:0000000000026B0C                 db  40h ; @
.eh_frame:0000000000026B0D                 db    0
.eh_frame:0000000000026B0E                 db    0
.eh_frame:0000000000026B0F                 db    0
.eh_frame:0000000000026B10                 db 0E8h
.eh_frame:0000000000026B11                 db  30h ; 0
.eh_frame:0000000000026B12                 db    0
.eh_frame:0000000000026B13                 db    0
.eh_frame:0000000000026B14                 db  2Ch ; ,
.eh_frame:0000000000026B15                 db  45h ; E
.eh_frame:0000000000026B16                 db 0FFh
.eh_frame:0000000000026B17                 db 0FFh
.eh_frame:0000000000026B18                 db  5Dh ; ]
.eh_frame:0000000000026B19                 db    2
.eh_frame:0000000000026B1A                 db    0
.eh_frame:0000000000026B1B                 db    0
.eh_frame:0000000000026B1C                 db    0
.eh_frame:0000000000026B1D                 db  42h ; B
.eh_frame:0000000000026B1E                 db  0Eh
.eh_frame:0000000000026B1F                 db  10h
.eh_frame:0000000000026B20                 db  8Eh
.eh_frame:0000000000026B21                 db    2
.eh_frame:0000000000026B22                 db  42h ; B
.eh_frame:0000000000026B23                 db  0Eh
.eh_frame:0000000000026B24                 db  18h
.eh_frame:0000000000026B25                 db  8Dh
.eh_frame:0000000000026B26                 db    3
.eh_frame:0000000000026B27                 db  45h ; E
.eh_frame:0000000000026B28                 db  0Eh
.eh_frame:0000000000026B29                 db  20h
.eh_frame:0000000000026B2A                 db  8Ch
.eh_frame:0000000000026B2B                 db    4
.eh_frame:0000000000026B2C                 db  41h ; A
.eh_frame:0000000000026B2D                 db  0Eh
.eh_frame:0000000000026B2E                 db  28h ; (
.eh_frame:0000000000026B2F                 db  86h
.eh_frame:0000000000026B30                 db    5
.eh_frame:0000000000026B31                 db  44h ; D
.eh_frame:0000000000026B32                 db  0Eh
.eh_frame:0000000000026B33                 db  30h ; 0
.eh_frame:0000000000026B34                 db  83h
.eh_frame:0000000000026B35                 db    6
.eh_frame:0000000000026B36                 db  4Ah ; J
.eh_frame:0000000000026B37                 db  0Eh
.eh_frame:0000000000026B38                 db  50h ; P
.eh_frame:0000000000026B39                 db    2
.eh_frame:0000000000026B3A                 db  61h ; a
.eh_frame:0000000000026B3B                 db  0Ah
.eh_frame:0000000000026B3C                 db  0Eh
.eh_frame:0000000000026B3D                 db  30h ; 0
.eh_frame:0000000000026B3E                 db  41h ; A
.eh_frame:0000000000026B3F                 db  0Eh
.eh_frame:0000000000026B40                 db  28h ; (
.eh_frame:0000000000026B41                 db  41h ; A
.eh_frame:0000000000026B42                 db  0Eh
.eh_frame:0000000000026B43                 db  20h
.eh_frame:0000000000026B44                 db  42h ; B
.eh_frame:0000000000026B45                 db  0Eh
.eh_frame:0000000000026B46                 db  18h
.eh_frame:0000000000026B47                 db  42h ; B
.eh_frame:0000000000026B48                 db  0Eh
.eh_frame:0000000000026B49                 db  10h
.eh_frame:0000000000026B4A                 db  42h ; B
.eh_frame:0000000000026B4B                 db  0Eh
.eh_frame:0000000000026B4C                 db    8
.eh_frame:0000000000026B4D                 db  47h ; G
.eh_frame:0000000000026B4E                 db  0Bh
.eh_frame:0000000000026B4F                 db    0
.eh_frame:0000000000026B50                 db  48h ; H
.eh_frame:0000000000026B51                 db    0
.eh_frame:0000000000026B52                 db    0
.eh_frame:0000000000026B53                 db    0
.eh_frame:0000000000026B54                 db  2Ch ; ,
.eh_frame:0000000000026B55                 db  31h ; 1
.eh_frame:0000000000026B56                 db    0
.eh_frame:0000000000026B57                 db    0
.eh_frame:0000000000026B58                 db  48h ; H
.eh_frame:0000000000026B59                 db  47h ; G
.eh_frame:0000000000026B5A                 db 0FFh
.eh_frame:0000000000026B5B                 db 0FFh
.eh_frame:0000000000026B5C                 db 0FDh
.eh_frame:0000000000026B5D                 db    6
.eh_frame:0000000000026B5E                 db    0
.eh_frame:0000000000026B5F                 db    0
.eh_frame:0000000000026B60                 db    0
.eh_frame:0000000000026B61                 db  42h ; B
.eh_frame:0000000000026B62                 db  0Eh
.eh_frame:0000000000026B63                 db  10h
.eh_frame:0000000000026B64                 db  8Fh
.eh_frame:0000000000026B65                 db    2
.eh_frame:0000000000026B66                 db  42h ; B
.eh_frame:0000000000026B67                 db  0Eh
.eh_frame:0000000000026B68                 db  18h
.eh_frame:0000000000026B69                 db  8Eh
.eh_frame:0000000000026B6A                 db    3
.eh_frame:0000000000026B6B                 db  42h ; B
.eh_frame:0000000000026B6C                 db  0Eh
.eh_frame:0000000000026B6D                 db  20h
.eh_frame:0000000000026B6E                 db  8Dh
.eh_frame:0000000000026B6F                 db    4
.eh_frame:0000000000026B70                 db  42h ; B
.eh_frame:0000000000026B71                 db  0Eh
.eh_frame:0000000000026B72                 db  28h ; (
.eh_frame:0000000000026B73                 db  8Ch
.eh_frame:0000000000026B74                 db    5
.eh_frame:0000000000026B75                 db  41h ; A
.eh_frame:0000000000026B76                 db  0Eh
.eh_frame:0000000000026B77                 db  30h ; 0
.eh_frame:0000000000026B78                 db  86h
.eh_frame:0000000000026B79                 db    6
.eh_frame:0000000000026B7A                 db  41h ; A
.eh_frame:0000000000026B7B                 db  0Eh
.eh_frame:0000000000026B7C                 db  38h ; 8
.eh_frame:0000000000026B7D                 db  83h
.eh_frame:0000000000026B7E                 db    7
.eh_frame:0000000000026B7F                 db  47h ; G
.eh_frame:0000000000026B80                 db  0Eh
.eh_frame:0000000000026B81                 db  70h ; p
.eh_frame:0000000000026B82                 db    2
.eh_frame:0000000000026B83                 db 0CBh
.eh_frame:0000000000026B84                 db  0Ah
.eh_frame:0000000000026B85                 db  0Eh
.eh_frame:0000000000026B86                 db  38h ; 8
.eh_frame:0000000000026B87                 db  41h ; A
.eh_frame:0000000000026B88                 db  0Eh
.eh_frame:0000000000026B89                 db  30h ; 0
.eh_frame:0000000000026B8A                 db  41h ; A
.eh_frame:0000000000026B8B                 db  0Eh
.eh_frame:0000000000026B8C                 db  28h ; (
.eh_frame:0000000000026B8D                 db  42h ; B
.eh_frame:0000000000026B8E                 db  0Eh
.eh_frame:0000000000026B8F                 db  20h
.eh_frame:0000000000026B90                 db  42h ; B
.eh_frame:0000000000026B91                 db  0Eh
.eh_frame:0000000000026B92                 db  18h
.eh_frame:0000000000026B93                 db  42h ; B
.eh_frame:0000000000026B94                 db  0Eh
.eh_frame:0000000000026B95                 db  10h
.eh_frame:0000000000026B96                 db  42h ; B
.eh_frame:0000000000026B97                 db  0Eh
.eh_frame:0000000000026B98                 db    8
.eh_frame:0000000000026B99                 db  4Ah ; J
.eh_frame:0000000000026B9A                 db  0Bh
.eh_frame:0000000000026B9B                 db    0
.eh_frame:0000000000026B9C                 db  3Ch ; <
.eh_frame:0000000000026B9D                 db    0
.eh_frame:0000000000026B9E                 db    0
.eh_frame:0000000000026B9F                 db    0
.eh_frame:0000000000026BA0                 db  78h ; x
.eh_frame:0000000000026BA1                 db  31h ; 1
.eh_frame:0000000000026BA2                 db    0
.eh_frame:0000000000026BA3                 db    0
.eh_frame:0000000000026BA4                 db 0FCh
.eh_frame:0000000000026BA5                 db  4Dh ; M
.eh_frame:0000000000026BA6                 db 0FFh
.eh_frame:0000000000026BA7                 db 0FFh
.eh_frame:0000000000026BA8                 db 0B6h
.eh_frame:0000000000026BA9                 db    0
.eh_frame:0000000000026BAA                 db    0
.eh_frame:0000000000026BAB                 db    0
.eh_frame:0000000000026BAC                 db    0
.eh_frame:0000000000026BAD                 db  42h ; B
.eh_frame:0000000000026BAE                 db  0Eh
.eh_frame:0000000000026BAF                 db  10h
.eh_frame:0000000000026BB0                 db  8Eh
.eh_frame:0000000000026BB1                 db    2
.eh_frame:0000000000026BB2                 db  45h ; E
.eh_frame:0000000000026BB3                 db  0Eh
.eh_frame:0000000000026BB4                 db  18h
.eh_frame:0000000000026BB5                 db  8Dh
.eh_frame:0000000000026BB6                 db    3
.eh_frame:0000000000026BB7                 db  45h ; E
.eh_frame:0000000000026BB8                 db  0Eh
.eh_frame:0000000000026BB9                 db  20h
.eh_frame:0000000000026BBA                 db  8Ch
.eh_frame:0000000000026BBB                 db    4
.eh_frame:0000000000026BBC                 db  48h ; H
.eh_frame:0000000000026BBD                 db  0Eh
.eh_frame:0000000000026BBE                 db  28h ; (
.eh_frame:0000000000026BBF                 db  86h
.eh_frame:0000000000026BC0                 db    5
.eh_frame:0000000000026BC1                 db  44h ; D
.eh_frame:0000000000026BC2                 db  0Eh
.eh_frame:0000000000026BC3                 db  30h ; 0
.eh_frame:0000000000026BC4                 db  83h
.eh_frame:0000000000026BC5                 db    6
.eh_frame:0000000000026BC6                 db    2
.eh_frame:0000000000026BC7                 db  83h
.eh_frame:0000000000026BC8                 db  0Ah
.eh_frame:0000000000026BC9                 db  0Eh
.eh_frame:0000000000026BCA                 db  28h ; (
.eh_frame:0000000000026BCB                 db  41h ; A
.eh_frame:0000000000026BCC                 db  0Eh
.eh_frame:0000000000026BCD                 db  20h
.eh_frame:0000000000026BCE                 db  42h ; B
.eh_frame:0000000000026BCF                 db  0Eh
.eh_frame:0000000000026BD0                 db  18h
.eh_frame:0000000000026BD1                 db  42h ; B
.eh_frame:0000000000026BD2                 db  0Eh
.eh_frame:0000000000026BD3                 db  10h
.eh_frame:0000000000026BD4                 db  42h ; B
.eh_frame:0000000000026BD5                 db  0Eh
.eh_frame:0000000000026BD6                 db    8
.eh_frame:0000000000026BD7                 db  46h ; F
.eh_frame:0000000000026BD8                 db  0Bh
.eh_frame:0000000000026BD9                 db    0
.eh_frame:0000000000026BDA                 db    0
.eh_frame:0000000000026BDB                 db    0
.eh_frame:0000000000026BDC                 db  5Ch ; \
.eh_frame:0000000000026BDD                 db    0
.eh_frame:0000000000026BDE                 db    0
.eh_frame:0000000000026BDF                 db    0
.eh_frame:0000000000026BE0                 db 0B8h
.eh_frame:0000000000026BE1                 db  31h ; 1
.eh_frame:0000000000026BE2                 db    0
.eh_frame:0000000000026BE3                 db    0
.eh_frame:0000000000026BE4                 db  7Ch ; |
.eh_frame:0000000000026BE5                 db  4Eh ; N
.eh_frame:0000000000026BE6                 db 0FFh
.eh_frame:0000000000026BE7                 db 0FFh
.eh_frame:0000000000026BE8                 db 0D3h
.eh_frame:0000000000026BE9                 db  14h
.eh_frame:0000000000026BEA                 db    0
.eh_frame:0000000000026BEB                 db    0
.eh_frame:0000000000026BEC                 db    0
.eh_frame:0000000000026BED                 db  42h ; B
.eh_frame:0000000000026BEE                 db  0Eh
.eh_frame:0000000000026BEF                 db  10h
.eh_frame:0000000000026BF0                 db  8Fh
.eh_frame:0000000000026BF1                 db    2
.eh_frame:0000000000026BF2                 db  42h ; B
.eh_frame:0000000000026BF3                 db  0Eh
.eh_frame:0000000000026BF4                 db  18h
.eh_frame:0000000000026BF5                 db  8Eh
.eh_frame:0000000000026BF6                 db    3
.eh_frame:0000000000026BF7                 db  42h ; B
.eh_frame:0000000000026BF8                 db  0Eh
.eh_frame:0000000000026BF9                 db  20h
.eh_frame:0000000000026BFA                 db  8Dh
.eh_frame:0000000000026BFB                 db    4
.eh_frame:0000000000026BFC                 db  42h ; B
.eh_frame:0000000000026BFD                 db  0Eh
.eh_frame:0000000000026BFE                 db  28h ; (
.eh_frame:0000000000026BFF                 db  8Ch
.eh_frame:0000000000026C00                 db    5
.eh_frame:0000000000026C01                 db  41h ; A
.eh_frame:0000000000026C02                 db  0Eh
.eh_frame:0000000000026C03                 db  30h ; 0
.eh_frame:0000000000026C04                 db  86h
.eh_frame:0000000000026C05                 db    6
.eh_frame:0000000000026C06                 db  41h ; A
.eh_frame:0000000000026C07                 db  0Eh
.eh_frame:0000000000026C08                 db  38h ; 8
.eh_frame:0000000000026C09                 db  83h
.eh_frame:0000000000026C0A                 db    7
.eh_frame:0000000000026C0B                 db  47h ; G
.eh_frame:0000000000026C0C                 db  0Eh
.eh_frame:0000000000026C0D                 db 0E0h
.eh_frame:0000000000026C0E                 db    2
.eh_frame:0000000000026C0F                 db    3
.eh_frame:0000000000026C10                 db  22h ; "
.eh_frame:0000000000026C11                 db    1
.eh_frame:0000000000026C12                 db  0Ah
.eh_frame:0000000000026C13                 db  0Eh
.eh_frame:0000000000026C14                 db  38h ; 8
.eh_frame:0000000000026C15                 db  41h ; A
.eh_frame:0000000000026C16                 db  0Eh
.eh_frame:0000000000026C17                 db  30h ; 0
.eh_frame:0000000000026C18                 db  41h ; A
.eh_frame:0000000000026C19                 db  0Eh
.eh_frame:0000000000026C1A                 db  28h ; (
.eh_frame:0000000000026C1B                 db  42h ; B
.eh_frame:0000000000026C1C                 db  0Eh
.eh_frame:0000000000026C1D                 db  20h
.eh_frame:0000000000026C1E                 db  42h ; B
.eh_frame:0000000000026C1F                 db  0Eh
.eh_frame:0000000000026C20                 db  18h
.eh_frame:0000000000026C21                 db  42h ; B
.eh_frame:0000000000026C22                 db  0Eh
.eh_frame:0000000000026C23                 db  10h
.eh_frame:0000000000026C24                 db  42h ; B
.eh_frame:0000000000026C25                 db  0Eh
.eh_frame:0000000000026C26                 db    8
.eh_frame:0000000000026C27                 db  41h ; A
.eh_frame:0000000000026C28                 db  0Bh
.eh_frame:0000000000026C29                 db    3
.eh_frame:0000000000026C2A                 db 0BFh
.eh_frame:0000000000026C2B                 db  0Bh
.eh_frame:0000000000026C2C                 db  0Eh
.eh_frame:0000000000026C2D                 db 0E8h
.eh_frame:0000000000026C2E                 db    2
.eh_frame:0000000000026C2F                 db  4Ch ; L
.eh_frame:0000000000026C30                 db  0Eh
.eh_frame:0000000000026C31                 db 0F0h
.eh_frame:0000000000026C32                 db    2
.eh_frame:0000000000026C33                 db  64h ; d
.eh_frame:0000000000026C34                 db  0Eh
.eh_frame:0000000000026C35                 db 0E8h
.eh_frame:0000000000026C36                 db    2
.eh_frame:0000000000026C37                 db  42h ; B
.eh_frame:0000000000026C38                 db  0Eh
.eh_frame:0000000000026C39                 db 0E0h
.eh_frame:0000000000026C3A                 db    2
.eh_frame:0000000000026C3B                 db    0
.eh_frame:0000000000026C3C                 db  48h ; H
.eh_frame:0000000000026C3D                 db    0
.eh_frame:0000000000026C3E                 db    0
.eh_frame:0000000000026C3F                 db    0
.eh_frame:0000000000026C40                 db  18h
.eh_frame:0000000000026C41                 db  32h ; 2
.eh_frame:0000000000026C42                 db    0
.eh_frame:0000000000026C43                 db    0
.eh_frame:0000000000026C44                 db 0FCh
.eh_frame:0000000000026C45                 db  62h ; b
.eh_frame:0000000000026C46                 db 0FFh
.eh_frame:0000000000026C47                 db 0FFh
.eh_frame:0000000000026C48                 db  82h
.eh_frame:0000000000026C49                 db    1
.eh_frame:0000000000026C4A                 db    0
.eh_frame:0000000000026C4B                 db    0
.eh_frame:0000000000026C4C                 db    0
.eh_frame:0000000000026C4D                 db  42h ; B
.eh_frame:0000000000026C4E                 db  0Eh
.eh_frame:0000000000026C4F                 db  10h
.eh_frame:0000000000026C50                 db  8Fh
.eh_frame:0000000000026C51                 db    2
.eh_frame:0000000000026C52                 db  42h ; B
.eh_frame:0000000000026C53                 db  0Eh
.eh_frame:0000000000026C54                 db  18h
.eh_frame:0000000000026C55                 db  8Eh
.eh_frame:0000000000026C56                 db    3
.eh_frame:0000000000026C57                 db  45h ; E
.eh_frame:0000000000026C58                 db  0Eh
.eh_frame:0000000000026C59                 db  20h
.eh_frame:0000000000026C5A                 db  8Dh
.eh_frame:0000000000026C5B                 db    4
.eh_frame:0000000000026C5C                 db  42h ; B
.eh_frame:0000000000026C5D                 db  0Eh
.eh_frame:0000000000026C5E                 db  28h ; (
.eh_frame:0000000000026C5F                 db  8Ch
.eh_frame:0000000000026C60                 db    5
.eh_frame:0000000000026C61                 db  44h ; D
.eh_frame:0000000000026C62                 db  0Eh
.eh_frame:0000000000026C63                 db  30h ; 0
.eh_frame:0000000000026C64                 db  86h
.eh_frame:0000000000026C65                 db    6
.eh_frame:0000000000026C66                 db  41h ; A
.eh_frame:0000000000026C67                 db  0Eh
.eh_frame:0000000000026C68                 db  38h ; 8
.eh_frame:0000000000026C69                 db  83h
.eh_frame:0000000000026C6A                 db    7
.eh_frame:0000000000026C6B                 db  4Dh ; M
.eh_frame:0000000000026C6C                 db  0Eh
.eh_frame:0000000000026C6D                 db  80h
.eh_frame:0000000000026C6E                 db    1
.eh_frame:0000000000026C6F                 db    2
.eh_frame:0000000000026C70                 db 0FAh
.eh_frame:0000000000026C71                 db  0Ah
.eh_frame:0000000000026C72                 db  0Eh
.eh_frame:0000000000026C73                 db  38h ; 8
.eh_frame:0000000000026C74                 db  41h ; A
.eh_frame:0000000000026C75                 db  0Eh
.eh_frame:0000000000026C76                 db  30h ; 0
.eh_frame:0000000000026C77                 db  41h ; A
.eh_frame:0000000000026C78                 db  0Eh
.eh_frame:0000000000026C79                 db  28h ; (
.eh_frame:0000000000026C7A                 db  42h ; B
.eh_frame:0000000000026C7B                 db  0Eh
.eh_frame:0000000000026C7C                 db  20h
.eh_frame:0000000000026C7D                 db  42h ; B
.eh_frame:0000000000026C7E                 db  0Eh
.eh_frame:0000000000026C7F                 db  18h
.eh_frame:0000000000026C80                 db  42h ; B
.eh_frame:0000000000026C81                 db  0Eh
.eh_frame:0000000000026C82                 db  10h
.eh_frame:0000000000026C83                 db  42h ; B
.eh_frame:0000000000026C84                 db  0Eh
.eh_frame:0000000000026C85                 db    8
.eh_frame:0000000000026C86                 db  47h ; G
.eh_frame:0000000000026C87                 db  0Bh
.eh_frame:0000000000026C88                 db  4Ch ; L
.eh_frame:0000000000026C89                 db    0
.eh_frame:0000000000026C8A                 db    0
.eh_frame:0000000000026C8B                 db    0
.eh_frame:0000000000026C8C                 db  64h ; d
.eh_frame:0000000000026C8D                 db  32h ; 2
.eh_frame:0000000000026C8E                 db    0
.eh_frame:0000000000026C8F                 db    0
.eh_frame:0000000000026C90                 db  40h ; @
.eh_frame:0000000000026C91                 db  64h ; d
.eh_frame:0000000000026C92                 db 0FFh
.eh_frame:0000000000026C93                 db 0FFh
.eh_frame:0000000000026C94                 db  7Fh ; 
.eh_frame:0000000000026C95                 db    1
.eh_frame:0000000000026C96                 db    0
.eh_frame:0000000000026C97                 db    0
.eh_frame:0000000000026C98                 db    0
.eh_frame:0000000000026C99                 db  42h ; B
.eh_frame:0000000000026C9A                 db  0Eh
.eh_frame:0000000000026C9B                 db  10h
.eh_frame:0000000000026C9C                 db  8Fh
.eh_frame:0000000000026C9D                 db    2
.eh_frame:0000000000026C9E                 db  42h ; B
.eh_frame:0000000000026C9F                 db  0Eh
.eh_frame:0000000000026CA0                 db  18h
.eh_frame:0000000000026CA1                 db  8Eh
.eh_frame:0000000000026CA2                 db    3
.eh_frame:0000000000026CA3                 db  45h ; E
.eh_frame:0000000000026CA4                 db  0Eh
.eh_frame:0000000000026CA5                 db  20h
.eh_frame:0000000000026CA6                 db  8Dh
.eh_frame:0000000000026CA7                 db    4
.eh_frame:0000000000026CA8                 db  42h ; B
.eh_frame:0000000000026CA9                 db  0Eh
.eh_frame:0000000000026CAA                 db  28h ; (
.eh_frame:0000000000026CAB                 db  8Ch
.eh_frame:0000000000026CAC                 db    5
.eh_frame:0000000000026CAD                 db  44h ; D
.eh_frame:0000000000026CAE                 db  0Eh
.eh_frame:0000000000026CAF                 db  30h ; 0
.eh_frame:0000000000026CB0                 db  86h
.eh_frame:0000000000026CB1                 db    6
.eh_frame:0000000000026CB2                 db  41h ; A
.eh_frame:0000000000026CB3                 db  0Eh
.eh_frame:0000000000026CB4                 db  38h ; 8
.eh_frame:0000000000026CB5                 db  83h
.eh_frame:0000000000026CB6                 db    7
.eh_frame:0000000000026CB7                 db  4Ah ; J
.eh_frame:0000000000026CB8                 db  0Eh
.eh_frame:0000000000026CB9                 db  90h
.eh_frame:0000000000026CBA                 db    1
.eh_frame:0000000000026CBB                 db    3
.eh_frame:0000000000026CBC                 db  45h ; E
.eh_frame:0000000000026CBD                 db    1
.eh_frame:0000000000026CBE                 db  0Ah
.eh_frame:0000000000026CBF                 db  0Eh
.eh_frame:0000000000026CC0                 db  38h ; 8
.eh_frame:0000000000026CC1                 db  41h ; A
.eh_frame:0000000000026CC2                 db  0Eh
.eh_frame:0000000000026CC3                 db  30h ; 0
.eh_frame:0000000000026CC4                 db  41h ; A
.eh_frame:0000000000026CC5                 db  0Eh
.eh_frame:0000000000026CC6                 db  28h ; (
.eh_frame:0000000000026CC7                 db  42h ; B
.eh_frame:0000000000026CC8                 db  0Eh
.eh_frame:0000000000026CC9                 db  20h
.eh_frame:0000000000026CCA                 db  42h ; B
.eh_frame:0000000000026CCB                 db  0Eh
.eh_frame:0000000000026CCC                 db  18h
.eh_frame:0000000000026CCD                 db  42h ; B
.eh_frame:0000000000026CCE                 db  0Eh
.eh_frame:0000000000026CCF                 db  10h
.eh_frame:0000000000026CD0                 db  42h ; B
.eh_frame:0000000000026CD1                 db  0Eh
.eh_frame:0000000000026CD2                 db    8
.eh_frame:0000000000026CD3                 db  47h ; G
.eh_frame:0000000000026CD4                 db  0Bh
.eh_frame:0000000000026CD5                 db    0
.eh_frame:0000000000026CD6                 db    0
.eh_frame:0000000000026CD7                 db    0
.eh_frame:0000000000026CD8                 db  4Ch ; L
.eh_frame:0000000000026CD9                 db    0
.eh_frame:0000000000026CDA                 db    0
.eh_frame:0000000000026CDB                 db    0
.eh_frame:0000000000026CDC                 db 0B4h
.eh_frame:0000000000026CDD                 db  32h ; 2
.eh_frame:0000000000026CDE                 db    0
.eh_frame:0000000000026CDF                 db    0
.eh_frame:0000000000026CE0                 db  70h ; p
.eh_frame:0000000000026CE1                 db  65h ; e
.eh_frame:0000000000026CE2                 db 0FFh
.eh_frame:0000000000026CE3                 db 0FFh
.eh_frame:0000000000026CE4                 db 0F5h
.eh_frame:0000000000026CE5                 db  10h
.eh_frame:0000000000026CE6                 db    0
.eh_frame:0000000000026CE7                 db    0
.eh_frame:0000000000026CE8                 db    0
.eh_frame:0000000000026CE9                 db  42h ; B
.eh_frame:0000000000026CEA                 db  0Eh
.eh_frame:0000000000026CEB                 db  10h
.eh_frame:0000000000026CEC                 db  8Fh
.eh_frame:0000000000026CED                 db    2
.eh_frame:0000000000026CEE                 db  42h ; B
.eh_frame:0000000000026CEF                 db  0Eh
.eh_frame:0000000000026CF0                 db  18h
.eh_frame:0000000000026CF1                 db  8Eh
.eh_frame:0000000000026CF2                 db    3
.eh_frame:0000000000026CF3                 db  42h ; B
.eh_frame:0000000000026CF4                 db  0Eh
.eh_frame:0000000000026CF5                 db  20h
.eh_frame:0000000000026CF6                 db  8Dh
.eh_frame:0000000000026CF7                 db    4
.eh_frame:0000000000026CF8                 db  42h ; B
.eh_frame:0000000000026CF9                 db  0Eh
.eh_frame:0000000000026CFA                 db  28h ; (
.eh_frame:0000000000026CFB                 db  8Ch
.eh_frame:0000000000026CFC                 db    5
.eh_frame:0000000000026CFD                 db  41h ; A
.eh_frame:0000000000026CFE                 db  0Eh
.eh_frame:0000000000026CFF                 db  30h ; 0
.eh_frame:0000000000026D00                 db  86h
.eh_frame:0000000000026D01                 db    6
.eh_frame:0000000000026D02                 db  41h ; A
.eh_frame:0000000000026D03                 db  0Eh
.eh_frame:0000000000026D04                 db  38h ; 8
.eh_frame:0000000000026D05                 db  83h
.eh_frame:0000000000026D06                 db    7
.eh_frame:0000000000026D07                 db  47h ; G
.eh_frame:0000000000026D08                 db  0Eh
.eh_frame:0000000000026D09                 db 0E0h
.eh_frame:0000000000026D0A                 db    2
.eh_frame:0000000000026D0B                 db    3
.eh_frame:0000000000026D0C                 db 0A9h
.eh_frame:0000000000026D0D                 db    3
.eh_frame:0000000000026D0E                 db  0Ah
.eh_frame:0000000000026D0F                 db  0Eh
.eh_frame:0000000000026D10                 db  38h ; 8
.eh_frame:0000000000026D11                 db  41h ; A
.eh_frame:0000000000026D12                 db  0Eh
.eh_frame:0000000000026D13                 db  30h ; 0
.eh_frame:0000000000026D14                 db  41h ; A
.eh_frame:0000000000026D15                 db  0Eh
.eh_frame:0000000000026D16                 db  28h ; (
.eh_frame:0000000000026D17                 db  42h ; B
.eh_frame:0000000000026D18                 db  0Eh
.eh_frame:0000000000026D19                 db  20h
.eh_frame:0000000000026D1A                 db  42h ; B
.eh_frame:0000000000026D1B                 db  0Eh
.eh_frame:0000000000026D1C                 db  18h
.eh_frame:0000000000026D1D                 db  42h ; B
.eh_frame:0000000000026D1E                 db  0Eh
.eh_frame:0000000000026D1F                 db  10h
.eh_frame:0000000000026D20                 db  42h ; B
.eh_frame:0000000000026D21                 db  0Eh
.eh_frame:0000000000026D22                 db    8
.eh_frame:0000000000026D23                 db  41h ; A
.eh_frame:0000000000026D24                 db  0Bh
.eh_frame:0000000000026D25                 db    0
.eh_frame:0000000000026D26                 db    0
.eh_frame:0000000000026D27                 db    0
.eh_frame:0000000000026D28                 db  1Ch
.eh_frame:0000000000026D29                 db    0
.eh_frame:0000000000026D2A                 db    0
.eh_frame:0000000000026D2B                 db    0
.eh_frame:0000000000026D2C                 db    4
.eh_frame:0000000000026D2D                 db  33h ; 3
.eh_frame:0000000000026D2E                 db    0
.eh_frame:0000000000026D2F                 db    0
.eh_frame:0000000000026D30                 db  20h
.eh_frame:0000000000026D31                 db  76h ; v
.eh_frame:0000000000026D32                 db 0FFh
.eh_frame:0000000000026D33                 db 0FFh
.eh_frame:0000000000026D34                 db  6Fh ; o
.eh_frame:0000000000026D35                 db    0
.eh_frame:0000000000026D36                 db    0
.eh_frame:0000000000026D37                 db    0
.eh_frame:0000000000026D38                 db    0
.eh_frame:0000000000026D39                 db  44h ; D
.eh_frame:0000000000026D3A                 db  0Eh
.eh_frame:0000000000026D3B                 db  10h
.eh_frame:0000000000026D3C                 db    2
.eh_frame:0000000000026D3D                 db  59h ; Y
.eh_frame:0000000000026D3E                 db  0Ah
.eh_frame:0000000000026D3F                 db  0Eh
.eh_frame:0000000000026D40                 db    8
.eh_frame:0000000000026D41                 db  4Bh ; K
.eh_frame:0000000000026D42                 db  0Bh
.eh_frame:0000000000026D43                 db  46h ; F
.eh_frame:0000000000026D44                 db  0Eh
.eh_frame:0000000000026D45                 db    8
.eh_frame:0000000000026D46                 db    0
.eh_frame:0000000000026D47                 db    0
.eh_frame:0000000000026D48                 db  10h
.eh_frame:0000000000026D49                 db    0
.eh_frame:0000000000026D4A                 db    0
.eh_frame:0000000000026D4B                 db    0
.eh_frame:0000000000026D4C                 db  24h ; $
.eh_frame:0000000000026D4D                 db  33h ; 3
.eh_frame:0000000000026D4E                 db    0
.eh_frame:0000000000026D4F                 db    0
.eh_frame:0000000000026D50                 db  70h ; p
.eh_frame:0000000000026D51                 db  76h ; v
.eh_frame:0000000000026D52                 db 0FFh
.eh_frame:0000000000026D53                 db 0FFh
.eh_frame:0000000000026D54                 db  0Fh
.eh_frame:0000000000026D55                 db    0
.eh_frame:0000000000026D56                 db    0
.eh_frame:0000000000026D57                 db    0
.eh_frame:0000000000026D58                 db    0
.eh_frame:0000000000026D59                 db    0
.eh_frame:0000000000026D5A                 db    0
.eh_frame:0000000000026D5B                 db    0
.eh_frame:0000000000026D5C                 db  28h ; (
.eh_frame:0000000000026D5D                 db    0
.eh_frame:0000000000026D5E                 db    0
.eh_frame:0000000000026D5F                 db    0
.eh_frame:0000000000026D60                 db  38h ; 8
.eh_frame:0000000000026D61                 db  33h ; 3
.eh_frame:0000000000026D62                 db    0
.eh_frame:0000000000026D63                 db    0
.eh_frame:0000000000026D64                 db  6Ch ; l
.eh_frame:0000000000026D65                 db  76h ; v
.eh_frame:0000000000026D66                 db 0FFh
.eh_frame:0000000000026D67                 db 0FFh
.eh_frame:0000000000026D68                 db 0C3h
.eh_frame:0000000000026D69                 db    0
.eh_frame:0000000000026D6A                 db    0
.eh_frame:0000000000026D6B                 db    0
.eh_frame:0000000000026D6C                 db    0
.eh_frame:0000000000026D6D                 db  42h ; B
.eh_frame:0000000000026D6E                 db  0Eh
.eh_frame:0000000000026D6F                 db  10h
.eh_frame:0000000000026D70                 db  8Ch
.eh_frame:0000000000026D71                 db    2
.eh_frame:0000000000026D72                 db  41h ; A
.eh_frame:0000000000026D73                 db  0Eh
.eh_frame:0000000000026D74                 db  18h
.eh_frame:0000000000026D75                 db  86h
.eh_frame:0000000000026D76                 db    3
.eh_frame:0000000000026D77                 db  43h ; C
.eh_frame:0000000000026D78                 db  0Eh
.eh_frame:0000000000026D79                 db  20h
.eh_frame:0000000000026D7A                 db  83h
.eh_frame:0000000000026D7B                 db    4
.eh_frame:0000000000026D7C                 db    2
.eh_frame:0000000000026D7D                 db 0B9h
.eh_frame:0000000000026D7E                 db  0Eh
.eh_frame:0000000000026D7F                 db  18h
.eh_frame:0000000000026D80                 db  41h ; A
.eh_frame:0000000000026D81                 db  0Eh
.eh_frame:0000000000026D82                 db  10h
.eh_frame:0000000000026D83                 db  42h ; B
.eh_frame:0000000000026D84                 db  0Eh
.eh_frame:0000000000026D85                 db    8
.eh_frame:0000000000026D86                 db    0
.eh_frame:0000000000026D87                 db    0
.eh_frame:0000000000026D88                 db  5Ch ; \
.eh_frame:0000000000026D89                 db    0
.eh_frame:0000000000026D8A                 db    0
.eh_frame:0000000000026D8B                 db    0
.eh_frame:0000000000026D8C                 db  64h ; d
.eh_frame:0000000000026D8D                 db  33h ; 3
.eh_frame:0000000000026D8E                 db    0
.eh_frame:0000000000026D8F                 db    0
.eh_frame:0000000000026D90                 db  10h
.eh_frame:0000000000026D91                 db  77h ; w
.eh_frame:0000000000026D92                 db 0FFh
.eh_frame:0000000000026D93                 db 0FFh
.eh_frame:0000000000026D94                 db  7Fh ; 
.eh_frame:0000000000026D95                 db    4
.eh_frame:0000000000026D96                 db    0
.eh_frame:0000000000026D97                 db    0
.eh_frame:0000000000026D98                 db    0
.eh_frame:0000000000026D99                 db  42h ; B
.eh_frame:0000000000026D9A                 db  0Eh
.eh_frame:0000000000026D9B                 db  10h
.eh_frame:0000000000026D9C                 db  8Fh
.eh_frame:0000000000026D9D                 db    2
.eh_frame:0000000000026D9E                 db  42h ; B
.eh_frame:0000000000026D9F                 db  0Eh
.eh_frame:0000000000026DA0                 db  18h
.eh_frame:0000000000026DA1                 db  8Eh
.eh_frame:0000000000026DA2                 db    3
.eh_frame:0000000000026DA3                 db  45h ; E
.eh_frame:0000000000026DA4                 db  0Eh
.eh_frame:0000000000026DA5                 db  20h
.eh_frame:0000000000026DA6                 db  8Dh
.eh_frame:0000000000026DA7                 db    4
.eh_frame:0000000000026DA8                 db  42h ; B
.eh_frame:0000000000026DA9                 db  0Eh
.eh_frame:0000000000026DAA                 db  28h ; (
.eh_frame:0000000000026DAB                 db  8Ch
.eh_frame:0000000000026DAC                 db    5
.eh_frame:0000000000026DAD                 db  44h ; D
.eh_frame:0000000000026DAE                 db  0Eh
.eh_frame:0000000000026DAF                 db  30h ; 0
.eh_frame:0000000000026DB0                 db  86h
.eh_frame:0000000000026DB1                 db    6
.eh_frame:0000000000026DB2                 db  41h ; A
.eh_frame:0000000000026DB3                 db  0Eh
.eh_frame:0000000000026DB4                 db  38h ; 8
.eh_frame:0000000000026DB5                 db  83h
.eh_frame:0000000000026DB6                 db    7
.eh_frame:0000000000026DB7                 db  44h ; D
.eh_frame:0000000000026DB8                 db  0Eh
.eh_frame:0000000000026DB9                 db  70h ; p
.eh_frame:0000000000026DBA                 db    2
.eh_frame:0000000000026DBB                 db 0D4h
.eh_frame:0000000000026DBC                 db  0Eh
.eh_frame:0000000000026DBD                 db  78h ; x
.eh_frame:0000000000026DBE                 db  4Bh ; K
.eh_frame:0000000000026DBF                 db  0Eh
.eh_frame:0000000000026DC0                 db  80h
.eh_frame:0000000000026DC1                 db    1
.eh_frame:0000000000026DC2                 db  41h ; A
.eh_frame:0000000000026DC3                 db  0Eh
.eh_frame:0000000000026DC4                 db  88h
.eh_frame:0000000000026DC5                 db    1
.eh_frame:0000000000026DC6                 db  42h ; B
.eh_frame:0000000000026DC7                 db  0Eh
.eh_frame:0000000000026DC8                 db  90h
.eh_frame:0000000000026DC9                 db    1
.eh_frame:0000000000026DCA                 db  5Dh ; ]
.eh_frame:0000000000026DCB                 db  0Eh
.eh_frame:0000000000026DCC                 db  70h ; p
.eh_frame:0000000000026DCD                 db  63h ; c
.eh_frame:0000000000026DCE                 db  0Ah
.eh_frame:0000000000026DCF                 db  0Eh
.eh_frame:0000000000026DD0                 db  38h ; 8
.eh_frame:0000000000026DD1                 db  44h ; D
.eh_frame:0000000000026DD2                 db  0Eh
.eh_frame:0000000000026DD3                 db  30h ; 0
.eh_frame:0000000000026DD4                 db  41h ; A
.eh_frame:0000000000026DD5                 db  0Eh
.eh_frame:0000000000026DD6                 db  28h ; (
.eh_frame:0000000000026DD7                 db  42h ; B
.eh_frame:0000000000026DD8                 db  0Eh
.eh_frame:0000000000026DD9                 db  20h
.eh_frame:0000000000026DDA                 db  42h ; B
.eh_frame:0000000000026DDB                 db  0Eh
.eh_frame:0000000000026DDC                 db  18h
.eh_frame:0000000000026DDD                 db  42h ; B
.eh_frame:0000000000026DDE                 db  0Eh
.eh_frame:0000000000026DDF                 db  10h
.eh_frame:0000000000026DE0                 db  42h ; B
.eh_frame:0000000000026DE1                 db  0Eh
.eh_frame:0000000000026DE2                 db    8
.eh_frame:0000000000026DE3                 db  45h ; E
.eh_frame:0000000000026DE4                 db  0Bh
.eh_frame:0000000000026DE5                 db    0
.eh_frame:0000000000026DE6                 db    0
.eh_frame:0000000000026DE7                 db    0
.eh_frame:0000000000026DE8                 db  54h ; T
.eh_frame:0000000000026DE9                 db    0
.eh_frame:0000000000026DEA                 db    0
.eh_frame:0000000000026DEB                 db    0
.eh_frame:0000000000026DEC                 db 0C4h
.eh_frame:0000000000026DED                 db  33h ; 3
.eh_frame:0000000000026DEE                 db    0
.eh_frame:0000000000026DEF                 db    0
.eh_frame:0000000000026DF0                 db  30h ; 0
.eh_frame:0000000000026DF1                 db  7Bh ; {
.eh_frame:0000000000026DF2                 db 0FFh
.eh_frame:0000000000026DF3                 db 0FFh
.eh_frame:0000000000026DF4                 db  1Bh
.eh_frame:0000000000026DF5                 db    1
.eh_frame:0000000000026DF6                 db    0
.eh_frame:0000000000026DF7                 db    0
.eh_frame:0000000000026DF8                 db    0
.eh_frame:0000000000026DF9                 db  42h ; B
.eh_frame:0000000000026DFA                 db  0Eh
.eh_frame:0000000000026DFB                 db  10h
.eh_frame:0000000000026DFC                 db  8Fh
.eh_frame:0000000000026DFD                 db    2
.eh_frame:0000000000026DFE                 db  42h ; B
.eh_frame:0000000000026DFF                 db  0Eh
.eh_frame:0000000000026E00                 db  18h
.eh_frame:0000000000026E01                 db  8Eh
.eh_frame:0000000000026E02                 db    3
.eh_frame:0000000000026E03                 db  42h ; B
.eh_frame:0000000000026E04                 db  0Eh
.eh_frame:0000000000026E05                 db  20h
.eh_frame:0000000000026E06                 db  8Dh
.eh_frame:0000000000026E07                 db    4
.eh_frame:0000000000026E08                 db  42h ; B
.eh_frame:0000000000026E09                 db  0Eh
.eh_frame:0000000000026E0A                 db  28h ; (
.eh_frame:0000000000026E0B                 db  8Ch
.eh_frame:0000000000026E0C                 db    5
.eh_frame:0000000000026E0D                 db  44h ; D
.eh_frame:0000000000026E0E                 db  0Eh
.eh_frame:0000000000026E0F                 db  30h ; 0
.eh_frame:0000000000026E10                 db  86h
.eh_frame:0000000000026E11                 db    6
.eh_frame:0000000000026E12                 db  41h ; A
.eh_frame:0000000000026E13                 db  0Eh
.eh_frame:0000000000026E14                 db  38h ; 8
.eh_frame:0000000000026E15                 db  83h
.eh_frame:0000000000026E16                 db    7
.eh_frame:0000000000026E17                 db  4Dh ; M
.eh_frame:0000000000026E18                 db  0Eh
.eh_frame:0000000000026E19                 db  60h ; `
.eh_frame:0000000000026E1A                 db    2
.eh_frame:0000000000026E1B                 db  5Ah ; Z
.eh_frame:0000000000026E1C                 db  0Eh
.eh_frame:0000000000026E1D                 db  68h ; h
.eh_frame:0000000000026E1E                 db  44h ; D
.eh_frame:0000000000026E1F                 db  0Eh
.eh_frame:0000000000026E20                 db  70h ; p
.eh_frame:0000000000026E21                 db  61h ; a
.eh_frame:0000000000026E22                 db  0Eh
.eh_frame:0000000000026E23                 db  68h ; h
.eh_frame:0000000000026E24                 db  41h ; A
.eh_frame:0000000000026E25                 db  0Eh
.eh_frame:0000000000026E26                 db  60h ; `
.eh_frame:0000000000026E27                 db  44h ; D
.eh_frame:0000000000026E28                 db  0Ah
.eh_frame:0000000000026E29                 db  0Eh
.eh_frame:0000000000026E2A                 db  38h ; 8
.eh_frame:0000000000026E2B                 db  44h ; D
.eh_frame:0000000000026E2C                 db  0Eh
.eh_frame:0000000000026E2D                 db  30h ; 0
.eh_frame:0000000000026E2E                 db  41h ; A
.eh_frame:0000000000026E2F                 db  0Eh
.eh_frame:0000000000026E30                 db  28h ; (
.eh_frame:0000000000026E31                 db  42h ; B
.eh_frame:0000000000026E32                 db  0Eh
.eh_frame:0000000000026E33                 db  20h
.eh_frame:0000000000026E34                 db  42h ; B
.eh_frame:0000000000026E35                 db  0Eh
.eh_frame:0000000000026E36                 db  18h
.eh_frame:0000000000026E37                 db  42h ; B
.eh_frame:0000000000026E38                 db  0Eh
.eh_frame:0000000000026E39                 db  10h
.eh_frame:0000000000026E3A                 db  42h ; B
.eh_frame:0000000000026E3B                 db  0Eh
.eh_frame:0000000000026E3C                 db    8
.eh_frame:0000000000026E3D                 db  45h ; E
.eh_frame:0000000000026E3E                 db  0Bh
.eh_frame:0000000000026E3F                 db    0
.eh_frame:0000000000026E40                 db  48h ; H
.eh_frame:0000000000026E41                 db    0
.eh_frame:0000000000026E42                 db    0
.eh_frame:0000000000026E43                 db    0
.eh_frame:0000000000026E44                 db  1Ch
.eh_frame:0000000000026E45                 db  34h ; 4
.eh_frame:0000000000026E46                 db    0
.eh_frame:0000000000026E47                 db    0
.eh_frame:0000000000026E48                 db 0F8h
.eh_frame:0000000000026E49                 db  7Bh ; {
.eh_frame:0000000000026E4A                 db 0FFh
.eh_frame:0000000000026E4B                 db 0FFh
.eh_frame:0000000000026E4C                 db  10h
.eh_frame:0000000000026E4D                 db    1
.eh_frame:0000000000026E4E                 db    0
.eh_frame:0000000000026E4F                 db    0
.eh_frame:0000000000026E50                 db    0
.eh_frame:0000000000026E51                 db  44h ; D
.eh_frame:0000000000026E52                 db  0Eh
.eh_frame:0000000000026E53                 db  10h
.eh_frame:0000000000026E54                 db  8Eh
.eh_frame:0000000000026E55                 db    2
.eh_frame:0000000000026E56                 db  42h ; B
.eh_frame:0000000000026E57                 db  0Eh
.eh_frame:0000000000026E58                 db  18h
.eh_frame:0000000000026E59                 db  8Dh
.eh_frame:0000000000026E5A                 db    3
.eh_frame:0000000000026E5B                 db  45h ; E
.eh_frame:0000000000026E5C                 db  0Eh
.eh_frame:0000000000026E5D                 db  20h
.eh_frame:0000000000026E5E                 db  8Ch
.eh_frame:0000000000026E5F                 db    4
.eh_frame:0000000000026E60                 db  41h ; A
.eh_frame:0000000000026E61                 db  0Eh
.eh_frame:0000000000026E62                 db  28h ; (
.eh_frame:0000000000026E63                 db  86h
.eh_frame:0000000000026E64                 db    5
.eh_frame:0000000000026E65                 db  44h ; D
.eh_frame:0000000000026E66                 db  0Eh
.eh_frame:0000000000026E67                 db  30h ; 0
.eh_frame:0000000000026E68                 db  83h
.eh_frame:0000000000026E69                 db    6
.eh_frame:0000000000026E6A                 db    2
.eh_frame:0000000000026E6B                 db 0ADh
.eh_frame:0000000000026E6C                 db  0Ah
.eh_frame:0000000000026E6D                 db  0Eh
.eh_frame:0000000000026E6E                 db  28h ; (
.eh_frame:0000000000026E6F                 db  43h ; C
.eh_frame:0000000000026E70                 db  0Eh
.eh_frame:0000000000026E71                 db  20h
.eh_frame:0000000000026E72                 db  42h ; B
.eh_frame:0000000000026E73                 db  0Eh
.eh_frame:0000000000026E74                 db  18h
.eh_frame:0000000000026E75                 db  42h ; B
.eh_frame:0000000000026E76                 db  0Eh
.eh_frame:0000000000026E77                 db  10h
.eh_frame:0000000000026E78                 db  42h ; B
.eh_frame:0000000000026E79                 db  0Eh
.eh_frame:0000000000026E7A                 db    8
.eh_frame:0000000000026E7B                 db  4Ah ; J
.eh_frame:0000000000026E7C                 db  0Bh
.eh_frame:0000000000026E7D                 db  76h ; v
.eh_frame:0000000000026E7E                 db  0Eh
.eh_frame:0000000000026E7F                 db  28h ; (
.eh_frame:0000000000026E80                 db  43h ; C
.eh_frame:0000000000026E81                 db  0Eh
.eh_frame:0000000000026E82                 db  20h
.eh_frame:0000000000026E83                 db  42h ; B
.eh_frame:0000000000026E84                 db  0Eh
.eh_frame:0000000000026E85                 db  18h
.eh_frame:0000000000026E86                 db  42h ; B
.eh_frame:0000000000026E87                 db  0Eh
.eh_frame:0000000000026E88                 db  10h
.eh_frame:0000000000026E89                 db  42h ; B
.eh_frame:0000000000026E8A                 db  0Eh
.eh_frame:0000000000026E8B                 db    8
.eh_frame:0000000000026E8C                 db  38h ; 8
.eh_frame:0000000000026E8D                 db    0
.eh_frame:0000000000026E8E                 db    0
.eh_frame:0000000000026E8F                 db    0
.eh_frame:0000000000026E90                 db  68h ; h
.eh_frame:0000000000026E91                 db  34h ; 4
.eh_frame:0000000000026E92                 db    0
.eh_frame:0000000000026E93                 db    0
.eh_frame:0000000000026E94                 db 0BCh
.eh_frame:0000000000026E95                 db  7Ch ; |
.eh_frame:0000000000026E96                 db 0FFh
.eh_frame:0000000000026E97                 db 0FFh
.eh_frame:0000000000026E98                 db  85h
.eh_frame:0000000000026E99                 db    0
.eh_frame:0000000000026E9A                 db    0
.eh_frame:0000000000026E9B                 db    0
.eh_frame:0000000000026E9C                 db    0
.eh_frame:0000000000026E9D                 db  42h ; B
.eh_frame:0000000000026E9E                 db  0Eh
.eh_frame:0000000000026E9F                 db  10h
.eh_frame:0000000000026EA0                 db  8Dh
.eh_frame:0000000000026EA1                 db    2
.eh_frame:0000000000026EA2                 db  42h ; B
.eh_frame:0000000000026EA3                 db  0Eh
.eh_frame:0000000000026EA4                 db  18h
.eh_frame:0000000000026EA5                 db  8Ch
.eh_frame:0000000000026EA6                 db    3
.eh_frame:0000000000026EA7                 db  41h ; A
.eh_frame:0000000000026EA8                 db  0Eh
.eh_frame:0000000000026EA9                 db  20h
.eh_frame:0000000000026EAA                 db  86h
.eh_frame:0000000000026EAB                 db    4
.eh_frame:0000000000026EAC                 db  41h ; A
.eh_frame:0000000000026EAD                 db  0Eh
.eh_frame:0000000000026EAE                 db  28h ; (
.eh_frame:0000000000026EAF                 db  83h
.eh_frame:0000000000026EB0                 db    5
.eh_frame:0000000000026EB1                 db  44h ; D
.eh_frame:0000000000026EB2                 db  0Eh
.eh_frame:0000000000026EB3                 db  30h ; 0
.eh_frame:0000000000026EB4                 db    2
.eh_frame:0000000000026EB5                 db  57h ; W
.eh_frame:0000000000026EB6                 db  0Ah
.eh_frame:0000000000026EB7                 db  0Eh
.eh_frame:0000000000026EB8                 db  28h ; (
.eh_frame:0000000000026EB9                 db  44h ; D
.eh_frame:0000000000026EBA                 db  0Eh
.eh_frame:0000000000026EBB                 db  20h
.eh_frame:0000000000026EBC                 db  41h ; A
.eh_frame:0000000000026EBD                 db  0Eh
.eh_frame:0000000000026EBE                 db  18h
.eh_frame:0000000000026EBF                 db  42h ; B
.eh_frame:0000000000026EC0                 db  0Eh
.eh_frame:0000000000026EC1                 db  10h
.eh_frame:0000000000026EC2                 db  42h ; B
.eh_frame:0000000000026EC3                 db  0Eh
.eh_frame:0000000000026EC4                 db    8
.eh_frame:0000000000026EC5                 db  46h ; F
.eh_frame:0000000000026EC6                 db  0Bh
.eh_frame:0000000000026EC7                 db    0
.eh_frame:0000000000026EC8                 db  18h
.eh_frame:0000000000026EC9                 db    0
.eh_frame:0000000000026ECA                 db    0
.eh_frame:0000000000026ECB                 db    0
.eh_frame:0000000000026ECC                 db 0A4h
.eh_frame:0000000000026ECD                 db  34h ; 4
.eh_frame:0000000000026ECE                 db    0
.eh_frame:0000000000026ECF                 db    0
.eh_frame:0000000000026ED0                 db  10h
.eh_frame:0000000000026ED1                 db  7Dh ; }
.eh_frame:0000000000026ED2                 db 0FFh
.eh_frame:0000000000026ED3                 db 0FFh
.eh_frame:0000000000026ED4                 db  44h ; D
.eh_frame:0000000000026ED5                 db    0
.eh_frame:0000000000026ED6                 db    0
.eh_frame:0000000000026ED7                 db    0
.eh_frame:0000000000026ED8                 db    0
.eh_frame:0000000000026ED9                 db  41h ; A
.eh_frame:0000000000026EDA                 db  0Eh
.eh_frame:0000000000026EDB                 db  10h
.eh_frame:0000000000026EDC                 db  83h
.eh_frame:0000000000026EDD                 db    2
.eh_frame:0000000000026EDE                 db    2
.eh_frame:0000000000026EDF                 db  42h ; B
.eh_frame:0000000000026EE0                 db  0Eh
.eh_frame:0000000000026EE1                 db    8
.eh_frame:0000000000026EE2                 db    0
.eh_frame:0000000000026EE3                 db    0
.eh_frame:0000000000026EE4                 db  58h ; X
.eh_frame:0000000000026EE5                 db    0
.eh_frame:0000000000026EE6                 db    0
.eh_frame:0000000000026EE7                 db    0
.eh_frame:0000000000026EE8                 db 0C0h
.eh_frame:0000000000026EE9                 db  34h ; 4
.eh_frame:0000000000026EEA                 db    0
.eh_frame:0000000000026EEB                 db    0
.eh_frame:0000000000026EEC                 db  44h ; D
.eh_frame:0000000000026EED                 db  7Dh ; }
.eh_frame:0000000000026EEE                 db 0FFh
.eh_frame:0000000000026EEF                 db 0FFh
.eh_frame:0000000000026EF0                 db  9Eh
.eh_frame:0000000000026EF1                 db    0
.eh_frame:0000000000026EF2                 db    0
.eh_frame:0000000000026EF3                 db    0
.eh_frame:0000000000026EF4                 db    0
.eh_frame:0000000000026EF5                 db  4Fh ; O
.eh_frame:0000000000026EF6                 db  0Eh
.eh_frame:0000000000026EF7                 db  10h
.eh_frame:0000000000026EF8                 db  8Dh
.eh_frame:0000000000026EF9                 db    2
.eh_frame:0000000000026EFA                 db  42h ; B
.eh_frame:0000000000026EFB                 db  0Eh
.eh_frame:0000000000026EFC                 db  18h
.eh_frame:0000000000026EFD                 db  8Ch
.eh_frame:0000000000026EFE                 db    3
.eh_frame:0000000000026EFF                 db  44h ; D
.eh_frame:0000000000026F00                 db  0Eh
.eh_frame:0000000000026F01                 db  20h
.eh_frame:0000000000026F02                 db  86h
.eh_frame:0000000000026F03                 db    4
.eh_frame:0000000000026F04                 db  41h ; A
.eh_frame:0000000000026F05                 db  0Eh
.eh_frame:0000000000026F06                 db  28h ; (
.eh_frame:0000000000026F07                 db  83h
.eh_frame:0000000000026F08                 db    5
.eh_frame:0000000000026F09                 db  4Dh ; M
.eh_frame:0000000000026F0A                 db  0Eh
.eh_frame:0000000000026F0B                 db  40h ; @
.eh_frame:0000000000026F0C                 db  67h ; g
.eh_frame:0000000000026F0D                 db  0Eh
.eh_frame:0000000000026F0E                 db  48h ; H
.eh_frame:0000000000026F0F                 db  41h ; A
.eh_frame:0000000000026F10                 db  0Eh
.eh_frame:0000000000026F11                 db  50h ; P
.eh_frame:0000000000026F12                 db  42h ; B
.eh_frame:0000000000026F13                 db  0Eh
.eh_frame:0000000000026F14                 db  58h ; X
.eh_frame:0000000000026F15                 db  42h ; B
.eh_frame:0000000000026F16                 db  0Eh
.eh_frame:0000000000026F17                 db  60h ; `
.eh_frame:0000000000026F18                 db  52h ; R
.eh_frame:0000000000026F19                 db  0Eh
.eh_frame:0000000000026F1A                 db  40h ; @
.eh_frame:0000000000026F1B                 db  49h ; I
.eh_frame:0000000000026F1C                 db  0Ah
.eh_frame:0000000000026F1D                 db  0Eh
.eh_frame:0000000000026F1E                 db  28h ; (
.eh_frame:0000000000026F1F                 db  41h ; A
.eh_frame:0000000000026F20                 db  0Eh
.eh_frame:0000000000026F21                 db  20h
.eh_frame:0000000000026F22                 db  44h ; D
.eh_frame:0000000000026F23                 db  0Eh
.eh_frame:0000000000026F24                 db  18h
.eh_frame:0000000000026F25                 db  42h ; B
.eh_frame:0000000000026F26                 db  0Eh
.eh_frame:0000000000026F27                 db  10h
.eh_frame:0000000000026F28                 db  42h ; B
.eh_frame:0000000000026F29                 db  0Eh
.eh_frame:0000000000026F2A                 db    8
.eh_frame:0000000000026F2B                 db  45h ; E
.eh_frame:0000000000026F2C                 db  0Bh
.eh_frame:0000000000026F2D                 db  52h ; R
.eh_frame:0000000000026F2E                 db  0Eh
.eh_frame:0000000000026F2F                 db  48h ; H
.eh_frame:0000000000026F30                 db  41h ; A
.eh_frame:0000000000026F31                 db  0Eh
.eh_frame:0000000000026F32                 db  50h ; P
.eh_frame:0000000000026F33                 db  42h ; B
.eh_frame:0000000000026F34                 db  0Eh
.eh_frame:0000000000026F35                 db  58h ; X
.eh_frame:0000000000026F36                 db  42h ; B
.eh_frame:0000000000026F37                 db  0Eh
.eh_frame:0000000000026F38                 db  60h ; `
.eh_frame:0000000000026F39                 db  49h ; I
.eh_frame:0000000000026F3A                 db  0Eh
.eh_frame:0000000000026F3B                 db    8
.eh_frame:0000000000026F3C                 db 0C3h
.eh_frame:0000000000026F3D                 db 0C6h
.eh_frame:0000000000026F3E                 db 0CCh
.eh_frame:0000000000026F3F                 db 0CDh
.eh_frame:0000000000026F40                 db  1Ch
.eh_frame:0000000000026F41                 db    0
.eh_frame:0000000000026F42                 db    0
.eh_frame:0000000000026F43                 db    0
.eh_frame:0000000000026F44                 db  1Ch
.eh_frame:0000000000026F45                 db  35h ; 5
.eh_frame:0000000000026F46                 db    0
.eh_frame:0000000000026F47                 db    0
.eh_frame:0000000000026F48                 db  88h
.eh_frame:0000000000026F49                 db  7Dh ; }
.eh_frame:0000000000026F4A                 db 0FFh
.eh_frame:0000000000026F4B                 db 0FFh
.eh_frame:0000000000026F4C                 db  18h
.eh_frame:0000000000026F4D                 db    0
.eh_frame:0000000000026F4E                 db    0
.eh_frame:0000000000026F4F                 db    0
.eh_frame:0000000000026F50                 db    0
.eh_frame:0000000000026F51                 db  44h ; D
.eh_frame:0000000000026F52                 db  0Eh
.eh_frame:0000000000026F53                 db  10h
.eh_frame:0000000000026F54                 db  45h ; E
.eh_frame:0000000000026F55                 db  0Eh
.eh_frame:0000000000026F56                 db  18h
.eh_frame:0000000000026F57                 db  42h ; B
.eh_frame:0000000000026F58                 db  0Eh
.eh_frame:0000000000026F59                 db  20h
.eh_frame:0000000000026F5A                 db  4Ch ; L
.eh_frame:0000000000026F5B                 db  0Eh
.eh_frame:0000000000026F5C                 db    8
.eh_frame:0000000000026F5D                 db    0
.eh_frame:0000000000026F5E                 db    0
.eh_frame:0000000000026F5F                 db    0
.eh_frame:0000000000026F60                 db  1Ch
.eh_frame:0000000000026F61                 db    0
.eh_frame:0000000000026F62                 db    0
.eh_frame:0000000000026F63                 db    0
.eh_frame:0000000000026F64                 db  3Ch ; <
.eh_frame:0000000000026F65                 db  35h ; 5
.eh_frame:0000000000026F66                 db    0
.eh_frame:0000000000026F67                 db    0
.eh_frame:0000000000026F68                 db  88h
.eh_frame:0000000000026F69                 db  7Dh ; }
.eh_frame:0000000000026F6A                 db 0FFh
.eh_frame:0000000000026F6B                 db 0FFh
.eh_frame:0000000000026F6C                 db  15h
.eh_frame:0000000000026F6D                 db    0
.eh_frame:0000000000026F6E                 db    0
.eh_frame:0000000000026F6F                 db    0
.eh_frame:0000000000026F70                 db    0
.eh_frame:0000000000026F71                 db  44h ; D
.eh_frame:0000000000026F72                 db  0Eh
.eh_frame:0000000000026F73                 db  10h
.eh_frame:0000000000026F74                 db  42h ; B
.eh_frame:0000000000026F75                 db  0Eh
.eh_frame:0000000000026F76                 db  18h
.eh_frame:0000000000026F77                 db  42h ; B
.eh_frame:0000000000026F78                 db  0Eh
.eh_frame:0000000000026F79                 db  20h
.eh_frame:0000000000026F7A                 db  4Ch ; L
.eh_frame:0000000000026F7B                 db  0Eh
.eh_frame:0000000000026F7C                 db    8
.eh_frame:0000000000026F7D                 db    0
.eh_frame:0000000000026F7E                 db    0
.eh_frame:0000000000026F7F                 db    0
.eh_frame:0000000000026F80                 db  20h
.eh_frame:0000000000026F81                 db    0
.eh_frame:0000000000026F82                 db    0
.eh_frame:0000000000026F83                 db    0
.eh_frame:0000000000026F84                 db  5Ch ; \
.eh_frame:0000000000026F85                 db  35h ; 5
.eh_frame:0000000000026F86                 db    0
.eh_frame:0000000000026F87                 db    0
.eh_frame:0000000000026F88                 db  88h
.eh_frame:0000000000026F89                 db  7Dh ; }
.eh_frame:0000000000026F8A                 db 0FFh
.eh_frame:0000000000026F8B                 db 0FFh
.eh_frame:0000000000026F8C                 db  1Ah
.eh_frame:0000000000026F8D                 db    0
.eh_frame:0000000000026F8E                 db    0
.eh_frame:0000000000026F8F                 db    0
.eh_frame:0000000000026F90                 db    0
.eh_frame:0000000000026F91                 db  44h ; D
.eh_frame:0000000000026F92                 db  0Eh
.eh_frame:0000000000026F93                 db  10h
.eh_frame:0000000000026F94                 db  42h ; B
.eh_frame:0000000000026F95                 db  0Eh
.eh_frame:0000000000026F96                 db  18h
.eh_frame:0000000000026F97                 db  44h ; D
.eh_frame:0000000000026F98                 db  0Eh
.eh_frame:0000000000026F99                 db  20h
.eh_frame:0000000000026F9A                 db  44h ; D
.eh_frame:0000000000026F9B                 db  0Eh
.eh_frame:0000000000026F9C                 db  28h ; (
.eh_frame:0000000000026F9D                 db  42h ; B
.eh_frame:0000000000026F9E                 db  0Eh
.eh_frame:0000000000026F9F                 db  30h ; 0
.eh_frame:0000000000026FA0                 db  49h ; I
.eh_frame:0000000000026FA1                 db  0Eh
.eh_frame:0000000000026FA2                 db    8
.eh_frame:0000000000026FA3                 db    0
.eh_frame:0000000000026FA4                 db  20h
.eh_frame:0000000000026FA5                 db    0
.eh_frame:0000000000026FA6                 db    0
.eh_frame:0000000000026FA7                 db    0
.eh_frame:0000000000026FA8                 db  80h
.eh_frame:0000000000026FA9                 db  35h ; 5
.eh_frame:0000000000026FAA                 db    0
.eh_frame:0000000000026FAB                 db    0
.eh_frame:0000000000026FAC                 db  84h
.eh_frame:0000000000026FAD                 db  7Dh ; }
.eh_frame:0000000000026FAE                 db 0FFh
.eh_frame:0000000000026FAF                 db 0FFh
.eh_frame:0000000000026FB0                 db  1Ch
.eh_frame:0000000000026FB1                 db    0
.eh_frame:0000000000026FB2                 db    0
.eh_frame:0000000000026FB3                 db    0
.eh_frame:0000000000026FB4                 db    0
.eh_frame:0000000000026FB5                 db  44h ; D
.eh_frame:0000000000026FB6                 db  0Eh
.eh_frame:0000000000026FB7                 db  10h
.eh_frame:0000000000026FB8                 db  42h ; B
.eh_frame:0000000000026FB9                 db  0Eh
.eh_frame:0000000000026FBA                 db  18h
.eh_frame:0000000000026FBB                 db  44h ; D
.eh_frame:0000000000026FBC                 db  0Eh
.eh_frame:0000000000026FBD                 db  20h
.eh_frame:0000000000026FBE                 db  44h ; D
.eh_frame:0000000000026FBF                 db  0Eh
.eh_frame:0000000000026FC0                 db  28h ; (
.eh_frame:0000000000026FC1                 db  44h ; D
.eh_frame:0000000000026FC2                 db  0Eh
.eh_frame:0000000000026FC3                 db  30h ; 0
.eh_frame:0000000000026FC4                 db  49h ; I
.eh_frame:0000000000026FC5                 db  0Eh
.eh_frame:0000000000026FC6                 db    8
.eh_frame:0000000000026FC7                 db    0
.eh_frame:0000000000026FC8                 db  14h
.eh_frame:0000000000026FC9                 db    0
.eh_frame:0000000000026FCA                 db    0
.eh_frame:0000000000026FCB                 db    0
.eh_frame:0000000000026FCC                 db 0A4h
.eh_frame:0000000000026FCD                 db  35h ; 5
.eh_frame:0000000000026FCE                 db    0
.eh_frame:0000000000026FCF                 db    0
.eh_frame:0000000000026FD0                 db  80h
.eh_frame:0000000000026FD1                 db  7Dh ; }
.eh_frame:0000000000026FD2                 db 0FFh
.eh_frame:0000000000026FD3                 db 0FFh
.eh_frame:0000000000026FD4                 db  41h ; A
.eh_frame:0000000000026FD5                 db    0
.eh_frame:0000000000026FD6                 db    0
.eh_frame:0000000000026FD7                 db    0
.eh_frame:0000000000026FD8                 db    0
.eh_frame:0000000000026FD9                 db    0
.eh_frame:0000000000026FDA                 db    0
.eh_frame:0000000000026FDB                 db    0
.eh_frame:0000000000026FDC                 db    0
.eh_frame:0000000000026FDD                 db    0
.eh_frame:0000000000026FDE                 db    0
.eh_frame:0000000000026FDF                 db    0
.eh_frame:0000000000026FE0                 db  10h
.eh_frame:0000000000026FE1                 db    0
.eh_frame:0000000000026FE2                 db    0
.eh_frame:0000000000026FE3                 db    0
.eh_frame:0000000000026FE4                 db 0BCh
.eh_frame:0000000000026FE5                 db  35h ; 5
.eh_frame:0000000000026FE6                 db    0
.eh_frame:0000000000026FE7                 db    0
.eh_frame:0000000000026FE8                 db 0B8h
.eh_frame:0000000000026FE9                 db  7Dh ; }
.eh_frame:0000000000026FEA                 db 0FFh
.eh_frame:0000000000026FEB                 db 0FFh
.eh_frame:0000000000026FEC                 db  2Ch ; ,
.eh_frame:0000000000026FED                 db    0
.eh_frame:0000000000026FEE                 db    0
.eh_frame:0000000000026FEF                 db    0
.eh_frame:0000000000026FF0                 db    0
.eh_frame:0000000000026FF1                 db    0
.eh_frame:0000000000026FF2                 db    0
.eh_frame:0000000000026FF3                 db    0
.eh_frame:0000000000026FF4                 db  18h
.eh_frame:0000000000026FF5                 db    0
.eh_frame:0000000000026FF6                 db    0
.eh_frame:0000000000026FF7                 db    0
.eh_frame:0000000000026FF8                 db 0D0h
.eh_frame:0000000000026FF9                 db  35h ; 5
.eh_frame:0000000000026FFA                 db    0
.eh_frame:0000000000026FFB                 db    0
.eh_frame:0000000000026FFC                 db 0D4h
.eh_frame:0000000000026FFD                 db  7Dh ; }
.eh_frame:0000000000026FFE                 db 0FFh
.eh_frame:0000000000026FFF                 db 0FFh
.eh_frame:0000000000027000                 db  2Ah ; *
.eh_frame:0000000000027001                 db    0
.eh_frame:0000000000027002                 db    0
.eh_frame:0000000000027003                 db    0
.eh_frame:0000000000027004                 db    0
.eh_frame:0000000000027005                 db  46h ; F
.eh_frame:0000000000027006                 db  0Eh
.eh_frame:0000000000027007                 db  10h
.eh_frame:0000000000027008                 db  83h
.eh_frame:0000000000027009                 db    2
.eh_frame:000000000002700A                 db  5Bh ; [
.eh_frame:000000000002700B                 db  0Eh
.eh_frame:000000000002700C                 db    8
.eh_frame:000000000002700D                 db  47h ; G
.eh_frame:000000000002700E                 db 0C3h
.eh_frame:000000000002700F                 db    0
.eh_frame:0000000000027010                 db  38h ; 8
.eh_frame:0000000000027011                 db    0
.eh_frame:0000000000027012                 db    0
.eh_frame:0000000000027013                 db    0
.eh_frame:0000000000027014                 db 0ECh
.eh_frame:0000000000027015                 db  35h ; 5
.eh_frame:0000000000027016                 db    0
.eh_frame:0000000000027017                 db    0
.eh_frame:0000000000027018                 db 0E8h
.eh_frame:0000000000027019                 db  7Dh ; }
.eh_frame:000000000002701A                 db 0FFh
.eh_frame:000000000002701B                 db 0FFh
.eh_frame:000000000002701C                 db  5Dh ; ]
.eh_frame:000000000002701D                 db    0
.eh_frame:000000000002701E                 db    0
.eh_frame:000000000002701F                 db    0
.eh_frame:0000000000027020                 db    0
.eh_frame:0000000000027021                 db  42h ; B
.eh_frame:0000000000027022                 db  0Eh
.eh_frame:0000000000027023                 db  10h
.eh_frame:0000000000027024                 db  8Dh
.eh_frame:0000000000027025                 db    2
.eh_frame:0000000000027026                 db  42h ; B
.eh_frame:0000000000027027                 db  0Eh
.eh_frame:0000000000027028                 db  18h
.eh_frame:0000000000027029                 db  8Ch
.eh_frame:000000000002702A                 db    3
.eh_frame:000000000002702B                 db  41h ; A
.eh_frame:000000000002702C                 db  0Eh
.eh_frame:000000000002702D                 db  20h
.eh_frame:000000000002702E                 db  86h
.eh_frame:000000000002702F                 db    4
.eh_frame:0000000000027030                 db  41h ; A
.eh_frame:0000000000027031                 db  0Eh
.eh_frame:0000000000027032                 db  28h ; (
.eh_frame:0000000000027033                 db  83h
.eh_frame:0000000000027034                 db    5
.eh_frame:0000000000027035                 db  47h ; G
.eh_frame:0000000000027036                 db  0Eh
.eh_frame:0000000000027037                 db  30h ; 0
.eh_frame:0000000000027038                 db  75h ; u
.eh_frame:0000000000027039                 db  0Ah
.eh_frame:000000000002703A                 db  0Eh
.eh_frame:000000000002703B                 db  28h ; (
.eh_frame:000000000002703C                 db  44h ; D
.eh_frame:000000000002703D                 db  0Eh
.eh_frame:000000000002703E                 db  20h
.eh_frame:000000000002703F                 db  41h ; A
.eh_frame:0000000000027040                 db  0Eh
.eh_frame:0000000000027041                 db  18h
.eh_frame:0000000000027042                 db  42h ; B
.eh_frame:0000000000027043                 db  0Eh
.eh_frame:0000000000027044                 db  10h
.eh_frame:0000000000027045                 db  42h ; B
.eh_frame:0000000000027046                 db  0Eh
.eh_frame:0000000000027047                 db    8
.eh_frame:0000000000027048                 db  45h ; E
.eh_frame:0000000000027049                 db  0Bh
.eh_frame:000000000002704A                 db    0
.eh_frame:000000000002704B                 db    0
.eh_frame:000000000002704C                 db  34h ; 4
.eh_frame:000000000002704D                 db    0
.eh_frame:000000000002704E                 db    0
.eh_frame:000000000002704F                 db    0
.eh_frame:0000000000027050                 db  28h ; (
.eh_frame:0000000000027051                 db  36h ; 6
.eh_frame:0000000000027052                 db    0
.eh_frame:0000000000027053                 db    0
.eh_frame:0000000000027054                 db  0Ch
.eh_frame:0000000000027055                 db  7Eh ; ~
.eh_frame:0000000000027056                 db 0FFh
.eh_frame:0000000000027057                 db 0FFh
.eh_frame:0000000000027058                 db  8Fh
.eh_frame:0000000000027059                 db    0
.eh_frame:000000000002705A                 db    0
.eh_frame:000000000002705B                 db    0
.eh_frame:000000000002705C                 db    0
.eh_frame:000000000002705D                 db  45h ; E
.eh_frame:000000000002705E                 db  0Eh
.eh_frame:000000000002705F                 db  10h
.eh_frame:0000000000027060                 db  8Ch
.eh_frame:0000000000027061                 db    2
.eh_frame:0000000000027062                 db  41h ; A
.eh_frame:0000000000027063                 db  0Eh
.eh_frame:0000000000027064                 db  18h
.eh_frame:0000000000027065                 db  86h
.eh_frame:0000000000027066                 db    3
.eh_frame:0000000000027067                 db  41h ; A
.eh_frame:0000000000027068                 db  0Eh
.eh_frame:0000000000027069                 db  20h
.eh_frame:000000000002706A                 db  83h
.eh_frame:000000000002706B                 db    4
.eh_frame:000000000002706C                 db    2
.eh_frame:000000000002706D                 db  58h ; X
.eh_frame:000000000002706E                 db  0Ah
.eh_frame:000000000002706F                 db  0Eh
.eh_frame:0000000000027070                 db  18h
.eh_frame:0000000000027071                 db  41h ; A
.eh_frame:0000000000027072                 db  0Eh
.eh_frame:0000000000027073                 db  10h
.eh_frame:0000000000027074                 db  42h ; B
.eh_frame:0000000000027075                 db  0Eh
.eh_frame:0000000000027076                 db    8
.eh_frame:0000000000027077                 db  46h ; F
.eh_frame:0000000000027078                 db  0Bh
.eh_frame:0000000000027079                 db  63h ; c
.eh_frame:000000000002707A                 db  0Eh
.eh_frame:000000000002707B                 db  18h
.eh_frame:000000000002707C                 db  41h ; A
.eh_frame:000000000002707D                 db  0Eh
.eh_frame:000000000002707E                 db  10h
.eh_frame:000000000002707F                 db  42h ; B
.eh_frame:0000000000027080                 db  0Eh
.eh_frame:0000000000027081                 db    8
.eh_frame:0000000000027082                 db    0
.eh_frame:0000000000027083                 db    0
.eh_frame:0000000000027084                 db  48h ; H
.eh_frame:0000000000027085                 db    0
.eh_frame:0000000000027086                 db    0
.eh_frame:0000000000027087                 db    0
.eh_frame:0000000000027088                 db  60h ; `
.eh_frame:0000000000027089                 db  36h ; 6
.eh_frame:000000000002708A                 db    0
.eh_frame:000000000002708B                 db    0
.eh_frame:000000000002708C                 db  64h ; d
.eh_frame:000000000002708D                 db  7Eh ; ~
.eh_frame:000000000002708E                 db 0FFh
.eh_frame:000000000002708F                 db 0FFh
.eh_frame:0000000000027090                 db  36h ; 6
.eh_frame:0000000000027091                 db    1
.eh_frame:0000000000027092                 db    0
.eh_frame:0000000000027093                 db    0
.eh_frame:0000000000027094                 db    0
.eh_frame:0000000000027095                 db  42h ; B
.eh_frame:0000000000027096                 db  0Eh
.eh_frame:0000000000027097                 db  10h
.eh_frame:0000000000027098                 db  8Fh
.eh_frame:0000000000027099                 db    2
.eh_frame:000000000002709A                 db  42h ; B
.eh_frame:000000000002709B                 db  0Eh
.eh_frame:000000000002709C                 db  18h
.eh_frame:000000000002709D                 db  8Eh
.eh_frame:000000000002709E                 db    3
.eh_frame:000000000002709F                 db  47h ; G
.eh_frame:00000000000270A0                 db  0Eh
.eh_frame:00000000000270A1                 db  20h
.eh_frame:00000000000270A2                 db  8Dh
.eh_frame:00000000000270A3                 db    4
.eh_frame:00000000000270A4                 db  42h ; B
.eh_frame:00000000000270A5                 db  0Eh
.eh_frame:00000000000270A6                 db  28h ; (
.eh_frame:00000000000270A7                 db  8Ch
.eh_frame:00000000000270A8                 db    5
.eh_frame:00000000000270A9                 db  41h ; A
.eh_frame:00000000000270AA                 db  0Eh
.eh_frame:00000000000270AB                 db  30h ; 0
.eh_frame:00000000000270AC                 db  86h
.eh_frame:00000000000270AD                 db    6
.eh_frame:00000000000270AE                 db  41h ; A
.eh_frame:00000000000270AF                 db  0Eh
.eh_frame:00000000000270B0                 db  38h ; 8
.eh_frame:00000000000270B1                 db  83h
.eh_frame:00000000000270B2                 db    7
.eh_frame:00000000000270B3                 db  44h ; D
.eh_frame:00000000000270B4                 db  0Eh
.eh_frame:00000000000270B5                 db  40h ; @
.eh_frame:00000000000270B6                 db    2
.eh_frame:00000000000270B7                 db 0A1h
.eh_frame:00000000000270B8                 db  0Ah
.eh_frame:00000000000270B9                 db  0Eh
.eh_frame:00000000000270BA                 db  38h ; 8
.eh_frame:00000000000270BB                 db  41h ; A
.eh_frame:00000000000270BC                 db  0Eh
.eh_frame:00000000000270BD                 db  30h ; 0
.eh_frame:00000000000270BE                 db  41h ; A
.eh_frame:00000000000270BF                 db  0Eh
.eh_frame:00000000000270C0                 db  28h ; (
.eh_frame:00000000000270C1                 db  42h ; B
.eh_frame:00000000000270C2                 db  0Eh
.eh_frame:00000000000270C3                 db  20h
.eh_frame:00000000000270C4                 db  42h ; B
.eh_frame:00000000000270C5                 db  0Eh
.eh_frame:00000000000270C6                 db  18h
.eh_frame:00000000000270C7                 db  42h ; B
.eh_frame:00000000000270C8                 db  0Eh
.eh_frame:00000000000270C9                 db  10h
.eh_frame:00000000000270CA                 db  42h ; B
.eh_frame:00000000000270CB                 db  0Eh
.eh_frame:00000000000270CC                 db    8
.eh_frame:00000000000270CD                 db  42h ; B
.eh_frame:00000000000270CE                 db  0Bh
.eh_frame:00000000000270CF                 db    0
.eh_frame:00000000000270D0                 db  50h ; P
.eh_frame:00000000000270D1                 db    0
.eh_frame:00000000000270D2                 db    0
.eh_frame:00000000000270D3                 db    0
.eh_frame:00000000000270D4                 db 0ACh
.eh_frame:00000000000270D5                 db  36h ; 6
.eh_frame:00000000000270D6                 db    0
.eh_frame:00000000000270D7                 db    0
.eh_frame:00000000000270D8                 db  58h ; X
.eh_frame:00000000000270D9                 db  7Fh ; 
.eh_frame:00000000000270DA                 db 0FFh
.eh_frame:00000000000270DB                 db 0FFh
.eh_frame:00000000000270DC                 db 0DFh
.eh_frame:00000000000270DD                 db    0
.eh_frame:00000000000270DE                 db    0
.eh_frame:00000000000270DF                 db    0
.eh_frame:00000000000270E0                 db    0
.eh_frame:00000000000270E1                 db  42h ; B
.eh_frame:00000000000270E2                 db  0Eh
.eh_frame:00000000000270E3                 db  10h
.eh_frame:00000000000270E4                 db  8Ch
.eh_frame:00000000000270E5                 db    2
.eh_frame:00000000000270E6                 db  41h ; A
.eh_frame:00000000000270E7                 db  0Eh
.eh_frame:00000000000270E8                 db  18h
.eh_frame:00000000000270E9                 db  86h
.eh_frame:00000000000270EA                 db    3
.eh_frame:00000000000270EB                 db  44h ; D
.eh_frame:00000000000270EC                 db  0Eh
.eh_frame:00000000000270ED                 db  20h
.eh_frame:00000000000270EE                 db  83h
.eh_frame:00000000000270EF                 db    4
.eh_frame:00000000000270F0                 db  4Bh ; K
.eh_frame:00000000000270F1                 db  0Eh
.eh_frame:00000000000270F2                 db  30h ; 0
.eh_frame:00000000000270F3                 db    2
.eh_frame:00000000000270F4                 db  6Fh ; o
.eh_frame:00000000000270F5                 db  0Ah
.eh_frame:00000000000270F6                 db  0Eh
.eh_frame:00000000000270F7                 db  20h
.eh_frame:00000000000270F8                 db  44h ; D
.eh_frame:00000000000270F9                 db  0Eh
.eh_frame:00000000000270FA                 db  18h
.eh_frame:00000000000270FB                 db  41h ; A
.eh_frame:00000000000270FC                 db  0Eh
.eh_frame:00000000000270FD                 db  10h
.eh_frame:00000000000270FE                 db  42h ; B
.eh_frame:00000000000270FF                 db  0Eh
.eh_frame:0000000000027100                 db    8
.eh_frame:0000000000027101                 db  48h ; H
.eh_frame:0000000000027102                 db  0Bh
.eh_frame:0000000000027103                 db  5Ah ; Z
.eh_frame:0000000000027104                 db  0Ah
.eh_frame:0000000000027105                 db  0Eh
.eh_frame:0000000000027106                 db  20h
.eh_frame:0000000000027107                 db  44h ; D
.eh_frame:0000000000027108                 db  0Eh
.eh_frame:0000000000027109                 db  18h
.eh_frame:000000000002710A                 db  41h ; A
.eh_frame:000000000002710B                 db  0Eh
.eh_frame:000000000002710C                 db  10h
.eh_frame:000000000002710D                 db  42h ; B
.eh_frame:000000000002710E                 db  0Eh
.eh_frame:000000000002710F                 db    8
.eh_frame:0000000000027110                 db  47h ; G
.eh_frame:0000000000027111                 db  0Bh
.eh_frame:0000000000027112                 db  54h ; T
.eh_frame:0000000000027113                 db  0Ah
.eh_frame:0000000000027114                 db  0Eh
.eh_frame:0000000000027115                 db  20h
.eh_frame:0000000000027116                 db  44h ; D
.eh_frame:0000000000027117                 db  0Eh
.eh_frame:0000000000027118                 db  18h
.eh_frame:0000000000027119                 db  41h ; A
.eh_frame:000000000002711A                 db  0Eh
.eh_frame:000000000002711B                 db  10h
.eh_frame:000000000002711C                 db  42h ; B
.eh_frame:000000000002711D                 db  0Eh
.eh_frame:000000000002711E                 db    8
.eh_frame:000000000002711F                 db  45h ; E
.eh_frame:0000000000027120                 db  0Bh
.eh_frame:0000000000027121                 db    0
.eh_frame:0000000000027122                 db    0
.eh_frame:0000000000027123                 db    0
.eh_frame:0000000000027124                 db  10h
.eh_frame:0000000000027125                 db    0
.eh_frame:0000000000027126                 db    0
.eh_frame:0000000000027127                 db    0
.eh_frame:0000000000027128                 db    0
.eh_frame:0000000000027129                 db  37h ; 7
.eh_frame:000000000002712A                 db    0
.eh_frame:000000000002712B                 db    0
.eh_frame:000000000002712C                 db 0E4h
.eh_frame:000000000002712D                 db  7Fh ; 
.eh_frame:000000000002712E                 db 0FFh
.eh_frame:000000000002712F                 db 0FFh
.eh_frame:0000000000027130                 db  0Ch
.eh_frame:0000000000027131                 db    0
.eh_frame:0000000000027132                 db    0
.eh_frame:0000000000027133                 db    0
.eh_frame:0000000000027134                 db    0
.eh_frame:0000000000027135                 db    0
.eh_frame:0000000000027136                 db    0
.eh_frame:0000000000027137                 db    0
.eh_frame:0000000000027138                 db  5Ch ; \
.eh_frame:0000000000027139                 db    0
.eh_frame:000000000002713A                 db    0
.eh_frame:000000000002713B                 db    0
.eh_frame:000000000002713C                 db  14h
.eh_frame:000000000002713D                 db  37h ; 7
.eh_frame:000000000002713E                 db    0
.eh_frame:000000000002713F                 db    0
.eh_frame:0000000000027140                 db 0E0h
.eh_frame:0000000000027141                 db  7Fh ; 
.eh_frame:0000000000027142                 db 0FFh
.eh_frame:0000000000027143                 db 0FFh
.eh_frame:0000000000027144                 db 0A3h
.eh_frame:0000000000027145                 db    0
.eh_frame:0000000000027146                 db    0
.eh_frame:0000000000027147                 db    0
.eh_frame:0000000000027148                 db    0
.eh_frame:0000000000027149                 db  42h ; B
.eh_frame:000000000002714A                 db  0Eh
.eh_frame:000000000002714B                 db  10h
.eh_frame:000000000002714C                 db  8Dh
.eh_frame:000000000002714D                 db    2
.eh_frame:000000000002714E                 db  42h ; B
.eh_frame:000000000002714F                 db  0Eh
.eh_frame:0000000000027150                 db  18h
.eh_frame:0000000000027151                 db  8Ch
.eh_frame:0000000000027152                 db    3
.eh_frame:0000000000027153                 db  41h ; A
.eh_frame:0000000000027154                 db  0Eh
.eh_frame:0000000000027155                 db  20h
.eh_frame:0000000000027156                 db  86h
.eh_frame:0000000000027157                 db    4
.eh_frame:0000000000027158                 db  41h ; A
.eh_frame:0000000000027159                 db  0Eh
.eh_frame:000000000002715A                 db  28h ; (
.eh_frame:000000000002715B                 db  83h
.eh_frame:000000000002715C                 db    5
.eh_frame:000000000002715D                 db  47h ; G
.eh_frame:000000000002715E                 db  0Eh
.eh_frame:000000000002715F                 db  30h ; 0
.eh_frame:0000000000027160                 db    2
.eh_frame:0000000000027161                 db  41h ; A
.eh_frame:0000000000027162                 db  0Ah
.eh_frame:0000000000027163                 db  0Eh
.eh_frame:0000000000027164                 db  28h ; (
.eh_frame:0000000000027165                 db  44h ; D
.eh_frame:0000000000027166                 db  0Eh
.eh_frame:0000000000027167                 db  20h
.eh_frame:0000000000027168                 db  41h ; A
.eh_frame:0000000000027169                 db  0Eh
.eh_frame:000000000002716A                 db  18h
.eh_frame:000000000002716B                 db  42h ; B
.eh_frame:000000000002716C                 db  0Eh
.eh_frame:000000000002716D                 db  10h
.eh_frame:000000000002716E                 db  42h ; B
.eh_frame:000000000002716F                 db  0Eh
.eh_frame:0000000000027170                 db    8
.eh_frame:0000000000027171                 db  49h ; I
.eh_frame:0000000000027172                 db  0Bh
.eh_frame:0000000000027173                 db  52h ; R
.eh_frame:0000000000027174                 db  0Ah
.eh_frame:0000000000027175                 db  0Eh
.eh_frame:0000000000027176                 db  28h ; (
.eh_frame:0000000000027177                 db  43h ; C
.eh_frame:0000000000027178                 db  0Eh
.eh_frame:0000000000027179                 db  20h
.eh_frame:000000000002717A                 db  41h ; A
.eh_frame:000000000002717B                 db  0Eh
.eh_frame:000000000002717C                 db  18h
.eh_frame:000000000002717D                 db  42h ; B
.eh_frame:000000000002717E                 db  0Eh
.eh_frame:000000000002717F                 db  10h
.eh_frame:0000000000027180                 db  42h ; B
.eh_frame:0000000000027181                 db  0Eh
.eh_frame:0000000000027182                 db    8
.eh_frame:0000000000027183                 db  46h ; F
.eh_frame:0000000000027184                 db  0Bh
.eh_frame:0000000000027185                 db  44h ; D
.eh_frame:0000000000027186                 db  0Ah
.eh_frame:0000000000027187                 db  0Eh
.eh_frame:0000000000027188                 db  28h ; (
.eh_frame:0000000000027189                 db  47h ; G
.eh_frame:000000000002718A                 db  0Eh
.eh_frame:000000000002718B                 db  20h
.eh_frame:000000000002718C                 db  41h ; A
.eh_frame:000000000002718D                 db  0Eh
.eh_frame:000000000002718E                 db  18h
.eh_frame:000000000002718F                 db  42h ; B
.eh_frame:0000000000027190                 db  0Eh
.eh_frame:0000000000027191                 db  10h
.eh_frame:0000000000027192                 db  42h ; B
.eh_frame:0000000000027193                 db  0Eh
.eh_frame:0000000000027194                 db    8
.eh_frame:0000000000027195                 db  45h ; E
.eh_frame:0000000000027196                 db  0Bh
.eh_frame:0000000000027197                 db    0
.eh_frame:0000000000027198                 db  34h ; 4
.eh_frame:0000000000027199                 db    0
.eh_frame:000000000002719A                 db    0
.eh_frame:000000000002719B                 db    0
.eh_frame:000000000002719C                 db  74h ; t
.eh_frame:000000000002719D                 db  37h ; 7
.eh_frame:000000000002719E                 db    0
.eh_frame:000000000002719F                 db    0
.eh_frame:00000000000271A0                 db  30h ; 0
.eh_frame:00000000000271A1                 db  80h
.eh_frame:00000000000271A2                 db 0FFh
.eh_frame:00000000000271A3                 db 0FFh
.eh_frame:00000000000271A4                 db  41h ; A
.eh_frame:00000000000271A5                 db    1
.eh_frame:00000000000271A6                 db    0
.eh_frame:00000000000271A7                 db    0
.eh_frame:00000000000271A8                 db    0
.eh_frame:00000000000271A9                 db  42h ; B
.eh_frame:00000000000271AA                 db  0Eh
.eh_frame:00000000000271AB                 db  10h
.eh_frame:00000000000271AC                 db  8Ch
.eh_frame:00000000000271AD                 db    2
.eh_frame:00000000000271AE                 db  41h ; A
.eh_frame:00000000000271AF                 db  0Eh
.eh_frame:00000000000271B0                 db  18h
.eh_frame:00000000000271B1                 db  86h
.eh_frame:00000000000271B2                 db    3
.eh_frame:00000000000271B3                 db  41h ; A
.eh_frame:00000000000271B4                 db  0Eh
.eh_frame:00000000000271B5                 db  20h
.eh_frame:00000000000271B6                 db  83h
.eh_frame:00000000000271B7                 db    4
.eh_frame:00000000000271B8                 db  47h ; G
.eh_frame:00000000000271B9                 db  0Eh
.eh_frame:00000000000271BA                 db  70h ; p
.eh_frame:00000000000271BB                 db    2
.eh_frame:00000000000271BC                 db  8Bh
.eh_frame:00000000000271BD                 db  0Ah
.eh_frame:00000000000271BE                 db  0Eh
.eh_frame:00000000000271BF                 db  20h
.eh_frame:00000000000271C0                 db  41h ; A
.eh_frame:00000000000271C1                 db  0Eh
.eh_frame:00000000000271C2                 db  18h
.eh_frame:00000000000271C3                 db  41h ; A
.eh_frame:00000000000271C4                 db  0Eh
.eh_frame:00000000000271C5                 db  10h
.eh_frame:00000000000271C6                 db  42h ; B
.eh_frame:00000000000271C7                 db  0Eh
.eh_frame:00000000000271C8                 db    8
.eh_frame:00000000000271C9                 db  46h ; F
.eh_frame:00000000000271CA                 db  0Bh
.eh_frame:00000000000271CB                 db    0
.eh_frame:00000000000271CC                 db    0
.eh_frame:00000000000271CD                 db    0
.eh_frame:00000000000271CE                 db    0
.eh_frame:00000000000271CF                 db    0
.eh_frame:00000000000271D0                 db  4Ch ; L
.eh_frame:00000000000271D1                 db    0
.eh_frame:00000000000271D2                 db    0
.eh_frame:00000000000271D3                 db    0
.eh_frame:00000000000271D4                 db 0ACh
.eh_frame:00000000000271D5                 db  37h ; 7
.eh_frame:00000000000271D6                 db    0
.eh_frame:00000000000271D7                 db    0
.eh_frame:00000000000271D8                 db  48h ; H
.eh_frame:00000000000271D9                 db  81h
.eh_frame:00000000000271DA                 db 0FFh
.eh_frame:00000000000271DB                 db 0FFh
.eh_frame:00000000000271DC                 db  7Dh ; }
.eh_frame:00000000000271DD                 db    0
.eh_frame:00000000000271DE                 db    0
.eh_frame:00000000000271DF                 db    0
.eh_frame:00000000000271E0                 db    0
.eh_frame:00000000000271E1                 db  42h ; B
.eh_frame:00000000000271E2                 db  0Eh
.eh_frame:00000000000271E3                 db  10h
.eh_frame:00000000000271E4                 db  8Ch
.eh_frame:00000000000271E5                 db    2
.eh_frame:00000000000271E6                 db  41h ; A
.eh_frame:00000000000271E7                 db  0Eh
.eh_frame:00000000000271E8                 db  18h
.eh_frame:00000000000271E9                 db  86h
.eh_frame:00000000000271EA                 db    3
.eh_frame:00000000000271EB                 db  44h ; D
.eh_frame:00000000000271EC                 db  0Eh
.eh_frame:00000000000271ED                 db  20h
.eh_frame:00000000000271EE                 db  83h
.eh_frame:00000000000271EF                 db    4
.eh_frame:00000000000271F0                 db  69h ; i
.eh_frame:00000000000271F1                 db  0Ah
.eh_frame:00000000000271F2                 db  0Eh
.eh_frame:00000000000271F3                 db  18h
.eh_frame:00000000000271F4                 db  41h ; A
.eh_frame:00000000000271F5                 db  0Eh
.eh_frame:00000000000271F6                 db  10h
.eh_frame:00000000000271F7                 db  42h ; B
.eh_frame:00000000000271F8                 db  0Eh
.eh_frame:00000000000271F9                 db    8
.eh_frame:00000000000271FA                 db  45h ; E
.eh_frame:00000000000271FB                 db  0Bh
.eh_frame:00000000000271FC                 db  55h ; U
.eh_frame:00000000000271FD                 db  0Ah
.eh_frame:00000000000271FE                 db  0Eh
.eh_frame:00000000000271FF                 db  18h
.eh_frame:0000000000027200                 db  41h ; A
.eh_frame:0000000000027201                 db  0Eh
.eh_frame:0000000000027202                 db  10h
.eh_frame:0000000000027203                 db  42h ; B
.eh_frame:0000000000027204                 db  0Eh
.eh_frame:0000000000027205                 db    8
.eh_frame:0000000000027206                 db  48h ; H
.eh_frame:0000000000027207                 db  0Bh
.eh_frame:0000000000027208                 db  41h ; A
.eh_frame:0000000000027209                 db  0Ah
.eh_frame:000000000002720A                 db  0Eh
.eh_frame:000000000002720B                 db  18h
.eh_frame:000000000002720C                 db  46h ; F
.eh_frame:000000000002720D                 db  0Eh
.eh_frame:000000000002720E                 db  10h
.eh_frame:000000000002720F                 db  42h ; B
.eh_frame:0000000000027210                 db  0Eh
.eh_frame:0000000000027211                 db    8
.eh_frame:0000000000027212                 db  47h ; G
.eh_frame:0000000000027213                 db  0Bh
.eh_frame:0000000000027214                 db  49h ; I
.eh_frame:0000000000027215                 db  0Eh
.eh_frame:0000000000027216                 db  18h
.eh_frame:0000000000027217                 db  41h ; A
.eh_frame:0000000000027218                 db  0Eh
.eh_frame:0000000000027219                 db  10h
.eh_frame:000000000002721A                 db  42h ; B
.eh_frame:000000000002721B                 db  0Eh
.eh_frame:000000000002721C                 db    8
.eh_frame:000000000002721D                 db    0
.eh_frame:000000000002721E                 db    0
.eh_frame:000000000002721F                 db    0
.eh_frame:0000000000027220                 db  10h
.eh_frame:0000000000027221                 db    0
.eh_frame:0000000000027222                 db    0
.eh_frame:0000000000027223                 db    0
.eh_frame:0000000000027224                 db 0FCh
.eh_frame:0000000000027225                 db  37h ; 7
.eh_frame:0000000000027226                 db    0
.eh_frame:0000000000027227                 db    0
.eh_frame:0000000000027228                 db  78h ; x
.eh_frame:0000000000027229                 db  81h
.eh_frame:000000000002722A                 db 0FFh
.eh_frame:000000000002722B                 db 0FFh
.eh_frame:000000000002722C                 db  10h
.eh_frame:000000000002722D                 db    0
.eh_frame:000000000002722E                 db    0
.eh_frame:000000000002722F                 db    0
.eh_frame:0000000000027230                 db    0
.eh_frame:0000000000027231                 db    0
.eh_frame:0000000000027232                 db    0
.eh_frame:0000000000027233                 db    0
.eh_frame:0000000000027234                 db  18h
.eh_frame:0000000000027235                 db    0
.eh_frame:0000000000027236                 db    0
.eh_frame:0000000000027237                 db    0
.eh_frame:0000000000027238                 db  10h
.eh_frame:0000000000027239                 db  38h ; 8
.eh_frame:000000000002723A                 db    0
.eh_frame:000000000002723B                 db    0
.eh_frame:000000000002723C                 db  74h ; t
.eh_frame:000000000002723D                 db  81h
.eh_frame:000000000002723E                 db 0FFh
.eh_frame:000000000002723F                 db 0FFh
.eh_frame:0000000000027240                 db  8Ah
.eh_frame:0000000000027241                 db    0
.eh_frame:0000000000027242                 db    0
.eh_frame:0000000000027243                 db    0
.eh_frame:0000000000027244                 db    0
.eh_frame:0000000000027245                 db    2
.eh_frame:0000000000027246                 db  80h
.eh_frame:0000000000027247                 db  0Eh
.eh_frame:0000000000027248                 db  10h
.eh_frame:0000000000027249                 db    0
.eh_frame:000000000002724A                 db    0
.eh_frame:000000000002724B                 db    0
.eh_frame:000000000002724C                 db    0
.eh_frame:000000000002724D                 db    0
.eh_frame:000000000002724E                 db    0
.eh_frame:000000000002724F                 db    0
.eh_frame:0000000000027250                 db  1Ch
.eh_frame:0000000000027251                 db    0
.eh_frame:0000000000027252                 db    0
.eh_frame:0000000000027253                 db    0
.eh_frame:0000000000027254                 db  2Ch ; ,
.eh_frame:0000000000027255                 db  38h ; 8
.eh_frame:0000000000027256                 db    0
.eh_frame:0000000000027257                 db    0
.eh_frame:0000000000027258                 db 0E8h
.eh_frame:0000000000027259                 db  81h
.eh_frame:000000000002725A                 db 0FFh
.eh_frame:000000000002725B                 db 0FFh
.eh_frame:000000000002725C                 db  6Eh ; n
.eh_frame:000000000002725D                 db    0
.eh_frame:000000000002725E                 db    0
.eh_frame:000000000002725F                 db    0
.eh_frame:0000000000027260                 db    0
.eh_frame:0000000000027261                 db  44h ; D
.eh_frame:0000000000027262                 db  0Eh
.eh_frame:0000000000027263                 db  60h ; `
.eh_frame:0000000000027264                 db  7Fh ; 
.eh_frame:0000000000027265                 db  0Ah
.eh_frame:0000000000027266                 db  0Eh
.eh_frame:0000000000027267                 db    8
.eh_frame:0000000000027268                 db  45h ; E
.eh_frame:0000000000027269                 db  0Bh
.eh_frame:000000000002726A                 db    0
.eh_frame:000000000002726B                 db    0
.eh_frame:000000000002726C                 db    0
.eh_frame:000000000002726D                 db    0
.eh_frame:000000000002726E                 db    0
.eh_frame:000000000002726F                 db    0
.eh_frame:0000000000027270                 db  1Ch
.eh_frame:0000000000027271                 db    0
.eh_frame:0000000000027272                 db    0
.eh_frame:0000000000027273                 db    0
.eh_frame:0000000000027274                 db  4Ch ; L
.eh_frame:0000000000027275                 db  38h ; 8
.eh_frame:0000000000027276                 db    0
.eh_frame:0000000000027277                 db    0
.eh_frame:0000000000027278                 db  38h ; 8
.eh_frame:0000000000027279                 db  82h
.eh_frame:000000000002727A                 db 0FFh
.eh_frame:000000000002727B                 db 0FFh
.eh_frame:000000000002727C                 db  60h ; `
.eh_frame:000000000002727D                 db    0
.eh_frame:000000000002727E                 db    0
.eh_frame:000000000002727F                 db    0
.eh_frame:0000000000027280                 db    0
.eh_frame:0000000000027281                 db  44h ; D
.eh_frame:0000000000027282                 db  0Eh
.eh_frame:0000000000027283                 db  10h
.eh_frame:0000000000027284                 db  75h ; u
.eh_frame:0000000000027285                 db  0Ah
.eh_frame:0000000000027286                 db  0Eh
.eh_frame:0000000000027287                 db    8
.eh_frame:0000000000027288                 db  47h ; G
.eh_frame:0000000000027289                 db  0Bh
.eh_frame:000000000002728A                 db  5Fh ; _
.eh_frame:000000000002728B                 db  0Eh
.eh_frame:000000000002728C                 db    8
.eh_frame:000000000002728D                 db    0
.eh_frame:000000000002728E                 db    0
.eh_frame:000000000002728F                 db    0
.eh_frame:0000000000027290                 db  10h
.eh_frame:0000000000027291                 db    0
.eh_frame:0000000000027292                 db    0
.eh_frame:0000000000027293                 db    0
.eh_frame:0000000000027294                 db  6Ch ; l
.eh_frame:0000000000027295                 db  38h ; 8
.eh_frame:0000000000027296                 db    0
.eh_frame:0000000000027297                 db    0
.eh_frame:0000000000027298                 db  78h ; x
.eh_frame:0000000000027299                 db  82h
.eh_frame:000000000002729A                 db 0FFh
.eh_frame:000000000002729B                 db 0FFh
.eh_frame:000000000002729C                 db  1Bh
.eh_frame:000000000002729D                 db    0
.eh_frame:000000000002729E                 db    0
.eh_frame:000000000002729F                 db    0
.eh_frame:00000000000272A0                 db    0
.eh_frame:00000000000272A1                 db    0
.eh_frame:00000000000272A2                 db    0
.eh_frame:00000000000272A3                 db    0
.eh_frame:00000000000272A4                 db  10h
.eh_frame:00000000000272A5                 db    0
.eh_frame:00000000000272A6                 db    0
.eh_frame:00000000000272A7                 db    0
.eh_frame:00000000000272A8                 db  80h
.eh_frame:00000000000272A9                 db  38h ; 8
.eh_frame:00000000000272AA                 db    0
.eh_frame:00000000000272AB                 db    0
.eh_frame:00000000000272AC                 db  84h
.eh_frame:00000000000272AD                 db  82h
.eh_frame:00000000000272AE                 db 0FFh
.eh_frame:00000000000272AF                 db 0FFh
.eh_frame:00000000000272B0                 db    5
.eh_frame:00000000000272B1                 db    0
.eh_frame:00000000000272B2                 db    0
.eh_frame:00000000000272B3                 db    0
.eh_frame:00000000000272B4                 db    0
.eh_frame:00000000000272B5                 db    0
.eh_frame:00000000000272B6                 db    0
.eh_frame:00000000000272B7                 db    0
.eh_frame:00000000000272B8                 db  10h
.eh_frame:00000000000272B9                 db    0
.eh_frame:00000000000272BA                 db    0
.eh_frame:00000000000272BB                 db    0
.eh_frame:00000000000272BC                 db  94h
.eh_frame:00000000000272BD                 db  38h ; 8
.eh_frame:00000000000272BE                 db    0
.eh_frame:00000000000272BF                 db    0
.eh_frame:00000000000272C0                 db  80h
.eh_frame:00000000000272C1                 db  82h
.eh_frame:00000000000272C2                 db 0FFh
.eh_frame:00000000000272C3                 db 0FFh
.eh_frame:00000000000272C4                 db  35h ; 5
.eh_frame:00000000000272C5                 db    0
.eh_frame:00000000000272C6                 db    0
.eh_frame:00000000000272C7                 db    0
.eh_frame:00000000000272C8                 db    0
.eh_frame:00000000000272C9                 db    0
.eh_frame:00000000000272CA                 db    0
.eh_frame:00000000000272CB                 db    0
.eh_frame:00000000000272CC                 db  10h
.eh_frame:00000000000272CD                 db    0
.eh_frame:00000000000272CE                 db    0
.eh_frame:00000000000272CF                 db    0
.eh_frame:00000000000272D0                 db 0A8h
.eh_frame:00000000000272D1                 db  38h ; 8
.eh_frame:00000000000272D2                 db    0
.eh_frame:00000000000272D3                 db    0
.eh_frame:00000000000272D4                 db 0ACh
.eh_frame:00000000000272D5                 db  82h
.eh_frame:00000000000272D6                 db 0FFh
.eh_frame:00000000000272D7                 db 0FFh
.eh_frame:00000000000272D8                 db  3Eh ; >
.eh_frame:00000000000272D9                 db    0
.eh_frame:00000000000272DA                 db    0
.eh_frame:00000000000272DB                 db    0
.eh_frame:00000000000272DC                 db    0
.eh_frame:00000000000272DD                 db  79h ; y
.eh_frame:00000000000272DE                 db  0Eh
.eh_frame:00000000000272DF                 db  10h
.eh_frame:00000000000272E0                 db  1Ch
.eh_frame:00000000000272E1                 db    0
.eh_frame:00000000000272E2                 db    0
.eh_frame:00000000000272E3                 db    0
.eh_frame:00000000000272E4                 db 0BCh
.eh_frame:00000000000272E5                 db  38h ; 8
.eh_frame:00000000000272E6                 db    0
.eh_frame:00000000000272E7                 db    0
.eh_frame:00000000000272E8                 db 0D8h
.eh_frame:00000000000272E9                 db  82h
.eh_frame:00000000000272EA                 db 0FFh
.eh_frame:00000000000272EB                 db 0FFh
.eh_frame:00000000000272EC                 db  3Ch ; <
.eh_frame:00000000000272ED                 db    0
.eh_frame:00000000000272EE                 db    0
.eh_frame:00000000000272EF                 db    0
.eh_frame:00000000000272F0                 db    0
.eh_frame:00000000000272F1                 db  44h ; D
.eh_frame:00000000000272F2                 db  0Eh
.eh_frame:00000000000272F3                 db  10h
.eh_frame:00000000000272F4                 db  61h ; a
.eh_frame:00000000000272F5                 db  0Ah
.eh_frame:00000000000272F6                 db  0Eh
.eh_frame:00000000000272F7                 db    8
.eh_frame:00000000000272F8                 db  4Bh ; K
.eh_frame:00000000000272F9                 db  0Bh
.eh_frame:00000000000272FA                 db  4Bh ; K
.eh_frame:00000000000272FB                 db  0Eh
.eh_frame:00000000000272FC                 db    8
.eh_frame:00000000000272FD                 db    0
.eh_frame:00000000000272FE                 db    0
.eh_frame:00000000000272FF                 db    0
.eh_frame:0000000000027300                 db  1Ch
.eh_frame:0000000000027301                 db    0
.eh_frame:0000000000027302                 db    0
.eh_frame:0000000000027303                 db    0
.eh_frame:0000000000027304                 db 0DCh
.eh_frame:0000000000027305                 db  38h ; 8
.eh_frame:0000000000027306                 db    0
.eh_frame:0000000000027307                 db    0
.eh_frame:0000000000027308                 db 0F8h
.eh_frame:0000000000027309                 db  82h
.eh_frame:000000000002730A                 db 0FFh
.eh_frame:000000000002730B                 db 0FFh
.eh_frame:000000000002730C                 db  6Eh ; n
.eh_frame:000000000002730D                 db    0
.eh_frame:000000000002730E                 db    0
.eh_frame:000000000002730F                 db    0
.eh_frame:0000000000027310                 db    0
.eh_frame:0000000000027311                 db  44h ; D
.eh_frame:0000000000027312                 db  0Eh
.eh_frame:0000000000027313                 db  60h ; `
.eh_frame:0000000000027314                 db  7Eh ; ~
.eh_frame:0000000000027315                 db  0Ah
.eh_frame:0000000000027316                 db  0Eh
.eh_frame:0000000000027317                 db    8
.eh_frame:0000000000027318                 db  46h ; F
.eh_frame:0000000000027319                 db  0Bh
.eh_frame:000000000002731A                 db    0
.eh_frame:000000000002731B                 db    0
.eh_frame:000000000002731C                 db    0
.eh_frame:000000000002731D                 db    0
.eh_frame:000000000002731E                 db    0
.eh_frame:000000000002731F                 db    0
.eh_frame:0000000000027320                 db  5Ch ; \
.eh_frame:0000000000027321                 db    0
.eh_frame:0000000000027322                 db    0
.eh_frame:0000000000027323                 db    0
.eh_frame:0000000000027324                 db 0FCh
.eh_frame:0000000000027325                 db  38h ; 8
.eh_frame:0000000000027326                 db    0
.eh_frame:0000000000027327                 db    0
.eh_frame:0000000000027328                 db  48h ; H
.eh_frame:0000000000027329                 db  83h
.eh_frame:000000000002732A                 db 0FFh
.eh_frame:000000000002732B                 db 0FFh
.eh_frame:000000000002732C                 db  80h
.eh_frame:000000000002732D                 db    0
.eh_frame:000000000002732E                 db    0
.eh_frame:000000000002732F                 db    0
.eh_frame:0000000000027330                 db    0
.eh_frame:0000000000027331                 db  42h ; B
.eh_frame:0000000000027332                 db  0Eh
.eh_frame:0000000000027333                 db  10h
.eh_frame:0000000000027334                 db  8Dh
.eh_frame:0000000000027335                 db    2
.eh_frame:0000000000027336                 db  42h ; B
.eh_frame:0000000000027337                 db  0Eh
.eh_frame:0000000000027338                 db  18h
.eh_frame:0000000000027339                 db  8Ch
.eh_frame:000000000002733A                 db    3
.eh_frame:000000000002733B                 db  47h ; G
.eh_frame:000000000002733C                 db  0Eh
.eh_frame:000000000002733D                 db  20h
.eh_frame:000000000002733E                 db  86h
.eh_frame:000000000002733F                 db    4
.eh_frame:0000000000027340                 db  41h ; A
.eh_frame:0000000000027341                 db  0Eh
.eh_frame:0000000000027342                 db  28h ; (
.eh_frame:0000000000027343                 db  83h
.eh_frame:0000000000027344                 db    5
.eh_frame:0000000000027345                 db  49h ; I
.eh_frame:0000000000027346                 db  0Eh
.eh_frame:0000000000027347                 db  30h ; 0
.eh_frame:0000000000027348                 db  62h ; b
.eh_frame:0000000000027349                 db  0Ah
.eh_frame:000000000002734A                 db  0Eh
.eh_frame:000000000002734B                 db  28h ; (
.eh_frame:000000000002734C                 db  44h ; D
.eh_frame:000000000002734D                 db  0Eh
.eh_frame:000000000002734E                 db  20h
.eh_frame:000000000002734F                 db  41h ; A
.eh_frame:0000000000027350                 db  0Eh
.eh_frame:0000000000027351                 db  18h
.eh_frame:0000000000027352                 db  42h ; B
.eh_frame:0000000000027353                 db  0Eh
.eh_frame:0000000000027354                 db  10h
.eh_frame:0000000000027355                 db  42h ; B
.eh_frame:0000000000027356                 db  0Eh
.eh_frame:0000000000027357                 db    8
.eh_frame:0000000000027358                 db  48h ; H
.eh_frame:0000000000027359                 db  0Bh
.eh_frame:000000000002735A                 db  5Dh ; ]
.eh_frame:000000000002735B                 db  0Ah
.eh_frame:000000000002735C                 db  0Eh
.eh_frame:000000000002735D                 db  28h ; (
.eh_frame:000000000002735E                 db  41h ; A
.eh_frame:000000000002735F                 db  0Eh
.eh_frame:0000000000027360                 db  20h
.eh_frame:0000000000027361                 db  41h ; A
.eh_frame:0000000000027362                 db  0Eh
.eh_frame:0000000000027363                 db  18h
.eh_frame:0000000000027364                 db  42h ; B
.eh_frame:0000000000027365                 db  0Eh
.eh_frame:0000000000027366                 db  10h
.eh_frame:0000000000027367                 db  42h ; B
.eh_frame:0000000000027368                 db  0Eh
.eh_frame:0000000000027369                 db    8
.eh_frame:000000000002736A                 db  45h ; E
.eh_frame:000000000002736B                 db  0Bh
.eh_frame:000000000002736C                 db  44h ; D
.eh_frame:000000000002736D                 db  0Eh
.eh_frame:000000000002736E                 db  28h ; (
.eh_frame:000000000002736F                 db  43h ; C
.eh_frame:0000000000027370                 db  0Eh
.eh_frame:0000000000027371                 db  20h
.eh_frame:0000000000027372                 db  44h ; D
.eh_frame:0000000000027373                 db  0Eh
.eh_frame:0000000000027374                 db  18h
.eh_frame:0000000000027375                 db  42h ; B
.eh_frame:0000000000027376                 db  0Eh
.eh_frame:0000000000027377                 db  10h
.eh_frame:0000000000027378                 db  42h ; B
.eh_frame:0000000000027379                 db  0Eh
.eh_frame:000000000002737A                 db    8
.eh_frame:000000000002737B                 db    0
.eh_frame:000000000002737C                 db    0
.eh_frame:000000000002737D                 db    0
.eh_frame:000000000002737E                 db    0
.eh_frame:000000000002737F                 db    0
.eh_frame:0000000000027380                 db  34h ; 4
.eh_frame:0000000000027381                 db    0
.eh_frame:0000000000027382                 db    0
.eh_frame:0000000000027383                 db    0
.eh_frame:0000000000027384                 db  5Ch ; \
.eh_frame:0000000000027385                 db  39h ; 9
.eh_frame:0000000000027386                 db    0
.eh_frame:0000000000027387                 db    0
.eh_frame:0000000000027388                 db  68h ; h
.eh_frame:0000000000027389                 db  83h
.eh_frame:000000000002738A                 db 0FFh
.eh_frame:000000000002738B                 db 0FFh
.eh_frame:000000000002738C                 db  3Fh ; ?
.eh_frame:000000000002738D                 db    0
.eh_frame:000000000002738E                 db    0
.eh_frame:000000000002738F                 db    0
.eh_frame:0000000000027390                 db    0
.eh_frame:0000000000027391                 db  42h ; B
.eh_frame:0000000000027392                 db  0Eh
.eh_frame:0000000000027393                 db  10h
.eh_frame:0000000000027394                 db  8Dh
.eh_frame:0000000000027395                 db    2
.eh_frame:0000000000027396                 db  42h ; B
.eh_frame:0000000000027397                 db  0Eh
.eh_frame:0000000000027398                 db  18h
.eh_frame:0000000000027399                 db  8Ch
.eh_frame:000000000002739A                 db    3
.eh_frame:000000000002739B                 db  41h ; A
.eh_frame:000000000002739C                 db  0Eh
.eh_frame:000000000002739D                 db  20h
.eh_frame:000000000002739E                 db  86h
.eh_frame:000000000002739F                 db    4
.eh_frame:00000000000273A0                 db  41h ; A
.eh_frame:00000000000273A1                 db  0Eh
.eh_frame:00000000000273A2                 db  28h ; (
.eh_frame:00000000000273A3                 db  83h
.eh_frame:00000000000273A4                 db    5
.eh_frame:00000000000273A5                 db  46h ; F
.eh_frame:00000000000273A6                 db  0Eh
.eh_frame:00000000000273A7                 db  30h ; 0
.eh_frame:00000000000273A8                 db  6Ah ; j
.eh_frame:00000000000273A9                 db  0Eh
.eh_frame:00000000000273AA                 db  28h ; (
.eh_frame:00000000000273AB                 db  43h ; C
.eh_frame:00000000000273AC                 db  0Eh
.eh_frame:00000000000273AD                 db  20h
.eh_frame:00000000000273AE                 db  41h ; A
.eh_frame:00000000000273AF                 db  0Eh
.eh_frame:00000000000273B0                 db  18h
.eh_frame:00000000000273B1                 db  42h ; B
.eh_frame:00000000000273B2                 db  0Eh
.eh_frame:00000000000273B3                 db  10h
.eh_frame:00000000000273B4                 db  42h ; B
.eh_frame:00000000000273B5                 db  0Eh
.eh_frame:00000000000273B6                 db    8
.eh_frame:00000000000273B7                 db    0
.eh_frame:00000000000273B8                 db  34h ; 4
.eh_frame:00000000000273B9                 db    0
.eh_frame:00000000000273BA                 db    0
.eh_frame:00000000000273BB                 db    0
.eh_frame:00000000000273BC                 db  94h
.eh_frame:00000000000273BD                 db  39h ; 9
.eh_frame:00000000000273BE                 db    0
.eh_frame:00000000000273BF                 db    0
.eh_frame:00000000000273C0                 db  70h ; p
.eh_frame:00000000000273C1                 db  83h
.eh_frame:00000000000273C2                 db 0FFh
.eh_frame:00000000000273C3                 db 0FFh
.eh_frame:00000000000273C4                 db  7Eh ; ~
.eh_frame:00000000000273C5                 db    2
.eh_frame:00000000000273C6                 db    0
.eh_frame:00000000000273C7                 db    0
.eh_frame:00000000000273C8                 db    0
.eh_frame:00000000000273C9                 db  42h ; B
.eh_frame:00000000000273CA                 db  0Eh
.eh_frame:00000000000273CB                 db  10h
.eh_frame:00000000000273CC                 db  8Ch
.eh_frame:00000000000273CD                 db    2
.eh_frame:00000000000273CE                 db  41h ; A
.eh_frame:00000000000273CF                 db  0Eh
.eh_frame:00000000000273D0                 db  18h
.eh_frame:00000000000273D1                 db  86h
.eh_frame:00000000000273D2                 db    3
.eh_frame:00000000000273D3                 db  43h ; C
.eh_frame:00000000000273D4                 db  0Eh
.eh_frame:00000000000273D5                 db  20h
.eh_frame:00000000000273D6                 db  83h
.eh_frame:00000000000273D7                 db    4
.eh_frame:00000000000273D8                 db  44h ; D
.eh_frame:00000000000273D9                 db  0Eh
.eh_frame:00000000000273DA                 db  70h ; p
.eh_frame:00000000000273DB                 db    2
.eh_frame:00000000000273DC                 db 0F0h
.eh_frame:00000000000273DD                 db  0Ah
.eh_frame:00000000000273DE                 db  0Eh
.eh_frame:00000000000273DF                 db  20h
.eh_frame:00000000000273E0                 db  41h ; A
.eh_frame:00000000000273E1                 db  0Eh
.eh_frame:00000000000273E2                 db  18h
.eh_frame:00000000000273E3                 db  41h ; A
.eh_frame:00000000000273E4                 db  0Eh
.eh_frame:00000000000273E5                 db  10h
.eh_frame:00000000000273E6                 db  42h ; B
.eh_frame:00000000000273E7                 db  0Eh
.eh_frame:00000000000273E8                 db    8
.eh_frame:00000000000273E9                 db  42h ; B
.eh_frame:00000000000273EA                 db  0Bh
.eh_frame:00000000000273EB                 db    0
.eh_frame:00000000000273EC                 db    0
.eh_frame:00000000000273ED                 db    0
.eh_frame:00000000000273EE                 db    0
.eh_frame:00000000000273EF                 db    0
.eh_frame:00000000000273F0                 db  14h
.eh_frame:00000000000273F1                 db    0
.eh_frame:00000000000273F2                 db    0
.eh_frame:00000000000273F3                 db    0
.eh_frame:00000000000273F4                 db 0CCh
.eh_frame:00000000000273F5                 db  39h ; 9
.eh_frame:00000000000273F6                 db    0
.eh_frame:00000000000273F7                 db    0
.eh_frame:00000000000273F8                 db 0B8h
.eh_frame:00000000000273F9                 db  85h
.eh_frame:00000000000273FA                 db 0FFh
.eh_frame:00000000000273FB                 db 0FFh
.eh_frame:00000000000273FC                 db  0Eh
.eh_frame:00000000000273FD                 db    0
.eh_frame:00000000000273FE                 db    0
.eh_frame:00000000000273FF                 db    0
.eh_frame:0000000000027400                 db    0
.eh_frame:0000000000027401                 db    0
.eh_frame:0000000000027402                 db    0
.eh_frame:0000000000027403                 db    0
.eh_frame:0000000000027404                 db    0
.eh_frame:0000000000027405                 db    0
.eh_frame:0000000000027406                 db    0
.eh_frame:0000000000027407                 db    0
.eh_frame:0000000000027408                 db  44h ; D
.eh_frame:0000000000027409                 db    0
.eh_frame:000000000002740A                 db    0
.eh_frame:000000000002740B                 db    0
.eh_frame:000000000002740C                 db 0E4h
.eh_frame:000000000002740D                 db  39h ; 9
.eh_frame:000000000002740E                 db    0
.eh_frame:000000000002740F                 db    0
.eh_frame:0000000000027410                 db 0B0h
.eh_frame:0000000000027411                 db  85h
.eh_frame:0000000000027412                 db 0FFh
.eh_frame:0000000000027413                 db 0FFh
.eh_frame:0000000000027414                 db  65h ; e
.eh_frame:0000000000027415                 db    0
.eh_frame:0000000000027416                 db    0
.eh_frame:0000000000027417                 db    0
.eh_frame:0000000000027418                 db    0
.eh_frame:0000000000027419                 db  42h ; B
.eh_frame:000000000002741A                 db  0Eh
.eh_frame:000000000002741B                 db  10h
.eh_frame:000000000002741C                 db  8Fh
.eh_frame:000000000002741D                 db    2
.eh_frame:000000000002741E                 db  42h ; B
.eh_frame:000000000002741F                 db  0Eh
.eh_frame:0000000000027420                 db  18h
.eh_frame:0000000000027421                 db  8Eh
.eh_frame:0000000000027422                 db    3
.eh_frame:0000000000027423                 db  45h ; E
.eh_frame:0000000000027424                 db  0Eh
.eh_frame:0000000000027425                 db  20h
.eh_frame:0000000000027426                 db  8Dh
.eh_frame:0000000000027427                 db    4
.eh_frame:0000000000027428                 db  42h ; B
.eh_frame:0000000000027429                 db  0Eh
.eh_frame:000000000002742A                 db  28h ; (
.eh_frame:000000000002742B                 db  8Ch
.eh_frame:000000000002742C                 db    5
.eh_frame:000000000002742D                 db  48h ; H
.eh_frame:000000000002742E                 db  0Eh
.eh_frame:000000000002742F                 db  30h ; 0
.eh_frame:0000000000027430                 db  86h
.eh_frame:0000000000027431                 db    6
.eh_frame:0000000000027432                 db  48h ; H
.eh_frame:0000000000027433                 db  0Eh
.eh_frame:0000000000027434                 db  38h ; 8
.eh_frame:0000000000027435                 db  83h
.eh_frame:0000000000027436                 db    7
.eh_frame:0000000000027437                 db  4Dh ; M
.eh_frame:0000000000027438                 db  0Eh
.eh_frame:0000000000027439                 db  40h ; @
.eh_frame:000000000002743A                 db  72h ; r
.eh_frame:000000000002743B                 db  0Eh
.eh_frame:000000000002743C                 db  38h ; 8
.eh_frame:000000000002743D                 db  41h ; A
.eh_frame:000000000002743E                 db  0Eh
.eh_frame:000000000002743F                 db  30h ; 0
.eh_frame:0000000000027440                 db  41h ; A
.eh_frame:0000000000027441                 db  0Eh
.eh_frame:0000000000027442                 db  28h ; (
.eh_frame:0000000000027443                 db  42h ; B
.eh_frame:0000000000027444                 db  0Eh
.eh_frame:0000000000027445                 db  20h
.eh_frame:0000000000027446                 db  42h ; B
.eh_frame:0000000000027447                 db  0Eh
.eh_frame:0000000000027448                 db  18h
.eh_frame:0000000000027449                 db  42h ; B
.eh_frame:000000000002744A                 db  0Eh
.eh_frame:000000000002744B                 db  10h
.eh_frame:000000000002744C                 db  42h ; B
.eh_frame:000000000002744D                 db  0Eh
.eh_frame:000000000002744E                 db    8
.eh_frame:000000000002744F                 db    0
.eh_frame:0000000000027450                 db  14h
.eh_frame:0000000000027451                 db    0
.eh_frame:0000000000027452                 db    0
.eh_frame:0000000000027453                 db    0
.eh_frame:0000000000027454                 db  2Ch ; ,
.eh_frame:0000000000027455                 db  3Ah ; :
.eh_frame:0000000000027456                 db    0
.eh_frame:0000000000027457                 db    0
.eh_frame:0000000000027458                 db 0D8h
.eh_frame:0000000000027459                 db  85h
.eh_frame:000000000002745A                 db 0FFh
.eh_frame:000000000002745B                 db 0FFh
.eh_frame:000000000002745C                 db    2
.eh_frame:000000000002745D                 db    0
.eh_frame:000000000002745E                 db    0
.eh_frame:000000000002745F                 db    0
.eh_frame:0000000000027460                 db    0
.eh_frame:0000000000027461                 db    0
.eh_frame:0000000000027462                 db    0
.eh_frame:0000000000027463                 db    0
.eh_frame:0000000000027464                 db    0
.eh_frame:0000000000027465                 db    0
.eh_frame:0000000000027466                 db    0
.eh_frame:0000000000027467                 db    0
.eh_frame:0000000000027468                 db  10h
.eh_frame:0000000000027469                 db    0
.eh_frame:000000000002746A                 db    0
.eh_frame:000000000002746B                 db    0
.eh_frame:000000000002746C                 db  44h ; D
.eh_frame:000000000002746D                 db  3Ah ; :
.eh_frame:000000000002746E                 db    0
.eh_frame:000000000002746F                 db    0
.eh_frame:0000000000027470                 db 0D0h
.eh_frame:0000000000027471                 db  85h
.eh_frame:0000000000027472                 db 0FFh
.eh_frame:0000000000027473                 db 0FFh
.eh_frame:0000000000027474                 db  0Eh
.eh_frame:0000000000027475                 db    0
.eh_frame:0000000000027476                 db    0
.eh_frame:0000000000027477                 db    0
.eh_frame:0000000000027478                 db    0
.eh_frame:0000000000027479                 db    0
.eh_frame:000000000002747A                 db    0
.eh_frame:000000000002747B                 db    0
.eh_frame:000000000002747C __FRAME_END__   db    0
.eh_frame:000000000002747D                 db    0
.eh_frame:000000000002747E                 db    0
.eh_frame:000000000002747F                 db    0
.eh_frame:000000000002747F _eh_frame       ends
.eh_frame:000000000002747F
.init_array:0000000000227670 ; ELF Initialization Function Table
.init_array:0000000000227670 ; ===========================================================================
.init_array:0000000000227670
.init_array:0000000000227670 ; Segment type: Pure data
.init_array:0000000000227670 ; Segment permissions: Read/Write
.init_array:0000000000227670 _init_array     segment qword public 'DATA' use64
.init_array:0000000000227670                 assume cs:_init_array
.init_array:0000000000227670                 ;org 227670h
.init_array:0000000000227670 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000227670                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000227670                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000227670 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000227670
.fini_array:0000000000227678 ; ELF Termination Function Table
.fini_array:0000000000227678 ; ===========================================================================
.fini_array:0000000000227678
.fini_array:0000000000227678 ; Segment type: Pure data
.fini_array:0000000000227678 ; Segment permissions: Read/Write
.fini_array:0000000000227678 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000227678                 assume cs:_fini_array
.fini_array:0000000000227678                 ;org 227678h
.fini_array:0000000000227678 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000227678                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000227678 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000227678
.data.rel.ro:0000000000227680 ; ===========================================================================
.data.rel.ro:0000000000227680
.data.rel.ro:0000000000227680 ; Segment type: Pure data
.data.rel.ro:0000000000227680 ; Segment permissions: Read/Write
.data.rel.ro:0000000000227680 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000227680                 assume cs:_data_rel_ro
.data.rel.ro:0000000000227680                 ;org 227680h
.data.rel.ro:0000000000227680 time_style_args dq offset aFullIso      ; DATA XREF: main+10BC↑o
.data.rel.ro:0000000000227680                                         ; "full-iso"
.data.rel.ro:0000000000227688                 dq offset aLongIso      ; "long-iso"
.data.rel.ro:0000000000227690                 dq offset aLongIso+5    ; "iso"
.data.rel.ro:0000000000227698                 align 20h
.data.rel.ro:00000000002276A0 time_args       dq offset aAtime        ; DATA XREF: main+3ED↑o
.data.rel.ro:00000000002276A0                                         ; "atime"
.data.rel.ro:00000000002276A8                 dq offset aAccess       ; "access"
.data.rel.ro:00000000002276B0                 dq offset aUse          ; "use"
.data.rel.ro:00000000002276B8                 dq offset aCtime        ; "ctime"
.data.rel.ro:00000000002276C0                 dq offset aStatus       ; "status"
.data.rel.ro:00000000002276C8                 align 20h
.data.rel.ro:00000000002276E0 ; struct option long_options
.data.rel.ro:00000000002276E0 long_options    dq offset aAll          ; name
.data.rel.ro:00000000002276E0                                         ; DATA XREF: main:loc_2B48↑o
.data.rel.ro:00000000002276E0                                         ; main+341↑o ...
.data.rel.ro:00000000002276E0                 dd 0                    ; has_arg ; "all"
.data.rel.ro:00000000002276E0                 db 4 dup(0)
.data.rel.ro:00000000002276E0                 dq 0                    ; flag
.data.rel.ro:00000000002276E0                 dd 61h                  ; val
.data.rel.ro:00000000002276E0                 db 4 dup(0)
.data.rel.ro:0000000000227700                 dq offset aApparentSize ; "apparent-size"
.data.rel.ro:0000000000227708                 db    0
.data.rel.ro:0000000000227709                 db    0
.data.rel.ro:000000000022770A                 db    0
.data.rel.ro:000000000022770B                 db    0
.data.rel.ro:000000000022770C                 db    0
.data.rel.ro:000000000022770D                 db    0
.data.rel.ro:000000000022770E                 db    0
.data.rel.ro:000000000022770F                 db    0
.data.rel.ro:0000000000227710                 db    0
.data.rel.ro:0000000000227711                 db    0
.data.rel.ro:0000000000227712                 db    0
.data.rel.ro:0000000000227713                 db    0
.data.rel.ro:0000000000227714                 db    0
.data.rel.ro:0000000000227715                 db    0
.data.rel.ro:0000000000227716                 db    0
.data.rel.ro:0000000000227717                 db    0
.data.rel.ro:0000000000227718                 db  80h
.data.rel.ro:0000000000227719                 db    0
.data.rel.ro:000000000022771A                 db    0
.data.rel.ro:000000000022771B                 db    0
.data.rel.ro:000000000022771C                 db    0
.data.rel.ro:000000000022771D                 db    0
.data.rel.ro:000000000022771E                 db    0
.data.rel.ro:000000000022771F                 db    0
.data.rel.ro:0000000000227720                 dq offset aBlockSize    ; "block-size"
.data.rel.ro:0000000000227728                 db    1
.data.rel.ro:0000000000227729                 db    0
.data.rel.ro:000000000022772A                 db    0
.data.rel.ro:000000000022772B                 db    0
.data.rel.ro:000000000022772C                 db    0
.data.rel.ro:000000000022772D                 db    0
.data.rel.ro:000000000022772E                 db    0
.data.rel.ro:000000000022772F                 db    0
.data.rel.ro:0000000000227730                 db    0
.data.rel.ro:0000000000227731                 db    0
.data.rel.ro:0000000000227732                 db    0
.data.rel.ro:0000000000227733                 db    0
.data.rel.ro:0000000000227734                 db    0
.data.rel.ro:0000000000227735                 db    0
.data.rel.ro:0000000000227736                 db    0
.data.rel.ro:0000000000227737                 db    0
.data.rel.ro:0000000000227738                 db  42h ; B
.data.rel.ro:0000000000227739                 db    0
.data.rel.ro:000000000022773A                 db    0
.data.rel.ro:000000000022773B                 db    0
.data.rel.ro:000000000022773C                 db    0
.data.rel.ro:000000000022773D                 db    0
.data.rel.ro:000000000022773E                 db    0
.data.rel.ro:000000000022773F                 db    0
.data.rel.ro:0000000000227740                 dq offset aBytes        ; "bytes"
.data.rel.ro:0000000000227748                 db    0
.data.rel.ro:0000000000227749                 db    0
.data.rel.ro:000000000022774A                 db    0
.data.rel.ro:000000000022774B                 db    0
.data.rel.ro:000000000022774C                 db    0
.data.rel.ro:000000000022774D                 db    0
.data.rel.ro:000000000022774E                 db    0
.data.rel.ro:000000000022774F                 db    0
.data.rel.ro:0000000000227750                 db    0
.data.rel.ro:0000000000227751                 db    0
.data.rel.ro:0000000000227752                 db    0
.data.rel.ro:0000000000227753                 db    0
.data.rel.ro:0000000000227754                 db    0
.data.rel.ro:0000000000227755                 db    0
.data.rel.ro:0000000000227756                 db    0
.data.rel.ro:0000000000227757                 db    0
.data.rel.ro:0000000000227758                 db  62h ; b
.data.rel.ro:0000000000227759                 db    0
.data.rel.ro:000000000022775A                 db    0
.data.rel.ro:000000000022775B                 db    0
.data.rel.ro:000000000022775C                 db    0
.data.rel.ro:000000000022775D                 db    0
.data.rel.ro:000000000022775E                 db    0
.data.rel.ro:000000000022775F                 db    0
.data.rel.ro:0000000000227760                 dq offset aCountLinks   ; "count-links"
.data.rel.ro:0000000000227768                 db    0
.data.rel.ro:0000000000227769                 db    0
.data.rel.ro:000000000022776A                 db    0
.data.rel.ro:000000000022776B                 db    0
.data.rel.ro:000000000022776C                 db    0
.data.rel.ro:000000000022776D                 db    0
.data.rel.ro:000000000022776E                 db    0
.data.rel.ro:000000000022776F                 db    0
.data.rel.ro:0000000000227770                 db    0
.data.rel.ro:0000000000227771                 db    0
.data.rel.ro:0000000000227772                 db    0
.data.rel.ro:0000000000227773                 db    0
.data.rel.ro:0000000000227774                 db    0
.data.rel.ro:0000000000227775                 db    0
.data.rel.ro:0000000000227776                 db    0
.data.rel.ro:0000000000227777                 db    0
.data.rel.ro:0000000000227778                 db  6Ch ; l
.data.rel.ro:0000000000227779                 db    0
.data.rel.ro:000000000022777A                 db    0
.data.rel.ro:000000000022777B                 db    0
.data.rel.ro:000000000022777C                 db    0
.data.rel.ro:000000000022777D                 db    0
.data.rel.ro:000000000022777E                 db    0
.data.rel.ro:000000000022777F                 db    0
.data.rel.ro:0000000000227780                 dq offset aNoDereference+3 ; "dereference"
.data.rel.ro:0000000000227788                 db    0
.data.rel.ro:0000000000227789                 db    0
.data.rel.ro:000000000022778A                 db    0
.data.rel.ro:000000000022778B                 db    0
.data.rel.ro:000000000022778C                 db    0
.data.rel.ro:000000000022778D                 db    0
.data.rel.ro:000000000022778E                 db    0
.data.rel.ro:000000000022778F                 db    0
.data.rel.ro:0000000000227790                 db    0
.data.rel.ro:0000000000227791                 db    0
.data.rel.ro:0000000000227792                 db    0
.data.rel.ro:0000000000227793                 db    0
.data.rel.ro:0000000000227794                 db    0
.data.rel.ro:0000000000227795                 db    0
.data.rel.ro:0000000000227796                 db    0
.data.rel.ro:0000000000227797                 db    0
.data.rel.ro:0000000000227798                 db  4Ch ; L
.data.rel.ro:0000000000227799                 db    0
.data.rel.ro:000000000022779A                 db    0
.data.rel.ro:000000000022779B                 db    0
.data.rel.ro:000000000022779C                 db    0
.data.rel.ro:000000000022779D                 db    0
.data.rel.ro:000000000022779E                 db    0
.data.rel.ro:000000000022779F                 db    0
.data.rel.ro:00000000002277A0                 dq offset aDereferenceArg ; "dereference-args"
.data.rel.ro:00000000002277A8                 db    0
.data.rel.ro:00000000002277A9                 db    0
.data.rel.ro:00000000002277AA                 db    0
.data.rel.ro:00000000002277AB                 db    0
.data.rel.ro:00000000002277AC                 db    0
.data.rel.ro:00000000002277AD                 db    0
.data.rel.ro:00000000002277AE                 db    0
.data.rel.ro:00000000002277AF                 db    0
.data.rel.ro:00000000002277B0                 db    0
.data.rel.ro:00000000002277B1                 db    0
.data.rel.ro:00000000002277B2                 db    0
.data.rel.ro:00000000002277B3                 db    0
.data.rel.ro:00000000002277B4                 db    0
.data.rel.ro:00000000002277B5                 db    0
.data.rel.ro:00000000002277B6                 db    0
.data.rel.ro:00000000002277B7                 db    0
.data.rel.ro:00000000002277B8                 db  44h ; D
.data.rel.ro:00000000002277B9                 db    0
.data.rel.ro:00000000002277BA                 db    0
.data.rel.ro:00000000002277BB                 db    0
.data.rel.ro:00000000002277BC                 db    0
.data.rel.ro:00000000002277BD                 db    0
.data.rel.ro:00000000002277BE                 db    0
.data.rel.ro:00000000002277BF                 db    0
.data.rel.ro:00000000002277C0                 dq offset aExclude      ; "exclude"
.data.rel.ro:00000000002277C8                 db    1
.data.rel.ro:00000000002277C9                 db    0
.data.rel.ro:00000000002277CA                 db    0
.data.rel.ro:00000000002277CB                 db    0
.data.rel.ro:00000000002277CC                 db    0
.data.rel.ro:00000000002277CD                 db    0
.data.rel.ro:00000000002277CE                 db    0
.data.rel.ro:00000000002277CF                 db    0
.data.rel.ro:00000000002277D0                 db    0
.data.rel.ro:00000000002277D1                 db    0
.data.rel.ro:00000000002277D2                 db    0
.data.rel.ro:00000000002277D3                 db    0
.data.rel.ro:00000000002277D4                 db    0
.data.rel.ro:00000000002277D5                 db    0
.data.rel.ro:00000000002277D6                 db    0
.data.rel.ro:00000000002277D7                 db    0
.data.rel.ro:00000000002277D8                 db  81h
.data.rel.ro:00000000002277D9                 db    0
.data.rel.ro:00000000002277DA                 db    0
.data.rel.ro:00000000002277DB                 db    0
.data.rel.ro:00000000002277DC                 db    0
.data.rel.ro:00000000002277DD                 db    0
.data.rel.ro:00000000002277DE                 db    0
.data.rel.ro:00000000002277DF                 db    0
.data.rel.ro:00000000002277E0                 dq offset aExcludeFrom  ; "exclude-from"
.data.rel.ro:00000000002277E8                 db    1
.data.rel.ro:00000000002277E9                 db    0
.data.rel.ro:00000000002277EA                 db    0
.data.rel.ro:00000000002277EB                 db    0
.data.rel.ro:00000000002277EC                 db    0
.data.rel.ro:00000000002277ED                 db    0
.data.rel.ro:00000000002277EE                 db    0
.data.rel.ro:00000000002277EF                 db    0
.data.rel.ro:00000000002277F0                 db    0
.data.rel.ro:00000000002277F1                 db    0
.data.rel.ro:00000000002277F2                 db    0
.data.rel.ro:00000000002277F3                 db    0
.data.rel.ro:00000000002277F4                 db    0
.data.rel.ro:00000000002277F5                 db    0
.data.rel.ro:00000000002277F6                 db    0
.data.rel.ro:00000000002277F7                 db    0
.data.rel.ro:00000000002277F8                 db  58h ; X
.data.rel.ro:00000000002277F9                 db    0
.data.rel.ro:00000000002277FA                 db    0
.data.rel.ro:00000000002277FB                 db    0
.data.rel.ro:00000000002277FC                 db    0
.data.rel.ro:00000000002277FD                 db    0
.data.rel.ro:00000000002277FE                 db    0
.data.rel.ro:00000000002277FF                 db    0
.data.rel.ro:0000000000227800                 dq offset aFiles0From   ; "files0-from"
.data.rel.ro:0000000000227808                 db    1
.data.rel.ro:0000000000227809                 db    0
.data.rel.ro:000000000022780A                 db    0
.data.rel.ro:000000000022780B                 db    0
.data.rel.ro:000000000022780C                 db    0
.data.rel.ro:000000000022780D                 db    0
.data.rel.ro:000000000022780E                 db    0
.data.rel.ro:000000000022780F                 db    0
.data.rel.ro:0000000000227810                 db    0
.data.rel.ro:0000000000227811                 db    0
.data.rel.ro:0000000000227812                 db    0
.data.rel.ro:0000000000227813                 db    0
.data.rel.ro:0000000000227814                 db    0
.data.rel.ro:0000000000227815                 db    0
.data.rel.ro:0000000000227816                 db    0
.data.rel.ro:0000000000227817                 db    0
.data.rel.ro:0000000000227818                 db  82h
.data.rel.ro:0000000000227819                 db    0
.data.rel.ro:000000000022781A                 db    0
.data.rel.ro:000000000022781B                 db    0
.data.rel.ro:000000000022781C                 db    0
.data.rel.ro:000000000022781D                 db    0
.data.rel.ro:000000000022781E                 db    0
.data.rel.ro:000000000022781F                 db    0
.data.rel.ro:0000000000227820                 dq offset aHumanReadable ; "human-readable"
.data.rel.ro:0000000000227828                 db    0
.data.rel.ro:0000000000227829                 db    0
.data.rel.ro:000000000022782A                 db    0
.data.rel.ro:000000000022782B                 db    0
.data.rel.ro:000000000022782C                 db    0
.data.rel.ro:000000000022782D                 db    0
.data.rel.ro:000000000022782E                 db    0
.data.rel.ro:000000000022782F                 db    0
.data.rel.ro:0000000000227830                 db    0
.data.rel.ro:0000000000227831                 db    0
.data.rel.ro:0000000000227832                 db    0
.data.rel.ro:0000000000227833                 db    0
.data.rel.ro:0000000000227834                 db    0
.data.rel.ro:0000000000227835                 db    0
.data.rel.ro:0000000000227836                 db    0
.data.rel.ro:0000000000227837                 db    0
.data.rel.ro:0000000000227838                 db  68h ; h
.data.rel.ro:0000000000227839                 db    0
.data.rel.ro:000000000022783A                 db    0
.data.rel.ro:000000000022783B                 db    0
.data.rel.ro:000000000022783C                 db    0
.data.rel.ro:000000000022783D                 db    0
.data.rel.ro:000000000022783E                 db    0
.data.rel.ro:000000000022783F                 db    0
.data.rel.ro:0000000000227840                 dq offset aInodes       ; "inodes"
.data.rel.ro:0000000000227848                 db    0
.data.rel.ro:0000000000227849                 db    0
.data.rel.ro:000000000022784A                 db    0
.data.rel.ro:000000000022784B                 db    0
.data.rel.ro:000000000022784C                 db    0
.data.rel.ro:000000000022784D                 db    0
.data.rel.ro:000000000022784E                 db    0
.data.rel.ro:000000000022784F                 db    0
.data.rel.ro:0000000000227850                 db    0
.data.rel.ro:0000000000227851                 db    0
.data.rel.ro:0000000000227852                 db    0
.data.rel.ro:0000000000227853                 db    0
.data.rel.ro:0000000000227854                 db    0
.data.rel.ro:0000000000227855                 db    0
.data.rel.ro:0000000000227856                 db    0
.data.rel.ro:0000000000227857                 db    0
.data.rel.ro:0000000000227858                 db  87h
.data.rel.ro:0000000000227859                 db    0
.data.rel.ro:000000000022785A                 db    0
.data.rel.ro:000000000022785B                 db    0
.data.rel.ro:000000000022785C                 db    0
.data.rel.ro:000000000022785D                 db    0
.data.rel.ro:000000000022785E                 db    0
.data.rel.ro:000000000022785F                 db    0
.data.rel.ro:0000000000227860                 dq offset aSi           ; "si"
.data.rel.ro:0000000000227868                 db    0
.data.rel.ro:0000000000227869                 db    0
.data.rel.ro:000000000022786A                 db    0
.data.rel.ro:000000000022786B                 db    0
.data.rel.ro:000000000022786C                 db    0
.data.rel.ro:000000000022786D                 db    0
.data.rel.ro:000000000022786E                 db    0
.data.rel.ro:000000000022786F                 db    0
.data.rel.ro:0000000000227870                 db    0
.data.rel.ro:0000000000227871                 db    0
.data.rel.ro:0000000000227872                 db    0
.data.rel.ro:0000000000227873                 db    0
.data.rel.ro:0000000000227874                 db    0
.data.rel.ro:0000000000227875                 db    0
.data.rel.ro:0000000000227876                 db    0
.data.rel.ro:0000000000227877                 db    0
.data.rel.ro:0000000000227878                 db  83h
.data.rel.ro:0000000000227879                 db    0
.data.rel.ro:000000000022787A                 db    0
.data.rel.ro:000000000022787B                 db    0
.data.rel.ro:000000000022787C                 db    0
.data.rel.ro:000000000022787D                 db    0
.data.rel.ro:000000000022787E                 db    0
.data.rel.ro:000000000022787F                 db    0
.data.rel.ro:0000000000227880                 dq offset aMaxDepth     ; "max-depth"
.data.rel.ro:0000000000227888                 db    1
.data.rel.ro:0000000000227889                 db    0
.data.rel.ro:000000000022788A                 db    0
.data.rel.ro:000000000022788B                 db    0
.data.rel.ro:000000000022788C                 db    0
.data.rel.ro:000000000022788D                 db    0
.data.rel.ro:000000000022788E                 db    0
.data.rel.ro:000000000022788F                 db    0
.data.rel.ro:0000000000227890                 db    0
.data.rel.ro:0000000000227891                 db    0
.data.rel.ro:0000000000227892                 db    0
.data.rel.ro:0000000000227893                 db    0
.data.rel.ro:0000000000227894                 db    0
.data.rel.ro:0000000000227895                 db    0
.data.rel.ro:0000000000227896                 db    0
.data.rel.ro:0000000000227897                 db    0
.data.rel.ro:0000000000227898                 db  64h ; d
.data.rel.ro:0000000000227899                 db    0
.data.rel.ro:000000000022789A                 db    0
.data.rel.ro:000000000022789B                 db    0
.data.rel.ro:000000000022789C                 db    0
.data.rel.ro:000000000022789D                 db    0
.data.rel.ro:000000000022789E                 db    0
.data.rel.ro:000000000022789F                 db    0
.data.rel.ro:00000000002278A0                 dq offset aDevNull+5    ; "null"
.data.rel.ro:00000000002278A8                 db    0
.data.rel.ro:00000000002278A9                 db    0
.data.rel.ro:00000000002278AA                 db    0
.data.rel.ro:00000000002278AB                 db    0
.data.rel.ro:00000000002278AC                 db    0
.data.rel.ro:00000000002278AD                 db    0
.data.rel.ro:00000000002278AE                 db    0
.data.rel.ro:00000000002278AF                 db    0
.data.rel.ro:00000000002278B0                 db    0
.data.rel.ro:00000000002278B1                 db    0
.data.rel.ro:00000000002278B2                 db    0
.data.rel.ro:00000000002278B3                 db    0
.data.rel.ro:00000000002278B4                 db    0
.data.rel.ro:00000000002278B5                 db    0
.data.rel.ro:00000000002278B6                 db    0
.data.rel.ro:00000000002278B7                 db    0
.data.rel.ro:00000000002278B8                 db  30h ; 0
.data.rel.ro:00000000002278B9                 db    0
.data.rel.ro:00000000002278BA                 db    0
.data.rel.ro:00000000002278BB                 db    0
.data.rel.ro:00000000002278BC                 db    0
.data.rel.ro:00000000002278BD                 db    0
.data.rel.ro:00000000002278BE                 db    0
.data.rel.ro:00000000002278BF                 db    0
.data.rel.ro:00000000002278C0                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:00000000002278C8                 db    0
.data.rel.ro:00000000002278C9                 db    0
.data.rel.ro:00000000002278CA                 db    0
.data.rel.ro:00000000002278CB                 db    0
.data.rel.ro:00000000002278CC                 db    0
.data.rel.ro:00000000002278CD                 db    0
.data.rel.ro:00000000002278CE                 db    0
.data.rel.ro:00000000002278CF                 db    0
.data.rel.ro:00000000002278D0                 db    0
.data.rel.ro:00000000002278D1                 db    0
.data.rel.ro:00000000002278D2                 db    0
.data.rel.ro:00000000002278D3                 db    0
.data.rel.ro:00000000002278D4                 db    0
.data.rel.ro:00000000002278D5                 db    0
.data.rel.ro:00000000002278D6                 db    0
.data.rel.ro:00000000002278D7                 db    0
.data.rel.ro:00000000002278D8                 db  50h ; P
.data.rel.ro:00000000002278D9                 db    0
.data.rel.ro:00000000002278DA                 db    0
.data.rel.ro:00000000002278DB                 db    0
.data.rel.ro:00000000002278DC                 db    0
.data.rel.ro:00000000002278DD                 db    0
.data.rel.ro:00000000002278DE                 db    0
.data.rel.ro:00000000002278DF                 db    0
.data.rel.ro:00000000002278E0                 dq offset aOneFileSystem ; "one-file-system"
.data.rel.ro:00000000002278E8                 db    0
.data.rel.ro:00000000002278E9                 db    0
.data.rel.ro:00000000002278EA                 db    0
.data.rel.ro:00000000002278EB                 db    0
.data.rel.ro:00000000002278EC                 db    0
.data.rel.ro:00000000002278ED                 db    0
.data.rel.ro:00000000002278EE                 db    0
.data.rel.ro:00000000002278EF                 db    0
.data.rel.ro:00000000002278F0                 db    0
.data.rel.ro:00000000002278F1                 db    0
.data.rel.ro:00000000002278F2                 db    0
.data.rel.ro:00000000002278F3                 db    0
.data.rel.ro:00000000002278F4                 db    0
.data.rel.ro:00000000002278F5                 db    0
.data.rel.ro:00000000002278F6                 db    0
.data.rel.ro:00000000002278F7                 db    0
.data.rel.ro:00000000002278F8                 db  78h ; x
.data.rel.ro:00000000002278F9                 db    0
.data.rel.ro:00000000002278FA                 db    0
.data.rel.ro:00000000002278FB                 db    0
.data.rel.ro:00000000002278FC                 db    0
.data.rel.ro:00000000002278FD                 db    0
.data.rel.ro:00000000002278FE                 db    0
.data.rel.ro:00000000002278FF                 db    0
.data.rel.ro:0000000000227900                 dq offset aSeparateDirs ; "separate-dirs"
.data.rel.ro:0000000000227908                 db    0
.data.rel.ro:0000000000227909                 db    0
.data.rel.ro:000000000022790A                 db    0
.data.rel.ro:000000000022790B                 db    0
.data.rel.ro:000000000022790C                 db    0
.data.rel.ro:000000000022790D                 db    0
.data.rel.ro:000000000022790E                 db    0
.data.rel.ro:000000000022790F                 db    0
.data.rel.ro:0000000000227910                 db    0
.data.rel.ro:0000000000227911                 db    0
.data.rel.ro:0000000000227912                 db    0
.data.rel.ro:0000000000227913                 db    0
.data.rel.ro:0000000000227914                 db    0
.data.rel.ro:0000000000227915                 db    0
.data.rel.ro:0000000000227916                 db    0
.data.rel.ro:0000000000227917                 db    0
.data.rel.ro:0000000000227918                 db  53h ; S
.data.rel.ro:0000000000227919                 db    0
.data.rel.ro:000000000022791A                 db    0
.data.rel.ro:000000000022791B                 db    0
.data.rel.ro:000000000022791C                 db    0
.data.rel.ro:000000000022791D                 db    0
.data.rel.ro:000000000022791E                 db    0
.data.rel.ro:000000000022791F                 db    0
.data.rel.ro:0000000000227920                 dq offset aSummarize    ; "summarize"
.data.rel.ro:0000000000227928                 db    0
.data.rel.ro:0000000000227929                 db    0
.data.rel.ro:000000000022792A                 db    0
.data.rel.ro:000000000022792B                 db    0
.data.rel.ro:000000000022792C                 db    0
.data.rel.ro:000000000022792D                 db    0
.data.rel.ro:000000000022792E                 db    0
.data.rel.ro:000000000022792F                 db    0
.data.rel.ro:0000000000227930                 db    0
.data.rel.ro:0000000000227931                 db    0
.data.rel.ro:0000000000227932                 db    0
.data.rel.ro:0000000000227933                 db    0
.data.rel.ro:0000000000227934                 db    0
.data.rel.ro:0000000000227935                 db    0
.data.rel.ro:0000000000227936                 db    0
.data.rel.ro:0000000000227937                 db    0
.data.rel.ro:0000000000227938                 db  73h ; s
.data.rel.ro:0000000000227939                 db    0
.data.rel.ro:000000000022793A                 db    0
.data.rel.ro:000000000022793B                 db    0
.data.rel.ro:000000000022793C                 db    0
.data.rel.ro:000000000022793D                 db    0
.data.rel.ro:000000000022793E                 db    0
.data.rel.ro:000000000022793F                 db    0
.data.rel.ro:0000000000227940                 dq offset aTotal        ; "total"
.data.rel.ro:0000000000227948                 db    0
.data.rel.ro:0000000000227949                 db    0
.data.rel.ro:000000000022794A                 db    0
.data.rel.ro:000000000022794B                 db    0
.data.rel.ro:000000000022794C                 db    0
.data.rel.ro:000000000022794D                 db    0
.data.rel.ro:000000000022794E                 db    0
.data.rel.ro:000000000022794F                 db    0
.data.rel.ro:0000000000227950                 db    0
.data.rel.ro:0000000000227951                 db    0
.data.rel.ro:0000000000227952                 db    0
.data.rel.ro:0000000000227953                 db    0
.data.rel.ro:0000000000227954                 db    0
.data.rel.ro:0000000000227955                 db    0
.data.rel.ro:0000000000227956                 db    0
.data.rel.ro:0000000000227957                 db    0
.data.rel.ro:0000000000227958                 db  63h ; c
.data.rel.ro:0000000000227959                 db    0
.data.rel.ro:000000000022795A                 db    0
.data.rel.ro:000000000022795B                 db    0
.data.rel.ro:000000000022795C                 db    0
.data.rel.ro:000000000022795D                 db    0
.data.rel.ro:000000000022795E                 db    0
.data.rel.ro:000000000022795F                 db    0
.data.rel.ro:0000000000227960                 dq offset aThreshold    ; "threshold"
.data.rel.ro:0000000000227968                 db    1
.data.rel.ro:0000000000227969                 db    0
.data.rel.ro:000000000022796A                 db    0
.data.rel.ro:000000000022796B                 db    0
.data.rel.ro:000000000022796C                 db    0
.data.rel.ro:000000000022796D                 db    0
.data.rel.ro:000000000022796E                 db    0
.data.rel.ro:000000000022796F                 db    0
.data.rel.ro:0000000000227970                 db    0
.data.rel.ro:0000000000227971                 db    0
.data.rel.ro:0000000000227972                 db    0
.data.rel.ro:0000000000227973                 db    0
.data.rel.ro:0000000000227974                 db    0
.data.rel.ro:0000000000227975                 db    0
.data.rel.ro:0000000000227976                 db    0
.data.rel.ro:0000000000227977                 db    0
.data.rel.ro:0000000000227978                 db  74h ; t
.data.rel.ro:0000000000227979                 db    0
.data.rel.ro:000000000022797A                 db    0
.data.rel.ro:000000000022797B                 db    0
.data.rel.ro:000000000022797C                 db    0
.data.rel.ro:000000000022797D                 db    0
.data.rel.ro:000000000022797E                 db    0
.data.rel.ro:000000000022797F                 db    0
.data.rel.ro:0000000000227980                 dq offset aTime+2       ; "time"
.data.rel.ro:0000000000227988                 db    2
.data.rel.ro:0000000000227989                 db    0
.data.rel.ro:000000000022798A                 db    0
.data.rel.ro:000000000022798B                 db    0
.data.rel.ro:000000000022798C                 db    0
.data.rel.ro:000000000022798D                 db    0
.data.rel.ro:000000000022798E                 db    0
.data.rel.ro:000000000022798F                 db    0
.data.rel.ro:0000000000227990                 db    0
.data.rel.ro:0000000000227991                 db    0
.data.rel.ro:0000000000227992                 db    0
.data.rel.ro:0000000000227993                 db    0
.data.rel.ro:0000000000227994                 db    0
.data.rel.ro:0000000000227995                 db    0
.data.rel.ro:0000000000227996                 db    0
.data.rel.ro:0000000000227997                 db    0
.data.rel.ro:0000000000227998                 db  85h
.data.rel.ro:0000000000227999                 db    0
.data.rel.ro:000000000022799A                 db    0
.data.rel.ro:000000000022799B                 db    0
.data.rel.ro:000000000022799C                 db    0
.data.rel.ro:000000000022799D                 db    0
.data.rel.ro:000000000022799E                 db    0
.data.rel.ro:000000000022799F                 db    0
.data.rel.ro:00000000002279A0                 dq offset aTimeStyle_1  ; "time-style"
.data.rel.ro:00000000002279A8                 db    1
.data.rel.ro:00000000002279A9                 db    0
.data.rel.ro:00000000002279AA                 db    0
.data.rel.ro:00000000002279AB                 db    0
.data.rel.ro:00000000002279AC                 db    0
.data.rel.ro:00000000002279AD                 db    0
.data.rel.ro:00000000002279AE                 db    0
.data.rel.ro:00000000002279AF                 db    0
.data.rel.ro:00000000002279B0                 db    0
.data.rel.ro:00000000002279B1                 db    0
.data.rel.ro:00000000002279B2                 db    0
.data.rel.ro:00000000002279B3                 db    0
.data.rel.ro:00000000002279B4                 db    0
.data.rel.ro:00000000002279B5                 db    0
.data.rel.ro:00000000002279B6                 db    0
.data.rel.ro:00000000002279B7                 db    0
.data.rel.ro:00000000002279B8                 db  86h
.data.rel.ro:00000000002279B9                 db    0
.data.rel.ro:00000000002279BA                 db    0
.data.rel.ro:00000000002279BB                 db    0
.data.rel.ro:00000000002279BC                 db    0
.data.rel.ro:00000000002279BD                 db    0
.data.rel.ro:00000000002279BE                 db    0
.data.rel.ro:00000000002279BF                 db    0
.data.rel.ro:00000000002279C0                 dq offset aHelp         ; "help"
.data.rel.ro:00000000002279C8                 db    0
.data.rel.ro:00000000002279C9                 db    0
.data.rel.ro:00000000002279CA                 db    0
.data.rel.ro:00000000002279CB                 db    0
.data.rel.ro:00000000002279CC                 db    0
.data.rel.ro:00000000002279CD                 db    0
.data.rel.ro:00000000002279CE                 db    0
.data.rel.ro:00000000002279CF                 db    0
.data.rel.ro:00000000002279D0                 db    0
.data.rel.ro:00000000002279D1                 db    0
.data.rel.ro:00000000002279D2                 db    0
.data.rel.ro:00000000002279D3                 db    0
.data.rel.ro:00000000002279D4                 db    0
.data.rel.ro:00000000002279D5                 db    0
.data.rel.ro:00000000002279D6                 db    0
.data.rel.ro:00000000002279D7                 db    0
.data.rel.ro:00000000002279D8                 db  7Eh ; ~
.data.rel.ro:00000000002279D9                 db 0FFh
.data.rel.ro:00000000002279DA                 db 0FFh
.data.rel.ro:00000000002279DB                 db 0FFh
.data.rel.ro:00000000002279DC                 db    0
.data.rel.ro:00000000002279DD                 db    0
.data.rel.ro:00000000002279DE                 db    0
.data.rel.ro:00000000002279DF                 db    0
.data.rel.ro:00000000002279E0                 dq offset aVersion      ; "version"
.data.rel.ro:00000000002279E8                 db    0
.data.rel.ro:00000000002279E9                 db    0
.data.rel.ro:00000000002279EA                 db    0
.data.rel.ro:00000000002279EB                 db    0
.data.rel.ro:00000000002279EC                 db    0
.data.rel.ro:00000000002279ED                 db    0
.data.rel.ro:00000000002279EE                 db    0
.data.rel.ro:00000000002279EF                 db    0
.data.rel.ro:00000000002279F0                 db    0
.data.rel.ro:00000000002279F1                 db    0
.data.rel.ro:00000000002279F2                 db    0
.data.rel.ro:00000000002279F3                 db    0
.data.rel.ro:00000000002279F4                 db    0
.data.rel.ro:00000000002279F5                 db    0
.data.rel.ro:00000000002279F6                 db    0
.data.rel.ro:00000000002279F7                 db    0
.data.rel.ro:00000000002279F8                 db  7Dh ; }
.data.rel.ro:00000000002279F9                 db 0FFh
.data.rel.ro:00000000002279FA                 db 0FFh
.data.rel.ro:00000000002279FB                 db 0FFh
.data.rel.ro:00000000002279FC                 db    0
.data.rel.ro:00000000002279FD                 db    0
.data.rel.ro:00000000002279FE                 db    0
.data.rel.ro:00000000002279FF                 db    0
.data.rel.ro:0000000000227A00                 db    0
.data.rel.ro:0000000000227A01                 db    0
.data.rel.ro:0000000000227A02                 db    0
.data.rel.ro:0000000000227A03                 db    0
.data.rel.ro:0000000000227A04                 db    0
.data.rel.ro:0000000000227A05                 db    0
.data.rel.ro:0000000000227A06                 db    0
.data.rel.ro:0000000000227A07                 db    0
.data.rel.ro:0000000000227A08                 db    0
.data.rel.ro:0000000000227A09                 db    0
.data.rel.ro:0000000000227A0A                 db    0
.data.rel.ro:0000000000227A0B                 db    0
.data.rel.ro:0000000000227A0C                 db    0
.data.rel.ro:0000000000227A0D                 db    0
.data.rel.ro:0000000000227A0E                 db    0
.data.rel.ro:0000000000227A0F                 db    0
.data.rel.ro:0000000000227A10                 db    0
.data.rel.ro:0000000000227A11                 db    0
.data.rel.ro:0000000000227A12                 db    0
.data.rel.ro:0000000000227A13                 db    0
.data.rel.ro:0000000000227A14                 db    0
.data.rel.ro:0000000000227A15                 db    0
.data.rel.ro:0000000000227A16                 db    0
.data.rel.ro:0000000000227A17                 db    0
.data.rel.ro:0000000000227A18                 db    0
.data.rel.ro:0000000000227A19                 db    0
.data.rel.ro:0000000000227A1A                 db    0
.data.rel.ro:0000000000227A1B                 db    0
.data.rel.ro:0000000000227A1C                 db    0
.data.rel.ro:0000000000227A1D                 db    0
.data.rel.ro:0000000000227A1E                 db    0
.data.rel.ro:0000000000227A1F                 db    0
.data.rel.ro:0000000000227A20 block_size_args dq offset aHumanReadable
.data.rel.ro:0000000000227A20                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:0000000000227A20                                         ; "human-readable"
.data.rel.ro:0000000000227A28                 dq offset aSi           ; "si"
.data.rel.ro:0000000000227A30                 align 20h
.data.rel.ro:0000000000227A40                 public quoting_style_args
.data.rel.ro:0000000000227A40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000227A48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000227A50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000227A58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000227A60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000227A68                 dq offset aNSNNSNC+14h  ; "c"
.data.rel.ro:0000000000227A70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000227A78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000227A80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000227A88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000227A90                 db    0
.data.rel.ro:0000000000227A91                 db    0
.data.rel.ro:0000000000227A92                 db    0
.data.rel.ro:0000000000227A93                 db    0
.data.rel.ro:0000000000227A94                 db    0
.data.rel.ro:0000000000227A95                 db    0
.data.rel.ro:0000000000227A96                 db    0
.data.rel.ro:0000000000227A97                 db    0
.data.rel.ro:0000000000227A97 _data_rel_ro    ends
.data.rel.ro:0000000000227A97
LOAD:0000000000227A98 ; ELF Dynamic Information
LOAD:0000000000227A98 ; ===========================================================================
LOAD:0000000000227A98
LOAD:0000000000227A98 ; Segment type: Pure data
LOAD:0000000000227A98 ; Segment permissions: Read/Write
LOAD:0000000000227A98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000227A98                 assume cs:LOAD
LOAD:0000000000227A98                 ;org 227A98h
LOAD:0000000000227A98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000227A98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000227A98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000227AA8                 Elf64_Dyn <0Ch, 2390h>  ; DT_INIT
LOAD:0000000000227AB8                 Elf64_Dyn <0Dh, 1FA50h> ; DT_FINI
LOAD:0000000000227AC8                 Elf64_Dyn <19h, 227670h> ; DT_INIT_ARRAY
LOAD:0000000000227AD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000227AE8                 Elf64_Dyn <1Ah, 227678h> ; DT_FINI_ARRAY
LOAD:0000000000227AF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000227B08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000227B18                 Elf64_Dyn <5, 0DF0h>    ; DT_STRTAB
LOAD:0000000000227B28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000227B38                 Elf64_Dyn <0Ah, 4A9h>   ; DT_STRSZ
LOAD:0000000000227B48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000227B58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000227B68                 Elf64_Dyn <3, 227C88h>  ; DT_PLTGOT
LOAD:0000000000227B78                 Elf64_Dyn <2, 978h>     ; DT_PLTRELSZ
LOAD:0000000000227B88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000227B98                 Elf64_Dyn <17h, 1A18h>  ; DT_JMPREL
LOAD:0000000000227BA8                 Elf64_Dyn <7, 13E8h>    ; DT_RELA
LOAD:0000000000227BB8                 Elf64_Dyn <8, 630h>     ; DT_RELASZ
LOAD:0000000000227BC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000227BD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000227BE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000227BF8                 Elf64_Dyn <6FFFFFFEh, 1388h> ; DT_VERNEED
LOAD:0000000000227C08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000227C18                 Elf64_Dyn <6FFFFFF0h, 129Ah> ; DT_VERSYM
LOAD:0000000000227C28                 Elf64_Dyn <6FFFFFF9h, 34h> ; DT_RELACOUNT
LOAD:0000000000227C38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000227C48                 db    0
LOAD:0000000000227C49                 db    0
LOAD:0000000000227C4A                 db    0
LOAD:0000000000227C4B                 db    0
LOAD:0000000000227C4C                 db    0
LOAD:0000000000227C4D                 db    0
LOAD:0000000000227C4E                 db    0
LOAD:0000000000227C4F                 db    0
LOAD:0000000000227C50                 db    0
LOAD:0000000000227C51                 db    0
LOAD:0000000000227C52                 db    0
LOAD:0000000000227C53                 db    0
LOAD:0000000000227C54                 db    0
LOAD:0000000000227C55                 db    0
LOAD:0000000000227C56                 db    0
LOAD:0000000000227C57                 db    0
LOAD:0000000000227C58                 db    0
LOAD:0000000000227C59                 db    0
LOAD:0000000000227C5A                 db    0
LOAD:0000000000227C5B                 db    0
LOAD:0000000000227C5C                 db    0
LOAD:0000000000227C5D                 db    0
LOAD:0000000000227C5E                 db    0
LOAD:0000000000227C5F                 db    0
LOAD:0000000000227C60                 db    0
LOAD:0000000000227C61                 db    0
LOAD:0000000000227C62                 db    0
LOAD:0000000000227C63                 db    0
LOAD:0000000000227C64                 db    0
LOAD:0000000000227C65                 db    0
LOAD:0000000000227C66                 db    0
LOAD:0000000000227C67                 db    0
LOAD:0000000000227C68                 db    0
LOAD:0000000000227C69                 db    0
LOAD:0000000000227C6A                 db    0
LOAD:0000000000227C6B                 db    0
LOAD:0000000000227C6C                 db    0
LOAD:0000000000227C6D                 db    0
LOAD:0000000000227C6E                 db    0
LOAD:0000000000227C6F                 db    0
LOAD:0000000000227C70                 db    0
LOAD:0000000000227C71                 db    0
LOAD:0000000000227C72                 db    0
LOAD:0000000000227C73                 db    0
LOAD:0000000000227C74                 db    0
LOAD:0000000000227C75                 db    0
LOAD:0000000000227C76                 db    0
LOAD:0000000000227C77                 db    0
LOAD:0000000000227C78                 db    0
LOAD:0000000000227C79                 db    0
LOAD:0000000000227C7A                 db    0
LOAD:0000000000227C7B                 db    0
LOAD:0000000000227C7C                 db    0
LOAD:0000000000227C7D                 db    0
LOAD:0000000000227C7E                 db    0
LOAD:0000000000227C7F                 db    0
LOAD:0000000000227C80                 db    0
LOAD:0000000000227C81                 db    0
LOAD:0000000000227C82                 db    0
LOAD:0000000000227C83                 db    0
LOAD:0000000000227C84                 db    0
LOAD:0000000000227C85                 db    0
LOAD:0000000000227C86                 db    0
LOAD:0000000000227C87                 db    0
LOAD:0000000000227C87 LOAD            ends
LOAD:0000000000227C87
.got:0000000000227C88 ; ===========================================================================
.got:0000000000227C88
.got:0000000000227C88 ; Segment type: Pure data
.got:0000000000227C88 ; Segment permissions: Read/Write
.got:0000000000227C88 _got            segment qword public 'DATA' use64
.got:0000000000227C88                 assume cs:_got
.got:0000000000227C88                 ;org 227C88h
.got:0000000000227C88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000227C90 qword_227C90    dq 0                    ; DATA XREF: sub_23B0↑r
.got:0000000000227C98 qword_227C98    dq 0                    ; DATA XREF: sub_23B0+6↑r
.got:0000000000227CA0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000227CA0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000227CA8 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000227CB0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000227CB8 endmntent_ptr   dq offset endmntent     ; DATA XREF: _endmntent↑r
.got:0000000000227CC0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000227CC8 __errno_location_ptr dq offset __errno_location
.got:0000000000227CC8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000227CD0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000227CD8 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000227CE0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000227CE8 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000227CF0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000227CF8 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:0000000000227D00 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:0000000000227D08 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:0000000000227D10 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000227D18 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000227D20 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000227D28 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000227D28                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000227D30 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:0000000000227D38 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000227D40 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000227D40                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000227D48 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000227D50 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000227D50                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000227D58 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000227D60 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000227D68 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:0000000000227D70 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000227D70                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000227D78 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000227D80 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000227D88 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000227D90 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000227D98 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:0000000000227DA0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000227DA8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000227DB0 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000227DB8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000227DC0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000227DC0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000227DC8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000227DC8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000227DD0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000227DD8 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:0000000000227DE0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000227DE8 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:0000000000227DF0 fputc_ptr       dq offset fputc         ; DATA XREF: _fputc↑r
.got:0000000000227DF8 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000227E00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000227E08 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:0000000000227E10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000227E10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000227E18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000227E20 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000227E28 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000227E30 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:0000000000227E38 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:0000000000227E40 feof_ptr        dq offset feof          ; DATA XREF: _feof↑r
.got:0000000000227E48 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000227E50 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000227E58 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000227E60 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000227E68 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:0000000000227E70 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:0000000000227E78 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:0000000000227E80 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000227E88 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:0000000000227E90 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000227E98 getmntent_ptr   dq offset getmntent     ; DATA XREF: _getmntent↑r
.got:0000000000227EA0 setmntent_ptr   dq offset setmntent     ; DATA XREF: _setmntent↑r
.got:0000000000227EA8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000227EB0 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000227EB8 sscanf_ptr      dq offset sscanf        ; DATA XREF: _sscanf↑r
.got:0000000000227EC0 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000227EC8 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000227ED0 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:0000000000227ED8 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000227EE0 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000227EE8 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000227EF0 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000227EF8 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000227F00 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:0000000000227F08 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000227F10 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000227F18 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000227F20 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000227F28 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000227F30 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:0000000000227F38 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:0000000000227F40 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000227F48 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:0000000000227F50 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000227F58 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:0000000000227F60 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000227F68 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000227F70 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000227F78 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000227F78                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000227F80 fflush_unlocked_ptr dq offset fflush_unlocked
.got:0000000000227F80                                         ; DATA XREF: _fflush_unlocked↑r
.got:0000000000227F88 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000227F90 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000227F98 hasmntopt_ptr   dq offset hasmntopt     ; DATA XREF: _hasmntopt↑r
.got:0000000000227FA0 getdelim_ptr    dq offset getdelim      ; DATA XREF: _getdelim↑r
.got:0000000000227FA8 strstr_ptr      dq offset strstr        ; DATA XREF: _strstr↑r
.got:0000000000227FB0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000227FB0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000227FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000227FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000227FC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000227FC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000227FC8 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:0000000000227FC8                                         ; ino_map_alloc+1B↑r ...
.got:0000000000227FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000227FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000227FD8 fnmatch_ptr     dq offset fnmatch       ; DATA XREF: exclude_fnmatch+20↑r
.got:0000000000227FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000227FE0                                         ; DATA XREF: start+24↑r
.got:0000000000227FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000227FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000227FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000227FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000227FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000227FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000227FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000227FF8 _got            ends
.got:0000000000227FF8
.data:0000000000228000 ; ===========================================================================
.data:0000000000228000
.data:0000000000228000 ; Segment type: Pure data
.data:0000000000228000 ; Segment permissions: Read/Write
.data:0000000000228000 _data           segment align_32 public 'DATA' use64
.data:0000000000228000                 assume cs:_data
.data:0000000000228000                 ;org 228000h
.data:0000000000228000                 public __data_start ; weak
.data:0000000000228000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000228000                                         ; data_start
.data:0000000000228001                 db    0
.data:0000000000228002                 db    0
.data:0000000000228003                 db    0
.data:0000000000228004                 db    0
.data:0000000000228005                 db    0
.data:0000000000228006                 db    0
.data:0000000000228007                 db    0
.data:0000000000228008                 public __dso_handle
.data:0000000000228008 ; void *_dso_handle
.data:0000000000228008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000228008                                         ; atexit↑r ...
.data:0000000000228010 max_depth       dq 0FFFFFFFFFFFFFFFFh   ; DATA XREF: main+234↑w
.data:0000000000228010                                         ; main:loc_34EB↑r ...
.data:0000000000228018                 public Version
.data:0000000000228018 Version         dq offset a831          ; DATA XREF: main+374↑r
.data:0000000000228018                                         ; "8.31"
.data:0000000000228020                 public argmatch_die
.data:0000000000228020 argmatch_die    dq offset __argmatch_die
.data:0000000000228020                                         ; DATA XREF: main+3E6↑r
.data:0000000000228020                                         ; main:loc_3B05↑r
.data:0000000000228028                 public exit_failure
.data:0000000000228028 ; int exit_failure
.data:0000000000228028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_4C72↑r
.data:0000000000228028                                         ; xalloc_die+17↑r ...
.data:000000000022802C                 align 20h
.data:0000000000228040                 public quote_quoting_options
.data:0000000000228040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000228040                                         ; quote_mem↑o ...
.data:0000000000228041                 db    0
.data:0000000000228042                 db    0
.data:0000000000228043                 db    0
.data:0000000000228044                 db    0
.data:0000000000228045                 db    0
.data:0000000000228046                 db    0
.data:0000000000228047                 db    0
.data:0000000000228048                 db    0
.data:0000000000228049                 db    0
.data:000000000022804A                 db    0
.data:000000000022804B                 db    0
.data:000000000022804C                 db    0
.data:000000000022804D                 db    0
.data:000000000022804E                 db    0
.data:000000000022804F                 db    0
.data:0000000000228050                 db    0
.data:0000000000228051                 db    0
.data:0000000000228052                 db    0
.data:0000000000228053                 db    0
.data:0000000000228054                 db    0
.data:0000000000228055                 db    0
.data:0000000000228056                 db    0
.data:0000000000228057                 db    0
.data:0000000000228058                 db    0
.data:0000000000228059                 db    0
.data:000000000022805A                 db    0
.data:000000000022805B                 db    0
.data:000000000022805C                 db    0
.data:000000000022805D                 db    0
.data:000000000022805E                 db    0
.data:000000000022805F                 db    0
.data:0000000000228060                 db    0
.data:0000000000228061                 db    0
.data:0000000000228062                 db    0
.data:0000000000228063                 db    0
.data:0000000000228064                 db    0
.data:0000000000228065                 db    0
.data:0000000000228066                 db    0
.data:0000000000228067                 db    0
.data:0000000000228068                 db    0
.data:0000000000228069                 db    0
.data:000000000022806A                 db    0
.data:000000000022806B                 db    0
.data:000000000022806C                 db    0
.data:000000000022806D                 db    0
.data:000000000022806E                 db    0
.data:000000000022806F                 db    0
.data:0000000000228070                 db    0
.data:0000000000228071                 db    0
.data:0000000000228072                 db    0
.data:0000000000228073                 db    0
.data:0000000000228074                 db    0
.data:0000000000228075                 db    0
.data:0000000000228076                 db    0
.data:0000000000228077                 db    0
.data:0000000000228078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000228078                                         ; quotearg_n_options:loc_BA9D↑r ...
.data:000000000022807C                 align 20h
.data:0000000000228080 ; void *slotvec
.data:0000000000228080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000228080                                         ; quotearg_n_options+76↑w ...
.data:0000000000228088                 align 10h
.data:0000000000228090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000228090                                         ; quotearg_n_options+187↑r ...
.data:0000000000228098 off_228098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000228098 _data           ends
.data:0000000000228098
.bss:00000000002280A0 ; ===========================================================================
.bss:00000000002280A0
.bss:00000000002280A0 ; Segment type: Uninitialized
.bss:00000000002280A0 ; Segment permissions: Read/Write
.bss:00000000002280A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002280A0                 assume cs:_bss
.bss:00000000002280A0                 ;org 2280A0h
.bss:00000000002280A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002280A0                 public __bss_start ; weak
.bss:00000000002280A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000D30↑o
.bss:00000000002280A0                                         ; LOAD:0000000000000D90↑o ...
.bss:00000000002280A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002280A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002280A0                                         ; _edata
.bss:00000000002280A0                                         ; Copy of shared data
.bss:00000000002280A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002280A8 ; FILE *stdout
.bss:00000000002280A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000D18↑o
.bss:00000000002280A8                                         ; main+36B↑r ...
.bss:00000000002280A8                                         ; Alternative name is 'stdout'
.bss:00000000002280A8                                         ; Copy of shared data
.bss:00000000002280B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002280B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000D48↑o
.bss:00000000002280B0                                         ; main:loc_2F8D↑r ...
.bss:00000000002280B0                                         ; Alternative name is 'stdin'
.bss:00000000002280B0                                         ; Copy of shared data
.bss:00000000002280B8                 public optind@@GLIBC_2_2_5
.bss:00000000002280B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000DC0↑o
.bss:00000000002280B8                                         ; main+510↑r ...
.bss:00000000002280B8                                         ; Alternative name is 'optind'
.bss:00000000002280B8                                         ; Copy of shared data
.bss:00000000002280BC                 align 20h
.bss:00000000002280C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002280C0 ; char *optarg
.bss:00000000002280C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000DD8↑o
.bss:00000000002280C0                                         ; main:loc_2B98↑r ...
.bss:00000000002280C0                                         ; Alternative name is 'optarg'
.bss:00000000002280C0                                         ; Copy of shared data
.bss:00000000002280C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002280C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002280C8                                         ; DATA XREF: LOAD:0000000000000D60↑o
.bss:00000000002280C8                                         ; LOAD:0000000000000D78↑o ...
.bss:00000000002280C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002280C8                                         ; Copy of shared data
.bss:00000000002280D0                 align 20h
.bss:00000000002280E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002280E0 ; FILE *stderr
.bss:00000000002280E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000DA8↑o
.bss:00000000002280E0                                         ; main+13DD↑r ...
.bss:00000000002280E0                                         ; Alternative name is 'stderr'
.bss:00000000002280E0                                         ; Copy of shared data
.bss:00000000002280E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002280E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002280E9                 align 20h
.bss:0000000000228100 dulvl_7287      dq ?                    ; DATA XREF: main+7EC↑r
.bss:0000000000228100                                         ; main+827↑w ...
.bss:0000000000228108 n_alloc_7286    dq ?                    ; DATA XREF: main:loc_31EE↑r
.bss:0000000000228108                                         ; main+83C↑w ...
.bss:0000000000228110 temp_argv_7378  db    ? ;               ; DATA XREF: main:loc_3060↑o
.bss:0000000000228111                 db    ? ;
.bss:0000000000228112                 db    ? ;
.bss:0000000000228113                 db    ? ;
.bss:0000000000228114                 db    ? ;
.bss:0000000000228115                 db    ? ;
.bss:0000000000228116                 db    ? ;
.bss:0000000000228117                 db    ? ;
.bss:0000000000228118                 db    ? ;
.bss:0000000000228119                 db    ? ;
.bss:000000000022811A                 db    ? ;
.bss:000000000022811B                 db    ? ;
.bss:000000000022811C                 db    ? ;
.bss:000000000022811D                 db    ? ;
.bss:000000000022811E                 db    ? ;
.bss:000000000022811F                 db    ? ;
.bss:0000000000228120 tot_dui         dq ?                    ; DATA XREF: main+912↑r
.bss:0000000000228120                                         ; main+939↑w ...
.bss:0000000000228128 qword_228128    dq ?                    ; DATA XREF: main+92A↑w
.bss:0000000000228130 qword_228130    dq ?                    ; DATA XREF: main+932↑r
.bss:0000000000228130                                         ; main:loc_3408↑w
.bss:0000000000228138 qword_228138    dq ?                    ; DATA XREF: main+944↑r
.bss:0000000000228138                                         ; main+9BF↑w
.bss:0000000000228140 exclude         dq ?                    ; DATA XREF: main+A7↑w
.bss:0000000000228140                                         ; main+27D↑r ...
.bss:0000000000228148 output_block_size dq ?                  ; DATA XREF: main+B3↑o
.bss:0000000000228148                                         ; main+1BD↑w ...
.bss:0000000000228150 localtz         dq ?                    ; DATA XREF: main+431↑w
.bss:0000000000228150                                         ; print_size:loc_413D↑r
.bss:0000000000228158 time_format     dq ?                    ; DATA XREF: main+506↑w
.bss:0000000000228158                                         ; main+1108↑w ...
.bss:0000000000228160 ; char *time_style
.bss:0000000000228160 time_style      dq ?                    ; DATA XREF: main+3C5↑w
.bss:0000000000228160                                         ; main+4E3↑r ...
.bss:0000000000228168 time_type       dd ?                    ; DATA XREF: main+41E↑w
.bss:0000000000228168                                         ; main:loc_31B0↑r
.bss:000000000022816C opt_time        db ?                    ; DATA XREF: main+3DA↑w
.bss:000000000022816C                                         ; main:loc_2F2A↑r ...
.bss:000000000022816D opt_inodes      db ?                    ; DATA XREF: main:loc_2E02↑w
.bss:000000000022816D                                         ; main:loc_2F09↑r ...
.bss:000000000022816E                 align 10h
.bss:0000000000228170 human_output_opts dd ?                  ; DATA XREF: main+BA↑o
.bss:0000000000228170                                         ; main:loc_2C06↑w ...
.bss:0000000000228174                 align 8
.bss:0000000000228178 opt_threshold   dq ?                    ; DATA XREF: main+156↑o
.bss:0000000000228178                                         ; main+16E↑r ...
.bss:0000000000228180 opt_separate_dirs db ?                  ; DATA XREF: main:loc_2D31↑w
.bss:0000000000228180                                         ; main:loc_3300↑r ...
.bss:0000000000228181 print_grand_total db ?                  ; DATA XREF: main:loc_2C90↑w
.bss:0000000000228181                                         ; main:loc_35E7↑r
.bss:0000000000228182 opt_nul_terminate_output db ?           ; DATA XREF: main:loc_2DA4↑w
.bss:0000000000228182                                         ; print_size:loc_4186↑r
.bss:0000000000228183 hash_all        db ?                    ; DATA XREF: main+549↑w
.bss:0000000000228183                                         ; main+57E↑r ...
.bss:0000000000228184 opt_count_all   db ?                    ; DATA XREF: main:loc_2C1D↑w
.bss:0000000000228184                                         ; main+571↑r ...
.bss:0000000000228185 apparent_size   db ?                    ; DATA XREF: main:loc_2C9C↑w
.bss:0000000000228185                                         ; main:loc_2EC4↑w ...
.bss:0000000000228186 opt_all         db ?                    ; DATA XREF: main:loc_2CBA↑w
.bss:0000000000228186                                         ; main+4A1↑r ...
.bss:0000000000228187                 align 8
.bss:0000000000228188 prev_level      dq ?                    ; DATA XREF: main+7CA↑r
.bss:0000000000228188                                         ; main+843↑r ...
.bss:0000000000228190 ; void *di_mnt
.bss:0000000000228190 di_mnt          dq ?                    ; DATA XREF: main+B66↑r
.bss:0000000000228190                                         ; main+1252↑r ...
.bss:0000000000228198 ; void *di_files
.bss:0000000000228198 di_files        dq ?                    ; DATA XREF: main+564↑w
.bss:0000000000228198                                         ; main+726↑r ...
.bss:00000000002281A0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002281A0                                         ; close_stdout+1B↑r
.bss:00000000002281A1                 align 8
.bss:00000000002281A8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002281A8                                         ; close_stdout+56↑r
.bss:00000000002281B0                 public program_name
.bss:00000000002281B0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002281B0                                         ; set_program_name:loc_A6BD↑w
.bss:00000000002281B8                 align 20h
.bss:00000000002281C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002281C0                                         ; quotearg_free+46↑o ...
.bss:00000000002281C1                 db    ? ;
.bss:00000000002281C2                 db    ? ;
.bss:00000000002281C3                 db    ? ;
.bss:00000000002281C4                 db    ? ;
.bss:00000000002281C5                 db    ? ;
.bss:00000000002281C6                 db    ? ;
.bss:00000000002281C7                 db    ? ;
.bss:00000000002281C8                 db    ? ;
.bss:00000000002281C9                 db    ? ;
.bss:00000000002281CA                 db    ? ;
.bss:00000000002281CB                 db    ? ;
.bss:00000000002281CC                 db    ? ;
.bss:00000000002281CD                 db    ? ;
.bss:00000000002281CE                 db    ? ;
.bss:00000000002281CF                 db    ? ;
.bss:00000000002281D0                 db    ? ;
.bss:00000000002281D1                 db    ? ;
.bss:00000000002281D2                 db    ? ;
.bss:00000000002281D3                 db    ? ;
.bss:00000000002281D4                 db    ? ;
.bss:00000000002281D5                 db    ? ;
.bss:00000000002281D6                 db    ? ;
.bss:00000000002281D7                 db    ? ;
.bss:00000000002281D8                 db    ? ;
.bss:00000000002281D9                 db    ? ;
.bss:00000000002281DA                 db    ? ;
.bss:00000000002281DB                 db    ? ;
.bss:00000000002281DC                 db    ? ;
.bss:00000000002281DD                 db    ? ;
.bss:00000000002281DE                 db    ? ;
.bss:00000000002281DF                 db    ? ;
.bss:00000000002281E0                 db    ? ;
.bss:00000000002281E1                 db    ? ;
.bss:00000000002281E2                 db    ? ;
.bss:00000000002281E3                 db    ? ;
.bss:00000000002281E4                 db    ? ;
.bss:00000000002281E5                 db    ? ;
.bss:00000000002281E6                 db    ? ;
.bss:00000000002281E7                 db    ? ;
.bss:00000000002281E8                 db    ? ;
.bss:00000000002281E9                 db    ? ;
.bss:00000000002281EA                 db    ? ;
.bss:00000000002281EB                 db    ? ;
.bss:00000000002281EC                 db    ? ;
.bss:00000000002281ED                 db    ? ;
.bss:00000000002281EE                 db    ? ;
.bss:00000000002281EF                 db    ? ;
.bss:00000000002281F0                 db    ? ;
.bss:00000000002281F1                 db    ? ;
.bss:00000000002281F2                 db    ? ;
.bss:00000000002281F3                 db    ? ;
.bss:00000000002281F4                 db    ? ;
.bss:00000000002281F5                 db    ? ;
.bss:00000000002281F6                 db    ? ;
.bss:00000000002281F7                 db    ? ;
.bss:00000000002281F8                 db    ? ;
.bss:00000000002281F9                 db    ? ;
.bss:00000000002281FA                 db    ? ;
.bss:00000000002281FB                 db    ? ;
.bss:00000000002281FC                 db    ? ;
.bss:00000000002281FD                 db    ? ;
.bss:00000000002281FE                 db    ? ;
.bss:00000000002281FF                 db    ? ;
.bss:0000000000228200                 db    ? ;
.bss:0000000000228201                 db    ? ;
.bss:0000000000228202                 db    ? ;
.bss:0000000000228203                 db    ? ;
.bss:0000000000228204                 db    ? ;
.bss:0000000000228205                 db    ? ;
.bss:0000000000228206                 db    ? ;
.bss:0000000000228207                 db    ? ;
.bss:0000000000228208                 db    ? ;
.bss:0000000000228209                 db    ? ;
.bss:000000000022820A                 db    ? ;
.bss:000000000022820B                 db    ? ;
.bss:000000000022820C                 db    ? ;
.bss:000000000022820D                 db    ? ;
.bss:000000000022820E                 db    ? ;
.bss:000000000022820F                 db    ? ;
.bss:0000000000228210                 db    ? ;
.bss:0000000000228211                 db    ? ;
.bss:0000000000228212                 db    ? ;
.bss:0000000000228213                 db    ? ;
.bss:0000000000228214                 db    ? ;
.bss:0000000000228215                 db    ? ;
.bss:0000000000228216                 db    ? ;
.bss:0000000000228217                 db    ? ;
.bss:0000000000228218                 db    ? ;
.bss:0000000000228219                 db    ? ;
.bss:000000000022821A                 db    ? ;
.bss:000000000022821B                 db    ? ;
.bss:000000000022821C                 db    ? ;
.bss:000000000022821D                 db    ? ;
.bss:000000000022821E                 db    ? ;
.bss:000000000022821F                 db    ? ;
.bss:0000000000228220                 db    ? ;
.bss:0000000000228221                 db    ? ;
.bss:0000000000228222                 db    ? ;
.bss:0000000000228223                 db    ? ;
.bss:0000000000228224                 db    ? ;
.bss:0000000000228225                 db    ? ;
.bss:0000000000228226                 db    ? ;
.bss:0000000000228227                 db    ? ;
.bss:0000000000228228                 db    ? ;
.bss:0000000000228229                 db    ? ;
.bss:000000000022822A                 db    ? ;
.bss:000000000022822B                 db    ? ;
.bss:000000000022822C                 db    ? ;
.bss:000000000022822D                 db    ? ;
.bss:000000000022822E                 db    ? ;
.bss:000000000022822F                 db    ? ;
.bss:0000000000228230                 db    ? ;
.bss:0000000000228231                 db    ? ;
.bss:0000000000228232                 db    ? ;
.bss:0000000000228233                 db    ? ;
.bss:0000000000228234                 db    ? ;
.bss:0000000000228235                 db    ? ;
.bss:0000000000228236                 db    ? ;
.bss:0000000000228237                 db    ? ;
.bss:0000000000228238                 db    ? ;
.bss:0000000000228239                 db    ? ;
.bss:000000000022823A                 db    ? ;
.bss:000000000022823B                 db    ? ;
.bss:000000000022823C                 db    ? ;
.bss:000000000022823D                 db    ? ;
.bss:000000000022823E                 db    ? ;
.bss:000000000022823F                 db    ? ;
.bss:0000000000228240                 db    ? ;
.bss:0000000000228241                 db    ? ;
.bss:0000000000228242                 db    ? ;
.bss:0000000000228243                 db    ? ;
.bss:0000000000228244                 db    ? ;
.bss:0000000000228245                 db    ? ;
.bss:0000000000228246                 db    ? ;
.bss:0000000000228247                 db    ? ;
.bss:0000000000228248                 db    ? ;
.bss:0000000000228249                 db    ? ;
.bss:000000000022824A                 db    ? ;
.bss:000000000022824B                 db    ? ;
.bss:000000000022824C                 db    ? ;
.bss:000000000022824D                 db    ? ;
.bss:000000000022824E                 db    ? ;
.bss:000000000022824F                 db    ? ;
.bss:0000000000228250                 db    ? ;
.bss:0000000000228251                 db    ? ;
.bss:0000000000228252                 db    ? ;
.bss:0000000000228253                 db    ? ;
.bss:0000000000228254                 db    ? ;
.bss:0000000000228255                 db    ? ;
.bss:0000000000228256                 db    ? ;
.bss:0000000000228257                 db    ? ;
.bss:0000000000228258                 db    ? ;
.bss:0000000000228259                 db    ? ;
.bss:000000000022825A                 db    ? ;
.bss:000000000022825B                 db    ? ;
.bss:000000000022825C                 db    ? ;
.bss:000000000022825D                 db    ? ;
.bss:000000000022825E                 db    ? ;
.bss:000000000022825F                 db    ? ;
.bss:0000000000228260                 db    ? ;
.bss:0000000000228261                 db    ? ;
.bss:0000000000228262                 db    ? ;
.bss:0000000000228263                 db    ? ;
.bss:0000000000228264                 db    ? ;
.bss:0000000000228265                 db    ? ;
.bss:0000000000228266                 db    ? ;
.bss:0000000000228267                 db    ? ;
.bss:0000000000228268                 db    ? ;
.bss:0000000000228269                 db    ? ;
.bss:000000000022826A                 db    ? ;
.bss:000000000022826B                 db    ? ;
.bss:000000000022826C                 db    ? ;
.bss:000000000022826D                 db    ? ;
.bss:000000000022826E                 db    ? ;
.bss:000000000022826F                 db    ? ;
.bss:0000000000228270                 db    ? ;
.bss:0000000000228271                 db    ? ;
.bss:0000000000228272                 db    ? ;
.bss:0000000000228273                 db    ? ;
.bss:0000000000228274                 db    ? ;
.bss:0000000000228275                 db    ? ;
.bss:0000000000228276                 db    ? ;
.bss:0000000000228277                 db    ? ;
.bss:0000000000228278                 db    ? ;
.bss:0000000000228279                 db    ? ;
.bss:000000000022827A                 db    ? ;
.bss:000000000022827B                 db    ? ;
.bss:000000000022827C                 db    ? ;
.bss:000000000022827D                 db    ? ;
.bss:000000000022827E                 db    ? ;
.bss:000000000022827F                 db    ? ;
.bss:0000000000228280                 db    ? ;
.bss:0000000000228281                 db    ? ;
.bss:0000000000228282                 db    ? ;
.bss:0000000000228283                 db    ? ;
.bss:0000000000228284                 db    ? ;
.bss:0000000000228285                 db    ? ;
.bss:0000000000228286                 db    ? ;
.bss:0000000000228287                 db    ? ;
.bss:0000000000228288                 db    ? ;
.bss:0000000000228289                 db    ? ;
.bss:000000000022828A                 db    ? ;
.bss:000000000022828B                 db    ? ;
.bss:000000000022828C                 db    ? ;
.bss:000000000022828D                 db    ? ;
.bss:000000000022828E                 db    ? ;
.bss:000000000022828F                 db    ? ;
.bss:0000000000228290                 db    ? ;
.bss:0000000000228291                 db    ? ;
.bss:0000000000228292                 db    ? ;
.bss:0000000000228293                 db    ? ;
.bss:0000000000228294                 db    ? ;
.bss:0000000000228295                 db    ? ;
.bss:0000000000228296                 db    ? ;
.bss:0000000000228297                 db    ? ;
.bss:0000000000228298                 db    ? ;
.bss:0000000000228299                 db    ? ;
.bss:000000000022829A                 db    ? ;
.bss:000000000022829B                 db    ? ;
.bss:000000000022829C                 db    ? ;
.bss:000000000022829D                 db    ? ;
.bss:000000000022829E                 db    ? ;
.bss:000000000022829F                 db    ? ;
.bss:00000000002282A0                 db    ? ;
.bss:00000000002282A1                 db    ? ;
.bss:00000000002282A2                 db    ? ;
.bss:00000000002282A3                 db    ? ;
.bss:00000000002282A4                 db    ? ;
.bss:00000000002282A5                 db    ? ;
.bss:00000000002282A6                 db    ? ;
.bss:00000000002282A7                 db    ? ;
.bss:00000000002282A8                 db    ? ;
.bss:00000000002282A9                 db    ? ;
.bss:00000000002282AA                 db    ? ;
.bss:00000000002282AB                 db    ? ;
.bss:00000000002282AC                 db    ? ;
.bss:00000000002282AD                 db    ? ;
.bss:00000000002282AE                 db    ? ;
.bss:00000000002282AF                 db    ? ;
.bss:00000000002282B0                 db    ? ;
.bss:00000000002282B1                 db    ? ;
.bss:00000000002282B2                 db    ? ;
.bss:00000000002282B3                 db    ? ;
.bss:00000000002282B4                 db    ? ;
.bss:00000000002282B5                 db    ? ;
.bss:00000000002282B6                 db    ? ;
.bss:00000000002282B7                 db    ? ;
.bss:00000000002282B8                 db    ? ;
.bss:00000000002282B9                 db    ? ;
.bss:00000000002282BA                 db    ? ;
.bss:00000000002282BB                 db    ? ;
.bss:00000000002282BC                 db    ? ;
.bss:00000000002282BD                 db    ? ;
.bss:00000000002282BE                 db    ? ;
.bss:00000000002282BF                 db    ? ;
.bss:00000000002282C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002282C0                                         ; get_quoting_style↑o ...
.bss:00000000002282D0 xmmword_2282D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002282D0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002282E0 xmmword_2282E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002282E0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002282F0 qword_2282F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002282F0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002282F8 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:00000000002282F8                                         ; rpl_fcntl:loc_1F7BF↑w ...
.bss:00000000002282FC                 align 20h
.bss:0000000000228300                 public rpl_re_syntax_options
.bss:0000000000228300 rpl_re_syntax_options dq ?              ; DATA XREF: rpl_re_compile_pattern+4↑r
.bss:0000000000228300                                         ; rpl_re_set_syntax↑r ...
.bss:0000000000228300 _bss            ends
.bss:0000000000228300
.prgend:0000000000228308 ; ===========================================================================
.prgend:0000000000228308
.prgend:0000000000228308 ; Segment type: Zero-length
.prgend:0000000000228308 _prgend         segment byte public '' use64
.prgend:0000000000228308 _end            label byte
.prgend:0000000000228308 _prgend         ends
.prgend:0000000000228308
extern:0000000000228310 ; ===========================================================================
extern:0000000000228310
extern:0000000000228310 ; Segment type: Externs
extern:0000000000228310 ; extern
extern:0000000000228310 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000228310                 extrn __ctype_toupper_loc:near
extern:0000000000228310                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000228310                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000228318 ; int _uflow(_IO_FILE *)
extern:0000000000228318                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000228318                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000228320 ; char *getenv(const char *name)
extern:0000000000228320                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000228320                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000228328 ; void free(void *ptr)
extern:0000000000228328                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:0000000000228328                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000228330 ; int endmntent(FILE *stream)
extern:0000000000228330                 extrn endmntent:near    ; CODE XREF: _endmntent↑j
extern:0000000000228330                                         ; DATA XREF: .got:endmntent_ptr↑o
extern:0000000000228338 ; void __noreturn abort(void)
extern:0000000000228338                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000228338                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000228340 ; int *_errno_location(void)
extern:0000000000228340                 extrn __errno_location:near
extern:0000000000228340                                         ; CODE XREF: ___errno_location↑j
extern:0000000000228340                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000228348 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000228348                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000228348                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000228350 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:0000000000228350                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:0000000000228350                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:0000000000228358 ; void __noreturn exit(int status)
extern:0000000000228358                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000228358                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000228360 ; char *strcpy(char *dest, const char *src)
extern:0000000000228360                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:0000000000228360                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:0000000000228368 ; size_t _fpending(FILE *fp)
extern:0000000000228368                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000228368                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000228370 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:0000000000228370                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:0000000000228370                                         ; DATA XREF: .got:qsort_ptr↑o
extern:0000000000228378 ; int iswcntrl(wint_t wc)
extern:0000000000228378                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:0000000000228378                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:0000000000228380 ; struct lconv *localeconv(void)
extern:0000000000228380                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:0000000000228380                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:0000000000228388 ; int fcntl(int fd, int cmd, ...)
extern:0000000000228388                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000228388                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000228390 ; int setenv(const char *name, const char *value, int replace)
extern:0000000000228390                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:0000000000228390                                         ; DATA XREF: .got:setenv_ptr↑o
extern:0000000000228398 ; char *textdomain(const char *domainname)
extern:0000000000228398                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000228398                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002283A0 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002283A0                 extrn __strtol_internal:near
extern:00000000002283A0                                         ; CODE XREF: ___strtol_internal↑j
extern:00000000002283A0                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:00000000002283A8 ; int iswctype(wint_t wc, wctype_t desc)
extern:00000000002283A8                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:00000000002283A8                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:00000000002283B0 ; int fclose(FILE *stream)
extern:00000000002283B0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002283B0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002283B8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002283B8                 extrn bindtextdomain:near
extern:00000000002283B8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002283B8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002283C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002283C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002283C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002283C8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002283C8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002283C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002283C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002283D0 ; size_t strlen(const char *s)
extern:00000000002283D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002283D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002283D8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:00000000002283D8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:00000000002283D8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:00000000002283E0 ; int openat(int fd, const char *file, int oflag, ...)
extern:00000000002283E0                 extrn openat:near       ; CODE XREF: _openat↑j
extern:00000000002283E0                                         ; DATA XREF: .got:openat_ptr↑o
extern:00000000002283E8                 extrn __stack_chk_fail:near
extern:00000000002283E8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002283E8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002283F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002283F0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002283F0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002283F8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002283F8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002283F8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000228400 ; int dup2(int fd, int fd2)
extern:0000000000228400                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000228400                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000228408 ; char *strchr(const char *s, int c)
extern:0000000000228408                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000228408                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000228410 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:0000000000228410                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:0000000000228410                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:0000000000228418 ; int _overflow(_IO_FILE *, int)
extern:0000000000228418                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000228418                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000228420 ; char *strrchr(const char *s, int c)
extern:0000000000228420                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000228420                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000228428 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:0000000000228428                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:0000000000228428                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:0000000000228430 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000228430                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000228430                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000228438 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000228438                 extrn __assert_fail:near
extern:0000000000228438                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000228438                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000228440 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000228440                 extrn __strtoul_internal:near
extern:0000000000228440                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000228440                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000228448 ; int fnmatch(const char *pattern, const char *name, int flags)
extern:0000000000228448                 extrn fnmatch:near      ; DATA XREF: .got:fnmatch_ptr↑o
extern:0000000000228450 ; void *memset(void *s, int c, size_t n)
extern:0000000000228450                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000228450                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000228458 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:0000000000228458                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:0000000000228458                                         ; DATA XREF: .got:freopen_ptr↑o
extern:0000000000228460 ; int close(int fd)
extern:0000000000228460                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000228460                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000228468 ; int closedir(DIR *dirp)
extern:0000000000228468                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:0000000000228468                                         ; DATA XREF: .got:closedir_ptr↑o
extern:0000000000228470 ; int fputc(int c, FILE *stream)
extern:0000000000228470                 extrn fputc:near        ; CODE XREF: _fputc↑j
extern:0000000000228470                                         ; DATA XREF: .got:fputc_ptr↑o
extern:0000000000228478 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000228478                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000228478                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000228480 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000228480                 extrn __libc_start_main:near
extern:0000000000228480                                         ; CODE XREF: start+24↑p
extern:0000000000228480                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000228488 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000228488                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000228488                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000228490 ; wctype_t wctype(const char *property)
extern:0000000000228490                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:0000000000228490                                         ; DATA XREF: .got:wctype_ptr↑o
extern:0000000000228498 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000228498                 extrn fputs_unlocked:near
extern:0000000000228498                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000228498                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002284A0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002284A0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002284A0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002284A8 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:00000000002284A8                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:00000000002284A8                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:00000000002284B0 ; int strcmp(const char *s1, const char *s2)
extern:00000000002284B0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002284B0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002284B8 ; int dirfd(DIR *dirp)
extern:00000000002284B8                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:00000000002284B8                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:00000000002284C0                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:00000000002284C0                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:00000000002284C8 ; int feof(FILE *stream)
extern:00000000002284C8                 extrn feof:near         ; CODE XREF: _feof↑j
extern:00000000002284C8                                         ; DATA XREF: .got:feof_ptr↑o
extern:00000000002284D0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002284D0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002284D0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002284D8 ; void tzset(void)
extern:00000000002284D8                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:00000000002284D8                                         ; DATA XREF: .got:tzset_ptr↑o
extern:00000000002284E0 ; int fileno(FILE *stream)
extern:00000000002284E0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002284E0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002284E8 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:00000000002284E8                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:00000000002284E8                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:00000000002284F0 ; struct dirent *readdir(DIR *dirp)
extern:00000000002284F0                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:00000000002284F0                                         ; DATA XREF: .got:readdir_ptr↑o
extern:00000000002284F8 ; int wcwidth(wchar_t c)
extern:00000000002284F8                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:00000000002284F8                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:0000000000228500 ; int iswalnum(wint_t wc)
extern:0000000000228500                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:0000000000228500                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:0000000000228508 ; void *malloc(size_t size)
extern:0000000000228508                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000228508                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000228510 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:0000000000228510                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:0000000000228510                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:0000000000228518 ; int fflush(FILE *stream)
extern:0000000000228518                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000228518                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000228520 ; struct mntent *getmntent(FILE *stream)
extern:0000000000228520                 extrn getmntent:near    ; CODE XREF: _getmntent↑j
extern:0000000000228520                                         ; DATA XREF: .got:getmntent_ptr↑o
extern:0000000000228528 ; FILE *setmntent(const char *file, const char *mode)
extern:0000000000228528                 extrn setmntent:near    ; CODE XREF: _setmntent↑j
extern:0000000000228528                                         ; DATA XREF: .got:setmntent_ptr↑o
extern:0000000000228530 ; char *nl_langinfo(nl_item item)
extern:0000000000228530                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000228530                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000228538 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000228538                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000228538                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000228540 ; int sscanf(const char *s, const char *format, ...)
extern:0000000000228540                 extrn sscanf:near       ; CODE XREF: _sscanf↑j
extern:0000000000228540                                         ; DATA XREF: .got:sscanf_ptr↑o
extern:0000000000228548 ; time_t mktime(struct tm *tp)
extern:0000000000228548                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:0000000000228548                                         ; DATA XREF: .got:mktime_ptr↑o
extern:0000000000228550 ; int _freading(FILE *fp)
extern:0000000000228550                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000228550                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000228558 ; int fchdir(int fd)
extern:0000000000228558                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:0000000000228558                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:0000000000228560 ; void *realloc(void *ptr, size_t size)
extern:0000000000228560                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000228560                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000228568 ; char *setlocale(int category, const char *locale)
extern:0000000000228568                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000228568                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000228570                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000228570                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000228578 ; time_t timegm(struct tm *tp)
extern:0000000000228578                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:0000000000228578                                         ; DATA XREF: .got:timegm_ptr↑o
extern:0000000000228580 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000228580                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000228580                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000228588 ; wint_t btowc(int c)
extern:0000000000228588                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:0000000000228588                                         ; DATA XREF: .got:btowc_ptr↑o
extern:0000000000228590 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000228590                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000228590                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000228598 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000228598                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000228598                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002285A0 ; int open(const char *file, int oflag, ...)
extern:00000000002285A0                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002285A0                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002285A8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002285A8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002285A8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002285B0 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002285B0                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002285B0                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002285B8 ; wint_t towlower(wint_t wc)
extern:00000000002285B8                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:00000000002285B8                                         ; DATA XREF: .got:towlower_ptr↑o
extern:00000000002285C0 ; DIR *fdopendir(int fd)
extern:00000000002285C0                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:00000000002285C0                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:00000000002285C8 ; int unsetenv(const char *name)
extern:00000000002285C8                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:00000000002285C8                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:00000000002285D0 ; wint_t towupper(wint_t wc)
extern:00000000002285D0                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:00000000002285D0                                         ; DATA XREF: .got:towupper_ptr↑o
extern:00000000002285D8 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:00000000002285D8                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:00000000002285D8                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:00000000002285E0 ; int fstatfs(int fildes, struct statfs *buf)
extern:00000000002285E0                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:00000000002285E0                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:00000000002285E8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002285E8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002285E8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002285F0 ; void __noreturn exit(int status)
extern:00000000002285F0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002285F0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002285F8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002285F8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002285F8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000228600                 extrn __fprintf_chk:near
extern:0000000000228600                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000228600                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000228608 ; int fflush_unlocked(FILE *stream)
extern:0000000000228608                 extrn fflush_unlocked:near
extern:0000000000228608                                         ; CODE XREF: _fflush_unlocked↑j
extern:0000000000228608                                         ; DATA XREF: .got:fflush_unlocked_ptr↑o
extern:0000000000228610 ; int mbsinit(const mbstate_t *ps)
extern:0000000000228610                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000228610                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000228618 ; int iswprint(wint_t wc)
extern:0000000000228618                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000228618                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000228620 ; char *hasmntopt(const struct mntent *mnt, const char *opt)
extern:0000000000228620                 extrn hasmntopt:near    ; CODE XREF: _hasmntopt↑j
extern:0000000000228620                                         ; DATA XREF: .got:hasmntopt_ptr↑o
extern:0000000000228628 ; int __fastcall __cxa_finalize(void *)
extern:0000000000228628                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000228628                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000228628                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000228630 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:0000000000228630                 extrn getdelim:near     ; CODE XREF: _getdelim↑j
extern:0000000000228630                                         ; DATA XREF: .got:getdelim_ptr↑o
extern:0000000000228638 ; char *strstr(const char *haystack, const char *needle)
extern:0000000000228638                 extrn strstr:near       ; CODE XREF: _strstr↑j
extern:0000000000228638                                         ; DATA XREF: .got:strstr_ptr↑o
extern:0000000000228640 ; const __int32_t **_ctype_tolower_loc(void)
extern:0000000000228640                 extrn __ctype_tolower_loc:near
extern:0000000000228640                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:0000000000228640                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:0000000000228648 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000228648                 extrn __ctype_b_loc:near
extern:0000000000228648                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000228648                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000228650                 extrn __sprintf_chk:near
extern:0000000000228650                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000228650                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000228658                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000228658                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000228660                 extrn __gmon_start__:near ; weak
extern:0000000000228660                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000228660                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000228668                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000228668                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000228668
extern:0000000000228668
extern:0000000000228668                 end start
