LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 9A1D59A33538FC054BF5E7AE296F20349ED794D8BA46CC2C0575A9878893B703
LOAD:0000000000000000 ; Input MD5    : 4929C73D4B9CDB19224D3011CFB3883B
LOAD:0000000000000000 ; Input CRC32  : CE1EE057
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/stty
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'stty.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtol.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 44DA0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0F958h               ; Size in file image
LOAD:00000000000000D8                 dq 0F958h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0FA50h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20FA50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 1650h                ; Size in file image
LOAD:0000000000000110                 dq 1910h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 10BF8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 210BF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0E7ACh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0E7ACh               ; Physical address
LOAD:00000000000001B0                 dq 2DCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2DCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0FA50h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20FA50h              ; Physical address
LOAD:0000000000000220                 dq 15B0h                ; Size in file image
LOAD:0000000000000228                 dq 15B0h                ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0A3h, 55h, 24h, 30h, 0B5h, 3, 2 dup(0DDh), 9Fh, 7, 77h ; Desc
LOAD:0000000000000284                 db 0E7h, 0D4h, 8Ah, 30h, 0E5h, 61h, 2Ch, 84h, 9Dh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 41h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01200041CD06h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 41h, 42h, 48h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_9D0, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aSnprintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_9D0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_9D0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_9D0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFcntl - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aCfgetispeed - offset byte_9D0, 12h, 0, 0, \ ; "cfgetispeed"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9D0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_9D0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain - offset byte_9D0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCfsetospeed - offset byte_9D0, 12h, 0, 0, \ ; "cfsetospeed"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aDcgettext - offset byte_9D0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrlen - offset byte_9D0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStackChkFail - offset byte_9D0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aGetoptLong - offset byte_9D0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMbrtowc - offset byte_9D0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aDup2 - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000004F0                            0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrchr - offset byte_9D0, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aOverflow - offset byte_9D0, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrrchr - offset byte_9D0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aLseek - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aAssertFail - offset byte_9D0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrtoulInterna - offset byte_9D0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemset - offset byte_9D0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aIoctl - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFclose+1 - offset byte_9D0, 12h, 0, 0, \ ; "close"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aLibcStartMain - offset byte_9D0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcmp - offset byte_9D0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFputsUnlocked - offset byte_9D0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aCalloc - offset byte_9D0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStrcmp - offset byte_9D0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGmonStart - offset byte_9D0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrtol - offset byte_9D0, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcpy - offset byte_9D0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFileno - offset byte_9D0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMalloc - offset byte_9D0, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFflush - offset byte_9D0, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aNlLanginfo - offset byte_9D0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFreading - offset byte_9D0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aRealloc - offset byte_9D0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSetlocale - offset byte_9D0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aCfgetospeed - offset byte_9D0, 12h, 0, 0, \ ; "cfgetospeed"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aPrintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aError - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000778                            0>
LOAD:0000000000000790                 Elf64_Sym <offset aTcgetattr - offset byte_9D0, 12h, 0, 0, \ ; "tcgetattr"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aTcsetattr - offset byte_9D0, 12h, 0, 0, \ ; "tcsetattr"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aOpen - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFseeko - offset byte_9D0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aCfsetispeed - offset byte_9D0, 12h, 0, 0, \ ; "cfsetispeed"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aStrtoul - offset byte_9D0, 12h, 0, 0, \ ; "strtoul"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aCxaAtexit - offset byte_9D0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aExit+1 - offset byte_9D0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFwrite - offset byte_9D0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFprintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aItmRegistertmc - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aMbsinit - offset byte_9D0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aIswprint - offset byte_9D0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaFinalize - offset byte_9D0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCtypeBLoc - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aStdout - offset byte_9D0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008F8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgname - offset byte_9D0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aProgramInvocat - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000928                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aPrognameFull - offset byte_9D0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000958                            offset __bss_start, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aOpterr - offset byte_9D0, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000970                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000988                 Elf64_Sym <offset aStderr - offset byte_9D0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000988                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptind - offset byte_9D0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009A0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009B8                 Elf64_Sym <offset aOptarg - offset byte_9D0, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009B8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0 ; ELF String Table
LOAD:00000000000009D0 byte_9D0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009D1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:00000000000009DB aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009E2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009EF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000009F9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A01 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A09 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000A10 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A18 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A22 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A28 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A39 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A42 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A4A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A50 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A50                                         ; LOAD:0000000000000838↑o
LOAD:0000000000000A56 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A56                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000A6E aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A7C aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A7C                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A93 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A9A aCfsetispeed    db 'cfsetispeed',0      ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AA6 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000AAD aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AB4 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000ABB aCfgetospeed    db 'cfgetospeed',0      ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000AC7 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000AD8 aTcsetattr      db 'tcsetattr',0        ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000AE2 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000AE9 aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000AEE aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000AFC aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000B03 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B09 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B10 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B10                                         ; LOAD:00000000000005C8↑o
LOAD:0000000000000B17 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B1F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B26 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000B2E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B3A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B48 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B4F aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B56 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B61 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000B68 aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B6E aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B7D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B89 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B90 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B97 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000BA2 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000BA7 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000BAE aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BAE                                         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000BCC aTcgetattr      db 'tcgetattr',0        ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BD6 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BE5 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BEB aCfsetospeed    db 'cfsetospeed',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000BF7 aCfgetispeed    db 'cfgetispeed',0      ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000C03 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000C03                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000C12 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000C19 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000C20 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C20                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C32 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C39 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C44 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000C44                                         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C57 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C66 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C6B aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C76 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C86 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C93 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C9D aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000CA8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CB2 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DE8↓o
LOAD:0000000000000CBE aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DF8↓o
LOAD:0000000000000CCA aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CCA                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000CE6 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000CF5 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CF5                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000D0F                 align 10h
LOAD:0000000000000D10 ; ELF GNU Symbol Version Table
LOAD:0000000000000D10                 dw 0
LOAD:0000000000000D12                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D16                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D20                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; cfgetispeed@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; cfsetospeed@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D38                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D5C                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D60                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; cfgetospeed@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D72                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 2                    ; tcgetattr@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; tcsetattr@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; cfsetispeed@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D88                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D8A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D8C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D92                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 0
LOAD:0000000000000DA6                 dw 0
LOAD:0000000000000DA8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9D0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9D0, \ ; "GLIBC_2.3"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9D0, \ ; "GLIBC_2.14"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_9D0, \ ; "GLIBC_2.4"
LOAD:0000000000000DD8                                10h>
LOAD:0000000000000DE8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_9D0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DE8                                10h>
LOAD:0000000000000DF8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9D0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E08 ; ELF RELA Relocation Table
LOAD:0000000000000E08                 Elf64_Rela <20FA50h, 8, 3450h> ; R_X86_64_RELATIVE +3450h
LOAD:0000000000000E20                 Elf64_Rela <20FA58h, 8, 3410h> ; R_X86_64_RELATIVE +3410h
LOAD:0000000000000E38                 Elf64_Rela <20FA60h, 8, 0B6C8h> ; R_X86_64_RELATIVE +0B6C8h
LOAD:0000000000000E50                 Elf64_Rela <20FA78h, 8, 0B663h> ; R_X86_64_RELATIVE +0B663h
LOAD:0000000000000E68                 Elf64_Rela <20FA90h, 8, 0B651h> ; R_X86_64_RELATIVE +0B651h
LOAD:0000000000000E80                 Elf64_Rela <20FAA8h, 8, 0B654h> ; R_X86_64_RELATIVE +0B654h
LOAD:0000000000000E98                 Elf64_Rela <20FAC0h, 8, 0B658h> ; R_X86_64_RELATIVE +0B658h
LOAD:0000000000000EB0                 Elf64_Rela <20FAD8h, 8, 0B65Ch> ; R_X86_64_RELATIVE +0B65Ch
LOAD:0000000000000EC8                 Elf64_Rela <20FAF0h, 8, 0B662h> ; R_X86_64_RELATIVE +0B662h
LOAD:0000000000000EE0                 Elf64_Rela <20FB08h, 8, 0B66Bh> ; R_X86_64_RELATIVE +0B66Bh
LOAD:0000000000000EF8                 Elf64_Rela <20FB20h, 8, 0B666h> ; R_X86_64_RELATIVE +0B666h
LOAD:0000000000000F10                 Elf64_Rela <20FB38h, 8, 0B6BEh> ; R_X86_64_RELATIVE +0B6BEh
LOAD:0000000000000F28                 Elf64_Rela <20FB50h, 8, 0B66Ah> ; R_X86_64_RELATIVE +0B66Ah
LOAD:0000000000000F40                 Elf64_Rela <20FB68h, 8, 0B66Fh> ; R_X86_64_RELATIVE +0B66Fh
LOAD:0000000000000F58                 Elf64_Rela <20FB80h, 8, 0B674h> ; R_X86_64_RELATIVE +0B674h
LOAD:0000000000000F70                 Elf64_Rela <20FB98h, 8, 0B679h> ; R_X86_64_RELATIVE +0B679h
LOAD:0000000000000F88                 Elf64_Rela <20FBB0h, 8, 0B67Eh> ; R_X86_64_RELATIVE +0B67Eh
LOAD:0000000000000FA0                 Elf64_Rela <20FBC8h, 8, 0B683h> ; R_X86_64_RELATIVE +0B683h
LOAD:0000000000000FB8                 Elf64_Rela <20FBE0h, 8, 0B689h> ; R_X86_64_RELATIVE +0B689h
LOAD:0000000000000FD0                 Elf64_Rela <20FBF8h, 8, 0B68Fh> ; R_X86_64_RELATIVE +0B68Fh
LOAD:0000000000000FE8                 Elf64_Rela <20FC10h, 8, 0B694h> ; R_X86_64_RELATIVE +0B694h
LOAD:0000000000001000                 Elf64_Rela <20FC28h, 8, 0B699h> ; R_X86_64_RELATIVE +0B699h
LOAD:0000000000001018                 Elf64_Rela <20FC40h, 8, 0B69Fh> ; R_X86_64_RELATIVE +0B69Fh
LOAD:0000000000001030                 Elf64_Rela <20FC58h, 8, 0B6A6h> ; R_X86_64_RELATIVE +0B6A6h
LOAD:0000000000001048                 Elf64_Rela <20FC70h, 8, 0B6ADh> ; R_X86_64_RELATIVE +0B6ADh
LOAD:0000000000001060                 Elf64_Rela <20FC88h, 8, 0B6D3h> ; R_X86_64_RELATIVE +0B6D3h
LOAD:0000000000001078                 Elf64_Rela <20FCA0h, 8, 0B6B4h> ; R_X86_64_RELATIVE +0B6B4h
LOAD:0000000000001090                 Elf64_Rela <20FCB8h, 8, 0B6BBh> ; R_X86_64_RELATIVE +0B6BBh
LOAD:00000000000010A8                 Elf64_Rela <20FCD0h, 8, 0B6C2h> ; R_X86_64_RELATIVE +0B6C2h
LOAD:00000000000010C0                 Elf64_Rela <20FCE8h, 8, 0B6CAh> ; R_X86_64_RELATIVE +0B6CAh
LOAD:00000000000010D8                 Elf64_Rela <20FD00h, 8, 0B6D2h> ; R_X86_64_RELATIVE +0B6D2h
LOAD:00000000000010F0                 Elf64_Rela <20FD18h, 8, 0B6DAh> ; R_X86_64_RELATIVE +0B6DAh
LOAD:0000000000001108                 Elf64_Rela <20FD30h, 8, 0B6E2h> ; R_X86_64_RELATIVE +0B6E2h
LOAD:0000000000001120                 Elf64_Rela <20FD48h, 8, 0B6EAh> ; R_X86_64_RELATIVE +0B6EAh
LOAD:0000000000001138                 Elf64_Rela <20FD60h, 8, 0B6F2h> ; R_X86_64_RELATIVE +0B6F2h
LOAD:0000000000001150                 Elf64_Rela <20FD78h, 8, 0B6FAh> ; R_X86_64_RELATIVE +0B6FAh
LOAD:0000000000001168                 Elf64_Rela <20FDC0h, 8, 0B702h> ; R_X86_64_RELATIVE +0B702h
LOAD:0000000000001180                 Elf64_Rela <20FDE0h, 8, 0B706h> ; R_X86_64_RELATIVE +0B706h
LOAD:0000000000001198                 Elf64_Rela <20FE00h, 8, 0B70Bh> ; R_X86_64_RELATIVE +0B70Bh
LOAD:00000000000011B0                 Elf64_Rela <20FE20h, 8, 0B710h> ; R_X86_64_RELATIVE +0B710h
LOAD:00000000000011C8                 Elf64_Rela <20FE40h, 8, 0B715h> ; R_X86_64_RELATIVE +0B715h
LOAD:00000000000011E0                 Elf64_Rela <20FE80h, 8, 0B4A4h> ; R_X86_64_RELATIVE +0B4A4h
LOAD:00000000000011F8                 Elf64_Rela <20FE98h, 8, 0B71Dh> ; R_X86_64_RELATIVE +0B71Dh
LOAD:0000000000001210                 Elf64_Rela <20FEB0h, 8, 0B885h> ; R_X86_64_RELATIVE +0B885h
LOAD:0000000000001228                 Elf64_Rela <20FEC8h, 8, 0B8D0h> ; R_X86_64_RELATIVE +0B8D0h
LOAD:0000000000001240                 Elf64_Rela <20FEE0h, 8, 0B722h> ; R_X86_64_RELATIVE +0B722h
LOAD:0000000000001258                 Elf64_Rela <20FEF8h, 8, 0B726h> ; R_X86_64_RELATIVE +0B726h
LOAD:0000000000001270                 Elf64_Rela <20FF10h, 8, 0B72Ah> ; R_X86_64_RELATIVE +0B72Ah
LOAD:0000000000001288                 Elf64_Rela <20FF28h, 8, 0B72Fh> ; R_X86_64_RELATIVE +0B72Fh
LOAD:00000000000012A0                 Elf64_Rela <20FF40h, 8, 0B735h> ; R_X86_64_RELATIVE +0B735h
LOAD:00000000000012B8                 Elf64_Rela <20FF58h, 8, 0B8A7h> ; R_X86_64_RELATIVE +0B8A7h
LOAD:00000000000012D0                 Elf64_Rela <20FF70h, 8, 0B73Bh> ; R_X86_64_RELATIVE +0B73Bh
LOAD:00000000000012E8                 Elf64_Rela <20FF88h, 8, 0B380h> ; R_X86_64_RELATIVE +0B380h
LOAD:0000000000001300                 Elf64_Rela <20FFA0h, 8, 0B740h> ; R_X86_64_RELATIVE +0B740h
LOAD:0000000000001318                 Elf64_Rela <20FFB8h, 8, 0B747h> ; R_X86_64_RELATIVE +0B747h
LOAD:0000000000001330                 Elf64_Rela <20FFD0h, 8, 0B5FFh> ; R_X86_64_RELATIVE +0B5FFh
LOAD:0000000000001348                 Elf64_Rela <20FFE8h, 8, 0B74Dh> ; R_X86_64_RELATIVE +0B74Dh
LOAD:0000000000001360                 Elf64_Rela <210000h, 8, 0B544h> ; R_X86_64_RELATIVE +0B544h
LOAD:0000000000001378                 Elf64_Rela <210018h, 8, 0B548h> ; R_X86_64_RELATIVE +0B548h
LOAD:0000000000001390                 Elf64_Rela <210060h, 8, 0B49Dh> ; R_X86_64_RELATIVE +0B49Dh
LOAD:00000000000013A8                 Elf64_Rela <210080h, 8, 0B755h> ; R_X86_64_RELATIVE +0B755h
LOAD:00000000000013C0                 Elf64_Rela <2100A0h, 8, 0B75Ch> ; R_X86_64_RELATIVE +0B75Ch
LOAD:00000000000013D8                 Elf64_Rela <2100C0h, 8, 0B763h> ; R_X86_64_RELATIVE +0B763h
LOAD:00000000000013F0                 Elf64_Rela <2100E0h, 8, 0B767h> ; R_X86_64_RELATIVE +0B767h
LOAD:0000000000001408                 Elf64_Rela <210100h, 8, 0B76Bh> ; R_X86_64_RELATIVE +0B76Bh
LOAD:0000000000001420                 Elf64_Rela <210120h, 8, 0B76Fh> ; R_X86_64_RELATIVE +0B76Fh
LOAD:0000000000001438                 Elf64_Rela <210140h, 8, 0B773h> ; R_X86_64_RELATIVE +0B773h
LOAD:0000000000001450                 Elf64_Rela <210160h, 8, 0B779h> ; R_X86_64_RELATIVE +0B779h
LOAD:0000000000001468                 Elf64_Rela <210180h, 8, 0B77Dh> ; R_X86_64_RELATIVE +0B77Dh
LOAD:0000000000001480                 Elf64_Rela <2101A0h, 8, 0B784h> ; R_X86_64_RELATIVE +0B784h
LOAD:0000000000001498                 Elf64_Rela <2101C0h, 8, 0B78Ah> ; R_X86_64_RELATIVE +0B78Ah
LOAD:00000000000014B0                 Elf64_Rela <2101E0h, 8, 0B791h> ; R_X86_64_RELATIVE +0B791h
LOAD:00000000000014C8                 Elf64_Rela <210200h, 8, 0B799h> ; R_X86_64_RELATIVE +0B799h
LOAD:00000000000014E0                 Elf64_Rela <210220h, 8, 0B7A0h> ; R_X86_64_RELATIVE +0B7A0h
LOAD:00000000000014F8                 Elf64_Rela <210240h, 8, 0B7A7h> ; R_X86_64_RELATIVE +0B7A7h
LOAD:0000000000001510                 Elf64_Rela <210260h, 8, 0B7AEh> ; R_X86_64_RELATIVE +0B7AEh
LOAD:0000000000001528                 Elf64_Rela <210280h, 8, 0B7B5h> ; R_X86_64_RELATIVE +0B7B5h
LOAD:0000000000001540                 Elf64_Rela <2102A0h, 8, 0B7BBh> ; R_X86_64_RELATIVE +0B7BBh
LOAD:0000000000001558                 Elf64_Rela <2102C0h, 8, 0B7C2h> ; R_X86_64_RELATIVE +0B7C2h
LOAD:0000000000001570                 Elf64_Rela <2102E0h, 8, 0B7C8h> ; R_X86_64_RELATIVE +0B7C8h
LOAD:0000000000001588                 Elf64_Rela <210300h, 8, 0B7CEh> ; R_X86_64_RELATIVE +0B7CEh
LOAD:00000000000015A0                 Elf64_Rela <210320h, 8, 0B7D4h> ; R_X86_64_RELATIVE +0B7D4h
LOAD:00000000000015B8                 Elf64_Rela <210340h, 8, 0B7D9h> ; R_X86_64_RELATIVE +0B7D9h
LOAD:00000000000015D0                 Elf64_Rela <210360h, 8, 0B7DFh> ; R_X86_64_RELATIVE +0B7DFh
LOAD:00000000000015E8                 Elf64_Rela <210380h, 8, 0B7E6h> ; R_X86_64_RELATIVE +0B7E6h
LOAD:0000000000001600                 Elf64_Rela <2103A0h, 8, 0B3E6h> ; R_X86_64_RELATIVE +0B3E6h
LOAD:0000000000001618                 Elf64_Rela <2103C0h, 8, 0B7ECh> ; R_X86_64_RELATIVE +0B7ECh
LOAD:0000000000001630                 Elf64_Rela <2103E0h, 8, 0B7F4h> ; R_X86_64_RELATIVE +0B7F4h
LOAD:0000000000001648                 Elf64_Rela <210400h, 8, 0B7FAh> ; R_X86_64_RELATIVE +0B7FAh
LOAD:0000000000001660                 Elf64_Rela <210420h, 8, 0B800h> ; R_X86_64_RELATIVE +0B800h
LOAD:0000000000001678                 Elf64_Rela <210440h, 8, 0B806h> ; R_X86_64_RELATIVE +0B806h
LOAD:0000000000001690                 Elf64_Rela <210460h, 8, 0B3F4h> ; R_X86_64_RELATIVE +0B3F4h
LOAD:00000000000016A8                 Elf64_Rela <210480h, 8, 0B80Ch> ; R_X86_64_RELATIVE +0B80Ch
LOAD:00000000000016C0                 Elf64_Rela <2104A0h, 8, 0B812h> ; R_X86_64_RELATIVE +0B812h
LOAD:00000000000016D8                 Elf64_Rela <2104C0h, 8, 0B819h> ; R_X86_64_RELATIVE +0B819h
LOAD:00000000000016F0                 Elf64_Rela <2104E0h, 8, 0B81Fh> ; R_X86_64_RELATIVE +0B81Fh
LOAD:0000000000001708                 Elf64_Rela <210500h, 8, 0B825h> ; R_X86_64_RELATIVE +0B825h
LOAD:0000000000001720                 Elf64_Rela <210520h, 8, 0B829h> ; R_X86_64_RELATIVE +0B829h
LOAD:0000000000001738                 Elf64_Rela <210540h, 8, 0B82Dh> ; R_X86_64_RELATIVE +0B82Dh
LOAD:0000000000001750                 Elf64_Rela <210560h, 8, 0B831h> ; R_X86_64_RELATIVE +0B831h
LOAD:0000000000001768                 Elf64_Rela <210580h, 8, 0B835h> ; R_X86_64_RELATIVE +0B835h
LOAD:0000000000001780                 Elf64_Rela <2105A0h, 8, 0B839h> ; R_X86_64_RELATIVE +0B839h
LOAD:0000000000001798                 Elf64_Rela <2105C0h, 8, 0B83Dh> ; R_X86_64_RELATIVE +0B83Dh
LOAD:00000000000017B0                 Elf64_Rela <2105E0h, 8, 0B842h> ; R_X86_64_RELATIVE +0B842h
LOAD:00000000000017C8                 Elf64_Rela <210600h, 8, 0B847h> ; R_X86_64_RELATIVE +0B847h
LOAD:00000000000017E0                 Elf64_Rela <210620h, 8, 0B84Ch> ; R_X86_64_RELATIVE +0B84Ch
LOAD:00000000000017F8                 Elf64_Rela <210640h, 8, 0B851h> ; R_X86_64_RELATIVE +0B851h
LOAD:0000000000001810                 Elf64_Rela <210660h, 8, 0B855h> ; R_X86_64_RELATIVE +0B855h
LOAD:0000000000001828                 Elf64_Rela <210680h, 8, 0B859h> ; R_X86_64_RELATIVE +0B859h
LOAD:0000000000001840                 Elf64_Rela <2106A0h, 8, 0B85Dh> ; R_X86_64_RELATIVE +0B85Dh
LOAD:0000000000001858                 Elf64_Rela <2106C0h, 8, 0B861h> ; R_X86_64_RELATIVE +0B861h
LOAD:0000000000001870                 Elf64_Rela <2106E0h, 8, 0B865h> ; R_X86_64_RELATIVE +0B865h
LOAD:0000000000001888                 Elf64_Rela <210700h, 8, 0B869h> ; R_X86_64_RELATIVE +0B869h
LOAD:00000000000018A0                 Elf64_Rela <210720h, 8, 0B86Eh> ; R_X86_64_RELATIVE +0B86Eh
LOAD:00000000000018B8                 Elf64_Rela <210740h, 8, 0B875h> ; R_X86_64_RELATIVE +0B875h
LOAD:00000000000018D0                 Elf64_Rela <210760h, 8, 0B8C8h> ; R_X86_64_RELATIVE +0B8C8h
LOAD:00000000000018E8                 Elf64_Rela <210780h, 8, 0B87Ch> ; R_X86_64_RELATIVE +0B87Ch
LOAD:0000000000001900                 Elf64_Rela <2107A0h, 8, 0B882h> ; R_X86_64_RELATIVE +0B882h
LOAD:0000000000001918                 Elf64_Rela <2107C0h, 8, 0B88Bh> ; R_X86_64_RELATIVE +0B88Bh
LOAD:0000000000001930                 Elf64_Rela <2107E0h, 8, 0B891h> ; R_X86_64_RELATIVE +0B891h
LOAD:0000000000001948                 Elf64_Rela <210800h, 8, 0B898h> ; R_X86_64_RELATIVE +0B898h
LOAD:0000000000001960                 Elf64_Rela <210820h, 8, 0B89Fh> ; R_X86_64_RELATIVE +0B89Fh
LOAD:0000000000001978                 Elf64_Rela <210840h, 8, 0B8A5h> ; R_X86_64_RELATIVE +0B8A5h
LOAD:0000000000001990                 Elf64_Rela <210860h, 8, 0B8ACh> ; R_X86_64_RELATIVE +0B8ACh
LOAD:00000000000019A8                 Elf64_Rela <210880h, 8, 0B8B4h> ; R_X86_64_RELATIVE +0B8B4h
LOAD:00000000000019C0                 Elf64_Rela <2108A0h, 8, 0B8BDh> ; R_X86_64_RELATIVE +0B8BDh
LOAD:00000000000019D8                 Elf64_Rela <2108C0h, 8, 0B8C5h> ; R_X86_64_RELATIVE +0B8C5h
LOAD:00000000000019F0                 Elf64_Rela <2108E0h, 8, 0B3C9h> ; R_X86_64_RELATIVE +0B3C9h
LOAD:0000000000001A08                 Elf64_Rela <210900h, 8, 0B8CDh> ; R_X86_64_RELATIVE +0B8CDh
LOAD:0000000000001A20                 Elf64_Rela <210920h, 8, 0B8D5h> ; R_X86_64_RELATIVE +0B8D5h
LOAD:0000000000001A38                 Elf64_Rela <210940h, 8, 0B8DCh> ; R_X86_64_RELATIVE +0B8DCh
LOAD:0000000000001A50                 Elf64_Rela <210960h, 8, 0B59Bh> ; R_X86_64_RELATIVE +0B59Bh
LOAD:0000000000001A68                 Elf64_Rela <210980h, 8, 0B5A1h> ; R_X86_64_RELATIVE +0B5A1h
LOAD:0000000000001A80                 Elf64_Rela <2109A0h, 8, 0B4A9h> ; R_X86_64_RELATIVE +0B4A9h
LOAD:0000000000001A98                 Elf64_Rela <2109C0h, 8, 0B895h> ; R_X86_64_RELATIVE +0B895h
LOAD:0000000000001AB0                 Elf64_Rela <2109E0h, 8, 0B4AEh> ; R_X86_64_RELATIVE +0B4AEh
LOAD:0000000000001AC8                 Elf64_Rela <210A00h, 8, 0B4B1h> ; R_X86_64_RELATIVE +0B4B1h
LOAD:0000000000001AE0                 Elf64_Rela <210A20h, 8, 0B4F1h> ; R_X86_64_RELATIVE +0B4F1h
LOAD:0000000000001AF8                 Elf64_Rela <210A40h, 8, 0B4EDh> ; R_X86_64_RELATIVE +0B4EDh
LOAD:0000000000001B10                 Elf64_Rela <210A60h, 8, 0B4E0h> ; R_X86_64_RELATIVE +0B4E0h
LOAD:0000000000001B28                 Elf64_Rela <210A80h, 8, 0B4E6h> ; R_X86_64_RELATIVE +0B4E6h
LOAD:0000000000001B40                 Elf64_Rela <210AA0h, 8, 0B4D9h> ; R_X86_64_RELATIVE +0B4D9h
LOAD:0000000000001B58                 Elf64_Rela <210AC0h, 8, 0B4F8h> ; R_X86_64_RELATIVE +0B4F8h
LOAD:0000000000001B70                 Elf64_Rela <210AE0h, 8, 0B500h> ; R_X86_64_RELATIVE +0B500h
LOAD:0000000000001B88                 Elf64_Rela <210B00h, 8, 0B505h> ; R_X86_64_RELATIVE +0B505h
LOAD:0000000000001BA0                 Elf64_Rela <210B20h, 8, 0B50Bh> ; R_X86_64_RELATIVE +0B50Bh
LOAD:0000000000001BB8                 Elf64_Rela <210B40h, 8, 0B511h> ; R_X86_64_RELATIVE +0B511h
LOAD:0000000000001BD0                 Elf64_Rela <210B60h, 8, 0B515h> ; R_X86_64_RELATIVE +0B515h
LOAD:0000000000001BE8                 Elf64_Rela <210BA0h, 8, 0DB29h> ; R_X86_64_RELATIVE +0DB29h
LOAD:0000000000001C00                 Elf64_Rela <210BA8h, 8, 0DB31h> ; R_X86_64_RELATIVE +0DB31h
LOAD:0000000000001C18                 Elf64_Rela <210BB0h, 8, 0DB37h> ; R_X86_64_RELATIVE +0DB37h
LOAD:0000000000001C30                 Elf64_Rela <210BB8h, 8, 0DB44h> ; R_X86_64_RELATIVE +0DB44h
LOAD:0000000000001C48                 Elf64_Rela <210BC0h, 8, 0DB51h> ; R_X86_64_RELATIVE +0DB51h
LOAD:0000000000001C60                 Elf64_Rela <210BC8h, 8, 0B4D1h> ; R_X86_64_RELATIVE +0B4D1h
LOAD:0000000000001C78                 Elf64_Rela <210BD0h, 8, 0DB65h> ; R_X86_64_RELATIVE +0DB65h
LOAD:0000000000001C90                 Elf64_Rela <210BD8h, 8, 0DB4Ah> ; R_X86_64_RELATIVE +0DB4Ah
LOAD:0000000000001CA8                 Elf64_Rela <210BE0h, 8, 0B5C1h> ; R_X86_64_RELATIVE +0B5C1h
LOAD:0000000000001CC0                 Elf64_Rela <210BE8h, 8, 0DB6Dh> ; R_X86_64_RELATIVE +0DB6Dh
LOAD:0000000000001CD8                 Elf64_Rela <211008h, 8, 211008h> ; R_X86_64_RELATIVE +211008h
LOAD:0000000000001CF0                 Elf64_Rela <211018h, 8, 0DAB7h> ; R_X86_64_RELATIVE +0DAB7h
LOAD:0000000000001D08                 Elf64_Rela <211080h, 8, 211090h> ; R_X86_64_RELATIVE +211090h
LOAD:0000000000001D20                 Elf64_Rela <211098h, 8, 211220h> ; R_X86_64_RELATIVE +211220h
LOAD:0000000000001D38                 Elf64_Rela <210FD8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001D50                 Elf64_Rela <210FE0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001D68                 Elf64_Rela <210FE8h, 2500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001D80                 Elf64_Rela <210FF0h, 3C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001D98                 Elf64_Rela <210FF8h, 3F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001DB0                 Elf64_Rela <2110A0h, 4200000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001DC8                 Elf64_Rela <2110A8h, 4100000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001DE0                 Elf64_Rela <2110B0h, 4800000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001DF8                 Elf64_Rela <2110B8h, 4900000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001E10                 Elf64_Rela <2110C0h, 4400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001E28                 Elf64_Rela <2110E0h, 4600000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000001E40                 Elf64_Rela <211100h, 4700000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001E58 ; ELF JMPREL Relocation Table
LOAD:0000000000001E58                 Elf64_Rela <210E00h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001E70                 Elf64_Rela <210E08h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001E88                 Elf64_Rela <210E10h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001EA0                 Elf64_Rela <210E18h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001EB8                 Elf64_Rela <210E20h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001ED0                 Elf64_Rela <210E28h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001EE8                 Elf64_Rela <210E30h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001F00                 Elf64_Rela <210E38h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001F18                 Elf64_Rela <210E40h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001F30                 Elf64_Rela <210E48h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT cfgetispeed
LOAD:0000000000001F48                 Elf64_Rela <210E50h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001F60                 Elf64_Rela <210E58h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001F78                 Elf64_Rela <210E60h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001F90                 Elf64_Rela <210E68h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT cfsetospeed
LOAD:0000000000001FA8                 Elf64_Rela <210E70h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001FC0                 Elf64_Rela <210E78h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001FD8                 Elf64_Rela <210E80h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001FF0                 Elf64_Rela <210E88h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000002008                 Elf64_Rela <210E90h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002020                 Elf64_Rela <210E98h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000002038                 Elf64_Rela <210EA0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000002050                 Elf64_Rela <210EA8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000002068                 Elf64_Rela <210EB0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000002080                 Elf64_Rela <210EB8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000002098                 Elf64_Rela <210EC0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000020B0                 Elf64_Rela <210EC8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000020C8                 Elf64_Rela <210ED0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000020E0                 Elf64_Rela <210ED8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000020F8                 Elf64_Rela <210EE0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000002110                 Elf64_Rela <210EE8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000002128                 Elf64_Rela <210EF0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000002140                 Elf64_Rela <210EF8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000002158                 Elf64_Rela <210F00h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000002170                 Elf64_Rela <210F08h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002188                 Elf64_Rela <210F10h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000021A0                 Elf64_Rela <210F18h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000021B8                 Elf64_Rela <210F20h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000021D0                 Elf64_Rela <210F28h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000021E8                 Elf64_Rela <210F30h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000002200                 Elf64_Rela <210F38h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000002218                 Elf64_Rela <210F40h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002230                 Elf64_Rela <210F48h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002248                 Elf64_Rela <210F50h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002260                 Elf64_Rela <210F58h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT cfgetospeed
LOAD:0000000000002278                 Elf64_Rela <210F60h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000002290                 Elf64_Rela <210F68h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000022A8                 Elf64_Rela <210F70h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT tcgetattr
LOAD:00000000000022C0                 Elf64_Rela <210F78h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT tcsetattr
LOAD:00000000000022D8                 Elf64_Rela <210F80h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000022F0                 Elf64_Rela <210F88h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000002308                 Elf64_Rela <210F90h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT cfsetispeed
LOAD:0000000000002320                 Elf64_Rela <210F98h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000002338                 Elf64_Rela <210FA0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002350                 Elf64_Rela <210FA8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002368                 Elf64_Rela <210FB0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000002380                 Elf64_Rela <210FB8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000002398                 Elf64_Rela <210FC0h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000023B0                 Elf64_Rela <210FC8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000023C8                 Elf64_Rela <210FD0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000023C8 LOAD            ends
LOAD:00000000000023C8
.init:00000000000023E0 ; ===========================================================================
.init:00000000000023E0
.init:00000000000023E0 ; Segment type: Pure code
.init:00000000000023E0 ; Segment permissions: Read/Execute
.init:00000000000023E0 _init           segment dword public 'CODE' use64
.init:00000000000023E0                 assume cs:_init
.init:00000000000023E0                 ;org 23E0h
.init:00000000000023E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000023E0
.init:00000000000023E0 ; =============== S U B R O U T I N E =======================================
.init:00000000000023E0
.init:00000000000023E0
.init:00000000000023E0                 public _init_proc
.init:00000000000023E0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000023E0                 sub     rsp, 8          ; _init
.init:00000000000023E4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000023EB                 test    rax, rax
.init:00000000000023EE                 jz      short loc_23F2
.init:00000000000023F0                 call    rax ; __gmon_start__
.init:00000000000023F2
.init:00000000000023F2 loc_23F2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000023F2                 add     rsp, 8
.init:00000000000023F6                 retn
.init:00000000000023F6 _init_proc      endp
.init:00000000000023F6
.init:00000000000023F6 _init           ends
.init:00000000000023F6
LOAD:00000000000023F7 ; ===========================================================================
LOAD:00000000000023F7
LOAD:00000000000023F7 ; Segment type: Pure code
LOAD:00000000000023F7 ; Segment permissions: Read/Execute
LOAD:00000000000023F7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000023F7                 assume cs:LOAD
LOAD:00000000000023F7                 ;org 23F7h
LOAD:00000000000023F7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000023F7                 align 20h
LOAD:00000000000023F7 LOAD            ends
LOAD:00000000000023F7
.plt:0000000000002400 ; ===========================================================================
.plt:0000000000002400
.plt:0000000000002400 ; Segment type: Pure code
.plt:0000000000002400 ; Segment permissions: Read/Execute
.plt:0000000000002400 _plt            segment para public 'CODE' use64
.plt:0000000000002400                 assume cs:_plt
.plt:0000000000002400                 ;org 2400h
.plt:0000000000002400                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000002400
.plt:0000000000002400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002400
.plt:0000000000002400
.plt:0000000000002400 sub_2400        proc near               ; CODE XREF: .plt:000000000000241B↓j
.plt:0000000000002400                                         ; .plt:000000000000242B↓j ...
.plt:0000000000002400 ; __unwind {
.plt:0000000000002400                 push    cs:qword_210DF0
.plt:0000000000002406                 jmp     cs:qword_210DF8
.plt:0000000000002406 sub_2400        endp
.plt:0000000000002406
.plt:0000000000002406 ; ---------------------------------------------------------------------------
.plt:000000000000240C                 align 10h
.plt:0000000000002410
.plt:0000000000002410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002410
.plt:0000000000002410 ; Attributes: thunk
.plt:0000000000002410
.plt:0000000000002410 ; char *getenv(const char *name)
.plt:0000000000002410 _getenv         proc near               ; CODE XREF: screen_columns+3D↓p
.plt:0000000000002410                 jmp     cs:getenv_ptr
.plt:0000000000002410 _getenv         endp
.plt:0000000000002410
.plt:0000000000002416 ; ---------------------------------------------------------------------------
.plt:0000000000002416                 push    0
.plt:000000000000241B                 jmp     sub_2400
.plt:0000000000002420
.plt:0000000000002420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002420
.plt:0000000000002420 ; Attributes: thunk
.plt:0000000000002420
.plt:0000000000002420 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000002420                                         ; vasnprintf+6F0↓p ...
.plt:0000000000002420                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000002420 ___snprintf_chk endp
.plt:0000000000002420
.plt:0000000000002426 ; ---------------------------------------------------------------------------
.plt:0000000000002426                 push    1
.plt:000000000000242B                 jmp     sub_2400
.plt:0000000000002430
.plt:0000000000002430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002430
.plt:0000000000002430 ; Attributes: thunk
.plt:0000000000002430
.plt:0000000000002430 ; void free(void *ptr)
.plt:0000000000002430 _free           proc near               ; CODE XREF: wrapf+111↓p
.plt:0000000000002430                                         ; quotearg_n_options+115↓p ...
.plt:0000000000002430                 jmp     cs:free_ptr
.plt:0000000000002430 _free           endp
.plt:0000000000002430
.plt:0000000000002436 ; ---------------------------------------------------------------------------
.plt:0000000000002436                 push    2
.plt:000000000000243B                 jmp     sub_2400
.plt:0000000000002440
.plt:0000000000002440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002440
.plt:0000000000002440 ; Attributes: noreturn thunk
.plt:0000000000002440
.plt:0000000000002440 ; void __noreturn abort(void)
.plt:0000000000002440 _abort          proc near               ; CODE XREF: mode_type_flag+47↓p
.plt:0000000000002440                                         ; set_program_name+9A↓p ...
.plt:0000000000002440                 jmp     cs:abort_ptr
.plt:0000000000002440 _abort          endp
.plt:0000000000002440
.plt:0000000000002446 ; ---------------------------------------------------------------------------
.plt:0000000000002446                 push    3
.plt:000000000000244B                 jmp     sub_2400
.plt:0000000000002450
.plt:0000000000002450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002450
.plt:0000000000002450 ; Attributes: thunk
.plt:0000000000002450
.plt:0000000000002450 ; int *__errno_location(void)
.plt:0000000000002450 ___errno_location proc near             ; CODE XREF: main+386↓p
.plt:0000000000002450                                         ; main+A79↓p ...
.plt:0000000000002450                 jmp     cs:__errno_location_ptr
.plt:0000000000002450 ___errno_location endp
.plt:0000000000002450
.plt:0000000000002456 ; ---------------------------------------------------------------------------
.plt:0000000000002456                 push    4
.plt:000000000000245B                 jmp     sub_2400
.plt:0000000000002460
.plt:0000000000002460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002460
.plt:0000000000002460 ; Attributes: thunk
.plt:0000000000002460
.plt:0000000000002460 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002460 _strncmp        proc near               ; CODE XREF: usage+DEC↓p
.plt:0000000000002460                                         ; usage+EF4↓p
.plt:0000000000002460                 jmp     cs:strncmp_ptr
.plt:0000000000002460 _strncmp        endp
.plt:0000000000002460
.plt:0000000000002466 ; ---------------------------------------------------------------------------
.plt:0000000000002466                 push    5
.plt:000000000000246B                 jmp     sub_2400
.plt:0000000000002470
.plt:0000000000002470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002470
.plt:0000000000002470 ; Attributes: noreturn thunk
.plt:0000000000002470
.plt:0000000000002470 ; void __noreturn _exit(int status)
.plt:0000000000002470 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000002470                 jmp     cs:_exit_ptr
.plt:0000000000002470 __exit          endp
.plt:0000000000002470
.plt:0000000000002476 ; ---------------------------------------------------------------------------
.plt:0000000000002476                 push    6
.plt:000000000000247B                 jmp     sub_2400
.plt:0000000000002480
.plt:0000000000002480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002480
.plt:0000000000002480 ; Attributes: thunk
.plt:0000000000002480
.plt:0000000000002480 ; size_t __fpending(FILE *fp)
.plt:0000000000002480 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000002480                 jmp     cs:__fpending_ptr
.plt:0000000000002480 ___fpending     endp
.plt:0000000000002480
.plt:0000000000002486 ; ---------------------------------------------------------------------------
.plt:0000000000002486                 push    7
.plt:000000000000248B                 jmp     sub_2400
.plt:0000000000002490
.plt:0000000000002490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002490
.plt:0000000000002490 ; Attributes: thunk
.plt:0000000000002490
.plt:0000000000002490 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000002490 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000002490                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000002490                 jmp     cs:fcntl_ptr
.plt:0000000000002490 _fcntl          endp
.plt:0000000000002490
.plt:0000000000002496 ; ---------------------------------------------------------------------------
.plt:0000000000002496                 push    8
.plt:000000000000249B                 jmp     sub_2400
.plt:00000000000024A0
.plt:00000000000024A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024A0
.plt:00000000000024A0 ; Attributes: thunk
.plt:00000000000024A0
.plt:00000000000024A0 ; speed_t cfgetispeed(const struct termios *termios_p)
.plt:00000000000024A0 _cfgetispeed    proc near               ; CODE XREF: display_speed+9↓p
.plt:00000000000024A0                                         ; display_speed+15↓p ...
.plt:00000000000024A0                 jmp     cs:cfgetispeed_ptr
.plt:00000000000024A0 _cfgetispeed    endp
.plt:00000000000024A0
.plt:00000000000024A6 ; ---------------------------------------------------------------------------
.plt:00000000000024A6                 push    9
.plt:00000000000024AB                 jmp     sub_2400
.plt:00000000000024B0
.plt:00000000000024B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024B0
.plt:00000000000024B0 ; Attributes: thunk
.plt:00000000000024B0
.plt:00000000000024B0 ; char *textdomain(const char *domainname)
.plt:00000000000024B0 _textdomain     proc near               ; CODE XREF: main+65↓p
.plt:00000000000024B0                 jmp     cs:textdomain_ptr
.plt:00000000000024B0 _textdomain     endp
.plt:00000000000024B0
.plt:00000000000024B6 ; ---------------------------------------------------------------------------
.plt:00000000000024B6                 push    0Ah
.plt:00000000000024BB                 jmp     sub_2400
.plt:00000000000024C0
.plt:00000000000024C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024C0
.plt:00000000000024C0 ; Attributes: thunk
.plt:00000000000024C0
.plt:00000000000024C0 ; int fclose(FILE *stream)
.plt:00000000000024C0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000024C0                                         ; rpl_fclose+6B↓j
.plt:00000000000024C0                 jmp     cs:fclose_ptr
.plt:00000000000024C0 _fclose         endp
.plt:00000000000024C0
.plt:00000000000024C6 ; ---------------------------------------------------------------------------
.plt:00000000000024C6                 push    0Bh
.plt:00000000000024CB                 jmp     sub_2400
.plt:00000000000024D0
.plt:00000000000024D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024D0
.plt:00000000000024D0 ; Attributes: thunk
.plt:00000000000024D0
.plt:00000000000024D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000024D0 _bindtextdomain proc near               ; CODE XREF: main+59↓p
.plt:00000000000024D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000024D0 _bindtextdomain endp
.plt:00000000000024D0
.plt:00000000000024D6 ; ---------------------------------------------------------------------------
.plt:00000000000024D6                 push    0Ch
.plt:00000000000024DB                 jmp     sub_2400
.plt:00000000000024E0
.plt:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024E0
.plt:00000000000024E0 ; Attributes: thunk
.plt:00000000000024E0
.plt:00000000000024E0 ; int cfsetospeed(struct termios *termios_p, speed_t speed)
.plt:00000000000024E0 _cfsetospeed    proc near               ; CODE XREF: apply_settings:loc_4EDF↓p
.plt:00000000000024E0                 jmp     cs:cfsetospeed_ptr
.plt:00000000000024E0 _cfsetospeed    endp
.plt:00000000000024E0
.plt:00000000000024E6 ; ---------------------------------------------------------------------------
.plt:00000000000024E6                 push    0Dh
.plt:00000000000024EB                 jmp     sub_2400
.plt:00000000000024F0
.plt:00000000000024F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000024F0
.plt:00000000000024F0 ; Attributes: thunk
.plt:00000000000024F0
.plt:00000000000024F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000024F0 _dcgettext      proc near               ; CODE XREF: main+35A↓p
.plt:00000000000024F0                                         ; main+6C4↓p ...
.plt:00000000000024F0                 jmp     cs:dcgettext_ptr
.plt:00000000000024F0 _dcgettext      endp
.plt:00000000000024F0
.plt:00000000000024F6 ; ---------------------------------------------------------------------------
.plt:00000000000024F6                 push    0Eh
.plt:00000000000024FB                 jmp     sub_2400
.plt:0000000000002500
.plt:0000000000002500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002500
.plt:0000000000002500 ; Attributes: thunk
.plt:0000000000002500
.plt:0000000000002500 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002500 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000002500                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002500 ___ctype_get_mb_cur_max endp
.plt:0000000000002500
.plt:0000000000002506 ; ---------------------------------------------------------------------------
.plt:0000000000002506                 push    0Fh
.plt:000000000000250B                 jmp     sub_2400
.plt:0000000000002510
.plt:0000000000002510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002510
.plt:0000000000002510 ; Attributes: thunk
.plt:0000000000002510
.plt:0000000000002510 ; size_t strlen(const char *s)
.plt:0000000000002510 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000002510                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000002510                 jmp     cs:strlen_ptr
.plt:0000000000002510 _strlen         endp
.plt:0000000000002510
.plt:0000000000002516 ; ---------------------------------------------------------------------------
.plt:0000000000002516                 push    10h
.plt:000000000000251B                 jmp     sub_2400
.plt:0000000000002520
.plt:0000000000002520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002520
.plt:0000000000002520 ; Attributes: noreturn thunk
.plt:0000000000002520
.plt:0000000000002520 ___stack_chk_fail proc near             ; CODE XREF: main:loc_31C4↓p
.plt:0000000000002520                                         ; wrapf:loc_36AC↓p ...
.plt:0000000000002520                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002520 ___stack_chk_fail endp
.plt:0000000000002520
.plt:0000000000002526 ; ---------------------------------------------------------------------------
.plt:0000000000002526                 push    11h
.plt:000000000000252B                 jmp     sub_2400
.plt:0000000000002530
.plt:0000000000002530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002530
.plt:0000000000002530 ; Attributes: thunk
.plt:0000000000002530
.plt:0000000000002530 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002530 _getopt_long    proc near               ; CODE XREF: main+B2↓p
.plt:0000000000002530                 jmp     cs:getopt_long_ptr
.plt:0000000000002530 _getopt_long    endp
.plt:0000000000002530
.plt:0000000000002536 ; ---------------------------------------------------------------------------
.plt:0000000000002536                 push    12h
.plt:000000000000253B                 jmp     sub_2400
.plt:0000000000002540
.plt:0000000000002540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002540
.plt:0000000000002540 ; Attributes: thunk
.plt:0000000000002540
.plt:0000000000002540 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002540 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002540                 jmp     cs:mbrtowc_ptr
.plt:0000000000002540 _mbrtowc        endp
.plt:0000000000002540
.plt:0000000000002546 ; ---------------------------------------------------------------------------
.plt:0000000000002546                 push    13h
.plt:000000000000254B                 jmp     sub_2400
.plt:0000000000002550
.plt:0000000000002550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002550
.plt:0000000000002550 ; Attributes: thunk
.plt:0000000000002550
.plt:0000000000002550 ; int dup2(int fd, int fd2)
.plt:0000000000002550 _dup2           proc near               ; CODE XREF: fd_reopen+28↓p
.plt:0000000000002550                 jmp     cs:dup2_ptr
.plt:0000000000002550 _dup2           endp
.plt:0000000000002550
.plt:0000000000002556 ; ---------------------------------------------------------------------------
.plt:0000000000002556                 push    14h
.plt:000000000000255B                 jmp     sub_2400
.plt:0000000000002560
.plt:0000000000002560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002560
.plt:0000000000002560 ; Attributes: thunk
.plt:0000000000002560
.plt:0000000000002560 ; char *strchr(const char *s, int c)
.plt:0000000000002560 _strchr         proc near               ; CODE XREF: xstrtol+EC↓p
.plt:0000000000002560                                         ; xstrtol+10F↓p ...
.plt:0000000000002560                 jmp     cs:strchr_ptr
.plt:0000000000002560 _strchr         endp
.plt:0000000000002560
.plt:0000000000002566 ; ---------------------------------------------------------------------------
.plt:0000000000002566                 push    15h
.plt:000000000000256B                 jmp     sub_2400
.plt:0000000000002570
.plt:0000000000002570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002570
.plt:0000000000002570 ; Attributes: thunk
.plt:0000000000002570
.plt:0000000000002570 ; int __overflow(_IO_FILE *, int)
.plt:0000000000002570 ___overflow     proc near               ; CODE XREF: main+961↓p
.plt:0000000000002570                                         ; main+98F↓p ...
.plt:0000000000002570                 jmp     cs:__overflow_ptr
.plt:0000000000002570 ___overflow     endp
.plt:0000000000002570
.plt:0000000000002576 ; ---------------------------------------------------------------------------
.plt:0000000000002576                 push    16h
.plt:000000000000257B                 jmp     sub_2400
.plt:0000000000002580
.plt:0000000000002580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002580
.plt:0000000000002580 ; Attributes: thunk
.plt:0000000000002580
.plt:0000000000002580 ; char *strrchr(const char *s, int c)
.plt:0000000000002580 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000002580                 jmp     cs:strrchr_ptr
.plt:0000000000002580 _strrchr        endp
.plt:0000000000002580
.plt:0000000000002586 ; ---------------------------------------------------------------------------
.plt:0000000000002586                 push    17h
.plt:000000000000258B                 jmp     sub_2400
.plt:0000000000002590
.plt:0000000000002590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002590
.plt:0000000000002590 ; Attributes: thunk
.plt:0000000000002590
.plt:0000000000002590 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000002590 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000002590                                         ; rpl_fseeko+3B↓p
.plt:0000000000002590                 jmp     cs:lseek_ptr
.plt:0000000000002590 _lseek          endp
.plt:0000000000002590
.plt:0000000000002596 ; ---------------------------------------------------------------------------
.plt:0000000000002596                 push    18h
.plt:000000000000259B                 jmp     sub_2400
.plt:00000000000025A0
.plt:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025A0
.plt:00000000000025A0 ; Attributes: noreturn thunk
.plt:00000000000025A0
.plt:00000000000025A0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000025A0 ___assert_fail  proc near               ; CODE XREF: main+9EF↓p
.plt:00000000000025A0                                         ; main+ADF↓p ...
.plt:00000000000025A0                 jmp     cs:__assert_fail_ptr
.plt:00000000000025A0 ___assert_fail  endp
.plt:00000000000025A0
.plt:00000000000025A6 ; ---------------------------------------------------------------------------
.plt:00000000000025A6                 push    19h
.plt:00000000000025AB                 jmp     sub_2400
.plt:00000000000025B0
.plt:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025B0
.plt:00000000000025B0 ; Attributes: thunk
.plt:00000000000025B0
.plt:00000000000025B0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000025B0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000025B0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000025B0 ___strtoul_internal endp
.plt:00000000000025B0
.plt:00000000000025B6 ; ---------------------------------------------------------------------------
.plt:00000000000025B6                 push    1Ah
.plt:00000000000025BB                 jmp     sub_2400
.plt:00000000000025C0
.plt:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025C0
.plt:00000000000025C0 ; Attributes: thunk
.plt:00000000000025C0
.plt:00000000000025C0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000025C0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000025C0                                         ; xzalloc+12↓j
.plt:00000000000025C0                 jmp     cs:memset_ptr
.plt:00000000000025C0 _memset         endp
.plt:00000000000025C0
.plt:00000000000025C6 ; ---------------------------------------------------------------------------
.plt:00000000000025C6                 push    1Bh
.plt:00000000000025CB                 jmp     sub_2400
.plt:00000000000025D0
.plt:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025D0
.plt:00000000000025D0 ; Attributes: thunk
.plt:00000000000025D0
.plt:00000000000025D0 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:00000000000025D0 _ioctl          proc near               ; CODE XREF: screen_columns+23↓p
.plt:00000000000025D0                                         ; set_window_size+31↓p ...
.plt:00000000000025D0                 jmp     cs:ioctl_ptr
.plt:00000000000025D0 _ioctl          endp
.plt:00000000000025D0
.plt:00000000000025D6 ; ---------------------------------------------------------------------------
.plt:00000000000025D6                 push    1Ch
.plt:00000000000025DB                 jmp     sub_2400
.plt:00000000000025E0
.plt:00000000000025E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025E0
.plt:00000000000025E0 ; Attributes: thunk
.plt:00000000000025E0
.plt:00000000000025E0 ; int close(int fd)
.plt:00000000000025E0 _close          proc near               ; CODE XREF: fd_reopen+3D↓p
.plt:00000000000025E0                                         ; rpl_fcntl+1FE↓p
.plt:00000000000025E0                 jmp     cs:close_ptr
.plt:00000000000025E0 _close          endp
.plt:00000000000025E0
.plt:00000000000025E6 ; ---------------------------------------------------------------------------
.plt:00000000000025E6                 push    1Dh
.plt:00000000000025EB                 jmp     sub_2400
.plt:00000000000025F0
.plt:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025F0
.plt:00000000000025F0 ; Attributes: thunk
.plt:00000000000025F0
.plt:00000000000025F0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000025F0 _memcmp         proc near               ; CODE XREF: main+666↓p
.plt:00000000000025F0                                         ; main+697↓p ...
.plt:00000000000025F0                 jmp     cs:memcmp_ptr
.plt:00000000000025F0 _memcmp         endp
.plt:00000000000025F0
.plt:00000000000025F6 ; ---------------------------------------------------------------------------
.plt:00000000000025F6                 push    1Eh
.plt:00000000000025FB                 jmp     sub_2400
.plt:0000000000002600
.plt:0000000000002600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002600
.plt:0000000000002600 ; Attributes: thunk
.plt:0000000000002600
.plt:0000000000002600 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002600 _fputs_unlocked proc near               ; CODE XREF: wrapf+107↓p
.plt:0000000000002600                                         ; usage+A3↓p ...
.plt:0000000000002600                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002600 _fputs_unlocked endp
.plt:0000000000002600
.plt:0000000000002606 ; ---------------------------------------------------------------------------
.plt:0000000000002606                 push    1Fh
.plt:000000000000260B                 jmp     sub_2400
.plt:0000000000002610
.plt:0000000000002610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002610
.plt:0000000000002610 ; Attributes: thunk
.plt:0000000000002610
.plt:0000000000002610 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002610 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000002610                 jmp     cs:calloc_ptr
.plt:0000000000002610 _calloc         endp
.plt:0000000000002610
.plt:0000000000002616 ; ---------------------------------------------------------------------------
.plt:0000000000002616                 push    20h ; ' '
.plt:000000000000261B                 jmp     sub_2400
.plt:0000000000002620
.plt:0000000000002620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002620
.plt:0000000000002620 ; Attributes: thunk
.plt:0000000000002620
.plt:0000000000002620 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002620 _strcmp         proc near               ; CODE XREF: main+1BE↓p
.plt:0000000000002620                                         ; main+455↓p ...
.plt:0000000000002620                 jmp     cs:strcmp_ptr
.plt:0000000000002620 _strcmp         endp
.plt:0000000000002620
.plt:0000000000002626 ; ---------------------------------------------------------------------------
.plt:0000000000002626                 push    21h ; '!'
.plt:000000000000262B                 jmp     sub_2400
.plt:0000000000002630
.plt:0000000000002630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002630
.plt:0000000000002630 ; Attributes: thunk
.plt:0000000000002630
.plt:0000000000002630 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000002630 _strtol         proc near               ; CODE XREF: xstrtol+57↓p
.plt:0000000000002630                 jmp     cs:strtol_ptr
.plt:0000000000002630 _strtol         endp
.plt:0000000000002630
.plt:0000000000002636 ; ---------------------------------------------------------------------------
.plt:0000000000002636                 push    22h ; '"'
.plt:000000000000263B                 jmp     sub_2400
.plt:0000000000002640
.plt:0000000000002640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002640
.plt:0000000000002640 ; Attributes: thunk
.plt:0000000000002640
.plt:0000000000002640 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002640 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000002640                                         ; vasnprintf+2AE↓p ...
.plt:0000000000002640                 jmp     cs:memcpy_ptr
.plt:0000000000002640 _memcpy         endp
.plt:0000000000002640
.plt:0000000000002646 ; ---------------------------------------------------------------------------
.plt:0000000000002646                 push    23h ; '#'
.plt:000000000000264B                 jmp     sub_2400
.plt:0000000000002650
.plt:0000000000002650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002650
.plt:0000000000002650 ; Attributes: thunk
.plt:0000000000002650
.plt:0000000000002650 ; int fileno(FILE *stream)
.plt:0000000000002650 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000002650                                         ; rpl_fclose+4B↓p ...
.plt:0000000000002650                 jmp     cs:fileno_ptr
.plt:0000000000002650 _fileno         endp
.plt:0000000000002650
.plt:0000000000002656 ; ---------------------------------------------------------------------------
.plt:0000000000002656                 push    24h ; '$'
.plt:000000000000265B                 jmp     sub_2400
.plt:0000000000002660
.plt:0000000000002660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002660
.plt:0000000000002660 ; Attributes: thunk
.plt:0000000000002660
.plt:0000000000002660 ; void *malloc(size_t size)
.plt:0000000000002660 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000002660                                         ; vasnprintf+D2↓p ...
.plt:0000000000002660                 jmp     cs:malloc_ptr
.plt:0000000000002660 _malloc         endp
.plt:0000000000002660
.plt:0000000000002666 ; ---------------------------------------------------------------------------
.plt:0000000000002666                 push    25h ; '%'
.plt:000000000000266B                 jmp     sub_2400
.plt:0000000000002670
.plt:0000000000002670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002670
.plt:0000000000002670 ; Attributes: thunk
.plt:0000000000002670
.plt:0000000000002670 ; int fflush(FILE *stream)
.plt:0000000000002670 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002670                                         ; rpl_fflush+3B↓j
.plt:0000000000002670                 jmp     cs:fflush_ptr
.plt:0000000000002670 _fflush         endp
.plt:0000000000002670
.plt:0000000000002676 ; ---------------------------------------------------------------------------
.plt:0000000000002676                 push    26h ; '&'
.plt:000000000000267B                 jmp     sub_2400
.plt:0000000000002680
.plt:0000000000002680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002680
.plt:0000000000002680 ; Attributes: thunk
.plt:0000000000002680
.plt:0000000000002680 ; char *nl_langinfo(nl_item item)
.plt:0000000000002680 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002680                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002680 _nl_langinfo    endp
.plt:0000000000002680
.plt:0000000000002686 ; ---------------------------------------------------------------------------
.plt:0000000000002686                 push    27h ; '''
.plt:000000000000268B                 jmp     sub_2400
.plt:0000000000002690
.plt:0000000000002690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002690
.plt:0000000000002690 ; Attributes: thunk
.plt:0000000000002690
.plt:0000000000002690 ; int __freading(FILE *fp)
.plt:0000000000002690 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000002690                                         ; rpl_fflush+9↓p
.plt:0000000000002690                 jmp     cs:__freading_ptr
.plt:0000000000002690 ___freading     endp
.plt:0000000000002690
.plt:0000000000002696 ; ---------------------------------------------------------------------------
.plt:0000000000002696                 push    28h ; '('
.plt:000000000000269B                 jmp     sub_2400
.plt:00000000000026A0
.plt:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026A0
.plt:00000000000026A0 ; Attributes: thunk
.plt:00000000000026A0
.plt:00000000000026A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000026A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000026A0                                         ; vasnprintf+285↓p ...
.plt:00000000000026A0                 jmp     cs:realloc_ptr
.plt:00000000000026A0 _realloc        endp
.plt:00000000000026A0
.plt:00000000000026A6 ; ---------------------------------------------------------------------------
.plt:00000000000026A6                 push    29h ; ')'
.plt:00000000000026AB                 jmp     sub_2400
.plt:00000000000026B0
.plt:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026B0
.plt:00000000000026B0 ; Attributes: thunk
.plt:00000000000026B0
.plt:00000000000026B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000026B0 _setlocale      proc near               ; CODE XREF: main+46↓p
.plt:00000000000026B0                                         ; usage+DD3↓p ...
.plt:00000000000026B0                 jmp     cs:setlocale_ptr
.plt:00000000000026B0 _setlocale      endp
.plt:00000000000026B0
.plt:00000000000026B6 ; ---------------------------------------------------------------------------
.plt:00000000000026B6                 push    2Ah ; '*'
.plt:00000000000026BB                 jmp     sub_2400
.plt:00000000000026C0
.plt:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026C0
.plt:00000000000026C0 ; Attributes: thunk
.plt:00000000000026C0
.plt:00000000000026C0 ; speed_t cfgetospeed(const struct termios *termios_p)
.plt:00000000000026C0 _cfgetospeed    proc near               ; CODE XREF: display_speed+20↓p
.plt:00000000000026C0                                         ; display_speed+2D↓p ...
.plt:00000000000026C0                 jmp     cs:cfgetospeed_ptr
.plt:00000000000026C0 _cfgetospeed    endp
.plt:00000000000026C0
.plt:00000000000026C6 ; ---------------------------------------------------------------------------
.plt:00000000000026C6                 push    2Bh ; '+'
.plt:00000000000026CB                 jmp     sub_2400
.plt:00000000000026D0
.plt:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026D0
.plt:00000000000026D0 ; Attributes: thunk
.plt:00000000000026D0
.plt:00000000000026D0 ___printf_chk   proc near               ; CODE XREF: main+5D2↓p
.plt:00000000000026D0                                         ; main+5EA↓p ...
.plt:00000000000026D0                 jmp     cs:__printf_chk_ptr
.plt:00000000000026D0 ___printf_chk   endp
.plt:00000000000026D0
.plt:00000000000026D6 ; ---------------------------------------------------------------------------
.plt:00000000000026D6                 push    2Ch ; ','
.plt:00000000000026DB                 jmp     sub_2400
.plt:00000000000026E0
.plt:00000000000026E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026E0
.plt:00000000000026E0 ; Attributes: thunk
.plt:00000000000026E0
.plt:00000000000026E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000026E0 _error          proc near               ; CODE XREF: main+39E↓p
.plt:00000000000026E0                                         ; main+6D8↓p ...
.plt:00000000000026E0                 jmp     cs:error_ptr
.plt:00000000000026E0 _error          endp
.plt:00000000000026E0
.plt:00000000000026E6 ; ---------------------------------------------------------------------------
.plt:00000000000026E6                 push    2Dh ; '-'
.plt:00000000000026EB                 jmp     sub_2400
.plt:00000000000026F0
.plt:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026F0
.plt:00000000000026F0 ; Attributes: thunk
.plt:00000000000026F0
.plt:00000000000026F0 ; int tcgetattr(int fd, struct termios *termios_p)
.plt:00000000000026F0 _tcgetattr      proc near               ; CODE XREF: main+2BA↓p
.plt:00000000000026F0                                         ; main+36B↓p ...
.plt:00000000000026F0                 jmp     cs:tcgetattr_ptr
.plt:00000000000026F0 _tcgetattr      endp
.plt:00000000000026F0
.plt:00000000000026F6 ; ---------------------------------------------------------------------------
.plt:00000000000026F6                 push    2Eh ; '.'
.plt:00000000000026FB                 jmp     sub_2400
.plt:0000000000002700
.plt:0000000000002700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002700
.plt:0000000000002700 ; Attributes: thunk
.plt:0000000000002700
.plt:0000000000002700 ; int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
.plt:0000000000002700 _tcsetattr      proc near               ; CODE XREF: main+630↓p
.plt:0000000000002700                 jmp     cs:tcsetattr_ptr
.plt:0000000000002700 _tcsetattr      endp
.plt:0000000000002700
.plt:0000000000002706 ; ---------------------------------------------------------------------------
.plt:0000000000002706                 push    2Fh ; '/'
.plt:000000000000270B                 jmp     sub_2400
.plt:0000000000002710
.plt:0000000000002710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002710
.plt:0000000000002710 ; Attributes: thunk
.plt:0000000000002710
.plt:0000000000002710 ; int open(const char *file, int oflag, ...)
.plt:0000000000002710 _open           proc near               ; CODE XREF: fd_reopen+15↓p
.plt:0000000000002710                 jmp     cs:open_ptr
.plt:0000000000002710 _open           endp
.plt:0000000000002710
.plt:0000000000002716 ; ---------------------------------------------------------------------------
.plt:0000000000002716                 push    30h ; '0'
.plt:000000000000271B                 jmp     sub_2400
.plt:0000000000002720
.plt:0000000000002720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002720
.plt:0000000000002720 ; Attributes: thunk
.plt:0000000000002720
.plt:0000000000002720 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002720 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_91DA↓j
.plt:0000000000002720                 jmp     cs:fseeko_ptr
.plt:0000000000002720 _fseeko         endp
.plt:0000000000002720
.plt:0000000000002726 ; ---------------------------------------------------------------------------
.plt:0000000000002726                 push    31h ; '1'
.plt:000000000000272B                 jmp     sub_2400
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730 ; Attributes: thunk
.plt:0000000000002730
.plt:0000000000002730 ; int cfsetispeed(struct termios *termios_p, speed_t speed)
.plt:0000000000002730 _cfsetispeed    proc near               ; CODE XREF: apply_settings+181↓p
.plt:0000000000002730                                         ; apply_settings+840↓p
.plt:0000000000002730                 jmp     cs:cfsetispeed_ptr
.plt:0000000000002730 _cfsetispeed    endp
.plt:0000000000002730
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:0000000000002736                 push    32h ; '2'
.plt:000000000000273B                 jmp     sub_2400
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: thunk
.plt:0000000000002740
.plt:0000000000002740 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000002740 _strtoul        proc near               ; CODE XREF: apply_settings+8B0↓p
.plt:0000000000002740                                         ; apply_settings+984↓p
.plt:0000000000002740                 jmp     cs:strtoul_ptr
.plt:0000000000002740 _strtoul        endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    33h ; '3'
.plt:000000000000274B                 jmp     sub_2400
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002750 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002750                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002750 ___cxa_atexit   endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    34h ; '4'
.plt:000000000000275B                 jmp     sub_2400
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: noreturn thunk
.plt:0000000000002760
.plt:0000000000002760 ; void __noreturn exit(int status)
.plt:0000000000002760 _exit           proc near               ; CODE XREF: main+166↓p
.plt:0000000000002760                                         ; usage+58↓p
.plt:0000000000002760                 jmp     cs:exit_ptr
.plt:0000000000002760 _exit           endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    35h ; '5'
.plt:000000000000276B                 jmp     sub_2400
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: thunk
.plt:0000000000002770
.plt:0000000000002770 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002770 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002770                 jmp     cs:fwrite_ptr
.plt:0000000000002770 _fwrite         endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    36h ; '6'
.plt:000000000000277B                 jmp     sub_2400
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: thunk
.plt:0000000000002780
.plt:0000000000002780 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002780                                         ; version_etc_arn+37↓p ...
.plt:0000000000002780                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002780 ___fprintf_chk  endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    37h ; '7'
.plt:000000000000278B                 jmp     sub_2400
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002790 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002790                 jmp     cs:mbsinit_ptr
.plt:0000000000002790 _mbsinit        endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    38h ; '8'
.plt:000000000000279B                 jmp     sub_2400
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; int iswprint(wint_t wc)
.plt:00000000000027A0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000027A0                 jmp     cs:iswprint_ptr
.plt:00000000000027A0 _iswprint       endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    39h ; '9'
.plt:00000000000027AB                 jmp     sub_2400
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000027B0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000027B0                                         ; xstrtoumax+55↓p
.plt:00000000000027B0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000027B0 ___ctype_b_loc  endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    3Ah ; ':'
.plt:00000000000027BB                 jmp     sub_2400
.plt:00000000000027BB ; } // starts at 2400
.plt:00000000000027BB _plt            ends
.plt:00000000000027BB
.plt.got:00000000000027C0 ; ===========================================================================
.plt.got:00000000000027C0
.plt.got:00000000000027C0 ; Segment type: Pure code
.plt.got:00000000000027C0 ; Segment permissions: Read/Execute
.plt.got:00000000000027C0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000027C0                 assume cs:_plt_got
.plt.got:00000000000027C0                 ;org 27C0h
.plt.got:00000000000027C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000027C0
.plt.got:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000027C0
.plt.got:00000000000027C0 ; Attributes: thunk
.plt.got:00000000000027C0
.plt.got:00000000000027C0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000027C0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000027C0 ; __unwind {
.plt.got:00000000000027C0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000027C0 __cxa_finalize  endp
.plt.got:00000000000027C0
.plt.got:00000000000027C0 ; ---------------------------------------------------------------------------
.plt.got:00000000000027C6                 align 8
.plt.got:00000000000027C6 ; } // starts at 27C0
.plt.got:00000000000027C6 _plt_got        ends
.plt.got:00000000000027C6
LOAD:00000000000027C8 ; ===========================================================================
LOAD:00000000000027C8
LOAD:00000000000027C8 ; Segment type: Pure code
LOAD:00000000000027C8 ; Segment permissions: Read/Execute
LOAD:00000000000027C8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000027C8                 assume cs:LOAD
LOAD:00000000000027C8                 ;org 27C8h
LOAD:00000000000027C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000027C8                 align 10h
LOAD:00000000000027C8 LOAD            ends
LOAD:00000000000027C8
.text:00000000000027D0 ; ===========================================================================
.text:00000000000027D0
.text:00000000000027D0 ; Segment type: Pure code
.text:00000000000027D0 ; Segment permissions: Read/Execute
.text:00000000000027D0 _text           segment para public 'CODE' use64
.text:00000000000027D0                 assume cs:_text
.text:00000000000027D0                 ;org 27D0h
.text:00000000000027D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000027D0
.text:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027D0
.text:00000000000027D0
.text:00000000000027D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000027D0                 public main
.text:00000000000027D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000027D0
.text:00000000000027D0 var_50          = dword ptr -50h
.text:00000000000027D0 var_4B          = byte ptr -4Bh
.text:00000000000027D0 var_4A          = byte ptr -4Ah
.text:00000000000027D0 var_49          = byte ptr -49h
.text:00000000000027D0 var_42          = byte ptr -42h
.text:00000000000027D0 var_41          = byte ptr -41h
.text:00000000000027D0 var_40          = qword ptr -40h
.text:00000000000027D0
.text:00000000000027D0 ; __unwind {
.text:00000000000027D0                 push    r15
.text:00000000000027D2                 push    r14
.text:00000000000027D4                 mov     r15d, 1
.text:00000000000027DA                 push    r13
.text:00000000000027DC                 push    r12
.text:00000000000027DE                 mov     r13d, edi
.text:00000000000027E1                 push    rbp
.text:00000000000027E2                 push    rbx
.text:00000000000027E3                 mov     rbx, rsi
.text:00000000000027E6                 xor     r14d, r14d
.text:00000000000027E9                 xor     r12d, r12d
.text:00000000000027EC                 xor     ebp, ebp
.text:00000000000027EE                 sub     rsp, 28h
.text:00000000000027F2                 mov     rdi, [rsi]
.text:00000000000027F5                 mov     rax, fs:28h
.text:00000000000027FE                 mov     [rsp+58h+var_40], rax
.text:0000000000002803                 xor     eax, eax
.text:0000000000002805                 call    set_program_name
.text:000000000000280A                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000002811                 mov     edi, 6          ; category
.text:0000000000002816                 call    _setlocale
.text:000000000000281B                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002822                 lea     rdi, domainname ; "coreutils"
.text:0000000000002829                 call    _bindtextdomain
.text:000000000000282E                 lea     rdi, domainname ; "coreutils"
.text:0000000000002835                 call    _textdomain
.text:000000000000283A                 lea     rdi, close_stdout
.text:0000000000002841                 call    atexit
.text:0000000000002846                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000002850                 mov     [rsp+58h+var_49], 1
.text:0000000000002855                 mov     [rsp+58h+var_4A], 0
.text:000000000000285A                 mov     [rsp+58h+var_4B], 0
.text:000000000000285F                 mov     [rsp+58h+var_50], 0
.text:0000000000002867
.text:0000000000002867 loc_2867:                               ; CODE XREF: main+12B↓j
.text:0000000000002867                                         ; main+1E8↓j
.text:0000000000002867                 lea     rsi, [rbx+rbp*8] ; argv
.text:000000000000286B                 mov     edi, r13d
.text:000000000000286E                 lea     rcx, longopts   ; longopts
.text:0000000000002875                 lea     rdx, shortopts  ; "-agF:"
.text:000000000000287C                 sub     edi, r12d       ; argc
.text:000000000000287F                 xor     r8d, r8d        ; longind
.text:0000000000002882                 call    _getopt_long
.text:0000000000002887                 cmp     eax, 0FFFFFFFFh
.text:000000000000288A                 jz      loc_29D2
.text:0000000000002890                 cmp     eax, 46h ; 'F'
.text:0000000000002893                 jz      loc_2940
.text:0000000000002899                 jle     short loc_2900
.text:000000000000289B                 cmp     eax, 61h ; 'a'
.text:000000000000289E                 jz      loc_29C0
.text:00000000000028A4                 cmp     eax, 67h ; 'g'
.text:00000000000028A7                 jnz     loc_2960
.text:00000000000028AD                 mov     [rsp+58h+var_4A], 1
.text:00000000000028B2                 mov     [rsp+58h+var_50], 2
.text:00000000000028BA
.text:00000000000028BA loc_28BA:                               ; CODE XREF: main+180↓j
.text:00000000000028BA                                         ; main+1FD↓j
.text:00000000000028BA                 mov     esi, cs:optind@@GLIBC_2_2_5
.text:00000000000028C0                 cmp     esi, r15d
.text:00000000000028C3                 jle     loc_3211
.text:00000000000028C9                 movsxd  rdx, r15d
.text:00000000000028CC                 lea     rcx, [rdx+rbp]
.text:00000000000028D0                 lea     edx, [rsi-1]
.text:00000000000028D3                 sub     edx, r15d
.text:00000000000028D6                 lea     rax, [rbx+rcx*8]
.text:00000000000028DA                 add     rdx, rcx
.text:00000000000028DD                 lea     rdx, [rbx+rdx*8+8]
.text:00000000000028E2                 nop     word ptr [rax+rax+00h]
.text:00000000000028E8
.text:00000000000028E8 loc_28E8:                               ; CODE XREF: main+126↓j
.text:00000000000028E8                 mov     qword ptr [rax], 0
.text:00000000000028EF                 add     rax, 8
.text:00000000000028F3                 cmp     rdx, rax
.text:00000000000028F6                 jnz     short loc_28E8
.text:00000000000028F8
.text:00000000000028F8 loc_28F8:                               ; CODE XREF: main+A44↓j
.text:00000000000028F8                 mov     r15d, esi
.text:00000000000028FB                 jmp     loc_2867
.text:0000000000002900 ; ---------------------------------------------------------------------------
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: main+C9↑j
.text:0000000000002900                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002905                 jnz     short loc_2955
.text:0000000000002907                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000290E                 mov     rcx, cs:Version
.text:0000000000002915                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:000000000000291C                 lea     rdx, unk_B470
.text:0000000000002923                 lea     rsi, aStty      ; "stty"
.text:000000000000292A                 xor     r9d, r9d
.text:000000000000292D                 xor     eax, eax
.text:000000000000292F                 call    version_etc
.text:0000000000002934                 xor     edi, edi        ; status
.text:0000000000002936                 call    _exit
.text:0000000000002936 ; ---------------------------------------------------------------------------
.text:000000000000293B                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: main+C3↑j
.text:0000000000002940                 test    r14, r14
.text:0000000000002943                 jnz     loc_31ED
.text:0000000000002949                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:0000000000002950                 jmp     loc_28BA
.text:0000000000002955 ; ---------------------------------------------------------------------------
.text:0000000000002955
.text:0000000000002955 loc_2955:                               ; CODE XREF: main+135↑j
.text:0000000000002955                 cmp     eax, 0FFFFFF7Eh
.text:000000000000295A                 jz      loc_2DEA
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: main+D7↑j
.text:0000000000002960                 add     r12d, r15d
.text:0000000000002963                 lea     rdi, aDrain     ; "-drain"
.text:000000000000296A                 mov     ecx, 7
.text:000000000000296F                 movsxd  rbp, r12d
.text:0000000000002972                 mov     rdx, [rbx+rbp*8]
.text:0000000000002976                 mov     rsi, rdx
.text:0000000000002979                 repe cmpsb
.text:000000000000297B                 setnbe  al
.text:000000000000297E                 sbb     al, 0
.text:0000000000002980                 test    al, al
.text:0000000000002982                 jz      short loc_29A6
.text:0000000000002984                 lea     rsi, aDrain+1   ; s2
.text:000000000000298B                 mov     rdi, rdx        ; s1
.text:000000000000298E                 call    _strcmp
.text:0000000000002993                 movzx   ecx, [rsp+58h+var_49]
.text:0000000000002998                 test    eax, eax
.text:000000000000299A                 mov     eax, 0
.text:000000000000299F                 cmovnz  ecx, eax
.text:00000000000029A2                 mov     [rsp+58h+var_49], cl
.text:00000000000029A6
.text:00000000000029A6 loc_29A6:                               ; CODE XREF: main+1B2↑j
.text:00000000000029A6                 mov     esi, 1
.text:00000000000029AB                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:00000000000029B5                 mov     r15d, esi
.text:00000000000029B8                 jmp     loc_2867
.text:00000000000029B8 ; ---------------------------------------------------------------------------
.text:00000000000029BD                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: main+CE↑j
.text:00000000000029C0                 mov     [rsp+58h+var_4B], 1
.text:00000000000029C5                 mov     [rsp+58h+var_50], 1
.text:00000000000029CD                 jmp     loc_28BA
.text:00000000000029D2 ; ---------------------------------------------------------------------------
.text:00000000000029D2
.text:00000000000029D2 loc_29D2:                               ; CODE XREF: main+BA↑j
.text:00000000000029D2                 movzx   ecx, [rsp+58h+var_4A]
.text:00000000000029D7                 test    [rsp+58h+var_4B], cl
.text:00000000000029DB                 jnz     loc_31C9
.text:00000000000029E1                 cmp     [rsp+58h+var_49], 0
.text:00000000000029E6                 jnz     loc_2B13
.text:00000000000029EC                 cmp     [rsp+58h+var_4B], 0
.text:00000000000029F1                 jnz     loc_32B4
.text:00000000000029F7                 cmp     [rsp+58h+var_4A], 0
.text:00000000000029FC                 jnz     loc_32B4
.text:0000000000002A02                 test    r14, r14
.text:0000000000002A05                 jz      loc_30E5
.text:0000000000002A0B                 sub     rsp, 8
.text:0000000000002A0F                 lea     r8, check_mode_7223
.text:0000000000002A16                 mov     rdx, rbx
.text:0000000000002A19                 lea     rax, [rsp+60h+var_42]
.text:0000000000002A1E                 mov     ecx, r13d
.text:0000000000002A21                 mov     rsi, r14
.text:0000000000002A24                 mov     edi, 1
.text:0000000000002A29                 push    rax
.text:0000000000002A2A                 lea     r9, [rsp+68h+var_41]
.text:0000000000002A2F                 call    apply_settings
.text:0000000000002A34                 pop     rax
.text:0000000000002A35                 pop     rdx
.text:0000000000002A36
.text:0000000000002A36 loc_2A36:                               ; CODE XREF: main+346↓j
.text:0000000000002A36                 xor     ecx, ecx
.text:0000000000002A38                 xor     edi, edi        ; fd2
.text:0000000000002A3A                 mov     edx, 800h       ; oflag
.text:0000000000002A3F                 mov     rsi, r14        ; file
.text:0000000000002A42                 call    fd_reopen
.text:0000000000002A47                 test    eax, eax
.text:0000000000002A49                 js      loc_3319
.text:0000000000002A4F                 xor     edi, edi        ; fd
.text:0000000000002A51                 xor     eax, eax
.text:0000000000002A53                 mov     esi, 3
.text:0000000000002A58                 call    rpl_fcntl
.text:0000000000002A5D                 cmp     eax, 0FFFFFFFFh
.text:0000000000002A60                 jz      loc_32D8
.text:0000000000002A66                 and     ah, 0F7h
.text:0000000000002A69                 xor     edi, edi        ; fd
.text:0000000000002A6B                 mov     esi, 4
.text:0000000000002A70                 mov     edx, eax
.text:0000000000002A72                 xor     eax, eax
.text:0000000000002A74                 call    rpl_fcntl
.text:0000000000002A79                 test    eax, eax
.text:0000000000002A7B                 js      loc_32D8
.text:0000000000002A81
.text:0000000000002A81 loc_2A81:                               ; CODE XREF: main+957↓j
.text:0000000000002A81                 lea     rsi, mode_7192  ; termios_p
.text:0000000000002A88                 xor     edi, edi        ; fd
.text:0000000000002A8A                 call    _tcgetattr
.text:0000000000002A8F                 test    eax, eax
.text:0000000000002A91                 jnz     loc_2B44
.text:0000000000002A97                 movzx   eax, [rsp+58h+var_4B]
.text:0000000000002A9C                 or      al, [rsp+58h+var_49]
.text:0000000000002AA0                 jnz     loc_2B73
.text:0000000000002AA6                 cmp     [rsp+58h+var_4A], 0
.text:0000000000002AAB                 jnz     loc_2B73
.text:0000000000002AB1                 mov     [rsp+58h+var_41], 0
.text:0000000000002AB6                 mov     [rsp+58h+var_42], 0
.text:0000000000002ABB                 sub     rsp, 8
.text:0000000000002ABF                 lea     rax, [rsp+60h+var_42]
.text:0000000000002AC4                 lea     r8, mode_7192
.text:0000000000002ACB                 mov     ecx, r13d
.text:0000000000002ACE                 mov     rsi, r14
.text:0000000000002AD1                 xor     edi, edi
.text:0000000000002AD3                 mov     rdx, rbx
.text:0000000000002AD6                 push    rax
.text:0000000000002AD7                 lea     r9, [rsp+68h+var_41]
.text:0000000000002ADC                 call    apply_settings
.text:0000000000002AE1                 pop     rcx
.text:0000000000002AE2                 pop     rsi
.text:0000000000002AE3                 cmp     [rsp+58h+var_42], 0
.text:0000000000002AE8                 jnz     loc_2DF1
.text:0000000000002AEE
.text:0000000000002AEE loc_2AEE:                               ; CODE XREF: main+615↓j
.text:0000000000002AEE                                         ; main+66D↓j ...
.text:0000000000002AEE                 xor     eax, eax
.text:0000000000002AF0                 mov     rcx, [rsp+58h+var_40]
.text:0000000000002AF5                 xor     rcx, fs:28h
.text:0000000000002AFE                 jnz     loc_31C4
.text:0000000000002B04                 add     rsp, 28h
.text:0000000000002B08                 pop     rbx
.text:0000000000002B09                 pop     rbp
.text:0000000000002B0A                 pop     r12
.text:0000000000002B0C                 pop     r13
.text:0000000000002B0E                 pop     r14
.text:0000000000002B10                 pop     r15
.text:0000000000002B12                 retn
.text:0000000000002B13 ; ---------------------------------------------------------------------------
.text:0000000000002B13
.text:0000000000002B13 loc_2B13:                               ; CODE XREF: main+216↑j
.text:0000000000002B13                 test    r14, r14
.text:0000000000002B16                 jnz     loc_2A36
.text:0000000000002B1C                 lea     rsi, msgid      ; "standard input"
.text:0000000000002B23                 xor     edi, edi        ; domainname
.text:0000000000002B25                 mov     edx, 5          ; category
.text:0000000000002B2A                 call    _dcgettext
.text:0000000000002B2F                 lea     rsi, mode_7192  ; termios_p
.text:0000000000002B36                 xor     edi, edi        ; fd
.text:0000000000002B38                 mov     r14, rax
.text:0000000000002B3B                 call    _tcgetattr
.text:0000000000002B40                 test    eax, eax
.text:0000000000002B42                 jz      short loc_2B73
.text:0000000000002B44
.text:0000000000002B44 loc_2B44:                               ; CODE XREF: main+2C1↑j
.text:0000000000002B44                 mov     rdx, r14
.text:0000000000002B47                 mov     esi, 3
.text:0000000000002B4C                 xor     edi, edi
.text:0000000000002B4E                 call    quotearg_n_style_colon
.text:0000000000002B53                 mov     rbx, rax
.text:0000000000002B56                 call    ___errno_location
.text:0000000000002B5B                 mov     esi, [rax]      ; errnum
.text:0000000000002B5D                 lea     rdx, format     ; format
.text:0000000000002B64                 mov     rcx, rbx
.text:0000000000002B67                 mov     edi, 1          ; status
.text:0000000000002B6C                 xor     eax, eax
.text:0000000000002B6E                 call    _error
.text:0000000000002B73
.text:0000000000002B73 loc_2B73:                               ; CODE XREF: main+2D0↑j
.text:0000000000002B73                                         ; main+2DB↑j ...
.text:0000000000002B73                 call    screen_columns
.text:0000000000002B78                 mov     cs:max_col, eax
.text:0000000000002B7E                 mov     eax, [rsp+58h+var_50]
.text:0000000000002B82                 mov     cs:current_col, 0
.text:0000000000002B8C                 cmp     eax, 1
.text:0000000000002B8F                 jz      loc_2F0B
.text:0000000000002B95                 cmp     eax, 2
.text:0000000000002B98                 jz      loc_2D6A
.text:0000000000002B9E                 lea     rdi, mode_7192  ; termios_p
.text:0000000000002BA5                 mov     esi, 1
.text:0000000000002BAA                 call    display_speed
.text:0000000000002BAF                 movzx   esi, cs:mode_7192.c_line
.text:0000000000002BB6                 lea     rdi, aLineD     ; "line = %d;"
.text:0000000000002BBD                 xor     eax, eax
.text:0000000000002BBF                 call    wrapf
.text:0000000000002BC4                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002BCB                 mov     rax, [rdi+28h]
.text:0000000000002BCF                 cmp     rax, [rdi+30h]
.text:0000000000002BD3                 jnb     loc_3196
.text:0000000000002BD9                 lea     rdx, [rax+1]
.text:0000000000002BDD                 mov     [rdi+28h], rdx
.text:0000000000002BE1                 mov     byte ptr [rax], 0Ah
.text:0000000000002BE4
.text:0000000000002BE4 loc_2BE4:                               ; CODE XREF: main+9D0↓j
.text:0000000000002BE4                 mov     cs:current_col, 0
.text:0000000000002BEE                 lea     r15, control_info
.text:0000000000002BF5                 mov     r13d, 1
.text:0000000000002BFB                 lea     rbp, aMin       ; "min"
.text:0000000000002C02                 lea     r12, mode_7192
.text:0000000000002C09                 jmp     short loc_2C56
.text:0000000000002C0B ; ---------------------------------------------------------------------------
.text:0000000000002C0B
.text:0000000000002C0B loc_2C0B:                               ; CODE XREF: main+496↓j
.text:0000000000002C0B                 mov     rax, [r15+10h]
.text:0000000000002C0F                 movzx   r14d, byte ptr [r12+rax+11h]
.text:0000000000002C15                 cmp     r14b, [r15+8]
.text:0000000000002C19                 jz      short loc_2C52
.text:0000000000002C1B                 lea     rsi, s2         ; "flush"
.text:0000000000002C22                 mov     rdi, rbx        ; s1
.text:0000000000002C25                 call    _strcmp
.text:0000000000002C2A                 test    eax, eax
.text:0000000000002C2C                 jz      short loc_2C52
.text:0000000000002C2E                 test    r14b, r14b
.text:0000000000002C31                 lea     rdx, aUndef     ; "<undef>"
.text:0000000000002C38                 jnz     loc_2EFA
.text:0000000000002C3E
.text:0000000000002C3E loc_2C3E:                               ; CODE XREF: main+736↓j
.text:0000000000002C3E                 lea     rdi, aSS        ; "%s = %s;"
.text:0000000000002C45                 mov     rsi, rbx
.text:0000000000002C48                 xor     eax, eax
.text:0000000000002C4A                 xor     r13d, r13d
.text:0000000000002C4D                 call    wrapf
.text:0000000000002C52
.text:0000000000002C52 loc_2C52:                               ; CODE XREF: main+449↑j
.text:0000000000002C52                                         ; main+45C↑j
.text:0000000000002C52                 add     r15, 18h
.text:0000000000002C56
.text:0000000000002C56 loc_2C56:                               ; CODE XREF: main+439↑j
.text:0000000000002C56                 mov     rbx, [r15]
.text:0000000000002C59                 mov     rsi, rbp        ; s2
.text:0000000000002C5C                 mov     rdi, rbx        ; s1
.text:0000000000002C5F                 call    _strcmp
.text:0000000000002C64                 test    eax, eax
.text:0000000000002C66                 jnz     short loc_2C0B
.text:0000000000002C68                 test    byte ptr cs:mode_7192.c_lflag, 2
.text:0000000000002C6F                 jz      loc_313B
.text:0000000000002C75                 test    r13b, r13b
.text:0000000000002C78                 jnz     short loc_2C9A
.text:0000000000002C7A                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002C81                 mov     rax, [rdi+28h]
.text:0000000000002C85                 cmp     rax, [rdi+30h]
.text:0000000000002C89                 jnb     loc_3228
.text:0000000000002C8F                 lea     rdx, [rax+1]
.text:0000000000002C93                 mov     [rdi+28h], rdx
.text:0000000000002C97                 mov     byte ptr [rax], 0Ah
.text:0000000000002C9A
.text:0000000000002C9A loc_2C9A:                               ; CODE XREF: main+4A8↑j
.text:0000000000002C9A                                         ; main+985↓j ...
.text:0000000000002C9A                 mov     cs:current_col, 0
.text:0000000000002CA4                 lea     rbx, mode_info
.text:0000000000002CAB                 xor     ebp, ebp
.text:0000000000002CAD                 mov     r12d, 1
.text:0000000000002CB3                 jmp     short loc_2CC5
.text:0000000000002CB5 ; ---------------------------------------------------------------------------
.text:0000000000002CB5
.text:0000000000002CB5 loc_2CB5:                               ; CODE XREF: main+572↓j
.text:0000000000002CB5                 and     ecx, 5
.text:0000000000002CB8                 cmp     cl, 5
.text:0000000000002CBB                 jz      loc_2EAD
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: main+503↓j
.text:0000000000002CC1                                         ; main+57B↓j ...
.text:0000000000002CC1                 add     rbx, 20h ; ' '
.text:0000000000002CC5
.text:0000000000002CC5 loc_2CC5:                               ; CODE XREF: main+4E3↑j
.text:0000000000002CC5                 cmp     qword ptr [rbx], 0
.text:0000000000002CC9                 jz      loc_2EC6
.text:0000000000002CCF                 test    byte ptr [rbx+0Ch], 8
.text:0000000000002CD3                 jnz     short loc_2CC1
.text:0000000000002CD5                 cmp     [rbx+8], ebp
.text:0000000000002CD8                 mov     edi, ebp
.text:0000000000002CDA                 jz      short loc_2D16
.text:0000000000002CDC                 test    r12b, r12b
.text:0000000000002CDF                 jnz     short loc_2D0B
.text:0000000000002CE1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002CE8                 mov     rax, [rdi+28h]
.text:0000000000002CEC                 cmp     rax, [rdi+30h]
.text:0000000000002CF0                 jnb     loc_315A
.text:0000000000002CF6                 lea     rdx, [rax+1]
.text:0000000000002CFA                 mov     [rdi+28h], rdx
.text:0000000000002CFE                 mov     byte ptr [rax], 0Ah
.text:0000000000002D01
.text:0000000000002D01 loc_2D01:                               ; CODE XREF: main+994↓j
.text:0000000000002D01                 mov     cs:current_col, 0
.text:0000000000002D0B
.text:0000000000002D0B loc_2D0B:                               ; CODE XREF: main+50F↑j
.text:0000000000002D0B                 mov     edi, [rbx+8]
.text:0000000000002D0E                 mov     r12d, 1
.text:0000000000002D14                 mov     ebp, edi
.text:0000000000002D16
.text:0000000000002D16 loc_2D16:                               ; CODE XREF: main+50A↑j
.text:0000000000002D16                 lea     rsi, mode_7192
.text:0000000000002D1D                 call    mode_type_flag
.text:0000000000002D22                 mov     rdx, [rbx+18h]
.text:0000000000002D26                 test    rdx, rdx
.text:0000000000002D29                 jnz     short loc_2D2F
.text:0000000000002D2B                 mov     rdx, [rbx+10h]
.text:0000000000002D2F
.text:0000000000002D2F loc_2D2F:                               ; CODE XREF: main+559↑j
.text:0000000000002D2F                 test    rax, rax
.text:0000000000002D32                 jz      loc_31A5
.text:0000000000002D38                 and     edx, [rax]
.text:0000000000002D3A                 movzx   ecx, byte ptr [rbx+0Ch]
.text:0000000000002D3E                 cmp     rdx, [rbx+10h]
.text:0000000000002D42                 jnz     loc_2CB5
.text:0000000000002D48                 and     cl, 2
.text:0000000000002D4B                 jz      loc_2CC1
.text:0000000000002D51                 mov     rsi, [rbx]
.text:0000000000002D54                 lea     rdi, format
.text:0000000000002D5B                 xor     eax, eax
.text:0000000000002D5D                 xor     r12d, r12d
.text:0000000000002D60                 call    wrapf
.text:0000000000002D65                 jmp     loc_2CC1
.text:0000000000002D6A ; ---------------------------------------------------------------------------
.text:0000000000002D6A
.text:0000000000002D6A loc_2D6A:                               ; CODE XREF: main+3C8↑j
.text:0000000000002D6A                 mov     ecx, cs:mode_7192.c_oflag
.text:0000000000002D70                 mov     edx, cs:mode_7192.c_iflag
.text:0000000000002D76                 lea     rsi, aLxLxLxLx  ; "%lx:%lx:%lx:%lx"
.text:0000000000002D7D                 mov     r9d, cs:mode_7192.c_lflag
.text:0000000000002D84                 mov     r8d, cs:mode_7192.c_cflag
.text:0000000000002D8B                 lea     r12, mode_7192.c_cc
.text:0000000000002D92                 lea     rbp, aLxLxLxLx+0Bh ; ":%lx"
.text:0000000000002D99                 mov     edi, 1
.text:0000000000002D9E                 xor     eax, eax
.text:0000000000002DA0                 xor     ebx, ebx
.text:0000000000002DA2                 call    ___printf_chk
.text:0000000000002DA7
.text:0000000000002DA7 loc_2DA7:                               ; CODE XREF: main+5F3↓j
.text:0000000000002DA7                 movzx   edx, byte ptr [r12+rbx]
.text:0000000000002DAC                 xor     eax, eax
.text:0000000000002DAE                 mov     rsi, rbp
.text:0000000000002DB1                 mov     edi, 1
.text:0000000000002DB6                 add     rbx, 1
.text:0000000000002DBA                 call    ___printf_chk
.text:0000000000002DBF                 cmp     rbx, 20h ; ' '
.text:0000000000002DC3                 jnz     short loc_2DA7
.text:0000000000002DC5                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002DCC                 mov     rax, [rdi+28h]
.text:0000000000002DD0                 cmp     rax, [rdi+30h]
.text:0000000000002DD4                 jnb     loc_3178
.text:0000000000002DDA                 lea     rdx, [rax+1]
.text:0000000000002DDE                 mov     [rdi+28h], rdx
.text:0000000000002DE2                 mov     byte ptr [rax], 0Ah
.text:0000000000002DE5                 jmp     loc_2AEE
.text:0000000000002DEA ; ---------------------------------------------------------------------------
.text:0000000000002DEA
.text:0000000000002DEA loc_2DEA:                               ; CODE XREF: main+18A↑j
.text:0000000000002DEA                 xor     edi, edi        ; status
.text:0000000000002DEC                 call    usage
.text:0000000000002DF1 ; ---------------------------------------------------------------------------
.text:0000000000002DF1
.text:0000000000002DF1 loc_2DF1:                               ; CODE XREF: main+318↑j
.text:0000000000002DF1                 mov     esi, cs:tcsetattr_options ; optional_actions
.text:0000000000002DF7                 lea     rdx, mode_7192  ; termios_p
.text:0000000000002DFE                 xor     edi, edi        ; fd
.text:0000000000002E00                 call    _tcsetattr
.text:0000000000002E05                 test    eax, eax
.text:0000000000002E07                 jnz     loc_3266
.text:0000000000002E0D                 lea     rsi, new_mode_7231 ; termios_p
.text:0000000000002E14                 xor     edi, edi        ; fd
.text:0000000000002E16                 call    _tcgetattr
.text:0000000000002E1B                 test    eax, eax
.text:0000000000002E1D                 jnz     loc_3237
.text:0000000000002E23                 lea     rsi, new_mode_7231 ; s2
.text:0000000000002E2A                 lea     rdi, mode_7192  ; s1
.text:0000000000002E31                 mov     edx, 3Ch ; '<'  ; n
.text:0000000000002E36                 call    _memcmp
.text:0000000000002E3B                 test    eax, eax
.text:0000000000002E3D                 jz      loc_2AEE
.text:0000000000002E43                 and     cs:new_mode_7231.c_cflag, 0EFF0FFFFh
.text:0000000000002E4D                 cmp     [rsp+58h+var_41], 0
.text:0000000000002E52                 jnz     short loc_2E74
.text:0000000000002E54                 lea     rsi, new_mode_7231 ; s2
.text:0000000000002E5B                 lea     rdi, mode_7192  ; s1
.text:0000000000002E62                 mov     edx, 3Ch ; '<'  ; n
.text:0000000000002E67                 call    _memcmp
.text:0000000000002E6C                 test    eax, eax
.text:0000000000002E6E                 jz      loc_2AEE
.text:0000000000002E74
.text:0000000000002E74 loc_2E74:                               ; CODE XREF: main+682↑j
.text:0000000000002E74                 mov     rdx, r14
.text:0000000000002E77                 mov     esi, 3
.text:0000000000002E7C                 xor     edi, edi
.text:0000000000002E7E                 call    quotearg_n_style_colon
.text:0000000000002E83                 lea     rsi, aSUnableToPerfo ; "%s: unable to perform all requested ope"...
.text:0000000000002E8A                 mov     rbx, rax
.text:0000000000002E8D                 mov     edx, 5          ; category
.text:0000000000002E92                 xor     edi, edi        ; domainname
.text:0000000000002E94                 call    _dcgettext
.text:0000000000002E99                 mov     rcx, rbx
.text:0000000000002E9C                 mov     rdx, rax        ; format
.text:0000000000002E9F                 xor     esi, esi        ; errnum
.text:0000000000002EA1                 mov     edi, 1          ; status
.text:0000000000002EA6                 xor     eax, eax
.text:0000000000002EA8                 call    _error
.text:0000000000002EAD
.text:0000000000002EAD loc_2EAD:                               ; CODE XREF: main+4EB↑j
.text:0000000000002EAD                 mov     rsi, [rbx]
.text:0000000000002EB0                 lea     rdi, aS         ; "-%s"
.text:0000000000002EB7                 xor     eax, eax
.text:0000000000002EB9                 xor     r12d, r12d
.text:0000000000002EBC                 call    wrapf
.text:0000000000002EC1                 jmp     loc_2CC1
.text:0000000000002EC6 ; ---------------------------------------------------------------------------
.text:0000000000002EC6
.text:0000000000002EC6 loc_2EC6:                               ; CODE XREF: main+4F9↑j
.text:0000000000002EC6                 test    r12b, r12b
.text:0000000000002EC9                 jnz     short loc_2EEB
.text:0000000000002ECB
.text:0000000000002ECB loc_2ECB:                               ; CODE XREF: main+877↓j
.text:0000000000002ECB                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002ED2                 mov     rax, [rdi+28h]
.text:0000000000002ED6                 cmp     rax, [rdi+30h]
.text:0000000000002EDA                 jnb     loc_3187
.text:0000000000002EE0                 lea     rdx, [rax+1]
.text:0000000000002EE4                 mov     [rdi+28h], rdx
.text:0000000000002EE8                 mov     byte ptr [rax], 0Ah
.text:0000000000002EEB
.text:0000000000002EEB loc_2EEB:                               ; CODE XREF: main+6F9↑j
.text:0000000000002EEB                                         ; main+9C1↓j
.text:0000000000002EEB                 mov     cs:current_col, 0
.text:0000000000002EF5                 jmp     loc_2AEE
.text:0000000000002EFA ; ---------------------------------------------------------------------------
.text:0000000000002EFA
.text:0000000000002EFA loc_2EFA:                               ; CODE XREF: main+468↑j
.text:0000000000002EFA                 movzx   edi, r14b
.text:0000000000002EFE                 call    visible_part_0
.text:0000000000002F03                 mov     rdx, rax
.text:0000000000002F06                 jmp     loc_2C3E
.text:0000000000002F0B ; ---------------------------------------------------------------------------
.text:0000000000002F0B
.text:0000000000002F0B loc_2F0B:                               ; CODE XREF: main+3BF↑j
.text:0000000000002F0B                 lea     rdi, mode_7192  ; termios_p
.text:0000000000002F12                 mov     esi, 1
.text:0000000000002F17                 call    display_speed
.text:0000000000002F1C                 mov     rsi, r14
.text:0000000000002F1F                 mov     edi, 1
.text:0000000000002F24                 call    display_window_size
.text:0000000000002F29                 movzx   esi, cs:mode_7192.c_line
.text:0000000000002F30                 lea     rdi, aLineD     ; "line = %d;"
.text:0000000000002F37                 xor     eax, eax
.text:0000000000002F39                 call    wrapf
.text:0000000000002F3E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002F45                 mov     rax, [rdi+28h]
.text:0000000000002F49                 cmp     rax, [rdi+30h]
.text:0000000000002F4D                 jnb     loc_3169
.text:0000000000002F53                 lea     rdx, [rax+1]
.text:0000000000002F57                 mov     [rdi+28h], rdx
.text:0000000000002F5B                 mov     byte ptr [rax], 0Ah
.text:0000000000002F5E
.text:0000000000002F5E loc_2F5E:                               ; CODE XREF: main+9A3↓j
.text:0000000000002F5E                 mov     cs:current_col, 0
.text:0000000000002F68                 lea     rbx, control_info
.text:0000000000002F6F                 lea     r12, aMin       ; "min"
.text:0000000000002F76                 lea     r13, s2         ; "flush"
.text:0000000000002F7D                 lea     r15, mode_7192
.text:0000000000002F84                 lea     r14, aUndef     ; "<undef>"
.text:0000000000002F8B                 jmp     short loc_2FCD
.text:0000000000002F8D ; ---------------------------------------------------------------------------
.text:0000000000002F8D
.text:0000000000002F8D loc_2F8D:                               ; CODE XREF: main+80D↓j
.text:0000000000002F8D                 mov     rsi, r13        ; s2
.text:0000000000002F90                 mov     rdi, rbp        ; s1
.text:0000000000002F93                 call    _strcmp
.text:0000000000002F98                 test    eax, eax
.text:0000000000002F9A                 jz      short loc_2FC9
.text:0000000000002F9C                 mov     rax, [rbx+10h]
.text:0000000000002FA0                 mov     rdx, r14
.text:0000000000002FA3                 movzx   ecx, byte ptr [r15+rax+11h]
.text:0000000000002FA9                 test    cl, cl
.text:0000000000002FAB                 jz      short loc_2FB8
.text:0000000000002FAD                 movzx   edi, cl
.text:0000000000002FB0                 call    visible_part_0
.text:0000000000002FB5                 mov     rdx, rax
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: main+7DB↑j
.text:0000000000002FB8                 lea     rdi, aSS        ; "%s = %s;"
.text:0000000000002FBF                 mov     rsi, rbp
.text:0000000000002FC2                 xor     eax, eax
.text:0000000000002FC4                 call    wrapf
.text:0000000000002FC9
.text:0000000000002FC9 loc_2FC9:                               ; CODE XREF: main+7CA↑j
.text:0000000000002FC9                 add     rbx, 18h
.text:0000000000002FCD
.text:0000000000002FCD loc_2FCD:                               ; CODE XREF: main+7BB↑j
.text:0000000000002FCD                 mov     rbp, [rbx]
.text:0000000000002FD0                 mov     rsi, r12        ; s2
.text:0000000000002FD3                 mov     rdi, rbp        ; s1
.text:0000000000002FD6                 call    _strcmp
.text:0000000000002FDB                 test    eax, eax
.text:0000000000002FDD                 jnz     short loc_2F8D
.text:0000000000002FDF                 movzx   edx, cs:mode_7192.c_cc+5
.text:0000000000002FE6                 movzx   esi, cs:mode_7192.c_cc+6
.text:0000000000002FED                 lea     rdi, aMinLuTimeLu ; "min = %lu; time = %lu;"
.text:0000000000002FF4                 call    wrapf
.text:0000000000002FF9                 cmp     cs:current_col, 0
.text:0000000000003000                 jz      short loc_3022
.text:0000000000003002                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003009                 mov     rax, [rdi+28h]
.text:000000000000300D                 cmp     rax, [rdi+30h]
.text:0000000000003011                 jnb     loc_3219
.text:0000000000003017                 lea     rdx, [rax+1]
.text:000000000000301B                 mov     [rdi+28h], rdx
.text:000000000000301F                 mov     byte ptr [rax], 0Ah
.text:0000000000003022
.text:0000000000003022 loc_3022:                               ; CODE XREF: main+830↑j
.text:0000000000003022                                         ; main+A53↓j
.text:0000000000003022                 mov     cs:current_col, 0
.text:000000000000302C                 lea     rbx, mode_info
.text:0000000000003033                 xor     r12d, r12d
.text:0000000000003036                 lea     r13, mode_7192
.text:000000000000303D                 jmp     short loc_3043
.text:000000000000303F ; ---------------------------------------------------------------------------
.text:000000000000303F
.text:000000000000303F loc_303F:                               ; CODE XREF: main+881↓j
.text:000000000000303F                                         ; main+8E7↓j ...
.text:000000000000303F                 add     rbx, 20h ; ' '
.text:0000000000003043
.text:0000000000003043 loc_3043:                               ; CODE XREF: main+86D↑j
.text:0000000000003043                 cmp     qword ptr [rbx], 0
.text:0000000000003047                 jz      loc_2ECB
.text:000000000000304D                 test    byte ptr [rbx+0Ch], 8
.text:0000000000003051                 jnz     short loc_303F
.text:0000000000003053                 mov     ebp, [rbx+8]
.text:0000000000003056                 cmp     ebp, r12d
.text:0000000000003059                 jz      short loc_308B
.text:000000000000305B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003062                 mov     rax, [rdi+28h]
.text:0000000000003066                 cmp     rax, [rdi+30h]
.text:000000000000306A                 jnb     loc_312C
.text:0000000000003070                 lea     rdx, [rax+1]
.text:0000000000003074                 mov     [rdi+28h], rdx
.text:0000000000003078                 mov     byte ptr [rax], 0Ah
.text:000000000000307B
.text:000000000000307B loc_307B:                               ; CODE XREF: main+966↓j
.text:000000000000307B                 mov     r12d, ebp
.text:000000000000307E                 mov     ebp, [rbx+8]
.text:0000000000003081                 mov     cs:current_col, 0
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: main+889↑j
.text:000000000000308B                 mov     rsi, r13
.text:000000000000308E                 mov     edi, ebp
.text:0000000000003090                 call    mode_type_flag
.text:0000000000003095                 mov     rdx, [rbx+18h]
.text:0000000000003099                 test    rdx, rdx
.text:000000000000309C                 jnz     short loc_30A2
.text:000000000000309E                 mov     rdx, [rbx+10h]
.text:00000000000030A2
.text:00000000000030A2 loc_30A2:                               ; CODE XREF: main+8CC↑j
.text:00000000000030A2                 test    rax, rax
.text:00000000000030A5                 jz      loc_3295
.text:00000000000030AB                 and     edx, [rax]
.text:00000000000030AD                 cmp     rdx, [rbx+10h]
.text:00000000000030B1                 jz      short loc_30CF
.text:00000000000030B3                 test    byte ptr [rbx+0Ch], 4
.text:00000000000030B7                 jz      short loc_303F
.text:00000000000030B9                 mov     rsi, [rbx]
.text:00000000000030BC                 lea     rdi, aS         ; "-%s"
.text:00000000000030C3                 xor     eax, eax
.text:00000000000030C5                 call    wrapf
.text:00000000000030CA                 jmp     loc_303F
.text:00000000000030CF ; ---------------------------------------------------------------------------
.text:00000000000030CF
.text:00000000000030CF loc_30CF:                               ; CODE XREF: main+8E1↑j
.text:00000000000030CF                 mov     rsi, [rbx]
.text:00000000000030D2                 lea     rdi, format
.text:00000000000030D9                 xor     eax, eax
.text:00000000000030DB                 call    wrapf
.text:00000000000030E0                 jmp     loc_303F
.text:00000000000030E5 ; ---------------------------------------------------------------------------
.text:00000000000030E5
.text:00000000000030E5 loc_30E5:                               ; CODE XREF: main+235↑j
.text:00000000000030E5                 lea     rsi, msgid      ; "standard input"
.text:00000000000030EC                 mov     edx, 5          ; category
.text:00000000000030F1                 xor     edi, edi        ; domainname
.text:00000000000030F3                 call    _dcgettext
.text:00000000000030F8                 sub     rsp, 8
.text:00000000000030FC                 mov     r14, rax
.text:00000000000030FF                 lea     r8, check_mode_7223
.text:0000000000003106                 lea     rax, [rsp+60h+var_42]
.text:000000000000310B                 mov     edi, 1
.text:0000000000003110                 mov     ecx, r13d
.text:0000000000003113                 mov     rdx, rbx
.text:0000000000003116                 mov     rsi, r14
.text:0000000000003119                 push    rax
.text:000000000000311A                 lea     r9, [rsp+68h+var_41]
.text:000000000000311F                 call    apply_settings
.text:0000000000003124                 pop     rdi
.text:0000000000003125                 pop     r8
.text:0000000000003127                 jmp     loc_2A81
.text:000000000000312C ; ---------------------------------------------------------------------------
.text:000000000000312C
.text:000000000000312C loc_312C:                               ; CODE XREF: main+89A↑j
.text:000000000000312C                 mov     esi, 0Ah        ; int
.text:0000000000003131                 call    ___overflow
.text:0000000000003136                 jmp     loc_307B
.text:000000000000313B ; ---------------------------------------------------------------------------
.text:000000000000313B
.text:000000000000313B loc_313B:                               ; CODE XREF: main+49F↑j
.text:000000000000313B                 movzx   edx, cs:mode_7192.c_cc+5
.text:0000000000003142                 movzx   esi, cs:mode_7192.c_cc+6
.text:0000000000003149                 lea     rdi, aMinLuTimeLu_0 ; "min = %lu; time = %lu;\n"
.text:0000000000003150                 call    wrapf
.text:0000000000003155                 jmp     loc_2C9A
.text:000000000000315A ; ---------------------------------------------------------------------------
.text:000000000000315A
.text:000000000000315A loc_315A:                               ; CODE XREF: main+520↑j
.text:000000000000315A                 mov     esi, 0Ah        ; int
.text:000000000000315F                 call    ___overflow
.text:0000000000003164                 jmp     loc_2D01
.text:0000000000003169 ; ---------------------------------------------------------------------------
.text:0000000000003169
.text:0000000000003169 loc_3169:                               ; CODE XREF: main+77D↑j
.text:0000000000003169                 mov     esi, 0Ah        ; int
.text:000000000000316E                 call    ___overflow
.text:0000000000003173                 jmp     loc_2F5E
.text:0000000000003178 ; ---------------------------------------------------------------------------
.text:0000000000003178
.text:0000000000003178 loc_3178:                               ; CODE XREF: main+604↑j
.text:0000000000003178                 mov     esi, 0Ah        ; int
.text:000000000000317D                 call    ___overflow
.text:0000000000003182                 jmp     loc_2AEE
.text:0000000000003187 ; ---------------------------------------------------------------------------
.text:0000000000003187
.text:0000000000003187 loc_3187:                               ; CODE XREF: main+70A↑j
.text:0000000000003187                 mov     esi, 0Ah        ; int
.text:000000000000318C                 call    ___overflow
.text:0000000000003191                 jmp     loc_2EEB
.text:0000000000003196 ; ---------------------------------------------------------------------------
.text:0000000000003196
.text:0000000000003196 loc_3196:                               ; CODE XREF: main+403↑j
.text:0000000000003196                 mov     esi, 0Ah        ; int
.text:000000000000319B                 call    ___overflow
.text:00000000000031A0                 jmp     loc_2BE4
.text:00000000000031A5 ; ---------------------------------------------------------------------------
.text:00000000000031A5
.text:00000000000031A5 loc_31A5:                               ; CODE XREF: main+562↑j
.text:00000000000031A5                 lea     rcx, __PRETTY_FUNCTION___7318 ; "display_changed"
.text:00000000000031AC                 lea     rsi, file       ; "../coreutils-8.31/src/stty.c"
.text:00000000000031B3                 lea     rdi, assertion  ; "bitsp"
.text:00000000000031BA                 mov     edx, 7A2h       ; line
.text:00000000000031BF                 call    ___assert_fail
.text:00000000000031C4 ; ---------------------------------------------------------------------------
.text:00000000000031C4
.text:00000000000031C4 loc_31C4:                               ; CODE XREF: main+32E↑j
.text:00000000000031C4                 call    ___stack_chk_fail
.text:00000000000031C9 ; ---------------------------------------------------------------------------
.text:00000000000031C9
.text:00000000000031C9 loc_31C9:                               ; CODE XREF: main+20B↑j
.text:00000000000031C9                 lea     rsi, aTheOptionsForV ; "the options for verbose and stty-readab"...
.text:00000000000031D0                 mov     edx, 5          ; category
.text:00000000000031D5                 xor     edi, edi        ; domainname
.text:00000000000031D7                 call    _dcgettext
.text:00000000000031DC                 xor     esi, esi        ; errnum
.text:00000000000031DE                 mov     rdx, rax        ; format
.text:00000000000031E1                 mov     edi, 1          ; status
.text:00000000000031E6                 xor     eax, eax
.text:00000000000031E8                 call    _error
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: main+173↑j
.text:00000000000031ED                 lea     rsi, aOnlyOneDeviceM ; "only one device may be specified"
.text:00000000000031F4                 mov     edx, 5          ; category
.text:00000000000031F9                 xor     edi, edi        ; domainname
.text:00000000000031FB                 call    _dcgettext
.text:0000000000003200                 xor     esi, esi        ; errnum
.text:0000000000003202                 mov     rdx, rax        ; format
.text:0000000000003205                 mov     edi, 1          ; status
.text:000000000000320A                 xor     eax, eax
.text:000000000000320C                 call    _error
.text:0000000000003211
.text:0000000000003211 loc_3211:                               ; CODE XREF: main+F3↑j
.text:0000000000003211                 mov     esi, r15d
.text:0000000000003214                 jmp     loc_28F8
.text:0000000000003219 ; ---------------------------------------------------------------------------
.text:0000000000003219
.text:0000000000003219 loc_3219:                               ; CODE XREF: main+841↑j
.text:0000000000003219                 mov     esi, 0Ah        ; int
.text:000000000000321E                 call    ___overflow
.text:0000000000003223                 jmp     loc_3022
.text:0000000000003228 ; ---------------------------------------------------------------------------
.text:0000000000003228
.text:0000000000003228 loc_3228:                               ; CODE XREF: main+4B9↑j
.text:0000000000003228                 mov     esi, 0Ah        ; int
.text:000000000000322D                 call    ___overflow
.text:0000000000003232                 jmp     loc_2C9A
.text:0000000000003237 ; ---------------------------------------------------------------------------
.text:0000000000003237
.text:0000000000003237 loc_3237:                               ; CODE XREF: main+64D↑j
.text:0000000000003237                 mov     rdx, r14
.text:000000000000323A                 mov     esi, 3
.text:000000000000323F                 xor     edi, edi
.text:0000000000003241                 call    quotearg_n_style_colon
.text:0000000000003246                 mov     rbx, rax
.text:0000000000003249                 call    ___errno_location
.text:000000000000324E                 mov     esi, [rax]      ; errnum
.text:0000000000003250                 lea     rdx, format     ; format
.text:0000000000003257                 mov     rcx, rbx
.text:000000000000325A                 mov     edi, 1          ; status
.text:000000000000325F                 xor     eax, eax
.text:0000000000003261                 call    _error
.text:0000000000003266
.text:0000000000003266 loc_3266:                               ; CODE XREF: main+637↑j
.text:0000000000003266                 mov     rdx, r14
.text:0000000000003269                 mov     esi, 3
.text:000000000000326E                 xor     edi, edi
.text:0000000000003270                 call    quotearg_n_style_colon
.text:0000000000003275                 mov     rbx, rax
.text:0000000000003278                 call    ___errno_location
.text:000000000000327D                 mov     esi, [rax]      ; errnum
.text:000000000000327F                 lea     rdx, format     ; format
.text:0000000000003286                 mov     rcx, rbx
.text:0000000000003289                 mov     edi, 1          ; status
.text:000000000000328E                 xor     eax, eax
.text:0000000000003290                 call    _error
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: main+8D5↑j
.text:0000000000003295                 lea     rcx, __PRETTY_FUNCTION___7335 ; "display_all"
.text:000000000000329C                 lea     rsi, file       ; "../coreutils-8.31/src/stty.c"
.text:00000000000032A3                 lea     rdi, assertion  ; "bitsp"
.text:00000000000032AA                 mov     edx, 7F6h       ; line
.text:00000000000032AF                 call    ___assert_fail
.text:00000000000032B4 ; ---------------------------------------------------------------------------
.text:00000000000032B4
.text:00000000000032B4 loc_32B4:                               ; CODE XREF: main+221↑j
.text:00000000000032B4                                         ; main+22C↑j
.text:00000000000032B4                 lea     rsi, aWhenSpecifying ; "when specifying an output style, modes "...
.text:00000000000032BB                 mov     edx, 5          ; category
.text:00000000000032C0                 xor     edi, edi        ; domainname
.text:00000000000032C2                 call    _dcgettext
.text:00000000000032C7                 xor     esi, esi        ; errnum
.text:00000000000032C9                 mov     rdx, rax        ; format
.text:00000000000032CC                 mov     edi, 1          ; status
.text:00000000000032D1                 xor     eax, eax
.text:00000000000032D3                 call    _error
.text:00000000000032D8
.text:00000000000032D8 loc_32D8:                               ; CODE XREF: main+290↑j
.text:00000000000032D8                                         ; main+2AB↑j
.text:00000000000032D8                 mov     rdx, r14
.text:00000000000032DB                 mov     esi, 3
.text:00000000000032E0                 xor     edi, edi
.text:00000000000032E2                 call    quotearg_n_style_colon
.text:00000000000032E7                 lea     rsi, aSCouldnTResetN ; "%s: couldn't reset non-blocking mode"
.text:00000000000032EE                 mov     edx, 5          ; category
.text:00000000000032F3                 xor     edi, edi        ; domainname
.text:00000000000032F5                 mov     rbp, rax
.text:00000000000032F8                 call    _dcgettext
.text:00000000000032FD                 mov     rbx, rax
.text:0000000000003300                 call    ___errno_location
.text:0000000000003305                 mov     esi, [rax]      ; errnum
.text:0000000000003307                 mov     rcx, rbp
.text:000000000000330A                 mov     rdx, rbx        ; format
.text:000000000000330D                 mov     edi, 1          ; status
.text:0000000000003312                 xor     eax, eax
.text:0000000000003314                 call    _error
.text:0000000000003319
.text:0000000000003319 loc_3319:                               ; CODE XREF: main+279↑j
.text:0000000000003319                 mov     rdx, r14
.text:000000000000331C                 mov     esi, 3
.text:0000000000003321                 xor     edi, edi
.text:0000000000003323                 call    quotearg_n_style_colon
.text:0000000000003328                 mov     rbx, rax
.text:000000000000332B                 call    ___errno_location
.text:0000000000003330                 mov     esi, [rax]      ; errnum
.text:0000000000003332                 lea     rdx, format     ; format
.text:0000000000003339                 mov     rcx, rbx
.text:000000000000333C                 mov     edi, 1          ; status
.text:0000000000003341                 xor     eax, eax
.text:0000000000003343                 call    _error
.text:0000000000003343 ; } // starts at 27D0
.text:0000000000003348                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003348 main            endp ; sp-analysis failed
.text:0000000000003348
.text:0000000000003350
.text:0000000000003350 ; =============== S U B R O U T I N E =======================================
.text:0000000000003350
.text:0000000000003350 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003350
.text:0000000000003350 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003350                 public start
.text:0000000000003350 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003350 ; __unwind {
.text:0000000000003350                 xor     ebp, ebp
.text:0000000000003352                 mov     r9, rdx         ; rtld_fini
.text:0000000000003355                 pop     rsi             ; argc
.text:0000000000003356                 mov     rdx, rsp        ; ubp_av
.text:0000000000003359                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000335D                 push    rax
.text:000000000000335E                 push    rsp             ; stack_end
.text:000000000000335F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003366                 lea     rcx, __libc_csu_init ; init
.text:000000000000336D                 lea     rdi, main       ; main
.text:0000000000003374                 call    cs:__libc_start_main_ptr
.text:000000000000337A                 hlt
.text:000000000000337A ; } // starts at 3350
.text:000000000000337A start           endp
.text:000000000000337A
.text:000000000000337A ; ---------------------------------------------------------------------------
.text:000000000000337B                 align 20h
.text:0000000000003380
.text:0000000000003380 ; =============== S U B R O U T I N E =======================================
.text:0000000000003380
.text:0000000000003380 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003380
.text:0000000000003380 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3433↓p
.text:0000000000003380                 lea     rdi, __bss_start
.text:0000000000003387                 push    rbp
.text:0000000000003388                 lea     rax, __bss_start
.text:000000000000338F                 cmp     rax, rdi
.text:0000000000003392                 mov     rbp, rsp
.text:0000000000003395                 jz      short loc_33B0
.text:0000000000003397                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000339E                 test    rax, rax
.text:00000000000033A1                 jz      short loc_33B0
.text:00000000000033A3                 pop     rbp
.text:00000000000033A4                 jmp     rax
.text:00000000000033A4 ; ---------------------------------------------------------------------------
.text:00000000000033A6                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000033B0                                         ; deregister_tm_clones+21↑j
.text:00000000000033B0                 pop     rbp
.text:00000000000033B1                 retn
.text:00000000000033B1 deregister_tm_clones endp
.text:00000000000033B1
.text:00000000000033B1 ; ---------------------------------------------------------------------------
.text:00000000000033B2                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000033C0
.text:00000000000033C0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000033C0                 lea     rdi, __bss_start
.text:00000000000033C7                 lea     rsi, __bss_start
.text:00000000000033CE                 push    rbp
.text:00000000000033CF                 sub     rsi, rdi
.text:00000000000033D2                 mov     rbp, rsp
.text:00000000000033D5                 sar     rsi, 3
.text:00000000000033D9                 mov     rax, rsi
.text:00000000000033DC                 shr     rax, 3Fh
.text:00000000000033E0                 add     rsi, rax
.text:00000000000033E3                 sar     rsi, 1
.text:00000000000033E6                 jz      short loc_3400
.text:00000000000033E8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000033EF                 test    rax, rax
.text:00000000000033F2                 jz      short loc_3400
.text:00000000000033F4                 pop     rbp
.text:00000000000033F5                 jmp     rax
.text:00000000000033F5 ; ---------------------------------------------------------------------------
.text:00000000000033F7                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003400                                         ; register_tm_clones+32↑j
.text:0000000000003400                 pop     rbp
.text:0000000000003401                 retn
.text:0000000000003401 register_tm_clones endp
.text:0000000000003401
.text:0000000000003401 ; ---------------------------------------------------------------------------
.text:0000000000003402                 align 10h
.text:0000000000003410
.text:0000000000003410 ; =============== S U B R O U T I N E =======================================
.text:0000000000003410
.text:0000000000003410 ; Attributes: info_from_lumina
.text:0000000000003410
.text:0000000000003410 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003410                 cmp     cs:completed_7697, 0
.text:0000000000003417                 jnz     short locret_3448
.text:0000000000003419                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003421                 push    rbp
.text:0000000000003422                 mov     rbp, rsp
.text:0000000000003425                 jz      short loc_3433
.text:0000000000003427                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000342E                 call    __cxa_finalize
.text:0000000000003433
.text:0000000000003433 loc_3433:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003433                 call    deregister_tm_clones
.text:0000000000003438                 mov     cs:completed_7697, 1
.text:000000000000343F                 pop     rbp
.text:0000000000003440                 retn
.text:0000000000003440 ; ---------------------------------------------------------------------------
.text:0000000000003441                 align 8
.text:0000000000003448
.text:0000000000003448 locret_3448:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003448                 rep retn
.text:0000000000003448 __do_global_dtors_aux endp
.text:0000000000003448
.text:0000000000003448 ; ---------------------------------------------------------------------------
.text:000000000000344A                 align 10h
.text:0000000000003450
.text:0000000000003450 ; =============== S U B R O U T I N E =======================================
.text:0000000000003450
.text:0000000000003450 ; Attributes: bp-based frame
.text:0000000000003450
.text:0000000000003450 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003450                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003450                 push    rbp
.text:0000000000003451                 mov     rbp, rsp
.text:0000000000003454                 pop     rbp
.text:0000000000003455                 jmp     register_tm_clones
.text:0000000000003455 frame_dummy     endp
.text:0000000000003455
.text:0000000000003455 ; ---------------------------------------------------------------------------
.text:000000000000345A                 align 20h
.text:0000000000003460
.text:0000000000003460 ; =============== S U B R O U T I N E =======================================
.text:0000000000003460
.text:0000000000003460
.text:0000000000003460 ; __int64 __fastcall string_to_baud(char *s1)
.text:0000000000003460 string_to_baud  proc near               ; CODE XREF: apply_settings+172↓p
.text:0000000000003460                                         ; apply_settings+363↓p ...
.text:0000000000003460 ; __unwind {
.text:0000000000003460                 push    r12
.text:0000000000003462                 lea     rsi, a1000000+6 ; "0"
.text:0000000000003469                 push    rbp
.text:000000000000346A                 mov     r12, rdi
.text:000000000000346D                 push    rbx
.text:000000000000346E                 xor     ebp, ebp
.text:0000000000003470                 lea     rbx, off_20FA78 ; "50"
.text:0000000000003477                 jmp     short loc_3490
.text:0000000000003477 ; ---------------------------------------------------------------------------
.text:0000000000003479                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: string_to_baud+3A↓j
.text:0000000000003480                 add     rbx, 18h
.text:0000000000003484                 mov     rsi, [rbx-18h]  ; s2
.text:0000000000003488                 add     ebp, 1
.text:000000000000348B                 test    rsi, rsi
.text:000000000000348E                 jz      short loc_34B8
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: string_to_baud+17↑j
.text:0000000000003490                 mov     rdi, r12        ; s1
.text:0000000000003493                 call    _strcmp
.text:0000000000003498                 test    eax, eax
.text:000000000000349A                 jnz     short loc_3480
.text:000000000000349C                 movsxd  rbp, ebp
.text:000000000000349F                 lea     rax, speeds
.text:00000000000034A6                 lea     rdx, [rbp+rbp*2+0]
.text:00000000000034AB                 pop     rbx
.text:00000000000034AC                 mov     eax, [rax+rdx*8+8]
.text:00000000000034B0                 pop     rbp
.text:00000000000034B1                 pop     r12
.text:00000000000034B3                 retn
.text:00000000000034B3 ; ---------------------------------------------------------------------------
.text:00000000000034B4                 align 8
.text:00000000000034B8
.text:00000000000034B8 loc_34B8:                               ; CODE XREF: string_to_baud+2E↑j
.text:00000000000034B8                 pop     rbx
.text:00000000000034B9                 mov     eax, 0FFFFFFFFh
.text:00000000000034BE                 pop     rbp
.text:00000000000034BF                 pop     r12
.text:00000000000034C1                 retn
.text:00000000000034C1 ; } // starts at 3460
.text:00000000000034C1 string_to_baud  endp
.text:00000000000034C1
.text:00000000000034C1 ; ---------------------------------------------------------------------------
.text:00000000000034C2                 align 10h
.text:00000000000034D0
.text:00000000000034D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034D0
.text:00000000000034D0
.text:00000000000034D0 mode_type_flag  proc near               ; CODE XREF: main+54D↑p
.text:00000000000034D0                                         ; main+8C0↑p ...
.text:00000000000034D0 ; __unwind {
.text:00000000000034D0                 cmp     edi, 4          ; switch 5 cases
.text:00000000000034D3                 ja      short def_34E5  ; jumptable 00000000000034E5 default case
.text:00000000000034D5                 lea     rax, jpt_34E5
.text:00000000000034DC                 mov     edi, edi
.text:00000000000034DE                 movsxd  rdx, ds:(jpt_34E5 - 0B8F0h)[rax+rdi*4]
.text:00000000000034E2                 add     rdx, rax
.text:00000000000034E5                 jmp     rdx             ; switch jump
.text:00000000000034E5 ; ---------------------------------------------------------------------------
.text:00000000000034E7                 align 10h
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: mode_type_flag+15↑j
.text:00000000000034F0                                         ; DATA XREF: .rodata:jpt_34E5↓o
.text:00000000000034F0                 lea     rax, [rsi+0Ch]  ; jumptable 00000000000034E5 case 3
.text:00000000000034F4                 retn
.text:00000000000034F4 ; ---------------------------------------------------------------------------
.text:00000000000034F5                 align 8
.text:00000000000034F8
.text:00000000000034F8 loc_34F8:                               ; CODE XREF: mode_type_flag+15↑j
.text:00000000000034F8                                         ; DATA XREF: .rodata:jpt_34E5↓o
.text:00000000000034F8                 lea     rax, [rsi+4]    ; jumptable 00000000000034E5 case 2
.text:00000000000034FC                 retn
.text:00000000000034FC ; ---------------------------------------------------------------------------
.text:00000000000034FD                 align 20h
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: mode_type_flag+15↑j
.text:0000000000003500                                         ; DATA XREF: .rodata:jpt_34E5↓o
.text:0000000000003500                 mov     rax, rsi        ; jumptable 00000000000034E5 case 1
.text:0000000000003503                 retn
.text:0000000000003503 ; ---------------------------------------------------------------------------
.text:0000000000003504                 align 8
.text:0000000000003508
.text:0000000000003508 loc_3508:                               ; CODE XREF: mode_type_flag+15↑j
.text:0000000000003508                                         ; DATA XREF: .rodata:jpt_34E5↓o
.text:0000000000003508                 lea     rax, [rsi+8]    ; jumptable 00000000000034E5 case 0
.text:000000000000350C                 retn
.text:000000000000350C ; ---------------------------------------------------------------------------
.text:000000000000350D                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: mode_type_flag+15↑j
.text:0000000000003510                                         ; DATA XREF: .rodata:jpt_34E5↓o
.text:0000000000003510                 xor     eax, eax        ; jumptable 00000000000034E5 case 4
.text:0000000000003512                 retn
.text:0000000000003513 ; ---------------------------------------------------------------------------
.text:0000000000003513
.text:0000000000003513 def_34E5:                               ; CODE XREF: mode_type_flag+3↑j
.text:0000000000003513                 sub     rsp, 8          ; jumptable 00000000000034E5 default case
.text:0000000000003517                 call    _abort
.text:0000000000003517 ; } // starts at 34D0
.text:0000000000003517 mode_type_flag  endp
.text:0000000000003517
.text:0000000000003517 ; ---------------------------------------------------------------------------
.text:000000000000351C                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520
.text:0000000000003520 wrapf           proc near               ; CODE XREF: main+3EF↑p
.text:0000000000003520                                         ; main+47D↑p ...
.text:0000000000003520
.text:0000000000003520 s               = qword ptr -0E0h
.text:0000000000003520 var_D8          = dword ptr -0D8h
.text:0000000000003520 var_D4          = dword ptr -0D4h
.text:0000000000003520 var_D0          = qword ptr -0D0h
.text:0000000000003520 var_C8          = qword ptr -0C8h
.text:0000000000003520 var_C0          = qword ptr -0C0h
.text:0000000000003520 var_B8          = byte ptr -0B8h
.text:0000000000003520 var_B0          = qword ptr -0B0h
.text:0000000000003520 var_A8          = qword ptr -0A8h
.text:0000000000003520 var_A0          = qword ptr -0A0h
.text:0000000000003520 var_98          = qword ptr -98h
.text:0000000000003520 var_90          = qword ptr -90h
.text:0000000000003520 var_88          = xmmword ptr -88h
.text:0000000000003520 var_78          = xmmword ptr -78h
.text:0000000000003520 var_68          = xmmword ptr -68h
.text:0000000000003520 var_58          = xmmword ptr -58h
.text:0000000000003520 var_48          = xmmword ptr -48h
.text:0000000000003520 var_38          = xmmword ptr -38h
.text:0000000000003520 var_28          = xmmword ptr -28h
.text:0000000000003520 var_18          = xmmword ptr -18h
.text:0000000000003520 arg_0           = byte ptr  8
.text:0000000000003520
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 push    rbx
.text:0000000000003521                 mov     r10, rdi
.text:0000000000003524                 sub     rsp, 0E0h
.text:000000000000352B                 test    al, al
.text:000000000000352D                 mov     [rsp+0E8h+var_B0], rsi
.text:0000000000003532                 mov     [rsp+0E8h+var_A8], rdx
.text:0000000000003537                 mov     [rsp+0E8h+var_A0], rcx
.text:000000000000353C                 mov     [rsp+0E8h+var_98], r8
.text:0000000000003541                 mov     [rsp+0E8h+var_90], r9
.text:0000000000003546                 jz      short loc_3582
.text:0000000000003548                 movaps  [rsp+0E8h+var_88], xmm0
.text:000000000000354D                 movaps  [rsp+0E8h+var_78], xmm1
.text:0000000000003552                 movaps  [rsp+0E8h+var_68], xmm2
.text:000000000000355A                 movaps  [rsp+0E8h+var_58], xmm3
.text:0000000000003562                 movaps  [rsp+0E8h+var_48], xmm4
.text:000000000000356A                 movaps  [rsp+0E8h+var_38], xmm5
.text:0000000000003572                 movaps  [rsp+0E8h+var_28], xmm6
.text:000000000000357A                 movaps  [rsp+0E8h+var_18], xmm7
.text:0000000000003582
.text:0000000000003582 loc_3582:                               ; CODE XREF: wrapf+26↑j
.text:0000000000003582                 mov     rax, fs:28h
.text:000000000000358B                 mov     [rsp+0E8h+var_C0], rax
.text:0000000000003590                 xor     eax, eax
.text:0000000000003592                 lea     rax, [rsp+0E8h+arg_0]
.text:000000000000359A                 lea     rdx, [rsp+0E8h+var_D8]
.text:000000000000359F                 lea     rdi, [rsp+0E8h+s]
.text:00000000000035A4                 mov     rsi, r10
.text:00000000000035A7                 mov     [rsp+0E8h+var_D0], rax
.text:00000000000035AC                 lea     rax, [rsp+0E8h+var_B8]
.text:00000000000035B1                 mov     [rsp+0E8h+var_D8], 8
.text:00000000000035B9                 mov     [rsp+0E8h+var_D4], 30h ; '0'
.text:00000000000035C1                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000035C6                 call    u16_u16_vasprintf
.text:00000000000035CB                 test    eax, eax
.text:00000000000035CD                 mov     ebx, eax
.text:00000000000035CF                 js      loc_36A7
.text:00000000000035D5                 mov     eax, cs:current_col
.text:00000000000035DB                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000035E2                 test    eax, eax
.text:00000000000035E4                 jle     short loc_361F
.text:00000000000035E6                 mov     edx, cs:max_col
.text:00000000000035EC                 mov     rcx, [rdi+28h]
.text:00000000000035F0                 mov     rsi, [rdi+30h]
.text:00000000000035F4                 sub     edx, eax
.text:00000000000035F6                 cmp     edx, ebx
.text:00000000000035F8                 jge     short loc_3658
.text:00000000000035FA                 cmp     rcx, rsi
.text:00000000000035FD                 jnb     loc_3698
.text:0000000000003603                 lea     rax, [rcx+1]
.text:0000000000003607                 mov     [rdi+28h], rax
.text:000000000000360B                 mov     byte ptr [rcx], 0Ah
.text:000000000000360E
.text:000000000000360E loc_360E:                               ; CODE XREF: wrapf+182↓j
.text:000000000000360E                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003615                 mov     cs:current_col, 0
.text:000000000000361F
.text:000000000000361F loc_361F:                               ; CODE XREF: wrapf+C4↑j
.text:000000000000361F                                         ; wrapf+158↓j
.text:000000000000361F                 mov     rsi, rdi        ; stream
.text:0000000000003622                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003627                 call    _fputs_unlocked
.text:000000000000362C                 mov     rdi, [rsp+0E8h+s] ; ptr
.text:0000000000003631                 call    _free
.text:0000000000003636                 add     cs:current_col, ebx
.text:000000000000363C                 mov     rax, [rsp+0E8h+var_C0]
.text:0000000000003641                 xor     rax, fs:28h
.text:000000000000364A                 jnz     short loc_36AC
.text:000000000000364C                 add     rsp, 0E0h
.text:0000000000003653                 pop     rbx
.text:0000000000003654                 retn
.text:0000000000003654 ; ---------------------------------------------------------------------------
.text:0000000000003655                 align 8
.text:0000000000003658
.text:0000000000003658 loc_3658:                               ; CODE XREF: wrapf+D8↑j
.text:0000000000003658                 cmp     rcx, rsi
.text:000000000000365B                 jnb     short loc_3680
.text:000000000000365D                 lea     rdx, [rcx+1]
.text:0000000000003661                 mov     [rdi+28h], rdx
.text:0000000000003665                 mov     byte ptr [rcx], 20h ; ' '
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: wrapf+170↓j
.text:0000000000003668                 add     eax, 1
.text:000000000000366B                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003672                 mov     cs:current_col, eax
.text:0000000000003678                 jmp     short loc_361F
.text:0000000000003678 ; ---------------------------------------------------------------------------
.text:000000000000367A                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: wrapf+13B↑j
.text:0000000000003680                 mov     esi, 20h ; ' '  ; int
.text:0000000000003685                 call    ___overflow
.text:000000000000368A                 mov     eax, cs:current_col
.text:0000000000003690                 jmp     short loc_3668
.text:0000000000003690 ; ---------------------------------------------------------------------------
.text:0000000000003692                 align 8
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: wrapf+DD↑j
.text:0000000000003698                 mov     esi, 0Ah        ; int
.text:000000000000369D                 call    ___overflow
.text:00000000000036A2                 jmp     loc_360E
.text:00000000000036A7 ; ---------------------------------------------------------------------------
.text:00000000000036A7
.text:00000000000036A7 loc_36A7:                               ; CODE XREF: wrapf+AF↑j
.text:00000000000036A7                 call    xalloc_die
.text:00000000000036AC ; ---------------------------------------------------------------------------
.text:00000000000036AC
.text:00000000000036AC loc_36AC:                               ; CODE XREF: wrapf+12A↑j
.text:00000000000036AC                 call    ___stack_chk_fail
.text:00000000000036AC ; } // starts at 3520
.text:00000000000036AC wrapf           endp
.text:00000000000036AC
.text:00000000000036AC ; ---------------------------------------------------------------------------
.text:00000000000036B1                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0
.text:00000000000036C0 ; __int64 __fastcall display_speed(struct termios *termios_p)
.text:00000000000036C0 display_speed   proc near               ; CODE XREF: main+3DA↑p
.text:00000000000036C0                                         ; main+747↑p ...
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 push    r12
.text:00000000000036C2                 push    rbp
.text:00000000000036C3                 mov     rbp, rdi
.text:00000000000036C6                 push    rbx
.text:00000000000036C7                 mov     ebx, esi
.text:00000000000036C9                 call    _cfgetispeed
.text:00000000000036CE                 test    eax, eax
.text:00000000000036D0                 jz      short loc_36EA
.text:00000000000036D2                 mov     rdi, rbp        ; termios_p
.text:00000000000036D5                 call    _cfgetispeed
.text:00000000000036DA                 mov     rdi, rbp        ; termios_p
.text:00000000000036DD                 mov     r12d, eax
.text:00000000000036E0                 call    _cfgetospeed
.text:00000000000036E5                 cmp     r12d, eax
.text:00000000000036E8                 jnz     short loc_3760
.text:00000000000036EA
.text:00000000000036EA loc_36EA:                               ; CODE XREF: display_speed+10↑j
.text:00000000000036EA                 mov     rdi, rbp        ; termios_p
.text:00000000000036ED                 call    _cfgetospeed
.text:00000000000036F2                 test    eax, eax
.text:00000000000036F4                 jz      loc_3850
.text:00000000000036FA                 lea     rdx, unk_20FA80
.text:0000000000003701                 lea     rsi, a150+1     ; "50"
.text:0000000000003708                 xor     ecx, ecx
.text:000000000000370A                 jmp     short loc_3721
.text:000000000000370A ; ---------------------------------------------------------------------------
.text:000000000000370C                 align 10h
.text:0000000000003710
.text:0000000000003710 loc_3710:                               ; CODE XREF: display_speed+67↓j
.text:0000000000003710                 add     rdx, 18h
.text:0000000000003714                 cmp     eax, [rdx-18h]
.text:0000000000003717                 jz      loc_3800
.text:000000000000371D                 mov     rsi, [rdx-8]
.text:0000000000003721
.text:0000000000003721 loc_3721:                               ; CODE XREF: display_speed+4A↑j
.text:0000000000003721                 add     ecx, 1
.text:0000000000003724                 test    rsi, rsi
.text:0000000000003727                 jnz     short loc_3710
.text:0000000000003729
.text:0000000000003729 loc_3729:                               ; CODE XREF: display_speed+153↓j
.text:0000000000003729                                         ; display_speed+192↓j
.text:0000000000003729                 lea     rax, aSpeedLuBaud ; "speed %lu baud;"
.text:0000000000003730                 lea     rdi, aLu        ; "%lu\n"
.text:0000000000003737                 test    bl, bl
.text:0000000000003739                 cmovnz  rdi, rax
.text:000000000000373D                 xor     eax, eax
.text:000000000000373F                 call    wrapf
.text:0000000000003744
.text:0000000000003744 loc_3744:                               ; CODE XREF: display_speed+135↓j
.text:0000000000003744                 test    bl, bl
.text:0000000000003746                 jnz     short loc_3752
.text:0000000000003748                 mov     cs:current_col, 0
.text:0000000000003752
.text:0000000000003752 loc_3752:                               ; CODE XREF: display_speed+86↑j
.text:0000000000003752                 pop     rbx
.text:0000000000003753                 pop     rbp
.text:0000000000003754                 pop     r12
.text:0000000000003756                 retn
.text:0000000000003756 ; ---------------------------------------------------------------------------
.text:0000000000003757                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: display_speed+28↑j
.text:0000000000003760                 mov     rdi, rbp        ; termios_p
.text:0000000000003763                 call    _cfgetospeed
.text:0000000000003768                 test    eax, eax
.text:000000000000376A                 jz      short loc_3799
.text:000000000000376C                 lea     rdx, unk_20FA80
.text:0000000000003773                 lea     rsi, a150+1     ; "50"
.text:000000000000377A                 xor     ecx, ecx
.text:000000000000377C                 jmp     short loc_3791
.text:000000000000377C ; ---------------------------------------------------------------------------
.text:000000000000377E                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: display_speed+D7↓j
.text:0000000000003780                 add     rdx, 18h
.text:0000000000003784                 cmp     eax, [rdx-18h]
.text:0000000000003787                 jz      loc_3838
.text:000000000000378D                 mov     rsi, [rdx-8]
.text:0000000000003791
.text:0000000000003791 loc_3791:                               ; CODE XREF: display_speed+BC↑j
.text:0000000000003791                 add     ecx, 1
.text:0000000000003794                 test    rsi, rsi
.text:0000000000003797                 jnz     short loc_3780
.text:0000000000003799
.text:0000000000003799 loc_3799:                               ; CODE XREF: display_speed+AA↑j
.text:0000000000003799                 xor     r12d, r12d
.text:000000000000379C
.text:000000000000379C loc_379C:                               ; CODE XREF: display_speed+18B↓j
.text:000000000000379C                 mov     rdi, rbp        ; termios_p
.text:000000000000379F                 call    _cfgetispeed
.text:00000000000037A4                 test    eax, eax
.text:00000000000037A6                 jz      short loc_37D5
.text:00000000000037A8                 lea     rcx, unk_20FA80
.text:00000000000037AF                 lea     rdi, a150+1     ; "50"
.text:00000000000037B6                 xor     esi, esi
.text:00000000000037B8                 jmp     short loc_37CD
.text:00000000000037B8 ; ---------------------------------------------------------------------------
.text:00000000000037BA                 align 20h
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: display_speed+113↓j
.text:00000000000037C0                 add     rcx, 18h
.text:00000000000037C4                 cmp     eax, [rcx-18h]
.text:00000000000037C7                 jz      short loc_3820
.text:00000000000037C9                 mov     rdi, [rcx-8]
.text:00000000000037CD
.text:00000000000037CD loc_37CD:                               ; CODE XREF: display_speed+F8↑j
.text:00000000000037CD                 add     esi, 1
.text:00000000000037D0                 test    rdi, rdi
.text:00000000000037D3                 jnz     short loc_37C0
.text:00000000000037D5
.text:00000000000037D5 loc_37D5:                               ; CODE XREF: display_speed+E6↑j
.text:00000000000037D5                 xor     esi, esi
.text:00000000000037D7
.text:00000000000037D7 loc_37D7:                               ; CODE XREF: display_speed+173↓j
.text:00000000000037D7                 lea     rax, aIspeedLuBaudOs ; "ispeed %lu baud; ospeed %lu baud;"
.text:00000000000037DE                 lea     rdi, unk_B2F4
.text:00000000000037E5                 test    bl, bl
.text:00000000000037E7                 mov     rdx, r12
.text:00000000000037EA                 cmovnz  rdi, rax
.text:00000000000037EE                 xor     eax, eax
.text:00000000000037F0                 call    wrapf
.text:00000000000037F5                 jmp     loc_3744
.text:00000000000037F5 ; ---------------------------------------------------------------------------
.text:00000000000037FA                 align 20h
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: display_speed+57↑j
.text:0000000000003800                 movsxd  rcx, ecx
.text:0000000000003803                 lea     rax, speeds
.text:000000000000380A                 lea     rdx, [rcx+rcx*2]
.text:000000000000380E                 mov     rsi, [rax+rdx*8+10h]
.text:0000000000003813                 jmp     loc_3729
.text:0000000000003813 ; ---------------------------------------------------------------------------
.text:0000000000003818                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: display_speed+107↑j
.text:0000000000003820                 movsxd  rsi, esi
.text:0000000000003823                 lea     rax, speeds
.text:000000000000382A                 lea     rdx, [rsi+rsi*2]
.text:000000000000382E                 mov     rsi, [rax+rdx*8+10h]
.text:0000000000003833                 jmp     short loc_37D7
.text:0000000000003833 ; ---------------------------------------------------------------------------
.text:0000000000003835                 align 8
.text:0000000000003838
.text:0000000000003838 loc_3838:                               ; CODE XREF: display_speed+C7↑j
.text:0000000000003838                 movsxd  rcx, ecx
.text:000000000000383B                 lea     rax, speeds
.text:0000000000003842                 lea     rdx, [rcx+rcx*2]
.text:0000000000003846                 mov     r12, [rax+rdx*8+10h]
.text:000000000000384B                 jmp     loc_379C
.text:0000000000003850 ; ---------------------------------------------------------------------------
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: display_speed+34↑j
.text:0000000000003850                 xor     esi, esi
.text:0000000000003852                 jmp     loc_3729
.text:0000000000003852 ; } // starts at 36C0
.text:0000000000003852 display_speed   endp
.text:0000000000003852
.text:0000000000003852 ; ---------------------------------------------------------------------------
.text:0000000000003857                 align 20h
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860
.text:0000000000003860 integer_arg     proc near               ; CODE XREF: apply_settings+430↓p
.text:0000000000003860                                         ; apply_settings+458↓p ...
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 push    rbp
.text:0000000000003861                 push    rbx
.text:0000000000003862                 mov     rbp, rsi
.text:0000000000003865                 lea     rsi, aInvalidInteger ; "invalid integer argument"
.text:000000000000386C                 mov     rbx, rdi
.text:000000000000386F                 mov     edx, 5          ; category
.text:0000000000003874                 sub     rsp, 8
.text:0000000000003878                 xor     edi, edi        ; domainname
.text:000000000000387A                 call    _dcgettext
.text:000000000000387F                 sub     rsp, 8
.text:0000000000003883                 lea     r8, aBb         ; "bB"
.text:000000000000388A                 mov     rcx, rbp
.text:000000000000388D                 push    0
.text:000000000000388F                 mov     rdi, rbx
.text:0000000000003892                 mov     r9, rax
.text:0000000000003895                 xor     edx, edx
.text:0000000000003897                 xor     esi, esi
.text:0000000000003899                 call    xnumtoumax
.text:000000000000389E                 add     rsp, 18h
.text:00000000000038A2                 pop     rbx
.text:00000000000038A3                 pop     rbp
.text:00000000000038A4                 retn
.text:00000000000038A4 ; } // starts at 3860
.text:00000000000038A4 integer_arg     endp
.text:00000000000038A4
.text:00000000000038A4 ; ---------------------------------------------------------------------------
.text:00000000000038A5                 align 10h
.text:00000000000038B0
.text:00000000000038B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038B0
.text:00000000000038B0
.text:00000000000038B0 visible_part_0  proc near               ; CODE XREF: main+72E↑p
.text:00000000000038B0                                         ; main+7E0↑p
.text:00000000000038B0 ; __unwind {
.text:00000000000038B0                 cmp     dil, 1Fh
.text:00000000000038B4                 jbe     short loc_38D8
.text:00000000000038B6                 cmp     dil, 7Eh ; '~'
.text:00000000000038BA                 ja      short loc_3900
.text:00000000000038BC                 lea     rax, buf_7417+1
.text:00000000000038C3                 mov     byte ptr cs:buf_7417, dil
.text:00000000000038CA                 mov     byte ptr [rax], 0
.text:00000000000038CD                 lea     rax, buf_7417
.text:00000000000038D4                 retn
.text:00000000000038D4 ; ---------------------------------------------------------------------------
.text:00000000000038D5                 align 8
.text:00000000000038D8
.text:00000000000038D8 loc_38D8:                               ; CODE XREF: visible_part_0+4↑j
.text:00000000000038D8                 add     edi, 40h ; '@'
.text:00000000000038DB                 lea     rax, word_211122
.text:00000000000038E2                 mov     byte ptr cs:buf_7417, 5Eh ; '^'
.text:00000000000038E9                 mov     byte ptr cs:buf_7417+1, dil
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: visible_part_0+7F↓j
.text:00000000000038F0                                         ; visible_part_0+9B↓j ...
.text:00000000000038F0                 mov     byte ptr [rax], 0
.text:00000000000038F3                 lea     rax, buf_7417
.text:00000000000038FA                 retn
.text:00000000000038FA ; ---------------------------------------------------------------------------
.text:00000000000038FB                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: visible_part_0+A↑j
.text:0000000000003900                 cmp     dil, 7Fh
.text:0000000000003904                 jz      short loc_3938
.text:0000000000003906                 mov     edx, 2D4Dh
.text:000000000000390B                 cmp     dil, 9Fh
.text:000000000000390F                 mov     cs:buf_7417, dx
.text:0000000000003916                 jbe     short loc_3950
.text:0000000000003918                 cmp     dil, 0FFh
.text:000000000000391C                 jz      short loc_3970
.text:000000000000391E                 add     edi, 0FFFFFF80h
.text:0000000000003921                 lea     rax, word_211122+1
.text:0000000000003928                 mov     byte ptr cs:word_211122, dil
.text:000000000000392F                 jmp     short loc_38F0
.text:000000000000392F ; ---------------------------------------------------------------------------
.text:0000000000003931                 align 8
.text:0000000000003938
.text:0000000000003938 loc_3938:                               ; CODE XREF: visible_part_0+54↑j
.text:0000000000003938                 mov     ecx, 3F5Eh
.text:000000000000393D                 lea     rax, word_211122
.text:0000000000003944                 mov     cs:buf_7417, cx
.text:000000000000394B                 jmp     short loc_38F0
.text:000000000000394B ; ---------------------------------------------------------------------------
.text:000000000000394D                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: visible_part_0+66↑j
.text:0000000000003950                 sub     edi, 40h ; '@'
.text:0000000000003953                 mov     byte ptr cs:word_211122, 5Eh ; '^'
.text:000000000000395A                 lea     rax, unk_211124
.text:0000000000003961                 mov     byte ptr cs:word_211122+1, dil
.text:0000000000003968                 jmp     short loc_38F0
.text:0000000000003968 ; ---------------------------------------------------------------------------
.text:000000000000396A                 align 10h
.text:0000000000003970
.text:0000000000003970 loc_3970:                               ; CODE XREF: visible_part_0+6C↑j
.text:0000000000003970                 mov     eax, 3F5Eh
.text:0000000000003975                 mov     cs:word_211122, ax
.text:000000000000397C                 lea     rax, unk_211124
.text:0000000000003983                 jmp     loc_38F0
.text:0000000000003983 ; } // starts at 38B0
.text:0000000000003983 visible_part_0  endp
.text:0000000000003983
.text:0000000000003983 ; ---------------------------------------------------------------------------
.text:0000000000003988                 align 10h
.text:0000000000003990
.text:0000000000003990 ; =============== S U B R O U T I N E =======================================
.text:0000000000003990
.text:0000000000003990
.text:0000000000003990 screen_columns  proc near               ; CODE XREF: main:loc_2B73↑p
.text:0000000000003990                                         ; apply_settings+6C7↓p ...
.text:0000000000003990
.text:0000000000003990 var_20          = qword ptr -20h
.text:0000000000003990 var_18          = byte ptr -18h
.text:0000000000003990 var_16          = word ptr -16h
.text:0000000000003990 var_10          = qword ptr -10h
.text:0000000000003990
.text:0000000000003990 ; __unwind {
.text:0000000000003990                 sub     rsp, 28h
.text:0000000000003994                 mov     esi, 5413h      ; request
.text:0000000000003999                 mov     edi, 1          ; fd
.text:000000000000399E                 mov     rax, fs:28h
.text:00000000000039A7                 mov     [rsp+28h+var_10], rax
.text:00000000000039AC                 xor     eax, eax
.text:00000000000039AE                 lea     rdx, [rsp+28h+var_18]
.text:00000000000039B3                 call    _ioctl
.text:00000000000039B8                 test    eax, eax
.text:00000000000039BA                 jnz     short loc_39C6
.text:00000000000039BC                 movzx   eax, [rsp+28h+var_16]
.text:00000000000039C1                 test    ax, ax
.text:00000000000039C4                 jnz     short loc_39F8
.text:00000000000039C6
.text:00000000000039C6 loc_39C6:                               ; CODE XREF: screen_columns+2A↑j
.text:00000000000039C6                 lea     rdi, name       ; "COLUMNS"
.text:00000000000039CD                 call    _getenv
.text:00000000000039D2                 test    rax, rax
.text:00000000000039D5                 jz      short loc_39F3
.text:00000000000039D7                 lea     rcx, [rsp+28h+var_20]
.text:00000000000039DC                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:00000000000039E3                 xor     edx, edx
.text:00000000000039E5                 xor     esi, esi
.text:00000000000039E7                 mov     rdi, rax        ; nptr
.text:00000000000039EA                 call    xstrtol
.text:00000000000039EF                 test    eax, eax
.text:00000000000039F1                 jz      short loc_3A10
.text:00000000000039F3
.text:00000000000039F3 loc_39F3:                               ; CODE XREF: screen_columns+45↑j
.text:00000000000039F3                                         ; screen_columns+90↓j
.text:00000000000039F3                 mov     eax, 50h ; 'P'
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: screen_columns+34↑j
.text:00000000000039F8                                         ; screen_columns+92↓j
.text:00000000000039F8                 mov     rcx, [rsp+28h+var_10]
.text:00000000000039FD                 xor     rcx, fs:28h
.text:0000000000003A06                 jnz     short loc_3A24
.text:0000000000003A08                 add     rsp, 28h
.text:0000000000003A0C                 retn
.text:0000000000003A0C ; ---------------------------------------------------------------------------
.text:0000000000003A0D                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: screen_columns+61↑j
.text:0000000000003A10                 mov     rax, [rsp+28h+var_20]
.text:0000000000003A15                 lea     rdx, [rax-1]
.text:0000000000003A19                 cmp     rdx, 7FFFFFFEh
.text:0000000000003A20                 ja      short loc_39F3
.text:0000000000003A22                 jmp     short loc_39F8
.text:0000000000003A24 ; ---------------------------------------------------------------------------
.text:0000000000003A24
.text:0000000000003A24 loc_3A24:                               ; CODE XREF: screen_columns+76↑j
.text:0000000000003A24                 call    ___stack_chk_fail
.text:0000000000003A24 ; } // starts at 3990
.text:0000000000003A24 screen_columns  endp
.text:0000000000003A24
.text:0000000000003A24 ; ---------------------------------------------------------------------------
.text:0000000000003A29                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30 set_window_size proc near               ; CODE XREF: apply_settings+43F↓p
.text:0000000000003A30                                         ; apply_settings+517↓p
.text:0000000000003A30
.text:0000000000003A30 var_38          = word ptr -38h
.text:0000000000003A30 var_36          = word ptr -36h
.text:0000000000003A30 var_30          = qword ptr -30h
.text:0000000000003A30
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 push    r14
.text:0000000000003A32                 push    r13
.text:0000000000003A34                 mov     r13, rdx
.text:0000000000003A37                 push    r12
.text:0000000000003A39                 push    rbp
.text:0000000000003A3A                 mov     r12d, edi
.text:0000000000003A3D                 push    rbx
.text:0000000000003A3E                 xor     edi, edi        ; fd
.text:0000000000003A40                 mov     ebp, esi
.text:0000000000003A42                 mov     esi, 5413h      ; request
.text:0000000000003A47                 sub     rsp, 10h
.text:0000000000003A4B                 mov     rax, fs:28h
.text:0000000000003A54                 mov     [rsp+38h+var_30], rax
.text:0000000000003A59                 xor     eax, eax
.text:0000000000003A5B                 mov     rbx, rsp
.text:0000000000003A5E                 mov     rdx, rbx
.text:0000000000003A61                 call    _ioctl
.text:0000000000003A66                 test    eax, eax
.text:0000000000003A68                 jz      short loc_3A7E
.text:0000000000003A6A                 call    ___errno_location
.text:0000000000003A6F                 cmp     dword ptr [rax], 16h
.text:0000000000003A72                 mov     r14, rax
.text:0000000000003A75                 jnz     short loc_3AC3
.text:0000000000003A77                 mov     qword ptr [rbx], 0
.text:0000000000003A7E
.text:0000000000003A7E loc_3A7E:                               ; CODE XREF: set_window_size+38↑j
.text:0000000000003A7E                 test    r12d, r12d
.text:0000000000003A81                 js      short loc_3A88
.text:0000000000003A83                 mov     [rsp+38h+var_38], r12w
.text:0000000000003A88
.text:0000000000003A88 loc_3A88:                               ; CODE XREF: set_window_size+51↑j
.text:0000000000003A88                 test    ebp, ebp
.text:0000000000003A8A                 js      short loc_3A91
.text:0000000000003A8C                 mov     [rsp+38h+var_36], bp
.text:0000000000003A91
.text:0000000000003A91 loc_3A91:                               ; CODE XREF: set_window_size+5A↑j
.text:0000000000003A91                 xor     edi, edi        ; fd
.text:0000000000003A93                 xor     eax, eax
.text:0000000000003A95                 mov     rdx, rbx
.text:0000000000003A98                 mov     esi, 5414h      ; request
.text:0000000000003A9D                 call    _ioctl
.text:0000000000003AA2                 test    eax, eax
.text:0000000000003AA4                 jnz     short loc_3AF0
.text:0000000000003AA6                 mov     rax, [rsp+38h+var_30]
.text:0000000000003AAB                 xor     rax, fs:28h
.text:0000000000003AB4                 jnz     short loc_3AEB
.text:0000000000003AB6                 add     rsp, 10h
.text:0000000000003ABA                 pop     rbx
.text:0000000000003ABB                 pop     rbp
.text:0000000000003ABC                 pop     r12
.text:0000000000003ABE                 pop     r13
.text:0000000000003AC0                 pop     r14
.text:0000000000003AC2                 retn
.text:0000000000003AC3 ; ---------------------------------------------------------------------------
.text:0000000000003AC3
.text:0000000000003AC3 loc_3AC3:                               ; CODE XREF: set_window_size+45↑j
.text:0000000000003AC3                 mov     rdx, r13
.text:0000000000003AC6                 mov     esi, 3
.text:0000000000003ACB                 xor     edi, edi
.text:0000000000003ACD                 call    quotearg_n_style_colon
.text:0000000000003AD2                 mov     esi, [r14]      ; errnum
.text:0000000000003AD5                 lea     rdx, format     ; format
.text:0000000000003ADC                 mov     rcx, rax
.text:0000000000003ADF                 mov     edi, 1          ; status
.text:0000000000003AE4                 xor     eax, eax
.text:0000000000003AE6                 call    _error
.text:0000000000003AEB
.text:0000000000003AEB loc_3AEB:                               ; CODE XREF: set_window_size+84↑j
.text:0000000000003AEB                 call    ___stack_chk_fail
.text:0000000000003AF0 ; ---------------------------------------------------------------------------
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: set_window_size+74↑j
.text:0000000000003AF0                 mov     rdx, r13
.text:0000000000003AF3                 mov     esi, 3
.text:0000000000003AF8                 xor     edi, edi
.text:0000000000003AFA                 call    quotearg_n_style_colon
.text:0000000000003AFF                 mov     rbx, rax
.text:0000000000003B02                 call    ___errno_location
.text:0000000000003B07                 mov     esi, [rax]      ; errnum
.text:0000000000003B09                 lea     rdx, format     ; format
.text:0000000000003B10                 mov     rcx, rbx
.text:0000000000003B13                 mov     edi, 1          ; status
.text:0000000000003B18                 xor     eax, eax
.text:0000000000003B1A                 call    _error
.text:0000000000003B1A ; } // starts at 3A30
.text:0000000000003B1F                 nop
.text:0000000000003B1F set_window_size endp ; sp-analysis failed
.text:0000000000003B1F
.text:0000000000003B20
.text:0000000000003B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B20
.text:0000000000003B20
.text:0000000000003B20 display_window_size proc near           ; CODE XREF: main+754↑p
.text:0000000000003B20                                         ; apply_settings+6E3↓p
.text:0000000000003B20
.text:0000000000003B20 var_28          = word ptr -28h
.text:0000000000003B20 var_26          = word ptr -26h
.text:0000000000003B20 var_20          = qword ptr -20h
.text:0000000000003B20
.text:0000000000003B20 ; __unwind {
.text:0000000000003B20                 push    r12
.text:0000000000003B22                 push    rbp
.text:0000000000003B23                 mov     rbp, rsi
.text:0000000000003B26                 push    rbx
.text:0000000000003B27                 mov     esi, 5413h      ; request
.text:0000000000003B2C                 mov     ebx, edi
.text:0000000000003B2E                 xor     edi, edi        ; fd
.text:0000000000003B30                 sub     rsp, 10h
.text:0000000000003B34                 mov     rax, fs:28h
.text:0000000000003B3D                 mov     [rsp+28h+var_20], rax
.text:0000000000003B42                 xor     eax, eax
.text:0000000000003B44                 mov     rdx, rsp
.text:0000000000003B47                 call    _ioctl
.text:0000000000003B4C                 test    eax, eax
.text:0000000000003B4E                 jz      short loc_3B80
.text:0000000000003B50                 call    ___errno_location
.text:0000000000003B55                 cmp     dword ptr [rax], 16h
.text:0000000000003B58                 mov     r12, rax
.text:0000000000003B5B                 jnz     short loc_3BBA
.text:0000000000003B5D                 test    bl, bl
.text:0000000000003B5F                 jz      loc_3BE8
.text:0000000000003B65
.text:0000000000003B65 loc_3B65:                               ; CODE XREF: display_window_size+7B↓j
.text:0000000000003B65                                         ; display_window_size+98↓j
.text:0000000000003B65                 mov     rax, [rsp+28h+var_20]
.text:0000000000003B6A                 xor     rax, fs:28h
.text:0000000000003B73                 jnz     short loc_3BE3
.text:0000000000003B75                 add     rsp, 10h
.text:0000000000003B79                 pop     rbx
.text:0000000000003B7A                 pop     rbp
.text:0000000000003B7B                 pop     r12
.text:0000000000003B7D                 retn
.text:0000000000003B7D ; ---------------------------------------------------------------------------
.text:0000000000003B7E                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: display_window_size+2E↑j
.text:0000000000003B80                 test    bl, bl
.text:0000000000003B82                 movzx   edx, [rsp+28h+var_26]
.text:0000000000003B87                 movzx   esi, [rsp+28h+var_28]
.text:0000000000003B8B                 jz      short loc_3BA0
.text:0000000000003B8D                 lea     rdi, aRowsDColumnsD ; "rows %d; columns %d;"
.text:0000000000003B94                 xor     eax, eax
.text:0000000000003B96                 call    wrapf
.text:0000000000003B9B                 jmp     short loc_3B65
.text:0000000000003B9B ; ---------------------------------------------------------------------------
.text:0000000000003B9D                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: display_window_size+6B↑j
.text:0000000000003BA0                 lea     rdi, aDD        ; "%d %d\n"
.text:0000000000003BA7                 xor     eax, eax
.text:0000000000003BA9                 call    wrapf
.text:0000000000003BAE                 mov     cs:current_col, 0
.text:0000000000003BB8                 jmp     short loc_3B65
.text:0000000000003BBA ; ---------------------------------------------------------------------------
.text:0000000000003BBA
.text:0000000000003BBA loc_3BBA:                               ; CODE XREF: display_window_size+3B↑j
.text:0000000000003BBA                 mov     rdx, rbp
.text:0000000000003BBD                 mov     esi, 3
.text:0000000000003BC2                 xor     edi, edi
.text:0000000000003BC4                 call    quotearg_n_style_colon
.text:0000000000003BC9                 mov     esi, [r12]      ; errnum
.text:0000000000003BCD                 lea     rdx, format     ; format
.text:0000000000003BD4                 mov     rcx, rax
.text:0000000000003BD7                 mov     edi, 1          ; status
.text:0000000000003BDC                 xor     eax, eax
.text:0000000000003BDE                 call    _error
.text:0000000000003BE3
.text:0000000000003BE3 loc_3BE3:                               ; CODE XREF: display_window_size+53↑j
.text:0000000000003BE3                 call    ___stack_chk_fail
.text:0000000000003BE8 ; ---------------------------------------------------------------------------
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: display_window_size+3F↑j
.text:0000000000003BE8                 mov     rdx, rbp
.text:0000000000003BEB                 mov     esi, 3
.text:0000000000003BF0                 xor     edi, edi
.text:0000000000003BF2                 call    quotearg_n_style_colon
.text:0000000000003BF7                 lea     rsi, aSNoSizeInforma ; "%s: no size information for this device"
.text:0000000000003BFE                 mov     rbx, rax
.text:0000000000003C01                 mov     edx, 5          ; category
.text:0000000000003C06                 xor     edi, edi        ; domainname
.text:0000000000003C08                 call    _dcgettext
.text:0000000000003C0D                 mov     rcx, rbx
.text:0000000000003C10                 mov     rdx, rax        ; format
.text:0000000000003C13                 xor     esi, esi        ; errnum
.text:0000000000003C15                 mov     edi, 1          ; status
.text:0000000000003C1A                 xor     eax, eax
.text:0000000000003C1C                 call    _error
.text:0000000000003C1C ; } // starts at 3B20
.text:0000000000003C21                 nop     dword ptr [rax+rax+00h]
.text:0000000000003C26                 db      2Eh
.text:0000000000003C26                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003C26 display_window_size endp ; sp-analysis failed
.text:0000000000003C26
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30 ; Attributes: noreturn
.text:0000000000003C30
.text:0000000000003C30 ; void __fastcall __noreturn usage(int status)
.text:0000000000003C30                 public usage
.text:0000000000003C30 usage           proc near               ; CODE XREF: main+61C↑p
.text:0000000000003C30                                         ; apply_settings+55E↓p
.text:0000000000003C30
.text:0000000000003C30 var_A8          = qword ptr -0A8h
.text:0000000000003C30 var_A0          = qword ptr -0A0h
.text:0000000000003C30 var_98          = qword ptr -98h
.text:0000000000003C30 var_90          = qword ptr -90h
.text:0000000000003C30 var_88          = qword ptr -88h
.text:0000000000003C30 var_80          = qword ptr -80h
.text:0000000000003C30 var_78          = qword ptr -78h
.text:0000000000003C30 var_70          = qword ptr -70h
.text:0000000000003C30 var_68          = qword ptr -68h
.text:0000000000003C30 var_60          = qword ptr -60h
.text:0000000000003C30 var_58          = qword ptr -58h
.text:0000000000003C30 var_50          = qword ptr -50h
.text:0000000000003C30 var_48          = qword ptr -48h
.text:0000000000003C30 var_40          = qword ptr -40h
.text:0000000000003C30 var_30          = qword ptr -30h
.text:0000000000003C30
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 push    r13
.text:0000000000003C32                 push    r12
.text:0000000000003C34                 mov     edx, 5          ; category
.text:0000000000003C39                 push    rbp
.text:0000000000003C3A                 push    rbx
.text:0000000000003C3B                 mov     ebp, edi
.text:0000000000003C3D                 sub     rsp, 88h
.text:0000000000003C44                 mov     rbx, cs:program_name
.text:0000000000003C4B                 mov     rax, fs:28h
.text:0000000000003C54                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003C59                 xor     eax, eax
.text:0000000000003C5B                 test    edi, edi
.text:0000000000003C5D                 jz      short loc_3C8D
.text:0000000000003C5F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003C66                 xor     edi, edi        ; domainname
.text:0000000000003C68                 call    _dcgettext
.text:0000000000003C6D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003C74                 mov     rdx, rax
.text:0000000000003C77                 mov     rcx, rbx
.text:0000000000003C7A                 mov     esi, 1
.text:0000000000003C7F                 xor     eax, eax
.text:0000000000003C81                 call    ___fprintf_chk
.text:0000000000003C86
.text:0000000000003C86 loc_3C86:                               ; CODE XREF: usage+E66↓j
.text:0000000000003C86                 mov     edi, ebp        ; status
.text:0000000000003C88                 call    _exit
.text:0000000000003C8D ; ---------------------------------------------------------------------------
.text:0000000000003C8D
.text:0000000000003C8D loc_3C8D:                               ; CODE XREF: usage+2D↑j
.text:0000000000003C8D                 lea     rsi, aUsageSFDeviceF ; "Usage: %s [-F DEVICE | --file=DEVICE] ["...
.text:0000000000003C94                 xor     edi, edi        ; domainname
.text:0000000000003C96                 call    _dcgettext
.text:0000000000003C9B                 mov     r8, rbx
.text:0000000000003C9E                 mov     rcx, rbx
.text:0000000000003CA1                 mov     rdx, rbx
.text:0000000000003CA4                 mov     rsi, rax
.text:0000000000003CA7                 mov     edi, 1
.text:0000000000003CAC                 xor     eax, eax
.text:0000000000003CAE                 call    ___printf_chk
.text:0000000000003CB3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CBA                 lea     rsi, aPrintOrChangeT ; "Print or change terminal characteristic"...
.text:0000000000003CC1                 mov     edx, 5          ; category
.text:0000000000003CC6                 xor     edi, edi        ; domainname
.text:0000000000003CC8                 call    _dcgettext
.text:0000000000003CCD                 mov     rsi, rbx        ; stream
.text:0000000000003CD0                 mov     rdi, rax        ; s
.text:0000000000003CD3                 call    _fputs_unlocked
.text:0000000000003CD8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CDF                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003CE6                 mov     edx, 5          ; category
.text:0000000000003CEB                 xor     edi, edi        ; domainname
.text:0000000000003CED                 call    _dcgettext
.text:0000000000003CF2                 mov     rsi, rbx        ; stream
.text:0000000000003CF5                 mov     rdi, rax        ; s
.text:0000000000003CF8                 call    _fputs_unlocked
.text:0000000000003CFD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D04                 lea     rsi, aAAllPrintAllCu ; "  -a, --all          print all current "...
.text:0000000000003D0B                 mov     edx, 5          ; category
.text:0000000000003D10                 xor     edi, edi        ; domainname
.text:0000000000003D12                 call    _dcgettext
.text:0000000000003D17                 mov     rsi, rbx        ; stream
.text:0000000000003D1A                 mov     rdi, rax        ; s
.text:0000000000003D1D                 call    _fputs_unlocked
.text:0000000000003D22                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D29                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003D30                 mov     edx, 5          ; category
.text:0000000000003D35                 xor     edi, edi        ; domainname
.text:0000000000003D37                 call    _dcgettext
.text:0000000000003D3C                 mov     rsi, rbx        ; stream
.text:0000000000003D3F                 mov     rdi, rax        ; s
.text:0000000000003D42                 call    _fputs_unlocked
.text:0000000000003D47                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D4E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003D55                 mov     edx, 5          ; category
.text:0000000000003D5A                 xor     edi, edi        ; domainname
.text:0000000000003D5C                 call    _dcgettext
.text:0000000000003D61                 mov     rsi, rbx        ; stream
.text:0000000000003D64                 mov     rdi, rax        ; s
.text:0000000000003D67                 call    _fputs_unlocked
.text:0000000000003D6C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D73                 lea     rsi, aOptionalBefore ; "\nOptional - before SETTING indicates n"...
.text:0000000000003D7A                 mov     edx, 5          ; category
.text:0000000000003D7F                 xor     edi, edi        ; domainname
.text:0000000000003D81                 call    _dcgettext
.text:0000000000003D86                 mov     rsi, rbx        ; stream
.text:0000000000003D89                 mov     rdi, rax        ; s
.text:0000000000003D8C                 call    _fputs_unlocked
.text:0000000000003D91                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003D98                 lea     rsi, aSpecialCharact ; "\nSpecial characters:\n"
.text:0000000000003D9F                 mov     edx, 5          ; category
.text:0000000000003DA4                 xor     edi, edi        ; domainname
.text:0000000000003DA6                 call    _dcgettext
.text:0000000000003DAB                 mov     rsi, rbx        ; stream
.text:0000000000003DAE                 mov     rdi, rax        ; s
.text:0000000000003DB1                 call    _fputs_unlocked
.text:0000000000003DB6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003DBD                 lea     rsi, aDiscardCharCha ; " * discard CHAR  CHAR will toggle disca"...
.text:0000000000003DC4                 mov     edx, 5          ; category
.text:0000000000003DC9                 xor     edi, edi        ; domainname
.text:0000000000003DCB                 call    _dcgettext
.text:0000000000003DD0                 mov     rsi, rbx        ; stream
.text:0000000000003DD3                 mov     rdi, rax        ; s
.text:0000000000003DD6                 call    _fputs_unlocked
.text:0000000000003DDB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003DE2                 lea     rsi, aEofCharCharWil ; "   eof CHAR      CHAR will send an end "...
.text:0000000000003DE9                 mov     edx, 5          ; category
.text:0000000000003DEE                 xor     edi, edi        ; domainname
.text:0000000000003DF0                 call    _dcgettext
.text:0000000000003DF5                 mov     rsi, rbx        ; stream
.text:0000000000003DF8                 mov     rdi, rax        ; s
.text:0000000000003DFB                 call    _fputs_unlocked
.text:0000000000003E00                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E07                 lea     rsi, aEol2CharAltern ; " * eol2 CHAR     alternate CHAR for end"...
.text:0000000000003E0E                 mov     edx, 5          ; category
.text:0000000000003E13                 xor     edi, edi        ; domainname
.text:0000000000003E15                 call    _dcgettext
.text:0000000000003E1A                 mov     rsi, rbx        ; stream
.text:0000000000003E1D                 mov     rdi, rax        ; s
.text:0000000000003E20                 call    _fputs_unlocked
.text:0000000000003E25                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E2C                 lea     rsi, aEraseCharCharW ; "   erase CHAR    CHAR will erase the la"...
.text:0000000000003E33                 mov     edx, 5          ; category
.text:0000000000003E38                 xor     edi, edi        ; domainname
.text:0000000000003E3A                 call    _dcgettext
.text:0000000000003E3F                 mov     rsi, rbx        ; stream
.text:0000000000003E42                 mov     rdi, rax        ; s
.text:0000000000003E45                 call    _fputs_unlocked
.text:0000000000003E4A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E51                 lea     rsi, aLnextCharCharW ; " * lnext CHAR    CHAR will enter the ne"...
.text:0000000000003E58                 mov     edx, 5          ; category
.text:0000000000003E5D                 xor     edi, edi        ; domainname
.text:0000000000003E5F                 call    _dcgettext
.text:0000000000003E64                 mov     rsi, rbx        ; stream
.text:0000000000003E67                 mov     rdi, rax        ; s
.text:0000000000003E6A                 call    _fputs_unlocked
.text:0000000000003E6F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E76                 lea     rsi, aQuitCharCharWi ; "   quit CHAR     CHAR will send a quit "...
.text:0000000000003E7D                 mov     edx, 5          ; category
.text:0000000000003E82                 xor     edi, edi        ; domainname
.text:0000000000003E84                 call    _dcgettext
.text:0000000000003E89                 mov     rsi, rbx        ; stream
.text:0000000000003E8C                 mov     rdi, rax        ; s
.text:0000000000003E8F                 call    _fputs_unlocked
.text:0000000000003E94                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E9B                 lea     rsi, aRprntCharCharW ; " * rprnt CHAR    CHAR will redraw the c"...
.text:0000000000003EA2                 mov     edx, 5          ; category
.text:0000000000003EA7                 xor     edi, edi        ; domainname
.text:0000000000003EA9                 call    _dcgettext
.text:0000000000003EAE                 mov     rsi, rbx        ; stream
.text:0000000000003EB1                 mov     rdi, rax        ; s
.text:0000000000003EB4                 call    _fputs_unlocked
.text:0000000000003EB9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003EC0                 lea     rsi, aStartCharCharW ; "   start CHAR    CHAR will restart the "...
.text:0000000000003EC7                 mov     edx, 5          ; category
.text:0000000000003ECC                 xor     edi, edi        ; domainname
.text:0000000000003ECE                 call    _dcgettext
.text:0000000000003ED3                 mov     rsi, rbx        ; stream
.text:0000000000003ED6                 mov     rdi, rax        ; s
.text:0000000000003ED9                 call    _fputs_unlocked
.text:0000000000003EDE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003EE5                 lea     rsi, aSwtchCharCharW ; " * swtch CHAR    CHAR will switch to a "...
.text:0000000000003EEC                 mov     edx, 5          ; category
.text:0000000000003EF1                 xor     edi, edi        ; domainname
.text:0000000000003EF3                 call    _dcgettext
.text:0000000000003EF8                 mov     rsi, rbx        ; stream
.text:0000000000003EFB                 mov     rdi, rax        ; s
.text:0000000000003EFE                 call    _fputs_unlocked
.text:0000000000003F03                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003F0A                 lea     rsi, aWeraseCharChar ; " * werase CHAR   CHAR will erase the la"...
.text:0000000000003F11                 mov     edx, 5          ; category
.text:0000000000003F16                 xor     edi, edi        ; domainname
.text:0000000000003F18                 call    _dcgettext
.text:0000000000003F1D                 mov     rsi, rbx        ; stream
.text:0000000000003F20                 mov     rdi, rax        ; s
.text:0000000000003F23                 call    _fputs_unlocked
.text:0000000000003F28                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003F2F                 lea     rsi, aSpecialSetting ; "\nSpecial settings:\n   N             s"...
.text:0000000000003F36                 mov     edx, 5          ; category
.text:0000000000003F3B                 xor     edi, edi        ; domainname
.text:0000000000003F3D                 call    _dcgettext
.text:0000000000003F42                 mov     rsi, rbx        ; stream
.text:0000000000003F45                 mov     rdi, rax        ; s
.text:0000000000003F48                 call    _fputs_unlocked
.text:0000000000003F4D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003F54                 lea     rsi, aColsNTellTheKe ; " * cols N        tell the kernel that t"...
.text:0000000000003F5B                 mov     edx, 5          ; category
.text:0000000000003F60                 xor     edi, edi        ; domainname
.text:0000000000003F62                 call    _dcgettext
.text:0000000000003F67                 mov     rsi, rbx        ; stream
.text:0000000000003F6A                 mov     rdi, rax        ; s
.text:0000000000003F6D                 call    _fputs_unlocked
.text:0000000000003F72                 cmp     cs:tcsetattr_options, 1
.text:0000000000003F79                 mov     edx, 5          ; category
.text:0000000000003F7E                 jz      loc_4A9B
.text:0000000000003F84                 lea     rsi, aOff       ; "off"
.text:0000000000003F8B                 xor     edi, edi        ; domainname
.text:0000000000003F8D                 call    _dcgettext
.text:0000000000003F92                 mov     rbx, rax
.text:0000000000003F95
.text:0000000000003F95 loc_3F95:                               ; CODE XREF: usage+E7C↓j
.text:0000000000003F95                 lea     rsi, aDrainWaitForTr ; " * [-]drain      wait for transmission "...
.text:0000000000003F9C                 xor     edi, edi        ; domainname
.text:0000000000003F9E                 mov     edx, 5          ; category
.text:0000000000003FA3                 call    _dcgettext
.text:0000000000003FA8                 mov     rdx, rbx
.text:0000000000003FAB                 mov     rsi, rax
.text:0000000000003FAE                 mov     edi, 1
.text:0000000000003FB3                 xor     eax, eax
.text:0000000000003FB5                 call    ___printf_chk
.text:0000000000003FBA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003FC1                 lea     rsi, aIspeedNSetTheI ; "   ispeed N      set the input speed to"...
.text:0000000000003FC8                 mov     edx, 5          ; category
.text:0000000000003FCD                 xor     edi, edi        ; domainname
.text:0000000000003FCF                 call    _dcgettext
.text:0000000000003FD4                 mov     rsi, rbx        ; stream
.text:0000000000003FD7                 mov     rdi, rax        ; s
.text:0000000000003FDA                 call    _fputs_unlocked
.text:0000000000003FDF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003FE6                 lea     rsi, aLineNUseLineDi ; " * line N        use line discipline N"...
.text:0000000000003FED                 mov     edx, 5          ; category
.text:0000000000003FF2                 xor     edi, edi        ; domainname
.text:0000000000003FF4                 call    _dcgettext
.text:0000000000003FF9                 mov     rsi, rbx        ; stream
.text:0000000000003FFC                 mov     rdi, rax        ; s
.text:0000000000003FFF                 call    _fputs_unlocked
.text:0000000000004004                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000400B                 lea     rsi, aMinNWithIcanon ; "   min N         with -icanon, set N ch"...
.text:0000000000004012                 mov     edx, 5          ; category
.text:0000000000004017                 xor     edi, edi        ; domainname
.text:0000000000004019                 call    _dcgettext
.text:000000000000401E                 mov     rsi, rbx        ; stream
.text:0000000000004021                 mov     rdi, rax        ; s
.text:0000000000004024                 call    _fputs_unlocked
.text:0000000000004029                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004030                 lea     rsi, aRowsNTellTheKe ; " * rows N        tell the kernel that t"...
.text:0000000000004037                 mov     edx, 5          ; category
.text:000000000000403C                 xor     edi, edi        ; domainname
.text:000000000000403E                 call    _dcgettext
.text:0000000000004043                 mov     rsi, rbx        ; stream
.text:0000000000004046                 mov     rdi, rax        ; s
.text:0000000000004049                 call    _fputs_unlocked
.text:000000000000404E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004055                 lea     rsi, aSpeedPrintTheT ; "   speed         print the terminal spe"...
.text:000000000000405C                 mov     edx, 5          ; category
.text:0000000000004061                 xor     edi, edi        ; domainname
.text:0000000000004063                 call    _dcgettext
.text:0000000000004068                 mov     rsi, rbx        ; stream
.text:000000000000406B                 mov     rdi, rax        ; s
.text:000000000000406E                 call    _fputs_unlocked
.text:0000000000004073                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000407A                 lea     rsi, aControlSetting ; "\nControl settings:\n   [-]clocal     d"...
.text:0000000000004081                 mov     edx, 5          ; category
.text:0000000000004086                 xor     edi, edi        ; domainname
.text:0000000000004088                 call    _dcgettext
.text:000000000000408D                 mov     rsi, rbx        ; stream
.text:0000000000004090                 mov     rdi, rax        ; s
.text:0000000000004093                 call    _fputs_unlocked
.text:0000000000004098                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000409F                 lea     rsi, aCrtsctsEnableR ; " * [-]crtscts    enable RTS/CTS handsha"...
.text:00000000000040A6                 mov     edx, 5          ; category
.text:00000000000040AB                 xor     edi, edi        ; domainname
.text:00000000000040AD                 call    _dcgettext
.text:00000000000040B2                 mov     rsi, rbx        ; stream
.text:00000000000040B5                 mov     rdi, rax        ; s
.text:00000000000040B8                 call    _fputs_unlocked
.text:00000000000040BD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000040C4                 lea     rsi, aCsnSetCharacte ; "   csN           set character size to "...
.text:00000000000040CB                 mov     edx, 5          ; category
.text:00000000000040D0                 xor     edi, edi        ; domainname
.text:00000000000040D2                 call    _dcgettext
.text:00000000000040D7                 mov     rsi, rbx        ; stream
.text:00000000000040DA                 mov     rdi, rax        ; s
.text:00000000000040DD                 call    _fputs_unlocked
.text:00000000000040E2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000040E9                 lea     rsi, aCstopbUseTwoSt ; "   [-]cstopb     use two stop bits per "...
.text:00000000000040F0                 mov     edx, 5          ; category
.text:00000000000040F5                 xor     edi, edi        ; domainname
.text:00000000000040F7                 call    _dcgettext
.text:00000000000040FC                 mov     rsi, rbx        ; stream
.text:00000000000040FF                 mov     rdi, rax        ; s
.text:0000000000004102                 call    _fputs_unlocked
.text:0000000000004107                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000410E                 lea     rsi, aCmsparUseStick ; " * [-]cmspar     use \"stick\" (mark/sp"...
.text:0000000000004115                 mov     edx, 5          ; category
.text:000000000000411A                 xor     edi, edi        ; domainname
.text:000000000000411C                 call    _dcgettext
.text:0000000000004121                 mov     rsi, rbx        ; stream
.text:0000000000004124                 mov     rdi, rax        ; s
.text:0000000000004127                 call    _fputs_unlocked
.text:000000000000412C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004133                 lea     rsi, aInputSettingsB ; "\nInput settings:\n   [-]brkint     bre"...
.text:000000000000413A                 mov     edx, 5          ; category
.text:000000000000413F                 xor     edi, edi        ; domainname
.text:0000000000004141                 call    _dcgettext
.text:0000000000004146                 mov     rsi, rbx        ; stream
.text:0000000000004149                 mov     rdi, rax        ; s
.text:000000000000414C                 call    _fputs_unlocked
.text:0000000000004151                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004158                 lea     rsi, aImaxbelBeepAnd ; " * [-]imaxbel    beep and do not flush "...
.text:000000000000415F                 mov     edx, 5          ; category
.text:0000000000004164                 xor     edi, edi        ; domainname
.text:0000000000004166                 call    _dcgettext
.text:000000000000416B                 mov     rsi, rbx        ; stream
.text:000000000000416E                 mov     rdi, rax        ; s
.text:0000000000004171                 call    _fputs_unlocked
.text:0000000000004176                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000417D                 lea     rsi, aInlcrTranslate ; "   [-]inlcr      translate newline to c"...
.text:0000000000004184                 mov     edx, 5          ; category
.text:0000000000004189                 xor     edi, edi        ; domainname
.text:000000000000418B                 call    _dcgettext
.text:0000000000004190                 mov     rsi, rbx        ; stream
.text:0000000000004193                 mov     rdi, rax        ; s
.text:0000000000004196                 call    _fputs_unlocked
.text:000000000000419B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000041A2                 lea     rsi, aIutf8AssumeInp ; " * [-]iutf8      assume input character"...
.text:00000000000041A9                 mov     edx, 5          ; category
.text:00000000000041AE                 xor     edi, edi        ; domainname
.text:00000000000041B0                 call    _dcgettext
.text:00000000000041B5                 mov     rsi, rbx        ; stream
.text:00000000000041B8                 mov     rdi, rax        ; s
.text:00000000000041BB                 call    _fputs_unlocked
.text:00000000000041C0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000041C7                 lea     rsi, aIuclcTranslate ; " * [-]iuclc      translate uppercase ch"...
.text:00000000000041CE                 mov     edx, 5          ; category
.text:00000000000041D3                 xor     edi, edi        ; domainname
.text:00000000000041D5                 call    _dcgettext
.text:00000000000041DA                 mov     rsi, rbx        ; stream
.text:00000000000041DD                 mov     rdi, rax        ; s
.text:00000000000041E0                 call    _fputs_unlocked
.text:00000000000041E5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000041EC                 lea     rsi, aIxanyLetAnyCha ; " * [-]ixany      let any character rest"...
.text:00000000000041F3                 mov     edx, 5          ; category
.text:00000000000041F8                 xor     edi, edi        ; domainname
.text:00000000000041FA                 call    _dcgettext
.text:00000000000041FF                 mov     rsi, rbx        ; stream
.text:0000000000004202                 mov     rdi, rax        ; s
.text:0000000000004205                 call    _fputs_unlocked
.text:000000000000420A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004211                 lea     rsi, aIxoffEnableSen ; "   [-]ixoff      enable sending of star"...
.text:0000000000004218                 mov     edx, 5          ; category
.text:000000000000421D                 xor     edi, edi        ; domainname
.text:000000000000421F                 call    _dcgettext
.text:0000000000004224                 mov     rsi, rbx        ; stream
.text:0000000000004227                 mov     rdi, rax        ; s
.text:000000000000422A                 call    _fputs_unlocked
.text:000000000000422F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004236                 lea     rsi, aOutputSettings ; "\nOutput settings:\n"
.text:000000000000423D                 mov     edx, 5          ; category
.text:0000000000004242                 xor     edi, edi        ; domainname
.text:0000000000004244                 call    _dcgettext
.text:0000000000004249                 mov     rsi, rbx        ; stream
.text:000000000000424C                 mov     rdi, rax        ; s
.text:000000000000424F                 call    _fputs_unlocked
.text:0000000000004254                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000425B                 lea     rsi, aBsnBackspaceDe ; " * bsN           backspace delay style,"...
.text:0000000000004262                 mov     edx, 5          ; category
.text:0000000000004267                 xor     edi, edi        ; domainname
.text:0000000000004269                 call    _dcgettext
.text:000000000000426E                 mov     rsi, rbx        ; stream
.text:0000000000004271                 mov     rdi, rax        ; s
.text:0000000000004274                 call    _fputs_unlocked
.text:0000000000004279                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004280                 lea     rsi, aCrnCarriageRet ; " * crN           carriage return delay "...
.text:0000000000004287                 mov     edx, 5          ; category
.text:000000000000428C                 xor     edi, edi        ; domainname
.text:000000000000428E                 call    _dcgettext
.text:0000000000004293                 mov     rsi, rbx        ; stream
.text:0000000000004296                 mov     rdi, rax        ; s
.text:0000000000004299                 call    _fputs_unlocked
.text:000000000000429E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042A5                 lea     rsi, aFfnFormFeedDel ; " * ffN           form feed delay style,"...
.text:00000000000042AC                 xor     edi, edi        ; domainname
.text:00000000000042AE                 mov     edx, 5          ; category
.text:00000000000042B3                 call    _dcgettext
.text:00000000000042B8                 mov     rsi, rbx        ; stream
.text:00000000000042BB                 mov     rdi, rax        ; s
.text:00000000000042BE                 call    _fputs_unlocked
.text:00000000000042C3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042CA                 lea     rsi, aNlnNewlineDela ; " * nlN           newline delay style, N"...
.text:00000000000042D1                 mov     edx, 5          ; category
.text:00000000000042D6                 xor     edi, edi        ; domainname
.text:00000000000042D8                 call    _dcgettext
.text:00000000000042DD                 mov     rsi, rbx        ; stream
.text:00000000000042E0                 mov     rdi, rax        ; s
.text:00000000000042E3                 call    _fputs_unlocked
.text:00000000000042E8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042EF                 lea     rsi, aOcrnlTranslate ; " * [-]ocrnl      translate carriage ret"...
.text:00000000000042F6                 mov     edx, 5          ; category
.text:00000000000042FB                 xor     edi, edi        ; domainname
.text:00000000000042FD                 call    _dcgettext
.text:0000000000004302                 mov     rsi, rbx        ; stream
.text:0000000000004305                 mov     rdi, rax        ; s
.text:0000000000004308                 call    _fputs_unlocked
.text:000000000000430D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004314                 lea     rsi, aOfdelUseDelete ; " * [-]ofdel      use delete characters "...
.text:000000000000431B                 mov     edx, 5          ; category
.text:0000000000004320                 xor     edi, edi        ; domainname
.text:0000000000004322                 call    _dcgettext
.text:0000000000004327                 mov     rsi, rbx        ; stream
.text:000000000000432A                 mov     rdi, rax        ; s
.text:000000000000432D                 call    _fputs_unlocked
.text:0000000000004332                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004339                 lea     rsi, aOfillUseFillPa ; " * [-]ofill      use fill (padding) cha"...
.text:0000000000004340                 mov     edx, 5          ; category
.text:0000000000004345                 xor     edi, edi        ; domainname
.text:0000000000004347                 call    _dcgettext
.text:000000000000434C                 mov     rsi, rbx        ; stream
.text:000000000000434F                 mov     rdi, rax        ; s
.text:0000000000004352                 call    _fputs_unlocked
.text:0000000000004357                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000435E                 lea     rsi, aOlcucTranslate ; " * [-]olcuc      translate lowercase ch"...
.text:0000000000004365                 mov     edx, 5          ; category
.text:000000000000436A                 xor     edi, edi        ; domainname
.text:000000000000436C                 call    _dcgettext
.text:0000000000004371                 mov     rsi, rbx        ; stream
.text:0000000000004374                 mov     rdi, rax        ; s
.text:0000000000004377                 call    _fputs_unlocked
.text:000000000000437C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004383                 lea     rsi, aOnlcrTranslate ; " * [-]onlcr      translate newline to c"...
.text:000000000000438A                 mov     edx, 5          ; category
.text:000000000000438F                 xor     edi, edi        ; domainname
.text:0000000000004391                 call    _dcgettext
.text:0000000000004396                 mov     rsi, rbx        ; stream
.text:0000000000004399                 mov     rdi, rax        ; s
.text:000000000000439C                 call    _fputs_unlocked
.text:00000000000043A1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043A8                 lea     rsi, aOnlretNewlineP ; " * [-]onlret     newline performs a car"...
.text:00000000000043AF                 mov     edx, 5          ; category
.text:00000000000043B4                 xor     edi, edi        ; domainname
.text:00000000000043B6                 call    _dcgettext
.text:00000000000043BB                 mov     rsi, rbx        ; stream
.text:00000000000043BE                 mov     rdi, rax        ; s
.text:00000000000043C1                 call    _fputs_unlocked
.text:00000000000043C6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043CD                 lea     rsi, aOnocrDoNotPrin ; " * [-]onocr      do not print carriage "...
.text:00000000000043D4                 mov     edx, 5          ; category
.text:00000000000043D9                 xor     edi, edi        ; domainname
.text:00000000000043DB                 call    _dcgettext
.text:00000000000043E0                 mov     rsi, rbx        ; stream
.text:00000000000043E3                 mov     rdi, rax        ; s
.text:00000000000043E6                 call    _fputs_unlocked
.text:00000000000043EB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000043F2                 lea     rsi, aOpostPostproce ; "   [-]opost      postprocess output\n"
.text:00000000000043F9                 mov     edx, 5          ; category
.text:00000000000043FE                 xor     edi, edi        ; domainname
.text:0000000000004400                 call    _dcgettext
.text:0000000000004405                 mov     rsi, rbx        ; stream
.text:0000000000004408                 mov     rdi, rax        ; s
.text:000000000000440B                 call    _fputs_unlocked
.text:0000000000004410                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004417                 lea     rsi, aTabnHorizontal ; " * tabN          horizontal tab delay s"...
.text:000000000000441E                 mov     edx, 5          ; category
.text:0000000000004423                 xor     edi, edi        ; domainname
.text:0000000000004425                 call    _dcgettext
.text:000000000000442A                 mov     rsi, rbx        ; stream
.text:000000000000442D                 mov     rdi, rax        ; s
.text:0000000000004430                 call    _fputs_unlocked
.text:0000000000004435                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000443C                 lea     rsi, aVtnVerticalTab ; " * vtN           vertical tab delay sty"...
.text:0000000000004443                 mov     edx, 5          ; category
.text:0000000000004448                 xor     edi, edi        ; domainname
.text:000000000000444A                 call    _dcgettext
.text:000000000000444F                 mov     rsi, rbx        ; stream
.text:0000000000004452                 mov     rdi, rax        ; s
.text:0000000000004455                 call    _fputs_unlocked
.text:000000000000445A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004461                 lea     rsi, aLocalSettingsC ; "\nLocal settings:\n   [-]crterase   ech"...
.text:0000000000004468                 mov     edx, 5          ; category
.text:000000000000446D                 xor     edi, edi        ; domainname
.text:000000000000446F                 call    _dcgettext
.text:0000000000004474                 mov     rsi, rbx        ; stream
.text:0000000000004477                 mov     rdi, rax        ; s
.text:000000000000447A                 call    _fputs_unlocked
.text:000000000000447F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004486                 lea     rsi, aCrtkillKillAll ; " * crtkill       kill all line by obeyi"...
.text:000000000000448D                 mov     edx, 5          ; category
.text:0000000000004492                 xor     edi, edi        ; domainname
.text:0000000000004494                 call    _dcgettext
.text:0000000000004499                 mov     rsi, rbx        ; stream
.text:000000000000449C                 mov     rdi, rax        ; s
.text:000000000000449F                 call    _fputs_unlocked
.text:00000000000044A4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044AB                 lea     rsi, aCtlechoEchoCon ; " * [-]ctlecho    echo control character"...
.text:00000000000044B2                 mov     edx, 5          ; category
.text:00000000000044B7                 xor     edi, edi        ; domainname
.text:00000000000044B9                 call    _dcgettext
.text:00000000000044BE                 mov     rsi, rbx        ; stream
.text:00000000000044C1                 mov     rdi, rax        ; s
.text:00000000000044C4                 call    _fputs_unlocked
.text:00000000000044C9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044D0                 lea     rsi, aEchoEchoInputC ; "   [-]echo       echo input characters"...
.text:00000000000044D7                 mov     edx, 5          ; category
.text:00000000000044DC                 xor     edi, edi        ; domainname
.text:00000000000044DE                 call    _dcgettext
.text:00000000000044E3                 mov     rsi, rbx        ; stream
.text:00000000000044E6                 mov     rdi, rax        ; s
.text:00000000000044E9                 call    _fputs_unlocked
.text:00000000000044EE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044F5                 lea     rsi, aEchoctlSameAsC ; " * [-]echoctl    same as [-]ctlecho\n"
.text:00000000000044FC                 mov     edx, 5          ; category
.text:0000000000004501                 xor     edi, edi        ; domainname
.text:0000000000004503                 call    _dcgettext
.text:0000000000004508                 mov     rsi, rbx        ; stream
.text:000000000000450B                 mov     rdi, rax        ; s
.text:000000000000450E                 call    _fputs_unlocked
.text:0000000000004513                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000451A                 lea     rsi, aEchoeSameAsCrt ; "   [-]echoe      same as [-]crterase\n "...
.text:0000000000004521                 mov     edx, 5          ; category
.text:0000000000004526                 xor     edi, edi        ; domainname
.text:0000000000004528                 call    _dcgettext
.text:000000000000452D                 mov     rsi, rbx        ; stream
.text:0000000000004530                 mov     rdi, rax        ; s
.text:0000000000004533                 call    _fputs_unlocked
.text:0000000000004538                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000453F                 lea     rsi, aEchokeSameAsCr ; " * [-]echoke     same as [-]crtkill\n"
.text:0000000000004546                 mov     edx, 5          ; category
.text:000000000000454B                 xor     edi, edi        ; domainname
.text:000000000000454D                 call    _dcgettext
.text:0000000000004552                 mov     rsi, rbx        ; stream
.text:0000000000004555                 mov     rdi, rax        ; s
.text:0000000000004558                 call    _fputs_unlocked
.text:000000000000455D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004564                 lea     rsi, aEchonlEchoNewl ; "   [-]echonl     echo newline even if n"...
.text:000000000000456B                 mov     edx, 5          ; category
.text:0000000000004570                 xor     edi, edi        ; domainname
.text:0000000000004572                 call    _dcgettext
.text:0000000000004577                 mov     rsi, rbx        ; stream
.text:000000000000457A                 mov     rdi, rax        ; s
.text:000000000000457D                 call    _fputs_unlocked
.text:0000000000004582                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004589                 lea     rsi, aEchoprtEchoEra ; " * [-]echoprt    echo erased characters"...
.text:0000000000004590                 mov     edx, 5          ; category
.text:0000000000004595                 xor     edi, edi        ; domainname
.text:0000000000004597                 call    _dcgettext
.text:000000000000459C                 mov     rsi, rbx        ; stream
.text:000000000000459F                 mov     rdi, rax        ; s
.text:00000000000045A2                 call    _fputs_unlocked
.text:00000000000045A7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000045AE                 lea     rsi, aExtprocEnableL ; " * [-]extproc    enable \"LINEMODE\"; u"...
.text:00000000000045B5                 mov     edx, 5          ; category
.text:00000000000045BA                 xor     edi, edi        ; domainname
.text:00000000000045BC                 call    _dcgettext
.text:00000000000045C1                 mov     rsi, rbx        ; stream
.text:00000000000045C4                 mov     rdi, rax        ; s
.text:00000000000045C7                 call    _fputs_unlocked
.text:00000000000045CC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000045D3                 lea     rsi, aFlushoDiscardO ; " * [-]flusho     discard output\n"
.text:00000000000045DA                 mov     edx, 5          ; category
.text:00000000000045DF                 xor     edi, edi        ; domainname
.text:00000000000045E1                 call    _dcgettext
.text:00000000000045E6                 mov     rsi, rbx        ; stream
.text:00000000000045E9                 mov     rdi, rax        ; s
.text:00000000000045EC                 call    _fputs_unlocked
.text:00000000000045F1                 lea     rsi, aIcanonEnableSp ; "   [-]icanon     enable special charact"...
.text:00000000000045F8                 xor     edi, edi        ; domainname
.text:00000000000045FA                 mov     edx, 5          ; category
.text:00000000000045FF                 call    _dcgettext
.text:0000000000004604                 lea     rdx, aEraseKillWeras ; "erase, kill, werase, rprnt"
.text:000000000000460B                 mov     rsi, rax
.text:000000000000460E                 mov     edi, 1
.text:0000000000004613                 xor     eax, eax
.text:0000000000004615                 call    ___printf_chk
.text:000000000000461A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004621                 lea     rsi, aIsigEnableInte ; "   [-]isig       enable interrupt, quit"...
.text:0000000000004628                 mov     edx, 5          ; category
.text:000000000000462D                 xor     edi, edi        ; domainname
.text:000000000000462F                 call    _dcgettext
.text:0000000000004634                 mov     rsi, rbx        ; stream
.text:0000000000004637                 mov     rdi, rax        ; s
.text:000000000000463A                 call    _fputs_unlocked
.text:000000000000463F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004646                 lea     rsi, aPrteraseSameAs ; " * [-]prterase   same as [-]echoprt\n"
.text:000000000000464D                 mov     edx, 5          ; category
.text:0000000000004652                 xor     edi, edi        ; domainname
.text:0000000000004654                 call    _dcgettext
.text:0000000000004659                 mov     rsi, rbx        ; stream
.text:000000000000465C                 mov     rdi, rax        ; s
.text:000000000000465F                 call    _fputs_unlocked
.text:0000000000004664                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000466B                 lea     rsi, aTostopStopBack ; " * [-]tostop     stop background jobs t"...
.text:0000000000004672                 mov     edx, 5          ; category
.text:0000000000004677                 xor     edi, edi        ; domainname
.text:0000000000004679                 call    _dcgettext
.text:000000000000467E                 mov     rsi, rbx        ; stream
.text:0000000000004681                 mov     rdi, rax        ; s
.text:0000000000004684                 call    _fputs_unlocked
.text:0000000000004689                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004690                 lea     rsi, aXcaseWithIcano ; " * [-]xcase      with icanon, escape wi"...
.text:0000000000004697                 mov     edx, 5          ; category
.text:000000000000469C                 xor     edi, edi        ; domainname
.text:000000000000469E                 call    _dcgettext
.text:00000000000046A3                 mov     rsi, rbx        ; stream
.text:00000000000046A6                 mov     rdi, rax        ; s
.text:00000000000046A9                 call    _fputs_unlocked
.text:00000000000046AE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000046B5                 lea     rsi, aCombinationSet ; "\nCombination settings:\n"
.text:00000000000046BC                 mov     edx, 5          ; category
.text:00000000000046C1                 xor     edi, edi        ; domainname
.text:00000000000046C3                 call    _dcgettext
.text:00000000000046C8                 mov     rsi, rbx        ; stream
.text:00000000000046CB                 mov     rdi, rax        ; s
.text:00000000000046CE                 call    _fputs_unlocked
.text:00000000000046D3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000046DA                 lea     rsi, aLcaseSameAsLca ; " * [-]LCASE      same as [-]lcase\n"
.text:00000000000046E1                 mov     edx, 5          ; category
.text:00000000000046E6                 xor     edi, edi        ; domainname
.text:00000000000046E8                 call    _dcgettext
.text:00000000000046ED                 mov     rsi, rbx        ; stream
.text:00000000000046F0                 mov     rdi, rax        ; s
.text:00000000000046F3                 call    _fputs_unlocked
.text:00000000000046F8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000046FF                 lea     rsi, aCbreakSameAsIc ; "   cbreak        same as -icanon\n   -c"...
.text:0000000000004706                 mov     edx, 5          ; category
.text:000000000000470B                 xor     edi, edi        ; domainname
.text:000000000000470D                 call    _dcgettext
.text:0000000000004712                 mov     rsi, rbx        ; stream
.text:0000000000004715                 mov     rdi, rax        ; s
.text:0000000000004718                 call    _fputs_unlocked
.text:000000000000471D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004724                 lea     rsi, aCookedSameAsBr ; "   cooked        same as brkint ignpar "...
.text:000000000000472B                 mov     edx, 5          ; category
.text:0000000000004730                 xor     edi, edi        ; domainname
.text:0000000000004732                 call    _dcgettext
.text:0000000000004737                 mov     rsi, rbx        ; stream
.text:000000000000473A                 mov     rdi, rax        ; s
.text:000000000000473D                 call    _fputs_unlocked
.text:0000000000004742                 lea     rsi, aCrtSameAsS ; "   crt           same as %s\n"
.text:0000000000004749                 xor     edi, edi        ; domainname
.text:000000000000474B                 mov     edx, 5          ; category
.text:0000000000004750                 call    _dcgettext
.text:0000000000004755                 lea     rdx, aEchoeEchoctlEc ; "echoe echoctl echoke"
.text:000000000000475C                 mov     rsi, rax
.text:000000000000475F                 mov     edi, 1
.text:0000000000004764                 xor     eax, eax
.text:0000000000004766                 call    ___printf_chk
.text:000000000000476B                 lea     rsi, aDecSameAsSIntr ; "   dec           same as %s intr ^c era"...
.text:0000000000004772                 xor     edi, edi        ; domainname
.text:0000000000004774                 mov     edx, 5          ; category
.text:0000000000004779                 call    _dcgettext
.text:000000000000477E                 lea     rdx, aEchoeEchoctlEc_0 ; "echoe echoctl echoke -ixany"
.text:0000000000004785                 mov     rsi, rax
.text:0000000000004788                 mov     edi, 1
.text:000000000000478D                 xor     eax, eax
.text:000000000000478F                 call    ___printf_chk
.text:0000000000004794                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000479B                 lea     rsi, aDecctlqSameAsI ; " * [-]decctlq    same as [-]ixany\n"
.text:00000000000047A2                 mov     edx, 5          ; category
.text:00000000000047A7                 xor     edi, edi        ; domainname
.text:00000000000047A9                 call    _dcgettext
.text:00000000000047AE                 mov     rsi, rbx        ; stream
.text:00000000000047B1                 mov     rdi, rax        ; s
.text:00000000000047B4                 call    _fputs_unlocked
.text:00000000000047B9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000047C0                 lea     rsi, aEkEraseAndKill ; "   ek            erase and kill charact"...
.text:00000000000047C7                 mov     edx, 5          ; category
.text:00000000000047CC                 xor     edi, edi        ; domainname
.text:00000000000047CE                 call    _dcgettext
.text:00000000000047D3                 mov     rsi, rbx        ; stream
.text:00000000000047D6                 mov     rdi, rax        ; s
.text:00000000000047D9                 call    _fputs_unlocked
.text:00000000000047DE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000047E5                 lea     rsi, aLcaseSameAsXca ; " * [-]lcase      same as xcase iuclc ol"...
.text:00000000000047EC                 mov     edx, 5          ; category
.text:00000000000047F1                 xor     edi, edi        ; domainname
.text:00000000000047F3                 call    _dcgettext
.text:00000000000047F8                 mov     rsi, rbx        ; stream
.text:00000000000047FB                 mov     rdi, rax        ; s
.text:00000000000047FE                 call    _fputs_unlocked
.text:0000000000004803                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000480A                 lea     rsi, aLitoutSameAsPa ; "   litout        same as -parenb -istri"...
.text:0000000000004811                 mov     edx, 5          ; category
.text:0000000000004816                 xor     edi, edi        ; domainname
.text:0000000000004818                 call    _dcgettext
.text:000000000000481D                 mov     rsi, rbx        ; stream
.text:0000000000004820                 mov     rdi, rax        ; s
.text:0000000000004823                 call    _fputs_unlocked
.text:0000000000004828                 lea     rsi, aNlSameAsSNlSam ; "   nl            same as %s\n   -nl    "...
.text:000000000000482F                 xor     edi, edi        ; domainname
.text:0000000000004831                 mov     edx, 5          ; category
.text:0000000000004836                 call    _dcgettext
.text:000000000000483B                 lea     rcx, aIcrnlInlcrIgnc ; "icrnl -inlcr -igncr onlcr -ocrnl -onlre"...
.text:0000000000004842                 lea     rdx, aIcrnlOnlcr ; "-icrnl -onlcr"
.text:0000000000004849                 mov     rsi, rax
.text:000000000000484C                 mov     edi, 1
.text:0000000000004851                 xor     eax, eax
.text:0000000000004853                 call    ___printf_chk
.text:0000000000004858                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000485F                 lea     rsi, aOddpSameAsPare ; "   oddp          same as parenb parodd "...
.text:0000000000004866                 mov     edx, 5          ; category
.text:000000000000486B                 xor     edi, edi        ; domainname
.text:000000000000486D                 call    _dcgettext
.text:0000000000004872                 mov     rsi, rbx        ; stream
.text:0000000000004875                 mov     rdi, rax        ; s
.text:0000000000004878                 call    _fputs_unlocked
.text:000000000000487D                 lea     rsi, aRawSameAsIgnbr ; "   raw           same as -ignbrk -brkin"...
.text:0000000000004884                 xor     edi, edi        ; domainname
.text:0000000000004886                 mov     edx, 5          ; category
.text:000000000000488B                 call    _dcgettext
.text:0000000000004890                 lea     rdx, aIuclcIxanyImax ; " -iuclc -ixany -imaxbel -xcase"
.text:0000000000004897                 mov     rsi, rax
.text:000000000000489A                 mov     edi, 1
.text:000000000000489F                 xor     eax, eax
.text:00000000000048A1                 call    ___printf_chk
.text:00000000000048A6                 lea     rsi, aSaneSameAsCrea ; "   sane          same as cread -ignbrk "...
.text:00000000000048AD                 xor     edi, edi        ; domainname
.text:00000000000048AF                 mov     edx, 5          ; category
.text:00000000000048B4                 call    _dcgettext
.text:00000000000048B9                 lea     rcx, aOpostOfillOnlc ; "opost -ofill onlcr -onocr -onlret nl0 c"...
.text:00000000000048C0                 lea     r8, aIsigTostopOfde ; "isig -tostop -ofdel -echoprt echoctl ec"...
.text:00000000000048C7                 lea     rdx, aIxoffIutf8Iucl ; "-ixoff -iutf8 -iuclc -ixany imaxbel -xc"...
.text:00000000000048CE                 mov     rsi, rax
.text:00000000000048D1                 mov     edi, 1
.text:00000000000048D6                 xor     eax, eax
.text:00000000000048D8                 call    ___printf_chk
.text:00000000000048DD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000048E4                 lea     rsi, aHandleTheTtyLi ; "\nHandle the tty line connected to stan"...
.text:00000000000048EB                 mov     edx, 5          ; category
.text:00000000000048F0                 xor     edi, edi        ; domainname
.text:00000000000048F2                 call    _dcgettext
.text:00000000000048F7                 mov     rsi, rbx        ; stream
.text:00000000000048FA                 mov     rdi, rax        ; s
.text:00000000000048FD                 lea     rbx, aStty      ; "stty"
.text:0000000000004904                 call    _fputs_unlocked
.text:0000000000004909                 lea     rax, asc_B3FA   ; "["
.text:0000000000004910                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000004917                 mov     [rsp+0A8h+var_48], 0
.text:0000000000004920                 mov     [rsp+0A8h+var_40], 0
.text:0000000000004929                 mov     rdx, rsp
.text:000000000000492C                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000004930                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000004937                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000493C                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000004943                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000004948                 lea     rax, domainname ; "coreutils"
.text:000000000000494F                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000004954                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000495B                 mov     [rsp+0A8h+var_98], rax
.text:0000000000004960                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000004967                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000496C                 mov     [rsp+0A8h+var_90], rax
.text:0000000000004971                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000004978                 mov     [rsp+0A8h+var_88], rax
.text:000000000000497D                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004984                 mov     [rsp+0A8h+var_80], rax
.text:0000000000004989                 mov     [rsp+0A8h+var_70], rax
.text:000000000000498E                 mov     [rsp+0A8h+var_60], rax
.text:0000000000004993                 mov     [rsp+0A8h+var_50], rax
.text:0000000000004998                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: usage+D8D↓j
.text:00000000000049A0                 add     rdx, 10h
.text:00000000000049A4                 mov     rdi, [rdx]
.text:00000000000049A7                 test    rdi, rdi
.text:00000000000049AA                 jz      short loc_49BF
.text:00000000000049AC                 mov     ecx, 5
.text:00000000000049B1                 mov     rsi, rbx
.text:00000000000049B4                 repe cmpsb
.text:00000000000049B6                 setnbe  al
.text:00000000000049B9                 sbb     al, 0
.text:00000000000049BB                 test    al, al
.text:00000000000049BD                 jnz     short loc_49A0
.text:00000000000049BF
.text:00000000000049BF loc_49BF:                               ; CODE XREF: usage+D7A↑j
.text:00000000000049BF                 mov     r12, [rdx+8]
.text:00000000000049C3                 xor     edi, edi        ; domainname
.text:00000000000049C5                 mov     edx, 5          ; category
.text:00000000000049CA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000049D1                 test    r12, r12
.text:00000000000049D4                 jz      loc_4AE2
.text:00000000000049DA                 call    _dcgettext
.text:00000000000049DF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000049E6                 lea     rdx, unk_B470
.text:00000000000049ED                 mov     rsi, rax
.text:00000000000049F0                 mov     edi, 1
.text:00000000000049F5                 xor     eax, eax
.text:00000000000049F7                 call    ___printf_chk
.text:00000000000049FC                 xor     esi, esi        ; locale
.text:00000000000049FE                 mov     edi, 5          ; category
.text:0000000000004A03                 call    _setlocale
.text:0000000000004A08                 test    rax, rax
.text:0000000000004A0B                 jz      short loc_4A29
.text:0000000000004A0D                 lea     rsi, aEn        ; "en_"
.text:0000000000004A14                 mov     edx, 3          ; n
.text:0000000000004A19                 mov     rdi, rax        ; s1
.text:0000000000004A1C                 call    _strncmp
.text:0000000000004A21                 test    eax, eax
.text:0000000000004A23                 jnz     loc_4AB8
.text:0000000000004A29
.text:0000000000004A29 loc_4A29:                               ; CODE XREF: usage+DDB↑j
.text:0000000000004A29                                         ; usage+EAD↓j
.text:0000000000004A29                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004A30                 xor     edi, edi        ; domainname
.text:0000000000004A32                 mov     edx, 5          ; category
.text:0000000000004A37                 call    _dcgettext
.text:0000000000004A3C                 lea     rcx, aStty      ; "stty"
.text:0000000000004A43                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004A4A                 mov     rsi, rax
.text:0000000000004A4D                 mov     edi, 1
.text:0000000000004A52                 xor     eax, eax
.text:0000000000004A54                 call    ___printf_chk
.text:0000000000004A59                 cmp     r12, rbx
.text:0000000000004A5C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004A63                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004A6A                 cmovz   rbx, rcx
.text:0000000000004A6E
.text:0000000000004A6E loc_4A6E:                               ; CODE XREF: usage+F3B↓j
.text:0000000000004A6E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004A75                 xor     edi, edi        ; domainname
.text:0000000000004A77                 mov     edx, 5          ; category
.text:0000000000004A7C                 call    _dcgettext
.text:0000000000004A81                 mov     rcx, rbx
.text:0000000000004A84                 mov     rsi, rax
.text:0000000000004A87                 mov     rdx, r12
.text:0000000000004A8A                 mov     edi, 1
.text:0000000000004A8F                 xor     eax, eax
.text:0000000000004A91                 call    ___printf_chk
.text:0000000000004A96                 jmp     loc_3C86
.text:0000000000004A9B ; ---------------------------------------------------------------------------
.text:0000000000004A9B
.text:0000000000004A9B loc_4A9B:                               ; CODE XREF: usage+34E↑j
.text:0000000000004A9B                 lea     rsi, aOn        ; "on"
.text:0000000000004AA2                 xor     edi, edi        ; domainname
.text:0000000000004AA4                 call    _dcgettext
.text:0000000000004AA9                 mov     rbx, rax
.text:0000000000004AAC                 jmp     loc_3F95
.text:0000000000004AB1 ; ---------------------------------------------------------------------------
.text:0000000000004AB1
.text:0000000000004AB1 loc_4AB1:                               ; CODE XREF: usage+EFB↓j
.text:0000000000004AB1                 lea     r12, aStty      ; "stty"
.text:0000000000004AB8
.text:0000000000004AB8 loc_4AB8:                               ; CODE XREF: usage+DF3↑j
.text:0000000000004AB8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000004ABF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000004AC6                 xor     edi, edi        ; domainname
.text:0000000000004AC8                 mov     edx, 5          ; category
.text:0000000000004ACD                 call    _dcgettext
.text:0000000000004AD2                 mov     rsi, r13        ; stream
.text:0000000000004AD5                 mov     rdi, rax        ; s
.text:0000000000004AD8                 call    _fputs_unlocked
.text:0000000000004ADD                 jmp     loc_4A29
.text:0000000000004AE2 ; ---------------------------------------------------------------------------
.text:0000000000004AE2
.text:0000000000004AE2 loc_4AE2:                               ; CODE XREF: usage+DA4↑j
.text:0000000000004AE2                 call    _dcgettext
.text:0000000000004AE7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004AEE                 lea     rdx, unk_B470
.text:0000000000004AF5                 mov     rsi, rax
.text:0000000000004AF8                 mov     edi, 1
.text:0000000000004AFD                 xor     eax, eax
.text:0000000000004AFF                 call    ___printf_chk
.text:0000000000004B04                 xor     esi, esi        ; locale
.text:0000000000004B06                 mov     edi, 5          ; category
.text:0000000000004B0B                 call    _setlocale
.text:0000000000004B10                 test    rax, rax
.text:0000000000004B13                 jz      short loc_4B2D
.text:0000000000004B15                 lea     rsi, aEn        ; "en_"
.text:0000000000004B1C                 mov     edx, 3          ; n
.text:0000000000004B21                 mov     rdi, rax        ; s1
.text:0000000000004B24                 call    _strncmp
.text:0000000000004B29                 test    eax, eax
.text:0000000000004B2B                 jnz     short loc_4AB1
.text:0000000000004B2D
.text:0000000000004B2D loc_4B2D:                               ; CODE XREF: usage+EE3↑j
.text:0000000000004B2D                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004B34                 mov     edx, 5          ; category
.text:0000000000004B39                 xor     edi, edi        ; domainname
.text:0000000000004B3B                 lea     r12, aStty      ; "stty"
.text:0000000000004B42                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004B49                 call    _dcgettext
.text:0000000000004B4E                 lea     rcx, aStty      ; "stty"
.text:0000000000004B55                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004B5C                 mov     rsi, rax
.text:0000000000004B5F                 mov     edi, 1
.text:0000000000004B64                 xor     eax, eax
.text:0000000000004B66                 call    ___printf_chk
.text:0000000000004B6B                 jmp     loc_4A6E
.text:0000000000004B6B ; } // starts at 3C30
.text:0000000000004B6B usage           endp
.text:0000000000004B6B
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70
.text:0000000000004B70 apply_settings  proc near               ; CODE XREF: main+25F↑p
.text:0000000000004B70                                         ; main+30C↑p ...
.text:0000000000004B70
.text:0000000000004B70 endptr          = qword ptr -0A8h
.text:0000000000004B70 var_A0          = qword ptr -0A0h
.text:0000000000004B70 var_98          = qword ptr -98h
.text:0000000000004B70 termios_p       = qword ptr -90h
.text:0000000000004B70 var_88          = qword ptr -88h
.text:0000000000004B70 var_80          = qword ptr -80h
.text:0000000000004B70 var_78          = qword ptr -78h
.text:0000000000004B70 var_70          = dword ptr -70h
.text:0000000000004B70 var_6A          = byte ptr -6Ah
.text:0000000000004B70 var_69          = byte ptr -69h
.text:0000000000004B70 var_60          = qword ptr -60h
.text:0000000000004B70 var_58          = dword ptr -58h
.text:0000000000004B70 var_54          = dword ptr -54h
.text:0000000000004B70 var_50          = dword ptr -50h
.text:0000000000004B70 var_4C          = dword ptr -4Ch
.text:0000000000004B70 var_40          = qword ptr -40h
.text:0000000000004B70 arg_0           = qword ptr  8
.text:0000000000004B70
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 push    r15
.text:0000000000004B72                 push    r14
.text:0000000000004B74                 push    r13
.text:0000000000004B76                 push    r12
.text:0000000000004B78                 push    rbp
.text:0000000000004B79                 push    rbx
.text:0000000000004B7A                 sub     rsp, 78h
.text:0000000000004B7E                 mov     rax, [rsp+0A8h+arg_0]
.text:0000000000004B86                 mov     [rsp+0A8h+var_78], rsi
.text:0000000000004B8B                 mov     [rsp+0A8h+var_A0], rdx
.text:0000000000004B90                 mov     [rsp+0A8h+var_70], ecx
.text:0000000000004B94                 mov     [rsp+0A8h+termios_p], r8
.text:0000000000004B99                 mov     [rsp+0A8h+var_80], r9
.text:0000000000004B9E                 mov     [rsp+0A8h+var_88], rax
.text:0000000000004BA3                 mov     [rsp+0A8h+var_6A], dil
.text:0000000000004BA8                 mov     rax, fs:28h
.text:0000000000004BB1                 mov     [rsp+0A8h+var_40], rax
.text:0000000000004BB6                 xor     eax, eax
.text:0000000000004BB8                 cmp     ecx, 1
.text:0000000000004BBB                 jle     loc_4D10
.text:0000000000004BC1                 mov     ebp, 1
.text:0000000000004BC6                 lea     r14, mode_info
.text:0000000000004BCD                 jmp     short loc_4BF1
.text:0000000000004BCD ; ---------------------------------------------------------------------------
.text:0000000000004BCF                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 loc_4BD0:                               ; CODE XREF: apply_settings+D4↓j
.text:0000000000004BD0                 movzx   r13d, byte ptr [rsp+0A8h+endptr]
.text:0000000000004BD5                 xor     r13d, 1
.text:0000000000004BD9                 movzx   r13d, r13b
.text:0000000000004BDD                 mov     cs:tcsetattr_options, r13d
.text:0000000000004BE4
.text:0000000000004BE4 loc_4BE4:                               ; CODE XREF: apply_settings+9D↓j
.text:0000000000004BE4                                         ; apply_settings+16C↓j ...
.text:0000000000004BE4                 add     ebp, 1
.text:0000000000004BE7                 cmp     [rsp+0A8h+var_70], ebp
.text:0000000000004BEB                 jle     loc_4D10
.text:0000000000004BF1
.text:0000000000004BF1 loc_4BF1:                               ; CODE XREF: apply_settings+5D↑j
.text:0000000000004BF1                                         ; apply_settings+19A↓j
.text:0000000000004BF1                 movsxd  rax, ebp
.text:0000000000004BF4                 lea     rdx, ds:0[rax*8]
.text:0000000000004BFC                 mov     [rsp+0A8h+var_98], rdx
.text:0000000000004C01                 mov     rdx, [rsp+0A8h+var_A0]
.text:0000000000004C06                 mov     rbx, [rdx+rax*8]
.text:0000000000004C0A                 test    rbx, rbx
.text:0000000000004C0D                 jz      short loc_4BE4
.text:0000000000004C0F                 cmp     byte ptr [rbx], 2Dh ; '-'
.text:0000000000004C12                 mov     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000004C16                 jnz     short loc_4C20
.text:0000000000004C18                 add     rbx, 1
.text:0000000000004C1C                 mov     byte ptr [rsp+0A8h+endptr], 1
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: apply_settings+A6↑j
.text:0000000000004C20                 lea     rdi, aDrain+1   ; "drain"
.text:0000000000004C27                 mov     ecx, 6
.text:0000000000004C2C                 mov     rsi, rbx
.text:0000000000004C2F                 lea     r15, s1         ; "parenb"
.text:0000000000004C36                 repe cmpsb
.text:0000000000004C38                 setnbe  al
.text:0000000000004C3B                 sbb     al, 0
.text:0000000000004C3D                 xor     r13d, r13d
.text:0000000000004C40                 test    al, al
.text:0000000000004C42                 jnz     short loc_4C68
.text:0000000000004C44                 jmp     short loc_4BD0
.text:0000000000004C44 ; ---------------------------------------------------------------------------
.text:0000000000004C46                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: apply_settings+108↓j
.text:0000000000004C50                 add     r13, 1
.text:0000000000004C54                 mov     rax, r13
.text:0000000000004C57                 shl     rax, 5
.text:0000000000004C5B                 mov     r15, [r14+rax]
.text:0000000000004C5F                 test    r15, r15
.text:0000000000004C62                 jz      loc_4D38
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: apply_settings+D2↑j
.text:0000000000004C68                 mov     rsi, r15        ; s2
.text:0000000000004C6B                 mov     rdi, rbx        ; s1
.text:0000000000004C6E                 movsxd  r12, r13d
.text:0000000000004C71                 call    _strcmp
.text:0000000000004C76                 test    eax, eax
.text:0000000000004C78                 jnz     short loc_4C50
.text:0000000000004C7A                 shl     r12, 5
.text:0000000000004C7E                 add     r12, r14
.text:0000000000004C81                 movzx   eax, byte ptr [r12+0Ch]
.text:0000000000004C87                 test    al, 10h
.text:0000000000004C89                 jz      loc_4F00
.text:0000000000004C8F
.text:0000000000004C8F loc_4C8F:                               ; CODE XREF: apply_settings+1F7↓j
.text:0000000000004C8F                 lea     rdi, aIspeed    ; "ispeed"
.text:0000000000004C96                 mov     ecx, 7
.text:0000000000004C9B                 mov     rsi, rbx
.text:0000000000004C9E                 repe cmpsb
.text:0000000000004CA0                 setnbe  al
.text:0000000000004CA3                 sbb     al, 0
.text:0000000000004CA5                 test    al, al
.text:0000000000004CA7                 jnz     loc_4E80
.text:0000000000004CAD                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000004CB1                 sub     eax, 1
.text:0000000000004CB4                 cmp     eax, ebp
.text:0000000000004CB6                 jz      loc_5601
.text:0000000000004CBC                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000004CC1                 mov     rcx, [rsp+0A8h+var_98]
.text:0000000000004CC6                 mov     rdi, [rax+rcx+8] ; s1
.text:0000000000004CCB                 test    rdi, rdi
.text:0000000000004CCE                 jz      loc_5601
.text:0000000000004CD4                 add     ebp, 1
.text:0000000000004CD7                 cmp     [rsp+0A8h+var_6A], 0
.text:0000000000004CDC                 jnz     loc_4BE4
.text:0000000000004CE2                 call    string_to_baud
.text:0000000000004CE7                 mov     rdi, [rsp+0A8h+termios_p] ; termios_p
.text:0000000000004CEC                 mov     esi, eax        ; speed
.text:0000000000004CEE                 add     ebp, 1
.text:0000000000004CF1                 call    _cfsetispeed
.text:0000000000004CF6                 mov     rax, [rsp+0A8h+var_80]
.text:0000000000004CFB                 cmp     [rsp+0A8h+var_70], ebp
.text:0000000000004CFF                 mov     byte ptr [rax], 1
.text:0000000000004D02                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000004D07                 mov     byte ptr [rax], 1
.text:0000000000004D0A                 jg      loc_4BF1
.text:0000000000004D10
.text:0000000000004D10 loc_4D10:                               ; CODE XREF: apply_settings+4B↑j
.text:0000000000004D10                                         ; apply_settings+7B↑j
.text:0000000000004D10                 mov     rax, [rsp+0A8h+var_40]
.text:0000000000004D15                 xor     rax, fs:28h
.text:0000000000004D1E                 jnz     loc_565B
.text:0000000000004D24                 add     rsp, 78h
.text:0000000000004D28                 pop     rbx
.text:0000000000004D29                 pop     rbp
.text:0000000000004D2A                 pop     r12
.text:0000000000004D2C                 pop     r13
.text:0000000000004D2E                 pop     r14
.text:0000000000004D30                 pop     r15
.text:0000000000004D32                 retn
.text:0000000000004D32 ; ---------------------------------------------------------------------------
.text:0000000000004D33                 align 8
.text:0000000000004D38
.text:0000000000004D38 loc_4D38:                               ; CODE XREF: apply_settings+F2↑j
.text:0000000000004D38                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000004D3C                 jnz     loc_5099
.text:0000000000004D42                 lea     r15, off_20FE98 ; "quit"
.text:0000000000004D49                 xor     r12d, r12d
.text:0000000000004D4C                 lea     r13, aIntr      ; "intr"
.text:0000000000004D53                 jmp     short loc_4D6D
.text:0000000000004D53 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 8
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: apply_settings+20A↓j
.text:0000000000004D58                 add     r15, 18h
.text:0000000000004D5C                 mov     r13, [r15-18h]
.text:0000000000004D60                 add     r12d, 1
.text:0000000000004D64                 test    r13, r13
.text:0000000000004D67                 jz      loc_4C8F
.text:0000000000004D6D
.text:0000000000004D6D loc_4D6D:                               ; CODE XREF: apply_settings+1E3↑j
.text:0000000000004D6D                 mov     rsi, r13        ; s2
.text:0000000000004D70                 mov     rdi, rbx        ; s1
.text:0000000000004D73                 call    _strcmp
.text:0000000000004D78                 test    eax, eax
.text:0000000000004D7A                 jnz     short loc_4D58
.text:0000000000004D7C                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000004D80                 sub     eax, 1
.text:0000000000004D83                 cmp     eax, ebp
.text:0000000000004D85                 jz      loc_5601
.text:0000000000004D8B                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000004D90                 mov     rcx, [rsp+0A8h+var_98]
.text:0000000000004D95                 mov     r15, [rax+rcx+8]
.text:0000000000004D9A                 test    r15, r15
.text:0000000000004D9D                 jz      loc_5601
.text:0000000000004DA3                 lea     rdi, aMin       ; "min"
.text:0000000000004DAA                 movsxd  r12, r12d
.text:0000000000004DAD                 mov     ecx, 4
.text:0000000000004DB2                 mov     rsi, r13
.text:0000000000004DB5                 lea     rax, control_info
.text:0000000000004DBC                 add     ebp, 1
.text:0000000000004DBF                 lea     rdx, [r12+r12*2]
.text:0000000000004DC3                 repe cmpsb
.text:0000000000004DC5                 lea     rbx, [rax+rdx*8]
.text:0000000000004DC9                 setnbe  al
.text:0000000000004DCC                 sbb     al, 0
.text:0000000000004DCE                 test    al, al
.text:0000000000004DD0                 jz      loc_4FC0
.text:0000000000004DD6                 lea     rdi, aTime      ; "time"
.text:0000000000004DDD                 mov     ecx, 5
.text:0000000000004DE2                 mov     rsi, r13
.text:0000000000004DE5                 repe cmpsb
.text:0000000000004DE7                 setnbe  al
.text:0000000000004DEA                 sbb     al, 0
.text:0000000000004DEC                 test    al, al
.text:0000000000004DEE                 jz      loc_4FC0
.text:0000000000004DF4                 movzx   r13d, byte ptr [r15]
.text:0000000000004DF8                 test    r13b, r13b
.text:0000000000004DFB                 jz      short loc_4E58
.text:0000000000004DFD                 movzx   edx, byte ptr [r15+1]
.text:0000000000004E02                 test    dl, dl
.text:0000000000004E04                 jz      short loc_4E58
.text:0000000000004E06                 lea     rsi, asc_B54D   ; "^-"
.text:0000000000004E0D                 mov     rdi, r15        ; s1
.text:0000000000004E10                 mov     byte ptr [rsp+0A8h+endptr], dl
.text:0000000000004E13                 xor     r12d, r12d
.text:0000000000004E16                 call    _strcmp
.text:0000000000004E1B                 test    eax, eax
.text:0000000000004E1D                 jz      short loc_4E5C
.text:0000000000004E1F                 lea     rsi, aUndef_0   ; "undef"
.text:0000000000004E26                 mov     rdi, r15        ; s1
.text:0000000000004E29                 call    _strcmp
.text:0000000000004E2E                 test    eax, eax
.text:0000000000004E30                 jz      short loc_4E5C
.text:0000000000004E32                 cmp     r13b, 5Eh ; '^'
.text:0000000000004E36                 jnz     loc_4FC0
.text:0000000000004E3C                 movzx   edx, byte ptr [rsp+0A8h+endptr]
.text:0000000000004E40                 cmp     dl, 3Fh ; '?'
.text:0000000000004E43                 jz      loc_551F
.text:0000000000004E49                 mov     r12, rdx
.text:0000000000004E4C                 and     r12d, 9Fh
.text:0000000000004E53                 jmp     short loc_4E5C
.text:0000000000004E53 ; ---------------------------------------------------------------------------
.text:0000000000004E55                 align 8
.text:0000000000004E58
.text:0000000000004E58 loc_4E58:                               ; CODE XREF: apply_settings+28B↑j
.text:0000000000004E58                                         ; apply_settings+294↑j
.text:0000000000004E58                 movzx   r12d, r13b
.text:0000000000004E5C
.text:0000000000004E5C loc_4E5C:                               ; CODE XREF: apply_settings+2AD↑j
.text:0000000000004E5C                                         ; apply_settings+2C0↑j ...
.text:0000000000004E5C                 mov     rax, [rbx+10h]
.text:0000000000004E60                 mov     rcx, [rsp+0A8h+termios_p]
.text:0000000000004E65                 mov     [rcx+rax+11h], r12b
.text:0000000000004E6A                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000004E6F                 mov     byte ptr [rax], 1
.text:0000000000004E72                 jmp     loc_4BE4
.text:0000000000004E72 ; ---------------------------------------------------------------------------
.text:0000000000004E77                 align 20h
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: apply_settings+137↑j
.text:0000000000004E80                 lea     rdi, aOspeed    ; "ospeed"
.text:0000000000004E87                 mov     ecx, 7
.text:0000000000004E8C                 mov     rsi, rbx
.text:0000000000004E8F                 repe cmpsb
.text:0000000000004E91                 setnbe  al
.text:0000000000004E94                 sbb     al, 0
.text:0000000000004E96                 test    al, al
.text:0000000000004E98                 jnz     loc_4F48
.text:0000000000004E9E                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000004EA2                 sub     eax, 1
.text:0000000000004EA5                 cmp     eax, ebp
.text:0000000000004EA7                 jz      loc_5601
.text:0000000000004EAD                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000004EB2                 mov     rcx, [rsp+0A8h+var_98]
.text:0000000000004EB7                 mov     rdi, [rax+rcx+8] ; s1
.text:0000000000004EBC                 test    rdi, rdi
.text:0000000000004EBF                 jz      loc_5601
.text:0000000000004EC5                 add     ebp, 1
.text:0000000000004EC8                 cmp     [rsp+0A8h+var_6A], 0
.text:0000000000004ECD                 jnz     loc_4BE4
.text:0000000000004ED3                 call    string_to_baud
.text:0000000000004ED8                 mov     rdi, [rsp+0A8h+termios_p] ; termios_p
.text:0000000000004EDD                 mov     esi, eax        ; speed
.text:0000000000004EDF
.text:0000000000004EDF loc_4EDF:                               ; CODE XREF: apply_settings+84B↓j
.text:0000000000004EDF                 call    _cfsetospeed
.text:0000000000004EE4                 mov     rax, [rsp+0A8h+var_80]
.text:0000000000004EE9                 mov     byte ptr [rax], 1
.text:0000000000004EEC                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000004EF1                 mov     byte ptr [rax], 1
.text:0000000000004EF4                 jmp     loc_4BE4
.text:0000000000004EF4 ; ---------------------------------------------------------------------------
.text:0000000000004EF9                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: apply_settings+119↑j
.text:0000000000004F00                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000004F04                 jz      loc_4FD8
.text:0000000000004F0A                 test    al, 4
.text:0000000000004F0C                 jz      loc_5091
.text:0000000000004F12                 mov     rsi, [rsp+0A8h+termios_p]
.text:0000000000004F17                 mov     edi, [r12+8]
.text:0000000000004F1C                 call    mode_type_flag
.text:0000000000004F21                 test    rax, rax
.text:0000000000004F24                 jz      loc_52A9
.text:0000000000004F2A                 mov     rdx, [r12+10h]
.text:0000000000004F2F                 or      edx, [r12+18h]
.text:0000000000004F34                 not     edx
.text:0000000000004F36                 and     [rax], edx
.text:0000000000004F38                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000004F3D                 mov     byte ptr [rax], 1
.text:0000000000004F40                 jmp     loc_4BE4
.text:0000000000004F40 ; ---------------------------------------------------------------------------
.text:0000000000004F45                 align 8
.text:0000000000004F48
.text:0000000000004F48 loc_4F48:                               ; CODE XREF: apply_settings+328↑j
.text:0000000000004F48                 lea     rdi, aRows      ; "rows"
.text:0000000000004F4F                 mov     ecx, 5
.text:0000000000004F54                 mov     rsi, rbx
.text:0000000000004F57                 repe cmpsb
.text:0000000000004F59                 setnbe  al
.text:0000000000004F5C                 sbb     al, 0
.text:0000000000004F5E                 test    al, al
.text:0000000000004F60                 jnz     loc_500D
.text:0000000000004F66                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000004F6A                 sub     eax, 1
.text:0000000000004F6D                 cmp     eax, ebp
.text:0000000000004F6F                 jz      loc_5601
.text:0000000000004F75                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000004F7A                 mov     rcx, [rsp+0A8h+var_98]
.text:0000000000004F7F                 mov     rdi, [rax+rcx+8]
.text:0000000000004F84                 test    rdi, rdi
.text:0000000000004F87                 jz      loc_5601
.text:0000000000004F8D                 add     ebp, 1
.text:0000000000004F90                 cmp     [rsp+0A8h+var_6A], 0
.text:0000000000004F95                 jnz     loc_4BE4
.text:0000000000004F9B                 mov     esi, 7FFFFFFFh
.text:0000000000004FA0                 call    integer_arg
.text:0000000000004FA5                 mov     rdx, [rsp+0A8h+var_78]
.text:0000000000004FAA                 or      esi, 0FFFFFFFFh
.text:0000000000004FAD                 mov     edi, eax
.text:0000000000004FAF                 call    set_window_size
.text:0000000000004FB4                 jmp     loc_4BE4
.text:0000000000004FB4 ; ---------------------------------------------------------------------------
.text:0000000000004FB9                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: apply_settings+260↑j
.text:0000000000004FC0                                         ; apply_settings+27E↑j ...
.text:0000000000004FC0                 mov     esi, 0FFh
.text:0000000000004FC5                 mov     rdi, r15
.text:0000000000004FC8                 call    integer_arg
.text:0000000000004FCD                 mov     r12, rax
.text:0000000000004FD0                 jmp     loc_4E5C
.text:0000000000004FD0 ; ---------------------------------------------------------------------------
.text:0000000000004FD5                 align 8
.text:0000000000004FD8
.text:0000000000004FD8 loc_4FD8:                               ; CODE XREF: apply_settings+394↑j
.text:0000000000004FD8                 mov     rsi, [rsp+0A8h+termios_p]
.text:0000000000004FDD                 mov     edi, [r12+8]
.text:0000000000004FE2                 call    mode_type_flag
.text:0000000000004FE7                 test    rax, rax
.text:0000000000004FEA                 jz      loc_50D8
.text:0000000000004FF0                 mov     edx, [r12+18h]
.text:0000000000004FF5                 not     edx
.text:0000000000004FF7                 and     edx, [rax]
.text:0000000000004FF9                 or      edx, [r12+10h]
.text:0000000000004FFE                 mov     [rax], edx
.text:0000000000005000                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005005                 mov     byte ptr [rax], 1
.text:0000000000005008                 jmp     loc_4BE4
.text:000000000000500D ; ---------------------------------------------------------------------------
.text:000000000000500D
.text:000000000000500D loc_500D:                               ; CODE XREF: apply_settings+3F0↑j
.text:000000000000500D                 lea     rdi, aCols      ; "cols"
.text:0000000000005014                 mov     ecx, 5
.text:0000000000005019                 mov     rsi, rbx
.text:000000000000501C                 repe cmpsb
.text:000000000000501E                 setnbe  al
.text:0000000000005021                 sbb     al, 0
.text:0000000000005023                 test    al, al
.text:0000000000005025                 jz      short loc_503E
.text:0000000000005027                 lea     rsi, aColumns_0 ; "columns"
.text:000000000000502E                 mov     rdi, rbx        ; s1
.text:0000000000005031                 call    _strcmp
.text:0000000000005036                 test    eax, eax
.text:0000000000005038                 jnz     loc_5155
.text:000000000000503E
.text:000000000000503E loc_503E:                               ; CODE XREF: apply_settings+4B5↑j
.text:000000000000503E                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000005042                 sub     eax, 1
.text:0000000000005045                 cmp     eax, ebp
.text:0000000000005047                 jz      loc_5601
.text:000000000000504D                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000005052                 mov     rcx, [rsp+0A8h+var_98]
.text:0000000000005057                 mov     rdi, [rax+rcx+8]
.text:000000000000505C                 test    rdi, rdi
.text:000000000000505F                 jz      loc_5601
.text:0000000000005065                 add     ebp, 1
.text:0000000000005068                 cmp     [rsp+0A8h+var_6A], 0
.text:000000000000506D                 jnz     loc_4BE4
.text:0000000000005073                 mov     esi, 7FFFFFFFh
.text:0000000000005078                 call    integer_arg
.text:000000000000507D                 mov     rdx, [rsp+0A8h+var_78]
.text:0000000000005082                 mov     esi, eax
.text:0000000000005084                 or      edi, 0FFFFFFFFh
.text:0000000000005087                 call    set_window_size
.text:000000000000508C                 jmp     loc_4BE4
.text:0000000000005091 ; ---------------------------------------------------------------------------
.text:0000000000005091
.text:0000000000005091 loc_5091:                               ; CODE XREF: apply_settings+39C↑j
.text:0000000000005091                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005096                 mov     byte ptr [rax], 1
.text:0000000000005099
.text:0000000000005099 loc_5099:                               ; CODE XREF: apply_settings+1CC↑j
.text:0000000000005099                 lea     rdi, [rbx-1]
.text:000000000000509D                 call    quote
.text:00000000000050A2                 lea     rsi, aInvalidArgumen ; "invalid argument %s"
.text:00000000000050A9                 mov     rbx, rax
.text:00000000000050AC                 mov     edx, 5          ; category
.text:00000000000050B1
.text:00000000000050B1 loc_50B1:                               ; CODE XREF: apply_settings+9AA↓j
.text:00000000000050B1                                         ; apply_settings+AA8↓j
.text:00000000000050B1                 xor     edi, edi        ; domainname
.text:00000000000050B3                 call    _dcgettext
.text:00000000000050B8                 xor     edi, edi        ; status
.text:00000000000050BA                 mov     rdx, rax        ; format
.text:00000000000050BD                 mov     rcx, rbx
.text:00000000000050C0                 xor     esi, esi        ; errnum
.text:00000000000050C2                 xor     eax, eax
.text:00000000000050C4                 call    _error
.text:00000000000050C9                 mov     edi, 1          ; status
.text:00000000000050CE                 call    usage
.text:00000000000050CE ; ---------------------------------------------------------------------------
.text:00000000000050D3                 align 8
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: apply_settings+47A↑j
.text:00000000000050D8                 lea     rdi, aEvenp     ; "evenp"
.text:00000000000050DF                 mov     ecx, 6
.text:00000000000050E4                 mov     rsi, r15
.text:00000000000050E7                 repe cmpsb
.text:00000000000050E9                 setnbe  al
.text:00000000000050EC                 sbb     al, 0
.text:00000000000050EE                 test    al, al
.text:00000000000050F0                 jz      loc_5207
.text:00000000000050F6                 lea     rsi, aParity    ; "parity"
.text:00000000000050FD                 mov     rdi, r15        ; s1
.text:0000000000005100                 call    _strcmp
.text:0000000000005105                 test    eax, eax
.text:0000000000005107                 jz      loc_5207
.text:000000000000510D
.text:000000000000510D loc_510D:                               ; CODE XREF: apply_settings+B10↓j
.text:000000000000510D                 lea     rsi, aOddp      ; "oddp"
.text:0000000000005114                 mov     rdi, r15        ; s1
.text:0000000000005117                 call    _strcmp
.text:000000000000511C                 test    eax, eax
.text:000000000000511E                 jnz     loc_525D
.text:0000000000005124                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005128                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000512D                 mov     eax, [rcx+8]
.text:0000000000005130                 jnz     loc_52CB
.text:0000000000005136                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000513B                 and     eax, 0FFFFFCCFh
.text:0000000000005140                 or      eax, 320h
.text:0000000000005145                 mov     [rcx+8], eax
.text:0000000000005148                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000514D                 mov     byte ptr [rax], 1
.text:0000000000005150                 jmp     loc_4BE4
.text:0000000000005155 ; ---------------------------------------------------------------------------
.text:0000000000005155
.text:0000000000005155 loc_5155:                               ; CODE XREF: apply_settings+4C8↑j
.text:0000000000005155                 lea     rsi, aSize      ; "size"
.text:000000000000515C                 mov     rdi, rbx        ; s1
.text:000000000000515F                 call    _strcmp
.text:0000000000005164                 test    eax, eax
.text:0000000000005166                 jz      loc_522C
.text:000000000000516C                 lea     rsi, aLine      ; "line"
.text:0000000000005173                 mov     rdi, rbx        ; s1
.text:0000000000005176                 call    _strcmp
.text:000000000000517B                 test    eax, eax
.text:000000000000517D                 jnz     loc_52E3
.text:0000000000005183                 mov     eax, [rsp+0A8h+var_70]
.text:0000000000005187                 sub     eax, 1
.text:000000000000518A                 cmp     eax, ebp
.text:000000000000518C                 jz      loc_5601
.text:0000000000005192                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000005197                 mov     rcx, [rsp+0A8h+var_98]
.text:000000000000519C                 lea     r12, [rax+rcx+8]
.text:00000000000051A1                 mov     rdi, [r12]
.text:00000000000051A5                 test    rdi, rdi
.text:00000000000051A8                 jz      loc_5601
.text:00000000000051AE                 or      rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000051B2                 add     ebp, 1
.text:00000000000051B5                 call    integer_arg
.text:00000000000051BA                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000051BF                 test    rax, 0FFFFFFFFFFFFFF00h
.text:00000000000051C5                 mov     [rcx+10h], al
.text:00000000000051C8                 jz      short loc_51FA
.text:00000000000051CA                 mov     rdi, [r12]
.text:00000000000051CE                 call    quote
.text:00000000000051D3                 lea     rsi, aInvalidLineDis ; "invalid line discipline %s"
.text:00000000000051DA                 mov     rbx, rax
.text:00000000000051DD                 mov     edx, 5          ; category
.text:00000000000051E2                 xor     edi, edi        ; domainname
.text:00000000000051E4                 call    _dcgettext
.text:00000000000051E9                 mov     rcx, rbx
.text:00000000000051EC                 mov     rdx, rax        ; format
.text:00000000000051EF                 xor     esi, esi        ; errnum
.text:00000000000051F1                 xor     edi, edi        ; status
.text:00000000000051F3                 xor     eax, eax
.text:00000000000051F5                 call    _error
.text:00000000000051FA
.text:00000000000051FA loc_51FA:                               ; CODE XREF: apply_settings+658↑j
.text:00000000000051FA                                         ; apply_settings+A5C↓j ...
.text:00000000000051FA                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000051FF                 mov     byte ptr [rax], 1
.text:0000000000005202                 jmp     loc_4BE4
.text:0000000000005207 ; ---------------------------------------------------------------------------
.text:0000000000005207
.text:0000000000005207 loc_5207:                               ; CODE XREF: apply_settings+580↑j
.text:0000000000005207                                         ; apply_settings+597↑j
.text:0000000000005207                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000520C                 mov     eax, [rcx+8]
.text:000000000000520F                 mov     dword ptr [rsp+0A8h+endptr], eax
.text:0000000000005212                 and     eax, 0FFFFFCCFh
.text:0000000000005217                 or      eax, 120h
.text:000000000000521C                 mov     [rcx+8], eax
.text:000000000000521F                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005224                 mov     byte ptr [rax], 1
.text:0000000000005227                 jmp     loc_4BE4
.text:000000000000522C ; ---------------------------------------------------------------------------
.text:000000000000522C
.text:000000000000522C loc_522C:                               ; CODE XREF: apply_settings+5F6↑j
.text:000000000000522C                 cmp     [rsp+0A8h+var_6A], 0
.text:0000000000005231                 jnz     loc_4BE4
.text:0000000000005237                 call    screen_columns
.text:000000000000523C                 mov     rsi, [rsp+0A8h+var_78]
.text:0000000000005241                 xor     edi, edi
.text:0000000000005243                 mov     cs:max_col, eax
.text:0000000000005249                 mov     cs:current_col, 0
.text:0000000000005253                 call    display_window_size
.text:0000000000005258                 jmp     loc_4BE4
.text:000000000000525D ; ---------------------------------------------------------------------------
.text:000000000000525D
.text:000000000000525D loc_525D:                               ; CODE XREF: apply_settings+5AE↑j
.text:000000000000525D                 lea     rsi, aNl        ; "nl"
.text:0000000000005264                 mov     rdi, r15        ; s1
.text:0000000000005267                 call    _strcmp
.text:000000000000526C                 test    eax, eax
.text:000000000000526E                 jnz     loc_5321
.text:0000000000005274                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005278                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000527D                 mov     eax, [rcx+4]
.text:0000000000005280                 mov     edx, [rcx]
.text:0000000000005282                 jz      loc_53C0
.text:0000000000005288                 and     eax, 0FFFFFFD3h
.text:000000000000528B                 and     edx, 0FFFFFE3Fh
.text:0000000000005291                 or      eax, 4
.text:0000000000005294                 or      dh, 1
.text:0000000000005297                 mov     [rcx+4], eax
.text:000000000000529A                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000529F                 mov     [rcx], edx
.text:00000000000052A1                 mov     byte ptr [rax], 1
.text:00000000000052A4                 jmp     loc_4BE4
.text:00000000000052A9 ; ---------------------------------------------------------------------------
.text:00000000000052A9
.text:00000000000052A9 loc_52A9:                               ; CODE XREF: apply_settings+3B4↑j
.text:00000000000052A9                 lea     rsi, aEvenp     ; "evenp"
.text:00000000000052B0                 mov     rdi, r15        ; s1
.text:00000000000052B3                 call    _strcmp
.text:00000000000052B8                 test    eax, eax
.text:00000000000052BA                 jnz     loc_5669
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: apply_settings+B0A↓j
.text:00000000000052C0                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000052C5                 mov     eax, [rcx+8]
.text:00000000000052C8                 mov     dword ptr [rsp+0A8h+endptr], eax
.text:00000000000052CB
.text:00000000000052CB loc_52CB:                               ; CODE XREF: apply_settings+5C0↑j
.text:00000000000052CB                 and     eax, 0FFFFFECFh
.text:00000000000052D0                 or      eax, 30h
.text:00000000000052D3                 mov     [rcx+8], eax
.text:00000000000052D6                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000052DB                 mov     byte ptr [rax], 1
.text:00000000000052DE                 jmp     loc_4BE4
.text:00000000000052E3 ; ---------------------------------------------------------------------------
.text:00000000000052E3
.text:00000000000052E3 loc_52E3:                               ; CODE XREF: apply_settings+60D↑j
.text:00000000000052E3                 lea     rsi, aIspeed+1  ; s2
.text:00000000000052EA                 mov     rdi, rbx        ; s1
.text:00000000000052ED                 call    _strcmp
.text:00000000000052F2                 test    eax, eax
.text:00000000000052F4                 jnz     loc_538B
.text:00000000000052FA                 cmp     [rsp+0A8h+var_6A], 0
.text:00000000000052FF                 jnz     loc_4BE4
.text:0000000000005305                 call    screen_columns
.text:000000000000530A                 mov     rdi, [rsp+0A8h+termios_p] ; termios_p
.text:000000000000530F                 xor     esi, esi
.text:0000000000005311                 mov     cs:max_col, eax
.text:0000000000005317                 call    display_speed
.text:000000000000531C                 jmp     loc_4BE4
.text:0000000000005321 ; ---------------------------------------------------------------------------
.text:0000000000005321
.text:0000000000005321 loc_5321:                               ; CODE XREF: apply_settings+6FE↑j
.text:0000000000005321                 lea     rsi, aEk        ; "ek"
.text:0000000000005328                 mov     rdi, r15        ; s1
.text:000000000000532B                 call    _strcmp
.text:0000000000005330                 test    eax, eax
.text:0000000000005332                 jz      loc_53DD
.text:0000000000005338                 lea     rsi, aSane      ; "sane"
.text:000000000000533F                 mov     rdi, r15        ; s1
.text:0000000000005342                 call    _strcmp
.text:0000000000005347                 test    eax, eax
.text:0000000000005349                 jz      loc_5578
.text:000000000000534F                 lea     rsi, aCbreak    ; "cbreak"
.text:0000000000005356                 mov     rdi, r15        ; s1
.text:0000000000005359                 call    _strcmp
.text:000000000000535E                 test    eax, eax
.text:0000000000005360                 jnz     loc_552A
.text:0000000000005366                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:000000000000536A                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000536F                 mov     eax, [rcx+0Ch]
.text:0000000000005372                 jz      loc_5685
.text:0000000000005378                 or      eax, 2
.text:000000000000537B                 mov     [rcx+0Ch], eax
.text:000000000000537E                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005383                 mov     byte ptr [rax], 1
.text:0000000000005386                 jmp     loc_4BE4
.text:000000000000538B ; ---------------------------------------------------------------------------
.text:000000000000538B
.text:000000000000538B loc_538B:                               ; CODE XREF: apply_settings+784↑j
.text:000000000000538B                 mov     rdi, rbx        ; s1
.text:000000000000538E                 call    string_to_baud
.text:0000000000005393                 cmp     eax, 0FFFFFFFFh
.text:0000000000005396                 mov     r12d, eax
.text:0000000000005399                 jz      short loc_53F5
.text:000000000000539B                 cmp     [rsp+0A8h+var_6A], 0
.text:00000000000053A0                 jnz     loc_4BE4
.text:00000000000053A6                 mov     rbx, [rsp+0A8h+termios_p]
.text:00000000000053AB                 mov     esi, eax        ; speed
.text:00000000000053AD                 mov     rdi, rbx        ; termios_p
.text:00000000000053B0                 call    _cfsetispeed
.text:00000000000053B5                 mov     esi, r12d
.text:00000000000053B8                 mov     rdi, rbx
.text:00000000000053BB                 jmp     loc_4EDF
.text:00000000000053C0 ; ---------------------------------------------------------------------------
.text:00000000000053C0
.text:00000000000053C0 loc_53C0:                               ; CODE XREF: apply_settings+712↑j
.text:00000000000053C0                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000053C5                 and     eax, 0FFFFFFFBh
.text:00000000000053C8                 and     dh, 0FEh
.text:00000000000053CB                 mov     [rcx+4], eax
.text:00000000000053CE                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000053D3                 mov     [rcx], edx
.text:00000000000053D5                 mov     byte ptr [rax], 1
.text:00000000000053D8                 jmp     loc_4BE4
.text:00000000000053DD ; ---------------------------------------------------------------------------
.text:00000000000053DD
.text:00000000000053DD loc_53DD:                               ; CODE XREF: apply_settings+7C2↑j
.text:00000000000053DD                 mov     rax, [rsp+0A8h+termios_p]
.text:00000000000053E2                 mov     word ptr [rax+13h], 157Fh
.text:00000000000053E8                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000053ED                 mov     byte ptr [rax], 1
.text:00000000000053F0                 jmp     loc_4BE4
.text:00000000000053F5 ; ---------------------------------------------------------------------------
.text:00000000000053F5
.text:00000000000053F5 loc_53F5:                               ; CODE XREF: apply_settings+829↑j
.text:00000000000053F5                 call    ___errno_location
.text:00000000000053FA                 mov     r12, rax
.text:00000000000053FD                 lea     rax, [rsp+0A8h+var_60]
.text:0000000000005402                 mov     r13, rbx
.text:0000000000005405                 xor     r15d, r15d
.text:0000000000005408                 mov     [rsp+0A8h+endptr], rax
.text:000000000000540C
.text:000000000000540C loc_540C:                               ; CODE XREF: apply_settings+8F3↓j
.text:000000000000540C                 mov     rsi, [rsp+0A8h+endptr] ; endptr
.text:0000000000005410                 mov     dword ptr [r12], 0
.text:0000000000005418                 mov     edx, 10h        ; base
.text:000000000000541D                 mov     rdi, r13        ; nptr
.text:0000000000005420                 call    _strtoul
.text:0000000000005425                 cmp     dword ptr [r12], 0
.text:000000000000542A                 jnz     loc_5503
.text:0000000000005430                 mov     rdx, [rsp+0A8h+var_60]
.text:0000000000005435                 cmp     byte ptr [rdx], 3Ah ; ':'
.text:0000000000005438                 jnz     loc_5503
.text:000000000000543E                 cmp     rdx, r13
.text:0000000000005441                 jz      loc_5503
.text:0000000000005447                 mov     ecx, eax
.text:0000000000005449                 cmp     rax, rcx
.text:000000000000544C                 jnz     loc_5503
.text:0000000000005452                 mov     [rsp+r15*4+0A8h+var_58], eax
.text:0000000000005457                 add     r15, 1
.text:000000000000545B                 lea     r13, [rdx+1]
.text:000000000000545F                 cmp     r15, 4
.text:0000000000005463                 jnz     short loc_540C
.text:0000000000005465                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000546A                 mov     eax, [rsp+0A8h+var_58]
.text:000000000000546E                 xor     r15d, r15d
.text:0000000000005471                 mov     dword ptr [rsp+0A8h+var_98], ebp
.text:0000000000005475                 xor     r9d, r9d
.text:0000000000005478                 mov     rbp, rbx
.text:000000000000547B                 mov     [rcx], eax
.text:000000000000547D                 mov     eax, [rsp+0A8h+var_54]
.text:0000000000005481                 mov     [rcx+4], eax
.text:0000000000005484                 mov     eax, [rsp+0A8h+var_50]
.text:0000000000005488                 mov     [rcx+8], eax
.text:000000000000548B                 mov     eax, [rsp+0A8h+var_4C]
.text:000000000000548F                 mov     [rcx+0Ch], eax
.text:0000000000005492                 jmp     short loc_54CC
.text:0000000000005494 ; ---------------------------------------------------------------------------
.text:0000000000005494
.text:0000000000005494 loc_5494:                               ; CODE XREF: apply_settings+98E↓j
.text:0000000000005494                 mov     rdx, [rsp+0A8h+var_60]
.text:0000000000005499                 cmp     [rdx], bl
.text:000000000000549B                 jnz     short loc_5500
.text:000000000000549D                 cmp     rdx, r13
.text:00000000000054A0                 jz      short loc_5500
.text:00000000000054A2                 test    rax, 0FFFFFFFFFFFFFF00h
.text:00000000000054A8                 jnz     short loc_5500
.text:00000000000054AA                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000054AF                 lea     r13, [rdx+1]
.text:00000000000054B3                 movzx   r9d, [rsp+0A8h+var_69]
.text:00000000000054B9                 mov     [rcx+r15+11h], al
.text:00000000000054BE                 add     r15, 1
.text:00000000000054C2                 cmp     r15, 20h ; ' '
.text:00000000000054C6                 jz      loc_5660
.text:00000000000054CC
.text:00000000000054CC loc_54CC:                               ; CODE XREF: apply_settings+922↑j
.text:00000000000054CC                 mov     rsi, [rsp+0A8h+endptr] ; endptr
.text:00000000000054D0                 cmp     r15, 1Fh
.text:00000000000054D4                 mov     eax, 3Ah ; ':'
.text:00000000000054D9                 cmovz   eax, r9d
.text:00000000000054DD                 mov     dword ptr [r12], 0
.text:00000000000054E5                 mov     edx, 10h        ; base
.text:00000000000054EA                 mov     rdi, r13        ; nptr
.text:00000000000054ED                 mov     [rsp+0A8h+var_69], r9b
.text:00000000000054F2                 mov     ebx, eax
.text:00000000000054F4                 call    _strtoul
.text:00000000000054F9                 cmp     dword ptr [r12], 0
.text:00000000000054FE                 jz      short loc_5494
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: apply_settings+92B↑j
.text:0000000000005500                                         ; apply_settings+930↑j ...
.text:0000000000005500                 mov     rbx, rbp
.text:0000000000005503
.text:0000000000005503 loc_5503:                               ; CODE XREF: apply_settings+8BA↑j
.text:0000000000005503                                         ; apply_settings+8C8↑j ...
.text:0000000000005503                 mov     rdi, rbx
.text:0000000000005506                 call    quote
.text:000000000000550B                 mov     edx, 5
.text:0000000000005510                 mov     rbx, rax
.text:0000000000005513                 lea     rsi, aInvalidArgumen ; "invalid argument %s"
.text:000000000000551A                 jmp     loc_50B1
.text:000000000000551F ; ---------------------------------------------------------------------------
.text:000000000000551F
.text:000000000000551F loc_551F:                               ; CODE XREF: apply_settings+2D3↑j
.text:000000000000551F                 mov     r12d, 7Fh
.text:0000000000005525                 jmp     loc_4E5C
.text:000000000000552A ; ---------------------------------------------------------------------------
.text:000000000000552A
.text:000000000000552A loc_552A:                               ; CODE XREF: apply_settings+7F0↑j
.text:000000000000552A                 lea     rsi, aPass8     ; "pass8"
.text:0000000000005531                 mov     rdi, r15        ; s1
.text:0000000000005534                 call    _strcmp
.text:0000000000005539                 test    eax, eax
.text:000000000000553B                 jnz     loc_56BA
.text:0000000000005541                 mov     rcx, [rsp+0A8h+termios_p]
.text:0000000000005546                 mov     eax, [rcx+8]
.text:0000000000005549                 mov     edx, [rcx]
.text:000000000000554B                 mov     dword ptr [rsp+0A8h+var_98], eax
.text:000000000000554F                 and     eax, 0FFFFFECFh
.text:0000000000005554                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005558                 jz      loc_569D
.text:000000000000555E                 or      eax, 120h
.text:0000000000005563                 or      edx, 20h
.text:0000000000005566                 mov     [rcx+8], eax
.text:0000000000005569                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000556E                 mov     [rcx], edx
.text:0000000000005570                 mov     byte ptr [rax], 1
.text:0000000000005573                 jmp     loc_4BE4
.text:0000000000005578 ; ---------------------------------------------------------------------------
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: apply_settings+7D9↑j
.text:0000000000005578                 lea     rax, control_info
.text:000000000000557F
.text:000000000000557F loc_557F:                               ; CODE XREF: apply_settings+A2B↓j
.text:000000000000557F                 add     rax, 18h
.text:0000000000005583                 cmp     qword ptr [rax-18h], 0
.text:0000000000005588                 jz      short loc_559D
.text:000000000000558A                 movzx   ecx, byte ptr [rax-10h]
.text:000000000000558E                 mov     rdx, [rax-8]
.text:0000000000005592                 mov     rsi, [rsp+0A8h+termios_p]
.text:0000000000005597                 mov     [rsi+rdx+11h], cl
.text:000000000000559B                 jmp     short loc_557F
.text:000000000000559D ; ---------------------------------------------------------------------------
.text:000000000000559D
.text:000000000000559D loc_559D:                               ; CODE XREF: apply_settings+A18↑j
.text:000000000000559D                 lea     rbx, mode_info
.text:00000000000055A4                 jmp     short loc_55C8
.text:00000000000055A6 ; ---------------------------------------------------------------------------
.text:00000000000055A6
.text:00000000000055A6 loc_55A6:                               ; CODE XREF: apply_settings+A6C↓j
.text:00000000000055A6                 mov     edi, [rbx+8]
.text:00000000000055A9                 mov     rsi, [rsp+0A8h+termios_p]
.text:00000000000055AE                 call    mode_type_flag
.text:00000000000055B3                 test    rax, rax
.text:00000000000055B6                 jz      short loc_561D
.text:00000000000055B8                 mov     edx, [rbx+18h]
.text:00000000000055BB                 not     edx
.text:00000000000055BD                 and     edx, [rax]
.text:00000000000055BF                 or      edx, [rbx+10h]
.text:00000000000055C2                 mov     [rax], edx
.text:00000000000055C4
.text:00000000000055C4 loc_55C4:                               ; CODE XREF: apply_settings+A68↓j
.text:00000000000055C4                                         ; apply_settings+A70↓j ...
.text:00000000000055C4                 add     rbx, 20h ; ' '
.text:00000000000055C8
.text:00000000000055C8 loc_55C8:                               ; CODE XREF: apply_settings+A34↑j
.text:00000000000055C8                 cmp     qword ptr [rbx], 0
.text:00000000000055CC                 jz      loc_51FA
.text:00000000000055D2                 movzx   eax, byte ptr [rbx+0Ch]
.text:00000000000055D6                 test    al, 10h
.text:00000000000055D8                 jnz     short loc_55C4
.text:00000000000055DA                 test    al, 1
.text:00000000000055DC                 jnz     short loc_55A6
.text:00000000000055DE                 test    al, 2
.text:00000000000055E0                 jz      short loc_55C4
.text:00000000000055E2                 mov     edi, [rbx+8]
.text:00000000000055E5                 mov     rsi, [rsp+0A8h+termios_p]
.text:00000000000055EA                 call    mode_type_flag
.text:00000000000055EF                 test    rax, rax
.text:00000000000055F2                 jz      short loc_563C
.text:00000000000055F4                 mov     rdx, [rbx+10h]
.text:00000000000055F8                 or      edx, [rbx+18h]
.text:00000000000055FB                 not     edx
.text:00000000000055FD                 and     [rax], edx
.text:00000000000055FF                 jmp     short loc_55C4
.text:0000000000005601 ; ---------------------------------------------------------------------------
.text:0000000000005601
.text:0000000000005601 loc_5601:                               ; CODE XREF: apply_settings+146↑j
.text:0000000000005601                                         ; apply_settings+15E↑j ...
.text:0000000000005601                 mov     rdi, rbx
.text:0000000000005604                 call    quote
.text:0000000000005609                 mov     edx, 5
.text:000000000000560E                 mov     rbx, rax
.text:0000000000005611                 lea     rsi, aMissingArgumen ; "missing argument to %s"
.text:0000000000005618                 jmp     loc_50B1
.text:000000000000561D ; ---------------------------------------------------------------------------
.text:000000000000561D
.text:000000000000561D loc_561D:                               ; CODE XREF: apply_settings+A46↑j
.text:000000000000561D                 lea     rcx, __PRETTY_FUNCTION___7410 ; "sane_mode"
.text:0000000000005624                 lea     rsi, file       ; "../coreutils-8.31/src/stty.c"
.text:000000000000562B                 lea     rdi, assertion  ; "bitsp"
.text:0000000000005632                 mov     edx, 8CBh       ; line
.text:0000000000005637                 call    ___assert_fail
.text:000000000000563C ; ---------------------------------------------------------------------------
.text:000000000000563C
.text:000000000000563C loc_563C:                               ; CODE XREF: apply_settings+A82↑j
.text:000000000000563C                 lea     rcx, __PRETTY_FUNCTION___7410 ; "sane_mode"
.text:0000000000005643                 lea     rsi, file       ; "../coreutils-8.31/src/stty.c"
.text:000000000000564A                 lea     rdi, assertion  ; "bitsp"
.text:0000000000005651                 mov     edx, 8D1h       ; line
.text:0000000000005656                 call    ___assert_fail
.text:000000000000565B ; ---------------------------------------------------------------------------
.text:000000000000565B
.text:000000000000565B loc_565B:                               ; CODE XREF: apply_settings+1AE↑j
.text:000000000000565B                 call    ___stack_chk_fail
.text:0000000000005660 ; ---------------------------------------------------------------------------
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: apply_settings+956↑j
.text:0000000000005660                 mov     ebp, dword ptr [rsp+0A8h+var_98]
.text:0000000000005664                 jmp     loc_51FA
.text:0000000000005669 ; ---------------------------------------------------------------------------
.text:0000000000005669
.text:0000000000005669 loc_5669:                               ; CODE XREF: apply_settings+74A↑j
.text:0000000000005669                 lea     rsi, aParity    ; "parity"
.text:0000000000005670                 mov     rdi, r15        ; s1
.text:0000000000005673                 call    _strcmp
.text:0000000000005678                 test    eax, eax
.text:000000000000567A                 jz      loc_52C0
.text:0000000000005680                 jmp     loc_510D
.text:0000000000005685 ; ---------------------------------------------------------------------------
.text:0000000000005685
.text:0000000000005685 loc_5685:                               ; CODE XREF: apply_settings+802↑j
.text:0000000000005685                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000568A                 and     eax, 0FFFFFFFDh
.text:000000000000568D                 mov     [rcx+0Ch], eax
.text:0000000000005690                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005695                 mov     byte ptr [rax], 1
.text:0000000000005698                 jmp     loc_4BE4
.text:000000000000569D ; ---------------------------------------------------------------------------
.text:000000000000569D
.text:000000000000569D loc_569D:                               ; CODE XREF: apply_settings+9E8↑j
.text:000000000000569D                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000056A2                 or      eax, 30h
.text:00000000000056A5                 and     edx, 0FFFFFFDFh
.text:00000000000056A8                 mov     [rcx+8], eax
.text:00000000000056AB                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000056B0                 mov     [rcx], edx
.text:00000000000056B2                 mov     byte ptr [rax], 1
.text:00000000000056B5                 jmp     loc_4BE4
.text:00000000000056BA ; ---------------------------------------------------------------------------
.text:00000000000056BA
.text:00000000000056BA loc_56BA:                               ; CODE XREF: apply_settings+9CB↑j
.text:00000000000056BA                 lea     rsi, aLitout    ; "litout"
.text:00000000000056C1                 mov     rdi, r15        ; s1
.text:00000000000056C4                 call    _strcmp
.text:00000000000056C9                 test    eax, eax
.text:00000000000056CB                 jnz     short loc_570D
.text:00000000000056CD                 mov     rsi, [rsp+0A8h+termios_p]
.text:00000000000056D2                 mov     eax, [rsi+8]
.text:00000000000056D5                 mov     edx, [rsi+4]
.text:00000000000056D8                 mov     ecx, [rsi]
.text:00000000000056DA                 mov     dword ptr [rsp+0A8h+var_98], eax
.text:00000000000056DE                 and     eax, 0FFFFFECFh
.text:00000000000056E3                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:00000000000056E7                 jz      loc_5795
.text:00000000000056ED                 or      eax, 120h
.text:00000000000056F2                 or      ecx, 20h
.text:00000000000056F5                 or      edx, 1
.text:00000000000056F8                 mov     [rsi+8], eax
.text:00000000000056FB                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005700                 mov     [rsi], ecx
.text:0000000000005702                 mov     [rsi+4], edx
.text:0000000000005705                 mov     byte ptr [rax], 1
.text:0000000000005708                 jmp     loc_4BE4
.text:000000000000570D ; ---------------------------------------------------------------------------
.text:000000000000570D
.text:000000000000570D loc_570D:                               ; CODE XREF: apply_settings+B5B↑j
.text:000000000000570D                 lea     rsi, aRaw       ; "raw"
.text:0000000000005714                 mov     rdi, r15        ; s1
.text:0000000000005717                 call    _strcmp
.text:000000000000571C                 test    eax, eax
.text:000000000000571E                 jz      short loc_5737
.text:0000000000005720                 lea     rsi, aCooked    ; "cooked"
.text:0000000000005727                 mov     rdi, r15        ; s1
.text:000000000000572A                 call    _strcmp
.text:000000000000572F                 test    eax, eax
.text:0000000000005731                 jnz     loc_57B8
.text:0000000000005737
.text:0000000000005737 loc_5737:                               ; CODE XREF: apply_settings+BAE↑j
.text:0000000000005737                 movzx   eax, byte ptr [r15]
.text:000000000000573B                 cmp     al, 72h ; 'r'
.text:000000000000573D                 jz      short loc_576F
.text:000000000000573F                 cmp     al, 63h ; 'c'
.text:0000000000005741                 jnz     short loc_5749
.text:0000000000005743                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005747                 jz      short loc_5775
.text:0000000000005749
.text:0000000000005749 loc_5749:                               ; CODE XREF: apply_settings+BD1↑j
.text:0000000000005749                                         ; apply_settings+C03↓j
.text:0000000000005749                 mov     rax, [rsp+0A8h+termios_p]
.text:000000000000574E                 mov     dword ptr [rax], 0
.text:0000000000005754                 and     dword ptr [rax+4], 0FFFFFFFEh
.text:0000000000005758                 and     dword ptr [rax+0Ch], 0FFFFFFF8h
.text:000000000000575C                 mov     word ptr [rax+16h], 100h
.text:0000000000005762                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005767                 mov     byte ptr [rax], 1
.text:000000000000576A                 jmp     loc_4BE4
.text:000000000000576F ; ---------------------------------------------------------------------------
.text:000000000000576F
.text:000000000000576F loc_576F:                               ; CODE XREF: apply_settings+BCD↑j
.text:000000000000576F                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005773                 jz      short loc_5749
.text:0000000000005775
.text:0000000000005775 loc_5775:                               ; CODE XREF: apply_settings+BD7↑j
.text:0000000000005775                 mov     rax, [rsp+0A8h+termios_p]
.text:000000000000577A                 or      dword ptr [rax], 526h
.text:0000000000005780                 or      dword ptr [rax+4], 1
.text:0000000000005784                 or      dword ptr [rax+0Ch], 3
.text:0000000000005788                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000578D                 mov     byte ptr [rax], 1
.text:0000000000005790                 jmp     loc_4BE4
.text:0000000000005795 ; ---------------------------------------------------------------------------
.text:0000000000005795
.text:0000000000005795 loc_5795:                               ; CODE XREF: apply_settings+B77↑j
.text:0000000000005795                 mov     rsi, [rsp+0A8h+termios_p]
.text:000000000000579A                 or      eax, 30h
.text:000000000000579D                 and     ecx, 0FFFFFFDFh
.text:00000000000057A0                 and     edx, 0FFFFFFFEh
.text:00000000000057A3                 mov     [rsi+8], eax
.text:00000000000057A6                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000057AB                 mov     [rsi], ecx
.text:00000000000057AD                 mov     [rsi+4], edx
.text:00000000000057B0                 mov     byte ptr [rax], 1
.text:00000000000057B3                 jmp     loc_4BE4
.text:00000000000057B8 ; ---------------------------------------------------------------------------
.text:00000000000057B8
.text:00000000000057B8 loc_57B8:                               ; CODE XREF: apply_settings+BC1↑j
.text:00000000000057B8                 lea     rsi, aDecctlq   ; "decctlq"
.text:00000000000057BF                 mov     rdi, r15        ; s1
.text:00000000000057C2                 call    _strcmp
.text:00000000000057C7                 test    eax, eax
.text:00000000000057C9                 jnz     short loc_57EA
.text:00000000000057CB                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:00000000000057CF                 mov     rcx, [rsp+0A8h+termios_p]
.text:00000000000057D4                 mov     eax, [rcx]
.text:00000000000057D6                 jz      short loc_581E
.text:00000000000057D8                 or      ah, 8
.text:00000000000057DB                 mov     [rcx], eax
.text:00000000000057DD                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000057E2                 mov     byte ptr [rax], 1
.text:00000000000057E5                 jmp     loc_4BE4
.text:00000000000057EA ; ---------------------------------------------------------------------------
.text:00000000000057EA
.text:00000000000057EA loc_57EA:                               ; CODE XREF: apply_settings+C59↑j
.text:00000000000057EA                 lea     rsi, aTabs      ; "tabs"
.text:00000000000057F1                 mov     rdi, r15        ; s1
.text:00000000000057F4                 call    _strcmp
.text:00000000000057F9                 test    eax, eax
.text:00000000000057FB                 jnz     short loc_584D
.text:00000000000057FD                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005801                 mov     rcx, [rsp+0A8h+termios_p]
.text:0000000000005806                 mov     eax, [rcx+4]
.text:0000000000005809                 jz      short loc_5835
.text:000000000000580B                 or      ah, 18h
.text:000000000000580E                 mov     [rcx+4], eax
.text:0000000000005811                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005816                 mov     byte ptr [rax], 1
.text:0000000000005819                 jmp     loc_4BE4
.text:000000000000581E ; ---------------------------------------------------------------------------
.text:000000000000581E
.text:000000000000581E loc_581E:                               ; CODE XREF: apply_settings+C66↑j
.text:000000000000581E                 mov     rcx, [rsp+0A8h+termios_p]
.text:0000000000005823                 and     ah, 0F7h
.text:0000000000005826                 mov     [rcx], eax
.text:0000000000005828                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000582D                 mov     byte ptr [rax], 1
.text:0000000000005830                 jmp     loc_4BE4
.text:0000000000005835 ; ---------------------------------------------------------------------------
.text:0000000000005835
.text:0000000000005835 loc_5835:                               ; CODE XREF: apply_settings+C99↑j
.text:0000000000005835                 mov     rcx, [rsp+0A8h+termios_p]
.text:000000000000583A                 and     ah, 0E7h
.text:000000000000583D                 mov     [rcx+4], eax
.text:0000000000005840                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005845                 mov     byte ptr [rax], 1
.text:0000000000005848                 jmp     loc_4BE4
.text:000000000000584D ; ---------------------------------------------------------------------------
.text:000000000000584D
.text:000000000000584D loc_584D:                               ; CODE XREF: apply_settings+C8B↑j
.text:000000000000584D                 lea     rsi, aLcase     ; "lcase"
.text:0000000000005854                 mov     rdi, r15        ; s1
.text:0000000000005857                 call    _strcmp
.text:000000000000585C                 test    eax, eax
.text:000000000000585E                 jz      short loc_5873
.text:0000000000005860                 lea     rsi, aLcase_0   ; "LCASE"
.text:0000000000005867                 mov     rdi, r15        ; s1
.text:000000000000586A                 call    _strcmp
.text:000000000000586F                 test    eax, eax
.text:0000000000005871                 jnz     short loc_58A4
.text:0000000000005873
.text:0000000000005873 loc_5873:                               ; CODE XREF: apply_settings+CEE↑j
.text:0000000000005873                 cmp     byte ptr [rsp+0A8h+endptr], 0
.text:0000000000005877                 mov     rsi, [rsp+0A8h+termios_p]
.text:000000000000587C                 mov     eax, [rsi+4]
.text:000000000000587F                 mov     ecx, [rsi+0Ch]
.text:0000000000005882                 mov     edx, [rsi]
.text:0000000000005884                 jz      short loc_58F7
.text:0000000000005886                 and     eax, 0FFFFFFFDh
.text:0000000000005889                 and     ecx, 0FFFFFFFBh
.text:000000000000588C                 and     dh, 0FDh
.text:000000000000588F                 mov     [rsi+4], eax
.text:0000000000005892                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000005897                 mov     [rsi+0Ch], ecx
.text:000000000000589A                 mov     [rsi], edx
.text:000000000000589C                 mov     byte ptr [rax], 1
.text:000000000000589F                 jmp     loc_4BE4
.text:00000000000058A4 ; ---------------------------------------------------------------------------
.text:00000000000058A4
.text:00000000000058A4 loc_58A4:                               ; CODE XREF: apply_settings+D01↑j
.text:00000000000058A4                 lea     rsi, aCrt       ; "crt"
.text:00000000000058AB                 mov     rdi, r15        ; s1
.text:00000000000058AE                 call    _strcmp
.text:00000000000058B3                 test    eax, eax
.text:00000000000058B5                 jz      short loc_591A
.text:00000000000058B7                 lea     rsi, aDec       ; "dec"
.text:00000000000058BE                 mov     rdi, r15        ; s1
.text:00000000000058C1                 call    _strcmp
.text:00000000000058C6                 test    eax, eax
.text:00000000000058C8                 jnz     loc_51FA
.text:00000000000058CE                 mov     rax, [rsp+0A8h+termios_p]
.text:00000000000058D3                 and     dword ptr [rax], 0FFFFF7FFh
.text:00000000000058D9                 mov     byte ptr [rax+11h], 3
.text:00000000000058DD                 mov     word ptr [rax+13h], 157Fh
.text:00000000000058E3                 or      dword ptr [rax+0Ch], 0A10h
.text:00000000000058EA                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000058EF                 mov     byte ptr [rax], 1
.text:00000000000058F2                 jmp     loc_4BE4
.text:00000000000058F7 ; ---------------------------------------------------------------------------
.text:00000000000058F7
.text:00000000000058F7 loc_58F7:                               ; CODE XREF: apply_settings+D14↑j
.text:00000000000058F7                 mov     rsi, [rsp+0A8h+termios_p]
.text:00000000000058FC                 or      eax, 2
.text:00000000000058FF                 or      ecx, 4
.text:0000000000005902                 or      dh, 2
.text:0000000000005905                 mov     [rsi+4], eax
.text:0000000000005908                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000590D                 mov     [rsi+0Ch], ecx
.text:0000000000005910                 mov     [rsi], edx
.text:0000000000005912                 mov     byte ptr [rax], 1
.text:0000000000005915                 jmp     loc_4BE4
.text:000000000000591A ; ---------------------------------------------------------------------------
.text:000000000000591A
.text:000000000000591A loc_591A:                               ; CODE XREF: apply_settings+D45↑j
.text:000000000000591A                 mov     rax, [rsp+0A8h+termios_p]
.text:000000000000591F                 or      dword ptr [rax+0Ch], 0A10h
.text:0000000000005926                 mov     rax, [rsp+0A8h+var_88]
.text:000000000000592B                 mov     byte ptr [rax], 1
.text:000000000000592E                 jmp     loc_4BE4
.text:000000000000592E ; } // starts at 4B70
.text:000000000000592E apply_settings  endp
.text:000000000000592E
.text:000000000000592E ; ---------------------------------------------------------------------------
.text:0000000000005933                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public close_stdout_set_file_name
.text:0000000000005940 close_stdout_set_file_name proc near
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 mov     cs:file_name, rdi
.text:0000000000005947                 retn
.text:0000000000005947 ; } // starts at 5940
.text:0000000000005947 close_stdout_set_file_name endp
.text:0000000000005947
.text:0000000000005947 ; ---------------------------------------------------------------------------
.text:0000000000005948                 align 10h
.text:0000000000005950
.text:0000000000005950 ; =============== S U B R O U T I N E =======================================
.text:0000000000005950
.text:0000000000005950
.text:0000000000005950                 public close_stdout_set_ignore_EPIPE
.text:0000000000005950 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005950 ; __unwind {
.text:0000000000005950                 mov     cs:ignore_EPIPE, dil
.text:0000000000005957                 retn
.text:0000000000005957 ; } // starts at 5950
.text:0000000000005957 close_stdout_set_ignore_EPIPE endp
.text:0000000000005957
.text:0000000000005957 ; ---------------------------------------------------------------------------
.text:0000000000005958                 align 20h
.text:0000000000005960
.text:0000000000005960 ; =============== S U B R O U T I N E =======================================
.text:0000000000005960
.text:0000000000005960 ; Attributes: info_from_lumina
.text:0000000000005960
.text:0000000000005960 ; void __cdecl close_stdout()
.text:0000000000005960                 public close_stdout
.text:0000000000005960 close_stdout    proc near               ; DATA XREF: main+6A↑o
.text:0000000000005960 ; __unwind {
.text:0000000000005960                 push    rbp
.text:0000000000005961                 push    rbx
.text:0000000000005962                 sub     rsp, 8
.text:0000000000005966                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000596D                 call    close_stream
.text:0000000000005972                 test    eax, eax
.text:0000000000005974                 jz      short loc_598C
.text:0000000000005976                 call    ___errno_location
.text:000000000000597B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005982                 mov     rbx, rax
.text:0000000000005985                 jz      short loc_59A3
.text:0000000000005987                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000598A                 jnz     short loc_59A3
.text:000000000000598C
.text:000000000000598C loc_598C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000598C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005993                 call    close_stream
.text:0000000000005998                 test    eax, eax
.text:000000000000599A                 jnz     short loc_59E2
.text:000000000000599C                 add     rsp, 8
.text:00000000000059A0                 pop     rbx
.text:00000000000059A1                 pop     rbp
.text:00000000000059A2                 retn
.text:00000000000059A3 ; ---------------------------------------------------------------------------
.text:00000000000059A3
.text:00000000000059A3 loc_59A3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000059A3                                         ; close_stdout+2A↑j
.text:00000000000059A3                 lea     rsi, aWriteError ; "write error"
.text:00000000000059AA                 xor     edi, edi        ; domainname
.text:00000000000059AC                 mov     edx, 5          ; category
.text:00000000000059B1                 call    _dcgettext
.text:00000000000059B6                 mov     rdi, cs:file_name
.text:00000000000059BD                 mov     rbp, rax
.text:00000000000059C0                 test    rdi, rdi
.text:00000000000059C3                 jz      short loc_59ED
.text:00000000000059C5                 call    quotearg_colon
.text:00000000000059CA                 mov     esi, [rbx]      ; errnum
.text:00000000000059CC                 lea     rdx, aS_0       ; "%s: "
.text:00000000000059D3                 mov     rcx, rax
.text:00000000000059D6                 mov     r8, rbp
.text:00000000000059D9                 xor     edi, edi        ; status
.text:00000000000059DB                 xor     eax, eax
.text:00000000000059DD                 call    _error
.text:00000000000059E2
.text:00000000000059E2 loc_59E2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000059E2                                         ; close_stdout+A2↓j
.text:00000000000059E2                 mov     edi, cs:exit_failure ; status
.text:00000000000059E8                 call    __exit
.text:00000000000059ED ; ---------------------------------------------------------------------------
.text:00000000000059ED
.text:00000000000059ED loc_59ED:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000059ED                 mov     esi, [rbx]      ; errnum
.text:00000000000059EF                 lea     rdx, format     ; format
.text:00000000000059F6                 mov     rcx, rax
.text:00000000000059F9                 xor     edi, edi        ; status
.text:00000000000059FB                 xor     eax, eax
.text:00000000000059FD                 call    _error
.text:0000000000005A02                 jmp     short loc_59E2
.text:0000000000005A02 ; } // starts at 5960
.text:0000000000005A02 close_stdout    endp
.text:0000000000005A02
.text:0000000000005A02 ; ---------------------------------------------------------------------------
.text:0000000000005A04                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10
.text:0000000000005A10 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:0000000000005A10                 public fd_reopen
.text:0000000000005A10 fd_reopen       proc near               ; CODE XREF: main+272↑p
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 push    r13
.text:0000000000005A12                 push    r12
.text:0000000000005A14                 xor     eax, eax
.text:0000000000005A16                 push    rbp
.text:0000000000005A17                 push    rbx
.text:0000000000005A18                 mov     ebp, edi
.text:0000000000005A1A                 mov     rdi, rsi        ; file
.text:0000000000005A1D                 mov     esi, edx        ; oflag
.text:0000000000005A1F                 mov     edx, ecx
.text:0000000000005A21                 sub     rsp, 8
.text:0000000000005A25                 call    _open
.text:0000000000005A2A                 cmp     ebp, eax
.text:0000000000005A2C                 mov     ebx, eax
.text:0000000000005A2E                 jz      short loc_5A59
.text:0000000000005A30                 test    eax, eax
.text:0000000000005A32                 js      short loc_5A59
.text:0000000000005A34                 mov     esi, ebp        ; fd2
.text:0000000000005A36                 mov     edi, eax        ; fd
.text:0000000000005A38                 call    _dup2
.text:0000000000005A3D                 mov     r12d, eax
.text:0000000000005A40                 call    ___errno_location
.text:0000000000005A45                 mov     r13d, [rax]
.text:0000000000005A48                 mov     rbp, rax
.text:0000000000005A4B                 mov     edi, ebx        ; fd
.text:0000000000005A4D                 call    _close
.text:0000000000005A52                 mov     ebx, r12d
.text:0000000000005A55                 mov     [rbp+0], r13d
.text:0000000000005A59
.text:0000000000005A59 loc_5A59:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000005A59                                         ; fd_reopen+22↑j
.text:0000000000005A59                 add     rsp, 8
.text:0000000000005A5D                 mov     eax, ebx
.text:0000000000005A5F                 pop     rbx
.text:0000000000005A60                 pop     rbp
.text:0000000000005A61                 pop     r12
.text:0000000000005A63                 pop     r13
.text:0000000000005A65                 retn
.text:0000000000005A65 ; } // starts at 5A10
.text:0000000000005A65 fd_reopen       endp
.text:0000000000005A65
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A66                 align 10h
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70
.text:0000000000005A70                 public set_program_name
.text:0000000000005A70 set_program_name proc near              ; CODE XREF: main+35↑p
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 test    rdi, rdi
.text:0000000000005A73                 push    rbx
.text:0000000000005A74                 jz      short loc_5AED
.text:0000000000005A76                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000005A7B                 mov     rbx, rdi
.text:0000000000005A7E                 call    _strrchr
.text:0000000000005A83                 test    rax, rax
.text:0000000000005A86                 jz      short loc_5ADD
.text:0000000000005A88                 lea     r8, [rax+1]
.text:0000000000005A8C                 mov     rdx, r8
.text:0000000000005A8F                 sub     rdx, rbx
.text:0000000000005A92                 cmp     rdx, 6
.text:0000000000005A96                 jle     short loc_5ADD
.text:0000000000005A98                 lea     rsi, [rax-6]
.text:0000000000005A9C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005AA3                 mov     ecx, 7
.text:0000000000005AA8                 repe cmpsb
.text:0000000000005AAA                 setnbe  dl
.text:0000000000005AAD                 sbb     dl, 0
.text:0000000000005AB0                 test    dl, dl
.text:0000000000005AB2                 jnz     short loc_5ADD
.text:0000000000005AB4                 lea     rdi, aLt        ; "lt-"
.text:0000000000005ABB                 mov     ecx, 3
.text:0000000000005AC0                 mov     rsi, r8
.text:0000000000005AC3                 mov     rbx, r8
.text:0000000000005AC6                 repe cmpsb
.text:0000000000005AC8                 setnbe  dl
.text:0000000000005ACB                 sbb     dl, 0
.text:0000000000005ACE                 test    dl, dl
.text:0000000000005AD0                 jnz     short loc_5ADD
.text:0000000000005AD2                 lea     rbx, [rax+4]
.text:0000000000005AD6                 mov     cs:__bss_start, rbx
.text:0000000000005ADD
.text:0000000000005ADD loc_5ADD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000005ADD                                         ; set_program_name+26↑j ...
.text:0000000000005ADD                 mov     cs:program_name, rbx
.text:0000000000005AE4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000005AEB                 pop     rbx
.text:0000000000005AEC                 retn
.text:0000000000005AED ; ---------------------------------------------------------------------------
.text:0000000000005AED
.text:0000000000005AED loc_5AED:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000005AED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000005AF4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000005AFB                 mov     edx, 37h ; '7'  ; n
.text:0000000000005B00                 mov     esi, 1          ; size
.text:0000000000005B05                 call    _fwrite
.text:0000000000005B0A                 call    _abort
.text:0000000000005B0A ; } // starts at 5A70
.text:0000000000005B0A set_program_name endp
.text:0000000000005B0A
.text:0000000000005B0A ; ---------------------------------------------------------------------------
.text:0000000000005B0F                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10 ; Attributes: info_from_lumina
.text:0000000000005B10
.text:0000000000005B10 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000005B10 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000005B10                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 push    rbp
.text:0000000000005B11                 push    rbx
.text:0000000000005B12                 mov     rbp, rdi
.text:0000000000005B15                 mov     ebx, esi
.text:0000000000005B17                 sub     rsp, 8
.text:0000000000005B1B                 call    locale_charset
.text:0000000000005B20                 movzx   edx, byte ptr [rax]
.text:0000000000005B23                 and     edx, 0FFFFFFDFh
.text:0000000000005B26                 cmp     dl, 55h ; 'U'
.text:0000000000005B29                 jz      short loc_5BA0
.text:0000000000005B2B                 cmp     dl, 47h ; 'G'
.text:0000000000005B2E                 jz      short loc_5B50
.text:0000000000005B30
.text:0000000000005B30 loc_5B30:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000005B30                                         ; gettext_quote+50↓j ...
.text:0000000000005B30                 lea     rax, unk_DB23
.text:0000000000005B37                 lea     rdx, asc_DB25   ; "'"
.text:0000000000005B3E                 cmp     ebx, 9
.text:0000000000005B41                 cmovnz  rax, rdx
.text:0000000000005B45                 add     rsp, 8
.text:0000000000005B49                 pop     rbx
.text:0000000000005B4A                 pop     rbp
.text:0000000000005B4B                 retn
.text:0000000000005B4B ; ---------------------------------------------------------------------------
.text:0000000000005B4C                 align 10h
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000005B50                 movzx   edx, byte ptr [rax+1]
.text:0000000000005B54                 and     edx, 0FFFFFFDFh
.text:0000000000005B57                 cmp     dl, 42h ; 'B'
.text:0000000000005B5A                 jnz     short loc_5B30
.text:0000000000005B5C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000005B60                 jnz     short loc_5B30
.text:0000000000005B62                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000005B66                 jnz     short loc_5B30
.text:0000000000005B68                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000005B6C                 jnz     short loc_5B30
.text:0000000000005B6E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000005B72                 jnz     short loc_5B30
.text:0000000000005B74                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000005B78                 jnz     short loc_5B30
.text:0000000000005B7A                 cmp     byte ptr [rax+7], 0
.text:0000000000005B7E                 jnz     short loc_5B30
.text:0000000000005B80                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005B84                 lea     rax, unk_DB1C
.text:0000000000005B8B                 lea     rdx, unk_DB20
.text:0000000000005B92                 cmovnz  rax, rdx
.text:0000000000005B96                 add     rsp, 8
.text:0000000000005B9A                 pop     rbx
.text:0000000000005B9B                 pop     rbp
.text:0000000000005B9C                 retn
.text:0000000000005B9C ; ---------------------------------------------------------------------------
.text:0000000000005B9D                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000005BA0                 movzx   edx, byte ptr [rax+1]
.text:0000000000005BA4                 and     edx, 0FFFFFFDFh
.text:0000000000005BA7                 cmp     dl, 54h ; 'T'
.text:0000000000005BAA                 jnz     short loc_5B30
.text:0000000000005BAC                 movzx   edx, byte ptr [rax+2]
.text:0000000000005BB0                 and     edx, 0FFFFFFDFh
.text:0000000000005BB3                 cmp     dl, 46h ; 'F'
.text:0000000000005BB6                 jnz     loc_5B30
.text:0000000000005BBC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000005BC0                 jnz     loc_5B30
.text:0000000000005BC6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000005BCA                 jnz     loc_5B30
.text:0000000000005BD0                 cmp     byte ptr [rax+5], 0
.text:0000000000005BD4                 jnz     loc_5B30
.text:0000000000005BDA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005BDE                 lea     rax, unk_DB14
.text:0000000000005BE5                 lea     rdx, unk_DB18
.text:0000000000005BEC                 cmovnz  rax, rdx
.text:0000000000005BF0                 add     rsp, 8
.text:0000000000005BF4                 pop     rbx
.text:0000000000005BF5                 pop     rbp
.text:0000000000005BF6                 retn
.text:0000000000005BF6 ; } // starts at 5B10
.text:0000000000005BF6 gettext_quote   endp
.text:0000000000005BF6
.text:0000000000005BF6 ; ---------------------------------------------------------------------------
.text:0000000000005BF7                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00 ; Attributes: info_from_lumina
.text:0000000000005C00
.text:0000000000005C00 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000005C00 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000005C00                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000005C00
.text:0000000000005C00 var_E0          = dword ptr -0E0h
.text:0000000000005C00 var_DB          = byte ptr -0DBh
.text:0000000000005C00 var_DA          = byte ptr -0DAh
.text:0000000000005C00 var_D9          = byte ptr -0D9h
.text:0000000000005C00 s               = qword ptr -0D8h
.text:0000000000005C00 n               = qword ptr -0D0h
.text:0000000000005C00 var_C8          = qword ptr -0C8h
.text:0000000000005C00 ps              = qword ptr -0C0h
.text:0000000000005C00 var_B8          = qword ptr -0B8h
.text:0000000000005C00 var_B0          = qword ptr -0B0h
.text:0000000000005C00 var_A8          = qword ptr -0A8h
.text:0000000000005C00 s2              = qword ptr -0A0h
.text:0000000000005C00 var_98          = qword ptr -98h
.text:0000000000005C00 var_90          = qword ptr -90h
.text:0000000000005C00 var_88          = qword ptr -88h
.text:0000000000005C00 var_80          = qword ptr -80h
.text:0000000000005C00 var_78          = qword ptr -78h
.text:0000000000005C00 var_70          = dword ptr -70h
.text:0000000000005C00 var_6C          = byte ptr -6Ch
.text:0000000000005C00 var_6B          = byte ptr -6Bh
.text:0000000000005C00 var_6A          = byte ptr -6Ah
.text:0000000000005C00 var_69          = byte ptr -69h
.text:0000000000005C00 var_68          = qword ptr -68h
.text:0000000000005C00 var_60          = qword ptr -60h
.text:0000000000005C00 wc              = dword ptr -4Ch
.text:0000000000005C00 var_48          = qword ptr -48h
.text:0000000000005C00 var_40          = qword ptr -40h
.text:0000000000005C00 arg_0           = qword ptr  8
.text:0000000000005C00 arg_8           = qword ptr  10h
.text:0000000000005C00 arg_10          = qword ptr  18h
.text:0000000000005C00
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    r15
.text:0000000000005C02                 push    r14
.text:0000000000005C04                 mov     r15d, r8d
.text:0000000000005C07                 push    r13
.text:0000000000005C09                 push    r12
.text:0000000000005C0B                 mov     r14, rdi
.text:0000000000005C0E                 push    rbp
.text:0000000000005C0F                 push    rbx
.text:0000000000005C10                 mov     ebx, r9d
.text:0000000000005C13                 mov     r13, rsi
.text:0000000000005C16                 mov     rbp, rcx
.text:0000000000005C19                 and     ebx, 2
.text:0000000000005C1C                 sub     rsp, 0B8h
.text:0000000000005C23                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000005C2B                 mov     [rsp+0E8h+s], rdx
.text:0000000000005C30                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000005C35                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000005C3A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000005C3F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000005C47                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005C4C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000005C54                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005C59                 mov     rax, fs:28h
.text:0000000000005C62                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005C6A                 xor     eax, eax
.text:0000000000005C6C                 call    ___ctype_get_mb_cur_max
.text:0000000000005C71                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000005C75                 mov     [rsp+0E8h+var_90], rax
.text:0000000000005C7A                 ja      def_5C91        ; jumptable 00000000000121F1 default case
.text:0000000000005C80                 lea     rcx, jpt_5C91
.text:0000000000005C87                 mov     edx, r15d
.text:0000000000005C8A                 movsxd  rax, ds:(jpt_5C91 - 0DB80h)[rcx+rdx*4]
.text:0000000000005C8E                 add     rax, rcx
.text:0000000000005C91                 jmp     rax             ; switch jump
.text:0000000000005C93 ; ---------------------------------------------------------------------------
.text:0000000000005C93
.text:0000000000005C93 loc_5C93:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005C93                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000005C93                                         ; DATA XREF: ...
.text:0000000000005C93                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000005C98                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005C9D                 xor     r12d, r12d
.text:0000000000005CA0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005CA9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005CAE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005CB3
.text:0000000000005CB3 loc_5CB3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000005CB3                 lea     rax, asc_DB25   ; "'"
.text:0000000000005CBA                 mov     [rsp+0E8h+n], 1
.text:0000000000005CC3                 xor     r15d, r15d
.text:0000000000005CC6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005CCE                 mov     [rsp+0E8h+s2], rax
.text:0000000000005CD3
.text:0000000000005CD3 loc_5CD3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000005CD3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000005CD3                 xor     r11d, r11d
.text:0000000000005CD6                 mov     rax, rbp
.text:0000000000005CD9                 mov     r8d, r12d
.text:0000000000005CDC                 mov     rbp, r11
.text:0000000000005CDF                 mov     r11, rax
.text:0000000000005CE2                 nop     word ptr [rax+rax+00h]
.text:0000000000005CE8
.text:0000000000005CE8 loc_5CE8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000005CE8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000005CE8                 cmp     r11, rbp
.text:0000000000005CEB                 setnz   r12b
.text:0000000000005CEF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CF3                 jnz     short loc_5D02
.text:0000000000005CF5                 mov     rax, [rsp+0E8h+s]
.text:0000000000005CFA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000005CFE                 setnz   r12b
.text:0000000000005D02
.text:0000000000005D02 loc_5D02:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000005D02                 test    r12b, r12b
.text:0000000000005D05                 jz      loc_6360
.text:0000000000005D0B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005D10                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000005D15                 lea     r9, [rdi+rbp]
.text:0000000000005D19                 setnz   al
.text:0000000000005D1C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005D20                 mov     r10d, eax
.text:0000000000005D23                 jz      loc_5DD0
.text:0000000000005D29                 mov     rax, [rsp+0E8h+n]
.text:0000000000005D2E                 test    rax, rax
.text:0000000000005D31                 jz      loc_6160
.text:0000000000005D37                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D3B                 lea     rbx, [rbp+rax+0]
.text:0000000000005D40                 jnz     short loc_5D70
.text:0000000000005D42                 cmp     rax, 1
.text:0000000000005D46                 jbe     short loc_5D70
.text:0000000000005D48                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005D4D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000005D52                 mov     [rsp+0E8h+ps], r9
.text:0000000000005D57                 call    _strlen
.text:0000000000005D5C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005D62                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005D68                 mov     r11, rax
.text:0000000000005D6B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000005D70                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000005D70                 cmp     rbx, r11
.text:0000000000005D73                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005D78                 ja      loc_6330
.text:0000000000005D7E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000005D83                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000005D88                 mov     rdi, r9         ; s1
.text:0000000000005D8B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000005D90                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005D95                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000005D9A                 call    _memcmp
.text:0000000000005D9F                 test    eax, eax
.text:0000000000005DA1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005DA6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005DAC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000005DB1                 jnz     loc_6330
.text:0000000000005DB7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005DBC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005DC2                 jnz     loc_6D45
.text:0000000000005DC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005DD0
.text:0000000000005DD0 loc_5DD0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000005DD0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000005DD0                 movzx   ebx, byte ptr [r9]
.text:0000000000005DD4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005DD7                 ja      def_5DEE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000005DDD                 lea     rcx, jpt_5DEE
.text:0000000000005DE4                 movzx   edx, bl
.text:0000000000005DE7                 movsxd  rax, ds:(jpt_5DEE - 0DBACh)[rcx+rdx*4]
.text:0000000000005DEB                 add     rax, rcx
.text:0000000000005DEE                 jmp     rax             ; switch jump
.text:0000000000005DF0 ; ---------------------------------------------------------------------------
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005DF0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000005DF0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000005DF3
.text:0000000000005DF3 loc_5DF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005DF3                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005DF3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000005DF7                 setnz   al
.text:0000000000005DFA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DFE                 jnz     short loc_5E0C
.text:0000000000005E00                 mov     rax, [rsp+0E8h+s]
.text:0000000000005E05                 cmp     byte ptr [rax+1], 0
.text:0000000000005E09                 setnz   al
.text:0000000000005E0C
.text:0000000000005E0C loc_5E0C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000005E0C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005E11                 setz    dl
.text:0000000000005E14                 test    al, al
.text:0000000000005E16                 jz      loc_6068
.text:0000000000005E1C
.text:0000000000005E1C loc_5E1C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000005E1C                 xor     r12d, r12d
.text:0000000000005E1F                 xor     eax, eax
.text:0000000000005E21                 nop     dword ptr [rax+00000000h]
.text:0000000000005E28
.text:0000000000005E28 loc_5E28:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000005E28                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000005E28                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000005E2D                 jnz     loc_5F42
.text:0000000000005E33                 test    dl, dl
.text:0000000000005E35                 jnz     loc_5F42
.text:0000000000005E3B
.text:0000000000005E3B loc_5E3B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000005E3B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000005E40                 test    rsi, rsi
.text:0000000000005E43                 jz      short loc_5E59
.text:0000000000005E45                 mov     edx, ebx
.text:0000000000005E47                 shr     dl, 5
.text:0000000000005E4A                 movzx   edx, dl
.text:0000000000005E4D                 mov     edx, [rsi+rdx*4]
.text:0000000000005E50                 bt      edx, ebx
.text:0000000000005E53                 jb      loc_5FA3
.text:0000000000005E59
.text:0000000000005E59 loc_5E59:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000005E59                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000005E59                 test    r10b, r10b
.text:0000000000005E5C                 jnz     loc_5FA3
.text:0000000000005E62                 xor     eax, 1
.text:0000000000005E65                 add     rbp, 1
.text:0000000000005E69                 and     eax, r8d
.text:0000000000005E6C
.text:0000000000005E6C loc_5E6C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000005E6C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000005E6C                 test    al, al
.text:0000000000005E6E                 jz      short loc_5E90
.text:0000000000005E70                 cmp     r13, r15
.text:0000000000005E73                 jbe     short loc_5E7A
.text:0000000000005E75                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005E7A
.text:0000000000005E7A loc_5E7A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000005E7A                 lea     rax, [r15+1]
.text:0000000000005E7E                 cmp     r13, rax
.text:0000000000005E81                 jbe     short loc_5E89
.text:0000000000005E83                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000005E89
.text:0000000000005E89 loc_5E89:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000005E89                 add     r15, 2
.text:0000000000005E8D                 xor     r8d, r8d
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000005E90                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000005E90                 cmp     r15, r13
.text:0000000000005E93                 jnb     short loc_5E99
.text:0000000000005E95                 mov     [r14+r15], bl
.text:0000000000005E99
.text:0000000000005E99 loc_5E99:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000005E99                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000005E9E                 add     r15, 1
.text:0000000000005EA2                 mov     eax, 0
.text:0000000000005EA7                 test    r12b, r12b
.text:0000000000005EAA                 cmovz   edi, eax
.text:0000000000005EAD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000005EB2                 jmp     loc_5CE8
.text:0000000000005EB2 ; ---------------------------------------------------------------------------
.text:0000000000005EB7                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 loc_5EC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005EC0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000005EC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000005EC3
.text:0000000000005EC3 loc_5EC3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005EC3                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005EC3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000005EC7                 cmp     eax, 2
.text:0000000000005ECA                 jz      loc_6488
.text:0000000000005ED0                 cmp     eax, 5
.text:0000000000005ED3                 jz      loc_6448
.text:0000000000005ED9                 cmp     eax, 2
.text:0000000000005EDC                 mov     ebx, 3Fh ; '?'
.text:0000000000005EE1                 setz    dl
.text:0000000000005EE4                 xor     r12d, r12d
.text:0000000000005EE7                 xor     eax, eax
.text:0000000000005EE9                 jmp     loc_5E28
.text:0000000000005EE9 ; ---------------------------------------------------------------------------
.text:0000000000005EEE                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000005EF0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000005EF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000005EF3
.text:0000000000005EF3 loc_5EF3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005EF3                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005EF3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000005EF8                 jz      loc_6400
.text:0000000000005EFE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005F03                 xor     edx, edx
.text:0000000000005F05                 xor     eax, eax
.text:0000000000005F07                 mov     ebx, 27h ; '''
.text:0000000000005F0C                 jmp     loc_5E28
.text:0000000000005F0C ; ---------------------------------------------------------------------------
.text:0000000000005F11                 align 8
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005F18                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005F18                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000005F1D                 mov     ebx, 74h ; 't'
.text:0000000000005F22
.text:0000000000005F22 loc_5F22:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000005F22                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000005F22                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005F27                 setz    al
.text:0000000000005F2A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005F2E                 jnz     loc_607E
.text:0000000000005F34
.text:0000000000005F34 loc_5F34:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000005F34                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000005F34                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005F39                 jnz     short loc_5FA0
.text:0000000000005F3B
.text:0000000000005F3B loc_5F3B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000005F3B                 mov     ebx, edx
.text:0000000000005F3D                 xor     r12d, r12d
.text:0000000000005F40                 xor     eax, eax
.text:0000000000005F42
.text:0000000000005F42 loc_5F42:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000005F42                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000005F42                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005F47                 jnz     loc_5E3B
.text:0000000000005F4D                 jmp     loc_5E59
.text:0000000000005F4D ; ---------------------------------------------------------------------------
.text:0000000000005F52                 align 8
.text:0000000000005F58
.text:0000000000005F58 loc_5F58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005F58                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005F58                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000005F5D                 mov     ebx, 62h ; 'b'
.text:0000000000005F62                 jmp     short loc_5F34
.text:0000000000005F62 ; ---------------------------------------------------------------------------
.text:0000000000005F64                 align 8
.text:0000000000005F68
.text:0000000000005F68 loc_5F68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000005F68                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000005F68                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000005F6D                 jz      loc_6340
.text:0000000000005F73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000005F78                 jz      loc_6190
.text:0000000000005F7E
.text:0000000000005F7E loc_5F7E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000005F7E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005F83                 jz      loc_6190
.text:0000000000005F89                 cmp     [rsp+0E8h+n], 0
.text:0000000000005F8F                 jnz     loc_634B
.text:0000000000005F95                 mov     ebx, 5Ch ; '\'
.text:0000000000005F9A                 nop     word ptr [rax+rax+00h]
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000005FA0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000005FA0                 xor     r12d, r12d
.text:0000000000005FA3
.text:0000000000005FA3 loc_5FA3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000005FA3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000005FA3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005FA8                 setz    dl
.text:0000000000005FAB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005FB0                 mov     eax, edx
.text:0000000000005FB2                 jnz     loc_6808
.text:0000000000005FB8                 mov     eax, r8d
.text:0000000000005FBB                 xor     eax, 1
.text:0000000000005FBE                 and     al, dl
.text:0000000000005FC0                 jz      short loc_5FF1
.text:0000000000005FC2                 cmp     r13, r15
.text:0000000000005FC5                 jbe     short loc_5FCC
.text:0000000000005FC7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005FCC
.text:0000000000005FCC loc_5FCC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000005FCC                 lea     rdx, [r15+1]
.text:0000000000005FD0                 cmp     r13, rdx
.text:0000000000005FD3                 jbe     short loc_5FDB
.text:0000000000005FD5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005FDB
.text:0000000000005FDB loc_5FDB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000005FDB                 lea     rdx, [r15+2]
.text:0000000000005FDF                 cmp     r13, rdx
.text:0000000000005FE2                 jbe     short loc_5FEA
.text:0000000000005FE4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000005FEA
.text:0000000000005FEA loc_5FEA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000005FEA                 add     r15, 3
.text:0000000000005FEE                 mov     r8d, eax
.text:0000000000005FF1
.text:0000000000005FF1 loc_5FF1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000005FF1                 cmp     r13, r15
.text:0000000000005FF4                 jbe     short loc_5FFB
.text:0000000000005FF6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000005FFB
.text:0000000000005FFB loc_5FFB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000005FFB                 add     r15, 1
.text:0000000000005FFF                 add     rbp, 1
.text:0000000000006003                 jmp     loc_5E90
.text:0000000000006003 ; ---------------------------------------------------------------------------
.text:0000000000006008                 align 10h
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006010                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000006010                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000006015                 jnz     loc_61E3
.text:000000000000601B                 xor     edx, edx
.text:000000000000601D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000006022                 jz      loc_5F3B
.text:0000000000006028                 add     rbp, 1
.text:000000000000602C                 jmp     loc_5CE8
.text:000000000000602C ; ---------------------------------------------------------------------------
.text:0000000000006031                 align 8
.text:0000000000006038
.text:0000000000006038 loc_6038:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006038                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000006038                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000603D                 setz    dl
.text:0000000000006040                 xor     eax, eax
.text:0000000000006042                 jmp     loc_5E28
.text:0000000000006042 ; ---------------------------------------------------------------------------
.text:0000000000006047                 align 10h
.text:0000000000006050
.text:0000000000006050 loc_6050:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006050                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000006050                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000006055                 mov     ebx, 61h ; 'a'
.text:000000000000605A                 jmp     loc_5F34
.text:000000000000605A ; ---------------------------------------------------------------------------
.text:000000000000605F                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006060                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000006060                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000006065                 setz    dl
.text:0000000000006068
.text:0000000000006068 loc_6068:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000006068                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000006068                 test    rbp, rbp
.text:000000000000606B                 jnz     loc_5E1C
.text:0000000000006071
.text:0000000000006071 loc_6071:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000006071                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000006071                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006076                 and     al, dl
.text:0000000000006078                 jz      loc_5E28
.text:000000000000607E
.text:000000000000607E loc_607E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000607E                 mov     rbp, r11
.text:0000000000006081                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006089                 jmp     loc_6789
.text:0000000000006089 ; ---------------------------------------------------------------------------
.text:000000000000608E                 align 10h
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006090                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:0000000000006090                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006095                 setz    dl
.text:0000000000006098                 xor     r12d, r12d
.text:000000000000609B                 jmp     short loc_6071
.text:000000000000609B ; ---------------------------------------------------------------------------
.text:000000000000609D                 align 20h
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060A0                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:00000000000060A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000060A5                 mov     ebx, 20h ; ' '
.text:00000000000060AA                 setz    dl
.text:00000000000060AD                 jmp     short loc_6071
.text:00000000000060AD ; ---------------------------------------------------------------------------
.text:00000000000060AF                 align 10h
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060B0                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:00000000000060B0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000060B5                 mov     ebx, 72h ; 'r'
.text:00000000000060BA                 jmp     loc_5F22
.text:00000000000060BA ; ---------------------------------------------------------------------------
.text:00000000000060BF                 align 20h
.text:00000000000060C0
.text:00000000000060C0 loc_60C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060C0                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:00000000000060C0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000060C5                 mov     ebx, 66h ; 'f'
.text:00000000000060CA                 jmp     loc_5F34
.text:00000000000060CA ; ---------------------------------------------------------------------------
.text:00000000000060CF                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060D0                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:00000000000060D0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000060D5                 mov     ebx, 76h ; 'v'
.text:00000000000060DA                 jmp     loc_5F34
.text:00000000000060DA ; ---------------------------------------------------------------------------
.text:00000000000060DF                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060E0                                         ; DATA XREF: .rodata:jpt_5DEE↓o
.text:00000000000060E0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000060E5                 mov     ebx, 6Eh ; 'n'
.text:00000000000060EA                 jmp     loc_5F22
.text:00000000000060EA ; ---------------------------------------------------------------------------
.text:00000000000060EF                 align 10h
.text:00000000000060F0
.text:00000000000060F0 def_617A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000060F0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000060F0                                         ; DATA XREF: ...
.text:00000000000060F0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000060F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000060F8
.text:00000000000060F8 def_5DEE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000060F8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000060F8                                         ; DATA XREF: ...
.text:00000000000060F8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000060FE                 jnz     loc_64A8
.text:0000000000006104                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000006109                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000610E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006113                 call    ___ctype_b_loc
.text:0000000000006118                 mov     rcx, [rax]
.text:000000000000611B                 movzx   edx, bl
.text:000000000000611E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006124                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000612A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000612F                 mov     edi, 1
.text:0000000000006134                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000006138                 and     ax, 4000h
.text:000000000000613C                 setnz   r12b
.text:0000000000006140                 setz    al
.text:0000000000006143                 and     al, [rsp+0E8h+var_DB]
.text:0000000000006147
.text:0000000000006147 loc_6147:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000006147                 test    al, al
.text:0000000000006149                 jnz     loc_6AE1
.text:000000000000614F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006154                 setz    dl
.text:0000000000006157                 jmp     loc_5E28
.text:0000000000006157 ; ---------------------------------------------------------------------------
.text:000000000000615C                 align 20h
.text:0000000000006160
.text:0000000000006160 loc_6160:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000006160                 movzx   ebx, byte ptr [r9]
.text:0000000000006164                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006167                 ja      short def_617A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006169                 lea     rcx, jpt_617A
.text:0000000000006170                 movzx   edx, bl
.text:0000000000006173                 movsxd  rax, ds:(jpt_617A - 0DDA8h)[rcx+rdx*4]
.text:0000000000006177                 add     rax, rcx
.text:000000000000617A                 jmp     rax             ; switch jump
.text:000000000000617A ; ---------------------------------------------------------------------------
.text:000000000000617C                 align 20h
.text:0000000000006180
.text:0000000000006180 loc_6180:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006180                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000006180                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000006183                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006188                 jnz     loc_5F7E
.text:000000000000618E                 xchg    ax, ax
.text:0000000000006190
.text:0000000000006190 loc_6190:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000006190                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000006190                 mov     edx, 5Ch ; '\'
.text:0000000000006195                 mov     ebx, 5Ch ; '\'
.text:000000000000619A                 jmp     loc_5F34
.text:000000000000619A ; ---------------------------------------------------------------------------
.text:000000000000619F                 align 20h
.text:00000000000061A0
.text:00000000000061A0 loc_61A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000061A0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000061A0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000061A5                 xor     r10d, r10d
.text:00000000000061A8                 mov     ebx, 66h ; 'f'
.text:00000000000061AD                 jmp     loc_5F34
.text:00000000000061AD ; ---------------------------------------------------------------------------
.text:00000000000061B2                 align 8
.text:00000000000061B8
.text:00000000000061B8 loc_61B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000061B8                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000061B8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000061BD                 xor     r10d, r10d
.text:00000000000061C0                 mov     ebx, 6Eh ; 'n'
.text:00000000000061C5                 jmp     loc_5F22
.text:00000000000061C5 ; ---------------------------------------------------------------------------
.text:00000000000061CA                 align 10h
.text:00000000000061D0
.text:00000000000061D0 loc_61D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000061D0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000061D0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000061D5                 jmp     loc_5FA0
.text:00000000000061D5 ; ---------------------------------------------------------------------------
.text:00000000000061DA                 align 20h
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000061E0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000061E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000061E3
.text:00000000000061E3 loc_61E3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000061E3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000061E8                 setz    dl
.text:00000000000061EB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000061F0                 jnz     loc_6D8A
.text:00000000000061F6                 mov     eax, r8d
.text:00000000000061F9                 mov     rcx, r15
.text:00000000000061FC                 xor     eax, 1
.text:00000000000061FF                 and     al, dl
.text:0000000000006201                 jz      short loc_6230
.text:0000000000006203                 cmp     r13, r15
.text:0000000000006206                 jbe     short loc_620D
.text:0000000000006208                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000620D
.text:000000000000620D loc_620D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000620D                 lea     rcx, [r15+1]
.text:0000000000006211                 cmp     r13, rcx
.text:0000000000006214                 jbe     short loc_621C
.text:0000000000006216                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000621C
.text:000000000000621C loc_621C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000621C                 lea     rcx, [r15+2]
.text:0000000000006220                 cmp     r13, rcx
.text:0000000000006223                 ja      loc_6859
.text:0000000000006229
.text:0000000000006229 loc_6229:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000006229                 lea     rcx, [r15+3]
.text:000000000000622D                 mov     r8d, eax
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000006230                 cmp     r13, rcx
.text:0000000000006233                 jbe     short loc_623A
.text:0000000000006235                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000623A
.text:000000000000623A loc_623A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000623A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000623F                 lea     r15, [rcx+1]
.text:0000000000006243                 jz      loc_6849
.text:0000000000006249                 lea     rax, [rbp+1]
.text:000000000000624D                 cmp     rax, r11
.text:0000000000006250                 jnb     short loc_626B
.text:0000000000006252                 mov     rax, [rsp+0E8h+s]
.text:0000000000006257                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000625C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000006260                 sub     eax, 30h ; '0'
.text:0000000000006263                 cmp     al, 9
.text:0000000000006265                 jbe     loc_6A99
.text:000000000000626B
.text:000000000000626B loc_626B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000626B                 mov     eax, r12d
.text:000000000000626E                 mov     ebx, 30h ; '0'
.text:0000000000006273                 xor     r12d, r12d
.text:0000000000006276                 jmp     loc_5E28
.text:0000000000006276 ; ---------------------------------------------------------------------------
.text:000000000000627B                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006280                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000006280                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000006285                 mov     r12d, r10d
.text:0000000000006288                 setz    dl
.text:000000000000628B                 xor     r10d, r10d
.text:000000000000628E                 xor     eax, eax
.text:0000000000006290                 jmp     loc_5E28
.text:0000000000006290 ; ---------------------------------------------------------------------------
.text:0000000000006295                 align 8
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006298                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000006298                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000629D                 setz    dl
.text:00000000000062A0                 xor     r10d, r10d
.text:00000000000062A3                 jmp     loc_6068
.text:00000000000062A3 ; ---------------------------------------------------------------------------
.text:00000000000062A8                 align 10h
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000062B0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000062B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000062B5                 setz    dl
.text:00000000000062B8                 xor     r10d, r10d
.text:00000000000062BB                 xor     r12d, r12d
.text:00000000000062BE                 jmp     loc_6071
.text:00000000000062BE ; ---------------------------------------------------------------------------
.text:00000000000062C3                 align 8
.text:00000000000062C8
.text:00000000000062C8 loc_62C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000062C8                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000062C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000062CD                 mov     r12d, r10d
.text:00000000000062D0                 mov     ebx, 20h ; ' '
.text:00000000000062D5                 setz    dl
.text:00000000000062D8                 xor     r10d, r10d
.text:00000000000062DB                 jmp     loc_6071
.text:00000000000062E0 ; ---------------------------------------------------------------------------
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000062E0                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000062E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000062E5                 xor     r10d, r10d
.text:00000000000062E8                 mov     ebx, 72h ; 'r'
.text:00000000000062ED                 jmp     loc_5F22
.text:00000000000062ED ; ---------------------------------------------------------------------------
.text:00000000000062F2                 align 8
.text:00000000000062F8
.text:00000000000062F8 loc_62F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000062F8                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:00000000000062F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000062FD                 jmp     loc_5FA0
.text:00000000000062FD ; ---------------------------------------------------------------------------
.text:0000000000006302                 align 8
.text:0000000000006308
.text:0000000000006308 loc_6308:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006308                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000006308                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000630D                 xor     r10d, r10d
.text:0000000000006310                 mov     ebx, 74h ; 't'
.text:0000000000006315                 jmp     loc_5F22
.text:0000000000006315 ; ---------------------------------------------------------------------------
.text:000000000000631A                 align 20h
.text:0000000000006320
.text:0000000000006320 loc_6320:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006320                                         ; DATA XREF: .rodata:jpt_617A↓o
.text:0000000000006320                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000006325                 jmp     loc_5FA0
.text:0000000000006325 ; ---------------------------------------------------------------------------
.text:000000000000632A                 align 10h
.text:0000000000006330
.text:0000000000006330 loc_6330:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000006330                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000006330                 xor     r10d, r10d
.text:0000000000006333                 jmp     loc_5DD0
.text:0000000000006333 ; ---------------------------------------------------------------------------
.text:0000000000006338                 align 20h
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000006340                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006345                 jnz     loc_6CB0
.text:000000000000634B
.text:000000000000634B loc_634B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000634B                 add     rbp, 1
.text:000000000000634F                 mov     eax, r8d
.text:0000000000006352                 xor     r12d, r12d
.text:0000000000006355                 mov     ebx, 5Ch ; '\'
.text:000000000000635A                 jmp     loc_5E6C
.text:000000000000635A ; ---------------------------------------------------------------------------
.text:000000000000635F                 align 20h
.text:0000000000006360
.text:0000000000006360 loc_6360:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000006360                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006365                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000636A                 mov     r12d, r8d
.text:000000000000636D                 mov     rbp, r11
.text:0000000000006370                 setz    dl
.text:0000000000006373                 mov     eax, ebx
.text:0000000000006375                 test    r15, r15
.text:0000000000006378                 setz    cl
.text:000000000000637B                 and     eax, edx
.text:000000000000637D                 and     al, cl
.text:000000000000637F                 jnz     loc_6DE6
.text:0000000000006385                 mov     eax, ebx
.text:0000000000006387                 xor     eax, 1
.text:000000000000638A                 and     dl, al
.text:000000000000638C                 jz      loc_6CFC
.text:0000000000006392                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000006397                 jz      loc_6CFA
.text:000000000000639D                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000063A2                 jnz     loc_6D9D
.text:00000000000063A8                 test    r13, r13
.text:00000000000063AB                 setz    al
.text:00000000000063AE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000063B4                 setnz   dl
.text:00000000000063B7                 and     al, dl
.text:00000000000063B9                 jz      loc_6DDC
.text:00000000000063BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000063C4
.text:00000000000063C4 loc_63C4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000063C4                 lea     rbx, asc_DB25   ; "'"
.text:00000000000063CB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000063CF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000063D7                 mov     r15d, 1
.text:00000000000063DD                 mov     [rsp+0E8h+n], 1
.text:00000000000063E6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000063EB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000063F0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000063F4                 jmp     loc_5CD3
.text:00000000000063F4 ; ---------------------------------------------------------------------------
.text:00000000000063F9                 align 20h
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000006400                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006405                 jnz     loc_6CB0
.text:000000000000640B                 test    r13, r13
.text:000000000000640E                 jz      loc_6810
.text:0000000000006414                 xor     edx, edx
.text:0000000000006416                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000641C                 jnz     loc_6810
.text:0000000000006422
.text:0000000000006422 loc_6422:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000006422                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000006422                 mov     [rsp+0E8h+var_98], r13
.text:0000000000006427                 add     r15, 3
.text:000000000000642B                 xor     eax, eax
.text:000000000000642D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000006432                 xor     r8d, r8d
.text:0000000000006435                 mov     r13, rdx
.text:0000000000006438                 mov     ebx, 27h ; '''
.text:000000000000643D                 jmp     loc_5E59
.text:000000000000643D ; ---------------------------------------------------------------------------
.text:0000000000006442                 align 8
.text:0000000000006448
.text:0000000000006448 loc_6448:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000006448                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000644D                 jz      short loc_6470
.text:000000000000644F                 lea     rcx, [rbp+2]
.text:0000000000006453                 cmp     rcx, r11
.text:0000000000006456                 jnb     short loc_6470
.text:0000000000006458                 mov     rax, [rsp+0E8h+s]
.text:000000000000645D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000006462                 jz      loc_6BF2
.text:0000000000006468                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006470
.text:0000000000006470 loc_6470:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000006470                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000006470                 xor     edx, edx
.text:0000000000006472                 xor     r12d, r12d
.text:0000000000006475                 xor     eax, eax
.text:0000000000006477                 mov     ebx, 3Fh ; '?'
.text:000000000000647C                 jmp     loc_5E28
.text:000000000000647C ; ---------------------------------------------------------------------------
.text:0000000000006481                 align 8
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000006488                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000648D                 jnz     loc_6CB0
.text:0000000000006493                 xor     r12d, r12d
.text:0000000000006496                 xor     eax, eax
.text:0000000000006498                 mov     ebx, 3Fh ; '?'
.text:000000000000649D                 jmp     loc_5E59
.text:000000000000649D ; ---------------------------------------------------------------------------
.text:00000000000064A2                 align 8
.text:00000000000064A8
.text:00000000000064A8 loc_64A8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000064A8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000064B0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000064B4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000064C0                 mov     [rsp+0E8h+ps], rax
.text:00000000000064C5                 jnz     short loc_64F4
.text:00000000000064C7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000064CC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000064D1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000064D6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000064DB                 call    _strlen
.text:00000000000064E0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000064E6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000064EC                 mov     r11, rax
.text:00000000000064EF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000064F4
.text:00000000000064F4 loc_64F4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000064F4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000064FC                 xor     ecx, ecx
.text:00000000000064FE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000006502                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000006507                 mov     rbx, rcx
.text:000000000000650A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000006512                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000006517                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000651C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000006524                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000006529                 mov     [rsp+0E8h+var_78], r13
.text:000000000000652E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000006533
.text:0000000000006533 loc_6533:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000006533                 mov     rax, [rsp+0E8h+s]
.text:0000000000006538                 lea     r14, [rbp+rbx+0]
.text:000000000000653D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000006542                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000006547                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000654C                 lea     r13, [rax+r14]
.text:0000000000006550                 sub     rdx, r14
.text:0000000000006553                 mov     rsi, r13
.text:0000000000006556                 call    rpl_mbrtowc
.text:000000000000655B                 test    rax, rax
.text:000000000000655E                 mov     r15, rax
.text:0000000000006561                 jz      short loc_65B1
.text:0000000000006563                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006567                 jz      loc_6B85
.text:000000000000656D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006571                 jz      loc_6B11
.text:0000000000006577                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000657C                 setz    al
.text:000000000000657F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000006583                 jnz     loc_6720
.text:0000000000006589
.text:0000000000006589 loc_6589:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000006589                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000006589                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000006590                 call    _iswprint
.text:0000000000006595                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000659A                 test    eax, eax
.text:000000000000659C                 mov     eax, 0
.text:00000000000065A1                 cmovz   r12d, eax
.text:00000000000065A5                 add     rbx, r15
.text:00000000000065A8                 call    _mbsinit
.text:00000000000065AD                 test    eax, eax
.text:00000000000065AF                 jz      short loc_6533
.text:00000000000065B1
.text:00000000000065B1 loc_65B1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000065B1                 mov     edx, r12d
.text:00000000000065B4                 mov     rdi, rbx
.text:00000000000065B7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000065BD                 xor     edx, 1
.text:00000000000065C0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000065C5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000065CB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000065CF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000065D7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000065DC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000065E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000065E6
.text:00000000000065E6 loc_65E6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000065E6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000065E6                 cmp     rdi, 1
.text:00000000000065EA                 jbe     loc_6BEB
.text:00000000000065F0
.text:00000000000065F0 loc_65F0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000065F0                 mov     rcx, rdi
.text:00000000000065F3                 xor     esi, esi
.text:00000000000065F5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000065FB                 add     rcx, rbp
.text:00000000000065FE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000006603                 jmp     loc_66BE
.text:0000000000006603 ; ---------------------------------------------------------------------------
.text:0000000000006608                 align 10h
.text:0000000000006610
.text:0000000000006610 loc_6610:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000006610                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006615                 setz    al
.text:0000000000006618                 test    r9b, r9b
.text:000000000000661B                 jnz     loc_6AD0
.text:0000000000006621                 mov     esi, r8d
.text:0000000000006624                 xor     esi, 1
.text:0000000000006627                 and     al, sil
.text:000000000000662A                 jz      short loc_665B
.text:000000000000662C                 cmp     r13, r15
.text:000000000000662F                 jbe     short loc_6636
.text:0000000000006631                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006636
.text:0000000000006636 loc_6636:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000006636                 lea     rsi, [r15+1]
.text:000000000000663A                 cmp     r13, rsi
.text:000000000000663D                 jbe     short loc_6645
.text:000000000000663F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000006645
.text:0000000000006645 loc_6645:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000006645                 lea     rsi, [r15+2]
.text:0000000000006649                 cmp     r13, rsi
.text:000000000000664C                 jbe     short loc_6654
.text:000000000000664E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006654
.text:0000000000006654 loc_6654:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000006654                 add     r15, 3
.text:0000000000006658                 mov     r8d, eax
.text:000000000000665B
.text:000000000000665B loc_665B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000665B                 cmp     r13, r15
.text:000000000000665E                 jbe     short loc_6665
.text:0000000000006660                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006665
.text:0000000000006665 loc_6665:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006665                 lea     rax, [r15+1]
.text:0000000000006669                 cmp     r13, rax
.text:000000000000666C                 jbe     short loc_667B
.text:000000000000666E                 mov     eax, ebx
.text:0000000000006670                 shr     al, 6
.text:0000000000006673                 add     eax, 30h ; '0'
.text:0000000000006676                 mov     [r14+r15+1], al
.text:000000000000667B
.text:000000000000667B loc_667B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000667B                 lea     rax, [r15+2]
.text:000000000000667F                 cmp     r13, rax
.text:0000000000006682                 jbe     short loc_6694
.text:0000000000006684                 mov     eax, ebx
.text:0000000000006686                 shr     al, 3
.text:0000000000006689                 and     eax, 7
.text:000000000000668C                 add     eax, 30h ; '0'
.text:000000000000668F                 mov     [r14+r15+2], al
.text:0000000000006694
.text:0000000000006694 loc_6694:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000006694                 and     ebx, 7
.text:0000000000006697                 add     rbp, 1
.text:000000000000669B                 add     r15, 3
.text:000000000000669F                 add     ebx, 30h ; '0'
.text:00000000000066A2                 cmp     rbp, rcx
.text:00000000000066A5                 jnb     loc_5E90
.text:00000000000066AB                 mov     esi, edx
.text:00000000000066AD
.text:00000000000066AD loc_66AD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000066AD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000066AD                 cmp     r13, r15
.text:00000000000066B0                 jbe     short loc_66B6
.text:00000000000066B2                 mov     [r14+r15], bl
.text:00000000000066B6
.text:00000000000066B6 loc_66B6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000066B6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000066BA                 add     r15, 1
.text:00000000000066BE
.text:00000000000066BE loc_66BE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000066BE                 test    dl, dl
.text:00000000000066C0                 jnz     loc_6610
.text:00000000000066C6                 mov     eax, esi
.text:00000000000066C8                 xor     eax, 1
.text:00000000000066CB                 and     eax, r8d
.text:00000000000066CE                 test    r10b, r10b
.text:00000000000066D1                 jz      short loc_66E1
.text:00000000000066D3                 cmp     r13, r15
.text:00000000000066D6                 jbe     short loc_66DD
.text:00000000000066D8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000066DD
.text:00000000000066DD loc_66DD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000066DD                 add     r15, 1
.text:00000000000066E1
.text:00000000000066E1 loc_66E1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000066E1                 add     rbp, 1
.text:00000000000066E5                 cmp     rbp, rcx
.text:00000000000066E8                 jnb     loc_5E6C
.text:00000000000066EE                 test    al, al
.text:00000000000066F0                 jz      loc_6AEE
.text:00000000000066F6                 cmp     r13, r15
.text:00000000000066F9                 jbe     short loc_6700
.text:00000000000066FB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000006700                 lea     rax, [r15+1]
.text:0000000000006704                 cmp     r13, rax
.text:0000000000006707                 jbe     short loc_670F
.text:0000000000006709                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000670F
.text:000000000000670F loc_670F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000670F                 add     r15, 2
.text:0000000000006713                 xor     r10d, r10d
.text:0000000000006716                 xor     r8d, r8d
.text:0000000000006719                 jmp     short loc_66AD
.text:0000000000006719 ; ---------------------------------------------------------------------------
.text:000000000000671B                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000006720                 cmp     r15, 1
.text:0000000000006724                 jz      loc_6589
.text:000000000000672A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000672F                 lea     rcx, [rdi+r15]
.text:0000000000006733                 lea     rdx, [rdi+r14+1]
.text:0000000000006738                 lea     r8, [rcx+r14]
.text:000000000000673C                 jmp     short loc_674D
.text:000000000000673C ; ---------------------------------------------------------------------------
.text:000000000000673E                 align 20h
.text:0000000000006740
.text:0000000000006740 loc_6740:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000006740                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000006740                 add     rdx, 1
.text:0000000000006744                 cmp     r8, rdx
.text:0000000000006747                 jz      loc_6589
.text:000000000000674D
.text:000000000000674D loc_674D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000674D                 movzx   ecx, byte ptr [rdx]
.text:0000000000006750                 sub     ecx, 5Bh ; '['
.text:0000000000006753                 cmp     cl, 21h ; '!'
.text:0000000000006756                 ja      short loc_6740
.text:0000000000006758                 mov     esi, 1
.text:000000000000675D                 shl     rsi, cl
.text:0000000000006760                 mov     rcx, rsi
.text:0000000000006763                 mov     rsi, 20000002Bh
.text:000000000000676D                 test    rcx, rsi
.text:0000000000006770                 jz      short loc_6740
.text:0000000000006772                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006777                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000677C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000006781                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006789
.text:0000000000006789 loc_6789:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000006789                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000006789                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000678E                 jz      short loc_67A0
.text:0000000000006790                 test    al, al
.text:0000000000006792                 mov     eax, 4
.text:0000000000006797                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000679C                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000067A0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000067A0                 sub     rsp, 8
.text:00000000000067A4                 mov     rcx, rbp
.text:00000000000067A7                 mov     rsi, r13
.text:00000000000067AA                 push    [rsp+0F0h+var_88]
.text:00000000000067AE                 push    [rsp+0F8h+var_80]
.text:00000000000067B2                 mov     rdi, r14
.text:00000000000067B5                 push    0
.text:00000000000067B7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000067BF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000067C4                 mov     rdx, [rsp+108h+s]
.text:00000000000067C9                 and     r9d, 0FFFFFFFDh
.text:00000000000067CD                 call    quotearg_buffer_restyled
.text:00000000000067D2                 add     rsp, 20h
.text:00000000000067D6                 mov     r15, rax
.text:00000000000067D9
.text:00000000000067D9 loc_67D9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000067D9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000067D9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000067E1                 xor     rbx, fs:28h
.text:00000000000067EA                 mov     rax, r15
.text:00000000000067ED                 jnz     loc_6DF3
.text:00000000000067F3                 add     rsp, 0B8h
.text:00000000000067FA                 pop     rbx
.text:00000000000067FB                 pop     rbp
.text:00000000000067FC                 pop     r12
.text:00000000000067FE                 pop     r13
.text:0000000000006800                 pop     r14
.text:0000000000006802                 pop     r15
.text:0000000000006804                 retn
.text:0000000000006804 ; ---------------------------------------------------------------------------
.text:0000000000006805                 align 8
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000006808                 mov     rbp, r11
.text:000000000000680B                 jmp     loc_6789
.text:0000000000006810 ; ---------------------------------------------------------------------------
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000006810                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000006810                 cmp     r13, r15
.text:0000000000006813                 jbe     short loc_681A
.text:0000000000006815                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000681A
.text:000000000000681A loc_681A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000681A                 lea     rax, [r15+1]
.text:000000000000681E                 cmp     r13, rax
.text:0000000000006821                 jbe     short loc_6829
.text:0000000000006823                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000006829
.text:0000000000006829 loc_6829:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000006829                 lea     rax, [r15+2]
.text:000000000000682D                 cmp     r13, rax
.text:0000000000006830                 jbe     loc_6E22
.text:0000000000006836                 mov     rdx, r13
.text:0000000000006839                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000683F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006844                 jmp     loc_6422
.text:0000000000006849 ; ---------------------------------------------------------------------------
.text:0000000000006849
.text:0000000000006849 loc_6849:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000006849                 mov     eax, r12d
.text:000000000000684C                 mov     ebx, 30h ; '0'
.text:0000000000006851                 xor     r12d, r12d
.text:0000000000006854                 jmp     loc_5E59
.text:0000000000006859 ; ---------------------------------------------------------------------------
.text:0000000000006859
.text:0000000000006859 loc_6859:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000006859                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000685F                 jmp     loc_6229
.text:0000000000006864 ; ---------------------------------------------------------------------------
.text:0000000000006864
.text:0000000000006864 loc_6864:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006864                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006864                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006866                 jnz     loc_5C93        ; jumptable 00000000000121F1 case 1
.text:000000000000686C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006871
.text:0000000000006871 loc_6871:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006871                 test    r13, r13
.text:0000000000006874                 jnz     loc_6E0A
.text:000000000000687A                 lea     rax, asc_DB25   ; "'"
.text:0000000000006881                 mov     [rsp+0E8h+var_98], 0
.text:000000000000688A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000688F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006894                 xor     r12d, r12d
.text:0000000000006897                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000689C                 mov     [rsp+0E8h+n], 1
.text:00000000000068A5                 mov     [rsp+0E8h+s2], rax
.text:00000000000068AA                 mov     r15d, 1
.text:00000000000068B0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000068B8                 jmp     loc_5CD3
.text:00000000000068B8 ; ---------------------------------------------------------------------------
.text:00000000000068BD                 align 20h
.text:00000000000068C0
.text:00000000000068C0 loc_68C0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000068C0                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:00000000000068C0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000068C2                 jnz     loc_6CBD
.text:00000000000068C8                 test    r13, r13
.text:00000000000068CB                 jz      loc_6AF6
.text:00000000000068D1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000068D5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000068DA                 xor     r12d, r12d
.text:00000000000068DD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000068E2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000068EB
.text:00000000000068EB loc_68EB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000068EB                 lea     rax, unk_DB23
.text:00000000000068F2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000068F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000068FC                 mov     [rsp+0E8h+n], 1
.text:0000000000006905                 mov     r15d, 1
.text:000000000000690B                 mov     [rsp+0E8h+s2], rax
.text:0000000000006910                 jmp     loc_5CD3
.text:0000000000006915 ; ---------------------------------------------------------------------------
.text:0000000000006915
.text:0000000000006915 loc_6915:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006915                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006915                 lea     rax, unk_DB23   ; jumptable 00000000000121F1 case 6
.text:000000000000691C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006921                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006926                 xor     r12d, r12d
.text:0000000000006929                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006932                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006937                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000693C                 mov     [rsp+0E8h+n], 1
.text:0000000000006945                 xor     r15d, r15d
.text:0000000000006948                 mov     [rsp+0E8h+s2], rax
.text:000000000000694D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000006955                 jmp     loc_5CD3
.text:000000000000695A ; ---------------------------------------------------------------------------
.text:000000000000695A
.text:000000000000695A loc_695A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000695A                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:000000000000695A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000695F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006964                 xor     r12d, r12d
.text:0000000000006967                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006970                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006975                 xor     r15d, r15d
.text:0000000000006978                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000697D                 mov     [rsp+0E8h+n], 0
.text:0000000000006986                 mov     [rsp+0E8h+s2], 0
.text:000000000000698F                 jmp     loc_5CD3
.text:0000000000006994 ; ---------------------------------------------------------------------------
.text:0000000000006994
.text:0000000000006994 loc_6994:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006994                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006994                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006999                 jz      short loc_69F1
.text:000000000000699B                 lea     rsi, asc_DB27   ; "`"
.text:00000000000069A2                 xor     edi, edi        ; domainname
.text:00000000000069A4                 mov     edx, 5          ; category
.text:00000000000069A9                 call    _dcgettext
.text:00000000000069AE                 mov     rcx, rax
.text:00000000000069B1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000069B6                 lea     rax, asc_DB27   ; "`"
.text:00000000000069BD                 cmp     rcx, rax
.text:00000000000069C0                 jz      loc_6D5E
.text:00000000000069C6
.text:00000000000069C6 loc_69C6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000069C6                 lea     rsi, asc_DB25   ; "'"
.text:00000000000069CD                 xor     edi, edi        ; domainname
.text:00000000000069CF                 mov     edx, 5          ; category
.text:00000000000069D4                 call    _dcgettext
.text:00000000000069D9                 mov     rcx, rax
.text:00000000000069DC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000069E1                 lea     rax, asc_DB25   ; "'"
.text:00000000000069E8                 cmp     rcx, rax
.text:00000000000069EB                 jz      loc_6D74
.text:00000000000069F1
.text:00000000000069F1 loc_69F1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000069F1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000069F1                 xor     r15d, r15d
.text:00000000000069F4                 test    ebx, ebx
.text:00000000000069F6                 jz      loc_6BBD
.text:00000000000069FC
.text:00000000000069FC loc_69FC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000069FC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000069FC                 test    ebx, ebx
.text:00000000000069FE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000006A03                 setnz   [rsp+0E8h+var_D9]
.text:0000000000006A08                 xor     r12d, r12d
.text:0000000000006A0B                 mov     rdi, rbx        ; s
.text:0000000000006A0E                 call    _strlen
.text:0000000000006A13                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006A18                 mov     [rsp+0E8h+n], rax
.text:0000000000006A1D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006A22                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006A27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006A30                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006A35                 jmp     loc_5CD3
.text:0000000000006A3A ; ---------------------------------------------------------------------------
.text:0000000000006A3A
.text:0000000000006A3A loc_6A3A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006A3A                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006A3A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000006A3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006A44                 xor     r12d, r12d
.text:0000000000006A47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006A50                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006A55                 xor     r15d, r15d
.text:0000000000006A58                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006A5D                 mov     [rsp+0E8h+n], 0
.text:0000000000006A66                 mov     [rsp+0E8h+s2], 0
.text:0000000000006A6F                 jmp     loc_5CD3
.text:0000000000006A74 ; ---------------------------------------------------------------------------
.text:0000000000006A74
.text:0000000000006A74 loc_6A74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006A74                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006A74                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000006A79                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006A7E                 xor     r12d, r12d
.text:0000000000006A81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006A8A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006A8F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006A94                 jmp     loc_5CB3
.text:0000000000006A99 ; ---------------------------------------------------------------------------
.text:0000000000006A99
.text:0000000000006A99 loc_6A99:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000006A99                 cmp     r13, r15
.text:0000000000006A9C                 jbe     short loc_6AA3
.text:0000000000006A9E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000006AA3
.text:0000000000006AA3 loc_6AA3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000006AA3                 lea     rax, [rcx+2]
.text:0000000000006AA7                 cmp     r13, rax
.text:0000000000006AAA                 jbe     short loc_6AB2
.text:0000000000006AAC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000006AB2
.text:0000000000006AB2 loc_6AB2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000006AB2                 mov     eax, r12d
.text:0000000000006AB5                 lea     r15, [rcx+3]
.text:0000000000006AB9                 xor     r12d, r12d
.text:0000000000006ABC                 mov     ebx, 30h ; '0'
.text:0000000000006AC1                 jmp     loc_5E28
.text:0000000000006AC1 ; ---------------------------------------------------------------------------
.text:0000000000006AC6                 align 10h
.text:0000000000006AD0
.text:0000000000006AD0 loc_6AD0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000006AD0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006AD5                 mov     rbp, r11
.text:0000000000006AD8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006ADC                 jmp     loc_6789
.text:0000000000006AE1 ; ---------------------------------------------------------------------------
.text:0000000000006AE1
.text:0000000000006AE1 loc_6AE1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000006AE1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006AE6                 xor     r12d, r12d
.text:0000000000006AE9                 jmp     loc_65F0
.text:0000000000006AEE ; ---------------------------------------------------------------------------
.text:0000000000006AEE
.text:0000000000006AEE loc_6AEE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000006AEE                 xor     r10d, r10d
.text:0000000000006AF1                 jmp     loc_66AD
.text:0000000000006AF6 ; ---------------------------------------------------------------------------
.text:0000000000006AF6
.text:0000000000006AF6 loc_6AF6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000006AF6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006AFF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006B04                 xor     r12d, r12d
.text:0000000000006B07                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B0C                 jmp     loc_68EB
.text:0000000000006B11 ; ---------------------------------------------------------------------------
.text:0000000000006B11
.text:0000000000006B11 loc_6B11:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000006B11                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006B16                 mov     rsi, r14
.text:0000000000006B19                 mov     rcx, r13
.text:0000000000006B1C                 mov     rax, rbx
.text:0000000000006B1F                 mov     rdi, rbx
.text:0000000000006B22                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006B28                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006B2D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000006B35                 cmp     rsi, r11
.text:0000000000006B38                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006B3E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006B46                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006B4B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006B50                 jnb     short loc_6B78
.text:0000000000006B52                 cmp     byte ptr [rcx], 0
.text:0000000000006B55                 jnz     short loc_6B67
.text:0000000000006B57                 jmp     short loc_6B78
.text:0000000000006B57 ; ---------------------------------------------------------------------------
.text:0000000000006B59                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000006B60                 cmp     byte ptr [r9+rax], 0
.text:0000000000006B65                 jz      short loc_6B75
.text:0000000000006B67
.text:0000000000006B67 loc_6B67:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000006B67                 add     rax, 1
.text:0000000000006B6B                 lea     rdx, [rbp+rax+0]
.text:0000000000006B70                 cmp     r11, rdx
.text:0000000000006B73                 ja      short loc_6B60
.text:0000000000006B75
.text:0000000000006B75 loc_6B75:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000006B75                 mov     rdi, rax
.text:0000000000006B78
.text:0000000000006B78 loc_6B78:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000006B78                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000006B78                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006B7D                 xor     r12d, r12d
.text:0000000000006B80                 jmp     loc_65E6
.text:0000000000006B85 ; ---------------------------------------------------------------------------
.text:0000000000006B85
.text:0000000000006B85 loc_6B85:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000006B85                 mov     rdi, rbx
.text:0000000000006B88                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006B8E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006B93                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006B99                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006BA1                 xor     r12d, r12d
.text:0000000000006BA4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006BA9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006BAE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006BB3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006BB8                 jmp     loc_65E6
.text:0000000000006BBD ; ---------------------------------------------------------------------------
.text:0000000000006BBD
.text:0000000000006BBD loc_6BBD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000006BBD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000006BC2                 movzx   eax, byte ptr [rdx]
.text:0000000000006BC5                 test    al, al
.text:0000000000006BC7                 jz      loc_69FC
.text:0000000000006BCD                 nop     dword ptr [rax]
.text:0000000000006BD0
.text:0000000000006BD0 loc_6BD0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000006BD0                 cmp     r13, r15
.text:0000000000006BD3                 jbe     short loc_6BD9
.text:0000000000006BD5                 mov     [r14+r15], al
.text:0000000000006BD9
.text:0000000000006BD9 loc_6BD9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000006BD9                 add     r15, 1
.text:0000000000006BDD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000006BE2                 test    al, al
.text:0000000000006BE4                 jnz     short loc_6BD0
.text:0000000000006BE6                 jmp     loc_69FC
.text:0000000000006BEB ; ---------------------------------------------------------------------------
.text:0000000000006BEB
.text:0000000000006BEB loc_6BEB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000006BEB                 mov     eax, edx
.text:0000000000006BED                 jmp     loc_6147
.text:0000000000006BF2 ; ---------------------------------------------------------------------------
.text:0000000000006BF2
.text:0000000000006BF2 loc_6BF2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000006BF2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000006BF6                 cmp     bl, 3Eh ; '>'
.text:0000000000006BF9                 ja      loc_6470
.text:0000000000006BFF                 mov     rax, 7000A38200000000h
.text:0000000000006C09                 bt      rax, rbx
.text:0000000000006C0D                 jnb     loc_6470
.text:0000000000006C13                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006C18                 jnz     loc_6E02
.text:0000000000006C1E                 cmp     r13, r15
.text:0000000000006C21                 jbe     short loc_6C28
.text:0000000000006C23                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000006C28
.text:0000000000006C28 loc_6C28:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000006C28                 lea     rax, [r15+1]
.text:0000000000006C2C                 cmp     r13, rax
.text:0000000000006C2F                 jbe     short loc_6C37
.text:0000000000006C31                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000006C37
.text:0000000000006C37 loc_6C37:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000006C37                 lea     rax, [r15+2]
.text:0000000000006C3B                 cmp     r13, rax
.text:0000000000006C3E                 jbe     short loc_6C46
.text:0000000000006C40                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000006C46
.text:0000000000006C46 loc_6C46:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000006C46                 lea     rax, [r15+3]
.text:0000000000006C4A                 cmp     r13, rax
.text:0000000000006C4D                 jbe     short loc_6C55
.text:0000000000006C4F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000006C55
.text:0000000000006C55 loc_6C55:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000006C55                 add     r15, 4
.text:0000000000006C59                 xor     edx, edx
.text:0000000000006C5B                 xor     r12d, r12d
.text:0000000000006C5E                 xor     eax, eax
.text:0000000000006C60                 mov     rbp, rcx
.text:0000000000006C63                 jmp     loc_5E28
.text:0000000000006C68 ; ---------------------------------------------------------------------------
.text:0000000000006C68
.text:0000000000006C68 loc_6C68:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006C68                                         ; DATA XREF: .rodata:jpt_5C91↓o
.text:0000000000006C68                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000006C6A                 jz      loc_6DF8
.text:0000000000006C70                 lea     rax, asc_DB25   ; "'"
.text:0000000000006C77                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006C7C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006C81                 xor     r12d, r12d
.text:0000000000006C84                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006C8D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006C92                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006C97                 mov     [rsp+0E8h+n], 1
.text:0000000000006CA0                 xor     r15d, r15d
.text:0000000000006CA3                 mov     [rsp+0E8h+s2], rax
.text:0000000000006CA8                 jmp     loc_5CD3
.text:0000000000006CA8 ; ---------------------------------------------------------------------------
.text:0000000000006CAD                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 loc_6CB0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000006CB0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000006CB0                 mov     rbp, r11
.text:0000000000006CB3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006CB8                 jmp     loc_6789
.text:0000000000006CBD ; ---------------------------------------------------------------------------
.text:0000000000006CBD
.text:0000000000006CBD loc_6CBD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000006CBD                 lea     rax, unk_DB23
.text:0000000000006CC4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006CC9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006CCE                 xor     r12d, r12d
.text:0000000000006CD1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006CDA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006CDF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006CE4                 mov     [rsp+0E8h+n], 1
.text:0000000000006CED                 xor     r15d, r15d
.text:0000000000006CF0                 mov     [rsp+0E8h+s2], rax
.text:0000000000006CF5                 jmp     loc_5CD3
.text:0000000000006CFA ; ---------------------------------------------------------------------------
.text:0000000000006CFA
.text:0000000000006CFA loc_6CFA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000006CFA                 mov     eax, edx
.text:0000000000006CFC
.text:0000000000006CFC loc_6CFC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000006CFC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000006CFC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000006D01                 test    rbx, rbx
.text:0000000000006D04                 jz      short loc_6D32
.text:0000000000006D06                 test    al, al
.text:0000000000006D08                 jz      short loc_6D32
.text:0000000000006D0A                 movzx   ecx, byte ptr [rbx]
.text:0000000000006D0D                 mov     rax, rbx
.text:0000000000006D10                 test    cl, cl
.text:0000000000006D12                 jz      short loc_6D32
.text:0000000000006D14                 mov     rdx, r15
.text:0000000000006D17                 sub     rax, r15
.text:0000000000006D1A
.text:0000000000006D1A loc_6D1A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000006D1A                 cmp     r13, rdx
.text:0000000000006D1D                 jbe     short loc_6D23
.text:0000000000006D1F                 mov     [r14+rdx], cl
.text:0000000000006D23
.text:0000000000006D23 loc_6D23:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000006D23                 add     rdx, 1
.text:0000000000006D27                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000006D2B                 test    cl, cl
.text:0000000000006D2D                 jnz     short loc_6D1A
.text:0000000000006D2F                 mov     r15, rdx
.text:0000000000006D32
.text:0000000000006D32 loc_6D32:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000006D32                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000006D32                 cmp     r13, r15
.text:0000000000006D35                 jbe     loc_67D9
.text:0000000000006D3B                 mov     byte ptr [r14+r15], 0
.text:0000000000006D40                 jmp     loc_67D9
.text:0000000000006D45 ; ---------------------------------------------------------------------------
.text:0000000000006D45
.text:0000000000006D45 loc_6D45:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000006D45                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006D4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006D4F                 mov     rbp, r11
.text:0000000000006D52                 setz    al
.text:0000000000006D55                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006D59                 jmp     loc_6789
.text:0000000000006D5E ; ---------------------------------------------------------------------------
.text:0000000000006D5E
.text:0000000000006D5E loc_6D5E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000006D5E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006D62                 mov     rdi, rcx
.text:0000000000006D65                 call    gettext_quote
.text:0000000000006D6A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006D6F                 jmp     loc_69C6
.text:0000000000006D74 ; ---------------------------------------------------------------------------
.text:0000000000006D74
.text:0000000000006D74 loc_6D74:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000006D74                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006D78                 mov     rdi, rcx
.text:0000000000006D7B                 call    gettext_quote
.text:0000000000006D80                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006D85                 jmp     loc_69F1
.text:0000000000006D8A ; ---------------------------------------------------------------------------
.text:0000000000006D8A
.text:0000000000006D8A loc_6D8A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000006D8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006D8F                 mov     rbp, r11
.text:0000000000006D92                 mov     eax, edx
.text:0000000000006D94                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006D98                 jmp     loc_6789
.text:0000000000006D9D ; ---------------------------------------------------------------------------
.text:0000000000006D9D
.text:0000000000006D9D loc_6D9D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000006D9D                 sub     rsp, 8
.text:0000000000006DA1                 mov     r8d, 5
.text:0000000000006DA7                 mov     rcx, r11
.text:0000000000006DAA                 push    [rsp+0F0h+var_88]
.text:0000000000006DAE                 push    [rsp+0F8h+var_80]
.text:0000000000006DB2                 mov     rdi, r14
.text:0000000000006DB5                 push    [rsp+100h+var_C8]
.text:0000000000006DB9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000006DC1                 mov     rdx, [rsp+108h+s]
.text:0000000000006DC6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000006DCB                 call    quotearg_buffer_restyled
.text:0000000000006DD0                 add     rsp, 20h
.text:0000000000006DD4                 mov     r15, rax
.text:0000000000006DD7                 jmp     loc_67D9
.text:0000000000006DDC ; ---------------------------------------------------------------------------
.text:0000000000006DDC
.text:0000000000006DDC loc_6DDC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000006DDC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000006DE1                 jmp     loc_6CFC
.text:0000000000006DE6 ; ---------------------------------------------------------------------------
.text:0000000000006DE6
.text:0000000000006DE6 loc_6DE6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000006DE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006DEE                 jmp     loc_6789
.text:0000000000006DF3 ; ---------------------------------------------------------------------------
.text:0000000000006DF3
.text:0000000000006DF3 loc_6DF3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000006DF3                 call    ___stack_chk_fail
.text:0000000000006DF8 ; ---------------------------------------------------------------------------
.text:0000000000006DF8
.text:0000000000006DF8 loc_6DF8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000006DF8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006DFD                 jmp     loc_6871
.text:0000000000006E02 ; ---------------------------------------------------------------------------
.text:0000000000006E02
.text:0000000000006E02 loc_6E02:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000006E02                 mov     rbp, r11
.text:0000000000006E05                 jmp     loc_67A0
.text:0000000000006E0A ; ---------------------------------------------------------------------------
.text:0000000000006E0A
.text:0000000000006E0A loc_6E0A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000006E0A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006E0F                 xor     eax, eax
.text:0000000000006E11                 xor     r12d, r12d
.text:0000000000006E14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006E1D                 jmp     loc_63C4
.text:0000000000006E22 ; ---------------------------------------------------------------------------
.text:0000000000006E22
.text:0000000000006E22 loc_6E22:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000006E22                 mov     rdx, r13
.text:0000000000006E25                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006E2A                 jmp     loc_6422
.text:0000000000006E2F ; ---------------------------------------------------------------------------
.text:0000000000006E2F
.text:0000000000006E2F def_5C91:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000006E2F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000006E2F ; } // starts at 5C00
.text:0000000000006E2F quotearg_buffer_restyled endp
.text:0000000000006E2F
.text:0000000000006E2F ; ---------------------------------------------------------------------------
.text:0000000000006E34                 align 20h
.text:0000000000006E40
.text:0000000000006E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E40
.text:0000000000006E40
.text:0000000000006E40 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000006E40                                         ; quotearg_n_mem+7↓j ...
.text:0000000000006E40
.text:0000000000006E40 var_50          = qword ptr -50h
.text:0000000000006E40 var_48          = qword ptr -48h
.text:0000000000006E40 var_40          = dword ptr -40h
.text:0000000000006E40 var_3C          = dword ptr -3Ch
.text:0000000000006E40
.text:0000000000006E40 ; __unwind {
.text:0000000000006E40                 push    r15
.text:0000000000006E42                 push    r14
.text:0000000000006E44                 movsxd  r15, edi
.text:0000000000006E47                 push    r13
.text:0000000000006E49                 push    r12
.text:0000000000006E4B                 mov     r14, rdx
.text:0000000000006E4E                 push    rbp
.text:0000000000006E4F                 push    rbx
.text:0000000000006E50                 mov     rbp, rcx
.text:0000000000006E53                 sub     rsp, 28h
.text:0000000000006E57                 mov     [rsp+58h+var_50], rsi
.text:0000000000006E5C                 call    ___errno_location
.text:0000000000006E61                 mov     r13, rax
.text:0000000000006E64                 mov     eax, [rax]
.text:0000000000006E66                 test    r15d, r15d
.text:0000000000006E69                 mov     rbx, cs:slotvec
.text:0000000000006E70                 mov     [rsp+58h+var_40], eax
.text:0000000000006E74                 js      loc_6FE1
.text:0000000000006E7A                 cmp     cs:nslots, r15d
.text:0000000000006E81                 jg      short loc_6EE5
.text:0000000000006E83                 cmp     r15d, 7FFFFFFFh
.text:0000000000006E8A                 jz      loc_6FE6
.text:0000000000006E90                 lea     r12d, [r15+1]
.text:0000000000006E94                 lea     rax, slotvec0
.text:0000000000006E9B                 movsxd  rsi, r12d
.text:0000000000006E9E                 shl     rsi, 4
.text:0000000000006EA2                 cmp     rbx, rax
.text:0000000000006EA5                 jz      loc_6FC0
.text:0000000000006EAB                 mov     rdi, rbx
.text:0000000000006EAE                 call    xrealloc
.text:0000000000006EB3                 mov     rbx, rax
.text:0000000000006EB6                 mov     cs:slotvec, rax
.text:0000000000006EBD
.text:0000000000006EBD loc_6EBD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000006EBD                 movsxd  rdi, cs:nslots
.text:0000000000006EC4                 mov     edx, r12d
.text:0000000000006EC7                 xor     esi, esi        ; c
.text:0000000000006EC9                 sub     edx, edi
.text:0000000000006ECB                 shl     rdi, 4
.text:0000000000006ECF                 movsxd  rdx, edx
.text:0000000000006ED2                 add     rdi, rbx        ; s
.text:0000000000006ED5                 shl     rdx, 4          ; n
.text:0000000000006ED9                 call    _memset
.text:0000000000006EDE                 mov     cs:nslots, r12d
.text:0000000000006EE5
.text:0000000000006EE5 loc_6EE5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000006EE5                 mov     eax, [rbp+4]
.text:0000000000006EE8                 shl     r15, 4
.text:0000000000006EEC                 sub     rsp, 8
.text:0000000000006EF0                 add     rbx, r15
.text:0000000000006EF3                 lea     r15, [rbp+8]
.text:0000000000006EF7                 mov     r8d, [rbp+0]
.text:0000000000006EFB                 mov     r11, [rbx]
.text:0000000000006EFE                 mov     r12, [rbx+8]
.text:0000000000006F02                 mov     rcx, r14
.text:0000000000006F05                 or      eax, 1
.text:0000000000006F08                 mov     [rsp+60h+var_3C], eax
.text:0000000000006F0C                 push    qword ptr [rbp+30h]
.text:0000000000006F0F                 mov     r9d, eax
.text:0000000000006F12                 push    qword ptr [rbp+28h]
.text:0000000000006F15                 push    r15
.text:0000000000006F17                 mov     rsi, r11
.text:0000000000006F1A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006F1F                 mov     rdi, r12
.text:0000000000006F22                 mov     [rsp+78h+var_48], r11
.text:0000000000006F27                 call    quotearg_buffer_restyled
.text:0000000000006F2C                 add     rsp, 20h
.text:0000000000006F30                 mov     r11, [rsp+58h+var_48]
.text:0000000000006F35                 cmp     r11, rax
.text:0000000000006F38                 ja      short loc_6FA1
.text:0000000000006F3A                 lea     rsi, [rax+1]
.text:0000000000006F3E                 lea     rax, slot0
.text:0000000000006F45                 cmp     r12, rax
.text:0000000000006F48                 mov     [rbx], rsi
.text:0000000000006F4B                 jz      short loc_6F5F
.text:0000000000006F4D                 mov     rdi, r12        ; ptr
.text:0000000000006F50                 mov     [rsp+58h+var_48], rsi
.text:0000000000006F55                 call    _free
.text:0000000000006F5A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000006F5F
.text:0000000000006F5F loc_6F5F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000006F5F                 mov     rdi, rsi
.text:0000000000006F62                 mov     [rsp+58h+var_48], rsi
.text:0000000000006F67                 call    xmalloc
.text:0000000000006F6C                 sub     rsp, 8
.text:0000000000006F70                 mov     [rbx+8], rax
.text:0000000000006F74                 mov     r8d, [rbp+0]
.text:0000000000006F78                 push    qword ptr [rbp+30h]
.text:0000000000006F7B                 push    qword ptr [rbp+28h]
.text:0000000000006F7E                 mov     rcx, r14
.text:0000000000006F81                 push    r15
.text:0000000000006F83                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000006F88                 mov     rdi, rax
.text:0000000000006F8B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000006F90                 mov     rsi, [rsp+78h+var_48]
.text:0000000000006F95                 mov     r12, rax
.text:0000000000006F98                 call    quotearg_buffer_restyled
.text:0000000000006F9D                 add     rsp, 20h
.text:0000000000006FA1
.text:0000000000006FA1 loc_6FA1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000006FA1                 mov     eax, [rsp+58h+var_40]
.text:0000000000006FA5                 mov     [r13+0], eax
.text:0000000000006FA9                 add     rsp, 28h
.text:0000000000006FAD                 mov     rax, r12
.text:0000000000006FB0                 pop     rbx
.text:0000000000006FB1                 pop     rbp
.text:0000000000006FB2                 pop     r12
.text:0000000000006FB4                 pop     r13
.text:0000000000006FB6                 pop     r14
.text:0000000000006FB8                 pop     r15
.text:0000000000006FBA                 retn
.text:0000000000006FBA ; ---------------------------------------------------------------------------
.text:0000000000006FBB                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 loc_6FC0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000006FC0                 xor     edi, edi
.text:0000000000006FC2                 call    xrealloc
.text:0000000000006FC7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000006FCF                 mov     rbx, rax
.text:0000000000006FD2                 mov     cs:slotvec, rax
.text:0000000000006FD9                 movups  xmmword ptr [rax], xmm0
.text:0000000000006FDC                 jmp     loc_6EBD
.text:0000000000006FE1 ; ---------------------------------------------------------------------------
.text:0000000000006FE1
.text:0000000000006FE1 loc_6FE1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000006FE1                 call    _abort
.text:0000000000006FE6 ; ---------------------------------------------------------------------------
.text:0000000000006FE6
.text:0000000000006FE6 loc_6FE6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000006FE6                 call    xalloc_die
.text:0000000000006FE6 ; } // starts at 6E40
.text:0000000000006FE6 quotearg_n_options endp
.text:0000000000006FE6
.text:0000000000006FE6 ; ---------------------------------------------------------------------------
.text:0000000000006FEB                 align 10h
.text:0000000000006FF0
.text:0000000000006FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FF0
.text:0000000000006FF0 ; Attributes: info_from_lumina
.text:0000000000006FF0
.text:0000000000006FF0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000006FF0                 public clone_quoting_options
.text:0000000000006FF0 clone_quoting_options proc near
.text:0000000000006FF0 ; __unwind {
.text:0000000000006FF0                 push    r12
.text:0000000000006FF2                 push    rbp
.text:0000000000006FF3                 push    rbx
.text:0000000000006FF4                 mov     rbx, rdi
.text:0000000000006FF7                 call    ___errno_location
.text:0000000000006FFC                 mov     r12d, [rax]
.text:0000000000006FFF                 mov     rbp, rax
.text:0000000000007002                 lea     rax, default_quoting_options
.text:0000000000007009                 test    rbx, rbx
.text:000000000000700C                 mov     esi, 38h ; '8'  ; n
.text:0000000000007011                 cmovz   rbx, rax
.text:0000000000007015                 mov     rdi, rbx        ; src
.text:0000000000007018                 call    xmemdup
.text:000000000000701D                 mov     [rbp+0], r12d
.text:0000000000007021                 pop     rbx
.text:0000000000007022                 pop     rbp
.text:0000000000007023                 pop     r12
.text:0000000000007025                 retn
.text:0000000000007025 ; } // starts at 6FF0
.text:0000000000007025 clone_quoting_options endp
.text:0000000000007025
.text:0000000000007025 ; ---------------------------------------------------------------------------
.text:0000000000007026                 align 10h
.text:0000000000007030
.text:0000000000007030 ; =============== S U B R O U T I N E =======================================
.text:0000000000007030
.text:0000000000007030
.text:0000000000007030                 public get_quoting_style
.text:0000000000007030 get_quoting_style proc near
.text:0000000000007030 ; __unwind {
.text:0000000000007030                 lea     rax, default_quoting_options
.text:0000000000007037                 test    rdi, rdi
.text:000000000000703A                 cmovz   rdi, rax
.text:000000000000703E                 mov     eax, [rdi]
.text:0000000000007040                 retn
.text:0000000000007040 ; } // starts at 7030
.text:0000000000007040 get_quoting_style endp
.text:0000000000007040
.text:0000000000007040 ; ---------------------------------------------------------------------------
.text:0000000000007041                 align 10h
.text:0000000000007050
.text:0000000000007050 ; =============== S U B R O U T I N E =======================================
.text:0000000000007050
.text:0000000000007050
.text:0000000000007050                 public set_quoting_style
.text:0000000000007050 set_quoting_style proc near
.text:0000000000007050 ; __unwind {
.text:0000000000007050                 lea     rax, default_quoting_options
.text:0000000000007057                 test    rdi, rdi
.text:000000000000705A                 cmovz   rdi, rax
.text:000000000000705E                 mov     [rdi], esi
.text:0000000000007060                 retn
.text:0000000000007060 ; } // starts at 7050
.text:0000000000007060 set_quoting_style endp
.text:0000000000007060
.text:0000000000007060 ; ---------------------------------------------------------------------------
.text:0000000000007061                 align 10h
.text:0000000000007070
.text:0000000000007070 ; =============== S U B R O U T I N E =======================================
.text:0000000000007070
.text:0000000000007070 ; Attributes: info_from_lumina
.text:0000000000007070
.text:0000000000007070 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000007070                 public set_char_quoting
.text:0000000000007070 set_char_quoting proc near
.text:0000000000007070 ; __unwind {
.text:0000000000007070                 lea     rax, default_quoting_options
.text:0000000000007077                 test    rdi, rdi
.text:000000000000707A                 mov     ecx, esi
.text:000000000000707C                 cmovz   rdi, rax
.text:0000000000007080                 mov     eax, esi
.text:0000000000007082                 and     ecx, 1Fh
.text:0000000000007085                 shr     al, 5
.text:0000000000007088                 movzx   eax, al
.text:000000000000708B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000007090                 mov     esi, [rdi]
.text:0000000000007092                 mov     eax, esi
.text:0000000000007094                 shr     eax, cl
.text:0000000000007096                 xor     edx, eax
.text:0000000000007098                 and     eax, 1
.text:000000000000709B                 and     edx, 1
.text:000000000000709E                 shl     edx, cl
.text:00000000000070A0                 xor     edx, esi
.text:00000000000070A2                 mov     [rdi], edx
.text:00000000000070A4                 retn
.text:00000000000070A4 ; } // starts at 7070
.text:00000000000070A4 set_char_quoting endp
.text:00000000000070A4
.text:00000000000070A4 ; ---------------------------------------------------------------------------
.text:00000000000070A5                 align 10h
.text:00000000000070B0
.text:00000000000070B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070B0
.text:00000000000070B0
.text:00000000000070B0                 public set_quoting_flags
.text:00000000000070B0 set_quoting_flags proc near
.text:00000000000070B0 ; __unwind {
.text:00000000000070B0                 lea     rax, default_quoting_options
.text:00000000000070B7                 test    rdi, rdi
.text:00000000000070BA                 cmovz   rdi, rax
.text:00000000000070BE                 mov     eax, [rdi+4]
.text:00000000000070C1                 mov     [rdi+4], esi
.text:00000000000070C4                 retn
.text:00000000000070C4 ; } // starts at 70B0
.text:00000000000070C4 set_quoting_flags endp
.text:00000000000070C4
.text:00000000000070C4 ; ---------------------------------------------------------------------------
.text:00000000000070C5                 align 10h
.text:00000000000070D0
.text:00000000000070D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070D0
.text:00000000000070D0 ; Attributes: info_from_lumina
.text:00000000000070D0
.text:00000000000070D0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000070D0                 public set_custom_quoting
.text:00000000000070D0 set_custom_quoting proc near
.text:00000000000070D0 ; __unwind {
.text:00000000000070D0                 lea     rax, default_quoting_options
.text:00000000000070D7                 test    rdi, rdi
.text:00000000000070DA                 cmovz   rdi, rax
.text:00000000000070DE                 test    rsi, rsi
.text:00000000000070E1                 mov     dword ptr [rdi], 0Ah
.text:00000000000070E7                 jz      short loc_70F7
.text:00000000000070E9                 test    rdx, rdx
.text:00000000000070EC                 jz      short loc_70F7
.text:00000000000070EE                 mov     [rdi+28h], rsi
.text:00000000000070F2                 mov     [rdi+30h], rdx
.text:00000000000070F6                 retn
.text:00000000000070F7 ; ---------------------------------------------------------------------------
.text:00000000000070F7
.text:00000000000070F7 loc_70F7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000070F7                                         ; set_custom_quoting+1C↑j
.text:00000000000070F7                 sub     rsp, 8
.text:00000000000070FB                 call    _abort
.text:00000000000070FB ; } // starts at 70D0
.text:00000000000070FB set_custom_quoting endp
.text:00000000000070FB
.text:0000000000007100
.text:0000000000007100 ; =============== S U B R O U T I N E =======================================
.text:0000000000007100
.text:0000000000007100 ; Attributes: info_from_lumina
.text:0000000000007100
.text:0000000000007100 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000007100                 public quotearg_buffer
.text:0000000000007100 quotearg_buffer proc near
.text:0000000000007100
.text:0000000000007100 var_40          = qword ptr -40h
.text:0000000000007100
.text:0000000000007100 ; __unwind {
.text:0000000000007100                 push    r15
.text:0000000000007102                 push    r14
.text:0000000000007104                 lea     rax, default_quoting_options
.text:000000000000710B                 push    r13
.text:000000000000710D                 push    r12
.text:000000000000710F                 mov     r13, rdi
.text:0000000000007112                 push    rbp
.text:0000000000007113                 push    rbx
.text:0000000000007114                 mov     rbx, r8
.text:0000000000007117                 mov     r14, rsi
.text:000000000000711A                 mov     r15, rdx
.text:000000000000711D                 sub     rsp, 18h
.text:0000000000007121                 test    r8, r8
.text:0000000000007124                 cmovz   rbx, rax
.text:0000000000007128                 mov     [rsp+48h+var_40], rcx
.text:000000000000712D                 call    ___errno_location
.text:0000000000007132                 mov     r12d, [rax]
.text:0000000000007135                 mov     rbp, rax
.text:0000000000007138                 lea     rax, [rbx+8]
.text:000000000000713C                 sub     rsp, 8
.text:0000000000007140                 mov     r9d, [rbx+4]
.text:0000000000007144                 push    qword ptr [rbx+30h]
.text:0000000000007147                 mov     r8d, [rbx]
.text:000000000000714A                 push    qword ptr [rbx+28h]
.text:000000000000714D                 mov     rdx, r15
.text:0000000000007150                 push    rax
.text:0000000000007151                 mov     rcx, [rsp+68h+var_40]
.text:0000000000007156                 mov     rsi, r14
.text:0000000000007159                 mov     rdi, r13
.text:000000000000715C                 call    quotearg_buffer_restyled
.text:0000000000007161                 mov     [rbp+0], r12d
.text:0000000000007165                 add     rsp, 38h
.text:0000000000007169                 pop     rbx
.text:000000000000716A                 pop     rbp
.text:000000000000716B                 pop     r12
.text:000000000000716D                 pop     r13
.text:000000000000716F                 pop     r14
.text:0000000000007171                 pop     r15
.text:0000000000007173                 retn
.text:0000000000007173 ; } // starts at 7100
.text:0000000000007173 quotearg_buffer endp
.text:0000000000007173
.text:0000000000007173 ; ---------------------------------------------------------------------------
.text:0000000000007174                 align 20h
.text:0000000000007180
.text:0000000000007180 ; =============== S U B R O U T I N E =======================================
.text:0000000000007180
.text:0000000000007180 ; Attributes: info_from_lumina
.text:0000000000007180
.text:0000000000007180 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000007180                 public quotearg_alloc_mem
.text:0000000000007180 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000007180
.text:0000000000007180 var_5C          = dword ptr -5Ch
.text:0000000000007180 var_58          = qword ptr -58h
.text:0000000000007180 var_50          = qword ptr -50h
.text:0000000000007180 var_48          = qword ptr -48h
.text:0000000000007180 var_40          = qword ptr -40h
.text:0000000000007180
.text:0000000000007180 ; __unwind {
.text:0000000000007180                 push    r15
.text:0000000000007182                 push    r14
.text:0000000000007184                 lea     rax, default_quoting_options
.text:000000000000718B                 push    r13
.text:000000000000718D                 push    r12
.text:000000000000718F                 mov     r12, rdx
.text:0000000000007192                 push    rbp
.text:0000000000007193                 push    rbx
.text:0000000000007194                 mov     rbx, rcx
.text:0000000000007197                 mov     r14, rdi
.text:000000000000719A                 mov     r15, rsi
.text:000000000000719D                 sub     rsp, 38h
.text:00000000000071A1                 test    rcx, rcx
.text:00000000000071A4                 cmovz   rbx, rax
.text:00000000000071A8                 xor     ebp, ebp
.text:00000000000071AA                 call    ___errno_location
.text:00000000000071AF                 test    r12, r12
.text:00000000000071B2                 mov     r13, rax
.text:00000000000071B5                 mov     eax, [rax]
.text:00000000000071B7                 setz    bpl
.text:00000000000071BB                 or      ebp, [rbx+4]
.text:00000000000071BE                 lea     r10, [rbx+8]
.text:00000000000071C2                 sub     rsp, 8
.text:00000000000071C6                 mov     r8d, [rbx]
.text:00000000000071C9                 mov     rcx, r15
.text:00000000000071CC                 mov     [rsp+70h+var_5C], eax
.text:00000000000071D0                 push    qword ptr [rbx+30h]
.text:00000000000071D3                 mov     rdx, r14
.text:00000000000071D6                 push    qword ptr [rbx+28h]
.text:00000000000071D9                 push    r10
.text:00000000000071DB                 xor     esi, esi
.text:00000000000071DD                 mov     r9d, ebp
.text:00000000000071E0                 xor     edi, edi
.text:00000000000071E2                 mov     [rsp+88h+var_48], r10
.text:00000000000071E7                 call    quotearg_buffer_restyled
.text:00000000000071EC                 lea     rsi, [rax+1]
.text:00000000000071F0                 mov     [rsp+88h+var_40], rax
.text:00000000000071F5                 add     rsp, 20h
.text:00000000000071F9                 mov     rdi, rsi
.text:00000000000071FC                 mov     [rsp+68h+var_50], rsi
.text:0000000000007201                 call    xmalloc
.text:0000000000007206                 mov     [rsp+68h+var_58], rax
.text:000000000000720B                 sub     rsp, 8
.text:000000000000720F                 push    qword ptr [rbx+30h]
.text:0000000000007212                 push    qword ptr [rbx+28h]
.text:0000000000007215                 mov     r10, [rsp+80h+var_48]
.text:000000000000721A                 mov     r9d, ebp
.text:000000000000721D                 mov     r8d, [rbx]
.text:0000000000007220                 mov     rcx, r15
.text:0000000000007223                 mov     rdx, r14
.text:0000000000007226                 mov     rdi, rax
.text:0000000000007229                 push    r10
.text:000000000000722B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000007230                 call    quotearg_buffer_restyled
.text:0000000000007235                 mov     eax, [rsp+88h+var_5C]
.text:0000000000007239                 add     rsp, 20h
.text:000000000000723D                 test    r12, r12
.text:0000000000007240                 mov     [r13+0], eax
.text:0000000000007244                 jz      short loc_724F
.text:0000000000007246                 mov     r11, [rsp+68h+var_40]
.text:000000000000724B                 mov     [r12], r11
.text:000000000000724F
.text:000000000000724F loc_724F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000724F                 mov     rax, [rsp+68h+var_58]
.text:0000000000007254                 add     rsp, 38h
.text:0000000000007258                 pop     rbx
.text:0000000000007259                 pop     rbp
.text:000000000000725A                 pop     r12
.text:000000000000725C                 pop     r13
.text:000000000000725E                 pop     r14
.text:0000000000007260                 pop     r15
.text:0000000000007262                 retn
.text:0000000000007262 ; } // starts at 7180
.text:0000000000007262 quotearg_alloc_mem endp
.text:0000000000007262
.text:0000000000007262 ; ---------------------------------------------------------------------------
.text:0000000000007263                 align 10h
.text:0000000000007270
.text:0000000000007270 ; =============== S U B R O U T I N E =======================================
.text:0000000000007270
.text:0000000000007270
.text:0000000000007270                 public quotearg_alloc
.text:0000000000007270 quotearg_alloc  proc near
.text:0000000000007270 ; __unwind {
.text:0000000000007270                 mov     rcx, rdx
.text:0000000000007273                 xor     edx, edx
.text:0000000000007275                 jmp     quotearg_alloc_mem
.text:0000000000007275 ; } // starts at 7270
.text:0000000000007275 quotearg_alloc  endp
.text:0000000000007275
.text:0000000000007275 ; ---------------------------------------------------------------------------
.text:000000000000727A                 align 20h
.text:0000000000007280
.text:0000000000007280 ; =============== S U B R O U T I N E =======================================
.text:0000000000007280
.text:0000000000007280 ; Attributes: info_from_lumina
.text:0000000000007280
.text:0000000000007280 ; void __cdecl quotearg_free()
.text:0000000000007280                 public quotearg_free
.text:0000000000007280 quotearg_free   proc near
.text:0000000000007280 ; __unwind {
.text:0000000000007280                 mov     eax, cs:nslots
.text:0000000000007286                 push    r12
.text:0000000000007288                 mov     r12, cs:slotvec
.text:000000000000728F                 push    rbp
.text:0000000000007290                 push    rbx
.text:0000000000007291                 cmp     eax, 1
.text:0000000000007294                 jle     short loc_72C1
.text:0000000000007296                 sub     eax, 2
.text:0000000000007299                 lea     rbx, [r12+18h]
.text:000000000000729E                 shl     rax, 4
.text:00000000000072A2                 lea     rbp, [r12+rax+28h]
.text:00000000000072A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000072B0                 mov     rdi, [rbx]      ; ptr
.text:00000000000072B3                 add     rbx, 10h
.text:00000000000072B7                 call    _free
.text:00000000000072BC                 cmp     rbx, rbp
.text:00000000000072BF                 jnz     short loc_72B0
.text:00000000000072C1
.text:00000000000072C1 loc_72C1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000072C1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000072C6                 lea     rbx, slot0
.text:00000000000072CD                 cmp     rdi, rbx
.text:00000000000072D0                 jz      short loc_72E9
.text:00000000000072D2                 call    _free
.text:00000000000072D7                 mov     cs:slotvec0, 100h
.text:00000000000072E2                 mov     cs:off_211098, rbx
.text:00000000000072E9
.text:00000000000072E9 loc_72E9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000072E9                 lea     rbx, slotvec0
.text:00000000000072F0                 cmp     r12, rbx
.text:00000000000072F3                 jz      short loc_7304
.text:00000000000072F5                 mov     rdi, r12        ; ptr
.text:00000000000072F8                 call    _free
.text:00000000000072FD                 mov     cs:slotvec, rbx
.text:0000000000007304
.text:0000000000007304 loc_7304:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000007304                 pop     rbx
.text:0000000000007305                 mov     cs:nslots, 1
.text:000000000000730F                 pop     rbp
.text:0000000000007310                 pop     r12
.text:0000000000007312                 retn
.text:0000000000007312 ; } // starts at 7280
.text:0000000000007312 quotearg_free   endp
.text:0000000000007312
.text:0000000000007312 ; ---------------------------------------------------------------------------
.text:0000000000007313                 align 20h
.text:0000000000007320
.text:0000000000007320 ; =============== S U B R O U T I N E =======================================
.text:0000000000007320
.text:0000000000007320
.text:0000000000007320                 public quotearg_n
.text:0000000000007320 quotearg_n      proc near               ; DATA XREF: .rodata:format↓o
.text:0000000000007320 ; __unwind {
.text:0000000000007320                 lea     rcx, default_quoting_options
.text:0000000000007327                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000732E                 jmp     quotearg_n_options
.text:000000000000732E ; } // starts at 7320
.text:000000000000732E quotearg_n      endp
.text:000000000000732E
.text:000000000000732E ; ---------------------------------------------------------------------------
.text:0000000000007333                 align 20h
.text:0000000000007340
.text:0000000000007340 ; =============== S U B R O U T I N E =======================================
.text:0000000000007340
.text:0000000000007340
.text:0000000000007340                 public quotearg_n_mem
.text:0000000000007340 quotearg_n_mem  proc near
.text:0000000000007340 ; __unwind {
.text:0000000000007340                 lea     rcx, default_quoting_options
.text:0000000000007347                 jmp     quotearg_n_options
.text:0000000000007347 ; } // starts at 7340
.text:0000000000007347 quotearg_n_mem  endp
.text:0000000000007347
.text:0000000000007347 ; ---------------------------------------------------------------------------
.text:000000000000734C                 align 10h
.text:0000000000007350
.text:0000000000007350 ; =============== S U B R O U T I N E =======================================
.text:0000000000007350
.text:0000000000007350
.text:0000000000007350                 public quotearg
.text:0000000000007350 quotearg        proc near
.text:0000000000007350 ; __unwind {
.text:0000000000007350                 lea     rcx, default_quoting_options
.text:0000000000007357                 mov     rsi, rdi
.text:000000000000735A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007361                 xor     edi, edi
.text:0000000000007363                 jmp     quotearg_n_options
.text:0000000000007363 ; } // starts at 7350
.text:0000000000007363 quotearg        endp
.text:0000000000007363
.text:0000000000007363 ; ---------------------------------------------------------------------------
.text:0000000000007368                 align 10h
.text:0000000000007370
.text:0000000000007370 ; =============== S U B R O U T I N E =======================================
.text:0000000000007370
.text:0000000000007370
.text:0000000000007370                 public quotearg_mem
.text:0000000000007370 quotearg_mem    proc near
.text:0000000000007370 ; __unwind {
.text:0000000000007370                 lea     rcx, default_quoting_options
.text:0000000000007377                 mov     rdx, rsi
.text:000000000000737A                 mov     rsi, rdi
.text:000000000000737D                 xor     edi, edi
.text:000000000000737F                 jmp     quotearg_n_options
.text:000000000000737F ; } // starts at 7370
.text:000000000000737F quotearg_mem    endp
.text:000000000000737F
.text:000000000000737F ; ---------------------------------------------------------------------------
.text:0000000000007384                 align 10h
.text:0000000000007390
.text:0000000000007390 ; =============== S U B R O U T I N E =======================================
.text:0000000000007390
.text:0000000000007390 ; Attributes: info_from_lumina
.text:0000000000007390
.text:0000000000007390 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000007390                 public quotearg_n_style
.text:0000000000007390 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000007390
.text:0000000000007390 var_48          = dword ptr -48h
.text:0000000000007390 var_44          = qword ptr -44h
.text:0000000000007390 var_3C          = qword ptr -3Ch
.text:0000000000007390 var_34          = qword ptr -34h
.text:0000000000007390 var_2C          = qword ptr -2Ch
.text:0000000000007390 var_24          = qword ptr -24h
.text:0000000000007390 var_1C          = qword ptr -1Ch
.text:0000000000007390 var_14          = dword ptr -14h
.text:0000000000007390 var_10          = qword ptr -10h
.text:0000000000007390
.text:0000000000007390 ; __unwind {
.text:0000000000007390                 sub     rsp, 48h
.text:0000000000007394                 mov     rax, rdx
.text:0000000000007397                 mov     rdx, fs:28h
.text:00000000000073A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000073A5                 xor     edx, edx
.text:00000000000073A7                 cmp     esi, 0Ah
.text:00000000000073AA                 jz      short loc_7414
.text:00000000000073AC                 mov     [rsp+48h+var_48], esi
.text:00000000000073AF                 mov     rcx, rsp
.text:00000000000073B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000073B9                 mov     rsi, rax
.text:00000000000073BC                 mov     [rsp+48h+var_44], 0
.text:00000000000073C5                 mov     [rsp+48h+var_3C], 0
.text:00000000000073CE                 mov     [rsp+48h+var_34], 0
.text:00000000000073D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000073E0                 mov     [rsp+48h+var_24], 0
.text:00000000000073E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000073F2                 mov     [rsp+48h+var_14], 0
.text:00000000000073FA                 call    quotearg_n_options
.text:00000000000073FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007404                 xor     rcx, fs:28h
.text:000000000000740D                 jnz     short loc_7419
.text:000000000000740F                 add     rsp, 48h
.text:0000000000007413                 retn
.text:0000000000007414 ; ---------------------------------------------------------------------------
.text:0000000000007414
.text:0000000000007414 loc_7414:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000007414                 call    _abort
.text:0000000000007419 ; ---------------------------------------------------------------------------
.text:0000000000007419
.text:0000000000007419 loc_7419:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000007419                 call    ___stack_chk_fail
.text:0000000000007419 ; } // starts at 7390
.text:0000000000007419 quotearg_n_style endp
.text:0000000000007419
.text:0000000000007419 ; ---------------------------------------------------------------------------
.text:000000000000741E                 align 20h
.text:0000000000007420
.text:0000000000007420 ; =============== S U B R O U T I N E =======================================
.text:0000000000007420
.text:0000000000007420 ; Attributes: info_from_lumina
.text:0000000000007420
.text:0000000000007420 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000007420                 public quotearg_n_style_mem
.text:0000000000007420 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000007420
.text:0000000000007420 var_48          = dword ptr -48h
.text:0000000000007420 var_44          = qword ptr -44h
.text:0000000000007420 var_3C          = qword ptr -3Ch
.text:0000000000007420 var_34          = qword ptr -34h
.text:0000000000007420 var_2C          = qword ptr -2Ch
.text:0000000000007420 var_24          = qword ptr -24h
.text:0000000000007420 var_1C          = qword ptr -1Ch
.text:0000000000007420 var_14          = dword ptr -14h
.text:0000000000007420 var_10          = qword ptr -10h
.text:0000000000007420
.text:0000000000007420 ; __unwind {
.text:0000000000007420                 sub     rsp, 48h
.text:0000000000007424                 mov     rax, rdx
.text:0000000000007427                 mov     rdx, rcx
.text:000000000000742A                 mov     rcx, fs:28h
.text:0000000000007433                 mov     [rsp+48h+var_10], rcx
.text:0000000000007438                 xor     ecx, ecx
.text:000000000000743A                 cmp     esi, 0Ah
.text:000000000000743D                 jz      short loc_74A0
.text:000000000000743F                 mov     [rsp+48h+var_48], esi
.text:0000000000007442                 mov     rcx, rsp
.text:0000000000007445                 mov     rsi, rax
.text:0000000000007448                 mov     [rsp+48h+var_44], 0
.text:0000000000007451                 mov     [rsp+48h+var_3C], 0
.text:000000000000745A                 mov     [rsp+48h+var_34], 0
.text:0000000000007463                 mov     [rsp+48h+var_2C], 0
.text:000000000000746C                 mov     [rsp+48h+var_24], 0
.text:0000000000007475                 mov     [rsp+48h+var_1C], 0
.text:000000000000747E                 mov     [rsp+48h+var_14], 0
.text:0000000000007486                 call    quotearg_n_options
.text:000000000000748B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000007490                 xor     rdx, fs:28h
.text:0000000000007499                 jnz     short loc_74A5
.text:000000000000749B                 add     rsp, 48h
.text:000000000000749F                 retn
.text:00000000000074A0 ; ---------------------------------------------------------------------------
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000074A0                 call    _abort
.text:00000000000074A5 ; ---------------------------------------------------------------------------
.text:00000000000074A5
.text:00000000000074A5 loc_74A5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000074A5                 call    ___stack_chk_fail
.text:00000000000074A5 ; } // starts at 7420
.text:00000000000074A5 quotearg_n_style_mem endp
.text:00000000000074A5
.text:00000000000074A5 ; ---------------------------------------------------------------------------
.text:00000000000074AA                 align 10h
.text:00000000000074B0
.text:00000000000074B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074B0
.text:00000000000074B0
.text:00000000000074B0                 public quotearg_style
.text:00000000000074B0 quotearg_style  proc near
.text:00000000000074B0 ; __unwind {
.text:00000000000074B0                 mov     rdx, rsi
.text:00000000000074B3                 mov     esi, edi
.text:00000000000074B5                 xor     edi, edi
.text:00000000000074B7                 jmp     quotearg_n_style
.text:00000000000074B7 ; } // starts at 74B0
.text:00000000000074B7 quotearg_style  endp
.text:00000000000074B7
.text:00000000000074B7 ; ---------------------------------------------------------------------------
.text:00000000000074BC                 align 20h
.text:00000000000074C0
.text:00000000000074C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074C0
.text:00000000000074C0
.text:00000000000074C0                 public quotearg_style_mem
.text:00000000000074C0 quotearg_style_mem proc near
.text:00000000000074C0 ; __unwind {
.text:00000000000074C0                 mov     rcx, rdx
.text:00000000000074C3                 mov     rdx, rsi
.text:00000000000074C6                 mov     esi, edi
.text:00000000000074C8                 xor     edi, edi
.text:00000000000074CA                 jmp     quotearg_n_style_mem
.text:00000000000074CA ; } // starts at 74C0
.text:00000000000074CA quotearg_style_mem endp
.text:00000000000074CA
.text:00000000000074CA ; ---------------------------------------------------------------------------
.text:00000000000074CF                 align 10h
.text:00000000000074D0
.text:00000000000074D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074D0
.text:00000000000074D0 ; Attributes: info_from_lumina
.text:00000000000074D0
.text:00000000000074D0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000074D0                 public quotearg_char_mem
.text:00000000000074D0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000074D0                                         ; quotearg_colon+C↓j ...
.text:00000000000074D0
.text:00000000000074D0 var_48          = xmmword ptr -48h
.text:00000000000074D0 var_38          = xmmword ptr -38h
.text:00000000000074D0 var_28          = xmmword ptr -28h
.text:00000000000074D0 var_18          = qword ptr -18h
.text:00000000000074D0 var_10          = qword ptr -10h
.text:00000000000074D0
.text:00000000000074D0 ; __unwind {
.text:00000000000074D0                 sub     rsp, 48h
.text:00000000000074D4                 mov     ecx, edx
.text:00000000000074D6                 mov     rax, fs:28h
.text:00000000000074DF                 mov     [rsp+48h+var_10], rax
.text:00000000000074E4                 xor     eax, eax
.text:00000000000074E6                 mov     rax, cs:qword_211350
.text:00000000000074ED                 mov     r8, rsp
.text:00000000000074F0                 and     ecx, 1Fh
.text:00000000000074F3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000074FB                 mov     [rsp+48h+var_18], rax
.text:0000000000007500                 mov     eax, edx
.text:0000000000007502                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000007506                 shr     al, 5
.text:0000000000007509                 movzx   eax, al
.text:000000000000750C                 lea     r9, [r8+rax*4+8]
.text:0000000000007511                 movdqa  xmm0, cs:xmmword_211330
.text:0000000000007519                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000751E                 movdqa  xmm0, cs:xmmword_211340
.text:0000000000007526                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000752B                 mov     edx, [r9]
.text:000000000000752E                 mov     eax, edx
.text:0000000000007530                 shr     eax, cl
.text:0000000000007532                 not     eax
.text:0000000000007534                 and     eax, 1
.text:0000000000007537                 shl     eax, cl
.text:0000000000007539                 mov     rcx, r8
.text:000000000000753C                 xor     eax, edx
.text:000000000000753E                 mov     rdx, rsi
.text:0000000000007541                 mov     rsi, rdi
.text:0000000000007544                 mov     [r9], eax
.text:0000000000007547                 xor     edi, edi
.text:0000000000007549                 call    quotearg_n_options
.text:000000000000754E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000007553                 xor     rsi, fs:28h
.text:000000000000755C                 jnz     short loc_7563
.text:000000000000755E                 add     rsp, 48h
.text:0000000000007562                 retn
.text:0000000000007563 ; ---------------------------------------------------------------------------
.text:0000000000007563
.text:0000000000007563 loc_7563:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000007563                 call    ___stack_chk_fail
.text:0000000000007563 ; } // starts at 74D0
.text:0000000000007563 quotearg_char_mem endp
.text:0000000000007563
.text:0000000000007563 ; ---------------------------------------------------------------------------
.text:0000000000007568                 align 10h
.text:0000000000007570
.text:0000000000007570 ; =============== S U B R O U T I N E =======================================
.text:0000000000007570
.text:0000000000007570
.text:0000000000007570                 public quotearg_char
.text:0000000000007570 quotearg_char   proc near
.text:0000000000007570 ; __unwind {
.text:0000000000007570                 movsx   edx, sil
.text:0000000000007574                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000757B                 jmp     quotearg_char_mem
.text:000000000000757B ; } // starts at 7570
.text:000000000000757B quotearg_char   endp
.text:000000000000757B
.text:0000000000007580
.text:0000000000007580 ; =============== S U B R O U T I N E =======================================
.text:0000000000007580
.text:0000000000007580
.text:0000000000007580                 public quotearg_colon
.text:0000000000007580 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000007580 ; __unwind {
.text:0000000000007580                 mov     edx, 3Ah ; ':'
.text:0000000000007585                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000758C                 jmp     quotearg_char_mem
.text:000000000000758C ; } // starts at 7580
.text:000000000000758C quotearg_colon  endp
.text:000000000000758C
.text:000000000000758C ; ---------------------------------------------------------------------------
.text:0000000000007591                 align 20h
.text:00000000000075A0
.text:00000000000075A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075A0
.text:00000000000075A0
.text:00000000000075A0                 public quotearg_colon_mem
.text:00000000000075A0 quotearg_colon_mem proc near
.text:00000000000075A0 ; __unwind {
.text:00000000000075A0                 mov     edx, 3Ah ; ':'
.text:00000000000075A5                 jmp     quotearg_char_mem
.text:00000000000075A5 ; } // starts at 75A0
.text:00000000000075A5 quotearg_colon_mem endp
.text:00000000000075A5
.text:00000000000075A5 ; ---------------------------------------------------------------------------
.text:00000000000075AA                 align 10h
.text:00000000000075B0
.text:00000000000075B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075B0
.text:00000000000075B0 ; Attributes: info_from_lumina
.text:00000000000075B0
.text:00000000000075B0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000075B0                 public quotearg_n_style_colon
.text:00000000000075B0 quotearg_n_style_colon proc near        ; CODE XREF: main+37E↑p
.text:00000000000075B0                                         ; main+6AE↑p ...
.text:00000000000075B0
.text:00000000000075B0 var_48          = dword ptr -48h
.text:00000000000075B0 var_44          = qword ptr -44h
.text:00000000000075B0 var_3C          = qword ptr -3Ch
.text:00000000000075B0 var_34          = qword ptr -34h
.text:00000000000075B0 var_2C          = qword ptr -2Ch
.text:00000000000075B0 var_24          = qword ptr -24h
.text:00000000000075B0 var_1C          = qword ptr -1Ch
.text:00000000000075B0 var_14          = dword ptr -14h
.text:00000000000075B0 var_10          = qword ptr -10h
.text:00000000000075B0
.text:00000000000075B0 ; __unwind {
.text:00000000000075B0                 sub     rsp, 48h
.text:00000000000075B4                 mov     rax, rdx
.text:00000000000075B7                 mov     rdx, fs:28h
.text:00000000000075C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000075C5                 xor     edx, edx
.text:00000000000075C7                 cmp     esi, 0Ah
.text:00000000000075CA                 jz      short loc_7634
.text:00000000000075CC                 mov     [rsp+48h+var_48], esi
.text:00000000000075CF                 mov     rcx, rsp
.text:00000000000075D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000075D9                 mov     rsi, rax
.text:00000000000075DC                 mov     [rsp+48h+var_44], 0
.text:00000000000075E5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000075EE                 mov     [rsp+48h+var_34], 0
.text:00000000000075F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000007600                 mov     [rsp+48h+var_24], 0
.text:0000000000007609                 mov     [rsp+48h+var_1C], 0
.text:0000000000007612                 mov     [rsp+48h+var_14], 0
.text:000000000000761A                 call    quotearg_n_options
.text:000000000000761F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007624                 xor     rcx, fs:28h
.text:000000000000762D                 jnz     short loc_7639
.text:000000000000762F                 add     rsp, 48h
.text:0000000000007633                 retn
.text:0000000000007634 ; ---------------------------------------------------------------------------
.text:0000000000007634
.text:0000000000007634 loc_7634:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000007634                 call    _abort
.text:0000000000007639 ; ---------------------------------------------------------------------------
.text:0000000000007639
.text:0000000000007639 loc_7639:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000007639                 call    ___stack_chk_fail
.text:0000000000007639 ; } // starts at 75B0
.text:0000000000007639 quotearg_n_style_colon endp
.text:0000000000007639
.text:0000000000007639 ; ---------------------------------------------------------------------------
.text:000000000000763E                 align 20h
.text:0000000000007640
.text:0000000000007640 ; =============== S U B R O U T I N E =======================================
.text:0000000000007640
.text:0000000000007640 ; Attributes: info_from_lumina
.text:0000000000007640
.text:0000000000007640 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000007640                 public quotearg_n_custom_mem
.text:0000000000007640 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000007640                                         ; quotearg_custom+12↓j ...
.text:0000000000007640
.text:0000000000007640 var_48          = xmmword ptr -48h
.text:0000000000007640 var_38          = xmmword ptr -38h
.text:0000000000007640 var_28          = xmmword ptr -28h
.text:0000000000007640 var_18          = qword ptr -18h
.text:0000000000007640 var_10          = qword ptr -10h
.text:0000000000007640
.text:0000000000007640 ; __unwind {
.text:0000000000007640                 sub     rsp, 48h
.text:0000000000007644                 mov     r9, rcx
.text:0000000000007647                 mov     rcx, cs:qword_211350
.text:000000000000764E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000007656                 mov     rax, fs:28h
.text:000000000000765F                 mov     [rsp+48h+var_10], rax
.text:0000000000007664                 xor     eax, eax
.text:0000000000007666                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000766A                 test    rsi, rsi
.text:000000000000766D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007672                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007679                 movdqa  xmm0, cs:xmmword_211330
.text:0000000000007681                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007686                 movdqa  xmm0, cs:xmmword_211340
.text:000000000000768E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007693                 jz      short loc_76C7
.text:0000000000007695                 test    rdx, rdx
.text:0000000000007698                 jz      short loc_76C7
.text:000000000000769A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000769F                 mov     [rsp+48h+var_18], rdx
.text:00000000000076A4                 mov     rcx, rsp
.text:00000000000076A7                 mov     rdx, r8
.text:00000000000076AA                 mov     rsi, r9
.text:00000000000076AD                 call    quotearg_n_options
.text:00000000000076B2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000076B7                 xor     rdi, fs:28h
.text:00000000000076C0                 jnz     short loc_76CC
.text:00000000000076C2                 add     rsp, 48h
.text:00000000000076C6                 retn
.text:00000000000076C7 ; ---------------------------------------------------------------------------
.text:00000000000076C7
.text:00000000000076C7 loc_76C7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000076C7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000076C7                 call    _abort
.text:00000000000076CC ; ---------------------------------------------------------------------------
.text:00000000000076CC
.text:00000000000076CC loc_76CC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000076CC                 call    ___stack_chk_fail
.text:00000000000076CC ; } // starts at 7640
.text:00000000000076CC quotearg_n_custom_mem endp
.text:00000000000076CC
.text:00000000000076CC ; ---------------------------------------------------------------------------
.text:00000000000076D1                 align 20h
.text:00000000000076E0
.text:00000000000076E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076E0
.text:00000000000076E0
.text:00000000000076E0                 public quotearg_n_custom
.text:00000000000076E0 quotearg_n_custom proc near
.text:00000000000076E0 ; __unwind {
.text:00000000000076E0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000076E7                 jmp     quotearg_n_custom_mem
.text:00000000000076E7 ; } // starts at 76E0
.text:00000000000076E7 quotearg_n_custom endp
.text:00000000000076E7
.text:00000000000076E7 ; ---------------------------------------------------------------------------
.text:00000000000076EC                 align 10h
.text:00000000000076F0
.text:00000000000076F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076F0
.text:00000000000076F0
.text:00000000000076F0                 public quotearg_custom
.text:00000000000076F0 quotearg_custom proc near
.text:00000000000076F0 ; __unwind {
.text:00000000000076F0                 mov     rcx, rdx
.text:00000000000076F3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000076FA                 mov     rdx, rsi
.text:00000000000076FD                 mov     rsi, rdi
.text:0000000000007700                 xor     edi, edi
.text:0000000000007702                 jmp     quotearg_n_custom_mem
.text:0000000000007702 ; } // starts at 76F0
.text:0000000000007702 quotearg_custom endp
.text:0000000000007702
.text:0000000000007702 ; ---------------------------------------------------------------------------
.text:0000000000007707                 align 10h
.text:0000000000007710
.text:0000000000007710 ; =============== S U B R O U T I N E =======================================
.text:0000000000007710
.text:0000000000007710
.text:0000000000007710                 public quotearg_custom_mem
.text:0000000000007710 quotearg_custom_mem proc near
.text:0000000000007710 ; __unwind {
.text:0000000000007710                 mov     r8, rcx
.text:0000000000007713                 mov     rcx, rdx
.text:0000000000007716                 mov     rdx, rsi
.text:0000000000007719                 mov     rsi, rdi
.text:000000000000771C                 xor     edi, edi
.text:000000000000771E                 jmp     quotearg_n_custom_mem
.text:000000000000771E ; } // starts at 7710
.text:000000000000771E quotearg_custom_mem endp
.text:000000000000771E
.text:000000000000771E ; ---------------------------------------------------------------------------
.text:0000000000007723                 align 10h
.text:0000000000007730
.text:0000000000007730 ; =============== S U B R O U T I N E =======================================
.text:0000000000007730
.text:0000000000007730
.text:0000000000007730                 public quote_n_mem
.text:0000000000007730 quote_n_mem     proc near
.text:0000000000007730 ; __unwind {
.text:0000000000007730                 lea     rcx, quote_quoting_options
.text:0000000000007737                 jmp     quotearg_n_options
.text:0000000000007737 ; } // starts at 7730
.text:0000000000007737 quote_n_mem     endp
.text:0000000000007737
.text:0000000000007737 ; ---------------------------------------------------------------------------
.text:000000000000773C                 align 20h
.text:0000000000007740
.text:0000000000007740 ; =============== S U B R O U T I N E =======================================
.text:0000000000007740
.text:0000000000007740
.text:0000000000007740                 public quote_mem
.text:0000000000007740 quote_mem       proc near
.text:0000000000007740 ; __unwind {
.text:0000000000007740                 lea     rcx, quote_quoting_options
.text:0000000000007747                 mov     rdx, rsi
.text:000000000000774A                 mov     rsi, rdi
.text:000000000000774D                 xor     edi, edi
.text:000000000000774F                 jmp     quotearg_n_options
.text:000000000000774F ; } // starts at 7740
.text:000000000000774F quote_mem       endp
.text:000000000000774F
.text:000000000000774F ; ---------------------------------------------------------------------------
.text:0000000000007754                 align 20h
.text:0000000000007760
.text:0000000000007760 ; =============== S U B R O U T I N E =======================================
.text:0000000000007760
.text:0000000000007760
.text:0000000000007760                 public quote_n
.text:0000000000007760 quote_n         proc near
.text:0000000000007760 ; __unwind {
.text:0000000000007760                 lea     rcx, quote_quoting_options
.text:0000000000007767                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000776E                 jmp     quotearg_n_options
.text:000000000000776E ; } // starts at 7760
.text:000000000000776E quote_n         endp
.text:000000000000776E
.text:000000000000776E ; ---------------------------------------------------------------------------
.text:0000000000007773                 align 20h
.text:0000000000007780
.text:0000000000007780 ; =============== S U B R O U T I N E =======================================
.text:0000000000007780
.text:0000000000007780
.text:0000000000007780                 public quote
.text:0000000000007780 quote           proc near               ; CODE XREF: apply_settings+52D↑p
.text:0000000000007780                                         ; apply_settings+65E↑p ...
.text:0000000000007780 ; __unwind {
.text:0000000000007780                 lea     rcx, quote_quoting_options
.text:0000000000007787                 mov     rsi, rdi
.text:000000000000778A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007791                 xor     edi, edi
.text:0000000000007793                 jmp     quotearg_n_options
.text:0000000000007793 ; } // starts at 7780
.text:0000000000007793 quote           endp
.text:0000000000007793
.text:0000000000007793 ; ---------------------------------------------------------------------------
.text:0000000000007798                 align 20h
.text:00000000000077A0
.text:00000000000077A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077A0
.text:00000000000077A0
.text:00000000000077A0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000077A0                 public version_etc_arn
.text:00000000000077A0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_7BDB↓j
.text:00000000000077A0                                         ; version_etc_va:loc_7C2B↓p ...
.text:00000000000077A0
.text:00000000000077A0 var_58          = qword ptr -58h
.text:00000000000077A0 var_50          = qword ptr -50h
.text:00000000000077A0 var_48          = qword ptr -48h
.text:00000000000077A0 var_40          = qword ptr -40h
.text:00000000000077A0
.text:00000000000077A0 ; __unwind {
.text:00000000000077A0                 push    r15
.text:00000000000077A2                 push    r14
.text:00000000000077A4                 push    r13
.text:00000000000077A6                 push    r12
.text:00000000000077A8                 mov     r12, r9
.text:00000000000077AB                 push    rbp
.text:00000000000077AC                 push    rbx
.text:00000000000077AD                 mov     rbp, rdi
.text:00000000000077B0                 mov     rbx, r8
.text:00000000000077B3                 sub     rsp, 28h
.text:00000000000077B7                 test    rsi, rsi
.text:00000000000077BA                 jz      loc_78D8
.text:00000000000077C0                 mov     r8, rdx
.text:00000000000077C3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000077CA                 mov     r9, rcx
.text:00000000000077CD                 xor     eax, eax
.text:00000000000077CF                 mov     rcx, rsi
.text:00000000000077D2                 mov     esi, 1
.text:00000000000077D7                 call    ___fprintf_chk
.text:00000000000077DC
.text:00000000000077DC loc_77DC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000077DC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000077E3                 xor     edi, edi        ; domainname
.text:00000000000077E5                 mov     edx, 5          ; category
.text:00000000000077EA                 call    _dcgettext
.text:00000000000077EF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000077F6                 mov     rcx, rax
.text:00000000000077F9                 mov     r8d, 7E3h
.text:00000000000077FF                 mov     esi, 1
.text:0000000000007804                 mov     rdi, rbp
.text:0000000000007807                 xor     eax, eax
.text:0000000000007809                 call    ___fprintf_chk
.text:000000000000780E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000007815                 xor     edi, edi        ; domainname
.text:0000000000007817                 mov     edx, 5          ; category
.text:000000000000781C                 call    _dcgettext
.text:0000000000007821                 mov     rsi, rbp        ; stream
.text:0000000000007824                 mov     rdi, rax        ; s
.text:0000000000007827                 call    _fputs_unlocked
.text:000000000000782C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000007830                 ja      def_7844        ; jumptable 0000000000007844 default case
.text:0000000000007836                 lea     rdx, jpt_7844
.text:000000000000783D                 movsxd  rax, ds:(jpt_7844 - 0E2E4h)[rdx+r12*4]
.text:0000000000007841                 add     rax, rdx
.text:0000000000007844                 jmp     rax             ; switch jump
.text:0000000000007844 ; ---------------------------------------------------------------------------
.text:0000000000007846                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007850                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007850                 mov     r9, [rbx+38h]   ; jumptable 0000000000007844 case 8
.text:0000000000007854                 mov     rax, [rbx+10h]
.text:0000000000007858                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000785F                 mov     r8, [rbx+8]
.text:0000000000007863                 mov     edx, 5          ; category
.text:0000000000007868                 xor     edi, edi        ; domainname
.text:000000000000786A                 mov     r13, [rbx+30h]
.text:000000000000786E                 mov     r12, [rbx+28h]
.text:0000000000007872                 mov     [rsp+58h+var_48], r9
.text:0000000000007877                 mov     r15, [rbx+20h]
.text:000000000000787B                 mov     r14, [rbx+18h]
.text:000000000000787F                 mov     [rsp+58h+var_58], rax
.text:0000000000007883                 mov     [rsp+58h+var_50], r8
.text:0000000000007888                 mov     rbx, [rbx]
.text:000000000000788B                 call    _dcgettext
.text:0000000000007890                 sub     rsp, 8
.text:0000000000007894
.text:0000000000007894 loc_7894:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000007894                 mov     r9, [rsp+60h+var_48]
.text:0000000000007899                 mov     rdx, rax
.text:000000000000789C                 mov     rcx, rbx
.text:000000000000789F                 mov     esi, 1
.text:00000000000078A4                 mov     rdi, rbp
.text:00000000000078A7                 xor     eax, eax
.text:00000000000078A9                 push    r9
.text:00000000000078AB                 push    r13
.text:00000000000078AD                 push    r12
.text:00000000000078AF                 push    r15
.text:00000000000078B1                 push    r14
.text:00000000000078B3                 mov     r9, [rsp+88h+var_58]
.text:00000000000078B8                 mov     r8, [rsp+88h+var_50]
.text:00000000000078BD                 call    ___fprintf_chk
.text:00000000000078C2                 add     rsp, 30h
.text:00000000000078C6
.text:00000000000078C6 loc_78C6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000078C6                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:00000000000078C6                 add     rsp, 28h        ; jumptable 0000000000007844 case 0
.text:00000000000078CA                 pop     rbx
.text:00000000000078CB                 pop     rbp
.text:00000000000078CC                 pop     r12
.text:00000000000078CE                 pop     r13
.text:00000000000078D0                 pop     r14
.text:00000000000078D2                 pop     r15
.text:00000000000078D4                 retn
.text:00000000000078D4 ; ---------------------------------------------------------------------------
.text:00000000000078D5                 align 8
.text:00000000000078D8
.text:00000000000078D8 loc_78D8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000078D8                 mov     r8, rcx
.text:00000000000078DB                 mov     rcx, rdx
.text:00000000000078DE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000078E5                 mov     esi, 1
.text:00000000000078EA                 xor     eax, eax
.text:00000000000078EC                 call    ___fprintf_chk
.text:00000000000078F1                 jmp     loc_77DC
.text:00000000000078F1 ; ---------------------------------------------------------------------------
.text:00000000000078F6                 align 20h
.text:0000000000007900
.text:0000000000007900 loc_7900:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007900                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007900                 mov     r10, [rbx+40h]  ; jumptable 0000000000007844 case 9
.text:0000000000007904                 mov     r9, [rbx+38h]
.text:0000000000007908                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000790F                 mov     rax, [rbx+10h]
.text:0000000000007913                 mov     r8, [rbx+8]
.text:0000000000007917                 mov     edx, 5          ; category
.text:000000000000791C                 mov     r13, [rbx+30h]
.text:0000000000007920                 mov     r12, [rbx+28h]
.text:0000000000007924                 mov     r15, [rbx+20h]
.text:0000000000007928                 mov     r14, [rbx+18h]
.text:000000000000792C                 mov     rbx, [rbx]
.text:000000000000792F                 mov     [rsp+58h+var_40], r10
.text:0000000000007934                 mov     [rsp+58h+var_48], r9
.text:0000000000007939                 mov     [rsp+58h+var_58], rax
.text:000000000000793D                 mov     [rsp+58h+var_50], r8
.text:0000000000007942
.text:0000000000007942 loc_7942:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000007942                 xor     edi, edi        ; domainname
.text:0000000000007944                 call    _dcgettext
.text:0000000000007949                 mov     r10, [rsp+58h+var_40]
.text:000000000000794E                 push    r10
.text:0000000000007950                 jmp     loc_7894
.text:0000000000007950 ; ---------------------------------------------------------------------------
.text:0000000000007955                 align 8
.text:0000000000007958
.text:0000000000007958 loc_7958:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007958                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007958                 mov     rbx, [rbx]      ; jumptable 0000000000007844 case 1
.text:000000000000795B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000007962                 mov     edx, 5          ; category
.text:0000000000007967                 xor     edi, edi        ; domainname
.text:0000000000007969                 call    _dcgettext
.text:000000000000796E                 add     rsp, 28h
.text:0000000000007972                 mov     rcx, rbx
.text:0000000000007975                 mov     rdi, rbp
.text:0000000000007978                 pop     rbx
.text:0000000000007979                 pop     rbp
.text:000000000000797A                 pop     r12
.text:000000000000797C                 pop     r13
.text:000000000000797E                 pop     r14
.text:0000000000007980                 pop     r15
.text:0000000000007982                 mov     rdx, rax
.text:0000000000007985                 mov     esi, 1
.text:000000000000798A                 xor     eax, eax
.text:000000000000798C                 jmp     ___fprintf_chk
.text:000000000000798C ; ---------------------------------------------------------------------------
.text:0000000000007991                 align 8
.text:0000000000007998
.text:0000000000007998 loc_7998:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007998                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007998                 mov     r12, [rbx+8]    ; jumptable 0000000000007844 case 2
.text:000000000000799C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000079A3                 mov     rbx, [rbx]
.text:00000000000079A6                 mov     edx, 5          ; category
.text:00000000000079AB                 xor     edi, edi        ; domainname
.text:00000000000079AD                 call    _dcgettext
.text:00000000000079B2                 add     rsp, 28h
.text:00000000000079B6                 mov     r8, r12
.text:00000000000079B9                 mov     rcx, rbx
.text:00000000000079BC                 mov     rdi, rbp
.text:00000000000079BF                 mov     rdx, rax
.text:00000000000079C2                 mov     esi, 1
.text:00000000000079C7                 pop     rbx
.text:00000000000079C8                 pop     rbp
.text:00000000000079C9                 pop     r12
.text:00000000000079CB                 pop     r13
.text:00000000000079CD                 pop     r14
.text:00000000000079CF                 pop     r15
.text:00000000000079D1                 xor     eax, eax
.text:00000000000079D3                 jmp     ___fprintf_chk
.text:00000000000079D3 ; ---------------------------------------------------------------------------
.text:00000000000079D8                 align 20h
.text:00000000000079E0
.text:00000000000079E0 loc_79E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000079E0                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:00000000000079E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000007844 case 3
.text:00000000000079E4                 mov     r12, [rbx+8]
.text:00000000000079E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000079EF                 mov     rbx, [rbx]
.text:00000000000079F2                 mov     edx, 5          ; category
.text:00000000000079F7                 xor     edi, edi        ; domainname
.text:00000000000079F9                 call    _dcgettext
.text:00000000000079FE                 add     rsp, 28h
.text:0000000000007A02                 mov     r9, r13
.text:0000000000007A05                 mov     r8, r12
.text:0000000000007A08                 mov     rcx, rbx
.text:0000000000007A0B                 mov     rdi, rbp
.text:0000000000007A0E                 mov     rdx, rax
.text:0000000000007A11                 pop     rbx
.text:0000000000007A12                 pop     rbp
.text:0000000000007A13                 pop     r12
.text:0000000000007A15                 pop     r13
.text:0000000000007A17                 pop     r14
.text:0000000000007A19                 pop     r15
.text:0000000000007A1B                 mov     esi, 1
.text:0000000000007A20                 xor     eax, eax
.text:0000000000007A22                 jmp     ___fprintf_chk
.text:0000000000007A22 ; ---------------------------------------------------------------------------
.text:0000000000007A27                 align 10h
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007A30                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007A30                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000007844 case 4
.text:0000000000007A37                 mov     edx, 5          ; category
.text:0000000000007A3C                 xor     edi, edi        ; domainname
.text:0000000000007A3E                 mov     r14, [rbx+18h]
.text:0000000000007A42                 mov     r13, [rbx+10h]
.text:0000000000007A46                 mov     r12, [rbx+8]
.text:0000000000007A4A                 mov     rbx, [rbx]
.text:0000000000007A4D                 call    _dcgettext
.text:0000000000007A52                 sub     rsp, 8
.text:0000000000007A56
.text:0000000000007A56 loc_7A56:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000007A56                 push    r14
.text:0000000000007A58                 mov     rdx, rax
.text:0000000000007A5B                 mov     r9, r13
.text:0000000000007A5E                 mov     r8, r12
.text:0000000000007A61                 mov     rcx, rbx
.text:0000000000007A64                 mov     rdi, rbp
.text:0000000000007A67                 mov     esi, 1
.text:0000000000007A6C                 xor     eax, eax
.text:0000000000007A6E                 call    ___fprintf_chk
.text:0000000000007A73                 pop     rax
.text:0000000000007A74                 pop     rdx
.text:0000000000007A75                 add     rsp, 28h
.text:0000000000007A79                 pop     rbx
.text:0000000000007A7A                 pop     rbp
.text:0000000000007A7B                 pop     r12
.text:0000000000007A7D                 pop     r13
.text:0000000000007A7F                 pop     r14
.text:0000000000007A81                 pop     r15
.text:0000000000007A83                 retn
.text:0000000000007A83 ; ---------------------------------------------------------------------------
.text:0000000000007A84                 align 8
.text:0000000000007A88
.text:0000000000007A88 loc_7A88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007A88                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007A88                 mov     r15, [rbx+20h]  ; jumptable 0000000000007844 case 5
.text:0000000000007A8C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000007A93                 mov     edx, 5          ; category
.text:0000000000007A98                 xor     edi, edi        ; domainname
.text:0000000000007A9A                 mov     r14, [rbx+18h]
.text:0000000000007A9E                 mov     r13, [rbx+10h]
.text:0000000000007AA2                 mov     r12, [rbx+8]
.text:0000000000007AA6                 mov     rbx, [rbx]
.text:0000000000007AA9                 call    _dcgettext
.text:0000000000007AAE                 push    r15
.text:0000000000007AB0                 jmp     short loc_7A56
.text:0000000000007AB0 ; ---------------------------------------------------------------------------
.text:0000000000007AB2                 align 8
.text:0000000000007AB8
.text:0000000000007AB8 loc_7AB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007AB8                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007AB8                 mov     r8, [rbx+8]     ; jumptable 0000000000007844 case 6
.text:0000000000007ABC                 mov     r12, [rbx+28h]
.text:0000000000007AC0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000007AC7                 mov     r15, [rbx+20h]
.text:0000000000007ACB                 mov     r14, [rbx+18h]
.text:0000000000007ACF                 mov     edx, 5          ; category
.text:0000000000007AD4                 mov     r13, [rbx+10h]
.text:0000000000007AD8                 xor     edi, edi        ; domainname
.text:0000000000007ADA                 mov     rbx, [rbx]
.text:0000000000007ADD                 mov     [rsp+58h+var_58], r8
.text:0000000000007AE1                 call    _dcgettext
.text:0000000000007AE6                 sub     rsp, 8
.text:0000000000007AEA                 mov     r9, r13
.text:0000000000007AED                 push    r12
.text:0000000000007AEF                 push    r15
.text:0000000000007AF1                 push    r14
.text:0000000000007AF3
.text:0000000000007AF3 loc_7AF3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000007AF3                 mov     r8, [rsp+78h+var_58]
.text:0000000000007AF8                 mov     rcx, rbx
.text:0000000000007AFB                 mov     rdx, rax
.text:0000000000007AFE                 mov     rdi, rbp
.text:0000000000007B01                 mov     esi, 1
.text:0000000000007B06                 xor     eax, eax
.text:0000000000007B08                 call    ___fprintf_chk
.text:0000000000007B0D                 add     rsp, 20h
.text:0000000000007B11                 add     rsp, 28h
.text:0000000000007B15                 pop     rbx
.text:0000000000007B16                 pop     rbp
.text:0000000000007B17                 pop     r12
.text:0000000000007B19                 pop     r13
.text:0000000000007B1B                 pop     r14
.text:0000000000007B1D                 pop     r15
.text:0000000000007B1F                 retn
.text:0000000000007B20 ; ---------------------------------------------------------------------------
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007B20                                         ; DATA XREF: .rodata:jpt_7844↓o
.text:0000000000007B20                 mov     r9, [rbx+10h]   ; jumptable 0000000000007844 case 7
.text:0000000000007B24                 mov     r13, [rbx+30h]
.text:0000000000007B28                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000007B2F                 mov     r12, [rbx+28h]
.text:0000000000007B33                 mov     r15, [rbx+20h]
.text:0000000000007B37                 mov     edx, 5          ; category
.text:0000000000007B3C                 mov     r14, [rbx+18h]
.text:0000000000007B40                 mov     r8, [rbx+8]
.text:0000000000007B44                 xor     edi, edi        ; domainname
.text:0000000000007B46                 mov     [rsp+58h+var_50], r9
.text:0000000000007B4B                 mov     rbx, [rbx]
.text:0000000000007B4E                 mov     [rsp+58h+var_58], r8
.text:0000000000007B52                 call    _dcgettext
.text:0000000000007B57                 push    r13
.text:0000000000007B59                 push    r12
.text:0000000000007B5B                 push    r15
.text:0000000000007B5D                 push    r14
.text:0000000000007B5F                 mov     r9, [rsp+78h+var_50]
.text:0000000000007B64                 jmp     short loc_7AF3
.text:0000000000007B64 ; ---------------------------------------------------------------------------
.text:0000000000007B66                 align 10h
.text:0000000000007B70
.text:0000000000007B70 def_7844:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000007B70                 mov     r10, [rbx+40h]  ; jumptable 0000000000007844 default case
.text:0000000000007B74                 mov     r9, [rbx+38h]
.text:0000000000007B78                 mov     edx, 5
.text:0000000000007B7D                 mov     rax, [rbx+10h]
.text:0000000000007B81                 mov     r8, [rbx+8]
.text:0000000000007B85                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007B8C                 mov     r13, [rbx+30h]
.text:0000000000007B90                 mov     r12, [rbx+28h]
.text:0000000000007B94                 mov     r15, [rbx+20h]
.text:0000000000007B98                 mov     r14, [rbx+18h]
.text:0000000000007B9C                 mov     [rsp+58h+var_40], r10
.text:0000000000007BA1                 mov     [rsp+58h+var_48], r9
.text:0000000000007BA6                 mov     [rsp+58h+var_58], rax
.text:0000000000007BAA                 mov     [rsp+58h+var_50], r8
.text:0000000000007BAF                 mov     rbx, [rbx]
.text:0000000000007BB2                 jmp     loc_7942
.text:0000000000007BB2 ; } // starts at 77A0
.text:0000000000007BB2 version_etc_arn endp
.text:0000000000007BB2
.text:0000000000007BB2 ; ---------------------------------------------------------------------------
.text:0000000000007BB7                 align 20h
.text:0000000000007BC0
.text:0000000000007BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BC0
.text:0000000000007BC0 ; Attributes: info_from_lumina
.text:0000000000007BC0
.text:0000000000007BC0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000007BC0                 public version_etc_ar
.text:0000000000007BC0 version_etc_ar  proc near
.text:0000000000007BC0 ; __unwind {
.text:0000000000007BC0                 xor     r9d, r9d
.text:0000000000007BC3                 cmp     qword ptr [r8], 0
.text:0000000000007BC7                 jz      short loc_7BDB
.text:0000000000007BC9                 nop     dword ptr [rax+00000000h]
.text:0000000000007BD0
.text:0000000000007BD0 loc_7BD0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000007BD0                 add     r9, 1
.text:0000000000007BD4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000007BD9                 jnz     short loc_7BD0
.text:0000000000007BDB
.text:0000000000007BDB loc_7BDB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000007BDB                 jmp     version_etc_arn
.text:0000000000007BDB ; } // starts at 7BC0
.text:0000000000007BDB version_etc_ar  endp
.text:0000000000007BDB
.text:0000000000007BE0
.text:0000000000007BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007BE0
.text:0000000000007BE0 ; Attributes: info_from_lumina
.text:0000000000007BE0
.text:0000000000007BE0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000007BE0                 public version_etc_va
.text:0000000000007BE0 version_etc_va  proc near
.text:0000000000007BE0
.text:0000000000007BE0 authtab         = qword ptr -68h
.text:0000000000007BE0 var_10          = qword ptr -10h
.text:0000000000007BE0
.text:0000000000007BE0 ; __unwind {
.text:0000000000007BE0                 sub     rsp, 68h
.text:0000000000007BE4                 mov     r10, r8
.text:0000000000007BE7                 xor     r9d, r9d
.text:0000000000007BEA                 mov     rax, fs:28h
.text:0000000000007BF3                 mov     [rsp+68h+var_10], rax
.text:0000000000007BF8                 xor     eax, eax
.text:0000000000007BFA                 mov     r8, rsp
.text:0000000000007BFD                 nop     dword ptr [rax]
.text:0000000000007C00
.text:0000000000007C00 loc_7C00:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000007C00                 mov     eax, [r10]
.text:0000000000007C03                 cmp     eax, 2Fh ; '/'
.text:0000000000007C06                 ja      short loc_7C4A
.text:0000000000007C08                 mov     r11d, eax
.text:0000000000007C0B                 add     r11, [r10+10h]
.text:0000000000007C0F                 add     eax, 8
.text:0000000000007C12                 mov     [r10], eax
.text:0000000000007C15
.text:0000000000007C15 loc_7C15:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000007C15                 mov     rax, [r11]
.text:0000000000007C18                 test    rax, rax
.text:0000000000007C1B                 mov     [r8+r9*8], rax
.text:0000000000007C1F                 jz      short loc_7C2B
.text:0000000000007C21                 add     r9, 1
.text:0000000000007C25                 cmp     r9, 0Ah
.text:0000000000007C29                 jnz     short loc_7C00
.text:0000000000007C2B
.text:0000000000007C2B loc_7C2B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000007C2B                 call    version_etc_arn
.text:0000000000007C30                 mov     rax, [rsp+68h+var_10]
.text:0000000000007C35                 xor     rax, fs:28h
.text:0000000000007C3E                 jnz     short loc_7C45
.text:0000000000007C40                 add     rsp, 68h
.text:0000000000007C44                 retn
.text:0000000000007C45 ; ---------------------------------------------------------------------------
.text:0000000000007C45
.text:0000000000007C45 loc_7C45:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000007C45                 call    ___stack_chk_fail
.text:0000000000007C4A ; ---------------------------------------------------------------------------
.text:0000000000007C4A
.text:0000000000007C4A loc_7C4A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000007C4A                 mov     r11, [r10+8]
.text:0000000000007C4E                 lea     rax, [r11+8]
.text:0000000000007C52                 mov     [r10+8], rax
.text:0000000000007C56                 jmp     short loc_7C15
.text:0000000000007C56 ; } // starts at 7BE0
.text:0000000000007C56 version_etc_va  endp
.text:0000000000007C56
.text:0000000000007C56 ; ---------------------------------------------------------------------------
.text:0000000000007C58                 align 20h
.text:0000000000007C60
.text:0000000000007C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C60
.text:0000000000007C60 ; Attributes: info_from_lumina
.text:0000000000007C60
.text:0000000000007C60 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000007C60                 public version_etc
.text:0000000000007C60 version_etc     proc near               ; CODE XREF: main+15F↑p
.text:0000000000007C60
.text:0000000000007C60 var_C0          = dword ptr -0C0h
.text:0000000000007C60 var_B8          = qword ptr -0B8h
.text:0000000000007C60 var_B0          = qword ptr -0B0h
.text:0000000000007C60 var_A8          = byte ptr -0A8h
.text:0000000000007C60 var_50          = qword ptr -50h
.text:0000000000007C60 var_48          = byte ptr -48h
.text:0000000000007C60 var_28          = qword ptr -28h
.text:0000000000007C60 var_20          = qword ptr -20h
.text:0000000000007C60 arg_0           = byte ptr  8
.text:0000000000007C60
.text:0000000000007C60 ; __unwind {
.text:0000000000007C60                 push    rbp
.text:0000000000007C61                 push    rbx
.text:0000000000007C62                 mov     r10d, 20h ; ' '
.text:0000000000007C68                 xor     r11d, r11d
.text:0000000000007C6B                 sub     rsp, 0B8h
.text:0000000000007C72                 mov     rax, fs:28h
.text:0000000000007C7B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000007C80                 xor     eax, eax
.text:0000000000007C82                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000007C8A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000007C92                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000007C9A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000007C9F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000007CA7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000007CAF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000007CB4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000007CBC                 xor     r9d, r9d
.text:0000000000007CBF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000007CC4                 mov     rbp, rax
.text:0000000000007CC7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000007CD0                 cmp     r10d, 2Fh ; '/'
.text:0000000000007CD4                 ja      short loc_7D2C
.text:0000000000007CD6                 mov     eax, r10d
.text:0000000000007CD9                 mov     r11d, 1
.text:0000000000007CDF                 add     r10d, 8
.text:0000000000007CE3                 add     rax, rbp
.text:0000000000007CE6
.text:0000000000007CE6 loc_7CE6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000007CE6                 mov     rax, [rax]
.text:0000000000007CE9                 test    rax, rax
.text:0000000000007CEC                 mov     [r8+r9*8], rax
.text:0000000000007CF0                 jz      short loc_7CFC
.text:0000000000007CF2                 add     r9, 1
.text:0000000000007CF6                 cmp     r9, 0Ah
.text:0000000000007CFA                 jnz     short loc_7CD0
.text:0000000000007CFC
.text:0000000000007CFC loc_7CFC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000007CFC                 test    r11b, r11b
.text:0000000000007CFF                 jnz     short loc_7D25
.text:0000000000007D01
.text:0000000000007D01 loc_7D01:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000007D01                 call    version_etc_arn
.text:0000000000007D06                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000007D0B                 xor     rax, fs:28h
.text:0000000000007D14                 jnz     short loc_7D20
.text:0000000000007D16                 add     rsp, 0B8h
.text:0000000000007D1D                 pop     rbx
.text:0000000000007D1E                 pop     rbp
.text:0000000000007D1F                 retn
.text:0000000000007D20 ; ---------------------------------------------------------------------------
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000007D20                 call    ___stack_chk_fail
.text:0000000000007D25 ; ---------------------------------------------------------------------------
.text:0000000000007D25
.text:0000000000007D25 loc_7D25:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000007D25                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000007D2A                 jmp     short loc_7D01
.text:0000000000007D2C ; ---------------------------------------------------------------------------
.text:0000000000007D2C
.text:0000000000007D2C loc_7D2C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000007D2C                 mov     rax, rbx
.text:0000000000007D2F                 add     rbx, 8
.text:0000000000007D33                 jmp     short loc_7CE6
.text:0000000000007D33 ; } // starts at 7C60
.text:0000000000007D33 version_etc     endp
.text:0000000000007D33
.text:0000000000007D33 ; ---------------------------------------------------------------------------
.text:0000000000007D35                 align 20h
.text:0000000000007D40
.text:0000000000007D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D40
.text:0000000000007D40 ; Attributes: info_from_lumina
.text:0000000000007D40
.text:0000000000007D40 ; void __cdecl emit_bug_reporting_address()
.text:0000000000007D40                 public emit_bug_reporting_address
.text:0000000000007D40 emit_bug_reporting_address proc near
.text:0000000000007D40 ; __unwind {
.text:0000000000007D40                 push    rbx
.text:0000000000007D41                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000007D48                 mov     edx, 5          ; category
.text:0000000000007D4D                 xor     edi, edi        ; domainname
.text:0000000000007D4F                 call    _dcgettext
.text:0000000000007D54                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000007D5B                 mov     rsi, rax
.text:0000000000007D5E                 mov     edi, 1
.text:0000000000007D63                 xor     eax, eax
.text:0000000000007D65                 call    ___printf_chk
.text:0000000000007D6A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000007D71                 mov     edx, 5          ; category
.text:0000000000007D76                 xor     edi, edi        ; domainname
.text:0000000000007D78                 call    _dcgettext
.text:0000000000007D7D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000007D84                 lea     rdx, unk_B470
.text:0000000000007D8B                 mov     rsi, rax
.text:0000000000007D8E                 mov     edi, 1
.text:0000000000007D93                 xor     eax, eax
.text:0000000000007D95                 call    ___printf_chk
.text:0000000000007D9A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000007DA1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000007DA8                 xor     edi, edi        ; domainname
.text:0000000000007DAA                 mov     edx, 5          ; category
.text:0000000000007DAF                 call    _dcgettext
.text:0000000000007DB4                 mov     rsi, rbx        ; stream
.text:0000000000007DB7                 mov     rdi, rax        ; s
.text:0000000000007DBA                 pop     rbx
.text:0000000000007DBB                 jmp     _fputs_unlocked
.text:0000000000007DBB ; } // starts at 7D40
.text:0000000000007DBB emit_bug_reporting_address endp
.text:0000000000007DBB
.text:0000000000007DC0
.text:0000000000007DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DC0
.text:0000000000007DC0
.text:0000000000007DC0                 public xmalloc
.text:0000000000007DC0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000007DC0                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000007DC0 ; __unwind {
.text:0000000000007DC0                 push    rbx
.text:0000000000007DC1                 mov     rbx, rdi
.text:0000000000007DC4                 call    _malloc
.text:0000000000007DC9                 test    rax, rax
.text:0000000000007DCC                 jnz     short loc_7DD3
.text:0000000000007DCE                 test    rbx, rbx
.text:0000000000007DD1                 jnz     short loc_7DD5
.text:0000000000007DD3
.text:0000000000007DD3 loc_7DD3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000007DD3                 pop     rbx
.text:0000000000007DD4                 retn
.text:0000000000007DD5 ; ---------------------------------------------------------------------------
.text:0000000000007DD5
.text:0000000000007DD5 loc_7DD5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000007DD5                 call    xalloc_die
.text:0000000000007DD5 ; } // starts at 7DC0
.text:0000000000007DD5 xmalloc         endp
.text:0000000000007DD5
.text:0000000000007DD5 ; ---------------------------------------------------------------------------
.text:0000000000007DDA                 align 20h
.text:0000000000007DE0
.text:0000000000007DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DE0
.text:0000000000007DE0 ; Attributes: info_from_lumina
.text:0000000000007DE0
.text:0000000000007DE0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000007DE0                 public xnmalloc
.text:0000000000007DE0 xnmalloc        proc near
.text:0000000000007DE0 ; __unwind {
.text:0000000000007DE0                 mov     rax, rdi
.text:0000000000007DE3                 mul     rsi
.text:0000000000007DE6                 mov     rdi, rax
.text:0000000000007DE9                 seto    al
.text:0000000000007DEC                 test    rdi, rdi
.text:0000000000007DEF                 js      short loc_7DFB
.text:0000000000007DF1                 movzx   eax, al
.text:0000000000007DF4                 test    rax, rax
.text:0000000000007DF7                 jnz     short loc_7DFB
.text:0000000000007DF9                 jmp     short xmalloc
.text:0000000000007DFB ; ---------------------------------------------------------------------------
.text:0000000000007DFB
.text:0000000000007DFB loc_7DFB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000007DFB                                         ; xnmalloc+17↑j
.text:0000000000007DFB                 sub     rsp, 8
.text:0000000000007DFF                 call    xalloc_die
.text:0000000000007DFF ; } // starts at 7DE0
.text:0000000000007DFF xnmalloc        endp
.text:0000000000007DFF
.text:0000000000007DFF ; ---------------------------------------------------------------------------
.text:0000000000007E04                 align 10h
.text:0000000000007E10
.text:0000000000007E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E10
.text:0000000000007E10
.text:0000000000007E10                 public xcharalloc
.text:0000000000007E10 xcharalloc      proc near
.text:0000000000007E10 ; __unwind {
.text:0000000000007E10                 jmp     short xmalloc
.text:0000000000007E10 ; } // starts at 7E10
.text:0000000000007E10 xcharalloc      endp
.text:0000000000007E10
.text:0000000000007E10 ; ---------------------------------------------------------------------------
.text:0000000000007E12                 align 20h
.text:0000000000007E20
.text:0000000000007E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E20
.text:0000000000007E20 ; Attributes: info_from_lumina
.text:0000000000007E20
.text:0000000000007E20 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000007E20                 public xrealloc
.text:0000000000007E20 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000007E20                                         ; quotearg_n_options+182↑p ...
.text:0000000000007E20 ; __unwind {
.text:0000000000007E20                 test    rsi, rsi
.text:0000000000007E23                 push    rbx
.text:0000000000007E24                 mov     rbx, rsi
.text:0000000000007E27                 jnz     short loc_7E2E
.text:0000000000007E29                 test    rdi, rdi
.text:0000000000007E2C                 jnz     short loc_7E48
.text:0000000000007E2E
.text:0000000000007E2E loc_7E2E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000007E2E                 mov     rsi, rbx        ; size
.text:0000000000007E31                 call    _realloc
.text:0000000000007E36                 test    rax, rax
.text:0000000000007E39                 jnz     short loc_7E40
.text:0000000000007E3B                 test    rbx, rbx
.text:0000000000007E3E                 jnz     short loc_7E51
.text:0000000000007E40
.text:0000000000007E40 loc_7E40:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000007E40                 pop     rbx
.text:0000000000007E41                 retn
.text:0000000000007E41 ; ---------------------------------------------------------------------------
.text:0000000000007E42                 align 8
.text:0000000000007E48
.text:0000000000007E48 loc_7E48:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000007E48                 call    _free
.text:0000000000007E4D                 xor     eax, eax
.text:0000000000007E4F                 pop     rbx
.text:0000000000007E50                 retn
.text:0000000000007E51 ; ---------------------------------------------------------------------------
.text:0000000000007E51
.text:0000000000007E51 loc_7E51:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000007E51                 call    xalloc_die
.text:0000000000007E51 ; } // starts at 7E20
.text:0000000000007E51 xrealloc        endp
.text:0000000000007E51
.text:0000000000007E51 ; ---------------------------------------------------------------------------
.text:0000000000007E56                 align 20h
.text:0000000000007E60
.text:0000000000007E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E60
.text:0000000000007E60 ; Attributes: info_from_lumina
.text:0000000000007E60
.text:0000000000007E60 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000007E60                 public xnrealloc
.text:0000000000007E60 xnrealloc       proc near
.text:0000000000007E60 ; __unwind {
.text:0000000000007E60                 mov     rax, rsi
.text:0000000000007E63                 mul     rdx
.text:0000000000007E66                 mov     rsi, rax
.text:0000000000007E69                 seto    al
.text:0000000000007E6C                 test    rsi, rsi
.text:0000000000007E6F                 js      short loc_7E7B
.text:0000000000007E71                 movzx   eax, al
.text:0000000000007E74                 test    rax, rax
.text:0000000000007E77                 jnz     short loc_7E7B
.text:0000000000007E79                 jmp     short xrealloc
.text:0000000000007E7B ; ---------------------------------------------------------------------------
.text:0000000000007E7B
.text:0000000000007E7B loc_7E7B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000007E7B                                         ; xnrealloc+17↑j
.text:0000000000007E7B                 sub     rsp, 8
.text:0000000000007E7F                 call    xalloc_die
.text:0000000000007E7F ; } // starts at 7E60
.text:0000000000007E7F xnrealloc       endp
.text:0000000000007E7F
.text:0000000000007E7F ; ---------------------------------------------------------------------------
.text:0000000000007E84                 align 10h
.text:0000000000007E90
.text:0000000000007E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E90
.text:0000000000007E90 ; Attributes: info_from_lumina
.text:0000000000007E90
.text:0000000000007E90 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000007E90                 public x2nrealloc
.text:0000000000007E90 x2nrealloc      proc near
.text:0000000000007E90 ; __unwind {
.text:0000000000007E90                 test    rdi, rdi
.text:0000000000007E93                 mov     r9, rdx
.text:0000000000007E96                 mov     rcx, [rsi]
.text:0000000000007E99                 jz      short loc_7ED0
.text:0000000000007E9B                 xor     edx, edx
.text:0000000000007E9D                 mov     rax, 5555555555555554h
.text:0000000000007EA7                 div     r9
.text:0000000000007EAA                 cmp     rax, rcx
.text:0000000000007EAD                 jbe     short loc_7EEB
.text:0000000000007EAF                 mov     rax, rcx
.text:0000000000007EB2                 shr     rax, 1
.text:0000000000007EB5                 lea     rcx, [rax+rcx+1]
.text:0000000000007EBA
.text:0000000000007EBA loc_7EBA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000007EBA                 mov     [rsi], rcx
.text:0000000000007EBD                 imul    rcx, r9
.text:0000000000007EC1                 mov     rsi, rcx
.text:0000000000007EC4                 jmp     xrealloc
.text:0000000000007EC4 ; ---------------------------------------------------------------------------
.text:0000000000007EC9                 align 10h
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000007ED0                 test    rcx, rcx
.text:0000000000007ED3                 jz      short loc_7EF8
.text:0000000000007ED5
.text:0000000000007ED5 loc_7ED5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000007ED5                 mov     rax, rcx
.text:0000000000007ED8                 mul     r9
.text:0000000000007EDB                 seto    dl
.text:0000000000007EDE                 test    rax, rax
.text:0000000000007EE1                 movzx   edx, dl
.text:0000000000007EE4                 js      short loc_7EEB
.text:0000000000007EE6                 test    rdx, rdx
.text:0000000000007EE9                 jz      short loc_7EBA
.text:0000000000007EEB
.text:0000000000007EEB loc_7EEB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000007EEB                                         ; x2nrealloc+54↑j
.text:0000000000007EEB                 sub     rsp, 8
.text:0000000000007EEF                 call    xalloc_die
.text:0000000000007EEF ; ---------------------------------------------------------------------------
.text:0000000000007EF4                 align 8
.text:0000000000007EF8
.text:0000000000007EF8 loc_7EF8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000007EF8                 xor     edx, edx
.text:0000000000007EFA                 mov     eax, 80h
.text:0000000000007EFF                 xor     r8d, r8d
.text:0000000000007F02                 div     r9
.text:0000000000007F05                 test    rax, rax
.text:0000000000007F08                 setz    r8b
.text:0000000000007F0C                 lea     rcx, [r8+rax]
.text:0000000000007F10                 jmp     short loc_7ED5
.text:0000000000007F10 ; } // starts at 7E90
.text:0000000000007F10 x2nrealloc      endp
.text:0000000000007F10
.text:0000000000007F10 ; ---------------------------------------------------------------------------
.text:0000000000007F12                 align 20h
.text:0000000000007F20
.text:0000000000007F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F20
.text:0000000000007F20 ; Attributes: info_from_lumina
.text:0000000000007F20
.text:0000000000007F20 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000007F20                 public x2realloc
.text:0000000000007F20 x2realloc       proc near
.text:0000000000007F20 ; __unwind {
.text:0000000000007F20                 test    rdi, rdi
.text:0000000000007F23                 mov     rax, [rsi]
.text:0000000000007F26                 jz      short loc_7F50
.text:0000000000007F28                 mov     rdx, 5555555555555553h
.text:0000000000007F32                 cmp     rax, rdx
.text:0000000000007F35                 ja      short loc_7F61
.text:0000000000007F37                 mov     rdx, rax
.text:0000000000007F3A                 shr     rdx, 1
.text:0000000000007F3D                 lea     rax, [rdx+rax+1]
.text:0000000000007F42
.text:0000000000007F42 loc_7F42:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000007F42                 mov     [rsi], rax
.text:0000000000007F45                 mov     rsi, rax
.text:0000000000007F48                 jmp     xrealloc
.text:0000000000007F48 ; ---------------------------------------------------------------------------
.text:0000000000007F4D                 align 10h
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000007F50                 test    rax, rax
.text:0000000000007F53                 mov     edx, 80h
.text:0000000000007F58                 cmovz   rax, rdx
.text:0000000000007F5C                 test    rax, rax
.text:0000000000007F5F                 jns     short loc_7F42
.text:0000000000007F61
.text:0000000000007F61 loc_7F61:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000007F61                 sub     rsp, 8
.text:0000000000007F65                 call    xalloc_die
.text:0000000000007F65 ; } // starts at 7F20
.text:0000000000007F65 x2realloc       endp
.text:0000000000007F65
.text:0000000000007F65 ; ---------------------------------------------------------------------------
.text:0000000000007F6A                 align 10h
.text:0000000000007F70
.text:0000000000007F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F70
.text:0000000000007F70
.text:0000000000007F70 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000007F70                 public xzalloc
.text:0000000000007F70 xzalloc         proc near
.text:0000000000007F70 ; __unwind {
.text:0000000000007F70                 push    rbx
.text:0000000000007F71                 mov     rbx, rdi
.text:0000000000007F74                 call    xmalloc
.text:0000000000007F79                 mov     rdx, rbx        ; n
.text:0000000000007F7C                 xor     esi, esi        ; c
.text:0000000000007F7E                 mov     rdi, rax        ; s
.text:0000000000007F81                 pop     rbx
.text:0000000000007F82                 jmp     _memset
.text:0000000000007F82 ; } // starts at 7F70
.text:0000000000007F82 xzalloc         endp
.text:0000000000007F82
.text:0000000000007F82 ; ---------------------------------------------------------------------------
.text:0000000000007F87                 align 10h
.text:0000000000007F90
.text:0000000000007F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F90
.text:0000000000007F90 ; Attributes: info_from_lumina
.text:0000000000007F90
.text:0000000000007F90 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000007F90                 public xcalloc
.text:0000000000007F90 xcalloc         proc near
.text:0000000000007F90 ; __unwind {
.text:0000000000007F90                 mov     rax, rdi
.text:0000000000007F93                 sub     rsp, 8
.text:0000000000007F97                 mul     rsi
.text:0000000000007F9A                 seto    dl
.text:0000000000007F9D                 test    rax, rax
.text:0000000000007FA0                 js      short loc_7FB9
.text:0000000000007FA2                 movzx   edx, dl
.text:0000000000007FA5                 test    rdx, rdx
.text:0000000000007FA8                 jnz     short loc_7FB9
.text:0000000000007FAA                 call    _calloc
.text:0000000000007FAF                 test    rax, rax
.text:0000000000007FB2                 jz      short loc_7FB9
.text:0000000000007FB4                 add     rsp, 8
.text:0000000000007FB8                 retn
.text:0000000000007FB9 ; ---------------------------------------------------------------------------
.text:0000000000007FB9
.text:0000000000007FB9 loc_7FB9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000007FB9                                         ; xcalloc+18↑j ...
.text:0000000000007FB9                 call    xalloc_die
.text:0000000000007FB9 ; } // starts at 7F90
.text:0000000000007FB9 xcalloc         endp
.text:0000000000007FB9
.text:0000000000007FB9 ; ---------------------------------------------------------------------------
.text:0000000000007FBE                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FC0
.text:0000000000007FC0 ; Attributes: info_from_lumina
.text:0000000000007FC0
.text:0000000000007FC0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000007FC0                 public xmemdup
.text:0000000000007FC0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000007FC0                                         ; xstrdup+11↓j
.text:0000000000007FC0 ; __unwind {
.text:0000000000007FC0                 push    rbp
.text:0000000000007FC1                 push    rbx
.text:0000000000007FC2                 mov     rbp, rdi
.text:0000000000007FC5                 mov     rdi, rsi
.text:0000000000007FC8                 mov     rbx, rsi
.text:0000000000007FCB                 sub     rsp, 8
.text:0000000000007FCF                 call    xmalloc
.text:0000000000007FD4                 add     rsp, 8
.text:0000000000007FD8                 mov     rdx, rbx        ; n
.text:0000000000007FDB                 mov     rsi, rbp        ; src
.text:0000000000007FDE                 pop     rbx
.text:0000000000007FDF                 pop     rbp
.text:0000000000007FE0                 mov     rdi, rax        ; dest
.text:0000000000007FE3                 jmp     _memcpy
.text:0000000000007FE3 ; } // starts at 7FC0
.text:0000000000007FE3 xmemdup         endp
.text:0000000000007FE3
.text:0000000000007FE3 ; ---------------------------------------------------------------------------
.text:0000000000007FE8                 align 10h
.text:0000000000007FF0
.text:0000000000007FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FF0
.text:0000000000007FF0
.text:0000000000007FF0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000007FF0                 public xstrdup
.text:0000000000007FF0 xstrdup         proc near
.text:0000000000007FF0 ; __unwind {
.text:0000000000007FF0                 push    rbx
.text:0000000000007FF1                 mov     rbx, rdi
.text:0000000000007FF4                 call    _strlen
.text:0000000000007FF9                 mov     rdi, rbx        ; src
.text:0000000000007FFC                 lea     rsi, [rax+1]    ; n
.text:0000000000008000                 pop     rbx
.text:0000000000008001                 jmp     short xmemdup
.text:0000000000008001 ; } // starts at 7FF0
.text:0000000000008001 xstrdup         endp
.text:0000000000008001
.text:0000000000008001 ; ---------------------------------------------------------------------------
.text:0000000000008003                 align 10h
.text:0000000000008010
.text:0000000000008010 ; =============== S U B R O U T I N E =======================================
.text:0000000000008010
.text:0000000000008010 ; Attributes: noreturn info_from_lumina
.text:0000000000008010
.text:0000000000008010 ; void __cdecl xalloc_die()
.text:0000000000008010                 public xalloc_die
.text:0000000000008010 xalloc_die      proc near               ; CODE XREF: wrapf:loc_36A7↑p
.text:0000000000008010                                         ; quotearg_n_options:loc_6FE6↑p ...
.text:0000000000008010 ; __unwind {
.text:0000000000008010                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000008017                 sub     rsp, 8
.text:000000000000801B                 mov     edx, 5          ; category
.text:0000000000008020                 xor     edi, edi        ; domainname
.text:0000000000008022                 call    _dcgettext
.text:0000000000008027                 mov     edi, cs:exit_failure ; status
.text:000000000000802D                 lea     rdx, format     ; format
.text:0000000000008034                 mov     rcx, rax
.text:0000000000008037                 xor     esi, esi        ; errnum
.text:0000000000008039                 xor     eax, eax
.text:000000000000803B                 call    _error
.text:0000000000008040                 call    _abort
.text:0000000000008040 ; } // starts at 8010
.text:0000000000008040 xalloc_die      endp
.text:0000000000008040
.text:0000000000008040 ; ---------------------------------------------------------------------------
.text:0000000000008045                 align 10h
.text:0000000000008050
.text:0000000000008050 ; =============== S U B R O U T I N E =======================================
.text:0000000000008050
.text:0000000000008050 ; Attributes: info_from_lumina
.text:0000000000008050
.text:0000000000008050 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008050                 public xnumtoumax
.text:0000000000008050 xnumtoumax      proc near               ; CODE XREF: integer_arg+39↑p
.text:0000000000008050                                         ; xdectoumax+17↓p
.text:0000000000008050
.text:0000000000008050 var_48          = qword ptr -48h
.text:0000000000008050 var_40          = qword ptr -40h
.text:0000000000008050 arg_0           = dword ptr  8
.text:0000000000008050
.text:0000000000008050 ; __unwind {
.text:0000000000008050                 push    r15
.text:0000000000008052                 push    r14
.text:0000000000008054                 mov     r15, rcx
.text:0000000000008057                 push    r13
.text:0000000000008059                 push    r12
.text:000000000000805B                 mov     r14, rdx
.text:000000000000805E                 push    rbp
.text:000000000000805F                 push    rbx
.text:0000000000008060                 mov     edx, esi
.text:0000000000008062                 xor     esi, esi
.text:0000000000008064                 mov     r12, rdi
.text:0000000000008067                 mov     r13, r9
.text:000000000000806A                 sub     rsp, 18h
.text:000000000000806E                 mov     rcx, rsp
.text:0000000000008071                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000008075                 mov     rax, fs:28h
.text:000000000000807E                 mov     [rsp+48h+var_40], rax
.text:0000000000008083                 xor     eax, eax
.text:0000000000008085                 call    xstrtoumax
.text:000000000000808A                 test    eax, eax
.text:000000000000808C                 jnz     loc_8120
.text:0000000000008092                 mov     rbp, [rsp+48h+var_48]
.text:0000000000008096                 cmp     rbp, r14
.text:0000000000008099                 jb      short loc_80A0
.text:000000000000809B                 cmp     rbp, r15
.text:000000000000809E                 jbe     short loc_80F4
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: xnumtoumax+49↑j
.text:00000000000080A0                 call    ___errno_location
.text:00000000000080A5                 cmp     rbp, 40000000h
.text:00000000000080AC                 mov     r14, rax
.text:00000000000080AF                 sbb     eax, eax
.text:00000000000080B1                 and     eax, 0FFFFFFD7h
.text:00000000000080B4                 add     eax, 4Bh ; 'K'
.text:00000000000080B7                 mov     [r14], eax
.text:00000000000080BA
.text:00000000000080BA loc_80BA:                               ; CODE XREF: xnumtoumax+E2↓j
.text:00000000000080BA                                         ; xnumtoumax+EA↓j ...
.text:00000000000080BA                 mov     rdi, r12
.text:00000000000080BD                 call    quote
.text:00000000000080C2                 mov     esi, [r14]
.text:00000000000080C5                 mov     r8, rax
.text:00000000000080C8                 mov     eax, 0
.text:00000000000080CD                 lea     rdx, aS_0       ; "%s: "
.text:00000000000080D4                 mov     rcx, r13
.text:00000000000080D7                 cmp     esi, 16h
.text:00000000000080DA                 cmovz   esi, eax        ; errnum
.text:00000000000080DD                 test    ebx, ebx
.text:00000000000080DF                 mov     eax, 1
.text:00000000000080E4                 cmovz   ebx, eax
.text:00000000000080E7                 xor     eax, eax
.text:00000000000080E9                 mov     edi, ebx        ; status
.text:00000000000080EB                 call    _error
.text:00000000000080F0                 mov     rbp, [rsp+48h+var_48]
.text:00000000000080F4
.text:00000000000080F4 loc_80F4:                               ; CODE XREF: xnumtoumax+4E↑j
.text:00000000000080F4                 mov     rdx, [rsp+48h+var_40]
.text:00000000000080F9                 xor     rdx, fs:28h
.text:0000000000008102                 mov     rax, rbp
.text:0000000000008105                 jnz     short loc_814B
.text:0000000000008107                 add     rsp, 18h
.text:000000000000810B                 pop     rbx
.text:000000000000810C                 pop     rbp
.text:000000000000810D                 pop     r12
.text:000000000000810F                 pop     r13
.text:0000000000008111                 pop     r14
.text:0000000000008113                 pop     r15
.text:0000000000008115                 retn
.text:0000000000008115 ; ---------------------------------------------------------------------------
.text:0000000000008116                 align 20h
.text:0000000000008120
.text:0000000000008120 loc_8120:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000008120                 mov     ebp, eax
.text:0000000000008122                 call    ___errno_location
.text:0000000000008127                 cmp     ebp, 1
.text:000000000000812A                 mov     r14, rax
.text:000000000000812D                 jz      short loc_8140
.text:000000000000812F                 cmp     ebp, 3
.text:0000000000008132                 jnz     short loc_80BA
.text:0000000000008134                 mov     dword ptr [rax], 0
.text:000000000000813A                 jmp     loc_80BA
.text:000000000000813A ; ---------------------------------------------------------------------------
.text:000000000000813F                 align 20h
.text:0000000000008140
.text:0000000000008140 loc_8140:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000008140                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000008146                 jmp     loc_80BA
.text:000000000000814B ; ---------------------------------------------------------------------------
.text:000000000000814B
.text:000000000000814B loc_814B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:000000000000814B                 call    ___stack_chk_fail
.text:000000000000814B ; } // starts at 8050
.text:000000000000814B xnumtoumax      endp
.text:000000000000814B
.text:0000000000008150
.text:0000000000008150 ; =============== S U B R O U T I N E =======================================
.text:0000000000008150
.text:0000000000008150 ; Attributes: info_from_lumina
.text:0000000000008150
.text:0000000000008150 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008150                 public xdectoumax
.text:0000000000008150 xdectoumax      proc near
.text:0000000000008150 ; __unwind {
.text:0000000000008150                 sub     rsp, 10h
.text:0000000000008154                 push    r9
.text:0000000000008156                 mov     r9, r8
.text:0000000000008159                 mov     r8, rcx
.text:000000000000815C                 mov     rcx, rdx
.text:000000000000815F                 mov     rdx, rsi
.text:0000000000008162                 mov     esi, 0Ah
.text:0000000000008167                 call    xnumtoumax
.text:000000000000816C                 add     rsp, 18h
.text:0000000000008170                 retn
.text:0000000000008170 ; } // starts at 8150
.text:0000000000008170 xdectoumax      endp
.text:0000000000008170
.text:0000000000008170 ; ---------------------------------------------------------------------------
.text:0000000000008171                 align 20h
.text:0000000000008180
.text:0000000000008180 ; =============== S U B R O U T I N E =======================================
.text:0000000000008180
.text:0000000000008180
.text:0000000000008180 ; __int64 __fastcall xstrtol(char *nptr)
.text:0000000000008180                 public xstrtol
.text:0000000000008180 xstrtol         proc near               ; CODE XREF: screen_columns+5A↑p
.text:0000000000008180
.text:0000000000008180 var_50          = qword ptr -50h
.text:0000000000008180 endptr          = qword ptr -48h
.text:0000000000008180 var_40          = qword ptr -40h
.text:0000000000008180
.text:0000000000008180 ; __unwind {
.text:0000000000008180                 push    r15
.text:0000000000008182                 push    r14
.text:0000000000008184                 push    r13
.text:0000000000008186                 push    r12
.text:0000000000008188                 push    rbp
.text:0000000000008189                 push    rbx
.text:000000000000818A                 sub     rsp, 28h
.text:000000000000818E                 mov     rax, fs:28h
.text:0000000000008197                 mov     [rsp+58h+var_40], rax
.text:000000000000819C                 xor     eax, eax
.text:000000000000819E                 cmp     edx, 24h ; '$'
.text:00000000000081A1                 ja      loc_880F
.text:00000000000081A7                 lea     rax, [rsp+58h+endptr]
.text:00000000000081AC                 test    rsi, rsi
.text:00000000000081AF                 mov     rbx, rsi
.text:00000000000081B2                 mov     r12, rdi
.text:00000000000081B5                 mov     ebp, edx
.text:00000000000081B7                 mov     r14, rcx
.text:00000000000081BA                 cmovz   rbx, rax
.text:00000000000081BE                 mov     r15, r8
.text:00000000000081C1                 call    ___errno_location
.text:00000000000081C6                 mov     edx, ebp        ; base
.text:00000000000081C8                 mov     dword ptr [rax], 0
.text:00000000000081CE                 mov     rsi, rbx        ; endptr
.text:00000000000081D1                 mov     rdi, r12        ; nptr
.text:00000000000081D4                 mov     r13, rax
.text:00000000000081D7                 call    _strtol
.text:00000000000081DC                 mov     rcx, [rbx]
.text:00000000000081DF                 mov     rbp, rax
.text:00000000000081E2                 cmp     rcx, r12
.text:00000000000081E5                 jz      short loc_8248
.text:00000000000081E7                 mov     eax, [r13+0]
.text:00000000000081EB                 test    eax, eax
.text:00000000000081ED                 jnz     short loc_8230
.text:00000000000081EF                 xor     r12d, r12d
.text:00000000000081F2
.text:00000000000081F2 loc_81F2:                               ; CODE XREF: xstrtol+C1↓j
.text:00000000000081F2                 test    r15, r15
.text:00000000000081F5                 jz      short loc_8204
.text:00000000000081F7                 movzx   r13d, byte ptr [rcx]
.text:00000000000081FB                 test    r13b, r13b
.text:00000000000081FE                 jnz     loc_8283
.text:0000000000008204
.text:0000000000008204 loc_8204:                               ; CODE XREF: xstrtol+75↑j
.text:0000000000008204                                         ; xstrtol+226↓j
.text:0000000000008204                 mov     [r14], rbp
.text:0000000000008207
.text:0000000000008207 loc_8207:                               ; CODE XREF: xstrtol+B9↓j
.text:0000000000008207                                         ; xstrtol+E3↓j ...
.text:0000000000008207                 mov     rdi, [rsp+58h+var_40]
.text:000000000000820C                 xor     rdi, fs:28h
.text:0000000000008215                 mov     eax, r12d
.text:0000000000008218                 jnz     loc_882E
.text:000000000000821E                 add     rsp, 28h
.text:0000000000008222                 pop     rbx
.text:0000000000008223                 pop     rbp
.text:0000000000008224                 pop     r12
.text:0000000000008226                 pop     r13
.text:0000000000008228                 pop     r14
.text:000000000000822A                 pop     r15
.text:000000000000822C                 retn
.text:000000000000822C ; ---------------------------------------------------------------------------
.text:000000000000822D                 align 10h
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: xstrtol+6D↑j
.text:0000000000008230                 cmp     eax, 22h ; '"'
.text:0000000000008233                 mov     r12d, 4
.text:0000000000008239                 jnz     short loc_8207
.text:000000000000823B                 mov     r12d, 1
.text:0000000000008241                 jmp     short loc_81F2
.text:0000000000008241 ; ---------------------------------------------------------------------------
.text:0000000000008243                 align 8
.text:0000000000008248
.text:0000000000008248 loc_8248:                               ; CODE XREF: xstrtol+65↑j
.text:0000000000008248                 test    r15, r15
.text:000000000000824B                 jz      loc_86E0
.text:0000000000008251                 movzx   r13d, byte ptr [rcx]
.text:0000000000008255                 mov     [rsp+58h+var_50], rcx
.text:000000000000825A                 mov     r12d, 4
.text:0000000000008260                 test    r13b, r13b
.text:0000000000008263                 jz      short loc_8207
.text:0000000000008265                 movsx   esi, r13b       ; c
.text:0000000000008269                 mov     rdi, r15        ; s
.text:000000000000826C                 call    _strchr
.text:0000000000008271                 test    rax, rax
.text:0000000000008274                 mov     rcx, [rsp+58h+var_50]
.text:0000000000008279                 jz      short loc_8207
.text:000000000000827B                 mov     ebp, 1
.text:0000000000008280                 xor     r12d, r12d
.text:0000000000008283
.text:0000000000008283 loc_8283:                               ; CODE XREF: xstrtol+7E↑j
.text:0000000000008283                 movsx   esi, r13b       ; c
.text:0000000000008287                 mov     rdi, r15        ; s
.text:000000000000828A                 mov     [rsp+58h+var_50], rcx
.text:000000000000828F                 call    _strchr
.text:0000000000008294                 test    rax, rax
.text:0000000000008297                 mov     rcx, [rsp+58h+var_50]
.text:000000000000829C                 jz      short def_832E  ; jumptable 000000000000832E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000829E                 lea     eax, [r13-45h]
.text:00000000000082A2                 cmp     al, 2Fh ; '/'
.text:00000000000082A4                 ja      short loc_8308
.text:00000000000082A6                 mov     rdx, 814400308945h
.text:00000000000082B0                 bt      rdx, rax
.text:00000000000082B4                 jnb     short loc_8308
.text:00000000000082B6                 mov     esi, 30h ; '0'  ; c
.text:00000000000082BB                 mov     rdi, r15        ; s
.text:00000000000082BE                 mov     [rsp+58h+var_50], rcx
.text:00000000000082C3                 call    _strchr
.text:00000000000082C8                 test    rax, rax
.text:00000000000082CB                 mov     rcx, [rsp+58h+var_50]
.text:00000000000082D0                 jz      short loc_8308
.text:00000000000082D2                 movzx   eax, byte ptr [rcx+1]
.text:00000000000082D6                 cmp     al, 44h ; 'D'
.text:00000000000082D8                 jz      short loc_82E6
.text:00000000000082DA                 cmp     al, 69h ; 'i'
.text:00000000000082DC                 jz      loc_87C8
.text:00000000000082E2                 cmp     al, 42h ; 'B'
.text:00000000000082E4                 jnz     short loc_8308
.text:00000000000082E6
.text:00000000000082E6 loc_82E6:                               ; CODE XREF: xstrtol+158↑j
.text:00000000000082E6                 mov     edi, 2
.text:00000000000082EB                 mov     eax, 3E8h
.text:00000000000082F0                 jmp     short loc_8312
.text:00000000000082F0 ; ---------------------------------------------------------------------------
.text:00000000000082F2                 align 8
.text:00000000000082F8
.text:00000000000082F8 def_832E:                               ; CODE XREF: xstrtol+11C↑j
.text:00000000000082F8                                         ; xstrtol+19A↓j ...
.text:00000000000082F8                 mov     [r14], rbp      ; jumptable 000000000000832E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000082FB                 or      r12d, 2
.text:00000000000082FF                 jmp     loc_8207
.text:00000000000082FF ; ---------------------------------------------------------------------------
.text:0000000000008304                 align 8
.text:0000000000008308
.text:0000000000008308 loc_8308:                               ; CODE XREF: xstrtol+124↑j
.text:0000000000008308                                         ; xstrtol+134↑j ...
.text:0000000000008308                 mov     edi, 1
.text:000000000000830D                 mov     eax, 400h
.text:0000000000008312
.text:0000000000008312 loc_8312:                               ; CODE XREF: xstrtol+170↑j
.text:0000000000008312                                         ; xstrtol+65B↓j
.text:0000000000008312                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:0000000000008316                 cmp     r13b, 35h
.text:000000000000831A                 ja      short def_832E  ; jumptable 000000000000832E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000831C                 lea     rsi, jpt_832E
.text:0000000000008323                 movzx   r13d, r13b
.text:0000000000008327                 movsxd  rdx, ds:(jpt_832E - 0E3A8h)[rsi+r13*4]
.text:000000000000832B                 add     rdx, rsi
.text:000000000000832E                 jmp     rdx             ; switch jump
.text:0000000000008330 ; ---------------------------------------------------------------------------
.text:0000000000008330
.text:0000000000008330 loc_8330:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008330                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008330                 mov     r8, 8000000000000000h ; jumptable 000000000000832E cases 77,109
.text:000000000000833A                 movsxd  rsi, eax
.text:000000000000833D                 mov     rax, r8
.text:0000000000008340                 cqo
.text:0000000000008342                 idiv    rsi
.text:0000000000008345                 cmp     rbp, rax
.text:0000000000008348                 mov     r9, rax
.text:000000000000834B                 jl      loc_87F5
.text:0000000000008351                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000835B                 mov     rax, r10
.text:000000000000835E                 cqo
.text:0000000000008360                 idiv    rsi
.text:0000000000008363                 cmp     rbp, rax
.text:0000000000008366                 jg      loc_8802
.text:000000000000836C                 imul    rbp, rsi
.text:0000000000008370                 cmp     r9, rbp
.text:0000000000008373                 jg      loc_87F5
.text:0000000000008379                 cmp     rax, rbp
.text:000000000000837C                 jl      loc_8802
.text:0000000000008382                 imul    rbp, rsi
.text:0000000000008386                 xor     eax, eax
.text:0000000000008388
.text:0000000000008388 loc_8388:                               ; CODE XREF: xstrtol+67D↓j
.text:0000000000008388                                         ; xstrtol+68A↓j
.text:0000000000008388                 or      r12d, eax
.text:000000000000838B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008390
.text:0000000000008390 loc_8390:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008390                                         ; xstrtol+259↓j ...
.text:0000000000008390                 movsxd  rax, edi        ; jumptable 000000000000832E case 99
.text:0000000000008393                 add     rcx, rax
.text:0000000000008396                 mov     eax, r12d
.text:0000000000008399                 or      eax, 2
.text:000000000000839C                 mov     [rbx], rcx
.text:000000000000839F                 cmp     byte ptr [rcx], 0
.text:00000000000083A2                 cmovnz  r12d, eax
.text:00000000000083A6                 jmp     loc_8204
.text:00000000000083A6 ; ---------------------------------------------------------------------------
.text:00000000000083AB                 align 10h
.text:00000000000083B0
.text:00000000000083B0 loc_83B0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000083B0                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:00000000000083B0                 mov     rax, 0C000000000000000h ; jumptable 000000000000832E case 119
.text:00000000000083BA                 cmp     rbp, rax
.text:00000000000083BD                 jl      loc_86F0
.text:00000000000083C3                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:00000000000083CD                 cmp     rbp, rax
.text:00000000000083D0                 jg      loc_87B0
.text:00000000000083D6                 add     rbp, rbp
.text:00000000000083D9                 jmp     short loc_8390  ; jumptable 000000000000832E case 99
.text:00000000000083D9 ; ---------------------------------------------------------------------------
.text:00000000000083DB                 align 20h
.text:00000000000083E0
.text:00000000000083E0 loc_83E0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000083E0                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:00000000000083E0                 mov     rax, 0FFC0000000000000h ; jumptable 000000000000832E case 98
.text:00000000000083EA                 cmp     rbp, rax
.text:00000000000083ED                 jl      loc_86F0
.text:00000000000083F3                 mov     rax, 3FFFFFFFFFFFFFh
.text:00000000000083FD                 cmp     rbp, rax
.text:0000000000008400                 jg      loc_87B0
.text:0000000000008406                 shl     rbp, 9
.text:000000000000840A                 jmp     short loc_8390  ; jumptable 000000000000832E case 99
.text:000000000000840A ; ---------------------------------------------------------------------------
.text:000000000000840C                 align 10h
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008410                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008410                 movsxd  rsi, eax        ; jumptable 000000000000832E case 90
.text:0000000000008413                 mov     rax, 8000000000000000h
.text:000000000000841D                 mov     r8d, 7
.text:0000000000008423                 cqo
.text:0000000000008425                 xor     r11d, r11d
.text:0000000000008428                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008432                 idiv    rsi
.text:0000000000008435                 mov     r10, rax
.text:0000000000008438                 jmp     short loc_845F
.text:0000000000008438 ; ---------------------------------------------------------------------------
.text:000000000000843A                 align 20h
.text:0000000000008440
.text:0000000000008440 loc_8440:                               ; CODE XREF: xstrtol+2E2↓j
.text:0000000000008440                 mov     rax, r9
.text:0000000000008443                 cqo
.text:0000000000008445                 idiv    rsi
.text:0000000000008448                 cmp     rax, rbp
.text:000000000000844B                 jl      loc_8738
.text:0000000000008451                 imul    rbp, rsi
.text:0000000000008455
.text:0000000000008455 loc_8455:                               ; CODE XREF: xstrtol+2F4↓j
.text:0000000000008455                                         ; xstrtol+5C8↓j
.text:0000000000008455                 sub     r8d, 1
.text:0000000000008459                 jz      loc_8580
.text:000000000000845F
.text:000000000000845F loc_845F:                               ; CODE XREF: xstrtol+2B8↑j
.text:000000000000845F                 cmp     r10, rbp
.text:0000000000008462                 jle     short loc_8440
.text:0000000000008464                 mov     r11d, 1
.text:000000000000846A                 mov     rbp, 8000000000000000h
.text:0000000000008474                 jmp     short loc_8455
.text:0000000000008474 ; ---------------------------------------------------------------------------
.text:0000000000008476                 align 20h
.text:0000000000008480
.text:0000000000008480 loc_8480:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008480                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008480                 movsxd  rsi, eax        ; jumptable 000000000000832E case 89
.text:0000000000008483                 mov     rax, 8000000000000000h
.text:000000000000848D                 mov     r8d, 8
.text:0000000000008493                 cqo
.text:0000000000008495                 xor     r11d, r11d
.text:0000000000008498                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000084A2                 idiv    rsi
.text:00000000000084A5                 mov     r10, rax
.text:00000000000084A8                 jmp     short loc_84CF
.text:00000000000084A8 ; ---------------------------------------------------------------------------
.text:00000000000084AA                 align 10h
.text:00000000000084B0
.text:00000000000084B0 loc_84B0:                               ; CODE XREF: xstrtol+352↓j
.text:00000000000084B0                 mov     rax, r9
.text:00000000000084B3                 cqo
.text:00000000000084B5                 idiv    rsi
.text:00000000000084B8                 cmp     rax, rbp
.text:00000000000084BB                 jl      loc_8708
.text:00000000000084C1                 imul    rbp, rsi
.text:00000000000084C5
.text:00000000000084C5 loc_84C5:                               ; CODE XREF: xstrtol+364↓j
.text:00000000000084C5                                         ; xstrtol+598↓j
.text:00000000000084C5                 sub     r8d, 1
.text:00000000000084C9                 jz      loc_8580
.text:00000000000084CF
.text:00000000000084CF loc_84CF:                               ; CODE XREF: xstrtol+328↑j
.text:00000000000084CF                 cmp     r10, rbp
.text:00000000000084D2                 jle     short loc_84B0
.text:00000000000084D4                 mov     r11d, 1
.text:00000000000084DA                 mov     rbp, 8000000000000000h
.text:00000000000084E4                 jmp     short loc_84C5
.text:00000000000084E4 ; ---------------------------------------------------------------------------
.text:00000000000084E6                 align 10h
.text:00000000000084F0
.text:00000000000084F0 loc_84F0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000084F0                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:00000000000084F0                 mov     r8, 8000000000000000h ; jumptable 000000000000832E cases 75,107
.text:00000000000084FA                 movsxd  rsi, eax
.text:00000000000084FD                 mov     rax, r8
.text:0000000000008500                 cqo
.text:0000000000008502                 idiv    rsi
.text:0000000000008505                 cmp     rbp, rax
.text:0000000000008508                 jl      loc_86F0
.text:000000000000850E                 sub     r8, 1
.text:0000000000008512                 mov     rax, r8
.text:0000000000008515                 cqo
.text:0000000000008517                 idiv    rsi
.text:000000000000851A                 cmp     rbp, rax
.text:000000000000851D                 jg      loc_87B0
.text:0000000000008523                 imul    rbp, rsi
.text:0000000000008527                 jmp     loc_8390        ; jumptable 000000000000832E case 99
.text:0000000000008527 ; ---------------------------------------------------------------------------
.text:000000000000852C                 align 10h
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008530                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008530                 movsxd  rsi, eax        ; jumptable 000000000000832E cases 71,103
.text:0000000000008533                 mov     rax, 8000000000000000h
.text:000000000000853D                 mov     r8d, 3
.text:0000000000008543                 cqo
.text:0000000000008545                 xor     r11d, r11d
.text:0000000000008548                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008552                 idiv    rsi
.text:0000000000008555                 mov     r10, rax
.text:0000000000008558
.text:0000000000008558 loc_8558:                               ; CODE XREF: xstrtol+3FA↓j
.text:0000000000008558                 cmp     r10, rbp
.text:000000000000855B                 jg      loc_8750
.text:0000000000008561                 mov     rax, r9
.text:0000000000008564                 cqo
.text:0000000000008566                 idiv    rsi
.text:0000000000008569                 cmp     rax, rbp
.text:000000000000856C                 jl      loc_87E0
.text:0000000000008572                 imul    rbp, rsi
.text:0000000000008576
.text:0000000000008576 loc_8576:                               ; CODE XREF: xstrtol+5E0↓j
.text:0000000000008576                                         ; xstrtol+670↓j
.text:0000000000008576                 sub     r8d, 1
.text:000000000000857A                 jnz     short loc_8558
.text:000000000000857C                 nop     dword ptr [rax+00h]
.text:0000000000008580
.text:0000000000008580 loc_8580:                               ; CODE XREF: xstrtol+2D9↑j
.text:0000000000008580                                         ; xstrtol+349↑j ...
.text:0000000000008580                 or      r12d, r11d
.text:0000000000008583                 jmp     loc_8390        ; jumptable 000000000000832E case 99
.text:0000000000008583 ; ---------------------------------------------------------------------------
.text:0000000000008588                 align 10h
.text:0000000000008590
.text:0000000000008590 loc_8590:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008590                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008590                 movsxd  rsi, eax        ; jumptable 000000000000832E case 69
.text:0000000000008593                 mov     rax, 8000000000000000h
.text:000000000000859D                 mov     r8d, 6
.text:00000000000085A3                 cqo
.text:00000000000085A5                 xor     r11d, r11d
.text:00000000000085A8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000085B2                 idiv    rsi
.text:00000000000085B5                 mov     r10, rax
.text:00000000000085B8                 jmp     short loc_85DB
.text:00000000000085B8 ; ---------------------------------------------------------------------------
.text:00000000000085BA                 align 20h
.text:00000000000085C0
.text:00000000000085C0 loc_85C0:                               ; CODE XREF: xstrtol+45E↓j
.text:00000000000085C0                 mov     rax, r9
.text:00000000000085C3                 cqo
.text:00000000000085C5                 idiv    rsi
.text:00000000000085C8                 cmp     rax, rbp
.text:00000000000085CB                 jl      loc_8768
.text:00000000000085D1                 imul    rbp, rsi
.text:00000000000085D5
.text:00000000000085D5 loc_85D5:                               ; CODE XREF: xstrtol+470↓j
.text:00000000000085D5                                         ; xstrtol+5F8↓j
.text:00000000000085D5                 sub     r8d, 1
.text:00000000000085D9                 jz      short loc_8580
.text:00000000000085DB
.text:00000000000085DB loc_85DB:                               ; CODE XREF: xstrtol+438↑j
.text:00000000000085DB                 cmp     r10, rbp
.text:00000000000085DE                 jle     short loc_85C0
.text:00000000000085E0                 mov     r11d, 1
.text:00000000000085E6                 mov     rbp, 8000000000000000h
.text:00000000000085F0                 jmp     short loc_85D5
.text:00000000000085F0 ; ---------------------------------------------------------------------------
.text:00000000000085F2                 align 8
.text:00000000000085F8
.text:00000000000085F8 loc_85F8:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000085F8                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:00000000000085F8                 movsxd  rsi, eax        ; jumptable 000000000000832E case 80
.text:00000000000085FB                 mov     rax, 8000000000000000h
.text:0000000000008605                 mov     r8d, 5
.text:000000000000860B                 cqo
.text:000000000000860D                 xor     r11d, r11d
.text:0000000000008610                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000861A                 idiv    rsi
.text:000000000000861D                 mov     r10, rax
.text:0000000000008620                 jmp     short loc_8647
.text:0000000000008620 ; ---------------------------------------------------------------------------
.text:0000000000008622                 align 8
.text:0000000000008628
.text:0000000000008628 loc_8628:                               ; CODE XREF: xstrtol+4CA↓j
.text:0000000000008628                 mov     rax, r9
.text:000000000000862B                 cqo
.text:000000000000862D                 idiv    rsi
.text:0000000000008630                 cmp     rax, rbp
.text:0000000000008633                 jl      loc_8780
.text:0000000000008639                 imul    rbp, rsi
.text:000000000000863D
.text:000000000000863D loc_863D:                               ; CODE XREF: xstrtol+4DC↓j
.text:000000000000863D                                         ; xstrtol+610↓j
.text:000000000000863D                 sub     r8d, 1
.text:0000000000008641                 jz      loc_8580
.text:0000000000008647
.text:0000000000008647 loc_8647:                               ; CODE XREF: xstrtol+4A0↑j
.text:0000000000008647                 cmp     r10, rbp
.text:000000000000864A                 jle     short loc_8628
.text:000000000000864C                 mov     r11d, 1
.text:0000000000008652                 mov     rbp, 8000000000000000h
.text:000000000000865C                 jmp     short loc_863D
.text:000000000000865C ; ---------------------------------------------------------------------------
.text:000000000000865E                 align 20h
.text:0000000000008660
.text:0000000000008660 loc_8660:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008660                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008660                 mov     rax, 0FFE0000000000000h ; jumptable 000000000000832E case 66
.text:000000000000866A                 cmp     rbp, rax
.text:000000000000866D                 jl      loc_86F0
.text:0000000000008673                 mov     rax, 1FFFFFFFFFFFFFh
.text:000000000000867D                 cmp     rbp, rax
.text:0000000000008680                 jg      loc_87B0
.text:0000000000008686                 shl     rbp, 0Ah
.text:000000000000868A                 jmp     loc_8390        ; jumptable 000000000000832E case 99
.text:000000000000868A ; ---------------------------------------------------------------------------
.text:000000000000868F                 align 10h
.text:0000000000008690
.text:0000000000008690 loc_8690:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008690                                         ; DATA XREF: .rodata:jpt_832E↓o
.text:0000000000008690                 movsxd  rsi, eax        ; jumptable 000000000000832E cases 84,116
.text:0000000000008693                 mov     rax, 8000000000000000h
.text:000000000000869D                 mov     r8d, 4
.text:00000000000086A3                 cqo
.text:00000000000086A5                 xor     r11d, r11d
.text:00000000000086A8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000086B2                 idiv    rsi
.text:00000000000086B5                 mov     r10, rax
.text:00000000000086B8
.text:00000000000086B8 loc_86B8:                               ; CODE XREF: xstrtol+556↓j
.text:00000000000086B8                 cmp     r10, rbp
.text:00000000000086BB                 jg      short loc_8720
.text:00000000000086BD                 mov     rax, r9
.text:00000000000086C0                 cqo
.text:00000000000086C2                 idiv    rsi
.text:00000000000086C5                 cmp     rax, rbp
.text:00000000000086C8                 jl      loc_8798
.text:00000000000086CE                 imul    rbp, rsi
.text:00000000000086D2
.text:00000000000086D2 loc_86D2:                               ; CODE XREF: xstrtol+5B0↓j
.text:00000000000086D2                                         ; xstrtol+628↓j
.text:00000000000086D2                 sub     r8d, 1
.text:00000000000086D6                 jnz     short loc_86B8
.text:00000000000086D8                 jmp     loc_8580
.text:00000000000086D8 ; ---------------------------------------------------------------------------
.text:00000000000086DD                 align 20h
.text:00000000000086E0
.text:00000000000086E0 loc_86E0:                               ; CODE XREF: xstrtol+CB↑j
.text:00000000000086E0                 mov     r12d, 4
.text:00000000000086E6                 jmp     loc_8207
.text:00000000000086E6 ; ---------------------------------------------------------------------------
.text:00000000000086EB                 align 10h
.text:00000000000086F0
.text:00000000000086F0 loc_86F0:                               ; CODE XREF: xstrtol+23D↑j
.text:00000000000086F0                                         ; xstrtol+26D↑j ...
.text:00000000000086F0                 mov     r12d, 1
.text:00000000000086F6                 mov     rbp, 8000000000000000h
.text:0000000000008700                 jmp     loc_8390        ; jumptable 000000000000832E case 99
.text:0000000000008700 ; ---------------------------------------------------------------------------
.text:0000000000008705                 align 8
.text:0000000000008708
.text:0000000000008708 loc_8708:                               ; CODE XREF: xstrtol+33B↑j
.text:0000000000008708                 mov     r11d, 1
.text:000000000000870E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008718                 jmp     loc_84C5
.text:0000000000008718 ; ---------------------------------------------------------------------------
.text:000000000000871D                 align 20h
.text:0000000000008720
.text:0000000000008720 loc_8720:                               ; CODE XREF: xstrtol+53B↑j
.text:0000000000008720                 mov     r11d, 1
.text:0000000000008726                 mov     rbp, 8000000000000000h
.text:0000000000008730                 jmp     short loc_86D2
.text:0000000000008730 ; ---------------------------------------------------------------------------
.text:0000000000008732                 align 8
.text:0000000000008738
.text:0000000000008738 loc_8738:                               ; CODE XREF: xstrtol+2CB↑j
.text:0000000000008738                 mov     r11d, 1
.text:000000000000873E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008748                 jmp     loc_8455
.text:0000000000008748 ; ---------------------------------------------------------------------------
.text:000000000000874D                 align 10h
.text:0000000000008750
.text:0000000000008750 loc_8750:                               ; CODE XREF: xstrtol+3DB↑j
.text:0000000000008750                 mov     r11d, 1
.text:0000000000008756                 mov     rbp, 8000000000000000h
.text:0000000000008760                 jmp     loc_8576
.text:0000000000008760 ; ---------------------------------------------------------------------------
.text:0000000000008765                 align 8
.text:0000000000008768
.text:0000000000008768 loc_8768:                               ; CODE XREF: xstrtol+44B↑j
.text:0000000000008768                 mov     r11d, 1
.text:000000000000876E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008778                 jmp     loc_85D5
.text:0000000000008778 ; ---------------------------------------------------------------------------
.text:000000000000877D                 align 20h
.text:0000000000008780
.text:0000000000008780 loc_8780:                               ; CODE XREF: xstrtol+4B3↑j
.text:0000000000008780                 mov     r11d, 1
.text:0000000000008786                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008790                 jmp     loc_863D
.text:0000000000008790 ; ---------------------------------------------------------------------------
.text:0000000000008795                 align 8
.text:0000000000008798
.text:0000000000008798 loc_8798:                               ; CODE XREF: xstrtol+548↑j
.text:0000000000008798                 mov     r11d, 1
.text:000000000000879E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000087A8                 jmp     loc_86D2
.text:00000000000087A8 ; ---------------------------------------------------------------------------
.text:00000000000087AD                 align 10h
.text:00000000000087B0
.text:00000000000087B0 loc_87B0:                               ; CODE XREF: xstrtol+250↑j
.text:00000000000087B0                                         ; xstrtol+280↑j ...
.text:00000000000087B0                 mov     r12d, 1
.text:00000000000087B6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000087C0                 jmp     loc_8390        ; jumptable 000000000000832E case 99
.text:00000000000087C0 ; ---------------------------------------------------------------------------
.text:00000000000087C5                 align 8
.text:00000000000087C8
.text:00000000000087C8 loc_87C8:                               ; CODE XREF: xstrtol+15C↑j
.text:00000000000087C8                 xor     edi, edi
.text:00000000000087CA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:00000000000087CE                 mov     eax, 400h
.text:00000000000087D3                 setz    dil
.text:00000000000087D7                 lea     edi, [rdi+rdi+1]
.text:00000000000087DB                 jmp     loc_8312
.text:00000000000087E0 ; ---------------------------------------------------------------------------
.text:00000000000087E0
.text:00000000000087E0 loc_87E0:                               ; CODE XREF: xstrtol+3EC↑j
.text:00000000000087E0                 mov     r11d, 1
.text:00000000000087E6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:00000000000087F0                 jmp     loc_8576
.text:00000000000087F5 ; ---------------------------------------------------------------------------
.text:00000000000087F5
.text:00000000000087F5 loc_87F5:                               ; CODE XREF: xstrtol+1CB↑j
.text:00000000000087F5                                         ; xstrtol+1F3↑j
.text:00000000000087F5                 mov     eax, 1
.text:00000000000087FA                 mov     rbp, r8
.text:00000000000087FD                 jmp     loc_8388
.text:0000000000008802 ; ---------------------------------------------------------------------------
.text:0000000000008802
.text:0000000000008802 loc_8802:                               ; CODE XREF: xstrtol+1E6↑j
.text:0000000000008802                                         ; xstrtol+1FC↑j
.text:0000000000008802                 mov     eax, 1
.text:0000000000008807                 mov     rbp, r10
.text:000000000000880A                 jmp     loc_8388
.text:000000000000880F ; ---------------------------------------------------------------------------
.text:000000000000880F
.text:000000000000880F loc_880F:                               ; CODE XREF: xstrtol+21↑j
.text:000000000000880F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtol"
.text:0000000000008816                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000881D                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000008824                 mov     edx, 54h ; 'T'  ; line
.text:0000000000008829                 call    ___assert_fail
.text:000000000000882E ; ---------------------------------------------------------------------------
.text:000000000000882E
.text:000000000000882E loc_882E:                               ; CODE XREF: xstrtol+98↑j
.text:000000000000882E                 call    ___stack_chk_fail
.text:000000000000882E ; } // starts at 8180
.text:000000000000882E xstrtol         endp
.text:000000000000882E
.text:000000000000882E ; ---------------------------------------------------------------------------
.text:0000000000008833                 align 20h
.text:0000000000008840
.text:0000000000008840 ; =============== S U B R O U T I N E =======================================
.text:0000000000008840
.text:0000000000008840
.text:0000000000008840 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000008840                 public xstrtoumax
.text:0000000000008840 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000008840
.text:0000000000008840 base            = dword ptr -50h
.text:0000000000008840 endptr          = qword ptr -48h
.text:0000000000008840 var_40          = qword ptr -40h
.text:0000000000008840
.text:0000000000008840 ; __unwind {
.text:0000000000008840                 push    r15
.text:0000000000008842                 push    r14
.text:0000000000008844                 push    r13
.text:0000000000008846                 push    r12
.text:0000000000008848                 push    rbp
.text:0000000000008849                 push    rbx
.text:000000000000884A                 sub     rsp, 28h
.text:000000000000884E                 mov     rax, fs:28h
.text:0000000000008857                 mov     [rsp+58h+var_40], rax
.text:000000000000885C                 xor     eax, eax
.text:000000000000885E                 cmp     edx, 24h ; '$'
.text:0000000000008861                 ja      loc_8BC5
.text:0000000000008867                 lea     rax, [rsp+58h+endptr]
.text:000000000000886C                 mov     r15, rsi
.text:000000000000886F                 test    rsi, rsi
.text:0000000000008872                 mov     rbp, rdi
.text:0000000000008875                 mov     [rsp+58h+base], edx
.text:0000000000008879                 mov     r14, rcx
.text:000000000000887C                 mov     r13, r8
.text:000000000000887F                 cmovz   r15, rax
.text:0000000000008883                 call    ___errno_location
.text:0000000000008888                 mov     dword ptr [rax], 0
.text:000000000000888E                 mov     r12, rax
.text:0000000000008891                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008895                 call    ___ctype_b_loc
.text:000000000000889A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000889E                 mov     rsi, [rax]
.text:00000000000088A1                 mov     rax, rbp
.text:00000000000088A4                 jmp     short loc_88B7
.text:00000000000088A4 ; ---------------------------------------------------------------------------
.text:00000000000088A6                 align 10h
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: xstrtoumax+7F↓j
.text:00000000000088B0                 add     rax, 1
.text:00000000000088B4                 movzx   ebx, byte ptr [rax]
.text:00000000000088B7
.text:00000000000088B7 loc_88B7:                               ; CODE XREF: xstrtoumax+64↑j
.text:00000000000088B7                 movzx   ecx, bl
.text:00000000000088BA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:00000000000088BF                 jnz     short loc_88B0
.text:00000000000088C1                 cmp     bl, 2Dh ; '-'
.text:00000000000088C4                 jz      short loc_8918
.text:00000000000088C6                 xor     ecx, ecx        ; group
.text:00000000000088C8                 mov     rsi, r15        ; endptr
.text:00000000000088CB                 mov     rdi, rbp        ; nptr
.text:00000000000088CE                 call    ___strtoul_internal
.text:00000000000088D3                 mov     rcx, [r15]
.text:00000000000088D6                 mov     rbx, rax
.text:00000000000088D9                 cmp     rcx, rbp
.text:00000000000088DC                 jz      short loc_8908
.text:00000000000088DE                 mov     eax, [r12]
.text:00000000000088E2                 test    eax, eax
.text:00000000000088E4                 jz      short loc_8948
.text:00000000000088E6                 cmp     eax, 22h ; '"'
.text:00000000000088E9                 mov     ebp, 1
.text:00000000000088EE                 jnz     short loc_8918
.text:00000000000088F0
.text:00000000000088F0 loc_88F0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:00000000000088F0                 test    r13, r13
.text:00000000000088F3                 jz      short loc_88FE
.text:00000000000088F5                 movzx   r12d, byte ptr [rcx]
.text:00000000000088F9                 test    r12b, r12b
.text:00000000000088FC                 jnz     short loc_8977
.text:00000000000088FE
.text:00000000000088FE loc_88FE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:00000000000088FE                 mov     [r14], rbx
.text:0000000000008901                 jmp     short loc_891D
.text:0000000000008901 ; ---------------------------------------------------------------------------
.text:0000000000008903                 align 8
.text:0000000000008908
.text:0000000000008908 loc_8908:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000008908                 test    r13, r13
.text:000000000000890B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008910                 jnz     short loc_8950
.text:0000000000008912                 nop     word ptr [rax+rax+00h]
.text:0000000000008918
.text:0000000000008918 loc_8918:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000008918                                         ; xstrtoumax+AE↑j ...
.text:0000000000008918                 mov     ebp, 4
.text:000000000000891D
.text:000000000000891D loc_891D:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000891D                                         ; xstrtoumax+217↓j ...
.text:000000000000891D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000008922                 xor     rdi, fs:28h
.text:000000000000892B                 mov     eax, ebp
.text:000000000000892D                 jnz     loc_8BC0
.text:0000000000008933                 add     rsp, 28h
.text:0000000000008937                 pop     rbx
.text:0000000000008938                 pop     rbp
.text:0000000000008939                 pop     r12
.text:000000000000893B                 pop     r13
.text:000000000000893D                 pop     r14
.text:000000000000893F                 pop     r15
.text:0000000000008941                 retn
.text:0000000000008941 ; ---------------------------------------------------------------------------
.text:0000000000008942                 align 8
.text:0000000000008948
.text:0000000000008948 loc_8948:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000008948                 xor     ebp, ebp
.text:000000000000894A                 jmp     short loc_88F0
.text:000000000000894A ; ---------------------------------------------------------------------------
.text:000000000000894C                 align 10h
.text:0000000000008950
.text:0000000000008950 loc_8950:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000008950                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000008955                 test    r12b, r12b
.text:0000000000008958                 jz      short loc_8918
.text:000000000000895A                 movsx   esi, r12b       ; c
.text:000000000000895E                 mov     rdi, r13        ; s
.text:0000000000008961                 xor     ebp, ebp
.text:0000000000008963                 call    _strchr
.text:0000000000008968                 test    rax, rax
.text:000000000000896B                 mov     ebx, 1
.text:0000000000008970                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008975                 jz      short loc_8918
.text:0000000000008977
.text:0000000000008977 loc_8977:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000008977                 movsx   esi, r12b       ; c
.text:000000000000897B                 mov     rdi, r13        ; s
.text:000000000000897E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008983                 call    _strchr
.text:0000000000008988                 test    rax, rax
.text:000000000000898B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008990                 jz      def_8A16        ; jumptable 0000000000008A16 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008996                 lea     eax, [r12-45h]
.text:000000000000899B                 cmp     al, 2Fh ; '/'
.text:000000000000899D                 ja      short loc_89F0
.text:000000000000899F                 mov     rdx, 814400308945h
.text:00000000000089A9                 bt      rdx, rax
.text:00000000000089AD                 jnb     short loc_89F0
.text:00000000000089AF                 mov     esi, 30h ; '0'  ; c
.text:00000000000089B4                 mov     rdi, r13        ; s
.text:00000000000089B7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000089BC                 call    _strchr
.text:00000000000089C1                 test    rax, rax
.text:00000000000089C4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000089C9                 jz      short loc_89F0
.text:00000000000089CB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000089CF                 cmp     al, 44h ; 'D'
.text:00000000000089D1                 jz      short loc_89DF
.text:00000000000089D3                 cmp     al, 69h ; 'i'
.text:00000000000089D5                 jz      loc_8BA8
.text:00000000000089DB                 cmp     al, 42h ; 'B'
.text:00000000000089DD                 jnz     short loc_89F0
.text:00000000000089DF
.text:00000000000089DF loc_89DF:                               ; CODE XREF: xstrtoumax+191↑j
.text:00000000000089DF                 mov     edi, 2
.text:00000000000089E4                 mov     esi, 3E8h
.text:00000000000089E9                 jmp     short loc_89FA
.text:00000000000089E9 ; ---------------------------------------------------------------------------
.text:00000000000089EB                 align 10h
.text:00000000000089F0
.text:00000000000089F0 loc_89F0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:00000000000089F0                                         ; xstrtoumax+16D↑j ...
.text:00000000000089F0                 mov     edi, 1
.text:00000000000089F5                 mov     esi, 400h
.text:00000000000089FA
.text:00000000000089FA loc_89FA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:00000000000089FA                                         ; xstrtoumax+37B↓j
.text:00000000000089FA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000089FE                 cmp     r12b, 35h
.text:0000000000008A02                 ja      short def_8A16  ; jumptable 0000000000008A16 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008A04                 lea     rdx, jpt_8A16
.text:0000000000008A0B                 movzx   r12d, r12b
.text:0000000000008A0F                 movsxd  rax, ds:(jpt_8A16 - 0E488h)[rdx+r12*4]
.text:0000000000008A13                 add     rax, rdx
.text:0000000000008A16                 jmp     rax             ; switch jump
.text:0000000000008A18 ; ---------------------------------------------------------------------------
.text:0000000000008A18
.text:0000000000008A18 loc_8A18:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A18                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008A18                 mov     rax, rbx        ; jumptable 0000000000008A16 cases 77,109
.text:0000000000008A1B                 mul     rsi
.text:0000000000008A1E                 jo      loc_8C11
.text:0000000000008A24                 xor     r8d, r8d
.text:0000000000008A27
.text:0000000000008A27 loc_8A27:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000008A27                                         ; xstrtoumax+35E↓j ...
.text:0000000000008A27                 mul     rsi
.text:0000000000008A2A                 jo      loc_8C02
.text:0000000000008A30                 mov     rbx, rax
.text:0000000000008A33
.text:0000000000008A33 loc_8A33:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000008A33                 or      ebp, r8d
.text:0000000000008A36                 db      2Eh
.text:0000000000008A36                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008A40
.text:0000000000008A40 loc_8A40:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A40                                         ; xstrtoumax+23B↓j ...
.text:0000000000008A40                 movsxd  rdi, edi        ; jumptable 0000000000008A16 case 99
.text:0000000000008A43                 mov     eax, ebp
.text:0000000000008A45                 add     rcx, rdi
.text:0000000000008A48                 or      eax, 2
.text:0000000000008A4B                 mov     [r15], rcx
.text:0000000000008A4E                 cmp     byte ptr [rcx], 0
.text:0000000000008A51                 mov     [r14], rbx
.text:0000000000008A54                 cmovnz  ebp, eax
.text:0000000000008A57                 jmp     loc_891D
.text:0000000000008A5C ; ---------------------------------------------------------------------------
.text:0000000000008A5C
.text:0000000000008A5C def_8A16:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000008A5C                                         ; xstrtoumax+1C2↑j ...
.text:0000000000008A5C                 mov     [r14], rbx      ; jumptable 0000000000008A16 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008A5F                 or      ebp, 2
.text:0000000000008A62                 jmp     loc_891D
.text:0000000000008A67 ; ---------------------------------------------------------------------------
.text:0000000000008A67
.text:0000000000008A67 loc_8A67:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A67                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008A67                 mov     edx, 2          ; jumptable 0000000000008A16 case 119
.text:0000000000008A6C                 mov     rax, rdx
.text:0000000000008A6F                 mul     rbx
.text:0000000000008A72                 jo      loc_8B0E
.text:0000000000008A78                 add     rbx, rbx
.text:0000000000008A7B                 jmp     short loc_8A40  ; jumptable 0000000000008A16 case 99
.text:0000000000008A7D ; ---------------------------------------------------------------------------
.text:0000000000008A7D
.text:0000000000008A7D loc_8A7D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A7D                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008A7D                 mov     edx, 200h       ; jumptable 0000000000008A16 case 98
.text:0000000000008A82                 mov     rax, rdx
.text:0000000000008A85                 mul     rbx
.text:0000000000008A88                 jo      loc_8B0E
.text:0000000000008A8E                 shl     rbx, 9
.text:0000000000008A92                 jmp     short loc_8A40  ; jumptable 0000000000008A16 case 99
.text:0000000000008A94 ; ---------------------------------------------------------------------------
.text:0000000000008A94
.text:0000000000008A94 loc_8A94:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A94                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008A94                 mov     r8d, 7          ; jumptable 0000000000008A16 case 90
.text:0000000000008A9A                 xor     r9d, r9d
.text:0000000000008A9D                 nop     dword ptr [rax]
.text:0000000000008AA0
.text:0000000000008AA0 loc_8AA0:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008AA0                 mov     rax, rbx
.text:0000000000008AA3                 mul     rsi
.text:0000000000008AA6                 mov     rbx, rax
.text:0000000000008AA9                 jo      loc_8C3E
.text:0000000000008AAF
.text:0000000000008AAF loc_8AAF:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000008AAF                 sub     r8d, 1
.text:0000000000008AB3                 jnz     short loc_8AA0
.text:0000000000008AB5
.text:0000000000008AB5 loc_8AB5:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008AB5                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008AB5                 or      ebp, r9d
.text:0000000000008AB8                 jmp     short loc_8A40  ; jumptable 0000000000008A16 case 99
.text:0000000000008ABA ; ---------------------------------------------------------------------------
.text:0000000000008ABA
.text:0000000000008ABA loc_8ABA:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008ABA                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008ABA                 mov     r8d, 8          ; jumptable 0000000000008A16 case 89
.text:0000000000008AC0                 xor     r9d, r9d
.text:0000000000008AC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000008AC8
.text:0000000000008AC8 loc_8AC8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000008AC8                 mov     rax, rbx
.text:0000000000008ACB                 mul     rsi
.text:0000000000008ACE                 mov     rbx, rax
.text:0000000000008AD1                 jo      loc_8C20
.text:0000000000008AD7
.text:0000000000008AD7 loc_8AD7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000008AD7                 sub     r8d, 1
.text:0000000000008ADB                 jnz     short loc_8AC8
.text:0000000000008ADD                 jmp     short loc_8AB5
.text:0000000000008ADF ; ---------------------------------------------------------------------------
.text:0000000000008ADF
.text:0000000000008ADF loc_8ADF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008ADF                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008ADF                 mov     r8d, 4          ; jumptable 0000000000008A16 cases 84,116
.text:0000000000008AE5                 xor     r9d, r9d
.text:0000000000008AE8
.text:0000000000008AE8 loc_8AE8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000008AE8                 mov     rax, rbx
.text:0000000000008AEB                 mul     rsi
.text:0000000000008AEE                 mov     rbx, rax
.text:0000000000008AF1                 jo      loc_8BF3
.text:0000000000008AF7
.text:0000000000008AF7 loc_8AF7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000008AF7                 sub     r8d, 1
.text:0000000000008AFB                 jnz     short loc_8AE8
.text:0000000000008AFD                 jmp     short loc_8AB5
.text:0000000000008AFF ; ---------------------------------------------------------------------------
.text:0000000000008AFF
.text:0000000000008AFF loc_8AFF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008AFF                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008AFF                 mov     rax, rbx        ; jumptable 0000000000008A16 cases 75,107
.text:0000000000008B02                 mul     rsi
.text:0000000000008B05                 mov     rbx, rax
.text:0000000000008B08                 jno     loc_8A40        ; jumptable 0000000000008A16 case 99
.text:0000000000008B0E
.text:0000000000008B0E loc_8B0E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000008B0E                                         ; xstrtoumax+248↑j ...
.text:0000000000008B0E                 mov     ebp, 1
.text:0000000000008B13                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B17                 jmp     loc_8A40        ; jumptable 0000000000008A16 case 99
.text:0000000000008B17 ; ---------------------------------------------------------------------------
.text:0000000000008B1C                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008B20                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008B20                 mov     r8d, 5          ; jumptable 0000000000008A16 case 80
.text:0000000000008B26                 xor     r9d, r9d
.text:0000000000008B29
.text:0000000000008B29 loc_8B29:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000008B29                 mov     rax, rbx
.text:0000000000008B2C                 mul     rsi
.text:0000000000008B2F                 mov     rbx, rax
.text:0000000000008B32                 jo      loc_8C2F
.text:0000000000008B38
.text:0000000000008B38 loc_8B38:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000008B38                 sub     r8d, 1
.text:0000000000008B3C                 jnz     short loc_8B29
.text:0000000000008B3E                 jmp     loc_8AB5
.text:0000000000008B43 ; ---------------------------------------------------------------------------
.text:0000000000008B43
.text:0000000000008B43 loc_8B43:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008B43                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008B43                 mov     r8d, 6          ; jumptable 0000000000008A16 case 69
.text:0000000000008B49                 xor     r9d, r9d
.text:0000000000008B4C
.text:0000000000008B4C loc_8B4C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000008B4C                 mov     rax, rbx
.text:0000000000008B4F                 mul     rsi
.text:0000000000008B52                 mov     rbx, rax
.text:0000000000008B55                 jo      loc_8BE4
.text:0000000000008B5B
.text:0000000000008B5B loc_8B5B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000008B5B                 sub     r8d, 1
.text:0000000000008B5F                 jnz     short loc_8B4C
.text:0000000000008B61                 jmp     loc_8AB5
.text:0000000000008B66 ; ---------------------------------------------------------------------------
.text:0000000000008B66
.text:0000000000008B66 loc_8B66:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008B66                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008B66                 mov     edx, 400h       ; jumptable 0000000000008A16 case 66
.text:0000000000008B6B                 mov     rax, rdx
.text:0000000000008B6E                 mul     rbx
.text:0000000000008B71                 jo      short loc_8B0E
.text:0000000000008B73                 shl     rbx, 0Ah
.text:0000000000008B77                 jmp     loc_8A40        ; jumptable 0000000000008A16 case 99
.text:0000000000008B7C ; ---------------------------------------------------------------------------
.text:0000000000008B7C
.text:0000000000008B7C loc_8B7C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008B7C                                         ; DATA XREF: .rodata:jpt_8A16↓o
.text:0000000000008B7C                 mov     rax, rbx        ; jumptable 0000000000008A16 cases 71,103
.text:0000000000008B7F                 mul     rsi
.text:0000000000008B82                 jo      loc_8C4D
.text:0000000000008B88                 xor     r8d, r8d
.text:0000000000008B8B
.text:0000000000008B8B loc_8B8B:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000008B8B                 mul     rsi
.text:0000000000008B8E                 jno     loc_8A27
.text:0000000000008B94                 mov     r8d, 1
.text:0000000000008B9A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B9E                 jmp     loc_8A27
.text:0000000000008B9E ; ---------------------------------------------------------------------------
.text:0000000000008BA3                 align 8
.text:0000000000008BA8
.text:0000000000008BA8 loc_8BA8:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000008BA8                 xor     edi, edi
.text:0000000000008BAA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000008BAE                 mov     esi, 400h
.text:0000000000008BB3                 setz    dil
.text:0000000000008BB7                 lea     edi, [rdi+rdi+1]
.text:0000000000008BBB                 jmp     loc_89FA
.text:0000000000008BC0 ; ---------------------------------------------------------------------------
.text:0000000000008BC0
.text:0000000000008BC0 loc_8BC0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000008BC0                 call    ___stack_chk_fail
.text:0000000000008BC5 ; ---------------------------------------------------------------------------
.text:0000000000008BC5
.text:0000000000008BC5 loc_8BC5:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000008BC5                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:0000000000008BCC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008BD3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000008BDA                 mov     edx, 54h ; 'T'  ; line
.text:0000000000008BDF                 call    ___assert_fail
.text:0000000000008BE4 ; ---------------------------------------------------------------------------
.text:0000000000008BE4
.text:0000000000008BE4 loc_8BE4:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000008BE4                 mov     r9d, 1
.text:0000000000008BEA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BEE                 jmp     loc_8B5B
.text:0000000000008BF3 ; ---------------------------------------------------------------------------
.text:0000000000008BF3
.text:0000000000008BF3 loc_8BF3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000008BF3                 mov     r9d, 1
.text:0000000000008BF9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BFD                 jmp     loc_8AF7
.text:0000000000008C02 ; ---------------------------------------------------------------------------
.text:0000000000008C02
.text:0000000000008C02 loc_8C02:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000008C02                 mov     r8d, 1
.text:0000000000008C08                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C0C                 jmp     loc_8A33
.text:0000000000008C11 ; ---------------------------------------------------------------------------
.text:0000000000008C11
.text:0000000000008C11 loc_8C11:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000008C11                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C15                 mov     r8d, 1
.text:0000000000008C1B                 jmp     loc_8A27
.text:0000000000008C20 ; ---------------------------------------------------------------------------
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000008C20                 mov     r9d, 1
.text:0000000000008C26                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C2A                 jmp     loc_8AD7
.text:0000000000008C2F ; ---------------------------------------------------------------------------
.text:0000000000008C2F
.text:0000000000008C2F loc_8C2F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000008C2F                 mov     r9d, 1
.text:0000000000008C35                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C39                 jmp     loc_8B38
.text:0000000000008C3E ; ---------------------------------------------------------------------------
.text:0000000000008C3E
.text:0000000000008C3E loc_8C3E:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000008C3E                 mov     r9d, 1
.text:0000000000008C44                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C48                 jmp     loc_8AAF
.text:0000000000008C4D ; ---------------------------------------------------------------------------
.text:0000000000008C4D
.text:0000000000008C4D loc_8C4D:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000008C4D                 mov     r8d, 1
.text:0000000000008C53                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C57                 jmp     loc_8B8B
.text:0000000000008C57 ; } // starts at 8840
.text:0000000000008C57 xstrtoumax      endp
.text:0000000000008C57
.text:0000000000008C57 ; ---------------------------------------------------------------------------
.text:0000000000008C5C                 align 20h
.text:0000000000008C60
.text:0000000000008C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C60
.text:0000000000008C60
.text:0000000000008C60 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000008C60                 public rpl_fcntl
.text:0000000000008C60 rpl_fcntl       proc near               ; CODE XREF: main+288↑p
.text:0000000000008C60                                         ; main+2A4↑p
.text:0000000000008C60
.text:0000000000008C60 var_68          = dword ptr -68h
.text:0000000000008C60 var_60          = qword ptr -60h
.text:0000000000008C60 var_58          = qword ptr -58h
.text:0000000000008C60 var_50          = qword ptr -50h
.text:0000000000008C60 var_48          = byte ptr -48h
.text:0000000000008C60 var_38          = qword ptr -38h
.text:0000000000008C60 var_30          = qword ptr -30h
.text:0000000000008C60 var_28          = qword ptr -28h
.text:0000000000008C60 var_20          = qword ptr -20h
.text:0000000000008C60 arg_0           = byte ptr  8
.text:0000000000008C60
.text:0000000000008C60 ; __unwind {
.text:0000000000008C60                 push    r12
.text:0000000000008C62                 push    rbp
.text:0000000000008C63                 mov     ebp, edi
.text:0000000000008C65                 push    rbx
.text:0000000000008C66                 sub     rsp, 50h
.text:0000000000008C6A                 mov     rax, fs:28h
.text:0000000000008C73                 mov     [rsp+68h+var_50], rax
.text:0000000000008C78                 xor     eax, eax
.text:0000000000008C7A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000008C7F                 test    esi, esi
.text:0000000000008C81                 mov     [rsp+68h+var_38], rdx
.text:0000000000008C86                 mov     [rsp+68h+var_30], rcx
.text:0000000000008C8B                 mov     [rsp+68h+var_28], r8
.text:0000000000008C90                 mov     [rsp+68h+var_60], rax
.text:0000000000008C95                 lea     rax, [rsp+68h+var_48]
.text:0000000000008C9A                 mov     [rsp+68h+var_20], r9
.text:0000000000008C9F                 mov     [rsp+68h+var_68], 10h
.text:0000000000008CA6                 mov     [rsp+68h+var_58], rax
.text:0000000000008CAB                 jz      loc_8EB2
.text:0000000000008CB1                 cmp     esi, 406h
.text:0000000000008CB7                 jnz     short loc_8D00
.text:0000000000008CB9                 mov     rax, [rsp+68h+var_58]
.text:0000000000008CBE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000008CC5                 mov     [rsp+68h+var_68], 18h
.text:0000000000008CCC                 mov     r12d, [rax+10h]
.text:0000000000008CD0                 mov     edx, r12d
.text:0000000000008CD3                 js      loc_8E03
.text:0000000000008CD9                 xor     eax, eax
.text:0000000000008CDB                 mov     esi, 406h       ; cmd
.text:0000000000008CE0                 call    _fcntl
.text:0000000000008CE5                 test    eax, eax
.text:0000000000008CE7                 mov     ebx, eax
.text:0000000000008CE9                 js      loc_8E78
.text:0000000000008CEF
.text:0000000000008CEF loc_8CEF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000008CEF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000008CF9                 jmp     short loc_8D40
.text:0000000000008CF9 ; ---------------------------------------------------------------------------
.text:0000000000008CFB                 align 20h
.text:0000000000008D00
.text:0000000000008D00 loc_8D00:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000008D00                 cmp     esi, 0Bh
.text:0000000000008D03                 jz      short loc_8D30
.text:0000000000008D05                 jg      short loc_8D60
.text:0000000000008D07                 cmp     esi, 4
.text:0000000000008D0A                 jz      loc_8DE0
.text:0000000000008D10                 jg      loc_8DD0
.text:0000000000008D16                 cmp     esi, 2
.text:0000000000008D19                 jz      loc_8DE0
.text:0000000000008D1F                 jg      short loc_8D30
.text:0000000000008D21                 cmp     esi, 1
.text:0000000000008D24                 jnz     short loc_8D88
.text:0000000000008D26                 db      2Eh
.text:0000000000008D26                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000008D30                                         ; rpl_fcntl+BF↑j ...
.text:0000000000008D30                 mov     edi, ebp        ; fd
.text:0000000000008D32                 xor     eax, eax
.text:0000000000008D34                 call    _fcntl
.text:0000000000008D39                 mov     ebx, eax
.text:0000000000008D3B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000008D40                                         ; rpl_fcntl+147↓j ...
.text:0000000000008D40                 mov     rcx, [rsp+68h+var_50]
.text:0000000000008D45                 xor     rcx, fs:28h
.text:0000000000008D4E                 mov     eax, ebx
.text:0000000000008D50                 jnz     loc_8EAD
.text:0000000000008D56                 add     rsp, 50h
.text:0000000000008D5A                 pop     rbx
.text:0000000000008D5B                 pop     rbp
.text:0000000000008D5C                 pop     r12
.text:0000000000008D5E                 retn
.text:0000000000008D5E ; ---------------------------------------------------------------------------
.text:0000000000008D5F                 align 20h
.text:0000000000008D60
.text:0000000000008D60 loc_8D60:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000008D60                 cmp     esi, 407h
.text:0000000000008D66                 jg      short loc_8DB0
.text:0000000000008D68                 cmp     esi, 406h
.text:0000000000008D6E                 jge     short loc_8DE0
.text:0000000000008D70                 cmp     esi, 401h
.text:0000000000008D76                 jz      short loc_8D30
.text:0000000000008D78                 cmp     esi, 402h
.text:0000000000008D7E                 jz      short loc_8DE0
.text:0000000000008D80                 cmp     esi, 400h
.text:0000000000008D86                 jz      short loc_8DE0
.text:0000000000008D88
.text:0000000000008D88 loc_8D88:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000008D88                                         ; rpl_fcntl+164↓j ...
.text:0000000000008D88                 mov     eax, [rsp+68h+var_68]
.text:0000000000008D8B                 cmp     eax, 2Fh ; '/'
.text:0000000000008D8E                 ja      loc_8ECA
.text:0000000000008D94                 add     rax, [rsp+68h+var_58]
.text:0000000000008D99
.text:0000000000008D99 loc_8D99:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000008D99                 mov     rdx, [rax]
.text:0000000000008D9C                 mov     edi, ebp        ; fd
.text:0000000000008D9E                 xor     eax, eax
.text:0000000000008DA0                 call    _fcntl
.text:0000000000008DA5                 mov     ebx, eax
.text:0000000000008DA7                 jmp     short loc_8D40
.text:0000000000008DA7 ; ---------------------------------------------------------------------------
.text:0000000000008DA9                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 loc_8DB0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000008DB0                 cmp     esi, 409h
.text:0000000000008DB6                 jz      short loc_8DE0
.text:0000000000008DB8                 jl      loc_8D30
.text:0000000000008DBE                 cmp     esi, 40Ah
.text:0000000000008DC4                 jnz     short loc_8D88
.text:0000000000008DC6                 jmp     loc_8D30
.text:0000000000008DC6 ; ---------------------------------------------------------------------------
.text:0000000000008DCB                 align 10h
.text:0000000000008DD0
.text:0000000000008DD0 loc_8DD0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000008DD0                 cmp     esi, 9
.text:0000000000008DD3                 jz      loc_8D30
.text:0000000000008DD9                 jg      short loc_8DE0
.text:0000000000008DDB                 cmp     esi, 8
.text:0000000000008DDE                 jnz     short loc_8D88
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000008DE0                                         ; rpl_fcntl+B9↑j ...
.text:0000000000008DE0                 mov     eax, [rsp+68h+var_68]
.text:0000000000008DE3                 cmp     eax, 2Fh ; '/'
.text:0000000000008DE6                 ja      loc_8ED4
.text:0000000000008DEC                 add     rax, [rsp+68h+var_58]
.text:0000000000008DF1
.text:0000000000008DF1 loc_8DF1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000008DF1                 mov     edx, [rax]
.text:0000000000008DF3                 mov     edi, ebp        ; fd
.text:0000000000008DF5                 xor     eax, eax
.text:0000000000008DF7                 call    _fcntl
.text:0000000000008DFC                 mov     ebx, eax
.text:0000000000008DFE                 jmp     loc_8D40
.text:0000000000008E03 ; ---------------------------------------------------------------------------
.text:0000000000008E03
.text:0000000000008E03 loc_8E03:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000008E03                 xor     esi, esi        ; cmd
.text:0000000000008E05                 xor     eax, eax
.text:0000000000008E07                 call    _fcntl
.text:0000000000008E0C                 test    eax, eax
.text:0000000000008E0E                 mov     ebx, eax
.text:0000000000008E10                 js      loc_8D40
.text:0000000000008E16                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000008E1D                 jnz     loc_8D40
.text:0000000000008E23
.text:0000000000008E23 loc_8E23:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000008E23                 xor     eax, eax
.text:0000000000008E25                 mov     esi, 1          ; cmd
.text:0000000000008E2A                 mov     edi, ebx        ; fd
.text:0000000000008E2C                 call    _fcntl
.text:0000000000008E31                 test    eax, eax
.text:0000000000008E33                 js      short loc_8E51
.text:0000000000008E35                 or      eax, 1
.text:0000000000008E38                 mov     esi, 2          ; cmd
.text:0000000000008E3D                 mov     edi, ebx        ; fd
.text:0000000000008E3F                 mov     edx, eax
.text:0000000000008E41                 xor     eax, eax
.text:0000000000008E43                 call    _fcntl
.text:0000000000008E48                 cmp     eax, 0FFFFFFFFh
.text:0000000000008E4B                 jnz     loc_8D40
.text:0000000000008E51
.text:0000000000008E51 loc_8E51:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000008E51                 call    ___errno_location
.text:0000000000008E56                 mov     r12d, [rax]
.text:0000000000008E59                 mov     rbp, rax
.text:0000000000008E5C                 mov     edi, ebx        ; fd
.text:0000000000008E5E                 call    _close
.text:0000000000008E63                 mov     ebx, 0FFFFFFFFh
.text:0000000000008E68                 mov     [rbp+0], r12d
.text:0000000000008E6C                 jmp     loc_8D40
.text:0000000000008E6C ; ---------------------------------------------------------------------------
.text:0000000000008E71                 align 8
.text:0000000000008E78
.text:0000000000008E78 loc_8E78:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000008E78                 call    ___errno_location
.text:0000000000008E7D                 cmp     dword ptr [rax], 16h
.text:0000000000008E80                 jnz     loc_8CEF
.text:0000000000008E86                 xor     esi, esi        ; cmd
.text:0000000000008E88                 xor     eax, eax
.text:0000000000008E8A                 mov     edx, r12d
.text:0000000000008E8D                 mov     edi, ebp        ; fd
.text:0000000000008E8F                 call    _fcntl
.text:0000000000008E94                 test    eax, eax
.text:0000000000008E96                 mov     ebx, eax
.text:0000000000008E98                 js      loc_8D40
.text:0000000000008E9E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000008EA8                 jmp     loc_8E23
.text:0000000000008EAD ; ---------------------------------------------------------------------------
.text:0000000000008EAD
.text:0000000000008EAD loc_8EAD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000008EAD                 call    ___stack_chk_fail
.text:0000000000008EB2 ; ---------------------------------------------------------------------------
.text:0000000000008EB2
.text:0000000000008EB2 loc_8EB2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000008EB2                 mov     rax, [rsp+68h+var_58]
.text:0000000000008EB7                 xor     esi, esi        ; cmd
.text:0000000000008EB9                 mov     edx, [rax+10h]
.text:0000000000008EBC                 xor     eax, eax
.text:0000000000008EBE                 call    _fcntl
.text:0000000000008EC3                 mov     ebx, eax
.text:0000000000008EC5                 jmp     loc_8D40
.text:0000000000008ECA ; ---------------------------------------------------------------------------
.text:0000000000008ECA
.text:0000000000008ECA loc_8ECA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000008ECA                 mov     rax, [rsp+68h+var_60]
.text:0000000000008ECF                 jmp     loc_8D99
.text:0000000000008ED4 ; ---------------------------------------------------------------------------
.text:0000000000008ED4
.text:0000000000008ED4 loc_8ED4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000008ED4                 mov     rax, [rsp+68h+var_60]
.text:0000000000008ED9                 jmp     loc_8DF1
.text:0000000000008ED9 ; } // starts at 8C60
.text:0000000000008ED9 rpl_fcntl       endp
.text:0000000000008ED9
.text:0000000000008ED9 ; ---------------------------------------------------------------------------
.text:0000000000008EDE                 align 20h
.text:0000000000008EE0
.text:0000000000008EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EE0
.text:0000000000008EE0 ; Attributes: info_from_lumina
.text:0000000000008EE0
.text:0000000000008EE0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008EE0                 public rpl_mbrtowc
.text:0000000000008EE0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008EE0
.text:0000000000008EE0 pwc             = dword ptr -34h
.text:0000000000008EE0 var_30          = qword ptr -30h
.text:0000000000008EE0
.text:0000000000008EE0 ; __unwind {
.text:0000000000008EE0                 push    r13
.text:0000000000008EE2                 push    r12
.text:0000000000008EE4                 mov     r13, rsi
.text:0000000000008EE7                 push    rbp
.text:0000000000008EE8                 push    rbx
.text:0000000000008EE9                 mov     rbx, rdi
.text:0000000000008EEC                 mov     r12, rdx
.text:0000000000008EEF                 sub     rsp, 18h
.text:0000000000008EF3                 mov     rax, fs:28h
.text:0000000000008EFC                 mov     [rsp+38h+var_30], rax
.text:0000000000008F01                 xor     eax, eax
.text:0000000000008F03                 lea     rax, [rsp+38h+pwc]
.text:0000000000008F08                 test    rdi, rdi
.text:0000000000008F0B                 cmovz   rbx, rax
.text:0000000000008F0F                 mov     rdi, rbx        ; pwc
.text:0000000000008F12                 call    _mbrtowc
.text:0000000000008F17                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000008F1B                 mov     rbp, rax
.text:0000000000008F1E                 jbe     short loc_8F40
.text:0000000000008F20                 test    r12, r12
.text:0000000000008F23                 jz      short loc_8F40
.text:0000000000008F25                 xor     edi, edi
.text:0000000000008F27                 call    hard_locale
.text:0000000000008F2C                 test    al, al
.text:0000000000008F2E                 jnz     short loc_8F40
.text:0000000000008F30                 movzx   eax, byte ptr [r13+0]
.text:0000000000008F35                 mov     ebp, 1
.text:0000000000008F3A                 mov     [rbx], eax
.text:0000000000008F3C                 nop     dword ptr [rax+00h]
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008F40                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008F40                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008F45                 xor     rdx, fs:28h
.text:0000000000008F4E                 mov     rax, rbp
.text:0000000000008F51                 jnz     short loc_8F5E
.text:0000000000008F53                 add     rsp, 18h
.text:0000000000008F57                 pop     rbx
.text:0000000000008F58                 pop     rbp
.text:0000000000008F59                 pop     r12
.text:0000000000008F5B                 pop     r13
.text:0000000000008F5D                 retn
.text:0000000000008F5E ; ---------------------------------------------------------------------------
.text:0000000000008F5E
.text:0000000000008F5E loc_8F5E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000008F5E                 call    ___stack_chk_fail
.text:0000000000008F5E ; } // starts at 8EE0
.text:0000000000008F5E rpl_mbrtowc     endp
.text:0000000000008F5E
.text:0000000000008F5E ; ---------------------------------------------------------------------------
.text:0000000000008F63                 align 10h
.text:0000000000008F70
.text:0000000000008F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F70
.text:0000000000008F70 ; Attributes: info_from_lumina
.text:0000000000008F70
.text:0000000000008F70                 public u16_u16_vasprintf
.text:0000000000008F70 u16_u16_vasprintf proc near             ; CODE XREF: wrapf+A6↑p
.text:0000000000008F70
.text:0000000000008F70 var_18          = qword ptr -18h
.text:0000000000008F70 var_10          = qword ptr -10h
.text:0000000000008F70
.text:0000000000008F70 ; __unwind {
.text:0000000000008F70                 push    rbx
.text:0000000000008F71                 mov     rax, rsi
.text:0000000000008F74                 mov     rbx, rdi
.text:0000000000008F77                 xor     edi, edi
.text:0000000000008F79                 sub     rsp, 10h
.text:0000000000008F7D                 mov     rcx, fs:28h
.text:0000000000008F86                 mov     [rsp+18h+var_10], rcx
.text:0000000000008F8B                 xor     ecx, ecx
.text:0000000000008F8D                 mov     rsi, rsp
.text:0000000000008F90                 mov     rcx, rdx
.text:0000000000008F93                 mov     rdx, rax
.text:0000000000008F96                 call    vasnprintf
.text:0000000000008F9B                 test    rax, rax
.text:0000000000008F9E                 jz      short loc_8FE2
.text:0000000000008FA0                 mov     rdx, [rsp+18h+var_18]
.text:0000000000008FA4                 cmp     rdx, 7FFFFFFFh
.text:0000000000008FAB                 ja      short loc_8FC8
.text:0000000000008FAD                 mov     [rbx], rax
.text:0000000000008FB0                 mov     eax, edx
.text:0000000000008FB2
.text:0000000000008FB2 loc_8FB2:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000008FB2                                         ; u16_u16_vasprintf+77↓j
.text:0000000000008FB2                 mov     rbx, [rsp+18h+var_10]
.text:0000000000008FB7                 xor     rbx, fs:28h
.text:0000000000008FC0                 jnz     short loc_8FE9
.text:0000000000008FC2                 add     rsp, 10h
.text:0000000000008FC6                 pop     rbx
.text:0000000000008FC7                 retn
.text:0000000000008FC8 ; ---------------------------------------------------------------------------
.text:0000000000008FC8
.text:0000000000008FC8 loc_8FC8:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000008FC8                 mov     rdi, rax        ; ptr
.text:0000000000008FCB                 call    _free
.text:0000000000008FD0                 call    ___errno_location
.text:0000000000008FD5                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000008FDB                 mov     eax, 0FFFFFFFFh
.text:0000000000008FE0                 jmp     short loc_8FB2
.text:0000000000008FE2 ; ---------------------------------------------------------------------------
.text:0000000000008FE2
.text:0000000000008FE2 loc_8FE2:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:0000000000008FE2                 mov     eax, 0FFFFFFFFh
.text:0000000000008FE7                 jmp     short loc_8FB2
.text:0000000000008FE9 ; ---------------------------------------------------------------------------
.text:0000000000008FE9
.text:0000000000008FE9 loc_8FE9:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:0000000000008FE9                 call    ___stack_chk_fail
.text:0000000000008FE9 ; } // starts at 8F70
.text:0000000000008FE9 u16_u16_vasprintf endp
.text:0000000000008FE9
.text:0000000000008FE9 ; ---------------------------------------------------------------------------
.text:0000000000008FEE                 align 10h
.text:0000000000008FF0
.text:0000000000008FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FF0
.text:0000000000008FF0 ; Attributes: info_from_lumina
.text:0000000000008FF0
.text:0000000000008FF0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000008FF0                 public close_stream
.text:0000000000008FF0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000008FF0                                         ; close_stdout+33↑p
.text:0000000000008FF0 ; __unwind {
.text:0000000000008FF0                 push    r12
.text:0000000000008FF2                 push    rbp
.text:0000000000008FF3                 mov     rbp, rdi
.text:0000000000008FF6                 push    rbx
.text:0000000000008FF7                 call    ___fpending
.text:0000000000008FFC                 mov     ebx, [rbp+0]
.text:0000000000008FFF                 mov     rdi, rbp        ; stream
.text:0000000000009002                 mov     r12, rax
.text:0000000000009005                 call    rpl_fclose
.text:000000000000900A                 and     ebx, 20h
.text:000000000000900D                 test    ebx, ebx
.text:000000000000900F                 jnz     short loc_9028
.text:0000000000009011                 test    eax, eax
.text:0000000000009013                 jz      short loc_901F
.text:0000000000009015                 test    r12, r12
.text:0000000000009018                 mov     eax, 0FFFFFFFFh
.text:000000000000901D                 jz      short loc_9058
.text:000000000000901F
.text:000000000000901F loc_901F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000901F                 pop     rbx
.text:0000000000009020                 pop     rbp
.text:0000000000009021                 pop     r12
.text:0000000000009023                 retn
.text:0000000000009023 ; ---------------------------------------------------------------------------
.text:0000000000009024                 align 8
.text:0000000000009028
.text:0000000000009028 loc_9028:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000009028                 test    eax, eax
.text:000000000000902A                 jnz     short loc_9048
.text:000000000000902C                 call    ___errno_location
.text:0000000000009031                 mov     dword ptr [rax], 0
.text:0000000000009037                 mov     eax, 0FFFFFFFFh
.text:000000000000903C                 pop     rbx
.text:000000000000903D                 pop     rbp
.text:000000000000903E                 pop     r12
.text:0000000000009040                 retn
.text:0000000000009040 ; ---------------------------------------------------------------------------
.text:0000000000009041                 align 8
.text:0000000000009048
.text:0000000000009048 loc_9048:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000009048                 pop     rbx
.text:0000000000009049                 mov     eax, 0FFFFFFFFh
.text:000000000000904E                 pop     rbp
.text:000000000000904F                 pop     r12
.text:0000000000009051                 retn
.text:0000000000009051 ; ---------------------------------------------------------------------------
.text:0000000000009052                 align 8
.text:0000000000009058
.text:0000000000009058 loc_9058:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000009058                 call    ___errno_location
.text:000000000000905D                 cmp     dword ptr [rax], 9
.text:0000000000009060                 pop     rbx
.text:0000000000009061                 pop     rbp
.text:0000000000009062                 pop     r12
.text:0000000000009064                 setnz   al
.text:0000000000009067                 movzx   eax, al
.text:000000000000906A                 neg     eax
.text:000000000000906C                 retn
.text:000000000000906C ; } // starts at 8FF0
.text:000000000000906C close_stream    endp
.text:000000000000906C
.text:000000000000906C ; ---------------------------------------------------------------------------
.text:000000000000906D                 align 10h
.text:0000000000009070
.text:0000000000009070 ; =============== S U B R O U T I N E =======================================
.text:0000000000009070
.text:0000000000009070
.text:0000000000009070                 public hard_locale
.text:0000000000009070 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000009070 ; __unwind {
.text:0000000000009070                 sub     rsp, 8
.text:0000000000009074                 xor     esi, esi        ; locale
.text:0000000000009076                 call    _setlocale
.text:000000000000907B                 mov     rdx, rax
.text:000000000000907E                 mov     eax, 1
.text:0000000000009083                 test    rdx, rdx
.text:0000000000009086                 jz      short loc_90A5
.text:0000000000009088                 lea     rdi, aC         ; "C"
.text:000000000000908F                 mov     ecx, 2
.text:0000000000009094                 mov     rsi, rdx
.text:0000000000009097                 repe cmpsb
.text:0000000000009099                 setnbe  cl
.text:000000000000909C                 sbb     cl, 0
.text:000000000000909F                 xor     eax, eax
.text:00000000000090A1                 test    cl, cl
.text:00000000000090A3                 jnz     short loc_90B0
.text:00000000000090A5
.text:00000000000090A5 loc_90A5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000090A5                 add     rsp, 8
.text:00000000000090A9                 retn
.text:00000000000090A9 ; ---------------------------------------------------------------------------
.text:00000000000090AA                 align 10h
.text:00000000000090B0
.text:00000000000090B0 loc_90B0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000090B0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000090B7                 mov     ecx, 6
.text:00000000000090BC                 mov     rsi, rdx
.text:00000000000090BF                 repe cmpsb
.text:00000000000090C1                 setnbe  al
.text:00000000000090C4                 sbb     al, 0
.text:00000000000090C6                 test    al, al
.text:00000000000090C8                 setnz   al
.text:00000000000090CB                 add     rsp, 8
.text:00000000000090CF                 retn
.text:00000000000090CF ; } // starts at 9070
.text:00000000000090CF hard_locale     endp
.text:00000000000090CF
.text:00000000000090D0
.text:00000000000090D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090D0
.text:00000000000090D0
.text:00000000000090D0                 public locale_charset
.text:00000000000090D0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000090D0 ; __unwind {
.text:00000000000090D0                 sub     rsp, 8
.text:00000000000090D4                 mov     edi, 0Eh        ; item
.text:00000000000090D9                 call    _nl_langinfo
.text:00000000000090DE                 test    rax, rax
.text:00000000000090E1                 jz      short loc_9100
.text:00000000000090E3                 cmp     byte ptr [rax], 0
.text:00000000000090E6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000090ED                 cmovz   rax, rdx
.text:00000000000090F1                 add     rsp, 8
.text:00000000000090F5                 retn
.text:00000000000090F5 ; ---------------------------------------------------------------------------
.text:00000000000090F6                 align 20h
.text:0000000000009100
.text:0000000000009100 loc_9100:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009100                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009107                 add     rsp, 8
.text:000000000000910B                 retn
.text:000000000000910B ; } // starts at 90D0
.text:000000000000910B locale_charset  endp
.text:000000000000910B
.text:000000000000910B ; ---------------------------------------------------------------------------
.text:000000000000910C                 align 10h
.text:0000000000009110
.text:0000000000009110 ; =============== S U B R O U T I N E =======================================
.text:0000000000009110
.text:0000000000009110 ; Attributes: info_from_lumina
.text:0000000000009110
.text:0000000000009110 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000009110                 public rpl_fclose
.text:0000000000009110 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000009110 ; __unwind {
.text:0000000000009110                 push    r12
.text:0000000000009112                 push    rbp
.text:0000000000009113                 push    rbx
.text:0000000000009114                 mov     rbx, rdi
.text:0000000000009117                 call    _fileno
.text:000000000000911C                 test    eax, eax
.text:000000000000911E                 mov     rdi, rbx        ; fp
.text:0000000000009121                 js      short loc_9177
.text:0000000000009123                 call    ___freading
.text:0000000000009128                 test    eax, eax
.text:000000000000912A                 jnz     short loc_9158
.text:000000000000912C
.text:000000000000912C loc_912C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000912C                 mov     rdi, rbx        ; stream
.text:000000000000912F                 call    rpl_fflush
.text:0000000000009134                 test    eax, eax
.text:0000000000009136                 jz      short loc_9174
.text:0000000000009138                 call    ___errno_location
.text:000000000000913D                 mov     r12d, [rax]
.text:0000000000009140                 mov     rdi, rbx        ; stream
.text:0000000000009143                 mov     rbp, rax
.text:0000000000009146                 call    _fclose
.text:000000000000914B                 test    r12d, r12d
.text:000000000000914E                 jnz     short loc_9180
.text:0000000000009150
.text:0000000000009150 loc_9150:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000009150                 pop     rbx
.text:0000000000009151                 pop     rbp
.text:0000000000009152                 pop     r12
.text:0000000000009154                 retn
.text:0000000000009154 ; ---------------------------------------------------------------------------
.text:0000000000009155                 align 8
.text:0000000000009158
.text:0000000000009158 loc_9158:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000009158                 mov     rdi, rbx        ; stream
.text:000000000000915B                 call    _fileno
.text:0000000000009160                 xor     esi, esi        ; offset
.text:0000000000009162                 mov     edx, 1          ; whence
.text:0000000000009167                 mov     edi, eax        ; fd
.text:0000000000009169                 call    _lseek
.text:000000000000916E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009172                 jnz     short loc_912C
.text:0000000000009174
.text:0000000000009174 loc_9174:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000009174                 mov     rdi, rbx        ; stream
.text:0000000000009177
.text:0000000000009177 loc_9177:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000009177                 pop     rbx
.text:0000000000009178                 pop     rbp
.text:0000000000009179                 pop     r12
.text:000000000000917B                 jmp     _fclose
.text:0000000000009180 ; ---------------------------------------------------------------------------
.text:0000000000009180
.text:0000000000009180 loc_9180:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000009180                 mov     [rbp+0], r12d
.text:0000000000009184                 mov     eax, 0FFFFFFFFh
.text:0000000000009189                 jmp     short loc_9150
.text:0000000000009189 ; } // starts at 9110
.text:0000000000009189 rpl_fclose      endp
.text:0000000000009189
.text:0000000000009189 ; ---------------------------------------------------------------------------
.text:000000000000918B                 align 10h
.text:0000000000009190
.text:0000000000009190 ; =============== S U B R O U T I N E =======================================
.text:0000000000009190
.text:0000000000009190 ; Attributes: info_from_lumina
.text:0000000000009190
.text:0000000000009190 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009190                 public rpl_fflush
.text:0000000000009190 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000009190 ; __unwind {
.text:0000000000009190                 test    rdi, rdi
.text:0000000000009193                 push    rbx
.text:0000000000009194                 mov     rbx, rdi
.text:0000000000009197                 jz      short loc_91AA
.text:0000000000009199                 call    ___freading
.text:000000000000919E                 test    eax, eax
.text:00000000000091A0                 jz      short loc_91AA
.text:00000000000091A2                 test    dword ptr [rbx], 100h
.text:00000000000091A8                 jnz     short loc_91B8
.text:00000000000091AA
.text:00000000000091AA loc_91AA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000091AA                                         ; rpl_fflush+10↑j
.text:00000000000091AA                 mov     rdi, rbx        ; stream
.text:00000000000091AD                 pop     rbx
.text:00000000000091AE                 jmp     _fflush
.text:00000000000091AE ; ---------------------------------------------------------------------------
.text:00000000000091B3                 align 8
.text:00000000000091B8
.text:00000000000091B8 loc_91B8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000091B8                 mov     rdi, rbx
.text:00000000000091BB                 mov     edx, 1
.text:00000000000091C0                 xor     esi, esi
.text:00000000000091C2                 call    rpl_fseeko
.text:00000000000091C7                 mov     rdi, rbx        ; stream
.text:00000000000091CA                 pop     rbx
.text:00000000000091CB                 jmp     _fflush
.text:00000000000091CB ; } // starts at 9190
.text:00000000000091CB rpl_fflush      endp
.text:00000000000091CB
.text:00000000000091D0
.text:00000000000091D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091D0
.text:00000000000091D0 ; Attributes: info_from_lumina
.text:00000000000091D0
.text:00000000000091D0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000091D0                 public rpl_fseeko
.text:00000000000091D0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000091D0 ; __unwind {
.text:00000000000091D0                 mov     rax, [rdi+8]
.text:00000000000091D4                 cmp     [rdi+10h], rax
.text:00000000000091D8                 jz      short loc_91E0
.text:00000000000091DA
.text:00000000000091DA loc_91DA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000091DA                                         ; rpl_fseeko+1F↓j
.text:00000000000091DA                 jmp     _fseeko
.text:00000000000091DA ; ---------------------------------------------------------------------------
.text:00000000000091DF                 align 20h
.text:00000000000091E0
.text:00000000000091E0 loc_91E0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000091E0                 mov     rax, [rdi+20h]
.text:00000000000091E4                 cmp     [rdi+28h], rax
.text:00000000000091E8                 jnz     short loc_91DA
.text:00000000000091EA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000091EF                 jnz     short loc_91DA
.text:00000000000091F1                 push    r12
.text:00000000000091F3                 push    rbp
.text:00000000000091F4                 mov     r12d, edx
.text:00000000000091F7                 push    rbx
.text:00000000000091F8                 mov     rbp, rsi
.text:00000000000091FB                 mov     rbx, rdi
.text:00000000000091FE                 call    _fileno
.text:0000000000009203                 mov     edx, r12d       ; whence
.text:0000000000009206                 mov     rsi, rbp        ; offset
.text:0000000000009209                 mov     edi, eax        ; fd
.text:000000000000920B                 call    _lseek
.text:0000000000009210                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009214                 jz      short loc_9222
.text:0000000000009216                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009219                 mov     [rbx+90h], rax
.text:0000000000009220                 xor     eax, eax
.text:0000000000009222
.text:0000000000009222 loc_9222:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000009222                 pop     rbx
.text:0000000000009223                 pop     rbp
.text:0000000000009224                 pop     r12
.text:0000000000009226                 retn
.text:0000000000009226 ; } // starts at 91D0
.text:0000000000009226 rpl_fseeko      endp
.text:0000000000009226
.text:0000000000009226 ; ---------------------------------------------------------------------------
.text:0000000000009227                 align 10h
.text:0000000000009230
.text:0000000000009230 ; =============== S U B R O U T I N E =======================================
.text:0000000000009230
.text:0000000000009230 ; Attributes: bp-based frame
.text:0000000000009230
.text:0000000000009230                 public vasnprintf
.text:0000000000009230 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:0000000000009230
.text:0000000000009230 var_450         = tbyte ptr -450h
.text:0000000000009230 var_440         = tbyte ptr -440h
.text:0000000000009230 var_430         = qword ptr -430h
.text:0000000000009230 var_421         = byte ptr -421h
.text:0000000000009230 ptr             = qword ptr -420h
.text:0000000000009230 var_418         = qword ptr -418h
.text:0000000000009230 var_410         = qword ptr -410h
.text:0000000000009230 var_408         = qword ptr -408h
.text:0000000000009230 var_400         = qword ptr -400h
.text:0000000000009230 var_3F8         = qword ptr -3F8h
.text:0000000000009230 var_3F0         = qword ptr -3F0h
.text:0000000000009230 src             = qword ptr -3E8h
.text:0000000000009230 var_3E0         = qword ptr -3E0h
.text:0000000000009230 var_3D8         = qword ptr -3D8h
.text:0000000000009230 var_3D0         = qword ptr -3D0h
.text:0000000000009230 n               = qword ptr -3C8h
.text:0000000000009230 var_3BC         = dword ptr -3BCh
.text:0000000000009230 var_3B8         = dword ptr -3B8h
.text:0000000000009230 var_3B4         = dword ptr -3B4h
.text:0000000000009230 var_3B0         = byte ptr -3B0h
.text:0000000000009230 var_3A8         = qword ptr -3A8h
.text:0000000000009230 var_2C0         = qword ptr -2C0h
.text:0000000000009230 var_2B8         = qword ptr -2B8h
.text:0000000000009230 var_2B0         = qword ptr -2B0h
.text:0000000000009230 var_2A8         = qword ptr -2A8h
.text:0000000000009230 var_38          = qword ptr -38h
.text:0000000000009230
.text:0000000000009230 ; __unwind {
.text:0000000000009230                 push    rbp
.text:0000000000009231                 mov     rbp, rsp
.text:0000000000009234                 push    r15
.text:0000000000009236                 push    r14
.text:0000000000009238                 push    r13
.text:000000000000923A                 push    r12
.text:000000000000923C                 lea     r14, [rbp+var_3B0]
.text:0000000000009243                 push    rbx
.text:0000000000009244                 mov     rbx, rdx
.text:0000000000009247                 mov     r12, rcx
.text:000000000000924A                 mov     rdx, r14
.text:000000000000924D                 sub     rsp, 408h
.text:0000000000009254                 mov     [rbp+var_418], rsi
.text:000000000000925B                 lea     rsi, [rbp+var_2C0]
.text:0000000000009262                 mov     [rbp+src], rdi
.text:0000000000009269                 mov     rdi, rbx
.text:000000000000926C                 mov     [rbp+var_410], r14
.text:0000000000009273                 mov     rax, fs:28h
.text:000000000000927C                 mov     [rbp+var_38], rax
.text:0000000000009280                 xor     eax, eax
.text:0000000000009282                 mov     [rbp+var_408], rsi
.text:0000000000009289                 call    printf_parse
.text:000000000000928E                 test    eax, eax
.text:0000000000009290                 js      loc_A0F8
.text:0000000000009296                 mov     rsi, r14
.text:0000000000009299                 mov     rdi, r12
.text:000000000000929C                 call    printf_fetchargs
.text:00000000000092A1                 test    eax, eax
.text:00000000000092A3                 js      loc_A160
.text:00000000000092A9                 mov     rax, [rbp+var_2B0]
.text:00000000000092B0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000092B7                 add     rax, 7
.text:00000000000092BB                 cmp     rax, 6
.text:00000000000092BF                 cmovbe  rax, rdx
.text:00000000000092C3                 add     rax, [rbp+var_2A8]
.text:00000000000092CA                 jb      loc_9CF8
.text:00000000000092D0                 mov     rdi, rax
.text:00000000000092D3                 xor     r8d, r8d
.text:00000000000092D6                 add     rdi, 6          ; size
.text:00000000000092DA                 setb    r8b
.text:00000000000092DE                 jb      loc_9CF8
.text:00000000000092E4                 cmp     rdi, 0F9Fh
.text:00000000000092EB                 jbe     loc_9438
.text:00000000000092F1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000092F5                 mov     [rbp+n], r8
.text:00000000000092FC                 jz      loc_9CF8
.text:0000000000009302                 call    _malloc
.text:0000000000009307                 test    rax, rax
.text:000000000000930A                 mov     [rbp+var_3D8], rax
.text:0000000000009311                 jz      loc_9CF8
.text:0000000000009317                 mov     r8, [rbp+n]
.text:000000000000931E                 mov     [rbp+ptr], rax
.text:0000000000009325
.text:0000000000009325 loc_9325:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000009325                 xor     r12d, r12d
.text:0000000000009328                 cmp     [rbp+src], 0
.text:0000000000009330                 jz      short loc_933C
.text:0000000000009332                 mov     rax, [rbp+var_418]
.text:0000000000009339                 mov     r12, [rax]
.text:000000000000933C
.text:000000000000933C loc_933C:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000933C                 mov     r13, [rbp+var_2B8]
.text:0000000000009343                 lea     rax, [rbp+var_3BC]
.text:000000000000934A                 mov     r15, [rbp+src]
.text:0000000000009351                 mov     [rbp+var_400], 0
.text:000000000000935C                 mov     [rbp+var_3F0], rax
.text:0000000000009363                 mov     rax, rbx
.text:0000000000009366                 mov     rbx, r8
.text:0000000000009369                 mov     rcx, [r13+0]
.text:000000000000936D                 mov     r8, rax
.text:0000000000009370                 cmp     rcx, r8
.text:0000000000009373                 jz      loc_9CE1
.text:0000000000009379
.text:0000000000009379 loc_9379:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000009379                 sub     rcx, r8
.text:000000000000937C                 mov     rax, rbx
.text:000000000000937F                 add     rax, rcx
.text:0000000000009382                 mov     r14, rax
.text:0000000000009385                 jnb     loc_9468
.text:000000000000938B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000938F                 jz      loc_9E60
.text:0000000000009395
.text:0000000000009395 loc_9395:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000009395                                         ; vasnprintf+A86↓j ...
.text:0000000000009395                 call    ___errno_location
.text:000000000000939A                 mov     [rbp+n], rax
.text:00000000000093A1
.text:00000000000093A1 loc_93A1:                               ; CODE XREF: vasnprintf+640↓j
.text:00000000000093A1                                         ; vasnprintf+652↓j ...
.text:00000000000093A1                 cmp     r15, [rbp+src]
.text:00000000000093A8                 jz      short loc_93B3
.text:00000000000093AA                 test    r15, r15
.text:00000000000093AD                 jnz     loc_9E90
.text:00000000000093B3
.text:00000000000093B3 loc_93B3:                               ; CODE XREF: vasnprintf+178↑j
.text:00000000000093B3                                         ; vasnprintf+C68↓j
.text:00000000000093B3                 mov     rax, [rbp+ptr]
.text:00000000000093BA                 test    rax, rax
.text:00000000000093BD                 jz      short loc_93C7
.text:00000000000093BF                 mov     rdi, rax        ; ptr
.text:00000000000093C2                 call    _free
.text:00000000000093C7
.text:00000000000093C7 loc_93C7:                               ; CODE XREF: vasnprintf+18D↑j
.text:00000000000093C7                                         ; vasnprintf+AD4↓j
.text:00000000000093C7                 mov     rax, [rbp+var_408]
.text:00000000000093CE                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000093D5                 add     rax, 20h ; ' '
.text:00000000000093D9                 cmp     rdi, rax
.text:00000000000093DC                 jz      short loc_93E3
.text:00000000000093DE                 call    _free
.text:00000000000093E3
.text:00000000000093E3 loc_93E3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:00000000000093E3                 mov     rax, [rbp+var_410]
.text:00000000000093EA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000093F1                 add     rax, 10h
.text:00000000000093F5                 cmp     rdi, rax
.text:00000000000093F8                 jz      short loc_93FF
.text:00000000000093FA                 call    _free
.text:00000000000093FF
.text:00000000000093FF loc_93FF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:00000000000093FF                 mov     rax, [rbp+n]
.text:0000000000009406                 xor     r15d, r15d
.text:0000000000009409                 mov     dword ptr [rax], 0Ch
.text:000000000000940F
.text:000000000000940F loc_940F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000940F                                         ; vasnprintf+EBE↓j ...
.text:000000000000940F                 mov     rdi, [rbp+var_38]
.text:0000000000009413                 xor     rdi, fs:28h
.text:000000000000941C                 mov     rax, r15
.text:000000000000941F                 jnz     loc_A327
.text:0000000000009425                 lea     rsp, [rbp-28h]
.text:0000000000009429                 pop     rbx
.text:000000000000942A                 pop     r12
.text:000000000000942C                 pop     r13
.text:000000000000942E                 pop     r14
.text:0000000000009430                 pop     r15
.text:0000000000009432                 pop     rbp
.text:0000000000009433                 retn
.text:0000000000009433 ; ---------------------------------------------------------------------------
.text:0000000000009434                 align 8
.text:0000000000009438
.text:0000000000009438 loc_9438:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000009438                 add     rax, 24h ; '$'
.text:000000000000943C                 mov     [rbp+ptr], 0
.text:0000000000009447                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000944B                 sub     rsp, rax
.text:000000000000944E                 lea     rax, [rsp+430h+var_421]
.text:0000000000009453                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000009457                 mov     [rbp+var_3D8], rax
.text:000000000000945E                 jmp     loc_9325
.text:000000000000945E ; ---------------------------------------------------------------------------
.text:0000000000009463                 align 8
.text:0000000000009468
.text:0000000000009468 loc_9468:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000009468                 cmp     r12, rax
.text:000000000000946B                 jnb     short loc_94D4
.text:000000000000946D                 test    r12, r12
.text:0000000000009470                 jnz     loc_9DA0
.text:0000000000009476                 cmp     rax, 0Ch
.text:000000000000947A                 ja      loc_9DB2
.text:0000000000009480                 mov     r12d, 0Ch
.text:0000000000009486
.text:0000000000009486 loc_9486:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000009486                 cmp     r15, [rbp+src]
.text:000000000000948D                 setz    dl
.text:0000000000009490                 test    r15, r15
.text:0000000000009493                 jz      loc_9DD8
.text:0000000000009499
.text:0000000000009499 loc_9499:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000009499                 test    dl, dl
.text:000000000000949B                 jnz     loc_9DD8
.text:00000000000094A1                 mov     rsi, r12        ; size
.text:00000000000094A4                 mov     rdi, r15        ; ptr
.text:00000000000094A7                 mov     [rbp+var_3D0], r8
.text:00000000000094AE                 mov     [rbp+n], rcx
.text:00000000000094B5                 call    _realloc
.text:00000000000094BA                 test    rax, rax
.text:00000000000094BD                 mov     rcx, [rbp+n]
.text:00000000000094C4                 mov     r8, [rbp+var_3D0]
.text:00000000000094CB                 jz      loc_9E7B
.text:00000000000094D1                 mov     r15, rax
.text:00000000000094D4
.text:00000000000094D4 loc_94D4:                               ; CODE XREF: vasnprintf+23B↑j
.text:00000000000094D4                                         ; vasnprintf+C23↓j ...
.text:00000000000094D4                 lea     rdi, [r15+rbx]  ; dest
.text:00000000000094D8                 mov     rdx, rcx        ; n
.text:00000000000094DB                 mov     rsi, r8         ; src
.text:00000000000094DE                 call    _memcpy
.text:00000000000094E3
.text:00000000000094E3 loc_94E3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:00000000000094E3                 mov     rax, [rbp+var_400]
.text:00000000000094EA                 cmp     [rbp+var_2C0], rax
.text:00000000000094F1                 jz      loc_A1AB
.text:00000000000094F7                 movzx   edx, byte ptr [r13+48h]
.text:00000000000094FC                 mov     rax, [r13+50h]
.text:0000000000009500                 cmp     dl, 25h ; '%'
.text:0000000000009503                 jz      loc_9C98
.text:0000000000009509                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000950D                 jz      def_978B        ; jumptable 000000000000978B default case, case 0
.text:000000000000950D                                         ; jumptable 0000000000009D30 default case
.text:0000000000009513                 mov     r8, [rbp+var_3A8]
.text:000000000000951A                 shl     rax, 5
.text:000000000000951E                 add     rax, r8
.text:0000000000009521                 cmp     dl, 6Eh ; 'n'
.text:0000000000009524                 mov     edi, [rax]
.text:0000000000009526                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000952C                 jz      loc_9D10
.text:0000000000009532                 mov     eax, [r13+10h]
.text:0000000000009536                 mov     rdi, [rbp+var_3D8]
.text:000000000000953D                 test    al, 1
.text:000000000000953F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000009542                 lea     rbx, [rdi+1]
.text:0000000000009546                 jz      short loc_9557
.text:0000000000009548                 mov     rdi, [rbp+var_3D8]
.text:000000000000954F                 lea     rbx, [rdi+2]
.text:0000000000009553                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000009557
.text:0000000000009557 loc_9557:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000009557                 test    al, 2
.text:0000000000009559                 jz      short loc_9562
.text:000000000000955B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000955E                 add     rbx, 1
.text:0000000000009562
.text:0000000000009562 loc_9562:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000009562                 test    al, 4
.text:0000000000009564                 jz      short loc_956D
.text:0000000000009566                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000009569                 add     rbx, 1
.text:000000000000956D
.text:000000000000956D loc_956D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000956D                 test    al, 8
.text:000000000000956F                 jz      short loc_9578
.text:0000000000009571                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000009574                 add     rbx, 1
.text:0000000000009578
.text:0000000000009578 loc_9578:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000009578                 test    al, 10h
.text:000000000000957A                 jz      short loc_9583
.text:000000000000957C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000957F                 add     rbx, 1
.text:0000000000009583
.text:0000000000009583 loc_9583:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000009583                 test    al, 40h
.text:0000000000009585                 jz      short loc_958E
.text:0000000000009587                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000958A                 add     rbx, 1
.text:000000000000958E
.text:000000000000958E loc_958E:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000958E                 test    al, 20h
.text:0000000000009590                 jz      short loc_9599
.text:0000000000009592                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000009595                 add     rbx, 1
.text:0000000000009599
.text:0000000000009599 loc_9599:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000009599                 mov     rsi, [r13+18h]  ; src
.text:000000000000959D                 mov     rdx, [r13+20h]
.text:00000000000095A1                 cmp     rsi, rdx
.text:00000000000095A4                 jz      short loc_95D6
.text:00000000000095A6                 mov     rcx, rdx
.text:00000000000095A9                 mov     rdi, rbx        ; dest
.text:00000000000095AC                 mov     [rbp+var_3E0], r8
.text:00000000000095B3                 sub     rcx, rsi
.text:00000000000095B6                 mov     rdx, rcx        ; n
.text:00000000000095B9                 mov     [rbp+n], rcx
.text:00000000000095C0                 call    _memcpy
.text:00000000000095C5                 mov     rcx, [rbp+n]
.text:00000000000095CC                 mov     r8, [rbp+var_3E0]
.text:00000000000095D3                 add     rbx, rcx
.text:00000000000095D6
.text:00000000000095D6 loc_95D6:                               ; CODE XREF: vasnprintf+374↑j
.text:00000000000095D6                 mov     rsi, [r13+30h]  ; src
.text:00000000000095DA                 mov     rdx, [r13+38h]
.text:00000000000095DE                 cmp     rsi, rdx
.text:00000000000095E1                 jz      short loc_9613
.text:00000000000095E3                 mov     rcx, rdx
.text:00000000000095E6                 mov     rdi, rbx        ; dest
.text:00000000000095E9                 mov     [rbp+var_3E0], r8
.text:00000000000095F0                 sub     rcx, rsi
.text:00000000000095F3                 mov     rdx, rcx        ; n
.text:00000000000095F6                 mov     [rbp+n], rcx
.text:00000000000095FD                 call    _memcpy
.text:0000000000009602                 mov     rcx, [rbp+n]
.text:0000000000009609                 mov     r8, [rbp+var_3E0]
.text:0000000000009610                 add     rbx, rcx
.text:0000000000009613
.text:0000000000009613 loc_9613:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000009613                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000009619                 cmp     edi, 10h
.text:000000000000961C                 ja      short loc_964B
.text:000000000000961E                 mov     eax, 1
.text:0000000000009623                 mov     ecx, edi
.text:0000000000009625                 shl     rax, cl
.text:0000000000009628                 test    eax, 14180h
.text:000000000000962D                 jnz     short loc_9644
.text:000000000000962F                 test    ah, 10h
.text:0000000000009632                 jnz     loc_9F90
.text:0000000000009638                 test    ah, 6
.text:000000000000963B                 jz      short loc_964B
.text:000000000000963D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000009640                 add     rbx, 1
.text:0000000000009644
.text:0000000000009644 loc_9644:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000009644                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000009647                 add     rbx, 1
.text:000000000000964B
.text:000000000000964B loc_964B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000964B                                         ; vasnprintf+40B↑j ...
.text:000000000000964B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000009650                 mov     byte ptr [rbx+1], 0
.text:0000000000009654                 mov     [rbx], al
.text:0000000000009656                 mov     rax, [r13+28h]
.text:000000000000965A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000965E                 jz      loc_9D90
.text:0000000000009664                 shl     rax, 5
.text:0000000000009668                 add     rax, r8
.text:000000000000966B                 cmp     dword ptr [rax], 5
.text:000000000000966E                 jnz     def_978B        ; jumptable 000000000000978B default case, case 0
.text:000000000000966E                                         ; jumptable 0000000000009D30 default case
.text:0000000000009674                 mov     eax, [rax+10h]
.text:0000000000009677                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000009681                 mov     [rbp+var_3B8], eax
.text:0000000000009687
.text:0000000000009687 loc_9687:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000009687                 mov     rax, [r13+40h]
.text:000000000000968B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000968F                 jz      short loc_96BC
.text:0000000000009691                 shl     rax, 5
.text:0000000000009695                 add     r8, rax
.text:0000000000009698                 cmp     dword ptr [r8], 5
.text:000000000000969C                 jnz     def_978B        ; jumptable 000000000000978B default case, case 0
.text:000000000000969C                                         ; jumptable 0000000000009D30 default case
.text:00000000000096A2                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000096A8                 mov     edx, [r8+10h]
.text:00000000000096AC                 mov     [rbp+rax*4+var_3B8], edx
.text:00000000000096B3                 lea     eax, [rax+1]
.text:00000000000096B6                 mov     dword ptr [rbp+var_3E0], eax
.text:00000000000096BC
.text:00000000000096BC loc_96BC:                               ; CODE XREF: vasnprintf+45F↑j
.text:00000000000096BC                 mov     rax, r14
.text:00000000000096BF                 xor     edx, edx
.text:00000000000096C1                 add     rax, 2
.text:00000000000096C5                 jb      loc_A32C
.text:00000000000096CB                 cmp     r12, rax
.text:00000000000096CE                 jnb     short loc_971B
.text:00000000000096D0                 test    r12, r12
.text:00000000000096D3                 jnz     loc_9EF8
.text:00000000000096D9                 cmp     rax, 0Ch
.text:00000000000096DD                 ja      loc_9F10
.text:00000000000096E3                 mov     r12d, 0Ch
.text:00000000000096E9
.text:00000000000096E9 loc_96E9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:00000000000096E9                 cmp     r15, [rbp+src]
.text:00000000000096F0                 setz    dl
.text:00000000000096F3                 test    r15, r15
.text:00000000000096F6                 jz      loc_9F40
.text:00000000000096FC
.text:00000000000096FC loc_96FC:                               ; CODE XREF: vasnprintf+D03↓j
.text:00000000000096FC                 test    dl, dl
.text:00000000000096FE                 jnz     loc_9F40
.text:0000000000009704                 mov     rsi, r12        ; size
.text:0000000000009707                 mov     rdi, r15        ; ptr
.text:000000000000970A                 call    _realloc
.text:000000000000970F                 test    rax, rax
.text:0000000000009712                 jz      loc_9395
.text:0000000000009718                 mov     r15, rax
.text:000000000000971B
.text:000000000000971B loc_971B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000971B                                         ; vasnprintf+D53↓j ...
.text:000000000000971B                 mov     byte ptr [r15+r14], 0
.text:0000000000009720                 call    ___errno_location
.text:0000000000009725                 mov     [rbp+n], rax
.text:000000000000972C                 mov     eax, [rax]
.text:000000000000972E                 mov     [rbp+var_3F8], rbx
.text:0000000000009735                 mov     [rbp-424h], eax
.text:000000000000973B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009740
.text:0000000000009740 loc_9740:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000009740                                         ; vasnprintf+68D↓j ...
.text:0000000000009740                 mov     rax, [rbp+n]
.text:0000000000009747                 mov     rbx, r12
.text:000000000000974A                 mov     r10d, 7FFFFFFFh
.text:0000000000009750                 sub     rbx, r14
.text:0000000000009753                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000975D                 cmp     rbx, 7FFFFFFFh
.text:0000000000009764                 mov     dword ptr [rax], 0
.text:000000000000976A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000009770                 cmovbe  r10, rbx
.text:0000000000009774                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000009777                 ja      def_978B        ; jumptable 000000000000978B default case, case 0
.text:0000000000009777                                         ; jumptable 0000000000009D30 default case
.text:000000000000977D                 lea     rsi, jpt_978B
.text:0000000000009784                 movsxd  rax, ds:(jpt_978B - 0E57Ch)[rsi+rax*4]
.text:0000000000009788                 add     rax, rsi
.text:000000000000978B                 jmp     rax             ; switch jump
.text:000000000000978B ; ---------------------------------------------------------------------------
.text:000000000000978D                 align 10h
.text:0000000000009790
.text:0000000000009790 loc_9790:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009790                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009790                 mov     rax, [r13+50h]  ; jumptable 000000000000978B cases 7-10,15-17
.text:0000000000009794                 lea     rdi, [r15+r14]
.text:0000000000009798                 shl     rax, 5
.text:000000000000979C                 add     rax, [rbp+var_3A8]
.text:00000000000097A3                 mov     r9, [rax+10h]
.text:00000000000097A7                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000097AD                 cmp     eax, 1
.text:00000000000097B0                 jz      loc_9C78
.text:00000000000097B6                 cmp     eax, 2
.text:00000000000097B9                 jz      loc_9C60
.text:00000000000097BF                 sub     rsp, 8
.text:00000000000097C3                 push    [rbp+var_3F0]
.text:00000000000097C9
.text:00000000000097C9 loc_97C9:                               ; CODE XREF: vasnprintf+CBE↓j
.text:00000000000097C9                 mov     r8, [rbp+var_3D8]
.text:00000000000097D0                 mov     rsi, r10
.text:00000000000097D3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000097DA                 mov     edx, 1
.text:00000000000097DF                 xor     eax, eax
.text:00000000000097E1                 mov     [rbp+var_430], r10
.text:00000000000097E8                 call    ___snprintf_chk
.text:00000000000097ED                 pop     rsi
.text:00000000000097EE                 pop     rdi
.text:00000000000097EF                 mov     r10, [rbp+var_430]
.text:00000000000097F6
.text:00000000000097F6 loc_97F6:                               ; CODE XREF: vasnprintf+83D↓j
.text:00000000000097F6                                         ; vasnprintf+8BE↓j ...
.text:00000000000097F6                 mov     ecx, [rbp+var_3BC]
.text:00000000000097FC                 test    ecx, ecx
.text:00000000000097FE                 js      loc_993C
.text:0000000000009804
.text:0000000000009804 loc_9804:                               ; CODE XREF: vasnprintf+706↓j
.text:0000000000009804                 movsxd  rdx, ecx
.text:0000000000009807                 cmp     rdx, r10
.text:000000000000980A                 jnb     short loc_981A
.text:000000000000980C                 add     rdx, r15
.text:000000000000980F                 cmp     byte ptr [rdx+r14], 0
.text:0000000000009814                 jnz     def_978B        ; jumptable 000000000000978B default case, case 0
.text:0000000000009814                                         ; jumptable 0000000000009D30 default case
.text:000000000000981A
.text:000000000000981A loc_981A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000981A                 cmp     ecx, eax
.text:000000000000981C                 jge     short loc_9826
.text:000000000000981E
.text:000000000000981E loc_981E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000981E                 mov     [rbp+var_3BC], eax
.text:0000000000009824                 mov     ecx, eax
.text:0000000000009826
.text:0000000000009826 loc_9826:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000009826                 lea     eax, [rcx+1]
.text:0000000000009829                 cmp     rax, r10
.text:000000000000982C                 jb      loc_A060
.text:0000000000009832                 cmp     rbx, 7FFFFFFEh
.text:0000000000009839                 ja      loc_A080
.text:000000000000983F                 lea     rsi, [r12+r12]
.text:0000000000009843                 lea     edx, [rcx+2]
.text:0000000000009846                 test    r12, r12
.text:0000000000009849                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009850                 cmovns  rax, rsi
.text:0000000000009854                 add     rdx, r14
.text:0000000000009857                 jb      loc_A318
.text:000000000000985D                 cmp     rax, rdx
.text:0000000000009860                 cmovb   rax, rdx
.text:0000000000009864                 cmp     r12, rax
.text:0000000000009867                 jnb     loc_9740
.text:000000000000986D                 test    r12, r12
.text:0000000000009870                 js      loc_93A1
.text:0000000000009876                 cmp     rsi, rax
.text:0000000000009879                 mov     r12, rsi
.text:000000000000987C                 jnb     short loc_988B
.text:000000000000987E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009882                 jz      loc_93A1
.text:0000000000009888                 mov     r12, rax
.text:000000000000988B
.text:000000000000988B loc_988B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000988B                 cmp     r15, [rbp+src]
.text:0000000000009892                 setz    bl
.text:0000000000009895                 test    r15, r15
.text:0000000000009898                 jz      loc_9C20
.text:000000000000989E                 test    bl, bl
.text:00000000000098A0                 jnz     loc_9C20
.text:00000000000098A6                 mov     rsi, r12        ; size
.text:00000000000098A9                 mov     rdi, r15        ; ptr
.text:00000000000098AC                 call    _realloc
.text:00000000000098B1                 test    rax, rax
.text:00000000000098B4                 jz      loc_93A1
.text:00000000000098BA                 mov     r15, rax
.text:00000000000098BD                 jmp     loc_9740
.text:00000000000098BD ; ---------------------------------------------------------------------------
.text:00000000000098C2                 align 8
.text:00000000000098C8
.text:00000000000098C8 loc_98C8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000098C8                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:00000000000098C8                 mov     rax, [r13+50h]  ; jumptable 000000000000978B cases 5,6,13,14
.text:00000000000098CC                 lea     rdi, [r15+r14]
.text:00000000000098D0                 shl     rax, 5
.text:00000000000098D4                 add     rax, [rbp+var_3A8]
.text:00000000000098DB                 mov     r9d, [rax+10h]
.text:00000000000098DF                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000098E5                 cmp     eax, 1
.text:00000000000098E8                 jz      loc_9B20
.text:00000000000098EE
.text:00000000000098EE loc_98EE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:00000000000098EE                                         ; vasnprintf+9B1↓j ...
.text:00000000000098EE                 cmp     eax, 2
.text:00000000000098F1                 jz      loc_9B68
.text:00000000000098F7
.text:00000000000098F7 loc_98F7:                               ; CODE XREF: vasnprintf+92E↓j
.text:00000000000098F7                 sub     rsp, 8
.text:00000000000098FB                 push    [rbp+var_3F0]
.text:0000000000009901
.text:0000000000009901 loc_9901:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000009901                 mov     r8, [rbp+var_3D8]
.text:0000000000009908                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000990F                 mov     edx, 1
.text:0000000000009914                 mov     rsi, r10
.text:0000000000009917                 xor     eax, eax
.text:0000000000009919                 mov     [rbp+var_430], r10
.text:0000000000009920                 call    ___snprintf_chk
.text:0000000000009925                 pop     rdx
.text:0000000000009926                 pop     rcx
.text:0000000000009927                 mov     ecx, [rbp+var_3BC]
.text:000000000000992D                 mov     r10, [rbp+var_430]
.text:0000000000009934                 test    ecx, ecx
.text:0000000000009936                 jns     loc_9804
.text:000000000000993C
.text:000000000000993C loc_993C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000993C                 mov     rdi, [rbp+var_3F8]
.text:0000000000009943                 cmp     byte ptr [rdi+1], 0
.text:0000000000009947                 jnz     loc_9C88
.text:000000000000994D                 test    eax, eax
.text:000000000000994F                 jns     loc_981E
.text:0000000000009955                 mov     rax, [rbp+n]
.text:000000000000995C                 mov     ebx, [rax]
.text:000000000000995E                 test    ebx, ebx
.text:0000000000009960                 jnz     short loc_9980
.text:0000000000009962                 movzx   eax, byte ptr [r13+48h]
.text:0000000000009967                 mov     ebx, 16h
.text:000000000000996C                 and     eax, 0FFFFFFEFh
.text:000000000000996F                 cmp     al, 63h ; 'c'
.text:0000000000009971                 mov     eax, 54h ; 'T'
.text:0000000000009976                 cmovz   ebx, eax
.text:0000000000009979                 nop     dword ptr [rax+00000000h]
.text:0000000000009980
.text:0000000000009980 loc_9980:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000009980                 cmp     r15, [rbp+src]
.text:0000000000009987                 jz      short loc_9992
.text:0000000000009989                 test    r15, r15
.text:000000000000998C                 jnz     loc_A13C
.text:0000000000009992
.text:0000000000009992 loc_9992:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000009992                                         ; vasnprintf+F14↓j
.text:0000000000009992                 mov     rax, [rbp+ptr]
.text:0000000000009999                 test    rax, rax
.text:000000000000999C                 jz      short loc_99A6
.text:000000000000999E                 mov     rdi, rax        ; ptr
.text:00000000000099A1                 call    _free
.text:00000000000099A6
.text:00000000000099A6 loc_99A6:                               ; CODE XREF: vasnprintf+76C↑j
.text:00000000000099A6                 mov     rax, [rbp+var_408]
.text:00000000000099AD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000099B4                 add     rax, 20h ; ' '
.text:00000000000099B8                 cmp     rdi, rax
.text:00000000000099BB                 jz      short loc_99C2
.text:00000000000099BD                 call    _free
.text:00000000000099C2
.text:00000000000099C2 loc_99C2:                               ; CODE XREF: vasnprintf+78B↑j
.text:00000000000099C2                 mov     rax, [rbp+var_410]
.text:00000000000099C9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000099D0                 add     rax, 10h
.text:00000000000099D4                 cmp     rdi, rax
.text:00000000000099D7                 jz      short loc_99DE
.text:00000000000099D9                 call    _free
.text:00000000000099DE
.text:00000000000099DE loc_99DE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:00000000000099DE                 mov     rax, [rbp+n]
.text:00000000000099E5                 xor     r15d, r15d
.text:00000000000099E8                 mov     [rax], ebx
.text:00000000000099EA                 jmp     loc_940F
.text:00000000000099EA ; ---------------------------------------------------------------------------
.text:00000000000099EF                 align 10h
.text:00000000000099F0
.text:00000000000099F0 loc_99F0:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000099F0                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:00000000000099F0                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 12
.text:00000000000099F4                 lea     rdi, [r15+r14]
.text:00000000000099F8                 shl     rax, 5
.text:00000000000099FC                 add     rax, [rbp+var_3A8]
.text:0000000000009A03                 fld     tbyte ptr [rax+10h]
.text:0000000000009A06                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009A0C                 cmp     eax, 1
.text:0000000000009A0F                 jz      loc_A040
.text:0000000000009A15                 cmp     eax, 2
.text:0000000000009A18                 jnz     loc_9EE0
.text:0000000000009A1E                 mov     eax, [rbp+var_3B4]
.text:0000000000009A24                 sub     rsp, 8
.text:0000000000009A28                 push    [rbp+var_3F0]
.text:0000000000009A2E                 mov     r9d, [rbp+var_3B8]
.text:0000000000009A35                 mov     r8, [rbp+var_3D8]
.text:0000000000009A3C                 mov     rsi, r10
.text:0000000000009A3F                 sub     rsp, 18h
.text:0000000000009A43                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A4A                 mov     edx, 1
.text:0000000000009A4F                 fstp    [rsp+458h+var_450]
.text:0000000000009A53                 push    rax
.text:0000000000009A54                 xor     eax, eax
.text:0000000000009A56                 mov     [rbp+var_430], r10
.text:0000000000009A5D                 call    ___snprintf_chk
.text:0000000000009A62                 add     rsp, 30h
.text:0000000000009A66                 mov     r10, [rbp+var_430]
.text:0000000000009A6D                 jmp     loc_97F6
.text:0000000000009A6D ; ---------------------------------------------------------------------------
.text:0000000000009A72                 align 8
.text:0000000000009A78
.text:0000000000009A78 loc_9A78:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009A78                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009A78                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 11
.text:0000000000009A7C                 lea     rdi, [r15+r14]
.text:0000000000009A80                 shl     rax, 5
.text:0000000000009A84                 add     rax, [rbp+var_3A8]
.text:0000000000009A8B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000009A90                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009A96                 cmp     eax, 1
.text:0000000000009A99                 jz      loc_A030
.text:0000000000009A9F                 cmp     eax, 2
.text:0000000000009AA2                 jnz     loc_9EA0
.text:0000000000009AA8                 mov     eax, [rbp+var_3B4]
.text:0000000000009AAE                 push    [rbp+var_3F0]
.text:0000000000009AB4                 push    rax
.text:0000000000009AB5
.text:0000000000009AB5 loc_9AB5:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000009AB5                 mov     r9d, [rbp+var_3B8]
.text:0000000000009ABC                 mov     r8, [rbp+var_3D8]
.text:0000000000009AC3                 mov     rsi, r10
.text:0000000000009AC6                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009ACD                 mov     edx, 1
.text:0000000000009AD2                 mov     eax, 1
.text:0000000000009AD7                 mov     [rbp+var_430], r10
.text:0000000000009ADE                 call    ___snprintf_chk
.text:0000000000009AE3                 pop     r8
.text:0000000000009AE5                 mov     r10, [rbp+var_430]
.text:0000000000009AEC                 pop     r9
.text:0000000000009AEE                 jmp     loc_97F6
.text:0000000000009AEE ; ---------------------------------------------------------------------------
.text:0000000000009AF3                 align 8
.text:0000000000009AF8
.text:0000000000009AF8 loc_9AF8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009AF8                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009AF8                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 4
.text:0000000000009AFC                 lea     rdi, [r15+r14]
.text:0000000000009B00                 shl     rax, 5
.text:0000000000009B04                 add     rax, [rbp+var_3A8]
.text:0000000000009B0B                 movzx   r9d, word ptr [rax+10h]
.text:0000000000009B10                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009B16                 cmp     eax, 1
.text:0000000000009B19                 jnz     loc_98EE
.text:0000000000009B1F                 nop
.text:0000000000009B20
.text:0000000000009B20 loc_9B20:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000009B20                                         ; vasnprintf+929↓j ...
.text:0000000000009B20                 push    [rbp+var_3F0]
.text:0000000000009B26                 push    r9
.text:0000000000009B28
.text:0000000000009B28 loc_9B28:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000009B28                 mov     r9d, [rbp+var_3B8]
.text:0000000000009B2F                 jmp     loc_9901
.text:0000000000009B2F ; ---------------------------------------------------------------------------
.text:0000000000009B34                 align 8
.text:0000000000009B38
.text:0000000000009B38 loc_9B38:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009B38                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009B38                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 3
.text:0000000000009B3C                 lea     rdi, [r15+r14]
.text:0000000000009B40                 shl     rax, 5
.text:0000000000009B44                 add     rax, [rbp+var_3A8]
.text:0000000000009B4B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000009B50                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009B56                 cmp     eax, 1
.text:0000000000009B59                 jz      short loc_9B20
.text:0000000000009B5B                 cmp     eax, 2
.text:0000000000009B5E                 jnz     loc_98F7
.text:0000000000009B64                 nop     dword ptr [rax+00h]
.text:0000000000009B68
.text:0000000000009B68 loc_9B68:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000009B68                 sub     rsp, 8
.text:0000000000009B6C                 push    [rbp+var_3F0]
.text:0000000000009B72                 push    r9
.text:0000000000009B74
.text:0000000000009B74 loc_9B74:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000009B74                 mov     eax, [rbp+var_3B4]
.text:0000000000009B7A                 push    rax
.text:0000000000009B7B
.text:0000000000009B7B loc_9B7B:                               ; CODE XREF: vasnprintf+E21↓j
.text:0000000000009B7B                 mov     r9d, [rbp+var_3B8]
.text:0000000000009B82                 mov     r8, [rbp+var_3D8]
.text:0000000000009B89                 mov     rsi, r10
.text:0000000000009B8C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009B93                 mov     edx, 1
.text:0000000000009B98                 xor     eax, eax
.text:0000000000009B9A                 mov     [rbp+var_430], r10
.text:0000000000009BA1                 call    ___snprintf_chk
.text:0000000000009BA6                 add     rsp, 20h
.text:0000000000009BAA                 mov     r10, [rbp+var_430]
.text:0000000000009BB1                 jmp     loc_97F6
.text:0000000000009BB1 ; ---------------------------------------------------------------------------
.text:0000000000009BB6                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 loc_9BC0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009BC0                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009BC0                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 2
.text:0000000000009BC4                 lea     rdi, [r15+r14]
.text:0000000000009BC8                 shl     rax, 5
.text:0000000000009BCC                 add     rax, [rbp+var_3A8]
.text:0000000000009BD3                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000009BD8                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009BDE                 cmp     eax, 1
.text:0000000000009BE1                 jnz     loc_98EE
.text:0000000000009BE7                 jmp     loc_9B20
.text:0000000000009BE7 ; ---------------------------------------------------------------------------
.text:0000000000009BEC                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 loc_9BF0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000009BF0                                         ; DATA XREF: .rodata:jpt_978B↓o
.text:0000000000009BF0                 mov     rax, [r13+50h]  ; jumptable 000000000000978B case 1
.text:0000000000009BF4                 lea     rdi, [r15+r14]
.text:0000000000009BF8                 shl     rax, 5
.text:0000000000009BFC                 add     rax, [rbp+var_3A8]
.text:0000000000009C03                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000009C08                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000009C0E                 cmp     eax, 1
.text:0000000000009C11                 jnz     loc_98EE
.text:0000000000009C17                 jmp     loc_9B20
.text:0000000000009C17 ; ---------------------------------------------------------------------------
.text:0000000000009C1C                 align 20h
.text:0000000000009C20
.text:0000000000009C20 loc_9C20:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000009C20                                         ; vasnprintf+670↑j
.text:0000000000009C20                 mov     rdi, r12        ; size
.text:0000000000009C23                 call    _malloc
.text:0000000000009C28                 test    rax, rax
.text:0000000000009C2B                 mov     rcx, rax
.text:0000000000009C2E                 jz      loc_93A1
.text:0000000000009C34                 test    r14, r14
.text:0000000000009C37                 jz      loc_9CF0
.text:0000000000009C3D                 test    bl, bl
.text:0000000000009C3F                 jz      loc_9CF0
.text:0000000000009C45                 mov     rsi, r15        ; src
.text:0000000000009C48                 mov     rdx, r14        ; n
.text:0000000000009C4B                 mov     rdi, rax        ; dest
.text:0000000000009C4E                 call    _memcpy
.text:0000000000009C53                 mov     r15, rax
.text:0000000000009C56                 jmp     loc_9740
.text:0000000000009C56 ; ---------------------------------------------------------------------------
.text:0000000000009C5B                 align 20h
.text:0000000000009C60
.text:0000000000009C60 loc_9C60:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000009C60                 sub     rsp, 8
.text:0000000000009C64                 push    [rbp+var_3F0]
.text:0000000000009C6A                 push    r9
.text:0000000000009C6C                 jmp     loc_9B74
.text:0000000000009C6C ; ---------------------------------------------------------------------------
.text:0000000000009C71                 align 8
.text:0000000000009C78
.text:0000000000009C78 loc_9C78:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000009C78                 push    [rbp+var_3F0]
.text:0000000000009C7E                 push    r9
.text:0000000000009C80                 jmp     loc_9B28
.text:0000000000009C80 ; ---------------------------------------------------------------------------
.text:0000000000009C85                 align 8
.text:0000000000009C88
.text:0000000000009C88 loc_9C88:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000009C88                 mov     byte ptr [rdi+1], 0
.text:0000000000009C8C                 jmp     loc_9740
.text:0000000000009C8C ; ---------------------------------------------------------------------------
.text:0000000000009C91                 align 8
.text:0000000000009C98
.text:0000000000009C98 loc_9C98:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000009C98                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009C9C                 jnz     def_978B        ; jumptable 000000000000978B default case, case 0
.text:0000000000009C9C                                         ; jumptable 0000000000009D30 default case
.text:0000000000009CA2                 mov     rax, r14
.text:0000000000009CA5                 add     rax, 1
.text:0000000000009CA9                 mov     rbx, rax
.text:0000000000009CAC                 jnb     loc_9D38
.text:0000000000009CB2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000009CB6                 jnz     loc_9395
.text:0000000000009CBC                 mov     rbx, r12
.text:0000000000009CBF
.text:0000000000009CBF loc_9CBF:                               ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000009CBF                                         ; vasnprintf+B58↓j ...
.text:0000000000009CBF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000009CC4
.text:0000000000009CC4 loc_9CC4:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000009CC4                                         ; vasnprintf+D76↓j ...
.text:0000000000009CC4                 mov     r8, [r13+8]
.text:0000000000009CC8                 add     r13, 58h ; 'X'
.text:0000000000009CCC                 mov     rcx, [r13+0]
.text:0000000000009CD0                 add     [rbp+var_400], 1
.text:0000000000009CD8                 cmp     rcx, r8
.text:0000000000009CDB                 jnz     loc_9379
.text:0000000000009CE1
.text:0000000000009CE1 loc_9CE1:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000009CE1                 mov     r14, rbx
.text:0000000000009CE4                 jmp     loc_94E3
.text:0000000000009CE4 ; ---------------------------------------------------------------------------
.text:0000000000009CE9                 align 10h
.text:0000000000009CF0
.text:0000000000009CF0 loc_9CF0:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000009CF0                                         ; vasnprintf+A0F↑j
.text:0000000000009CF0                 mov     r15, rcx
.text:0000000000009CF3                 jmp     loc_9740
.text:0000000000009CF8 ; ---------------------------------------------------------------------------
.text:0000000000009CF8
.text:0000000000009CF8 loc_9CF8:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000009CF8                                         ; vasnprintf+AE↑j ...
.text:0000000000009CF8                 call    ___errno_location
.text:0000000000009CFD                 mov     [rbp+n], rax
.text:0000000000009D04                 jmp     loc_93C7
.text:0000000000009D04 ; ---------------------------------------------------------------------------
.text:0000000000009D09                 align 10h
.text:0000000000009D10
.text:0000000000009D10 loc_9D10:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000009D10                 mov     edx, edi
.text:0000000000009D12                 sub     edx, 12h        ; switch 5 cases
.text:0000000000009D15                 cmp     edx, 4
.text:0000000000009D18                 ja      def_978B        ; jumptable 000000000000978B default case, case 0
.text:0000000000009D18                                         ; jumptable 0000000000009D30 default case
.text:0000000000009D1E                 lea     rdi, jpt_9D30
.text:0000000000009D25                 mov     rax, [rax+10h]
.text:0000000000009D29                 movsxd  rdx, ds:(jpt_9D30 - 0E5C4h)[rdi+rdx*4]
.text:0000000000009D2D                 add     rdx, rdi
.text:0000000000009D30                 jmp     rdx             ; switch jump
.text:0000000000009D30 ; ---------------------------------------------------------------------------
.text:0000000000009D32                 align 8
.text:0000000000009D38
.text:0000000000009D38 loc_9D38:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000009D38                 cmp     r12, rax
.text:0000000000009D3B                 jnb     short loc_9CBF
.text:0000000000009D3D                 test    r12, r12
.text:0000000000009D40                 jnz     loc_A110
.text:0000000000009D46                 cmp     rax, 0Ch
.text:0000000000009D4A                 ja      loc_A122
.text:0000000000009D50                 mov     r12d, 0Ch
.text:0000000000009D56
.text:0000000000009D56 loc_9D56:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000009D56                                         ; vasnprintf+EFF↓j
.text:0000000000009D56                 cmp     r15, [rbp+src]
.text:0000000000009D5D                 setz    dl
.text:0000000000009D60                 test    r15, r15
.text:0000000000009D63                 jz      loc_9FD0
.text:0000000000009D69                 test    dl, dl
.text:0000000000009D6B                 jnz     loc_9FD0
.text:0000000000009D71                 mov     rsi, r12        ; size
.text:0000000000009D74                 mov     rdi, r15        ; ptr
.text:0000000000009D77                 call    _realloc
.text:0000000000009D7C                 test    rax, rax
.text:0000000000009D7F                 jz      loc_9E7B
.text:0000000000009D85                 mov     r15, rax
.text:0000000000009D88                 jmp     loc_9CBF
.text:0000000000009D88 ; ---------------------------------------------------------------------------
.text:0000000000009D8D                 align 10h
.text:0000000000009D90
.text:0000000000009D90 loc_9D90:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000009D90                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000009D9A                 jmp     loc_9687
.text:0000000000009D9A ; ---------------------------------------------------------------------------
.text:0000000000009D9F                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 loc_9DA0:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000009DA0                 js      loc_9395
.text:0000000000009DA6                 add     r12, r12
.text:0000000000009DA9                 cmp     r12, rax
.text:0000000000009DAC                 jnb     loc_9486
.text:0000000000009DB2
.text:0000000000009DB2 loc_9DB2:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000009DB2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009DB6                 jz      loc_9395
.text:0000000000009DBC                 cmp     r15, [rbp+src]
.text:0000000000009DC3                 mov     r12, rax
.text:0000000000009DC6                 setz    dl
.text:0000000000009DC9                 test    r15, r15
.text:0000000000009DCC                 jnz     loc_9499
.text:0000000000009DD2                 nop     word ptr [rax+rax+00h]
.text:0000000000009DD8
.text:0000000000009DD8 loc_9DD8:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000009DD8                                         ; vasnprintf+26B↑j
.text:0000000000009DD8                 mov     rdi, r12        ; size
.text:0000000000009DDB                 mov     [rbp+var_3E0], r8
.text:0000000000009DE2                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000009DE8                 mov     [rbp+n], rcx
.text:0000000000009DEF                 call    _malloc
.text:0000000000009DF4                 test    rax, rax
.text:0000000000009DF7                 mov     r9, rax
.text:0000000000009DFA                 mov     rcx, [rbp+n]
.text:0000000000009E01                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000009E08                 mov     r8, [rbp+var_3E0]
.text:0000000000009E0F                 jz      loc_9395
.text:0000000000009E15                 test    rbx, rbx
.text:0000000000009E18                 jz      loc_A020
.text:0000000000009E1E                 test    dl, dl
.text:0000000000009E20                 jz      loc_A020
.text:0000000000009E26                 mov     rsi, r15        ; src
.text:0000000000009E29                 mov     rdx, rbx        ; n
.text:0000000000009E2C                 mov     rdi, rax        ; dest
.text:0000000000009E2F                 mov     [rbp+var_3D0], r8
.text:0000000000009E36                 mov     [rbp+n], rcx
.text:0000000000009E3D                 call    _memcpy
.text:0000000000009E42                 mov     rcx, [rbp+n]
.text:0000000000009E49                 mov     r15, rax
.text:0000000000009E4C                 mov     r8, [rbp+var_3D0]
.text:0000000000009E53                 jmp     loc_94D4
.text:0000000000009E53 ; ---------------------------------------------------------------------------
.text:0000000000009E58                 align 20h
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000009E60                 mov     r14, r12
.text:0000000000009E63                 jmp     loc_94D4
.text:0000000000009E63 ; ---------------------------------------------------------------------------
.text:0000000000009E68                 align 10h
.text:0000000000009E70
.text:0000000000009E70 loc_9E70:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009E70                                         ; DATA XREF: .rodata:jpt_9D30↓o
.text:0000000000009E70                 mov     [rax], r14      ; jumptable 0000000000009D30 cases 21,22
.text:0000000000009E73                 mov     rbx, r14
.text:0000000000009E76                 jmp     loc_9CC4
.text:0000000000009E7B ; ---------------------------------------------------------------------------
.text:0000000000009E7B
.text:0000000000009E7B loc_9E7B:                               ; CODE XREF: vasnprintf+29B↑j
.text:0000000000009E7B                                         ; vasnprintf+B4F↑j ...
.text:0000000000009E7B                 call    ___errno_location
.text:0000000000009E80                 mov     [rbp+n], rax
.text:0000000000009E87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000009E90                 mov     rdi, r15        ; ptr
.text:0000000000009E93                 call    _free
.text:0000000000009E98                 jmp     loc_93B3
.text:0000000000009E98 ; ---------------------------------------------------------------------------
.text:0000000000009E9D                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 loc_9EA0:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000009EA0                 mov     r9, [rbp+var_3F0]
.text:0000000000009EA7                 mov     r8, [rbp+var_3D8]
.text:0000000000009EAE                 mov     rsi, r10
.text:0000000000009EB1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009EB8                 mov     edx, 1
.text:0000000000009EBD                 mov     eax, 1
.text:0000000000009EC2                 mov     [rbp+var_430], r10
.text:0000000000009EC9                 call    ___snprintf_chk
.text:0000000000009ECE                 mov     r10, [rbp+var_430]
.text:0000000000009ED5                 jmp     loc_97F6
.text:0000000000009ED5 ; ---------------------------------------------------------------------------
.text:0000000000009EDA                 align 20h
.text:0000000000009EE0
.text:0000000000009EE0 loc_9EE0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000009EE0                 sub     rsp, 10h
.text:0000000000009EE4                 mov     r9, [rbp+var_3F0]
.text:0000000000009EEB                 fstp    [rsp+440h+var_440]
.text:0000000000009EEE                 jmp     loc_97C9
.text:0000000000009EEE ; ---------------------------------------------------------------------------
.text:0000000000009EF3                 align 8
.text:0000000000009EF8
.text:0000000000009EF8 loc_9EF8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000009EF8                 js      loc_9395
.text:0000000000009EFE                 add     r12, r12
.text:0000000000009F01                 cmp     r12, rax
.text:0000000000009F04                 jnb     loc_96E9
.text:0000000000009F0A                 nop     word ptr [rax+rax+00h]
.text:0000000000009F10
.text:0000000000009F10 loc_9F10:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000009F10                                         ; vasnprintf+1114↓j
.text:0000000000009F10                 test    rdx, rdx
.text:0000000000009F13                 jnz     loc_9395
.text:0000000000009F19                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009F1D                 jz      loc_9395
.text:0000000000009F23                 cmp     r15, [rbp+src]
.text:0000000000009F2A                 mov     r12, rax
.text:0000000000009F2D                 setz    dl
.text:0000000000009F30                 test    r15, r15
.text:0000000000009F33                 jnz     loc_96FC
.text:0000000000009F39                 nop     dword ptr [rax+00000000h]
.text:0000000000009F40
.text:0000000000009F40 loc_9F40:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000009F40                                         ; vasnprintf+4CE↑j
.text:0000000000009F40                 mov     rdi, r12        ; size
.text:0000000000009F43                 mov     byte ptr [rbp+n], dl
.text:0000000000009F49                 call    _malloc
.text:0000000000009F4E                 test    rax, rax
.text:0000000000009F51                 mov     rcx, rax
.text:0000000000009F54                 movzx   edx, byte ptr [rbp+n]
.text:0000000000009F5B                 jz      loc_9395
.text:0000000000009F61                 test    r14, r14
.text:0000000000009F64                 jz      loc_A100
.text:0000000000009F6A                 test    dl, dl
.text:0000000000009F6C                 jz      loc_A100
.text:0000000000009F72                 mov     rsi, r15        ; src
.text:0000000000009F75                 mov     rdx, r14        ; n
.text:0000000000009F78                 mov     rdi, rax        ; dest
.text:0000000000009F7B                 call    _memcpy
.text:0000000000009F80                 mov     r15, rax
.text:0000000000009F83                 jmp     loc_971B
.text:0000000000009F83 ; ---------------------------------------------------------------------------
.text:0000000000009F88                 align 10h
.text:0000000000009F90
.text:0000000000009F90 loc_9F90:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000009F90                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000009F93                 add     rbx, 1
.text:0000000000009F97                 jmp     loc_964B
.text:0000000000009F97 ; ---------------------------------------------------------------------------
.text:0000000000009F9C                 align 20h
.text:0000000000009FA0
.text:0000000000009FA0 loc_9FA0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009FA0                                         ; DATA XREF: .rodata:jpt_9D30↓o
.text:0000000000009FA0                 mov     [rax], r14b     ; jumptable 0000000000009D30 case 18
.text:0000000000009FA3                 mov     rbx, r14
.text:0000000000009FA6                 jmp     loc_9CC4
.text:0000000000009FA6 ; ---------------------------------------------------------------------------
.text:0000000000009FAB                 align 10h
.text:0000000000009FB0
.text:0000000000009FB0 loc_9FB0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009FB0                                         ; DATA XREF: .rodata:jpt_9D30↓o
.text:0000000000009FB0                 mov     [rax], r14d     ; jumptable 0000000000009D30 case 20
.text:0000000000009FB3                 mov     rbx, r14
.text:0000000000009FB6                 jmp     loc_9CC4
.text:0000000000009FB6 ; ---------------------------------------------------------------------------
.text:0000000000009FBB                 align 20h
.text:0000000000009FC0
.text:0000000000009FC0 loc_9FC0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000009FC0                                         ; DATA XREF: .rodata:jpt_9D30↓o
.text:0000000000009FC0                 mov     [rax], r14w     ; jumptable 0000000000009D30 case 19
.text:0000000000009FC4                 mov     rbx, r14
.text:0000000000009FC7                 jmp     loc_9CC4
.text:0000000000009FC7 ; ---------------------------------------------------------------------------
.text:0000000000009FCC                 align 10h
.text:0000000000009FD0
.text:0000000000009FD0 loc_9FD0:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000009FD0                                         ; vasnprintf+B3B↑j
.text:0000000000009FD0                 mov     rdi, r12        ; size
.text:0000000000009FD3                 mov     byte ptr [rbp+n], dl
.text:0000000000009FD9                 call    _malloc
.text:0000000000009FDE                 test    rax, rax
.text:0000000000009FE1                 mov     rcx, rax
.text:0000000000009FE4                 movzx   edx, byte ptr [rbp+n]
.text:0000000000009FEB                 jz      loc_9395
.text:0000000000009FF1                 test    r14, r14
.text:0000000000009FF4                 jz      loc_A134
.text:0000000000009FFA                 test    dl, dl
.text:0000000000009FFC                 jz      loc_A134
.text:000000000000A002                 mov     rsi, r15        ; src
.text:000000000000A005                 mov     rdx, r14        ; n
.text:000000000000A008                 mov     rdi, rax        ; dest
.text:000000000000A00B                 call    _memcpy
.text:000000000000A010                 mov     r15, rax
.text:000000000000A013                 jmp     loc_9CBF
.text:000000000000A013 ; ---------------------------------------------------------------------------
.text:000000000000A018                 align 20h
.text:000000000000A020
.text:000000000000A020 loc_A020:                               ; CODE XREF: vasnprintf+BE8↑j
.text:000000000000A020                                         ; vasnprintf+BF0↑j
.text:000000000000A020                 mov     r15, r9
.text:000000000000A023                 jmp     loc_94D4
.text:000000000000A023 ; ---------------------------------------------------------------------------
.text:000000000000A028                 align 10h
.text:000000000000A030
.text:000000000000A030 loc_A030:                               ; CODE XREF: vasnprintf+869↑j
.text:000000000000A030                 sub     rsp, 8
.text:000000000000A034                 push    [rbp+var_3F0]
.text:000000000000A03A                 jmp     loc_9AB5
.text:000000000000A03A ; ---------------------------------------------------------------------------
.text:000000000000A03F                 align 20h
.text:000000000000A040
.text:000000000000A040 loc_A040:                               ; CODE XREF: vasnprintf+7DF↑j
.text:000000000000A040                 sub     rsp, 8
.text:000000000000A044                 push    [rbp+var_3F0]
.text:000000000000A04A                 sub     rsp, 10h
.text:000000000000A04E                 fstp    [rsp+450h+var_450]
.text:000000000000A051                 jmp     loc_9B7B
.text:000000000000A051 ; ---------------------------------------------------------------------------
.text:000000000000A056                 align 20h
.text:000000000000A060
.text:000000000000A060 loc_A060:                               ; CODE XREF: vasnprintf+5FC↑j
.text:000000000000A060                 mov     rax, [rbp+n]
.text:000000000000A067                 mov     edi, [rbp-424h]
.text:000000000000A06D                 movsxd  rbx, ecx
.text:000000000000A070                 add     rbx, r14
.text:000000000000A073                 mov     [rax], edi
.text:000000000000A075                 jmp     loc_9CC4
.text:000000000000A075 ; ---------------------------------------------------------------------------
.text:000000000000A07A                 align 20h
.text:000000000000A080
.text:000000000000A080 loc_A080:                               ; CODE XREF: vasnprintf+609↑j
.text:000000000000A080                 cmp     r15, [rbp+src]
.text:000000000000A087                 jz      short loc_A092
.text:000000000000A089                 test    r15, r15
.text:000000000000A08C                 jnz     loc_A149
.text:000000000000A092
.text:000000000000A092 loc_A092:                               ; CODE XREF: vasnprintf+E57↑j
.text:000000000000A092                                         ; vasnprintf+F21↓j
.text:000000000000A092                 mov     rax, [rbp+ptr]
.text:000000000000A099                 test    rax, rax
.text:000000000000A09C                 jz      short loc_A0A6
.text:000000000000A09E                 mov     rdi, rax        ; ptr
.text:000000000000A0A1                 call    _free
.text:000000000000A0A6
.text:000000000000A0A6 loc_A0A6:                               ; CODE XREF: vasnprintf+E6C↑j
.text:000000000000A0A6                 mov     rax, [rbp+var_408]
.text:000000000000A0AD                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000A0B4                 add     rax, 20h ; ' '
.text:000000000000A0B8                 cmp     rdi, rax
.text:000000000000A0BB                 jz      short loc_A0C2
.text:000000000000A0BD                 call    _free
.text:000000000000A0C2
.text:000000000000A0C2 loc_A0C2:                               ; CODE XREF: vasnprintf+E8B↑j
.text:000000000000A0C2                 mov     rax, [rbp+var_410]
.text:000000000000A0C9                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000A0D0                 add     rax, 10h
.text:000000000000A0D4                 cmp     rdi, rax
.text:000000000000A0D7                 jz      short loc_A0DE
.text:000000000000A0D9                 call    _free
.text:000000000000A0DE
.text:000000000000A0DE loc_A0DE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000A0DE                 mov     rax, [rbp+n]
.text:000000000000A0E5                 xor     r15d, r15d
.text:000000000000A0E8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000A0EE                 jmp     loc_940F
.text:000000000000A0EE ; ---------------------------------------------------------------------------
.text:000000000000A0F3                 align 8
.text:000000000000A0F8
.text:000000000000A0F8 loc_A0F8:                               ; CODE XREF: vasnprintf+60↑j
.text:000000000000A0F8                 xor     r15d, r15d
.text:000000000000A0FB                 jmp     loc_940F
.text:000000000000A100 ; ---------------------------------------------------------------------------
.text:000000000000A100
.text:000000000000A100 loc_A100:                               ; CODE XREF: vasnprintf+D34↑j
.text:000000000000A100                                         ; vasnprintf+D3C↑j
.text:000000000000A100                 mov     r15, rcx
.text:000000000000A103                 jmp     loc_971B
.text:000000000000A103 ; ---------------------------------------------------------------------------
.text:000000000000A108                 align 10h
.text:000000000000A110
.text:000000000000A110 loc_A110:                               ; CODE XREF: vasnprintf+B10↑j
.text:000000000000A110                 js      loc_9395
.text:000000000000A116                 add     r12, r12
.text:000000000000A119                 cmp     r12, rax
.text:000000000000A11C                 jnb     loc_9D56
.text:000000000000A122
.text:000000000000A122 loc_A122:                               ; CODE XREF: vasnprintf+B1A↑j
.text:000000000000A122                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A126                 jz      loc_9395
.text:000000000000A12C                 mov     r12, rax
.text:000000000000A12F                 jmp     loc_9D56
.text:000000000000A134 ; ---------------------------------------------------------------------------
.text:000000000000A134
.text:000000000000A134 loc_A134:                               ; CODE XREF: vasnprintf+DC4↑j
.text:000000000000A134                                         ; vasnprintf+DCC↑j
.text:000000000000A134                 mov     r15, rcx
.text:000000000000A137                 jmp     loc_9CBF
.text:000000000000A13C ; ---------------------------------------------------------------------------
.text:000000000000A13C
.text:000000000000A13C loc_A13C:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000A13C                 mov     rdi, r15        ; ptr
.text:000000000000A13F                 call    _free
.text:000000000000A144                 jmp     loc_9992
.text:000000000000A149 ; ---------------------------------------------------------------------------
.text:000000000000A149
.text:000000000000A149 loc_A149:                               ; CODE XREF: vasnprintf+E5C↑j
.text:000000000000A149                 mov     rdi, r15        ; ptr
.text:000000000000A14C                 call    _free
.text:000000000000A151                 jmp     loc_A092
.text:000000000000A156 ; ---------------------------------------------------------------------------
.text:000000000000A156
.text:000000000000A156 def_978B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:000000000000A156                                         ; vasnprintf+43E↑j ...
.text:000000000000A156                 call    _abort          ; jumptable 000000000000978B default case, case 0
.text:000000000000A156                                         ; jumptable 0000000000009D30 default case
.text:000000000000A156 ; ---------------------------------------------------------------------------
.text:000000000000A15B                 align 20h
.text:000000000000A160
.text:000000000000A160 loc_A160:                               ; CODE XREF: vasnprintf+73↑j
.text:000000000000A160                 mov     rax, [rbp+var_408]
.text:000000000000A167                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000A16E                 add     rax, 20h ; ' '
.text:000000000000A172                 cmp     rdi, rax
.text:000000000000A175                 jz      short loc_A17C
.text:000000000000A177                 call    _free
.text:000000000000A17C
.text:000000000000A17C loc_A17C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000A17C                 mov     rax, [rbp+var_410]
.text:000000000000A183                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000A18A                 add     rax, 10h
.text:000000000000A18E                 cmp     rdi, rax
.text:000000000000A191                 jz      short loc_A198
.text:000000000000A193                 call    _free
.text:000000000000A198
.text:000000000000A198 loc_A198:                               ; CODE XREF: vasnprintf+F61↑j
.text:000000000000A198                 call    ___errno_location
.text:000000000000A19D                 xor     r15d, r15d
.text:000000000000A1A0                 mov     dword ptr [rax], 16h
.text:000000000000A1A6                 jmp     loc_940F
.text:000000000000A1AB ; ---------------------------------------------------------------------------
.text:000000000000A1AB
.text:000000000000A1AB loc_A1AB:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000A1AB                 mov     rbx, r14
.text:000000000000A1AE                 xor     eax, eax
.text:000000000000A1B0                 add     rbx, 1
.text:000000000000A1B4                 jb      loc_A2C0
.text:000000000000A1BA                 cmp     r12, rbx
.text:000000000000A1BD                 jnb     short loc_A20C
.text:000000000000A1BF                 test    r12, r12
.text:000000000000A1C2                 jnz     loc_A2F9
.text:000000000000A1C8                 cmp     rbx, 0Ch
.text:000000000000A1CC                 ja      loc_A2DE
.text:000000000000A1D2                 mov     r12d, 0Ch
.text:000000000000A1D8
.text:000000000000A1D8 loc_A1D8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:000000000000A1D8                                         ; vasnprintf+10D5↓j
.text:000000000000A1D8                 cmp     r15, [rbp+src]
.text:000000000000A1DF                 setz    r13b
.text:000000000000A1E3                 test    r15, r15
.text:000000000000A1E6                 jz      loc_A28C
.text:000000000000A1EC                 test    r13b, r13b
.text:000000000000A1EF                 jnz     loc_A28C
.text:000000000000A1F5                 mov     rsi, r12        ; size
.text:000000000000A1F8                 mov     rdi, r15        ; ptr
.text:000000000000A1FB                 call    _realloc
.text:000000000000A200                 test    rax, rax
.text:000000000000A203                 jz      loc_9E7B
.text:000000000000A209                 mov     r15, rax
.text:000000000000A20C
.text:000000000000A20C loc_A20C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000A20C                                         ; vasnprintf+108B↓j ...
.text:000000000000A20C                 cmp     r15, [rbp+src]
.text:000000000000A213                 mov     byte ptr [r15+r14], 0
.text:000000000000A218                 jz      short loc_A231
.text:000000000000A21A                 cmp     r12, rbx
.text:000000000000A21D                 jbe     short loc_A231
.text:000000000000A21F                 mov     rdi, r15        ; ptr
.text:000000000000A222                 mov     rsi, rbx        ; size
.text:000000000000A225                 call    _realloc
.text:000000000000A22A                 test    rax, rax
.text:000000000000A22D                 cmovnz  r15, rax
.text:000000000000A231
.text:000000000000A231 loc_A231:                               ; CODE XREF: vasnprintf+FE8↑j
.text:000000000000A231                                         ; vasnprintf+FED↑j
.text:000000000000A231                 mov     rax, [rbp+ptr]
.text:000000000000A238                 test    rax, rax
.text:000000000000A23B                 jz      short loc_A245
.text:000000000000A23D                 mov     rdi, rax        ; ptr
.text:000000000000A240                 call    _free
.text:000000000000A245
.text:000000000000A245 loc_A245:                               ; CODE XREF: vasnprintf+100B↑j
.text:000000000000A245                 mov     rax, [rbp+var_408]
.text:000000000000A24C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000A253                 add     rax, 20h ; ' '
.text:000000000000A257                 cmp     rdi, rax
.text:000000000000A25A                 jz      short loc_A261
.text:000000000000A25C                 call    _free
.text:000000000000A261
.text:000000000000A261 loc_A261:                               ; CODE XREF: vasnprintf+102A↑j
.text:000000000000A261                 mov     rax, [rbp+var_410]
.text:000000000000A268                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000A26F                 add     rax, 10h
.text:000000000000A273                 cmp     rdi, rax
.text:000000000000A276                 jz      short loc_A27D
.text:000000000000A278                 call    _free
.text:000000000000A27D
.text:000000000000A27D loc_A27D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000A27D                 mov     rax, [rbp+var_418]
.text:000000000000A284                 mov     [rax], r14
.text:000000000000A287                 jmp     loc_940F
.text:000000000000A28C ; ---------------------------------------------------------------------------
.text:000000000000A28C
.text:000000000000A28C loc_A28C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000A28C                                         ; vasnprintf+FBF↑j
.text:000000000000A28C                 mov     rdi, r12        ; size
.text:000000000000A28F                 call    _malloc
.text:000000000000A294                 test    rax, rax
.text:000000000000A297                 mov     rcx, rax
.text:000000000000A29A                 jz      loc_9395
.text:000000000000A2A0                 test    r14, r14
.text:000000000000A2A3                 jz      short loc_A310
.text:000000000000A2A5                 test    r13b, r13b
.text:000000000000A2A8                 jz      short loc_A310
.text:000000000000A2AA                 mov     rsi, r15        ; src
.text:000000000000A2AD                 mov     rdx, r14        ; n
.text:000000000000A2B0                 mov     rdi, rax        ; dest
.text:000000000000A2B3                 call    _memcpy
.text:000000000000A2B8                 mov     r15, rax
.text:000000000000A2BB                 jmp     loc_A20C
.text:000000000000A2C0 ; ---------------------------------------------------------------------------
.text:000000000000A2C0
.text:000000000000A2C0 loc_A2C0:                               ; CODE XREF: vasnprintf+F84↑j
.text:000000000000A2C0                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000A2C4                 mov     eax, 1
.text:000000000000A2C9                 jz      loc_A20C
.text:000000000000A2CF                 test    r12, r12
.text:000000000000A2D2                 jz      loc_9395
.text:000000000000A2D8                 js      loc_9395
.text:000000000000A2DE
.text:000000000000A2DE loc_A2DE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000A2DE                                         ; vasnprintf+10DB↓j
.text:000000000000A2DE                 test    rax, rax
.text:000000000000A2E1                 jnz     loc_9395
.text:000000000000A2E7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A2EB                 jz      loc_9395
.text:000000000000A2F1                 mov     r12, rbx
.text:000000000000A2F4                 jmp     loc_A1D8
.text:000000000000A2F9 ; ---------------------------------------------------------------------------
.text:000000000000A2F9
.text:000000000000A2F9 loc_A2F9:                               ; CODE XREF: vasnprintf+F92↑j
.text:000000000000A2F9                 js      loc_9395
.text:000000000000A2FF                 add     r12, r12
.text:000000000000A302                 cmp     r12, rbx
.text:000000000000A305                 jnb     loc_A1D8
.text:000000000000A30B                 jmp     short loc_A2DE
.text:000000000000A30B ; ---------------------------------------------------------------------------
.text:000000000000A30D                 align 10h
.text:000000000000A310
.text:000000000000A310 loc_A310:                               ; CODE XREF: vasnprintf+1073↑j
.text:000000000000A310                                         ; vasnprintf+1078↑j
.text:000000000000A310                 mov     r15, rcx
.text:000000000000A313                 jmp     loc_A20C
.text:000000000000A318 ; ---------------------------------------------------------------------------
.text:000000000000A318
.text:000000000000A318 loc_A318:                               ; CODE XREF: vasnprintf+627↑j
.text:000000000000A318                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000A31C                 jz      loc_9740
.text:000000000000A322                 jmp     loc_93A1
.text:000000000000A327 ; ---------------------------------------------------------------------------
.text:000000000000A327
.text:000000000000A327 loc_A327:                               ; CODE XREF: vasnprintf+1EF↑j
.text:000000000000A327                 call    ___stack_chk_fail
.text:000000000000A32C ; ---------------------------------------------------------------------------
.text:000000000000A32C
.text:000000000000A32C loc_A32C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000A32C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000A330                 mov     edx, 1
.text:000000000000A335                 jz      loc_971B
.text:000000000000A33B                 test    r12, r12
.text:000000000000A33E                 jz      loc_9395
.text:000000000000A344                 jns     loc_9F10
.text:000000000000A34A                 jmp     loc_9395
.text:000000000000A34A ; } // starts at 9230
.text:000000000000A34A vasnprintf      endp
.text:000000000000A34A
.text:000000000000A34A ; ---------------------------------------------------------------------------
.text:000000000000A34F                 align 10h
.text:000000000000A350
.text:000000000000A350 ; =============== S U B R O U T I N E =======================================
.text:000000000000A350
.text:000000000000A350
.text:000000000000A350                 public printf_fetchargs
.text:000000000000A350 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:000000000000A350 ; __unwind {
.text:000000000000A350                 cmp     qword ptr [rsi], 0
.text:000000000000A354                 mov     rax, [rsi+8]
.text:000000000000A358                 jz      short loc_A3BD
.text:000000000000A35A                 lea     r8, jpt_A386
.text:000000000000A361                 lea     r10, wide_null_string_2696
.text:000000000000A368                 lea     r9, aNull       ; "(NULL)"
.text:000000000000A36F                 xor     ecx, ecx
.text:000000000000A371                 nop     dword ptr [rax+00000000h]
.text:000000000000A378
.text:000000000000A378 loc_A378:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:000000000000A378                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000A37B                 ja      short def_A386  ; jumptable 000000000000A386 default case, case 0
.text:000000000000A37D                 mov     edx, [rax]
.text:000000000000A37F                 movsxd  rdx, ds:(jpt_A386 - 0E5E0h)[r8+rdx*4]
.text:000000000000A383                 add     rdx, r8
.text:000000000000A386                 jmp     rdx             ; switch jump
.text:000000000000A386 ; ---------------------------------------------------------------------------
.text:000000000000A388                 align 10h
.text:000000000000A390
.text:000000000000A390 loc_A390:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A390                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A390                 mov     rdx, [rdi+8]    ; jumptable 000000000000A386 case 12
.text:000000000000A394                 add     rdx, 0Fh
.text:000000000000A398                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000A39C                 lea     r11, [rdx+10h]
.text:000000000000A3A0                 mov     [rdi+8], r11
.text:000000000000A3A4                 fld     tbyte ptr [rdx]
.text:000000000000A3A6                 fstp    tbyte ptr [rax+10h]
.text:000000000000A3A9                 nop     dword ptr [rax+00000000h]
.text:000000000000A3B0
.text:000000000000A3B0 loc_A3B0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:000000000000A3B0                                         ; printf_fetchargs+BA↓j ...
.text:000000000000A3B0                 add     rcx, 1
.text:000000000000A3B4                 add     rax, 20h ; ' '
.text:000000000000A3B8                 cmp     [rsi], rcx
.text:000000000000A3BB                 ja      short loc_A378
.text:000000000000A3BD
.text:000000000000A3BD loc_A3BD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000A3BD                 xor     eax, eax
.text:000000000000A3BF                 retn
.text:000000000000A3C0 ; ---------------------------------------------------------------------------
.text:000000000000A3C0
.text:000000000000A3C0 def_A386:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:000000000000A3C0                                         ; printf_fetchargs+36↑j
.text:000000000000A3C0                                         ; DATA XREF: ...
.text:000000000000A3C0                 mov     eax, 0FFFFFFFFh ; jumptable 000000000000A386 default case, case 0
.text:000000000000A3C5                 retn
.text:000000000000A3C6 ; ---------------------------------------------------------------------------
.text:000000000000A3C6
.text:000000000000A3C6 loc_A3C6:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A3C6                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A3C6                 mov     r11d, [rdi]     ; jumptable 000000000000A386 cases 7-10,17-22
.text:000000000000A3C9                 cmp     r11d, 2Fh ; '/'
.text:000000000000A3CD                 ja      loc_A50A
.text:000000000000A3D3                 mov     edx, r11d
.text:000000000000A3D6                 add     rdx, [rdi+10h]
.text:000000000000A3DA                 add     r11d, 8
.text:000000000000A3DE                 mov     [rdi], r11d
.text:000000000000A3E1
.text:000000000000A3E1 loc_A3E1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:000000000000A3E1                 mov     rdx, [rdx]
.text:000000000000A3E4                 mov     [rax+10h], rdx
.text:000000000000A3E8                 jmp     short loc_A3B0
.text:000000000000A3EA ; ---------------------------------------------------------------------------
.text:000000000000A3EA
.text:000000000000A3EA loc_A3EA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A3EA                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A3EA                 mov     r11d, [rdi]     ; jumptable 000000000000A386 cases 5,6,13,14
.text:000000000000A3ED                 cmp     r11d, 2Fh ; '/'
.text:000000000000A3F1                 ja      loc_A52C
.text:000000000000A3F7                 mov     edx, r11d
.text:000000000000A3FA                 add     rdx, [rdi+10h]
.text:000000000000A3FE                 add     r11d, 8
.text:000000000000A402                 mov     [rdi], r11d
.text:000000000000A405
.text:000000000000A405 loc_A405:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:000000000000A405                 mov     edx, [rdx]
.text:000000000000A407                 mov     [rax+10h], edx
.text:000000000000A40A                 jmp     short loc_A3B0
.text:000000000000A40C ; ---------------------------------------------------------------------------
.text:000000000000A40C
.text:000000000000A40C loc_A40C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A40C                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A40C                 mov     r11d, [rdi]     ; jumptable 000000000000A386 cases 1,2
.text:000000000000A40F                 cmp     r11d, 2Fh ; '/'
.text:000000000000A413                 ja      loc_A51B
.text:000000000000A419                 mov     edx, r11d
.text:000000000000A41C                 add     rdx, [rdi+10h]
.text:000000000000A420                 add     r11d, 8
.text:000000000000A424                 mov     [rdi], r11d
.text:000000000000A427
.text:000000000000A427 loc_A427:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:000000000000A427                 mov     edx, [rdx]
.text:000000000000A429                 mov     [rax+10h], dl
.text:000000000000A42C                 jmp     short loc_A3B0
.text:000000000000A42E ; ---------------------------------------------------------------------------
.text:000000000000A42E
.text:000000000000A42E loc_A42E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A42E                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A42E                 mov     r11d, [rdi]     ; jumptable 000000000000A386 cases 3,4
.text:000000000000A431                 cmp     r11d, 2Fh ; '/'
.text:000000000000A435                 ja      loc_A4DA
.text:000000000000A43B                 mov     edx, r11d
.text:000000000000A43E                 add     rdx, [rdi+10h]
.text:000000000000A442                 add     r11d, 8
.text:000000000000A446                 mov     [rdi], r11d
.text:000000000000A449
.text:000000000000A449 loc_A449:                               ; CODE XREF: printf_fetchargs+196↓j
.text:000000000000A449                 mov     edx, [rdx]
.text:000000000000A44B                 mov     [rax+10h], dx
.text:000000000000A44F                 jmp     loc_A3B0
.text:000000000000A454 ; ---------------------------------------------------------------------------
.text:000000000000A454
.text:000000000000A454 loc_A454:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A454                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A454                 mov     r11d, [rdi]     ; jumptable 000000000000A386 case 15
.text:000000000000A457                 cmp     r11d, 2Fh ; '/'
.text:000000000000A45B                 ja      loc_A4EB
.text:000000000000A461                 mov     edx, r11d
.text:000000000000A464                 add     rdx, [rdi+10h]
.text:000000000000A468                 add     r11d, 8
.text:000000000000A46C                 mov     [rdi], r11d
.text:000000000000A46F
.text:000000000000A46F loc_A46F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000A46F                 mov     rdx, [rdx]
.text:000000000000A472                 test    rdx, rdx
.text:000000000000A475                 cmovz   rdx, r9
.text:000000000000A479                 mov     [rax+10h], rdx
.text:000000000000A47D                 jmp     loc_A3B0
.text:000000000000A482 ; ---------------------------------------------------------------------------
.text:000000000000A482
.text:000000000000A482 loc_A482:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A482                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A482                 mov     r11d, [rdi+4]   ; jumptable 000000000000A386 case 11
.text:000000000000A486                 cmp     r11d, 0AFh
.text:000000000000A48D                 ja      loc_A53D
.text:000000000000A493                 mov     edx, r11d
.text:000000000000A496                 add     rdx, [rdi+10h]
.text:000000000000A49A                 add     r11d, 10h
.text:000000000000A49E                 mov     [rdi+4], r11d
.text:000000000000A4A2
.text:000000000000A4A2 loc_A4A2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:000000000000A4A2                 movsd   xmm0, qword ptr [rdx]
.text:000000000000A4A6                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000A4AB                 jmp     loc_A3B0
.text:000000000000A4B0 ; ---------------------------------------------------------------------------
.text:000000000000A4B0
.text:000000000000A4B0 loc_A4B0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000A4B0                                         ; DATA XREF: .rodata:jpt_A386↓o
.text:000000000000A4B0                 mov     r11d, [rdi]     ; jumptable 000000000000A386 case 16
.text:000000000000A4B3                 cmp     r11d, 2Fh ; '/'
.text:000000000000A4B7                 ja      short loc_A4FC
.text:000000000000A4B9                 mov     edx, r11d
.text:000000000000A4BC                 add     rdx, [rdi+10h]
.text:000000000000A4C0                 add     r11d, 8
.text:000000000000A4C4                 mov     [rdi], r11d
.text:000000000000A4C7
.text:000000000000A4C7 loc_A4C7:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:000000000000A4C7                 mov     rdx, [rdx]
.text:000000000000A4CA                 test    rdx, rdx
.text:000000000000A4CD                 cmovz   rdx, r10
.text:000000000000A4D1                 mov     [rax+10h], rdx
.text:000000000000A4D5                 jmp     loc_A3B0
.text:000000000000A4DA ; ---------------------------------------------------------------------------
.text:000000000000A4DA
.text:000000000000A4DA loc_A4DA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000A4DA                 mov     rdx, [rdi+8]
.text:000000000000A4DE                 lea     r11, [rdx+8]
.text:000000000000A4E2                 mov     [rdi+8], r11
.text:000000000000A4E6                 jmp     loc_A449
.text:000000000000A4EB ; ---------------------------------------------------------------------------
.text:000000000000A4EB
.text:000000000000A4EB loc_A4EB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000A4EB                 mov     rdx, [rdi+8]
.text:000000000000A4EF                 lea     r11, [rdx+8]
.text:000000000000A4F3                 mov     [rdi+8], r11
.text:000000000000A4F7                 jmp     loc_A46F
.text:000000000000A4FC ; ---------------------------------------------------------------------------
.text:000000000000A4FC
.text:000000000000A4FC loc_A4FC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000A4FC                 mov     rdx, [rdi+8]
.text:000000000000A500                 lea     r11, [rdx+8]
.text:000000000000A504                 mov     [rdi+8], r11
.text:000000000000A508                 jmp     short loc_A4C7
.text:000000000000A50A ; ---------------------------------------------------------------------------
.text:000000000000A50A
.text:000000000000A50A loc_A50A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000A50A                 mov     rdx, [rdi+8]
.text:000000000000A50E                 lea     r11, [rdx+8]
.text:000000000000A512                 mov     [rdi+8], r11
.text:000000000000A516                 jmp     loc_A3E1
.text:000000000000A51B ; ---------------------------------------------------------------------------
.text:000000000000A51B
.text:000000000000A51B loc_A51B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000A51B                 mov     rdx, [rdi+8]
.text:000000000000A51F                 lea     r11, [rdx+8]
.text:000000000000A523                 mov     [rdi+8], r11
.text:000000000000A527                 jmp     loc_A427
.text:000000000000A52C ; ---------------------------------------------------------------------------
.text:000000000000A52C
.text:000000000000A52C loc_A52C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000A52C                 mov     rdx, [rdi+8]
.text:000000000000A530                 lea     r11, [rdx+8]
.text:000000000000A534                 mov     [rdi+8], r11
.text:000000000000A538                 jmp     loc_A405
.text:000000000000A53D ; ---------------------------------------------------------------------------
.text:000000000000A53D
.text:000000000000A53D loc_A53D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000A53D                 mov     rdx, [rdi+8]
.text:000000000000A541                 lea     r11, [rdx+8]
.text:000000000000A545                 mov     [rdi+8], r11
.text:000000000000A549                 jmp     loc_A4A2
.text:000000000000A549 ; } // starts at A350
.text:000000000000A549 printf_fetchargs endp
.text:000000000000A549
.text:000000000000A549 ; ---------------------------------------------------------------------------
.text:000000000000A54E                 align 10h
.text:000000000000A550 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:000000000000A550 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000000A550 ;
.text:000000000000A550 ; Source File : 'printf-parse.c'
.text:000000000000A550
.text:000000000000A550 ; =============== S U B R O U T I N E =======================================
.text:000000000000A550
.text:000000000000A550 ; Attributes: info_from_lumina
.text:000000000000A550
.text:000000000000A550 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:000000000000A550                 public printf_parse
.text:000000000000A550 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:000000000000A550
.text:000000000000A550 src             = qword ptr -80h
.text:000000000000A550 var_78          = qword ptr -78h
.text:000000000000A550 var_70          = qword ptr -70h
.text:000000000000A550 var_68          = qword ptr -68h
.text:000000000000A550 var_60          = qword ptr -60h
.text:000000000000A550 var_58          = qword ptr -58h
.text:000000000000A550 var_50          = qword ptr -50h
.text:000000000000A550 var_48          = qword ptr -48h
.text:000000000000A550 var_40          = qword ptr -40h
.text:000000000000A550
.text:000000000000A550 ; __unwind {
.text:000000000000A550                 push    r15
.text:000000000000A552                 push    r14
.text:000000000000A554                 lea     rcx, [rsi+20h]
.text:000000000000A558                 push    r13
.text:000000000000A55A                 push    r12
.text:000000000000A55C                 lea     rax, [rdx+10h]
.text:000000000000A560                 push    rbp
.text:000000000000A561                 push    rbx
.text:000000000000A562                 mov     r14, rsi
.text:000000000000A565                 mov     r15, rdx
.text:000000000000A568                 xor     ebx, ebx
.text:000000000000A56A                 mov     r9d, 7
.text:000000000000A570                 sub     rsp, 58h
.text:000000000000A574                 mov     r10d, 7
.text:000000000000A57A                 mov     qword ptr [rsi], 0
.text:000000000000A581                 mov     [rsi+8], rcx
.text:000000000000A585                 mov     [rsp+88h+var_60], rcx
.text:000000000000A58A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000A591                 mov     qword ptr [rdx], 0
.text:000000000000A598                 mov     [rsp+88h+src], rax
.text:000000000000A59D                 mov     [rdx+8], rax
.text:000000000000A5A1                 mov     [rsp+88h+var_70], 0
.text:000000000000A5AA                 mov     [rsp+88h+var_78], 0
.text:000000000000A5B3                 mov     [rsp+88h+var_68], 0
.text:000000000000A5BC                 jmp     short loc_A5CB
.text:000000000000A5BC ; ---------------------------------------------------------------------------
.text:000000000000A5BE                 align 20h
.text:000000000000A5C0
.text:000000000000A5C0 loc_A5C0:                               ; CODE XREF: printf_parse+80↓j
.text:000000000000A5C0                 cmp     al, 25h ; '%'
.text:000000000000A5C2                 lea     rbp, [rdi+1]
.text:000000000000A5C6                 jz      short loc_A608
.text:000000000000A5C8
.text:000000000000A5C8 loc_A5C8:                               ; CODE XREF: printf_parse+35B↓j
.text:000000000000A5C8                                         ; printf_parse+364↓j
.text:000000000000A5C8                 mov     rdi, rbp
.text:000000000000A5CB
.text:000000000000A5CB loc_A5CB:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000A5CB                 movzx   eax, byte ptr [rdi]
.text:000000000000A5CE                 test    al, al
.text:000000000000A5D0                 jnz     short loc_A5C0
.text:000000000000A5D2                 lea     rax, [rbx+rbx*4]
.text:000000000000A5D6                 lea     rax, [rbx+rax*2]
.text:000000000000A5DA                 mov     [rcx+rax*8], rdi
.text:000000000000A5DE                 mov     rax, [rsp+88h+var_78]
.text:000000000000A5E3                 mov     [r14+10h], rax
.text:000000000000A5E7                 mov     rax, [rsp+88h+var_70]
.text:000000000000A5EC                 mov     [r14+18h], rax
.text:000000000000A5F0                 xor     eax, eax
.text:000000000000A5F2
.text:000000000000A5F2 loc_A5F2:                               ; CODE XREF: printf_parse+87E↓j
.text:000000000000A5F2                                         ; printf_parse+B1C↓j
.text:000000000000A5F2                 add     rsp, 58h
.text:000000000000A5F6                 pop     rbx
.text:000000000000A5F7                 pop     rbp
.text:000000000000A5F8                 pop     r12
.text:000000000000A5FA                 pop     r13
.text:000000000000A5FC                 pop     r14
.text:000000000000A5FE                 pop     r15
.text:000000000000A600                 retn
.text:000000000000A600 ; ---------------------------------------------------------------------------
.text:000000000000A601                 align 8
.text:000000000000A608
.text:000000000000A608 loc_A608:                               ; CODE XREF: printf_parse+76↑j
.text:000000000000A608                 lea     rax, [rbx+rbx*4]
.text:000000000000A60C                 mov     r13, r8
.text:000000000000A60F                 lea     rax, [rbx+rax*2]
.text:000000000000A613                 lea     r12, [rcx+rax*8]
.text:000000000000A617                 mov     [r12], rdi
.text:000000000000A61B                 mov     dword ptr [r12+10h], 0
.text:000000000000A624                 mov     qword ptr [r12+18h], 0
.text:000000000000A62D                 mov     qword ptr [r12+20h], 0
.text:000000000000A636                 mov     [r12+28h], r8
.text:000000000000A63B                 mov     qword ptr [r12+30h], 0
.text:000000000000A644                 mov     qword ptr [r12+38h], 0
.text:000000000000A64D                 mov     [r12+40h], r8
.text:000000000000A652                 mov     [r12+50h], r8
.text:000000000000A657                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000A65B                 lea     eax, [rbx-30h]
.text:000000000000A65E                 cmp     al, 9
.text:000000000000A660                 ja      short loc_A69E
.text:000000000000A662                 jmp     loc_AA9A
.text:000000000000A662 ; ---------------------------------------------------------------------------
.text:000000000000A667                 align 10h
.text:000000000000A670
.text:000000000000A670 loc_A670:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000A670                 cmp     bl, 2Dh ; '-'
.text:000000000000A673                 jz      short loc_A6B8
.text:000000000000A675                 cmp     bl, 2Bh ; '+'
.text:000000000000A678                 jz      short loc_A6C0
.text:000000000000A67A                 cmp     bl, 20h ; ' '
.text:000000000000A67D                 jz      short loc_A6D0
.text:000000000000A67F                 cmp     bl, 23h ; '#'
.text:000000000000A682                 jz      short loc_A6E0
.text:000000000000A684                 cmp     bl, 30h ; '0'
.text:000000000000A687                 jz      short loc_A6F0
.text:000000000000A689                 cmp     bl, 49h ; 'I'
.text:000000000000A68C                 jnz     short loc_A700
.text:000000000000A68E                 or      dword ptr [r12+10h], 40h
.text:000000000000A694                 nop     dword ptr [rax+00h]
.text:000000000000A698
.text:000000000000A698 loc_A698:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000A698                                         ; printf_parse+16E↓j ...
.text:000000000000A698                 movzx   ebx, byte ptr [rax]
.text:000000000000A69B                 mov     rbp, rax
.text:000000000000A69E
.text:000000000000A69E loc_A69E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000A69E                                         ; printf_parse+565↓j ...
.text:000000000000A69E                 lea     rax, [rbp+1]
.text:000000000000A6A2                 cmp     bl, 27h ; '''
.text:000000000000A6A5                 mov     rdx, rax
.text:000000000000A6A8                 jnz     short loc_A670
.text:000000000000A6AA                 or      dword ptr [r12+10h], 1
.text:000000000000A6B0                 jmp     short loc_A698
.text:000000000000A6B0 ; ---------------------------------------------------------------------------
.text:000000000000A6B2                 align 8
.text:000000000000A6B8
.text:000000000000A6B8 loc_A6B8:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000A6B8                 or      dword ptr [r12+10h], 2
.text:000000000000A6BE                 jmp     short loc_A698
.text:000000000000A6C0 ; ---------------------------------------------------------------------------
.text:000000000000A6C0
.text:000000000000A6C0 loc_A6C0:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000A6C0                 or      dword ptr [r12+10h], 4
.text:000000000000A6C6                 jmp     short loc_A698
.text:000000000000A6C6 ; ---------------------------------------------------------------------------
.text:000000000000A6C8                 align 10h
.text:000000000000A6D0
.text:000000000000A6D0 loc_A6D0:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000A6D0                 or      dword ptr [r12+10h], 8
.text:000000000000A6D6                 jmp     short loc_A698
.text:000000000000A6D6 ; ---------------------------------------------------------------------------
.text:000000000000A6D8                 align 20h
.text:000000000000A6E0
.text:000000000000A6E0 loc_A6E0:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000A6E0                 or      dword ptr [r12+10h], 10h
.text:000000000000A6E6                 jmp     short loc_A698
.text:000000000000A6E6 ; ---------------------------------------------------------------------------
.text:000000000000A6E8                 align 10h
.text:000000000000A6F0
.text:000000000000A6F0 loc_A6F0:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000A6F0                 or      dword ptr [r12+10h], 20h
.text:000000000000A6F6                 jmp     short loc_A698
.text:000000000000A6F6 ; ---------------------------------------------------------------------------
.text:000000000000A6F8                 align 20h
.text:000000000000A700
.text:000000000000A700 loc_A700:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000A700                 cmp     bl, 2Ah ; '*'
.text:000000000000A703                 jz      loc_A8B9
.text:000000000000A709                 lea     ecx, [rbx-30h]
.text:000000000000A70C                 cmp     cl, 9
.text:000000000000A70F                 jbe     loc_AB27
.text:000000000000A715
.text:000000000000A715 loc_A715:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000A715                                         ; printf_parse+96C↓j
.text:000000000000A715                 cmp     bl, 2Eh ; '.'
.text:000000000000A718                 jz      loc_A9EF
.text:000000000000A71E
.text:000000000000A71E loc_A71E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000A71E                                         ; printf_parse+545↓j ...
.text:000000000000A71E                 xor     eax, eax
.text:000000000000A720                 mov     esi, 1
.text:000000000000A725                 jmp     short loc_A757
.text:000000000000A725 ; ---------------------------------------------------------------------------
.text:000000000000A727                 align 10h
.text:000000000000A730
.text:000000000000A730 loc_A730:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000A730                 cmp     bl, 4Ch ; 'L'
.text:000000000000A733                 jz      short loc_A770
.text:000000000000A735                 cmp     bl, 6Ch ; 'l'
.text:000000000000A738                 jz      short loc_A750
.text:000000000000A73A                 cmp     bl, 6Ah ; 'j'
.text:000000000000A73D                 jz      short loc_A750
.text:000000000000A73F                 mov     edx, ebx
.text:000000000000A741                 and     edx, 0FFFFFFDFh
.text:000000000000A744                 cmp     dl, 5Ah ; 'Z'
.text:000000000000A747                 jz      short loc_A750
.text:000000000000A749                 cmp     bl, 74h ; 't'
.text:000000000000A74C                 jnz     short loc_A778
.text:000000000000A74E                 xchg    ax, ax
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000A750                                         ; printf_parse+1ED↑j ...
.text:000000000000A750                 add     eax, 8
.text:000000000000A753
.text:000000000000A753 loc_A753:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000A753                                         ; printf_parse+223↓j
.text:000000000000A753                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A757
.text:000000000000A757 loc_A757:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000A757                 add     rbp, 1
.text:000000000000A75B                 cmp     bl, 68h ; 'h'
.text:000000000000A75E                 jnz     short loc_A730
.text:000000000000A760                 mov     ecx, eax
.text:000000000000A762                 mov     edx, esi
.text:000000000000A764                 and     ecx, 1
.text:000000000000A767                 shl     edx, cl
.text:000000000000A769                 or      eax, edx
.text:000000000000A76B                 jmp     short loc_A753
.text:000000000000A76B ; ---------------------------------------------------------------------------
.text:000000000000A76D                 align 10h
.text:000000000000A770
.text:000000000000A770 loc_A770:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000A770                 or      eax, 4
.text:000000000000A773                 jmp     short loc_A753
.text:000000000000A773 ; ---------------------------------------------------------------------------
.text:000000000000A775                 align 8
.text:000000000000A778
.text:000000000000A778 loc_A778:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000A778                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000A77B                 cmp     dl, 53h
.text:000000000000A77E                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A784                 lea     rcx, jpt_A795
.text:000000000000A78B                 movzx   edx, dl
.text:000000000000A78E                 movsxd  rdx, ds:(jpt_A795 - 0E65Ch)[rcx+rdx*4]
.text:000000000000A792                 add     rdx, rcx
.text:000000000000A795                 jmp     rdx             ; switch jump
.text:000000000000A797 ; ---------------------------------------------------------------------------
.text:000000000000A797
.text:000000000000A797 loc_A797:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A797                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000A797                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000A79D                 mov     ebx, 73h ; 's'
.text:000000000000A7A2                 nop     word ptr [rax+rax+00h]
.text:000000000000A7A8
.text:000000000000A7A8 loc_A7A8:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000A7A8                                         ; printf_parse+70D↓j ...
.text:000000000000A7A8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000A7AC                 jz      loc_AE67
.text:000000000000A7B2                 mov     [r12+50h], r13
.text:000000000000A7B7
.text:000000000000A7B7 loc_A7B7:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000A7B7                 cmp     r9, r13
.text:000000000000A7BA                 mov     rcx, [r15+8]
.text:000000000000A7BE                 jbe     loc_ADE0
.text:000000000000A7C4
.text:000000000000A7C4 loc_A7C4:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000A7C4                 mov     rax, [r15]
.text:000000000000A7C7                 mov     rdx, rax
.text:000000000000A7CA                 shl     rdx, 5
.text:000000000000A7CE                 add     rdx, rcx
.text:000000000000A7D1                 cmp     rax, r13
.text:000000000000A7D4                 ja      short loc_A7F6
.text:000000000000A7D6                 db      2Eh
.text:000000000000A7D6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A7E0
.text:000000000000A7E0 loc_A7E0:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000A7E0                 add     rax, 1
.text:000000000000A7E4                 mov     dword ptr [rdx], 0
.text:000000000000A7EA                 add     rdx, 20h ; ' '
.text:000000000000A7EE                 cmp     rax, r13
.text:000000000000A7F1                 jbe     short loc_A7E0
.text:000000000000A7F3                 mov     [r15], rax
.text:000000000000A7F6
.text:000000000000A7F6 loc_A7F6:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000A7F6                 shl     r13, 5
.text:000000000000A7FA                 lea     rax, [rcx+r13]
.text:000000000000A7FE                 mov     edx, [rax]
.text:000000000000A800                 test    edx, edx
.text:000000000000A802                 jnz     loc_ADD3
.text:000000000000A808                 mov     [rax], r11d
.text:000000000000A80B
.text:000000000000A80B loc_A80B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000A80B                                         ; printf_parse+886↓j
.text:000000000000A80B                                         ; DATA XREF: ...
.text:000000000000A80B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000A810                 mov     rax, [r14]
.text:000000000000A813                 mov     [r12+8], rbp
.text:000000000000A818                 lea     rbx, [rax+1]
.text:000000000000A81C                 cmp     r10, rbx
.text:000000000000A81F                 mov     [r14], rbx
.text:000000000000A822                 ja      loc_A8B0
.text:000000000000A828                 test    r10, r10
.text:000000000000A82B                 js      loc_B1D7
.text:000000000000A831                 add     r10, r10
.text:000000000000A834                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000A83E                 cmp     r10, rax
.text:000000000000A841                 ja      loc_B1D7
.text:000000000000A847                 lea     rax, [r10+r10*4]
.text:000000000000A84B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000A84F                 cmp     [rsp+88h+var_60], rdi
.text:000000000000A854                 mov     [rsp+88h+var_48], r9
.text:000000000000A859                 mov     [rsp+88h+var_50], r10
.text:000000000000A85E                 lea     rax, [r10+rax*2]
.text:000000000000A862                 mov     [rsp+88h+var_58], r8
.text:000000000000A867                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000A86F                 jz      loc_AF2D
.text:000000000000A875                 call    _realloc        ; PIC mode
.text:000000000000A87A                 test    rax, rax
.text:000000000000A87D                 mov     rcx, rax
.text:000000000000A880                 mov     r8, [rsp+88h+var_58]
.text:000000000000A885                 mov     r10, [rsp+88h+var_50]
.text:000000000000A88A                 mov     r9, [rsp+88h+var_48]
.text:000000000000A88F                 jz      loc_B1D7
.text:000000000000A895                 mov     rax, [rsp+88h+var_60]
.text:000000000000A89A                 cmp     rax, [r14+8]
.text:000000000000A89E                 mov     rbx, [r14]
.text:000000000000A8A1                 jz      loc_AF50
.text:000000000000A8A7
.text:000000000000A8A7 loc_A8A7:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000A8A7                 mov     [r14+8], rcx
.text:000000000000A8AB                 jmp     loc_A5C8
.text:000000000000A8B0 ; ---------------------------------------------------------------------------
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000A8B0                 mov     rcx, [r14+8]
.text:000000000000A8B4                 jmp     loc_A5C8
.text:000000000000A8B9 ; ---------------------------------------------------------------------------
.text:000000000000A8B9
.text:000000000000A8B9 loc_A8B9:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000A8B9                 mov     rsi, [rsp+88h+var_78]
.text:000000000000A8BE                 mov     ecx, 1
.text:000000000000A8C3                 mov     [r12+18h], rbp
.text:000000000000A8C8                 mov     [r12+20h], rax
.text:000000000000A8CD                 test    rsi, rsi
.text:000000000000A8D0                 cmovnz  rcx, rsi
.text:000000000000A8D4                 mov     [rsp+88h+var_78], rcx
.text:000000000000A8D9                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000A8DD                 lea     esi, [rcx-30h]
.text:000000000000A8E0                 cmp     sil, 9
.text:000000000000A8E4                 jbe     loc_ABC5
.text:000000000000A8EA
.text:000000000000A8EA loc_A8EA:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000A8EA                 mov     rsi, [rsp+88h+var_68]
.text:000000000000A8EF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A8F3                 lea     rdx, [rsi+1]
.text:000000000000A8F7                 mov     [r12+28h], rsi
.text:000000000000A8FC                 jz      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000A902                 mov     rbx, [rsp+88h+var_68]
.text:000000000000A907                 mov     rbp, rax
.text:000000000000A90A                 mov     [rsp+88h+var_68], rdx
.text:000000000000A90F
.text:000000000000A90F loc_A90F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000A90F                 cmp     r9, rbx
.text:000000000000A912                 mov     rcx, [r15+8]
.text:000000000000A916                 ja      loc_AF92
.text:000000000000A91C                 add     r9, r9
.text:000000000000A91F                 lea     rax, [rbx+1]
.text:000000000000A923                 cmp     r9, rbx
.text:000000000000A926                 cmovbe  r9, rax
.text:000000000000A92A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000A934                 cmp     r9, rax
.text:000000000000A937                 ja      loc_B1DB
.text:000000000000A93D                 mov     rsi, r9
.text:000000000000A940                 mov     [rsp+88h+var_48], r9
.text:000000000000A945                 mov     [rsp+88h+var_50], r10
.text:000000000000A94A                 shl     rsi, 5          ; size
.text:000000000000A94E                 cmp     [rsp+88h+src], rcx
.text:000000000000A953                 mov     [rsp+88h+var_58], r8
.text:000000000000A958                 jz      loc_B071
.text:000000000000A95E                 mov     rdi, rcx        ; ptr
.text:000000000000A961                 call    _realloc        ; PIC mode
.text:000000000000A966                 mov     rdx, [r15+8]
.text:000000000000A96A                 mov     r8, [rsp+88h+var_58]
.text:000000000000A96F                 mov     rcx, rax
.text:000000000000A972                 mov     r10, [rsp+88h+var_50]
.text:000000000000A977                 mov     r9, [rsp+88h+var_48]
.text:000000000000A97C
.text:000000000000A97C loc_A97C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000A97C                 test    rcx, rcx
.text:000000000000A97F                 jz      loc_B237
.text:000000000000A985                 cmp     [rsp+88h+src], rdx
.text:000000000000A98A                 mov     rax, [r15]
.text:000000000000A98D                 jz      loc_B14B
.text:000000000000A993
.text:000000000000A993 loc_A993:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000A993                 mov     [r15+8], rcx
.text:000000000000A997
.text:000000000000A997 loc_A997:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000A997                 mov     rdx, rax
.text:000000000000A99A                 shl     rdx, 5
.text:000000000000A99E                 add     rdx, rcx
.text:000000000000A9A1                 cmp     rax, rbx
.text:000000000000A9A4                 ja      short loc_A9C6
.text:000000000000A9A6                 db      2Eh
.text:000000000000A9A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A9B0
.text:000000000000A9B0 loc_A9B0:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000A9B0                 add     rax, 1
.text:000000000000A9B4                 mov     dword ptr [rdx], 0
.text:000000000000A9BA                 add     rdx, 20h ; ' '
.text:000000000000A9BE                 cmp     rax, rbx
.text:000000000000A9C1                 jbe     short loc_A9B0
.text:000000000000A9C3                 mov     [r15], rax
.text:000000000000A9C6
.text:000000000000A9C6 loc_A9C6:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000A9C6                 shl     rbx, 5
.text:000000000000A9CA                 lea     rax, [rcx+rbx]
.text:000000000000A9CE                 mov     edx, [rax]
.text:000000000000A9D0                 test    edx, edx
.text:000000000000A9D2                 jnz     loc_AEAB
.text:000000000000A9D8                 mov     dword ptr [rax], 5
.text:000000000000A9DE                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000A9E2                 lea     rdx, [rbp+1]
.text:000000000000A9E6                 cmp     bl, 2Eh ; '.'
.text:000000000000A9E9                 jnz     loc_A71E
.text:000000000000A9EF
.text:000000000000A9EF loc_A9EF:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000A9EF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000A9F3                 mov     [r12+30h], rbp
.text:000000000000A9F8                 jnz     loc_AB7E
.text:000000000000A9FE                 mov     rsi, [rsp+88h+var_70]
.text:000000000000AA03                 lea     r11, [rbp+2]
.text:000000000000AA07                 mov     eax, 2
.text:000000000000AA0C                 mov     [r12+38h], r11
.text:000000000000AA11                 cmp     rsi, 2
.text:000000000000AA15                 cmovnb  rax, rsi
.text:000000000000AA19                 mov     [rsp+88h+var_70], rax
.text:000000000000AA1E                 movsx   eax, byte ptr [rbp+2]
.text:000000000000AA22                 lea     edx, [rax-30h]
.text:000000000000AA25                 cmp     dl, 9
.text:000000000000AA28                 jbe     loc_B0BC
.text:000000000000AA2E
.text:000000000000AA2E loc_AA2E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000AA2E                 mov     rbx, [r12+40h]
.text:000000000000AA33                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AA37                 jz      loc_B095
.text:000000000000AA3D
.text:000000000000AA3D loc_AA3D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000AA3D                                         ; printf_parse+C59↓j
.text:000000000000AA3D                 cmp     r9, rbx
.text:000000000000AA40                 mov     rcx, [r15+8]
.text:000000000000AA44                 jbe     loc_AFAF
.text:000000000000AA4A                 mov     rax, [r15]
.text:000000000000AA4D
.text:000000000000AA4D loc_AA4D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000AA4D                 mov     rdx, rax
.text:000000000000AA50                 shl     rdx, 5
.text:000000000000AA54                 add     rdx, rcx
.text:000000000000AA57                 cmp     rax, rbx
.text:000000000000AA5A                 ja      short loc_AA76
.text:000000000000AA5C                 nop     dword ptr [rax+00h]
.text:000000000000AA60
.text:000000000000AA60 loc_AA60:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000AA60                 add     rax, 1
.text:000000000000AA64                 mov     dword ptr [rdx], 0
.text:000000000000AA6A                 add     rdx, 20h ; ' '
.text:000000000000AA6E                 cmp     rax, rbx
.text:000000000000AA71                 jbe     short loc_AA60
.text:000000000000AA73                 mov     [r15], rax
.text:000000000000AA76
.text:000000000000AA76 loc_AA76:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000AA76                 shl     rbx, 5
.text:000000000000AA7A                 lea     rax, [rcx+rbx]
.text:000000000000AA7E                 mov     edx, [rax]
.text:000000000000AA80                 test    edx, edx
.text:000000000000AA82                 jnz     loc_AF9A
.text:000000000000AA88                 mov     dword ptr [rax], 5
.text:000000000000AA8E                 mov     rbp, r11
.text:000000000000AA91                 movzx   ebx, byte ptr [r11]
.text:000000000000AA95                 jmp     loc_A71E
.text:000000000000AA9A ; ---------------------------------------------------------------------------
.text:000000000000AA9A
.text:000000000000AA9A loc_AA9A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000AA9A                 mov     rax, rbp
.text:000000000000AA9D                 nop     dword ptr [rax]
.text:000000000000AAA0
.text:000000000000AAA0 loc_AAA0:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000AAA0                 add     rax, 1
.text:000000000000AAA4                 movzx   edx, byte ptr [rax]
.text:000000000000AAA7                 lea     ecx, [rdx-30h]
.text:000000000000AAAA                 cmp     cl, 9
.text:000000000000AAAD                 jbe     short loc_AAA0
.text:000000000000AAAF                 cmp     dl, 24h ; '$'
.text:000000000000AAB2                 mov     r13, r8
.text:000000000000AAB5                 jnz     loc_A69E
.text:000000000000AABB                 xor     edx, edx
.text:000000000000AABD
.text:000000000000AABD loc_AABD:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000AABD                 movsx   eax, bl
.text:000000000000AAC0                 mov     rdi, 1999999999999999h
.text:000000000000AACA                 mov     rsi, r8
.text:000000000000AACD                 sub     eax, 30h ; '0'
.text:000000000000AAD0                 cmp     rdx, rdi
.text:000000000000AAD3                 cdqe
.text:000000000000AAD5                 ja      short loc_AADE
.text:000000000000AAD7                 lea     rsi, [rdx+rdx*4]
.text:000000000000AADB                 add     rsi, rsi
.text:000000000000AADE
.text:000000000000AADE loc_AADE:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000AADE                 mov     rcx, rbp
.text:000000000000AAE1
.text:000000000000AAE1 loc_AAE1:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000AAE1                 add     rax, rsi
.text:000000000000AAE4                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000AAE8                 setb    sil
.text:000000000000AAEC                 add     rbp, 1
.text:000000000000AAF0                 mov     rdx, rax
.text:000000000000AAF3                 movzx   esi, sil
.text:000000000000AAF7                 test    rsi, rsi
.text:000000000000AAFA                 lea     edi, [rbx-30h]
.text:000000000000AAFD                 jnz     loc_AE8E
.text:000000000000AB03                 cmp     dil, 9
.text:000000000000AB07                 jbe     short loc_AABD
.text:000000000000AB09                 mov     r13, rax
.text:000000000000AB0C                 sub     r13, 1
.text:000000000000AB10                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000AB14                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AB1A                 lea     rbp, [rcx+2]
.text:000000000000AB1E                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000AB22                 jmp     loc_A69E
.text:000000000000AB27 ; ---------------------------------------------------------------------------
.text:000000000000AB27
.text:000000000000AB27 loc_AB27:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000AB27                 mov     [r12+18h], rbp
.text:000000000000AB2C                 movzx   edi, byte ptr [rbp+0]
.text:000000000000AB30                 mov     rsi, rbp
.text:000000000000AB33                 lea     ecx, [rdi-30h]
.text:000000000000AB36                 cmp     cl, 9
.text:000000000000AB39                 jbe     short loc_AB47
.text:000000000000AB3B                 jmp     short loc_AB70
.text:000000000000AB3B ; ---------------------------------------------------------------------------
.text:000000000000AB3D                 align 20h
.text:000000000000AB40
.text:000000000000AB40 loc_AB40:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000AB40                 mov     rbp, rax
.text:000000000000AB43                 add     rax, 1
.text:000000000000AB47
.text:000000000000AB47 loc_AB47:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000AB47                 movzx   edi, byte ptr [rax]
.text:000000000000AB4A                 lea     edx, [rdi-30h]
.text:000000000000AB4D                 cmp     dl, 9
.text:000000000000AB50                 jbe     short loc_AB40
.text:000000000000AB52                 mov     rcx, rax
.text:000000000000AB55                 lea     rdx, [rbp+2]
.text:000000000000AB59                 mov     rbp, rax
.text:000000000000AB5C                 sub     rcx, rsi
.text:000000000000AB5F                 mov     rsi, [rsp+88h+var_78]
.text:000000000000AB64                 cmp     rsi, rcx
.text:000000000000AB67                 cmovnb  rcx, rsi
.text:000000000000AB6B                 mov     [rsp+88h+var_78], rcx
.text:000000000000AB70
.text:000000000000AB70 loc_AB70:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000AB70                 mov     [r12+20h], rbp
.text:000000000000AB75                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000AB79                 jmp     loc_A715
.text:000000000000AB7E ; ---------------------------------------------------------------------------
.text:000000000000AB7E
.text:000000000000AB7E loc_AB7E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000AB7E                 movzx   eax, byte ptr [rbp+1]
.text:000000000000AB82                 sub     eax, 30h ; '0'
.text:000000000000AB85                 cmp     al, 9
.text:000000000000AB87                 ja      short loc_AB9E
.text:000000000000AB89                 nop     dword ptr [rax+00000000h]
.text:000000000000AB90
.text:000000000000AB90 loc_AB90:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000AB90                 add     rdx, 1
.text:000000000000AB94                 movzx   eax, byte ptr [rdx]
.text:000000000000AB97                 sub     eax, 30h ; '0'
.text:000000000000AB9A                 cmp     al, 9
.text:000000000000AB9C                 jbe     short loc_AB90
.text:000000000000AB9E
.text:000000000000AB9E loc_AB9E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000AB9E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000ABA3                 mov     rax, rdx
.text:000000000000ABA6                 mov     [r12+38h], rdx
.text:000000000000ABAB                 sub     rax, rbp
.text:000000000000ABAE                 movzx   ebx, byte ptr [rdx]
.text:000000000000ABB1                 mov     rbp, rdx
.text:000000000000ABB4                 cmp     rsi, rax
.text:000000000000ABB7                 cmovnb  rax, rsi
.text:000000000000ABBB                 mov     [rsp+88h+var_70], rax
.text:000000000000ABC0                 jmp     loc_A71E
.text:000000000000ABC5 ; ---------------------------------------------------------------------------
.text:000000000000ABC5
.text:000000000000ABC5 loc_ABC5:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000ABC5                 mov     rsi, rax
.text:000000000000ABC8
.text:000000000000ABC8 loc_ABC8:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000ABC8                 add     rsi, 1
.text:000000000000ABCC                 movzx   edi, byte ptr [rsi]
.text:000000000000ABCF                 lea     r11d, [rdi-30h]
.text:000000000000ABD3                 cmp     r11b, 9
.text:000000000000ABD7                 jbe     short loc_ABC8
.text:000000000000ABD9                 cmp     dil, 24h ; '$'
.text:000000000000ABDD                 jnz     loc_A8EA
.text:000000000000ABE3                 xor     esi, esi
.text:000000000000ABE5
.text:000000000000ABE5 loc_ABE5:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000ABE5                 movsx   eax, cl
.text:000000000000ABE8                 mov     rdi, 1999999999999999h
.text:000000000000ABF2                 mov     rcx, r8
.text:000000000000ABF5                 sub     eax, 30h ; '0'
.text:000000000000ABF8                 cmp     rsi, rdi
.text:000000000000ABFB                 cdqe
.text:000000000000ABFD                 ja      short loc_AC06
.text:000000000000ABFF                 lea     rcx, [rsi+rsi*4]
.text:000000000000AC03                 add     rcx, rcx
.text:000000000000AC06
.text:000000000000AC06 loc_AC06:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000AC06                 mov     rbp, rdx
.text:000000000000AC09
.text:000000000000AC09 loc_AC09:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000AC09                 xor     r11d, r11d
.text:000000000000AC0C                 add     rax, rcx
.text:000000000000AC0F                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000AC13                 setb    r11b
.text:000000000000AC17                 add     rdx, 1
.text:000000000000AC1B                 mov     rsi, rax
.text:000000000000AC1E                 test    r11, r11
.text:000000000000AC21                 lea     edi, [rcx-30h]
.text:000000000000AC24                 jnz     loc_B12E
.text:000000000000AC2A                 cmp     dil, 9
.text:000000000000AC2E                 jbe     short loc_ABE5
.text:000000000000AC30                 lea     rbx, [rax-1]
.text:000000000000AC34                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000AC38                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AC3E                 mov     [r12+28h], rbx
.text:000000000000AC43                 add     rbp, 2
.text:000000000000AC47                 jmp     loc_A90F
.text:000000000000AC4C ; ---------------------------------------------------------------------------
.text:000000000000AC4C
.text:000000000000AC4C loc_AC4C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AC4C                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AC4C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000AC4F                 mov     r11d, 16h
.text:000000000000AC55                 jg      loc_A7A8
.text:000000000000AC5B                 test    al, 4
.text:000000000000AC5D                 jnz     loc_A7A8
.text:000000000000AC63                 cmp     eax, 7
.text:000000000000AC66                 mov     r11d, 15h
.text:000000000000AC6C                 jg      loc_A7A8
.text:000000000000AC72                 test    al, 2
.text:000000000000AC74                 mov     r11d, 12h
.text:000000000000AC7A                 jnz     loc_A7A8
.text:000000000000AC80                 xor     r11d, r11d
.text:000000000000AC83                 test    al, 1
.text:000000000000AC85                 setz    r11b
.text:000000000000AC89                 add     r11d, 13h
.text:000000000000AC8D                 jmp     loc_A7A8
.text:000000000000AC8D ; ---------------------------------------------------------------------------
.text:000000000000AC92                 align 8
.text:000000000000AC98
.text:000000000000AC98 loc_AC98:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AC98                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AC98                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000AC9B                 cmp     eax, 7
.text:000000000000AC9E                 setnle  r11b
.text:000000000000ACA2                 add     r11d, 0Dh
.text:000000000000ACA6                 jmp     loc_A7A8
.text:000000000000ACAB ; ---------------------------------------------------------------------------
.text:000000000000ACAB
.text:000000000000ACAB loc_ACAB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000ACAB                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000ACAB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000ACAE                 mov     r11d, 9
.text:000000000000ACB4                 jg      loc_A7A8
.text:000000000000ACBA                 test    al, 4
.text:000000000000ACBC                 jnz     loc_A7A8
.text:000000000000ACC2                 cmp     eax, 7
.text:000000000000ACC5                 mov     r11d, 7
.text:000000000000ACCB                 jg      loc_A7A8
.text:000000000000ACD1                 test    al, 2
.text:000000000000ACD3                 mov     r11d, 1
.text:000000000000ACD9                 jnz     loc_A7A8
.text:000000000000ACDF                 and     eax, 1
.text:000000000000ACE2                 cmp     eax, 1
.text:000000000000ACE5                 sbb     r11d, r11d
.text:000000000000ACE8                 and     r11d, 2
.text:000000000000ACEC                 add     r11d, 3
.text:000000000000ACF0                 jmp     loc_A7A8
.text:000000000000ACF0 ; ---------------------------------------------------------------------------
.text:000000000000ACF5                 align 8
.text:000000000000ACF8
.text:000000000000ACF8 loc_ACF8:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000ACF8                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000ACF8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000ACFB                 cmp     eax, 7
.text:000000000000ACFE                 setnle  r11b
.text:000000000000AD02                 add     r11d, 0Fh
.text:000000000000AD06                 jmp     loc_A7A8
.text:000000000000AD0B ; ---------------------------------------------------------------------------
.text:000000000000AD0B
.text:000000000000AD0B loc_AD0B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AD0B                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AD0B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000AD0E                 mov     r11d, 0Ch
.text:000000000000AD14                 jg      loc_A7A8
.text:000000000000AD1A                 xor     r11d, r11d
.text:000000000000AD1D                 test    al, 4
.text:000000000000AD1F                 setnz   r11b
.text:000000000000AD23                 add     r11d, 0Bh
.text:000000000000AD27                 jmp     loc_A7A8
.text:000000000000AD2C ; ---------------------------------------------------------------------------
.text:000000000000AD2C
.text:000000000000AD2C loc_AD2C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AD2C                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AD2C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000AD32                 mov     ebx, 63h ; 'c'
.text:000000000000AD37                 jmp     loc_A7A8
.text:000000000000AD3C ; ---------------------------------------------------------------------------
.text:000000000000AD3C
.text:000000000000AD3C loc_AD3C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AD3C                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AD3C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000AD3F                 mov     r11d, 0Ah
.text:000000000000AD45                 jg      loc_A7A8
.text:000000000000AD4B                 test    al, 4
.text:000000000000AD4D                 jnz     loc_A7A8
.text:000000000000AD53                 cmp     eax, 7
.text:000000000000AD56                 mov     r11d, 8
.text:000000000000AD5C                 jg      loc_A7A8
.text:000000000000AD62                 test    al, 2
.text:000000000000AD64                 mov     r11d, 2
.text:000000000000AD6A                 jnz     loc_A7A8
.text:000000000000AD70                 and     eax, 1
.text:000000000000AD73                 cmp     eax, 1
.text:000000000000AD76                 sbb     r11d, r11d
.text:000000000000AD79                 and     r11d, 2
.text:000000000000AD7D                 add     r11d, 4
.text:000000000000AD81                 jmp     loc_A7A8
.text:000000000000AD81 ; ---------------------------------------------------------------------------
.text:000000000000AD86                 align 10h
.text:000000000000AD90
.text:000000000000AD90 loc_AD90:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000AD90                                         ; DATA XREF: .rodata:jpt_A795↓o
.text:000000000000AD90                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000AD96                 jmp     loc_A7A8
.text:000000000000AD9B ; ---------------------------------------------------------------------------
.text:000000000000AD9B
.text:000000000000AD9B def_A795:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000AD9B                                         ; printf_parse+245↑j ...
.text:000000000000AD9B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AD9F
.text:000000000000AD9F loc_AD9F:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000AD9F                                         ; printf_parse+95E↓j ...
.text:000000000000AD9F                 cmp     [rsp+88h+src], rcx
.text:000000000000ADA4                 jz      short loc_ADAE
.text:000000000000ADA6                 mov     rdi, rcx        ; ptr
.text:000000000000ADA9                 call    _free           ; PIC mode
.text:000000000000ADAE
.text:000000000000ADAE loc_ADAE:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000ADAE                 mov     rdi, [r14+8]    ; ptr
.text:000000000000ADB2                 cmp     [rsp+88h+var_60], rdi
.text:000000000000ADB7                 jz      short loc_ADBE
.text:000000000000ADB9                 call    _free           ; PIC mode
.text:000000000000ADBE
.text:000000000000ADBE loc_ADBE:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000ADBE                 call    ___errno_location ; PIC mode
.text:000000000000ADC3                 mov     dword ptr [rax], 16h
.text:000000000000ADC9                 mov     eax, 0FFFFFFFFh
.text:000000000000ADCE                 jmp     loc_A5F2
.text:000000000000ADD3 ; ---------------------------------------------------------------------------
.text:000000000000ADD3
.text:000000000000ADD3 loc_ADD3:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000ADD3                 cmp     edx, r11d
.text:000000000000ADD6                 jz      loc_A80B        ; jumptable 0000000000000245 case 37
.text:000000000000ADDC                 jmp     short loc_AD9F
.text:000000000000ADDC ; ---------------------------------------------------------------------------
.text:000000000000ADDE                 align 20h
.text:000000000000ADE0
.text:000000000000ADE0 loc_ADE0:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000ADE0                 add     r9, r9
.text:000000000000ADE3                 lea     rax, [r13+1]
.text:000000000000ADE7                 cmp     r9, r13
.text:000000000000ADEA                 cmovbe  r9, rax
.text:000000000000ADEE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000ADF8                 cmp     r9, rax
.text:000000000000ADFB                 ja      loc_B1DB
.text:000000000000AE01                 mov     rsi, r9
.text:000000000000AE04                 mov     [rsp+88h+var_40], r9
.text:000000000000AE09                 mov     [rsp+88h+var_48], r10
.text:000000000000AE0E                 shl     rsi, 5          ; size
.text:000000000000AE12                 cmp     [rsp+88h+src], rcx
.text:000000000000AE17                 mov     [rsp+88h+var_50], r8
.text:000000000000AE1C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000AE21                 jz      loc_AEC1
.text:000000000000AE27                 mov     rdi, rcx        ; ptr
.text:000000000000AE2A                 call    _realloc        ; PIC mode
.text:000000000000AE2F                 test    rax, rax
.text:000000000000AE32                 mov     rcx, rax
.text:000000000000AE35                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000AE3A                 mov     r8, [rsp+88h+var_50]
.text:000000000000AE3F                 mov     r10, [rsp+88h+var_48]
.text:000000000000AE44                 mov     r9, [rsp+88h+var_40]
.text:000000000000AE49                 jz      loc_B1D7
.text:000000000000AE4F                 mov     rax, [rsp+88h+src]
.text:000000000000AE54                 cmp     rax, [r15+8]
.text:000000000000AE58                 jz      loc_AEE9
.text:000000000000AE5E
.text:000000000000AE5E loc_AE5E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000AE5E                 mov     [r15+8], rcx
.text:000000000000AE62                 jmp     loc_A7C4
.text:000000000000AE67 ; ---------------------------------------------------------------------------
.text:000000000000AE67
.text:000000000000AE67 loc_AE67:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000AE67                 mov     rsi, [rsp+88h+var_68]
.text:000000000000AE6C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000AE70                 lea     rax, [rsi+1]
.text:000000000000AE74                 mov     [r12+50h], rsi
.text:000000000000AE79                 jz      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AE7F                 mov     r13, [rsp+88h+var_68]
.text:000000000000AE84                 mov     [rsp+88h+var_68], rax
.text:000000000000AE89                 jmp     loc_A7B7
.text:000000000000AE8E ; ---------------------------------------------------------------------------
.text:000000000000AE8E
.text:000000000000AE8E loc_AE8E:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000AE8E                 cmp     dil, 9
.text:000000000000AE92                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000AE98                 movsx   eax, bl
.text:000000000000AE9B                 mov     rsi, r8
.text:000000000000AE9E                 mov     rcx, rbp
.text:000000000000AEA1                 sub     eax, 30h ; '0'
.text:000000000000AEA4                 cdqe
.text:000000000000AEA6                 jmp     loc_AAE1
.text:000000000000AEAB ; ---------------------------------------------------------------------------
.text:000000000000AEAB
.text:000000000000AEAB loc_AEAB:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000AEAB                 cmp     edx, 5
.text:000000000000AEAE                 jnz     loc_AD9F
.text:000000000000AEB4                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000AEB8                 lea     rdx, [rbp+1]
.text:000000000000AEBC                 jmp     loc_A715
.text:000000000000AEC1 ; ---------------------------------------------------------------------------
.text:000000000000AEC1
.text:000000000000AEC1 loc_AEC1:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000AEC1                 mov     rdi, rsi        ; size
.text:000000000000AEC4                 call    _malloc         ; PIC mode
.text:000000000000AEC9                 test    rax, rax
.text:000000000000AECC                 mov     rcx, rax
.text:000000000000AECF                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000AED4                 mov     r8, [rsp+88h+var_50]
.text:000000000000AED9                 mov     r10, [rsp+88h+var_48]
.text:000000000000AEDE                 mov     r9, [rsp+88h+var_40]
.text:000000000000AEE3                 jz      loc_B04C
.text:000000000000AEE9
.text:000000000000AEE9 loc_AEE9:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000AEE9                 mov     rdx, [r15]
.text:000000000000AEEC                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000AEF1                 mov     rdi, rcx        ; dest
.text:000000000000AEF4                 mov     [rsp+88h+var_40], r9
.text:000000000000AEF9                 mov     [rsp+88h+var_48], r10
.text:000000000000AEFE                 mov     [rsp+88h+var_50], r8
.text:000000000000AF03                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000AF08                 shl     rdx, 5          ; n
.text:000000000000AF0C                 call    _memcpy         ; PIC mode
.text:000000000000AF11                 mov     r9, [rsp+88h+var_40]
.text:000000000000AF16                 mov     r10, [rsp+88h+var_48]
.text:000000000000AF1B                 mov     rcx, rax
.text:000000000000AF1E                 mov     r8, [rsp+88h+var_50]
.text:000000000000AF23                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000AF28                 jmp     loc_AE5E
.text:000000000000AF2D ; ---------------------------------------------------------------------------
.text:000000000000AF2D
.text:000000000000AF2D loc_AF2D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000AF2D                 mov     rdi, rsi        ; size
.text:000000000000AF30                 call    _malloc         ; PIC mode
.text:000000000000AF35                 test    rax, rax
.text:000000000000AF38                 mov     rcx, rax
.text:000000000000AF3B                 mov     r8, [rsp+88h+var_58]
.text:000000000000AF40                 mov     r10, [rsp+88h+var_50]
.text:000000000000AF45                 mov     r9, [rsp+88h+var_48]
.text:000000000000AF4A                 jz      loc_B039
.text:000000000000AF50
.text:000000000000AF50 loc_AF50:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000AF50                 lea     rax, [rbx+rbx*4]
.text:000000000000AF54                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000AF59                 mov     rdi, rcx        ; dest
.text:000000000000AF5C                 mov     [rsp+88h+var_48], r9
.text:000000000000AF61                 mov     [rsp+88h+var_50], r10
.text:000000000000AF66                 lea     rdx, [rbx+rax*2]
.text:000000000000AF6A                 mov     [rsp+88h+var_58], r8
.text:000000000000AF6F                 shl     rdx, 3          ; n
.text:000000000000AF73                 call    _memcpy         ; PIC mode
.text:000000000000AF78                 mov     rbx, [r14]
.text:000000000000AF7B                 mov     rcx, rax
.text:000000000000AF7E                 mov     r9, [rsp+88h+var_48]
.text:000000000000AF83                 mov     r10, [rsp+88h+var_50]
.text:000000000000AF88                 mov     r8, [rsp+88h+var_58]
.text:000000000000AF8D                 jmp     loc_A8A7
.text:000000000000AF92 ; ---------------------------------------------------------------------------
.text:000000000000AF92
.text:000000000000AF92 loc_AF92:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000AF92                 mov     rax, [r15]
.text:000000000000AF95                 jmp     loc_A997
.text:000000000000AF9A ; ---------------------------------------------------------------------------
.text:000000000000AF9A
.text:000000000000AF9A loc_AF9A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000AF9A                 cmp     edx, 5
.text:000000000000AF9D                 jnz     loc_AD9F
.text:000000000000AFA3                 movzx   ebx, byte ptr [r11]
.text:000000000000AFA7                 mov     rbp, r11
.text:000000000000AFAA                 jmp     loc_A71E
.text:000000000000AFAF ; ---------------------------------------------------------------------------
.text:000000000000AFAF
.text:000000000000AFAF loc_AFAF:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000AFAF                 add     r9, r9
.text:000000000000AFB2                 lea     rax, [rbx+1]
.text:000000000000AFB6                 cmp     r9, rbx
.text:000000000000AFB9                 cmovbe  r9, rax
.text:000000000000AFBD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000AFC7                 cmp     r9, rax
.text:000000000000AFCA                 ja      loc_B1DB
.text:000000000000AFD0                 mov     rsi, r9
.text:000000000000AFD3                 mov     [rsp+88h+var_40], r9
.text:000000000000AFD8                 mov     [rsp+88h+var_48], r10
.text:000000000000AFDD                 shl     rsi, 5          ; size
.text:000000000000AFE1                 cmp     [rsp+88h+src], rcx
.text:000000000000AFE6                 mov     [rsp+88h+var_50], r8
.text:000000000000AFEB                 mov     [rsp+88h+var_58], r11
.text:000000000000AFF0                 jz      loc_B1AE
.text:000000000000AFF6                 mov     rdi, rcx        ; ptr
.text:000000000000AFF9                 call    _realloc        ; PIC mode
.text:000000000000AFFE                 mov     rdx, [r15+8]
.text:000000000000B002                 mov     r11, [rsp+88h+var_58]
.text:000000000000B007                 mov     rcx, rax
.text:000000000000B00A                 mov     r8, [rsp+88h+var_50]
.text:000000000000B00F                 mov     r10, [rsp+88h+var_48]
.text:000000000000B014                 mov     r9, [rsp+88h+var_40]
.text:000000000000B019
.text:000000000000B019 loc_B019:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000B019                 test    rcx, rcx
.text:000000000000B01C                 jz      loc_B237
.text:000000000000B022                 cmp     [rsp+88h+src], rdx
.text:000000000000B027                 mov     rax, [r15]
.text:000000000000B02A                 jz      loc_B1F0
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000B030                 mov     [r15+8], rcx
.text:000000000000B034                 jmp     loc_AA4D
.text:000000000000B039 ; ---------------------------------------------------------------------------
.text:000000000000B039
.text:000000000000B039 loc_B039:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000B039                 mov     rcx, [r15+8]
.text:000000000000B03D                 cmp     [rsp+88h+src], rcx
.text:000000000000B042                 jz      short loc_B05C
.text:000000000000B044
.text:000000000000B044 loc_B044:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000B044                 mov     rdi, rcx        ; ptr
.text:000000000000B047                 call    _free           ; PIC mode
.text:000000000000B04C
.text:000000000000B04C loc_B04C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000B04C                                         ; printf_parse+C96↓j
.text:000000000000B04C                 mov     rdi, [r14+8]    ; ptr
.text:000000000000B050                 cmp     [rsp+88h+var_60], rdi
.text:000000000000B055                 jz      short loc_B05C
.text:000000000000B057                 call    _free           ; PIC mode
.text:000000000000B05C
.text:000000000000B05C loc_B05C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000B05C                                         ; printf_parse+B05↑j
.text:000000000000B05C                 call    ___errno_location ; PIC mode
.text:000000000000B061                 mov     dword ptr [rax], 0Ch
.text:000000000000B067                 mov     eax, 0FFFFFFFFh
.text:000000000000B06C                 jmp     loc_A5F2
.text:000000000000B071 ; ---------------------------------------------------------------------------
.text:000000000000B071
.text:000000000000B071 loc_B071:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000B071                 mov     rdi, rsi        ; size
.text:000000000000B074                 call    _malloc         ; PIC mode
.text:000000000000B079                 mov     rdx, [rsp+88h+src]
.text:000000000000B07E                 mov     rcx, rax
.text:000000000000B081                 mov     r9, [rsp+88h+var_48]
.text:000000000000B086                 mov     r10, [rsp+88h+var_50]
.text:000000000000B08B                 mov     r8, [rsp+88h+var_58]
.text:000000000000B090                 jmp     loc_A97C
.text:000000000000B095 ; ---------------------------------------------------------------------------
.text:000000000000B095
.text:000000000000B095 loc_B095:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000B095                 mov     rsi, [rsp+88h+var_68]
.text:000000000000B09A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B09E                 lea     rax, [rsi+1]
.text:000000000000B0A2                 mov     [r12+40h], rsi
.text:000000000000B0A7                 jz      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000B0AD                 mov     rbx, [rsp+88h+var_68]
.text:000000000000B0B2                 mov     [rsp+88h+var_68], rax
.text:000000000000B0B7                 jmp     loc_AA3D
.text:000000000000B0BC ; ---------------------------------------------------------------------------
.text:000000000000B0BC
.text:000000000000B0BC loc_B0BC:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000B0BC                 mov     rdx, r11
.text:000000000000B0BF
.text:000000000000B0BF loc_B0BF:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000B0BF                 add     rdx, 1
.text:000000000000B0C3                 movzx   ecx, byte ptr [rdx]
.text:000000000000B0C6                 lea     esi, [rcx-30h]
.text:000000000000B0C9                 cmp     sil, 9
.text:000000000000B0CD                 jbe     short loc_B0BF
.text:000000000000B0CF                 cmp     cl, 24h ; '$'
.text:000000000000B0D2                 jnz     loc_AA2E
.text:000000000000B0D8                 xor     ecx, ecx
.text:000000000000B0DA
.text:000000000000B0DA loc_B0DA:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000B0DA                 mov     rsi, 1999999999999999h
.text:000000000000B0E4                 sub     eax, 30h ; '0'
.text:000000000000B0E7                 mov     rdx, r8
.text:000000000000B0EA                 cmp     rcx, rsi
.text:000000000000B0ED                 cdqe
.text:000000000000B0EF                 ja      short loc_B0F8
.text:000000000000B0F1                 lea     rdx, [rcx+rcx*4]
.text:000000000000B0F5                 add     rdx, rdx
.text:000000000000B0F8
.text:000000000000B0F8 loc_B0F8:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000B0F8                 mov     rsi, r11
.text:000000000000B0FB
.text:000000000000B0FB loc_B0FB:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000B0FB                 xor     ebx, ebx
.text:000000000000B0FD                 add     rdx, rax
.text:000000000000B100                 movsx   eax, byte ptr [r11+1]
.text:000000000000B105                 setb    bl
.text:000000000000B108                 add     r11, 1
.text:000000000000B10C                 mov     rcx, rdx
.text:000000000000B10F                 test    rbx, rbx
.text:000000000000B112                 lea     edi, [rax-30h]
.text:000000000000B115                 jz      short loc_B188
.text:000000000000B117                 cmp     dil, 9
.text:000000000000B11B                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000B121                 sub     eax, 30h ; '0'
.text:000000000000B124                 mov     rdx, r8
.text:000000000000B127                 mov     rsi, r11
.text:000000000000B12A                 cdqe
.text:000000000000B12C                 jmp     short loc_B0FB
.text:000000000000B12E ; ---------------------------------------------------------------------------
.text:000000000000B12E
.text:000000000000B12E loc_B12E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000B12E                 cmp     dil, 9
.text:000000000000B132                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000B138                 movsx   eax, cl
.text:000000000000B13B                 mov     rbp, rdx
.text:000000000000B13E                 mov     rcx, r8
.text:000000000000B141                 sub     eax, 30h ; '0'
.text:000000000000B144                 cdqe
.text:000000000000B146                 jmp     loc_AC09
.text:000000000000B14B ; ---------------------------------------------------------------------------
.text:000000000000B14B
.text:000000000000B14B loc_B14B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000B14B                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000B150                 shl     rax, 5
.text:000000000000B154                 mov     rdi, rcx        ; dest
.text:000000000000B157                 mov     rdx, rax        ; n
.text:000000000000B15A                 mov     [rsp+88h+var_48], r9
.text:000000000000B15F                 mov     [rsp+88h+var_50], r10
.text:000000000000B164                 mov     [rsp+88h+var_58], r8
.text:000000000000B169                 call    _memcpy         ; PIC mode
.text:000000000000B16E                 mov     r9, [rsp+88h+var_48]
.text:000000000000B173                 mov     rcx, rax
.text:000000000000B176                 mov     r10, [rsp+88h+var_50]
.text:000000000000B17B                 mov     rax, [r15]
.text:000000000000B17E                 mov     r8, [rsp+88h+var_58]
.text:000000000000B183                 jmp     loc_A993
.text:000000000000B188 ; ---------------------------------------------------------------------------
.text:000000000000B188
.text:000000000000B188 loc_B188:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000B188                 cmp     dil, 9
.text:000000000000B18C                 jbe     loc_B0DA
.text:000000000000B192                 lea     rbx, [rdx-1]
.text:000000000000B196                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000B19A                 ja      def_A795        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000B1A0                 mov     [r12+40h], rbx
.text:000000000000B1A5                 lea     r11, [rsi+2]
.text:000000000000B1A9                 jmp     loc_AA3D
.text:000000000000B1AE ; ---------------------------------------------------------------------------
.text:000000000000B1AE
.text:000000000000B1AE loc_B1AE:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000B1AE                 mov     rdi, rsi        ; size
.text:000000000000B1B1                 call    _malloc         ; PIC mode
.text:000000000000B1B6                 mov     rdx, [rsp+88h+src]
.text:000000000000B1BB                 mov     rcx, rax
.text:000000000000B1BE                 mov     r9, [rsp+88h+var_40]
.text:000000000000B1C3                 mov     r10, [rsp+88h+var_48]
.text:000000000000B1C8                 mov     r8, [rsp+88h+var_50]
.text:000000000000B1CD                 mov     r11, [rsp+88h+var_58]
.text:000000000000B1D2                 jmp     loc_B019
.text:000000000000B1D7 ; ---------------------------------------------------------------------------
.text:000000000000B1D7
.text:000000000000B1D7 loc_B1D7:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000B1D7                                         ; printf_parse+2F1↑j ...
.text:000000000000B1D7                 mov     rcx, [r15+8]
.text:000000000000B1DB
.text:000000000000B1DB loc_B1DB:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000B1DB                                         ; printf_parse+8AB↑j ...
.text:000000000000B1DB                 cmp     [rsp+88h+src], rcx
.text:000000000000B1E0                 jnz     loc_B044
.text:000000000000B1E6                 jmp     loc_B04C
.text:000000000000B1E6 ; ---------------------------------------------------------------------------
.text:000000000000B1EB                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 loc_B1F0:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000B1F0                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000B1F5                 shl     rax, 5
.text:000000000000B1F9                 mov     rdi, rcx        ; dest
.text:000000000000B1FC                 mov     rdx, rax        ; n
.text:000000000000B1FF                 mov     [rsp+88h+var_40], r9
.text:000000000000B204                 mov     [rsp+88h+var_48], r10
.text:000000000000B209                 mov     [rsp+88h+var_50], r8
.text:000000000000B20E                 mov     [rsp+88h+var_58], r11
.text:000000000000B213                 call    _memcpy         ; PIC mode
.text:000000000000B218                 mov     r9, [rsp+88h+var_40]
.text:000000000000B21D                 mov     rcx, rax
.text:000000000000B220                 mov     r10, [rsp+88h+var_48]
.text:000000000000B225                 mov     rax, [r15]
.text:000000000000B228                 mov     r8, [rsp+88h+var_50]
.text:000000000000B22D                 mov     r11, [rsp+88h+var_58]
.text:000000000000B232                 jmp     loc_B030
.text:000000000000B237 ; ---------------------------------------------------------------------------
.text:000000000000B237
.text:000000000000B237 loc_B237:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000B237                                         ; printf_parse+ACC↑j
.text:000000000000B237                 mov     rcx, rdx
.text:000000000000B23A                 jmp     short loc_B1DB
.text:000000000000B23A ; } // starts at A550
.text:000000000000B23A printf_parse    endp
.text:000000000000B23A
.text:000000000000B23A ; ---------------------------------------------------------------------------
.text:000000000000B23C                 align 20h
.text:000000000000B240
.text:000000000000B240 ; =============== S U B R O U T I N E =======================================
.text:000000000000B240
.text:000000000000B240 ; Attributes: info_from_lumina
.text:000000000000B240
.text:000000000000B240 ; void _libc_csu_init(void)
.text:000000000000B240                 public __libc_csu_init
.text:000000000000B240 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000B240 ; __unwind {
.text:000000000000B240                 push    r15
.text:000000000000B242                 push    r14
.text:000000000000B244                 mov     r15, rdx
.text:000000000000B247                 push    r13
.text:000000000000B249                 push    r12
.text:000000000000B24B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000B252                 push    rbp
.text:000000000000B253                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000B25A                 push    rbx
.text:000000000000B25B                 mov     r13d, edi
.text:000000000000B25E                 mov     r14, rsi
.text:000000000000B261                 sub     rbp, r12
.text:000000000000B264                 sub     rsp, 8
.text:000000000000B268                 sar     rbp, 3
.text:000000000000B26C                 call    _init_proc
.text:000000000000B271                 test    rbp, rbp
.text:000000000000B274                 jz      short loc_B296
.text:000000000000B276                 xor     ebx, ebx
.text:000000000000B278                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B280
.text:000000000000B280 loc_B280:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000B280                 mov     rdx, r15
.text:000000000000B283                 mov     rsi, r14
.text:000000000000B286                 mov     edi, r13d
.text:000000000000B289                 call    ds:(__frame_dummy_init_array_entry - 20FA50h)[r12+rbx*8]
.text:000000000000B28D                 add     rbx, 1
.text:000000000000B291                 cmp     rbp, rbx
.text:000000000000B294                 jnz     short loc_B280
.text:000000000000B296
.text:000000000000B296 loc_B296:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000B296                 add     rsp, 8
.text:000000000000B29A                 pop     rbx
.text:000000000000B29B                 pop     rbp
.text:000000000000B29C                 pop     r12
.text:000000000000B29E                 pop     r13
.text:000000000000B2A0                 pop     r14
.text:000000000000B2A2                 pop     r15
.text:000000000000B2A4                 retn
.text:000000000000B2A4 ; } // starts at B240
.text:000000000000B2A4 __libc_csu_init endp
.text:000000000000B2A4
.text:000000000000B2A4 ; ---------------------------------------------------------------------------
.text:000000000000B2A5                 align 10h
.text:000000000000B2B0
.text:000000000000B2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2B0
.text:000000000000B2B0
.text:000000000000B2B0 ; void _libc_csu_fini(void)
.text:000000000000B2B0                 public __libc_csu_fini
.text:000000000000B2B0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000B2B0 ; __unwind {
.text:000000000000B2B0                 rep retn
.text:000000000000B2B0 ; } // starts at B2B0
.text:000000000000B2B0 __libc_csu_fini endp
.text:000000000000B2B0
.text:000000000000B2B0 ; ---------------------------------------------------------------------------
.text:000000000000B2B2                 align 20h
.text:000000000000B2C0
.text:000000000000B2C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2C0
.text:000000000000B2C0
.text:000000000000B2C0 atexit          proc near               ; CODE XREF: main+71↑p
.text:000000000000B2C0 ; __unwind {
.text:000000000000B2C0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000B2C7                 xor     esi, esi        ; obj
.text:000000000000B2C9                 jmp     ___cxa_atexit
.text:000000000000B2C9 ; } // starts at B2C0
.text:000000000000B2C9 atexit          endp
.text:000000000000B2C9
.text:000000000000B2C9 _text           ends
.text:000000000000B2C9
LOAD:000000000000B2CE ; ===========================================================================
LOAD:000000000000B2CE
LOAD:000000000000B2CE ; Segment type: Pure code
LOAD:000000000000B2CE ; Segment permissions: Read/Execute
LOAD:000000000000B2CE LOAD            segment byte public 'CODE' use64
LOAD:000000000000B2CE                 assume cs:LOAD
LOAD:000000000000B2CE                 ;org 0B2CEh
LOAD:000000000000B2CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B2CE                 align 10h
LOAD:000000000000B2CE LOAD            ends
LOAD:000000000000B2CE
.fini:000000000000B2D0 ; ===========================================================================
.fini:000000000000B2D0
.fini:000000000000B2D0 ; Segment type: Pure code
.fini:000000000000B2D0 ; Segment permissions: Read/Execute
.fini:000000000000B2D0 _fini           segment dword public 'CODE' use64
.fini:000000000000B2D0                 assume cs:_fini
.fini:000000000000B2D0                 ;org 0B2D0h
.fini:000000000000B2D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000B2D0
.fini:000000000000B2D0 ; =============== S U B R O U T I N E =======================================
.fini:000000000000B2D0
.fini:000000000000B2D0
.fini:000000000000B2D0                 public _term_proc
.fini:000000000000B2D0 _term_proc      proc near
.fini:000000000000B2D0                 sub     rsp, 8          ; _fini
.fini:000000000000B2D4                 add     rsp, 8
.fini:000000000000B2D8                 retn
.fini:000000000000B2D8 _term_proc      endp
.fini:000000000000B2D8
.fini:000000000000B2D8 _fini           ends
.fini:000000000000B2D8
LOAD:000000000000B2D9 ; ===========================================================================
LOAD:000000000000B2D9
LOAD:000000000000B2D9 ; Segment type: Pure code
LOAD:000000000000B2D9 ; Segment permissions: Read/Execute
LOAD:000000000000B2D9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000B2D9                 assume cs:LOAD
LOAD:000000000000B2D9                 ;org 0B2D9h
LOAD:000000000000B2D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B2D9                 align 20h
LOAD:000000000000B2D9 LOAD            ends
LOAD:000000000000B2D9
.rodata:000000000000B2E0 ; ===========================================================================
.rodata:000000000000B2E0
.rodata:000000000000B2E0 ; Segment type: Pure data
.rodata:000000000000B2E0 ; Segment permissions: Read
.rodata:000000000000B2E0 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000B2E0                 assume cs:_rodata
.rodata:000000000000B2E0                 ;org 0B2E0h
.rodata:000000000000B2E0                 public _IO_stdin_used
.rodata:000000000000B2E0 _IO_stdin_used  db    1
.rodata:000000000000B2E1                 db    0
.rodata:000000000000B2E2                 db    2
.rodata:000000000000B2E3                 db    0
.rodata:000000000000B2E4 aSpeedLuBaud    db 'speed %lu baud;',0  ; DATA XREF: display_speed:loc_3729↑o
.rodata:000000000000B2F4 unk_B2F4        db  25h ; %             ; DATA XREF: display_speed+11E↑o
.rodata:000000000000B2F5                 db  6Ch ; l
.rodata:000000000000B2F6                 db  75h ; u
.rodata:000000000000B2F7                 db  20h
.rodata:000000000000B2F8 aLu             db '%lu',0Ah,0          ; DATA XREF: display_speed+70↑o
.rodata:000000000000B2FD ; const char aInvalidInteger[]
.rodata:000000000000B2FD aInvalidInteger db 'invalid integer argument',0
.rodata:000000000000B2FD                                         ; DATA XREF: integer_arg+5↑o
.rodata:000000000000B316 aBb             db 'bB',0               ; DATA XREF: integer_arg+23↑o
.rodata:000000000000B319 ; const char name[]
.rodata:000000000000B319 name            db 'COLUMNS',0          ; DATA XREF: screen_columns:loc_39C6↑o
.rodata:000000000000B321 aDD             db '%d %d',0Ah,0        ; DATA XREF: display_window_size:loc_3BA0↑o
.rodata:000000000000B328 aRowsDColumnsD  db 'rows %d; columns %d;',0
.rodata:000000000000B328                                         ; DATA XREF: display_window_size+6D↑o
.rodata:000000000000B33D aStty           db 'stty',0             ; DATA XREF: main+153↑o
.rodata:000000000000B33D                                         ; usage+CCD↑o ...
.rodata:000000000000B342 ; const char aSpecialCharact[]
.rodata:000000000000B342 aSpecialCharact db 0Ah                  ; DATA XREF: usage+168↑o
.rodata:000000000000B342                 db 'Special characters:',0Ah,0
.rodata:000000000000B358 ; const char aOutputSettings[]
.rodata:000000000000B358 aOutputSettings db 0Ah                  ; DATA XREF: usage+606↑o
.rodata:000000000000B358                 db 'Output settings:',0Ah,0
.rodata:000000000000B36B aEraseKillWeras db 'erase, kill, werase, rprnt',0
.rodata:000000000000B36B                                         ; DATA XREF: usage+9D4↑o
.rodata:000000000000B386 ; const char aCombinationSet[]
.rodata:000000000000B386 aCombinationSet db 0Ah                  ; DATA XREF: usage+A85↑o
.rodata:000000000000B386                 db 'Combination settings:',0Ah,0
.rodata:000000000000B39E ; const char aCrtSameAsS[]
.rodata:000000000000B39E aCrtSameAsS     db '   crt           same as %s',0Ah,0
.rodata:000000000000B39E                                         ; DATA XREF: usage+B12↑o
.rodata:000000000000B3BB aEchoeEchoctlEc db 'echoe echoctl echoke',0
.rodata:000000000000B3BB                                         ; DATA XREF: usage+B25↑o
.rodata:000000000000B3BB                                         ; .data.rel.ro:00000000002108E0↓o
.rodata:000000000000B3D0 aEchoeEchoctlEc_0 db 'echoe echoctl echoke -ixany',0
.rodata:000000000000B3D0                                         ; DATA XREF: usage+B4E↑o
.rodata:000000000000B3EC aIcrnlOnlcr     db '-icrnl -onlcr',0    ; DATA XREF: usage+C12↑o
.rodata:000000000000B3EC                                         ; .data.rel.ro:0000000000210460↓o
.rodata:000000000000B3FA asc_B3FA        db '[',0                ; DATA XREF: usage+CD9↑o
.rodata:000000000000B3FC aTestInvocation db 'test invocation',0  ; DATA XREF: usage+D00↑o
.rodata:000000000000B40C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000B40C                                         ; DATA XREF: usage+D30↑o
.rodata:000000000000B40C                                         ; usage+E2C↑o ...
.rodata:000000000000B422 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+D41↑o
.rodata:000000000000B42C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+D4D↑o
.rodata:000000000000B43B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+CE0↑o
.rodata:000000000000B445 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+D0C↑o
.rodata:000000000000B44F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+D24↑o
.rodata:000000000000B459 ; const char aSOnlineHelpS[]
.rodata:000000000000B459 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+D9A↑o
.rodata:000000000000B459                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000B470 unk_B470        db  47h ; G             ; DATA XREF: main+14C↑o
.rodata:000000000000B470                                         ; usage+DB6↑o ...
.rodata:000000000000B471                 db  4Eh ; N
.rodata:000000000000B472                 db  55h ; U
.rodata:000000000000B473                 db  20h
.rodata:000000000000B474 ; const char domainname[]
.rodata:000000000000B474 domainname      db 'coreutils',0        ; DATA XREF: main+52↑o
.rodata:000000000000B474                                         ; main+5E↑o ...
.rodata:000000000000B47E ; const char aEn[]
.rodata:000000000000B47E aEn             db 'en_',0              ; DATA XREF: usage+DDD↑o
.rodata:000000000000B47E                                         ; usage+EE5↑o
.rodata:000000000000B482 ; const char aFullDocumentat[]
.rodata:000000000000B482 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000B482                                         ; DATA XREF: usage:loc_4A29↑o
.rodata:000000000000B482                                         ; usage:loc_4B2D↑o
.rodata:000000000000B49D ; const char s1[]
.rodata:000000000000B49D s1              db 'parenb',0           ; DATA XREF: apply_settings+BF↑o
.rodata:000000000000B49D                                         ; .data.rel.ro:mode_info↓o
.rodata:000000000000B4A4 ; const char aIntr[]
.rodata:000000000000B4A4 aIntr           db 'intr',0             ; DATA XREF: apply_settings+1DC↑o
.rodata:000000000000B4A4                                         ; .data.rel.ro:control_info↓o
.rodata:000000000000B4A9 ; const char aOddp[]
.rodata:000000000000B4A9 aOddp           db 'oddp',0             ; DATA XREF: apply_settings:loc_510D↑o
.rodata:000000000000B4A9                                         ; .data.rel.ro:00000000002109A0↓o
.rodata:000000000000B4AE ; const char aEk[]
.rodata:000000000000B4AE aEk             db 'ek',0               ; DATA XREF: apply_settings:loc_5321↑o
.rodata:000000000000B4AE                                         ; .data.rel.ro:00000000002109E0↓o
.rodata:000000000000B4B1 ; const char aSane[]
.rodata:000000000000B4B1 aSane           db 'sane',0             ; DATA XREF: apply_settings+7C8↑o
.rodata:000000000000B4B1                                         ; .data.rel.ro:0000000000210A00↓o
.rodata:000000000000B4B6 ; const char file[]
.rodata:000000000000B4B6 file            db '../coreutils-8.31/src/stty.c',0
.rodata:000000000000B4B6                                         ; DATA XREF: main+9DC↑o
.rodata:000000000000B4B6                                         ; main+ACC↑o ...
.rodata:000000000000B4D3 ; const char assertion[]
.rodata:000000000000B4D3 assertion       db 'bitsp',0            ; DATA XREF: main+9E3↑o
.rodata:000000000000B4D3                                         ; main+AD3↑o ...
.rodata:000000000000B4D9 ; const char aCbreak[]
.rodata:000000000000B4D9 aCbreak         db 'cbreak',0           ; DATA XREF: apply_settings+7DF↑o
.rodata:000000000000B4D9                                         ; .data.rel.ro:0000000000210AA0↓o
.rodata:000000000000B4E0 ; const char aPass8[]
.rodata:000000000000B4E0 aPass8          db 'pass8',0            ; DATA XREF: apply_settings:loc_552A↑o
.rodata:000000000000B4E0                                         ; .data.rel.ro:0000000000210A60↓o
.rodata:000000000000B4E6 ; const char aLitout[]
.rodata:000000000000B4E6 aLitout         db 'litout',0           ; DATA XREF: apply_settings:loc_56BA↑o
.rodata:000000000000B4E6                                         ; .data.rel.ro:0000000000210A80↓o
.rodata:000000000000B4ED ; const char aRaw[]
.rodata:000000000000B4ED aRaw            db 'raw',0              ; DATA XREF: apply_settings:loc_570D↑o
.rodata:000000000000B4ED                                         ; .data.rel.ro:0000000000210A40↓o
.rodata:000000000000B4F1 ; const char aCooked[]
.rodata:000000000000B4F1 aCooked         db 'cooked',0           ; DATA XREF: apply_settings+BB0↑o
.rodata:000000000000B4F1                                         ; .data.rel.ro:0000000000210A20↓o
.rodata:000000000000B4F8 ; const char aDecctlq[]
.rodata:000000000000B4F8 aDecctlq        db 'decctlq',0          ; DATA XREF: apply_settings:loc_57B8↑o
.rodata:000000000000B4F8                                         ; .data.rel.ro:0000000000210AC0↓o
.rodata:000000000000B500 ; const char aTabs[]
.rodata:000000000000B500 aTabs           db 'tabs',0             ; DATA XREF: apply_settings:loc_57EA↑o
.rodata:000000000000B500                                         ; .data.rel.ro:0000000000210AE0↓o
.rodata:000000000000B505 ; const char aLcase[]
.rodata:000000000000B505 aLcase          db 'lcase',0            ; DATA XREF: apply_settings:loc_584D↑o
.rodata:000000000000B505                                         ; .data.rel.ro:0000000000210B00↓o
.rodata:000000000000B50B ; const char aLcase_0[]
.rodata:000000000000B50B aLcase_0        db 'LCASE',0            ; DATA XREF: apply_settings+CF0↑o
.rodata:000000000000B50B                                         ; .data.rel.ro:0000000000210B20↓o
.rodata:000000000000B511 ; const char aCrt[]
.rodata:000000000000B511 aCrt            db 'crt',0              ; DATA XREF: apply_settings:loc_58A4↑o
.rodata:000000000000B511                                         ; .data.rel.ro:0000000000210B40↓o
.rodata:000000000000B515 ; const char aDec[]
.rodata:000000000000B515 aDec            db 'dec',0              ; DATA XREF: apply_settings+D47↑o
.rodata:000000000000B515                                         ; .data.rel.ro:0000000000210B60↓o
.rodata:000000000000B519 ; const char aInvalidArgumen[]
.rodata:000000000000B519 aInvalidArgumen db 'invalid argument %s',0
.rodata:000000000000B519                                         ; DATA XREF: apply_settings+532↑o
.rodata:000000000000B519                                         ; apply_settings+9A3↑o
.rodata:000000000000B52D aMissingArgumen db 'missing argument to %s',0
.rodata:000000000000B52D                                         ; DATA XREF: apply_settings+AA1↑o
.rodata:000000000000B544 ; const char aMin[]
.rodata:000000000000B544 aMin            db 'min',0              ; DATA XREF: main+42B↑o
.rodata:000000000000B544                                         ; main+79F↑o ...
.rodata:000000000000B548 aTime           db 'time',0             ; DATA XREF: apply_settings+266↑o
.rodata:000000000000B548                                         ; .data.rel.ro:0000000000210018↓o
.rodata:000000000000B54D ; const char asc_B54D[]
.rodata:000000000000B54D asc_B54D        db '^-',0               ; DATA XREF: apply_settings+296↑o
.rodata:000000000000B550 ; const char aUndef_0[]
.rodata:000000000000B550 aUndef_0        db 'undef',0            ; DATA XREF: apply_settings+2AF↑o
.rodata:000000000000B556 aOspeed         db 'ospeed',0           ; DATA XREF: apply_settings:loc_4E80↑o
.rodata:000000000000B55D aRows           db 'rows',0             ; DATA XREF: apply_settings:loc_4F48↑o
.rodata:000000000000B562 aCols           db 'cols',0             ; DATA XREF: apply_settings:loc_500D↑o
.rodata:000000000000B567 ; const char aColumns_0[]
.rodata:000000000000B567 aColumns_0      db 'columns',0          ; DATA XREF: apply_settings+4B7↑o
.rodata:000000000000B56F ; const char aSize[]
.rodata:000000000000B56F aSize           db 'size',0             ; DATA XREF: apply_settings:loc_5155↑o
.rodata:000000000000B574 ; const char aLine[]
.rodata:000000000000B574 aLine           db 'line',0             ; DATA XREF: apply_settings+5FC↑o
.rodata:000000000000B579 ; const char aInvalidLineDis[]
.rodata:000000000000B579 aInvalidLineDis db 'invalid line discipline %s',0
.rodata:000000000000B579                                         ; DATA XREF: apply_settings+663↑o
.rodata:000000000000B594 aIspeed         db 'ispeed',0           ; DATA XREF: apply_settings:loc_4C8F↑o
.rodata:000000000000B594                                         ; apply_settings:loc_52E3↑o
.rodata:000000000000B59B ; const char aEvenp[]
.rodata:000000000000B59B aEvenp          db 'evenp',0            ; DATA XREF: apply_settings:loc_50D8↑o
.rodata:000000000000B59B                                         ; apply_settings:loc_52A9↑o ...
.rodata:000000000000B5A1 ; const char aParity[]
.rodata:000000000000B5A1 aParity         db 'parity',0           ; DATA XREF: apply_settings+586↑o
.rodata:000000000000B5A1                                         ; apply_settings:loc_5669↑o ...
.rodata:000000000000B5A8 aUndef          db '<undef>',0          ; DATA XREF: main+461↑o
.rodata:000000000000B5A8                                         ; main+7B4↑o
.rodata:000000000000B5B0 ; const char dirname[]
.rodata:000000000000B5B0 dirname         db '/usr/local/share/locale',0
.rodata:000000000000B5B0                                         ; DATA XREF: main+4B↑o
.rodata:000000000000B5C8 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+145↑o
.rodata:000000000000B5D8 aDrain          db '-drain',0           ; DATA XREF: main+193↑o
.rodata:000000000000B5D8                                         ; main+1B4↑o ...
.rodata:000000000000B5DF ; const char shortopts[]
.rodata:000000000000B5DF shortopts       db '-agF:',0            ; DATA XREF: main+A5↑o
.rodata:000000000000B5E5 ; const char msgid[]
.rodata:000000000000B5E5 msgid           db 'standard input',0   ; DATA XREF: main+34C↑o
.rodata:000000000000B5E5                                         ; main:loc_30E5↑o
.rodata:000000000000B5F4 aLineD          db 'line = %d;',0       ; DATA XREF: main+3E6↑o
.rodata:000000000000B5F4                                         ; main+760↑o
.rodata:000000000000B5FF ; const char s2[]
.rodata:000000000000B5FF s2              db 'flush',0            ; DATA XREF: main+44B↑o
.rodata:000000000000B5FF                                         ; main+7A6↑o ...
.rodata:000000000000B605 aSS             db '%s = %s;',0         ; DATA XREF: main:loc_2C3E↑o
.rodata:000000000000B605                                         ; main:loc_2FB8↑o
.rodata:000000000000B60E aMinLuTimeLu_0  db 'min = %lu; time = %lu;',0Ah,0
.rodata:000000000000B60E                                         ; DATA XREF: main+979↑o
.rodata:000000000000B626 aS              db '-%s',0              ; DATA XREF: main+6E0↑o
.rodata:000000000000B626                                         ; main+8EC↑o
.rodata:000000000000B62A aMinLuTimeLu    db 'min = %lu; time = %lu;',0
.rodata:000000000000B62A                                         ; DATA XREF: main+81D↑o
.rodata:000000000000B641 aLxLxLxLx       db '%lx:%lx:%lx:%lx',0  ; DATA XREF: main+5A6↑o
.rodata:000000000000B641                                         ; main+5C2↑o
.rodata:000000000000B651 a75             db '75',0               ; DATA XREF: .data.rel.ro:000000000020FA90↓o
.rodata:000000000000B654 a110            db '110',0              ; DATA XREF: .data.rel.ro:000000000020FAA8↓o
.rodata:000000000000B658 a134            db '134',0              ; DATA XREF: .data.rel.ro:000000000020FAC0↓o
.rodata:000000000000B65C a1345           db '134.5',0            ; DATA XREF: .data.rel.ro:000000000020FAD8↓o
.rodata:000000000000B662 a150            db '150',0              ; DATA XREF: .data.rel.ro:000000000020FAF0↓o
.rodata:000000000000B662                                         ; display_speed+41↑o ...
.rodata:000000000000B666 a300            db '300',0              ; DATA XREF: .data.rel.ro:000000000020FB20↓o
.rodata:000000000000B66A a1200           db '1200',0             ; DATA XREF: .data.rel.ro:000000000020FB50↓o
.rodata:000000000000B66A                                         ; .data.rel.ro:000000000020FB08↓o
.rodata:000000000000B66F a1800           db '1800',0             ; DATA XREF: .data.rel.ro:000000000020FB68↓o
.rodata:000000000000B674 a2400           db '2400',0             ; DATA XREF: .data.rel.ro:000000000020FB80↓o
.rodata:000000000000B679 a4800           db '4800',0             ; DATA XREF: .data.rel.ro:000000000020FB98↓o
.rodata:000000000000B67E a9600           db '9600',0             ; DATA XREF: .data.rel.ro:000000000020FBB0↓o
.rodata:000000000000B683 a19200          db '19200',0            ; DATA XREF: .data.rel.ro:000000000020FBC8↓o
.rodata:000000000000B689 a38400          db '38400',0            ; DATA XREF: .data.rel.ro:000000000020FBE0↓o
.rodata:000000000000B68F aExta           db 'exta',0             ; DATA XREF: .data.rel.ro:000000000020FBF8↓o
.rodata:000000000000B694 aExtb           db 'extb',0             ; DATA XREF: .data.rel.ro:000000000020FC10↓o
.rodata:000000000000B699 a57600          db '57600',0            ; DATA XREF: .data.rel.ro:000000000020FC28↓o
.rodata:000000000000B69F a115200         db '115200',0           ; DATA XREF: .data.rel.ro:000000000020FC40↓o
.rodata:000000000000B6A6 a230400         db '230400',0           ; DATA XREF: .data.rel.ro:000000000020FC58↓o
.rodata:000000000000B6AD a460800         db '460800',0           ; DATA XREF: .data.rel.ro:000000000020FC70↓o
.rodata:000000000000B6B4 a576000         db '576000',0           ; DATA XREF: .data.rel.ro:000000000020FCA0↓o
.rodata:000000000000B6BB a921600         db '921600',0           ; DATA XREF: .data.rel.ro:000000000020FCB8↓o
.rodata:000000000000B6BB                                         ; .data.rel.ro:000000000020FB38↓o
.rodata:000000000000B6C2 a1000000        db '1000000',0          ; DATA XREF: .data.rel.ro:000000000020FCD0↓o
.rodata:000000000000B6C2                                         ; string_to_baud+2↑o ...
.rodata:000000000000B6CA a1152000        db '1152000',0          ; DATA XREF: .data.rel.ro:000000000020FCE8↓o
.rodata:000000000000B6D2 a1500000        db '1500000',0          ; DATA XREF: .data.rel.ro:000000000020FD00↓o
.rodata:000000000000B6D2                                         ; .data.rel.ro:000000000020FC88↓o
.rodata:000000000000B6DA a2000000        db '2000000',0          ; DATA XREF: .data.rel.ro:000000000020FD18↓o
.rodata:000000000000B6E2 a2500000        db '2500000',0          ; DATA XREF: .data.rel.ro:000000000020FD30↓o
.rodata:000000000000B6EA a3000000        db '3000000',0          ; DATA XREF: .data.rel.ro:000000000020FD48↓o
.rodata:000000000000B6F2 a3500000        db '3500000',0          ; DATA XREF: .data.rel.ro:000000000020FD60↓o
.rodata:000000000000B6FA a4000000        db '4000000',0          ; DATA XREF: .data.rel.ro:000000000020FD78↓o
.rodata:000000000000B702 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:000000000000B706 aSave           db 'save',0             ; DATA XREF: .data.rel.ro:000000000020FDE0↓o
.rodata:000000000000B70B aFile           db 'file',0             ; DATA XREF: .data.rel.ro:000000000020FE00↓o
.rodata:000000000000B710 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020FE20↓o
.rodata:000000000000B715 unk_B715        db  76h ; v             ; DATA XREF: .data.rel.ro:000000000020FE40↓o
.rodata:000000000000B716                 db  65h ; e
.rodata:000000000000B717                 db  72h ; r
.rodata:000000000000B718                 db  73h ; s
.rodata:000000000000B719                 db  69h ; i
.rodata:000000000000B71A ; const char aOn[3]
.rodata:000000000000B71A aOn             db 'on',0               ; DATA XREF: usage:loc_4A9B↑o
.rodata:000000000000B71D aQuit           db 'quit',0             ; DATA XREF: .data.rel.ro:off_20FE98↓o
.rodata:000000000000B722 aEof            db 'eof',0              ; DATA XREF: .data.rel.ro:000000000020FEE0↓o
.rodata:000000000000B726 aEol            db 'eol',0              ; DATA XREF: .data.rel.ro:000000000020FEF8↓o
.rodata:000000000000B72A aEol2           db 'eol2',0             ; DATA XREF: .data.rel.ro:000000000020FF10↓o
.rodata:000000000000B72F aSwtch          db 'swtch',0            ; DATA XREF: .data.rel.ro:000000000020FF28↓o
.rodata:000000000000B735 aStart          db 'start',0            ; DATA XREF: .data.rel.ro:000000000020FF40↓o
.rodata:000000000000B73B aSusp           db 'susp',0             ; DATA XREF: .data.rel.ro:000000000020FF70↓o
.rodata:000000000000B740 aWerase         db 'werase',0           ; DATA XREF: .data.rel.ro:000000000020FFA0↓o
.rodata:000000000000B747 aLnext          db 'lnext',0            ; DATA XREF: .data.rel.ro:000000000020FFB8↓o
.rodata:000000000000B74D aDiscard        db 'discard',0          ; DATA XREF: .data.rel.ro:000000000020FFE8↓o
.rodata:000000000000B755 aParodd         db 'parodd',0           ; DATA XREF: .data.rel.ro:0000000000210080↓o
.rodata:000000000000B75C aCmspar         db 'cmspar',0           ; DATA XREF: .data.rel.ro:00000000002100A0↓o
.rodata:000000000000B763 aCs5            db 'cs5',0              ; DATA XREF: .data.rel.ro:00000000002100C0↓o
.rodata:000000000000B767 aCs6            db 'cs6',0              ; DATA XREF: .data.rel.ro:00000000002100E0↓o
.rodata:000000000000B76B aCs7            db 'cs7',0              ; DATA XREF: .data.rel.ro:0000000000210100↓o
.rodata:000000000000B76F aCs8            db 'cs8',0              ; DATA XREF: .data.rel.ro:0000000000210120↓o
.rodata:000000000000B773 aHupcl          db 'hupcl',0            ; DATA XREF: .data.rel.ro:0000000000210140↓o
.rodata:000000000000B779 aHup            db 'hup',0              ; DATA XREF: .data.rel.ro:0000000000210160↓o
.rodata:000000000000B77D aCstopb         db 'cstopb',0           ; DATA XREF: .data.rel.ro:0000000000210180↓o
.rodata:000000000000B784 aCread          db 'cread',0            ; DATA XREF: .data.rel.ro:00000000002101A0↓o
.rodata:000000000000B78A aClocal         db 'clocal',0           ; DATA XREF: .data.rel.ro:00000000002101C0↓o
.rodata:000000000000B791 aCrtscts        db 'crtscts',0          ; DATA XREF: .data.rel.ro:00000000002101E0↓o
.rodata:000000000000B799 aIgnbrk         db 'ignbrk',0           ; DATA XREF: .data.rel.ro:0000000000210200↓o
.rodata:000000000000B7A0 aBrkint         db 'brkint',0           ; DATA XREF: .data.rel.ro:0000000000210220↓o
.rodata:000000000000B7A7 aIgnpar         db 'ignpar',0           ; DATA XREF: .data.rel.ro:0000000000210240↓o
.rodata:000000000000B7AE aParmrk         db 'parmrk',0           ; DATA XREF: .data.rel.ro:0000000000210260↓o
.rodata:000000000000B7B5 aInpck          db 'inpck',0            ; DATA XREF: .data.rel.ro:0000000000210280↓o
.rodata:000000000000B7BB aIstrip         db 'istrip',0           ; DATA XREF: .data.rel.ro:00000000002102A0↓o
.rodata:000000000000B7C2 aInlcr          db 'inlcr',0            ; DATA XREF: .data.rel.ro:00000000002102C0↓o
.rodata:000000000000B7C8 aIgncr          db 'igncr',0            ; DATA XREF: .data.rel.ro:00000000002102E0↓o
.rodata:000000000000B7CE aIcrnl          db 'icrnl',0            ; DATA XREF: .data.rel.ro:0000000000210300↓o
.rodata:000000000000B7D4 aIxon           db 'ixon',0             ; DATA XREF: .data.rel.ro:0000000000210320↓o
.rodata:000000000000B7D9 unk_B7D9        db  69h ; i             ; DATA XREF: .data.rel.ro:0000000000210340↓o
.rodata:000000000000B7DA                 db  78h ; x
.rodata:000000000000B7DB ; const char aOff[4]
.rodata:000000000000B7DB aOff            db 'off',0              ; DATA XREF: usage+354↑o
.rodata:000000000000B7DF aTandem         db 'tandem',0           ; DATA XREF: .data.rel.ro:0000000000210360↓o
.rodata:000000000000B7E6 aIuclc          db 'iuclc',0            ; DATA XREF: .data.rel.ro:0000000000210380↓o
.rodata:000000000000B7EC aImaxbel        db 'imaxbel',0          ; DATA XREF: .data.rel.ro:00000000002103C0↓o
.rodata:000000000000B7F4 aIutf8          db 'iutf8',0            ; DATA XREF: .data.rel.ro:00000000002103E0↓o
.rodata:000000000000B7FA aOpost          db 'opost',0            ; DATA XREF: .data.rel.ro:0000000000210400↓o
.rodata:000000000000B800 aOlcuc          db 'olcuc',0            ; DATA XREF: .data.rel.ro:0000000000210420↓o
.rodata:000000000000B806 aOcrnl          db 'ocrnl',0            ; DATA XREF: .data.rel.ro:0000000000210440↓o
.rodata:000000000000B80C aOnocr          db 'onocr',0            ; DATA XREF: .data.rel.ro:0000000000210480↓o
.rodata:000000000000B812 aOnlret         db 'onlret',0           ; DATA XREF: .data.rel.ro:00000000002104A0↓o
.rodata:000000000000B819 aOfill          db 'ofill',0            ; DATA XREF: .data.rel.ro:00000000002104C0↓o
.rodata:000000000000B81F aOfdel          db 'ofdel',0            ; DATA XREF: .data.rel.ro:00000000002104E0↓o
.rodata:000000000000B825 aNl1            db 'nl1',0              ; DATA XREF: .data.rel.ro:0000000000210500↓o
.rodata:000000000000B829 aNl0            db 'nl0',0              ; DATA XREF: .data.rel.ro:0000000000210520↓o
.rodata:000000000000B82D aCr3            db 'cr3',0              ; DATA XREF: .data.rel.ro:0000000000210540↓o
.rodata:000000000000B831 aCr2            db 'cr2',0              ; DATA XREF: .data.rel.ro:0000000000210560↓o
.rodata:000000000000B835 aCr1            db 'cr1',0              ; DATA XREF: .data.rel.ro:0000000000210580↓o
.rodata:000000000000B839 aCr0            db 'cr0',0              ; DATA XREF: .data.rel.ro:00000000002105A0↓o
.rodata:000000000000B83D aTab3           db 'tab3',0             ; DATA XREF: .data.rel.ro:00000000002105C0↓o
.rodata:000000000000B842 aTab2           db 'tab2',0             ; DATA XREF: .data.rel.ro:00000000002105E0↓o
.rodata:000000000000B847 aTab1           db 'tab1',0             ; DATA XREF: .data.rel.ro:0000000000210600↓o
.rodata:000000000000B84C aTab0           db 'tab0',0             ; DATA XREF: .data.rel.ro:0000000000210620↓o
.rodata:000000000000B851 aBs1            db 'bs1',0              ; DATA XREF: .data.rel.ro:0000000000210640↓o
.rodata:000000000000B855 aBs0            db 'bs0',0              ; DATA XREF: .data.rel.ro:0000000000210660↓o
.rodata:000000000000B859 aVt1            db 'vt1',0              ; DATA XREF: .data.rel.ro:0000000000210680↓o
.rodata:000000000000B85D aVt0            db 'vt0',0              ; DATA XREF: .data.rel.ro:00000000002106A0↓o
.rodata:000000000000B861 aFf1            db 'ff1',0              ; DATA XREF: .data.rel.ro:00000000002106C0↓o
.rodata:000000000000B865 aFf0            db 'ff0',0              ; DATA XREF: .data.rel.ro:00000000002106E0↓o
.rodata:000000000000B869 aIsig           db 'isig',0             ; DATA XREF: .data.rel.ro:0000000000210700↓o
.rodata:000000000000B86E aIcanon         db 'icanon',0           ; DATA XREF: .data.rel.ro:0000000000210720↓o
.rodata:000000000000B875 aIexten         db 'iexten',0           ; DATA XREF: .data.rel.ro:0000000000210740↓o
.rodata:000000000000B87C aEchoe          db 'echoe',0            ; DATA XREF: .data.rel.ro:0000000000210780↓o
.rodata:000000000000B882 aCrterase       db 'crterase',0         ; DATA XREF: .data.rel.ro:00000000002107A0↓o
.rodata:000000000000B882                                         ; .data.rel.ro:000000000020FEB0↓o
.rodata:000000000000B88B aEchok          db 'echok',0            ; DATA XREF: .data.rel.ro:00000000002107C0↓o
.rodata:000000000000B891 unk_B891        db  65h ; e             ; DATA XREF: .data.rel.ro:00000000002107E0↓o
.rodata:000000000000B892                 db  63h ; c
.rodata:000000000000B893                 db  68h ; h
.rodata:000000000000B894                 db  6Fh ; o
.rodata:000000000000B895 ; const char aNl[3]
.rodata:000000000000B895 aNl             db 'nl',0               ; DATA XREF: apply_settings:loc_525D↑o
.rodata:000000000000B895                                         ; .data.rel.ro:00000000002109C0↓o
.rodata:000000000000B898 aNoflsh         db 'noflsh',0           ; DATA XREF: .data.rel.ro:0000000000210800↓o
.rodata:000000000000B89F aXcase          db 'xcase',0            ; DATA XREF: .data.rel.ro:0000000000210820↓o
.rodata:000000000000B8A5 aTostop         db 'tostop',0           ; DATA XREF: .data.rel.ro:0000000000210840↓o
.rodata:000000000000B8A5                                         ; .data.rel.ro:000000000020FF58↓o
.rodata:000000000000B8AC aEchoprt        db 'echoprt',0          ; DATA XREF: .data.rel.ro:0000000000210860↓o
.rodata:000000000000B8B4 aPrterase       db 'prterase',0         ; DATA XREF: .data.rel.ro:0000000000210880↓o
.rodata:000000000000B8BD aEchoctl        db 'echoctl',0          ; DATA XREF: .data.rel.ro:00000000002108A0↓o
.rodata:000000000000B8C5 aCtlecho        db 'ctlecho',0          ; DATA XREF: .data.rel.ro:00000000002108C0↓o
.rodata:000000000000B8C5                                         ; .data.rel.ro:0000000000210760↓o
.rodata:000000000000B8CD aCrtkill        db 'crtkill',0          ; DATA XREF: .data.rel.ro:0000000000210900↓o
.rodata:000000000000B8CD                                         ; .data.rel.ro:000000000020FEC8↓o
.rodata:000000000000B8D5 aFlusho         db 'flusho',0           ; DATA XREF: .data.rel.ro:0000000000210920↓o
.rodata:000000000000B8DC aExtproc        db 'extproc',0          ; DATA XREF: .data.rel.ro:0000000000210940↓o
.rodata:000000000000B8E4                 align 10h
.rodata:000000000000B8F0 jpt_34E5        dd offset loc_3508 - 0B8F0h
.rodata:000000000000B8F0                                         ; DATA XREF: mode_type_flag+5↑o
.rodata:000000000000B8F0                                         ; mode_type_flag+E↑r
.rodata:000000000000B8F0                 dd offset loc_3500 - 0B8F0h ; jump table for switch statement
.rodata:000000000000B8F0                 dd offset loc_34F8 - 0B8F0h
.rodata:000000000000B8F0                 dd offset loc_34F0 - 0B8F0h
.rodata:000000000000B8F0                 dd offset loc_3510 - 0B8F0h
.rodata:000000000000B904                 align 8
.rodata:000000000000B908 ; const char _PRETTY_FUNCTION___7410[]
.rodata:000000000000B908 __PRETTY_FUNCTION___7410 db 'sane_mode',0
.rodata:000000000000B908                                         ; DATA XREF: apply_settings:loc_561D↑o
.rodata:000000000000B908                                         ; apply_settings:loc_563C↑o
.rodata:000000000000B912                 align 8
.rodata:000000000000B918 ; const char _PRETTY_FUNCTION___7335[]
.rodata:000000000000B918 __PRETTY_FUNCTION___7335 db 'display_all',0
.rodata:000000000000B918                                         ; DATA XREF: main:loc_3295↑o
.rodata:000000000000B924                 align 10h
.rodata:000000000000B930 ; const char _PRETTY_FUNCTION___7318[]
.rodata:000000000000B930 __PRETTY_FUNCTION___7318 db 'display_changed',0
.rodata:000000000000B930                                         ; DATA XREF: main:loc_31A5↑o
.rodata:000000000000B940 aIspeedLuBaudOs db 'ispeed %lu baud; ospeed %lu baud;',0
.rodata:000000000000B940                                         ; DATA XREF: display_speed:loc_37D7↑o
.rodata:000000000000B962                 align 8
.rodata:000000000000B968 ; const char aSNoSizeInforma[]
.rodata:000000000000B968 aSNoSizeInforma db '%s: no size information for this device',0
.rodata:000000000000B968                                         ; DATA XREF: display_window_size+D7↑o
.rodata:000000000000B990 ; const char aTrySHelpForMor[]
.rodata:000000000000B990 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000B990                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000B9B7                 align 8
.rodata:000000000000B9B8 ; const char aUsageSFDeviceF[]
.rodata:000000000000B9B8 aUsageSFDeviceF db 'Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...',0Ah
.rodata:000000000000B9B8                                         ; DATA XREF: usage:loc_3C8D↑o
.rodata:000000000000B9B8                 db '  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]',0Ah
.rodata:000000000000B9B8                 db '  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]',0Ah,0
.rodata:000000000000BA4F                 align 10h
.rodata:000000000000BA50 ; const char aPrintOrChangeT[]
.rodata:000000000000BA50 aPrintOrChangeT db 'Print or change terminal characteristics.',0Ah,0
.rodata:000000000000BA50                                         ; DATA XREF: usage+8A↑o
.rodata:000000000000BA7B                 align 20h
.rodata:000000000000BA80 ; const char aMandatoryArgum[]
.rodata:000000000000BA80 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:000000000000BA80                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000BA80                 db 'ns too.',0Ah,0
.rodata:000000000000BACB                 align 10h
.rodata:000000000000BAD0 ; const char aAAllPrintAllCu[]
.rodata:000000000000BAD0 aAAllPrintAllCu db '  -a, --all          print all current settings in human-readable'
.rodata:000000000000BAD0                                         ; DATA XREF: usage+D4↑o
.rodata:000000000000BAD0                 db ' form',0Ah
.rodata:000000000000BAD0                 db '  -g, --save         print all current settings in a stty-readabl'
.rodata:000000000000BAD0                 db 'e form',0Ah
.rodata:000000000000BAD0                 db '  -F, --file=DEVICE  open and use the specified DEVICE instead of'
.rodata:000000000000BAD0                 db ' stdin',0Ah,0
.rodata:000000000000BBA8 ; const char aHelpDisplayThi[]
.rodata:000000000000BBA8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000BBA8                                         ; DATA XREF: usage+F9↑o
.rodata:000000000000BBD5                 align 8
.rodata:000000000000BBD8 ; const char aVersionOutputV[]
.rodata:000000000000BBD8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000BBD8                                         ; DATA XREF: usage+11E↑o
.rodata:000000000000BC0E                 align 10h
.rodata:000000000000BC10 ; const char aOptionalBefore[]
.rodata:000000000000BC10 aOptionalBefore db 0Ah                  ; DATA XREF: usage+143↑o
.rodata:000000000000BC10                 db 'Optional - before SETTING indicates negation.  An * marks non-POS'
.rodata:000000000000BC10                 db 'IX',0Ah
.rodata:000000000000BC10                 db 'settings.  The underlying system defines which settings are avail'
.rodata:000000000000BC10                 db 'able.',0Ah,0
.rodata:000000000000BC9D                 align 20h
.rodata:000000000000BCA0 ; const char aDiscardCharCha[]
.rodata:000000000000BCA0 aDiscardCharCha db ' * discard CHAR  CHAR will toggle discarding of output',0Ah,0
.rodata:000000000000BCA0                                         ; DATA XREF: usage+18D↑o
.rodata:000000000000BCD8 ; const char aEofCharCharWil[]
.rodata:000000000000BCD8 aEofCharCharWil db '   eof CHAR      CHAR will send an end of file (terminate the inp'
.rodata:000000000000BCD8                                         ; DATA XREF: usage+1B2↑o
.rodata:000000000000BCD8                 db 'ut)',0Ah
.rodata:000000000000BCD8                 db '   eol CHAR      CHAR will end the line',0Ah,0
.rodata:000000000000BD46                 align 8
.rodata:000000000000BD48 ; const char aEol2CharAltern[]
.rodata:000000000000BD48 aEol2CharAltern db ' * eol2 CHAR     alternate CHAR for ending the line',0Ah,0
.rodata:000000000000BD48                                         ; DATA XREF: usage+1D7↑o
.rodata:000000000000BD7D                 align 20h
.rodata:000000000000BD80 ; const char aEraseCharCharW[]
.rodata:000000000000BD80 aEraseCharCharW db '   erase CHAR    CHAR will erase the last character typed',0Ah
.rodata:000000000000BD80                                         ; DATA XREF: usage+1FC↑o
.rodata:000000000000BD80                 db '   intr CHAR     CHAR will send an interrupt signal',0Ah
.rodata:000000000000BD80                 db '   kill CHAR     CHAR will erase the current line',0Ah,0
.rodata:000000000000BE21                 align 8
.rodata:000000000000BE28 ; const char aLnextCharCharW[]
.rodata:000000000000BE28 aLnextCharCharW db ' * lnext CHAR    CHAR will enter the next character quoted',0Ah,0
.rodata:000000000000BE28                                         ; DATA XREF: usage+221↑o
.rodata:000000000000BE64                 align 8
.rodata:000000000000BE68 ; const char aQuitCharCharWi[]
.rodata:000000000000BE68 aQuitCharCharWi db '   quit CHAR     CHAR will send a quit signal',0Ah,0
.rodata:000000000000BE68                                         ; DATA XREF: usage+246↑o
.rodata:000000000000BE97                 align 8
.rodata:000000000000BE98 ; const char aRprntCharCharW[]
.rodata:000000000000BE98 aRprntCharCharW db ' * rprnt CHAR    CHAR will redraw the current line',0Ah,0
.rodata:000000000000BE98                                         ; DATA XREF: usage+26B↑o
.rodata:000000000000BECC                 align 10h
.rodata:000000000000BED0 ; const char aStartCharCharW[]
.rodata:000000000000BED0 aStartCharCharW db '   start CHAR    CHAR will restart the output after stopping it',0Ah
.rodata:000000000000BED0                                         ; DATA XREF: usage+290↑o
.rodata:000000000000BED0                 db '   stop CHAR     CHAR will stop the output',0Ah
.rodata:000000000000BED0                 db '   susp CHAR     CHAR will send a terminal stop signal',0Ah,0
.rodata:000000000000BF73                 align 8
.rodata:000000000000BF78 ; const char aSwtchCharCharW[]
.rodata:000000000000BF78 aSwtchCharCharW db ' * swtch CHAR    CHAR will switch to a different shell layer',0Ah
.rodata:000000000000BF78                                         ; DATA XREF: usage+2B5↑o
.rodata:000000000000BF78                 db 0
.rodata:000000000000BFB6                 align 8
.rodata:000000000000BFB8 ; const char aWeraseCharChar[]
.rodata:000000000000BFB8 aWeraseCharChar db ' * werase CHAR   CHAR will erase the last word typed',0Ah,0
.rodata:000000000000BFB8                                         ; DATA XREF: usage+2DA↑o
.rodata:000000000000BFEE                 align 10h
.rodata:000000000000BFF0 ; const char aSpecialSetting[]
.rodata:000000000000BFF0 aSpecialSetting db 0Ah                  ; DATA XREF: usage+2FF↑o
.rodata:000000000000BFF0                 db 'Special settings:',0Ah
.rodata:000000000000BFF0                 db '   N             set the input and output speeds to N bauds',0Ah,0
.rodata:000000000000C040 ; const char aColsNTellTheKe[]
.rodata:000000000000C040 aColsNTellTheKe db ' * cols N        tell the kernel that the terminal has N columns',0Ah
.rodata:000000000000C040                                         ; DATA XREF: usage+324↑o
.rodata:000000000000C040                 db ' * columns N     same as cols N',0Ah,0
.rodata:000000000000C0A2                 align 8
.rodata:000000000000C0A8 ; const char aDrainWaitForTr[]
.rodata:000000000000C0A8 aDrainWaitForTr db ' * [-]drain      wait for transmission before applying settings ('
.rodata:000000000000C0A8                                         ; DATA XREF: usage:loc_3F95↑o
.rodata:000000000000C0A8                 db '%s by default)',0Ah,0
.rodata:000000000000C0F9                 align 20h
.rodata:000000000000C100 ; const char aIspeedNSetTheI[]
.rodata:000000000000C100 aIspeedNSetTheI db '   ispeed N      set the input speed to N',0Ah,0
.rodata:000000000000C100                                         ; DATA XREF: usage+391↑o
.rodata:000000000000C12B                 align 10h
.rodata:000000000000C130 ; const char aLineNUseLineDi[]
.rodata:000000000000C130 aLineNUseLineDi db ' * line N        use line discipline N',0Ah,0
.rodata:000000000000C130                                         ; DATA XREF: usage+3B6↑o
.rodata:000000000000C158 ; const char aMinNWithIcanon[]
.rodata:000000000000C158 aMinNWithIcanon db '   min N         with -icanon, set N characters minimum for a com'
.rodata:000000000000C158                                         ; DATA XREF: usage+3DB↑o
.rodata:000000000000C158                 db 'pleted read',0Ah
.rodata:000000000000C158                 db '   ospeed N      set the output speed to N',0Ah,0
.rodata:000000000000C1D1                 align 8
.rodata:000000000000C1D8 ; const char aRowsNTellTheKe[]
.rodata:000000000000C1D8 aRowsNTellTheKe db ' * rows N        tell the kernel that the terminal has N rows',0Ah
.rodata:000000000000C1D8                                         ; DATA XREF: usage+400↑o
.rodata:000000000000C1D8                 db ' * size          print the number of rows and columns according t'
.rodata:000000000000C1D8                 db 'o the kernel',0Ah,0
.rodata:000000000000C265                 align 8
.rodata:000000000000C268 ; const char aSpeedPrintTheT[]
.rodata:000000000000C268 aSpeedPrintTheT db '   speed         print the terminal speed',0Ah
.rodata:000000000000C268                                         ; DATA XREF: usage+425↑o
.rodata:000000000000C268                 db '   time N        with -icanon, set read timeout of N tenths of a '
.rodata:000000000000C268                 db 'second',0Ah,0
.rodata:000000000000C2DB                 align 20h
.rodata:000000000000C2E0 ; const char aControlSetting[]
.rodata:000000000000C2E0 aControlSetting db 0Ah                  ; DATA XREF: usage+44A↑o
.rodata:000000000000C2E0                 db 'Control settings:',0Ah
.rodata:000000000000C2E0                 db '   [-]clocal     disable modem control signals',0Ah
.rodata:000000000000C2E0                 db '   [-]cread      allow input to be received',0Ah,0
.rodata:000000000000C34F                 align 10h
.rodata:000000000000C350 ; const char aCrtsctsEnableR[]
.rodata:000000000000C350 aCrtsctsEnableR db ' * [-]crtscts    enable RTS/CTS handshaking',0Ah,0
.rodata:000000000000C350                                         ; DATA XREF: usage+46F↑o
.rodata:000000000000C37D                 align 20h
.rodata:000000000000C380 ; const char aCsnSetCharacte[]
.rodata:000000000000C380 aCsnSetCharacte db '   csN           set character size to N bits, N in [5..8]',0Ah,0
.rodata:000000000000C380                                         ; DATA XREF: usage+494↑o
.rodata:000000000000C3BC                 align 20h
.rodata:000000000000C3C0 ; const char aCstopbUseTwoSt[]
.rodata:000000000000C3C0 aCstopbUseTwoSt db '   [-]cstopb     use two stop bits per character (one with ',27h,'-'
.rodata:000000000000C3C0                                         ; DATA XREF: usage+4B9↑o
.rodata:000000000000C3C0                 db 27h,')',0Ah
.rodata:000000000000C3C0                 db '   [-]hup        send a hangup signal when the last process close'
.rodata:000000000000C3C0                 db 's the tty',0Ah
.rodata:000000000000C3C0                 db '   [-]hupcl      same as [-]hup',0Ah
.rodata:000000000000C3C0                 db '   [-]parenb     generate parity bit in output and expect parity '
.rodata:000000000000C3C0                 db 'bit in input',0Ah
.rodata:000000000000C3C0                 db '   [-]parodd     set odd parity (or even parity with ',27h,'-',27h
.rodata:000000000000C3C0                 db ')',0Ah,0
.rodata:000000000000C4F4                 align 8
.rodata:000000000000C4F8 ; const char aCmsparUseStick[]
.rodata:000000000000C4F8 aCmsparUseStick db ' * [-]cmspar     use "stick" (mark/space) parity',0Ah,0
.rodata:000000000000C4F8                                         ; DATA XREF: usage+4DE↑o
.rodata:000000000000C52A                 align 10h
.rodata:000000000000C530 ; const char aInputSettingsB[]
.rodata:000000000000C530 aInputSettingsB db 0Ah                  ; DATA XREF: usage+503↑o
.rodata:000000000000C530                 db 'Input settings:',0Ah
.rodata:000000000000C530                 db '   [-]brkint     breaks cause an interrupt signal',0Ah
.rodata:000000000000C530                 db '   [-]icrnl      translate carriage return to newline',0Ah
.rodata:000000000000C530                 db '   [-]ignbrk     ignore break characters',0Ah
.rodata:000000000000C530                 db '   [-]igncr      ignore carriage return',0Ah
.rodata:000000000000C530                 db '   [-]ignpar     ignore characters with parity errors',0Ah,0
.rodata:000000000000C631                 align 8
.rodata:000000000000C638 ; const char aImaxbelBeepAnd[]
.rodata:000000000000C638 aImaxbelBeepAnd db ' * [-]imaxbel    beep and do not flush a full input buffer on a c'
.rodata:000000000000C638                                         ; DATA XREF: usage+528↑o
.rodata:000000000000C638                 db 'haracter',0Ah,0
.rodata:000000000000C683                 align 8
.rodata:000000000000C688 ; const char aInlcrTranslate[]
.rodata:000000000000C688 aInlcrTranslate db '   [-]inlcr      translate newline to carriage return',0Ah
.rodata:000000000000C688                                         ; DATA XREF: usage+54D↑o
.rodata:000000000000C688                 db '   [-]inpck      enable input parity checking',0Ah
.rodata:000000000000C688                 db '   [-]istrip     clear high (8th) bit of input characters',0Ah,0
.rodata:000000000000C727                 align 8
.rodata:000000000000C728 ; const char aIutf8AssumeInp[]
.rodata:000000000000C728 aIutf8AssumeInp db ' * [-]iutf8      assume input characters are UTF-8 encoded',0Ah,0
.rodata:000000000000C728                                         ; DATA XREF: usage+572↑o
.rodata:000000000000C764                 align 8
.rodata:000000000000C768 ; const char aIuclcTranslate[]
.rodata:000000000000C768 aIuclcTranslate db ' * [-]iuclc      translate uppercase characters to lowercase',0Ah
.rodata:000000000000C768                                         ; DATA XREF: usage+597↑o
.rodata:000000000000C768                 db 0
.rodata:000000000000C7A6                 align 8
.rodata:000000000000C7A8 ; const char aIxanyLetAnyCha[]
.rodata:000000000000C7A8 aIxanyLetAnyCha db ' * [-]ixany      let any character restart output, not only start'
.rodata:000000000000C7A8                                         ; DATA XREF: usage+5BC↑o
.rodata:000000000000C7A8                 db ' character',0Ah,0
.rodata:000000000000C7F5                 align 8
.rodata:000000000000C7F8 ; const char aIxoffEnableSen[]
.rodata:000000000000C7F8 aIxoffEnableSen db '   [-]ixoff      enable sending of start/stop characters',0Ah
.rodata:000000000000C7F8                                         ; DATA XREF: usage+5E1↑o
.rodata:000000000000C7F8                 db '   [-]ixon       enable XON/XOFF flow control',0Ah
.rodata:000000000000C7F8                 db '   [-]parmrk     mark parity errors (with a 255-0-character seque'
.rodata:000000000000C7F8                 db 'nce)',0Ah
.rodata:000000000000C7F8                 db '   [-]tandem     same as [-]ixoff',0Ah,0
.rodata:000000000000C8C8 ; const char aBsnBackspaceDe[]
.rodata:000000000000C8C8 aBsnBackspaceDe db ' * bsN           backspace delay style, N in [0..1]',0Ah,0
.rodata:000000000000C8C8                                         ; DATA XREF: usage+62B↑o
.rodata:000000000000C8FD                 align 20h
.rodata:000000000000C900 ; const char aCrnCarriageRet[]
.rodata:000000000000C900 aCrnCarriageRet db ' * crN           carriage return delay style, N in [0..3]',0Ah,0
.rodata:000000000000C900                                         ; DATA XREF: usage+650↑o
.rodata:000000000000C93B                 align 20h
.rodata:000000000000C940 ; const char aFfnFormFeedDel[]
.rodata:000000000000C940 aFfnFormFeedDel db ' * ffN           form feed delay style, N in [0..1]',0Ah,0
.rodata:000000000000C940                                         ; DATA XREF: usage+675↑o
.rodata:000000000000C975                 align 8
.rodata:000000000000C978 ; const char aNlnNewlineDela[]
.rodata:000000000000C978 aNlnNewlineDela db ' * nlN           newline delay style, N in [0..1]',0Ah,0
.rodata:000000000000C978                                         ; DATA XREF: usage+69A↑o
.rodata:000000000000C9AB                 align 10h
.rodata:000000000000C9B0 ; const char aOcrnlTranslate[]
.rodata:000000000000C9B0 aOcrnlTranslate db ' * [-]ocrnl      translate carriage return to newline',0Ah,0
.rodata:000000000000C9B0                                         ; DATA XREF: usage+6BF↑o
.rodata:000000000000C9E7                 align 8
.rodata:000000000000C9E8 ; const char aOfdelUseDelete[]
.rodata:000000000000C9E8 aOfdelUseDelete db ' * [-]ofdel      use delete characters for fill instead of NUL ch'
.rodata:000000000000C9E8                                         ; DATA XREF: usage+6E4↑o
.rodata:000000000000C9E8                 db 'aracters',0Ah,0
.rodata:000000000000CA33                 align 8
.rodata:000000000000CA38 ; const char aOfillUseFillPa[]
.rodata:000000000000CA38 aOfillUseFillPa db ' * [-]ofill      use fill (padding) characters instead of timing '
.rodata:000000000000CA38                                         ; DATA XREF: usage+709↑o
.rodata:000000000000CA38                 db 'for delays',0Ah,0
.rodata:000000000000CA85                 align 8
.rodata:000000000000CA88 ; const char aOlcucTranslate[]
.rodata:000000000000CA88 aOlcucTranslate db ' * [-]olcuc      translate lowercase characters to uppercase',0Ah
.rodata:000000000000CA88                                         ; DATA XREF: usage+72E↑o
.rodata:000000000000CA88                 db 0
.rodata:000000000000CAC6                 align 8
.rodata:000000000000CAC8 ; const char aOnlcrTranslate[]
.rodata:000000000000CAC8 aOnlcrTranslate db ' * [-]onlcr      translate newline to carriage return-newline',0Ah
.rodata:000000000000CAC8                                         ; DATA XREF: usage+753↑o
.rodata:000000000000CAC8                 db 0
.rodata:000000000000CB07                 align 8
.rodata:000000000000CB08 ; const char aOnlretNewlineP[]
.rodata:000000000000CB08 aOnlretNewlineP db ' * [-]onlret     newline performs a carriage return',0Ah,0
.rodata:000000000000CB08                                         ; DATA XREF: usage+778↑o
.rodata:000000000000CB3D                 align 20h
.rodata:000000000000CB40 ; const char aOnocrDoNotPrin[]
.rodata:000000000000CB40 aOnocrDoNotPrin db ' * [-]onocr      do not print carriage returns in the first colum'
.rodata:000000000000CB40                                         ; DATA XREF: usage+79D↑o
.rodata:000000000000CB40                 db 'n',0Ah,0
.rodata:000000000000CB84                 align 8
.rodata:000000000000CB88 ; const char aOpostPostproce[]
.rodata:000000000000CB88 aOpostPostproce db '   [-]opost      postprocess output',0Ah,0
.rodata:000000000000CB88                                         ; DATA XREF: usage+7C2↑o
.rodata:000000000000CBAD                 align 10h
.rodata:000000000000CBB0 ; const char aTabnHorizontal[]
.rodata:000000000000CBB0 aTabnHorizontal db ' * tabN          horizontal tab delay style, N in [0..3]',0Ah
.rodata:000000000000CBB0                                         ; DATA XREF: usage+7E7↑o
.rodata:000000000000CBB0                 db ' * tabs          same as tab0',0Ah
.rodata:000000000000CBB0                 db ' * -tabs         same as tab3',0Ah,0
.rodata:000000000000CC26                 align 8
.rodata:000000000000CC28 ; const char aVtnVerticalTab[]
.rodata:000000000000CC28 aVtnVerticalTab db ' * vtN           vertical tab delay style, N in [0..1]',0Ah,0
.rodata:000000000000CC28                                         ; DATA XREF: usage+80C↑o
.rodata:000000000000CC60 ; const char aLocalSettingsC[]
.rodata:000000000000CC60 aLocalSettingsC db 0Ah                  ; DATA XREF: usage+831↑o
.rodata:000000000000CC60                 db 'Local settings:',0Ah
.rodata:000000000000CC60                 db '   [-]crterase   echo erase characters as backspace-space-backspa'
.rodata:000000000000CC60                 db 'ce',0Ah,0
.rodata:000000000000CCB6                 align 8
.rodata:000000000000CCB8 ; const char aCrtkillKillAll[]
.rodata:000000000000CCB8 aCrtkillKillAll db ' * crtkill       kill all line by obeying the echoprt and echoe s'
.rodata:000000000000CCB8                                         ; DATA XREF: usage+856↑o
.rodata:000000000000CCB8                 db 'ettings',0Ah
.rodata:000000000000CCB8                 db ' * -crtkill      kill all line by obeying the echoctl and echok s'
.rodata:000000000000CCB8                 db 'ettings',0Ah,0
.rodata:000000000000CD4B                 align 10h
.rodata:000000000000CD50 ; const char aCtlechoEchoCon[]
.rodata:000000000000CD50 aCtlechoEchoCon db ' * [-]ctlecho    echo control characters in hat notation (',27h,'^'
.rodata:000000000000CD50                                         ; DATA XREF: usage+87B↑o
.rodata:000000000000CD50                 db 'c',27h,')',0Ah,0
.rodata:000000000000CD91                 align 8
.rodata:000000000000CD98 ; const char aEchoEchoInputC[]
.rodata:000000000000CD98 aEchoEchoInputC db '   [-]echo       echo input characters',0Ah,0
.rodata:000000000000CD98                                         ; DATA XREF: usage+8A0↑o
.rodata:000000000000CDC0 ; const char aEchoctlSameAsC[]
.rodata:000000000000CDC0 aEchoctlSameAsC db ' * [-]echoctl    same as [-]ctlecho',0Ah,0
.rodata:000000000000CDC0                                         ; DATA XREF: usage+8C5↑o
.rodata:000000000000CDE5                 align 8
.rodata:000000000000CDE8 ; const char aEchoeSameAsCrt[]
.rodata:000000000000CDE8 aEchoeSameAsCrt db '   [-]echoe      same as [-]crterase',0Ah
.rodata:000000000000CDE8                                         ; DATA XREF: usage+8EA↑o
.rodata:000000000000CDE8                 db '   [-]echok      echo a newline after a kill character',0Ah,0
.rodata:000000000000CE45                 align 8
.rodata:000000000000CE48 ; const char aEchokeSameAsCr[]
.rodata:000000000000CE48 aEchokeSameAsCr db ' * [-]echoke     same as [-]crtkill',0Ah,0
.rodata:000000000000CE48                                         ; DATA XREF: usage+90F↑o
.rodata:000000000000CE6D                 align 10h
.rodata:000000000000CE70 ; const char aEchonlEchoNewl[]
.rodata:000000000000CE70 aEchonlEchoNewl db '   [-]echonl     echo newline even if not echoing other character'
.rodata:000000000000CE70                                         ; DATA XREF: usage+934↑o
.rodata:000000000000CE70                 db 's',0Ah,0
.rodata:000000000000CEB4                 align 8
.rodata:000000000000CEB8 ; const char aEchoprtEchoEra[]
.rodata:000000000000CEB8 aEchoprtEchoEra db ' * [-]echoprt    echo erased characters backward, between ',27h,'\'
.rodata:000000000000CEB8                                         ; DATA XREF: usage+959↑o
.rodata:000000000000CEB8                 db 27h,' and ',27h,'/',27h,0Ah,0
.rodata:000000000000CEFF                 align 20h
.rodata:000000000000CF00 ; const char aExtprocEnableL[]
.rodata:000000000000CF00 aExtprocEnableL db ' * [-]extproc    enable "LINEMODE"; useful with high latency link'
.rodata:000000000000CF00                                         ; DATA XREF: usage+97E↑o
.rodata:000000000000CF00                 db 's',0Ah,0
.rodata:000000000000CF44                 align 8
.rodata:000000000000CF48 ; const char aFlushoDiscardO[]
.rodata:000000000000CF48 aFlushoDiscardO db ' * [-]flusho     discard output',0Ah,0
.rodata:000000000000CF48                                         ; DATA XREF: usage+9A3↑o
.rodata:000000000000CF69                 align 10h
.rodata:000000000000CF70 ; const char aIcanonEnableSp[]
.rodata:000000000000CF70 aIcanonEnableSp db '   [-]icanon     enable special characters: %s',0Ah
.rodata:000000000000CF70                                         ; DATA XREF: usage+9C1↑o
.rodata:000000000000CF70                 db '   [-]iexten     enable non-POSIX special characters',0Ah,0
.rodata:000000000000CFD5                 align 8
.rodata:000000000000CFD8 ; const char aIsigEnableInte[]
.rodata:000000000000CFD8 aIsigEnableInte db '   [-]isig       enable interrupt, quit, and suspend special char'
.rodata:000000000000CFD8                                         ; DATA XREF: usage+9F1↑o
.rodata:000000000000CFD8                 db 'acters',0Ah
.rodata:000000000000CFD8                 db '   [-]noflsh     disable flushing after interrupt and quit specia'
.rodata:000000000000CFD8                 db 'l characters',0Ah,0
.rodata:000000000000D06F                 align 10h
.rodata:000000000000D070 ; const char aPrteraseSameAs[]
.rodata:000000000000D070 aPrteraseSameAs db ' * [-]prterase   same as [-]echoprt',0Ah,0
.rodata:000000000000D070                                         ; DATA XREF: usage+A16↑o
.rodata:000000000000D095                 align 8
.rodata:000000000000D098 ; const char aTostopStopBack[]
.rodata:000000000000D098 aTostopStopBack db ' * [-]tostop     stop background jobs that try to write to the te'
.rodata:000000000000D098                                         ; DATA XREF: usage+A3B↑o
.rodata:000000000000D098                 db 'rminal',0Ah,0
.rodata:000000000000D0E1                 align 8
.rodata:000000000000D0E8 ; const char aXcaseWithIcano[]
.rodata:000000000000D0E8 aXcaseWithIcano db ' * [-]xcase      with icanon, escape with ',27h,'\',27h,' for upp'
.rodata:000000000000D0E8                                         ; DATA XREF: usage+A60↑o
.rodata:000000000000D0E8                 db 'ercase characters',0Ah,0
.rodata:000000000000D130 ; const char aLcaseSameAsLca[]
.rodata:000000000000D130 aLcaseSameAsLca db ' * [-]LCASE      same as [-]lcase',0Ah,0
.rodata:000000000000D130                                         ; DATA XREF: usage+AAA↑o
.rodata:000000000000D153                 align 8
.rodata:000000000000D158 ; const char aCbreakSameAsIc[]
.rodata:000000000000D158 aCbreakSameAsIc db '   cbreak        same as -icanon',0Ah
.rodata:000000000000D158                                         ; DATA XREF: usage+ACF↑o
.rodata:000000000000D158                 db '   -cbreak       same as icanon',0Ah,0
.rodata:000000000000D19A                 align 20h
.rodata:000000000000D1A0 ; const char aCookedSameAsBr[]
.rodata:000000000000D1A0 aCookedSameAsBr db '   cooked        same as brkint ignpar istrip icrnl ixon opost is'
.rodata:000000000000D1A0                                         ; DATA XREF: usage+AF4↑o
.rodata:000000000000D1A0                 db 'ig',0Ah
.rodata:000000000000D1A0                 db '                 icanon, eof and eol characters to their default '
.rodata:000000000000D1A0                 db 'values',0Ah
.rodata:000000000000D1A0                 db '   -cooked       same as raw',0Ah,0
.rodata:000000000000D24A                 align 10h
.rodata:000000000000D250 ; const char aDecSameAsSIntr[]
.rodata:000000000000D250 aDecSameAsSIntr db '   dec           same as %s intr ^c erase 0177',0Ah
.rodata:000000000000D250                                         ; DATA XREF: usage+B3B↑o
.rodata:000000000000D250                 db '                 kill ^u',0Ah,0
.rodata:000000000000D299                 align 20h
.rodata:000000000000D2A0 ; const char aDecctlqSameAsI[]
.rodata:000000000000D2A0 aDecctlqSameAsI db ' * [-]decctlq    same as [-]ixany',0Ah,0
.rodata:000000000000D2A0                                         ; DATA XREF: usage+B6B↑o
.rodata:000000000000D2C3                 align 8
.rodata:000000000000D2C8 ; const char aEkEraseAndKill[]
.rodata:000000000000D2C8 aEkEraseAndKill db '   ek            erase and kill characters to their default value'
.rodata:000000000000D2C8                                         ; DATA XREF: usage+B90↑o
.rodata:000000000000D2C8                 db 's',0Ah
.rodata:000000000000D2C8                 db '   evenp         same as parenb -parodd cs7',0Ah
.rodata:000000000000D2C8                 db '   -evenp        same as -parenb cs8',0Ah,0
.rodata:000000000000D35D                 align 20h
.rodata:000000000000D360 ; const char aLcaseSameAsXca[]
.rodata:000000000000D360 aLcaseSameAsXca db ' * [-]lcase      same as xcase iuclc olcuc',0Ah,0
.rodata:000000000000D360                                         ; DATA XREF: usage+BB5↑o
.rodata:000000000000D38C                 align 10h
.rodata:000000000000D390 ; const char aLitoutSameAsPa[]
.rodata:000000000000D390 aLitoutSameAsPa db '   litout        same as -parenb -istrip -opost cs8',0Ah
.rodata:000000000000D390                                         ; DATA XREF: usage+BDA↑o
.rodata:000000000000D390                 db '   -litout       same as parenb istrip opost cs7',0Ah,0
.rodata:000000000000D3F6                 align 8
.rodata:000000000000D3F8 ; const char aNlSameAsSNlSam[]
.rodata:000000000000D3F8 aNlSameAsSNlSam db '   nl            same as %s',0Ah
.rodata:000000000000D3F8                                         ; DATA XREF: usage+BF8↑o
.rodata:000000000000D3F8                 db '   -nl           same as %s',0Ah,0
.rodata:000000000000D431                 align 8
.rodata:000000000000D438 aIcrnlInlcrIgnc db 'icrnl -inlcr -igncr onlcr -ocrnl -onlret',0
.rodata:000000000000D438                                         ; DATA XREF: usage+C0B↑o
.rodata:000000000000D461                 align 8
.rodata:000000000000D468 ; const char aOddpSameAsPare[]
.rodata:000000000000D468 aOddpSameAsPare db '   oddp          same as parenb parodd cs7',0Ah
.rodata:000000000000D468                                         ; DATA XREF: usage+C2F↑o
.rodata:000000000000D468                 db '   -oddp         same as -parenb cs8',0Ah
.rodata:000000000000D468                 db '   [-]parity     same as [-]evenp',0Ah
.rodata:000000000000D468                 db '   pass8         same as -parenb -istrip cs8',0Ah
.rodata:000000000000D468                 db '   -pass8        same as parenb istrip cs7',0Ah,0
.rodata:000000000000D533                 align 8
.rodata:000000000000D538 ; const char aRawSameAsIgnbr[]
.rodata:000000000000D538 aRawSameAsIgnbr db '   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -'
.rodata:000000000000D538                                         ; DATA XREF: usage+C4D↑o
.rodata:000000000000D538                 db 'istrip',0Ah
.rodata:000000000000D538                 db '                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost'
.rodata:000000000000D538                 db 0Ah
.rodata:000000000000D538                 db '                 -isig%s min 1 time 0',0Ah
.rodata:000000000000D538                 db '   -raw          same as cooked',0Ah,0
.rodata:000000000000D609                 align 10h
.rodata:000000000000D610 aIuclcIxanyImax db ' -iuclc -ixany -imaxbel -xcase',0
.rodata:000000000000D610                                         ; DATA XREF: usage+C60↑o
.rodata:000000000000D62F                 align 10h
.rodata:000000000000D630 ; const char aSaneSameAsCrea[]
.rodata:000000000000D630 aSaneSameAsCrea db '   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl'
.rodata:000000000000D630                                         ; DATA XREF: usage+C76↑o
.rodata:000000000000D630                 db 0Ah
.rodata:000000000000D630                 db '                 icanon iexten echo echoe echok -echonl -noflsh',0Ah
.rodata:000000000000D630                 db '                 %s',0Ah
.rodata:000000000000D630                 db '                 %s',0Ah
.rodata:000000000000D630                 db '                 %s,',0Ah
.rodata:000000000000D630                 db '                 all special characters to their default values',0Ah
.rodata:000000000000D630                 db 0
.rodata:000000000000D730 aIsigTostopOfde db 'isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho',0
.rodata:000000000000D730                                         ; DATA XREF: usage+C90↑o
.rodata:000000000000D76D                 align 10h
.rodata:000000000000D770 aOpostOfillOnlc db 'opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0',0
.rodata:000000000000D770                                         ; DATA XREF: usage+C89↑o
.rodata:000000000000D7AB                 align 10h
.rodata:000000000000D7B0 aIxoffIutf8Iucl db '-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl',0
.rodata:000000000000D7B0                                         ; DATA XREF: usage+C97↑o
.rodata:000000000000D7E9                 align 10h
.rodata:000000000000D7F0 ; const char aHandleTheTtyLi[]
.rodata:000000000000D7F0 aHandleTheTtyLi db 0Ah                  ; DATA XREF: usage+CB4↑o
.rodata:000000000000D7F0                 db 'Handle the tty line connected to standard input.  Without argumen'
.rodata:000000000000D7F0                 db 'ts,',0Ah
.rodata:000000000000D7F0                 db 'prints baud rate, line discipline, and deviations from stty sane.'
.rodata:000000000000D7F0                 db '  In',0Ah
.rodata:000000000000D7F0                 db 'settings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 '
.rodata:000000000000D7F0                 db 'or',0Ah
.rodata:000000000000D7F0                 db '127; special values ^- or undef used to disable special character'
.rodata:000000000000D7F0                 db 's.',0Ah,0
.rodata:000000000000D905                 align 8
.rodata:000000000000D908 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000D908                                         ; DATA XREF: usage+DAF↑o
.rodata:000000000000D908                                         ; usage+E13↑o ...
.rodata:000000000000D930 ; const char aReportAnyTrans[]
.rodata:000000000000D930 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000D930                                         ; DATA XREF: usage+E8F↑o
.rodata:000000000000D930                 db 'am/>',0Ah,0
.rodata:000000000000D977                 align 8
.rodata:000000000000D978 ; const char aOrAvailableLoc[]
.rodata:000000000000D978 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000D978                                         ; DATA XREF: usage:loc_4A6E↑o
.rodata:000000000000D9AB                 align 10h
.rodata:000000000000D9B0 ; const char aOnlyOneDeviceM[]
.rodata:000000000000D9B0 aOnlyOneDeviceM db 'only one device may be specified',0
.rodata:000000000000D9B0                                         ; DATA XREF: main:loc_31ED↑o
.rodata:000000000000D9D1                 align 8
.rodata:000000000000D9D8 ; const char aTheOptionsForV[]
.rodata:000000000000D9D8 aTheOptionsForV db 'the options for verbose and stty-readable output styles are',0Ah
.rodata:000000000000D9D8                                         ; DATA XREF: main:loc_31C9↑o
.rodata:000000000000D9D8                 db 'mutually exclusive',0
.rodata:000000000000DA27                 align 8
.rodata:000000000000DA28 ; const char aWhenSpecifying[]
.rodata:000000000000DA28 aWhenSpecifying db 'when specifying an output style, modes may not be set',0
.rodata:000000000000DA28                                         ; DATA XREF: main:loc_32B4↑o
.rodata:000000000000DA5E                 align 20h
.rodata:000000000000DA60 ; const char aSCouldnTResetN[]
.rodata:000000000000DA60 aSCouldnTResetN db '%s: couldn',27h,'t reset non-blocking mode',0
.rodata:000000000000DA60                                         ; DATA XREF: main+B17↑o
.rodata:000000000000DA85                 align 8
.rodata:000000000000DA88 ; const char aSUnableToPerfo[]
.rodata:000000000000DA88 aSUnableToPerfo db '%s: unable to perform all requested operations',0
.rodata:000000000000DA88                                         ; DATA XREF: main+6B3↑o
.rodata:000000000000DAB7 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000DABC ; const char aWriteError[]
.rodata:000000000000DABC aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_59A3↑o
.rodata:000000000000DAC8 ; const char aS_0[4]
.rodata:000000000000DAC8 aS_0            db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000DAC8                                         ; xnumtoumax+7D↑o
.rodata:000000000000DACC ; const char format[]
.rodata:000000000000DACC format          dd offset quotearg_n+5  ; DATA XREF: main+38D↑o
.rodata:000000000000DACC                                         ; main+584↑o ...
.rodata:000000000000DAD0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000DAD0                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000DB08 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000DB10 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000DB14 unk_DB14        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000DB15                 db  80h
.rodata:000000000000DB16                 db  98h
.rodata:000000000000DB17                 db    0
.rodata:000000000000DB18 unk_DB18        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000DB19                 db  80h
.rodata:000000000000DB1A                 db  99h
.rodata:000000000000DB1B                 db    0
.rodata:000000000000DB1C unk_DB1C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000DB1D                 db    7
.rodata:000000000000DB1E                 db  65h ; e
.rodata:000000000000DB1F                 db    0
.rodata:000000000000DB20 unk_DB20        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000DB21                 db 0AFh
.rodata:000000000000DB22                 db    0
.rodata:000000000000DB23 unk_DB23        db  22h ; "             ; DATA XREF: gettext_quote:loc_5B30↑o
.rodata:000000000000DB23                                         ; quotearg_buffer_restyled:loc_68EB↑o ...
.rodata:000000000000DB24                 db    0
.rodata:000000000000DB25 ; const char asc_DB25[2]
.rodata:000000000000DB25 asc_DB25        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000DB25                                         ; quotearg_buffer_restyled:loc_5CB3↑o ...
.rodata:000000000000DB27 ; const char asc_DB27[2]
.rodata:000000000000DB27 asc_DB27        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000DB27                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000DB29 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000DB31 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000210BA8↓o
.rodata:000000000000DB37 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000210BB0↓o
.rodata:000000000000DB44 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000210BB8↓o
.rodata:000000000000DB44                                         ; .data.rel.ro:0000000000210BD8↓o
.rodata:000000000000DB51 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000DB51                                         ; DATA XREF: .data.rel.ro:0000000000210BC0↓o
.rodata:000000000000DB65 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000210BD0↓o
.rodata:000000000000DB6D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000210BE8↓o
.rodata:000000000000DB75                 align 20h
.rodata:000000000000DB80 jpt_5C91        dd offset loc_6A3A - 0DB80h
.rodata:000000000000DB80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000DB80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000DB80                 dd offset loc_5C93 - 0DB80h ; jump table for switch statement
.rodata:000000000000DB80                 dd offset loc_6C68 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6A74 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6864 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_68C0 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6915 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_695A - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6994 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6994 - 0DB80h
.rodata:000000000000DB80                 dd offset loc_6994 - 0DB80h
.rodata:000000000000DBAC jpt_5DEE        dd offset loc_6010 - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000DBAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh ; jump table for switch statement
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset loc_6050 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_5F58 - 0DBACh, offset loc_5F18 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_60E0 - 0DBACh, offset loc_60D0 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_60C0 - 0DBACh, offset loc_60B0 - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset def_5DEE - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_60A0 - 0DBACh, offset loc_6090 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6060 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_5EF3 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6090 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6090 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6090 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_5EC3 - 0DBACh
.rodata:000000000000DBAC                 dd offset def_5DEE - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6090 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_5F68 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_6038 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6038 - 0DBACh, offset loc_5DF3 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6090 - 0DBACh, offset loc_5DF3 - 0DBACh
.rodata:000000000000DBAC                 dd offset loc_6060 - 0DBACh
.rodata:000000000000DDA8 jpt_617A        dd offset loc_61E0 - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000DDA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h ; jump table for switch statement
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset loc_61D0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6320 - 0DDA8h, offset loc_6308 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_61B8 - 0DDA8h, offset loc_62F8 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_61A0 - 0DDA8h, offset loc_62E0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset def_617A - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62C8 - 0DDA8h, offset loc_62B0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_6298 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_5EF0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_62B0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_62B0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_62B0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_5EC0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset def_617A - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_62B0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6180 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_6280 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6280 - 0DDA8h, offset loc_5DF0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_62B0 - 0DDA8h, offset loc_5DF0 - 0DDA8h
.rodata:000000000000DDA8                 dd offset loc_6298 - 0DDA8h
.rodata:000000000000DFA4                 align 20h
.rodata:000000000000DFC0                 public quoting_style_vals
.rodata:000000000000DFC0 quoting_style_vals db    0
.rodata:000000000000DFC1                 db    0
.rodata:000000000000DFC2                 db    0
.rodata:000000000000DFC3                 db    0
.rodata:000000000000DFC4                 db    1
.rodata:000000000000DFC5                 db    0
.rodata:000000000000DFC6                 db    0
.rodata:000000000000DFC7                 db    0
.rodata:000000000000DFC8                 db    2
.rodata:000000000000DFC9                 db    0
.rodata:000000000000DFCA                 db    0
.rodata:000000000000DFCB                 db    0
.rodata:000000000000DFCC                 db    3
.rodata:000000000000DFCD                 db    0
.rodata:000000000000DFCE                 db    0
.rodata:000000000000DFCF                 db    0
.rodata:000000000000DFD0                 db    4
.rodata:000000000000DFD1                 db    0
.rodata:000000000000DFD2                 db    0
.rodata:000000000000DFD3                 db    0
.rodata:000000000000DFD4                 db    5
.rodata:000000000000DFD5                 db    0
.rodata:000000000000DFD6                 db    0
.rodata:000000000000DFD7                 db    0
.rodata:000000000000DFD8                 db    6
.rodata:000000000000DFD9                 db    0
.rodata:000000000000DFDA                 db    0
.rodata:000000000000DFDB                 db    0
.rodata:000000000000DFDC                 db    7
.rodata:000000000000DFDD                 db    0
.rodata:000000000000DFDE                 db    0
.rodata:000000000000DFDF                 db    0
.rodata:000000000000DFE0                 db    8
.rodata:000000000000DFE1                 db    0
.rodata:000000000000DFE2                 db    0
.rodata:000000000000DFE3                 db    0
.rodata:000000000000DFE4                 db    9
.rodata:000000000000DFE5                 db    0
.rodata:000000000000DFE6                 db    0
.rodata:000000000000DFE7                 db    0
.rodata:000000000000DFE8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000DFF4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000DFFB ; const char aC_0[]
.rodata:000000000000DFFB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_77DC↑o
.rodata:000000000000DFFF ; const char aWrittenByS[]
.rodata:000000000000DFFF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000DFFF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000E00F ; const char aWrittenBySAndS[]
.rodata:000000000000E00F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000E00F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000E026 ; const char aWrittenBySSAnd[]
.rodata:000000000000E026 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000E026                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000E042 ; const char aReportBugsToS[]
.rodata:000000000000E042 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000E042                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000E057 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000E057                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000E06D ; const char aSHomePageS[]
.rodata:000000000000E06D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000E06D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000E081                 align 8
.rodata:000000000000E088 ; const char aLicenseGplv3Gn[]
.rodata:000000000000E088 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000E088                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000E088                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000E088                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000E088                 db '.',0Ah
.rodata:000000000000E088                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000E088                 db 0Ah,0
.rodata:000000000000E154                 align 8
.rodata:000000000000E158 ; const char aWrittenBySSSAn[]
.rodata:000000000000E158 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E158                                         ; DATA XREF: version_etc_arn:loc_7A30↑o
.rodata:000000000000E158                 db 'and %s.',0Ah,0
.rodata:000000000000E178 ; const char aWrittenBySSSSA[]
.rodata:000000000000E178 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E178                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000E178                 db '%s, and %s.',0Ah,0
.rodata:000000000000E19C                 align 20h
.rodata:000000000000E1A0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000E1A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E1A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000E1A0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000E1C8 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000E1C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E1C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000E1C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000E1F4                 align 8
.rodata:000000000000E1F8 ; const char aWrittenBySSSSS[]
.rodata:000000000000E1F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E1F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000E1F8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E1F8                 db 'and %s.',0Ah,0
.rodata:000000000000E228 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000E228 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E228                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000E228                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E228                 db '%s, and %s.',0Ah,0
.rodata:000000000000E25C                 align 20h
.rodata:000000000000E260 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E260                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000E260                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E260                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000E29C                 align 20h
.rodata:000000000000E2A0 ; const char aGeneralHelpUsi[]
.rodata:000000000000E2A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000E2A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000E2A0                 db 0
.rodata:000000000000E2E1                 align 4
.rodata:000000000000E2E4 jpt_7844        dd offset loc_78C6 - 0E2E4h
.rodata:000000000000E2E4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000E2E4                                         ; version_etc_arn+9D↑r
.rodata:000000000000E2E4                 dd offset loc_7958 - 0E2E4h ; jump table for switch statement
.rodata:000000000000E2E4                 dd offset loc_7998 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_79E0 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7A30 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7A88 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7AB8 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7B20 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7850 - 0E2E4h
.rodata:000000000000E2E4                 dd offset loc_7900 - 0E2E4h
.rodata:000000000000E30C                 align 20h
.rodata:000000000000E320                 public version_etc_copyright
.rodata:000000000000E320 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000E320                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000E34F ; const char aMemoryExhauste[]
.rodata:000000000000E34F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000E360 ; const char aCoreutils831Li[]
.rodata:000000000000E360 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000E360                                         ; DATA XREF: xstrtol+696↑o
.rodata:000000000000E360                                         ; xstrtoumax+38C↑o
.rodata:000000000000E380 ; const char a0StrtolBaseStr[]
.rodata:000000000000E380 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000E380                                         ; DATA XREF: xstrtol+69D↑o
.rodata:000000000000E380                                         ; xstrtoumax+393↑o
.rodata:000000000000E3A6                 align 8
.rodata:000000000000E3A8 jpt_832E        dd offset loc_8660 - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                                         ; DATA XREF: xstrtol+19C↑o
.rodata:000000000000E3A8                                         ; xstrtol+1A7↑r
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8590 - 0E3A8h ; jump table for switch statement
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8530 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_84F0 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8330 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset loc_85F8 - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset loc_8690 - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8480 - 0E3A8h
.rodata:000000000000E3A8                 dd offset loc_8410 - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset loc_83E0 - 0E3A8h, offset loc_8390 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8530 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_84F0 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_8330 - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset loc_8690 - 0E3A8h, offset def_832E - 0E3A8h
.rodata:000000000000E3A8                 dd offset def_832E - 0E3A8h, offset loc_83B0 - 0E3A8h
.rodata:000000000000E480 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000E480 __PRETTY_FUNCTION___4162 db 'xstrtol',0 ; DATA XREF: xstrtol:loc_880F↑o
.rodata:000000000000E488 jpt_8A16        dd offset loc_8B66 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000E488                                         ; xstrtoumax+1CF↑r
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8B43 - 0E488h ; jump table for switch statement
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8B7C - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8AFF - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8A18 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset loc_8B20 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset loc_8ADF - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8ABA - 0E488h
.rodata:000000000000E488                 dd offset loc_8A94 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset loc_8A7D - 0E488h, offset loc_8A40 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8B7C - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8AFF - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8A18 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset loc_8ADF - 0E488h, offset def_8A16 - 0E488h
.rodata:000000000000E488                 dd offset def_8A16 - 0E488h, offset loc_8A67 - 0E488h
.rodata:000000000000E560 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000000E560 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:000000000000E560                                         ; DATA XREF: xstrtoumax:loc_8BC5↑o
.rodata:000000000000E56B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000E56D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_90B0↑o
.rodata:000000000000E573 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000E573                                         ; locale_charset:loc_9100↑o
.rodata:000000000000E579                 align 4
.rodata:000000000000E57C jpt_978B        dd offset def_978B - 0E57Ch
.rodata:000000000000E57C                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:000000000000E57C                                         ; vasnprintf+554↑r
.rodata:000000000000E57C                 dd offset loc_9BF0 - 0E57Ch ; jump table for switch statement
.rodata:000000000000E57C                 dd offset loc_9BC0 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9B38 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9AF8 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_98C8 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_98C8 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9A78 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_99F0 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_98C8 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_98C8 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E57C                 dd offset loc_9790 - 0E57Ch
.rodata:000000000000E5C4 jpt_9D30        dd offset loc_9FA0 - 0E5C4h
.rodata:000000000000E5C4                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:000000000000E5C4                                         ; vasnprintf+AF9↑r
.rodata:000000000000E5C4                 dd offset loc_9FC0 - 0E5C4h ; jump table for switch statement
.rodata:000000000000E5C4                 dd offset loc_9FB0 - 0E5C4h
.rodata:000000000000E5C4                 dd offset loc_9E70 - 0E5C4h
.rodata:000000000000E5C4                 dd offset loc_9E70 - 0E5C4h
.rodata:000000000000E5D8 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:000000000000E5DF                 align 20h
.rodata:000000000000E5E0 jpt_A386        dd offset def_A386 - 0E5E0h
.rodata:000000000000E5E0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:000000000000E5E0                                         ; printf_fetchargs+2F↑r
.rodata:000000000000E5E0                 dd offset loc_A40C - 0E5E0h ; jump table for switch statement
.rodata:000000000000E5E0                 dd offset loc_A40C - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A42E - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A42E - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3EA - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3EA - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A482 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A390 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3EA - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3EA - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A454 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A4B0 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E5E0                 dd offset loc_A3C6 - 0E5E0h
.rodata:000000000000E63C                 align 20h
.rodata:000000000000E640 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:000000000000E641                 db    0
.rodata:000000000000E642                 db    0
.rodata:000000000000E643                 db    0
.rodata:000000000000E644                 db  4Eh ; N
.rodata:000000000000E645                 db    0
.rodata:000000000000E646                 db    0
.rodata:000000000000E647                 db    0
.rodata:000000000000E648                 db  55h ; U
.rodata:000000000000E649                 db    0
.rodata:000000000000E64A                 db    0
.rodata:000000000000E64B                 db    0
.rodata:000000000000E64C                 db  4Ch ; L
.rodata:000000000000E64D                 db    0
.rodata:000000000000E64E                 db    0
.rodata:000000000000E64F                 db    0
.rodata:000000000000E650                 db  4Ch ; L
.rodata:000000000000E651                 db    0
.rodata:000000000000E652                 db    0
.rodata:000000000000E653                 db    0
.rodata:000000000000E654                 db  29h ; )
.rodata:000000000000E655                 db    0
.rodata:000000000000E656                 db    0
.rodata:000000000000E657                 db    0
.rodata:000000000000E658                 db    0
.rodata:000000000000E659                 db    0
.rodata:000000000000E65A                 db    0
.rodata:000000000000E65B                 db    0
.rodata:000000000000E65C jpt_A795        dd offset loc_A80B - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000E65C                                         ; printf_parse+23E↑r
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch ; jump table for switch statement
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD2C - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset loc_AD0B - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_A797 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset loc_AD3C - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AC98 - 0E65Ch, offset loc_ACAB - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset loc_AD0B - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD0B - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_ACAB - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset loc_AC4C - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD3C - 0E65Ch, offset loc_AD90 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_ACF8 - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset loc_AD3C - 0E65Ch, offset def_A795 - 0E65Ch
.rodata:000000000000E65C                 dd offset def_A795 - 0E65Ch, offset loc_AD3C - 0E65Ch
.rodata:000000000000E65C _rodata         ends
.rodata:000000000000E65C
.eh_frame_hdr:000000000000E7AC ; ===========================================================================
.eh_frame_hdr:000000000000E7AC
.eh_frame_hdr:000000000000E7AC ; Segment type: Pure data
.eh_frame_hdr:000000000000E7AC ; Segment permissions: Read
.eh_frame_hdr:000000000000E7AC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000E7AC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000E7AC                 ;org 0E7ACh
.eh_frame_hdr:000000000000E7AC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000E7AD                 db  1Bh
.eh_frame_hdr:000000000000E7AE                 db    3
.eh_frame_hdr:000000000000E7AF                 db  3Bh ; ;
.eh_frame_hdr:000000000000E7B0                 db 0D8h
.eh_frame_hdr:000000000000E7B1                 db    2
.eh_frame_hdr:000000000000E7B2                 db    0
.eh_frame_hdr:000000000000E7B3                 db    0
.eh_frame_hdr:000000000000E7B4                 db  5Ah ; Z
.eh_frame_hdr:000000000000E7B5                 db    0
.eh_frame_hdr:000000000000E7B6                 db    0
.eh_frame_hdr:000000000000E7B7                 db    0
.eh_frame_hdr:000000000000E7B8                 db  54h ; T
.eh_frame_hdr:000000000000E7B9                 db  3Ch ; <
.eh_frame_hdr:000000000000E7BA                 db 0FFh
.eh_frame_hdr:000000000000E7BB                 db 0FFh
.eh_frame_hdr:000000000000E7BC                 db  24h ; $
.eh_frame_hdr:000000000000E7BD                 db    3
.eh_frame_hdr:000000000000E7BE                 db    0
.eh_frame_hdr:000000000000E7BF                 db    0
.eh_frame_hdr:000000000000E7C0                 db  14h
.eh_frame_hdr:000000000000E7C1                 db  40h ; @
.eh_frame_hdr:000000000000E7C2                 db 0FFh
.eh_frame_hdr:000000000000E7C3                 db 0FFh
.eh_frame_hdr:000000000000E7C4                 db  4Ch ; L
.eh_frame_hdr:000000000000E7C5                 db    3
.eh_frame_hdr:000000000000E7C6                 db    0
.eh_frame_hdr:000000000000E7C7                 db    0
.eh_frame_hdr:000000000000E7C8                 db  24h ; $
.eh_frame_hdr:000000000000E7C9                 db  40h ; @
.eh_frame_hdr:000000000000E7CA                 db 0FFh
.eh_frame_hdr:000000000000E7CB                 db 0FFh
.eh_frame_hdr:000000000000E7CC                 db  60h ; `
.eh_frame_hdr:000000000000E7CD                 db    5
.eh_frame_hdr:000000000000E7CE                 db    0
.eh_frame_hdr:000000000000E7CF                 db    0
.eh_frame_hdr:000000000000E7D0                 db 0A4h
.eh_frame_hdr:000000000000E7D1                 db  4Bh ; K
.eh_frame_hdr:000000000000E7D2                 db 0FFh
.eh_frame_hdr:000000000000E7D3                 db 0FFh
.eh_frame_hdr:000000000000E7D4                 db 0F4h
.eh_frame_hdr:000000000000E7D5                 db    2
.eh_frame_hdr:000000000000E7D6                 db    0
.eh_frame_hdr:000000000000E7D7                 db    0
.eh_frame_hdr:000000000000E7D8                 db 0B4h
.eh_frame_hdr:000000000000E7D9                 db  4Ch ; L
.eh_frame_hdr:000000000000E7DA                 db 0FFh
.eh_frame_hdr:000000000000E7DB                 db 0FFh
.eh_frame_hdr:000000000000E7DC                 db  64h ; d
.eh_frame_hdr:000000000000E7DD                 db    3
.eh_frame_hdr:000000000000E7DE                 db    0
.eh_frame_hdr:000000000000E7DF                 db    0
.eh_frame_hdr:000000000000E7E0                 db  24h ; $
.eh_frame_hdr:000000000000E7E1                 db  4Dh ; M
.eh_frame_hdr:000000000000E7E2                 db 0FFh
.eh_frame_hdr:000000000000E7E3                 db 0FFh
.eh_frame_hdr:000000000000E7E4                 db  9Ch
.eh_frame_hdr:000000000000E7E5                 db    3
.eh_frame_hdr:000000000000E7E6                 db    0
.eh_frame_hdr:000000000000E7E7                 db    0
.eh_frame_hdr:000000000000E7E8                 db  74h ; t
.eh_frame_hdr:000000000000E7E9                 db  4Dh ; M
.eh_frame_hdr:000000000000E7EA                 db 0FFh
.eh_frame_hdr:000000000000E7EB                 db 0FFh
.eh_frame_hdr:000000000000E7EC                 db 0B4h
.eh_frame_hdr:000000000000E7ED                 db    3
.eh_frame_hdr:000000000000E7EE                 db    0
.eh_frame_hdr:000000000000E7EF                 db    0
.eh_frame_hdr:000000000000E7F0                 db  14h
.eh_frame_hdr:000000000000E7F1                 db  4Fh ; O
.eh_frame_hdr:000000000000E7F2                 db 0FFh
.eh_frame_hdr:000000000000E7F3                 db 0FFh
.eh_frame_hdr:000000000000E7F4                 db 0DCh
.eh_frame_hdr:000000000000E7F5                 db    3
.eh_frame_hdr:000000000000E7F6                 db    0
.eh_frame_hdr:000000000000E7F7                 db    0
.eh_frame_hdr:000000000000E7F8                 db 0B4h
.eh_frame_hdr:000000000000E7F9                 db  50h ; P
.eh_frame_hdr:000000000000E7FA                 db 0FFh
.eh_frame_hdr:000000000000E7FB                 db 0FFh
.eh_frame_hdr:000000000000E7FC                 db  0Ch
.eh_frame_hdr:000000000000E7FD                 db    4
.eh_frame_hdr:000000000000E7FE                 db    0
.eh_frame_hdr:000000000000E7FF                 db    0
.eh_frame_hdr:000000000000E800                 db    4
.eh_frame_hdr:000000000000E801                 db  51h ; Q
.eh_frame_hdr:000000000000E802                 db 0FFh
.eh_frame_hdr:000000000000E803                 db 0FFh
.eh_frame_hdr:000000000000E804                 db  3Ch ; <
.eh_frame_hdr:000000000000E805                 db    4
.eh_frame_hdr:000000000000E806                 db    0
.eh_frame_hdr:000000000000E807                 db    0
.eh_frame_hdr:000000000000E808                 db 0E4h
.eh_frame_hdr:000000000000E809                 db  51h ; Q
.eh_frame_hdr:000000000000E80A                 db 0FFh
.eh_frame_hdr:000000000000E80B                 db 0FFh
.eh_frame_hdr:000000000000E80C                 db  50h ; P
.eh_frame_hdr:000000000000E80D                 db    4
.eh_frame_hdr:000000000000E80E                 db    0
.eh_frame_hdr:000000000000E80F                 db    0
.eh_frame_hdr:000000000000E810                 db  84h
.eh_frame_hdr:000000000000E811                 db  52h ; R
.eh_frame_hdr:000000000000E812                 db 0FFh
.eh_frame_hdr:000000000000E813                 db 0FFh
.eh_frame_hdr:000000000000E814                 db  6Ch ; l
.eh_frame_hdr:000000000000E815                 db    4
.eh_frame_hdr:000000000000E816                 db    0
.eh_frame_hdr:000000000000E817                 db    0
.eh_frame_hdr:000000000000E818                 db  74h ; t
.eh_frame_hdr:000000000000E819                 db  53h ; S
.eh_frame_hdr:000000000000E81A                 db 0FFh
.eh_frame_hdr:000000000000E81B                 db 0FFh
.eh_frame_hdr:000000000000E81C                 db 0B0h
.eh_frame_hdr:000000000000E81D                 db    4
.eh_frame_hdr:000000000000E81E                 db    0
.eh_frame_hdr:000000000000E81F                 db    0
.eh_frame_hdr:000000000000E820                 db  84h
.eh_frame_hdr:000000000000E821                 db  54h ; T
.eh_frame_hdr:000000000000E822                 db 0FFh
.eh_frame_hdr:000000000000E823                 db 0FFh
.eh_frame_hdr:000000000000E824                 db 0E4h
.eh_frame_hdr:000000000000E825                 db    4
.eh_frame_hdr:000000000000E826                 db    0
.eh_frame_hdr:000000000000E827                 db    0
.eh_frame_hdr:000000000000E828                 db 0C4h
.eh_frame_hdr:000000000000E829                 db  63h ; c
.eh_frame_hdr:000000000000E82A                 db 0FFh
.eh_frame_hdr:000000000000E82B                 db 0FFh
.eh_frame_hdr:000000000000E82C                 db  10h
.eh_frame_hdr:000000000000E82D                 db    5
.eh_frame_hdr:000000000000E82E                 db    0
.eh_frame_hdr:000000000000E82F                 db    0
.eh_frame_hdr:000000000000E830                 db  94h
.eh_frame_hdr:000000000000E831                 db  71h ; q
.eh_frame_hdr:000000000000E832                 db 0FFh
.eh_frame_hdr:000000000000E833                 db 0FFh
.eh_frame_hdr:000000000000E834                 db 0D4h
.eh_frame_hdr:000000000000E835                 db    5
.eh_frame_hdr:000000000000E836                 db    0
.eh_frame_hdr:000000000000E837                 db    0
.eh_frame_hdr:000000000000E838                 db 0A4h
.eh_frame_hdr:000000000000E839                 db  71h ; q
.eh_frame_hdr:000000000000E83A                 db 0FFh
.eh_frame_hdr:000000000000E83B                 db 0FFh
.eh_frame_hdr:000000000000E83C                 db 0E8h
.eh_frame_hdr:000000000000E83D                 db    5
.eh_frame_hdr:000000000000E83E                 db    0
.eh_frame_hdr:000000000000E83F                 db    0
.eh_frame_hdr:000000000000E840                 db 0B4h
.eh_frame_hdr:000000000000E841                 db  71h ; q
.eh_frame_hdr:000000000000E842                 db 0FFh
.eh_frame_hdr:000000000000E843                 db 0FFh
.eh_frame_hdr:000000000000E844                 db 0FCh
.eh_frame_hdr:000000000000E845                 db    5
.eh_frame_hdr:000000000000E846                 db    0
.eh_frame_hdr:000000000000E847                 db    0
.eh_frame_hdr:000000000000E848                 db  64h ; d
.eh_frame_hdr:000000000000E849                 db  72h ; r
.eh_frame_hdr:000000000000E84A                 db 0FFh
.eh_frame_hdr:000000000000E84B                 db 0FFh
.eh_frame_hdr:000000000000E84C                 db  2Ch ; ,
.eh_frame_hdr:000000000000E84D                 db    6
.eh_frame_hdr:000000000000E84E                 db    0
.eh_frame_hdr:000000000000E84F                 db    0
.eh_frame_hdr:000000000000E850                 db 0C4h
.eh_frame_hdr:000000000000E851                 db  72h ; r
.eh_frame_hdr:000000000000E852                 db 0FFh
.eh_frame_hdr:000000000000E853                 db 0FFh
.eh_frame_hdr:000000000000E854                 db  64h ; d
.eh_frame_hdr:000000000000E855                 db    6
.eh_frame_hdr:000000000000E856                 db    0
.eh_frame_hdr:000000000000E857                 db    0
.eh_frame_hdr:000000000000E858                 db  64h ; d
.eh_frame_hdr:000000000000E859                 db  73h ; s
.eh_frame_hdr:000000000000E85A                 db 0FFh
.eh_frame_hdr:000000000000E85B                 db 0FFh
.eh_frame_hdr:000000000000E85C                 db  84h
.eh_frame_hdr:000000000000E85D                 db    6
.eh_frame_hdr:000000000000E85E                 db    0
.eh_frame_hdr:000000000000E85F                 db    0
.eh_frame_hdr:000000000000E860                 db  54h ; T
.eh_frame_hdr:000000000000E861                 db  74h ; t
.eh_frame_hdr:000000000000E862                 db 0FFh
.eh_frame_hdr:000000000000E863                 db 0FFh
.eh_frame_hdr:000000000000E864                 db 0C8h
.eh_frame_hdr:000000000000E865                 db    6
.eh_frame_hdr:000000000000E866                 db    0
.eh_frame_hdr:000000000000E867                 db    0
.eh_frame_hdr:000000000000E868                 db  94h
.eh_frame_hdr:000000000000E869                 db  86h
.eh_frame_hdr:000000000000E86A                 db 0FFh
.eh_frame_hdr:000000000000E86B                 db 0FFh
.eh_frame_hdr:000000000000E86C                 db  40h ; @
.eh_frame_hdr:000000000000E86D                 db    7
.eh_frame_hdr:000000000000E86E                 db    0
.eh_frame_hdr:000000000000E86F                 db    0
.eh_frame_hdr:000000000000E870                 db  44h ; D
.eh_frame_hdr:000000000000E871                 db  88h
.eh_frame_hdr:000000000000E872                 db 0FFh
.eh_frame_hdr:000000000000E873                 db 0FFh
.eh_frame_hdr:000000000000E874                 db 0ACh
.eh_frame_hdr:000000000000E875                 db    7
.eh_frame_hdr:000000000000E876                 db    0
.eh_frame_hdr:000000000000E877                 db    0
.eh_frame_hdr:000000000000E878                 db  84h
.eh_frame_hdr:000000000000E879                 db  88h
.eh_frame_hdr:000000000000E87A                 db 0FFh
.eh_frame_hdr:000000000000E87B                 db 0FFh
.eh_frame_hdr:000000000000E87C                 db 0D8h
.eh_frame_hdr:000000000000E87D                 db    7
.eh_frame_hdr:000000000000E87E                 db    0
.eh_frame_hdr:000000000000E87F                 db    0
.eh_frame_hdr:000000000000E880                 db 0A4h
.eh_frame_hdr:000000000000E881                 db  88h
.eh_frame_hdr:000000000000E882                 db 0FFh
.eh_frame_hdr:000000000000E883                 db 0FFh
.eh_frame_hdr:000000000000E884                 db 0ECh
.eh_frame_hdr:000000000000E885                 db    7
.eh_frame_hdr:000000000000E886                 db    0
.eh_frame_hdr:000000000000E887                 db    0
.eh_frame_hdr:000000000000E888                 db 0C4h
.eh_frame_hdr:000000000000E889                 db  88h
.eh_frame_hdr:000000000000E88A                 db 0FFh
.eh_frame_hdr:000000000000E88B                 db 0FFh
.eh_frame_hdr:000000000000E88C                 db    0
.eh_frame_hdr:000000000000E88D                 db    8
.eh_frame_hdr:000000000000E88E                 db    0
.eh_frame_hdr:000000000000E88F                 db    0
.eh_frame_hdr:000000000000E890                 db    4
.eh_frame_hdr:000000000000E891                 db  89h
.eh_frame_hdr:000000000000E892                 db 0FFh
.eh_frame_hdr:000000000000E893                 db 0FFh
.eh_frame_hdr:000000000000E894                 db  14h
.eh_frame_hdr:000000000000E895                 db    8
.eh_frame_hdr:000000000000E896                 db    0
.eh_frame_hdr:000000000000E897                 db    0
.eh_frame_hdr:000000000000E898                 db  24h ; $
.eh_frame_hdr:000000000000E899                 db  89h
.eh_frame_hdr:000000000000E89A                 db 0FFh
.eh_frame_hdr:000000000000E89B                 db 0FFh
.eh_frame_hdr:000000000000E89C                 db  28h ; (
.eh_frame_hdr:000000000000E89D                 db    8
.eh_frame_hdr:000000000000E89E                 db    0
.eh_frame_hdr:000000000000E89F                 db    0
.eh_frame_hdr:000000000000E8A0                 db  54h ; T
.eh_frame_hdr:000000000000E8A1                 db  89h
.eh_frame_hdr:000000000000E8A2                 db 0FFh
.eh_frame_hdr:000000000000E8A3                 db 0FFh
.eh_frame_hdr:000000000000E8A4                 db  3Ch ; <
.eh_frame_hdr:000000000000E8A5                 db    8
.eh_frame_hdr:000000000000E8A6                 db    0
.eh_frame_hdr:000000000000E8A7                 db    0
.eh_frame_hdr:000000000000E8A8                 db 0D4h
.eh_frame_hdr:000000000000E8A9                 db  89h
.eh_frame_hdr:000000000000E8AA                 db 0FFh
.eh_frame_hdr:000000000000E8AB                 db 0FFh
.eh_frame_hdr:000000000000E8AC                 db  90h
.eh_frame_hdr:000000000000E8AD                 db    8
.eh_frame_hdr:000000000000E8AE                 db    0
.eh_frame_hdr:000000000000E8AF                 db    0
.eh_frame_hdr:000000000000E8B0                 db 0C4h
.eh_frame_hdr:000000000000E8B1                 db  8Ah
.eh_frame_hdr:000000000000E8B2                 db 0FFh
.eh_frame_hdr:000000000000E8B3                 db 0FFh
.eh_frame_hdr:000000000000E8B4                 db 0FCh
.eh_frame_hdr:000000000000E8B5                 db    8
.eh_frame_hdr:000000000000E8B6                 db    0
.eh_frame_hdr:000000000000E8B7                 db    0
.eh_frame_hdr:000000000000E8B8                 db 0D4h
.eh_frame_hdr:000000000000E8B9                 db  8Ah
.eh_frame_hdr:000000000000E8BA                 db 0FFh
.eh_frame_hdr:000000000000E8BB                 db 0FFh
.eh_frame_hdr:000000000000E8BC                 db  10h
.eh_frame_hdr:000000000000E8BD                 db    9
.eh_frame_hdr:000000000000E8BE                 db    0
.eh_frame_hdr:000000000000E8BF                 db    0
.eh_frame_hdr:000000000000E8C0                 db  74h ; t
.eh_frame_hdr:000000000000E8C1                 db  8Bh
.eh_frame_hdr:000000000000E8C2                 db 0FFh
.eh_frame_hdr:000000000000E8C3                 db 0FFh
.eh_frame_hdr:000000000000E8C4                 db  3Ch ; <
.eh_frame_hdr:000000000000E8C5                 db    9
.eh_frame_hdr:000000000000E8C6                 db    0
.eh_frame_hdr:000000000000E8C7                 db    0
.eh_frame_hdr:000000000000E8C8                 db  94h
.eh_frame_hdr:000000000000E8C9                 db  8Bh
.eh_frame_hdr:000000000000E8CA                 db 0FFh
.eh_frame_hdr:000000000000E8CB                 db 0FFh
.eh_frame_hdr:000000000000E8CC                 db  50h ; P
.eh_frame_hdr:000000000000E8CD                 db    9
.eh_frame_hdr:000000000000E8CE                 db    0
.eh_frame_hdr:000000000000E8CF                 db    0
.eh_frame_hdr:000000000000E8D0                 db 0A4h
.eh_frame_hdr:000000000000E8D1                 db  8Bh
.eh_frame_hdr:000000000000E8D2                 db 0FFh
.eh_frame_hdr:000000000000E8D3                 db 0FFh
.eh_frame_hdr:000000000000E8D4                 db  64h ; d
.eh_frame_hdr:000000000000E8D5                 db    9
.eh_frame_hdr:000000000000E8D6                 db    0
.eh_frame_hdr:000000000000E8D7                 db    0
.eh_frame_hdr:000000000000E8D8                 db 0C4h
.eh_frame_hdr:000000000000E8D9                 db  8Bh
.eh_frame_hdr:000000000000E8DA                 db 0FFh
.eh_frame_hdr:000000000000E8DB                 db 0FFh
.eh_frame_hdr:000000000000E8DC                 db  78h ; x
.eh_frame_hdr:000000000000E8DD                 db    9
.eh_frame_hdr:000000000000E8DE                 db    0
.eh_frame_hdr:000000000000E8DF                 db    0
.eh_frame_hdr:000000000000E8E0                 db 0E4h
.eh_frame_hdr:000000000000E8E1                 db  8Bh
.eh_frame_hdr:000000000000E8E2                 db 0FFh
.eh_frame_hdr:000000000000E8E3                 db 0FFh
.eh_frame_hdr:000000000000E8E4                 db  8Ch
.eh_frame_hdr:000000000000E8E5                 db    9
.eh_frame_hdr:000000000000E8E6                 db    0
.eh_frame_hdr:000000000000E8E7                 db    0
.eh_frame_hdr:000000000000E8E8                 db  74h ; t
.eh_frame_hdr:000000000000E8E9                 db  8Ch
.eh_frame_hdr:000000000000E8EA                 db 0FFh
.eh_frame_hdr:000000000000E8EB                 db 0FFh
.eh_frame_hdr:000000000000E8EC                 db 0A8h
.eh_frame_hdr:000000000000E8ED                 db    9
.eh_frame_hdr:000000000000E8EE                 db    0
.eh_frame_hdr:000000000000E8EF                 db    0
.eh_frame_hdr:000000000000E8F0                 db    4
.eh_frame_hdr:000000000000E8F1                 db  8Dh
.eh_frame_hdr:000000000000E8F2                 db 0FFh
.eh_frame_hdr:000000000000E8F3                 db 0FFh
.eh_frame_hdr:000000000000E8F4                 db 0C4h
.eh_frame_hdr:000000000000E8F5                 db    9
.eh_frame_hdr:000000000000E8F6                 db    0
.eh_frame_hdr:000000000000E8F7                 db    0
.eh_frame_hdr:000000000000E8F8                 db  14h
.eh_frame_hdr:000000000000E8F9                 db  8Dh
.eh_frame_hdr:000000000000E8FA                 db 0FFh
.eh_frame_hdr:000000000000E8FB                 db 0FFh
.eh_frame_hdr:000000000000E8FC                 db 0D8h
.eh_frame_hdr:000000000000E8FD                 db    9
.eh_frame_hdr:000000000000E8FE                 db    0
.eh_frame_hdr:000000000000E8FF                 db    0
.eh_frame_hdr:000000000000E900                 db  24h ; $
.eh_frame_hdr:000000000000E901                 db  8Dh
.eh_frame_hdr:000000000000E902                 db 0FFh
.eh_frame_hdr:000000000000E903                 db 0FFh
.eh_frame_hdr:000000000000E904                 db 0ECh
.eh_frame_hdr:000000000000E905                 db    9
.eh_frame_hdr:000000000000E906                 db    0
.eh_frame_hdr:000000000000E907                 db    0
.eh_frame_hdr:000000000000E908                 db 0C4h
.eh_frame_hdr:000000000000E909                 db  8Dh
.eh_frame_hdr:000000000000E90A                 db 0FFh
.eh_frame_hdr:000000000000E90B                 db 0FFh
.eh_frame_hdr:000000000000E90C                 db    8
.eh_frame_hdr:000000000000E90D                 db  0Ah
.eh_frame_hdr:000000000000E90E                 db    0
.eh_frame_hdr:000000000000E90F                 db    0
.eh_frame_hdr:000000000000E910                 db 0D4h
.eh_frame_hdr:000000000000E911                 db  8Dh
.eh_frame_hdr:000000000000E912                 db 0FFh
.eh_frame_hdr:000000000000E913                 db 0FFh
.eh_frame_hdr:000000000000E914                 db  1Ch
.eh_frame_hdr:000000000000E915                 db  0Ah
.eh_frame_hdr:000000000000E916                 db    0
.eh_frame_hdr:000000000000E917                 db    0
.eh_frame_hdr:000000000000E918                 db 0F4h
.eh_frame_hdr:000000000000E919                 db  8Dh
.eh_frame_hdr:000000000000E91A                 db 0FFh
.eh_frame_hdr:000000000000E91B                 db 0FFh
.eh_frame_hdr:000000000000E91C                 db  30h ; 0
.eh_frame_hdr:000000000000E91D                 db  0Ah
.eh_frame_hdr:000000000000E91E                 db    0
.eh_frame_hdr:000000000000E91F                 db    0
.eh_frame_hdr:000000000000E920                 db    4
.eh_frame_hdr:000000000000E921                 db  8Eh
.eh_frame_hdr:000000000000E922                 db 0FFh
.eh_frame_hdr:000000000000E923                 db 0FFh
.eh_frame_hdr:000000000000E924                 db  44h ; D
.eh_frame_hdr:000000000000E925                 db  0Ah
.eh_frame_hdr:000000000000E926                 db    0
.eh_frame_hdr:000000000000E927                 db    0
.eh_frame_hdr:000000000000E928                 db  94h
.eh_frame_hdr:000000000000E929                 db  8Eh
.eh_frame_hdr:000000000000E92A                 db 0FFh
.eh_frame_hdr:000000000000E92B                 db 0FFh
.eh_frame_hdr:000000000000E92C                 db  60h ; `
.eh_frame_hdr:000000000000E92D                 db  0Ah
.eh_frame_hdr:000000000000E92E                 db    0
.eh_frame_hdr:000000000000E92F                 db    0
.eh_frame_hdr:000000000000E930                 db  34h ; 4
.eh_frame_hdr:000000000000E931                 db  8Fh
.eh_frame_hdr:000000000000E932                 db 0FFh
.eh_frame_hdr:000000000000E933                 db 0FFh
.eh_frame_hdr:000000000000E934                 db  7Ch ; |
.eh_frame_hdr:000000000000E935                 db  0Ah
.eh_frame_hdr:000000000000E936                 db    0
.eh_frame_hdr:000000000000E937                 db    0
.eh_frame_hdr:000000000000E938                 db  44h ; D
.eh_frame_hdr:000000000000E939                 db  8Fh
.eh_frame_hdr:000000000000E93A                 db 0FFh
.eh_frame_hdr:000000000000E93B                 db 0FFh
.eh_frame_hdr:000000000000E93C                 db  90h
.eh_frame_hdr:000000000000E93D                 db  0Ah
.eh_frame_hdr:000000000000E93E                 db    0
.eh_frame_hdr:000000000000E93F                 db    0
.eh_frame_hdr:000000000000E940                 db  64h ; d
.eh_frame_hdr:000000000000E941                 db  8Fh
.eh_frame_hdr:000000000000E942                 db 0FFh
.eh_frame_hdr:000000000000E943                 db 0FFh
.eh_frame_hdr:000000000000E944                 db 0A4h
.eh_frame_hdr:000000000000E945                 db  0Ah
.eh_frame_hdr:000000000000E946                 db    0
.eh_frame_hdr:000000000000E947                 db    0
.eh_frame_hdr:000000000000E948                 db  84h
.eh_frame_hdr:000000000000E949                 db  8Fh
.eh_frame_hdr:000000000000E94A                 db 0FFh
.eh_frame_hdr:000000000000E94B                 db 0FFh
.eh_frame_hdr:000000000000E94C                 db 0B8h
.eh_frame_hdr:000000000000E94D                 db  0Ah
.eh_frame_hdr:000000000000E94E                 db    0
.eh_frame_hdr:000000000000E94F                 db    0
.eh_frame_hdr:000000000000E950                 db  94h
.eh_frame_hdr:000000000000E951                 db  8Fh
.eh_frame_hdr:000000000000E952                 db 0FFh
.eh_frame_hdr:000000000000E953                 db 0FFh
.eh_frame_hdr:000000000000E954                 db 0CCh
.eh_frame_hdr:000000000000E955                 db  0Ah
.eh_frame_hdr:000000000000E956                 db    0
.eh_frame_hdr:000000000000E957                 db    0
.eh_frame_hdr:000000000000E958                 db 0B4h
.eh_frame_hdr:000000000000E959                 db  8Fh
.eh_frame_hdr:000000000000E95A                 db 0FFh
.eh_frame_hdr:000000000000E95B                 db 0FFh
.eh_frame_hdr:000000000000E95C                 db 0E0h
.eh_frame_hdr:000000000000E95D                 db  0Ah
.eh_frame_hdr:000000000000E95E                 db    0
.eh_frame_hdr:000000000000E95F                 db    0
.eh_frame_hdr:000000000000E960                 db 0D4h
.eh_frame_hdr:000000000000E961                 db  8Fh
.eh_frame_hdr:000000000000E962                 db 0FFh
.eh_frame_hdr:000000000000E963                 db 0FFh
.eh_frame_hdr:000000000000E964                 db 0F4h
.eh_frame_hdr:000000000000E965                 db  0Ah
.eh_frame_hdr:000000000000E966                 db    0
.eh_frame_hdr:000000000000E967                 db    0
.eh_frame_hdr:000000000000E968                 db 0F4h
.eh_frame_hdr:000000000000E969                 db  8Fh
.eh_frame_hdr:000000000000E96A                 db 0FFh
.eh_frame_hdr:000000000000E96B                 db 0FFh
.eh_frame_hdr:000000000000E96C                 db  0Ch
.eh_frame_hdr:000000000000E96D                 db  0Bh
.eh_frame_hdr:000000000000E96E                 db    0
.eh_frame_hdr:000000000000E96F                 db    0
.eh_frame_hdr:000000000000E970                 db  14h
.eh_frame_hdr:000000000000E971                 db  94h
.eh_frame_hdr:000000000000E972                 db 0FFh
.eh_frame_hdr:000000000000E973                 db 0FFh
.eh_frame_hdr:000000000000E974                 db  20h
.eh_frame_hdr:000000000000E975                 db  0Ch
.eh_frame_hdr:000000000000E976                 db    0
.eh_frame_hdr:000000000000E977                 db    0
.eh_frame_hdr:000000000000E978                 db  34h ; 4
.eh_frame_hdr:000000000000E979                 db  94h
.eh_frame_hdr:000000000000E97A                 db 0FFh
.eh_frame_hdr:000000000000E97B                 db 0FFh
.eh_frame_hdr:000000000000E97C                 db  34h ; 4
.eh_frame_hdr:000000000000E97D                 db  0Ch
.eh_frame_hdr:000000000000E97E                 db    0
.eh_frame_hdr:000000000000E97F                 db    0
.eh_frame_hdr:000000000000E980                 db 0B4h
.eh_frame_hdr:000000000000E981                 db  94h
.eh_frame_hdr:000000000000E982                 db 0FFh
.eh_frame_hdr:000000000000E983                 db 0FFh
.eh_frame_hdr:000000000000E984                 db  50h ; P
.eh_frame_hdr:000000000000E985                 db  0Ch
.eh_frame_hdr:000000000000E986                 db    0
.eh_frame_hdr:000000000000E987                 db    0
.eh_frame_hdr:000000000000E988                 db  94h
.eh_frame_hdr:000000000000E989                 db  95h
.eh_frame_hdr:000000000000E98A                 db 0FFh
.eh_frame_hdr:000000000000E98B                 db 0FFh
.eh_frame_hdr:000000000000E98C                 db  7Ch ; |
.eh_frame_hdr:000000000000E98D                 db  0Ch
.eh_frame_hdr:000000000000E98E                 db    0
.eh_frame_hdr:000000000000E98F                 db    0
.eh_frame_hdr:000000000000E990                 db  14h
.eh_frame_hdr:000000000000E991                 db  96h
.eh_frame_hdr:000000000000E992                 db 0FFh
.eh_frame_hdr:000000000000E993                 db 0FFh
.eh_frame_hdr:000000000000E994                 db  9Ch
.eh_frame_hdr:000000000000E995                 db  0Ch
.eh_frame_hdr:000000000000E996                 db    0
.eh_frame_hdr:000000000000E997                 db    0
.eh_frame_hdr:000000000000E998                 db  34h ; 4
.eh_frame_hdr:000000000000E999                 db  96h
.eh_frame_hdr:000000000000E99A                 db 0FFh
.eh_frame_hdr:000000000000E99B                 db 0FFh
.eh_frame_hdr:000000000000E99C                 db 0B8h
.eh_frame_hdr:000000000000E99D                 db  0Ch
.eh_frame_hdr:000000000000E99E                 db    0
.eh_frame_hdr:000000000000E99F                 db    0
.eh_frame_hdr:000000000000E9A0                 db  64h ; d
.eh_frame_hdr:000000000000E9A1                 db  96h
.eh_frame_hdr:000000000000E9A2                 db 0FFh
.eh_frame_hdr:000000000000E9A3                 db 0FFh
.eh_frame_hdr:000000000000E9A4                 db 0CCh
.eh_frame_hdr:000000000000E9A5                 db  0Ch
.eh_frame_hdr:000000000000E9A6                 db    0
.eh_frame_hdr:000000000000E9A7                 db    0
.eh_frame_hdr:000000000000E9A8                 db  74h ; t
.eh_frame_hdr:000000000000E9A9                 db  96h
.eh_frame_hdr:000000000000E9AA                 db 0FFh
.eh_frame_hdr:000000000000E9AB                 db 0FFh
.eh_frame_hdr:000000000000E9AC                 db 0E0h
.eh_frame_hdr:000000000000E9AD                 db  0Ch
.eh_frame_hdr:000000000000E9AE                 db    0
.eh_frame_hdr:000000000000E9AF                 db    0
.eh_frame_hdr:000000000000E9B0                 db 0B4h
.eh_frame_hdr:000000000000E9B1                 db  96h
.eh_frame_hdr:000000000000E9B2                 db 0FFh
.eh_frame_hdr:000000000000E9B3                 db 0FFh
.eh_frame_hdr:000000000000E9B4                 db    4
.eh_frame_hdr:000000000000E9B5                 db  0Dh
.eh_frame_hdr:000000000000E9B6                 db    0
.eh_frame_hdr:000000000000E9B7                 db    0
.eh_frame_hdr:000000000000E9B8                 db 0E4h
.eh_frame_hdr:000000000000E9B9                 db  96h
.eh_frame_hdr:000000000000E9BA                 db 0FFh
.eh_frame_hdr:000000000000E9BB                 db 0FFh
.eh_frame_hdr:000000000000E9BC                 db  18h
.eh_frame_hdr:000000000000E9BD                 db  0Dh
.eh_frame_hdr:000000000000E9BE                 db    0
.eh_frame_hdr:000000000000E9BF                 db    0
.eh_frame_hdr:000000000000E9C0                 db  74h ; t
.eh_frame_hdr:000000000000E9C1                 db  97h
.eh_frame_hdr:000000000000E9C2                 db 0FFh
.eh_frame_hdr:000000000000E9C3                 db 0FFh
.eh_frame_hdr:000000000000E9C4                 db  30h ; 0
.eh_frame_hdr:000000000000E9C5                 db  0Dh
.eh_frame_hdr:000000000000E9C6                 db    0
.eh_frame_hdr:000000000000E9C7                 db    0
.eh_frame_hdr:000000000000E9C8                 db 0C4h
.eh_frame_hdr:000000000000E9C9                 db  97h
.eh_frame_hdr:000000000000E9CA                 db 0FFh
.eh_frame_hdr:000000000000E9CB                 db 0FFh
.eh_frame_hdr:000000000000E9CC                 db  48h ; H
.eh_frame_hdr:000000000000E9CD                 db  0Dh
.eh_frame_hdr:000000000000E9CE                 db    0
.eh_frame_hdr:000000000000E9CF                 db    0
.eh_frame_hdr:000000000000E9D0                 db 0E4h
.eh_frame_hdr:000000000000E9D1                 db  97h
.eh_frame_hdr:000000000000E9D2                 db 0FFh
.eh_frame_hdr:000000000000E9D3                 db 0FFh
.eh_frame_hdr:000000000000E9D4                 db  64h ; d
.eh_frame_hdr:000000000000E9D5                 db  0Dh
.eh_frame_hdr:000000000000E9D6                 db    0
.eh_frame_hdr:000000000000E9D7                 db    0
.eh_frame_hdr:000000000000E9D8                 db  14h
.eh_frame_hdr:000000000000E9D9                 db  98h
.eh_frame_hdr:000000000000E9DA                 db 0FFh
.eh_frame_hdr:000000000000E9DB                 db 0FFh
.eh_frame_hdr:000000000000E9DC                 db  80h
.eh_frame_hdr:000000000000E9DD                 db  0Dh
.eh_frame_hdr:000000000000E9DE                 db    0
.eh_frame_hdr:000000000000E9DF                 db    0
.eh_frame_hdr:000000000000E9E0                 db  44h ; D
.eh_frame_hdr:000000000000E9E1                 db  98h
.eh_frame_hdr:000000000000E9E2                 db 0FFh
.eh_frame_hdr:000000000000E9E3                 db 0FFh
.eh_frame_hdr:000000000000E9E4                 db 0A8h
.eh_frame_hdr:000000000000E9E5                 db  0Dh
.eh_frame_hdr:000000000000E9E6                 db    0
.eh_frame_hdr:000000000000E9E7                 db    0
.eh_frame_hdr:000000000000E9E8                 db  64h ; d
.eh_frame_hdr:000000000000E9E9                 db  98h
.eh_frame_hdr:000000000000E9EA                 db 0FFh
.eh_frame_hdr:000000000000E9EB                 db 0FFh
.eh_frame_hdr:000000000000E9EC                 db 0C4h
.eh_frame_hdr:000000000000E9ED                 db  0Dh
.eh_frame_hdr:000000000000E9EE                 db    0
.eh_frame_hdr:000000000000E9EF                 db    0
.eh_frame_hdr:000000000000E9F0                 db 0A4h
.eh_frame_hdr:000000000000E9F1                 db  98h
.eh_frame_hdr:000000000000E9F2                 db 0FFh
.eh_frame_hdr:000000000000E9F3                 db 0FFh
.eh_frame_hdr:000000000000E9F4                 db 0DCh
.eh_frame_hdr:000000000000E9F5                 db  0Dh
.eh_frame_hdr:000000000000E9F6                 db    0
.eh_frame_hdr:000000000000E9F7                 db    0
.eh_frame_hdr:000000000000E9F8                 db 0A4h
.eh_frame_hdr:000000000000E9F9                 db  99h
.eh_frame_hdr:000000000000E9FA                 db 0FFh
.eh_frame_hdr:000000000000E9FB                 db 0FFh
.eh_frame_hdr:000000000000E9FC                 db  28h ; (
.eh_frame_hdr:000000000000E9FD                 db  0Eh
.eh_frame_hdr:000000000000E9FE                 db    0
.eh_frame_hdr:000000000000E9FF                 db    0
.eh_frame_hdr:000000000000EA00                 db 0D4h
.eh_frame_hdr:000000000000EA01                 db  99h
.eh_frame_hdr:000000000000EA02                 db 0FFh
.eh_frame_hdr:000000000000EA03                 db 0FFh
.eh_frame_hdr:000000000000EA04                 db  44h ; D
.eh_frame_hdr:000000000000EA05                 db  0Eh
.eh_frame_hdr:000000000000EA06                 db    0
.eh_frame_hdr:000000000000EA07                 db    0
.eh_frame_hdr:000000000000EA08                 db  94h
.eh_frame_hdr:000000000000EA09                 db 0A0h
.eh_frame_hdr:000000000000EA0A                 db 0FFh
.eh_frame_hdr:000000000000EA0B                 db 0FFh
.eh_frame_hdr:000000000000EA0C                 db  94h
.eh_frame_hdr:000000000000EA0D                 db  0Eh
.eh_frame_hdr:000000000000EA0E                 db    0
.eh_frame_hdr:000000000000EA0F                 db    0
.eh_frame_hdr:000000000000EA10                 db 0B4h
.eh_frame_hdr:000000000000EA11                 db 0A4h
.eh_frame_hdr:000000000000EA12                 db 0FFh
.eh_frame_hdr:000000000000EA13                 db 0FFh
.eh_frame_hdr:000000000000EA14                 db 0E4h
.eh_frame_hdr:000000000000EA15                 db  0Eh
.eh_frame_hdr:000000000000EA16                 db    0
.eh_frame_hdr:000000000000EA17                 db    0
.eh_frame_hdr:000000000000EA18                 db  34h ; 4
.eh_frame_hdr:000000000000EA19                 db 0A7h
.eh_frame_hdr:000000000000EA1A                 db 0FFh
.eh_frame_hdr:000000000000EA1B                 db 0FFh
.eh_frame_hdr:000000000000EA1C                 db  1Ch
.eh_frame_hdr:000000000000EA1D                 db  0Fh
.eh_frame_hdr:000000000000EA1E                 db    0
.eh_frame_hdr:000000000000EA1F                 db    0
.eh_frame_hdr:000000000000EA20                 db 0C4h
.eh_frame_hdr:000000000000EA21                 db 0A7h
.eh_frame_hdr:000000000000EA22                 db 0FFh
.eh_frame_hdr:000000000000EA23                 db 0FFh
.eh_frame_hdr:000000000000EA24                 db  5Ch ; \
.eh_frame_hdr:000000000000EA25                 db  0Fh
.eh_frame_hdr:000000000000EA26                 db    0
.eh_frame_hdr:000000000000EA27                 db    0
.eh_frame_hdr:000000000000EA28                 db  44h ; D
.eh_frame_hdr:000000000000EA29                 db 0A8h
.eh_frame_hdr:000000000000EA2A                 db 0FFh
.eh_frame_hdr:000000000000EA2B                 db 0FFh
.eh_frame_hdr:000000000000EA2C                 db  84h
.eh_frame_hdr:000000000000EA2D                 db  0Fh
.eh_frame_hdr:000000000000EA2E                 db    0
.eh_frame_hdr:000000000000EA2F                 db    0
.eh_frame_hdr:000000000000EA30                 db 0C4h
.eh_frame_hdr:000000000000EA31                 db 0A8h
.eh_frame_hdr:000000000000EA32                 db 0FFh
.eh_frame_hdr:000000000000EA33                 db 0FFh
.eh_frame_hdr:000000000000EA34                 db 0D4h
.eh_frame_hdr:000000000000EA35                 db  0Fh
.eh_frame_hdr:000000000000EA36                 db    0
.eh_frame_hdr:000000000000EA37                 db    0
.eh_frame_hdr:000000000000EA38                 db  24h ; $
.eh_frame_hdr:000000000000EA39                 db 0A9h
.eh_frame_hdr:000000000000EA3A                 db 0FFh
.eh_frame_hdr:000000000000EA3B                 db 0FFh
.eh_frame_hdr:000000000000EA3C                 db 0F4h
.eh_frame_hdr:000000000000EA3D                 db  0Fh
.eh_frame_hdr:000000000000EA3E                 db    0
.eh_frame_hdr:000000000000EA3F                 db    0
.eh_frame_hdr:000000000000EA40                 db  64h ; d
.eh_frame_hdr:000000000000EA41                 db 0A9h
.eh_frame_hdr:000000000000EA42                 db 0FFh
.eh_frame_hdr:000000000000EA43                 db 0FFh
.eh_frame_hdr:000000000000EA44                 db  14h
.eh_frame_hdr:000000000000EA45                 db  10h
.eh_frame_hdr:000000000000EA46                 db    0
.eh_frame_hdr:000000000000EA47                 db    0
.eh_frame_hdr:000000000000EA48                 db 0E4h
.eh_frame_hdr:000000000000EA49                 db 0A9h
.eh_frame_hdr:000000000000EA4A                 db 0FFh
.eh_frame_hdr:000000000000EA4B                 db 0FFh
.eh_frame_hdr:000000000000EA4C                 db  4Ch ; L
.eh_frame_hdr:000000000000EA4D                 db  10h
.eh_frame_hdr:000000000000EA4E                 db    0
.eh_frame_hdr:000000000000EA4F                 db    0
.eh_frame_hdr:000000000000EA50                 db  24h ; $
.eh_frame_hdr:000000000000EA51                 db 0AAh
.eh_frame_hdr:000000000000EA52                 db 0FFh
.eh_frame_hdr:000000000000EA53                 db 0FFh
.eh_frame_hdr:000000000000EA54                 db  6Ch ; l
.eh_frame_hdr:000000000000EA55                 db  10h
.eh_frame_hdr:000000000000EA56                 db    0
.eh_frame_hdr:000000000000EA57                 db    0
.eh_frame_hdr:000000000000EA58                 db  84h
.eh_frame_hdr:000000000000EA59                 db 0AAh
.eh_frame_hdr:000000000000EA5A                 db 0FFh
.eh_frame_hdr:000000000000EA5B                 db 0FFh
.eh_frame_hdr:000000000000EA5C                 db  9Ch
.eh_frame_hdr:000000000000EA5D                 db  10h
.eh_frame_hdr:000000000000EA5E                 db    0
.eh_frame_hdr:000000000000EA5F                 db    0
.eh_frame_hdr:000000000000EA60                 db 0A4h
.eh_frame_hdr:000000000000EA61                 db 0BBh
.eh_frame_hdr:000000000000EA62                 db 0FFh
.eh_frame_hdr:000000000000EA63                 db 0FFh
.eh_frame_hdr:000000000000EA64                 db 0CCh
.eh_frame_hdr:000000000000EA65                 db  10h
.eh_frame_hdr:000000000000EA66                 db    0
.eh_frame_hdr:000000000000EA67                 db    0
.eh_frame_hdr:000000000000EA68                 db 0A4h
.eh_frame_hdr:000000000000EA69                 db 0BDh
.eh_frame_hdr:000000000000EA6A                 db 0FFh
.eh_frame_hdr:000000000000EA6B                 db 0FFh
.eh_frame_hdr:000000000000EA6C                 db 0E4h
.eh_frame_hdr:000000000000EA6D                 db  10h
.eh_frame_hdr:000000000000EA6E                 db    0
.eh_frame_hdr:000000000000EA6F                 db    0
.eh_frame_hdr:000000000000EA70                 db  94h
.eh_frame_hdr:000000000000EA71                 db 0CAh
.eh_frame_hdr:000000000000EA72                 db 0FFh
.eh_frame_hdr:000000000000EA73                 db 0FFh
.eh_frame_hdr:000000000000EA74                 db  34h ; 4
.eh_frame_hdr:000000000000EA75                 db  11h
.eh_frame_hdr:000000000000EA76                 db    0
.eh_frame_hdr:000000000000EA77                 db    0
.eh_frame_hdr:000000000000EA78                 db    4
.eh_frame_hdr:000000000000EA79                 db 0CBh
.eh_frame_hdr:000000000000EA7A                 db 0FFh
.eh_frame_hdr:000000000000EA7B                 db 0FFh
.eh_frame_hdr:000000000000EA7C                 db  7Ch ; |
.eh_frame_hdr:000000000000EA7D                 db  11h
.eh_frame_hdr:000000000000EA7E                 db    0
.eh_frame_hdr:000000000000EA7F                 db    0
.eh_frame_hdr:000000000000EA80                 db  14h
.eh_frame_hdr:000000000000EA81                 db 0CBh
.eh_frame_hdr:000000000000EA82                 db 0FFh
.eh_frame_hdr:000000000000EA83                 db 0FFh
.eh_frame_hdr:000000000000EA84                 db  94h
.eh_frame_hdr:000000000000EA85                 db  11h
.eh_frame_hdr:000000000000EA86                 db    0
.eh_frame_hdr:000000000000EA87                 db    0
.eh_frame_hdr:000000000000EA87 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000EA87
.eh_frame:000000000000EA88 ; ===========================================================================
.eh_frame:000000000000EA88
.eh_frame:000000000000EA88 ; Segment type: Pure data
.eh_frame:000000000000EA88 ; Segment permissions: Read
.eh_frame:000000000000EA88 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000EA88                 assume cs:_eh_frame
.eh_frame:000000000000EA88                 ;org 0EA88h
.eh_frame:000000000000EA88                 db  14h
.eh_frame:000000000000EA89                 db    0
.eh_frame:000000000000EA8A                 db    0
.eh_frame:000000000000EA8B                 db    0
.eh_frame:000000000000EA8C                 db    0
.eh_frame:000000000000EA8D                 db    0
.eh_frame:000000000000EA8E                 db    0
.eh_frame:000000000000EA8F                 db    0
.eh_frame:000000000000EA90                 db    1
.eh_frame:000000000000EA91                 db  7Ah ; z
.eh_frame:000000000000EA92                 db  52h ; R
.eh_frame:000000000000EA93                 db    0
.eh_frame:000000000000EA94                 db    1
.eh_frame:000000000000EA95                 db  78h ; x
.eh_frame:000000000000EA96                 db  10h
.eh_frame:000000000000EA97                 db    1
.eh_frame:000000000000EA98                 db  1Bh
.eh_frame:000000000000EA99                 db  0Ch
.eh_frame:000000000000EA9A                 db    7
.eh_frame:000000000000EA9B                 db    8
.eh_frame:000000000000EA9C                 db  90h
.eh_frame:000000000000EA9D                 db    1
.eh_frame:000000000000EA9E                 db    7
.eh_frame:000000000000EA9F                 db  10h
.eh_frame:000000000000EAA0                 db  14h
.eh_frame:000000000000EAA1                 db    0
.eh_frame:000000000000EAA2                 db    0
.eh_frame:000000000000EAA3                 db    0
.eh_frame:000000000000EAA4                 db  1Ch
.eh_frame:000000000000EAA5                 db    0
.eh_frame:000000000000EAA6                 db    0
.eh_frame:000000000000EAA7                 db    0
.eh_frame:000000000000EAA8                 db 0A8h
.eh_frame:000000000000EAA9                 db  48h ; H
.eh_frame:000000000000EAAA                 db 0FFh
.eh_frame:000000000000EAAB                 db 0FFh
.eh_frame:000000000000EAAC                 db  2Bh ; +
.eh_frame:000000000000EAAD                 db    0
.eh_frame:000000000000EAAE                 db    0
.eh_frame:000000000000EAAF                 db    0
.eh_frame:000000000000EAB0                 db    0
.eh_frame:000000000000EAB1                 db    0
.eh_frame:000000000000EAB2                 db    0
.eh_frame:000000000000EAB3                 db    0
.eh_frame:000000000000EAB4                 db    0
.eh_frame:000000000000EAB5                 db    0
.eh_frame:000000000000EAB6                 db    0
.eh_frame:000000000000EAB7                 db    0
.eh_frame:000000000000EAB8                 db  14h
.eh_frame:000000000000EAB9                 db    0
.eh_frame:000000000000EABA                 db    0
.eh_frame:000000000000EABB                 db    0
.eh_frame:000000000000EABC                 db    0
.eh_frame:000000000000EABD                 db    0
.eh_frame:000000000000EABE                 db    0
.eh_frame:000000000000EABF                 db    0
.eh_frame:000000000000EAC0                 db    1
.eh_frame:000000000000EAC1                 db  7Ah ; z
.eh_frame:000000000000EAC2                 db  52h ; R
.eh_frame:000000000000EAC3                 db    0
.eh_frame:000000000000EAC4                 db    1
.eh_frame:000000000000EAC5                 db  78h ; x
.eh_frame:000000000000EAC6                 db  10h
.eh_frame:000000000000EAC7                 db    1
.eh_frame:000000000000EAC8                 db  1Bh
.eh_frame:000000000000EAC9                 db  0Ch
.eh_frame:000000000000EACA                 db    7
.eh_frame:000000000000EACB                 db    8
.eh_frame:000000000000EACC                 db  90h
.eh_frame:000000000000EACD                 db    1
.eh_frame:000000000000EACE                 db    0
.eh_frame:000000000000EACF                 db    0
.eh_frame:000000000000EAD0                 db  24h ; $
.eh_frame:000000000000EAD1                 db    0
.eh_frame:000000000000EAD2                 db    0
.eh_frame:000000000000EAD3                 db    0
.eh_frame:000000000000EAD4                 db  1Ch
.eh_frame:000000000000EAD5                 db    0
.eh_frame:000000000000EAD6                 db    0
.eh_frame:000000000000EAD7                 db    0
.eh_frame:000000000000EAD8                 db  28h ; (
.eh_frame:000000000000EAD9                 db  39h ; 9
.eh_frame:000000000000EADA                 db 0FFh
.eh_frame:000000000000EADB                 db 0FFh
.eh_frame:000000000000EADC                 db 0C0h
.eh_frame:000000000000EADD                 db    3
.eh_frame:000000000000EADE                 db    0
.eh_frame:000000000000EADF                 db    0
.eh_frame:000000000000EAE0                 db    0
.eh_frame:000000000000EAE1                 db  0Eh
.eh_frame:000000000000EAE2                 db  10h
.eh_frame:000000000000EAE3                 db  46h ; F
.eh_frame:000000000000EAE4                 db  0Eh
.eh_frame:000000000000EAE5                 db  18h
.eh_frame:000000000000EAE6                 db  4Ah ; J
.eh_frame:000000000000EAE7                 db  0Fh
.eh_frame:000000000000EAE8                 db  0Bh
.eh_frame:000000000000EAE9                 db  77h ; w
.eh_frame:000000000000EAEA                 db    8
.eh_frame:000000000000EAEB                 db  80h
.eh_frame:000000000000EAEC                 db    0
.eh_frame:000000000000EAED                 db  3Fh ; ?
.eh_frame:000000000000EAEE                 db  1Ah
.eh_frame:000000000000EAEF                 db  3Bh ; ;
.eh_frame:000000000000EAF0                 db  2Ah ; *
.eh_frame:000000000000EAF1                 db  33h ; 3
.eh_frame:000000000000EAF2                 db  24h ; $
.eh_frame:000000000000EAF3                 db  22h ; "
.eh_frame:000000000000EAF4                 db    0
.eh_frame:000000000000EAF5                 db    0
.eh_frame:000000000000EAF6                 db    0
.eh_frame:000000000000EAF7                 db    0
.eh_frame:000000000000EAF8                 db  14h
.eh_frame:000000000000EAF9                 db    0
.eh_frame:000000000000EAFA                 db    0
.eh_frame:000000000000EAFB                 db    0
.eh_frame:000000000000EAFC                 db  44h ; D
.eh_frame:000000000000EAFD                 db    0
.eh_frame:000000000000EAFE                 db    0
.eh_frame:000000000000EAFF                 db    0
.eh_frame:000000000000EB00                 db 0C0h
.eh_frame:000000000000EB01                 db  3Ch ; <
.eh_frame:000000000000EB02                 db 0FFh
.eh_frame:000000000000EB03                 db 0FFh
.eh_frame:000000000000EB04                 db    8
.eh_frame:000000000000EB05                 db    0
.eh_frame:000000000000EB06                 db    0
.eh_frame:000000000000EB07                 db    0
.eh_frame:000000000000EB08                 db    0
.eh_frame:000000000000EB09                 db    0
.eh_frame:000000000000EB0A                 db    0
.eh_frame:000000000000EB0B                 db    0
.eh_frame:000000000000EB0C                 db    0
.eh_frame:000000000000EB0D                 db    0
.eh_frame:000000000000EB0E                 db    0
.eh_frame:000000000000EB0F                 db    0
.eh_frame:000000000000EB10                 db  34h ; 4
.eh_frame:000000000000EB11                 db    0
.eh_frame:000000000000EB12                 db    0
.eh_frame:000000000000EB13                 db    0
.eh_frame:000000000000EB14                 db  5Ch ; \
.eh_frame:000000000000EB15                 db    0
.eh_frame:000000000000EB16                 db    0
.eh_frame:000000000000EB17                 db    0
.eh_frame:000000000000EB18                 db  48h ; H
.eh_frame:000000000000EB19                 db  49h ; I
.eh_frame:000000000000EB1A                 db 0FFh
.eh_frame:000000000000EB1B                 db 0FFh
.eh_frame:000000000000EB1C                 db  62h ; b
.eh_frame:000000000000EB1D                 db    0
.eh_frame:000000000000EB1E                 db    0
.eh_frame:000000000000EB1F                 db    0
.eh_frame:000000000000EB20                 db    0
.eh_frame:000000000000EB21                 db  42h ; B
.eh_frame:000000000000EB22                 db  0Eh
.eh_frame:000000000000EB23                 db  10h
.eh_frame:000000000000EB24                 db  8Ch
.eh_frame:000000000000EB25                 db    2
.eh_frame:000000000000EB26                 db  48h ; H
.eh_frame:000000000000EB27                 db  0Eh
.eh_frame:000000000000EB28                 db  18h
.eh_frame:000000000000EB29                 db  86h
.eh_frame:000000000000EB2A                 db    3
.eh_frame:000000000000EB2B                 db  44h ; D
.eh_frame:000000000000EB2C                 db  0Eh
.eh_frame:000000000000EB2D                 db  20h
.eh_frame:000000000000EB2E                 db  83h
.eh_frame:000000000000EB2F                 db    4
.eh_frame:000000000000EB30                 db  7Eh ; ~
.eh_frame:000000000000EB31                 db  0Ah
.eh_frame:000000000000EB32                 db  0Eh
.eh_frame:000000000000EB33                 db  18h
.eh_frame:000000000000EB34                 db  45h ; E
.eh_frame:000000000000EB35                 db  0Eh
.eh_frame:000000000000EB36                 db  10h
.eh_frame:000000000000EB37                 db  42h ; B
.eh_frame:000000000000EB38                 db  0Eh
.eh_frame:000000000000EB39                 db    8
.eh_frame:000000000000EB3A                 db  45h ; E
.eh_frame:000000000000EB3B                 db  0Bh
.eh_frame:000000000000EB3C                 db  41h ; A
.eh_frame:000000000000EB3D                 db  0Eh
.eh_frame:000000000000EB3E                 db  18h
.eh_frame:000000000000EB3F                 db  46h ; F
.eh_frame:000000000000EB40                 db  0Eh
.eh_frame:000000000000EB41                 db  10h
.eh_frame:000000000000EB42                 db  42h ; B
.eh_frame:000000000000EB43                 db  0Eh
.eh_frame:000000000000EB44                 db    8
.eh_frame:000000000000EB45                 db    0
.eh_frame:000000000000EB46                 db    0
.eh_frame:000000000000EB47                 db    0
.eh_frame:000000000000EB48                 db  14h
.eh_frame:000000000000EB49                 db    0
.eh_frame:000000000000EB4A                 db    0
.eh_frame:000000000000EB4B                 db    0
.eh_frame:000000000000EB4C                 db  94h
.eh_frame:000000000000EB4D                 db    0
.eh_frame:000000000000EB4E                 db    0
.eh_frame:000000000000EB4F                 db    0
.eh_frame:000000000000EB50                 db  80h
.eh_frame:000000000000EB51                 db  49h ; I
.eh_frame:000000000000EB52                 db 0FFh
.eh_frame:000000000000EB53                 db 0FFh
.eh_frame:000000000000EB54                 db  4Ch ; L
.eh_frame:000000000000EB55                 db    0
.eh_frame:000000000000EB56                 db    0
.eh_frame:000000000000EB57                 db    0
.eh_frame:000000000000EB58                 db    0
.eh_frame:000000000000EB59                 db    2
.eh_frame:000000000000EB5A                 db  47h ; G
.eh_frame:000000000000EB5B                 db  0Eh
.eh_frame:000000000000EB5C                 db  10h
.eh_frame:000000000000EB5D                 db    0
.eh_frame:000000000000EB5E                 db    0
.eh_frame:000000000000EB5F                 db    0
.eh_frame:000000000000EB60                 db  24h ; $
.eh_frame:000000000000EB61                 db    0
.eh_frame:000000000000EB62                 db    0
.eh_frame:000000000000EB63                 db    0
.eh_frame:000000000000EB64                 db 0ACh
.eh_frame:000000000000EB65                 db    0
.eh_frame:000000000000EB66                 db    0
.eh_frame:000000000000EB67                 db    0
.eh_frame:000000000000EB68                 db 0B8h
.eh_frame:000000000000EB69                 db  49h ; I
.eh_frame:000000000000EB6A                 db 0FFh
.eh_frame:000000000000EB6B                 db 0FFh
.eh_frame:000000000000EB6C                 db  91h
.eh_frame:000000000000EB6D                 db    1
.eh_frame:000000000000EB6E                 db    0
.eh_frame:000000000000EB6F                 db    0
.eh_frame:000000000000EB70                 db    0
.eh_frame:000000000000EB71                 db  41h ; A
.eh_frame:000000000000EB72                 db  0Eh
.eh_frame:000000000000EB73                 db  10h
.eh_frame:000000000000EB74                 db  83h
.eh_frame:000000000000EB75                 db    2
.eh_frame:000000000000EB76                 db  4Ah ; J
.eh_frame:000000000000EB77                 db  0Eh
.eh_frame:000000000000EB78                 db 0F0h
.eh_frame:000000000000EB79                 db    1
.eh_frame:000000000000EB7A                 db    3
.eh_frame:000000000000EB7B                 db  28h ; (
.eh_frame:000000000000EB7C                 db    1
.eh_frame:000000000000EB7D                 db  0Ah
.eh_frame:000000000000EB7E                 db  0Eh
.eh_frame:000000000000EB7F                 db  10h
.eh_frame:000000000000EB80                 db  41h ; A
.eh_frame:000000000000EB81                 db  0Eh
.eh_frame:000000000000EB82                 db    8
.eh_frame:000000000000EB83                 db  44h ; D
.eh_frame:000000000000EB84                 db  0Bh
.eh_frame:000000000000EB85                 db    0
.eh_frame:000000000000EB86                 db    0
.eh_frame:000000000000EB87                 db    0
.eh_frame:000000000000EB88                 db  2Ch ; ,
.eh_frame:000000000000EB89                 db    0
.eh_frame:000000000000EB8A                 db    0
.eh_frame:000000000000EB8B                 db    0
.eh_frame:000000000000EB8C                 db 0D4h
.eh_frame:000000000000EB8D                 db    0
.eh_frame:000000000000EB8E                 db    0
.eh_frame:000000000000EB8F                 db    0
.eh_frame:000000000000EB90                 db  30h ; 0
.eh_frame:000000000000EB91                 db  4Bh ; K
.eh_frame:000000000000EB92                 db 0FFh
.eh_frame:000000000000EB93                 db 0FFh
.eh_frame:000000000000EB94                 db  97h
.eh_frame:000000000000EB95                 db    1
.eh_frame:000000000000EB96                 db    0
.eh_frame:000000000000EB97                 db    0
.eh_frame:000000000000EB98                 db    0
.eh_frame:000000000000EB99                 db  42h ; B
.eh_frame:000000000000EB9A                 db  0Eh
.eh_frame:000000000000EB9B                 db  10h
.eh_frame:000000000000EB9C                 db  8Ch
.eh_frame:000000000000EB9D                 db    2
.eh_frame:000000000000EB9E                 db  41h ; A
.eh_frame:000000000000EB9F                 db  0Eh
.eh_frame:000000000000EBA0                 db  18h
.eh_frame:000000000000EBA1                 db  86h
.eh_frame:000000000000EBA2                 db    3
.eh_frame:000000000000EBA3                 db  44h ; D
.eh_frame:000000000000EBA4                 db  0Eh
.eh_frame:000000000000EBA5                 db  20h
.eh_frame:000000000000EBA6                 db  83h
.eh_frame:000000000000EBA7                 db    4
.eh_frame:000000000000EBA8                 db    2
.eh_frame:000000000000EBA9                 db  8Ch
.eh_frame:000000000000EBAA                 db  0Ah
.eh_frame:000000000000EBAB                 db  0Eh
.eh_frame:000000000000EBAC                 db  18h
.eh_frame:000000000000EBAD                 db  41h ; A
.eh_frame:000000000000EBAE                 db  0Eh
.eh_frame:000000000000EBAF                 db  10h
.eh_frame:000000000000EBB0                 db  42h ; B
.eh_frame:000000000000EBB1                 db  0Eh
.eh_frame:000000000000EBB2                 db    8
.eh_frame:000000000000EBB3                 db  4Ah ; J
.eh_frame:000000000000EBB4                 db  0Bh
.eh_frame:000000000000EBB5                 db    0
.eh_frame:000000000000EBB6                 db    0
.eh_frame:000000000000EBB7                 db    0
.eh_frame:000000000000EBB8                 db  2Ch ; ,
.eh_frame:000000000000EBB9                 db    0
.eh_frame:000000000000EBBA                 db    0
.eh_frame:000000000000EBBB                 db    0
.eh_frame:000000000000EBBC                 db    4
.eh_frame:000000000000EBBD                 db    1
.eh_frame:000000000000EBBE                 db    0
.eh_frame:000000000000EBBF                 db    0
.eh_frame:000000000000EBC0                 db 0A0h
.eh_frame:000000000000EBC1                 db  4Ch ; L
.eh_frame:000000000000EBC2                 db 0FFh
.eh_frame:000000000000EBC3                 db 0FFh
.eh_frame:000000000000EBC4                 db  45h ; E
.eh_frame:000000000000EBC5                 db    0
.eh_frame:000000000000EBC6                 db    0
.eh_frame:000000000000EBC7                 db    0
.eh_frame:000000000000EBC8                 db    0
.eh_frame:000000000000EBC9                 db  41h ; A
.eh_frame:000000000000EBCA                 db  0Eh
.eh_frame:000000000000EBCB                 db  10h
.eh_frame:000000000000EBCC                 db  86h
.eh_frame:000000000000EBCD                 db    2
.eh_frame:000000000000EBCE                 db  41h ; A
.eh_frame:000000000000EBCF                 db  0Eh
.eh_frame:000000000000EBD0                 db  18h
.eh_frame:000000000000EBD1                 db  83h
.eh_frame:000000000000EBD2                 db    3
.eh_frame:000000000000EBD3                 db  56h ; V
.eh_frame:000000000000EBD4                 db  0Eh
.eh_frame:000000000000EBD5                 db  20h
.eh_frame:000000000000EBD6                 db  4Bh ; K
.eh_frame:000000000000EBD7                 db  0Eh
.eh_frame:000000000000EBD8                 db  28h ; (
.eh_frame:000000000000EBD9                 db  4Ch ; L
.eh_frame:000000000000EBDA                 db  0Eh
.eh_frame:000000000000EBDB                 db  30h ; 0
.eh_frame:000000000000EBDC                 db  53h ; S
.eh_frame:000000000000EBDD                 db  0Eh
.eh_frame:000000000000EBDE                 db  18h
.eh_frame:000000000000EBDF                 db  41h ; A
.eh_frame:000000000000EBE0                 db  0Eh
.eh_frame:000000000000EBE1                 db  10h
.eh_frame:000000000000EBE2                 db  41h ; A
.eh_frame:000000000000EBE3                 db  0Eh
.eh_frame:000000000000EBE4                 db    8
.eh_frame:000000000000EBE5                 db    0
.eh_frame:000000000000EBE6                 db    0
.eh_frame:000000000000EBE7                 db    0
.eh_frame:000000000000EBE8                 db  10h
.eh_frame:000000000000EBE9                 db    0
.eh_frame:000000000000EBEA                 db    0
.eh_frame:000000000000EBEB                 db    0
.eh_frame:000000000000EBEC                 db  34h ; 4
.eh_frame:000000000000EBED                 db    1
.eh_frame:000000000000EBEE                 db    0
.eh_frame:000000000000EBEF                 db    0
.eh_frame:000000000000EBF0                 db 0C0h
.eh_frame:000000000000EBF1                 db  4Ch ; L
.eh_frame:000000000000EBF2                 db 0FFh
.eh_frame:000000000000EBF3                 db 0FFh
.eh_frame:000000000000EBF4                 db 0D8h
.eh_frame:000000000000EBF5                 db    0
.eh_frame:000000000000EBF6                 db    0
.eh_frame:000000000000EBF7                 db    0
.eh_frame:000000000000EBF8                 db    0
.eh_frame:000000000000EBF9                 db    0
.eh_frame:000000000000EBFA                 db    0
.eh_frame:000000000000EBFB                 db    0
.eh_frame:000000000000EBFC                 db  18h
.eh_frame:000000000000EBFD                 db    0
.eh_frame:000000000000EBFE                 db    0
.eh_frame:000000000000EBFF                 db    0
.eh_frame:000000000000EC00                 db  48h ; H
.eh_frame:000000000000EC01                 db    1
.eh_frame:000000000000EC02                 db    0
.eh_frame:000000000000EC03                 db    0
.eh_frame:000000000000EC04                 db  8Ch
.eh_frame:000000000000EC05                 db  4Dh ; M
.eh_frame:000000000000EC06                 db 0FFh
.eh_frame:000000000000EC07                 db 0FFh
.eh_frame:000000000000EC08                 db  99h
.eh_frame:000000000000EC09                 db    0
.eh_frame:000000000000EC0A                 db    0
.eh_frame:000000000000EC0B                 db    0
.eh_frame:000000000000EC0C                 db    0
.eh_frame:000000000000EC0D                 db  44h ; D
.eh_frame:000000000000EC0E                 db  0Eh
.eh_frame:000000000000EC0F                 db  30h ; 0
.eh_frame:000000000000EC10                 db    2
.eh_frame:000000000000EC11                 db  78h ; x
.eh_frame:000000000000EC12                 db  0Ah
.eh_frame:000000000000EC13                 db  0Eh
.eh_frame:000000000000EC14                 db    8
.eh_frame:000000000000EC15                 db  44h ; D
.eh_frame:000000000000EC16                 db  0Bh
.eh_frame:000000000000EC17                 db    0
.eh_frame:000000000000EC18                 db  40h ; @
.eh_frame:000000000000EC19                 db    0
.eh_frame:000000000000EC1A                 db    0
.eh_frame:000000000000EC1B                 db    0
.eh_frame:000000000000EC1C                 db  64h ; d
.eh_frame:000000000000EC1D                 db    1
.eh_frame:000000000000EC1E                 db    0
.eh_frame:000000000000EC1F                 db    0
.eh_frame:000000000000EC20                 db  10h
.eh_frame:000000000000EC21                 db  4Eh ; N
.eh_frame:000000000000EC22                 db 0FFh
.eh_frame:000000000000EC23                 db 0FFh
.eh_frame:000000000000EC24                 db 0EFh
.eh_frame:000000000000EC25                 db    0
.eh_frame:000000000000EC26                 db    0
.eh_frame:000000000000EC27                 db    0
.eh_frame:000000000000EC28                 db    0
.eh_frame:000000000000EC29                 db  42h ; B
.eh_frame:000000000000EC2A                 db  0Eh
.eh_frame:000000000000EC2B                 db  10h
.eh_frame:000000000000EC2C                 db  8Eh
.eh_frame:000000000000EC2D                 db    2
.eh_frame:000000000000EC2E                 db  42h ; B
.eh_frame:000000000000EC2F                 db  0Eh
.eh_frame:000000000000EC30                 db  18h
.eh_frame:000000000000EC31                 db  8Dh
.eh_frame:000000000000EC32                 db    3
.eh_frame:000000000000EC33                 db  45h ; E
.eh_frame:000000000000EC34                 db  0Eh
.eh_frame:000000000000EC35                 db  20h
.eh_frame:000000000000EC36                 db  8Ch
.eh_frame:000000000000EC37                 db    4
.eh_frame:000000000000EC38                 db  41h ; A
.eh_frame:000000000000EC39                 db  0Eh
.eh_frame:000000000000EC3A                 db  28h ; (
.eh_frame:000000000000EC3B                 db  86h
.eh_frame:000000000000EC3C                 db    5
.eh_frame:000000000000EC3D                 db  44h ; D
.eh_frame:000000000000EC3E                 db  0Eh
.eh_frame:000000000000EC3F                 db  30h ; 0
.eh_frame:000000000000EC40                 db  83h
.eh_frame:000000000000EC41                 db    6
.eh_frame:000000000000EC42                 db  4Dh ; M
.eh_frame:000000000000EC43                 db  0Eh
.eh_frame:000000000000EC44                 db  40h ; @
.eh_frame:000000000000EC45                 db    2
.eh_frame:000000000000EC46                 db  6Fh ; o
.eh_frame:000000000000EC47                 db  0Ah
.eh_frame:000000000000EC48                 db  0Eh
.eh_frame:000000000000EC49                 db  30h ; 0
.eh_frame:000000000000EC4A                 db  41h ; A
.eh_frame:000000000000EC4B                 db  0Eh
.eh_frame:000000000000EC4C                 db  28h ; (
.eh_frame:000000000000EC4D                 db  41h ; A
.eh_frame:000000000000EC4E                 db  0Eh
.eh_frame:000000000000EC4F                 db  20h
.eh_frame:000000000000EC50                 db  42h ; B
.eh_frame:000000000000EC51                 db  0Eh
.eh_frame:000000000000EC52                 db  18h
.eh_frame:000000000000EC53                 db  42h ; B
.eh_frame:000000000000EC54                 db  0Eh
.eh_frame:000000000000EC55                 db  10h
.eh_frame:000000000000EC56                 db  42h ; B
.eh_frame:000000000000EC57                 db  0Eh
.eh_frame:000000000000EC58                 db    8
.eh_frame:000000000000EC59                 db  41h ; A
.eh_frame:000000000000EC5A                 db  0Bh
.eh_frame:000000000000EC5B                 db    0
.eh_frame:000000000000EC5C                 db  30h ; 0
.eh_frame:000000000000EC5D                 db    0
.eh_frame:000000000000EC5E                 db    0
.eh_frame:000000000000EC5F                 db    0
.eh_frame:000000000000EC60                 db 0A8h
.eh_frame:000000000000EC61                 db    1
.eh_frame:000000000000EC62                 db    0
.eh_frame:000000000000EC63                 db    0
.eh_frame:000000000000EC64                 db 0BCh
.eh_frame:000000000000EC65                 db  4Eh ; N
.eh_frame:000000000000EC66                 db 0FFh
.eh_frame:000000000000EC67                 db 0FFh
.eh_frame:000000000000EC68                 db    1
.eh_frame:000000000000EC69                 db    1
.eh_frame:000000000000EC6A                 db    0
.eh_frame:000000000000EC6B                 db    0
.eh_frame:000000000000EC6C                 db    0
.eh_frame:000000000000EC6D                 db  42h ; B
.eh_frame:000000000000EC6E                 db  0Eh
.eh_frame:000000000000EC6F                 db  10h
.eh_frame:000000000000EC70                 db  8Ch
.eh_frame:000000000000EC71                 db    2
.eh_frame:000000000000EC72                 db  41h ; A
.eh_frame:000000000000EC73                 db  0Eh
.eh_frame:000000000000EC74                 db  18h
.eh_frame:000000000000EC75                 db  86h
.eh_frame:000000000000EC76                 db    3
.eh_frame:000000000000EC77                 db  44h ; D
.eh_frame:000000000000EC78                 db  0Eh
.eh_frame:000000000000EC79                 db  20h
.eh_frame:000000000000EC7A                 db  83h
.eh_frame:000000000000EC7B                 db    4
.eh_frame:000000000000EC7C                 db  4Dh ; M
.eh_frame:000000000000EC7D                 db  0Eh
.eh_frame:000000000000EC7E                 db  30h ; 0
.eh_frame:000000000000EC7F                 db    2
.eh_frame:000000000000EC80                 db  45h ; E
.eh_frame:000000000000EC81                 db  0Ah
.eh_frame:000000000000EC82                 db  0Eh
.eh_frame:000000000000EC83                 db  20h
.eh_frame:000000000000EC84                 db  41h ; A
.eh_frame:000000000000EC85                 db  0Eh
.eh_frame:000000000000EC86                 db  18h
.eh_frame:000000000000EC87                 db  41h ; A
.eh_frame:000000000000EC88                 db  0Eh
.eh_frame:000000000000EC89                 db  10h
.eh_frame:000000000000EC8A                 db  42h ; B
.eh_frame:000000000000EC8B                 db  0Eh
.eh_frame:000000000000EC8C                 db    8
.eh_frame:000000000000EC8D                 db  43h ; C
.eh_frame:000000000000EC8E                 db  0Bh
.eh_frame:000000000000EC8F                 db    0
.eh_frame:000000000000EC90                 db  28h ; (
.eh_frame:000000000000EC91                 db    0
.eh_frame:000000000000EC92                 db    0
.eh_frame:000000000000EC93                 db    0
.eh_frame:000000000000EC94                 db 0DCh
.eh_frame:000000000000EC95                 db    1
.eh_frame:000000000000EC96                 db    0
.eh_frame:000000000000EC97                 db    0
.eh_frame:000000000000EC98                 db  98h
.eh_frame:000000000000EC99                 db  4Fh ; O
.eh_frame:000000000000EC9A                 db 0FFh
.eh_frame:000000000000EC9B                 db 0FFh
.eh_frame:000000000000EC9C                 db  40h ; @
.eh_frame:000000000000EC9D                 db  0Fh
.eh_frame:000000000000EC9E                 db    0
.eh_frame:000000000000EC9F                 db    0
.eh_frame:000000000000ECA0                 db    0
.eh_frame:000000000000ECA1                 db  42h ; B
.eh_frame:000000000000ECA2                 db  0Eh
.eh_frame:000000000000ECA3                 db  10h
.eh_frame:000000000000ECA4                 db  8Dh
.eh_frame:000000000000ECA5                 db    2
.eh_frame:000000000000ECA6                 db  42h ; B
.eh_frame:000000000000ECA7                 db  0Eh
.eh_frame:000000000000ECA8                 db  18h
.eh_frame:000000000000ECA9                 db  8Ch
.eh_frame:000000000000ECAA                 db    3
.eh_frame:000000000000ECAB                 db  46h ; F
.eh_frame:000000000000ECAC                 db  0Eh
.eh_frame:000000000000ECAD                 db  20h
.eh_frame:000000000000ECAE                 db  86h
.eh_frame:000000000000ECAF                 db    4
.eh_frame:000000000000ECB0                 db  41h ; A
.eh_frame:000000000000ECB1                 db  0Eh
.eh_frame:000000000000ECB2                 db  28h ; (
.eh_frame:000000000000ECB3                 db  83h
.eh_frame:000000000000ECB4                 db    5
.eh_frame:000000000000ECB5                 db  49h ; I
.eh_frame:000000000000ECB6                 db  0Eh
.eh_frame:000000000000ECB7                 db 0B0h
.eh_frame:000000000000ECB8                 db    1
.eh_frame:000000000000ECB9                 db    0
.eh_frame:000000000000ECBA                 db    0
.eh_frame:000000000000ECBB                 db    0
.eh_frame:000000000000ECBC                 db  4Ch ; L
.eh_frame:000000000000ECBD                 db    0
.eh_frame:000000000000ECBE                 db    0
.eh_frame:000000000000ECBF                 db    0
.eh_frame:000000000000ECC0                 db    8
.eh_frame:000000000000ECC1                 db    2
.eh_frame:000000000000ECC2                 db    0
.eh_frame:000000000000ECC3                 db    0
.eh_frame:000000000000ECC4                 db 0ACh
.eh_frame:000000000000ECC5                 db  5Eh ; ^
.eh_frame:000000000000ECC6                 db 0FFh
.eh_frame:000000000000ECC7                 db 0FFh
.eh_frame:000000000000ECC8                 db 0C3h
.eh_frame:000000000000ECC9                 db  0Dh
.eh_frame:000000000000ECCA                 db    0
.eh_frame:000000000000ECCB                 db    0
.eh_frame:000000000000ECCC                 db    0
.eh_frame:000000000000ECCD                 db  42h ; B
.eh_frame:000000000000ECCE                 db  0Eh
.eh_frame:000000000000ECCF                 db  10h
.eh_frame:000000000000ECD0                 db  8Fh
.eh_frame:000000000000ECD1                 db    2
.eh_frame:000000000000ECD2                 db  42h ; B
.eh_frame:000000000000ECD3                 db  0Eh
.eh_frame:000000000000ECD4                 db  18h
.eh_frame:000000000000ECD5                 db  8Eh
.eh_frame:000000000000ECD6                 db    3
.eh_frame:000000000000ECD7                 db  42h ; B
.eh_frame:000000000000ECD8                 db  0Eh
.eh_frame:000000000000ECD9                 db  20h
.eh_frame:000000000000ECDA                 db  8Dh
.eh_frame:000000000000ECDB                 db    4
.eh_frame:000000000000ECDC                 db  42h ; B
.eh_frame:000000000000ECDD                 db  0Eh
.eh_frame:000000000000ECDE                 db  28h ; (
.eh_frame:000000000000ECDF                 db  8Ch
.eh_frame:000000000000ECE0                 db    5
.eh_frame:000000000000ECE1                 db  41h ; A
.eh_frame:000000000000ECE2                 db  0Eh
.eh_frame:000000000000ECE3                 db  30h ; 0
.eh_frame:000000000000ECE4                 db  86h
.eh_frame:000000000000ECE5                 db    6
.eh_frame:000000000000ECE6                 db  41h ; A
.eh_frame:000000000000ECE7                 db  0Eh
.eh_frame:000000000000ECE8                 db  38h ; 8
.eh_frame:000000000000ECE9                 db  83h
.eh_frame:000000000000ECEA                 db    7
.eh_frame:000000000000ECEB                 db  44h ; D
.eh_frame:000000000000ECEC                 db  0Eh
.eh_frame:000000000000ECED                 db 0B0h
.eh_frame:000000000000ECEE                 db    1
.eh_frame:000000000000ECEF                 db    3
.eh_frame:000000000000ECF0                 db 0AAh
.eh_frame:000000000000ECF1                 db    1
.eh_frame:000000000000ECF2                 db  0Ah
.eh_frame:000000000000ECF3                 db  0Eh
.eh_frame:000000000000ECF4                 db  38h ; 8
.eh_frame:000000000000ECF5                 db  41h ; A
.eh_frame:000000000000ECF6                 db  0Eh
.eh_frame:000000000000ECF7                 db  30h ; 0
.eh_frame:000000000000ECF8                 db  41h ; A
.eh_frame:000000000000ECF9                 db  0Eh
.eh_frame:000000000000ECFA                 db  28h ; (
.eh_frame:000000000000ECFB                 db  42h ; B
.eh_frame:000000000000ECFC                 db  0Eh
.eh_frame:000000000000ECFD                 db  20h
.eh_frame:000000000000ECFE                 db  42h ; B
.eh_frame:000000000000ECFF                 db  0Eh
.eh_frame:000000000000ED00                 db  18h
.eh_frame:000000000000ED01                 db  42h ; B
.eh_frame:000000000000ED02                 db  0Eh
.eh_frame:000000000000ED03                 db  10h
.eh_frame:000000000000ED04                 db  42h ; B
.eh_frame:000000000000ED05                 db  0Eh
.eh_frame:000000000000ED06                 db    8
.eh_frame:000000000000ED07                 db  46h ; F
.eh_frame:000000000000ED08                 db  0Bh
.eh_frame:000000000000ED09                 db    0
.eh_frame:000000000000ED0A                 db    0
.eh_frame:000000000000ED0B                 db    0
.eh_frame:000000000000ED0C                 db  70h ; p
.eh_frame:000000000000ED0D                 db    0
.eh_frame:000000000000ED0E                 db    0
.eh_frame:000000000000ED0F                 db    0
.eh_frame:000000000000ED10                 db  58h ; X
.eh_frame:000000000000ED11                 db    2
.eh_frame:000000000000ED12                 db    0
.eh_frame:000000000000ED13                 db    0
.eh_frame:000000000000ED14                 db 0BCh
.eh_frame:000000000000ED15                 db  3Ah ; :
.eh_frame:000000000000ED16                 db 0FFh
.eh_frame:000000000000ED17                 db 0FFh
.eh_frame:000000000000ED18                 db  78h ; x
.eh_frame:000000000000ED19                 db  0Bh
.eh_frame:000000000000ED1A                 db    0
.eh_frame:000000000000ED1B                 db    0
.eh_frame:000000000000ED1C                 db    0
.eh_frame:000000000000ED1D                 db  42h ; B
.eh_frame:000000000000ED1E                 db  0Eh
.eh_frame:000000000000ED1F                 db  10h
.eh_frame:000000000000ED20                 db  8Fh
.eh_frame:000000000000ED21                 db    2
.eh_frame:000000000000ED22                 db  42h ; B
.eh_frame:000000000000ED23                 db  0Eh
.eh_frame:000000000000ED24                 db  18h
.eh_frame:000000000000ED25                 db  8Eh
.eh_frame:000000000000ED26                 db    3
.eh_frame:000000000000ED27                 db  48h ; H
.eh_frame:000000000000ED28                 db  0Eh
.eh_frame:000000000000ED29                 db  20h
.eh_frame:000000000000ED2A                 db  8Dh
.eh_frame:000000000000ED2B                 db    4
.eh_frame:000000000000ED2C                 db  42h ; B
.eh_frame:000000000000ED2D                 db  0Eh
.eh_frame:000000000000ED2E                 db  28h ; (
.eh_frame:000000000000ED2F                 db  8Ch
.eh_frame:000000000000ED30                 db    5
.eh_frame:000000000000ED31                 db  44h ; D
.eh_frame:000000000000ED32                 db  0Eh
.eh_frame:000000000000ED33                 db  30h ; 0
.eh_frame:000000000000ED34                 db  86h
.eh_frame:000000000000ED35                 db    6
.eh_frame:000000000000ED36                 db  41h ; A
.eh_frame:000000000000ED37                 db  0Eh
.eh_frame:000000000000ED38                 db  38h ; 8
.eh_frame:000000000000ED39                 db  83h
.eh_frame:000000000000ED3A                 db    7
.eh_frame:000000000000ED3B                 db  4Fh ; O
.eh_frame:000000000000ED3C                 db  0Eh
.eh_frame:000000000000ED3D                 db  60h ; `
.eh_frame:000000000000ED3E                 db    3
.eh_frame:000000000000ED3F                 db  1Dh
.eh_frame:000000000000ED40                 db    2
.eh_frame:000000000000ED41                 db  0Eh
.eh_frame:000000000000ED42                 db  68h ; h
.eh_frame:000000000000ED43                 db  5Bh ; [
.eh_frame:000000000000ED44                 db  0Eh
.eh_frame:000000000000ED45                 db  70h ; p
.eh_frame:000000000000ED46                 db  4Bh ; K
.eh_frame:000000000000ED47                 db  0Eh
.eh_frame:000000000000ED48                 db  68h ; h
.eh_frame:000000000000ED49                 db  41h ; A
.eh_frame:000000000000ED4A                 db  0Eh
.eh_frame:000000000000ED4B                 db  60h ; `
.eh_frame:000000000000ED4C                 db    2
.eh_frame:000000000000ED4D                 db  89h
.eh_frame:000000000000ED4E                 db  0Eh
.eh_frame:000000000000ED4F                 db  68h ; h
.eh_frame:000000000000ED50                 db  58h ; X
.eh_frame:000000000000ED51                 db  0Eh
.eh_frame:000000000000ED52                 db  70h ; p
.eh_frame:000000000000ED53                 db  4Bh ; K
.eh_frame:000000000000ED54                 db  0Eh
.eh_frame:000000000000ED55                 db  68h ; h
.eh_frame:000000000000ED56                 db  41h ; A
.eh_frame:000000000000ED57                 db  0Eh
.eh_frame:000000000000ED58                 db  60h ; `
.eh_frame:000000000000ED59                 db  65h ; e
.eh_frame:000000000000ED5A                 db  0Ah
.eh_frame:000000000000ED5B                 db  0Eh
.eh_frame:000000000000ED5C                 db  38h ; 8
.eh_frame:000000000000ED5D                 db  41h ; A
.eh_frame:000000000000ED5E                 db  0Eh
.eh_frame:000000000000ED5F                 db  30h ; 0
.eh_frame:000000000000ED60                 db  41h ; A
.eh_frame:000000000000ED61                 db  0Eh
.eh_frame:000000000000ED62                 db  28h ; (
.eh_frame:000000000000ED63                 db  42h ; B
.eh_frame:000000000000ED64                 db  0Eh
.eh_frame:000000000000ED65                 db  20h
.eh_frame:000000000000ED66                 db  42h ; B
.eh_frame:000000000000ED67                 db  0Eh
.eh_frame:000000000000ED68                 db  18h
.eh_frame:000000000000ED69                 db  42h ; B
.eh_frame:000000000000ED6A                 db  0Eh
.eh_frame:000000000000ED6B                 db  10h
.eh_frame:000000000000ED6C                 db  42h ; B
.eh_frame:000000000000ED6D                 db  0Eh
.eh_frame:000000000000ED6E                 db    8
.eh_frame:000000000000ED6F                 db  41h ; A
.eh_frame:000000000000ED70                 db  0Bh
.eh_frame:000000000000ED71                 db    3
.eh_frame:000000000000ED72                 db 0E9h
.eh_frame:000000000000ED73                 db    5
.eh_frame:000000000000ED74                 db  0Eh
.eh_frame:000000000000ED75                 db  68h ; h
.eh_frame:000000000000ED76                 db  5Eh ; ^
.eh_frame:000000000000ED77                 db  0Eh
.eh_frame:000000000000ED78                 db  70h ; p
.eh_frame:000000000000ED79                 db  4Bh ; K
.eh_frame:000000000000ED7A                 db  0Eh
.eh_frame:000000000000ED7B                 db  68h ; h
.eh_frame:000000000000ED7C                 db  42h ; B
.eh_frame:000000000000ED7D                 db  0Eh
.eh_frame:000000000000ED7E                 db  60h ; `
.eh_frame:000000000000ED7F                 db    0
.eh_frame:000000000000ED80                 db  10h
.eh_frame:000000000000ED81                 db    0
.eh_frame:000000000000ED82                 db    0
.eh_frame:000000000000ED83                 db    0
.eh_frame:000000000000ED84                 db 0CCh
.eh_frame:000000000000ED85                 db    2
.eh_frame:000000000000ED86                 db    0
.eh_frame:000000000000ED87                 db    0
.eh_frame:000000000000ED88                 db 0B8h
.eh_frame:000000000000ED89                 db  6Bh ; k
.eh_frame:000000000000ED8A                 db 0FFh
.eh_frame:000000000000ED8B                 db 0FFh
.eh_frame:000000000000ED8C                 db    8
.eh_frame:000000000000ED8D                 db    0
.eh_frame:000000000000ED8E                 db    0
.eh_frame:000000000000ED8F                 db    0
.eh_frame:000000000000ED90                 db    0
.eh_frame:000000000000ED91                 db    0
.eh_frame:000000000000ED92                 db    0
.eh_frame:000000000000ED93                 db    0
.eh_frame:000000000000ED94                 db  10h
.eh_frame:000000000000ED95                 db    0
.eh_frame:000000000000ED96                 db    0
.eh_frame:000000000000ED97                 db    0
.eh_frame:000000000000ED98                 db 0E0h
.eh_frame:000000000000ED99                 db    2
.eh_frame:000000000000ED9A                 db    0
.eh_frame:000000000000ED9B                 db    0
.eh_frame:000000000000ED9C                 db 0B4h
.eh_frame:000000000000ED9D                 db  6Bh ; k
.eh_frame:000000000000ED9E                 db 0FFh
.eh_frame:000000000000ED9F                 db 0FFh
.eh_frame:000000000000EDA0                 db    8
.eh_frame:000000000000EDA1                 db    0
.eh_frame:000000000000EDA2                 db    0
.eh_frame:000000000000EDA3                 db    0
.eh_frame:000000000000EDA4                 db    0
.eh_frame:000000000000EDA5                 db    0
.eh_frame:000000000000EDA6                 db    0
.eh_frame:000000000000EDA7                 db    0
.eh_frame:000000000000EDA8                 db  2Ch ; ,
.eh_frame:000000000000EDA9                 db    0
.eh_frame:000000000000EDAA                 db    0
.eh_frame:000000000000EDAB                 db    0
.eh_frame:000000000000EDAC                 db 0F4h
.eh_frame:000000000000EDAD                 db    2
.eh_frame:000000000000EDAE                 db    0
.eh_frame:000000000000EDAF                 db    0
.eh_frame:000000000000EDB0                 db 0B0h
.eh_frame:000000000000EDB1                 db  6Bh ; k
.eh_frame:000000000000EDB2                 db 0FFh
.eh_frame:000000000000EDB3                 db 0FFh
.eh_frame:000000000000EDB4                 db 0A4h
.eh_frame:000000000000EDB5                 db    0
.eh_frame:000000000000EDB6                 db    0
.eh_frame:000000000000EDB7                 db    0
.eh_frame:000000000000EDB8                 db    0
.eh_frame:000000000000EDB9                 db  41h ; A
.eh_frame:000000000000EDBA                 db  0Eh
.eh_frame:000000000000EDBB                 db  10h
.eh_frame:000000000000EDBC                 db  86h
.eh_frame:000000000000EDBD                 db    2
.eh_frame:000000000000EDBE                 db  41h ; A
.eh_frame:000000000000EDBF                 db  0Eh
.eh_frame:000000000000EDC0                 db  18h
.eh_frame:000000000000EDC1                 db  83h
.eh_frame:000000000000EDC2                 db    3
.eh_frame:000000000000EDC3                 db  44h ; D
.eh_frame:000000000000EDC4                 db  0Eh
.eh_frame:000000000000EDC5                 db  20h
.eh_frame:000000000000EDC6                 db  7Ah ; z
.eh_frame:000000000000EDC7                 db  0Ah
.eh_frame:000000000000EDC8                 db  0Eh
.eh_frame:000000000000EDC9                 db  18h
.eh_frame:000000000000EDCA                 db  41h ; A
.eh_frame:000000000000EDCB                 db  0Eh
.eh_frame:000000000000EDCC                 db  10h
.eh_frame:000000000000EDCD                 db  41h ; A
.eh_frame:000000000000EDCE                 db  0Eh
.eh_frame:000000000000EDCF                 db    8
.eh_frame:000000000000EDD0                 db  41h ; A
.eh_frame:000000000000EDD1                 db  0Bh
.eh_frame:000000000000EDD2                 db    0
.eh_frame:000000000000EDD3                 db    0
.eh_frame:000000000000EDD4                 db    0
.eh_frame:000000000000EDD5                 db    0
.eh_frame:000000000000EDD6                 db    0
.eh_frame:000000000000EDD7                 db    0
.eh_frame:000000000000EDD8                 db  34h ; 4
.eh_frame:000000000000EDD9                 db    0
.eh_frame:000000000000EDDA                 db    0
.eh_frame:000000000000EDDB                 db    0
.eh_frame:000000000000EDDC                 db  24h ; $
.eh_frame:000000000000EDDD                 db    3
.eh_frame:000000000000EDDE                 db    0
.eh_frame:000000000000EDDF                 db    0
.eh_frame:000000000000EDE0                 db  30h ; 0
.eh_frame:000000000000EDE1                 db  6Ch ; l
.eh_frame:000000000000EDE2                 db 0FFh
.eh_frame:000000000000EDE3                 db 0FFh
.eh_frame:000000000000EDE4                 db  56h ; V
.eh_frame:000000000000EDE5                 db    0
.eh_frame:000000000000EDE6                 db    0
.eh_frame:000000000000EDE7                 db    0
.eh_frame:000000000000EDE8                 db    0
.eh_frame:000000000000EDE9                 db  42h ; B
.eh_frame:000000000000EDEA                 db  0Eh
.eh_frame:000000000000EDEB                 db  10h
.eh_frame:000000000000EDEC                 db  8Dh
.eh_frame:000000000000EDED                 db    2
.eh_frame:000000000000EDEE                 db  42h ; B
.eh_frame:000000000000EDEF                 db  0Eh
.eh_frame:000000000000EDF0                 db  18h
.eh_frame:000000000000EDF1                 db  8Ch
.eh_frame:000000000000EDF2                 db    3
.eh_frame:000000000000EDF3                 db  43h ; C
.eh_frame:000000000000EDF4                 db  0Eh
.eh_frame:000000000000EDF5                 db  20h
.eh_frame:000000000000EDF6                 db  86h
.eh_frame:000000000000EDF7                 db    4
.eh_frame:000000000000EDF8                 db  41h ; A
.eh_frame:000000000000EDF9                 db  0Eh
.eh_frame:000000000000EDFA                 db  28h ; (
.eh_frame:000000000000EDFB                 db  83h
.eh_frame:000000000000EDFC                 db    5
.eh_frame:000000000000EDFD                 db  4Dh ; M
.eh_frame:000000000000EDFE                 db  0Eh
.eh_frame:000000000000EDFF                 db  30h ; 0
.eh_frame:000000000000EE00                 db  78h ; x
.eh_frame:000000000000EE01                 db  0Eh
.eh_frame:000000000000EE02                 db  28h ; (
.eh_frame:000000000000EE03                 db  43h ; C
.eh_frame:000000000000EE04                 db  0Eh
.eh_frame:000000000000EE05                 db  20h
.eh_frame:000000000000EE06                 db  41h ; A
.eh_frame:000000000000EE07                 db  0Eh
.eh_frame:000000000000EE08                 db  18h
.eh_frame:000000000000EE09                 db  42h ; B
.eh_frame:000000000000EE0A                 db  0Eh
.eh_frame:000000000000EE0B                 db  10h
.eh_frame:000000000000EE0C                 db  42h ; B
.eh_frame:000000000000EE0D                 db  0Eh
.eh_frame:000000000000EE0E                 db    8
.eh_frame:000000000000EE0F                 db    0
.eh_frame:000000000000EE10                 db  1Ch
.eh_frame:000000000000EE11                 db    0
.eh_frame:000000000000EE12                 db    0
.eh_frame:000000000000EE13                 db    0
.eh_frame:000000000000EE14                 db  5Ch ; \
.eh_frame:000000000000EE15                 db    3
.eh_frame:000000000000EE16                 db    0
.eh_frame:000000000000EE17                 db    0
.eh_frame:000000000000EE18                 db  58h ; X
.eh_frame:000000000000EE19                 db  6Ch ; l
.eh_frame:000000000000EE1A                 db 0FFh
.eh_frame:000000000000EE1B                 db 0FFh
.eh_frame:000000000000EE1C                 db  9Fh
.eh_frame:000000000000EE1D                 db    0
.eh_frame:000000000000EE1E                 db    0
.eh_frame:000000000000EE1F                 db    0
.eh_frame:000000000000EE20                 db    0
.eh_frame:000000000000EE21                 db  44h ; D
.eh_frame:000000000000EE22                 db  0Eh
.eh_frame:000000000000EE23                 db  10h
.eh_frame:000000000000EE24                 db  83h
.eh_frame:000000000000EE25                 db    2
.eh_frame:000000000000EE26                 db    2
.eh_frame:000000000000EE27                 db  78h ; x
.eh_frame:000000000000EE28                 db  0Ah
.eh_frame:000000000000EE29                 db  0Eh
.eh_frame:000000000000EE2A                 db    8
.eh_frame:000000000000EE2B                 db  41h ; A
.eh_frame:000000000000EE2C                 db  0Bh
.eh_frame:000000000000EE2D                 db    0
.eh_frame:000000000000EE2E                 db    0
.eh_frame:000000000000EE2F                 db    0
.eh_frame:000000000000EE30                 db  40h ; @
.eh_frame:000000000000EE31                 db    0
.eh_frame:000000000000EE32                 db    0
.eh_frame:000000000000EE33                 db    0
.eh_frame:000000000000EE34                 db  7Ch ; |
.eh_frame:000000000000EE35                 db    3
.eh_frame:000000000000EE36                 db    0
.eh_frame:000000000000EE37                 db    0
.eh_frame:000000000000EE38                 db 0D8h
.eh_frame:000000000000EE39                 db  6Ch ; l
.eh_frame:000000000000EE3A                 db 0FFh
.eh_frame:000000000000EE3B                 db 0FFh
.eh_frame:000000000000EE3C                 db 0E7h
.eh_frame:000000000000EE3D                 db    0
.eh_frame:000000000000EE3E                 db    0
.eh_frame:000000000000EE3F                 db    0
.eh_frame:000000000000EE40                 db    0
.eh_frame:000000000000EE41                 db  41h ; A
.eh_frame:000000000000EE42                 db  0Eh
.eh_frame:000000000000EE43                 db  10h
.eh_frame:000000000000EE44                 db  86h
.eh_frame:000000000000EE45                 db    2
.eh_frame:000000000000EE46                 db  41h ; A
.eh_frame:000000000000EE47                 db  0Eh
.eh_frame:000000000000EE48                 db  18h
.eh_frame:000000000000EE49                 db  83h
.eh_frame:000000000000EE4A                 db    3
.eh_frame:000000000000EE4B                 db  49h ; I
.eh_frame:000000000000EE4C                 db  0Eh
.eh_frame:000000000000EE4D                 db  20h
.eh_frame:000000000000EE4E                 db  6Eh ; n
.eh_frame:000000000000EE4F                 db  0Ah
.eh_frame:000000000000EE50                 db  0Eh
.eh_frame:000000000000EE51                 db  18h
.eh_frame:000000000000EE52                 db  41h ; A
.eh_frame:000000000000EE53                 db  0Eh
.eh_frame:000000000000EE54                 db  10h
.eh_frame:000000000000EE55                 db  41h ; A
.eh_frame:000000000000EE56                 db  0Eh
.eh_frame:000000000000EE57                 db    8
.eh_frame:000000000000EE58                 db  45h ; E
.eh_frame:000000000000EE59                 db  0Bh
.eh_frame:000000000000EE5A                 db    2
.eh_frame:000000000000EE5B                 db  4Ah ; J
.eh_frame:000000000000EE5C                 db  0Ah
.eh_frame:000000000000EE5D                 db  0Eh
.eh_frame:000000000000EE5E                 db  18h
.eh_frame:000000000000EE5F                 db  41h ; A
.eh_frame:000000000000EE60                 db  0Eh
.eh_frame:000000000000EE61                 db  10h
.eh_frame:000000000000EE62                 db  41h ; A
.eh_frame:000000000000EE63                 db  0Eh
.eh_frame:000000000000EE64                 db    8
.eh_frame:000000000000EE65                 db  44h ; D
.eh_frame:000000000000EE66                 db  0Bh
.eh_frame:000000000000EE67                 db    2
.eh_frame:000000000000EE68                 db  54h ; T
.eh_frame:000000000000EE69                 db  0Eh
.eh_frame:000000000000EE6A                 db  18h
.eh_frame:000000000000EE6B                 db  41h ; A
.eh_frame:000000000000EE6C                 db  0Eh
.eh_frame:000000000000EE6D                 db  10h
.eh_frame:000000000000EE6E                 db  41h ; A
.eh_frame:000000000000EE6F                 db  0Eh
.eh_frame:000000000000EE70                 db    8
.eh_frame:000000000000EE71                 db    0
.eh_frame:000000000000EE72                 db    0
.eh_frame:000000000000EE73                 db    0
.eh_frame:000000000000EE74                 db  74h ; t
.eh_frame:000000000000EE75                 db    0
.eh_frame:000000000000EE76                 db    0
.eh_frame:000000000000EE77                 db    0
.eh_frame:000000000000EE78                 db 0C0h
.eh_frame:000000000000EE79                 db    3
.eh_frame:000000000000EE7A                 db    0
.eh_frame:000000000000EE7B                 db    0
.eh_frame:000000000000EE7C                 db  84h
.eh_frame:000000000000EE7D                 db  6Dh ; m
.eh_frame:000000000000EE7E                 db 0FFh
.eh_frame:000000000000EE7F                 db 0FFh
.eh_frame:000000000000EE80                 db  34h ; 4
.eh_frame:000000000000EE81                 db  12h
.eh_frame:000000000000EE82                 db    0
.eh_frame:000000000000EE83                 db    0
.eh_frame:000000000000EE84                 db    0
.eh_frame:000000000000EE85                 db  42h ; B
.eh_frame:000000000000EE86                 db  0Eh
.eh_frame:000000000000EE87                 db  10h
.eh_frame:000000000000EE88                 db  8Fh
.eh_frame:000000000000EE89                 db    2
.eh_frame:000000000000EE8A                 db  42h ; B
.eh_frame:000000000000EE8B                 db  0Eh
.eh_frame:000000000000EE8C                 db  18h
.eh_frame:000000000000EE8D                 db  8Eh
.eh_frame:000000000000EE8E                 db    3
.eh_frame:000000000000EE8F                 db  45h ; E
.eh_frame:000000000000EE90                 db  0Eh
.eh_frame:000000000000EE91                 db  20h
.eh_frame:000000000000EE92                 db  8Dh
.eh_frame:000000000000EE93                 db    4
.eh_frame:000000000000EE94                 db  42h ; B
.eh_frame:000000000000EE95                 db  0Eh
.eh_frame:000000000000EE96                 db  28h ; (
.eh_frame:000000000000EE97                 db  8Ch
.eh_frame:000000000000EE98                 db    5
.eh_frame:000000000000EE99                 db  44h ; D
.eh_frame:000000000000EE9A                 db  0Eh
.eh_frame:000000000000EE9B                 db  30h ; 0
.eh_frame:000000000000EE9C                 db  86h
.eh_frame:000000000000EE9D                 db    6
.eh_frame:000000000000EE9E                 db  41h ; A
.eh_frame:000000000000EE9F                 db  0Eh
.eh_frame:000000000000EEA0                 db  38h ; 8
.eh_frame:000000000000EEA1                 db  83h
.eh_frame:000000000000EEA2                 db    7
.eh_frame:000000000000EEA3                 db  53h ; S
.eh_frame:000000000000EEA4                 db  0Eh
.eh_frame:000000000000EEA5                 db 0F0h
.eh_frame:000000000000EEA6                 db    1
.eh_frame:000000000000EEA7                 db    3
.eh_frame:000000000000EEA8                 db  81h
.eh_frame:000000000000EEA9                 db  0Bh
.eh_frame:000000000000EEAA                 db  0Eh
.eh_frame:000000000000EEAB                 db 0F8h
.eh_frame:000000000000EEAC                 db    1
.eh_frame:000000000000EEAD                 db  4Ah ; J
.eh_frame:000000000000EEAE                 db  0Eh
.eh_frame:000000000000EEAF                 db  80h
.eh_frame:000000000000EEB0                 db    2
.eh_frame:000000000000EEB1                 db  44h ; D
.eh_frame:000000000000EEB2                 db  0Eh
.eh_frame:000000000000EEB3                 db  88h
.eh_frame:000000000000EEB4                 db    2
.eh_frame:000000000000EEB5                 db  45h ; E
.eh_frame:000000000000EEB6                 db  0Eh
.eh_frame:000000000000EEB7                 db  90h
.eh_frame:000000000000EEB8                 db    2
.eh_frame:000000000000EEB9                 db  5Fh ; _
.eh_frame:000000000000EEBA                 db  0Eh
.eh_frame:000000000000EEBB                 db 0F0h
.eh_frame:000000000000EEBC                 db    1
.eh_frame:000000000000EEBD                 db  64h ; d
.eh_frame:000000000000EEBE                 db  0Ah
.eh_frame:000000000000EEBF                 db  0Eh
.eh_frame:000000000000EEC0                 db  38h ; 8
.eh_frame:000000000000EEC1                 db  41h ; A
.eh_frame:000000000000EEC2                 db  0Eh
.eh_frame:000000000000EEC3                 db  30h ; 0
.eh_frame:000000000000EEC4                 db  41h ; A
.eh_frame:000000000000EEC5                 db  0Eh
.eh_frame:000000000000EEC6                 db  28h ; (
.eh_frame:000000000000EEC7                 db  42h ; B
.eh_frame:000000000000EEC8                 db  0Eh
.eh_frame:000000000000EEC9                 db  20h
.eh_frame:000000000000EECA                 db  42h ; B
.eh_frame:000000000000EECB                 db  0Eh
.eh_frame:000000000000EECC                 db  18h
.eh_frame:000000000000EECD                 db  42h ; B
.eh_frame:000000000000EECE                 db  0Eh
.eh_frame:000000000000EECF                 db  10h
.eh_frame:000000000000EED0                 db  42h ; B
.eh_frame:000000000000EED1                 db  0Eh
.eh_frame:000000000000EED2                 db    8
.eh_frame:000000000000EED3                 db  44h ; D
.eh_frame:000000000000EED4                 db  0Bh
.eh_frame:000000000000EED5                 db    3
.eh_frame:000000000000EED6                 db  99h
.eh_frame:000000000000EED7                 db    5
.eh_frame:000000000000EED8                 db  0Eh
.eh_frame:000000000000EED9                 db 0F8h
.eh_frame:000000000000EEDA                 db    1
.eh_frame:000000000000EEDB                 db  4Dh ; M
.eh_frame:000000000000EEDC                 db  0Eh
.eh_frame:000000000000EEDD                 db  80h
.eh_frame:000000000000EEDE                 db    2
.eh_frame:000000000000EEDF                 db  44h ; D
.eh_frame:000000000000EEE0                 db  0Eh
.eh_frame:000000000000EEE1                 db  88h
.eh_frame:000000000000EEE2                 db    2
.eh_frame:000000000000EEE3                 db  47h ; G
.eh_frame:000000000000EEE4                 db  0Eh
.eh_frame:000000000000EEE5                 db  90h
.eh_frame:000000000000EEE6                 db    2
.eh_frame:000000000000EEE7                 db  5Bh ; [
.eh_frame:000000000000EEE8                 db  0Eh
.eh_frame:000000000000EEE9                 db 0F0h
.eh_frame:000000000000EEEA                 db    1
.eh_frame:000000000000EEEB                 db    0
.eh_frame:000000000000EEEC                 db  68h ; h
.eh_frame:000000000000EEED                 db    0
.eh_frame:000000000000EEEE                 db    0
.eh_frame:000000000000EEEF                 db    0
.eh_frame:000000000000EEF0                 db  38h ; 8
.eh_frame:000000000000EEF1                 db    4
.eh_frame:000000000000EEF2                 db    0
.eh_frame:000000000000EEF3                 db    0
.eh_frame:000000000000EEF4                 db  4Ch ; L
.eh_frame:000000000000EEF5                 db  7Fh ; 
.eh_frame:000000000000EEF6                 db 0FFh
.eh_frame:000000000000EEF7                 db 0FFh
.eh_frame:000000000000EEF8                 db 0ABh
.eh_frame:000000000000EEF9                 db    1
.eh_frame:000000000000EEFA                 db    0
.eh_frame:000000000000EEFB                 db    0
.eh_frame:000000000000EEFC                 db    0
.eh_frame:000000000000EEFD                 db  42h ; B
.eh_frame:000000000000EEFE                 db  0Eh
.eh_frame:000000000000EEFF                 db  10h
.eh_frame:000000000000EF00                 db  8Fh
.eh_frame:000000000000EF01                 db    2
.eh_frame:000000000000EF02                 db  42h ; B
.eh_frame:000000000000EF03                 db  0Eh
.eh_frame:000000000000EF04                 db  18h
.eh_frame:000000000000EF05                 db  8Eh
.eh_frame:000000000000EF06                 db    3
.eh_frame:000000000000EF07                 db  45h ; E
.eh_frame:000000000000EF08                 db  0Eh
.eh_frame:000000000000EF09                 db  20h
.eh_frame:000000000000EF0A                 db  8Dh
.eh_frame:000000000000EF0B                 db    4
.eh_frame:000000000000EF0C                 db  42h ; B
.eh_frame:000000000000EF0D                 db  0Eh
.eh_frame:000000000000EF0E                 db  28h ; (
.eh_frame:000000000000EF0F                 db  8Ch
.eh_frame:000000000000EF10                 db    5
.eh_frame:000000000000EF11                 db  44h ; D
.eh_frame:000000000000EF12                 db  0Eh
.eh_frame:000000000000EF13                 db  30h ; 0
.eh_frame:000000000000EF14                 db  86h
.eh_frame:000000000000EF15                 db    6
.eh_frame:000000000000EF16                 db  41h ; A
.eh_frame:000000000000EF17                 db  0Eh
.eh_frame:000000000000EF18                 db  38h ; 8
.eh_frame:000000000000EF19                 db  83h
.eh_frame:000000000000EF1A                 db    7
.eh_frame:000000000000EF1B                 db  47h ; G
.eh_frame:000000000000EF1C                 db  0Eh
.eh_frame:000000000000EF1D                 db  60h ; `
.eh_frame:000000000000EF1E                 db    2
.eh_frame:000000000000EF1F                 db  99h
.eh_frame:000000000000EF20                 db  0Eh
.eh_frame:000000000000EF21                 db  68h ; h
.eh_frame:000000000000EF22                 db  5Fh ; _
.eh_frame:000000000000EF23                 db  0Eh
.eh_frame:000000000000EF24                 db  70h ; p
.eh_frame:000000000000EF25                 db  46h ; F
.eh_frame:000000000000EF26                 db  0Eh
.eh_frame:000000000000EF27                 db  78h ; x
.eh_frame:000000000000EF28                 db  42h ; B
.eh_frame:000000000000EF29                 db  0Eh
.eh_frame:000000000000EF2A                 db  80h
.eh_frame:000000000000EF2B                 db    1
.eh_frame:000000000000EF2C                 db  59h ; Y
.eh_frame:000000000000EF2D                 db  0Eh
.eh_frame:000000000000EF2E                 db  60h ; `
.eh_frame:000000000000EF2F                 db    2
.eh_frame:000000000000EF30                 db  40h ; @
.eh_frame:000000000000EF31                 db  0Eh
.eh_frame:000000000000EF32                 db  68h ; h
.eh_frame:000000000000EF33                 db  4Bh ; K
.eh_frame:000000000000EF34                 db  0Eh
.eh_frame:000000000000EF35                 db  70h ; p
.eh_frame:000000000000EF36                 db  43h ; C
.eh_frame:000000000000EF37                 db  0Eh
.eh_frame:000000000000EF38                 db  78h ; x
.eh_frame:000000000000EF39                 db  45h ; E
.eh_frame:000000000000EF3A                 db  0Eh
.eh_frame:000000000000EF3B                 db  80h
.eh_frame:000000000000EF3C                 db    1
.eh_frame:000000000000EF3D                 db  5Eh ; ^
.eh_frame:000000000000EF3E                 db  0Eh
.eh_frame:000000000000EF3F                 db  60h ; `
.eh_frame:000000000000EF40                 db  4Ch ; L
.eh_frame:000000000000EF41                 db  0Ah
.eh_frame:000000000000EF42                 db  0Eh
.eh_frame:000000000000EF43                 db  38h ; 8
.eh_frame:000000000000EF44                 db  44h ; D
.eh_frame:000000000000EF45                 db  0Eh
.eh_frame:000000000000EF46                 db  30h ; 0
.eh_frame:000000000000EF47                 db  41h ; A
.eh_frame:000000000000EF48                 db  0Eh
.eh_frame:000000000000EF49                 db  28h ; (
.eh_frame:000000000000EF4A                 db  42h ; B
.eh_frame:000000000000EF4B                 db  0Eh
.eh_frame:000000000000EF4C                 db  20h
.eh_frame:000000000000EF4D                 db  42h ; B
.eh_frame:000000000000EF4E                 db  0Eh
.eh_frame:000000000000EF4F                 db  18h
.eh_frame:000000000000EF50                 db  42h ; B
.eh_frame:000000000000EF51                 db  0Eh
.eh_frame:000000000000EF52                 db  10h
.eh_frame:000000000000EF53                 db  42h ; B
.eh_frame:000000000000EF54                 db  0Eh
.eh_frame:000000000000EF55                 db    8
.eh_frame:000000000000EF56                 db  46h ; F
.eh_frame:000000000000EF57                 db  0Bh
.eh_frame:000000000000EF58                 db  28h ; (
.eh_frame:000000000000EF59                 db    0
.eh_frame:000000000000EF5A                 db    0
.eh_frame:000000000000EF5B                 db    0
.eh_frame:000000000000EF5C                 db 0A4h
.eh_frame:000000000000EF5D                 db    4
.eh_frame:000000000000EF5E                 db    0
.eh_frame:000000000000EF5F                 db    0
.eh_frame:000000000000EF60                 db  90h
.eh_frame:000000000000EF61                 db  80h
.eh_frame:000000000000EF62                 db 0FFh
.eh_frame:000000000000EF63                 db 0FFh
.eh_frame:000000000000EF64                 db  36h ; 6
.eh_frame:000000000000EF65                 db    0
.eh_frame:000000000000EF66                 db    0
.eh_frame:000000000000EF67                 db    0
.eh_frame:000000000000EF68                 db    0
.eh_frame:000000000000EF69                 db  42h ; B
.eh_frame:000000000000EF6A                 db  0Eh
.eh_frame:000000000000EF6B                 db  10h
.eh_frame:000000000000EF6C                 db  8Ch
.eh_frame:000000000000EF6D                 db    2
.eh_frame:000000000000EF6E                 db  41h ; A
.eh_frame:000000000000EF6F                 db  0Eh
.eh_frame:000000000000EF70                 db  18h
.eh_frame:000000000000EF71                 db  86h
.eh_frame:000000000000EF72                 db    3
.eh_frame:000000000000EF73                 db  41h ; A
.eh_frame:000000000000EF74                 db  0Eh
.eh_frame:000000000000EF75                 db  20h
.eh_frame:000000000000EF76                 db  83h
.eh_frame:000000000000EF77                 db    4
.eh_frame:000000000000EF78                 db  6Eh ; n
.eh_frame:000000000000EF79                 db  0Eh
.eh_frame:000000000000EF7A                 db  18h
.eh_frame:000000000000EF7B                 db  41h ; A
.eh_frame:000000000000EF7C                 db  0Eh
.eh_frame:000000000000EF7D                 db  10h
.eh_frame:000000000000EF7E                 db  42h ; B
.eh_frame:000000000000EF7F                 db  0Eh
.eh_frame:000000000000EF80                 db    8
.eh_frame:000000000000EF81                 db    0
.eh_frame:000000000000EF82                 db    0
.eh_frame:000000000000EF83                 db    0
.eh_frame:000000000000EF84                 db  10h
.eh_frame:000000000000EF85                 db    0
.eh_frame:000000000000EF86                 db    0
.eh_frame:000000000000EF87                 db    0
.eh_frame:000000000000EF88                 db 0D0h
.eh_frame:000000000000EF89                 db    4
.eh_frame:000000000000EF8A                 db    0
.eh_frame:000000000000EF8B                 db    0
.eh_frame:000000000000EF8C                 db 0A4h
.eh_frame:000000000000EF8D                 db  80h
.eh_frame:000000000000EF8E                 db 0FFh
.eh_frame:000000000000EF8F                 db 0FFh
.eh_frame:000000000000EF90                 db  11h
.eh_frame:000000000000EF91                 db    0
.eh_frame:000000000000EF92                 db    0
.eh_frame:000000000000EF93                 db    0
.eh_frame:000000000000EF94                 db    0
.eh_frame:000000000000EF95                 db    0
.eh_frame:000000000000EF96                 db    0
.eh_frame:000000000000EF97                 db    0
.eh_frame:000000000000EF98                 db  10h
.eh_frame:000000000000EF99                 db    0
.eh_frame:000000000000EF9A                 db    0
.eh_frame:000000000000EF9B                 db    0
.eh_frame:000000000000EF9C                 db 0E4h
.eh_frame:000000000000EF9D                 db    4
.eh_frame:000000000000EF9E                 db    0
.eh_frame:000000000000EF9F                 db    0
.eh_frame:000000000000EFA0                 db 0B0h
.eh_frame:000000000000EFA1                 db  80h
.eh_frame:000000000000EFA2                 db 0FFh
.eh_frame:000000000000EFA3                 db 0FFh
.eh_frame:000000000000EFA4                 db  11h
.eh_frame:000000000000EFA5                 db    0
.eh_frame:000000000000EFA6                 db    0
.eh_frame:000000000000EFA7                 db    0
.eh_frame:000000000000EFA8                 db    0
.eh_frame:000000000000EFA9                 db    0
.eh_frame:000000000000EFAA                 db    0
.eh_frame:000000000000EFAB                 db    0
.eh_frame:000000000000EFAC                 db  10h
.eh_frame:000000000000EFAD                 db    0
.eh_frame:000000000000EFAE                 db    0
.eh_frame:000000000000EFAF                 db    0
.eh_frame:000000000000EFB0                 db 0F8h
.eh_frame:000000000000EFB1                 db    4
.eh_frame:000000000000EFB2                 db    0
.eh_frame:000000000000EFB3                 db    0
.eh_frame:000000000000EFB4                 db 0BCh
.eh_frame:000000000000EFB5                 db  80h
.eh_frame:000000000000EFB6                 db 0FFh
.eh_frame:000000000000EFB7                 db 0FFh
.eh_frame:000000000000EFB8                 db  35h ; 5
.eh_frame:000000000000EFB9                 db    0
.eh_frame:000000000000EFBA                 db    0
.eh_frame:000000000000EFBB                 db    0
.eh_frame:000000000000EFBC                 db    0
.eh_frame:000000000000EFBD                 db    0
.eh_frame:000000000000EFBE                 db    0
.eh_frame:000000000000EFBF                 db    0
.eh_frame:000000000000EFC0                 db  10h
.eh_frame:000000000000EFC1                 db    0
.eh_frame:000000000000EFC2                 db    0
.eh_frame:000000000000EFC3                 db    0
.eh_frame:000000000000EFC4                 db  0Ch
.eh_frame:000000000000EFC5                 db    5
.eh_frame:000000000000EFC6                 db    0
.eh_frame:000000000000EFC7                 db    0
.eh_frame:000000000000EFC8                 db 0E8h
.eh_frame:000000000000EFC9                 db  80h
.eh_frame:000000000000EFCA                 db 0FFh
.eh_frame:000000000000EFCB                 db 0FFh
.eh_frame:000000000000EFCC                 db  15h
.eh_frame:000000000000EFCD                 db    0
.eh_frame:000000000000EFCE                 db    0
.eh_frame:000000000000EFCF                 db    0
.eh_frame:000000000000EFD0                 db    0
.eh_frame:000000000000EFD1                 db    0
.eh_frame:000000000000EFD2                 db    0
.eh_frame:000000000000EFD3                 db    0
.eh_frame:000000000000EFD4                 db  10h
.eh_frame:000000000000EFD5                 db    0
.eh_frame:000000000000EFD6                 db    0
.eh_frame:000000000000EFD7                 db    0
.eh_frame:000000000000EFD8                 db  20h
.eh_frame:000000000000EFD9                 db    5
.eh_frame:000000000000EFDA                 db    0
.eh_frame:000000000000EFDB                 db    0
.eh_frame:000000000000EFDC                 db 0F4h
.eh_frame:000000000000EFDD                 db  80h
.eh_frame:000000000000EFDE                 db 0FFh
.eh_frame:000000000000EFDF                 db 0FFh
.eh_frame:000000000000EFE0                 db  30h ; 0
.eh_frame:000000000000EFE1                 db    0
.eh_frame:000000000000EFE2                 db    0
.eh_frame:000000000000EFE3                 db    0
.eh_frame:000000000000EFE4                 db    0
.eh_frame:000000000000EFE5                 db  6Bh ; k
.eh_frame:000000000000EFE6                 db  0Eh
.eh_frame:000000000000EFE7                 db  10h
.eh_frame:000000000000EFE8                 db  50h ; P
.eh_frame:000000000000EFE9                 db    0
.eh_frame:000000000000EFEA                 db    0
.eh_frame:000000000000EFEB                 db    0
.eh_frame:000000000000EFEC                 db  34h ; 4
.eh_frame:000000000000EFED                 db    5
.eh_frame:000000000000EFEE                 db    0
.eh_frame:000000000000EFEF                 db    0
.eh_frame:000000000000EFF0                 db  10h
.eh_frame:000000000000EFF1                 db  81h
.eh_frame:000000000000EFF2                 db 0FFh
.eh_frame:000000000000EFF3                 db 0FFh
.eh_frame:000000000000EFF4                 db  74h ; t
.eh_frame:000000000000EFF5                 db    0
.eh_frame:000000000000EFF6                 db    0
.eh_frame:000000000000EFF7                 db    0
.eh_frame:000000000000EFF8                 db    0
.eh_frame:000000000000EFF9                 db  42h ; B
.eh_frame:000000000000EFFA                 db  0Eh
.eh_frame:000000000000EFFB                 db  10h
.eh_frame:000000000000EFFC                 db  8Fh
.eh_frame:000000000000EFFD                 db    2
.eh_frame:000000000000EFFE                 db  42h ; B
.eh_frame:000000000000EFFF                 db  0Eh
.eh_frame:000000000000F000                 db  18h
.eh_frame:000000000000F001                 db  8Eh
.eh_frame:000000000000F002                 db    3
.eh_frame:000000000000F003                 db  49h ; I
.eh_frame:000000000000F004                 db  0Eh
.eh_frame:000000000000F005                 db  20h
.eh_frame:000000000000F006                 db  8Dh
.eh_frame:000000000000F007                 db    4
.eh_frame:000000000000F008                 db  42h ; B
.eh_frame:000000000000F009                 db  0Eh
.eh_frame:000000000000F00A                 db  28h ; (
.eh_frame:000000000000F00B                 db  8Ch
.eh_frame:000000000000F00C                 db    5
.eh_frame:000000000000F00D                 db  44h ; D
.eh_frame:000000000000F00E                 db  0Eh
.eh_frame:000000000000F00F                 db  30h ; 0
.eh_frame:000000000000F010                 db  86h
.eh_frame:000000000000F011                 db    6
.eh_frame:000000000000F012                 db  41h ; A
.eh_frame:000000000000F013                 db  0Eh
.eh_frame:000000000000F014                 db  38h ; 8
.eh_frame:000000000000F015                 db  83h
.eh_frame:000000000000F016                 db    7
.eh_frame:000000000000F017                 db  4Dh ; M
.eh_frame:000000000000F018                 db  0Eh
.eh_frame:000000000000F019                 db  50h ; P
.eh_frame:000000000000F01A                 db  5Fh ; _
.eh_frame:000000000000F01B                 db  0Eh
.eh_frame:000000000000F01C                 db  58h ; X
.eh_frame:000000000000F01D                 db  47h ; G
.eh_frame:000000000000F01E                 db  0Eh
.eh_frame:000000000000F01F                 db  60h ; `
.eh_frame:000000000000F020                 db  46h ; F
.eh_frame:000000000000F021                 db  0Eh
.eh_frame:000000000000F022                 db  68h ; h
.eh_frame:000000000000F023                 db  44h ; D
.eh_frame:000000000000F024                 db  0Eh
.eh_frame:000000000000F025                 db  70h ; p
.eh_frame:000000000000F026                 db  58h ; X
.eh_frame:000000000000F027                 db  0Eh
.eh_frame:000000000000F028                 db  38h ; 8
.eh_frame:000000000000F029                 db  41h ; A
.eh_frame:000000000000F02A                 db  0Eh
.eh_frame:000000000000F02B                 db  30h ; 0
.eh_frame:000000000000F02C                 db  41h ; A
.eh_frame:000000000000F02D                 db  0Eh
.eh_frame:000000000000F02E                 db  28h ; (
.eh_frame:000000000000F02F                 db  42h ; B
.eh_frame:000000000000F030                 db  0Eh
.eh_frame:000000000000F031                 db  20h
.eh_frame:000000000000F032                 db  42h ; B
.eh_frame:000000000000F033                 db  0Eh
.eh_frame:000000000000F034                 db  18h
.eh_frame:000000000000F035                 db  42h ; B
.eh_frame:000000000000F036                 db  0Eh
.eh_frame:000000000000F037                 db  10h
.eh_frame:000000000000F038                 db  42h ; B
.eh_frame:000000000000F039                 db  0Eh
.eh_frame:000000000000F03A                 db    8
.eh_frame:000000000000F03B                 db    0
.eh_frame:000000000000F03C                 db  68h ; h
.eh_frame:000000000000F03D                 db    0
.eh_frame:000000000000F03E                 db    0
.eh_frame:000000000000F03F                 db    0
.eh_frame:000000000000F040                 db  88h
.eh_frame:000000000000F041                 db    5
.eh_frame:000000000000F042                 db    0
.eh_frame:000000000000F043                 db    0
.eh_frame:000000000000F044                 db  3Ch ; <
.eh_frame:000000000000F045                 db  81h
.eh_frame:000000000000F046                 db 0FFh
.eh_frame:000000000000F047                 db 0FFh
.eh_frame:000000000000F048                 db 0E3h
.eh_frame:000000000000F049                 db    0
.eh_frame:000000000000F04A                 db    0
.eh_frame:000000000000F04B                 db    0
.eh_frame:000000000000F04C                 db    0
.eh_frame:000000000000F04D                 db  42h ; B
.eh_frame:000000000000F04E                 db  0Eh
.eh_frame:000000000000F04F                 db  10h
.eh_frame:000000000000F050                 db  8Fh
.eh_frame:000000000000F051                 db    2
.eh_frame:000000000000F052                 db  42h ; B
.eh_frame:000000000000F053                 db  0Eh
.eh_frame:000000000000F054                 db  18h
.eh_frame:000000000000F055                 db  8Eh
.eh_frame:000000000000F056                 db    3
.eh_frame:000000000000F057                 db  49h ; I
.eh_frame:000000000000F058                 db  0Eh
.eh_frame:000000000000F059                 db  20h
.eh_frame:000000000000F05A                 db  8Dh
.eh_frame:000000000000F05B                 db    4
.eh_frame:000000000000F05C                 db  42h ; B
.eh_frame:000000000000F05D                 db  0Eh
.eh_frame:000000000000F05E                 db  28h ; (
.eh_frame:000000000000F05F                 db  8Ch
.eh_frame:000000000000F060                 db    5
.eh_frame:000000000000F061                 db  44h ; D
.eh_frame:000000000000F062                 db  0Eh
.eh_frame:000000000000F063                 db  30h ; 0
.eh_frame:000000000000F064                 db  86h
.eh_frame:000000000000F065                 db    6
.eh_frame:000000000000F066                 db  41h ; A
.eh_frame:000000000000F067                 db  0Eh
.eh_frame:000000000000F068                 db  38h ; 8
.eh_frame:000000000000F069                 db  83h
.eh_frame:000000000000F06A                 db    7
.eh_frame:000000000000F06B                 db  4Dh ; M
.eh_frame:000000000000F06C                 db  0Eh
.eh_frame:000000000000F06D                 db  70h ; p
.eh_frame:000000000000F06E                 db  65h ; e
.eh_frame:000000000000F06F                 db  0Eh
.eh_frame:000000000000F070                 db  78h ; x
.eh_frame:000000000000F071                 db  4Dh ; M
.eh_frame:000000000000F072                 db  0Eh
.eh_frame:000000000000F073                 db  80h
.eh_frame:000000000000F074                 db    1
.eh_frame:000000000000F075                 db  46h ; F
.eh_frame:000000000000F076                 db  0Eh
.eh_frame:000000000000F077                 db  88h
.eh_frame:000000000000F078                 db    1
.eh_frame:000000000000F079                 db  42h ; B
.eh_frame:000000000000F07A                 db  0Eh
.eh_frame:000000000000F07B                 db  90h
.eh_frame:000000000000F07C                 db    1
.eh_frame:000000000000F07D                 db  5Eh ; ^
.eh_frame:000000000000F07E                 db  0Eh
.eh_frame:000000000000F07F                 db  70h ; p
.eh_frame:000000000000F080                 db  56h ; V
.eh_frame:000000000000F081                 db  0Eh
.eh_frame:000000000000F082                 db  78h ; x
.eh_frame:000000000000F083                 db  43h ; C
.eh_frame:000000000000F084                 db  0Eh
.eh_frame:000000000000F085                 db  80h
.eh_frame:000000000000F086                 db    1
.eh_frame:000000000000F087                 db  43h ; C
.eh_frame:000000000000F088                 db  0Eh
.eh_frame:000000000000F089                 db  88h
.eh_frame:000000000000F08A                 db    1
.eh_frame:000000000000F08B                 db  56h ; V
.eh_frame:000000000000F08C                 db  0Eh
.eh_frame:000000000000F08D                 db  90h
.eh_frame:000000000000F08E                 db    1
.eh_frame:000000000000F08F                 db  52h ; R
.eh_frame:000000000000F090                 db  0Eh
.eh_frame:000000000000F091                 db  70h ; p
.eh_frame:000000000000F092                 db  5Bh ; [
.eh_frame:000000000000F093                 db  0Eh
.eh_frame:000000000000F094                 db  38h ; 8
.eh_frame:000000000000F095                 db  41h ; A
.eh_frame:000000000000F096                 db  0Eh
.eh_frame:000000000000F097                 db  30h ; 0
.eh_frame:000000000000F098                 db  41h ; A
.eh_frame:000000000000F099                 db  0Eh
.eh_frame:000000000000F09A                 db  28h ; (
.eh_frame:000000000000F09B                 db  42h ; B
.eh_frame:000000000000F09C                 db  0Eh
.eh_frame:000000000000F09D                 db  20h
.eh_frame:000000000000F09E                 db  42h ; B
.eh_frame:000000000000F09F                 db  0Eh
.eh_frame:000000000000F0A0                 db  18h
.eh_frame:000000000000F0A1                 db  42h ; B
.eh_frame:000000000000F0A2                 db  0Eh
.eh_frame:000000000000F0A3                 db  10h
.eh_frame:000000000000F0A4                 db  42h ; B
.eh_frame:000000000000F0A5                 db  0Eh
.eh_frame:000000000000F0A6                 db    8
.eh_frame:000000000000F0A7                 db    0
.eh_frame:000000000000F0A8                 db  10h
.eh_frame:000000000000F0A9                 db    0
.eh_frame:000000000000F0AA                 db    0
.eh_frame:000000000000F0AB                 db    0
.eh_frame:000000000000F0AC                 db 0F4h
.eh_frame:000000000000F0AD                 db    5
.eh_frame:000000000000F0AE                 db    0
.eh_frame:000000000000F0AF                 db    0
.eh_frame:000000000000F0B0                 db 0C0h
.eh_frame:000000000000F0B1                 db  81h
.eh_frame:000000000000F0B2                 db 0FFh
.eh_frame:000000000000F0B3                 db 0FFh
.eh_frame:000000000000F0B4                 db  0Ah
.eh_frame:000000000000F0B5                 db    0
.eh_frame:000000000000F0B6                 db    0
.eh_frame:000000000000F0B7                 db    0
.eh_frame:000000000000F0B8                 db    0
.eh_frame:000000000000F0B9                 db    0
.eh_frame:000000000000F0BA                 db    0
.eh_frame:000000000000F0BB                 db    0
.eh_frame:000000000000F0BC                 db  28h ; (
.eh_frame:000000000000F0BD                 db    0
.eh_frame:000000000000F0BE                 db    0
.eh_frame:000000000000F0BF                 db    0
.eh_frame:000000000000F0C0                 db    8
.eh_frame:000000000000F0C1                 db    6
.eh_frame:000000000000F0C2                 db    0
.eh_frame:000000000000F0C3                 db    0
.eh_frame:000000000000F0C4                 db 0BCh
.eh_frame:000000000000F0C5                 db  81h
.eh_frame:000000000000F0C6                 db 0FFh
.eh_frame:000000000000F0C7                 db 0FFh
.eh_frame:000000000000F0C8                 db  93h
.eh_frame:000000000000F0C9                 db    0
.eh_frame:000000000000F0CA                 db    0
.eh_frame:000000000000F0CB                 db    0
.eh_frame:000000000000F0CC                 db    0
.eh_frame:000000000000F0CD                 db  48h ; H
.eh_frame:000000000000F0CE                 db  0Eh
.eh_frame:000000000000F0CF                 db  10h
.eh_frame:000000000000F0D0                 db  8Ch
.eh_frame:000000000000F0D1                 db    2
.eh_frame:000000000000F0D2                 db  48h ; H
.eh_frame:000000000000F0D3                 db  0Eh
.eh_frame:000000000000F0D4                 db  18h
.eh_frame:000000000000F0D5                 db  86h
.eh_frame:000000000000F0D6                 db    3
.eh_frame:000000000000F0D7                 db  41h ; A
.eh_frame:000000000000F0D8                 db  0Eh
.eh_frame:000000000000F0D9                 db  20h
.eh_frame:000000000000F0DA                 db  83h
.eh_frame:000000000000F0DB                 db    4
.eh_frame:000000000000F0DC                 db    2
.eh_frame:000000000000F0DD                 db  74h ; t
.eh_frame:000000000000F0DE                 db  0Eh
.eh_frame:000000000000F0DF                 db  18h
.eh_frame:000000000000F0E0                 db  4Bh ; K
.eh_frame:000000000000F0E1                 db  0Eh
.eh_frame:000000000000F0E2                 db  10h
.eh_frame:000000000000F0E3                 db  42h ; B
.eh_frame:000000000000F0E4                 db  0Eh
.eh_frame:000000000000F0E5                 db    8
.eh_frame:000000000000F0E6                 db    0
.eh_frame:000000000000F0E7                 db    0
.eh_frame:000000000000F0E8                 db  10h
.eh_frame:000000000000F0E9                 db    0
.eh_frame:000000000000F0EA                 db    0
.eh_frame:000000000000F0EB                 db    0
.eh_frame:000000000000F0EC                 db  34h ; 4
.eh_frame:000000000000F0ED                 db    6
.eh_frame:000000000000F0EE                 db    0
.eh_frame:000000000000F0EF                 db    0
.eh_frame:000000000000F0F0                 db  30h ; 0
.eh_frame:000000000000F0F1                 db  82h
.eh_frame:000000000000F0F2                 db 0FFh
.eh_frame:000000000000F0F3                 db 0FFh
.eh_frame:000000000000F0F4                 db  13h
.eh_frame:000000000000F0F5                 db    0
.eh_frame:000000000000F0F6                 db    0
.eh_frame:000000000000F0F7                 db    0
.eh_frame:000000000000F0F8                 db    0
.eh_frame:000000000000F0F9                 db    0
.eh_frame:000000000000F0FA                 db    0
.eh_frame:000000000000F0FB                 db    0
.eh_frame:000000000000F0FC                 db  10h
.eh_frame:000000000000F0FD                 db    0
.eh_frame:000000000000F0FE                 db    0
.eh_frame:000000000000F0FF                 db    0
.eh_frame:000000000000F100                 db  48h ; H
.eh_frame:000000000000F101                 db    6
.eh_frame:000000000000F102                 db    0
.eh_frame:000000000000F103                 db    0
.eh_frame:000000000000F104                 db  3Ch ; <
.eh_frame:000000000000F105                 db  82h
.eh_frame:000000000000F106                 db 0FFh
.eh_frame:000000000000F107                 db 0FFh
.eh_frame:000000000000F108                 db  0Ch
.eh_frame:000000000000F109                 db    0
.eh_frame:000000000000F10A                 db    0
.eh_frame:000000000000F10B                 db    0
.eh_frame:000000000000F10C                 db    0
.eh_frame:000000000000F10D                 db    0
.eh_frame:000000000000F10E                 db    0
.eh_frame:000000000000F10F                 db    0
.eh_frame:000000000000F110                 db  10h
.eh_frame:000000000000F111                 db    0
.eh_frame:000000000000F112                 db    0
.eh_frame:000000000000F113                 db    0
.eh_frame:000000000000F114                 db  5Ch ; \
.eh_frame:000000000000F115                 db    6
.eh_frame:000000000000F116                 db    0
.eh_frame:000000000000F117                 db    0
.eh_frame:000000000000F118                 db  38h ; 8
.eh_frame:000000000000F119                 db  82h
.eh_frame:000000000000F11A                 db 0FFh
.eh_frame:000000000000F11B                 db 0FFh
.eh_frame:000000000000F11C                 db  18h
.eh_frame:000000000000F11D                 db    0
.eh_frame:000000000000F11E                 db    0
.eh_frame:000000000000F11F                 db    0
.eh_frame:000000000000F120                 db    0
.eh_frame:000000000000F121                 db    0
.eh_frame:000000000000F122                 db    0
.eh_frame:000000000000F123                 db    0
.eh_frame:000000000000F124                 db  10h
.eh_frame:000000000000F125                 db    0
.eh_frame:000000000000F126                 db    0
.eh_frame:000000000000F127                 db    0
.eh_frame:000000000000F128                 db  70h ; p
.eh_frame:000000000000F129                 db    6
.eh_frame:000000000000F12A                 db    0
.eh_frame:000000000000F12B                 db    0
.eh_frame:000000000000F12C                 db  44h ; D
.eh_frame:000000000000F12D                 db  82h
.eh_frame:000000000000F12E                 db 0FFh
.eh_frame:000000000000F12F                 db 0FFh
.eh_frame:000000000000F130                 db  14h
.eh_frame:000000000000F131                 db    0
.eh_frame:000000000000F132                 db    0
.eh_frame:000000000000F133                 db    0
.eh_frame:000000000000F134                 db    0
.eh_frame:000000000000F135                 db    0
.eh_frame:000000000000F136                 db    0
.eh_frame:000000000000F137                 db    0
.eh_frame:000000000000F138                 db  18h
.eh_frame:000000000000F139                 db    0
.eh_frame:000000000000F13A                 db    0
.eh_frame:000000000000F13B                 db    0
.eh_frame:000000000000F13C                 db  84h
.eh_frame:000000000000F13D                 db    6
.eh_frame:000000000000F13E                 db    0
.eh_frame:000000000000F13F                 db    0
.eh_frame:000000000000F140                 db  50h ; P
.eh_frame:000000000000F141                 db  82h
.eh_frame:000000000000F142                 db 0FFh
.eh_frame:000000000000F143                 db 0FFh
.eh_frame:000000000000F144                 db  8Eh
.eh_frame:000000000000F145                 db    0
.eh_frame:000000000000F146                 db    0
.eh_frame:000000000000F147                 db    0
.eh_frame:000000000000F148                 db    0
.eh_frame:000000000000F149                 db  44h ; D
.eh_frame:000000000000F14A                 db  0Eh
.eh_frame:000000000000F14B                 db  50h ; P
.eh_frame:000000000000F14C                 db    2
.eh_frame:000000000000F14D                 db  7Fh ; 
.eh_frame:000000000000F14E                 db  0Ah
.eh_frame:000000000000F14F                 db  0Eh
.eh_frame:000000000000F150                 db    8
.eh_frame:000000000000F151                 db  41h ; A
.eh_frame:000000000000F152                 db  0Bh
.eh_frame:000000000000F153                 db    0
.eh_frame:000000000000F154                 db  18h
.eh_frame:000000000000F155                 db    0
.eh_frame:000000000000F156                 db    0
.eh_frame:000000000000F157                 db    0
.eh_frame:000000000000F158                 db 0A0h
.eh_frame:000000000000F159                 db    6
.eh_frame:000000000000F15A                 db    0
.eh_frame:000000000000F15B                 db    0
.eh_frame:000000000000F15C                 db 0C4h
.eh_frame:000000000000F15D                 db  82h
.eh_frame:000000000000F15E                 db 0FFh
.eh_frame:000000000000F15F                 db 0FFh
.eh_frame:000000000000F160                 db  8Ah
.eh_frame:000000000000F161                 db    0
.eh_frame:000000000000F162                 db    0
.eh_frame:000000000000F163                 db    0
.eh_frame:000000000000F164                 db    0
.eh_frame:000000000000F165                 db  44h ; D
.eh_frame:000000000000F166                 db  0Eh
.eh_frame:000000000000F167                 db  50h ; P
.eh_frame:000000000000F168                 db    2
.eh_frame:000000000000F169                 db  7Bh ; {
.eh_frame:000000000000F16A                 db  0Ah
.eh_frame:000000000000F16B                 db  0Eh
.eh_frame:000000000000F16C                 db    8
.eh_frame:000000000000F16D                 db  41h ; A
.eh_frame:000000000000F16E                 db  0Bh
.eh_frame:000000000000F16F                 db    0
.eh_frame:000000000000F170                 db  10h
.eh_frame:000000000000F171                 db    0
.eh_frame:000000000000F172                 db    0
.eh_frame:000000000000F173                 db    0
.eh_frame:000000000000F174                 db 0BCh
.eh_frame:000000000000F175                 db    6
.eh_frame:000000000000F176                 db    0
.eh_frame:000000000000F177                 db    0
.eh_frame:000000000000F178                 db  38h ; 8
.eh_frame:000000000000F179                 db  83h
.eh_frame:000000000000F17A                 db 0FFh
.eh_frame:000000000000F17B                 db 0FFh
.eh_frame:000000000000F17C                 db  0Ch
.eh_frame:000000000000F17D                 db    0
.eh_frame:000000000000F17E                 db    0
.eh_frame:000000000000F17F                 db    0
.eh_frame:000000000000F180                 db    0
.eh_frame:000000000000F181                 db    0
.eh_frame:000000000000F182                 db    0
.eh_frame:000000000000F183                 db    0
.eh_frame:000000000000F184                 db  10h
.eh_frame:000000000000F185                 db    0
.eh_frame:000000000000F186                 db    0
.eh_frame:000000000000F187                 db    0
.eh_frame:000000000000F188                 db 0D0h
.eh_frame:000000000000F189                 db    6
.eh_frame:000000000000F18A                 db    0
.eh_frame:000000000000F18B                 db    0
.eh_frame:000000000000F18C                 db  34h ; 4
.eh_frame:000000000000F18D                 db  83h
.eh_frame:000000000000F18E                 db 0FFh
.eh_frame:000000000000F18F                 db 0FFh
.eh_frame:000000000000F190                 db  0Fh
.eh_frame:000000000000F191                 db    0
.eh_frame:000000000000F192                 db    0
.eh_frame:000000000000F193                 db    0
.eh_frame:000000000000F194                 db    0
.eh_frame:000000000000F195                 db    0
.eh_frame:000000000000F196                 db    0
.eh_frame:000000000000F197                 db    0
.eh_frame:000000000000F198                 db  18h
.eh_frame:000000000000F199                 db    0
.eh_frame:000000000000F19A                 db    0
.eh_frame:000000000000F19B                 db    0
.eh_frame:000000000000F19C                 db 0E4h
.eh_frame:000000000000F19D                 db    6
.eh_frame:000000000000F19E                 db    0
.eh_frame:000000000000F19F                 db    0
.eh_frame:000000000000F1A0                 db  30h ; 0
.eh_frame:000000000000F1A1                 db  83h
.eh_frame:000000000000F1A2                 db 0FFh
.eh_frame:000000000000F1A3                 db 0FFh
.eh_frame:000000000000F1A4                 db  98h
.eh_frame:000000000000F1A5                 db    0
.eh_frame:000000000000F1A6                 db    0
.eh_frame:000000000000F1A7                 db    0
.eh_frame:000000000000F1A8                 db    0
.eh_frame:000000000000F1A9                 db  44h ; D
.eh_frame:000000000000F1AA                 db  0Eh
.eh_frame:000000000000F1AB                 db  50h ; P
.eh_frame:000000000000F1AC                 db    2
.eh_frame:000000000000F1AD                 db  8Eh
.eh_frame:000000000000F1AE                 db  0Ah
.eh_frame:000000000000F1AF                 db  0Eh
.eh_frame:000000000000F1B0                 db    8
.eh_frame:000000000000F1B1                 db  41h ; A
.eh_frame:000000000000F1B2                 db  0Bh
.eh_frame:000000000000F1B3                 db    0
.eh_frame:000000000000F1B4                 db  10h
.eh_frame:000000000000F1B5                 db    0
.eh_frame:000000000000F1B6                 db    0
.eh_frame:000000000000F1B7                 db    0
.eh_frame:000000000000F1B8                 db    0
.eh_frame:000000000000F1B9                 db    7
.eh_frame:000000000000F1BA                 db    0
.eh_frame:000000000000F1BB                 db    0
.eh_frame:000000000000F1BC                 db 0B4h
.eh_frame:000000000000F1BD                 db  83h
.eh_frame:000000000000F1BE                 db 0FFh
.eh_frame:000000000000F1BF                 db 0FFh
.eh_frame:000000000000F1C0                 db  10h
.eh_frame:000000000000F1C1                 db    0
.eh_frame:000000000000F1C2                 db    0
.eh_frame:000000000000F1C3                 db    0
.eh_frame:000000000000F1C4                 db    0
.eh_frame:000000000000F1C5                 db    0
.eh_frame:000000000000F1C6                 db    0
.eh_frame:000000000000F1C7                 db    0
.eh_frame:000000000000F1C8                 db  10h
.eh_frame:000000000000F1C9                 db    0
.eh_frame:000000000000F1CA                 db    0
.eh_frame:000000000000F1CB                 db    0
.eh_frame:000000000000F1CC                 db  14h
.eh_frame:000000000000F1CD                 db    7
.eh_frame:000000000000F1CE                 db    0
.eh_frame:000000000000F1CF                 db    0
.eh_frame:000000000000F1D0                 db 0B0h
.eh_frame:000000000000F1D1                 db  83h
.eh_frame:000000000000F1D2                 db 0FFh
.eh_frame:000000000000F1D3                 db 0FFh
.eh_frame:000000000000F1D4                 db  11h
.eh_frame:000000000000F1D5                 db    0
.eh_frame:000000000000F1D6                 db    0
.eh_frame:000000000000F1D7                 db    0
.eh_frame:000000000000F1D8                 db    0
.eh_frame:000000000000F1D9                 db    0
.eh_frame:000000000000F1DA                 db    0
.eh_frame:000000000000F1DB                 db    0
.eh_frame:000000000000F1DC                 db  10h
.eh_frame:000000000000F1DD                 db    0
.eh_frame:000000000000F1DE                 db    0
.eh_frame:000000000000F1DF                 db    0
.eh_frame:000000000000F1E0                 db  28h ; (
.eh_frame:000000000000F1E1                 db    7
.eh_frame:000000000000F1E2                 db    0
.eh_frame:000000000000F1E3                 db    0
.eh_frame:000000000000F1E4                 db 0BCh
.eh_frame:000000000000F1E5                 db  83h
.eh_frame:000000000000F1E6                 db 0FFh
.eh_frame:000000000000F1E7                 db 0FFh
.eh_frame:000000000000F1E8                 db  0Ah
.eh_frame:000000000000F1E9                 db    0
.eh_frame:000000000000F1EA                 db    0
.eh_frame:000000000000F1EB                 db    0
.eh_frame:000000000000F1EC                 db    0
.eh_frame:000000000000F1ED                 db    0
.eh_frame:000000000000F1EE                 db    0
.eh_frame:000000000000F1EF                 db    0
.eh_frame:000000000000F1F0                 db  18h
.eh_frame:000000000000F1F1                 db    0
.eh_frame:000000000000F1F2                 db    0
.eh_frame:000000000000F1F3                 db    0
.eh_frame:000000000000F1F4                 db  3Ch ; <
.eh_frame:000000000000F1F5                 db    7
.eh_frame:000000000000F1F6                 db    0
.eh_frame:000000000000F1F7                 db    0
.eh_frame:000000000000F1F8                 db 0B8h
.eh_frame:000000000000F1F9                 db  83h
.eh_frame:000000000000F1FA                 db 0FFh
.eh_frame:000000000000F1FB                 db 0FFh
.eh_frame:000000000000F1FC                 db  8Eh
.eh_frame:000000000000F1FD                 db    0
.eh_frame:000000000000F1FE                 db    0
.eh_frame:000000000000F1FF                 db    0
.eh_frame:000000000000F200                 db    0
.eh_frame:000000000000F201                 db  44h ; D
.eh_frame:000000000000F202                 db  0Eh
.eh_frame:000000000000F203                 db  50h ; P
.eh_frame:000000000000F204                 db    2
.eh_frame:000000000000F205                 db  7Fh ; 
.eh_frame:000000000000F206                 db  0Ah
.eh_frame:000000000000F207                 db  0Eh
.eh_frame:000000000000F208                 db    8
.eh_frame:000000000000F209                 db  41h ; A
.eh_frame:000000000000F20A                 db  0Bh
.eh_frame:000000000000F20B                 db    0
.eh_frame:000000000000F20C                 db  18h
.eh_frame:000000000000F20D                 db    0
.eh_frame:000000000000F20E                 db    0
.eh_frame:000000000000F20F                 db    0
.eh_frame:000000000000F210                 db  58h ; X
.eh_frame:000000000000F211                 db    7
.eh_frame:000000000000F212                 db    0
.eh_frame:000000000000F213                 db    0
.eh_frame:000000000000F214                 db  2Ch ; ,
.eh_frame:000000000000F215                 db  84h
.eh_frame:000000000000F216                 db 0FFh
.eh_frame:000000000000F217                 db 0FFh
.eh_frame:000000000000F218                 db  91h
.eh_frame:000000000000F219                 db    0
.eh_frame:000000000000F21A                 db    0
.eh_frame:000000000000F21B                 db    0
.eh_frame:000000000000F21C                 db    0
.eh_frame:000000000000F21D                 db  44h ; D
.eh_frame:000000000000F21E                 db  0Eh
.eh_frame:000000000000F21F                 db  50h ; P
.eh_frame:000000000000F220                 db    2
.eh_frame:000000000000F221                 db  82h
.eh_frame:000000000000F222                 db  0Ah
.eh_frame:000000000000F223                 db  0Eh
.eh_frame:000000000000F224                 db    8
.eh_frame:000000000000F225                 db  41h ; A
.eh_frame:000000000000F226                 db  0Bh
.eh_frame:000000000000F227                 db    0
.eh_frame:000000000000F228                 db  10h
.eh_frame:000000000000F229                 db    0
.eh_frame:000000000000F22A                 db    0
.eh_frame:000000000000F22B                 db    0
.eh_frame:000000000000F22C                 db  74h ; t
.eh_frame:000000000000F22D                 db    7
.eh_frame:000000000000F22E                 db    0
.eh_frame:000000000000F22F                 db    0
.eh_frame:000000000000F230                 db 0B0h
.eh_frame:000000000000F231                 db  84h
.eh_frame:000000000000F232                 db 0FFh
.eh_frame:000000000000F233                 db 0FFh
.eh_frame:000000000000F234                 db  0Ch
.eh_frame:000000000000F235                 db    0
.eh_frame:000000000000F236                 db    0
.eh_frame:000000000000F237                 db    0
.eh_frame:000000000000F238                 db    0
.eh_frame:000000000000F239                 db    0
.eh_frame:000000000000F23A                 db    0
.eh_frame:000000000000F23B                 db    0
.eh_frame:000000000000F23C                 db  10h
.eh_frame:000000000000F23D                 db    0
.eh_frame:000000000000F23E                 db    0
.eh_frame:000000000000F23F                 db    0
.eh_frame:000000000000F240                 db  88h
.eh_frame:000000000000F241                 db    7
.eh_frame:000000000000F242                 db    0
.eh_frame:000000000000F243                 db    0
.eh_frame:000000000000F244                 db 0ACh
.eh_frame:000000000000F245                 db  84h
.eh_frame:000000000000F246                 db 0FFh
.eh_frame:000000000000F247                 db 0FFh
.eh_frame:000000000000F248                 db  17h
.eh_frame:000000000000F249                 db    0
.eh_frame:000000000000F24A                 db    0
.eh_frame:000000000000F24B                 db    0
.eh_frame:000000000000F24C                 db    0
.eh_frame:000000000000F24D                 db    0
.eh_frame:000000000000F24E                 db    0
.eh_frame:000000000000F24F                 db    0
.eh_frame:000000000000F250                 db  10h
.eh_frame:000000000000F251                 db    0
.eh_frame:000000000000F252                 db    0
.eh_frame:000000000000F253                 db    0
.eh_frame:000000000000F254                 db  9Ch
.eh_frame:000000000000F255                 db    7
.eh_frame:000000000000F256                 db    0
.eh_frame:000000000000F257                 db    0
.eh_frame:000000000000F258                 db 0B8h
.eh_frame:000000000000F259                 db  84h
.eh_frame:000000000000F25A                 db 0FFh
.eh_frame:000000000000F25B                 db 0FFh
.eh_frame:000000000000F25C                 db  13h
.eh_frame:000000000000F25D                 db    0
.eh_frame:000000000000F25E                 db    0
.eh_frame:000000000000F25F                 db    0
.eh_frame:000000000000F260                 db    0
.eh_frame:000000000000F261                 db    0
.eh_frame:000000000000F262                 db    0
.eh_frame:000000000000F263                 db    0
.eh_frame:000000000000F264                 db  10h
.eh_frame:000000000000F265                 db    0
.eh_frame:000000000000F266                 db    0
.eh_frame:000000000000F267                 db    0
.eh_frame:000000000000F268                 db 0B0h
.eh_frame:000000000000F269                 db    7
.eh_frame:000000000000F26A                 db    0
.eh_frame:000000000000F26B                 db    0
.eh_frame:000000000000F26C                 db 0C4h
.eh_frame:000000000000F26D                 db  84h
.eh_frame:000000000000F26E                 db 0FFh
.eh_frame:000000000000F26F                 db 0FFh
.eh_frame:000000000000F270                 db  0Ch
.eh_frame:000000000000F271                 db    0
.eh_frame:000000000000F272                 db    0
.eh_frame:000000000000F273                 db    0
.eh_frame:000000000000F274                 db    0
.eh_frame:000000000000F275                 db    0
.eh_frame:000000000000F276                 db    0
.eh_frame:000000000000F277                 db    0
.eh_frame:000000000000F278                 db  10h
.eh_frame:000000000000F279                 db    0
.eh_frame:000000000000F27A                 db    0
.eh_frame:000000000000F27B                 db    0
.eh_frame:000000000000F27C                 db 0C4h
.eh_frame:000000000000F27D                 db    7
.eh_frame:000000000000F27E                 db    0
.eh_frame:000000000000F27F                 db    0
.eh_frame:000000000000F280                 db 0C0h
.eh_frame:000000000000F281                 db  84h
.eh_frame:000000000000F282                 db 0FFh
.eh_frame:000000000000F283                 db 0FFh
.eh_frame:000000000000F284                 db  14h
.eh_frame:000000000000F285                 db    0
.eh_frame:000000000000F286                 db    0
.eh_frame:000000000000F287                 db    0
.eh_frame:000000000000F288                 db    0
.eh_frame:000000000000F289                 db    0
.eh_frame:000000000000F28A                 db    0
.eh_frame:000000000000F28B                 db    0
.eh_frame:000000000000F28C                 db  10h
.eh_frame:000000000000F28D                 db    0
.eh_frame:000000000000F28E                 db    0
.eh_frame:000000000000F28F                 db    0
.eh_frame:000000000000F290                 db 0D8h
.eh_frame:000000000000F291                 db    7
.eh_frame:000000000000F292                 db    0
.eh_frame:000000000000F293                 db    0
.eh_frame:000000000000F294                 db 0CCh
.eh_frame:000000000000F295                 db  84h
.eh_frame:000000000000F296                 db 0FFh
.eh_frame:000000000000F297                 db 0FFh
.eh_frame:000000000000F298                 db  13h
.eh_frame:000000000000F299                 db    0
.eh_frame:000000000000F29A                 db    0
.eh_frame:000000000000F29B                 db    0
.eh_frame:000000000000F29C                 db    0
.eh_frame:000000000000F29D                 db    0
.eh_frame:000000000000F29E                 db    0
.eh_frame:000000000000F29F                 db    0
.eh_frame:000000000000F2A0                 db  14h
.eh_frame:000000000000F2A1                 db    0
.eh_frame:000000000000F2A2                 db    0
.eh_frame:000000000000F2A3                 db    0
.eh_frame:000000000000F2A4                 db 0ECh
.eh_frame:000000000000F2A5                 db    7
.eh_frame:000000000000F2A6                 db    0
.eh_frame:000000000000F2A7                 db    0
.eh_frame:000000000000F2A8                 db 0D8h
.eh_frame:000000000000F2A9                 db  84h
.eh_frame:000000000000F2AA                 db 0FFh
.eh_frame:000000000000F2AB                 db 0FFh
.eh_frame:000000000000F2AC                 db  18h
.eh_frame:000000000000F2AD                 db    0
.eh_frame:000000000000F2AE                 db    0
.eh_frame:000000000000F2AF                 db    0
.eh_frame:000000000000F2B0                 db    0
.eh_frame:000000000000F2B1                 db    0
.eh_frame:000000000000F2B2                 db    0
.eh_frame:000000000000F2B3                 db    0
.eh_frame:000000000000F2B4                 db    0
.eh_frame:000000000000F2B5                 db    0
.eh_frame:000000000000F2B6                 db    0
.eh_frame:000000000000F2B7                 db    0
.eh_frame:000000000000F2B8                 db  10h
.eh_frame:000000000000F2B9                 db    1
.eh_frame:000000000000F2BA                 db    0
.eh_frame:000000000000F2BB                 db    0
.eh_frame:000000000000F2BC                 db    4
.eh_frame:000000000000F2BD                 db    8
.eh_frame:000000000000F2BE                 db    0
.eh_frame:000000000000F2BF                 db    0
.eh_frame:000000000000F2C0                 db 0E0h
.eh_frame:000000000000F2C1                 db  84h
.eh_frame:000000000000F2C2                 db 0FFh
.eh_frame:000000000000F2C3                 db 0FFh
.eh_frame:000000000000F2C4                 db  17h
.eh_frame:000000000000F2C5                 db    4
.eh_frame:000000000000F2C6                 db    0
.eh_frame:000000000000F2C7                 db    0
.eh_frame:000000000000F2C8                 db    0
.eh_frame:000000000000F2C9                 db  42h ; B
.eh_frame:000000000000F2CA                 db  0Eh
.eh_frame:000000000000F2CB                 db  10h
.eh_frame:000000000000F2CC                 db  8Fh
.eh_frame:000000000000F2CD                 db    2
.eh_frame:000000000000F2CE                 db  42h ; B
.eh_frame:000000000000F2CF                 db  0Eh
.eh_frame:000000000000F2D0                 db  18h
.eh_frame:000000000000F2D1                 db  8Eh
.eh_frame:000000000000F2D2                 db    3
.eh_frame:000000000000F2D3                 db  42h ; B
.eh_frame:000000000000F2D4                 db  0Eh
.eh_frame:000000000000F2D5                 db  20h
.eh_frame:000000000000F2D6                 db  8Dh
.eh_frame:000000000000F2D7                 db    4
.eh_frame:000000000000F2D8                 db  42h ; B
.eh_frame:000000000000F2D9                 db  0Eh
.eh_frame:000000000000F2DA                 db  28h ; (
.eh_frame:000000000000F2DB                 db  8Ch
.eh_frame:000000000000F2DC                 db    5
.eh_frame:000000000000F2DD                 db  44h ; D
.eh_frame:000000000000F2DE                 db  0Eh
.eh_frame:000000000000F2DF                 db  30h ; 0
.eh_frame:000000000000F2E0                 db  86h
.eh_frame:000000000000F2E1                 db    6
.eh_frame:000000000000F2E2                 db  41h ; A
.eh_frame:000000000000F2E3                 db  0Eh
.eh_frame:000000000000F2E4                 db  38h ; 8
.eh_frame:000000000000F2E5                 db  83h
.eh_frame:000000000000F2E6                 db    7
.eh_frame:000000000000F2E7                 db  4Ah ; J
.eh_frame:000000000000F2E8                 db  0Eh
.eh_frame:000000000000F2E9                 db  60h ; `
.eh_frame:000000000000F2EA                 db    2
.eh_frame:000000000000F2EB                 db 0DDh
.eh_frame:000000000000F2EC                 db  0Eh
.eh_frame:000000000000F2ED                 db  68h ; h
.eh_frame:000000000000F2EE                 db  57h ; W
.eh_frame:000000000000F2EF                 db  0Eh
.eh_frame:000000000000F2F0                 db  70h ; p
.eh_frame:000000000000F2F1                 db  42h ; B
.eh_frame:000000000000F2F2                 db  0Eh
.eh_frame:000000000000F2F3                 db  78h ; x
.eh_frame:000000000000F2F4                 db  42h ; B
.eh_frame:000000000000F2F5                 db  0Eh
.eh_frame:000000000000F2F6                 db  80h
.eh_frame:000000000000F2F7                 db    1
.eh_frame:000000000000F2F8                 db  42h ; B
.eh_frame:000000000000F2F9                 db  0Eh
.eh_frame:000000000000F2FA                 db  88h
.eh_frame:000000000000F2FB                 db    1
.eh_frame:000000000000F2FC                 db  42h ; B
.eh_frame:000000000000F2FD                 db  0Eh
.eh_frame:000000000000F2FE                 db  90h
.eh_frame:000000000000F2FF                 db    1
.eh_frame:000000000000F300                 db  53h ; S
.eh_frame:000000000000F301                 db  0Eh
.eh_frame:000000000000F302                 db  60h ; `
.eh_frame:000000000000F303                 db  44h ; D
.eh_frame:000000000000F304                 db  0Ah
.eh_frame:000000000000F305                 db  0Eh
.eh_frame:000000000000F306                 db  38h ; 8
.eh_frame:000000000000F307                 db  41h ; A
.eh_frame:000000000000F308                 db  0Eh
.eh_frame:000000000000F309                 db  30h ; 0
.eh_frame:000000000000F30A                 db  41h ; A
.eh_frame:000000000000F30B                 db  0Eh
.eh_frame:000000000000F30C                 db  28h ; (
.eh_frame:000000000000F30D                 db  42h ; B
.eh_frame:000000000000F30E                 db  0Eh
.eh_frame:000000000000F30F                 db  20h
.eh_frame:000000000000F310                 db  42h ; B
.eh_frame:000000000000F311                 db  0Eh
.eh_frame:000000000000F312                 db  18h
.eh_frame:000000000000F313                 db  42h ; B
.eh_frame:000000000000F314                 db  0Eh
.eh_frame:000000000000F315                 db  10h
.eh_frame:000000000000F316                 db  42h ; B
.eh_frame:000000000000F317                 db  0Eh
.eh_frame:000000000000F318                 db    8
.eh_frame:000000000000F319                 db  44h ; D
.eh_frame:000000000000F31A                 db  0Bh
.eh_frame:000000000000F31B                 db    2
.eh_frame:000000000000F31C                 db  78h ; x
.eh_frame:000000000000F31D                 db  0Ah
.eh_frame:000000000000F31E                 db  0Eh
.eh_frame:000000000000F31F                 db  68h ; h
.eh_frame:000000000000F320                 db  48h ; H
.eh_frame:000000000000F321                 db  0Bh
.eh_frame:000000000000F322                 db  5Ah ; Z
.eh_frame:000000000000F323                 db  0Ah
.eh_frame:000000000000F324                 db  0Eh
.eh_frame:000000000000F325                 db  38h ; 8
.eh_frame:000000000000F326                 db  47h ; G
.eh_frame:000000000000F327                 db  0Eh
.eh_frame:000000000000F328                 db  30h ; 0
.eh_frame:000000000000F329                 db  41h ; A
.eh_frame:000000000000F32A                 db  0Eh
.eh_frame:000000000000F32B                 db  28h ; (
.eh_frame:000000000000F32C                 db  42h ; B
.eh_frame:000000000000F32D                 db  0Eh
.eh_frame:000000000000F32E                 db  20h
.eh_frame:000000000000F32F                 db  42h ; B
.eh_frame:000000000000F330                 db  0Eh
.eh_frame:000000000000F331                 db  18h
.eh_frame:000000000000F332                 db  42h ; B
.eh_frame:000000000000F333                 db  0Eh
.eh_frame:000000000000F334                 db  10h
.eh_frame:000000000000F335                 db  42h ; B
.eh_frame:000000000000F336                 db  0Eh
.eh_frame:000000000000F337                 db    8
.eh_frame:000000000000F338                 db  56h ; V
.eh_frame:000000000000F339                 db  0Bh
.eh_frame:000000000000F33A                 db  5Eh ; ^
.eh_frame:000000000000F33B                 db  0Ah
.eh_frame:000000000000F33C                 db  0Eh
.eh_frame:000000000000F33D                 db  38h ; 8
.eh_frame:000000000000F33E                 db  52h ; R
.eh_frame:000000000000F33F                 db  0Eh
.eh_frame:000000000000F340                 db  30h ; 0
.eh_frame:000000000000F341                 db  41h ; A
.eh_frame:000000000000F342                 db  0Eh
.eh_frame:000000000000F343                 db  28h ; (
.eh_frame:000000000000F344                 db  42h ; B
.eh_frame:000000000000F345                 db  0Eh
.eh_frame:000000000000F346                 db  20h
.eh_frame:000000000000F347                 db  42h ; B
.eh_frame:000000000000F348                 db  0Eh
.eh_frame:000000000000F349                 db  18h
.eh_frame:000000000000F34A                 db  42h ; B
.eh_frame:000000000000F34B                 db  0Eh
.eh_frame:000000000000F34C                 db  10h
.eh_frame:000000000000F34D                 db  42h ; B
.eh_frame:000000000000F34E                 db  0Eh
.eh_frame:000000000000F34F                 db    8
.eh_frame:000000000000F350                 db  4Fh ; O
.eh_frame:000000000000F351                 db  0Bh
.eh_frame:000000000000F352                 db  62h ; b
.eh_frame:000000000000F353                 db  0Ah
.eh_frame:000000000000F354                 db  0Eh
.eh_frame:000000000000F355                 db  38h ; 8
.eh_frame:000000000000F356                 db  50h ; P
.eh_frame:000000000000F357                 db  0Eh
.eh_frame:000000000000F358                 db  30h ; 0
.eh_frame:000000000000F359                 db  41h ; A
.eh_frame:000000000000F35A                 db  0Eh
.eh_frame:000000000000F35B                 db  28h ; (
.eh_frame:000000000000F35C                 db  42h ; B
.eh_frame:000000000000F35D                 db  0Eh
.eh_frame:000000000000F35E                 db  20h
.eh_frame:000000000000F35F                 db  42h ; B
.eh_frame:000000000000F360                 db  0Eh
.eh_frame:000000000000F361                 db  18h
.eh_frame:000000000000F362                 db  42h ; B
.eh_frame:000000000000F363                 db  0Eh
.eh_frame:000000000000F364                 db  10h
.eh_frame:000000000000F365                 db  42h ; B
.eh_frame:000000000000F366                 db  0Eh
.eh_frame:000000000000F367                 db    8
.eh_frame:000000000000F368                 db  55h ; U
.eh_frame:000000000000F369                 db  0Bh
.eh_frame:000000000000F36A                 db  66h ; f
.eh_frame:000000000000F36B                 db  0Eh
.eh_frame:000000000000F36C                 db  68h ; h
.eh_frame:000000000000F36D                 db  42h ; B
.eh_frame:000000000000F36E                 db  0Eh
.eh_frame:000000000000F36F                 db  70h ; p
.eh_frame:000000000000F370                 db  5Ch ; \
.eh_frame:000000000000F371                 db  0Eh
.eh_frame:000000000000F372                 db  68h ; h
.eh_frame:000000000000F373                 db  41h ; A
.eh_frame:000000000000F374                 db  0Eh
.eh_frame:000000000000F375                 db  60h ; `
.eh_frame:000000000000F376                 db  44h ; D
.eh_frame:000000000000F377                 db  0Ah
.eh_frame:000000000000F378                 db  0Eh
.eh_frame:000000000000F379                 db  38h ; 8
.eh_frame:000000000000F37A                 db  41h ; A
.eh_frame:000000000000F37B                 db  0Eh
.eh_frame:000000000000F37C                 db  30h ; 0
.eh_frame:000000000000F37D                 db  41h ; A
.eh_frame:000000000000F37E                 db  0Eh
.eh_frame:000000000000F37F                 db  28h ; (
.eh_frame:000000000000F380                 db  42h ; B
.eh_frame:000000000000F381                 db  0Eh
.eh_frame:000000000000F382                 db  20h
.eh_frame:000000000000F383                 db  42h ; B
.eh_frame:000000000000F384                 db  0Eh
.eh_frame:000000000000F385                 db  18h
.eh_frame:000000000000F386                 db  42h ; B
.eh_frame:000000000000F387                 db  0Eh
.eh_frame:000000000000F388                 db  10h
.eh_frame:000000000000F389                 db  42h ; B
.eh_frame:000000000000F38A                 db  0Eh
.eh_frame:000000000000F38B                 db    8
.eh_frame:000000000000F38C                 db  45h ; E
.eh_frame:000000000000F38D                 db  0Bh
.eh_frame:000000000000F38E                 db  68h ; h
.eh_frame:000000000000F38F                 db  0Ah
.eh_frame:000000000000F390                 db  0Eh
.eh_frame:000000000000F391                 db  68h ; h
.eh_frame:000000000000F392                 db  48h ; H
.eh_frame:000000000000F393                 db  0Bh
.eh_frame:000000000000F394                 db  72h ; r
.eh_frame:000000000000F395                 db  0Eh
.eh_frame:000000000000F396                 db  68h ; h
.eh_frame:000000000000F397                 db  45h ; E
.eh_frame:000000000000F398                 db  0Eh
.eh_frame:000000000000F399                 db  70h ; p
.eh_frame:000000000000F39A                 db  42h ; B
.eh_frame:000000000000F39B                 db  0Eh
.eh_frame:000000000000F39C                 db  78h ; x
.eh_frame:000000000000F39D                 db  42h ; B
.eh_frame:000000000000F39E                 db  0Eh
.eh_frame:000000000000F39F                 db  80h
.eh_frame:000000000000F3A0                 db    1
.eh_frame:000000000000F3A1                 db  5Eh ; ^
.eh_frame:000000000000F3A2                 db  0Eh
.eh_frame:000000000000F3A3                 db  60h ; `
.eh_frame:000000000000F3A4                 db  44h ; D
.eh_frame:000000000000F3A5                 db  0Ah
.eh_frame:000000000000F3A6                 db  0Eh
.eh_frame:000000000000F3A7                 db  38h ; 8
.eh_frame:000000000000F3A8                 db  41h ; A
.eh_frame:000000000000F3A9                 db  0Eh
.eh_frame:000000000000F3AA                 db  30h ; 0
.eh_frame:000000000000F3AB                 db  41h ; A
.eh_frame:000000000000F3AC                 db  0Eh
.eh_frame:000000000000F3AD                 db  28h ; (
.eh_frame:000000000000F3AE                 db  42h ; B
.eh_frame:000000000000F3AF                 db  0Eh
.eh_frame:000000000000F3B0                 db  20h
.eh_frame:000000000000F3B1                 db  42h ; B
.eh_frame:000000000000F3B2                 db  0Eh
.eh_frame:000000000000F3B3                 db  18h
.eh_frame:000000000000F3B4                 db  42h ; B
.eh_frame:000000000000F3B5                 db  0Eh
.eh_frame:000000000000F3B6                 db  10h
.eh_frame:000000000000F3B7                 db  42h ; B
.eh_frame:000000000000F3B8                 db  0Eh
.eh_frame:000000000000F3B9                 db    8
.eh_frame:000000000000F3BA                 db  41h ; A
.eh_frame:000000000000F3BB                 db  0Bh
.eh_frame:000000000000F3BC                 db  79h ; y
.eh_frame:000000000000F3BD                 db  0Ah
.eh_frame:000000000000F3BE                 db  0Eh
.eh_frame:000000000000F3BF                 db  68h ; h
.eh_frame:000000000000F3C0                 db  42h ; B
.eh_frame:000000000000F3C1                 db  0Eh
.eh_frame:000000000000F3C2                 db  70h ; p
.eh_frame:000000000000F3C3                 db  42h ; B
.eh_frame:000000000000F3C4                 db  0Eh
.eh_frame:000000000000F3C5                 db  78h ; x
.eh_frame:000000000000F3C6                 db  42h ; B
.eh_frame:000000000000F3C7                 db  0Eh
.eh_frame:000000000000F3C8                 db  80h
.eh_frame:000000000000F3C9                 db    1
.eh_frame:000000000000F3CA                 db  51h ; Q
.eh_frame:000000000000F3CB                 db  0Bh
.eh_frame:000000000000F3CC                 db  10h
.eh_frame:000000000000F3CD                 db    0
.eh_frame:000000000000F3CE                 db    0
.eh_frame:000000000000F3CF                 db    0
.eh_frame:000000000000F3D0                 db  18h
.eh_frame:000000000000F3D1                 db    9
.eh_frame:000000000000F3D2                 db    0
.eh_frame:000000000000F3D3                 db    0
.eh_frame:000000000000F3D4                 db 0ECh
.eh_frame:000000000000F3D5                 db  87h
.eh_frame:000000000000F3D6                 db 0FFh
.eh_frame:000000000000F3D7                 db 0FFh
.eh_frame:000000000000F3D8                 db  20h
.eh_frame:000000000000F3D9                 db    0
.eh_frame:000000000000F3DA                 db    0
.eh_frame:000000000000F3DB                 db    0
.eh_frame:000000000000F3DC                 db    0
.eh_frame:000000000000F3DD                 db    0
.eh_frame:000000000000F3DE                 db    0
.eh_frame:000000000000F3DF                 db    0
.eh_frame:000000000000F3E0                 db  18h
.eh_frame:000000000000F3E1                 db    0
.eh_frame:000000000000F3E2                 db    0
.eh_frame:000000000000F3E3                 db    0
.eh_frame:000000000000F3E4                 db  2Ch ; ,
.eh_frame:000000000000F3E5                 db    9
.eh_frame:000000000000F3E6                 db    0
.eh_frame:000000000000F3E7                 db    0
.eh_frame:000000000000F3E8                 db 0F8h
.eh_frame:000000000000F3E9                 db  87h
.eh_frame:000000000000F3EA                 db 0FFh
.eh_frame:000000000000F3EB                 db 0FFh
.eh_frame:000000000000F3EC                 db  78h ; x
.eh_frame:000000000000F3ED                 db    0
.eh_frame:000000000000F3EE                 db    0
.eh_frame:000000000000F3EF                 db    0
.eh_frame:000000000000F3F0                 db    0
.eh_frame:000000000000F3F1                 db  44h ; D
.eh_frame:000000000000F3F2                 db  0Eh
.eh_frame:000000000000F3F3                 db  70h ; p
.eh_frame:000000000000F3F4                 db    2
.eh_frame:000000000000F3F5                 db  60h ; `
.eh_frame:000000000000F3F6                 db  0Ah
.eh_frame:000000000000F3F7                 db  0Eh
.eh_frame:000000000000F3F8                 db    8
.eh_frame:000000000000F3F9                 db  41h ; A
.eh_frame:000000000000F3FA                 db  0Bh
.eh_frame:000000000000F3FB                 db    0
.eh_frame:000000000000F3FC                 db  28h ; (
.eh_frame:000000000000F3FD                 db    0
.eh_frame:000000000000F3FE                 db    0
.eh_frame:000000000000F3FF                 db    0
.eh_frame:000000000000F400                 db  48h ; H
.eh_frame:000000000000F401                 db    9
.eh_frame:000000000000F402                 db    0
.eh_frame:000000000000F403                 db    0
.eh_frame:000000000000F404                 db  5Ch ; \
.eh_frame:000000000000F405                 db  88h
.eh_frame:000000000000F406                 db 0FFh
.eh_frame:000000000000F407                 db 0FFh
.eh_frame:000000000000F408                 db 0D5h
.eh_frame:000000000000F409                 db    0
.eh_frame:000000000000F40A                 db    0
.eh_frame:000000000000F40B                 db    0
.eh_frame:000000000000F40C                 db    0
.eh_frame:000000000000F40D                 db  41h ; A
.eh_frame:000000000000F40E                 db  0Eh
.eh_frame:000000000000F40F                 db  10h
.eh_frame:000000000000F410                 db  86h
.eh_frame:000000000000F411                 db    2
.eh_frame:000000000000F412                 db  41h ; A
.eh_frame:000000000000F413                 db  0Eh
.eh_frame:000000000000F414                 db  18h
.eh_frame:000000000000F415                 db  83h
.eh_frame:000000000000F416                 db    3
.eh_frame:000000000000F417                 db  50h ; P
.eh_frame:000000000000F418                 db  0Eh
.eh_frame:000000000000F419                 db 0D0h
.eh_frame:000000000000F41A                 db    1
.eh_frame:000000000000F41B                 db    2
.eh_frame:000000000000F41C                 db 0ABh
.eh_frame:000000000000F41D                 db  0Ah
.eh_frame:000000000000F41E                 db  0Eh
.eh_frame:000000000000F41F                 db  18h
.eh_frame:000000000000F420                 db  41h ; A
.eh_frame:000000000000F421                 db  0Eh
.eh_frame:000000000000F422                 db  10h
.eh_frame:000000000000F423                 db  41h ; A
.eh_frame:000000000000F424                 db  0Eh
.eh_frame:000000000000F425                 db    8
.eh_frame:000000000000F426                 db  41h ; A
.eh_frame:000000000000F427                 db  0Bh
.eh_frame:000000000000F428                 db  1Ch
.eh_frame:000000000000F429                 db    0
.eh_frame:000000000000F42A                 db    0
.eh_frame:000000000000F42B                 db    0
.eh_frame:000000000000F42C                 db  74h ; t
.eh_frame:000000000000F42D                 db    9
.eh_frame:000000000000F42E                 db    0
.eh_frame:000000000000F42F                 db    0
.eh_frame:000000000000F430                 db  10h
.eh_frame:000000000000F431                 db  89h
.eh_frame:000000000000F432                 db 0FFh
.eh_frame:000000000000F433                 db 0FFh
.eh_frame:000000000000F434                 db  80h
.eh_frame:000000000000F435                 db    0
.eh_frame:000000000000F436                 db    0
.eh_frame:000000000000F437                 db    0
.eh_frame:000000000000F438                 db    0
.eh_frame:000000000000F439                 db  41h ; A
.eh_frame:000000000000F43A                 db  0Eh
.eh_frame:000000000000F43B                 db  10h
.eh_frame:000000000000F43C                 db  83h
.eh_frame:000000000000F43D                 db    2
.eh_frame:000000000000F43E                 db    2
.eh_frame:000000000000F43F                 db  7Ah ; z
.eh_frame:000000000000F440                 db  0Eh
.eh_frame:000000000000F441                 db    8
.eh_frame:000000000000F442                 db    0
.eh_frame:000000000000F443                 db    0
.eh_frame:000000000000F444                 db    0
.eh_frame:000000000000F445                 db    0
.eh_frame:000000000000F446                 db    0
.eh_frame:000000000000F447                 db    0
.eh_frame:000000000000F448                 db  18h
.eh_frame:000000000000F449                 db    0
.eh_frame:000000000000F44A                 db    0
.eh_frame:000000000000F44B                 db    0
.eh_frame:000000000000F44C                 db  94h
.eh_frame:000000000000F44D                 db    9
.eh_frame:000000000000F44E                 db    0
.eh_frame:000000000000F44F                 db    0
.eh_frame:000000000000F450                 db  70h ; p
.eh_frame:000000000000F451                 db  89h
.eh_frame:000000000000F452                 db 0FFh
.eh_frame:000000000000F453                 db 0FFh
.eh_frame:000000000000F454                 db  1Ah
.eh_frame:000000000000F455                 db    0
.eh_frame:000000000000F456                 db    0
.eh_frame:000000000000F457                 db    0
.eh_frame:000000000000F458                 db    0
.eh_frame:000000000000F459                 db  41h ; A
.eh_frame:000000000000F45A                 db  0Eh
.eh_frame:000000000000F45B                 db  10h
.eh_frame:000000000000F45C                 db  83h
.eh_frame:000000000000F45D                 db    2
.eh_frame:000000000000F45E                 db  53h ; S
.eh_frame:000000000000F45F                 db  0Ah
.eh_frame:000000000000F460                 db  0Eh
.eh_frame:000000000000F461                 db    8
.eh_frame:000000000000F462                 db  41h ; A
.eh_frame:000000000000F463                 db  0Bh
.eh_frame:000000000000F464                 db  10h
.eh_frame:000000000000F465                 db    0
.eh_frame:000000000000F466                 db    0
.eh_frame:000000000000F467                 db    0
.eh_frame:000000000000F468                 db 0B0h
.eh_frame:000000000000F469                 db    9
.eh_frame:000000000000F46A                 db    0
.eh_frame:000000000000F46B                 db    0
.eh_frame:000000000000F46C                 db  74h ; t
.eh_frame:000000000000F46D                 db  89h
.eh_frame:000000000000F46E                 db 0FFh
.eh_frame:000000000000F46F                 db 0FFh
.eh_frame:000000000000F470                 db  24h ; $
.eh_frame:000000000000F471                 db    0
.eh_frame:000000000000F472                 db    0
.eh_frame:000000000000F473                 db    0
.eh_frame:000000000000F474                 db    0
.eh_frame:000000000000F475                 db  5Fh ; _
.eh_frame:000000000000F476                 db  0Eh
.eh_frame:000000000000F477                 db  10h
.eh_frame:000000000000F478                 db  10h
.eh_frame:000000000000F479                 db    0
.eh_frame:000000000000F47A                 db    0
.eh_frame:000000000000F47B                 db    0
.eh_frame:000000000000F47C                 db 0C4h
.eh_frame:000000000000F47D                 db    9
.eh_frame:000000000000F47E                 db    0
.eh_frame:000000000000F47F                 db    0
.eh_frame:000000000000F480                 db  90h
.eh_frame:000000000000F481                 db  89h
.eh_frame:000000000000F482                 db 0FFh
.eh_frame:000000000000F483                 db 0FFh
.eh_frame:000000000000F484                 db    2
.eh_frame:000000000000F485                 db    0
.eh_frame:000000000000F486                 db    0
.eh_frame:000000000000F487                 db    0
.eh_frame:000000000000F488                 db    0
.eh_frame:000000000000F489                 db    0
.eh_frame:000000000000F48A                 db    0
.eh_frame:000000000000F48B                 db    0
.eh_frame:000000000000F48C                 db  20h
.eh_frame:000000000000F48D                 db    0
.eh_frame:000000000000F48E                 db    0
.eh_frame:000000000000F48F                 db    0
.eh_frame:000000000000F490                 db 0D8h
.eh_frame:000000000000F491                 db    9
.eh_frame:000000000000F492                 db    0
.eh_frame:000000000000F493                 db    0
.eh_frame:000000000000F494                 db  8Ch
.eh_frame:000000000000F495                 db  89h
.eh_frame:000000000000F496                 db 0FFh
.eh_frame:000000000000F497                 db 0FFh
.eh_frame:000000000000F498                 db  36h ; 6
.eh_frame:000000000000F499                 db    0
.eh_frame:000000000000F49A                 db    0
.eh_frame:000000000000F49B                 db    0
.eh_frame:000000000000F49C                 db    0
.eh_frame:000000000000F49D                 db  44h ; D
.eh_frame:000000000000F49E                 db  0Eh
.eh_frame:000000000000F49F                 db  10h
.eh_frame:000000000000F4A0                 db  83h
.eh_frame:000000000000F4A1                 db    2
.eh_frame:000000000000F4A2                 db  5Dh ; ]
.eh_frame:000000000000F4A3                 db  0Ah
.eh_frame:000000000000F4A4                 db  0Eh
.eh_frame:000000000000F4A5                 db    8
.eh_frame:000000000000F4A6                 db  47h ; G
.eh_frame:000000000000F4A7                 db  0Bh
.eh_frame:000000000000F4A8                 db  48h ; H
.eh_frame:000000000000F4A9                 db  0Ah
.eh_frame:000000000000F4AA                 db  0Eh
.eh_frame:000000000000F4AB                 db    8
.eh_frame:000000000000F4AC                 db  41h ; A
.eh_frame:000000000000F4AD                 db  0Bh
.eh_frame:000000000000F4AE                 db    0
.eh_frame:000000000000F4AF                 db    0
.eh_frame:000000000000F4B0                 db  10h
.eh_frame:000000000000F4B1                 db    0
.eh_frame:000000000000F4B2                 db    0
.eh_frame:000000000000F4B3                 db    0
.eh_frame:000000000000F4B4                 db 0FCh
.eh_frame:000000000000F4B5                 db    9
.eh_frame:000000000000F4B6                 db    0
.eh_frame:000000000000F4B7                 db    0
.eh_frame:000000000000F4B8                 db 0A8h
.eh_frame:000000000000F4B9                 db  89h
.eh_frame:000000000000F4BA                 db 0FFh
.eh_frame:000000000000F4BB                 db 0FFh
.eh_frame:000000000000F4BC                 db  24h ; $
.eh_frame:000000000000F4BD                 db    0
.eh_frame:000000000000F4BE                 db    0
.eh_frame:000000000000F4BF                 db    0
.eh_frame:000000000000F4C0                 db    0
.eh_frame:000000000000F4C1                 db  5Fh ; _
.eh_frame:000000000000F4C2                 db  0Eh
.eh_frame:000000000000F4C3                 db  10h
.eh_frame:000000000000F4C4                 db  14h
.eh_frame:000000000000F4C5                 db    0
.eh_frame:000000000000F4C6                 db    0
.eh_frame:000000000000F4C7                 db    0
.eh_frame:000000000000F4C8                 db  10h
.eh_frame:000000000000F4C9                 db  0Ah
.eh_frame:000000000000F4CA                 db    0
.eh_frame:000000000000F4CB                 db    0
.eh_frame:000000000000F4CC                 db 0C4h
.eh_frame:000000000000F4CD                 db  89h
.eh_frame:000000000000F4CE                 db 0FFh
.eh_frame:000000000000F4CF                 db 0FFh
.eh_frame:000000000000F4D0                 db  82h
.eh_frame:000000000000F4D1                 db    0
.eh_frame:000000000000F4D2                 db    0
.eh_frame:000000000000F4D3                 db    0
.eh_frame:000000000000F4D4                 db    0
.eh_frame:000000000000F4D5                 db    2
.eh_frame:000000000000F4D6                 db  5Fh ; _
.eh_frame:000000000000F4D7                 db  0Eh
.eh_frame:000000000000F4D8                 db  10h
.eh_frame:000000000000F4D9                 db  49h ; I
.eh_frame:000000000000F4DA                 db  0Eh
.eh_frame:000000000000F4DB                 db    8
.eh_frame:000000000000F4DC                 db  14h
.eh_frame:000000000000F4DD                 db    0
.eh_frame:000000000000F4DE                 db    0
.eh_frame:000000000000F4DF                 db    0
.eh_frame:000000000000F4E0                 db  28h ; (
.eh_frame:000000000000F4E1                 db  0Ah
.eh_frame:000000000000F4E2                 db    0
.eh_frame:000000000000F4E3                 db    0
.eh_frame:000000000000F4E4                 db  3Ch ; <
.eh_frame:000000000000F4E5                 db  8Ah
.eh_frame:000000000000F4E6                 db 0FFh
.eh_frame:000000000000F4E7                 db 0FFh
.eh_frame:000000000000F4E8                 db  4Ah ; J
.eh_frame:000000000000F4E9                 db    0
.eh_frame:000000000000F4EA                 db    0
.eh_frame:000000000000F4EB                 db    0
.eh_frame:000000000000F4EC                 db    0
.eh_frame:000000000000F4ED                 db    2
.eh_frame:000000000000F4EE                 db  45h ; E
.eh_frame:000000000000F4EF                 db  0Eh
.eh_frame:000000000000F4F0                 db  10h
.eh_frame:000000000000F4F1                 db    0
.eh_frame:000000000000F4F2                 db    0
.eh_frame:000000000000F4F3                 db    0
.eh_frame:000000000000F4F4                 db  18h
.eh_frame:000000000000F4F5                 db    0
.eh_frame:000000000000F4F6                 db    0
.eh_frame:000000000000F4F7                 db    0
.eh_frame:000000000000F4F8                 db  40h ; @
.eh_frame:000000000000F4F9                 db  0Ah
.eh_frame:000000000000F4FA                 db    0
.eh_frame:000000000000F4FB                 db    0
.eh_frame:000000000000F4FC                 db  74h ; t
.eh_frame:000000000000F4FD                 db  8Ah
.eh_frame:000000000000F4FE                 db 0FFh
.eh_frame:000000000000F4FF                 db 0FFh
.eh_frame:000000000000F500                 db  17h
.eh_frame:000000000000F501                 db    0
.eh_frame:000000000000F502                 db    0
.eh_frame:000000000000F503                 db    0
.eh_frame:000000000000F504                 db    0
.eh_frame:000000000000F505                 db  41h ; A
.eh_frame:000000000000F506                 db  0Eh
.eh_frame:000000000000F507                 db  10h
.eh_frame:000000000000F508                 db  83h
.eh_frame:000000000000F509                 db    2
.eh_frame:000000000000F50A                 db  51h ; Q
.eh_frame:000000000000F50B                 db  0Eh
.eh_frame:000000000000F50C                 db    8
.eh_frame:000000000000F50D                 db    0
.eh_frame:000000000000F50E                 db    0
.eh_frame:000000000000F50F                 db    0
.eh_frame:000000000000F510                 db  18h
.eh_frame:000000000000F511                 db    0
.eh_frame:000000000000F512                 db    0
.eh_frame:000000000000F513                 db    0
.eh_frame:000000000000F514                 db  5Ch ; \
.eh_frame:000000000000F515                 db  0Ah
.eh_frame:000000000000F516                 db    0
.eh_frame:000000000000F517                 db    0
.eh_frame:000000000000F518                 db  78h ; x
.eh_frame:000000000000F519                 db  8Ah
.eh_frame:000000000000F51A                 db 0FFh
.eh_frame:000000000000F51B                 db 0FFh
.eh_frame:000000000000F51C                 db  2Eh ; .
.eh_frame:000000000000F51D                 db    0
.eh_frame:000000000000F51E                 db    0
.eh_frame:000000000000F51F                 db    0
.eh_frame:000000000000F520                 db    0
.eh_frame:000000000000F521                 db  47h ; G
.eh_frame:000000000000F522                 db  0Eh
.eh_frame:000000000000F523                 db  10h
.eh_frame:000000000000F524                 db  61h ; a
.eh_frame:000000000000F525                 db  0Ah
.eh_frame:000000000000F526                 db  0Eh
.eh_frame:000000000000F527                 db    8
.eh_frame:000000000000F528                 db  41h ; A
.eh_frame:000000000000F529                 db  0Bh
.eh_frame:000000000000F52A                 db    0
.eh_frame:000000000000F52B                 db    0
.eh_frame:000000000000F52C                 db  24h ; $
.eh_frame:000000000000F52D                 db    0
.eh_frame:000000000000F52E                 db    0
.eh_frame:000000000000F52F                 db    0
.eh_frame:000000000000F530                 db  78h ; x
.eh_frame:000000000000F531                 db  0Ah
.eh_frame:000000000000F532                 db    0
.eh_frame:000000000000F533                 db    0
.eh_frame:000000000000F534                 db  8Ch
.eh_frame:000000000000F535                 db  8Ah
.eh_frame:000000000000F536                 db 0FFh
.eh_frame:000000000000F537                 db 0FFh
.eh_frame:000000000000F538                 db  28h ; (
.eh_frame:000000000000F539                 db    0
.eh_frame:000000000000F53A                 db    0
.eh_frame:000000000000F53B                 db    0
.eh_frame:000000000000F53C                 db    0
.eh_frame:000000000000F53D                 db  41h ; A
.eh_frame:000000000000F53E                 db  0Eh
.eh_frame:000000000000F53F                 db  10h
.eh_frame:000000000000F540                 db  86h
.eh_frame:000000000000F541                 db    2
.eh_frame:000000000000F542                 db  41h ; A
.eh_frame:000000000000F543                 db  0Eh
.eh_frame:000000000000F544                 db  18h
.eh_frame:000000000000F545                 db  83h
.eh_frame:000000000000F546                 db    3
.eh_frame:000000000000F547                 db  4Dh ; M
.eh_frame:000000000000F548                 db  0Eh
.eh_frame:000000000000F549                 db  20h
.eh_frame:000000000000F54A                 db  49h ; I
.eh_frame:000000000000F54B                 db  0Eh
.eh_frame:000000000000F54C                 db  18h
.eh_frame:000000000000F54D                 db  47h ; G
.eh_frame:000000000000F54E                 db  0Eh
.eh_frame:000000000000F54F                 db  10h
.eh_frame:000000000000F550                 db  41h ; A
.eh_frame:000000000000F551                 db  0Eh
.eh_frame:000000000000F552                 db    8
.eh_frame:000000000000F553                 db    0
.eh_frame:000000000000F554                 db  18h
.eh_frame:000000000000F555                 db    0
.eh_frame:000000000000F556                 db    0
.eh_frame:000000000000F557                 db    0
.eh_frame:000000000000F558                 db 0A0h
.eh_frame:000000000000F559                 db  0Ah
.eh_frame:000000000000F55A                 db    0
.eh_frame:000000000000F55B                 db    0
.eh_frame:000000000000F55C                 db  94h
.eh_frame:000000000000F55D                 db  8Ah
.eh_frame:000000000000F55E                 db 0FFh
.eh_frame:000000000000F55F                 db 0FFh
.eh_frame:000000000000F560                 db  13h
.eh_frame:000000000000F561                 db    0
.eh_frame:000000000000F562                 db    0
.eh_frame:000000000000F563                 db    0
.eh_frame:000000000000F564                 db    0
.eh_frame:000000000000F565                 db  41h ; A
.eh_frame:000000000000F566                 db  0Eh
.eh_frame:000000000000F567                 db  10h
.eh_frame:000000000000F568                 db  83h
.eh_frame:000000000000F569                 db    2
.eh_frame:000000000000F56A                 db  50h ; P
.eh_frame:000000000000F56B                 db  0Eh
.eh_frame:000000000000F56C                 db    8
.eh_frame:000000000000F56D                 db    0
.eh_frame:000000000000F56E                 db    0
.eh_frame:000000000000F56F                 db    0
.eh_frame:000000000000F570                 db  14h
.eh_frame:000000000000F571                 db    0
.eh_frame:000000000000F572                 db    0
.eh_frame:000000000000F573                 db    0
.eh_frame:000000000000F574                 db 0BCh
.eh_frame:000000000000F575                 db  0Ah
.eh_frame:000000000000F576                 db    0
.eh_frame:000000000000F577                 db    0
.eh_frame:000000000000F578                 db  98h
.eh_frame:000000000000F579                 db  8Ah
.eh_frame:000000000000F57A                 db 0FFh
.eh_frame:000000000000F57B                 db 0FFh
.eh_frame:000000000000F57C                 db  35h ; 5
.eh_frame:000000000000F57D                 db    0
.eh_frame:000000000000F57E                 db    0
.eh_frame:000000000000F57F                 db    0
.eh_frame:000000000000F580                 db    0
.eh_frame:000000000000F581                 db  4Bh ; K
.eh_frame:000000000000F582                 db  0Eh
.eh_frame:000000000000F583                 db  10h
.eh_frame:000000000000F584                 db    0
.eh_frame:000000000000F585                 db    0
.eh_frame:000000000000F586                 db    0
.eh_frame:000000000000F587                 db    0
.eh_frame:000000000000F588                 db  48h ; H
.eh_frame:000000000000F589                 db    0
.eh_frame:000000000000F58A                 db    0
.eh_frame:000000000000F58B                 db    0
.eh_frame:000000000000F58C                 db 0D4h
.eh_frame:000000000000F58D                 db  0Ah
.eh_frame:000000000000F58E                 db    0
.eh_frame:000000000000F58F                 db    0
.eh_frame:000000000000F590                 db 0C0h
.eh_frame:000000000000F591                 db  8Ah
.eh_frame:000000000000F592                 db 0FFh
.eh_frame:000000000000F593                 db 0FFh
.eh_frame:000000000000F594                 db    0
.eh_frame:000000000000F595                 db    1
.eh_frame:000000000000F596                 db    0
.eh_frame:000000000000F597                 db    0
.eh_frame:000000000000F598                 db    0
.eh_frame:000000000000F599                 db  42h ; B
.eh_frame:000000000000F59A                 db  0Eh
.eh_frame:000000000000F59B                 db  10h
.eh_frame:000000000000F59C                 db  8Fh
.eh_frame:000000000000F59D                 db    2
.eh_frame:000000000000F59E                 db  42h ; B
.eh_frame:000000000000F59F                 db  0Eh
.eh_frame:000000000000F5A0                 db  18h
.eh_frame:000000000000F5A1                 db  8Eh
.eh_frame:000000000000F5A2                 db    3
.eh_frame:000000000000F5A3                 db  45h ; E
.eh_frame:000000000000F5A4                 db  0Eh
.eh_frame:000000000000F5A5                 db  20h
.eh_frame:000000000000F5A6                 db  8Dh
.eh_frame:000000000000F5A7                 db    4
.eh_frame:000000000000F5A8                 db  42h ; B
.eh_frame:000000000000F5A9                 db  0Eh
.eh_frame:000000000000F5AA                 db  28h ; (
.eh_frame:000000000000F5AB                 db  8Ch
.eh_frame:000000000000F5AC                 db    5
.eh_frame:000000000000F5AD                 db  44h ; D
.eh_frame:000000000000F5AE                 db  0Eh
.eh_frame:000000000000F5AF                 db  30h ; 0
.eh_frame:000000000000F5B0                 db  86h
.eh_frame:000000000000F5B1                 db    6
.eh_frame:000000000000F5B2                 db  41h ; A
.eh_frame:000000000000F5B3                 db  0Eh
.eh_frame:000000000000F5B4                 db  38h ; 8
.eh_frame:000000000000F5B5                 db  83h
.eh_frame:000000000000F5B6                 db    7
.eh_frame:000000000000F5B7                 db  4Eh ; N
.eh_frame:000000000000F5B8                 db  0Eh
.eh_frame:000000000000F5B9                 db  50h ; P
.eh_frame:000000000000F5BA                 db    2
.eh_frame:000000000000F5BB                 db  9Dh
.eh_frame:000000000000F5BC                 db  0Ah
.eh_frame:000000000000F5BD                 db  0Eh
.eh_frame:000000000000F5BE                 db  38h ; 8
.eh_frame:000000000000F5BF                 db  41h ; A
.eh_frame:000000000000F5C0                 db  0Eh
.eh_frame:000000000000F5C1                 db  30h ; 0
.eh_frame:000000000000F5C2                 db  41h ; A
.eh_frame:000000000000F5C3                 db  0Eh
.eh_frame:000000000000F5C4                 db  28h ; (
.eh_frame:000000000000F5C5                 db  42h ; B
.eh_frame:000000000000F5C6                 db  0Eh
.eh_frame:000000000000F5C7                 db  20h
.eh_frame:000000000000F5C8                 db  42h ; B
.eh_frame:000000000000F5C9                 db  0Eh
.eh_frame:000000000000F5CA                 db  18h
.eh_frame:000000000000F5CB                 db  42h ; B
.eh_frame:000000000000F5CC                 db  0Eh
.eh_frame:000000000000F5CD                 db  10h
.eh_frame:000000000000F5CE                 db  42h ; B
.eh_frame:000000000000F5CF                 db  0Eh
.eh_frame:000000000000F5D0                 db    8
.eh_frame:000000000000F5D1                 db  4Bh ; K
.eh_frame:000000000000F5D2                 db  0Bh
.eh_frame:000000000000F5D3                 db    0
.eh_frame:000000000000F5D4                 db  18h
.eh_frame:000000000000F5D5                 db    0
.eh_frame:000000000000F5D6                 db    0
.eh_frame:000000000000F5D7                 db    0
.eh_frame:000000000000F5D8                 db  20h
.eh_frame:000000000000F5D9                 db  0Bh
.eh_frame:000000000000F5DA                 db    0
.eh_frame:000000000000F5DB                 db    0
.eh_frame:000000000000F5DC                 db  74h ; t
.eh_frame:000000000000F5DD                 db  8Bh
.eh_frame:000000000000F5DE                 db 0FFh
.eh_frame:000000000000F5DF                 db 0FFh
.eh_frame:000000000000F5E0                 db  21h ; !
.eh_frame:000000000000F5E1                 db    0
.eh_frame:000000000000F5E2                 db    0
.eh_frame:000000000000F5E3                 db    0
.eh_frame:000000000000F5E4                 db    0
.eh_frame:000000000000F5E5                 db  44h ; D
.eh_frame:000000000000F5E6                 db  0Eh
.eh_frame:000000000000F5E7                 db  18h
.eh_frame:000000000000F5E8                 db  42h ; B
.eh_frame:000000000000F5E9                 db  0Eh
.eh_frame:000000000000F5EA                 db  20h
.eh_frame:000000000000F5EB                 db  5Ah ; Z
.eh_frame:000000000000F5EC                 db  0Eh
.eh_frame:000000000000F5ED                 db    8
.eh_frame:000000000000F5EE                 db    0
.eh_frame:000000000000F5EF                 db    0
.eh_frame:000000000000F5F0                 db  4Ch ; L
.eh_frame:000000000000F5F1                 db    0
.eh_frame:000000000000F5F2                 db    0
.eh_frame:000000000000F5F3                 db    0
.eh_frame:000000000000F5F4                 db  3Ch ; <
.eh_frame:000000000000F5F5                 db  0Bh
.eh_frame:000000000000F5F6                 db    0
.eh_frame:000000000000F5F7                 db    0
.eh_frame:000000000000F5F8                 db  88h
.eh_frame:000000000000F5F9                 db  8Bh
.eh_frame:000000000000F5FA                 db 0FFh
.eh_frame:000000000000F5FB                 db 0FFh
.eh_frame:000000000000F5FC                 db 0B3h
.eh_frame:000000000000F5FD                 db    6
.eh_frame:000000000000F5FE                 db    0
.eh_frame:000000000000F5FF                 db    0
.eh_frame:000000000000F600                 db    0
.eh_frame:000000000000F601                 db  42h ; B
.eh_frame:000000000000F602                 db  0Eh
.eh_frame:000000000000F603                 db  10h
.eh_frame:000000000000F604                 db  8Fh
.eh_frame:000000000000F605                 db    2
.eh_frame:000000000000F606                 db  42h ; B
.eh_frame:000000000000F607                 db  0Eh
.eh_frame:000000000000F608                 db  18h
.eh_frame:000000000000F609                 db  8Eh
.eh_frame:000000000000F60A                 db    3
.eh_frame:000000000000F60B                 db  42h ; B
.eh_frame:000000000000F60C                 db  0Eh
.eh_frame:000000000000F60D                 db  20h
.eh_frame:000000000000F60E                 db  8Dh
.eh_frame:000000000000F60F                 db    4
.eh_frame:000000000000F610                 db  42h ; B
.eh_frame:000000000000F611                 db  0Eh
.eh_frame:000000000000F612                 db  28h ; (
.eh_frame:000000000000F613                 db  8Ch
.eh_frame:000000000000F614                 db    5
.eh_frame:000000000000F615                 db  41h ; A
.eh_frame:000000000000F616                 db  0Eh
.eh_frame:000000000000F617                 db  30h ; 0
.eh_frame:000000000000F618                 db  86h
.eh_frame:000000000000F619                 db    6
.eh_frame:000000000000F61A                 db  41h ; A
.eh_frame:000000000000F61B                 db  0Eh
.eh_frame:000000000000F61C                 db  38h ; 8
.eh_frame:000000000000F61D                 db  83h
.eh_frame:000000000000F61E                 db    7
.eh_frame:000000000000F61F                 db  44h ; D
.eh_frame:000000000000F620                 db  0Eh
.eh_frame:000000000000F621                 db  60h ; `
.eh_frame:000000000000F622                 db    2
.eh_frame:000000000000F623                 db  94h
.eh_frame:000000000000F624                 db  0Ah
.eh_frame:000000000000F625                 db  0Eh
.eh_frame:000000000000F626                 db  38h ; 8
.eh_frame:000000000000F627                 db  41h ; A
.eh_frame:000000000000F628                 db  0Eh
.eh_frame:000000000000F629                 db  30h ; 0
.eh_frame:000000000000F62A                 db  41h ; A
.eh_frame:000000000000F62B                 db  0Eh
.eh_frame:000000000000F62C                 db  28h ; (
.eh_frame:000000000000F62D                 db  42h ; B
.eh_frame:000000000000F62E                 db  0Eh
.eh_frame:000000000000F62F                 db  20h
.eh_frame:000000000000F630                 db  42h ; B
.eh_frame:000000000000F631                 db  0Eh
.eh_frame:000000000000F632                 db  18h
.eh_frame:000000000000F633                 db  42h ; B
.eh_frame:000000000000F634                 db  0Eh
.eh_frame:000000000000F635                 db  10h
.eh_frame:000000000000F636                 db  42h ; B
.eh_frame:000000000000F637                 db  0Eh
.eh_frame:000000000000F638                 db    8
.eh_frame:000000000000F639                 db  44h ; D
.eh_frame:000000000000F63A                 db  0Bh
.eh_frame:000000000000F63B                 db    0
.eh_frame:000000000000F63C                 db    0
.eh_frame:000000000000F63D                 db    0
.eh_frame:000000000000F63E                 db    0
.eh_frame:000000000000F63F                 db    0
.eh_frame:000000000000F640                 db  4Ch ; L
.eh_frame:000000000000F641                 db    0
.eh_frame:000000000000F642                 db    0
.eh_frame:000000000000F643                 db    0
.eh_frame:000000000000F644                 db  8Ch
.eh_frame:000000000000F645                 db  0Bh
.eh_frame:000000000000F646                 db    0
.eh_frame:000000000000F647                 db    0
.eh_frame:000000000000F648                 db 0F8h
.eh_frame:000000000000F649                 db  91h
.eh_frame:000000000000F64A                 db 0FFh
.eh_frame:000000000000F64B                 db 0FFh
.eh_frame:000000000000F64C                 db  1Ch
.eh_frame:000000000000F64D                 db    4
.eh_frame:000000000000F64E                 db    0
.eh_frame:000000000000F64F                 db    0
.eh_frame:000000000000F650                 db    0
.eh_frame:000000000000F651                 db  42h ; B
.eh_frame:000000000000F652                 db  0Eh
.eh_frame:000000000000F653                 db  10h
.eh_frame:000000000000F654                 db  8Fh
.eh_frame:000000000000F655                 db    2
.eh_frame:000000000000F656                 db  42h ; B
.eh_frame:000000000000F657                 db  0Eh
.eh_frame:000000000000F658                 db  18h
.eh_frame:000000000000F659                 db  8Eh
.eh_frame:000000000000F65A                 db    3
.eh_frame:000000000000F65B                 db  42h ; B
.eh_frame:000000000000F65C                 db  0Eh
.eh_frame:000000000000F65D                 db  20h
.eh_frame:000000000000F65E                 db  8Dh
.eh_frame:000000000000F65F                 db    4
.eh_frame:000000000000F660                 db  42h ; B
.eh_frame:000000000000F661                 db  0Eh
.eh_frame:000000000000F662                 db  28h ; (
.eh_frame:000000000000F663                 db  8Ch
.eh_frame:000000000000F664                 db    5
.eh_frame:000000000000F665                 db  41h ; A
.eh_frame:000000000000F666                 db  0Eh
.eh_frame:000000000000F667                 db  30h ; 0
.eh_frame:000000000000F668                 db  86h
.eh_frame:000000000000F669                 db    6
.eh_frame:000000000000F66A                 db  41h ; A
.eh_frame:000000000000F66B                 db  0Eh
.eh_frame:000000000000F66C                 db  38h ; 8
.eh_frame:000000000000F66D                 db  83h
.eh_frame:000000000000F66E                 db    7
.eh_frame:000000000000F66F                 db  44h ; D
.eh_frame:000000000000F670                 db  0Eh
.eh_frame:000000000000F671                 db  60h ; `
.eh_frame:000000000000F672                 db    2
.eh_frame:000000000000F673                 db 0E9h
.eh_frame:000000000000F674                 db  0Ah
.eh_frame:000000000000F675                 db  0Eh
.eh_frame:000000000000F676                 db  38h ; 8
.eh_frame:000000000000F677                 db  41h ; A
.eh_frame:000000000000F678                 db  0Eh
.eh_frame:000000000000F679                 db  30h ; 0
.eh_frame:000000000000F67A                 db  41h ; A
.eh_frame:000000000000F67B                 db  0Eh
.eh_frame:000000000000F67C                 db  28h ; (
.eh_frame:000000000000F67D                 db  42h ; B
.eh_frame:000000000000F67E                 db  0Eh
.eh_frame:000000000000F67F                 db  20h
.eh_frame:000000000000F680                 db  42h ; B
.eh_frame:000000000000F681                 db  0Eh
.eh_frame:000000000000F682                 db  18h
.eh_frame:000000000000F683                 db  42h ; B
.eh_frame:000000000000F684                 db  0Eh
.eh_frame:000000000000F685                 db  10h
.eh_frame:000000000000F686                 db  42h ; B
.eh_frame:000000000000F687                 db  0Eh
.eh_frame:000000000000F688                 db    8
.eh_frame:000000000000F689                 db  47h ; G
.eh_frame:000000000000F68A                 db  0Bh
.eh_frame:000000000000F68B                 db    0
.eh_frame:000000000000F68C                 db    0
.eh_frame:000000000000F68D                 db    0
.eh_frame:000000000000F68E                 db    0
.eh_frame:000000000000F68F                 db    0
.eh_frame:000000000000F690                 db  34h ; 4
.eh_frame:000000000000F691                 db    0
.eh_frame:000000000000F692                 db    0
.eh_frame:000000000000F693                 db    0
.eh_frame:000000000000F694                 db 0DCh
.eh_frame:000000000000F695                 db  0Bh
.eh_frame:000000000000F696                 db    0
.eh_frame:000000000000F697                 db    0
.eh_frame:000000000000F698                 db 0C8h
.eh_frame:000000000000F699                 db  95h
.eh_frame:000000000000F69A                 db 0FFh
.eh_frame:000000000000F69B                 db 0FFh
.eh_frame:000000000000F69C                 db  7Eh ; ~
.eh_frame:000000000000F69D                 db    2
.eh_frame:000000000000F69E                 db    0
.eh_frame:000000000000F69F                 db    0
.eh_frame:000000000000F6A0                 db    0
.eh_frame:000000000000F6A1                 db  42h ; B
.eh_frame:000000000000F6A2                 db  0Eh
.eh_frame:000000000000F6A3                 db  10h
.eh_frame:000000000000F6A4                 db  8Ch
.eh_frame:000000000000F6A5                 db    2
.eh_frame:000000000000F6A6                 db  41h ; A
.eh_frame:000000000000F6A7                 db  0Eh
.eh_frame:000000000000F6A8                 db  18h
.eh_frame:000000000000F6A9                 db  86h
.eh_frame:000000000000F6AA                 db    3
.eh_frame:000000000000F6AB                 db  43h ; C
.eh_frame:000000000000F6AC                 db  0Eh
.eh_frame:000000000000F6AD                 db  20h
.eh_frame:000000000000F6AE                 db  83h
.eh_frame:000000000000F6AF                 db    4
.eh_frame:000000000000F6B0                 db  44h ; D
.eh_frame:000000000000F6B1                 db  0Eh
.eh_frame:000000000000F6B2                 db  70h ; p
.eh_frame:000000000000F6B3                 db    2
.eh_frame:000000000000F6B4                 db 0F0h
.eh_frame:000000000000F6B5                 db  0Ah
.eh_frame:000000000000F6B6                 db  0Eh
.eh_frame:000000000000F6B7                 db  20h
.eh_frame:000000000000F6B8                 db  41h ; A
.eh_frame:000000000000F6B9                 db  0Eh
.eh_frame:000000000000F6BA                 db  18h
.eh_frame:000000000000F6BB                 db  41h ; A
.eh_frame:000000000000F6BC                 db  0Eh
.eh_frame:000000000000F6BD                 db  10h
.eh_frame:000000000000F6BE                 db  42h ; B
.eh_frame:000000000000F6BF                 db  0Eh
.eh_frame:000000000000F6C0                 db    8
.eh_frame:000000000000F6C1                 db  42h ; B
.eh_frame:000000000000F6C2                 db  0Bh
.eh_frame:000000000000F6C3                 db    0
.eh_frame:000000000000F6C4                 db    0
.eh_frame:000000000000F6C5                 db    0
.eh_frame:000000000000F6C6                 db    0
.eh_frame:000000000000F6C7                 db    0
.eh_frame:000000000000F6C8                 db  3Ch ; <
.eh_frame:000000000000F6C9                 db    0
.eh_frame:000000000000F6CA                 db    0
.eh_frame:000000000000F6CB                 db    0
.eh_frame:000000000000F6CC                 db  14h
.eh_frame:000000000000F6CD                 db  0Ch
.eh_frame:000000000000F6CE                 db    0
.eh_frame:000000000000F6CF                 db    0
.eh_frame:000000000000F6D0                 db  10h
.eh_frame:000000000000F6D1                 db  98h
.eh_frame:000000000000F6D2                 db 0FFh
.eh_frame:000000000000F6D3                 db 0FFh
.eh_frame:000000000000F6D4                 db  83h
.eh_frame:000000000000F6D5                 db    0
.eh_frame:000000000000F6D6                 db    0
.eh_frame:000000000000F6D7                 db    0
.eh_frame:000000000000F6D8                 db    0
.eh_frame:000000000000F6D9                 db  42h ; B
.eh_frame:000000000000F6DA                 db  0Eh
.eh_frame:000000000000F6DB                 db  10h
.eh_frame:000000000000F6DC                 db  8Dh
.eh_frame:000000000000F6DD                 db    2
.eh_frame:000000000000F6DE                 db  42h ; B
.eh_frame:000000000000F6DF                 db  0Eh
.eh_frame:000000000000F6E0                 db  18h
.eh_frame:000000000000F6E1                 db  8Ch
.eh_frame:000000000000F6E2                 db    3
.eh_frame:000000000000F6E3                 db  44h ; D
.eh_frame:000000000000F6E4                 db  0Eh
.eh_frame:000000000000F6E5                 db  20h
.eh_frame:000000000000F6E6                 db  86h
.eh_frame:000000000000F6E7                 db    4
.eh_frame:000000000000F6E8                 db  41h ; A
.eh_frame:000000000000F6E9                 db  0Eh
.eh_frame:000000000000F6EA                 db  28h ; (
.eh_frame:000000000000F6EB                 db  83h
.eh_frame:000000000000F6EC                 db    5
.eh_frame:000000000000F6ED                 db  4Ah ; J
.eh_frame:000000000000F6EE                 db  0Eh
.eh_frame:000000000000F6EF                 db  40h ; @
.eh_frame:000000000000F6F0                 db    2
.eh_frame:000000000000F6F1                 db  64h ; d
.eh_frame:000000000000F6F2                 db  0Ah
.eh_frame:000000000000F6F3                 db  0Eh
.eh_frame:000000000000F6F4                 db  28h ; (
.eh_frame:000000000000F6F5                 db  41h ; A
.eh_frame:000000000000F6F6                 db  0Eh
.eh_frame:000000000000F6F7                 db  20h
.eh_frame:000000000000F6F8                 db  41h ; A
.eh_frame:000000000000F6F9                 db  0Eh
.eh_frame:000000000000F6FA                 db  18h
.eh_frame:000000000000F6FB                 db  42h ; B
.eh_frame:000000000000F6FC                 db  0Eh
.eh_frame:000000000000F6FD                 db  10h
.eh_frame:000000000000F6FE                 db  42h ; B
.eh_frame:000000000000F6FF                 db  0Eh
.eh_frame:000000000000F700                 db    8
.eh_frame:000000000000F701                 db  41h ; A
.eh_frame:000000000000F702                 db  0Bh
.eh_frame:000000000000F703                 db    0
.eh_frame:000000000000F704                 db    0
.eh_frame:000000000000F705                 db    0
.eh_frame:000000000000F706                 db    0
.eh_frame:000000000000F707                 db    0
.eh_frame:000000000000F708                 db  24h ; $
.eh_frame:000000000000F709                 db    0
.eh_frame:000000000000F70A                 db    0
.eh_frame:000000000000F70B                 db    0
.eh_frame:000000000000F70C                 db  54h ; T
.eh_frame:000000000000F70D                 db  0Ch
.eh_frame:000000000000F70E                 db    0
.eh_frame:000000000000F70F                 db    0
.eh_frame:000000000000F710                 db  60h ; `
.eh_frame:000000000000F711                 db  98h
.eh_frame:000000000000F712                 db 0FFh
.eh_frame:000000000000F713                 db 0FFh
.eh_frame:000000000000F714                 db  7Eh ; ~
.eh_frame:000000000000F715                 db    0
.eh_frame:000000000000F716                 db    0
.eh_frame:000000000000F717                 db    0
.eh_frame:000000000000F718                 db    0
.eh_frame:000000000000F719                 db  41h ; A
.eh_frame:000000000000F71A                 db  0Eh
.eh_frame:000000000000F71B                 db  10h
.eh_frame:000000000000F71C                 db  83h
.eh_frame:000000000000F71D                 db    2
.eh_frame:000000000000F71E                 db  4Ch ; L
.eh_frame:000000000000F71F                 db  0Eh
.eh_frame:000000000000F720                 db  20h
.eh_frame:000000000000F721                 db    2
.eh_frame:000000000000F722                 db  49h ; I
.eh_frame:000000000000F723                 db  0Ah
.eh_frame:000000000000F724                 db  0Eh
.eh_frame:000000000000F725                 db  10h
.eh_frame:000000000000F726                 db  41h ; A
.eh_frame:000000000000F727                 db  0Eh
.eh_frame:000000000000F728                 db    8
.eh_frame:000000000000F729                 db  41h ; A
.eh_frame:000000000000F72A                 db  0Bh
.eh_frame:000000000000F72B                 db    0
.eh_frame:000000000000F72C                 db    0
.eh_frame:000000000000F72D                 db    0
.eh_frame:000000000000F72E                 db    0
.eh_frame:000000000000F72F                 db    0
.eh_frame:000000000000F730                 db  4Ch ; L
.eh_frame:000000000000F731                 db    0
.eh_frame:000000000000F732                 db    0
.eh_frame:000000000000F733                 db    0
.eh_frame:000000000000F734                 db  7Ch ; |
.eh_frame:000000000000F735                 db  0Ch
.eh_frame:000000000000F736                 db    0
.eh_frame:000000000000F737                 db    0
.eh_frame:000000000000F738                 db 0B8h
.eh_frame:000000000000F739                 db  98h
.eh_frame:000000000000F73A                 db 0FFh
.eh_frame:000000000000F73B                 db 0FFh
.eh_frame:000000000000F73C                 db  7Dh ; }
.eh_frame:000000000000F73D                 db    0
.eh_frame:000000000000F73E                 db    0
.eh_frame:000000000000F73F                 db    0
.eh_frame:000000000000F740                 db    0
.eh_frame:000000000000F741                 db  42h ; B
.eh_frame:000000000000F742                 db  0Eh
.eh_frame:000000000000F743                 db  10h
.eh_frame:000000000000F744                 db  8Ch
.eh_frame:000000000000F745                 db    2
.eh_frame:000000000000F746                 db  41h ; A
.eh_frame:000000000000F747                 db  0Eh
.eh_frame:000000000000F748                 db  18h
.eh_frame:000000000000F749                 db  86h
.eh_frame:000000000000F74A                 db    3
.eh_frame:000000000000F74B                 db  44h ; D
.eh_frame:000000000000F74C                 db  0Eh
.eh_frame:000000000000F74D                 db  20h
.eh_frame:000000000000F74E                 db  83h
.eh_frame:000000000000F74F                 db    4
.eh_frame:000000000000F750                 db  69h ; i
.eh_frame:000000000000F751                 db  0Ah
.eh_frame:000000000000F752                 db  0Eh
.eh_frame:000000000000F753                 db  18h
.eh_frame:000000000000F754                 db  41h ; A
.eh_frame:000000000000F755                 db  0Eh
.eh_frame:000000000000F756                 db  10h
.eh_frame:000000000000F757                 db  42h ; B
.eh_frame:000000000000F758                 db  0Eh
.eh_frame:000000000000F759                 db    8
.eh_frame:000000000000F75A                 db  45h ; E
.eh_frame:000000000000F75B                 db  0Bh
.eh_frame:000000000000F75C                 db  55h ; U
.eh_frame:000000000000F75D                 db  0Ah
.eh_frame:000000000000F75E                 db  0Eh
.eh_frame:000000000000F75F                 db  18h
.eh_frame:000000000000F760                 db  41h ; A
.eh_frame:000000000000F761                 db  0Eh
.eh_frame:000000000000F762                 db  10h
.eh_frame:000000000000F763                 db  42h ; B
.eh_frame:000000000000F764                 db  0Eh
.eh_frame:000000000000F765                 db    8
.eh_frame:000000000000F766                 db  48h ; H
.eh_frame:000000000000F767                 db  0Bh
.eh_frame:000000000000F768                 db  41h ; A
.eh_frame:000000000000F769                 db  0Ah
.eh_frame:000000000000F76A                 db  0Eh
.eh_frame:000000000000F76B                 db  18h
.eh_frame:000000000000F76C                 db  46h ; F
.eh_frame:000000000000F76D                 db  0Eh
.eh_frame:000000000000F76E                 db  10h
.eh_frame:000000000000F76F                 db  42h ; B
.eh_frame:000000000000F770                 db  0Eh
.eh_frame:000000000000F771                 db    8
.eh_frame:000000000000F772                 db  47h ; G
.eh_frame:000000000000F773                 db  0Bh
.eh_frame:000000000000F774                 db  49h ; I
.eh_frame:000000000000F775                 db  0Eh
.eh_frame:000000000000F776                 db  18h
.eh_frame:000000000000F777                 db  41h ; A
.eh_frame:000000000000F778                 db  0Eh
.eh_frame:000000000000F779                 db  10h
.eh_frame:000000000000F77A                 db  42h ; B
.eh_frame:000000000000F77B                 db  0Eh
.eh_frame:000000000000F77C                 db    8
.eh_frame:000000000000F77D                 db    0
.eh_frame:000000000000F77E                 db    0
.eh_frame:000000000000F77F                 db    0
.eh_frame:000000000000F780                 db  1Ch
.eh_frame:000000000000F781                 db    0
.eh_frame:000000000000F782                 db    0
.eh_frame:000000000000F783                 db    0
.eh_frame:000000000000F784                 db 0CCh
.eh_frame:000000000000F785                 db  0Ch
.eh_frame:000000000000F786                 db    0
.eh_frame:000000000000F787                 db    0
.eh_frame:000000000000F788                 db 0E8h
.eh_frame:000000000000F789                 db  98h
.eh_frame:000000000000F78A                 db 0FFh
.eh_frame:000000000000F78B                 db 0FFh
.eh_frame:000000000000F78C                 db  60h ; `
.eh_frame:000000000000F78D                 db    0
.eh_frame:000000000000F78E                 db    0
.eh_frame:000000000000F78F                 db    0
.eh_frame:000000000000F790                 db    0
.eh_frame:000000000000F791                 db  44h ; D
.eh_frame:000000000000F792                 db  0Eh
.eh_frame:000000000000F793                 db  10h
.eh_frame:000000000000F794                 db  75h ; u
.eh_frame:000000000000F795                 db  0Ah
.eh_frame:000000000000F796                 db  0Eh
.eh_frame:000000000000F797                 db    8
.eh_frame:000000000000F798                 db  47h ; G
.eh_frame:000000000000F799                 db  0Bh
.eh_frame:000000000000F79A                 db  5Fh ; _
.eh_frame:000000000000F79B                 db  0Eh
.eh_frame:000000000000F79C                 db    8
.eh_frame:000000000000F79D                 db    0
.eh_frame:000000000000F79E                 db    0
.eh_frame:000000000000F79F                 db    0
.eh_frame:000000000000F7A0                 db  1Ch
.eh_frame:000000000000F7A1                 db    0
.eh_frame:000000000000F7A2                 db    0
.eh_frame:000000000000F7A3                 db    0
.eh_frame:000000000000F7A4                 db 0ECh
.eh_frame:000000000000F7A5                 db  0Ch
.eh_frame:000000000000F7A6                 db    0
.eh_frame:000000000000F7A7                 db    0
.eh_frame:000000000000F7A8                 db  28h ; (
.eh_frame:000000000000F7A9                 db  99h
.eh_frame:000000000000F7AA                 db 0FFh
.eh_frame:000000000000F7AB                 db 0FFh
.eh_frame:000000000000F7AC                 db  3Ch ; <
.eh_frame:000000000000F7AD                 db    0
.eh_frame:000000000000F7AE                 db    0
.eh_frame:000000000000F7AF                 db    0
.eh_frame:000000000000F7B0                 db    0
.eh_frame:000000000000F7B1                 db  44h ; D
.eh_frame:000000000000F7B2                 db  0Eh
.eh_frame:000000000000F7B3                 db  10h
.eh_frame:000000000000F7B4                 db  61h ; a
.eh_frame:000000000000F7B5                 db  0Ah
.eh_frame:000000000000F7B6                 db  0Eh
.eh_frame:000000000000F7B7                 db    8
.eh_frame:000000000000F7B8                 db  4Bh ; K
.eh_frame:000000000000F7B9                 db  0Bh
.eh_frame:000000000000F7BA                 db  4Bh ; K
.eh_frame:000000000000F7BB                 db  0Eh
.eh_frame:000000000000F7BC                 db    8
.eh_frame:000000000000F7BD                 db    0
.eh_frame:000000000000F7BE                 db    0
.eh_frame:000000000000F7BF                 db    0
.eh_frame:000000000000F7C0                 db  34h ; 4
.eh_frame:000000000000F7C1                 db    0
.eh_frame:000000000000F7C2                 db    0
.eh_frame:000000000000F7C3                 db    0
.eh_frame:000000000000F7C4                 db  0Ch
.eh_frame:000000000000F7C5                 db  0Dh
.eh_frame:000000000000F7C6                 db    0
.eh_frame:000000000000F7C7                 db    0
.eh_frame:000000000000F7C8                 db  48h ; H
.eh_frame:000000000000F7C9                 db  99h
.eh_frame:000000000000F7CA                 db 0FFh
.eh_frame:000000000000F7CB                 db 0FFh
.eh_frame:000000000000F7CC                 db  7Bh ; {
.eh_frame:000000000000F7CD                 db    0
.eh_frame:000000000000F7CE                 db    0
.eh_frame:000000000000F7CF                 db    0
.eh_frame:000000000000F7D0                 db    0
.eh_frame:000000000000F7D1                 db  42h ; B
.eh_frame:000000000000F7D2                 db  0Eh
.eh_frame:000000000000F7D3                 db  10h
.eh_frame:000000000000F7D4                 db  8Ch
.eh_frame:000000000000F7D5                 db    2
.eh_frame:000000000000F7D6                 db  41h ; A
.eh_frame:000000000000F7D7                 db  0Eh
.eh_frame:000000000000F7D8                 db  18h
.eh_frame:000000000000F7D9                 db  86h
.eh_frame:000000000000F7DA                 db    3
.eh_frame:000000000000F7DB                 db  41h ; A
.eh_frame:000000000000F7DC                 db  0Eh
.eh_frame:000000000000F7DD                 db  20h
.eh_frame:000000000000F7DE                 db  83h
.eh_frame:000000000000F7DF                 db    4
.eh_frame:000000000000F7E0                 db  7Dh ; }
.eh_frame:000000000000F7E1                 db  0Ah
.eh_frame:000000000000F7E2                 db  0Eh
.eh_frame:000000000000F7E3                 db  18h
.eh_frame:000000000000F7E4                 db  41h ; A
.eh_frame:000000000000F7E5                 db  0Eh
.eh_frame:000000000000F7E6                 db  10h
.eh_frame:000000000000F7E7                 db  42h ; B
.eh_frame:000000000000F7E8                 db  0Eh
.eh_frame:000000000000F7E9                 db    8
.eh_frame:000000000000F7EA                 db  44h ; D
.eh_frame:000000000000F7EB                 db  0Bh
.eh_frame:000000000000F7EC                 db  60h ; `
.eh_frame:000000000000F7ED                 db  0Ah
.eh_frame:000000000000F7EE                 db  0Eh
.eh_frame:000000000000F7EF                 db  18h
.eh_frame:000000000000F7F0                 db  41h ; A
.eh_frame:000000000000F7F1                 db  0Eh
.eh_frame:000000000000F7F2                 db  10h
.eh_frame:000000000000F7F3                 db  42h ; B
.eh_frame:000000000000F7F4                 db  0Eh
.eh_frame:000000000000F7F5                 db    8
.eh_frame:000000000000F7F6                 db  45h ; E
.eh_frame:000000000000F7F7                 db  0Bh
.eh_frame:000000000000F7F8                 db  1Ch
.eh_frame:000000000000F7F9                 db    0
.eh_frame:000000000000F7FA                 db    0
.eh_frame:000000000000F7FB                 db    0
.eh_frame:000000000000F7FC                 db  44h ; D
.eh_frame:000000000000F7FD                 db  0Dh
.eh_frame:000000000000F7FE                 db    0
.eh_frame:000000000000F7FF                 db    0
.eh_frame:000000000000F800                 db  90h
.eh_frame:000000000000F801                 db  99h
.eh_frame:000000000000F802                 db 0FFh
.eh_frame:000000000000F803                 db 0FFh
.eh_frame:000000000000F804                 db  40h ; @
.eh_frame:000000000000F805                 db    0
.eh_frame:000000000000F806                 db    0
.eh_frame:000000000000F807                 db    0
.eh_frame:000000000000F808                 db    0
.eh_frame:000000000000F809                 db  44h ; D
.eh_frame:000000000000F80A                 db  0Eh
.eh_frame:000000000000F80B                 db  10h
.eh_frame:000000000000F80C                 db  83h
.eh_frame:000000000000F80D                 db    2
.eh_frame:000000000000F80E                 db  5Ah ; Z
.eh_frame:000000000000F80F                 db  0Ah
.eh_frame:000000000000F810                 db  0Eh
.eh_frame:000000000000F811                 db    8
.eh_frame:000000000000F812                 db  4Ah ; J
.eh_frame:000000000000F813                 db  0Bh
.eh_frame:000000000000F814                 db  53h ; S
.eh_frame:000000000000F815                 db  0Eh
.eh_frame:000000000000F816                 db    8
.eh_frame:000000000000F817                 db    0
.eh_frame:000000000000F818                 db  2Ch ; ,
.eh_frame:000000000000F819                 db    0
.eh_frame:000000000000F81A                 db    0
.eh_frame:000000000000F81B                 db    0
.eh_frame:000000000000F81C                 db  64h ; d
.eh_frame:000000000000F81D                 db  0Dh
.eh_frame:000000000000F81E                 db    0
.eh_frame:000000000000F81F                 db    0
.eh_frame:000000000000F820                 db 0B0h
.eh_frame:000000000000F821                 db  99h
.eh_frame:000000000000F822                 db 0FFh
.eh_frame:000000000000F823                 db 0FFh
.eh_frame:000000000000F824                 db  57h ; W
.eh_frame:000000000000F825                 db    0
.eh_frame:000000000000F826                 db    0
.eh_frame:000000000000F827                 db    0
.eh_frame:000000000000F828                 db    0
.eh_frame:000000000000F829                 db  63h ; c
.eh_frame:000000000000F82A                 db  0Eh
.eh_frame:000000000000F82B                 db  10h
.eh_frame:000000000000F82C                 db  8Ch
.eh_frame:000000000000F82D                 db    2
.eh_frame:000000000000F82E                 db  41h ; A
.eh_frame:000000000000F82F                 db  0Eh
.eh_frame:000000000000F830                 db  18h
.eh_frame:000000000000F831                 db  86h
.eh_frame:000000000000F832                 db    3
.eh_frame:000000000000F833                 db  44h ; D
.eh_frame:000000000000F834                 db  0Eh
.eh_frame:000000000000F835                 db  20h
.eh_frame:000000000000F836                 db  83h
.eh_frame:000000000000F837                 db    4
.eh_frame:000000000000F838                 db  6Bh ; k
.eh_frame:000000000000F839                 db  0Eh
.eh_frame:000000000000F83A                 db  18h
.eh_frame:000000000000F83B                 db  41h ; A
.eh_frame:000000000000F83C                 db  0Eh
.eh_frame:000000000000F83D                 db  10h
.eh_frame:000000000000F83E                 db  42h ; B
.eh_frame:000000000000F83F                 db  0Eh
.eh_frame:000000000000F840                 db    8
.eh_frame:000000000000F841                 db    0
.eh_frame:000000000000F842                 db    0
.eh_frame:000000000000F843                 db    0
.eh_frame:000000000000F844                 db    0
.eh_frame:000000000000F845                 db    0
.eh_frame:000000000000F846                 db    0
.eh_frame:000000000000F847                 db    0
.eh_frame:000000000000F848                 db  2Ch ; ,
.eh_frame:000000000000F849                 db    0
.eh_frame:000000000000F84A                 db    0
.eh_frame:000000000000F84B                 db    0
.eh_frame:000000000000F84C                 db  94h
.eh_frame:000000000000F84D                 db  0Dh
.eh_frame:000000000000F84E                 db    0
.eh_frame:000000000000F84F                 db    0
.eh_frame:000000000000F850                 db 0E0h
.eh_frame:000000000000F851                 db  99h
.eh_frame:000000000000F852                 db 0FFh
.eh_frame:000000000000F853                 db 0FFh
.eh_frame:000000000000F854                 db  1Fh
.eh_frame:000000000000F855                 db  11h
.eh_frame:000000000000F856                 db    0
.eh_frame:000000000000F857                 db    0
.eh_frame:000000000000F858                 db    0
.eh_frame:000000000000F859                 db  41h ; A
.eh_frame:000000000000F85A                 db  0Eh
.eh_frame:000000000000F85B                 db  10h
.eh_frame:000000000000F85C                 db  86h
.eh_frame:000000000000F85D                 db    2
.eh_frame:000000000000F85E                 db  43h ; C
.eh_frame:000000000000F85F                 db  0Dh
.eh_frame:000000000000F860                 db    6
.eh_frame:000000000000F861                 db  48h ; H
.eh_frame:000000000000F862                 db  8Fh
.eh_frame:000000000000F863                 db    3
.eh_frame:000000000000F864                 db  8Eh
.eh_frame:000000000000F865                 db    4
.eh_frame:000000000000F866                 db  8Dh
.eh_frame:000000000000F867                 db    5
.eh_frame:000000000000F868                 db  8Ch
.eh_frame:000000000000F869                 db    6
.eh_frame:000000000000F86A                 db  48h ; H
.eh_frame:000000000000F86B                 db  83h
.eh_frame:000000000000F86C                 db    7
.eh_frame:000000000000F86D                 db    3
.eh_frame:000000000000F86E                 db 0EFh
.eh_frame:000000000000F86F                 db    1
.eh_frame:000000000000F870                 db  0Ah
.eh_frame:000000000000F871                 db  0Ch
.eh_frame:000000000000F872                 db    7
.eh_frame:000000000000F873                 db    8
.eh_frame:000000000000F874                 db  45h ; E
.eh_frame:000000000000F875                 db  0Bh
.eh_frame:000000000000F876                 db    0
.eh_frame:000000000000F877                 db    0
.eh_frame:000000000000F878                 db  14h
.eh_frame:000000000000F879                 db    0
.eh_frame:000000000000F87A                 db    0
.eh_frame:000000000000F87B                 db    0
.eh_frame:000000000000F87C                 db 0C4h
.eh_frame:000000000000F87D                 db  0Dh
.eh_frame:000000000000F87E                 db    0
.eh_frame:000000000000F87F                 db    0
.eh_frame:000000000000F880                 db 0D0h
.eh_frame:000000000000F881                 db 0AAh
.eh_frame:000000000000F882                 db 0FFh
.eh_frame:000000000000F883                 db 0FFh
.eh_frame:000000000000F884                 db 0FEh
.eh_frame:000000000000F885                 db    1
.eh_frame:000000000000F886                 db    0
.eh_frame:000000000000F887                 db    0
.eh_frame:000000000000F888                 db    0
.eh_frame:000000000000F889                 db    0
.eh_frame:000000000000F88A                 db    0
.eh_frame:000000000000F88B                 db    0
.eh_frame:000000000000F88C                 db    0
.eh_frame:000000000000F88D                 db    0
.eh_frame:000000000000F88E                 db    0
.eh_frame:000000000000F88F                 db    0
.eh_frame:000000000000F890                 db  4Ch ; L
.eh_frame:000000000000F891                 db    0
.eh_frame:000000000000F892                 db    0
.eh_frame:000000000000F893                 db    0
.eh_frame:000000000000F894                 db 0DCh
.eh_frame:000000000000F895                 db  0Dh
.eh_frame:000000000000F896                 db    0
.eh_frame:000000000000F897                 db    0
.eh_frame:000000000000F898                 db 0B8h
.eh_frame:000000000000F899                 db 0ACh
.eh_frame:000000000000F89A                 db 0FFh
.eh_frame:000000000000F89B                 db 0FFh
.eh_frame:000000000000F89C                 db 0ECh
.eh_frame:000000000000F89D                 db  0Ch
.eh_frame:000000000000F89E                 db    0
.eh_frame:000000000000F89F                 db    0
.eh_frame:000000000000F8A0                 db    0
.eh_frame:000000000000F8A1                 db  42h ; B
.eh_frame:000000000000F8A2                 db  0Eh
.eh_frame:000000000000F8A3                 db  10h
.eh_frame:000000000000F8A4                 db  8Fh
.eh_frame:000000000000F8A5                 db    2
.eh_frame:000000000000F8A6                 db  42h ; B
.eh_frame:000000000000F8A7                 db  0Eh
.eh_frame:000000000000F8A8                 db  18h
.eh_frame:000000000000F8A9                 db  8Eh
.eh_frame:000000000000F8AA                 db    3
.eh_frame:000000000000F8AB                 db  46h ; F
.eh_frame:000000000000F8AC                 db  0Eh
.eh_frame:000000000000F8AD                 db  20h
.eh_frame:000000000000F8AE                 db  8Dh
.eh_frame:000000000000F8AF                 db    4
.eh_frame:000000000000F8B0                 db  42h ; B
.eh_frame:000000000000F8B1                 db  0Eh
.eh_frame:000000000000F8B2                 db  28h ; (
.eh_frame:000000000000F8B3                 db  8Ch
.eh_frame:000000000000F8B4                 db    5
.eh_frame:000000000000F8B5                 db  45h ; E
.eh_frame:000000000000F8B6                 db  0Eh
.eh_frame:000000000000F8B7                 db  30h ; 0
.eh_frame:000000000000F8B8                 db  86h
.eh_frame:000000000000F8B9                 db    6
.eh_frame:000000000000F8BA                 db  41h ; A
.eh_frame:000000000000F8BB                 db  0Eh
.eh_frame:000000000000F8BC                 db  38h ; 8
.eh_frame:000000000000F8BD                 db  83h
.eh_frame:000000000000F8BE                 db    7
.eh_frame:000000000000F8BF                 db  52h ; R
.eh_frame:000000000000F8C0                 db  0Eh
.eh_frame:000000000000F8C1                 db  90h
.eh_frame:000000000000F8C2                 db    1
.eh_frame:000000000000F8C3                 db    2
.eh_frame:000000000000F8C4                 db  82h
.eh_frame:000000000000F8C5                 db  0Ah
.eh_frame:000000000000F8C6                 db  0Eh
.eh_frame:000000000000F8C7                 db  38h ; 8
.eh_frame:000000000000F8C8                 db  41h ; A
.eh_frame:000000000000F8C9                 db  0Eh
.eh_frame:000000000000F8CA                 db  30h ; 0
.eh_frame:000000000000F8CB                 db  41h ; A
.eh_frame:000000000000F8CC                 db  0Eh
.eh_frame:000000000000F8CD                 db  28h ; (
.eh_frame:000000000000F8CE                 db  42h ; B
.eh_frame:000000000000F8CF                 db  0Eh
.eh_frame:000000000000F8D0                 db  20h
.eh_frame:000000000000F8D1                 db  42h ; B
.eh_frame:000000000000F8D2                 db  0Eh
.eh_frame:000000000000F8D3                 db  18h
.eh_frame:000000000000F8D4                 db  42h ; B
.eh_frame:000000000000F8D5                 db  0Eh
.eh_frame:000000000000F8D6                 db  10h
.eh_frame:000000000000F8D7                 db  42h ; B
.eh_frame:000000000000F8D8                 db  0Eh
.eh_frame:000000000000F8D9                 db    8
.eh_frame:000000000000F8DA                 db  48h ; H
.eh_frame:000000000000F8DB                 db  0Bh
.eh_frame:000000000000F8DC                 db    0
.eh_frame:000000000000F8DD                 db    0
.eh_frame:000000000000F8DE                 db    0
.eh_frame:000000000000F8DF                 db    0
.eh_frame:000000000000F8E0                 db  44h ; D
.eh_frame:000000000000F8E1                 db    0
.eh_frame:000000000000F8E2                 db    0
.eh_frame:000000000000F8E3                 db    0
.eh_frame:000000000000F8E4                 db  2Ch ; ,
.eh_frame:000000000000F8E5                 db  0Eh
.eh_frame:000000000000F8E6                 db    0
.eh_frame:000000000000F8E7                 db    0
.eh_frame:000000000000F8E8                 db  58h ; X
.eh_frame:000000000000F8E9                 db 0B9h
.eh_frame:000000000000F8EA                 db 0FFh
.eh_frame:000000000000F8EB                 db 0FFh
.eh_frame:000000000000F8EC                 db  65h ; e
.eh_frame:000000000000F8ED                 db    0
.eh_frame:000000000000F8EE                 db    0
.eh_frame:000000000000F8EF                 db    0
.eh_frame:000000000000F8F0                 db    0
.eh_frame:000000000000F8F1                 db  42h ; B
.eh_frame:000000000000F8F2                 db  0Eh
.eh_frame:000000000000F8F3                 db  10h
.eh_frame:000000000000F8F4                 db  8Fh
.eh_frame:000000000000F8F5                 db    2
.eh_frame:000000000000F8F6                 db  42h ; B
.eh_frame:000000000000F8F7                 db  0Eh
.eh_frame:000000000000F8F8                 db  18h
.eh_frame:000000000000F8F9                 db  8Eh
.eh_frame:000000000000F8FA                 db    3
.eh_frame:000000000000F8FB                 db  45h ; E
.eh_frame:000000000000F8FC                 db  0Eh
.eh_frame:000000000000F8FD                 db  20h
.eh_frame:000000000000F8FE                 db  8Dh
.eh_frame:000000000000F8FF                 db    4
.eh_frame:000000000000F900                 db  42h ; B
.eh_frame:000000000000F901                 db  0Eh
.eh_frame:000000000000F902                 db  28h ; (
.eh_frame:000000000000F903                 db  8Ch
.eh_frame:000000000000F904                 db    5
.eh_frame:000000000000F905                 db  48h ; H
.eh_frame:000000000000F906                 db  0Eh
.eh_frame:000000000000F907                 db  30h ; 0
.eh_frame:000000000000F908                 db  86h
.eh_frame:000000000000F909                 db    6
.eh_frame:000000000000F90A                 db  48h ; H
.eh_frame:000000000000F90B                 db  0Eh
.eh_frame:000000000000F90C                 db  38h ; 8
.eh_frame:000000000000F90D                 db  83h
.eh_frame:000000000000F90E                 db    7
.eh_frame:000000000000F90F                 db  4Dh ; M
.eh_frame:000000000000F910                 db  0Eh
.eh_frame:000000000000F911                 db  40h ; @
.eh_frame:000000000000F912                 db  72h ; r
.eh_frame:000000000000F913                 db  0Eh
.eh_frame:000000000000F914                 db  38h ; 8
.eh_frame:000000000000F915                 db  41h ; A
.eh_frame:000000000000F916                 db  0Eh
.eh_frame:000000000000F917                 db  30h ; 0
.eh_frame:000000000000F918                 db  41h ; A
.eh_frame:000000000000F919                 db  0Eh
.eh_frame:000000000000F91A                 db  28h ; (
.eh_frame:000000000000F91B                 db  42h ; B
.eh_frame:000000000000F91C                 db  0Eh
.eh_frame:000000000000F91D                 db  20h
.eh_frame:000000000000F91E                 db  42h ; B
.eh_frame:000000000000F91F                 db  0Eh
.eh_frame:000000000000F920                 db  18h
.eh_frame:000000000000F921                 db  42h ; B
.eh_frame:000000000000F922                 db  0Eh
.eh_frame:000000000000F923                 db  10h
.eh_frame:000000000000F924                 db  42h ; B
.eh_frame:000000000000F925                 db  0Eh
.eh_frame:000000000000F926                 db    8
.eh_frame:000000000000F927                 db    0
.eh_frame:000000000000F928                 db  14h
.eh_frame:000000000000F929                 db    0
.eh_frame:000000000000F92A                 db    0
.eh_frame:000000000000F92B                 db    0
.eh_frame:000000000000F92C                 db  74h ; t
.eh_frame:000000000000F92D                 db  0Eh
.eh_frame:000000000000F92E                 db    0
.eh_frame:000000000000F92F                 db    0
.eh_frame:000000000000F930                 db  80h
.eh_frame:000000000000F931                 db 0B9h
.eh_frame:000000000000F932                 db 0FFh
.eh_frame:000000000000F933                 db 0FFh
.eh_frame:000000000000F934                 db    2
.eh_frame:000000000000F935                 db    0
.eh_frame:000000000000F936                 db    0
.eh_frame:000000000000F937                 db    0
.eh_frame:000000000000F938                 db    0
.eh_frame:000000000000F939                 db    0
.eh_frame:000000000000F93A                 db    0
.eh_frame:000000000000F93B                 db    0
.eh_frame:000000000000F93C                 db    0
.eh_frame:000000000000F93D                 db    0
.eh_frame:000000000000F93E                 db    0
.eh_frame:000000000000F93F                 db    0
.eh_frame:000000000000F940                 db  10h
.eh_frame:000000000000F941                 db    0
.eh_frame:000000000000F942                 db    0
.eh_frame:000000000000F943                 db    0
.eh_frame:000000000000F944                 db  8Ch
.eh_frame:000000000000F945                 db  0Eh
.eh_frame:000000000000F946                 db    0
.eh_frame:000000000000F947                 db    0
.eh_frame:000000000000F948                 db  78h ; x
.eh_frame:000000000000F949                 db 0B9h
.eh_frame:000000000000F94A                 db 0FFh
.eh_frame:000000000000F94B                 db 0FFh
.eh_frame:000000000000F94C                 db  0Eh
.eh_frame:000000000000F94D                 db    0
.eh_frame:000000000000F94E                 db    0
.eh_frame:000000000000F94F                 db    0
.eh_frame:000000000000F950                 db    0
.eh_frame:000000000000F951                 db    0
.eh_frame:000000000000F952                 db    0
.eh_frame:000000000000F953                 db    0
.eh_frame:000000000000F954 __FRAME_END__   db    0
.eh_frame:000000000000F955                 db    0
.eh_frame:000000000000F956                 db    0
.eh_frame:000000000000F957                 db    0
.eh_frame:000000000000F957 _eh_frame       ends
.eh_frame:000000000000F957
.init_array:000000000020FA50 ; ELF Initialization Function Table
.init_array:000000000020FA50 ; ===========================================================================
.init_array:000000000020FA50
.init_array:000000000020FA50 ; Segment type: Pure data
.init_array:000000000020FA50 ; Segment permissions: Read/Write
.init_array:000000000020FA50 _init_array     segment qword public 'DATA' use64
.init_array:000000000020FA50                 assume cs:_init_array
.init_array:000000000020FA50                 ;org 20FA50h
.init_array:000000000020FA50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020FA50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020FA50                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020FA50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020FA50
.fini_array:000000000020FA58 ; ELF Termination Function Table
.fini_array:000000000020FA58 ; ===========================================================================
.fini_array:000000000020FA58
.fini_array:000000000020FA58 ; Segment type: Pure data
.fini_array:000000000020FA58 ; Segment permissions: Read/Write
.fini_array:000000000020FA58 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020FA58                 assume cs:_fini_array
.fini_array:000000000020FA58                 ;org 20FA58h
.fini_array:000000000020FA58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020FA58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020FA58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020FA58
.data.rel.ro:000000000020FA60 ; ===========================================================================
.data.rel.ro:000000000020FA60
.data.rel.ro:000000000020FA60 ; Segment type: Pure data
.data.rel.ro:000000000020FA60 ; Segment permissions: Read/Write
.data.rel.ro:000000000020FA60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020FA60                 assume cs:_data_rel_ro
.data.rel.ro:000000000020FA60                 ;org 20FA60h
.data.rel.ro:000000000020FA60 speeds          dq offset a1000000+6    ; DATA XREF: string_to_baud+3F↑o
.data.rel.ro:000000000020FA60                                         ; display_speed+143↑o ...
.data.rel.ro:000000000020FA60                                         ; "0"
.data.rel.ro:000000000020FA68                 db    0
.data.rel.ro:000000000020FA69                 db    0
.data.rel.ro:000000000020FA6A                 db    0
.data.rel.ro:000000000020FA6B                 db    0
.data.rel.ro:000000000020FA6C                 db    0
.data.rel.ro:000000000020FA6D                 db    0
.data.rel.ro:000000000020FA6E                 db    0
.data.rel.ro:000000000020FA6F                 db    0
.data.rel.ro:000000000020FA70                 db    0
.data.rel.ro:000000000020FA71                 db    0
.data.rel.ro:000000000020FA72                 db    0
.data.rel.ro:000000000020FA73                 db    0
.data.rel.ro:000000000020FA74                 db    0
.data.rel.ro:000000000020FA75                 db    0
.data.rel.ro:000000000020FA76                 db    0
.data.rel.ro:000000000020FA77                 db    0
.data.rel.ro:000000000020FA78 off_20FA78      dq offset a150+1        ; DATA XREF: string_to_baud+10↑o
.data.rel.ro:000000000020FA78                                         ; "50"
.data.rel.ro:000000000020FA80 unk_20FA80      db    1                 ; DATA XREF: display_speed+3A↑o
.data.rel.ro:000000000020FA80                                         ; display_speed+AC↑o ...
.data.rel.ro:000000000020FA81                 db    0
.data.rel.ro:000000000020FA82                 db    0
.data.rel.ro:000000000020FA83                 db    0
.data.rel.ro:000000000020FA84                 db    0
.data.rel.ro:000000000020FA85                 db    0
.data.rel.ro:000000000020FA86                 db    0
.data.rel.ro:000000000020FA87                 db    0
.data.rel.ro:000000000020FA88                 db  32h ; 2
.data.rel.ro:000000000020FA89                 db    0
.data.rel.ro:000000000020FA8A                 db    0
.data.rel.ro:000000000020FA8B                 db    0
.data.rel.ro:000000000020FA8C                 db    0
.data.rel.ro:000000000020FA8D                 db    0
.data.rel.ro:000000000020FA8E                 db    0
.data.rel.ro:000000000020FA8F                 db    0
.data.rel.ro:000000000020FA90                 dq offset a75           ; "75"
.data.rel.ro:000000000020FA98                 db    2
.data.rel.ro:000000000020FA99                 db    0
.data.rel.ro:000000000020FA9A                 db    0
.data.rel.ro:000000000020FA9B                 db    0
.data.rel.ro:000000000020FA9C                 db    0
.data.rel.ro:000000000020FA9D                 db    0
.data.rel.ro:000000000020FA9E                 db    0
.data.rel.ro:000000000020FA9F                 db    0
.data.rel.ro:000000000020FAA0                 db  4Bh ; K
.data.rel.ro:000000000020FAA1                 db    0
.data.rel.ro:000000000020FAA2                 db    0
.data.rel.ro:000000000020FAA3                 db    0
.data.rel.ro:000000000020FAA4                 db    0
.data.rel.ro:000000000020FAA5                 db    0
.data.rel.ro:000000000020FAA6                 db    0
.data.rel.ro:000000000020FAA7                 db    0
.data.rel.ro:000000000020FAA8                 dq offset a110          ; "110"
.data.rel.ro:000000000020FAB0                 db    3
.data.rel.ro:000000000020FAB1                 db    0
.data.rel.ro:000000000020FAB2                 db    0
.data.rel.ro:000000000020FAB3                 db    0
.data.rel.ro:000000000020FAB4                 db    0
.data.rel.ro:000000000020FAB5                 db    0
.data.rel.ro:000000000020FAB6                 db    0
.data.rel.ro:000000000020FAB7                 db    0
.data.rel.ro:000000000020FAB8                 db  6Eh ; n
.data.rel.ro:000000000020FAB9                 db    0
.data.rel.ro:000000000020FABA                 db    0
.data.rel.ro:000000000020FABB                 db    0
.data.rel.ro:000000000020FABC                 db    0
.data.rel.ro:000000000020FABD                 db    0
.data.rel.ro:000000000020FABE                 db    0
.data.rel.ro:000000000020FABF                 db    0
.data.rel.ro:000000000020FAC0                 dq offset a134          ; "134"
.data.rel.ro:000000000020FAC8                 db    4
.data.rel.ro:000000000020FAC9                 db    0
.data.rel.ro:000000000020FACA                 db    0
.data.rel.ro:000000000020FACB                 db    0
.data.rel.ro:000000000020FACC                 db    0
.data.rel.ro:000000000020FACD                 db    0
.data.rel.ro:000000000020FACE                 db    0
.data.rel.ro:000000000020FACF                 db    0
.data.rel.ro:000000000020FAD0                 db  86h
.data.rel.ro:000000000020FAD1                 db    0
.data.rel.ro:000000000020FAD2                 db    0
.data.rel.ro:000000000020FAD3                 db    0
.data.rel.ro:000000000020FAD4                 db    0
.data.rel.ro:000000000020FAD5                 db    0
.data.rel.ro:000000000020FAD6                 db    0
.data.rel.ro:000000000020FAD7                 db    0
.data.rel.ro:000000000020FAD8                 dq offset a1345         ; "134.5"
.data.rel.ro:000000000020FAE0                 db    4
.data.rel.ro:000000000020FAE1                 db    0
.data.rel.ro:000000000020FAE2                 db    0
.data.rel.ro:000000000020FAE3                 db    0
.data.rel.ro:000000000020FAE4                 db    0
.data.rel.ro:000000000020FAE5                 db    0
.data.rel.ro:000000000020FAE6                 db    0
.data.rel.ro:000000000020FAE7                 db    0
.data.rel.ro:000000000020FAE8                 db  86h
.data.rel.ro:000000000020FAE9                 db    0
.data.rel.ro:000000000020FAEA                 db    0
.data.rel.ro:000000000020FAEB                 db    0
.data.rel.ro:000000000020FAEC                 db    0
.data.rel.ro:000000000020FAED                 db    0
.data.rel.ro:000000000020FAEE                 db    0
.data.rel.ro:000000000020FAEF                 db    0
.data.rel.ro:000000000020FAF0                 dq offset a150          ; "150"
.data.rel.ro:000000000020FAF8                 db    5
.data.rel.ro:000000000020FAF9                 db    0
.data.rel.ro:000000000020FAFA                 db    0
.data.rel.ro:000000000020FAFB                 db    0
.data.rel.ro:000000000020FAFC                 db    0
.data.rel.ro:000000000020FAFD                 db    0
.data.rel.ro:000000000020FAFE                 db    0
.data.rel.ro:000000000020FAFF                 db    0
.data.rel.ro:000000000020FB00                 db  96h
.data.rel.ro:000000000020FB01                 db    0
.data.rel.ro:000000000020FB02                 db    0
.data.rel.ro:000000000020FB03                 db    0
.data.rel.ro:000000000020FB04                 db    0
.data.rel.ro:000000000020FB05                 db    0
.data.rel.ro:000000000020FB06                 db    0
.data.rel.ro:000000000020FB07                 db    0
.data.rel.ro:000000000020FB08                 dq offset a1200+1       ; "200"
.data.rel.ro:000000000020FB10                 db    6
.data.rel.ro:000000000020FB11                 db    0
.data.rel.ro:000000000020FB12                 db    0
.data.rel.ro:000000000020FB13                 db    0
.data.rel.ro:000000000020FB14                 db    0
.data.rel.ro:000000000020FB15                 db    0
.data.rel.ro:000000000020FB16                 db    0
.data.rel.ro:000000000020FB17                 db    0
.data.rel.ro:000000000020FB18                 db 0C8h
.data.rel.ro:000000000020FB19                 db    0
.data.rel.ro:000000000020FB1A                 db    0
.data.rel.ro:000000000020FB1B                 db    0
.data.rel.ro:000000000020FB1C                 db    0
.data.rel.ro:000000000020FB1D                 db    0
.data.rel.ro:000000000020FB1E                 db    0
.data.rel.ro:000000000020FB1F                 db    0
.data.rel.ro:000000000020FB20                 dq offset a300          ; "300"
.data.rel.ro:000000000020FB28                 db    7
.data.rel.ro:000000000020FB29                 db    0
.data.rel.ro:000000000020FB2A                 db    0
.data.rel.ro:000000000020FB2B                 db    0
.data.rel.ro:000000000020FB2C                 db    0
.data.rel.ro:000000000020FB2D                 db    0
.data.rel.ro:000000000020FB2E                 db    0
.data.rel.ro:000000000020FB2F                 db    0
.data.rel.ro:000000000020FB30                 db  2Ch ; ,
.data.rel.ro:000000000020FB31                 db    1
.data.rel.ro:000000000020FB32                 db    0
.data.rel.ro:000000000020FB33                 db    0
.data.rel.ro:000000000020FB34                 db    0
.data.rel.ro:000000000020FB35                 db    0
.data.rel.ro:000000000020FB36                 db    0
.data.rel.ro:000000000020FB37                 db    0
.data.rel.ro:000000000020FB38                 dq offset a921600+3     ; "600"
.data.rel.ro:000000000020FB40                 db    8
.data.rel.ro:000000000020FB41                 db    0
.data.rel.ro:000000000020FB42                 db    0
.data.rel.ro:000000000020FB43                 db    0
.data.rel.ro:000000000020FB44                 db    0
.data.rel.ro:000000000020FB45                 db    0
.data.rel.ro:000000000020FB46                 db    0
.data.rel.ro:000000000020FB47                 db    0
.data.rel.ro:000000000020FB48                 db  58h ; X
.data.rel.ro:000000000020FB49                 db    2
.data.rel.ro:000000000020FB4A                 db    0
.data.rel.ro:000000000020FB4B                 db    0
.data.rel.ro:000000000020FB4C                 db    0
.data.rel.ro:000000000020FB4D                 db    0
.data.rel.ro:000000000020FB4E                 db    0
.data.rel.ro:000000000020FB4F                 db    0
.data.rel.ro:000000000020FB50                 dq offset a1200         ; "1200"
.data.rel.ro:000000000020FB58                 db    9
.data.rel.ro:000000000020FB59                 db    0
.data.rel.ro:000000000020FB5A                 db    0
.data.rel.ro:000000000020FB5B                 db    0
.data.rel.ro:000000000020FB5C                 db    0
.data.rel.ro:000000000020FB5D                 db    0
.data.rel.ro:000000000020FB5E                 db    0
.data.rel.ro:000000000020FB5F                 db    0
.data.rel.ro:000000000020FB60                 db 0B0h
.data.rel.ro:000000000020FB61                 db    4
.data.rel.ro:000000000020FB62                 db    0
.data.rel.ro:000000000020FB63                 db    0
.data.rel.ro:000000000020FB64                 db    0
.data.rel.ro:000000000020FB65                 db    0
.data.rel.ro:000000000020FB66                 db    0
.data.rel.ro:000000000020FB67                 db    0
.data.rel.ro:000000000020FB68                 dq offset a1800         ; "1800"
.data.rel.ro:000000000020FB70                 db  0Ah
.data.rel.ro:000000000020FB71                 db    0
.data.rel.ro:000000000020FB72                 db    0
.data.rel.ro:000000000020FB73                 db    0
.data.rel.ro:000000000020FB74                 db    0
.data.rel.ro:000000000020FB75                 db    0
.data.rel.ro:000000000020FB76                 db    0
.data.rel.ro:000000000020FB77                 db    0
.data.rel.ro:000000000020FB78                 db    8
.data.rel.ro:000000000020FB79                 db    7
.data.rel.ro:000000000020FB7A                 db    0
.data.rel.ro:000000000020FB7B                 db    0
.data.rel.ro:000000000020FB7C                 db    0
.data.rel.ro:000000000020FB7D                 db    0
.data.rel.ro:000000000020FB7E                 db    0
.data.rel.ro:000000000020FB7F                 db    0
.data.rel.ro:000000000020FB80                 dq offset a2400         ; "2400"
.data.rel.ro:000000000020FB88                 db  0Bh
.data.rel.ro:000000000020FB89                 db    0
.data.rel.ro:000000000020FB8A                 db    0
.data.rel.ro:000000000020FB8B                 db    0
.data.rel.ro:000000000020FB8C                 db    0
.data.rel.ro:000000000020FB8D                 db    0
.data.rel.ro:000000000020FB8E                 db    0
.data.rel.ro:000000000020FB8F                 db    0
.data.rel.ro:000000000020FB90                 db  60h ; `
.data.rel.ro:000000000020FB91                 db    9
.data.rel.ro:000000000020FB92                 db    0
.data.rel.ro:000000000020FB93                 db    0
.data.rel.ro:000000000020FB94                 db    0
.data.rel.ro:000000000020FB95                 db    0
.data.rel.ro:000000000020FB96                 db    0
.data.rel.ro:000000000020FB97                 db    0
.data.rel.ro:000000000020FB98                 dq offset a4800         ; "4800"
.data.rel.ro:000000000020FBA0                 db  0Ch
.data.rel.ro:000000000020FBA1                 db    0
.data.rel.ro:000000000020FBA2                 db    0
.data.rel.ro:000000000020FBA3                 db    0
.data.rel.ro:000000000020FBA4                 db    0
.data.rel.ro:000000000020FBA5                 db    0
.data.rel.ro:000000000020FBA6                 db    0
.data.rel.ro:000000000020FBA7                 db    0
.data.rel.ro:000000000020FBA8                 db 0C0h
.data.rel.ro:000000000020FBA9                 db  12h
.data.rel.ro:000000000020FBAA                 db    0
.data.rel.ro:000000000020FBAB                 db    0
.data.rel.ro:000000000020FBAC                 db    0
.data.rel.ro:000000000020FBAD                 db    0
.data.rel.ro:000000000020FBAE                 db    0
.data.rel.ro:000000000020FBAF                 db    0
.data.rel.ro:000000000020FBB0                 dq offset a9600         ; "9600"
.data.rel.ro:000000000020FBB8                 db  0Dh
.data.rel.ro:000000000020FBB9                 db    0
.data.rel.ro:000000000020FBBA                 db    0
.data.rel.ro:000000000020FBBB                 db    0
.data.rel.ro:000000000020FBBC                 db    0
.data.rel.ro:000000000020FBBD                 db    0
.data.rel.ro:000000000020FBBE                 db    0
.data.rel.ro:000000000020FBBF                 db    0
.data.rel.ro:000000000020FBC0                 db  80h
.data.rel.ro:000000000020FBC1                 db  25h ; %
.data.rel.ro:000000000020FBC2                 db    0
.data.rel.ro:000000000020FBC3                 db    0
.data.rel.ro:000000000020FBC4                 db    0
.data.rel.ro:000000000020FBC5                 db    0
.data.rel.ro:000000000020FBC6                 db    0
.data.rel.ro:000000000020FBC7                 db    0
.data.rel.ro:000000000020FBC8                 dq offset a19200        ; "19200"
.data.rel.ro:000000000020FBD0                 db  0Eh
.data.rel.ro:000000000020FBD1                 db    0
.data.rel.ro:000000000020FBD2                 db    0
.data.rel.ro:000000000020FBD3                 db    0
.data.rel.ro:000000000020FBD4                 db    0
.data.rel.ro:000000000020FBD5                 db    0
.data.rel.ro:000000000020FBD6                 db    0
.data.rel.ro:000000000020FBD7                 db    0
.data.rel.ro:000000000020FBD8                 db    0
.data.rel.ro:000000000020FBD9                 db  4Bh ; K
.data.rel.ro:000000000020FBDA                 db    0
.data.rel.ro:000000000020FBDB                 db    0
.data.rel.ro:000000000020FBDC                 db    0
.data.rel.ro:000000000020FBDD                 db    0
.data.rel.ro:000000000020FBDE                 db    0
.data.rel.ro:000000000020FBDF                 db    0
.data.rel.ro:000000000020FBE0                 dq offset a38400        ; "38400"
.data.rel.ro:000000000020FBE8                 db  0Fh
.data.rel.ro:000000000020FBE9                 db    0
.data.rel.ro:000000000020FBEA                 db    0
.data.rel.ro:000000000020FBEB                 db    0
.data.rel.ro:000000000020FBEC                 db    0
.data.rel.ro:000000000020FBED                 db    0
.data.rel.ro:000000000020FBEE                 db    0
.data.rel.ro:000000000020FBEF                 db    0
.data.rel.ro:000000000020FBF0                 db    0
.data.rel.ro:000000000020FBF1                 db  96h
.data.rel.ro:000000000020FBF2                 db    0
.data.rel.ro:000000000020FBF3                 db    0
.data.rel.ro:000000000020FBF4                 db    0
.data.rel.ro:000000000020FBF5                 db    0
.data.rel.ro:000000000020FBF6                 db    0
.data.rel.ro:000000000020FBF7                 db    0
.data.rel.ro:000000000020FBF8                 dq offset aExta         ; "exta"
.data.rel.ro:000000000020FC00                 db  0Eh
.data.rel.ro:000000000020FC01                 db    0
.data.rel.ro:000000000020FC02                 db    0
.data.rel.ro:000000000020FC03                 db    0
.data.rel.ro:000000000020FC04                 db    0
.data.rel.ro:000000000020FC05                 db    0
.data.rel.ro:000000000020FC06                 db    0
.data.rel.ro:000000000020FC07                 db    0
.data.rel.ro:000000000020FC08                 db    0
.data.rel.ro:000000000020FC09                 db  4Bh ; K
.data.rel.ro:000000000020FC0A                 db    0
.data.rel.ro:000000000020FC0B                 db    0
.data.rel.ro:000000000020FC0C                 db    0
.data.rel.ro:000000000020FC0D                 db    0
.data.rel.ro:000000000020FC0E                 db    0
.data.rel.ro:000000000020FC0F                 db    0
.data.rel.ro:000000000020FC10                 dq offset aExtb         ; "extb"
.data.rel.ro:000000000020FC18                 db  0Fh
.data.rel.ro:000000000020FC19                 db    0
.data.rel.ro:000000000020FC1A                 db    0
.data.rel.ro:000000000020FC1B                 db    0
.data.rel.ro:000000000020FC1C                 db    0
.data.rel.ro:000000000020FC1D                 db    0
.data.rel.ro:000000000020FC1E                 db    0
.data.rel.ro:000000000020FC1F                 db    0
.data.rel.ro:000000000020FC20                 db    0
.data.rel.ro:000000000020FC21                 db  96h
.data.rel.ro:000000000020FC22                 db    0
.data.rel.ro:000000000020FC23                 db    0
.data.rel.ro:000000000020FC24                 db    0
.data.rel.ro:000000000020FC25                 db    0
.data.rel.ro:000000000020FC26                 db    0
.data.rel.ro:000000000020FC27                 db    0
.data.rel.ro:000000000020FC28                 dq offset a57600        ; "57600"
.data.rel.ro:000000000020FC30                 db    1
.data.rel.ro:000000000020FC31                 db  10h
.data.rel.ro:000000000020FC32                 db    0
.data.rel.ro:000000000020FC33                 db    0
.data.rel.ro:000000000020FC34                 db    0
.data.rel.ro:000000000020FC35                 db    0
.data.rel.ro:000000000020FC36                 db    0
.data.rel.ro:000000000020FC37                 db    0
.data.rel.ro:000000000020FC38                 db    0
.data.rel.ro:000000000020FC39                 db 0E1h
.data.rel.ro:000000000020FC3A                 db    0
.data.rel.ro:000000000020FC3B                 db    0
.data.rel.ro:000000000020FC3C                 db    0
.data.rel.ro:000000000020FC3D                 db    0
.data.rel.ro:000000000020FC3E                 db    0
.data.rel.ro:000000000020FC3F                 db    0
.data.rel.ro:000000000020FC40                 dq offset a115200       ; "115200"
.data.rel.ro:000000000020FC48                 db    2
.data.rel.ro:000000000020FC49                 db  10h
.data.rel.ro:000000000020FC4A                 db    0
.data.rel.ro:000000000020FC4B                 db    0
.data.rel.ro:000000000020FC4C                 db    0
.data.rel.ro:000000000020FC4D                 db    0
.data.rel.ro:000000000020FC4E                 db    0
.data.rel.ro:000000000020FC4F                 db    0
.data.rel.ro:000000000020FC50                 db    0
.data.rel.ro:000000000020FC51                 db 0C2h
.data.rel.ro:000000000020FC52                 db    1
.data.rel.ro:000000000020FC53                 db    0
.data.rel.ro:000000000020FC54                 db    0
.data.rel.ro:000000000020FC55                 db    0
.data.rel.ro:000000000020FC56                 db    0
.data.rel.ro:000000000020FC57                 db    0
.data.rel.ro:000000000020FC58                 dq offset a230400       ; "230400"
.data.rel.ro:000000000020FC60                 db    3
.data.rel.ro:000000000020FC61                 db  10h
.data.rel.ro:000000000020FC62                 db    0
.data.rel.ro:000000000020FC63                 db    0
.data.rel.ro:000000000020FC64                 db    0
.data.rel.ro:000000000020FC65                 db    0
.data.rel.ro:000000000020FC66                 db    0
.data.rel.ro:000000000020FC67                 db    0
.data.rel.ro:000000000020FC68                 db    0
.data.rel.ro:000000000020FC69                 db  84h
.data.rel.ro:000000000020FC6A                 db    3
.data.rel.ro:000000000020FC6B                 db    0
.data.rel.ro:000000000020FC6C                 db    0
.data.rel.ro:000000000020FC6D                 db    0
.data.rel.ro:000000000020FC6E                 db    0
.data.rel.ro:000000000020FC6F                 db    0
.data.rel.ro:000000000020FC70                 dq offset a460800       ; "460800"
.data.rel.ro:000000000020FC78                 db    4
.data.rel.ro:000000000020FC79                 db  10h
.data.rel.ro:000000000020FC7A                 db    0
.data.rel.ro:000000000020FC7B                 db    0
.data.rel.ro:000000000020FC7C                 db    0
.data.rel.ro:000000000020FC7D                 db    0
.data.rel.ro:000000000020FC7E                 db    0
.data.rel.ro:000000000020FC7F                 db    0
.data.rel.ro:000000000020FC80                 db    0
.data.rel.ro:000000000020FC81                 db    8
.data.rel.ro:000000000020FC82                 db    7
.data.rel.ro:000000000020FC83                 db    0
.data.rel.ro:000000000020FC84                 db    0
.data.rel.ro:000000000020FC85                 db    0
.data.rel.ro:000000000020FC86                 db    0
.data.rel.ro:000000000020FC87                 db    0
.data.rel.ro:000000000020FC88                 dq offset a1500000+1    ; "500000"
.data.rel.ro:000000000020FC90                 db    5
.data.rel.ro:000000000020FC91                 db  10h
.data.rel.ro:000000000020FC92                 db    0
.data.rel.ro:000000000020FC93                 db    0
.data.rel.ro:000000000020FC94                 db    0
.data.rel.ro:000000000020FC95                 db    0
.data.rel.ro:000000000020FC96                 db    0
.data.rel.ro:000000000020FC97                 db    0
.data.rel.ro:000000000020FC98                 db  20h
.data.rel.ro:000000000020FC99                 db 0A1h
.data.rel.ro:000000000020FC9A                 db    7
.data.rel.ro:000000000020FC9B                 db    0
.data.rel.ro:000000000020FC9C                 db    0
.data.rel.ro:000000000020FC9D                 db    0
.data.rel.ro:000000000020FC9E                 db    0
.data.rel.ro:000000000020FC9F                 db    0
.data.rel.ro:000000000020FCA0                 dq offset a576000       ; "576000"
.data.rel.ro:000000000020FCA8                 db    6
.data.rel.ro:000000000020FCA9                 db  10h
.data.rel.ro:000000000020FCAA                 db    0
.data.rel.ro:000000000020FCAB                 db    0
.data.rel.ro:000000000020FCAC                 db    0
.data.rel.ro:000000000020FCAD                 db    0
.data.rel.ro:000000000020FCAE                 db    0
.data.rel.ro:000000000020FCAF                 db    0
.data.rel.ro:000000000020FCB0                 db    0
.data.rel.ro:000000000020FCB1                 db 0CAh
.data.rel.ro:000000000020FCB2                 db    8
.data.rel.ro:000000000020FCB3                 db    0
.data.rel.ro:000000000020FCB4                 db    0
.data.rel.ro:000000000020FCB5                 db    0
.data.rel.ro:000000000020FCB6                 db    0
.data.rel.ro:000000000020FCB7                 db    0
.data.rel.ro:000000000020FCB8                 dq offset a921600       ; "921600"
.data.rel.ro:000000000020FCC0                 db    7
.data.rel.ro:000000000020FCC1                 db  10h
.data.rel.ro:000000000020FCC2                 db    0
.data.rel.ro:000000000020FCC3                 db    0
.data.rel.ro:000000000020FCC4                 db    0
.data.rel.ro:000000000020FCC5                 db    0
.data.rel.ro:000000000020FCC6                 db    0
.data.rel.ro:000000000020FCC7                 db    0
.data.rel.ro:000000000020FCC8                 db    0
.data.rel.ro:000000000020FCC9                 db  10h
.data.rel.ro:000000000020FCCA                 db  0Eh
.data.rel.ro:000000000020FCCB                 db    0
.data.rel.ro:000000000020FCCC                 db    0
.data.rel.ro:000000000020FCCD                 db    0
.data.rel.ro:000000000020FCCE                 db    0
.data.rel.ro:000000000020FCCF                 db    0
.data.rel.ro:000000000020FCD0                 dq offset a1000000      ; "1000000"
.data.rel.ro:000000000020FCD8                 db    8
.data.rel.ro:000000000020FCD9                 db  10h
.data.rel.ro:000000000020FCDA                 db    0
.data.rel.ro:000000000020FCDB                 db    0
.data.rel.ro:000000000020FCDC                 db    0
.data.rel.ro:000000000020FCDD                 db    0
.data.rel.ro:000000000020FCDE                 db    0
.data.rel.ro:000000000020FCDF                 db    0
.data.rel.ro:000000000020FCE0                 db  40h ; @
.data.rel.ro:000000000020FCE1                 db  42h ; B
.data.rel.ro:000000000020FCE2                 db  0Fh
.data.rel.ro:000000000020FCE3                 db    0
.data.rel.ro:000000000020FCE4                 db    0
.data.rel.ro:000000000020FCE5                 db    0
.data.rel.ro:000000000020FCE6                 db    0
.data.rel.ro:000000000020FCE7                 db    0
.data.rel.ro:000000000020FCE8                 dq offset a1152000      ; "1152000"
.data.rel.ro:000000000020FCF0                 db    9
.data.rel.ro:000000000020FCF1                 db  10h
.data.rel.ro:000000000020FCF2                 db    0
.data.rel.ro:000000000020FCF3                 db    0
.data.rel.ro:000000000020FCF4                 db    0
.data.rel.ro:000000000020FCF5                 db    0
.data.rel.ro:000000000020FCF6                 db    0
.data.rel.ro:000000000020FCF7                 db    0
.data.rel.ro:000000000020FCF8                 db    0
.data.rel.ro:000000000020FCF9                 db  94h
.data.rel.ro:000000000020FCFA                 db  11h
.data.rel.ro:000000000020FCFB                 db    0
.data.rel.ro:000000000020FCFC                 db    0
.data.rel.ro:000000000020FCFD                 db    0
.data.rel.ro:000000000020FCFE                 db    0
.data.rel.ro:000000000020FCFF                 db    0
.data.rel.ro:000000000020FD00                 dq offset a1500000      ; "1500000"
.data.rel.ro:000000000020FD08                 db  0Ah
.data.rel.ro:000000000020FD09                 db  10h
.data.rel.ro:000000000020FD0A                 db    0
.data.rel.ro:000000000020FD0B                 db    0
.data.rel.ro:000000000020FD0C                 db    0
.data.rel.ro:000000000020FD0D                 db    0
.data.rel.ro:000000000020FD0E                 db    0
.data.rel.ro:000000000020FD0F                 db    0
.data.rel.ro:000000000020FD10                 db  60h ; `
.data.rel.ro:000000000020FD11                 db 0E3h
.data.rel.ro:000000000020FD12                 db  16h
.data.rel.ro:000000000020FD13                 db    0
.data.rel.ro:000000000020FD14                 db    0
.data.rel.ro:000000000020FD15                 db    0
.data.rel.ro:000000000020FD16                 db    0
.data.rel.ro:000000000020FD17                 db    0
.data.rel.ro:000000000020FD18                 dq offset a2000000      ; "2000000"
.data.rel.ro:000000000020FD20                 db  0Bh
.data.rel.ro:000000000020FD21                 db  10h
.data.rel.ro:000000000020FD22                 db    0
.data.rel.ro:000000000020FD23                 db    0
.data.rel.ro:000000000020FD24                 db    0
.data.rel.ro:000000000020FD25                 db    0
.data.rel.ro:000000000020FD26                 db    0
.data.rel.ro:000000000020FD27                 db    0
.data.rel.ro:000000000020FD28                 db  80h
.data.rel.ro:000000000020FD29                 db  84h
.data.rel.ro:000000000020FD2A                 db  1Eh
.data.rel.ro:000000000020FD2B                 db    0
.data.rel.ro:000000000020FD2C                 db    0
.data.rel.ro:000000000020FD2D                 db    0
.data.rel.ro:000000000020FD2E                 db    0
.data.rel.ro:000000000020FD2F                 db    0
.data.rel.ro:000000000020FD30                 dq offset a2500000      ; "2500000"
.data.rel.ro:000000000020FD38                 db  0Ch
.data.rel.ro:000000000020FD39                 db  10h
.data.rel.ro:000000000020FD3A                 db    0
.data.rel.ro:000000000020FD3B                 db    0
.data.rel.ro:000000000020FD3C                 db    0
.data.rel.ro:000000000020FD3D                 db    0
.data.rel.ro:000000000020FD3E                 db    0
.data.rel.ro:000000000020FD3F                 db    0
.data.rel.ro:000000000020FD40                 db 0A0h
.data.rel.ro:000000000020FD41                 db  25h ; %
.data.rel.ro:000000000020FD42                 db  26h ; &
.data.rel.ro:000000000020FD43                 db    0
.data.rel.ro:000000000020FD44                 db    0
.data.rel.ro:000000000020FD45                 db    0
.data.rel.ro:000000000020FD46                 db    0
.data.rel.ro:000000000020FD47                 db    0
.data.rel.ro:000000000020FD48                 dq offset a3000000      ; "3000000"
.data.rel.ro:000000000020FD50                 db  0Dh
.data.rel.ro:000000000020FD51                 db  10h
.data.rel.ro:000000000020FD52                 db    0
.data.rel.ro:000000000020FD53                 db    0
.data.rel.ro:000000000020FD54                 db    0
.data.rel.ro:000000000020FD55                 db    0
.data.rel.ro:000000000020FD56                 db    0
.data.rel.ro:000000000020FD57                 db    0
.data.rel.ro:000000000020FD58                 db 0C0h
.data.rel.ro:000000000020FD59                 db 0C6h
.data.rel.ro:000000000020FD5A                 db  2Dh ; -
.data.rel.ro:000000000020FD5B                 db    0
.data.rel.ro:000000000020FD5C                 db    0
.data.rel.ro:000000000020FD5D                 db    0
.data.rel.ro:000000000020FD5E                 db    0
.data.rel.ro:000000000020FD5F                 db    0
.data.rel.ro:000000000020FD60                 dq offset a3500000      ; "3500000"
.data.rel.ro:000000000020FD68                 db  0Eh
.data.rel.ro:000000000020FD69                 db  10h
.data.rel.ro:000000000020FD6A                 db    0
.data.rel.ro:000000000020FD6B                 db    0
.data.rel.ro:000000000020FD6C                 db    0
.data.rel.ro:000000000020FD6D                 db    0
.data.rel.ro:000000000020FD6E                 db    0
.data.rel.ro:000000000020FD6F                 db    0
.data.rel.ro:000000000020FD70                 db 0E0h
.data.rel.ro:000000000020FD71                 db  67h ; g
.data.rel.ro:000000000020FD72                 db  35h ; 5
.data.rel.ro:000000000020FD73                 db    0
.data.rel.ro:000000000020FD74                 db    0
.data.rel.ro:000000000020FD75                 db    0
.data.rel.ro:000000000020FD76                 db    0
.data.rel.ro:000000000020FD77                 db    0
.data.rel.ro:000000000020FD78                 dq offset a4000000      ; "4000000"
.data.rel.ro:000000000020FD80                 db  0Fh
.data.rel.ro:000000000020FD81                 db  10h
.data.rel.ro:000000000020FD82                 db    0
.data.rel.ro:000000000020FD83                 db    0
.data.rel.ro:000000000020FD84                 db    0
.data.rel.ro:000000000020FD85                 db    0
.data.rel.ro:000000000020FD86                 db    0
.data.rel.ro:000000000020FD87                 db    0
.data.rel.ro:000000000020FD88                 db    0
.data.rel.ro:000000000020FD89                 db    9
.data.rel.ro:000000000020FD8A                 db  3Dh ; =
.data.rel.ro:000000000020FD8B                 db    0
.data.rel.ro:000000000020FD8C                 db    0
.data.rel.ro:000000000020FD8D                 db    0
.data.rel.ro:000000000020FD8E                 db    0
.data.rel.ro:000000000020FD8F                 db    0
.data.rel.ro:000000000020FD90                 db    0
.data.rel.ro:000000000020FD91                 db    0
.data.rel.ro:000000000020FD92                 db    0
.data.rel.ro:000000000020FD93                 db    0
.data.rel.ro:000000000020FD94                 db    0
.data.rel.ro:000000000020FD95                 db    0
.data.rel.ro:000000000020FD96                 db    0
.data.rel.ro:000000000020FD97                 db    0
.data.rel.ro:000000000020FD98                 db    0
.data.rel.ro:000000000020FD99                 db    0
.data.rel.ro:000000000020FD9A                 db    0
.data.rel.ro:000000000020FD9B                 db    0
.data.rel.ro:000000000020FD9C                 db    0
.data.rel.ro:000000000020FD9D                 db    0
.data.rel.ro:000000000020FD9E                 db    0
.data.rel.ro:000000000020FD9F                 db    0
.data.rel.ro:000000000020FDA0                 db    0
.data.rel.ro:000000000020FDA1                 db    0
.data.rel.ro:000000000020FDA2                 db    0
.data.rel.ro:000000000020FDA3                 db    0
.data.rel.ro:000000000020FDA4                 db    0
.data.rel.ro:000000000020FDA5                 db    0
.data.rel.ro:000000000020FDA6                 db    0
.data.rel.ro:000000000020FDA7                 db    0
.data.rel.ro:000000000020FDA8                 db    0
.data.rel.ro:000000000020FDA9                 db    0
.data.rel.ro:000000000020FDAA                 db    0
.data.rel.ro:000000000020FDAB                 db    0
.data.rel.ro:000000000020FDAC                 db    0
.data.rel.ro:000000000020FDAD                 db    0
.data.rel.ro:000000000020FDAE                 db    0
.data.rel.ro:000000000020FDAF                 db    0
.data.rel.ro:000000000020FDB0                 db    0
.data.rel.ro:000000000020FDB1                 db    0
.data.rel.ro:000000000020FDB2                 db    0
.data.rel.ro:000000000020FDB3                 db    0
.data.rel.ro:000000000020FDB4                 db    0
.data.rel.ro:000000000020FDB5                 db    0
.data.rel.ro:000000000020FDB6                 db    0
.data.rel.ro:000000000020FDB7                 db    0
.data.rel.ro:000000000020FDB8                 db    0
.data.rel.ro:000000000020FDB9                 db    0
.data.rel.ro:000000000020FDBA                 db    0
.data.rel.ro:000000000020FDBB                 db    0
.data.rel.ro:000000000020FDBC                 db    0
.data.rel.ro:000000000020FDBD                 db    0
.data.rel.ro:000000000020FDBE                 db    0
.data.rel.ro:000000000020FDBF                 db    0
.data.rel.ro:000000000020FDC0 ; struct option longopts
.data.rel.ro:000000000020FDC0 longopts        dq offset aAll          ; name
.data.rel.ro:000000000020FDC0                                         ; DATA XREF: main+9E↑o
.data.rel.ro:000000000020FDC0                 dd 0                    ; has_arg ; "all"
.data.rel.ro:000000000020FDC0                 db 4 dup(0)
.data.rel.ro:000000000020FDC0                 dq 0                    ; flag
.data.rel.ro:000000000020FDC0                 dd 61h                  ; val
.data.rel.ro:000000000020FDC0                 db 4 dup(0)
.data.rel.ro:000000000020FDE0                 dq offset aSave         ; "save"
.data.rel.ro:000000000020FDE8                 db    0
.data.rel.ro:000000000020FDE9                 db    0
.data.rel.ro:000000000020FDEA                 db    0
.data.rel.ro:000000000020FDEB                 db    0
.data.rel.ro:000000000020FDEC                 db    0
.data.rel.ro:000000000020FDED                 db    0
.data.rel.ro:000000000020FDEE                 db    0
.data.rel.ro:000000000020FDEF                 db    0
.data.rel.ro:000000000020FDF0                 db    0
.data.rel.ro:000000000020FDF1                 db    0
.data.rel.ro:000000000020FDF2                 db    0
.data.rel.ro:000000000020FDF3                 db    0
.data.rel.ro:000000000020FDF4                 db    0
.data.rel.ro:000000000020FDF5                 db    0
.data.rel.ro:000000000020FDF6                 db    0
.data.rel.ro:000000000020FDF7                 db    0
.data.rel.ro:000000000020FDF8                 db  67h ; g
.data.rel.ro:000000000020FDF9                 db    0
.data.rel.ro:000000000020FDFA                 db    0
.data.rel.ro:000000000020FDFB                 db    0
.data.rel.ro:000000000020FDFC                 db    0
.data.rel.ro:000000000020FDFD                 db    0
.data.rel.ro:000000000020FDFE                 db    0
.data.rel.ro:000000000020FDFF                 db    0
.data.rel.ro:000000000020FE00                 dq offset aFile         ; "file"
.data.rel.ro:000000000020FE08                 db    1
.data.rel.ro:000000000020FE09                 db    0
.data.rel.ro:000000000020FE0A                 db    0
.data.rel.ro:000000000020FE0B                 db    0
.data.rel.ro:000000000020FE0C                 db    0
.data.rel.ro:000000000020FE0D                 db    0
.data.rel.ro:000000000020FE0E                 db    0
.data.rel.ro:000000000020FE0F                 db    0
.data.rel.ro:000000000020FE10                 db    0
.data.rel.ro:000000000020FE11                 db    0
.data.rel.ro:000000000020FE12                 db    0
.data.rel.ro:000000000020FE13                 db    0
.data.rel.ro:000000000020FE14                 db    0
.data.rel.ro:000000000020FE15                 db    0
.data.rel.ro:000000000020FE16                 db    0
.data.rel.ro:000000000020FE17                 db    0
.data.rel.ro:000000000020FE18                 db  46h ; F
.data.rel.ro:000000000020FE19                 db    0
.data.rel.ro:000000000020FE1A                 db    0
.data.rel.ro:000000000020FE1B                 db    0
.data.rel.ro:000000000020FE1C                 db    0
.data.rel.ro:000000000020FE1D                 db    0
.data.rel.ro:000000000020FE1E                 db    0
.data.rel.ro:000000000020FE1F                 db    0
.data.rel.ro:000000000020FE20                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020FE28                 db    0
.data.rel.ro:000000000020FE29                 db    0
.data.rel.ro:000000000020FE2A                 db    0
.data.rel.ro:000000000020FE2B                 db    0
.data.rel.ro:000000000020FE2C                 db    0
.data.rel.ro:000000000020FE2D                 db    0
.data.rel.ro:000000000020FE2E                 db    0
.data.rel.ro:000000000020FE2F                 db    0
.data.rel.ro:000000000020FE30                 db    0
.data.rel.ro:000000000020FE31                 db    0
.data.rel.ro:000000000020FE32                 db    0
.data.rel.ro:000000000020FE33                 db    0
.data.rel.ro:000000000020FE34                 db    0
.data.rel.ro:000000000020FE35                 db    0
.data.rel.ro:000000000020FE36                 db    0
.data.rel.ro:000000000020FE37                 db    0
.data.rel.ro:000000000020FE38                 db  7Eh ; ~
.data.rel.ro:000000000020FE39                 db 0FFh
.data.rel.ro:000000000020FE3A                 db 0FFh
.data.rel.ro:000000000020FE3B                 db 0FFh
.data.rel.ro:000000000020FE3C                 db    0
.data.rel.ro:000000000020FE3D                 db    0
.data.rel.ro:000000000020FE3E                 db    0
.data.rel.ro:000000000020FE3F                 db    0
.data.rel.ro:000000000020FE40                 dq offset unk_B715
.data.rel.ro:000000000020FE48                 db    0
.data.rel.ro:000000000020FE49                 db    0
.data.rel.ro:000000000020FE4A                 db    0
.data.rel.ro:000000000020FE4B                 db    0
.data.rel.ro:000000000020FE4C                 db    0
.data.rel.ro:000000000020FE4D                 db    0
.data.rel.ro:000000000020FE4E                 db    0
.data.rel.ro:000000000020FE4F                 db    0
.data.rel.ro:000000000020FE50                 db    0
.data.rel.ro:000000000020FE51                 db    0
.data.rel.ro:000000000020FE52                 db    0
.data.rel.ro:000000000020FE53                 db    0
.data.rel.ro:000000000020FE54                 db    0
.data.rel.ro:000000000020FE55                 db    0
.data.rel.ro:000000000020FE56                 db    0
.data.rel.ro:000000000020FE57                 db    0
.data.rel.ro:000000000020FE58                 db  7Dh ; }
.data.rel.ro:000000000020FE59                 db 0FFh
.data.rel.ro:000000000020FE5A                 db 0FFh
.data.rel.ro:000000000020FE5B                 db 0FFh
.data.rel.ro:000000000020FE5C                 db    0
.data.rel.ro:000000000020FE5D                 db    0
.data.rel.ro:000000000020FE5E                 db    0
.data.rel.ro:000000000020FE5F                 db    0
.data.rel.ro:000000000020FE60                 db    0
.data.rel.ro:000000000020FE61                 db    0
.data.rel.ro:000000000020FE62                 db    0
.data.rel.ro:000000000020FE63                 db    0
.data.rel.ro:000000000020FE64                 db    0
.data.rel.ro:000000000020FE65                 db    0
.data.rel.ro:000000000020FE66                 db    0
.data.rel.ro:000000000020FE67                 db    0
.data.rel.ro:000000000020FE68                 db    0
.data.rel.ro:000000000020FE69                 db    0
.data.rel.ro:000000000020FE6A                 db    0
.data.rel.ro:000000000020FE6B                 db    0
.data.rel.ro:000000000020FE6C                 db    0
.data.rel.ro:000000000020FE6D                 db    0
.data.rel.ro:000000000020FE6E                 db    0
.data.rel.ro:000000000020FE6F                 db    0
.data.rel.ro:000000000020FE70                 db    0
.data.rel.ro:000000000020FE71                 db    0
.data.rel.ro:000000000020FE72                 db    0
.data.rel.ro:000000000020FE73                 db    0
.data.rel.ro:000000000020FE74                 db    0
.data.rel.ro:000000000020FE75                 db    0
.data.rel.ro:000000000020FE76                 db    0
.data.rel.ro:000000000020FE77                 db    0
.data.rel.ro:000000000020FE78                 db    0
.data.rel.ro:000000000020FE79                 db    0
.data.rel.ro:000000000020FE7A                 db    0
.data.rel.ro:000000000020FE7B                 db    0
.data.rel.ro:000000000020FE7C                 db    0
.data.rel.ro:000000000020FE7D                 db    0
.data.rel.ro:000000000020FE7E                 db    0
.data.rel.ro:000000000020FE7F                 db    0
.data.rel.ro:000000000020FE80 control_info    dq offset aIntr         ; DATA XREF: main+41E↑o
.data.rel.ro:000000000020FE80                                         ; main+798↑o ...
.data.rel.ro:000000000020FE80                                         ; "intr"
.data.rel.ro:000000000020FE88                 db    3
.data.rel.ro:000000000020FE89                 db    0
.data.rel.ro:000000000020FE8A                 db    0
.data.rel.ro:000000000020FE8B                 db    0
.data.rel.ro:000000000020FE8C                 db    0
.data.rel.ro:000000000020FE8D                 db    0
.data.rel.ro:000000000020FE8E                 db    0
.data.rel.ro:000000000020FE8F                 db    0
.data.rel.ro:000000000020FE90                 db    0
.data.rel.ro:000000000020FE91                 db    0
.data.rel.ro:000000000020FE92                 db    0
.data.rel.ro:000000000020FE93                 db    0
.data.rel.ro:000000000020FE94                 db    0
.data.rel.ro:000000000020FE95                 db    0
.data.rel.ro:000000000020FE96                 db    0
.data.rel.ro:000000000020FE97                 db    0
.data.rel.ro:000000000020FE98 off_20FE98      dq offset aQuit         ; DATA XREF: apply_settings+1D2↑o
.data.rel.ro:000000000020FE98                                         ; "quit"
.data.rel.ro:000000000020FEA0                 db  1Ch
.data.rel.ro:000000000020FEA1                 db    0
.data.rel.ro:000000000020FEA2                 db    0
.data.rel.ro:000000000020FEA3                 db    0
.data.rel.ro:000000000020FEA4                 db    0
.data.rel.ro:000000000020FEA5                 db    0
.data.rel.ro:000000000020FEA6                 db    0
.data.rel.ro:000000000020FEA7                 db    0
.data.rel.ro:000000000020FEA8                 db    1
.data.rel.ro:000000000020FEA9                 db    0
.data.rel.ro:000000000020FEAA                 db    0
.data.rel.ro:000000000020FEAB                 db    0
.data.rel.ro:000000000020FEAC                 db    0
.data.rel.ro:000000000020FEAD                 db    0
.data.rel.ro:000000000020FEAE                 db    0
.data.rel.ro:000000000020FEAF                 db    0
.data.rel.ro:000000000020FEB0                 dq offset aCrterase+3   ; "erase"
.data.rel.ro:000000000020FEB8                 db  7Fh ; 
.data.rel.ro:000000000020FEB9                 db    0
.data.rel.ro:000000000020FEBA                 db    0
.data.rel.ro:000000000020FEBB                 db    0
.data.rel.ro:000000000020FEBC                 db    0
.data.rel.ro:000000000020FEBD                 db    0
.data.rel.ro:000000000020FEBE                 db    0
.data.rel.ro:000000000020FEBF                 db    0
.data.rel.ro:000000000020FEC0                 db    2
.data.rel.ro:000000000020FEC1                 db    0
.data.rel.ro:000000000020FEC2                 db    0
.data.rel.ro:000000000020FEC3                 db    0
.data.rel.ro:000000000020FEC4                 db    0
.data.rel.ro:000000000020FEC5                 db    0
.data.rel.ro:000000000020FEC6                 db    0
.data.rel.ro:000000000020FEC7                 db    0
.data.rel.ro:000000000020FEC8                 dq offset aCrtkill+3    ; "kill"
.data.rel.ro:000000000020FED0                 db  15h
.data.rel.ro:000000000020FED1                 db    0
.data.rel.ro:000000000020FED2                 db    0
.data.rel.ro:000000000020FED3                 db    0
.data.rel.ro:000000000020FED4                 db    0
.data.rel.ro:000000000020FED5                 db    0
.data.rel.ro:000000000020FED6                 db    0
.data.rel.ro:000000000020FED7                 db    0
.data.rel.ro:000000000020FED8                 db    3
.data.rel.ro:000000000020FED9                 db    0
.data.rel.ro:000000000020FEDA                 db    0
.data.rel.ro:000000000020FEDB                 db    0
.data.rel.ro:000000000020FEDC                 db    0
.data.rel.ro:000000000020FEDD                 db    0
.data.rel.ro:000000000020FEDE                 db    0
.data.rel.ro:000000000020FEDF                 db    0
.data.rel.ro:000000000020FEE0                 dq offset aEof          ; "eof"
.data.rel.ro:000000000020FEE8                 db    4
.data.rel.ro:000000000020FEE9                 db    0
.data.rel.ro:000000000020FEEA                 db    0
.data.rel.ro:000000000020FEEB                 db    0
.data.rel.ro:000000000020FEEC                 db    0
.data.rel.ro:000000000020FEED                 db    0
.data.rel.ro:000000000020FEEE                 db    0
.data.rel.ro:000000000020FEEF                 db    0
.data.rel.ro:000000000020FEF0                 db    4
.data.rel.ro:000000000020FEF1                 db    0
.data.rel.ro:000000000020FEF2                 db    0
.data.rel.ro:000000000020FEF3                 db    0
.data.rel.ro:000000000020FEF4                 db    0
.data.rel.ro:000000000020FEF5                 db    0
.data.rel.ro:000000000020FEF6                 db    0
.data.rel.ro:000000000020FEF7                 db    0
.data.rel.ro:000000000020FEF8                 dq offset aEol          ; "eol"
.data.rel.ro:000000000020FF00                 db    0
.data.rel.ro:000000000020FF01                 db    0
.data.rel.ro:000000000020FF02                 db    0
.data.rel.ro:000000000020FF03                 db    0
.data.rel.ro:000000000020FF04                 db    0
.data.rel.ro:000000000020FF05                 db    0
.data.rel.ro:000000000020FF06                 db    0
.data.rel.ro:000000000020FF07                 db    0
.data.rel.ro:000000000020FF08                 db  0Bh
.data.rel.ro:000000000020FF09                 db    0
.data.rel.ro:000000000020FF0A                 db    0
.data.rel.ro:000000000020FF0B                 db    0
.data.rel.ro:000000000020FF0C                 db    0
.data.rel.ro:000000000020FF0D                 db    0
.data.rel.ro:000000000020FF0E                 db    0
.data.rel.ro:000000000020FF0F                 db    0
.data.rel.ro:000000000020FF10                 dq offset aEol2         ; "eol2"
.data.rel.ro:000000000020FF18                 align 20h
.data.rel.ro:000000000020FF20                 db  10h
.data.rel.ro:000000000020FF21                 db    0
.data.rel.ro:000000000020FF22                 db    0
.data.rel.ro:000000000020FF23                 db    0
.data.rel.ro:000000000020FF24                 db    0
.data.rel.ro:000000000020FF25                 db    0
.data.rel.ro:000000000020FF26                 db    0
.data.rel.ro:000000000020FF27                 db    0
.data.rel.ro:000000000020FF28                 dq offset aSwtch        ; "swtch"
.data.rel.ro:000000000020FF30                 db    0
.data.rel.ro:000000000020FF31                 db    0
.data.rel.ro:000000000020FF32                 db    0
.data.rel.ro:000000000020FF33                 db    0
.data.rel.ro:000000000020FF34                 db    0
.data.rel.ro:000000000020FF35                 db    0
.data.rel.ro:000000000020FF36                 db    0
.data.rel.ro:000000000020FF37                 db    0
.data.rel.ro:000000000020FF38                 db    7
.data.rel.ro:000000000020FF39                 db    0
.data.rel.ro:000000000020FF3A                 db    0
.data.rel.ro:000000000020FF3B                 db    0
.data.rel.ro:000000000020FF3C                 db    0
.data.rel.ro:000000000020FF3D                 db    0
.data.rel.ro:000000000020FF3E                 db    0
.data.rel.ro:000000000020FF3F                 db    0
.data.rel.ro:000000000020FF40                 dq offset aStart        ; "start"
.data.rel.ro:000000000020FF48                 db  11h
.data.rel.ro:000000000020FF49                 db    0
.data.rel.ro:000000000020FF4A                 db    0
.data.rel.ro:000000000020FF4B                 db    0
.data.rel.ro:000000000020FF4C                 db    0
.data.rel.ro:000000000020FF4D                 db    0
.data.rel.ro:000000000020FF4E                 db    0
.data.rel.ro:000000000020FF4F                 db    0
.data.rel.ro:000000000020FF50                 db    8
.data.rel.ro:000000000020FF51                 db    0
.data.rel.ro:000000000020FF52                 db    0
.data.rel.ro:000000000020FF53                 db    0
.data.rel.ro:000000000020FF54                 db    0
.data.rel.ro:000000000020FF55                 db    0
.data.rel.ro:000000000020FF56                 db    0
.data.rel.ro:000000000020FF57                 db    0
.data.rel.ro:000000000020FF58                 dq offset aTostop+2     ; "stop"
.data.rel.ro:000000000020FF60                 db  13h
.data.rel.ro:000000000020FF61                 db    0
.data.rel.ro:000000000020FF62                 db    0
.data.rel.ro:000000000020FF63                 db    0
.data.rel.ro:000000000020FF64                 db    0
.data.rel.ro:000000000020FF65                 db    0
.data.rel.ro:000000000020FF66                 db    0
.data.rel.ro:000000000020FF67                 db    0
.data.rel.ro:000000000020FF68                 db    9
.data.rel.ro:000000000020FF69                 db    0
.data.rel.ro:000000000020FF6A                 db    0
.data.rel.ro:000000000020FF6B                 db    0
.data.rel.ro:000000000020FF6C                 db    0
.data.rel.ro:000000000020FF6D                 db    0
.data.rel.ro:000000000020FF6E                 db    0
.data.rel.ro:000000000020FF6F                 db    0
.data.rel.ro:000000000020FF70                 dq offset aSusp         ; "susp"
.data.rel.ro:000000000020FF78                 db  1Ah
.data.rel.ro:000000000020FF79                 db    0
.data.rel.ro:000000000020FF7A                 db    0
.data.rel.ro:000000000020FF7B                 db    0
.data.rel.ro:000000000020FF7C                 db    0
.data.rel.ro:000000000020FF7D                 db    0
.data.rel.ro:000000000020FF7E                 db    0
.data.rel.ro:000000000020FF7F                 db    0
.data.rel.ro:000000000020FF80                 db  0Ah
.data.rel.ro:000000000020FF81                 db    0
.data.rel.ro:000000000020FF82                 db    0
.data.rel.ro:000000000020FF83                 db    0
.data.rel.ro:000000000020FF84                 db    0
.data.rel.ro:000000000020FF85                 db    0
.data.rel.ro:000000000020FF86                 db    0
.data.rel.ro:000000000020FF87                 db    0
.data.rel.ro:000000000020FF88                 dq offset aEraseKillWeras+15h ; "rprnt"
.data.rel.ro:000000000020FF90                 db  12h
.data.rel.ro:000000000020FF91                 db    0
.data.rel.ro:000000000020FF92                 db    0
.data.rel.ro:000000000020FF93                 db    0
.data.rel.ro:000000000020FF94                 db    0
.data.rel.ro:000000000020FF95                 db    0
.data.rel.ro:000000000020FF96                 db    0
.data.rel.ro:000000000020FF97                 db    0
.data.rel.ro:000000000020FF98                 db  0Ch
.data.rel.ro:000000000020FF99                 db    0
.data.rel.ro:000000000020FF9A                 db    0
.data.rel.ro:000000000020FF9B                 db    0
.data.rel.ro:000000000020FF9C                 db    0
.data.rel.ro:000000000020FF9D                 db    0
.data.rel.ro:000000000020FF9E                 db    0
.data.rel.ro:000000000020FF9F                 db    0
.data.rel.ro:000000000020FFA0                 dq offset aWerase       ; "werase"
.data.rel.ro:000000000020FFA8                 db  17h
.data.rel.ro:000000000020FFA9                 db    0
.data.rel.ro:000000000020FFAA                 db    0
.data.rel.ro:000000000020FFAB                 db    0
.data.rel.ro:000000000020FFAC                 db    0
.data.rel.ro:000000000020FFAD                 db    0
.data.rel.ro:000000000020FFAE                 db    0
.data.rel.ro:000000000020FFAF                 db    0
.data.rel.ro:000000000020FFB0                 db  0Eh
.data.rel.ro:000000000020FFB1                 db    0
.data.rel.ro:000000000020FFB2                 db    0
.data.rel.ro:000000000020FFB3                 db    0
.data.rel.ro:000000000020FFB4                 db    0
.data.rel.ro:000000000020FFB5                 db    0
.data.rel.ro:000000000020FFB6                 db    0
.data.rel.ro:000000000020FFB7                 db    0
.data.rel.ro:000000000020FFB8                 dq offset aLnext        ; "lnext"
.data.rel.ro:000000000020FFC0                 db  16h
.data.rel.ro:000000000020FFC1                 db    0
.data.rel.ro:000000000020FFC2                 db    0
.data.rel.ro:000000000020FFC3                 db    0
.data.rel.ro:000000000020FFC4                 db    0
.data.rel.ro:000000000020FFC5                 db    0
.data.rel.ro:000000000020FFC6                 db    0
.data.rel.ro:000000000020FFC7                 db    0
.data.rel.ro:000000000020FFC8                 db  0Fh
.data.rel.ro:000000000020FFC9                 db    0
.data.rel.ro:000000000020FFCA                 db    0
.data.rel.ro:000000000020FFCB                 db    0
.data.rel.ro:000000000020FFCC                 db    0
.data.rel.ro:000000000020FFCD                 db    0
.data.rel.ro:000000000020FFCE                 db    0
.data.rel.ro:000000000020FFCF                 db    0
.data.rel.ro:000000000020FFD0                 dq offset s2            ; "flush"
.data.rel.ro:000000000020FFD8                 db  0Fh
.data.rel.ro:000000000020FFD9                 db    0
.data.rel.ro:000000000020FFDA                 db    0
.data.rel.ro:000000000020FFDB                 db    0
.data.rel.ro:000000000020FFDC                 db    0
.data.rel.ro:000000000020FFDD                 db    0
.data.rel.ro:000000000020FFDE                 db    0
.data.rel.ro:000000000020FFDF                 db    0
.data.rel.ro:000000000020FFE0                 db  0Dh
.data.rel.ro:000000000020FFE1                 db    0
.data.rel.ro:000000000020FFE2                 db    0
.data.rel.ro:000000000020FFE3                 db    0
.data.rel.ro:000000000020FFE4                 db    0
.data.rel.ro:000000000020FFE5                 db    0
.data.rel.ro:000000000020FFE6                 db    0
.data.rel.ro:000000000020FFE7                 db    0
.data.rel.ro:000000000020FFE8                 dq offset aDiscard      ; "discard"
.data.rel.ro:000000000020FFF0                 db  0Fh
.data.rel.ro:000000000020FFF1                 db    0
.data.rel.ro:000000000020FFF2                 db    0
.data.rel.ro:000000000020FFF3                 db    0
.data.rel.ro:000000000020FFF4                 db    0
.data.rel.ro:000000000020FFF5                 db    0
.data.rel.ro:000000000020FFF6                 db    0
.data.rel.ro:000000000020FFF7                 db    0
.data.rel.ro:000000000020FFF8                 db  0Dh
.data.rel.ro:000000000020FFF9                 db    0
.data.rel.ro:000000000020FFFA                 db    0
.data.rel.ro:000000000020FFFB                 db    0
.data.rel.ro:000000000020FFFC                 db    0
.data.rel.ro:000000000020FFFD                 db    0
.data.rel.ro:000000000020FFFE                 db    0
.data.rel.ro:000000000020FFFF                 db    0
.data.rel.ro:0000000000210000                 dq offset aMin          ; "min"
.data.rel.ro:0000000000210008                 db    1
.data.rel.ro:0000000000210009                 db    0
.data.rel.ro:000000000021000A                 db    0
.data.rel.ro:000000000021000B                 db    0
.data.rel.ro:000000000021000C                 db    0
.data.rel.ro:000000000021000D                 db    0
.data.rel.ro:000000000021000E                 db    0
.data.rel.ro:000000000021000F                 db    0
.data.rel.ro:0000000000210010                 db    6
.data.rel.ro:0000000000210011                 db    0
.data.rel.ro:0000000000210012                 db    0
.data.rel.ro:0000000000210013                 db    0
.data.rel.ro:0000000000210014                 db    0
.data.rel.ro:0000000000210015                 db    0
.data.rel.ro:0000000000210016                 db    0
.data.rel.ro:0000000000210017                 db    0
.data.rel.ro:0000000000210018                 dq offset aTime         ; "time"
.data.rel.ro:0000000000210020                 db    0
.data.rel.ro:0000000000210021                 db    0
.data.rel.ro:0000000000210022                 db    0
.data.rel.ro:0000000000210023                 db    0
.data.rel.ro:0000000000210024                 db    0
.data.rel.ro:0000000000210025                 db    0
.data.rel.ro:0000000000210026                 db    0
.data.rel.ro:0000000000210027                 db    0
.data.rel.ro:0000000000210028                 db    5
.data.rel.ro:0000000000210029                 db    0
.data.rel.ro:000000000021002A                 db    0
.data.rel.ro:000000000021002B                 db    0
.data.rel.ro:000000000021002C                 db    0
.data.rel.ro:000000000021002D                 db    0
.data.rel.ro:000000000021002E                 db    0
.data.rel.ro:000000000021002F                 db    0
.data.rel.ro:0000000000210030                 db    0
.data.rel.ro:0000000000210031                 db    0
.data.rel.ro:0000000000210032                 db    0
.data.rel.ro:0000000000210033                 db    0
.data.rel.ro:0000000000210034                 db    0
.data.rel.ro:0000000000210035                 db    0
.data.rel.ro:0000000000210036                 db    0
.data.rel.ro:0000000000210037                 db    0
.data.rel.ro:0000000000210038                 db    0
.data.rel.ro:0000000000210039                 db    0
.data.rel.ro:000000000021003A                 db    0
.data.rel.ro:000000000021003B                 db    0
.data.rel.ro:000000000021003C                 db    0
.data.rel.ro:000000000021003D                 db    0
.data.rel.ro:000000000021003E                 db    0
.data.rel.ro:000000000021003F                 db    0
.data.rel.ro:0000000000210040                 db    0
.data.rel.ro:0000000000210041                 db    0
.data.rel.ro:0000000000210042                 db    0
.data.rel.ro:0000000000210043                 db    0
.data.rel.ro:0000000000210044                 db    0
.data.rel.ro:0000000000210045                 db    0
.data.rel.ro:0000000000210046                 db    0
.data.rel.ro:0000000000210047                 db    0
.data.rel.ro:0000000000210048                 db    0
.data.rel.ro:0000000000210049                 db    0
.data.rel.ro:000000000021004A                 db    0
.data.rel.ro:000000000021004B                 db    0
.data.rel.ro:000000000021004C                 db    0
.data.rel.ro:000000000021004D                 db    0
.data.rel.ro:000000000021004E                 db    0
.data.rel.ro:000000000021004F                 db    0
.data.rel.ro:0000000000210050                 db    0
.data.rel.ro:0000000000210051                 db    0
.data.rel.ro:0000000000210052                 db    0
.data.rel.ro:0000000000210053                 db    0
.data.rel.ro:0000000000210054                 db    0
.data.rel.ro:0000000000210055                 db    0
.data.rel.ro:0000000000210056                 db    0
.data.rel.ro:0000000000210057                 db    0
.data.rel.ro:0000000000210058                 db    0
.data.rel.ro:0000000000210059                 db    0
.data.rel.ro:000000000021005A                 db    0
.data.rel.ro:000000000021005B                 db    0
.data.rel.ro:000000000021005C                 db    0
.data.rel.ro:000000000021005D                 db    0
.data.rel.ro:000000000021005E                 db    0
.data.rel.ro:000000000021005F                 db    0
.data.rel.ro:0000000000210060 mode_info       dq offset s1            ; DATA XREF: main+4D4↑o
.data.rel.ro:0000000000210060                                         ; main+85C↑o ...
.data.rel.ro:0000000000210060                                         ; "parenb"
.data.rel.ro:0000000000210068                 db    0
.data.rel.ro:0000000000210069                 db    0
.data.rel.ro:000000000021006A                 db    0
.data.rel.ro:000000000021006B                 db    0
.data.rel.ro:000000000021006C                 db    4
.data.rel.ro:000000000021006D                 db    0
.data.rel.ro:000000000021006E                 db    0
.data.rel.ro:000000000021006F                 db    0
.data.rel.ro:0000000000210070                 db    0
.data.rel.ro:0000000000210071                 db    1
.data.rel.ro:0000000000210072                 db    0
.data.rel.ro:0000000000210073                 db    0
.data.rel.ro:0000000000210074                 db    0
.data.rel.ro:0000000000210075                 db    0
.data.rel.ro:0000000000210076                 db    0
.data.rel.ro:0000000000210077                 db    0
.data.rel.ro:0000000000210078                 db    0
.data.rel.ro:0000000000210079                 db    0
.data.rel.ro:000000000021007A                 db    0
.data.rel.ro:000000000021007B                 db    0
.data.rel.ro:000000000021007C                 db    0
.data.rel.ro:000000000021007D                 db    0
.data.rel.ro:000000000021007E                 db    0
.data.rel.ro:000000000021007F                 db    0
.data.rel.ro:0000000000210080                 dq offset aParodd       ; "parodd"
.data.rel.ro:0000000000210088                 db    0
.data.rel.ro:0000000000210089                 db    0
.data.rel.ro:000000000021008A                 db    0
.data.rel.ro:000000000021008B                 db    0
.data.rel.ro:000000000021008C                 db    4
.data.rel.ro:000000000021008D                 db    0
.data.rel.ro:000000000021008E                 db    0
.data.rel.ro:000000000021008F                 db    0
.data.rel.ro:0000000000210090                 db    0
.data.rel.ro:0000000000210091                 db    2
.data.rel.ro:0000000000210092                 db    0
.data.rel.ro:0000000000210093                 db    0
.data.rel.ro:0000000000210094                 db    0
.data.rel.ro:0000000000210095                 db    0
.data.rel.ro:0000000000210096                 db    0
.data.rel.ro:0000000000210097                 db    0
.data.rel.ro:0000000000210098                 db    0
.data.rel.ro:0000000000210099                 db    0
.data.rel.ro:000000000021009A                 db    0
.data.rel.ro:000000000021009B                 db    0
.data.rel.ro:000000000021009C                 db    0
.data.rel.ro:000000000021009D                 db    0
.data.rel.ro:000000000021009E                 db    0
.data.rel.ro:000000000021009F                 db    0
.data.rel.ro:00000000002100A0                 dq offset aCmspar       ; "cmspar"
.data.rel.ro:00000000002100A8                 db    0
.data.rel.ro:00000000002100A9                 db    0
.data.rel.ro:00000000002100AA                 db    0
.data.rel.ro:00000000002100AB                 db    0
.data.rel.ro:00000000002100AC                 db    4
.data.rel.ro:00000000002100AD                 db    0
.data.rel.ro:00000000002100AE                 db    0
.data.rel.ro:00000000002100AF                 db    0
.data.rel.ro:00000000002100B0                 db    0
.data.rel.ro:00000000002100B1                 db    0
.data.rel.ro:00000000002100B2                 db    0
.data.rel.ro:00000000002100B3                 db  40h ; @
.data.rel.ro:00000000002100B4                 db    0
.data.rel.ro:00000000002100B5                 db    0
.data.rel.ro:00000000002100B6                 db    0
.data.rel.ro:00000000002100B7                 db    0
.data.rel.ro:00000000002100B8                 db    0
.data.rel.ro:00000000002100B9                 db    0
.data.rel.ro:00000000002100BA                 db    0
.data.rel.ro:00000000002100BB                 db    0
.data.rel.ro:00000000002100BC                 db    0
.data.rel.ro:00000000002100BD                 db    0
.data.rel.ro:00000000002100BE                 db    0
.data.rel.ro:00000000002100BF                 db    0
.data.rel.ro:00000000002100C0                 dq offset aCs5          ; "cs5"
.data.rel.ro:00000000002100C8                 db    0
.data.rel.ro:00000000002100C9                 db    0
.data.rel.ro:00000000002100CA                 db    0
.data.rel.ro:00000000002100CB                 db    0
.data.rel.ro:00000000002100CC                 db    0
.data.rel.ro:00000000002100CD                 db    0
.data.rel.ro:00000000002100CE                 db    0
.data.rel.ro:00000000002100CF                 db    0
.data.rel.ro:00000000002100D0                 db    0
.data.rel.ro:00000000002100D1                 db    0
.data.rel.ro:00000000002100D2                 db    0
.data.rel.ro:00000000002100D3                 db    0
.data.rel.ro:00000000002100D4                 db    0
.data.rel.ro:00000000002100D5                 db    0
.data.rel.ro:00000000002100D6                 db    0
.data.rel.ro:00000000002100D7                 db    0
.data.rel.ro:00000000002100D8                 db  30h ; 0
.data.rel.ro:00000000002100D9                 db    0
.data.rel.ro:00000000002100DA                 db    0
.data.rel.ro:00000000002100DB                 db    0
.data.rel.ro:00000000002100DC                 db    0
.data.rel.ro:00000000002100DD                 db    0
.data.rel.ro:00000000002100DE                 db    0
.data.rel.ro:00000000002100DF                 db    0
.data.rel.ro:00000000002100E0                 dq offset aCs6          ; "cs6"
.data.rel.ro:00000000002100E8                 align 10h
.data.rel.ro:00000000002100F0                 db  10h
.data.rel.ro:00000000002100F1                 db    0
.data.rel.ro:00000000002100F2                 db    0
.data.rel.ro:00000000002100F3                 db    0
.data.rel.ro:00000000002100F4                 db    0
.data.rel.ro:00000000002100F5                 db    0
.data.rel.ro:00000000002100F6                 db    0
.data.rel.ro:00000000002100F7                 db    0
.data.rel.ro:00000000002100F8                 db  30h ; 0
.data.rel.ro:00000000002100F9                 db    0
.data.rel.ro:00000000002100FA                 db    0
.data.rel.ro:00000000002100FB                 db    0
.data.rel.ro:00000000002100FC                 db    0
.data.rel.ro:00000000002100FD                 db    0
.data.rel.ro:00000000002100FE                 db    0
.data.rel.ro:00000000002100FF                 db    0
.data.rel.ro:0000000000210100                 dq offset aCs7          ; "cs7"
.data.rel.ro:0000000000210108                 align 10h
.data.rel.ro:0000000000210110                 db  20h
.data.rel.ro:0000000000210111                 db    0
.data.rel.ro:0000000000210112                 db    0
.data.rel.ro:0000000000210113                 db    0
.data.rel.ro:0000000000210114                 db    0
.data.rel.ro:0000000000210115                 db    0
.data.rel.ro:0000000000210116                 db    0
.data.rel.ro:0000000000210117                 db    0
.data.rel.ro:0000000000210118                 db  30h ; 0
.data.rel.ro:0000000000210119                 db    0
.data.rel.ro:000000000021011A                 db    0
.data.rel.ro:000000000021011B                 db    0
.data.rel.ro:000000000021011C                 db    0
.data.rel.ro:000000000021011D                 db    0
.data.rel.ro:000000000021011E                 db    0
.data.rel.ro:000000000021011F                 db    0
.data.rel.ro:0000000000210120                 dq offset aCs8          ; "cs8"
.data.rel.ro:0000000000210128                 align 10h
.data.rel.ro:0000000000210130                 db  30h ; 0
.data.rel.ro:0000000000210131                 db    0
.data.rel.ro:0000000000210132                 db    0
.data.rel.ro:0000000000210133                 db    0
.data.rel.ro:0000000000210134                 db    0
.data.rel.ro:0000000000210135                 db    0
.data.rel.ro:0000000000210136                 db    0
.data.rel.ro:0000000000210137                 db    0
.data.rel.ro:0000000000210138                 db  30h ; 0
.data.rel.ro:0000000000210139                 db    0
.data.rel.ro:000000000021013A                 db    0
.data.rel.ro:000000000021013B                 db    0
.data.rel.ro:000000000021013C                 db    0
.data.rel.ro:000000000021013D                 db    0
.data.rel.ro:000000000021013E                 db    0
.data.rel.ro:000000000021013F                 db    0
.data.rel.ro:0000000000210140                 dq offset aHupcl        ; "hupcl"
.data.rel.ro:0000000000210148                 db    0
.data.rel.ro:0000000000210149                 db    0
.data.rel.ro:000000000021014A                 db    0
.data.rel.ro:000000000021014B                 db    0
.data.rel.ro:000000000021014C                 db    4
.data.rel.ro:000000000021014D                 db    0
.data.rel.ro:000000000021014E                 db    0
.data.rel.ro:000000000021014F                 db    0
.data.rel.ro:0000000000210150                 db    0
.data.rel.ro:0000000000210151                 db    4
.data.rel.ro:0000000000210152                 db    0
.data.rel.ro:0000000000210153                 db    0
.data.rel.ro:0000000000210154                 db    0
.data.rel.ro:0000000000210155                 db    0
.data.rel.ro:0000000000210156                 db    0
.data.rel.ro:0000000000210157                 db    0
.data.rel.ro:0000000000210158                 db    0
.data.rel.ro:0000000000210159                 db    0
.data.rel.ro:000000000021015A                 db    0
.data.rel.ro:000000000021015B                 db    0
.data.rel.ro:000000000021015C                 db    0
.data.rel.ro:000000000021015D                 db    0
.data.rel.ro:000000000021015E                 db    0
.data.rel.ro:000000000021015F                 db    0
.data.rel.ro:0000000000210160                 dq offset aHup          ; "hup"
.data.rel.ro:0000000000210168                 db    0
.data.rel.ro:0000000000210169                 db    0
.data.rel.ro:000000000021016A                 db    0
.data.rel.ro:000000000021016B                 db    0
.data.rel.ro:000000000021016C                 db  0Ch
.data.rel.ro:000000000021016D                 db    0
.data.rel.ro:000000000021016E                 db    0
.data.rel.ro:000000000021016F                 db    0
.data.rel.ro:0000000000210170                 db    0
.data.rel.ro:0000000000210171                 db    4
.data.rel.ro:0000000000210172                 db    0
.data.rel.ro:0000000000210173                 db    0
.data.rel.ro:0000000000210174                 db    0
.data.rel.ro:0000000000210175                 db    0
.data.rel.ro:0000000000210176                 db    0
.data.rel.ro:0000000000210177                 db    0
.data.rel.ro:0000000000210178                 db    0
.data.rel.ro:0000000000210179                 db    0
.data.rel.ro:000000000021017A                 db    0
.data.rel.ro:000000000021017B                 db    0
.data.rel.ro:000000000021017C                 db    0
.data.rel.ro:000000000021017D                 db    0
.data.rel.ro:000000000021017E                 db    0
.data.rel.ro:000000000021017F                 db    0
.data.rel.ro:0000000000210180                 dq offset aCstopb       ; "cstopb"
.data.rel.ro:0000000000210188                 db    0
.data.rel.ro:0000000000210189                 db    0
.data.rel.ro:000000000021018A                 db    0
.data.rel.ro:000000000021018B                 db    0
.data.rel.ro:000000000021018C                 db    4
.data.rel.ro:000000000021018D                 db    0
.data.rel.ro:000000000021018E                 db    0
.data.rel.ro:000000000021018F                 db    0
.data.rel.ro:0000000000210190                 db  40h ; @
.data.rel.ro:0000000000210191                 db    0
.data.rel.ro:0000000000210192                 db    0
.data.rel.ro:0000000000210193                 db    0
.data.rel.ro:0000000000210194                 db    0
.data.rel.ro:0000000000210195                 db    0
.data.rel.ro:0000000000210196                 db    0
.data.rel.ro:0000000000210197                 db    0
.data.rel.ro:0000000000210198                 db    0
.data.rel.ro:0000000000210199                 db    0
.data.rel.ro:000000000021019A                 db    0
.data.rel.ro:000000000021019B                 db    0
.data.rel.ro:000000000021019C                 db    0
.data.rel.ro:000000000021019D                 db    0
.data.rel.ro:000000000021019E                 db    0
.data.rel.ro:000000000021019F                 db    0
.data.rel.ro:00000000002101A0                 dq offset aCread        ; "cread"
.data.rel.ro:00000000002101A8                 db    0
.data.rel.ro:00000000002101A9                 db    0
.data.rel.ro:00000000002101AA                 db    0
.data.rel.ro:00000000002101AB                 db    0
.data.rel.ro:00000000002101AC                 db    5
.data.rel.ro:00000000002101AD                 db    0
.data.rel.ro:00000000002101AE                 db    0
.data.rel.ro:00000000002101AF                 db    0
.data.rel.ro:00000000002101B0                 db  80h
.data.rel.ro:00000000002101B1                 db    0
.data.rel.ro:00000000002101B2                 db    0
.data.rel.ro:00000000002101B3                 db    0
.data.rel.ro:00000000002101B4                 db    0
.data.rel.ro:00000000002101B5                 db    0
.data.rel.ro:00000000002101B6                 db    0
.data.rel.ro:00000000002101B7                 db    0
.data.rel.ro:00000000002101B8                 db    0
.data.rel.ro:00000000002101B9                 db    0
.data.rel.ro:00000000002101BA                 db    0
.data.rel.ro:00000000002101BB                 db    0
.data.rel.ro:00000000002101BC                 db    0
.data.rel.ro:00000000002101BD                 db    0
.data.rel.ro:00000000002101BE                 db    0
.data.rel.ro:00000000002101BF                 db    0
.data.rel.ro:00000000002101C0                 dq offset aClocal       ; "clocal"
.data.rel.ro:00000000002101C8                 db    0
.data.rel.ro:00000000002101C9                 db    0
.data.rel.ro:00000000002101CA                 db    0
.data.rel.ro:00000000002101CB                 db    0
.data.rel.ro:00000000002101CC                 db    4
.data.rel.ro:00000000002101CD                 db    0
.data.rel.ro:00000000002101CE                 db    0
.data.rel.ro:00000000002101CF                 db    0
.data.rel.ro:00000000002101D0                 db    0
.data.rel.ro:00000000002101D1                 db    8
.data.rel.ro:00000000002101D2                 db    0
.data.rel.ro:00000000002101D3                 db    0
.data.rel.ro:00000000002101D4                 db    0
.data.rel.ro:00000000002101D5                 db    0
.data.rel.ro:00000000002101D6                 db    0
.data.rel.ro:00000000002101D7                 db    0
.data.rel.ro:00000000002101D8                 db    0
.data.rel.ro:00000000002101D9                 db    0
.data.rel.ro:00000000002101DA                 db    0
.data.rel.ro:00000000002101DB                 db    0
.data.rel.ro:00000000002101DC                 db    0
.data.rel.ro:00000000002101DD                 db    0
.data.rel.ro:00000000002101DE                 db    0
.data.rel.ro:00000000002101DF                 db    0
.data.rel.ro:00000000002101E0                 dq offset aCrtscts      ; "crtscts"
.data.rel.ro:00000000002101E8                 db    0
.data.rel.ro:00000000002101E9                 db    0
.data.rel.ro:00000000002101EA                 db    0
.data.rel.ro:00000000002101EB                 db    0
.data.rel.ro:00000000002101EC                 db    4
.data.rel.ro:00000000002101ED                 db    0
.data.rel.ro:00000000002101EE                 db    0
.data.rel.ro:00000000002101EF                 db    0
.data.rel.ro:00000000002101F0                 db    0
.data.rel.ro:00000000002101F1                 db    0
.data.rel.ro:00000000002101F2                 db    0
.data.rel.ro:00000000002101F3                 db  80h
.data.rel.ro:00000000002101F4                 db    0
.data.rel.ro:00000000002101F5                 db    0
.data.rel.ro:00000000002101F6                 db    0
.data.rel.ro:00000000002101F7                 db    0
.data.rel.ro:00000000002101F8                 db    0
.data.rel.ro:00000000002101F9                 db    0
.data.rel.ro:00000000002101FA                 db    0
.data.rel.ro:00000000002101FB                 db    0
.data.rel.ro:00000000002101FC                 db    0
.data.rel.ro:00000000002101FD                 db    0
.data.rel.ro:00000000002101FE                 db    0
.data.rel.ro:00000000002101FF                 db    0
.data.rel.ro:0000000000210200                 dq offset aIgnbrk       ; "ignbrk"
.data.rel.ro:0000000000210208                 db    1
.data.rel.ro:0000000000210209                 db    0
.data.rel.ro:000000000021020A                 db    0
.data.rel.ro:000000000021020B                 db    0
.data.rel.ro:000000000021020C                 db    6
.data.rel.ro:000000000021020D                 db    0
.data.rel.ro:000000000021020E                 db    0
.data.rel.ro:000000000021020F                 db    0
.data.rel.ro:0000000000210210                 db    1
.data.rel.ro:0000000000210211                 db    0
.data.rel.ro:0000000000210212                 db    0
.data.rel.ro:0000000000210213                 db    0
.data.rel.ro:0000000000210214                 db    0
.data.rel.ro:0000000000210215                 db    0
.data.rel.ro:0000000000210216                 db    0
.data.rel.ro:0000000000210217                 db    0
.data.rel.ro:0000000000210218                 db    0
.data.rel.ro:0000000000210219                 db    0
.data.rel.ro:000000000021021A                 db    0
.data.rel.ro:000000000021021B                 db    0
.data.rel.ro:000000000021021C                 db    0
.data.rel.ro:000000000021021D                 db    0
.data.rel.ro:000000000021021E                 db    0
.data.rel.ro:000000000021021F                 db    0
.data.rel.ro:0000000000210220                 dq offset aBrkint       ; "brkint"
.data.rel.ro:0000000000210228                 db    1
.data.rel.ro:0000000000210229                 db    0
.data.rel.ro:000000000021022A                 db    0
.data.rel.ro:000000000021022B                 db    0
.data.rel.ro:000000000021022C                 db    5
.data.rel.ro:000000000021022D                 db    0
.data.rel.ro:000000000021022E                 db    0
.data.rel.ro:000000000021022F                 db    0
.data.rel.ro:0000000000210230                 db    2
.data.rel.ro:0000000000210231                 db    0
.data.rel.ro:0000000000210232                 db    0
.data.rel.ro:0000000000210233                 db    0
.data.rel.ro:0000000000210234                 db    0
.data.rel.ro:0000000000210235                 db    0
.data.rel.ro:0000000000210236                 db    0
.data.rel.ro:0000000000210237                 db    0
.data.rel.ro:0000000000210238                 db    0
.data.rel.ro:0000000000210239                 db    0
.data.rel.ro:000000000021023A                 db    0
.data.rel.ro:000000000021023B                 db    0
.data.rel.ro:000000000021023C                 db    0
.data.rel.ro:000000000021023D                 db    0
.data.rel.ro:000000000021023E                 db    0
.data.rel.ro:000000000021023F                 db    0
.data.rel.ro:0000000000210240                 dq offset aIgnpar       ; "ignpar"
.data.rel.ro:0000000000210248                 db    1
.data.rel.ro:0000000000210249                 db    0
.data.rel.ro:000000000021024A                 db    0
.data.rel.ro:000000000021024B                 db    0
.data.rel.ro:000000000021024C                 db    4
.data.rel.ro:000000000021024D                 db    0
.data.rel.ro:000000000021024E                 db    0
.data.rel.ro:000000000021024F                 db    0
.data.rel.ro:0000000000210250                 db    4
.data.rel.ro:0000000000210251                 db    0
.data.rel.ro:0000000000210252                 db    0
.data.rel.ro:0000000000210253                 db    0
.data.rel.ro:0000000000210254                 db    0
.data.rel.ro:0000000000210255                 db    0
.data.rel.ro:0000000000210256                 db    0
.data.rel.ro:0000000000210257                 db    0
.data.rel.ro:0000000000210258                 db    0
.data.rel.ro:0000000000210259                 db    0
.data.rel.ro:000000000021025A                 db    0
.data.rel.ro:000000000021025B                 db    0
.data.rel.ro:000000000021025C                 db    0
.data.rel.ro:000000000021025D                 db    0
.data.rel.ro:000000000021025E                 db    0
.data.rel.ro:000000000021025F                 db    0
.data.rel.ro:0000000000210260                 dq offset aParmrk       ; "parmrk"
.data.rel.ro:0000000000210268                 db    1
.data.rel.ro:0000000000210269                 db    0
.data.rel.ro:000000000021026A                 db    0
.data.rel.ro:000000000021026B                 db    0
.data.rel.ro:000000000021026C                 db    4
.data.rel.ro:000000000021026D                 db    0
.data.rel.ro:000000000021026E                 db    0
.data.rel.ro:000000000021026F                 db    0
.data.rel.ro:0000000000210270                 db    8
.data.rel.ro:0000000000210271                 db    0
.data.rel.ro:0000000000210272                 db    0
.data.rel.ro:0000000000210273                 db    0
.data.rel.ro:0000000000210274                 db    0
.data.rel.ro:0000000000210275                 db    0
.data.rel.ro:0000000000210276                 db    0
.data.rel.ro:0000000000210277                 db    0
.data.rel.ro:0000000000210278                 db    0
.data.rel.ro:0000000000210279                 db    0
.data.rel.ro:000000000021027A                 db    0
.data.rel.ro:000000000021027B                 db    0
.data.rel.ro:000000000021027C                 db    0
.data.rel.ro:000000000021027D                 db    0
.data.rel.ro:000000000021027E                 db    0
.data.rel.ro:000000000021027F                 db    0
.data.rel.ro:0000000000210280                 dq offset aInpck        ; "inpck"
.data.rel.ro:0000000000210288                 db    1
.data.rel.ro:0000000000210289                 db    0
.data.rel.ro:000000000021028A                 db    0
.data.rel.ro:000000000021028B                 db    0
.data.rel.ro:000000000021028C                 db    4
.data.rel.ro:000000000021028D                 db    0
.data.rel.ro:000000000021028E                 db    0
.data.rel.ro:000000000021028F                 db    0
.data.rel.ro:0000000000210290                 db  10h
.data.rel.ro:0000000000210291                 db    0
.data.rel.ro:0000000000210292                 db    0
.data.rel.ro:0000000000210293                 db    0
.data.rel.ro:0000000000210294                 db    0
.data.rel.ro:0000000000210295                 db    0
.data.rel.ro:0000000000210296                 db    0
.data.rel.ro:0000000000210297                 db    0
.data.rel.ro:0000000000210298                 db    0
.data.rel.ro:0000000000210299                 db    0
.data.rel.ro:000000000021029A                 db    0
.data.rel.ro:000000000021029B                 db    0
.data.rel.ro:000000000021029C                 db    0
.data.rel.ro:000000000021029D                 db    0
.data.rel.ro:000000000021029E                 db    0
.data.rel.ro:000000000021029F                 db    0
.data.rel.ro:00000000002102A0                 dq offset aIstrip       ; "istrip"
.data.rel.ro:00000000002102A8                 db    1
.data.rel.ro:00000000002102A9                 db    0
.data.rel.ro:00000000002102AA                 db    0
.data.rel.ro:00000000002102AB                 db    0
.data.rel.ro:00000000002102AC                 db    4
.data.rel.ro:00000000002102AD                 db    0
.data.rel.ro:00000000002102AE                 db    0
.data.rel.ro:00000000002102AF                 db    0
.data.rel.ro:00000000002102B0                 db  20h
.data.rel.ro:00000000002102B1                 db    0
.data.rel.ro:00000000002102B2                 db    0
.data.rel.ro:00000000002102B3                 db    0
.data.rel.ro:00000000002102B4                 db    0
.data.rel.ro:00000000002102B5                 db    0
.data.rel.ro:00000000002102B6                 db    0
.data.rel.ro:00000000002102B7                 db    0
.data.rel.ro:00000000002102B8                 db    0
.data.rel.ro:00000000002102B9                 db    0
.data.rel.ro:00000000002102BA                 db    0
.data.rel.ro:00000000002102BB                 db    0
.data.rel.ro:00000000002102BC                 db    0
.data.rel.ro:00000000002102BD                 db    0
.data.rel.ro:00000000002102BE                 db    0
.data.rel.ro:00000000002102BF                 db    0
.data.rel.ro:00000000002102C0                 dq offset aInlcr        ; "inlcr"
.data.rel.ro:00000000002102C8                 db    1
.data.rel.ro:00000000002102C9                 db    0
.data.rel.ro:00000000002102CA                 db    0
.data.rel.ro:00000000002102CB                 db    0
.data.rel.ro:00000000002102CC                 db    6
.data.rel.ro:00000000002102CD                 db    0
.data.rel.ro:00000000002102CE                 db    0
.data.rel.ro:00000000002102CF                 db    0
.data.rel.ro:00000000002102D0                 db  40h ; @
.data.rel.ro:00000000002102D1                 db    0
.data.rel.ro:00000000002102D2                 db    0
.data.rel.ro:00000000002102D3                 db    0
.data.rel.ro:00000000002102D4                 db    0
.data.rel.ro:00000000002102D5                 db    0
.data.rel.ro:00000000002102D6                 db    0
.data.rel.ro:00000000002102D7                 db    0
.data.rel.ro:00000000002102D8                 db    0
.data.rel.ro:00000000002102D9                 db    0
.data.rel.ro:00000000002102DA                 db    0
.data.rel.ro:00000000002102DB                 db    0
.data.rel.ro:00000000002102DC                 db    0
.data.rel.ro:00000000002102DD                 db    0
.data.rel.ro:00000000002102DE                 db    0
.data.rel.ro:00000000002102DF                 db    0
.data.rel.ro:00000000002102E0                 dq offset aIgncr        ; "igncr"
.data.rel.ro:00000000002102E8                 db    1
.data.rel.ro:00000000002102E9                 db    0
.data.rel.ro:00000000002102EA                 db    0
.data.rel.ro:00000000002102EB                 db    0
.data.rel.ro:00000000002102EC                 db    6
.data.rel.ro:00000000002102ED                 db    0
.data.rel.ro:00000000002102EE                 db    0
.data.rel.ro:00000000002102EF                 db    0
.data.rel.ro:00000000002102F0                 db  80h
.data.rel.ro:00000000002102F1                 db    0
.data.rel.ro:00000000002102F2                 db    0
.data.rel.ro:00000000002102F3                 db    0
.data.rel.ro:00000000002102F4                 db    0
.data.rel.ro:00000000002102F5                 db    0
.data.rel.ro:00000000002102F6                 db    0
.data.rel.ro:00000000002102F7                 db    0
.data.rel.ro:00000000002102F8                 db    0
.data.rel.ro:00000000002102F9                 db    0
.data.rel.ro:00000000002102FA                 db    0
.data.rel.ro:00000000002102FB                 db    0
.data.rel.ro:00000000002102FC                 db    0
.data.rel.ro:00000000002102FD                 db    0
.data.rel.ro:00000000002102FE                 db    0
.data.rel.ro:00000000002102FF                 db    0
.data.rel.ro:0000000000210300                 dq offset aIcrnl        ; "icrnl"
.data.rel.ro:0000000000210308                 db    1
.data.rel.ro:0000000000210309                 db    0
.data.rel.ro:000000000021030A                 db    0
.data.rel.ro:000000000021030B                 db    0
.data.rel.ro:000000000021030C                 db    5
.data.rel.ro:000000000021030D                 db    0
.data.rel.ro:000000000021030E                 db    0
.data.rel.ro:000000000021030F                 db    0
.data.rel.ro:0000000000210310                 db    0
.data.rel.ro:0000000000210311                 db    1
.data.rel.ro:0000000000210312                 db    0
.data.rel.ro:0000000000210313                 db    0
.data.rel.ro:0000000000210314                 db    0
.data.rel.ro:0000000000210315                 db    0
.data.rel.ro:0000000000210316                 db    0
.data.rel.ro:0000000000210317                 db    0
.data.rel.ro:0000000000210318                 db    0
.data.rel.ro:0000000000210319                 db    0
.data.rel.ro:000000000021031A                 db    0
.data.rel.ro:000000000021031B                 db    0
.data.rel.ro:000000000021031C                 db    0
.data.rel.ro:000000000021031D                 db    0
.data.rel.ro:000000000021031E                 db    0
.data.rel.ro:000000000021031F                 db    0
.data.rel.ro:0000000000210320                 dq offset aIxon         ; "ixon"
.data.rel.ro:0000000000210328                 db    1
.data.rel.ro:0000000000210329                 db    0
.data.rel.ro:000000000021032A                 db    0
.data.rel.ro:000000000021032B                 db    0
.data.rel.ro:000000000021032C                 db    4
.data.rel.ro:000000000021032D                 db    0
.data.rel.ro:000000000021032E                 db    0
.data.rel.ro:000000000021032F                 db    0
.data.rel.ro:0000000000210330                 db    0
.data.rel.ro:0000000000210331                 db    4
.data.rel.ro:0000000000210332                 db    0
.data.rel.ro:0000000000210333                 db    0
.data.rel.ro:0000000000210334                 db    0
.data.rel.ro:0000000000210335                 db    0
.data.rel.ro:0000000000210336                 db    0
.data.rel.ro:0000000000210337                 db    0
.data.rel.ro:0000000000210338                 db    0
.data.rel.ro:0000000000210339                 db    0
.data.rel.ro:000000000021033A                 db    0
.data.rel.ro:000000000021033B                 db    0
.data.rel.ro:000000000021033C                 db    0
.data.rel.ro:000000000021033D                 db    0
.data.rel.ro:000000000021033E                 db    0
.data.rel.ro:000000000021033F                 db    0
.data.rel.ro:0000000000210340                 dq offset unk_B7D9
.data.rel.ro:0000000000210348                 db    1
.data.rel.ro:0000000000210349                 db    0
.data.rel.ro:000000000021034A                 db    0
.data.rel.ro:000000000021034B                 db    0
.data.rel.ro:000000000021034C                 db    6
.data.rel.ro:000000000021034D                 db    0
.data.rel.ro:000000000021034E                 db    0
.data.rel.ro:000000000021034F                 db    0
.data.rel.ro:0000000000210350                 db    0
.data.rel.ro:0000000000210351                 db  10h
.data.rel.ro:0000000000210352                 db    0
.data.rel.ro:0000000000210353                 db    0
.data.rel.ro:0000000000210354                 db    0
.data.rel.ro:0000000000210355                 db    0
.data.rel.ro:0000000000210356                 db    0
.data.rel.ro:0000000000210357                 db    0
.data.rel.ro:0000000000210358                 db    0
.data.rel.ro:0000000000210359                 db    0
.data.rel.ro:000000000021035A                 db    0
.data.rel.ro:000000000021035B                 db    0
.data.rel.ro:000000000021035C                 db    0
.data.rel.ro:000000000021035D                 db    0
.data.rel.ro:000000000021035E                 db    0
.data.rel.ro:000000000021035F                 db    0
.data.rel.ro:0000000000210360                 dq offset aTandem       ; "tandem"
.data.rel.ro:0000000000210368                 db    1
.data.rel.ro:0000000000210369                 db    0
.data.rel.ro:000000000021036A                 db    0
.data.rel.ro:000000000021036B                 db    0
.data.rel.ro:000000000021036C                 db  0Ch
.data.rel.ro:000000000021036D                 db    0
.data.rel.ro:000000000021036E                 db    0
.data.rel.ro:000000000021036F                 db    0
.data.rel.ro:0000000000210370                 db    0
.data.rel.ro:0000000000210371                 db  10h
.data.rel.ro:0000000000210372                 db    0
.data.rel.ro:0000000000210373                 db    0
.data.rel.ro:0000000000210374                 db    0
.data.rel.ro:0000000000210375                 db    0
.data.rel.ro:0000000000210376                 db    0
.data.rel.ro:0000000000210377                 db    0
.data.rel.ro:0000000000210378                 db    0
.data.rel.ro:0000000000210379                 db    0
.data.rel.ro:000000000021037A                 db    0
.data.rel.ro:000000000021037B                 db    0
.data.rel.ro:000000000021037C                 db    0
.data.rel.ro:000000000021037D                 db    0
.data.rel.ro:000000000021037E                 db    0
.data.rel.ro:000000000021037F                 db    0
.data.rel.ro:0000000000210380                 dq offset aIuclc        ; "iuclc"
.data.rel.ro:0000000000210388                 db    1
.data.rel.ro:0000000000210389                 db    0
.data.rel.ro:000000000021038A                 db    0
.data.rel.ro:000000000021038B                 db    0
.data.rel.ro:000000000021038C                 db    6
.data.rel.ro:000000000021038D                 db    0
.data.rel.ro:000000000021038E                 db    0
.data.rel.ro:000000000021038F                 db    0
.data.rel.ro:0000000000210390                 db    0
.data.rel.ro:0000000000210391                 db    2
.data.rel.ro:0000000000210392                 db    0
.data.rel.ro:0000000000210393                 db    0
.data.rel.ro:0000000000210394                 db    0
.data.rel.ro:0000000000210395                 db    0
.data.rel.ro:0000000000210396                 db    0
.data.rel.ro:0000000000210397                 db    0
.data.rel.ro:0000000000210398                 db    0
.data.rel.ro:0000000000210399                 db    0
.data.rel.ro:000000000021039A                 db    0
.data.rel.ro:000000000021039B                 db    0
.data.rel.ro:000000000021039C                 db    0
.data.rel.ro:000000000021039D                 db    0
.data.rel.ro:000000000021039E                 db    0
.data.rel.ro:000000000021039F                 db    0
.data.rel.ro:00000000002103A0                 dq offset aEchoeEchoctlEc_0+16h ; "ixany"
.data.rel.ro:00000000002103A8                 db    1
.data.rel.ro:00000000002103A9                 db    0
.data.rel.ro:00000000002103AA                 db    0
.data.rel.ro:00000000002103AB                 db    0
.data.rel.ro:00000000002103AC                 db    6
.data.rel.ro:00000000002103AD                 db    0
.data.rel.ro:00000000002103AE                 db    0
.data.rel.ro:00000000002103AF                 db    0
.data.rel.ro:00000000002103B0                 db    0
.data.rel.ro:00000000002103B1                 db    8
.data.rel.ro:00000000002103B2                 db    0
.data.rel.ro:00000000002103B3                 db    0
.data.rel.ro:00000000002103B4                 db    0
.data.rel.ro:00000000002103B5                 db    0
.data.rel.ro:00000000002103B6                 db    0
.data.rel.ro:00000000002103B7                 db    0
.data.rel.ro:00000000002103B8                 db    0
.data.rel.ro:00000000002103B9                 db    0
.data.rel.ro:00000000002103BA                 db    0
.data.rel.ro:00000000002103BB                 db    0
.data.rel.ro:00000000002103BC                 db    0
.data.rel.ro:00000000002103BD                 db    0
.data.rel.ro:00000000002103BE                 db    0
.data.rel.ro:00000000002103BF                 db    0
.data.rel.ro:00000000002103C0                 dq offset aImaxbel      ; "imaxbel"
.data.rel.ro:00000000002103C8                 db    1
.data.rel.ro:00000000002103C9                 db    0
.data.rel.ro:00000000002103CA                 db    0
.data.rel.ro:00000000002103CB                 db    0
.data.rel.ro:00000000002103CC                 db    5
.data.rel.ro:00000000002103CD                 db    0
.data.rel.ro:00000000002103CE                 db    0
.data.rel.ro:00000000002103CF                 db    0
.data.rel.ro:00000000002103D0                 db    0
.data.rel.ro:00000000002103D1                 db  20h
.data.rel.ro:00000000002103D2                 db    0
.data.rel.ro:00000000002103D3                 db    0
.data.rel.ro:00000000002103D4                 db    0
.data.rel.ro:00000000002103D5                 db    0
.data.rel.ro:00000000002103D6                 db    0
.data.rel.ro:00000000002103D7                 db    0
.data.rel.ro:00000000002103D8                 db    0
.data.rel.ro:00000000002103D9                 db    0
.data.rel.ro:00000000002103DA                 db    0
.data.rel.ro:00000000002103DB                 db    0
.data.rel.ro:00000000002103DC                 db    0
.data.rel.ro:00000000002103DD                 db    0
.data.rel.ro:00000000002103DE                 db    0
.data.rel.ro:00000000002103DF                 db    0
.data.rel.ro:00000000002103E0                 dq offset aIutf8        ; "iutf8"
.data.rel.ro:00000000002103E8                 db    1
.data.rel.ro:00000000002103E9                 db    0
.data.rel.ro:00000000002103EA                 db    0
.data.rel.ro:00000000002103EB                 db    0
.data.rel.ro:00000000002103EC                 db    6
.data.rel.ro:00000000002103ED                 db    0
.data.rel.ro:00000000002103EE                 db    0
.data.rel.ro:00000000002103EF                 db    0
.data.rel.ro:00000000002103F0                 db    0
.data.rel.ro:00000000002103F1                 db  40h ; @
.data.rel.ro:00000000002103F2                 db    0
.data.rel.ro:00000000002103F3                 db    0
.data.rel.ro:00000000002103F4                 db    0
.data.rel.ro:00000000002103F5                 db    0
.data.rel.ro:00000000002103F6                 db    0
.data.rel.ro:00000000002103F7                 db    0
.data.rel.ro:00000000002103F8                 db    0
.data.rel.ro:00000000002103F9                 db    0
.data.rel.ro:00000000002103FA                 db    0
.data.rel.ro:00000000002103FB                 db    0
.data.rel.ro:00000000002103FC                 db    0
.data.rel.ro:00000000002103FD                 db    0
.data.rel.ro:00000000002103FE                 db    0
.data.rel.ro:00000000002103FF                 db    0
.data.rel.ro:0000000000210400                 dq offset aOpost        ; "opost"
.data.rel.ro:0000000000210408                 db    2
.data.rel.ro:0000000000210409                 db    0
.data.rel.ro:000000000021040A                 db    0
.data.rel.ro:000000000021040B                 db    0
.data.rel.ro:000000000021040C                 db    5
.data.rel.ro:000000000021040D                 db    0
.data.rel.ro:000000000021040E                 db    0
.data.rel.ro:000000000021040F                 db    0
.data.rel.ro:0000000000210410                 db    1
.data.rel.ro:0000000000210411                 db    0
.data.rel.ro:0000000000210412                 db    0
.data.rel.ro:0000000000210413                 db    0
.data.rel.ro:0000000000210414                 db    0
.data.rel.ro:0000000000210415                 db    0
.data.rel.ro:0000000000210416                 db    0
.data.rel.ro:0000000000210417                 db    0
.data.rel.ro:0000000000210418                 db    0
.data.rel.ro:0000000000210419                 db    0
.data.rel.ro:000000000021041A                 db    0
.data.rel.ro:000000000021041B                 db    0
.data.rel.ro:000000000021041C                 db    0
.data.rel.ro:000000000021041D                 db    0
.data.rel.ro:000000000021041E                 db    0
.data.rel.ro:000000000021041F                 db    0
.data.rel.ro:0000000000210420                 dq offset aOlcuc        ; "olcuc"
.data.rel.ro:0000000000210428                 db    2
.data.rel.ro:0000000000210429                 db    0
.data.rel.ro:000000000021042A                 db    0
.data.rel.ro:000000000021042B                 db    0
.data.rel.ro:000000000021042C                 db    6
.data.rel.ro:000000000021042D                 db    0
.data.rel.ro:000000000021042E                 db    0
.data.rel.ro:000000000021042F                 db    0
.data.rel.ro:0000000000210430                 db    2
.data.rel.ro:0000000000210431                 db    0
.data.rel.ro:0000000000210432                 db    0
.data.rel.ro:0000000000210433                 db    0
.data.rel.ro:0000000000210434                 db    0
.data.rel.ro:0000000000210435                 db    0
.data.rel.ro:0000000000210436                 db    0
.data.rel.ro:0000000000210437                 db    0
.data.rel.ro:0000000000210438                 db    0
.data.rel.ro:0000000000210439                 db    0
.data.rel.ro:000000000021043A                 db    0
.data.rel.ro:000000000021043B                 db    0
.data.rel.ro:000000000021043C                 db    0
.data.rel.ro:000000000021043D                 db    0
.data.rel.ro:000000000021043E                 db    0
.data.rel.ro:000000000021043F                 db    0
.data.rel.ro:0000000000210440                 dq offset aOcrnl        ; "ocrnl"
.data.rel.ro:0000000000210448                 db    2
.data.rel.ro:0000000000210449                 db    0
.data.rel.ro:000000000021044A                 db    0
.data.rel.ro:000000000021044B                 db    0
.data.rel.ro:000000000021044C                 db    6
.data.rel.ro:000000000021044D                 db    0
.data.rel.ro:000000000021044E                 db    0
.data.rel.ro:000000000021044F                 db    0
.data.rel.ro:0000000000210450                 db    8
.data.rel.ro:0000000000210451                 db    0
.data.rel.ro:0000000000210452                 db    0
.data.rel.ro:0000000000210453                 db    0
.data.rel.ro:0000000000210454                 db    0
.data.rel.ro:0000000000210455                 db    0
.data.rel.ro:0000000000210456                 db    0
.data.rel.ro:0000000000210457                 db    0
.data.rel.ro:0000000000210458                 db    0
.data.rel.ro:0000000000210459                 db    0
.data.rel.ro:000000000021045A                 db    0
.data.rel.ro:000000000021045B                 db    0
.data.rel.ro:000000000021045C                 db    0
.data.rel.ro:000000000021045D                 db    0
.data.rel.ro:000000000021045E                 db    0
.data.rel.ro:000000000021045F                 db    0
.data.rel.ro:0000000000210460                 dq offset aIcrnlOnlcr+8 ; "onlcr"
.data.rel.ro:0000000000210468                 db    2
.data.rel.ro:0000000000210469                 db    0
.data.rel.ro:000000000021046A                 db    0
.data.rel.ro:000000000021046B                 db    0
.data.rel.ro:000000000021046C                 db    5
.data.rel.ro:000000000021046D                 db    0
.data.rel.ro:000000000021046E                 db    0
.data.rel.ro:000000000021046F                 db    0
.data.rel.ro:0000000000210470                 db    4
.data.rel.ro:0000000000210471                 db    0
.data.rel.ro:0000000000210472                 db    0
.data.rel.ro:0000000000210473                 db    0
.data.rel.ro:0000000000210474                 db    0
.data.rel.ro:0000000000210475                 db    0
.data.rel.ro:0000000000210476                 db    0
.data.rel.ro:0000000000210477                 db    0
.data.rel.ro:0000000000210478                 db    0
.data.rel.ro:0000000000210479                 db    0
.data.rel.ro:000000000021047A                 db    0
.data.rel.ro:000000000021047B                 db    0
.data.rel.ro:000000000021047C                 db    0
.data.rel.ro:000000000021047D                 db    0
.data.rel.ro:000000000021047E                 db    0
.data.rel.ro:000000000021047F                 db    0
.data.rel.ro:0000000000210480                 dq offset aOnocr        ; "onocr"
.data.rel.ro:0000000000210488                 db    2
.data.rel.ro:0000000000210489                 db    0
.data.rel.ro:000000000021048A                 db    0
.data.rel.ro:000000000021048B                 db    0
.data.rel.ro:000000000021048C                 db    6
.data.rel.ro:000000000021048D                 db    0
.data.rel.ro:000000000021048E                 db    0
.data.rel.ro:000000000021048F                 db    0
.data.rel.ro:0000000000210490                 db  10h
.data.rel.ro:0000000000210491                 db    0
.data.rel.ro:0000000000210492                 db    0
.data.rel.ro:0000000000210493                 db    0
.data.rel.ro:0000000000210494                 db    0
.data.rel.ro:0000000000210495                 db    0
.data.rel.ro:0000000000210496                 db    0
.data.rel.ro:0000000000210497                 db    0
.data.rel.ro:0000000000210498                 db    0
.data.rel.ro:0000000000210499                 db    0
.data.rel.ro:000000000021049A                 db    0
.data.rel.ro:000000000021049B                 db    0
.data.rel.ro:000000000021049C                 db    0
.data.rel.ro:000000000021049D                 db    0
.data.rel.ro:000000000021049E                 db    0
.data.rel.ro:000000000021049F                 db    0
.data.rel.ro:00000000002104A0                 dq offset aOnlret       ; "onlret"
.data.rel.ro:00000000002104A8                 db    2
.data.rel.ro:00000000002104A9                 db    0
.data.rel.ro:00000000002104AA                 db    0
.data.rel.ro:00000000002104AB                 db    0
.data.rel.ro:00000000002104AC                 db    6
.data.rel.ro:00000000002104AD                 db    0
.data.rel.ro:00000000002104AE                 db    0
.data.rel.ro:00000000002104AF                 db    0
.data.rel.ro:00000000002104B0                 db  20h
.data.rel.ro:00000000002104B1                 db    0
.data.rel.ro:00000000002104B2                 db    0
.data.rel.ro:00000000002104B3                 db    0
.data.rel.ro:00000000002104B4                 db    0
.data.rel.ro:00000000002104B5                 db    0
.data.rel.ro:00000000002104B6                 db    0
.data.rel.ro:00000000002104B7                 db    0
.data.rel.ro:00000000002104B8                 db    0
.data.rel.ro:00000000002104B9                 db    0
.data.rel.ro:00000000002104BA                 db    0
.data.rel.ro:00000000002104BB                 db    0
.data.rel.ro:00000000002104BC                 db    0
.data.rel.ro:00000000002104BD                 db    0
.data.rel.ro:00000000002104BE                 db    0
.data.rel.ro:00000000002104BF                 db    0
.data.rel.ro:00000000002104C0                 dq offset aOfill        ; "ofill"
.data.rel.ro:00000000002104C8                 db    2
.data.rel.ro:00000000002104C9                 db    0
.data.rel.ro:00000000002104CA                 db    0
.data.rel.ro:00000000002104CB                 db    0
.data.rel.ro:00000000002104CC                 db    6
.data.rel.ro:00000000002104CD                 db    0
.data.rel.ro:00000000002104CE                 db    0
.data.rel.ro:00000000002104CF                 db    0
.data.rel.ro:00000000002104D0                 db  40h ; @
.data.rel.ro:00000000002104D1                 db    0
.data.rel.ro:00000000002104D2                 db    0
.data.rel.ro:00000000002104D3                 db    0
.data.rel.ro:00000000002104D4                 db    0
.data.rel.ro:00000000002104D5                 db    0
.data.rel.ro:00000000002104D6                 db    0
.data.rel.ro:00000000002104D7                 db    0
.data.rel.ro:00000000002104D8                 db    0
.data.rel.ro:00000000002104D9                 db    0
.data.rel.ro:00000000002104DA                 db    0
.data.rel.ro:00000000002104DB                 db    0
.data.rel.ro:00000000002104DC                 db    0
.data.rel.ro:00000000002104DD                 db    0
.data.rel.ro:00000000002104DE                 db    0
.data.rel.ro:00000000002104DF                 db    0
.data.rel.ro:00000000002104E0                 dq offset aOfdel        ; "ofdel"
.data.rel.ro:00000000002104E8                 db    2
.data.rel.ro:00000000002104E9                 db    0
.data.rel.ro:00000000002104EA                 db    0
.data.rel.ro:00000000002104EB                 db    0
.data.rel.ro:00000000002104EC                 db    6
.data.rel.ro:00000000002104ED                 db    0
.data.rel.ro:00000000002104EE                 db    0
.data.rel.ro:00000000002104EF                 db    0
.data.rel.ro:00000000002104F0                 db  80h
.data.rel.ro:00000000002104F1                 db    0
.data.rel.ro:00000000002104F2                 db    0
.data.rel.ro:00000000002104F3                 db    0
.data.rel.ro:00000000002104F4                 db    0
.data.rel.ro:00000000002104F5                 db    0
.data.rel.ro:00000000002104F6                 db    0
.data.rel.ro:00000000002104F7                 db    0
.data.rel.ro:00000000002104F8                 db    0
.data.rel.ro:00000000002104F9                 db    0
.data.rel.ro:00000000002104FA                 db    0
.data.rel.ro:00000000002104FB                 db    0
.data.rel.ro:00000000002104FC                 db    0
.data.rel.ro:00000000002104FD                 db    0
.data.rel.ro:00000000002104FE                 db    0
.data.rel.ro:00000000002104FF                 db    0
.data.rel.ro:0000000000210500                 dq offset aNl1          ; "nl1"
.data.rel.ro:0000000000210508                 db    2
.data.rel.ro:0000000000210509                 db    0
.data.rel.ro:000000000021050A                 db    0
.data.rel.ro:000000000021050B                 db    0
.data.rel.ro:000000000021050C                 db    2
.data.rel.ro:000000000021050D                 db    0
.data.rel.ro:000000000021050E                 db    0
.data.rel.ro:000000000021050F                 db    0
.data.rel.ro:0000000000210510                 db    0
.data.rel.ro:0000000000210511                 db    1
.data.rel.ro:0000000000210512                 db    0
.data.rel.ro:0000000000210513                 db    0
.data.rel.ro:0000000000210514                 db    0
.data.rel.ro:0000000000210515                 db    0
.data.rel.ro:0000000000210516                 db    0
.data.rel.ro:0000000000210517                 db    0
.data.rel.ro:0000000000210518                 db    0
.data.rel.ro:0000000000210519                 db    1
.data.rel.ro:000000000021051A                 db    0
.data.rel.ro:000000000021051B                 db    0
.data.rel.ro:000000000021051C                 db    0
.data.rel.ro:000000000021051D                 db    0
.data.rel.ro:000000000021051E                 db    0
.data.rel.ro:000000000021051F                 db    0
.data.rel.ro:0000000000210520                 dq offset aNl0          ; "nl0"
.data.rel.ro:0000000000210528                 db    2
.data.rel.ro:0000000000210529                 db    0
.data.rel.ro:000000000021052A                 db    0
.data.rel.ro:000000000021052B                 db    0
.data.rel.ro:000000000021052C                 db    1
.data.rel.ro:000000000021052D                 db    0
.data.rel.ro:000000000021052E                 db    0
.data.rel.ro:000000000021052F                 db    0
.data.rel.ro:0000000000210530                 db    0
.data.rel.ro:0000000000210531                 db    0
.data.rel.ro:0000000000210532                 db    0
.data.rel.ro:0000000000210533                 db    0
.data.rel.ro:0000000000210534                 db    0
.data.rel.ro:0000000000210535                 db    0
.data.rel.ro:0000000000210536                 db    0
.data.rel.ro:0000000000210537                 db    0
.data.rel.ro:0000000000210538                 db    0
.data.rel.ro:0000000000210539                 db    1
.data.rel.ro:000000000021053A                 db    0
.data.rel.ro:000000000021053B                 db    0
.data.rel.ro:000000000021053C                 db    0
.data.rel.ro:000000000021053D                 db    0
.data.rel.ro:000000000021053E                 db    0
.data.rel.ro:000000000021053F                 db    0
.data.rel.ro:0000000000210540                 dq offset aCr3          ; "cr3"
.data.rel.ro:0000000000210548                 db    2
.data.rel.ro:0000000000210549                 db    0
.data.rel.ro:000000000021054A                 db    0
.data.rel.ro:000000000021054B                 db    0
.data.rel.ro:000000000021054C                 db    2
.data.rel.ro:000000000021054D                 db    0
.data.rel.ro:000000000021054E                 db    0
.data.rel.ro:000000000021054F                 db    0
.data.rel.ro:0000000000210550                 db    0
.data.rel.ro:0000000000210551                 db    6
.data.rel.ro:0000000000210552                 db    0
.data.rel.ro:0000000000210553                 db    0
.data.rel.ro:0000000000210554                 db    0
.data.rel.ro:0000000000210555                 db    0
.data.rel.ro:0000000000210556                 db    0
.data.rel.ro:0000000000210557                 db    0
.data.rel.ro:0000000000210558                 db    0
.data.rel.ro:0000000000210559                 db    6
.data.rel.ro:000000000021055A                 db    0
.data.rel.ro:000000000021055B                 db    0
.data.rel.ro:000000000021055C                 db    0
.data.rel.ro:000000000021055D                 db    0
.data.rel.ro:000000000021055E                 db    0
.data.rel.ro:000000000021055F                 db    0
.data.rel.ro:0000000000210560                 dq offset aCr2          ; "cr2"
.data.rel.ro:0000000000210568                 db    2
.data.rel.ro:0000000000210569                 db    0
.data.rel.ro:000000000021056A                 db    0
.data.rel.ro:000000000021056B                 db    0
.data.rel.ro:000000000021056C                 db    2
.data.rel.ro:000000000021056D                 db    0
.data.rel.ro:000000000021056E                 db    0
.data.rel.ro:000000000021056F                 db    0
.data.rel.ro:0000000000210570                 db    0
.data.rel.ro:0000000000210571                 db    4
.data.rel.ro:0000000000210572                 db    0
.data.rel.ro:0000000000210573                 db    0
.data.rel.ro:0000000000210574                 db    0
.data.rel.ro:0000000000210575                 db    0
.data.rel.ro:0000000000210576                 db    0
.data.rel.ro:0000000000210577                 db    0
.data.rel.ro:0000000000210578                 db    0
.data.rel.ro:0000000000210579                 db    6
.data.rel.ro:000000000021057A                 db    0
.data.rel.ro:000000000021057B                 db    0
.data.rel.ro:000000000021057C                 db    0
.data.rel.ro:000000000021057D                 db    0
.data.rel.ro:000000000021057E                 db    0
.data.rel.ro:000000000021057F                 db    0
.data.rel.ro:0000000000210580                 dq offset aCr1          ; "cr1"
.data.rel.ro:0000000000210588                 db    2
.data.rel.ro:0000000000210589                 db    0
.data.rel.ro:000000000021058A                 db    0
.data.rel.ro:000000000021058B                 db    0
.data.rel.ro:000000000021058C                 db    2
.data.rel.ro:000000000021058D                 db    0
.data.rel.ro:000000000021058E                 db    0
.data.rel.ro:000000000021058F                 db    0
.data.rel.ro:0000000000210590                 db    0
.data.rel.ro:0000000000210591                 db    2
.data.rel.ro:0000000000210592                 db    0
.data.rel.ro:0000000000210593                 db    0
.data.rel.ro:0000000000210594                 db    0
.data.rel.ro:0000000000210595                 db    0
.data.rel.ro:0000000000210596                 db    0
.data.rel.ro:0000000000210597                 db    0
.data.rel.ro:0000000000210598                 db    0
.data.rel.ro:0000000000210599                 db    6
.data.rel.ro:000000000021059A                 db    0
.data.rel.ro:000000000021059B                 db    0
.data.rel.ro:000000000021059C                 db    0
.data.rel.ro:000000000021059D                 db    0
.data.rel.ro:000000000021059E                 db    0
.data.rel.ro:000000000021059F                 db    0
.data.rel.ro:00000000002105A0                 dq offset aCr0          ; "cr0"
.data.rel.ro:00000000002105A8                 db    2
.data.rel.ro:00000000002105A9                 db    0
.data.rel.ro:00000000002105AA                 db    0
.data.rel.ro:00000000002105AB                 db    0
.data.rel.ro:00000000002105AC                 db    1
.data.rel.ro:00000000002105AD                 db    0
.data.rel.ro:00000000002105AE                 db    0
.data.rel.ro:00000000002105AF                 db    0
.data.rel.ro:00000000002105B0                 db    0
.data.rel.ro:00000000002105B1                 db    0
.data.rel.ro:00000000002105B2                 db    0
.data.rel.ro:00000000002105B3                 db    0
.data.rel.ro:00000000002105B4                 db    0
.data.rel.ro:00000000002105B5                 db    0
.data.rel.ro:00000000002105B6                 db    0
.data.rel.ro:00000000002105B7                 db    0
.data.rel.ro:00000000002105B8                 db    0
.data.rel.ro:00000000002105B9                 db    6
.data.rel.ro:00000000002105BA                 db    0
.data.rel.ro:00000000002105BB                 db    0
.data.rel.ro:00000000002105BC                 db    0
.data.rel.ro:00000000002105BD                 db    0
.data.rel.ro:00000000002105BE                 db    0
.data.rel.ro:00000000002105BF                 db    0
.data.rel.ro:00000000002105C0                 dq offset aTab3         ; "tab3"
.data.rel.ro:00000000002105C8                 db    2
.data.rel.ro:00000000002105C9                 db    0
.data.rel.ro:00000000002105CA                 db    0
.data.rel.ro:00000000002105CB                 db    0
.data.rel.ro:00000000002105CC                 db    2
.data.rel.ro:00000000002105CD                 db    0
.data.rel.ro:00000000002105CE                 db    0
.data.rel.ro:00000000002105CF                 db    0
.data.rel.ro:00000000002105D0                 db    0
.data.rel.ro:00000000002105D1                 db  18h
.data.rel.ro:00000000002105D2                 db    0
.data.rel.ro:00000000002105D3                 db    0
.data.rel.ro:00000000002105D4                 db    0
.data.rel.ro:00000000002105D5                 db    0
.data.rel.ro:00000000002105D6                 db    0
.data.rel.ro:00000000002105D7                 db    0
.data.rel.ro:00000000002105D8                 db    0
.data.rel.ro:00000000002105D9                 db  18h
.data.rel.ro:00000000002105DA                 db    0
.data.rel.ro:00000000002105DB                 db    0
.data.rel.ro:00000000002105DC                 db    0
.data.rel.ro:00000000002105DD                 db    0
.data.rel.ro:00000000002105DE                 db    0
.data.rel.ro:00000000002105DF                 db    0
.data.rel.ro:00000000002105E0                 dq offset aTab2         ; "tab2"
.data.rel.ro:00000000002105E8                 db    2
.data.rel.ro:00000000002105E9                 db    0
.data.rel.ro:00000000002105EA                 db    0
.data.rel.ro:00000000002105EB                 db    0
.data.rel.ro:00000000002105EC                 db    2
.data.rel.ro:00000000002105ED                 db    0
.data.rel.ro:00000000002105EE                 db    0
.data.rel.ro:00000000002105EF                 db    0
.data.rel.ro:00000000002105F0                 db    0
.data.rel.ro:00000000002105F1                 db  10h
.data.rel.ro:00000000002105F2                 db    0
.data.rel.ro:00000000002105F3                 db    0
.data.rel.ro:00000000002105F4                 db    0
.data.rel.ro:00000000002105F5                 db    0
.data.rel.ro:00000000002105F6                 db    0
.data.rel.ro:00000000002105F7                 db    0
.data.rel.ro:00000000002105F8                 db    0
.data.rel.ro:00000000002105F9                 db  18h
.data.rel.ro:00000000002105FA                 db    0
.data.rel.ro:00000000002105FB                 db    0
.data.rel.ro:00000000002105FC                 db    0
.data.rel.ro:00000000002105FD                 db    0
.data.rel.ro:00000000002105FE                 db    0
.data.rel.ro:00000000002105FF                 db    0
.data.rel.ro:0000000000210600                 dq offset aTab1         ; "tab1"
.data.rel.ro:0000000000210608                 db    2
.data.rel.ro:0000000000210609                 db    0
.data.rel.ro:000000000021060A                 db    0
.data.rel.ro:000000000021060B                 db    0
.data.rel.ro:000000000021060C                 db    2
.data.rel.ro:000000000021060D                 db    0
.data.rel.ro:000000000021060E                 db    0
.data.rel.ro:000000000021060F                 db    0
.data.rel.ro:0000000000210610                 db    0
.data.rel.ro:0000000000210611                 db    8
.data.rel.ro:0000000000210612                 db    0
.data.rel.ro:0000000000210613                 db    0
.data.rel.ro:0000000000210614                 db    0
.data.rel.ro:0000000000210615                 db    0
.data.rel.ro:0000000000210616                 db    0
.data.rel.ro:0000000000210617                 db    0
.data.rel.ro:0000000000210618                 db    0
.data.rel.ro:0000000000210619                 db  18h
.data.rel.ro:000000000021061A                 db    0
.data.rel.ro:000000000021061B                 db    0
.data.rel.ro:000000000021061C                 db    0
.data.rel.ro:000000000021061D                 db    0
.data.rel.ro:000000000021061E                 db    0
.data.rel.ro:000000000021061F                 db    0
.data.rel.ro:0000000000210620                 dq offset aTab0         ; "tab0"
.data.rel.ro:0000000000210628                 db    2
.data.rel.ro:0000000000210629                 db    0
.data.rel.ro:000000000021062A                 db    0
.data.rel.ro:000000000021062B                 db    0
.data.rel.ro:000000000021062C                 db    1
.data.rel.ro:000000000021062D                 db    0
.data.rel.ro:000000000021062E                 db    0
.data.rel.ro:000000000021062F                 db    0
.data.rel.ro:0000000000210630                 db    0
.data.rel.ro:0000000000210631                 db    0
.data.rel.ro:0000000000210632                 db    0
.data.rel.ro:0000000000210633                 db    0
.data.rel.ro:0000000000210634                 db    0
.data.rel.ro:0000000000210635                 db    0
.data.rel.ro:0000000000210636                 db    0
.data.rel.ro:0000000000210637                 db    0
.data.rel.ro:0000000000210638                 db    0
.data.rel.ro:0000000000210639                 db  18h
.data.rel.ro:000000000021063A                 db    0
.data.rel.ro:000000000021063B                 db    0
.data.rel.ro:000000000021063C                 db    0
.data.rel.ro:000000000021063D                 db    0
.data.rel.ro:000000000021063E                 db    0
.data.rel.ro:000000000021063F                 db    0
.data.rel.ro:0000000000210640                 dq offset aBs1          ; "bs1"
.data.rel.ro:0000000000210648                 db    2
.data.rel.ro:0000000000210649                 db    0
.data.rel.ro:000000000021064A                 db    0
.data.rel.ro:000000000021064B                 db    0
.data.rel.ro:000000000021064C                 db    2
.data.rel.ro:000000000021064D                 db    0
.data.rel.ro:000000000021064E                 db    0
.data.rel.ro:000000000021064F                 db    0
.data.rel.ro:0000000000210650                 db    0
.data.rel.ro:0000000000210651                 db  20h
.data.rel.ro:0000000000210652                 db    0
.data.rel.ro:0000000000210653                 db    0
.data.rel.ro:0000000000210654                 db    0
.data.rel.ro:0000000000210655                 db    0
.data.rel.ro:0000000000210656                 db    0
.data.rel.ro:0000000000210657                 db    0
.data.rel.ro:0000000000210658                 db    0
.data.rel.ro:0000000000210659                 db  20h
.data.rel.ro:000000000021065A                 db    0
.data.rel.ro:000000000021065B                 db    0
.data.rel.ro:000000000021065C                 db    0
.data.rel.ro:000000000021065D                 db    0
.data.rel.ro:000000000021065E                 db    0
.data.rel.ro:000000000021065F                 db    0
.data.rel.ro:0000000000210660                 dq offset aBs0          ; "bs0"
.data.rel.ro:0000000000210668                 db    2
.data.rel.ro:0000000000210669                 db    0
.data.rel.ro:000000000021066A                 db    0
.data.rel.ro:000000000021066B                 db    0
.data.rel.ro:000000000021066C                 db    1
.data.rel.ro:000000000021066D                 db    0
.data.rel.ro:000000000021066E                 db    0
.data.rel.ro:000000000021066F                 db    0
.data.rel.ro:0000000000210670                 db    0
.data.rel.ro:0000000000210671                 db    0
.data.rel.ro:0000000000210672                 db    0
.data.rel.ro:0000000000210673                 db    0
.data.rel.ro:0000000000210674                 db    0
.data.rel.ro:0000000000210675                 db    0
.data.rel.ro:0000000000210676                 db    0
.data.rel.ro:0000000000210677                 db    0
.data.rel.ro:0000000000210678                 db    0
.data.rel.ro:0000000000210679                 db  20h
.data.rel.ro:000000000021067A                 db    0
.data.rel.ro:000000000021067B                 db    0
.data.rel.ro:000000000021067C                 db    0
.data.rel.ro:000000000021067D                 db    0
.data.rel.ro:000000000021067E                 db    0
.data.rel.ro:000000000021067F                 db    0
.data.rel.ro:0000000000210680                 dq offset aVt1          ; "vt1"
.data.rel.ro:0000000000210688                 db    2
.data.rel.ro:0000000000210689                 db    0
.data.rel.ro:000000000021068A                 db    0
.data.rel.ro:000000000021068B                 db    0
.data.rel.ro:000000000021068C                 db    2
.data.rel.ro:000000000021068D                 db    0
.data.rel.ro:000000000021068E                 db    0
.data.rel.ro:000000000021068F                 db    0
.data.rel.ro:0000000000210690                 db    0
.data.rel.ro:0000000000210691                 db  40h ; @
.data.rel.ro:0000000000210692                 db    0
.data.rel.ro:0000000000210693                 db    0
.data.rel.ro:0000000000210694                 db    0
.data.rel.ro:0000000000210695                 db    0
.data.rel.ro:0000000000210696                 db    0
.data.rel.ro:0000000000210697                 db    0
.data.rel.ro:0000000000210698                 db    0
.data.rel.ro:0000000000210699                 db  40h ; @
.data.rel.ro:000000000021069A                 db    0
.data.rel.ro:000000000021069B                 db    0
.data.rel.ro:000000000021069C                 db    0
.data.rel.ro:000000000021069D                 db    0
.data.rel.ro:000000000021069E                 db    0
.data.rel.ro:000000000021069F                 db    0
.data.rel.ro:00000000002106A0                 dq offset aVt0          ; "vt0"
.data.rel.ro:00000000002106A8                 db    2
.data.rel.ro:00000000002106A9                 db    0
.data.rel.ro:00000000002106AA                 db    0
.data.rel.ro:00000000002106AB                 db    0
.data.rel.ro:00000000002106AC                 db    1
.data.rel.ro:00000000002106AD                 db    0
.data.rel.ro:00000000002106AE                 db    0
.data.rel.ro:00000000002106AF                 db    0
.data.rel.ro:00000000002106B0                 db    0
.data.rel.ro:00000000002106B1                 db    0
.data.rel.ro:00000000002106B2                 db    0
.data.rel.ro:00000000002106B3                 db    0
.data.rel.ro:00000000002106B4                 db    0
.data.rel.ro:00000000002106B5                 db    0
.data.rel.ro:00000000002106B6                 db    0
.data.rel.ro:00000000002106B7                 db    0
.data.rel.ro:00000000002106B8                 db    0
.data.rel.ro:00000000002106B9                 db  40h ; @
.data.rel.ro:00000000002106BA                 db    0
.data.rel.ro:00000000002106BB                 db    0
.data.rel.ro:00000000002106BC                 db    0
.data.rel.ro:00000000002106BD                 db    0
.data.rel.ro:00000000002106BE                 db    0
.data.rel.ro:00000000002106BF                 db    0
.data.rel.ro:00000000002106C0                 dq offset aFf1          ; "ff1"
.data.rel.ro:00000000002106C8                 db    2
.data.rel.ro:00000000002106C9                 db    0
.data.rel.ro:00000000002106CA                 db    0
.data.rel.ro:00000000002106CB                 db    0
.data.rel.ro:00000000002106CC                 db    2
.data.rel.ro:00000000002106CD                 db    0
.data.rel.ro:00000000002106CE                 db    0
.data.rel.ro:00000000002106CF                 db    0
.data.rel.ro:00000000002106D0                 db    0
.data.rel.ro:00000000002106D1                 db  80h
.data.rel.ro:00000000002106D2                 db    0
.data.rel.ro:00000000002106D3                 db    0
.data.rel.ro:00000000002106D4                 db    0
.data.rel.ro:00000000002106D5                 db    0
.data.rel.ro:00000000002106D6                 db    0
.data.rel.ro:00000000002106D7                 db    0
.data.rel.ro:00000000002106D8                 db    0
.data.rel.ro:00000000002106D9                 db  80h
.data.rel.ro:00000000002106DA                 db    0
.data.rel.ro:00000000002106DB                 db    0
.data.rel.ro:00000000002106DC                 db    0
.data.rel.ro:00000000002106DD                 db    0
.data.rel.ro:00000000002106DE                 db    0
.data.rel.ro:00000000002106DF                 db    0
.data.rel.ro:00000000002106E0                 dq offset aFf0          ; "ff0"
.data.rel.ro:00000000002106E8                 db    2
.data.rel.ro:00000000002106E9                 db    0
.data.rel.ro:00000000002106EA                 db    0
.data.rel.ro:00000000002106EB                 db    0
.data.rel.ro:00000000002106EC                 db    1
.data.rel.ro:00000000002106ED                 db    0
.data.rel.ro:00000000002106EE                 db    0
.data.rel.ro:00000000002106EF                 db    0
.data.rel.ro:00000000002106F0                 db    0
.data.rel.ro:00000000002106F1                 db    0
.data.rel.ro:00000000002106F2                 db    0
.data.rel.ro:00000000002106F3                 db    0
.data.rel.ro:00000000002106F4                 db    0
.data.rel.ro:00000000002106F5                 db    0
.data.rel.ro:00000000002106F6                 db    0
.data.rel.ro:00000000002106F7                 db    0
.data.rel.ro:00000000002106F8                 db    0
.data.rel.ro:00000000002106F9                 db  80h
.data.rel.ro:00000000002106FA                 db    0
.data.rel.ro:00000000002106FB                 db    0
.data.rel.ro:00000000002106FC                 db    0
.data.rel.ro:00000000002106FD                 db    0
.data.rel.ro:00000000002106FE                 db    0
.data.rel.ro:00000000002106FF                 db    0
.data.rel.ro:0000000000210700                 dq offset aIsig         ; "isig"
.data.rel.ro:0000000000210708                 db    3
.data.rel.ro:0000000000210709                 db    0
.data.rel.ro:000000000021070A                 db    0
.data.rel.ro:000000000021070B                 db    0
.data.rel.ro:000000000021070C                 db    5
.data.rel.ro:000000000021070D                 db    0
.data.rel.ro:000000000021070E                 db    0
.data.rel.ro:000000000021070F                 db    0
.data.rel.ro:0000000000210710                 db    1
.data.rel.ro:0000000000210711                 db    0
.data.rel.ro:0000000000210712                 db    0
.data.rel.ro:0000000000210713                 db    0
.data.rel.ro:0000000000210714                 db    0
.data.rel.ro:0000000000210715                 db    0
.data.rel.ro:0000000000210716                 db    0
.data.rel.ro:0000000000210717                 db    0
.data.rel.ro:0000000000210718                 db    0
.data.rel.ro:0000000000210719                 db    0
.data.rel.ro:000000000021071A                 db    0
.data.rel.ro:000000000021071B                 db    0
.data.rel.ro:000000000021071C                 db    0
.data.rel.ro:000000000021071D                 db    0
.data.rel.ro:000000000021071E                 db    0
.data.rel.ro:000000000021071F                 db    0
.data.rel.ro:0000000000210720                 dq offset aIcanon       ; "icanon"
.data.rel.ro:0000000000210728                 db    3
.data.rel.ro:0000000000210729                 db    0
.data.rel.ro:000000000021072A                 db    0
.data.rel.ro:000000000021072B                 db    0
.data.rel.ro:000000000021072C                 db    5
.data.rel.ro:000000000021072D                 db    0
.data.rel.ro:000000000021072E                 db    0
.data.rel.ro:000000000021072F                 db    0
.data.rel.ro:0000000000210730                 db    2
.data.rel.ro:0000000000210731                 db    0
.data.rel.ro:0000000000210732                 db    0
.data.rel.ro:0000000000210733                 db    0
.data.rel.ro:0000000000210734                 db    0
.data.rel.ro:0000000000210735                 db    0
.data.rel.ro:0000000000210736                 db    0
.data.rel.ro:0000000000210737                 db    0
.data.rel.ro:0000000000210738                 db    0
.data.rel.ro:0000000000210739                 db    0
.data.rel.ro:000000000021073A                 db    0
.data.rel.ro:000000000021073B                 db    0
.data.rel.ro:000000000021073C                 db    0
.data.rel.ro:000000000021073D                 db    0
.data.rel.ro:000000000021073E                 db    0
.data.rel.ro:000000000021073F                 db    0
.data.rel.ro:0000000000210740                 dq offset aIexten       ; "iexten"
.data.rel.ro:0000000000210748                 db    3
.data.rel.ro:0000000000210749                 db    0
.data.rel.ro:000000000021074A                 db    0
.data.rel.ro:000000000021074B                 db    0
.data.rel.ro:000000000021074C                 db    5
.data.rel.ro:000000000021074D                 db    0
.data.rel.ro:000000000021074E                 db    0
.data.rel.ro:000000000021074F                 db    0
.data.rel.ro:0000000000210750                 db    0
.data.rel.ro:0000000000210751                 db  80h
.data.rel.ro:0000000000210752                 db    0
.data.rel.ro:0000000000210753                 db    0
.data.rel.ro:0000000000210754                 db    0
.data.rel.ro:0000000000210755                 db    0
.data.rel.ro:0000000000210756                 db    0
.data.rel.ro:0000000000210757                 db    0
.data.rel.ro:0000000000210758                 db    0
.data.rel.ro:0000000000210759                 db    0
.data.rel.ro:000000000021075A                 db    0
.data.rel.ro:000000000021075B                 db    0
.data.rel.ro:000000000021075C                 db    0
.data.rel.ro:000000000021075D                 db    0
.data.rel.ro:000000000021075E                 db    0
.data.rel.ro:000000000021075F                 db    0
.data.rel.ro:0000000000210760                 dq offset aCtlecho+3    ; "echo"
.data.rel.ro:0000000000210768                 db    3
.data.rel.ro:0000000000210769                 db    0
.data.rel.ro:000000000021076A                 db    0
.data.rel.ro:000000000021076B                 db    0
.data.rel.ro:000000000021076C                 db    5
.data.rel.ro:000000000021076D                 db    0
.data.rel.ro:000000000021076E                 db    0
.data.rel.ro:000000000021076F                 db    0
.data.rel.ro:0000000000210770                 db    8
.data.rel.ro:0000000000210771                 db    0
.data.rel.ro:0000000000210772                 db    0
.data.rel.ro:0000000000210773                 db    0
.data.rel.ro:0000000000210774                 db    0
.data.rel.ro:0000000000210775                 db    0
.data.rel.ro:0000000000210776                 db    0
.data.rel.ro:0000000000210777                 db    0
.data.rel.ro:0000000000210778                 db    0
.data.rel.ro:0000000000210779                 db    0
.data.rel.ro:000000000021077A                 db    0
.data.rel.ro:000000000021077B                 db    0
.data.rel.ro:000000000021077C                 db    0
.data.rel.ro:000000000021077D                 db    0
.data.rel.ro:000000000021077E                 db    0
.data.rel.ro:000000000021077F                 db    0
.data.rel.ro:0000000000210780                 dq offset aEchoe        ; "echoe"
.data.rel.ro:0000000000210788                 db    3
.data.rel.ro:0000000000210789                 db    0
.data.rel.ro:000000000021078A                 db    0
.data.rel.ro:000000000021078B                 db    0
.data.rel.ro:000000000021078C                 db    5
.data.rel.ro:000000000021078D                 db    0
.data.rel.ro:000000000021078E                 db    0
.data.rel.ro:000000000021078F                 db    0
.data.rel.ro:0000000000210790                 db  10h
.data.rel.ro:0000000000210791                 db    0
.data.rel.ro:0000000000210792                 db    0
.data.rel.ro:0000000000210793                 db    0
.data.rel.ro:0000000000210794                 db    0
.data.rel.ro:0000000000210795                 db    0
.data.rel.ro:0000000000210796                 db    0
.data.rel.ro:0000000000210797                 db    0
.data.rel.ro:0000000000210798                 db    0
.data.rel.ro:0000000000210799                 db    0
.data.rel.ro:000000000021079A                 db    0
.data.rel.ro:000000000021079B                 db    0
.data.rel.ro:000000000021079C                 db    0
.data.rel.ro:000000000021079D                 db    0
.data.rel.ro:000000000021079E                 db    0
.data.rel.ro:000000000021079F                 db    0
.data.rel.ro:00000000002107A0                 dq offset aCrterase     ; "crterase"
.data.rel.ro:00000000002107A8                 db    3
.data.rel.ro:00000000002107A9                 db    0
.data.rel.ro:00000000002107AA                 db    0
.data.rel.ro:00000000002107AB                 db    0
.data.rel.ro:00000000002107AC                 db  0Ch
.data.rel.ro:00000000002107AD                 db    0
.data.rel.ro:00000000002107AE                 db    0
.data.rel.ro:00000000002107AF                 db    0
.data.rel.ro:00000000002107B0                 db  10h
.data.rel.ro:00000000002107B1                 db    0
.data.rel.ro:00000000002107B2                 db    0
.data.rel.ro:00000000002107B3                 db    0
.data.rel.ro:00000000002107B4                 db    0
.data.rel.ro:00000000002107B5                 db    0
.data.rel.ro:00000000002107B6                 db    0
.data.rel.ro:00000000002107B7                 db    0
.data.rel.ro:00000000002107B8                 db    0
.data.rel.ro:00000000002107B9                 db    0
.data.rel.ro:00000000002107BA                 db    0
.data.rel.ro:00000000002107BB                 db    0
.data.rel.ro:00000000002107BC                 db    0
.data.rel.ro:00000000002107BD                 db    0
.data.rel.ro:00000000002107BE                 db    0
.data.rel.ro:00000000002107BF                 db    0
.data.rel.ro:00000000002107C0                 dq offset aEchok        ; "echok"
.data.rel.ro:00000000002107C8                 db    3
.data.rel.ro:00000000002107C9                 db    0
.data.rel.ro:00000000002107CA                 db    0
.data.rel.ro:00000000002107CB                 db    0
.data.rel.ro:00000000002107CC                 db    5
.data.rel.ro:00000000002107CD                 db    0
.data.rel.ro:00000000002107CE                 db    0
.data.rel.ro:00000000002107CF                 db    0
.data.rel.ro:00000000002107D0                 db  20h
.data.rel.ro:00000000002107D1                 db    0
.data.rel.ro:00000000002107D2                 db    0
.data.rel.ro:00000000002107D3                 db    0
.data.rel.ro:00000000002107D4                 db    0
.data.rel.ro:00000000002107D5                 db    0
.data.rel.ro:00000000002107D6                 db    0
.data.rel.ro:00000000002107D7                 db    0
.data.rel.ro:00000000002107D8                 db    0
.data.rel.ro:00000000002107D9                 db    0
.data.rel.ro:00000000002107DA                 db    0
.data.rel.ro:00000000002107DB                 db    0
.data.rel.ro:00000000002107DC                 db    0
.data.rel.ro:00000000002107DD                 db    0
.data.rel.ro:00000000002107DE                 db    0
.data.rel.ro:00000000002107DF                 db    0
.data.rel.ro:00000000002107E0                 dq offset unk_B891
.data.rel.ro:00000000002107E8                 db    3
.data.rel.ro:00000000002107E9                 db    0
.data.rel.ro:00000000002107EA                 db    0
.data.rel.ro:00000000002107EB                 db    0
.data.rel.ro:00000000002107EC                 db    6
.data.rel.ro:00000000002107ED                 db    0
.data.rel.ro:00000000002107EE                 db    0
.data.rel.ro:00000000002107EF                 db    0
.data.rel.ro:00000000002107F0                 db  40h ; @
.data.rel.ro:00000000002107F1                 db    0
.data.rel.ro:00000000002107F2                 db    0
.data.rel.ro:00000000002107F3                 db    0
.data.rel.ro:00000000002107F4                 db    0
.data.rel.ro:00000000002107F5                 db    0
.data.rel.ro:00000000002107F6                 db    0
.data.rel.ro:00000000002107F7                 db    0
.data.rel.ro:00000000002107F8                 db    0
.data.rel.ro:00000000002107F9                 db    0
.data.rel.ro:00000000002107FA                 db    0
.data.rel.ro:00000000002107FB                 db    0
.data.rel.ro:00000000002107FC                 db    0
.data.rel.ro:00000000002107FD                 db    0
.data.rel.ro:00000000002107FE                 db    0
.data.rel.ro:00000000002107FF                 db    0
.data.rel.ro:0000000000210800                 dq offset aNoflsh       ; "noflsh"
.data.rel.ro:0000000000210808                 db    3
.data.rel.ro:0000000000210809                 db    0
.data.rel.ro:000000000021080A                 db    0
.data.rel.ro:000000000021080B                 db    0
.data.rel.ro:000000000021080C                 db    6
.data.rel.ro:000000000021080D                 db    0
.data.rel.ro:000000000021080E                 db    0
.data.rel.ro:000000000021080F                 db    0
.data.rel.ro:0000000000210810                 db  80h
.data.rel.ro:0000000000210811                 db    0
.data.rel.ro:0000000000210812                 db    0
.data.rel.ro:0000000000210813                 db    0
.data.rel.ro:0000000000210814                 db    0
.data.rel.ro:0000000000210815                 db    0
.data.rel.ro:0000000000210816                 db    0
.data.rel.ro:0000000000210817                 db    0
.data.rel.ro:0000000000210818                 db    0
.data.rel.ro:0000000000210819                 db    0
.data.rel.ro:000000000021081A                 db    0
.data.rel.ro:000000000021081B                 db    0
.data.rel.ro:000000000021081C                 db    0
.data.rel.ro:000000000021081D                 db    0
.data.rel.ro:000000000021081E                 db    0
.data.rel.ro:000000000021081F                 db    0
.data.rel.ro:0000000000210820                 dq offset aXcase        ; "xcase"
.data.rel.ro:0000000000210828                 db    3
.data.rel.ro:0000000000210829                 db    0
.data.rel.ro:000000000021082A                 db    0
.data.rel.ro:000000000021082B                 db    0
.data.rel.ro:000000000021082C                 db    6
.data.rel.ro:000000000021082D                 db    0
.data.rel.ro:000000000021082E                 db    0
.data.rel.ro:000000000021082F                 db    0
.data.rel.ro:0000000000210830                 db    4
.data.rel.ro:0000000000210831                 db    0
.data.rel.ro:0000000000210832                 db    0
.data.rel.ro:0000000000210833                 db    0
.data.rel.ro:0000000000210834                 db    0
.data.rel.ro:0000000000210835                 db    0
.data.rel.ro:0000000000210836                 db    0
.data.rel.ro:0000000000210837                 db    0
.data.rel.ro:0000000000210838                 db    0
.data.rel.ro:0000000000210839                 db    0
.data.rel.ro:000000000021083A                 db    0
.data.rel.ro:000000000021083B                 db    0
.data.rel.ro:000000000021083C                 db    0
.data.rel.ro:000000000021083D                 db    0
.data.rel.ro:000000000021083E                 db    0
.data.rel.ro:000000000021083F                 db    0
.data.rel.ro:0000000000210840                 dq offset aTostop       ; "tostop"
.data.rel.ro:0000000000210848                 db    3
.data.rel.ro:0000000000210849                 db    0
.data.rel.ro:000000000021084A                 db    0
.data.rel.ro:000000000021084B                 db    0
.data.rel.ro:000000000021084C                 db    6
.data.rel.ro:000000000021084D                 db    0
.data.rel.ro:000000000021084E                 db    0
.data.rel.ro:000000000021084F                 db    0
.data.rel.ro:0000000000210850                 db    0
.data.rel.ro:0000000000210851                 db    1
.data.rel.ro:0000000000210852                 db    0
.data.rel.ro:0000000000210853                 db    0
.data.rel.ro:0000000000210854                 db    0
.data.rel.ro:0000000000210855                 db    0
.data.rel.ro:0000000000210856                 db    0
.data.rel.ro:0000000000210857                 db    0
.data.rel.ro:0000000000210858                 db    0
.data.rel.ro:0000000000210859                 db    0
.data.rel.ro:000000000021085A                 db    0
.data.rel.ro:000000000021085B                 db    0
.data.rel.ro:000000000021085C                 db    0
.data.rel.ro:000000000021085D                 db    0
.data.rel.ro:000000000021085E                 db    0
.data.rel.ro:000000000021085F                 db    0
.data.rel.ro:0000000000210860                 dq offset aEchoprt      ; "echoprt"
.data.rel.ro:0000000000210868                 db    3
.data.rel.ro:0000000000210869                 db    0
.data.rel.ro:000000000021086A                 db    0
.data.rel.ro:000000000021086B                 db    0
.data.rel.ro:000000000021086C                 db    6
.data.rel.ro:000000000021086D                 db    0
.data.rel.ro:000000000021086E                 db    0
.data.rel.ro:000000000021086F                 db    0
.data.rel.ro:0000000000210870                 db    0
.data.rel.ro:0000000000210871                 db    4
.data.rel.ro:0000000000210872                 db    0
.data.rel.ro:0000000000210873                 db    0
.data.rel.ro:0000000000210874                 db    0
.data.rel.ro:0000000000210875                 db    0
.data.rel.ro:0000000000210876                 db    0
.data.rel.ro:0000000000210877                 db    0
.data.rel.ro:0000000000210878                 db    0
.data.rel.ro:0000000000210879                 db    0
.data.rel.ro:000000000021087A                 db    0
.data.rel.ro:000000000021087B                 db    0
.data.rel.ro:000000000021087C                 db    0
.data.rel.ro:000000000021087D                 db    0
.data.rel.ro:000000000021087E                 db    0
.data.rel.ro:000000000021087F                 db    0
.data.rel.ro:0000000000210880                 dq offset aPrterase     ; "prterase"
.data.rel.ro:0000000000210888                 db    3
.data.rel.ro:0000000000210889                 db    0
.data.rel.ro:000000000021088A                 db    0
.data.rel.ro:000000000021088B                 db    0
.data.rel.ro:000000000021088C                 db  0Ch
.data.rel.ro:000000000021088D                 db    0
.data.rel.ro:000000000021088E                 db    0
.data.rel.ro:000000000021088F                 db    0
.data.rel.ro:0000000000210890                 db    0
.data.rel.ro:0000000000210891                 db    4
.data.rel.ro:0000000000210892                 db    0
.data.rel.ro:0000000000210893                 db    0
.data.rel.ro:0000000000210894                 db    0
.data.rel.ro:0000000000210895                 db    0
.data.rel.ro:0000000000210896                 db    0
.data.rel.ro:0000000000210897                 db    0
.data.rel.ro:0000000000210898                 db    0
.data.rel.ro:0000000000210899                 db    0
.data.rel.ro:000000000021089A                 db    0
.data.rel.ro:000000000021089B                 db    0
.data.rel.ro:000000000021089C                 db    0
.data.rel.ro:000000000021089D                 db    0
.data.rel.ro:000000000021089E                 db    0
.data.rel.ro:000000000021089F                 db    0
.data.rel.ro:00000000002108A0                 dq offset aEchoctl      ; "echoctl"
.data.rel.ro:00000000002108A8                 db    3
.data.rel.ro:00000000002108A9                 db    0
.data.rel.ro:00000000002108AA                 db    0
.data.rel.ro:00000000002108AB                 db    0
.data.rel.ro:00000000002108AC                 db    5
.data.rel.ro:00000000002108AD                 db    0
.data.rel.ro:00000000002108AE                 db    0
.data.rel.ro:00000000002108AF                 db    0
.data.rel.ro:00000000002108B0                 db    0
.data.rel.ro:00000000002108B1                 db    2
.data.rel.ro:00000000002108B2                 db    0
.data.rel.ro:00000000002108B3                 db    0
.data.rel.ro:00000000002108B4                 db    0
.data.rel.ro:00000000002108B5                 db    0
.data.rel.ro:00000000002108B6                 db    0
.data.rel.ro:00000000002108B7                 db    0
.data.rel.ro:00000000002108B8                 db    0
.data.rel.ro:00000000002108B9                 db    0
.data.rel.ro:00000000002108BA                 db    0
.data.rel.ro:00000000002108BB                 db    0
.data.rel.ro:00000000002108BC                 db    0
.data.rel.ro:00000000002108BD                 db    0
.data.rel.ro:00000000002108BE                 db    0
.data.rel.ro:00000000002108BF                 db    0
.data.rel.ro:00000000002108C0                 dq offset aCtlecho      ; "ctlecho"
.data.rel.ro:00000000002108C8                 db    3
.data.rel.ro:00000000002108C9                 db    0
.data.rel.ro:00000000002108CA                 db    0
.data.rel.ro:00000000002108CB                 db    0
.data.rel.ro:00000000002108CC                 db  0Ch
.data.rel.ro:00000000002108CD                 db    0
.data.rel.ro:00000000002108CE                 db    0
.data.rel.ro:00000000002108CF                 db    0
.data.rel.ro:00000000002108D0                 db    0
.data.rel.ro:00000000002108D1                 db    2
.data.rel.ro:00000000002108D2                 db    0
.data.rel.ro:00000000002108D3                 db    0
.data.rel.ro:00000000002108D4                 db    0
.data.rel.ro:00000000002108D5                 db    0
.data.rel.ro:00000000002108D6                 db    0
.data.rel.ro:00000000002108D7                 db    0
.data.rel.ro:00000000002108D8                 db    0
.data.rel.ro:00000000002108D9                 db    0
.data.rel.ro:00000000002108DA                 db    0
.data.rel.ro:00000000002108DB                 db    0
.data.rel.ro:00000000002108DC                 db    0
.data.rel.ro:00000000002108DD                 db    0
.data.rel.ro:00000000002108DE                 db    0
.data.rel.ro:00000000002108DF                 db    0
.data.rel.ro:00000000002108E0                 dq offset aEchoeEchoctlEc+0Eh ; "echoke"
.data.rel.ro:00000000002108E8                 db    3
.data.rel.ro:00000000002108E9                 db    0
.data.rel.ro:00000000002108EA                 db    0
.data.rel.ro:00000000002108EB                 db    0
.data.rel.ro:00000000002108EC                 db    5
.data.rel.ro:00000000002108ED                 db    0
.data.rel.ro:00000000002108EE                 db    0
.data.rel.ro:00000000002108EF                 db    0
.data.rel.ro:00000000002108F0                 db    0
.data.rel.ro:00000000002108F1                 db    8
.data.rel.ro:00000000002108F2                 db    0
.data.rel.ro:00000000002108F3                 db    0
.data.rel.ro:00000000002108F4                 db    0
.data.rel.ro:00000000002108F5                 db    0
.data.rel.ro:00000000002108F6                 db    0
.data.rel.ro:00000000002108F7                 db    0
.data.rel.ro:00000000002108F8                 db    0
.data.rel.ro:00000000002108F9                 db    0
.data.rel.ro:00000000002108FA                 db    0
.data.rel.ro:00000000002108FB                 db    0
.data.rel.ro:00000000002108FC                 db    0
.data.rel.ro:00000000002108FD                 db    0
.data.rel.ro:00000000002108FE                 db    0
.data.rel.ro:00000000002108FF                 db    0
.data.rel.ro:0000000000210900                 dq offset aCrtkill      ; "crtkill"
.data.rel.ro:0000000000210908                 db    3
.data.rel.ro:0000000000210909                 db    0
.data.rel.ro:000000000021090A                 db    0
.data.rel.ro:000000000021090B                 db    0
.data.rel.ro:000000000021090C                 db  0Ch
.data.rel.ro:000000000021090D                 db    0
.data.rel.ro:000000000021090E                 db    0
.data.rel.ro:000000000021090F                 db    0
.data.rel.ro:0000000000210910                 db    0
.data.rel.ro:0000000000210911                 db    8
.data.rel.ro:0000000000210912                 db    0
.data.rel.ro:0000000000210913                 db    0
.data.rel.ro:0000000000210914                 db    0
.data.rel.ro:0000000000210915                 db    0
.data.rel.ro:0000000000210916                 db    0
.data.rel.ro:0000000000210917                 db    0
.data.rel.ro:0000000000210918                 db    0
.data.rel.ro:0000000000210919                 db    0
.data.rel.ro:000000000021091A                 db    0
.data.rel.ro:000000000021091B                 db    0
.data.rel.ro:000000000021091C                 db    0
.data.rel.ro:000000000021091D                 db    0
.data.rel.ro:000000000021091E                 db    0
.data.rel.ro:000000000021091F                 db    0
.data.rel.ro:0000000000210920                 dq offset aFlusho       ; "flusho"
.data.rel.ro:0000000000210928                 db    3
.data.rel.ro:0000000000210929                 db    0
.data.rel.ro:000000000021092A                 db    0
.data.rel.ro:000000000021092B                 db    0
.data.rel.ro:000000000021092C                 db    6
.data.rel.ro:000000000021092D                 db    0
.data.rel.ro:000000000021092E                 db    0
.data.rel.ro:000000000021092F                 db    0
.data.rel.ro:0000000000210930                 db    0
.data.rel.ro:0000000000210931                 db  10h
.data.rel.ro:0000000000210932                 db    0
.data.rel.ro:0000000000210933                 db    0
.data.rel.ro:0000000000210934                 db    0
.data.rel.ro:0000000000210935                 db    0
.data.rel.ro:0000000000210936                 db    0
.data.rel.ro:0000000000210937                 db    0
.data.rel.ro:0000000000210938                 db    0
.data.rel.ro:0000000000210939                 db    0
.data.rel.ro:000000000021093A                 db    0
.data.rel.ro:000000000021093B                 db    0
.data.rel.ro:000000000021093C                 db    0
.data.rel.ro:000000000021093D                 db    0
.data.rel.ro:000000000021093E                 db    0
.data.rel.ro:000000000021093F                 db    0
.data.rel.ro:0000000000210940                 dq offset aExtproc      ; "extproc"
.data.rel.ro:0000000000210948                 db    3
.data.rel.ro:0000000000210949                 db    0
.data.rel.ro:000000000021094A                 db    0
.data.rel.ro:000000000021094B                 db    0
.data.rel.ro:000000000021094C                 db    6
.data.rel.ro:000000000021094D                 db    0
.data.rel.ro:000000000021094E                 db    0
.data.rel.ro:000000000021094F                 db    0
.data.rel.ro:0000000000210950                 db    0
.data.rel.ro:0000000000210951                 db    0
.data.rel.ro:0000000000210952                 db    1
.data.rel.ro:0000000000210953                 db    0
.data.rel.ro:0000000000210954                 db    0
.data.rel.ro:0000000000210955                 db    0
.data.rel.ro:0000000000210956                 db    0
.data.rel.ro:0000000000210957                 db    0
.data.rel.ro:0000000000210958                 db    0
.data.rel.ro:0000000000210959                 db    0
.data.rel.ro:000000000021095A                 db    0
.data.rel.ro:000000000021095B                 db    0
.data.rel.ro:000000000021095C                 db    0
.data.rel.ro:000000000021095D                 db    0
.data.rel.ro:000000000021095E                 db    0
.data.rel.ro:000000000021095F                 db    0
.data.rel.ro:0000000000210960                 dq offset aEvenp        ; "evenp"
.data.rel.ro:0000000000210968                 db    4
.data.rel.ro:0000000000210969                 db    0
.data.rel.ro:000000000021096A                 db    0
.data.rel.ro:000000000021096B                 db    0
.data.rel.ro:000000000021096C                 db  0Ch
.data.rel.ro:000000000021096D                 db    0
.data.rel.ro:000000000021096E                 db    0
.data.rel.ro:000000000021096F                 db    0
.data.rel.ro:0000000000210970                 db    0
.data.rel.ro:0000000000210971                 db    0
.data.rel.ro:0000000000210972                 db    0
.data.rel.ro:0000000000210973                 db    0
.data.rel.ro:0000000000210974                 db    0
.data.rel.ro:0000000000210975                 db    0
.data.rel.ro:0000000000210976                 db    0
.data.rel.ro:0000000000210977                 db    0
.data.rel.ro:0000000000210978                 db    0
.data.rel.ro:0000000000210979                 db    0
.data.rel.ro:000000000021097A                 db    0
.data.rel.ro:000000000021097B                 db    0
.data.rel.ro:000000000021097C                 db    0
.data.rel.ro:000000000021097D                 db    0
.data.rel.ro:000000000021097E                 db    0
.data.rel.ro:000000000021097F                 db    0
.data.rel.ro:0000000000210980                 dq offset aParity       ; "parity"
.data.rel.ro:0000000000210988                 db    4
.data.rel.ro:0000000000210989                 db    0
.data.rel.ro:000000000021098A                 db    0
.data.rel.ro:000000000021098B                 db    0
.data.rel.ro:000000000021098C                 db  0Ch
.data.rel.ro:000000000021098D                 db    0
.data.rel.ro:000000000021098E                 db    0
.data.rel.ro:000000000021098F                 db    0
.data.rel.ro:0000000000210990                 db    0
.data.rel.ro:0000000000210991                 db    0
.data.rel.ro:0000000000210992                 db    0
.data.rel.ro:0000000000210993                 db    0
.data.rel.ro:0000000000210994                 db    0
.data.rel.ro:0000000000210995                 db    0
.data.rel.ro:0000000000210996                 db    0
.data.rel.ro:0000000000210997                 db    0
.data.rel.ro:0000000000210998                 db    0
.data.rel.ro:0000000000210999                 db    0
.data.rel.ro:000000000021099A                 db    0
.data.rel.ro:000000000021099B                 db    0
.data.rel.ro:000000000021099C                 db    0
.data.rel.ro:000000000021099D                 db    0
.data.rel.ro:000000000021099E                 db    0
.data.rel.ro:000000000021099F                 db    0
.data.rel.ro:00000000002109A0                 dq offset aOddp         ; "oddp"
.data.rel.ro:00000000002109A8                 db    4
.data.rel.ro:00000000002109A9                 db    0
.data.rel.ro:00000000002109AA                 db    0
.data.rel.ro:00000000002109AB                 db    0
.data.rel.ro:00000000002109AC                 db  0Ch
.data.rel.ro:00000000002109AD                 db    0
.data.rel.ro:00000000002109AE                 db    0
.data.rel.ro:00000000002109AF                 db    0
.data.rel.ro:00000000002109B0                 db    0
.data.rel.ro:00000000002109B1                 db    0
.data.rel.ro:00000000002109B2                 db    0
.data.rel.ro:00000000002109B3                 db    0
.data.rel.ro:00000000002109B4                 db    0
.data.rel.ro:00000000002109B5                 db    0
.data.rel.ro:00000000002109B6                 db    0
.data.rel.ro:00000000002109B7                 db    0
.data.rel.ro:00000000002109B8                 db    0
.data.rel.ro:00000000002109B9                 db    0
.data.rel.ro:00000000002109BA                 db    0
.data.rel.ro:00000000002109BB                 db    0
.data.rel.ro:00000000002109BC                 db    0
.data.rel.ro:00000000002109BD                 db    0
.data.rel.ro:00000000002109BE                 db    0
.data.rel.ro:00000000002109BF                 db    0
.data.rel.ro:00000000002109C0                 dq offset aNl           ; "nl"
.data.rel.ro:00000000002109C8                 db    4
.data.rel.ro:00000000002109C9                 db    0
.data.rel.ro:00000000002109CA                 db    0
.data.rel.ro:00000000002109CB                 db    0
.data.rel.ro:00000000002109CC                 db  0Ch
.data.rel.ro:00000000002109CD                 db    0
.data.rel.ro:00000000002109CE                 db    0
.data.rel.ro:00000000002109CF                 db    0
.data.rel.ro:00000000002109D0                 db    0
.data.rel.ro:00000000002109D1                 db    0
.data.rel.ro:00000000002109D2                 db    0
.data.rel.ro:00000000002109D3                 db    0
.data.rel.ro:00000000002109D4                 db    0
.data.rel.ro:00000000002109D5                 db    0
.data.rel.ro:00000000002109D6                 db    0
.data.rel.ro:00000000002109D7                 db    0
.data.rel.ro:00000000002109D8                 db    0
.data.rel.ro:00000000002109D9                 db    0
.data.rel.ro:00000000002109DA                 db    0
.data.rel.ro:00000000002109DB                 db    0
.data.rel.ro:00000000002109DC                 db    0
.data.rel.ro:00000000002109DD                 db    0
.data.rel.ro:00000000002109DE                 db    0
.data.rel.ro:00000000002109DF                 db    0
.data.rel.ro:00000000002109E0                 dq offset aEk           ; "ek"
.data.rel.ro:00000000002109E8                 db    4
.data.rel.ro:00000000002109E9                 db    0
.data.rel.ro:00000000002109EA                 db    0
.data.rel.ro:00000000002109EB                 db    0
.data.rel.ro:00000000002109EC                 db    8
.data.rel.ro:00000000002109ED                 db    0
.data.rel.ro:00000000002109EE                 db    0
.data.rel.ro:00000000002109EF                 db    0
.data.rel.ro:00000000002109F0                 db    0
.data.rel.ro:00000000002109F1                 db    0
.data.rel.ro:00000000002109F2                 db    0
.data.rel.ro:00000000002109F3                 db    0
.data.rel.ro:00000000002109F4                 db    0
.data.rel.ro:00000000002109F5                 db    0
.data.rel.ro:00000000002109F6                 db    0
.data.rel.ro:00000000002109F7                 db    0
.data.rel.ro:00000000002109F8                 db    0
.data.rel.ro:00000000002109F9                 db    0
.data.rel.ro:00000000002109FA                 db    0
.data.rel.ro:00000000002109FB                 db    0
.data.rel.ro:00000000002109FC                 db    0
.data.rel.ro:00000000002109FD                 db    0
.data.rel.ro:00000000002109FE                 db    0
.data.rel.ro:00000000002109FF                 db    0
.data.rel.ro:0000000000210A00                 dq offset aSane         ; "sane"
.data.rel.ro:0000000000210A08                 db    4
.data.rel.ro:0000000000210A09                 db    0
.data.rel.ro:0000000000210A0A                 db    0
.data.rel.ro:0000000000210A0B                 db    0
.data.rel.ro:0000000000210A0C                 db    8
.data.rel.ro:0000000000210A0D                 db    0
.data.rel.ro:0000000000210A0E                 db    0
.data.rel.ro:0000000000210A0F                 db    0
.data.rel.ro:0000000000210A10                 db    0
.data.rel.ro:0000000000210A11                 db    0
.data.rel.ro:0000000000210A12                 db    0
.data.rel.ro:0000000000210A13                 db    0
.data.rel.ro:0000000000210A14                 db    0
.data.rel.ro:0000000000210A15                 db    0
.data.rel.ro:0000000000210A16                 db    0
.data.rel.ro:0000000000210A17                 db    0
.data.rel.ro:0000000000210A18                 db    0
.data.rel.ro:0000000000210A19                 db    0
.data.rel.ro:0000000000210A1A                 db    0
.data.rel.ro:0000000000210A1B                 db    0
.data.rel.ro:0000000000210A1C                 db    0
.data.rel.ro:0000000000210A1D                 db    0
.data.rel.ro:0000000000210A1E                 db    0
.data.rel.ro:0000000000210A1F                 db    0
.data.rel.ro:0000000000210A20                 dq offset aCooked       ; "cooked"
.data.rel.ro:0000000000210A28                 db    4
.data.rel.ro:0000000000210A29                 db    0
.data.rel.ro:0000000000210A2A                 db    0
.data.rel.ro:0000000000210A2B                 db    0
.data.rel.ro:0000000000210A2C                 db  0Ch
.data.rel.ro:0000000000210A2D                 db    0
.data.rel.ro:0000000000210A2E                 db    0
.data.rel.ro:0000000000210A2F                 db    0
.data.rel.ro:0000000000210A30                 db    0
.data.rel.ro:0000000000210A31                 db    0
.data.rel.ro:0000000000210A32                 db    0
.data.rel.ro:0000000000210A33                 db    0
.data.rel.ro:0000000000210A34                 db    0
.data.rel.ro:0000000000210A35                 db    0
.data.rel.ro:0000000000210A36                 db    0
.data.rel.ro:0000000000210A37                 db    0
.data.rel.ro:0000000000210A38                 db    0
.data.rel.ro:0000000000210A39                 db    0
.data.rel.ro:0000000000210A3A                 db    0
.data.rel.ro:0000000000210A3B                 db    0
.data.rel.ro:0000000000210A3C                 db    0
.data.rel.ro:0000000000210A3D                 db    0
.data.rel.ro:0000000000210A3E                 db    0
.data.rel.ro:0000000000210A3F                 db    0
.data.rel.ro:0000000000210A40                 dq offset aRaw          ; "raw"
.data.rel.ro:0000000000210A48                 db    4
.data.rel.ro:0000000000210A49                 db    0
.data.rel.ro:0000000000210A4A                 db    0
.data.rel.ro:0000000000210A4B                 db    0
.data.rel.ro:0000000000210A4C                 db  0Ch
.data.rel.ro:0000000000210A4D                 db    0
.data.rel.ro:0000000000210A4E                 db    0
.data.rel.ro:0000000000210A4F                 db    0
.data.rel.ro:0000000000210A50                 db    0
.data.rel.ro:0000000000210A51                 db    0
.data.rel.ro:0000000000210A52                 db    0
.data.rel.ro:0000000000210A53                 db    0
.data.rel.ro:0000000000210A54                 db    0
.data.rel.ro:0000000000210A55                 db    0
.data.rel.ro:0000000000210A56                 db    0
.data.rel.ro:0000000000210A57                 db    0
.data.rel.ro:0000000000210A58                 db    0
.data.rel.ro:0000000000210A59                 db    0
.data.rel.ro:0000000000210A5A                 db    0
.data.rel.ro:0000000000210A5B                 db    0
.data.rel.ro:0000000000210A5C                 db    0
.data.rel.ro:0000000000210A5D                 db    0
.data.rel.ro:0000000000210A5E                 db    0
.data.rel.ro:0000000000210A5F                 db    0
.data.rel.ro:0000000000210A60                 dq offset aPass8        ; "pass8"
.data.rel.ro:0000000000210A68                 db    4
.data.rel.ro:0000000000210A69                 db    0
.data.rel.ro:0000000000210A6A                 db    0
.data.rel.ro:0000000000210A6B                 db    0
.data.rel.ro:0000000000210A6C                 db  0Ch
.data.rel.ro:0000000000210A6D                 db    0
.data.rel.ro:0000000000210A6E                 db    0
.data.rel.ro:0000000000210A6F                 db    0
.data.rel.ro:0000000000210A70                 db    0
.data.rel.ro:0000000000210A71                 db    0
.data.rel.ro:0000000000210A72                 db    0
.data.rel.ro:0000000000210A73                 db    0
.data.rel.ro:0000000000210A74                 db    0
.data.rel.ro:0000000000210A75                 db    0
.data.rel.ro:0000000000210A76                 db    0
.data.rel.ro:0000000000210A77                 db    0
.data.rel.ro:0000000000210A78                 db    0
.data.rel.ro:0000000000210A79                 db    0
.data.rel.ro:0000000000210A7A                 db    0
.data.rel.ro:0000000000210A7B                 db    0
.data.rel.ro:0000000000210A7C                 db    0
.data.rel.ro:0000000000210A7D                 db    0
.data.rel.ro:0000000000210A7E                 db    0
.data.rel.ro:0000000000210A7F                 db    0
.data.rel.ro:0000000000210A80                 dq offset aLitout       ; "litout"
.data.rel.ro:0000000000210A88                 db    4
.data.rel.ro:0000000000210A89                 db    0
.data.rel.ro:0000000000210A8A                 db    0
.data.rel.ro:0000000000210A8B                 db    0
.data.rel.ro:0000000000210A8C                 db  0Ch
.data.rel.ro:0000000000210A8D                 db    0
.data.rel.ro:0000000000210A8E                 db    0
.data.rel.ro:0000000000210A8F                 db    0
.data.rel.ro:0000000000210A90                 db    0
.data.rel.ro:0000000000210A91                 db    0
.data.rel.ro:0000000000210A92                 db    0
.data.rel.ro:0000000000210A93                 db    0
.data.rel.ro:0000000000210A94                 db    0
.data.rel.ro:0000000000210A95                 db    0
.data.rel.ro:0000000000210A96                 db    0
.data.rel.ro:0000000000210A97                 db    0
.data.rel.ro:0000000000210A98                 db    0
.data.rel.ro:0000000000210A99                 db    0
.data.rel.ro:0000000000210A9A                 db    0
.data.rel.ro:0000000000210A9B                 db    0
.data.rel.ro:0000000000210A9C                 db    0
.data.rel.ro:0000000000210A9D                 db    0
.data.rel.ro:0000000000210A9E                 db    0
.data.rel.ro:0000000000210A9F                 db    0
.data.rel.ro:0000000000210AA0                 dq offset aCbreak       ; "cbreak"
.data.rel.ro:0000000000210AA8                 db    4
.data.rel.ro:0000000000210AA9                 db    0
.data.rel.ro:0000000000210AAA                 db    0
.data.rel.ro:0000000000210AAB                 db    0
.data.rel.ro:0000000000210AAC                 db  0Ch
.data.rel.ro:0000000000210AAD                 db    0
.data.rel.ro:0000000000210AAE                 db    0
.data.rel.ro:0000000000210AAF                 db    0
.data.rel.ro:0000000000210AB0                 db    0
.data.rel.ro:0000000000210AB1                 db    0
.data.rel.ro:0000000000210AB2                 db    0
.data.rel.ro:0000000000210AB3                 db    0
.data.rel.ro:0000000000210AB4                 db    0
.data.rel.ro:0000000000210AB5                 db    0
.data.rel.ro:0000000000210AB6                 db    0
.data.rel.ro:0000000000210AB7                 db    0
.data.rel.ro:0000000000210AB8                 db    0
.data.rel.ro:0000000000210AB9                 db    0
.data.rel.ro:0000000000210ABA                 db    0
.data.rel.ro:0000000000210ABB                 db    0
.data.rel.ro:0000000000210ABC                 db    0
.data.rel.ro:0000000000210ABD                 db    0
.data.rel.ro:0000000000210ABE                 db    0
.data.rel.ro:0000000000210ABF                 db    0
.data.rel.ro:0000000000210AC0                 dq offset aDecctlq      ; "decctlq"
.data.rel.ro:0000000000210AC8                 db    4
.data.rel.ro:0000000000210AC9                 db    0
.data.rel.ro:0000000000210ACA                 db    0
.data.rel.ro:0000000000210ACB                 db    0
.data.rel.ro:0000000000210ACC                 db  0Ch
.data.rel.ro:0000000000210ACD                 db    0
.data.rel.ro:0000000000210ACE                 db    0
.data.rel.ro:0000000000210ACF                 db    0
.data.rel.ro:0000000000210AD0                 db    0
.data.rel.ro:0000000000210AD1                 db    0
.data.rel.ro:0000000000210AD2                 db    0
.data.rel.ro:0000000000210AD3                 db    0
.data.rel.ro:0000000000210AD4                 db    0
.data.rel.ro:0000000000210AD5                 db    0
.data.rel.ro:0000000000210AD6                 db    0
.data.rel.ro:0000000000210AD7                 db    0
.data.rel.ro:0000000000210AD8                 db    0
.data.rel.ro:0000000000210AD9                 db    0
.data.rel.ro:0000000000210ADA                 db    0
.data.rel.ro:0000000000210ADB                 db    0
.data.rel.ro:0000000000210ADC                 db    0
.data.rel.ro:0000000000210ADD                 db    0
.data.rel.ro:0000000000210ADE                 db    0
.data.rel.ro:0000000000210ADF                 db    0
.data.rel.ro:0000000000210AE0                 dq offset aTabs         ; "tabs"
.data.rel.ro:0000000000210AE8                 db    4
.data.rel.ro:0000000000210AE9                 db    0
.data.rel.ro:0000000000210AEA                 db    0
.data.rel.ro:0000000000210AEB                 db    0
.data.rel.ro:0000000000210AEC                 db  0Ch
.data.rel.ro:0000000000210AED                 db    0
.data.rel.ro:0000000000210AEE                 db    0
.data.rel.ro:0000000000210AEF                 db    0
.data.rel.ro:0000000000210AF0                 db    0
.data.rel.ro:0000000000210AF1                 db    0
.data.rel.ro:0000000000210AF2                 db    0
.data.rel.ro:0000000000210AF3                 db    0
.data.rel.ro:0000000000210AF4                 db    0
.data.rel.ro:0000000000210AF5                 db    0
.data.rel.ro:0000000000210AF6                 db    0
.data.rel.ro:0000000000210AF7                 db    0
.data.rel.ro:0000000000210AF8                 db    0
.data.rel.ro:0000000000210AF9                 db    0
.data.rel.ro:0000000000210AFA                 db    0
.data.rel.ro:0000000000210AFB                 db    0
.data.rel.ro:0000000000210AFC                 db    0
.data.rel.ro:0000000000210AFD                 db    0
.data.rel.ro:0000000000210AFE                 db    0
.data.rel.ro:0000000000210AFF                 db    0
.data.rel.ro:0000000000210B00                 dq offset aLcase        ; "lcase"
.data.rel.ro:0000000000210B08                 db    4
.data.rel.ro:0000000000210B09                 db    0
.data.rel.ro:0000000000210B0A                 db    0
.data.rel.ro:0000000000210B0B                 db    0
.data.rel.ro:0000000000210B0C                 db  0Ch
.data.rel.ro:0000000000210B0D                 db    0
.data.rel.ro:0000000000210B0E                 db    0
.data.rel.ro:0000000000210B0F                 db    0
.data.rel.ro:0000000000210B10                 db    0
.data.rel.ro:0000000000210B11                 db    0
.data.rel.ro:0000000000210B12                 db    0
.data.rel.ro:0000000000210B13                 db    0
.data.rel.ro:0000000000210B14                 db    0
.data.rel.ro:0000000000210B15                 db    0
.data.rel.ro:0000000000210B16                 db    0
.data.rel.ro:0000000000210B17                 db    0
.data.rel.ro:0000000000210B18                 db    0
.data.rel.ro:0000000000210B19                 db    0
.data.rel.ro:0000000000210B1A                 db    0
.data.rel.ro:0000000000210B1B                 db    0
.data.rel.ro:0000000000210B1C                 db    0
.data.rel.ro:0000000000210B1D                 db    0
.data.rel.ro:0000000000210B1E                 db    0
.data.rel.ro:0000000000210B1F                 db    0
.data.rel.ro:0000000000210B20                 dq offset aLcase_0      ; "LCASE"
.data.rel.ro:0000000000210B28                 db    4
.data.rel.ro:0000000000210B29                 db    0
.data.rel.ro:0000000000210B2A                 db    0
.data.rel.ro:0000000000210B2B                 db    0
.data.rel.ro:0000000000210B2C                 db  0Ch
.data.rel.ro:0000000000210B2D                 db    0
.data.rel.ro:0000000000210B2E                 db    0
.data.rel.ro:0000000000210B2F                 db    0
.data.rel.ro:0000000000210B30                 db    0
.data.rel.ro:0000000000210B31                 db    0
.data.rel.ro:0000000000210B32                 db    0
.data.rel.ro:0000000000210B33                 db    0
.data.rel.ro:0000000000210B34                 db    0
.data.rel.ro:0000000000210B35                 db    0
.data.rel.ro:0000000000210B36                 db    0
.data.rel.ro:0000000000210B37                 db    0
.data.rel.ro:0000000000210B38                 db    0
.data.rel.ro:0000000000210B39                 db    0
.data.rel.ro:0000000000210B3A                 db    0
.data.rel.ro:0000000000210B3B                 db    0
.data.rel.ro:0000000000210B3C                 db    0
.data.rel.ro:0000000000210B3D                 db    0
.data.rel.ro:0000000000210B3E                 db    0
.data.rel.ro:0000000000210B3F                 db    0
.data.rel.ro:0000000000210B40                 dq offset aCrt          ; "crt"
.data.rel.ro:0000000000210B48                 db    4
.data.rel.ro:0000000000210B49                 db    0
.data.rel.ro:0000000000210B4A                 db    0
.data.rel.ro:0000000000210B4B                 db    0
.data.rel.ro:0000000000210B4C                 db    8
.data.rel.ro:0000000000210B4D                 db    0
.data.rel.ro:0000000000210B4E                 db    0
.data.rel.ro:0000000000210B4F                 db    0
.data.rel.ro:0000000000210B50                 db    0
.data.rel.ro:0000000000210B51                 db    0
.data.rel.ro:0000000000210B52                 db    0
.data.rel.ro:0000000000210B53                 db    0
.data.rel.ro:0000000000210B54                 db    0
.data.rel.ro:0000000000210B55                 db    0
.data.rel.ro:0000000000210B56                 db    0
.data.rel.ro:0000000000210B57                 db    0
.data.rel.ro:0000000000210B58                 db    0
.data.rel.ro:0000000000210B59                 db    0
.data.rel.ro:0000000000210B5A                 db    0
.data.rel.ro:0000000000210B5B                 db    0
.data.rel.ro:0000000000210B5C                 db    0
.data.rel.ro:0000000000210B5D                 db    0
.data.rel.ro:0000000000210B5E                 db    0
.data.rel.ro:0000000000210B5F                 db    0
.data.rel.ro:0000000000210B60                 dq offset aDec          ; "dec"
.data.rel.ro:0000000000210B68                 db    4
.data.rel.ro:0000000000210B69                 db    0
.data.rel.ro:0000000000210B6A                 db    0
.data.rel.ro:0000000000210B6B                 db    0
.data.rel.ro:0000000000210B6C                 db    8
.data.rel.ro:0000000000210B6D                 db    0
.data.rel.ro:0000000000210B6E                 db    0
.data.rel.ro:0000000000210B6F                 db    0
.data.rel.ro:0000000000210B70                 db    0
.data.rel.ro:0000000000210B71                 db    0
.data.rel.ro:0000000000210B72                 db    0
.data.rel.ro:0000000000210B73                 db    0
.data.rel.ro:0000000000210B74                 db    0
.data.rel.ro:0000000000210B75                 db    0
.data.rel.ro:0000000000210B76                 db    0
.data.rel.ro:0000000000210B77                 db    0
.data.rel.ro:0000000000210B78                 db    0
.data.rel.ro:0000000000210B79                 db    0
.data.rel.ro:0000000000210B7A                 db    0
.data.rel.ro:0000000000210B7B                 db    0
.data.rel.ro:0000000000210B7C                 db    0
.data.rel.ro:0000000000210B7D                 db    0
.data.rel.ro:0000000000210B7E                 db    0
.data.rel.ro:0000000000210B7F                 db    0
.data.rel.ro:0000000000210B80                 db    0
.data.rel.ro:0000000000210B81                 db    0
.data.rel.ro:0000000000210B82                 db    0
.data.rel.ro:0000000000210B83                 db    0
.data.rel.ro:0000000000210B84                 db    0
.data.rel.ro:0000000000210B85                 db    0
.data.rel.ro:0000000000210B86                 db    0
.data.rel.ro:0000000000210B87                 db    0
.data.rel.ro:0000000000210B88                 db    0
.data.rel.ro:0000000000210B89                 db    0
.data.rel.ro:0000000000210B8A                 db    0
.data.rel.ro:0000000000210B8B                 db    0
.data.rel.ro:0000000000210B8C                 db    0
.data.rel.ro:0000000000210B8D                 db    0
.data.rel.ro:0000000000210B8E                 db    0
.data.rel.ro:0000000000210B8F                 db    0
.data.rel.ro:0000000000210B90                 db    0
.data.rel.ro:0000000000210B91                 db    0
.data.rel.ro:0000000000210B92                 db    0
.data.rel.ro:0000000000210B93                 db    0
.data.rel.ro:0000000000210B94                 db    0
.data.rel.ro:0000000000210B95                 db    0
.data.rel.ro:0000000000210B96                 db    0
.data.rel.ro:0000000000210B97                 db    0
.data.rel.ro:0000000000210B98                 db    0
.data.rel.ro:0000000000210B99                 db    0
.data.rel.ro:0000000000210B9A                 db    0
.data.rel.ro:0000000000210B9B                 db    0
.data.rel.ro:0000000000210B9C                 db    0
.data.rel.ro:0000000000210B9D                 db    0
.data.rel.ro:0000000000210B9E                 db    0
.data.rel.ro:0000000000210B9F                 db    0
.data.rel.ro:0000000000210BA0                 public quoting_style_args
.data.rel.ro:0000000000210BA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000210BA8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000210BB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000210BB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000210BC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000210BC8                 dq offset file+1Bh      ; "c"
.data.rel.ro:0000000000210BD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000210BD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000210BE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000210BE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000210BF0                 db    0
.data.rel.ro:0000000000210BF1                 db    0
.data.rel.ro:0000000000210BF2                 db    0
.data.rel.ro:0000000000210BF3                 db    0
.data.rel.ro:0000000000210BF4                 db    0
.data.rel.ro:0000000000210BF5                 db    0
.data.rel.ro:0000000000210BF6                 db    0
.data.rel.ro:0000000000210BF7                 db    0
.data.rel.ro:0000000000210BF7 _data_rel_ro    ends
.data.rel.ro:0000000000210BF7
LOAD:0000000000210BF8 ; ELF Dynamic Information
LOAD:0000000000210BF8 ; ===========================================================================
LOAD:0000000000210BF8
LOAD:0000000000210BF8 ; Segment type: Pure data
LOAD:0000000000210BF8 ; Segment permissions: Read/Write
LOAD:0000000000210BF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000210BF8                 assume cs:LOAD
LOAD:0000000000210BF8                 ;org 210BF8h
LOAD:0000000000210BF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000210BF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000210BF8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000210C08                 Elf64_Dyn <0Ch, 23E0h>  ; DT_INIT
LOAD:0000000000210C18                 Elf64_Dyn <0Dh, 0B2D0h> ; DT_FINI
LOAD:0000000000210C28                 Elf64_Dyn <19h, 20FA50h> ; DT_INIT_ARRAY
LOAD:0000000000210C38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000210C48                 Elf64_Dyn <1Ah, 20FA58h> ; DT_FINI_ARRAY
LOAD:0000000000210C58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000210C68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000210C78                 Elf64_Dyn <5, 9D0h>     ; DT_STRTAB
LOAD:0000000000210C88                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000210C98                 Elf64_Dyn <0Ah, 33Fh>   ; DT_STRSZ
LOAD:0000000000210CA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000210CB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000210CC8                 Elf64_Dyn <3, 210DE8h>  ; DT_PLTGOT
LOAD:0000000000210CD8                 Elf64_Dyn <2, 588h>     ; DT_PLTRELSZ
LOAD:0000000000210CE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000210CF8                 Elf64_Dyn <17h, 1E58h>  ; DT_JMPREL
LOAD:0000000000210D08                 Elf64_Dyn <7, 0E08h>    ; DT_RELA
LOAD:0000000000210D18                 Elf64_Dyn <8, 1050h>    ; DT_RELASZ
LOAD:0000000000210D28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000210D38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000210D48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000210D58                 Elf64_Dyn <6FFFFFFEh, 0DA8h> ; DT_VERNEED
LOAD:0000000000210D68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000210D78                 Elf64_Dyn <6FFFFFF0h, 0D10h> ; DT_VERSYM
LOAD:0000000000210D88                 Elf64_Dyn <6FFFFFF9h, 0A2h> ; DT_RELACOUNT
LOAD:0000000000210D98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000210DA8                 db    0
LOAD:0000000000210DA9                 db    0
LOAD:0000000000210DAA                 db    0
LOAD:0000000000210DAB                 db    0
LOAD:0000000000210DAC                 db    0
LOAD:0000000000210DAD                 db    0
LOAD:0000000000210DAE                 db    0
LOAD:0000000000210DAF                 db    0
LOAD:0000000000210DB0                 db    0
LOAD:0000000000210DB1                 db    0
LOAD:0000000000210DB2                 db    0
LOAD:0000000000210DB3                 db    0
LOAD:0000000000210DB4                 db    0
LOAD:0000000000210DB5                 db    0
LOAD:0000000000210DB6                 db    0
LOAD:0000000000210DB7                 db    0
LOAD:0000000000210DB8                 db    0
LOAD:0000000000210DB9                 db    0
LOAD:0000000000210DBA                 db    0
LOAD:0000000000210DBB                 db    0
LOAD:0000000000210DBC                 db    0
LOAD:0000000000210DBD                 db    0
LOAD:0000000000210DBE                 db    0
LOAD:0000000000210DBF                 db    0
LOAD:0000000000210DC0                 db    0
LOAD:0000000000210DC1                 db    0
LOAD:0000000000210DC2                 db    0
LOAD:0000000000210DC3                 db    0
LOAD:0000000000210DC4                 db    0
LOAD:0000000000210DC5                 db    0
LOAD:0000000000210DC6                 db    0
LOAD:0000000000210DC7                 db    0
LOAD:0000000000210DC8                 db    0
LOAD:0000000000210DC9                 db    0
LOAD:0000000000210DCA                 db    0
LOAD:0000000000210DCB                 db    0
LOAD:0000000000210DCC                 db    0
LOAD:0000000000210DCD                 db    0
LOAD:0000000000210DCE                 db    0
LOAD:0000000000210DCF                 db    0
LOAD:0000000000210DD0                 db    0
LOAD:0000000000210DD1                 db    0
LOAD:0000000000210DD2                 db    0
LOAD:0000000000210DD3                 db    0
LOAD:0000000000210DD4                 db    0
LOAD:0000000000210DD5                 db    0
LOAD:0000000000210DD6                 db    0
LOAD:0000000000210DD7                 db    0
LOAD:0000000000210DD8                 db    0
LOAD:0000000000210DD9                 db    0
LOAD:0000000000210DDA                 db    0
LOAD:0000000000210DDB                 db    0
LOAD:0000000000210DDC                 db    0
LOAD:0000000000210DDD                 db    0
LOAD:0000000000210DDE                 db    0
LOAD:0000000000210DDF                 db    0
LOAD:0000000000210DE0                 db    0
LOAD:0000000000210DE1                 db    0
LOAD:0000000000210DE2                 db    0
LOAD:0000000000210DE3                 db    0
LOAD:0000000000210DE4                 db    0
LOAD:0000000000210DE5                 db    0
LOAD:0000000000210DE6                 db    0
LOAD:0000000000210DE7                 db    0
LOAD:0000000000210DE7 LOAD            ends
LOAD:0000000000210DE7
.got:0000000000210DE8 ; ===========================================================================
.got:0000000000210DE8
.got:0000000000210DE8 ; Segment type: Pure data
.got:0000000000210DE8 ; Segment permissions: Read/Write
.got:0000000000210DE8 _got            segment qword public 'DATA' use64
.got:0000000000210DE8                 assume cs:_got
.got:0000000000210DE8                 ;org 210DE8h
.got:0000000000210DE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000210DF0 qword_210DF0    dq 0                    ; DATA XREF: sub_2400↑r
.got:0000000000210DF8 qword_210DF8    dq 0                    ; DATA XREF: sub_2400+6↑r
.got:0000000000210E00 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000210E08 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000210E08                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000210E10 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000210E18 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000210E20 __errno_location_ptr dq offset __errno_location
.got:0000000000210E20                                         ; DATA XREF: ___errno_location↑r
.got:0000000000210E28 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000210E30 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000210E38 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000210E40 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000210E48 cfgetispeed_ptr dq offset cfgetispeed   ; DATA XREF: _cfgetispeed↑r
.got:0000000000210E50 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000210E58 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000210E60 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000210E60                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000210E68 cfsetospeed_ptr dq offset cfsetospeed   ; DATA XREF: _cfsetospeed↑r
.got:0000000000210E70 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000210E78 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000210E78                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000210E80 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000210E88 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000210E88                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000210E90 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000210E98 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000210EA0 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000210EA8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000210EB0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000210EB8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000210EC0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000210EC8 __assert_fail_ptr dq offset __assert_fail
.got:0000000000210EC8                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000210ED0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000210ED0                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000210ED8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000210EE0 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:0000000000210EE8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000210EF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000210EF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000210EF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000210F00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000210F08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000210F10 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000210F18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000210F20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000210F28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000210F30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000210F38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000210F40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000210F48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000210F50 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000210F58 cfgetospeed_ptr dq offset cfgetospeed   ; DATA XREF: _cfgetospeed↑r
.got:0000000000210F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000210F68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000210F70 tcgetattr_ptr   dq offset tcgetattr     ; DATA XREF: _tcgetattr↑r
.got:0000000000210F78 tcsetattr_ptr   dq offset tcsetattr     ; DATA XREF: _tcsetattr↑r
.got:0000000000210F80 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000210F88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000210F90 cfsetispeed_ptr dq offset cfsetispeed   ; DATA XREF: _cfsetispeed↑r
.got:0000000000210F98 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000210FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000210FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000210FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000210FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000210FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000210FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000210FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000210FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000210FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000210FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000210FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000210FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000210FE0                                         ; DATA XREF: start+24↑r
.got:0000000000210FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000210FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000210FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000210FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000210FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000210FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000210FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000210FF8 _got            ends
.got:0000000000210FF8
.data:0000000000211000 ; ===========================================================================
.data:0000000000211000
.data:0000000000211000 ; Segment type: Pure data
.data:0000000000211000 ; Segment permissions: Read/Write
.data:0000000000211000 _data           segment align_32 public 'DATA' use64
.data:0000000000211000                 assume cs:_data
.data:0000000000211000                 ;org 211000h
.data:0000000000211000                 public __data_start ; weak
.data:0000000000211000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000211000                                         ; data_start
.data:0000000000211001                 db    0
.data:0000000000211002                 db    0
.data:0000000000211003                 db    0
.data:0000000000211004                 db    0
.data:0000000000211005                 db    0
.data:0000000000211006                 db    0
.data:0000000000211007                 db    0
.data:0000000000211008                 public __dso_handle
.data:0000000000211008 ; void *_dso_handle
.data:0000000000211008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000211008                                         ; atexit↑r ...
.data:0000000000211010 ; int tcsetattr_options
.data:0000000000211010 tcsetattr_options dd 1                  ; DATA XREF: main:loc_2DF1↑r
.data:0000000000211010                                         ; usage+342↑r ...
.data:0000000000211014                 align 8
.data:0000000000211018                 public Version
.data:0000000000211018 Version         dq offset a831          ; DATA XREF: main+13E↑r
.data:0000000000211018                                         ; "8.31"
.data:0000000000211020                 public exit_failure
.data:0000000000211020 ; int exit_failure
.data:0000000000211020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_59E2↑r
.data:0000000000211020                                         ; xalloc_die+17↑r
.data:0000000000211024                 align 20h
.data:0000000000211040                 public quote_quoting_options
.data:0000000000211040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000211040                                         ; quote_mem↑o ...
.data:0000000000211041                 db    0
.data:0000000000211042                 db    0
.data:0000000000211043                 db    0
.data:0000000000211044                 db    0
.data:0000000000211045                 db    0
.data:0000000000211046                 db    0
.data:0000000000211047                 db    0
.data:0000000000211048                 db    0
.data:0000000000211049                 db    0
.data:000000000021104A                 db    0
.data:000000000021104B                 db    0
.data:000000000021104C                 db    0
.data:000000000021104D                 db    0
.data:000000000021104E                 db    0
.data:000000000021104F                 db    0
.data:0000000000211050                 db    0
.data:0000000000211051                 db    0
.data:0000000000211052                 db    0
.data:0000000000211053                 db    0
.data:0000000000211054                 db    0
.data:0000000000211055                 db    0
.data:0000000000211056                 db    0
.data:0000000000211057                 db    0
.data:0000000000211058                 db    0
.data:0000000000211059                 db    0
.data:000000000021105A                 db    0
.data:000000000021105B                 db    0
.data:000000000021105C                 db    0
.data:000000000021105D                 db    0
.data:000000000021105E                 db    0
.data:000000000021105F                 db    0
.data:0000000000211060                 db    0
.data:0000000000211061                 db    0
.data:0000000000211062                 db    0
.data:0000000000211063                 db    0
.data:0000000000211064                 db    0
.data:0000000000211065                 db    0
.data:0000000000211066                 db    0
.data:0000000000211067                 db    0
.data:0000000000211068                 db    0
.data:0000000000211069                 db    0
.data:000000000021106A                 db    0
.data:000000000021106B                 db    0
.data:000000000021106C                 db    0
.data:000000000021106D                 db    0
.data:000000000021106E                 db    0
.data:000000000021106F                 db    0
.data:0000000000211070                 db    0
.data:0000000000211071                 db    0
.data:0000000000211072                 db    0
.data:0000000000211073                 db    0
.data:0000000000211074                 db    0
.data:0000000000211075                 db    0
.data:0000000000211076                 db    0
.data:0000000000211077                 db    0
.data:0000000000211078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000211078                                         ; quotearg_n_options:loc_6EBD↑r ...
.data:000000000021107C                 align 20h
.data:0000000000211080 ; void *slotvec
.data:0000000000211080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000211080                                         ; quotearg_n_options+76↑w ...
.data:0000000000211088                 align 10h
.data:0000000000211090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000211090                                         ; quotearg_n_options+187↑r ...
.data:0000000000211098 off_211098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000211098 _data           ends
.data:0000000000211098
.bss:00000000002110A0 ; ===========================================================================
.bss:00000000002110A0
.bss:00000000002110A0 ; Segment type: Uninitialized
.bss:00000000002110A0 ; Segment permissions: Read/Write
.bss:00000000002110A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002110A0                 assume cs:_bss
.bss:00000000002110A0                 ;org 2110A0h
.bss:00000000002110A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002110A0                 public __bss_start ; weak
.bss:00000000002110A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000910↑o
.bss:00000000002110A0                                         ; LOAD:0000000000000958↑o ...
.bss:00000000002110A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002110A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002110A0                                         ; _edata
.bss:00000000002110A0                                         ; Copy of shared data
.bss:00000000002110A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002110A8 ; _IO_FILE *stdout
.bss:00000000002110A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:00000000002110A8                                         ; main+137↑r ...
.bss:00000000002110A8                                         ; Alternative name is 'stdout'
.bss:00000000002110A8                                         ; Copy of shared data
.bss:00000000002110B0                 public optind@@GLIBC_2_2_5
.bss:00000000002110B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:00000000002110B0                                         ; main:loc_28BA↑r ...
.bss:00000000002110B0                                         ; Alternative name is 'optind'
.bss:00000000002110B0                                         ; Copy of shared data
.bss:00000000002110B4                 align 8
.bss:00000000002110B8                 public optarg@@GLIBC_2_2_5
.bss:00000000002110B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:00000000002110B8                                         ; main+179↑r
.bss:00000000002110B8                                         ; Alternative name is 'optarg'
.bss:00000000002110B8                                         ; Copy of shared data
.bss:00000000002110C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002110C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002110C0                                         ; DATA XREF: LOAD:0000000000000928↑o
.bss:00000000002110C0                                         ; LOAD:0000000000000940↑o ...
.bss:00000000002110C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002110C0                                         ; Copy of shared data
.bss:00000000002110C8                 align 20h
.bss:00000000002110E0                 public opterr@@GLIBC_2_2_5
.bss:00000000002110E0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000970↑o
.bss:00000000002110E0                                         ; main+76↑w
.bss:00000000002110E0                                         ; Alternative name is 'opterr'
.bss:00000000002110E0                                         ; Copy of shared data
.bss:00000000002110E4                 align 20h
.bss:0000000000211100                 public stderr@@GLIBC_2_2_5
.bss:0000000000211100 ; FILE *stderr
.bss:0000000000211100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:0000000000211100                                         ; usage+3D↑r ...
.bss:0000000000211100                                         ; Alternative name is 'stderr'
.bss:0000000000211100                                         ; Copy of shared data
.bss:0000000000211108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000211108                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000211109                 align 20h
.bss:0000000000211120 buf_7417        dw ?                    ; DATA XREF: visible_part_0+13↑w
.bss:0000000000211120                                         ; visible_part_0+1D↑o ...
.bss:0000000000211122 word_211122     dw ?                    ; DATA XREF: visible_part_0+2B↑o
.bss:0000000000211122                                         ; visible_part_0+78↑w ...
.bss:0000000000211124 unk_211124      db    ? ;               ; DATA XREF: visible_part_0+AA↑o
.bss:0000000000211124                                         ; visible_part_0+CC↑o
.bss:0000000000211125                 db    ? ;
.bss:0000000000211126                 db    ? ;
.bss:0000000000211127                 db    ? ;
.bss:0000000000211128                 db    ? ;
.bss:0000000000211129                 db    ? ;
.bss:000000000021112A                 db    ? ;
.bss:000000000021112B                 db    ? ;
.bss:000000000021112C                 db    ? ;
.bss:000000000021112D                 db    ? ;
.bss:000000000021112E                 db    ? ;
.bss:000000000021112F                 db    ? ;
.bss:0000000000211130                 db    ? ;
.bss:0000000000211131                 db    ? ;
.bss:0000000000211132                 db    ? ;
.bss:0000000000211133                 db    ? ;
.bss:0000000000211134                 db    ? ;
.bss:0000000000211135                 db    ? ;
.bss:0000000000211136                 db    ? ;
.bss:0000000000211137                 db    ? ;
.bss:0000000000211138                 db    ? ;
.bss:0000000000211139                 db    ? ;
.bss:000000000021113A                 db    ? ;
.bss:000000000021113B                 db    ? ;
.bss:000000000021113C                 db    ? ;
.bss:000000000021113D                 db    ? ;
.bss:000000000021113E                 db    ? ;
.bss:000000000021113F                 db    ? ;
.bss:0000000000211140 ; struct termios new_mode_7231
.bss:0000000000211140 new_mode_7231   termios <?>             ; DATA XREF: main+63D↑o
.bss:0000000000211140                                         ; main+653↑o ...
.bss:000000000021117C                 align 20h
.bss:0000000000211180 ; struct termios mode_7192
.bss:0000000000211180 mode_7192       termios <?>             ; DATA XREF: main:loc_2A81↑o
.bss:0000000000211180                                         ; main+2F4↑o ...
.bss:00000000002111BC                 align 20h
.bss:00000000002111C0 check_mode_7223 db    ? ;               ; DATA XREF: main+23F↑o
.bss:00000000002111C0                                         ; main+92F↑o
.bss:00000000002111C1                 db    ? ;
.bss:00000000002111C2                 db    ? ;
.bss:00000000002111C3                 db    ? ;
.bss:00000000002111C4                 db    ? ;
.bss:00000000002111C5                 db    ? ;
.bss:00000000002111C6                 db    ? ;
.bss:00000000002111C7                 db    ? ;
.bss:00000000002111C8                 db    ? ;
.bss:00000000002111C9                 db    ? ;
.bss:00000000002111CA                 db    ? ;
.bss:00000000002111CB                 db    ? ;
.bss:00000000002111CC                 db    ? ;
.bss:00000000002111CD                 db    ? ;
.bss:00000000002111CE                 db    ? ;
.bss:00000000002111CF                 db    ? ;
.bss:00000000002111D0                 db    ? ;
.bss:00000000002111D1                 db    ? ;
.bss:00000000002111D2                 db    ? ;
.bss:00000000002111D3                 db    ? ;
.bss:00000000002111D4                 db    ? ;
.bss:00000000002111D5                 db    ? ;
.bss:00000000002111D6                 db    ? ;
.bss:00000000002111D7                 db    ? ;
.bss:00000000002111D8                 db    ? ;
.bss:00000000002111D9                 db    ? ;
.bss:00000000002111DA                 db    ? ;
.bss:00000000002111DB                 db    ? ;
.bss:00000000002111DC                 db    ? ;
.bss:00000000002111DD                 db    ? ;
.bss:00000000002111DE                 db    ? ;
.bss:00000000002111DF                 db    ? ;
.bss:00000000002111E0                 db    ? ;
.bss:00000000002111E1                 db    ? ;
.bss:00000000002111E2                 db    ? ;
.bss:00000000002111E3                 db    ? ;
.bss:00000000002111E4                 db    ? ;
.bss:00000000002111E5                 db    ? ;
.bss:00000000002111E6                 db    ? ;
.bss:00000000002111E7                 db    ? ;
.bss:00000000002111E8                 db    ? ;
.bss:00000000002111E9                 db    ? ;
.bss:00000000002111EA                 db    ? ;
.bss:00000000002111EB                 db    ? ;
.bss:00000000002111EC                 db    ? ;
.bss:00000000002111ED                 db    ? ;
.bss:00000000002111EE                 db    ? ;
.bss:00000000002111EF                 db    ? ;
.bss:00000000002111F0                 db    ? ;
.bss:00000000002111F1                 db    ? ;
.bss:00000000002111F2                 db    ? ;
.bss:00000000002111F3                 db    ? ;
.bss:00000000002111F4                 db    ? ;
.bss:00000000002111F5                 db    ? ;
.bss:00000000002111F6                 db    ? ;
.bss:00000000002111F7                 db    ? ;
.bss:00000000002111F8                 db    ? ;
.bss:00000000002111F9                 db    ? ;
.bss:00000000002111FA                 db    ? ;
.bss:00000000002111FB                 db    ? ;
.bss:00000000002111FC current_col     dd ?                    ; DATA XREF: main+3B2↑w
.bss:00000000002111FC                                         ; main:loc_2BE4↑w ...
.bss:0000000000211200 max_col         dd ?                    ; DATA XREF: main+3A8↑w
.bss:0000000000211200                                         ; wrapf+C6↑r ...
.bss:0000000000211204                 align 8
.bss:0000000000211208 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000211208                                         ; close_stdout+1B↑r
.bss:0000000000211209                 align 10h
.bss:0000000000211210 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000211210                                         ; close_stdout+56↑r
.bss:0000000000211218                 public program_name
.bss:0000000000211218 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000211218                                         ; set_program_name:loc_5ADD↑w
.bss:0000000000211220 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000211220                                         ; quotearg_free+46↑o ...
.bss:0000000000211221                 db    ? ;
.bss:0000000000211222                 db    ? ;
.bss:0000000000211223                 db    ? ;
.bss:0000000000211224                 db    ? ;
.bss:0000000000211225                 db    ? ;
.bss:0000000000211226                 db    ? ;
.bss:0000000000211227                 db    ? ;
.bss:0000000000211228                 db    ? ;
.bss:0000000000211229                 db    ? ;
.bss:000000000021122A                 db    ? ;
.bss:000000000021122B                 db    ? ;
.bss:000000000021122C                 db    ? ;
.bss:000000000021122D                 db    ? ;
.bss:000000000021122E                 db    ? ;
.bss:000000000021122F                 db    ? ;
.bss:0000000000211230                 db    ? ;
.bss:0000000000211231                 db    ? ;
.bss:0000000000211232                 db    ? ;
.bss:0000000000211233                 db    ? ;
.bss:0000000000211234                 db    ? ;
.bss:0000000000211235                 db    ? ;
.bss:0000000000211236                 db    ? ;
.bss:0000000000211237                 db    ? ;
.bss:0000000000211238                 db    ? ;
.bss:0000000000211239                 db    ? ;
.bss:000000000021123A                 db    ? ;
.bss:000000000021123B                 db    ? ;
.bss:000000000021123C                 db    ? ;
.bss:000000000021123D                 db    ? ;
.bss:000000000021123E                 db    ? ;
.bss:000000000021123F                 db    ? ;
.bss:0000000000211240                 db    ? ;
.bss:0000000000211241                 db    ? ;
.bss:0000000000211242                 db    ? ;
.bss:0000000000211243                 db    ? ;
.bss:0000000000211244                 db    ? ;
.bss:0000000000211245                 db    ? ;
.bss:0000000000211246                 db    ? ;
.bss:0000000000211247                 db    ? ;
.bss:0000000000211248                 db    ? ;
.bss:0000000000211249                 db    ? ;
.bss:000000000021124A                 db    ? ;
.bss:000000000021124B                 db    ? ;
.bss:000000000021124C                 db    ? ;
.bss:000000000021124D                 db    ? ;
.bss:000000000021124E                 db    ? ;
.bss:000000000021124F                 db    ? ;
.bss:0000000000211250                 db    ? ;
.bss:0000000000211251                 db    ? ;
.bss:0000000000211252                 db    ? ;
.bss:0000000000211253                 db    ? ;
.bss:0000000000211254                 db    ? ;
.bss:0000000000211255                 db    ? ;
.bss:0000000000211256                 db    ? ;
.bss:0000000000211257                 db    ? ;
.bss:0000000000211258                 db    ? ;
.bss:0000000000211259                 db    ? ;
.bss:000000000021125A                 db    ? ;
.bss:000000000021125B                 db    ? ;
.bss:000000000021125C                 db    ? ;
.bss:000000000021125D                 db    ? ;
.bss:000000000021125E                 db    ? ;
.bss:000000000021125F                 db    ? ;
.bss:0000000000211260                 db    ? ;
.bss:0000000000211261                 db    ? ;
.bss:0000000000211262                 db    ? ;
.bss:0000000000211263                 db    ? ;
.bss:0000000000211264                 db    ? ;
.bss:0000000000211265                 db    ? ;
.bss:0000000000211266                 db    ? ;
.bss:0000000000211267                 db    ? ;
.bss:0000000000211268                 db    ? ;
.bss:0000000000211269                 db    ? ;
.bss:000000000021126A                 db    ? ;
.bss:000000000021126B                 db    ? ;
.bss:000000000021126C                 db    ? ;
.bss:000000000021126D                 db    ? ;
.bss:000000000021126E                 db    ? ;
.bss:000000000021126F                 db    ? ;
.bss:0000000000211270                 db    ? ;
.bss:0000000000211271                 db    ? ;
.bss:0000000000211272                 db    ? ;
.bss:0000000000211273                 db    ? ;
.bss:0000000000211274                 db    ? ;
.bss:0000000000211275                 db    ? ;
.bss:0000000000211276                 db    ? ;
.bss:0000000000211277                 db    ? ;
.bss:0000000000211278                 db    ? ;
.bss:0000000000211279                 db    ? ;
.bss:000000000021127A                 db    ? ;
.bss:000000000021127B                 db    ? ;
.bss:000000000021127C                 db    ? ;
.bss:000000000021127D                 db    ? ;
.bss:000000000021127E                 db    ? ;
.bss:000000000021127F                 db    ? ;
.bss:0000000000211280                 db    ? ;
.bss:0000000000211281                 db    ? ;
.bss:0000000000211282                 db    ? ;
.bss:0000000000211283                 db    ? ;
.bss:0000000000211284                 db    ? ;
.bss:0000000000211285                 db    ? ;
.bss:0000000000211286                 db    ? ;
.bss:0000000000211287                 db    ? ;
.bss:0000000000211288                 db    ? ;
.bss:0000000000211289                 db    ? ;
.bss:000000000021128A                 db    ? ;
.bss:000000000021128B                 db    ? ;
.bss:000000000021128C                 db    ? ;
.bss:000000000021128D                 db    ? ;
.bss:000000000021128E                 db    ? ;
.bss:000000000021128F                 db    ? ;
.bss:0000000000211290                 db    ? ;
.bss:0000000000211291                 db    ? ;
.bss:0000000000211292                 db    ? ;
.bss:0000000000211293                 db    ? ;
.bss:0000000000211294                 db    ? ;
.bss:0000000000211295                 db    ? ;
.bss:0000000000211296                 db    ? ;
.bss:0000000000211297                 db    ? ;
.bss:0000000000211298                 db    ? ;
.bss:0000000000211299                 db    ? ;
.bss:000000000021129A                 db    ? ;
.bss:000000000021129B                 db    ? ;
.bss:000000000021129C                 db    ? ;
.bss:000000000021129D                 db    ? ;
.bss:000000000021129E                 db    ? ;
.bss:000000000021129F                 db    ? ;
.bss:00000000002112A0                 db    ? ;
.bss:00000000002112A1                 db    ? ;
.bss:00000000002112A2                 db    ? ;
.bss:00000000002112A3                 db    ? ;
.bss:00000000002112A4                 db    ? ;
.bss:00000000002112A5                 db    ? ;
.bss:00000000002112A6                 db    ? ;
.bss:00000000002112A7                 db    ? ;
.bss:00000000002112A8                 db    ? ;
.bss:00000000002112A9                 db    ? ;
.bss:00000000002112AA                 db    ? ;
.bss:00000000002112AB                 db    ? ;
.bss:00000000002112AC                 db    ? ;
.bss:00000000002112AD                 db    ? ;
.bss:00000000002112AE                 db    ? ;
.bss:00000000002112AF                 db    ? ;
.bss:00000000002112B0                 db    ? ;
.bss:00000000002112B1                 db    ? ;
.bss:00000000002112B2                 db    ? ;
.bss:00000000002112B3                 db    ? ;
.bss:00000000002112B4                 db    ? ;
.bss:00000000002112B5                 db    ? ;
.bss:00000000002112B6                 db    ? ;
.bss:00000000002112B7                 db    ? ;
.bss:00000000002112B8                 db    ? ;
.bss:00000000002112B9                 db    ? ;
.bss:00000000002112BA                 db    ? ;
.bss:00000000002112BB                 db    ? ;
.bss:00000000002112BC                 db    ? ;
.bss:00000000002112BD                 db    ? ;
.bss:00000000002112BE                 db    ? ;
.bss:00000000002112BF                 db    ? ;
.bss:00000000002112C0                 db    ? ;
.bss:00000000002112C1                 db    ? ;
.bss:00000000002112C2                 db    ? ;
.bss:00000000002112C3                 db    ? ;
.bss:00000000002112C4                 db    ? ;
.bss:00000000002112C5                 db    ? ;
.bss:00000000002112C6                 db    ? ;
.bss:00000000002112C7                 db    ? ;
.bss:00000000002112C8                 db    ? ;
.bss:00000000002112C9                 db    ? ;
.bss:00000000002112CA                 db    ? ;
.bss:00000000002112CB                 db    ? ;
.bss:00000000002112CC                 db    ? ;
.bss:00000000002112CD                 db    ? ;
.bss:00000000002112CE                 db    ? ;
.bss:00000000002112CF                 db    ? ;
.bss:00000000002112D0                 db    ? ;
.bss:00000000002112D1                 db    ? ;
.bss:00000000002112D2                 db    ? ;
.bss:00000000002112D3                 db    ? ;
.bss:00000000002112D4                 db    ? ;
.bss:00000000002112D5                 db    ? ;
.bss:00000000002112D6                 db    ? ;
.bss:00000000002112D7                 db    ? ;
.bss:00000000002112D8                 db    ? ;
.bss:00000000002112D9                 db    ? ;
.bss:00000000002112DA                 db    ? ;
.bss:00000000002112DB                 db    ? ;
.bss:00000000002112DC                 db    ? ;
.bss:00000000002112DD                 db    ? ;
.bss:00000000002112DE                 db    ? ;
.bss:00000000002112DF                 db    ? ;
.bss:00000000002112E0                 db    ? ;
.bss:00000000002112E1                 db    ? ;
.bss:00000000002112E2                 db    ? ;
.bss:00000000002112E3                 db    ? ;
.bss:00000000002112E4                 db    ? ;
.bss:00000000002112E5                 db    ? ;
.bss:00000000002112E6                 db    ? ;
.bss:00000000002112E7                 db    ? ;
.bss:00000000002112E8                 db    ? ;
.bss:00000000002112E9                 db    ? ;
.bss:00000000002112EA                 db    ? ;
.bss:00000000002112EB                 db    ? ;
.bss:00000000002112EC                 db    ? ;
.bss:00000000002112ED                 db    ? ;
.bss:00000000002112EE                 db    ? ;
.bss:00000000002112EF                 db    ? ;
.bss:00000000002112F0                 db    ? ;
.bss:00000000002112F1                 db    ? ;
.bss:00000000002112F2                 db    ? ;
.bss:00000000002112F3                 db    ? ;
.bss:00000000002112F4                 db    ? ;
.bss:00000000002112F5                 db    ? ;
.bss:00000000002112F6                 db    ? ;
.bss:00000000002112F7                 db    ? ;
.bss:00000000002112F8                 db    ? ;
.bss:00000000002112F9                 db    ? ;
.bss:00000000002112FA                 db    ? ;
.bss:00000000002112FB                 db    ? ;
.bss:00000000002112FC                 db    ? ;
.bss:00000000002112FD                 db    ? ;
.bss:00000000002112FE                 db    ? ;
.bss:00000000002112FF                 db    ? ;
.bss:0000000000211300                 db    ? ;
.bss:0000000000211301                 db    ? ;
.bss:0000000000211302                 db    ? ;
.bss:0000000000211303                 db    ? ;
.bss:0000000000211304                 db    ? ;
.bss:0000000000211305                 db    ? ;
.bss:0000000000211306                 db    ? ;
.bss:0000000000211307                 db    ? ;
.bss:0000000000211308                 db    ? ;
.bss:0000000000211309                 db    ? ;
.bss:000000000021130A                 db    ? ;
.bss:000000000021130B                 db    ? ;
.bss:000000000021130C                 db    ? ;
.bss:000000000021130D                 db    ? ;
.bss:000000000021130E                 db    ? ;
.bss:000000000021130F                 db    ? ;
.bss:0000000000211310                 db    ? ;
.bss:0000000000211311                 db    ? ;
.bss:0000000000211312                 db    ? ;
.bss:0000000000211313                 db    ? ;
.bss:0000000000211314                 db    ? ;
.bss:0000000000211315                 db    ? ;
.bss:0000000000211316                 db    ? ;
.bss:0000000000211317                 db    ? ;
.bss:0000000000211318                 db    ? ;
.bss:0000000000211319                 db    ? ;
.bss:000000000021131A                 db    ? ;
.bss:000000000021131B                 db    ? ;
.bss:000000000021131C                 db    ? ;
.bss:000000000021131D                 db    ? ;
.bss:000000000021131E                 db    ? ;
.bss:000000000021131F                 db    ? ;
.bss:0000000000211320 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000211320                                         ; get_quoting_style↑o ...
.bss:0000000000211330 xmmword_211330  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000211330                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000211340 xmmword_211340  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000211340                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000211350 qword_211350    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000211350                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000211358 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000211358                                         ; rpl_fcntl:loc_8CEF↑w ...
.bss:000000000021135C                 align 20h
.bss:000000000021135C _bss            ends
.bss:000000000021135C
.prgend:0000000000211360 ; ===========================================================================
.prgend:0000000000211360
.prgend:0000000000211360 ; Segment type: Zero-length
.prgend:0000000000211360 _prgend         segment byte public '' use64
.prgend:0000000000211360 _end            label byte
.prgend:0000000000211360 _prgend         ends
.prgend:0000000000211360
extern:0000000000211368 ; ===========================================================================
extern:0000000000211368
extern:0000000000211368 ; Segment type: Externs
extern:0000000000211368 ; extern
extern:0000000000211368 ; char *getenv(const char *name)
extern:0000000000211368                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000211368                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000211370                 extrn __snprintf_chk:near
extern:0000000000211370                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000211370                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000211378 ; void free(void *ptr)
extern:0000000000211378                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000211378                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000211380 ; void __noreturn abort(void)
extern:0000000000211380                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000211380                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000211388 ; int *_errno_location(void)
extern:0000000000211388                 extrn __errno_location:near
extern:0000000000211388                                         ; CODE XREF: ___errno_location↑j
extern:0000000000211388                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000211390 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000211390                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000211390                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000211398 ; void __noreturn exit(int status)
extern:0000000000211398                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000211398                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002113A0 ; size_t _fpending(FILE *fp)
extern:00000000002113A0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002113A0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002113A8 ; int fcntl(int fd, int cmd, ...)
extern:00000000002113A8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:00000000002113A8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:00000000002113B0 ; speed_t cfgetispeed(const struct termios *termios_p)
extern:00000000002113B0                 extrn cfgetispeed:near  ; CODE XREF: _cfgetispeed↑j
extern:00000000002113B0                                         ; DATA XREF: .got:cfgetispeed_ptr↑o
extern:00000000002113B8 ; char *textdomain(const char *domainname)
extern:00000000002113B8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002113B8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002113C0 ; int fclose(FILE *stream)
extern:00000000002113C0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002113C0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002113C8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002113C8                 extrn bindtextdomain:near
extern:00000000002113C8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002113C8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002113D0 ; int cfsetospeed(struct termios *termios_p, speed_t speed)
extern:00000000002113D0                 extrn cfsetospeed:near  ; CODE XREF: _cfsetospeed↑j
extern:00000000002113D0                                         ; DATA XREF: .got:cfsetospeed_ptr↑o
extern:00000000002113D8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002113D8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002113D8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002113E0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002113E0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002113E0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002113E0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002113E8 ; size_t strlen(const char *s)
extern:00000000002113E8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002113E8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002113F0                 extrn __stack_chk_fail:near
extern:00000000002113F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002113F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002113F8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002113F8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002113F8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000211400 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000211400                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000211400                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000211408 ; int dup2(int fd, int fd2)
extern:0000000000211408                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000211408                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000211410 ; char *strchr(const char *s, int c)
extern:0000000000211410                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000211410                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000211418 ; int _overflow(_IO_FILE *, int)
extern:0000000000211418                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000211418                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000211420 ; char *strrchr(const char *s, int c)
extern:0000000000211420                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000211420                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000211428 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000211428                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000211428                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000211430 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000211430                 extrn __assert_fail:near
extern:0000000000211430                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000211430                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000211438 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000211438                 extrn __strtoul_internal:near
extern:0000000000211438                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000211438                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000211440 ; void *memset(void *s, int c, size_t n)
extern:0000000000211440                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000211440                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000211448 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:0000000000211448                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:0000000000211448                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:0000000000211450 ; int close(int fd)
extern:0000000000211450                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000211450                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000211458 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000211458                 extrn __libc_start_main:near
extern:0000000000211458                                         ; CODE XREF: start+24↑p
extern:0000000000211458                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000211460 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000211460                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000211460                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000211468 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000211468                 extrn fputs_unlocked:near
extern:0000000000211468                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000211468                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000211470 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000211470                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000211470                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000211478 ; int strcmp(const char *s1, const char *s2)
extern:0000000000211478                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000211478                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000211480 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:0000000000211480                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:0000000000211480                                         ; DATA XREF: .got:strtol_ptr↑o
extern:0000000000211488 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000211488                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000211488                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000211490 ; int fileno(FILE *stream)
extern:0000000000211490                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000211490                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000211498 ; void *malloc(size_t size)
extern:0000000000211498                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000211498                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002114A0 ; int fflush(FILE *stream)
extern:00000000002114A0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002114A0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002114A8 ; char *nl_langinfo(nl_item item)
extern:00000000002114A8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002114A8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002114B0 ; int _freading(FILE *fp)
extern:00000000002114B0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002114B0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002114B8 ; void *realloc(void *ptr, size_t size)
extern:00000000002114B8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002114B8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002114C0 ; char *setlocale(int category, const char *locale)
extern:00000000002114C0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002114C0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002114C8 ; speed_t cfgetospeed(const struct termios *termios_p)
extern:00000000002114C8                 extrn cfgetospeed:near  ; CODE XREF: _cfgetospeed↑j
extern:00000000002114C8                                         ; DATA XREF: .got:cfgetospeed_ptr↑o
extern:00000000002114D0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002114D0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002114D8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002114D8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002114D8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002114E0 ; int tcgetattr(int fd, struct termios *termios_p)
extern:00000000002114E0                 extrn tcgetattr:near    ; CODE XREF: _tcgetattr↑j
extern:00000000002114E0                                         ; DATA XREF: .got:tcgetattr_ptr↑o
extern:00000000002114E8 ; int tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
extern:00000000002114E8                 extrn tcsetattr:near    ; CODE XREF: _tcsetattr↑j
extern:00000000002114E8                                         ; DATA XREF: .got:tcsetattr_ptr↑o
extern:00000000002114F0 ; int open(const char *file, int oflag, ...)
extern:00000000002114F0                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002114F0                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002114F8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002114F8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002114F8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000211500 ; int cfsetispeed(struct termios *termios_p, speed_t speed)
extern:0000000000211500                 extrn cfsetispeed:near  ; CODE XREF: _cfsetispeed↑j
extern:0000000000211500                                         ; DATA XREF: .got:cfsetispeed_ptr↑o
extern:0000000000211508 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:0000000000211508                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:0000000000211508                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:0000000000211510 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000211510                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000211510                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000211518 ; void __noreturn exit(int status)
extern:0000000000211518                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000211518                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000211520 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000211520                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000211520                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000211528                 extrn __fprintf_chk:near
extern:0000000000211528                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000211528                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000211530 ; int mbsinit(const mbstate_t *ps)
extern:0000000000211530                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000211530                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000211538 ; int iswprint(wint_t wc)
extern:0000000000211538                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000211538                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000211540 ; int __fastcall __cxa_finalize(void *)
extern:0000000000211540                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000211540                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000211540                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000211548 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000211548                 extrn __ctype_b_loc:near
extern:0000000000211548                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000211548                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000211550                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000211550                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000211558                 extrn __gmon_start__:near ; weak
extern:0000000000211558                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000211558                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000211560                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000211560                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000211560
extern:0000000000211560
extern:0000000000211560                 end start
