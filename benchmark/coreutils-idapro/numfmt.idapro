LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 8862530D8179A8A32496D2F367DF63DC2221DBECE9557F006351573C596DA408
LOAD:0000000000000000 ; Input MD5    : 61E9F03FD0712F4F2C52C5F97A7859FB
LOAD:0000000000000000 ; Input CRC32  : 4DD13FEC
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/numfmt
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'numfmt.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'set-fields.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'mbsalign.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'xstrtol.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 42248h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0D1D0h               ; Size in file image
LOAD:00000000000000D8                 dq 0D1D0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0D830h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20D830h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 890h                 ; Size in file image
LOAD:0000000000000110                 dq 0AD8h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DBF8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20DBF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0BEBCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0BEBCh               ; Physical address
LOAD:00000000000001B0                 dq 2DCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2DCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0D830h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20D830h              ; Physical address
LOAD:0000000000000220                 dq 7D0h                 ; Size in file image
LOAD:0000000000000228                 dq 7D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 98h, 75h, 0Bh, 0F2h, 4Eh, 18h, 2Bh, 0B6h, 60h, 0AAh ; Desc
LOAD:0000000000000284                 db 9Ah, 6Ch, 2Eh, 70h, 8Eh, 4Dh, 8, 89h, 7Dh, 81h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 40h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 40h, 41h, 47h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSnprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_9B8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_9B8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrcpy - offset byte_9B8, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_9B8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aQsort - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aWcswidth - offset byte_9B8, 12h, 0, 0, \ ; "wcswidth"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aMbstowcs - offset byte_9B8, 12h, 0, 0, \ ; "mbstowcs"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9B8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aFclose - offset byte_9B8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain - offset byte_9B8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aDcgettext - offset byte_9B8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrlen - offset byte_9B8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStackChkFail - offset byte_9B8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aGetoptLong - offset byte_9B8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMbrtowc - offset byte_9B8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrchr - offset byte_9B8, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aOverflow - offset byte_9B8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrrchr - offset byte_9B8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLseek - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000538                            0>
LOAD:0000000000000550                 Elf64_Sym <offset aAssertFail - offset byte_9B8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrtoulInterna - offset byte_9B8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemset - offset byte_9B8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrspn - offset byte_9B8, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrndup - offset byte_9B8, 12h, 0, 0, \ ; "strndup"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLibcStartMain - offset byte_9B8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcmp - offset byte_9B8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFputsUnlocked - offset byte_9B8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aCalloc - offset byte_9B8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aStrcmp - offset byte_9B8, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aGmonStart - offset byte_9B8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aStrtol - offset byte_9B8, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMemcpy - offset byte_9B8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFileno - offset byte_9B8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aWcwidth - offset byte_9B8, 12h, 0, 0, \ ; "wcwidth"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMalloc - offset byte_9B8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFflush - offset byte_9B8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aNlLanginfo - offset byte_9B8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFreading - offset byte_9B8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aRealloc - offset byte_9B8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSetlocale - offset byte_9B8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aPrintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aMempcpy - offset byte_9B8, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMemmove - offset byte_9B8, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aError - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFseeko - offset byte_9B8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaAtexit - offset byte_9B8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aWcstombs - offset byte_9B8, 12h, 0, 0, \ ; "wcstombs"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aExit+1 - offset byte_9B8, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFwrite - offset byte_9B8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aStrncatChk - offset byte_9B8, 12h, 0, 0, \ ; "__strncat_chk"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aItmRegistertmc - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aMbsinit - offset byte_9B8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aIswprint - offset byte_9B8, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aCxaFinalize - offset byte_9B8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aGetdelim - offset byte_9B8, 12h, 0, 0, \ ; "getdelim"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCtypeBLoc - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aStdout - offset byte_9B8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008E0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aProgname - offset byte_9B8, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008F8                            offset __bss_start, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aStdin - offset byte_9B8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000910                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aProgramInvocat - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000928                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aPrognameFull - offset byte_9B8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000958                            offset __bss_start, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aStderr - offset byte_9B8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000970                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aOptind - offset byte_9B8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000988                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptarg - offset byte_9B8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009A0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8 ; ELF String Table
LOAD:00000000000009B8 byte_9B8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009B8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009B9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D88↓o
LOAD:00000000000009C3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009CA aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000009D1 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009DE aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000009E8 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009F0 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000009F8 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:00000000000009FF aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A07 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A11 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A17 aMbstowcs       db 'mbstowcs',0         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A20 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A31 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A3A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A42 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A48 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000A4E aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A4E                                         ; LOAD:00000000000007F0↑o
LOAD:0000000000000A54 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000A5B aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A5B                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000A73 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A81 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A81                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A98 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A9F aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000AA6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AAD aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AB4 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000AC5 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000ACC aStrndup        db 'strndup',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AD4 aGetdelim       db 'getdelim',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000ADD aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000AE5 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AF3 aWcswidth       db 'wcswidth',0         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AFC aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B03 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B09 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B10 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B17 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B1E aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B26 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B32 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000B40 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B47 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B52 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000B59 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B61 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B70 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B7C aStrncatChk     db '__strncat_chk',0    ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B8A aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B91 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B98 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000BA3 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BAA aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BAA                                         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000BC8 aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BCE aWcstombs       db 'wcstombs',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000BD7 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BE6 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000BEE aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000BEE                                         ; LOAD:0000000000000418↑o
LOAD:0000000000000BFD aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C04 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C04                                         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C16 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C1D aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000C28 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000C28                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000C3B aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C4A aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C4F aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C5A aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C6A aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C77 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D98↓o
LOAD:0000000000000C81 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:0000000000000C8C aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C96 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000CA2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CAE aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CAE                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000CCA aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000CD9 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CD9                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000CF3                 align 4
LOAD:0000000000000CF4 ; ELF GNU Symbol Version Table
LOAD:0000000000000CF4                 dw 0
LOAD:0000000000000CF6                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CF8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000CFA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000CFC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D02                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D04                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000D06                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 2                    ; wcswidth@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 2                    ; mbstowcs@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D1C                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D3E                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D42                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D54                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D5C                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; wcstombs@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D66                 dw 3                    ; __strncat_chk@@GLIBC_2.3.4
LOAD:0000000000000D68                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D6A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; getdelim@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D74                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 0
LOAD:0000000000000D88 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D88                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9B8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D98                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9B8, \ ; "GLIBC_2.3"
LOAD:0000000000000D98                                10h>
LOAD:0000000000000DA8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9B8, \ ; "GLIBC_2.14"
LOAD:0000000000000DA8                                10h>
LOAD:0000000000000DB8                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_9B8, \ ; "GLIBC_2.4"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_9B8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9B8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000DE8 ; ELF RELA Relocation Table
LOAD:0000000000000DE8                 Elf64_Rela <20D830h, 8, 2C90h> ; R_X86_64_RELATIVE +2C90h
LOAD:0000000000000E00                 Elf64_Rela <20D838h, 8, 2C50h> ; R_X86_64_RELATIVE +2C50h
LOAD:0000000000000E18                 Elf64_Rela <20D840h, 8, 96A6h> ; R_X86_64_RELATIVE +96A6h
LOAD:0000000000000E30                 Elf64_Rela <20D860h, 8, 977Ch> ; R_X86_64_RELATIVE +977Ch
LOAD:0000000000000E48                 Elf64_Rela <20D880h, 8, 96ADh> ; R_X86_64_RELATIVE +96ADh
LOAD:0000000000000E60                 Elf64_Rela <20D8A0h, 8, 9786h> ; R_X86_64_RELATIVE +9786h
LOAD:0000000000000E78                 Elf64_Rela <20D8C0h, 8, 96B2h> ; R_X86_64_RELATIVE +96B2h
LOAD:0000000000000E90                 Elf64_Rela <20D8E0h, 8, 978Eh> ; R_X86_64_RELATIVE +978Eh
LOAD:0000000000000EA8                 Elf64_Rela <20D900h, 8, 9796h> ; R_X86_64_RELATIVE +9796h
LOAD:0000000000000EC0                 Elf64_Rela <20D920h, 8, 979Dh> ; R_X86_64_RELATIVE +979Dh
LOAD:0000000000000ED8                 Elf64_Rela <20D940h, 8, 97A6h> ; R_X86_64_RELATIVE +97A6h
LOAD:0000000000000EF0                 Elf64_Rela <20D960h, 8, 97B0h> ; R_X86_64_RELATIVE +97B0h
LOAD:0000000000000F08                 Elf64_Rela <20D980h, 8, 97B7h> ; R_X86_64_RELATIVE +97B7h
LOAD:0000000000000F20                 Elf64_Rela <20D9A0h, 8, 97B6h> ; R_X86_64_RELATIVE +97B6h
LOAD:0000000000000F38                 Elf64_Rela <20D9C0h, 8, 97BDh> ; R_X86_64_RELATIVE +97BDh
LOAD:0000000000000F50                 Elf64_Rela <20D9E0h, 8, 97C4h> ; R_X86_64_RELATIVE +97C4h
LOAD:0000000000000F68                 Elf64_Rela <20DA00h, 8, 9709h> ; R_X86_64_RELATIVE +9709h
LOAD:0000000000000F80                 Elf64_Rela <20DA20h, 8, 97CBh> ; R_X86_64_RELATIVE +97CBh
LOAD:0000000000000F98                 Elf64_Rela <20DA40h, 8, 97DBh> ; R_X86_64_RELATIVE +97DBh
LOAD:0000000000000FB0                 Elf64_Rela <20DA60h, 8, 97E0h> ; R_X86_64_RELATIVE +97E0h
LOAD:0000000000000FC8                 Elf64_Rela <20DAA0h, 8, 97E8h> ; R_X86_64_RELATIVE +97E8h
LOAD:0000000000000FE0                 Elf64_Rela <20DAA8h, 8, 97EEh> ; R_X86_64_RELATIVE +97EEh
LOAD:0000000000000FF8                 Elf64_Rela <20DAB0h, 8, 97F3h> ; R_X86_64_RELATIVE +97F3h
LOAD:0000000000001010                 Elf64_Rela <20DAB8h, 8, 97F8h> ; R_X86_64_RELATIVE +97F8h
LOAD:0000000000001028                 Elf64_Rela <20DAE0h, 8, 97FFh> ; R_X86_64_RELATIVE +97FFh
LOAD:0000000000001040                 Elf64_Rela <20DAE8h, 8, 9802h> ; R_X86_64_RELATIVE +9802h
LOAD:0000000000001058                 Elf64_Rela <20DAF0h, 8, 9807h> ; R_X86_64_RELATIVE +9807h
LOAD:0000000000001070                 Elf64_Rela <20DAF8h, 8, 9811h> ; R_X86_64_RELATIVE +9811h
LOAD:0000000000001088                 Elf64_Rela <20DB00h, 8, 981Eh> ; R_X86_64_RELATIVE +981Eh
LOAD:00000000000010A0                 Elf64_Rela <20DB20h, 8, 9826h> ; R_X86_64_RELATIVE +9826h
LOAD:00000000000010B8                 Elf64_Rela <20DB28h, 8, 982Bh> ; R_X86_64_RELATIVE +982Bh
LOAD:00000000000010D0                 Elf64_Rela <20DB30h, 8, 982Eh> ; R_X86_64_RELATIVE +982Eh
LOAD:00000000000010E8                 Elf64_Rela <20DB38h, 8, 9832h> ; R_X86_64_RELATIVE +9832h
LOAD:0000000000001100                 Elf64_Rela <20DB60h, 8, 9826h> ; R_X86_64_RELATIVE +9826h
LOAD:0000000000001118                 Elf64_Rela <20DB68h, 8, 9838h> ; R_X86_64_RELATIVE +9838h
LOAD:0000000000001130                 Elf64_Rela <20DB70h, 8, 982Bh> ; R_X86_64_RELATIVE +982Bh
LOAD:0000000000001148                 Elf64_Rela <20DB78h, 8, 982Eh> ; R_X86_64_RELATIVE +982Eh
LOAD:0000000000001160                 Elf64_Rela <20DB80h, 8, 9832h> ; R_X86_64_RELATIVE +9832h
LOAD:0000000000001178                 Elf64_Rela <20DBA0h, 8, 0B471h> ; R_X86_64_RELATIVE +0B471h
LOAD:0000000000001190                 Elf64_Rela <20DBA8h, 8, 0B479h> ; R_X86_64_RELATIVE +0B479h
LOAD:00000000000011A8                 Elf64_Rela <20DBB0h, 8, 0B47Fh> ; R_X86_64_RELATIVE +0B47Fh
LOAD:00000000000011C0                 Elf64_Rela <20DBB8h, 8, 0B48Ch> ; R_X86_64_RELATIVE +0B48Ch
LOAD:00000000000011D8                 Elf64_Rela <20DBC0h, 8, 0B499h> ; R_X86_64_RELATIVE +0B499h
LOAD:00000000000011F0                 Elf64_Rela <20DBC8h, 8, 9830h> ; R_X86_64_RELATIVE +9830h
LOAD:0000000000001208                 Elf64_Rela <20DBD0h, 8, 0B4ADh> ; R_X86_64_RELATIVE +0B4ADh
LOAD:0000000000001220                 Elf64_Rela <20DBD8h, 8, 0B492h> ; R_X86_64_RELATIVE +0B492h
LOAD:0000000000001238                 Elf64_Rela <20DBE0h, 8, 972Ch> ; R_X86_64_RELATIVE +972Ch
LOAD:0000000000001250                 Elf64_Rela <20DBE8h, 8, 0B4B5h> ; R_X86_64_RELATIVE +0B4B5h
LOAD:0000000000001268                 Elf64_Rela <20E008h, 8, 20E008h> ; R_X86_64_RELATIVE +20E008h
LOAD:0000000000001280                 Elf64_Rela <20E040h, 8, 0B3A1h> ; R_X86_64_RELATIVE +0B3A1h
LOAD:0000000000001298                 Elf64_Rela <20E048h, 8, 5770h> ; R_X86_64_RELATIVE +5770h
LOAD:00000000000012B0                 Elf64_Rela <20E0A0h, 8, 20E0B0h> ; R_X86_64_RELATIVE +20E0B0h
LOAD:00000000000012C8                 Elf64_Rela <20E0B8h, 8, 20E1C0h> ; R_X86_64_RELATIVE +20E1C0h
LOAD:00000000000012E0                 Elf64_Rela <20DFD0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000012F8                 Elf64_Rela <20DFD8h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001310                 Elf64_Rela <20DFE0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001328                 Elf64_Rela <20DFE8h, 3A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001340                 Elf64_Rela <20DFF0h, 3D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001358                 Elf64_Rela <20E0C0h, 4100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001370                 Elf64_Rela <20E0C8h, 4000000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001388                 Elf64_Rela <20E0D0h, 4200000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000013A0                 Elf64_Rela <20E0D8h, 4700000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000013B8                 Elf64_Rela <20E0E0h, 4800000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000013D0                 Elf64_Rela <20E0E8h, 4400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000013E8                 Elf64_Rela <20E100h, 4600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001400 ; ELF JMPREL Relocation Table
LOAD:0000000000001400                 Elf64_Rela <20DE00h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001418                 Elf64_Rela <20DE08h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001430                 Elf64_Rela <20DE10h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001448                 Elf64_Rela <20DE18h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001460                 Elf64_Rela <20DE20h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001478                 Elf64_Rela <20DE28h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001490                 Elf64_Rela <20DE30h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000014A8                 Elf64_Rela <20DE38h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000014C0                 Elf64_Rela <20DE40h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:00000000000014D8                 Elf64_Rela <20DE48h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT wcswidth
LOAD:00000000000014F0                 Elf64_Rela <20DE50h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT mbstowcs
LOAD:0000000000001508                 Elf64_Rela <20DE58h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001520                 Elf64_Rela <20DE60h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001538                 Elf64_Rela <20DE68h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001550                 Elf64_Rela <20DE70h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001568                 Elf64_Rela <20DE78h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001580                 Elf64_Rela <20DE80h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001598                 Elf64_Rela <20DE88h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000015B0                 Elf64_Rela <20DE90h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000015C8                 Elf64_Rela <20DE98h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000015E0                 Elf64_Rela <20DEA0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000015F8                 Elf64_Rela <20DEA8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001610                 Elf64_Rela <20DEB0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001628                 Elf64_Rela <20DEB8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001640                 Elf64_Rela <20DEC0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001658                 Elf64_Rela <20DEC8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001670                 Elf64_Rela <20DED0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001688                 Elf64_Rela <20DED8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:00000000000016A0                 Elf64_Rela <20DEE0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:00000000000016B8                 Elf64_Rela <20DEE8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000016D0                 Elf64_Rela <20DEF0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000016E8                 Elf64_Rela <20DEF8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001700                 Elf64_Rela <20DF00h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001718                 Elf64_Rela <20DF08h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001730                 Elf64_Rela <20DF10h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001748                 Elf64_Rela <20DF18h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001760                 Elf64_Rela <20DF20h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000001778                 Elf64_Rela <20DF28h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001790                 Elf64_Rela <20DF30h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000017A8                 Elf64_Rela <20DF38h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000017C0                 Elf64_Rela <20DF40h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000017D8                 Elf64_Rela <20DF48h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017F0                 Elf64_Rela <20DF50h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001808                 Elf64_Rela <20DF58h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001820                 Elf64_Rela <20DF60h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001838                 Elf64_Rela <20DF68h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001850                 Elf64_Rela <20DF70h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001868                 Elf64_Rela <20DF78h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001880                 Elf64_Rela <20DF80h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001898                 Elf64_Rela <20DF88h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT wcstombs
LOAD:00000000000018B0                 Elf64_Rela <20DF90h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000018C8                 Elf64_Rela <20DF98h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000018E0                 Elf64_Rela <20DFA0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000018F8                 Elf64_Rela <20DFA8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __strncat_chk
LOAD:0000000000001910                 Elf64_Rela <20DFB0h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001928                 Elf64_Rela <20DFB8h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001940                 Elf64_Rela <20DFC0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT getdelim
LOAD:0000000000001958                 Elf64_Rela <20DFC8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001958 LOAD            ends
LOAD:0000000000001958
.init:0000000000001970 ; ===========================================================================
.init:0000000000001970
.init:0000000000001970 ; Segment type: Pure code
.init:0000000000001970 ; Segment permissions: Read/Execute
.init:0000000000001970 _init           segment dword public 'CODE' use64
.init:0000000000001970                 assume cs:_init
.init:0000000000001970                 ;org 1970h
.init:0000000000001970                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001970
.init:0000000000001970 ; =============== S U B R O U T I N E =======================================
.init:0000000000001970
.init:0000000000001970
.init:0000000000001970                 public _init_proc
.init:0000000000001970 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001970                 sub     rsp, 8          ; _init
.init:0000000000001974                 mov     rax, cs:__gmon_start___ptr
.init:000000000000197B                 test    rax, rax
.init:000000000000197E                 jz      short loc_1982
.init:0000000000001980                 call    rax ; __gmon_start__
.init:0000000000001982
.init:0000000000001982 loc_1982:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001982                 add     rsp, 8
.init:0000000000001986                 retn
.init:0000000000001986 _init_proc      endp
.init:0000000000001986
.init:0000000000001986 _init           ends
.init:0000000000001986
LOAD:0000000000001987 ; ===========================================================================
LOAD:0000000000001987
LOAD:0000000000001987 ; Segment type: Pure code
LOAD:0000000000001987 ; Segment permissions: Read/Execute
LOAD:0000000000001987 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001987                 assume cs:LOAD
LOAD:0000000000001987                 ;org 1987h
LOAD:0000000000001987                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001987                 align 10h
LOAD:0000000000001987 LOAD            ends
LOAD:0000000000001987
.plt:0000000000001990 ; ===========================================================================
.plt:0000000000001990
.plt:0000000000001990 ; Segment type: Pure code
.plt:0000000000001990 ; Segment permissions: Read/Execute
.plt:0000000000001990 _plt            segment para public 'CODE' use64
.plt:0000000000001990                 assume cs:_plt
.plt:0000000000001990                 ;org 1990h
.plt:0000000000001990                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990
.plt:0000000000001990 sub_1990        proc near               ; CODE XREF: .plt:00000000000019AB↓j
.plt:0000000000001990                                         ; .plt:00000000000019BB↓j ...
.plt:0000000000001990 ; __unwind {
.plt:0000000000001990                 push    cs:qword_20DDF0
.plt:0000000000001996                 jmp     cs:qword_20DDF8
.plt:0000000000001996 sub_1990        endp
.plt:0000000000001996
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:000000000000199C                 align 20h
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ___snprintf_chk proc near               ; CODE XREF: process_field+AA8↓p
.plt:00000000000019A0                                         ; process_field+1028↓p ...
.plt:00000000000019A0                 jmp     cs:__snprintf_chk_ptr
.plt:00000000000019A0 ___snprintf_chk endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    0
.plt:00000000000019AB                 jmp     sub_1990
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; void free(void *ptr)
.plt:00000000000019B0 _free           proc near               ; CODE XREF: unit_to_umax+8C↓p
.plt:00000000000019B0                                         ; unit_to_umax+134↓p ...
.plt:00000000000019B0                 jmp     cs:free_ptr
.plt:00000000000019B0 _free           endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    1
.plt:00000000000019BB                 jmp     sub_1990
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: noreturn thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void __noreturn abort(void)
.plt:00000000000019C0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000019C0                                         ; quotearg_buffer_restyled:def_6261↓p ...
.plt:00000000000019C0                 jmp     cs:abort_ptr
.plt:00000000000019C0 _abort          endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2
.plt:00000000000019CB                 jmp     sub_1990
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int *__errno_location(void)
.plt:00000000000019D0 ___errno_location proc near             ; CODE XREF: main+810↓p
.plt:00000000000019D0                                         ; main+957↓p ...
.plt:00000000000019D0                 jmp     cs:__errno_location_ptr
.plt:00000000000019D0 ___errno_location endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    3
.plt:00000000000019DB                 jmp     sub_1990
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000019E0 _strncmp        proc near               ; CODE XREF: simple_strtod_int+AD↓p
.plt:00000000000019E0                                         ; process_field+3E6↓p ...
.plt:00000000000019E0                 jmp     cs:strncmp_ptr
.plt:00000000000019E0 _strncmp        endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    4
.plt:00000000000019EB                 jmp     sub_1990
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: noreturn thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; void __noreturn _exit(int status)
.plt:00000000000019F0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000019F0                 jmp     cs:_exit_ptr
.plt:00000000000019F0 __exit          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    5
.plt:00000000000019FB                 jmp     sub_1990
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001A00 _strcpy         proc near               ; CODE XREF: process_field+BD8↓p
.plt:0000000000001A00                 jmp     cs:strcpy_ptr
.plt:0000000000001A00 _strcpy         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    6
.plt:0000000000001A0B                 jmp     sub_1990
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; size_t __fpending(FILE *fp)
.plt:0000000000001A10 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001A10                 jmp     cs:__fpending_ptr
.plt:0000000000001A10 ___fpending     endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    7
.plt:0000000000001A1B                 jmp     sub_1990
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001A20 _qsort          proc near               ; CODE XREF: set_fields+172↓p
.plt:0000000000001A20                 jmp     cs:qsort_ptr
.plt:0000000000001A20 _qsort          endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    8
.plt:0000000000001A2B                 jmp     sub_1990
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int wcswidth(const wchar_t *s, size_t n)
.plt:0000000000001A30 _wcswidth       proc near               ; CODE XREF: mbsalign+287↓p
.plt:0000000000001A30                                         ; mbsalign+34C↓p
.plt:0000000000001A30                 jmp     cs:wcswidth_ptr
.plt:0000000000001A30 _wcswidth       endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    9
.plt:0000000000001A3B                 jmp     sub_1990
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
.plt:0000000000001A40 _mbstowcs       proc near               ; CODE XREF: mbsalign+1B6↓p
.plt:0000000000001A40                                         ; mbsalign+220↓p
.plt:0000000000001A40                 jmp     cs:mbstowcs_ptr
.plt:0000000000001A40 _mbstowcs       endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    0Ah
.plt:0000000000001A4B                 jmp     sub_1990
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *textdomain(const char *domainname)
.plt:0000000000001A50 _textdomain     proc near               ; CODE XREF: main+59↓p
.plt:0000000000001A50                 jmp     cs:textdomain_ptr
.plt:0000000000001A50 _textdomain     endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    0Bh
.plt:0000000000001A5B                 jmp     sub_1990
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int fclose(FILE *stream)
.plt:0000000000001A60 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A60                                         ; rpl_fclose+6B↓j
.plt:0000000000001A60                 jmp     cs:fclose_ptr
.plt:0000000000001A60 _fclose         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    0Ch
.plt:0000000000001A6B                 jmp     sub_1990
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A70 _bindtextdomain proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001A70                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A70 _bindtextdomain endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Dh
.plt:0000000000001A7B                 jmp     sub_1990
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A80 _dcgettext      proc near               ; CODE XREF: main+4B5↓p
.plt:0000000000001A80                                         ; main+557↓p ...
.plt:0000000000001A80                 jmp     cs:dcgettext_ptr
.plt:0000000000001A80 _dcgettext      endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Eh
.plt:0000000000001A8B                 jmp     sub_1990
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A90 ___ctype_get_mb_cur_max proc near       ; CODE XREF: mbsalign:loc_5D70↓p
.plt:0000000000001A90                                         ; quotearg_buffer_restyled+6C↓p
.plt:0000000000001A90                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A90 ___ctype_get_mb_cur_max endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    0Fh
.plt:0000000000001A9B                 jmp     sub_1990
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; size_t strlen(const char *s)
.plt:0000000000001AA0 _strlen         proc near               ; CODE XREF: main+8F↓p
.plt:0000000000001AA0                                         ; unit_to_umax+1B↓p ...
.plt:0000000000001AA0                 jmp     cs:strlen_ptr
.plt:0000000000001AA0 _strlen         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    10h
.plt:0000000000001AAB                 jmp     sub_1990
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: noreturn thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2AED↓p
.plt:0000000000001AB0                                         ; unit_to_umax:loc_2F3B↓p ...
.plt:0000000000001AB0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AB0 ___stack_chk_fail endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    11h
.plt:0000000000001ABB                 jmp     sub_1990
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AC0 _getopt_long    proc near               ; CODE XREF: main+C2↓p
.plt:0000000000001AC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AC0 _getopt_long    endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    12h
.plt:0000000000001ACB                 jmp     sub_1990
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001AD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001AD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001AD0 _mbrtowc        endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    13h
.plt:0000000000001ADB                 jmp     sub_1990
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; char *strchr(const char *s, int c)
.plt:0000000000001AE0 _strchr         proc near               ; CODE XREF: process_field+46D↓p
.plt:0000000000001AE0                                         ; xstrtol+EC↓p ...
.plt:0000000000001AE0                 jmp     cs:strchr_ptr
.plt:0000000000001AE0 _strchr         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    14h
.plt:0000000000001AEB                 jmp     sub_1990
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001AF0 ___overflow     proc near               ; CODE XREF: process_line+1AC↓p
.plt:0000000000001AF0                                         ; process_line+1BC↓p ...
.plt:0000000000001AF0                 jmp     cs:__overflow_ptr
.plt:0000000000001AF0 ___overflow     endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    15h
.plt:0000000000001AFB                 jmp     sub_1990
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *strrchr(const char *s, int c)
.plt:0000000000001B00 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B00                 jmp     cs:strrchr_ptr
.plt:0000000000001B00 _strrchr        endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    16h
.plt:0000000000001B0B                 jmp     sub_1990
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B10 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001B10                                         ; rpl_fseeko+3B↓p
.plt:0000000000001B10                 jmp     cs:lseek_ptr
.plt:0000000000001B10 _lseek          endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    17h
.plt:0000000000001B1B                 jmp     sub_1990
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: noreturn thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B20 ___assert_fail  proc near               ; CODE XREF: xstrtol+6A9↓p
.plt:0000000000001B20                                         ; xstrtoumax+39F↓p
.plt:0000000000001B20                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B20 ___assert_fail  endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    18h
.plt:0000000000001B2B                 jmp     sub_1990
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001B30 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001B30                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001B30 ___strtoul_internal endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    19h
.plt:0000000000001B3B                 jmp     sub_1990
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B40 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001B40                                         ; xzalloc+12↓j
.plt:0000000000001B40                 jmp     cs:memset_ptr
.plt:0000000000001B40 _memset         endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    1Ah
.plt:0000000000001B4B                 jmp     sub_1990
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001B50 _strspn         proc near               ; CODE XREF: main+926↓p
.plt:0000000000001B50                                         ; set_fields+4AE↓p
.plt:0000000000001B50                 jmp     cs:strspn_ptr
.plt:0000000000001B50 _strspn         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    1Bh
.plt:0000000000001B5B                 jmp     sub_1990
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; char *strndup(const char *string, size_t n)
.plt:0000000000001B60 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:0000000000001B60                 jmp     cs:strndup_ptr
.plt:0000000000001B60 _strndup        endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    1Ch
.plt:0000000000001B6B                 jmp     sub_1990
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001B70 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001B70                                         ; argmatch_valid+96↓p ...
.plt:0000000000001B70                 jmp     cs:memcmp_ptr
.plt:0000000000001B70 _memcmp         endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Dh
.plt:0000000000001B7B                 jmp     sub_1990
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001B80 _fputs_unlocked proc near               ; CODE XREF: main+75C↓p
.plt:0000000000001B80                                         ; process_field+67↓p ...
.plt:0000000000001B80                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001B80 _fputs_unlocked endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Eh
.plt:0000000000001B8B                 jmp     sub_1990
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001B90 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001B90                 jmp     cs:calloc_ptr
.plt:0000000000001B90 _calloc         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    1Fh
.plt:0000000000001B9B                 jmp     sub_1990
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001BA0 _strcmp         proc near               ; CODE XREF: process_field+D6↓p
.plt:0000000000001BA0                 jmp     cs:strcmp_ptr
.plt:0000000000001BA0 _strcmp         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    20h ; ' '
.plt:0000000000001BAB                 jmp     sub_1990
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001BB0 _strtol         proc near               ; CODE XREF: main+977↓p
.plt:0000000000001BB0                                         ; main+B96↓p ...
.plt:0000000000001BB0                 jmp     cs:strtol_ptr
.plt:0000000000001BB0 _strtol         endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    21h ; '!'
.plt:0000000000001BBB                 jmp     sub_1990
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001BC0 _memcpy         proc near               ; CODE XREF: unit_to_umax+D2↓p
.plt:0000000000001BC0                                         ; xmemdup+23↓j
.plt:0000000000001BC0                 jmp     cs:memcpy_ptr
.plt:0000000000001BC0 _memcpy         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    22h ; '"'
.plt:0000000000001BCB                 jmp     sub_1990
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int fileno(FILE *stream)
.plt:0000000000001BD0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001BD0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001BD0                 jmp     cs:fileno_ptr
.plt:0000000000001BD0 _fileno         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    23h ; '#'
.plt:0000000000001BDB                 jmp     sub_1990
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int wcwidth(wchar_t c)
.plt:0000000000001BE0 _wcwidth        proc near               ; CODE XREF: mbsalign:loc_5EBE↓p
.plt:0000000000001BE0                 jmp     cs:wcwidth_ptr
.plt:0000000000001BE0 _wcwidth        endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    24h ; '$'
.plt:0000000000001BEB                 jmp     sub_1990
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; void *malloc(size_t size)
.plt:0000000000001BF0 _malloc         proc near               ; CODE XREF: mbsalign+204↓p
.plt:0000000000001BF0                                         ; mbsalign+2B5↓p ...
.plt:0000000000001BF0                 jmp     cs:malloc_ptr
.plt:0000000000001BF0 _malloc         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    25h ; '%'
.plt:0000000000001BFB                 jmp     sub_1990
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int fflush(FILE *stream)
.plt:0000000000001C00 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C00                                         ; rpl_fflush+3B↓j
.plt:0000000000001C00                 jmp     cs:fflush_ptr
.plt:0000000000001C00 _fflush         endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    26h ; '&'
.plt:0000000000001C0B                 jmp     sub_1990
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C10 _nl_langinfo    proc near               ; CODE XREF: main+63↓p
.plt:0000000000001C10                                         ; main+8CA↓p ...
.plt:0000000000001C10                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C10 _nl_langinfo    endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    27h ; '''
.plt:0000000000001C1B                 jmp     sub_1990
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int __freading(FILE *fp)
.plt:0000000000001C20 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001C20                                         ; rpl_fflush+9↓p
.plt:0000000000001C20                 jmp     cs:__freading_ptr
.plt:0000000000001C20 ___freading     endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    28h ; '('
.plt:0000000000001C2B                 jmp     sub_1990
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001C30 _realloc        proc near               ; CODE XREF: ambsalign+32↓p
.plt:0000000000001C30                                         ; xrealloc+11↓p
.plt:0000000000001C30                 jmp     cs:realloc_ptr
.plt:0000000000001C30 _realloc        endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    29h ; ')'
.plt:0000000000001C3B                 jmp     sub_1990
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *setlocale(int category, const char *locale)
.plt:0000000000001C40 _setlocale      proc near               ; CODE XREF: main+37↓p
.plt:0000000000001C40                                         ; usage+5DB↓p ...
.plt:0000000000001C40                 jmp     cs:setlocale_ptr
.plt:0000000000001C40 _setlocale      endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    2Ah ; '*'
.plt:0000000000001C4B                 jmp     sub_1990
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001C50                                         ; usage+48B↓p ...
.plt:0000000000001C50                 jmp     cs:__printf_chk_ptr
.plt:0000000000001C50 ___printf_chk   endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    2Bh ; '+'
.plt:0000000000001C5B                 jmp     sub_1990
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001C60 _mempcpy        proc near               ; CODE XREF: mbsalign+F7↓p
.plt:0000000000001C60                 jmp     cs:mempcpy_ptr
.plt:0000000000001C60 _mempcpy        endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2Ch ; ','
.plt:0000000000001C6B                 jmp     sub_1990
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001C70 _memmove        proc near               ; CODE XREF: set_fields+1ED↓p
.plt:0000000000001C70                 jmp     cs:memmove_ptr
.plt:0000000000001C70 _memmove        endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Dh ; '-'
.plt:0000000000001C7B                 jmp     sub_1990
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001C80 _error          proc near               ; CODE XREF: main+4C9↓p
.plt:0000000000001C80                                         ; main+565↓p ...
.plt:0000000000001C80                 jmp     cs:error_ptr
.plt:0000000000001C80 _error          endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Eh ; '.'
.plt:0000000000001C8B                 jmp     sub_1990
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001C90 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_939A↓j
.plt:0000000000001C90                 jmp     cs:fseeko_ptr
.plt:0000000000001C90 _fseeko         endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    2Fh ; '/'
.plt:0000000000001C9B                 jmp     sub_1990
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001CA0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001CA0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001CA0 ___cxa_atexit   endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    30h ; '0'
.plt:0000000000001CAB                 jmp     sub_1990
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
.plt:0000000000001CB0 _wcstombs       proc near               ; CODE XREF: mbsalign+2A2↓p
.plt:0000000000001CB0                                         ; mbsalign+327↓p
.plt:0000000000001CB0                 jmp     cs:wcstombs_ptr
.plt:0000000000001CB0 _wcstombs       endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    31h ; '1'
.plt:0000000000001CBB                 jmp     sub_1990
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: noreturn thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; void __noreturn exit(int status)
.plt:0000000000001CC0 _exit           proc near               ; CODE XREF: main+267↓p
.plt:0000000000001CC0                                         ; usage+58↓p
.plt:0000000000001CC0                 jmp     cs:exit_ptr
.plt:0000000000001CC0 _exit           endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    32h ; '2'
.plt:0000000000001CCB                 jmp     sub_1990
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001CD0 _fwrite         proc near               ; CODE XREF: process_field+7E0↓p
.plt:0000000000001CD0                                         ; process_field+1326↓p ...
.plt:0000000000001CD0                 jmp     cs:fwrite_ptr
.plt:0000000000001CD0 _fwrite         endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    33h ; '3'
.plt:0000000000001CDB                 jmp     sub_1990
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ___fprintf_chk  proc near               ; CODE XREF: main+6AD↓p
.plt:0000000000001CE0                                         ; process_field+1E3↓p ...
.plt:0000000000001CE0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001CE0 ___fprintf_chk  endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    34h ; '4'
.plt:0000000000001CEB                 jmp     sub_1990
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ___strncat_chk  proc near               ; CODE XREF: process_field+B22↓p
.plt:0000000000001CF0                                         ; process_field+15F8↓p
.plt:0000000000001CF0                 jmp     cs:__strncat_chk_ptr
.plt:0000000000001CF0 ___strncat_chk  endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    35h ; '5'
.plt:0000000000001CFB                 jmp     sub_1990
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001D00 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001D00                 jmp     cs:mbsinit_ptr
.plt:0000000000001D00 _mbsinit        endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    36h ; '6'
.plt:0000000000001D0B                 jmp     sub_1990
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int iswprint(wint_t wc)
.plt:0000000000001D10 _iswprint       proc near               ; CODE XREF: mbsalign+25D↓p
.plt:0000000000001D10                                         ; quotearg_buffer_restyled+990↓p
.plt:0000000000001D10                 jmp     cs:iswprint_ptr
.plt:0000000000001D10 _iswprint       endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    37h ; '7'
.plt:0000000000001D1B                 jmp     sub_1990
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001D20 _getdelim       proc near               ; CODE XREF: main+78C↓p
.plt:0000000000001D20                                         ; main+7E4↓p
.plt:0000000000001D20                 jmp     cs:getdelim_ptr
.plt:0000000000001D20 _getdelim       endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    38h ; '8'
.plt:0000000000001D2B                 jmp     sub_1990
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001D30 ___ctype_b_loc  proc near               ; CODE XREF: main+BBA↓p
.plt:0000000000001D30                                         ; process_field+105↓p ...
.plt:0000000000001D30                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001D30 ___ctype_b_loc  endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    39h ; '9'
.plt:0000000000001D3B                 jmp     sub_1990
.plt:0000000000001D3B ; } // starts at 1990
.plt:0000000000001D3B _plt            ends
.plt:0000000000001D3B
.plt.got:0000000000001D40 ; ===========================================================================
.plt.got:0000000000001D40
.plt.got:0000000000001D40 ; Segment type: Pure code
.plt.got:0000000000001D40 ; Segment permissions: Read/Execute
.plt.got:0000000000001D40 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001D40                 assume cs:_plt_got
.plt.got:0000000000001D40                 ;org 1D40h
.plt.got:0000000000001D40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001D40
.plt.got:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001D40
.plt.got:0000000000001D40 ; Attributes: thunk
.plt.got:0000000000001D40
.plt.got:0000000000001D40 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001D40 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001D40 ; __unwind {
.plt.got:0000000000001D40                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001D40 __cxa_finalize  endp
.plt.got:0000000000001D40
.plt.got:0000000000001D40 ; ---------------------------------------------------------------------------
.plt.got:0000000000001D46                 align 8
.plt.got:0000000000001D46 ; } // starts at 1D40
.plt.got:0000000000001D46 _plt_got        ends
.plt.got:0000000000001D46
LOAD:0000000000001D48 ; ===========================================================================
LOAD:0000000000001D48
LOAD:0000000000001D48 ; Segment type: Pure code
LOAD:0000000000001D48 ; Segment permissions: Read/Execute
LOAD:0000000000001D48 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001D48                 assume cs:LOAD
LOAD:0000000000001D48                 ;org 1D48h
LOAD:0000000000001D48                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001D48                 align 10h
LOAD:0000000000001D48 LOAD            ends
LOAD:0000000000001D48
.text:0000000000001D50 ; ===========================================================================
.text:0000000000001D50
.text:0000000000001D50 ; Segment type: Pure code
.text:0000000000001D50 ; Segment permissions: Read/Execute
.text:0000000000001D50 _text           segment para public 'CODE' use64
.text:0000000000001D50                 assume cs:_text
.text:0000000000001D50                 ;org 1D50h
.text:0000000000001D50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001D50
.text:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D50
.text:0000000000001D50
.text:0000000000001D50 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001D50                 public main
.text:0000000000001D50 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001D50
.text:0000000000001D50 var_70          = qword ptr -70h
.text:0000000000001D50 nptr            = qword ptr -68h
.text:0000000000001D50 var_60          = qword ptr -60h
.text:0000000000001D50 s               = qword ptr -50h
.text:0000000000001D50 n               = qword ptr -48h
.text:0000000000001D50 var_40          = qword ptr -40h
.text:0000000000001D50
.text:0000000000001D50 ; __unwind {
.text:0000000000001D50                 push    r15
.text:0000000000001D52                 push    r14
.text:0000000000001D54                 push    r13
.text:0000000000001D56                 push    r12
.text:0000000000001D58                 push    rbp
.text:0000000000001D59                 push    rbx
.text:0000000000001D5A                 mov     ebp, edi
.text:0000000000001D5C                 mov     rbx, rsi
.text:0000000000001D5F                 sub     rsp, 48h
.text:0000000000001D63                 mov     rdi, [rsi]
.text:0000000000001D66                 mov     rax, fs:28h
.text:0000000000001D6F                 mov     [rsp+78h+var_40], rax
.text:0000000000001D74                 xor     eax, eax
.text:0000000000001D76                 call    set_program_name
.text:0000000000001D7B                 lea     rsi, aReturningValue+1Dh ; locale
.text:0000000000001D82                 mov     edi, 6          ; category
.text:0000000000001D87                 call    _setlocale
.text:0000000000001D8C                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001D93                 lea     rdi, domainname ; "coreutils"
.text:0000000000001D9A                 mov     r13, rax
.text:0000000000001D9D                 call    _bindtextdomain
.text:0000000000001DA2                 lea     rdi, domainname ; "coreutils"
.text:0000000000001DA9                 call    _textdomain
.text:0000000000001DAE                 mov     edi, 10000h     ; item
.text:0000000000001DB3                 call    _nl_langinfo
.text:0000000000001DB8                 test    rax, rax
.text:0000000000001DBB                 mov     cs:decimal_point, rax
.text:0000000000001DC2                 jz      loc_1E89
.text:0000000000001DC8                 cmp     byte ptr [rax], 0
.text:0000000000001DCB                 jz      loc_1E89
.text:0000000000001DD1
.text:0000000000001DD1 loc_1DD1:                               ; CODE XREF: main+147↓j
.text:0000000000001DD1                 mov     rdi, cs:decimal_point ; s
.text:0000000000001DD8                 lea     r12, longopts
.text:0000000000001DDF                 call    _strlen
.text:0000000000001DE4                 lea     rdi, close_stdout
.text:0000000000001DEB                 mov     cs:decimal_point_length, eax
.text:0000000000001DF1                 call    atexit
.text:0000000000001DF6                 db      2Eh
.text:0000000000001DF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: main+134↓j
.text:0000000000001E00                                         ; main+199↓j ...
.text:0000000000001E00                 lea     rdx, shortopts  ; "d:z"
.text:0000000000001E07                 xor     r8d, r8d        ; longind
.text:0000000000001E0A                 mov     rcx, r12        ; longopts
.text:0000000000001E0D                 mov     rsi, rbx        ; argv
.text:0000000000001E10                 mov     edi, ebp        ; argc
.text:0000000000001E12                 call    _getopt_long
.text:0000000000001E17                 cmp     eax, 0FFFFFFFFh
.text:0000000000001E1A                 jz      loc_222E
.text:0000000000001E20                 cmp     eax, 84h
.text:0000000000001E25                 jz      loc_2140
.text:0000000000001E2B                 jle     short loc_1EA0
.text:0000000000001E2D                 cmp     eax, 89h
.text:0000000000001E32                 jz      loc_1FC7
.text:0000000000001E38                 jg      loc_1EF0
.text:0000000000001E3E                 cmp     eax, 86h
.text:0000000000001E43                 jz      loc_2058
.text:0000000000001E49                 jl      loc_2040
.text:0000000000001E4F                 cmp     eax, 87h
.text:0000000000001E54                 jz      loc_20E0
.text:0000000000001E5A                 cmp     eax, 88h
.text:0000000000001E5F                 jnz     loc_1F7B
.text:0000000000001E65                 cmp     cs:n_frp, 0
.text:0000000000001E6D                 jnz     loc_2B6C
.text:0000000000001E73                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E7A                 mov     esi, 1
.text:0000000000001E7F                 call    set_fields
.text:0000000000001E84                 jmp     loc_1E00
.text:0000000000001E89 ; ---------------------------------------------------------------------------
.text:0000000000001E89
.text:0000000000001E89 loc_1E89:                               ; CODE XREF: main+72↑j
.text:0000000000001E89                                         ; main+7B↑j
.text:0000000000001E89                 lea     rax, asc_969E   ; "."
.text:0000000000001E90                 mov     cs:decimal_point, rax
.text:0000000000001E97                 jmp     loc_1DD1
.text:0000000000001E97 ; ---------------------------------------------------------------------------
.text:0000000000001E9C                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: main+DB↑j
.text:0000000000001EA0                 cmp     eax, 7Ah ; 'z'
.text:0000000000001EA3                 jz      loc_2188
.text:0000000000001EA9                 jle     loc_1F60
.text:0000000000001EAF                 cmp     eax, 81h
.text:0000000000001EB4                 jz      loc_2020
.text:0000000000001EBA                 jle     loc_1FD8
.text:0000000000001EC0                 cmp     eax, 82h
.text:0000000000001EC5                 jz      loc_2098
.text:0000000000001ECB                 cmp     eax, 83h
.text:0000000000001ED0                 jnz     loc_1F7B
.text:0000000000001ED6                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000001EDD                 call    unit_to_umax
.text:0000000000001EE2                 mov     cs:to_unit_size, rax
.text:0000000000001EE9                 jmp     loc_1E00
.text:0000000000001EE9 ; ---------------------------------------------------------------------------
.text:0000000000001EEE                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+E8↑j
.text:0000000000001EF0                 cmp     eax, 8Bh
.text:0000000000001EF5                 jz      loc_21B0
.text:0000000000001EFB                 jl      loc_1FC0
.text:0000000000001F01                 cmp     eax, 8Ch
.text:0000000000001F06                 jz      loc_2198
.text:0000000000001F0C                 cmp     eax, 8Dh
.text:0000000000001F11                 jnz     short loc_1F7B
.text:0000000000001F13                 mov     r9, cs:argmatch_die
.text:0000000000001F1A                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F21                 lea     rdx, inval_args
.text:0000000000001F28                 lea     rcx, inval_types
.text:0000000000001F2F                 lea     rdi, aInvalid   ; "--invalid"
.text:0000000000001F36                 mov     r8d, 4
.text:0000000000001F3C                 call    __xargmatch_internal
.text:0000000000001F41                 lea     rdx, inval_types
.text:0000000000001F48                 mov     eax, [rdx+rax*4]
.text:0000000000001F4B                 mov     cs:inval_style, eax
.text:0000000000001F51                 jmp     loc_1E00
.text:0000000000001F51 ; ---------------------------------------------------------------------------
.text:0000000000001F56                 align 20h
.text:0000000000001F60
.text:0000000000001F60 loc_1F60:                               ; CODE XREF: main+159↑j
.text:0000000000001F60                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F65                 jz      loc_2992
.text:0000000000001F6B                 cmp     eax, 64h ; 'd'
.text:0000000000001F6E                 jz      loc_2070
.text:0000000000001F74                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001F79                 jz      short loc_1F88
.text:0000000000001F7B
.text:0000000000001F7B loc_1F7B:                               ; CODE XREF: main+10F↑j
.text:0000000000001F7B                                         ; main+180↑j ...
.text:0000000000001F7B                 mov     edi, 1          ; status
.text:0000000000001F80                 call    usage
.text:0000000000001F80 ; ---------------------------------------------------------------------------
.text:0000000000001F85                 align 8
.text:0000000000001F88
.text:0000000000001F88 loc_1F88:                               ; CODE XREF: main+229↑j
.text:0000000000001F88                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F8F                 mov     rcx, cs:Version
.text:0000000000001F96                 lea     r8, aAssafGordon ; "Assaf Gordon"
.text:0000000000001F9D                 lea     rdx, unk_9647
.text:0000000000001FA4                 lea     rsi, aNumfmt    ; "numfmt"
.text:0000000000001FAB                 xor     r9d, r9d
.text:0000000000001FAE                 xor     eax, eax
.text:0000000000001FB0                 call    version_etc
.text:0000000000001FB5                 xor     edi, edi        ; status
.text:0000000000001FB7                 call    _exit
.text:0000000000001FB7 ; ---------------------------------------------------------------------------
.text:0000000000001FBC                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: main+1AB↑j
.text:0000000000001FC0                 mov     cs:dev_debug, 1
.text:0000000000001FC7
.text:0000000000001FC7 loc_1FC7:                               ; CODE XREF: main+E2↑j
.text:0000000000001FC7                 mov     cs:debug, 1
.text:0000000000001FCE                 jmp     loc_1E00
.text:0000000000001FCE ; ---------------------------------------------------------------------------
.text:0000000000001FD3                 align 8
.text:0000000000001FD8
.text:0000000000001FD8 loc_1FD8:                               ; CODE XREF: main+16A↑j
.text:0000000000001FD8                 add     eax, 0FFFFFF80h
.text:0000000000001FDB                 jnz     short loc_1F7B
.text:0000000000001FDD                 mov     r9, cs:argmatch_die
.text:0000000000001FE4                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001FEB                 lea     rdx, scale_from_args
.text:0000000000001FF2                 lea     rcx, scale_from_types
.text:0000000000001FF9                 lea     rdi, aFrom      ; "--from"
.text:0000000000002000                 mov     r8d, 4
.text:0000000000002006                 call    __xargmatch_internal
.text:000000000000200B                 lea     rdx, scale_from_types
.text:0000000000002012                 mov     eax, [rdx+rax*4]
.text:0000000000002015                 mov     cs:scale_from, eax
.text:000000000000201B                 jmp     loc_1E00
.text:0000000000002020 ; ---------------------------------------------------------------------------
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: main+164↑j
.text:0000000000002020                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000002027                 call    unit_to_umax
.text:000000000000202C                 mov     cs:from_unit_size, rax
.text:0000000000002033                 jmp     loc_1E00
.text:0000000000002033 ; ---------------------------------------------------------------------------
.text:0000000000002038                 align 20h
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: main+F9↑j
.text:0000000000002040                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002047                 mov     cs:suffix, rax
.text:000000000000204E                 jmp     loc_1E00
.text:000000000000204E ; ---------------------------------------------------------------------------
.text:0000000000002053                 align 8
.text:0000000000002058
.text:0000000000002058 loc_2058:                               ; CODE XREF: main+F3↑j
.text:0000000000002058                 mov     cs:grouping, 1
.text:0000000000002062                 jmp     loc_1E00
.text:0000000000002062 ; ---------------------------------------------------------------------------
.text:0000000000002067                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: main+21E↑j
.text:0000000000002070                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000002077                 movsx   eax, byte ptr [rdx]
.text:000000000000207A                 test    al, al
.text:000000000000207C                 jz      short loc_2088
.text:000000000000207E                 cmp     byte ptr [rdx+1], 0
.text:0000000000002082                 jnz     loc_2A65
.text:0000000000002088
.text:0000000000002088 loc_2088:                               ; CODE XREF: main+32C↑j
.text:0000000000002088                 mov     cs:delimiter, eax
.text:000000000000208E                 jmp     loc_1E00
.text:000000000000208E ; ---------------------------------------------------------------------------
.text:0000000000002093                 align 8
.text:0000000000002098
.text:0000000000002098 loc_2098:                               ; CODE XREF: main+175↑j
.text:0000000000002098                 mov     r9, cs:argmatch_die
.text:000000000000209F                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:00000000000020A6                 lea     rdx, scale_to_args
.text:00000000000020AD                 lea     rcx, scale_to_types
.text:00000000000020B4                 lea     rdi, aTo        ; "--to"
.text:00000000000020BB                 mov     r8d, 4
.text:00000000000020C1                 call    __xargmatch_internal
.text:00000000000020C6                 lea     rdx, scale_to_types
.text:00000000000020CD                 mov     eax, [rdx+rax*4]
.text:00000000000020D0                 mov     cs:scale_to, eax
.text:00000000000020D6                 jmp     loc_1E00
.text:00000000000020D6 ; ---------------------------------------------------------------------------
.text:00000000000020DB                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: main+104↑j
.text:00000000000020E0                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:00000000000020E7                 lea     r8, aReturningValue+1Dh ; ""
.text:00000000000020EE                 lea     rcx, padding_width
.text:00000000000020F5                 xor     esi, esi
.text:00000000000020F7                 mov     edx, 0Ah
.text:00000000000020FC                 call    xstrtol
.text:0000000000002101                 test    eax, eax
.text:0000000000002103                 jnz     loc_2A2F
.text:0000000000002109                 mov     rax, cs:padding_width
.text:0000000000002110                 test    rax, rax
.text:0000000000002113                 jz      loc_2A2F
.text:0000000000002119                 jns     loc_1E00
.text:000000000000211F                 neg     rax
.text:0000000000002122                 mov     cs:padding_alignment, 0
.text:000000000000212C                 mov     cs:padding_width, rax
.text:0000000000002133                 jmp     loc_1E00
.text:0000000000002133 ; ---------------------------------------------------------------------------
.text:0000000000002138                 align 20h
.text:0000000000002140
.text:0000000000002140 loc_2140:                               ; CODE XREF: main+D5↑j
.text:0000000000002140                 mov     r9, cs:argmatch_die
.text:0000000000002147                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:000000000000214E                 lea     rdx, round_args
.text:0000000000002155                 lea     rcx, round_types
.text:000000000000215C                 lea     rdi, aRound     ; "--round"
.text:0000000000002163                 mov     r8d, 4
.text:0000000000002169                 call    __xargmatch_internal
.text:000000000000216E                 lea     rdx, round_types
.text:0000000000002175                 mov     eax, [rdx+rax*4]
.text:0000000000002178                 mov     cs:round_style, eax
.text:000000000000217E                 jmp     loc_1E00
.text:000000000000217E ; ---------------------------------------------------------------------------
.text:0000000000002183                 align 8
.text:0000000000002188
.text:0000000000002188 loc_2188:                               ; CODE XREF: main+153↑j
.text:0000000000002188                 mov     cs:line_delim, 0
.text:000000000000218F                 jmp     loc_1E00
.text:000000000000218F ; ---------------------------------------------------------------------------
.text:0000000000002194                 align 8
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: main+1B6↑j
.text:0000000000002198                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:000000000000219F                 mov     cs:format_str, rax
.text:00000000000021A6                 jmp     loc_1E00
.text:00000000000021A6 ; ---------------------------------------------------------------------------
.text:00000000000021AB                 align 10h
.text:00000000000021B0
.text:00000000000021B0 loc_21B0:                               ; CODE XREF: main+1A5↑j
.text:00000000000021B0                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:00000000000021B7                 test    rdi, rdi
.text:00000000000021BA                 jz      short loc_221E
.text:00000000000021BC                 lea     r8, aReturningValue+1Dh ; ""
.text:00000000000021C3                 lea     rcx, header
.text:00000000000021CA                 xor     esi, esi
.text:00000000000021CC                 mov     edx, 0Ah
.text:00000000000021D1                 call    xstrtoumax
.text:00000000000021D6                 test    eax, eax
.text:00000000000021D8                 jnz     short loc_21E8
.text:00000000000021DA                 cmp     cs:header, 0
.text:00000000000021E2                 jnz     loc_1E00
.text:00000000000021E8
.text:00000000000021E8 loc_21E8:                               ; CODE XREF: main+488↑j
.text:00000000000021E8                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000021EF                 call    quote
.text:00000000000021F4                 lea     rsi, msgid      ; "invalid header value %s"
.text:00000000000021FB                 mov     rbx, rax
.text:00000000000021FE                 mov     edx, 5          ; category
.text:0000000000002203                 xor     edi, edi        ; domainname
.text:0000000000002205                 call    _dcgettext
.text:000000000000220A                 mov     rcx, rbx
.text:000000000000220D                 mov     rdx, rax        ; format
.text:0000000000002210                 xor     esi, esi        ; errnum
.text:0000000000002212                 mov     edi, 1          ; status
.text:0000000000002217                 xor     eax, eax
.text:0000000000002219                 call    _error
.text:000000000000221E
.text:000000000000221E loc_221E:                               ; CODE XREF: main+46A↑j
.text:000000000000221E                 mov     cs:header, 1
.text:0000000000002229                 jmp     loc_1E00
.text:000000000000222E ; ---------------------------------------------------------------------------
.text:000000000000222E
.text:000000000000222E loc_222E:                               ; CODE XREF: main+CA↑j
.text:000000000000222E                 cmp     cs:format_str, 0
.text:0000000000002236                 jz      short loc_2245
.text:0000000000002238                 cmp     cs:grouping, 0
.text:000000000000223F                 jnz     loc_2B16
.text:0000000000002245
.text:0000000000002245 loc_2245:                               ; CODE XREF: main+4E6↑j
.text:0000000000002245                 test    r13, r13
.text:0000000000002248                 jnz     short loc_2257
.text:000000000000224A                 cmp     cs:debug, 0
.text:0000000000002251                 jnz     loc_2811
.text:0000000000002257
.text:0000000000002257 loc_2257:                               ; CODE XREF: main+4F8↑j
.text:0000000000002257                                         ; main+AE2↓j
.text:0000000000002257                 cmp     cs:debug, 0
.text:000000000000225E                 jz      short loc_22BA
.text:0000000000002260                 cmp     cs:scale_from, 0
.text:0000000000002267                 jnz     short loc_22BA
.text:0000000000002269                 cmp     cs:scale_to, 0
.text:0000000000002270                 jnz     short loc_22BA
.text:0000000000002272                 cmp     cs:grouping, 0
.text:0000000000002279                 mov     r12, cs:format_str
.text:0000000000002280                 jnz     loc_2968
.text:0000000000002286                 cmp     cs:padding_width, 0
.text:000000000000228E                 jnz     loc_2984
.text:0000000000002294                 test    r12, r12
.text:0000000000002297                 jnz     short loc_22CA
.text:0000000000002299                 lea     rsi, aNoConversionOp ; "no conversion option specified"
.text:00000000000022A0                 mov     edx, 5          ; category
.text:00000000000022A5                 xor     edi, edi        ; domainname
.text:00000000000022A7                 call    _dcgettext
.text:00000000000022AC                 xor     esi, esi        ; errnum
.text:00000000000022AE                 mov     rdx, rax        ; format
.text:00000000000022B1                 xor     edi, edi        ; status
.text:00000000000022B3                 xor     eax, eax
.text:00000000000022B5                 call    _error
.text:00000000000022BA
.text:00000000000022BA loc_22BA:                               ; CODE XREF: main+50E↑j
.text:00000000000022BA                                         ; main+517↑j ...
.text:00000000000022BA                 mov     r12, cs:format_str
.text:00000000000022C1                 test    r12, r12
.text:00000000000022C4                 jz      loc_2406
.text:00000000000022CA
.text:00000000000022CA loc_22CA:                               ; CODE XREF: main+547↑j
.text:00000000000022CA                                         ; main+C1B↓j ...
.text:00000000000022CA                 mov     [rsp+78h+n], 0
.text:00000000000022D3                 xor     r15d, r15d
.text:00000000000022D6                 xor     eax, eax
.text:00000000000022D8                 jmp     short loc_22F4
.text:00000000000022D8 ; ---------------------------------------------------------------------------
.text:00000000000022DA                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: main+5AC↓j
.text:00000000000022E0                 test    dl, dl
.text:00000000000022E2                 jz      loc_2999
.text:00000000000022E8                 mov     edx, 1
.text:00000000000022ED
.text:00000000000022ED loc_22ED:                               ; CODE XREF: main+5C3↓j
.text:00000000000022ED                 add     rax, rdx
.text:00000000000022F0                 add     r15, 1
.text:00000000000022F4
.text:00000000000022F4 loc_22F4:                               ; CODE XREF: main+588↑j
.text:00000000000022F4                 movzx   edx, byte ptr [r12+rax]
.text:00000000000022F9                 cmp     dl, 25h ; '%'
.text:00000000000022FC                 jnz     short loc_22E0
.text:00000000000022FE                 cmp     byte ptr [r12+rax+1], 25h ; '%'
.text:0000000000002304                 lea     r13, [rax+1]
.text:0000000000002308                 jnz     loc_2658
.text:000000000000230E                 mov     edx, 2
.text:0000000000002313                 jmp     short loc_22ED
.text:0000000000002315 ; ---------------------------------------------------------------------------
.text:0000000000002315
.text:0000000000002315 loc_2315:                               ; CODE XREF: main+A1F↓j
.text:0000000000002315                 test    r15, r15
.text:0000000000002318                 jz      loc_286B
.text:000000000000231E
.text:000000000000231E loc_231E:                               ; CODE XREF: main+C2F↓j
.text:000000000000231E                 mov     rsi, r15
.text:0000000000002321                 mov     rdi, r12
.text:0000000000002324                 call    xstrndup
.text:0000000000002329                 cmp     byte ptr [r13+0], 0
.text:000000000000232E                 mov     cs:format_str_prefix, rax
.text:0000000000002335                 jnz     loc_286B
.text:000000000000233B
.text:000000000000233B loc_233B:                               ; CODE XREF: main+B2A↓j
.text:000000000000233B                                         ; main+C29↓j
.text:000000000000233B                 cmp     cs:dev_debug, 0
.text:0000000000002342                 jz      loc_2406
.text:0000000000002348                 mov     rsi, cs:format_str_suffix
.text:000000000000234F                 test    rsi, rsi
.text:0000000000002352                 jz      loc_2943
.text:0000000000002358
.text:0000000000002358 loc_2358:                               ; CODE XREF: main+BFA↓j
.text:0000000000002358                 mov     edi, 2
.text:000000000000235D                 call    quote_n
.text:0000000000002362                 mov     rsi, cs:format_str_prefix
.text:0000000000002369                 mov     rcx, rax
.text:000000000000236C                 test    rsi, rsi
.text:000000000000236F                 jz      loc_2937
.text:0000000000002375
.text:0000000000002375 loc_2375:                               ; CODE XREF: main+BEE↓j
.text:0000000000002375                 mov     edi, 1
.text:000000000000237A                 mov     [rsp+78h+nptr], rcx
.text:000000000000237F                 lea     r14, aRight     ; "Right"
.text:0000000000002386                 call    quote_n
.text:000000000000238B                 cmp     cs:padding_alignment, 0
.text:0000000000002392                 mov     r15, rax
.text:0000000000002395                 lea     rax, aLeft      ; "Left"
.text:000000000000239C                 mov     r9, cs:padding_width
.text:00000000000023A3                 lea     r13, aNo        ; "no"
.text:00000000000023AA                 mov     rsi, r12
.text:00000000000023AD                 cmovz   r14, rax
.text:00000000000023B1                 cmp     cs:grouping, 0
.text:00000000000023B8                 lea     rax, aYes       ; "yes"
.text:00000000000023BF                 mov     [rsp+78h+var_70], r9
.text:00000000000023C4                 cmovnz  r13, rax
.text:00000000000023C8                 xor     edi, edi
.text:00000000000023CA                 call    quote_n
.text:00000000000023CF                 sub     rsp, 8
.text:00000000000023D3                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000023DA                 lea     rdx, aFormatStringIn ; "format String:\n  input: %s\n  grouping"...
.text:00000000000023E1                 mov     rcx, [rsp+80h+nptr]
.text:00000000000023E6                 mov     r8, r13
.text:00000000000023E9                 mov     esi, 1
.text:00000000000023EE                 push    rcx
.text:00000000000023EF                 push    r15
.text:00000000000023F1                 mov     rcx, rax
.text:00000000000023F4                 push    r14
.text:00000000000023F6                 mov     r9, [rsp+98h+var_70]
.text:00000000000023FB                 xor     eax, eax
.text:00000000000023FD                 call    ___fprintf_chk
.text:0000000000002402                 add     rsp, 20h
.text:0000000000002406
.text:0000000000002406 loc_2406:                               ; CODE XREF: main+574↑j
.text:0000000000002406                                         ; main+5F2↑j
.text:0000000000002406                 cmp     cs:grouping, 0
.text:000000000000240D                 jnz     loc_25FB
.text:0000000000002413
.text:0000000000002413 loc_2413:                               ; CODE XREF: main+8BF↓j
.text:0000000000002413                                         ; main+8D2↓j ...
.text:0000000000002413                 mov     rdi, cs:padding_width
.text:000000000000241A                 cmp     rdi, cs:padding_buffer_size
.text:0000000000002421                 jnb     loc_264E
.text:0000000000002427
.text:0000000000002427 loc_2427:                               ; CODE XREF: main+903↓j
.text:0000000000002427                 xor     eax, eax
.text:0000000000002429                 cmp     cs:padding_width, 0
.text:0000000000002431                 jnz     short loc_2442
.text:0000000000002433                 xor     eax, eax
.text:0000000000002435                 cmp     cs:delimiter, 80h
.text:000000000000243F                 setz    al
.text:0000000000002442
.text:0000000000002442 loc_2442:                               ; CODE XREF: main+6E1↑j
.text:0000000000002442                 cmp     cs:inval_style, 0
.text:0000000000002449                 mov     cs:auto_padding, eax
.text:000000000000244F                 jz      short loc_245B
.text:0000000000002451                 mov     cs:conv_exit_code, 0
.text:000000000000245B
.text:000000000000245B loc_245B:                               ; CODE XREF: main+6FF↑j
.text:000000000000245B                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002461                 cmp     eax, ebp
.text:0000000000002463                 jl      loc_25AE
.text:0000000000002469                 mov     rax, cs:header
.text:0000000000002470                 mov     [rsp+78h+s], 0
.text:0000000000002479                 lea     r13, [rsp+78h+n]
.text:000000000000247E                 mov     [rsp+78h+n], 0
.text:0000000000002487                 lea     rbx, [rsp+78h+s]
.text:000000000000248C                 lea     rdx, [rax-1]
.text:0000000000002490                 test    rax, rax
.text:0000000000002493                 mov     cs:header, rdx
.text:000000000000249A                 jnz     short loc_24C8
.text:000000000000249C                 jmp     short loc_24E6
.text:000000000000249C ; ---------------------------------------------------------------------------
.text:000000000000249E                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: main+794↓j
.text:00000000000024A0                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000024A7                 mov     rdi, [rsp+78h+s] ; s
.text:00000000000024AC                 call    _fputs_unlocked
.text:00000000000024B1                 mov     rax, cs:header
.text:00000000000024B8                 lea     rdx, [rax-1]
.text:00000000000024BC                 test    rax, rax
.text:00000000000024BF                 mov     cs:header, rdx
.text:00000000000024C6                 jz      short loc_24E6
.text:00000000000024C8
.text:00000000000024C8 loc_24C8:                               ; CODE XREF: main+74A↑j
.text:00000000000024C8                 movzx   edx, cs:line_delim ; delimiter
.text:00000000000024CF                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000024D6                 mov     rsi, r13        ; n
.text:00000000000024D9                 mov     rdi, rbx        ; lineptr
.text:00000000000024DC                 call    _getdelim
.text:00000000000024E1                 test    rax, rax
.text:00000000000024E4                 jg      short loc_24A0
.text:00000000000024E6
.text:00000000000024E6 loc_24E6:                               ; CODE XREF: main+74C↑j
.text:00000000000024E6                                         ; main+776↑j
.text:00000000000024E6                 mov     r12d, 1
.text:00000000000024EC                 jmp     short loc_2520
.text:00000000000024EC ; ---------------------------------------------------------------------------
.text:00000000000024EE                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: main+7EC↓j
.text:00000000000024F0                 mov     rdi, [rsp+78h+s]
.text:00000000000024F5                 lea     rcx, [rdi+rax-1]
.text:00000000000024FA                 movzx   eax, cs:line_delim
.text:0000000000002501                 movsx   edx, byte ptr [rcx]
.text:0000000000002504                 cmp     edx, eax
.text:0000000000002506                 setz    sil
.text:000000000000250A                 jnz     short loc_2514
.text:000000000000250C                 mov     byte ptr [rcx], 0
.text:000000000000250F                 mov     rdi, [rsp+78h+s]
.text:0000000000002514
.text:0000000000002514 loc_2514:                               ; CODE XREF: main+7BA↑j
.text:0000000000002514                 movzx   esi, sil
.text:0000000000002518                 call    process_line
.text:000000000000251D                 and     r12d, eax
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: main+79C↑j
.text:0000000000002520                 movzx   edx, cs:line_delim ; delimiter
.text:0000000000002527                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000252E                 mov     rsi, r13        ; n
.text:0000000000002531                 mov     rdi, rbx        ; lineptr
.text:0000000000002534                 call    _getdelim
.text:0000000000002539                 test    rax, rax
.text:000000000000253C                 jg      short loc_24F0
.text:000000000000253E                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000002545                 test    byte ptr [rax], 20h
.text:0000000000002548                 jz      short loc_2573
.text:000000000000254A                 lea     rsi, aErrorReadingIn ; "error reading input"
.text:0000000000002551                 mov     edx, 5          ; category
.text:0000000000002556                 xor     edi, edi        ; domainname
.text:0000000000002558                 call    _dcgettext
.text:000000000000255D                 mov     rbx, rax
.text:0000000000002560                 call    ___errno_location
.text:0000000000002565                 mov     esi, [rax]      ; errnum
.text:0000000000002567                 mov     rdx, rbx        ; format
.text:000000000000256A                 xor     edi, edi        ; status
.text:000000000000256C                 xor     eax, eax
.text:000000000000256E                 call    _error
.text:0000000000002573
.text:0000000000002573 loc_2573:                               ; CODE XREF: main+7F8↑j
.text:0000000000002573                                         ; main+8A6↓j
.text:0000000000002573                 cmp     cs:debug, 0
.text:000000000000257A                 jz      loc_27C9
.text:0000000000002580                 test    r12d, r12d
.text:0000000000002583                 jz      loc_27EE
.text:0000000000002589
.text:0000000000002589 loc_2589:                               ; CODE XREF: main+A7C↓j
.text:0000000000002589                                         ; main+A8E↓j ...
.text:0000000000002589                 xor     eax, eax
.text:000000000000258B
.text:000000000000258B loc_258B:                               ; CODE XREF: main+A99↓j
.text:000000000000258B                 mov     rbx, [rsp+78h+var_40]
.text:0000000000002590                 xor     rbx, fs:28h
.text:0000000000002599                 jnz     loc_2AED
.text:000000000000259F                 add     rsp, 48h
.text:00000000000025A3                 pop     rbx
.text:00000000000025A4                 pop     rbp
.text:00000000000025A5                 pop     r12
.text:00000000000025A7                 pop     r13
.text:00000000000025A9                 pop     r14
.text:00000000000025AB                 pop     r15
.text:00000000000025AD                 retn
.text:00000000000025AE ; ---------------------------------------------------------------------------
.text:00000000000025AE
.text:00000000000025AE loc_25AE:                               ; CODE XREF: main+713↑j
.text:00000000000025AE                 cmp     cs:debug, 0
.text:00000000000025B5                 jz      short loc_25C5
.text:00000000000025B7                 cmp     cs:header, 0
.text:00000000000025BF                 jnz     loc_2837
.text:00000000000025C5
.text:00000000000025C5 loc_25C5:                               ; CODE XREF: main+865↑j
.text:00000000000025C5                                         ; main+B16↓j
.text:00000000000025C5                 mov     r12d, 1
.text:00000000000025CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: main+8A4↓j
.text:00000000000025D0                 cdqe
.text:00000000000025D2                 mov     esi, 1
.text:00000000000025D7                 mov     rdi, [rbx+rax*8]
.text:00000000000025DB                 call    process_line
.text:00000000000025E0                 and     r12d, eax
.text:00000000000025E3                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000025E9                 add     eax, 1
.text:00000000000025EC                 cmp     eax, ebp
.text:00000000000025EE                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000025F4                 jl      short loc_25D0
.text:00000000000025F6                 jmp     loc_2573
.text:00000000000025FB ; ---------------------------------------------------------------------------
.text:00000000000025FB
.text:00000000000025FB loc_25FB:                               ; CODE XREF: main+6BD↑j
.text:00000000000025FB                 cmp     cs:scale_to, 0
.text:0000000000002602                 jnz     loc_2AF2
.text:0000000000002608
.text:0000000000002608 loc_2608:                               ; CODE XREF: main+C21↓j
.text:0000000000002608                 cmp     cs:debug, 0
.text:000000000000260F                 jz      loc_2413
.text:0000000000002615                 mov     edi, 10001h     ; item
.text:000000000000261A                 call    _nl_langinfo
.text:000000000000261F                 cmp     byte ptr [rax], 0
.text:0000000000002622                 jnz     loc_2413
.text:0000000000002628                 lea     rsi, aGroupingHasNoE ; "grouping has no effect in this locale"
.text:000000000000262F                 xor     edi, edi        ; domainname
.text:0000000000002631                 mov     edx, 5          ; category
.text:0000000000002636                 call    _dcgettext
.text:000000000000263B                 xor     esi, esi        ; errnum
.text:000000000000263D                 mov     rdx, rax        ; format
.text:0000000000002640                 xor     edi, edi        ; status
.text:0000000000002642                 xor     eax, eax
.text:0000000000002644                 call    _error
.text:0000000000002649                 jmp     loc_2413
.text:000000000000264E ; ---------------------------------------------------------------------------
.text:000000000000264E
.text:000000000000264E loc_264E:                               ; CODE XREF: main+6D1↑j
.text:000000000000264E                 call    setup_padding_buffer_part_0
.text:0000000000002653                 jmp     loc_2427
.text:0000000000002658 ; ---------------------------------------------------------------------------
.text:0000000000002658
.text:0000000000002658 loc_2658:                               ; CODE XREF: main+5B8↑j
.text:0000000000002658                 lea     r8, [r12+r13]
.text:000000000000265C                 lea     r14, accept     ; " "
.text:0000000000002663                 mov     byte ptr [rsp+78h+var_70], 0
.text:0000000000002668                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002670
.text:0000000000002670 loc_2670:                               ; CODE XREF: main+94B↓j
.text:0000000000002670                                         ; main+A62↓j ...
.text:0000000000002670                 mov     rdi, r8         ; s
.text:0000000000002673                 mov     rsi, r14        ; accept
.text:0000000000002676                 call    _strspn
.text:000000000000267B                 add     r13, rax
.text:000000000000267E                 lea     r8, [r12+r13]
.text:0000000000002682                 movzx   edx, byte ptr [r8]
.text:0000000000002686                 cmp     dl, 27h ; '''
.text:0000000000002689                 jz      loc_27A0
.text:000000000000268F                 cmp     dl, 30h ; '0'
.text:0000000000002692                 jz      loc_27B7
.text:0000000000002698                 test    rax, rax
.text:000000000000269B                 jnz     short loc_2670
.text:000000000000269D                 mov     [rsp+78h+nptr], r8
.text:00000000000026A2                 lea     r13, [rsp+78h+n]
.text:00000000000026A7                 call    ___errno_location
.text:00000000000026AC                 mov     r8, [rsp+78h+nptr]
.text:00000000000026B1                 mov     dword ptr [rax], 0
.text:00000000000026B7                 mov     edx, 0Ah        ; base
.text:00000000000026BC                 mov     rsi, r13        ; endptr
.text:00000000000026BF                 mov     [rsp+78h+var_60], rax
.text:00000000000026C4                 mov     rdi, r8         ; nptr
.text:00000000000026C7                 call    _strtol
.text:00000000000026CC                 mov     r9, [rsp+78h+var_60]
.text:00000000000026D1                 mov     r14, rax
.text:00000000000026D4                 mov     r8, [rsp+78h+nptr]
.text:00000000000026D9                 cmp     dword ptr [r9], 22h ; '"'
.text:00000000000026DD                 jz      loc_2B3A
.text:00000000000026E3                 cmp     [rsp+78h+n], r8
.text:00000000000026E8                 jz      short loc_2725
.text:00000000000026EA                 test    rax, rax
.text:00000000000026ED                 jz      short loc_2725
.text:00000000000026EF                 cmp     cs:debug, 0
.text:00000000000026F6                 jz      loc_28AA
.text:00000000000026FC                 cmp     cs:padding_width, 0
.text:0000000000002704                 jz      loc_28AA
.text:000000000000270A                 cmp     byte ptr [rsp+78h+var_70], 0
.text:000000000000270F                 jz      loc_287F
.text:0000000000002715                 test    rax, rax
.text:0000000000002718                 jle     loc_287F
.text:000000000000271E
.text:000000000000271E loc_271E:                               ; CODE XREF: main+B68↓j
.text:000000000000271E                 mov     cs:zero_padding_width, r14
.text:0000000000002725
.text:0000000000002725 loc_2725:                               ; CODE XREF: main+998↑j
.text:0000000000002725                                         ; main+99D↑j ...
.text:0000000000002725                 mov     rdx, [rsp+78h+n]
.text:000000000000272A                 mov     rax, rdx
.text:000000000000272D                 movzx   edx, byte ptr [rdx]
.text:0000000000002730                 sub     rax, r12
.text:0000000000002733                 test    dl, dl
.text:0000000000002735                 jz      loc_29FD
.text:000000000000273B                 cmp     dl, 2Eh ; '.'
.text:000000000000273E                 jz      loc_28CA
.text:0000000000002744
.text:0000000000002744 loc_2744:                               ; CODE XREF: main+BE2↓j
.text:0000000000002744                 cmp     byte ptr [r12+rax], 66h ; 'f'
.text:0000000000002749                 jnz     loc_2ABB
.text:000000000000274F                 add     rax, 1
.text:0000000000002753                 lea     r13, [r12+rax]
.text:0000000000002757                 movzx   edx, byte ptr [r13+0]
.text:000000000000275C                 test    dl, dl
.text:000000000000275E                 jnz     short loc_2775
.text:0000000000002760                 jmp     loc_2976
.text:0000000000002760 ; ---------------------------------------------------------------------------
.text:0000000000002765                 align 8
.text:0000000000002768
.text:0000000000002768 loc_2768:                               ; CODE XREF: main+A32↓j
.text:0000000000002768                 mov     edx, edi
.text:000000000000276A
.text:000000000000276A loc_276A:                               ; CODE XREF: main+A48↓j
.text:000000000000276A                 test    dl, dl
.text:000000000000276C                 mov     rax, rsi
.text:000000000000276F                 jz      loc_2315
.text:0000000000002775
.text:0000000000002775 loc_2775:                               ; CODE XREF: main+A0E↑j
.text:0000000000002775                 cmp     dl, 25h ; '%'
.text:0000000000002778                 lea     rsi, [rax+1]
.text:000000000000277C                 movzx   edi, byte ptr [r12+rax+1]
.text:0000000000002782                 jnz     short loc_2768
.text:0000000000002784                 cmp     dil, 25h ; '%'
.text:0000000000002788                 jnz     loc_2A89
.text:000000000000278E                 lea     rsi, [rax+2]
.text:0000000000002792                 movzx   edx, byte ptr [r12+rax+2]
.text:0000000000002798                 jmp     short loc_276A
.text:0000000000002798 ; ---------------------------------------------------------------------------
.text:000000000000279A                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: main+939↑j
.text:00000000000027A0                 add     r13, 1
.text:00000000000027A4                 mov     cs:grouping, 1
.text:00000000000027AE                 lea     r8, [r12+r13]
.text:00000000000027B2                 jmp     loc_2670
.text:00000000000027B7 ; ---------------------------------------------------------------------------
.text:00000000000027B7
.text:00000000000027B7 loc_27B7:                               ; CODE XREF: main+942↑j
.text:00000000000027B7                 add     r13, 1
.text:00000000000027BB                 mov     byte ptr [rsp+78h+var_70], 1
.text:00000000000027C0                 lea     r8, [r12+r13]
.text:00000000000027C4                 jmp     loc_2670
.text:00000000000027C9 ; ---------------------------------------------------------------------------
.text:00000000000027C9
.text:00000000000027C9 loc_27C9:                               ; CODE XREF: main+82A↑j
.text:00000000000027C9                 test    r12d, r12d
.text:00000000000027CC                 jnz     loc_2589
.text:00000000000027D2
.text:00000000000027D2 loc_27D2:                               ; CODE XREF: main+ABF↓j
.text:00000000000027D2                 mov     eax, cs:inval_style
.text:00000000000027D8                 sub     eax, 2
.text:00000000000027DB                 cmp     eax, 1
.text:00000000000027DE                 jbe     loc_2589
.text:00000000000027E4                 mov     eax, 2
.text:00000000000027E9                 jmp     loc_258B
.text:00000000000027EE ; ---------------------------------------------------------------------------
.text:00000000000027EE
.text:00000000000027EE loc_27EE:                               ; CODE XREF: main+833↑j
.text:00000000000027EE                 lea     rsi, aFailedToConver ; "failed to convert some of the input num"...
.text:00000000000027F5                 xor     edi, edi        ; domainname
.text:00000000000027F7                 mov     edx, 5          ; category
.text:00000000000027FC                 call    _dcgettext
.text:0000000000002801                 xor     esi, esi        ; errnum
.text:0000000000002803                 mov     rdx, rax        ; format
.text:0000000000002806                 xor     edi, edi        ; status
.text:0000000000002808                 xor     eax, eax
.text:000000000000280A                 call    _error
.text:000000000000280F                 jmp     short loc_27D2
.text:0000000000002811 ; ---------------------------------------------------------------------------
.text:0000000000002811
.text:0000000000002811 loc_2811:                               ; CODE XREF: main+501↑j
.text:0000000000002811                 lea     rsi, aFailedToSetLoc ; "failed to set locale"
.text:0000000000002818                 xor     edi, edi        ; domainname
.text:000000000000281A                 mov     edx, 5          ; category
.text:000000000000281F                 call    _dcgettext
.text:0000000000002824                 xor     esi, esi        ; errnum
.text:0000000000002826                 mov     rdx, rax        ; format
.text:0000000000002829                 xor     edi, edi        ; status
.text:000000000000282B                 xor     eax, eax
.text:000000000000282D                 call    _error
.text:0000000000002832                 jmp     loc_2257
.text:0000000000002837 ; ---------------------------------------------------------------------------
.text:0000000000002837
.text:0000000000002837 loc_2837:                               ; CODE XREF: main+86F↑j
.text:0000000000002837                 lea     rsi, aHeaderIgnoredW ; "--header ignored with command-line inpu"...
.text:000000000000283E                 xor     edi, edi        ; domainname
.text:0000000000002840                 mov     edx, 5          ; category
.text:0000000000002845                 call    _dcgettext
.text:000000000000284A                 xor     esi, esi        ; errnum
.text:000000000000284C                 mov     rdx, rax        ; format
.text:000000000000284F                 xor     edi, edi        ; status
.text:0000000000002851                 xor     eax, eax
.text:0000000000002853                 call    _error
.text:0000000000002858                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000285E                 cmp     ebp, eax
.text:0000000000002860                 jle     loc_2589
.text:0000000000002866                 jmp     loc_25C5
.text:000000000000286B ; ---------------------------------------------------------------------------
.text:000000000000286B
.text:000000000000286B loc_286B:                               ; CODE XREF: main+5C8↑j
.text:000000000000286B                                         ; main+5E5↑j
.text:000000000000286B                 mov     rdi, r13        ; src
.text:000000000000286E                 call    xstrdup
.text:0000000000002873                 mov     cs:format_str_suffix, rax
.text:000000000000287A                 jmp     loc_233B
.text:000000000000287F ; ---------------------------------------------------------------------------
.text:000000000000287F
.text:000000000000287F loc_287F:                               ; CODE XREF: main+9BF↑j
.text:000000000000287F                                         ; main+9C8↑j
.text:000000000000287F                 lea     rsi, aFormatPaddingO ; "--format padding overriding --padding"
.text:0000000000002886                 mov     edx, 5          ; category
.text:000000000000288B                 xor     edi, edi        ; domainname
.text:000000000000288D                 mov     [rsp+78h+nptr], r9
.text:0000000000002892                 call    _dcgettext
.text:0000000000002897                 xor     esi, esi        ; errnum
.text:0000000000002899                 mov     rdx, rax        ; format
.text:000000000000289C                 xor     edi, edi        ; status
.text:000000000000289E                 xor     eax, eax
.text:00000000000028A0                 call    _error
.text:00000000000028A5                 mov     r9, [rsp+78h+nptr]
.text:00000000000028AA
.text:00000000000028AA loc_28AA:                               ; CODE XREF: main+9A6↑j
.text:00000000000028AA                                         ; main+9B4↑j
.text:00000000000028AA                 test    r14, r14
.text:00000000000028AD                 js      loc_294F
.text:00000000000028B3                 cmp     byte ptr [rsp+78h+var_70], 0
.text:00000000000028B8                 jnz     loc_271E
.text:00000000000028BE                 mov     cs:padding_width, r14
.text:00000000000028C5                 jmp     loc_2725
.text:00000000000028CA ; ---------------------------------------------------------------------------
.text:00000000000028CA
.text:00000000000028CA loc_28CA:                               ; CODE XREF: main+9EE↑j
.text:00000000000028CA                 lea     r14, [r12+rax+1]
.text:00000000000028CF                 mov     dword ptr [r9], 0
.text:00000000000028D6                 mov     edx, 0Ah        ; base
.text:00000000000028DB                 mov     rsi, r13        ; endptr
.text:00000000000028DE                 mov     [rsp+78h+var_70], r9
.text:00000000000028E3                 mov     rdi, r14        ; nptr
.text:00000000000028E6                 call    _strtol
.text:00000000000028EB                 mov     r9, [rsp+78h+var_70]
.text:00000000000028F0                 mov     cs:user_precision, rax
.text:00000000000028F7                 cmp     dword ptr [r9], 22h ; '"'
.text:00000000000028FB                 jz      loc_29CB
.text:0000000000002901                 test    rax, rax
.text:0000000000002904                 js      loc_29CB
.text:000000000000290A                 call    ___ctype_b_loc
.text:000000000000290F                 movsx   rsi, byte ptr [r14]
.text:0000000000002913                 mov     rax, [rax]
.text:0000000000002916                 test    byte ptr [rax+rsi*2], 1
.text:000000000000291A                 jnz     loc_29CB
.text:0000000000002920                 cmp     sil, 2Bh ; '+'
.text:0000000000002924                 jz      loc_29CB
.text:000000000000292A                 mov     rax, [rsp+78h+n]
.text:000000000000292F                 sub     rax, r12
.text:0000000000002932                 jmp     loc_2744
.text:0000000000002937 ; ---------------------------------------------------------------------------
.text:0000000000002937
.text:0000000000002937 loc_2937:                               ; CODE XREF: main+61F↑j
.text:0000000000002937                 lea     rsi, aReturningValue+1Dh ; ""
.text:000000000000293E                 jmp     loc_2375
.text:0000000000002943 ; ---------------------------------------------------------------------------
.text:0000000000002943
.text:0000000000002943 loc_2943:                               ; CODE XREF: main+602↑j
.text:0000000000002943                 lea     rsi, aReturningValue+1Dh ; ""
.text:000000000000294A                 jmp     loc_2358
.text:000000000000294F ; ---------------------------------------------------------------------------
.text:000000000000294F
.text:000000000000294F loc_294F:                               ; CODE XREF: main+B5D↑j
.text:000000000000294F                 neg     r14
.text:0000000000002952                 mov     cs:padding_alignment, 0
.text:000000000000295C                 mov     cs:padding_width, r14
.text:0000000000002963                 jmp     loc_2725
.text:0000000000002968 ; ---------------------------------------------------------------------------
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: main+530↑j
.text:0000000000002968                 test    r12, r12
.text:000000000000296B                 jnz     loc_22CA
.text:0000000000002971                 jmp     loc_2608
.text:0000000000002976 ; ---------------------------------------------------------------------------
.text:0000000000002976
.text:0000000000002976 loc_2976:                               ; CODE XREF: main+A10↑j
.text:0000000000002976                 test    r15, r15
.text:0000000000002979                 jz      loc_233B
.text:000000000000297F                 jmp     loc_231E
.text:0000000000002984 ; ---------------------------------------------------------------------------
.text:0000000000002984
.text:0000000000002984 loc_2984:                               ; CODE XREF: main+53E↑j
.text:0000000000002984                 test    r12, r12
.text:0000000000002987                 jnz     loc_22CA
.text:000000000000298D                 jmp     loc_2413
.text:0000000000002992 ; ---------------------------------------------------------------------------
.text:0000000000002992
.text:0000000000002992 loc_2992:                               ; CODE XREF: main+215↑j
.text:0000000000002992                 xor     edi, edi        ; status
.text:0000000000002994                 call    usage
.text:0000000000002999 ; ---------------------------------------------------------------------------
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: main+592↑j
.text:0000000000002999                 mov     rdi, r12
.text:000000000000299C                 call    quote
.text:00000000000029A1                 lea     rsi, aFormatSHasNoDi ; "format %s has no %% directive"
.text:00000000000029A8                 mov     rbx, rax
.text:00000000000029AB                 mov     edx, 5          ; category
.text:00000000000029B0                 xor     edi, edi        ; domainname
.text:00000000000029B2                 call    _dcgettext
.text:00000000000029B7                 mov     rcx, rbx
.text:00000000000029BA                 mov     rdx, rax        ; format
.text:00000000000029BD                 xor     esi, esi        ; errnum
.text:00000000000029BF                 mov     edi, 1          ; status
.text:00000000000029C4                 xor     eax, eax
.text:00000000000029C6                 call    _error
.text:00000000000029CB
.text:00000000000029CB loc_29CB:                               ; CODE XREF: main+BAB↑j
.text:00000000000029CB                                         ; main+BB4↑j ...
.text:00000000000029CB                 mov     rdi, r12
.text:00000000000029CE                 call    quote
.text:00000000000029D3                 lea     rsi, aInvalidPrecisi ; "invalid precision in format %s"
.text:00000000000029DA                 mov     rbx, rax
.text:00000000000029DD                 mov     edx, 5          ; category
.text:00000000000029E2                 xor     edi, edi        ; domainname
.text:00000000000029E4                 call    _dcgettext
.text:00000000000029E9                 mov     rcx, rbx
.text:00000000000029EC                 mov     rdx, rax        ; format
.text:00000000000029EF                 xor     esi, esi        ; errnum
.text:00000000000029F1                 mov     edi, 1          ; status
.text:00000000000029F6                 xor     eax, eax
.text:00000000000029F8                 call    _error
.text:00000000000029FD
.text:00000000000029FD loc_29FD:                               ; CODE XREF: main+9E5↑j
.text:00000000000029FD                 mov     rdi, r12
.text:0000000000002A00                 call    quote
.text:0000000000002A05                 lea     rsi, aFormatSEndsIn ; "format %s ends in %%"
.text:0000000000002A0C                 mov     rbx, rax
.text:0000000000002A0F                 mov     edx, 5          ; category
.text:0000000000002A14                 xor     edi, edi        ; domainname
.text:0000000000002A16                 call    _dcgettext
.text:0000000000002A1B                 mov     rcx, rbx
.text:0000000000002A1E                 mov     rdx, rax        ; format
.text:0000000000002A21                 xor     esi, esi        ; errnum
.text:0000000000002A23                 mov     edi, 1          ; status
.text:0000000000002A28                 xor     eax, eax
.text:0000000000002A2A                 call    _error
.text:0000000000002A2F
.text:0000000000002A2F loc_2A2F:                               ; CODE XREF: main+3B3↑j
.text:0000000000002A2F                                         ; main+3C3↑j
.text:0000000000002A2F                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002A36                 call    quote
.text:0000000000002A3B                 lea     rsi, aInvalidPadding ; "invalid padding value %s"
.text:0000000000002A42                 mov     rbx, rax
.text:0000000000002A45                 mov     edx, 5          ; category
.text:0000000000002A4A                 xor     edi, edi        ; domainname
.text:0000000000002A4C                 call    _dcgettext
.text:0000000000002A51                 mov     rcx, rbx
.text:0000000000002A54                 mov     rdx, rax        ; format
.text:0000000000002A57                 xor     esi, esi        ; errnum
.text:0000000000002A59                 mov     edi, 1          ; status
.text:0000000000002A5E                 xor     eax, eax
.text:0000000000002A60                 call    _error
.text:0000000000002A65
.text:0000000000002A65 loc_2A65:                               ; CODE XREF: main+332↑j
.text:0000000000002A65                 lea     rsi, aTheDelimiterMu ; "the delimiter must be a single characte"...
.text:0000000000002A6C                 mov     edx, 5          ; category
.text:0000000000002A71                 xor     edi, edi        ; domainname
.text:0000000000002A73                 call    _dcgettext
.text:0000000000002A78                 xor     esi, esi        ; errnum
.text:0000000000002A7A                 mov     rdx, rax        ; format
.text:0000000000002A7D                 mov     edi, 1          ; status
.text:0000000000002A82                 xor     eax, eax
.text:0000000000002A84                 call    _error
.text:0000000000002A89
.text:0000000000002A89 loc_2A89:                               ; CODE XREF: main+A38↑j
.text:0000000000002A89                 mov     rdi, r12
.text:0000000000002A8C                 call    quote
.text:0000000000002A91                 lea     rsi, aFormatSHasTooM ; "format %s has too many %% directives"
.text:0000000000002A98                 mov     rbx, rax
.text:0000000000002A9B                 mov     edx, 5          ; category
.text:0000000000002AA0                 xor     edi, edi        ; domainname
.text:0000000000002AA2                 call    _dcgettext
.text:0000000000002AA7                 mov     rcx, rbx
.text:0000000000002AAA                 mov     rdx, rax        ; format
.text:0000000000002AAD                 xor     esi, esi        ; errnum
.text:0000000000002AAF                 mov     edi, 1          ; status
.text:0000000000002AB4                 xor     eax, eax
.text:0000000000002AB6                 call    _error
.text:0000000000002ABB
.text:0000000000002ABB loc_2ABB:                               ; CODE XREF: main+9F9↑j
.text:0000000000002ABB                 mov     rdi, r12
.text:0000000000002ABE                 call    quote
.text:0000000000002AC3                 lea     rsi, aInvalidFormatS ; "invalid format %s, directive must be %%"...
.text:0000000000002ACA                 mov     rbx, rax
.text:0000000000002ACD                 mov     edx, 5          ; category
.text:0000000000002AD2                 xor     edi, edi        ; domainname
.text:0000000000002AD4                 call    _dcgettext
.text:0000000000002AD9                 mov     rcx, rbx
.text:0000000000002ADC                 mov     rdx, rax        ; format
.text:0000000000002ADF                 xor     esi, esi        ; errnum
.text:0000000000002AE1                 mov     edi, 1          ; status
.text:0000000000002AE6                 xor     eax, eax
.text:0000000000002AE8                 call    _error
.text:0000000000002AED
.text:0000000000002AED loc_2AED:                               ; CODE XREF: main+849↑j
.text:0000000000002AED                 call    ___stack_chk_fail
.text:0000000000002AF2 ; ---------------------------------------------------------------------------
.text:0000000000002AF2
.text:0000000000002AF2 loc_2AF2:                               ; CODE XREF: main+8B2↑j
.text:0000000000002AF2                 lea     rsi, aGroupingCannot ; "grouping cannot be combined with --to"
.text:0000000000002AF9                 mov     edx, 5          ; category
.text:0000000000002AFE                 xor     edi, edi        ; domainname
.text:0000000000002B00                 call    _dcgettext
.text:0000000000002B05                 xor     esi, esi        ; errnum
.text:0000000000002B07                 mov     rdx, rax        ; format
.text:0000000000002B0A                 mov     edi, 1          ; status
.text:0000000000002B0F                 xor     eax, eax
.text:0000000000002B11                 call    _error
.text:0000000000002B16
.text:0000000000002B16 loc_2B16:                               ; CODE XREF: main+4EF↑j
.text:0000000000002B16                 lea     rsi, aGroupingCannot_0 ; "--grouping cannot be combined with --fo"...
.text:0000000000002B1D                 mov     edx, 5          ; category
.text:0000000000002B22                 xor     edi, edi        ; domainname
.text:0000000000002B24                 call    _dcgettext
.text:0000000000002B29                 xor     esi, esi        ; errnum
.text:0000000000002B2B                 mov     rdx, rax        ; format
.text:0000000000002B2E                 mov     edi, 1          ; status
.text:0000000000002B33                 xor     eax, eax
.text:0000000000002B35                 call    _error
.text:0000000000002B3A
.text:0000000000002B3A loc_2B3A:                               ; CODE XREF: main+98D↑j
.text:0000000000002B3A                 mov     rdi, r12
.text:0000000000002B3D                 call    quote
.text:0000000000002B42                 lea     rsi, aInvalidFormatS_0 ; "invalid format %s (width overflow)"
.text:0000000000002B49                 mov     rbx, rax
.text:0000000000002B4C                 mov     edx, 5          ; category
.text:0000000000002B51                 xor     edi, edi        ; domainname
.text:0000000000002B53                 call    _dcgettext
.text:0000000000002B58                 mov     rcx, rbx
.text:0000000000002B5B                 mov     rdx, rax        ; format
.text:0000000000002B5E                 xor     esi, esi        ; errnum
.text:0000000000002B60                 mov     edi, 1          ; status
.text:0000000000002B65                 xor     eax, eax
.text:0000000000002B67                 call    _error
.text:0000000000002B6C
.text:0000000000002B6C loc_2B6C:                               ; CODE XREF: main+11D↑j
.text:0000000000002B6C                 lea     rsi, aMultipleFieldS ; "multiple field specifications"
.text:0000000000002B73                 mov     edx, 5          ; category
.text:0000000000002B78                 xor     edi, edi        ; domainname
.text:0000000000002B7A                 call    _dcgettext
.text:0000000000002B7F                 xor     esi, esi        ; errnum
.text:0000000000002B81                 mov     rdx, rax        ; format
.text:0000000000002B84                 mov     edi, 1          ; status
.text:0000000000002B89                 xor     eax, eax
.text:0000000000002B8B                 call    _error
.text:0000000000002B8B ; } // starts at 1D50
.text:0000000000002B8B main            endp ; sp-analysis failed
.text:0000000000002B8B
.text:0000000000002B90
.text:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B90
.text:0000000000002B90 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002B90
.text:0000000000002B90 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002B90                 public start
.text:0000000000002B90 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002B90 ; __unwind {
.text:0000000000002B90                 xor     ebp, ebp
.text:0000000000002B92                 mov     r9, rdx         ; rtld_fini
.text:0000000000002B95                 pop     rsi             ; argc
.text:0000000000002B96                 mov     rdx, rsp        ; ubp_av
.text:0000000000002B99                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002B9D                 push    rax
.text:0000000000002B9E                 push    rsp             ; stack_end
.text:0000000000002B9F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002BA6                 lea     rcx, __libc_csu_init ; init
.text:0000000000002BAD                 lea     rdi, main       ; main
.text:0000000000002BB4                 call    cs:__libc_start_main_ptr
.text:0000000000002BBA                 hlt
.text:0000000000002BBA ; } // starts at 2B90
.text:0000000000002BBA start           endp
.text:0000000000002BBA
.text:0000000000002BBA ; ---------------------------------------------------------------------------
.text:0000000000002BBB                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002BC0
.text:0000000000002BC0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2C73↓p
.text:0000000000002BC0                 lea     rdi, __bss_start
.text:0000000000002BC7                 push    rbp
.text:0000000000002BC8                 lea     rax, __bss_start
.text:0000000000002BCF                 cmp     rax, rdi
.text:0000000000002BD2                 mov     rbp, rsp
.text:0000000000002BD5                 jz      short loc_2BF0
.text:0000000000002BD7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002BDE                 test    rax, rax
.text:0000000000002BE1                 jz      short loc_2BF0
.text:0000000000002BE3                 pop     rbp
.text:0000000000002BE4                 jmp     rax
.text:0000000000002BE4 ; ---------------------------------------------------------------------------
.text:0000000000002BE6                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002BF0                                         ; deregister_tm_clones+21↑j
.text:0000000000002BF0                 pop     rbp
.text:0000000000002BF1                 retn
.text:0000000000002BF1 deregister_tm_clones endp
.text:0000000000002BF1
.text:0000000000002BF1 ; ---------------------------------------------------------------------------
.text:0000000000002BF2                 align 20h
.text:0000000000002C00
.text:0000000000002C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C00
.text:0000000000002C00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002C00
.text:0000000000002C00 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002C00                 lea     rdi, __bss_start
.text:0000000000002C07                 lea     rsi, __bss_start
.text:0000000000002C0E                 push    rbp
.text:0000000000002C0F                 sub     rsi, rdi
.text:0000000000002C12                 mov     rbp, rsp
.text:0000000000002C15                 sar     rsi, 3
.text:0000000000002C19                 mov     rax, rsi
.text:0000000000002C1C                 shr     rax, 3Fh
.text:0000000000002C20                 add     rsi, rax
.text:0000000000002C23                 sar     rsi, 1
.text:0000000000002C26                 jz      short loc_2C40
.text:0000000000002C28                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002C2F                 test    rax, rax
.text:0000000000002C32                 jz      short loc_2C40
.text:0000000000002C34                 pop     rbp
.text:0000000000002C35                 jmp     rax
.text:0000000000002C35 ; ---------------------------------------------------------------------------
.text:0000000000002C37                 align 20h
.text:0000000000002C40
.text:0000000000002C40 loc_2C40:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002C40                                         ; register_tm_clones+32↑j
.text:0000000000002C40                 pop     rbp
.text:0000000000002C41                 retn
.text:0000000000002C41 register_tm_clones endp
.text:0000000000002C41
.text:0000000000002C41 ; ---------------------------------------------------------------------------
.text:0000000000002C42                 align 10h
.text:0000000000002C50
.text:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C50
.text:0000000000002C50 ; Attributes: info_from_lumina
.text:0000000000002C50
.text:0000000000002C50 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002C50                 cmp     cs:completed_7697, 0
.text:0000000000002C57                 jnz     short locret_2C88
.text:0000000000002C59                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002C61                 push    rbp
.text:0000000000002C62                 mov     rbp, rsp
.text:0000000000002C65                 jz      short loc_2C73
.text:0000000000002C67                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002C6E                 call    __cxa_finalize
.text:0000000000002C73
.text:0000000000002C73 loc_2C73:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002C73                 call    deregister_tm_clones
.text:0000000000002C78                 mov     cs:completed_7697, 1
.text:0000000000002C7F                 pop     rbp
.text:0000000000002C80                 retn
.text:0000000000002C80 ; ---------------------------------------------------------------------------
.text:0000000000002C81                 align 8
.text:0000000000002C88
.text:0000000000002C88 locret_2C88:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002C88                 rep retn
.text:0000000000002C88 __do_global_dtors_aux endp
.text:0000000000002C88
.text:0000000000002C88 ; ---------------------------------------------------------------------------
.text:0000000000002C8A                 align 10h
.text:0000000000002C90
.text:0000000000002C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C90
.text:0000000000002C90 ; Attributes: bp-based frame
.text:0000000000002C90
.text:0000000000002C90 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002C90                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002C90                 push    rbp
.text:0000000000002C91                 mov     rbp, rsp
.text:0000000000002C94                 pop     rbp
.text:0000000000002C95                 jmp     register_tm_clones
.text:0000000000002C95 frame_dummy     endp
.text:0000000000002C95
.text:0000000000002C95 ; ---------------------------------------------------------------------------
.text:0000000000002C9A                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA0
.text:0000000000002CA0
.text:0000000000002CA0 simple_strtod_int proc near             ; CODE XREF: process_field+1FA↓p
.text:0000000000002CA0                                         ; process_field+815↓p
.text:0000000000002CA0
.text:0000000000002CA0 var_38          = tbyte ptr -38h
.text:0000000000002CA0 var_20          = qword ptr -20h
.text:0000000000002CA0
.text:0000000000002CA0 ; __unwind {
.text:0000000000002CA0                 push    rbp
.text:0000000000002CA1                 push    rbx
.text:0000000000002CA2                 mov     rbp, rdx
.text:0000000000002CA5                 sub     rsp, 28h
.text:0000000000002CA9                 cmp     byte ptr [rdi], 2Dh ; '-'
.text:0000000000002CAC                 jz      loc_2D80
.text:0000000000002CB2                 mov     byte ptr [rcx], 0
.text:0000000000002CB5                 mov     [rsi], rdi
.text:0000000000002CB8
.text:0000000000002CB8 loc_2CB8:                               ; CODE XREF: simple_strtod_int+ED↓j
.text:0000000000002CB8                 fldz
.text:0000000000002CBA                 xor     r9d, r9d
.text:0000000000002CBD                 xor     r8d, r8d
.text:0000000000002CC0                 xor     ebx, ebx
.text:0000000000002CC2                 mov     r10d, 1
.text:0000000000002CC8                 fld     cs:flt_B1B4
.text:0000000000002CCE                 jmp     short loc_2D05
.text:0000000000002CD0 ; ---------------------------------------------------------------------------
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: simple_strtod_int+82↓j
.text:0000000000002CD0                 test    eax, eax
.text:0000000000002CD2                 jnz     short loc_2D24
.text:0000000000002CD4
.text:0000000000002CD4 loc_2CD4:                               ; CODE XREF: simple_strtod_int+88↓j
.text:0000000000002CD4                 cmp     r8d, 12h
.text:0000000000002CD8                 jbe     short loc_2CE9
.text:0000000000002CDA                 cmp     r8d, 1Bh
.text:0000000000002CDE                 ja      loc_2DA0
.text:0000000000002CE4                 mov     ebx, 1
.text:0000000000002CE9
.text:0000000000002CE9 loc_2CE9:                               ; CODE XREF: simple_strtod_int+38↑j
.text:0000000000002CE9                 mov     dword ptr [rsp+38h+var_38], eax
.text:0000000000002CEC                 add     rdi, 1          ; s1
.text:0000000000002CF0                 test    rdi, rdi
.text:0000000000002CF3                 mov     [rsi], rdi
.text:0000000000002CF6                 mov     r9d, 1
.text:0000000000002CFC                 fmul    st(1), st
.text:0000000000002CFE                 fild    dword ptr [rsp+38h+var_38]
.text:0000000000002D01                 faddp   st(2), st
.text:0000000000002D03                 jz      short loc_2D60
.text:0000000000002D05
.text:0000000000002D05 loc_2D05:                               ; CODE XREF: simple_strtod_int+2E↑j
.text:0000000000002D05                 movsx   eax, byte ptr [rdi]
.text:0000000000002D08                 mov     edx, eax
.text:0000000000002D0A                 sub     edx, 30h ; '0'
.text:0000000000002D0D                 cmp     dl, 9
.text:0000000000002D10                 ja      short loc_2D30
.text:0000000000002D12                 fldz
.text:0000000000002D14                 sub     eax, 30h ; '0'
.text:0000000000002D17                 fucomip st, st(2)
.text:0000000000002D19                 setp    dl
.text:0000000000002D1C                 cmovnz  edx, r10d
.text:0000000000002D20                 test    dl, dl
.text:0000000000002D22                 jz      short loc_2CD0
.text:0000000000002D24
.text:0000000000002D24 loc_2D24:                               ; CODE XREF: simple_strtod_int+32↑j
.text:0000000000002D24                 add     r8d, 1
.text:0000000000002D28                 jmp     short loc_2CD4
.text:0000000000002D28 ; ---------------------------------------------------------------------------
.text:0000000000002D2A                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: simple_strtod_int+70↑j
.text:0000000000002D30                 fstp    st
.text:0000000000002D32                 test    r9b, r9b
.text:0000000000002D35                 jnz     short loc_2D62
.text:0000000000002D37
.text:0000000000002D37 loc_2D37:                               ; CODE XREF: simple_strtod_int+F7↓j
.text:0000000000002D37                 fstp    [rsp+38h+var_38]
.text:0000000000002D3A                 movsxd  rdx, cs:decimal_point_length ; n
.text:0000000000002D41                 mov     rsi, cs:decimal_point ; s2
.text:0000000000002D48                 mov     [rsp+38h+var_20], rcx
.text:0000000000002D4D                 call    _strncmp
.text:0000000000002D52                 test    eax, eax
.text:0000000000002D54                 mov     rcx, [rsp+38h+var_20]
.text:0000000000002D59                 fld     [rsp+38h+var_38]
.text:0000000000002D5C                 jnz     short loc_2DB8
.text:0000000000002D5E                 jmp     short loc_2D62
.text:0000000000002D60 ; ---------------------------------------------------------------------------
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: simple_strtod_int+63↑j
.text:0000000000002D60                 fstp    st
.text:0000000000002D62
.text:0000000000002D62 loc_2D62:                               ; CODE XREF: simple_strtod_int+95↑j
.text:0000000000002D62                                         ; simple_strtod_int+BE↑j
.text:0000000000002D62                 cmp     byte ptr [rcx], 0
.text:0000000000002D65                 jnz     short loc_2D78
.text:0000000000002D67
.text:0000000000002D67 loc_2D67:                               ; CODE XREF: simple_strtod_int+DA↓j
.text:0000000000002D67                 mov     eax, ebx
.text:0000000000002D69                 fstp    tbyte ptr [rbp+0]
.text:0000000000002D6C                 add     rsp, 28h
.text:0000000000002D70                 pop     rbx
.text:0000000000002D71                 pop     rbp
.text:0000000000002D72                 retn
.text:0000000000002D72 ; ---------------------------------------------------------------------------
.text:0000000000002D73                 align 8
.text:0000000000002D78
.text:0000000000002D78 loc_2D78:                               ; CODE XREF: simple_strtod_int+C5↑j
.text:0000000000002D78                 fchs
.text:0000000000002D7A                 jmp     short loc_2D67
.text:0000000000002D7A ; ---------------------------------------------------------------------------
.text:0000000000002D7C                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: simple_strtod_int+C↑j
.text:0000000000002D80                 add     rdi, 1
.text:0000000000002D84                 mov     byte ptr [rcx], 1
.text:0000000000002D87                 test    rdi, rdi
.text:0000000000002D8A                 mov     [rsi], rdi
.text:0000000000002D8D                 jnz     loc_2CB8
.text:0000000000002D93                 xor     ebx, ebx
.text:0000000000002D95                 fldz
.text:0000000000002D97                 jmp     short loc_2D37
.text:0000000000002D97 ; ---------------------------------------------------------------------------
.text:0000000000002D99                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: simple_strtod_int+3E↑j
.text:0000000000002DA0                 fstp    st
.text:0000000000002DA2                 fstp    st
.text:0000000000002DA4                 mov     ebx, 2
.text:0000000000002DA9                 add     rsp, 28h
.text:0000000000002DAD                 mov     eax, ebx
.text:0000000000002DAF                 pop     rbx
.text:0000000000002DB0                 pop     rbp
.text:0000000000002DB1                 retn
.text:0000000000002DB1 ; ---------------------------------------------------------------------------
.text:0000000000002DB2                 align 8
.text:0000000000002DB8
.text:0000000000002DB8 loc_2DB8:                               ; CODE XREF: simple_strtod_int+BC↑j
.text:0000000000002DB8                 fstp    st
.text:0000000000002DBA                 mov     ebx, 3
.text:0000000000002DBF                 add     rsp, 28h
.text:0000000000002DC3                 mov     eax, ebx
.text:0000000000002DC5                 pop     rbx
.text:0000000000002DC6                 pop     rbp
.text:0000000000002DC7                 retn
.text:0000000000002DC7 ; } // starts at 2CA0
.text:0000000000002DC7 simple_strtod_int endp
.text:0000000000002DC7
.text:0000000000002DC7 ; ---------------------------------------------------------------------------
.text:0000000000002DC8                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DD0
.text:0000000000002DD0
.text:0000000000002DD0 ; __int64 __fastcall unit_to_umax(char *nptr)
.text:0000000000002DD0 unit_to_umax    proc near               ; CODE XREF: main+18D↑p
.text:0000000000002DD0                                         ; main+2D7↑p
.text:0000000000002DD0
.text:0000000000002DD0 var_30          = qword ptr -30h
.text:0000000000002DD0 var_28          = qword ptr -28h
.text:0000000000002DD0 var_20          = qword ptr -20h
.text:0000000000002DD0
.text:0000000000002DD0 ; __unwind {
.text:0000000000002DD0                 push    r12
.text:0000000000002DD2                 push    rbp
.text:0000000000002DD3                 push    rbx
.text:0000000000002DD4                 mov     rbx, rdi
.text:0000000000002DD7                 sub     rsp, 20h
.text:0000000000002DDB                 mov     rax, fs:28h
.text:0000000000002DE4                 mov     [rsp+38h+var_20], rax
.text:0000000000002DE9                 xor     eax, eax
.text:0000000000002DEB                 call    _strlen
.text:0000000000002DF0                 test    rax, rax
.text:0000000000002DF3                 mov     [rsp+38h+var_30], 0
.text:0000000000002DFC                 jz      short loc_2E11
.text:0000000000002DFE                 mov     rbp, rax
.text:0000000000002E01                 lea     r12, [rax-1]
.text:0000000000002E05                 movzx   eax, byte ptr [rbx+rax-1]
.text:0000000000002E0A                 sub     eax, 30h ; '0'
.text:0000000000002E0D                 cmp     al, 9
.text:0000000000002E0F                 ja      short loc_2E88
.text:0000000000002E11
.text:0000000000002E11 loc_2E11:                               ; CODE XREF: unit_to_umax+2C↑j
.text:0000000000002E11                 lea     r8, s           ; "KMGTPEZY"
.text:0000000000002E18                 mov     r9, rbx
.text:0000000000002E1B                 xor     r12d, r12d
.text:0000000000002E1E
.text:0000000000002E1E loc_2E1E:                               ; CODE XREF: unit_to_umax+106↓j
.text:0000000000002E1E                                         ; unit_to_umax+12C↓j
.text:0000000000002E1E                 lea     rcx, [rsp+38h+var_28]
.text:0000000000002E23                 lea     rsi, [rsp+38h+var_30]
.text:0000000000002E28                 mov     edx, 0Ah
.text:0000000000002E2D                 mov     rdi, r9         ; nptr
.text:0000000000002E30                 call    xstrtoumax
.text:0000000000002E35                 test    eax, eax
.text:0000000000002E37                 jnz     loc_2F01
.text:0000000000002E3D                 mov     rax, [rsp+38h+var_30]
.text:0000000000002E42                 cmp     byte ptr [rax], 0
.text:0000000000002E45                 jnz     loc_2F01
.text:0000000000002E4B                 mov     rbp, [rsp+38h+var_28]
.text:0000000000002E50                 test    rbp, rbp
.text:0000000000002E53                 jz      loc_2F01
.text:0000000000002E59                 mov     rdi, r12        ; ptr
.text:0000000000002E5C                 call    _free
.text:0000000000002E61                 mov     rdx, [rsp+38h+var_20]
.text:0000000000002E66                 xor     rdx, fs:28h
.text:0000000000002E6F                 mov     rax, rbp
.text:0000000000002E72                 jnz     loc_2F3B
.text:0000000000002E78                 add     rsp, 20h
.text:0000000000002E7C                 pop     rbx
.text:0000000000002E7D                 pop     rbp
.text:0000000000002E7E                 pop     r12
.text:0000000000002E80                 retn
.text:0000000000002E80 ; ---------------------------------------------------------------------------
.text:0000000000002E81                 align 8
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: unit_to_umax+3F↑j
.text:0000000000002E88                 lea     rdi, [rbp+2]
.text:0000000000002E8C                 call    xmalloc
.text:0000000000002E91                 mov     rdx, rbp        ; n
.text:0000000000002E94                 add     r12, rax
.text:0000000000002E97                 mov     rsi, rbx        ; src
.text:0000000000002E9A                 mov     rdi, rax        ; dest
.text:0000000000002E9D                 mov     [rsp+38h+var_30], r12
.text:0000000000002EA2                 call    _memcpy
.text:0000000000002EA7                 cmp     byte ptr [r12], 69h ; 'i'
.text:0000000000002EAC                 mov     r9, rax
.text:0000000000002EAF                 jnz     short loc_2EB7
.text:0000000000002EB1                 cmp     rbp, 1
.text:0000000000002EB5                 jnz     short loc_2EE0
.text:0000000000002EB7
.text:0000000000002EB7 loc_2EB7:                               ; CODE XREF: unit_to_umax+DF↑j
.text:0000000000002EB7                                         ; unit_to_umax+11B↓j
.text:0000000000002EB7                 lea     rax, [r12+2]
.text:0000000000002EBC                 lea     r8, aKmgtpezy0  ; "KMGTPEZY0"
.text:0000000000002EC3                 mov     [rsp+38h+var_30], rax
.text:0000000000002EC8                 mov     eax, 42h ; 'B'
.text:0000000000002ECD                 mov     [r12+1], ax
.text:0000000000002ED3                 mov     r12, r9
.text:0000000000002ED6                 jmp     loc_2E1E
.text:0000000000002ED6 ; ---------------------------------------------------------------------------
.text:0000000000002EDB                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: unit_to_umax+E5↑j
.text:0000000000002EE0                 movzx   eax, byte ptr [r12-1]
.text:0000000000002EE6                 sub     eax, 30h ; '0'
.text:0000000000002EE9                 cmp     al, 9
.text:0000000000002EEB                 jbe     short loc_2EB7
.text:0000000000002EED                 mov     byte ptr [r12], 0
.text:0000000000002EF2                 lea     r8, s           ; "KMGTPEZY"
.text:0000000000002EF9                 mov     r12, r9
.text:0000000000002EFC                 jmp     loc_2E1E
.text:0000000000002F01 ; ---------------------------------------------------------------------------
.text:0000000000002F01
.text:0000000000002F01 loc_2F01:                               ; CODE XREF: unit_to_umax+67↑j
.text:0000000000002F01                                         ; unit_to_umax+75↑j ...
.text:0000000000002F01                 mov     rdi, r12        ; ptr
.text:0000000000002F04                 call    _free
.text:0000000000002F09                 mov     rdi, rbx
.text:0000000000002F0C                 call    quote
.text:0000000000002F11                 lea     rsi, aInvalidUnitSiz ; "invalid unit size: %s"
.text:0000000000002F18                 mov     rbx, rax
.text:0000000000002F1B                 mov     edx, 5          ; category
.text:0000000000002F20                 xor     edi, edi        ; domainname
.text:0000000000002F22                 call    _dcgettext
.text:0000000000002F27                 mov     rcx, rbx
.text:0000000000002F2A                 mov     rdx, rax        ; format
.text:0000000000002F2D                 xor     esi, esi        ; errnum
.text:0000000000002F2F                 mov     edi, 1          ; status
.text:0000000000002F34                 xor     eax, eax
.text:0000000000002F36                 call    _error
.text:0000000000002F3B
.text:0000000000002F3B loc_2F3B:                               ; CODE XREF: unit_to_umax+A2↑j
.text:0000000000002F3B                 call    ___stack_chk_fail
.text:0000000000002F3B ; } // starts at 2DD0
.text:0000000000002F3B unit_to_umax    endp
.text:0000000000002F3B
.text:0000000000002F40
.text:0000000000002F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F40
.text:0000000000002F40
.text:0000000000002F40 setup_padding_buffer_part_0 proc near   ; CODE XREF: main:loc_264E↑p
.text:0000000000002F40                                         ; process_field+37F↓p ...
.text:0000000000002F40 ; __unwind {
.text:0000000000002F40                 sub     rsp, 8
.text:0000000000002F44                 lea     rsi, [rdi+1]
.text:0000000000002F48                 mov     rdi, cs:padding_buffer
.text:0000000000002F4F                 mov     cs:padding_buffer_size, rsi
.text:0000000000002F56                 call    xrealloc
.text:0000000000002F5B                 mov     cs:padding_buffer, rax
.text:0000000000002F62                 add     rsp, 8
.text:0000000000002F66                 retn
.text:0000000000002F66 ; } // starts at 2F40
.text:0000000000002F66 setup_padding_buffer_part_0 endp
.text:0000000000002F66
.text:0000000000002F66 ; ---------------------------------------------------------------------------
.text:0000000000002F67                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70
.text:0000000000002F70 ; __int64 __fastcall process_field(char *s)
.text:0000000000002F70 process_field   proc near               ; CODE XREF: process_line+6E↓p
.text:0000000000002F70                                         ; process_line+137↓p
.text:0000000000002F70
.text:0000000000002F70 var_1B8         = tbyte ptr -1B8h
.text:0000000000002F70 var_1A8         = tbyte ptr -1A8h
.text:0000000000002F70 var_198         = tbyte ptr -198h
.text:0000000000002F70 var_188         = tbyte ptr -188h
.text:0000000000002F70 var_178         = tbyte ptr -178h
.text:0000000000002F70 var_168         = tbyte ptr -168h
.text:0000000000002F70 var_158         = qword ptr -158h
.text:0000000000002F70 var_14C         = word ptr -14Ch
.text:0000000000002F70 var_14A         = word ptr -14Ah
.text:0000000000002F70 var_13A         = byte ptr -13Ah
.text:0000000000002F70 var_139         = byte ptr -139h
.text:0000000000002F70 s1              = qword ptr -138h
.text:0000000000002F70 var_130         = qword ptr -130h
.text:0000000000002F70 var_128         = tbyte ptr -128h
.text:0000000000002F70 var_118         = tbyte ptr -118h
.text:0000000000002F70 var_108         = byte ptr -108h
.text:0000000000002F70 var_107         = byte ptr -107h
.text:0000000000002F70 src             = byte ptr -0C8h
.text:0000000000002F70 var_40          = qword ptr -40h
.text:0000000000002F70
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 push    r15
.text:0000000000002F72                 push    r14
.text:0000000000002F74                 push    r13
.text:0000000000002F76                 push    r12
.text:0000000000002F78                 mov     r13, rsi
.text:0000000000002F7B                 push    rbp
.text:0000000000002F7C                 push    rbx
.text:0000000000002F7D                 mov     r12, rdi
.text:0000000000002F80                 sub     rsp, 168h
.text:0000000000002F87                 mov     rax, fs:28h
.text:0000000000002F90                 mov     [rsp+198h+var_40], rax
.text:0000000000002F98                 xor     eax, eax
.text:0000000000002F9A                 mov     rax, cs:frp
.text:0000000000002FA1                 test    rax, rax
.text:0000000000002FA4                 jnz     short loc_2FBF
.text:0000000000002FA6                 jmp     short loc_3010
.text:0000000000002FA6 ; ---------------------------------------------------------------------------
.text:0000000000002FA8                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: process_field+56↓j
.text:0000000000002FB0                 cmp     r13, rdx
.text:0000000000002FB3                 jb      short loc_2FBB
.text:0000000000002FB5                 cmp     r13, [rax+8]
.text:0000000000002FB9                 jbe     short loc_3016
.text:0000000000002FBB
.text:0000000000002FBB loc_2FBB:                               ; CODE XREF: process_field+43↑j
.text:0000000000002FBB                 add     rax, 10h
.text:0000000000002FBF
.text:0000000000002FBF loc_2FBF:                               ; CODE XREF: process_field+34↑j
.text:0000000000002FBF                 mov     rdx, [rax]
.text:0000000000002FC2                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FC6                 jnz     short loc_2FB0
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: process_field+A4↓j
.text:0000000000002FC8                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002FCF                 mov     rdi, r12        ; s
.text:0000000000002FD2                 mov     ebx, 1
.text:0000000000002FD7                 call    _fputs_unlocked
.text:0000000000002FDC
.text:0000000000002FDC loc_2FDC:                               ; CODE XREF: process_field+341↓j
.text:0000000000002FDC                                         ; process_field+C17↓j ...
.text:0000000000002FDC                 mov     rcx, [rsp+198h+var_40]
.text:0000000000002FE4                 xor     rcx, fs:28h
.text:0000000000002FED                 mov     eax, ebx
.text:0000000000002FEF                 jnz     loc_465C
.text:0000000000002FF5                 add     rsp, 168h
.text:0000000000002FFC                 pop     rbx
.text:0000000000002FFD                 pop     rbp
.text:0000000000002FFE                 pop     r12
.text:0000000000003000                 pop     r13
.text:0000000000003002                 pop     r14
.text:0000000000003004                 pop     r15
.text:0000000000003006                 retn
.text:0000000000003006 ; ---------------------------------------------------------------------------
.text:0000000000003007                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: process_field+36↑j
.text:0000000000003010                 cmp     rsi, 1
.text:0000000000003014                 jnz     short loc_2FC8
.text:0000000000003016
.text:0000000000003016 loc_3016:                               ; CODE XREF: process_field+49↑j
.text:0000000000003016                 mov     rbp, cs:suffix
.text:000000000000301D                 test    rbp, rbp
.text:0000000000003020                 jz      short loc_3068
.text:0000000000003022                 mov     rdi, r12        ; s
.text:0000000000003025                 call    _strlen
.text:000000000000302A                 mov     rdi, rbp        ; s
.text:000000000000302D                 mov     rbx, rax
.text:0000000000003030                 call    _strlen
.text:0000000000003035                 cmp     rbx, rax
.text:0000000000003038                 jbe     short loc_3068
.text:000000000000303A                 sub     rbx, rax
.text:000000000000303D                 mov     rdi, rbp        ; s1
.text:0000000000003040                 add     rbx, r12
.text:0000000000003043                 mov     rsi, rbx        ; s2
.text:0000000000003046                 call    _strcmp
.text:000000000000304B                 test    eax, eax
.text:000000000000304D                 movzx   edx, cs:dev_debug
.text:0000000000003054                 jnz     loc_3730
.text:000000000000305A                 test    dl, dl
.text:000000000000305C                 mov     byte ptr [rbx], 0
.text:000000000000305F                 jnz     loc_3874
.text:0000000000003065                 nop     dword ptr [rax]
.text:0000000000003068
.text:0000000000003068 loc_3068:                               ; CODE XREF: process_field+B0↑j
.text:0000000000003068                                         ; process_field+C8↑j ...
.text:0000000000003068                 movzx   ebx, byte ptr [r12]
.text:000000000000306D                 test    bl, bl
.text:000000000000306F                 jz      loc_3857
.text:0000000000003075                 call    ___ctype_b_loc
.text:000000000000307A                 mov     rbp, r12
.text:000000000000307D                 mov     rax, [rax]
.text:0000000000003080                 jmp     short loc_3094
.text:0000000000003080 ; ---------------------------------------------------------------------------
.text:0000000000003082                 align 8
.text:0000000000003088
.text:0000000000003088 loc_3088:                               ; CODE XREF: process_field+128↓j
.text:0000000000003088                 add     rbp, 1
.text:000000000000308C                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000003090                 test    bl, bl
.text:0000000000003092                 jz      short loc_309A
.text:0000000000003094
.text:0000000000003094 loc_3094:                               ; CODE XREF: process_field+110↑j
.text:0000000000003094                 test    byte ptr [rax+rbx*2], 1
.text:0000000000003098                 jnz     short loc_3088
.text:000000000000309A
.text:000000000000309A loc_309A:                               ; CODE XREF: process_field+122↑j
.text:000000000000309A                 mov     eax, r12d
.text:000000000000309D                 sub     eax, ebp
.text:000000000000309F
.text:000000000000309F loc_309F:                               ; CODE XREF: process_field+8EC↓j
.text:000000000000309F                 mov     r11d, cs:auto_padding
.text:00000000000030A6                 test    r11d, r11d
.text:00000000000030A9                 jz      loc_31B9
.text:00000000000030AF                 test    eax, eax
.text:00000000000030B1                 jnz     loc_32D0
.text:00000000000030B7                 cmp     r13, 1
.text:00000000000030BB                 jg      loc_32D0
.text:00000000000030C1                 mov     cs:padding_width, 0
.text:00000000000030CC
.text:00000000000030CC loc_30CC:                               ; CODE XREF: process_field+376↓j
.text:00000000000030CC                                         ; process_field+384↓j
.text:00000000000030CC                 movzx   eax, cs:dev_debug
.text:00000000000030D3                 test    al, al
.text:00000000000030D5                 jnz     loc_3198
.text:00000000000030DB                 pxor    xmm2, xmm2
.text:00000000000030DF                 mov     r13d, cs:scale_from
.text:00000000000030E6                 mov     [rsp+198h+s1], 0
.text:00000000000030EF                 mov     r15d, 3E8h
.text:00000000000030F5                 movss   dword ptr [rsp+198h+var_198], xmm2
.text:00000000000030FA                 lea     edx, [r13-3]
.text:00000000000030FE                 fld     dword ptr [rsp+198h+var_198]
.text:0000000000003101                 cmp     edx, 1
.text:0000000000003104                 fstp    [rsp+198h+var_128]
.text:0000000000003108                 ja      short loc_3158
.text:000000000000310A                 mov     r15d, 400h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: process_field+27D↓j
.text:0000000000003110                                         ; process_field+289↓j
.text:0000000000003110                 test    al, al
.text:0000000000003112                 jz      short loc_3158
.text:0000000000003114                 mov     rsi, cs:decimal_point
.text:000000000000311B                 mov     edi, 1
.text:0000000000003120                 call    quote_n
.text:0000000000003125                 mov     rsi, rbp
.text:0000000000003128                 xor     edi, edi
.text:000000000000312A                 mov     rbx, rax
.text:000000000000312D                 call    quote_n
.text:0000000000003132                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003139                 lea     rdx, aSimpleStrtodHu ; "simple_strtod_human:\n  input string: %"...
.text:0000000000003140                 mov     rcx, rax
.text:0000000000003143                 mov     r9d, 12h
.text:0000000000003149                 mov     r8, rbx
.text:000000000000314C                 mov     esi, 1
.text:0000000000003151                 xor     eax, eax
.text:0000000000003153                 call    ___fprintf_chk
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: process_field+198↑j
.text:0000000000003158                                         ; process_field+1A2↑j
.text:0000000000003158                 lea     rcx, [rsp+198h+var_13A]
.text:000000000000315D                 lea     rdx, [rsp+198h+var_128]
.text:0000000000003162                 lea     rsi, [rsp+198h+s1]
.text:0000000000003167                 mov     rdi, rbp
.text:000000000000316A                 call    simple_strtod_int
.text:000000000000316F                 cmp     eax, 1
.text:0000000000003172                 mov     ebx, eax
.text:0000000000003174                 jbe     loc_3330
.text:000000000000317A
.text:000000000000317A loc_317A:                               ; CODE XREF: process_field+825↓j
.text:000000000000317A                 cmp     ebx, 6          ; switch 7 cases
.text:000000000000317D                 ja      def_3193        ; jumptable 0000000000003193 default case, cases 0,1
.text:0000000000003183                 lea     rcx, jpt_3193
.text:000000000000318A                 mov     edx, ebx
.text:000000000000318C                 movsxd  rax, ds:(jpt_3193 - 0B020h)[rcx+rdx*4]
.text:0000000000003190                 add     rax, rcx
.text:0000000000003193                 jmp     rax             ; switch jump
.text:0000000000003193 ; ---------------------------------------------------------------------------
.text:0000000000003195                 align 8
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: process_field+165↑j
.text:0000000000003198                 mov     rcx, cs:padding_width
.text:000000000000319F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000031A6                 lea     rdx, aSettingAutoPad ; "setting Auto-Padding to %ld characters"...
.text:00000000000031AD                 mov     esi, 1
.text:00000000000031B2                 xor     eax, eax
.text:00000000000031B4                 call    ___fprintf_chk
.text:00000000000031B9
.text:00000000000031B9 loc_31B9:                               ; CODE XREF: process_field+139↑j
.text:00000000000031B9                 pxor    xmm1, xmm1
.text:00000000000031BD                 mov     r13d, cs:scale_from
.text:00000000000031C4                 movzx   eax, cs:dev_debug
.text:00000000000031CB                 mov     [rsp+198h+s1], 0
.text:00000000000031D4                 mov     r15d, 3E8h
.text:00000000000031DA                 movss   dword ptr [rsp+198h+var_198], xmm1
.text:00000000000031DF                 lea     edx, [r13-3]
.text:00000000000031E3                 fld     dword ptr [rsp+198h+var_198]
.text:00000000000031E6                 cmp     edx, 1
.text:00000000000031E9                 fstp    [rsp+198h+var_128]
.text:00000000000031ED                 ja      loc_3110
.text:00000000000031F3                 mov     r15d, 400h
.text:00000000000031F9                 jmp     loc_3110
.text:00000000000031F9 ; ---------------------------------------------------------------------------
.text:00000000000031FE                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: process_field+223↑j
.text:0000000000003200                                         ; DATA XREF: .rodata:jpt_3193↓o
.text:0000000000003200                 lea     r13, aValueTooLargeT ; jumptable 0000000000003193 case 2
.text:0000000000003207                 xor     r14d, r14d
.text:000000000000320A                 nop     word ptr [rax+rax+00h]
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: process_field+393↓j
.text:0000000000003210                                         ; process_field+3A2↓j ...
.text:0000000000003210                 cmp     cs:inval_style, 3
.text:0000000000003217                 jz      short loc_3248
.text:0000000000003219                 mov     rdi, rbp
.text:000000000000321C                 call    quote
.text:0000000000003221                 mov     edx, 5          ; category
.text:0000000000003226                 mov     rsi, r13        ; msgid
.text:0000000000003229                 xor     edi, edi        ; domainname
.text:000000000000322B                 mov     rbp, rax
.text:000000000000322E                 call    _dcgettext
.text:0000000000003233                 mov     edi, cs:conv_exit_code ; status
.text:0000000000003239                 mov     rdx, rax        ; format
.text:000000000000323C                 mov     rcx, rbp
.text:000000000000323F                 xor     esi, esi        ; errnum
.text:0000000000003241                 xor     eax, eax
.text:0000000000003243                 call    _error
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: process_field+2A7↑j
.text:0000000000003248                                         ; process_field+71B↓j ...
.text:0000000000003248                 mov     rax, cs:from_unit_size
.text:000000000000324F                 mov     rdx, cs:to_unit_size
.text:0000000000003256                 fld     [rsp+198h+var_128]
.text:000000000000325A                 cmp     rax, 1
.text:000000000000325E                 jz      loc_3480
.text:0000000000003264
.text:0000000000003264 loc_3264:                               ; CODE XREF: process_field+514↓j
.text:0000000000003264                 mov     qword ptr [rsp+198h+var_188], rax
.text:0000000000003269                 test    rax, rax
.text:000000000000326C                 fild    qword ptr [rsp+198h+var_188]
.text:0000000000003270                 jns     short loc_3278
.text:0000000000003272                 fadd    cs:flt_B1BC
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: process_field+300↑j
.text:0000000000003278                 fmulp   st(1), st
.text:000000000000327A                 mov     qword ptr [rsp+198h+var_188], rdx
.text:000000000000327F                 test    rdx, rdx
.text:0000000000003282                 fild    qword ptr [rsp+198h+var_188]
.text:0000000000003286                 js      short loc_32C0
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: process_field+356↓j
.text:0000000000003288                 fdivp   st(1), st
.text:000000000000328A
.text:000000000000328A loc_328A:                               ; CODE XREF: process_field+51A↓j
.text:000000000000328A                 cmp     ebx, 1
.text:000000000000328D                 jbe     loc_3490
.text:0000000000003293                 fstp    st
.text:0000000000003295                 jmp     short loc_32A0
.text:0000000000003297 ; ---------------------------------------------------------------------------
.text:0000000000003297
.text:0000000000003297 loc_3297:                               ; CODE XREF: process_field+899↓j
.text:0000000000003297                 fstp    st
.text:0000000000003299                 nop     dword ptr [rax+00000000h]
.text:00000000000032A0
.text:00000000000032A0 loc_32A0:                               ; CODE XREF: process_field+325↑j
.text:00000000000032A0                                         ; process_field+59C↓j ...
.text:00000000000032A0                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000032A7                 mov     rdi, r12        ; s
.text:00000000000032AA                 xor     ebx, ebx
.text:00000000000032AC                 call    _fputs_unlocked
.text:00000000000032B1                 jmp     loc_2FDC
.text:00000000000032B1 ; ---------------------------------------------------------------------------
.text:00000000000032B6                 align 20h
.text:00000000000032C0
.text:00000000000032C0 loc_32C0:                               ; CODE XREF: process_field+316↑j
.text:00000000000032C0                 fadd    cs:flt_B1BC
.text:00000000000032C6                 jmp     short loc_3288
.text:00000000000032C6 ; ---------------------------------------------------------------------------
.text:00000000000032C8                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: process_field+141↑j
.text:00000000000032D0                                         ; process_field+14B↑j
.text:00000000000032D0                 mov     rdi, r12        ; s
.text:00000000000032D3                 call    _strlen
.text:00000000000032D8                 cmp     rax, cs:padding_buffer_size
.text:00000000000032DF                 mov     cs:padding_width, rax
.text:00000000000032E6                 jb      loc_30CC
.text:00000000000032EC                 mov     rdi, rax
.text:00000000000032EF                 call    setup_padding_buffer_part_0
.text:00000000000032F4                 jmp     loc_30CC
.text:00000000000032F9 ; ---------------------------------------------------------------------------
.text:00000000000032F9
.text:00000000000032F9 loc_32F9:                               ; CODE XREF: process_field+223↑j
.text:00000000000032F9                                         ; DATA XREF: .rodata:jpt_3193↓o
.text:00000000000032F9                 xor     r14d, r14d      ; jumptable 0000000000003193 case 5
.text:00000000000032FC                 lea     r13, aInvalidSuffixI ; "invalid suffix in input: %s"
.text:0000000000003303                 jmp     loc_3210
.text:0000000000003308 ; ---------------------------------------------------------------------------
.text:0000000000003308
.text:0000000000003308 loc_3308:                               ; CODE XREF: process_field+223↑j
.text:0000000000003308                                         ; DATA XREF: .rodata:jpt_3193↓o
.text:0000000000003308                 xor     r14d, r14d      ; jumptable 0000000000003193 case 6
.text:000000000000330B                 lea     r13, aMissingISuffix ; "missing 'i' suffix in input: %s (e.g Ki"...
.text:0000000000003312                 jmp     loc_3210
.text:0000000000003312 ; ---------------------------------------------------------------------------
.text:0000000000003317                 align 20h
.text:0000000000003320
.text:0000000000003320 def_3193:                               ; CODE XREF: process_field+20D↑j
.text:0000000000003320                                         ; process_field+223↑j
.text:0000000000003320                                         ; DATA XREF: ...
.text:0000000000003320                 xor     r14d, r14d      ; jumptable 0000000000003193 default case, cases 0,1
.text:0000000000003323                 xor     r13d, r13d
.text:0000000000003326                 jmp     loc_3210
.text:0000000000003326 ; ---------------------------------------------------------------------------
.text:000000000000332B                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: process_field+204↑j
.text:0000000000003330                 movsxd  r8, cs:decimal_point_length
.text:0000000000003337                 mov     rcx, [rsp+198h+s1]
.text:000000000000333C                 xor     r14d, r14d
.text:000000000000333F                 mov     rsi, cs:decimal_point ; s2
.text:0000000000003346                 mov     rdi, rcx        ; s1
.text:0000000000003349                 mov     qword ptr [rsp+198h+var_188], rcx
.text:000000000000334E                 mov     rdx, r8         ; n
.text:0000000000003351                 mov     qword ptr [rsp+198h+var_178], r8
.text:0000000000003356                 call    _strncmp
.text:000000000000335B                 test    eax, eax
.text:000000000000335D                 mov     rcx, qword ptr [rsp+198h+var_188]
.text:0000000000003362                 mov     r8, qword ptr [rsp+198h+var_178]
.text:0000000000003367                 jz      loc_3760
.text:000000000000336D
.text:000000000000336D loc_336D:                               ; CODE XREF: process_field+999↓j
.text:000000000000336D                 cmp     cs:dev_debug, 0
.text:0000000000003374                 jnz     loc_37A0
.text:000000000000337A
.text:000000000000337A loc_337A:                               ; CODE XREF: process_field+859↓j
.text:000000000000337A                 mov     rdx, [rsp+198h+s1]
.text:000000000000337F                 movzx   ecx, byte ptr [rdx]
.text:0000000000003382                 mov     qword ptr [rsp+198h+var_178], rdx
.text:0000000000003387                 test    cl, cl
.text:0000000000003389                 mov     byte ptr [rsp+198h+var_188], cl
.text:000000000000338D                 jz      loc_3640
.text:0000000000003393                 call    ___ctype_b_loc
.text:0000000000003398                 mov     rdx, qword ptr [rsp+198h+var_178]
.text:000000000000339D                 mov     rsi, [rax]
.text:00000000000033A0                 movzx   ecx, byte ptr [rsp+198h+var_188]
.text:00000000000033A5                 mov     rax, rdx
.text:00000000000033A8                 jmp     short loc_33BA
.text:00000000000033A8 ; ---------------------------------------------------------------------------
.text:00000000000033AA                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: process_field+458↓j
.text:00000000000033B0                 mov     [rsp+198h+s1], rax
.text:00000000000033B5                 movzx   ecx, byte ptr [r9+1]
.text:00000000000033BA
.text:00000000000033BA loc_33BA:                               ; CODE XREF: process_field+438↑j
.text:00000000000033BA                 movzx   edx, cl
.text:00000000000033BD                 mov     r9, rax
.text:00000000000033C0                 lea     rax, [rax+1]
.text:00000000000033C4                 test    byte ptr [rsi+rdx*2], 1
.text:00000000000033C8                 jnz     short loc_33B0
.text:00000000000033CA                 lea     rdi, s          ; "KMGTPEZY"
.text:00000000000033D1                 movsx   esi, cl         ; c
.text:00000000000033D4                 mov     qword ptr [rsp+198h+var_178], r9
.text:00000000000033D9                 mov     byte ptr [rsp+198h+var_188], cl
.text:00000000000033DD                 call    _strchr
.text:00000000000033E2                 test    rax, rax
.text:00000000000033E5                 jz      loc_4232
.text:00000000000033EB                 test    r13d, r13d
.text:00000000000033EE                 jz      loc_3CE1
.text:00000000000033F4                 movzx   ecx, byte ptr [rsp+198h+var_188]
.text:00000000000033F9                 xor     r8d, r8d
.text:00000000000033FC                 mov     r9, qword ptr [rsp+198h+var_178]
.text:0000000000003401                 sub     ecx, 45h ; 'E'
.text:0000000000003404                 cmp     cl, 15h
.text:0000000000003407                 jbe     loc_3861
.text:000000000000340D
.text:000000000000340D loc_340D:                               ; CODE XREF: process_field+8FF↓j
.text:000000000000340D                 lea     rax, [r9+1]
.text:0000000000003411                 cmp     r13d, 1
.text:0000000000003415                 mov     [rsp+198h+s1], rax
.text:000000000000341A                 jz      loc_390E
.text:0000000000003420                 cmp     r13d, 4
.text:0000000000003424                 jnz     short loc_343A
.text:0000000000003426                 cmp     byte ptr [r9+1], 69h ; 'i'
.text:000000000000342B                 jnz     loc_46D4
.text:0000000000003431                 lea     rax, [r9+2]
.text:0000000000003435                 mov     [rsp+198h+s1], rax
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: process_field+4B4↑j
.text:000000000000343A                 mov     dword ptr [rsp+198h+var_188], r15d
.text:000000000000343F                 movzx   edx, cs:dev_debug
.text:0000000000003446                 fild    dword ptr [rsp+198h+var_188]
.text:000000000000344A
.text:000000000000344A loc_344A:                               ; CODE XREF: process_field+9B9↓j
.text:000000000000344A                                         ; process_field+15C1↓j ...
.text:000000000000344A                 test    r8d, r8d
.text:000000000000344D                 jz      loc_4661
.text:0000000000003453                 mov     eax, r8d
.text:0000000000003456                 sub     eax, 1
.text:0000000000003459                 fld     st
.text:000000000000345B                 jz      short loc_346B
.text:000000000000345D                 nop     dword ptr [rax]
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: process_field+4F5↓j
.text:0000000000003460                 sub     eax, 1
.text:0000000000003463                 fmul    st, st(1)
.text:0000000000003465                 jnz     short loc_3460
.text:0000000000003467                 fstp    st(1)
.text:0000000000003469                 jmp     short loc_3470
.text:000000000000346B ; ---------------------------------------------------------------------------
.text:000000000000346B
.text:000000000000346B loc_346B:                               ; CODE XREF: process_field+4EB↑j
.text:000000000000346B                 fstp    st(1)
.text:000000000000346D                 nop     dword ptr [rax]
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: process_field+4F9↑j
.text:0000000000003470                 xor     r14d, r14d
.text:0000000000003473                 jmp     loc_3656
.text:0000000000003473 ; ---------------------------------------------------------------------------
.text:0000000000003478                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: process_field+2EE↑j
.text:0000000000003480                 cmp     rdx, 1
.text:0000000000003484                 jnz     loc_3264
.text:000000000000348A                 jmp     loc_328A
.text:000000000000348A ; ---------------------------------------------------------------------------
.text:000000000000348F                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: process_field+31D↑j
.text:0000000000003490                 fld     cs:tbyte_B1E0
.text:0000000000003496                 fxch    st(1)
.text:0000000000003498                 mov     rax, cs:user_precision
.text:000000000000349F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000034A3                 cmovnz  r14, rax
.text:00000000000034A7                 fucomi  st, st(1)
.text:00000000000034A9                 fstp    st(1)
.text:00000000000034AB                 jb      loc_3550
.text:00000000000034B1                 fld     cs:tbyte_B1F0
.text:00000000000034B7                 fucomip st, st(1)
.text:00000000000034B9                 jb      loc_3550
.text:00000000000034BF                 fld     st
.text:00000000000034C1                 xor     eax, eax
.text:00000000000034C3                 fld     cs:flt_B1B4
.text:00000000000034C9                 jmp     short loc_34D5
.text:00000000000034C9 ; ---------------------------------------------------------------------------
.text:00000000000034CB                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: process_field+577↓j
.text:00000000000034D0                 fdivp   st(2), st
.text:00000000000034D2                 add     eax, 1
.text:00000000000034D5
.text:00000000000034D5 loc_34D5:                               ; CODE XREF: process_field+559↑j
.text:00000000000034D5                 fldz
.text:00000000000034D7                 fld     st(2)
.text:00000000000034D9                 fxch    st(1)
.text:00000000000034DB                 fucomip st, st(3)
.text:00000000000034DD                 jbe     short loc_34E1
.text:00000000000034DF                 fchs
.text:00000000000034E1
.text:00000000000034E1 loc_34E1:                               ; CODE XREF: process_field+56D↑j
.text:00000000000034E1                 fld     st(1)
.text:00000000000034E3                 fxch    st(1)
.text:00000000000034E5                 fucomip st, st(1)
.text:00000000000034E7                 jnb     short loc_34D0
.text:00000000000034E9                 fstp    st
.text:00000000000034EB                 fstp    st
.text:00000000000034ED                 fstp    st
.text:00000000000034EF                 mov     ebx, cs:scale_to
.text:00000000000034F5                 test    ebx, ebx
.text:00000000000034F7                 jz      loc_37F3
.text:00000000000034FD
.text:00000000000034FD loc_34FD:                               ; CODE XREF: process_field+88C↓j
.text:00000000000034FD                 cmp     eax, 1Ah
.text:0000000000003500                 jbe     short loc_3564
.text:0000000000003502                 cmp     cs:inval_style, 3
.text:0000000000003509                 fstp    [rsp+198h+var_198]
.text:000000000000350C                 jz      loc_32A0
.text:0000000000003512                 lea     rsi, aValueTooLargeT_0 ; "value too large to be printed: '%Lg' (c"...
.text:0000000000003519                 mov     edx, 5          ; category
.text:000000000000351E                 xor     edi, edi        ; domainname
.text:0000000000003520                 call    _dcgettext
.text:0000000000003525                 fld     [rsp+198h+var_198]
.text:0000000000003528                 mov     edi, cs:conv_exit_code ; status
.text:000000000000352E                 sub     rsp, 10h
.text:0000000000003532                 mov     rdx, rax        ; format
.text:0000000000003535                 xor     esi, esi        ; errnum
.text:0000000000003537                 xor     eax, eax
.text:0000000000003539                 fstp    [rsp+1A8h+var_1A8]
.text:000000000000353C                 call    _error
.text:0000000000003541                 pop     r15
.text:0000000000003543                 pop     rax
.text:0000000000003544                 jmp     loc_32A0
.text:0000000000003544 ; ---------------------------------------------------------------------------
.text:0000000000003549                 align 10h
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: process_field+53B↑j
.text:0000000000003550                                         ; process_field+549↑j
.text:0000000000003550                 mov     ebx, cs:scale_to
.text:0000000000003556                 test    ebx, ebx
.text:0000000000003558                 jnz     short loc_3564
.text:000000000000355A                 cmp     r14, 12h
.text:000000000000355E                 ja      loc_3802
.text:0000000000003564
.text:0000000000003564 loc_3564:                               ; CODE XREF: process_field+590↑j
.text:0000000000003564                                         ; process_field+5E8↑j
.text:0000000000003564                 mov     r13d, cs:grouping
.text:000000000000356B                 mov     r15d, cs:round_style
.text:0000000000003572                 mov     [rsp+198h+var_108], 25h ; '%'
.text:000000000000357A                 test    r13d, r13d
.text:000000000000357D                 jz      loc_4220
.text:0000000000003583                 lea     r12, [rsp+198h+var_108]
.text:000000000000358B                 mov     [rsp+198h+var_107], 27h ; '''
.text:0000000000003593                 lea     rbp, [r12+2]
.text:0000000000003598
.text:0000000000003598 loc_3598:                               ; CODE XREF: process_field+12BD↓j
.text:0000000000003598                 mov     r9, cs:zero_padding_width
.text:000000000000359F                 test    r9, r9
.text:00000000000035A2                 jnz     loc_42AB
.text:00000000000035A8
.text:00000000000035A8 loc_35A8:                               ; CODE XREF: process_field+1368↓j
.text:00000000000035A8                 movzx   edx, cs:dev_debug
.text:00000000000035AF                 test    dl, dl
.text:00000000000035B1                 jnz     loc_427A
.text:00000000000035B7
.text:00000000000035B7 loc_35B7:                               ; CODE XREF: process_field+1336↓j
.text:00000000000035B7                 test    ebx, ebx
.text:00000000000035B9                 jnz     loc_3CF2
.text:00000000000035BF                 test    r14d, r14d
.text:00000000000035C2                 mov     esi, r14d
.text:00000000000035C5                 jz      loc_4380
.text:00000000000035CB                 mov     eax, r14d
.text:00000000000035CE                 sub     eax, 1
.text:00000000000035D1                 jz      loc_45DD
.text:00000000000035D7                 fld     cs:flt_B1B4
.text:00000000000035DD                 mov     ecx, eax
.text:00000000000035DF                 fld     st
.text:00000000000035E1
.text:00000000000035E1 loc_35E1:                               ; CODE XREF: process_field+676↓j
.text:00000000000035E1                 sub     ecx, 1
.text:00000000000035E4                 fmul    st, st(1)
.text:00000000000035E6                 jnz     short loc_35E1
.text:00000000000035E8                 fmul    st, st(2)
.text:00000000000035EA                 fnstcw  [rsp+198h+var_14A]
.text:00000000000035EE                 movzx   ecx, [rsp+198h+var_14A]
.text:00000000000035F3                 fld     cs:tbyte_B200
.text:00000000000035F9                 or      ch, 0Ch
.text:00000000000035FC                 cmp     r15d, 4         ; switch 5 cases
.text:0000000000003600                 mov     [rsp+198h+var_14C], cx
.text:0000000000003605                 fld     st(1)
.text:0000000000003607                 fdiv    st, st(1)
.text:0000000000003609                 fldcw   [rsp+198h+var_14C]
.text:000000000000360D                 fistp   qword ptr [rsp+198h+var_188]
.text:0000000000003611                 fldcw   [rsp+198h+var_14A]
.text:0000000000003615                 fild    qword ptr [rsp+198h+var_188]
.text:0000000000003619                 fmulp   st(1), st
.text:000000000000361B                 fsub    st(1), st
.text:000000000000361D                 ja      def_3635        ; jumptable 0000000000003635 default case
.text:0000000000003623                 fstp    st(2)
.text:0000000000003625                 fxch    st(1)
.text:0000000000003627                 lea     rcx, jpt_3635
.text:000000000000362E                 movsxd  rax, ds:(jpt_3635 - 0B03Ch)[rcx+r15*4]
.text:0000000000003632                 add     rax, rcx
.text:0000000000003635                 jmp     rax             ; switch jump
.text:0000000000003635 ; ---------------------------------------------------------------------------
.text:0000000000003637                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: process_field+41D↑j
.text:0000000000003640                 cmp     r13d, 4
.text:0000000000003644                 jz      loc_3CD0
.text:000000000000364A                 movzx   edx, cs:dev_debug
.text:0000000000003651                 fld1
.text:0000000000003653                 xor     r8d, r8d
.text:0000000000003656
.text:0000000000003656 loc_3656:                               ; CODE XREF: process_field+503↑j
.text:0000000000003656                                         ; process_field+16F8↓j
.text:0000000000003656                 test    dl, dl
.text:0000000000003658                 jnz     loc_3C50
.text:000000000000365E                 fld     [rsp+198h+var_128]
.text:0000000000003662                 fmulp   st(1), st
.text:0000000000003664                 fstp    [rsp+198h+var_128]
.text:0000000000003668                 jmp     short loc_3670
.text:000000000000366A ; ---------------------------------------------------------------------------
.text:000000000000366A
.text:000000000000366A loc_366A:                               ; CODE XREF: process_field+D2A↓j
.text:000000000000366A                 fstp    st
.text:000000000000366C                 nop     dword ptr [rax+00h]
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: process_field+6F8↑j
.text:0000000000003670                                         ; process_field+D5B↓j
.text:0000000000003670                 mov     rsi, [rsp+198h+s1]
.text:0000000000003675                 test    rsi, rsi
.text:0000000000003678                 jz      short loc_36E0
.text:000000000000367A                 cmp     byte ptr [rsi], 0
.text:000000000000367D                 jz      short loc_36E0
.text:000000000000367F                 cmp     cs:inval_style, 3
.text:0000000000003686                 mov     ebx, 5
.text:000000000000368B                 jz      loc_3248
.text:0000000000003691                 mov     edi, 1
.text:0000000000003696                 call    quote_n
.text:000000000000369B                 mov     rsi, rbp
.text:000000000000369E                 xor     edi, edi
.text:00000000000036A0                 mov     r13, rax
.text:00000000000036A3                 call    quote_n
.text:00000000000036A8                 lea     rsi, aInvalidSuffixI_0 ; "invalid suffix in input %s: %s"
.text:00000000000036AF                 xor     edi, edi        ; domainname
.text:00000000000036B1                 mov     edx, 5          ; category
.text:00000000000036B6                 mov     rbp, rax
.text:00000000000036B9                 call    _dcgettext
.text:00000000000036BE                 mov     edi, cs:conv_exit_code ; status
.text:00000000000036C4                 mov     rdx, rax        ; format
.text:00000000000036C7                 mov     r8, r13
.text:00000000000036CA                 mov     rcx, rbp
.text:00000000000036CD                 xor     esi, esi        ; errnum
.text:00000000000036CF                 xor     eax, eax
.text:00000000000036D1                 call    _error
.text:00000000000036D6                 jmp     loc_3248
.text:00000000000036D6 ; ---------------------------------------------------------------------------
.text:00000000000036DB                 align 20h
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: process_field+708↑j
.text:00000000000036E0                                         ; process_field+70D↑j
.text:00000000000036E0                 cmp     ebx, 1
.text:00000000000036E3                 jnz     loc_471A
.text:00000000000036E9                 cmp     cs:debug, 0
.text:00000000000036F0                 jz      loc_3248
.text:00000000000036F6                 mov     rdi, rbp
.text:00000000000036F9                 call    quote
.text:00000000000036FE                 lea     rsi, aLargeInputValu ; "large input value %s: possible precisio"...
.text:0000000000003705                 mov     rbp, rax
.text:0000000000003708                 xor     edi, edi        ; domainname
.text:000000000000370A                 mov     edx, 5          ; category
.text:000000000000370F                 call    _dcgettext
.text:0000000000003714                 mov     rcx, rbp
.text:0000000000003717                 mov     rdx, rax        ; format
.text:000000000000371A                 xor     esi, esi        ; errnum
.text:000000000000371C                 xor     edi, edi        ; status
.text:000000000000371E                 xor     eax, eax
.text:0000000000003720                 call    _error
.text:0000000000003725                 jmp     loc_3248
.text:0000000000003725 ; ---------------------------------------------------------------------------
.text:000000000000372A                 align 10h
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: process_field+E4↑j
.text:0000000000003730                 test    dl, dl
.text:0000000000003732                 jz      loc_3068
.text:0000000000003738                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000373F                 lea     rdi, aNoValidSuffixF ; "no valid suffix found\n"
.text:0000000000003746                 mov     edx, 16h        ; n
.text:000000000000374B                 mov     esi, 1          ; size
.text:0000000000003750                 call    _fwrite
.text:0000000000003755                 jmp     loc_3068
.text:0000000000003755 ; ---------------------------------------------------------------------------
.text:000000000000375A                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: process_field+3F7↑j
.text:0000000000003760                 lea     rdi, [rcx+r8]
.text:0000000000003764                 fld     dword ptr [rsp+198h+var_198]
.text:0000000000003767                 lea     rcx, [rsp+198h+var_139]
.text:000000000000376C                 lea     rdx, [rsp+198h+var_118]
.text:0000000000003774                 lea     rsi, [rsp+198h+var_130]
.text:0000000000003779                 fstp    [rsp+198h+var_118]
.text:0000000000003780                 mov     [rsp+198h+s1], rdi
.text:0000000000003785                 call    simple_strtod_int
.text:000000000000378A                 cmp     eax, 1
.text:000000000000378D                 jbe     loc_389E
.text:0000000000003793                 mov     ebx, eax
.text:0000000000003795                 jmp     loc_317A
.text:0000000000003795 ; ---------------------------------------------------------------------------
.text:000000000000379A                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: process_field+404↑j
.text:00000000000037A0                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000037A7                 push    qword ptr [rsp+198h+var_128+8]
.text:00000000000037AB                 lea     rdx, aParsedNumericV ; "  parsed numeric value: %Lf\n  input pr"...
.text:00000000000037B2                 push    qword ptr [rsp+1A0h+var_128]
.text:00000000000037B6                 mov     ecx, r14d
.text:00000000000037B9                 mov     esi, 1
.text:00000000000037BE                 xor     eax, eax
.text:00000000000037C0                 call    ___fprintf_chk
.text:00000000000037C5                 pop     r9
.text:00000000000037C7                 pop     r10
.text:00000000000037C9                 jmp     loc_337A
.text:00000000000037C9 ; ---------------------------------------------------------------------------
.text:00000000000037CE                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: process_field+223↑j
.text:00000000000037D0                                         ; process_field+936↓j
.text:00000000000037D0                                         ; DATA XREF: ...
.text:00000000000037D0                 xor     r14d, r14d      ; jumptable 0000000000003193 case 3
.text:00000000000037D3                 mov     ebx, 3
.text:00000000000037D8                 lea     r13, aInvalidNumberS ; "invalid number: %s"
.text:00000000000037DF                 jmp     loc_3210
.text:00000000000037E4 ; ---------------------------------------------------------------------------
.text:00000000000037E4
.text:00000000000037E4 loc_37E4:                               ; CODE XREF: process_field+223↑j
.text:00000000000037E4                                         ; DATA XREF: .rodata:jpt_3193↓o
.text:00000000000037E4                 xor     r14d, r14d      ; jumptable 0000000000003193 case 4
.text:00000000000037E7                 lea     r13, aRejectingSuffi ; "rejecting suffix in input: %s (consider"...
.text:00000000000037EE                 jmp     loc_3210
.text:00000000000037F3 ; ---------------------------------------------------------------------------
.text:00000000000037F3
.text:00000000000037F3 loc_37F3:                               ; CODE XREF: process_field+587↑j
.text:00000000000037F3                 mov     edx, eax
.text:00000000000037F5                 add     rdx, r14
.text:00000000000037F8                 cmp     rdx, 12h
.text:00000000000037FC                 jbe     loc_34FD
.text:0000000000003802
.text:0000000000003802 loc_3802:                               ; CODE XREF: process_field+5EE↑j
.text:0000000000003802                 cmp     cs:inval_style, 3
.text:0000000000003809                 jz      loc_3297
.text:000000000000380F                 test    r14, r14
.text:0000000000003812                 mov     ebx, cs:conv_exit_code
.text:0000000000003818                 mov     edx, 5          ; category
.text:000000000000381D                 fstp    [rsp+198h+var_198]
.text:0000000000003820                 jz      loc_424D
.text:0000000000003826                 lea     rsi, aValuePrecision ; "value/precision too large to be printed"...
.text:000000000000382D                 xor     edi, edi        ; domainname
.text:000000000000382F                 call    _dcgettext
.text:0000000000003834                 sub     rsp, 10h
.text:0000000000003838                 mov     rcx, r14
.text:000000000000383B                 mov     rdx, rax        ; format
.text:000000000000383E                 fld     [rsp+1A8h+var_198]
.text:0000000000003842                 xor     esi, esi        ; errnum
.text:0000000000003844                 mov     edi, ebx        ; status
.text:0000000000003846                 xor     eax, eax
.text:0000000000003848                 fstp    [rsp+1A8h+var_1A8]
.text:000000000000384B                 call    _error
.text:0000000000003850                 pop     rcx
.text:0000000000003851                 pop     rsi
.text:0000000000003852                 jmp     loc_32A0
.text:0000000000003857 ; ---------------------------------------------------------------------------
.text:0000000000003857
.text:0000000000003857 loc_3857:                               ; CODE XREF: process_field+FF↑j
.text:0000000000003857                 mov     rbp, r12
.text:000000000000385A                 xor     eax, eax
.text:000000000000385C                 jmp     loc_309F
.text:0000000000003861 ; ---------------------------------------------------------------------------
.text:0000000000003861
.text:0000000000003861 loc_3861:                               ; CODE XREF: process_field+497↑j
.text:0000000000003861                 lea     rax, CSWTCH_317
.text:0000000000003868                 movzx   ecx, cl
.text:000000000000386B                 mov     r8d, [rax+rcx*4]
.text:000000000000386F                 jmp     loc_340D
.text:0000000000003874 ; ---------------------------------------------------------------------------
.text:0000000000003874
.text:0000000000003874 loc_3874:                               ; CODE XREF: process_field+EF↑j
.text:0000000000003874                 mov     rdi, rbp
.text:0000000000003877                 call    quote
.text:000000000000387C                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003883                 lea     rdx, aTrimmingSuffix ; "trimming suffix %s\n"
.text:000000000000388A                 mov     rcx, rax
.text:000000000000388D                 mov     esi, 1
.text:0000000000003892                 xor     eax, eax
.text:0000000000003894                 call    ___fprintf_chk
.text:0000000000003899                 jmp     loc_3068
.text:000000000000389E ; ---------------------------------------------------------------------------
.text:000000000000389E
.text:000000000000389E loc_389E:                               ; CODE XREF: process_field+81D↑j
.text:000000000000389E                 cmovnz  eax, ebx
.text:00000000000038A1                 cmp     [rsp+198h+var_139], 0
.text:00000000000038A6                 jnz     loc_37D0        ; jumptable 0000000000003193 case 3
.text:00000000000038AC                 mov     rcx, [rsp+198h+var_130]
.text:00000000000038B1                 fld     [rsp+198h+var_118]
.text:00000000000038B8                 mov     r14, rcx
.text:00000000000038BB                 sub     r14, [rsp+198h+s1]
.text:00000000000038C0                 test    r14d, r14d
.text:00000000000038C3                 jz      short loc_38E4
.text:00000000000038C5                 mov     edx, r14d
.text:00000000000038C8                 sub     edx, 1
.text:00000000000038CB                 jz      loc_4651
.text:00000000000038D1                 fld     cs:flt_B1B4
.text:00000000000038D7                 fld     st
.text:00000000000038D9
.text:00000000000038D9 loc_38D9:                               ; CODE XREF: process_field+96E↓j
.text:00000000000038D9                 sub     edx, 1
.text:00000000000038DC                 fmul    st, st(1)
.text:00000000000038DE                 jnz     short loc_38D9
.text:00000000000038E0                 fstp    st(1)
.text:00000000000038E2                 fdivp   st(1), st
.text:00000000000038E4
.text:00000000000038E4 loc_38E4:                               ; CODE XREF: process_field+953↑j
.text:00000000000038E4                                         ; process_field+16E7↓j
.text:00000000000038E4                 fld     st
.text:00000000000038E6                 fstp    [rsp+198h+var_118]
.text:00000000000038ED                 cmp     [rsp+198h+var_13A], 0
.text:00000000000038F2                 fld     [rsp+198h+var_128]
.text:00000000000038F6                 jz      loc_4536
.text:00000000000038FC                 fsubrp  st(1), st
.text:00000000000038FE                 fstp    [rsp+198h+var_128]
.text:0000000000003902
.text:0000000000003902 loc_3902:                               ; CODE XREF: process_field+15CC↓j
.text:0000000000003902                 mov     [rsp+198h+s1], rcx
.text:0000000000003907                 mov     ebx, eax
.text:0000000000003909                 jmp     loc_336D
.text:000000000000390E ; ---------------------------------------------------------------------------
.text:000000000000390E
.text:000000000000390E loc_390E:                               ; CODE XREF: process_field+4AA↑j
.text:000000000000390E                 cmp     byte ptr [r9+1], 69h ; 'i'
.text:0000000000003913                 movzx   edx, cs:dev_debug
.text:000000000000391A                 jz      loc_4518
.text:0000000000003920                 mov     dword ptr [rsp+198h+var_188], r15d
.text:0000000000003925                 fild    dword ptr [rsp+198h+var_188]
.text:0000000000003929                 jmp     loc_344A
.text:000000000000392E ; ---------------------------------------------------------------------------
.text:000000000000392E
.text:000000000000392E loc_392E:                               ; CODE XREF: process_field+6C5↑j
.text:000000000000392E                                         ; DATA XREF: .rodata:jpt_3635↓o
.text:000000000000392E                 fxch    st(1)           ; jumptable 0000000000003635 case 0
.text:0000000000003930                 jmp     short loc_3934  ; jumptable 00000000000043C9 case 0
.text:0000000000003932 ; ---------------------------------------------------------------------------
.text:0000000000003932
.text:0000000000003932 loc_3932:                               ; CODE XREF: process_field+16C2↓j
.text:0000000000003932                                         ; DATA XREF: .rodata:jpt_4632↓o
.text:0000000000003932                 fxch    st(1)           ; jumptable 0000000000004632 case 0
.text:0000000000003934
.text:0000000000003934 loc_3934:                               ; CODE XREF: process_field+9C0↑j
.text:0000000000003934                                         ; process_field+C51↓j ...
.text:0000000000003934                 fld     st              ; jumptable 00000000000043C9 case 0
.text:0000000000003936                 fldcw   [rsp+198h+var_14C]
.text:000000000000393A                 fistp   qword ptr [rsp+198h+var_198]
.text:000000000000393D                 fldcw   [rsp+198h+var_14A]
.text:0000000000003941                 fild    qword ptr [rsp+198h+var_198]
.text:0000000000003944                 fxch    st(1)
.text:0000000000003946                 fucomip st, st(1)
.text:0000000000003948                 jbe     short loc_395B
.text:000000000000394A                 fstp    st
.text:000000000000394C                 mov     rax, qword ptr [rsp+198h+var_198]
.text:0000000000003950                 add     rax, 1
.text:0000000000003954                 mov     qword ptr [rsp+198h+var_198], rax
.text:0000000000003958                 fild    qword ptr [rsp+198h+var_198]
.text:000000000000395B
.text:000000000000395B loc_395B:                               ; CODE XREF: process_field+9D8↑j
.text:000000000000395B                                         ; process_field+C42↓j ...
.text:000000000000395B                 test    esi, esi
.text:000000000000395D                 faddp   st(1), st
.text:000000000000395F                 jz      short loc_397F
.text:0000000000003961                 mov     eax, esi
.text:0000000000003963                 fld     cs:flt_B1B4
.text:0000000000003969                 sub     eax, 1
.text:000000000000396C                 jz      loc_3C49
.text:0000000000003972
.text:0000000000003972 loc_3972:                               ; CODE XREF: process_field+17B9↓j
.text:0000000000003972                 fld     st
.text:0000000000003974
.text:0000000000003974 loc_3974:                               ; CODE XREF: process_field+A09↓j
.text:0000000000003974                 sub     eax, 1
.text:0000000000003977                 fmul    st, st(1)
.text:0000000000003979                 jnz     short loc_3974
.text:000000000000397B                 fstp    st(1)
.text:000000000000397D                 fdivp   st(1), st
.text:000000000000397F
.text:000000000000397F loc_397F:                               ; CODE XREF: process_field+9EF↑j
.text:000000000000397F                                         ; process_field+CDB↓j ...
.text:000000000000397F                 test    dl, dl
.text:0000000000003981                 mov     r9d, r14d
.text:0000000000003984                 jz      short loc_39DB
.text:0000000000003986                 fxch    st(1)
.text:0000000000003988                 fstp    [rsp+198h+var_188]
.text:000000000000398C                 lea     rax, aNoScalingRetur ; "  no scaling, returning (grouped) value"...
.text:0000000000003993                 lea     rdx, aNoScalingRetur_0 ; "  no scaling, returning value: %.*Lf\n"
.text:000000000000399A                 test    r13d, r13d
.text:000000000000399D                 mov     ecx, r14d
.text:00000000000039A0                 mov     esi, 1
.text:00000000000039A5                 mov     dword ptr [rsp+198h+var_178], r14d
.text:00000000000039AA                 cmovnz  rdx, rax
.text:00000000000039AE                 sub     rsp, 10h
.text:00000000000039B2                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000039B9                 xor     eax, eax
.text:00000000000039BB                 fld     st
.text:00000000000039BD                 fstp    [rsp+1A8h+var_1A8]
.text:00000000000039C0                 fstp    [rsp+1A8h+var_198]
.text:00000000000039C4                 call    ___fprintf_chk
.text:00000000000039C9                 pop     r13
.text:00000000000039CB                 pop     r14
.text:00000000000039CD                 mov     r9d, dword ptr [rsp+198h+var_178]
.text:00000000000039D2                 fld     [rsp+198h+var_198]
.text:00000000000039D5                 fld     [rsp+198h+var_188]
.text:00000000000039D9                 jmp     short loc_39DD
.text:00000000000039DB ; ---------------------------------------------------------------------------
.text:00000000000039DB
.text:00000000000039DB loc_39DB:                               ; CODE XREF: process_field+A14↑j
.text:00000000000039DB                 fxch    st(1)
.text:00000000000039DD
.text:00000000000039DD loc_39DD:                               ; CODE XREF: process_field+A69↑j
.text:00000000000039DD                 mov     dword ptr [rbp+0], 664C2A2Eh
.text:00000000000039E4                 mov     byte ptr [rbp+4], 0
.text:00000000000039E8                 lea     rbp, [rsp+198h+src]
.text:00000000000039F0                 sub     rsp, 10h
.text:00000000000039F4                 xor     eax, eax
.text:00000000000039F6                 mov     r8, r12
.text:00000000000039F9                 mov     ecx, 80h
.text:00000000000039FE                 mov     edx, 1
.text:0000000000003A03                 mov     esi, 80h
.text:0000000000003A08                 mov     rdi, rbp
.text:0000000000003A0B                 fstp    [rsp+1A8h+var_188]
.text:0000000000003A0F                 fld     st
.text:0000000000003A11                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000003A14                 fstp    [rsp+1A8h+var_198]
.text:0000000000003A18                 call    ___snprintf_chk
.text:0000000000003A1D                 cmp     eax, 7Fh
.text:0000000000003A20                 pop     r11
.text:0000000000003A22                 pop     rbx
.text:0000000000003A23                 fld     [rsp+198h+var_198]
.text:0000000000003A26                 ja      loc_46E8
.text:0000000000003A2C                 fstp    st
.text:0000000000003A2E                 movzx   ebx, cs:dev_debug
.text:0000000000003A35                 fld     [rsp+198h+var_188]
.text:0000000000003A39
.text:0000000000003A39 loc_3A39:                               ; CODE XREF: process_field+148D↓j
.text:0000000000003A39                 mov     rsi, cs:suffix
.text:0000000000003A40                 test    rsi, rsi
.text:0000000000003A43                 jz      short loc_3A9A
.text:0000000000003A45
.text:0000000000003A45 loc_3A45:                               ; CODE XREF: process_field+106E↓j
.text:0000000000003A45                 mov     rdx, rbp
.text:0000000000003A48
.text:0000000000003A48 loc_3A48:                               ; CODE XREF: process_field+AED↓j
.text:0000000000003A48                 mov     ecx, [rdx]
.text:0000000000003A4A                 add     rdx, 4
.text:0000000000003A4E                 lea     eax, [rcx-1010101h]
.text:0000000000003A54                 not     ecx
.text:0000000000003A56                 and     eax, ecx
.text:0000000000003A58                 and     eax, 80808080h
.text:0000000000003A5D                 jz      short loc_3A48
.text:0000000000003A5F                 mov     ecx, eax
.text:0000000000003A61                 shr     ecx, 10h
.text:0000000000003A64                 test    eax, 8080h
.text:0000000000003A69                 fstp    [rsp+198h+var_198]
.text:0000000000003A6C                 cmovz   eax, ecx
.text:0000000000003A6F                 lea     rcx, [rdx+2]
.text:0000000000003A73                 mov     edi, eax
.text:0000000000003A75                 cmovz   rdx, rcx
.text:0000000000003A79                 add     dil, al
.text:0000000000003A7C                 mov     rax, rbp
.text:0000000000003A7F                 sbb     rdx, 3
.text:0000000000003A83                 mov     ecx, 80h
.text:0000000000003A88                 mov     rdi, rbp
.text:0000000000003A8B                 sub     rax, rdx
.text:0000000000003A8E                 lea     rdx, [rax+7Fh]
.text:0000000000003A92                 call    ___strncat_chk
.text:0000000000003A97                 fld     [rsp+198h+var_198]
.text:0000000000003A9A
.text:0000000000003A9A loc_3A9A:                               ; CODE XREF: process_field+AD3↑j
.text:0000000000003A9A                 test    bl, bl
.text:0000000000003A9C                 jz      short loc_3AD5
.text:0000000000003A9E                 mov     rdi, rbp
.text:0000000000003AA1                 fstp    [rsp+198h+var_198]
.text:0000000000003AA4                 call    quote
.text:0000000000003AA9                 lea     rdx, aFormattingOutp ; "formatting output:\n  value: %Lf\n  hum"...
.text:0000000000003AB0                 sub     rsp, 10h
.text:0000000000003AB4                 mov     rcx, rax
.text:0000000000003AB7                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003ABE                 mov     esi, 1
.text:0000000000003AC3                 xor     eax, eax
.text:0000000000003AC5                 fld     [rsp+1A8h+var_198]
.text:0000000000003AC9                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000003ACC                 call    ___fprintf_chk
.text:0000000000003AD1                 pop     rax
.text:0000000000003AD2                 pop     rdx
.text:0000000000003AD3                 jmp     short loc_3AD7
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003AD5
.text:0000000000003AD5 loc_3AD5:                               ; CODE XREF: process_field+B2C↑j
.text:0000000000003AD5                 fstp    st
.text:0000000000003AD7
.text:0000000000003AD7 loc_3AD7:                               ; CODE XREF: process_field+B63↑j
.text:0000000000003AD7                                         ; process_field+1076↓j
.text:0000000000003AD7                 mov     rsi, cs:padding_width
.text:0000000000003ADE                 mov     rax, rbp
.text:0000000000003AE1
.text:0000000000003AE1 loc_3AE1:                               ; CODE XREF: process_field+B87↓j
.text:0000000000003AE1                 mov     ecx, [rax]
.text:0000000000003AE3                 add     rax, 4
.text:0000000000003AE7                 lea     edx, [rcx-1010101h]
.text:0000000000003AED                 not     ecx
.text:0000000000003AEF                 and     edx, ecx
.text:0000000000003AF1                 and     edx, 80808080h
.text:0000000000003AF7                 jz      short loc_3AE1
.text:0000000000003AF9                 mov     ecx, edx
.text:0000000000003AFB                 shr     ecx, 10h
.text:0000000000003AFE                 test    edx, 8080h
.text:0000000000003B04                 cmovz   edx, ecx
.text:0000000000003B07                 lea     rcx, [rax+2]
.text:0000000000003B0B                 mov     edi, edx
.text:0000000000003B0D                 cmovz   rax, rcx
.text:0000000000003B11                 add     dil, dl
.text:0000000000003B14                 mov     rdx, cs:padding_buffer_size
.text:0000000000003B1B                 sbb     rax, 3
.text:0000000000003B1F                 sub     rax, rbp
.text:0000000000003B22                 test    rsi, rsi
.text:0000000000003B25                 jz      short loc_3B30
.text:0000000000003B27                 cmp     rsi, rax
.text:0000000000003B2A                 ja      loc_442F
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: process_field+BB5↑j
.text:0000000000003B30                 lea     rdi, [rax+1]
.text:0000000000003B34                 cmp     rdi, rdx
.text:0000000000003B37                 jb      short loc_3B3E
.text:0000000000003B39                 call    setup_padding_buffer_part_0
.text:0000000000003B3E
.text:0000000000003B3E loc_3B3E:                               ; CODE XREF: process_field+BC7↑j
.text:0000000000003B3E                 mov     rdi, cs:padding_buffer ; dest
.text:0000000000003B45                 mov     rsi, rbp        ; src
.text:0000000000003B48                 call    _strcpy
.text:0000000000003B4D
.text:0000000000003B4D loc_3B4D:                               ; CODE XREF: process_field+14F2↓j
.text:0000000000003B4D                                         ; process_field+1521↓j
.text:0000000000003B4D                 mov     rdi, cs:format_str_prefix ; s
.text:0000000000003B54                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B5B                 test    rdi, rdi
.text:0000000000003B5E                 jz      short loc_3B6C
.text:0000000000003B60                 call    _fputs_unlocked
.text:0000000000003B65                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B6C
.text:0000000000003B6C loc_3B6C:                               ; CODE XREF: process_field+BEE↑j
.text:0000000000003B6C                 mov     rdi, cs:padding_buffer ; s
.text:0000000000003B73                 mov     ebx, 1
.text:0000000000003B78                 call    _fputs_unlocked
.text:0000000000003B7D                 mov     rdi, cs:format_str_suffix ; s
.text:0000000000003B84                 test    rdi, rdi
.text:0000000000003B87                 jz      loc_2FDC
.text:0000000000003B8D                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B94                 call    _fputs_unlocked
.text:0000000000003B99                 jmp     loc_2FDC
.text:0000000000003B9E ; ---------------------------------------------------------------------------
.text:0000000000003B9E
.text:0000000000003B9E loc_3B9E:                               ; CODE XREF: process_field+6C5↑j
.text:0000000000003B9E                                         ; DATA XREF: .rodata:jpt_3635↓o
.text:0000000000003B9E                 fxch    st(1)           ; jumptable 0000000000003635 case 3
.text:0000000000003BA0                 jmp     short loc_3BA4  ; jumptable 00000000000043C9 case 3
.text:0000000000003BA2 ; ---------------------------------------------------------------------------
.text:0000000000003BA2
.text:0000000000003BA2 loc_3BA2:                               ; CODE XREF: process_field+16C2↓j
.text:0000000000003BA2                                         ; DATA XREF: .rodata:jpt_4632↓o
.text:0000000000003BA2                 fxch    st(1)           ; jumptable 0000000000004632 case 3
.text:0000000000003BA4
.text:0000000000003BA4 loc_3BA4:                               ; CODE XREF: process_field+C30↑j
.text:0000000000003BA4                                         ; process_field+1459↓j
.text:0000000000003BA4                                         ; DATA XREF: ...
.text:0000000000003BA4                 fldcw   [rsp+198h+var_14C] ; jumptable 00000000000043C9 case 3
.text:0000000000003BA8                 fistp   qword ptr [rsp+198h+var_198]
.text:0000000000003BAB                 fldcw   [rsp+198h+var_14A]
.text:0000000000003BAF                 fild    qword ptr [rsp+198h+var_198]
.text:0000000000003BB2                 jmp     loc_395B
.text:0000000000003BB7 ; ---------------------------------------------------------------------------
.text:0000000000003BB7
.text:0000000000003BB7 loc_3BB7:                               ; CODE XREF: process_field+6C5↑j
.text:0000000000003BB7                                         ; DATA XREF: .rodata:jpt_3635↓o
.text:0000000000003BB7                 fxch    st(1)           ; jumptable 0000000000003635 case 2
.text:0000000000003BB9                 jmp     short loc_3BBD  ; jumptable 00000000000043C9 case 2
.text:0000000000003BBB ; ---------------------------------------------------------------------------
.text:0000000000003BBB
.text:0000000000003BBB loc_3BBB:                               ; CODE XREF: process_field+16C2↓j
.text:0000000000003BBB                                         ; DATA XREF: .rodata:jpt_4632↓o
.text:0000000000003BBB                 fxch    st(1)           ; jumptable 0000000000004632 case 2
.text:0000000000003BBD
.text:0000000000003BBD loc_3BBD:                               ; CODE XREF: process_field+C49↑j
.text:0000000000003BBD                                         ; process_field+1459↓j
.text:0000000000003BBD                                         ; DATA XREF: ...
.text:0000000000003BBD                 fldz                    ; jumptable 00000000000043C9 case 2
.text:0000000000003BBF                 fucomip st, st(1)
.text:0000000000003BC1                 jbe     loc_3934        ; jumptable 00000000000043C9 case 0
.text:0000000000003BC7                 fchs
.text:0000000000003BC9                 fld     st
.text:0000000000003BCB                 fldcw   [rsp+198h+var_14C]
.text:0000000000003BCF                 fistp   [rsp+198h+var_158]
.text:0000000000003BD3                 fldcw   [rsp+198h+var_14A]
.text:0000000000003BD7
.text:0000000000003BD7 loc_3BD7:                               ; CODE XREF: process_field+CCF↓j
.text:0000000000003BD7                 mov     rax, [rsp+198h+var_158]
.text:0000000000003BDC                 xor     ecx, ecx
.text:0000000000003BDE                 mov     qword ptr [rsp+198h+var_198], rax
.text:0000000000003BE2                 fild    qword ptr [rsp+198h+var_198]
.text:0000000000003BE5                 fxch    st(1)
.text:0000000000003BE7                 fucomip st, st(1)
.text:0000000000003BE9                 fstp    st
.text:0000000000003BEB                 setnbe  cl
.text:0000000000003BEE                 add     rax, rcx
.text:0000000000003BF1                 neg     rax
.text:0000000000003BF4                 mov     qword ptr [rsp+198h+var_198], rax
.text:0000000000003BF8                 fild    qword ptr [rsp+198h+var_198]
.text:0000000000003BFB                 jmp     loc_395B
.text:0000000000003C00 ; ---------------------------------------------------------------------------
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: process_field+6C5↑j
.text:0000000000003C00                                         ; DATA XREF: .rodata:jpt_3635↓o
.text:0000000000003C00                 fxch    st(1)           ; jumptable 0000000000003635 case 4
.text:0000000000003C02                 jmp     short loc_3C06  ; jumptable 00000000000043C9 case 4
.text:0000000000003C04 ; ---------------------------------------------------------------------------
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: process_field+16C2↓j
.text:0000000000003C04                                         ; DATA XREF: .rodata:jpt_4632↓o
.text:0000000000003C04                 fxch    st(1)           ; jumptable 0000000000004632 case 4
.text:0000000000003C06
.text:0000000000003C06 loc_3C06:                               ; CODE XREF: process_field+C92↑j
.text:0000000000003C06                                         ; process_field+1459↓j
.text:0000000000003C06                                         ; DATA XREF: ...
.text:0000000000003C06                 fldz                    ; jumptable 00000000000043C9 case 4
.text:0000000000003C08                 fucomip st, st(1)
.text:0000000000003C0A                 ja      loc_45C4
.text:0000000000003C10                 fadd    cs:flt_B1C0
.text:0000000000003C16                 fldcw   [rsp+198h+var_14C]
.text:0000000000003C1A                 fistp   qword ptr [rsp+198h+var_198]
.text:0000000000003C1D                 fldcw   [rsp+198h+var_14A]
.text:0000000000003C21                 fild    qword ptr [rsp+198h+var_198]
.text:0000000000003C24                 jmp     loc_395B
.text:0000000000003C29 ; ---------------------------------------------------------------------------
.text:0000000000003C29
.text:0000000000003C29 loc_3C29:                               ; CODE XREF: process_field+6C5↑j
.text:0000000000003C29                                         ; DATA XREF: .rodata:jpt_3635↓o
.text:0000000000003C29                 fxch    st(1)           ; jumptable 0000000000003635 case 1
.text:0000000000003C2B                 jmp     short loc_3C2F  ; jumptable 00000000000043C9 case 1
.text:0000000000003C2D ; ---------------------------------------------------------------------------
.text:0000000000003C2D
.text:0000000000003C2D loc_3C2D:                               ; CODE XREF: process_field+16C2↓j
.text:0000000000003C2D                                         ; DATA XREF: .rodata:jpt_4632↓o
.text:0000000000003C2D                 fxch    st(1)           ; jumptable 0000000000004632 case 1
.text:0000000000003C2F
.text:0000000000003C2F loc_3C2F:                               ; CODE XREF: process_field+CBB↑j
.text:0000000000003C2F                                         ; process_field+1459↓j
.text:0000000000003C2F                                         ; DATA XREF: ...
.text:0000000000003C2F                 fchs                    ; jumptable 00000000000043C9 case 1
.text:0000000000003C31                 fld     st
.text:0000000000003C33                 fldcw   [rsp+198h+var_14C]
.text:0000000000003C37                 fistp   [rsp+198h+var_158]
.text:0000000000003C3B                 fldcw   [rsp+198h+var_14A]
.text:0000000000003C3F                 jmp     short loc_3BD7
.text:0000000000003C41 ; ---------------------------------------------------------------------------
.text:0000000000003C41
.text:0000000000003C41 def_4632:                               ; CODE XREF: process_field+16AA↓j
.text:0000000000003C41                 fstp    st              ; jumptable 0000000000004632 default case
.text:0000000000003C43                 fstp    st
.text:0000000000003C45                 fldz
.text:0000000000003C47                 fxch    st(1)
.text:0000000000003C49
.text:0000000000003C49 loc_3C49:                               ; CODE XREF: process_field+9FC↑j
.text:0000000000003C49                 fdivp   st(1), st
.text:0000000000003C4B                 jmp     loc_397F
.text:0000000000003C50 ; ---------------------------------------------------------------------------
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: process_field+6E8↑j
.text:0000000000003C50                 sub     rsp, 10h
.text:0000000000003C54                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003C5B                 lea     rdx, aSuffixPowerDDL ; "  suffix power=%d^%d = %Lf\n"
.text:0000000000003C62                 fld     st
.text:0000000000003C64                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000003C67                 xor     eax, eax
.text:0000000000003C69                 mov     ecx, r15d
.text:0000000000003C6C                 mov     esi, 1
.text:0000000000003C71                 fstp    [rsp+1A8h+var_188]
.text:0000000000003C75                 call    ___fprintf_chk
.text:0000000000003C7A                 cmp     cs:dev_debug, 0
.text:0000000000003C81                 fld     [rsp+1A8h+var_128]
.text:0000000000003C88                 fld     [rsp+1A8h+var_188]
.text:0000000000003C8C                 fmulp   st(1), st
.text:0000000000003C8E                 fld     st
.text:0000000000003C90                 fstp    [rsp+1A8h+var_128]
.text:0000000000003C97                 pop     rdi
.text:0000000000003C98                 pop     r8
.text:0000000000003C9A                 jz      loc_366A
.text:0000000000003CA0                 sub     rsp, 20h
.text:0000000000003CA4                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003CAB                 lea     rdx, aReturningValue ; "  returning value: %Lf (%LG)\n"
.text:0000000000003CB2                 fld     st
.text:0000000000003CB4                 fstp    [rsp+1B8h+var_1A8]
.text:0000000000003CB8                 mov     esi, 1
.text:0000000000003CBD                 xor     eax, eax
.text:0000000000003CBF                 fstp    [rsp+1B8h+var_1B8]
.text:0000000000003CC2                 call    ___fprintf_chk
.text:0000000000003CC7                 add     rsp, 20h
.text:0000000000003CCB                 jmp     loc_3670
.text:0000000000003CD0 ; ---------------------------------------------------------------------------
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: process_field+6D4↑j
.text:0000000000003CD0                 mov     ebx, 6
.text:0000000000003CD5                 lea     r13, aMissingISuffix ; "missing 'i' suffix in input: %s (e.g Ki"...
.text:0000000000003CDC                 jmp     loc_3210
.text:0000000000003CE1 ; ---------------------------------------------------------------------------
.text:0000000000003CE1
.text:0000000000003CE1 loc_3CE1:                               ; CODE XREF: process_field+47E↑j
.text:0000000000003CE1                 mov     ebx, 4
.text:0000000000003CE6                 lea     r13, aRejectingSuffi ; "rejecting suffix in input: %s (consider"...
.text:0000000000003CED                 jmp     loc_3210
.text:0000000000003CF2 ; ---------------------------------------------------------------------------
.text:0000000000003CF2
.text:0000000000003CF2 loc_3CF2:                               ; CODE XREF: process_field+649↑j
.text:0000000000003CF2                 lea     eax, [rbx-3]
.text:0000000000003CF5                 cmp     eax, 1
.text:0000000000003CF8                 ja      loc_4365
.text:0000000000003CFE                 movsd   xmm3, cs:qword_B1C8
.text:0000000000003D06                 mov     dword ptr [rsp+198h+var_178], 400h
.text:0000000000003D0E                 movsd   qword ptr [rsp+198h+var_188], xmm3
.text:0000000000003D14
.text:0000000000003D14 loc_3D14:                               ; CODE XREF: process_field+140B↓j
.text:0000000000003D14                 fld     cs:tbyte_B1E0
.text:0000000000003D1A                 fxch    st(1)
.text:0000000000003D1C                 fucomi  st, st(1)
.text:0000000000003D1E                 fstp    st(1)
.text:0000000000003D20                 jb      loc_4243
.text:0000000000003D26                 fld     cs:tbyte_B1F0
.text:0000000000003D2C                 fucomip st, st(1)
.text:0000000000003D2E                 jb      loc_4243
.text:0000000000003D34                 fild    dword ptr [rsp+198h+var_178]
.text:0000000000003D38                 xor     r13d, r13d
.text:0000000000003D3B                 fld     st(1)
.text:0000000000003D3D                 jmp     short loc_3D45
.text:0000000000003D3F ; ---------------------------------------------------------------------------
.text:0000000000003D3F
.text:0000000000003D3F loc_3D3F:                               ; CODE XREF: process_field+DE1↓j
.text:0000000000003D3F                 fdiv    st, st(1)
.text:0000000000003D41                 add     r13d, 1
.text:0000000000003D45
.text:0000000000003D45 loc_3D45:                               ; CODE XREF: process_field+DCD↑j
.text:0000000000003D45                 fldz
.text:0000000000003D47                 fucomip st, st(1)
.text:0000000000003D49                 fld     st
.text:0000000000003D4B                 jbe     short loc_3D4F
.text:0000000000003D4D                 fchs
.text:0000000000003D4F
.text:0000000000003D4F loc_3D4F:                               ; CODE XREF: process_field+DDB↑j
.text:0000000000003D4F                 fucomip st, st(2)
.text:0000000000003D51                 jnb     short loc_3D3F
.text:0000000000003D53                 fstp    st(1)
.text:0000000000003D55
.text:0000000000003D55 loc_3D55:                               ; CODE XREF: process_field+12D8↓j
.text:0000000000003D55                 test    dl, dl
.text:0000000000003D57                 jz      short loc_3DA5
.text:0000000000003D59                 fxch    st(1)
.text:0000000000003D5B                 fstp    [rsp+198h+var_168]
.text:0000000000003D5F                 sub     rsp, 10h
.text:0000000000003D63                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003D6A                 lea     rdx, aScaledValueToL ; "  scaled value to %Lf * %0.f ^ %u\n"
.text:0000000000003D71                 mov     ecx, r13d
.text:0000000000003D74                 mov     esi, 1
.text:0000000000003D79                 mov     eax, 1
.text:0000000000003D7E                 movsd   xmm0, qword ptr [rsp+1A8h+var_188]
.text:0000000000003D84                 fld     st
.text:0000000000003D86                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000003D89                 fstp    [rsp+1A8h+var_178]
.text:0000000000003D8D                 call    ___fprintf_chk
.text:0000000000003D92                 pop     r9
.text:0000000000003D94                 pop     r10
.text:0000000000003D96                 movzx   edx, cs:dev_debug
.text:0000000000003D9D                 fld     [rsp+198h+var_168]
.text:0000000000003DA1                 fld     [rsp+198h+var_178]
.text:0000000000003DA5
.text:0000000000003DA5 loc_3DA5:                               ; CODE XREF: process_field+DE7↑j
.text:0000000000003DA5                 mov     rsi, cs:user_precision
.text:0000000000003DAC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DB0                 fld     qword ptr [rsp+198h+var_188]
.text:0000000000003DB4                 jz      loc_4496
.text:0000000000003DBA                 lea     eax, [r13+r13*2+0]
.text:0000000000003DBF                 cmp     rax, rsi
.text:0000000000003DC2                 cmovg   rax, rsi
.text:0000000000003DC6                 test    eax, eax
.text:0000000000003DC8                 mov     edi, eax
.text:0000000000003DCA                 jz      loc_42E1
.text:0000000000003DD0                 sub     eax, 1
.text:0000000000003DD3                 jz      loc_4683
.text:0000000000003DD9                 fld     cs:flt_B1B4
.text:0000000000003DDF                 mov     ecx, eax
.text:0000000000003DE1                 fld     st
.text:0000000000003DE3
.text:0000000000003DE3 loc_3DE3:                               ; CODE XREF: process_field+E78↓j
.text:0000000000003DE3                 sub     ecx, 1
.text:0000000000003DE6                 fmul    st, st(1)
.text:0000000000003DE8                 jnz     short loc_3DE3
.text:0000000000003DEA                 fmulp   st(3), st
.text:0000000000003DEC                 fnstcw  [rsp+198h+var_14A]
.text:0000000000003DF0                 movzx   ecx, [rsp+198h+var_14A]
.text:0000000000003DF5                 fld     cs:tbyte_B200
.text:0000000000003DFB                 or      ch, 0Ch
.text:0000000000003DFE                 cmp     r15d, 4         ; switch 5 cases
.text:0000000000003E02                 mov     [rsp+198h+var_14C], cx
.text:0000000000003E07                 fld     st(3)
.text:0000000000003E09                 fdiv    st, st(1)
.text:0000000000003E0B                 fldcw   [rsp+198h+var_14C]
.text:0000000000003E0F                 fistp   qword ptr [rsp+198h+var_178]
.text:0000000000003E13                 fldcw   [rsp+198h+var_14A]
.text:0000000000003E17                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000003E1B                 fmulp   st(1), st
.text:0000000000003E1D                 fsub    st(3), st
.text:0000000000003E1F                 ja      def_3E33        ; jumptable 0000000000003E33 default case
.text:0000000000003E25                 lea     rcx, jpt_3E33
.text:0000000000003E2C                 movsxd  rax, ds:(jpt_3E33 - 0B050h)[rcx+r15*4]
.text:0000000000003E30                 add     rax, rcx
.text:0000000000003E33                 jmp     rax             ; switch jump
.text:0000000000003E35 ; ---------------------------------------------------------------------------
.text:0000000000003E35
.text:0000000000003E35 loc_3E35:                               ; CODE XREF: process_field+158F↓j
.text:0000000000003E35                                         ; DATA XREF: .rodata:jpt_44FF↓o
.text:0000000000003E35                 fstp    st(3)           ; jumptable 00000000000044FF case 0
.text:0000000000003E37                 fxch    st(1)
.text:0000000000003E39                 fxch    st(2)
.text:0000000000003E3B                 jmp     short loc_3E45
.text:0000000000003E3D ; ---------------------------------------------------------------------------
.text:0000000000003E3D
.text:0000000000003E3D loc_3E3D:                               ; CODE XREF: process_field+1762↓j
.text:0000000000003E3D                                         ; DATA XREF: .rodata:jpt_46D2↓o
.text:0000000000003E3D                 fstp    st(1)           ; jumptable 00000000000046D2 case 0
.text:0000000000003E3F                 fxch    st(1)
.text:0000000000003E41                 fxch    st(2)
.text:0000000000003E43                 fxch    st(1)
.text:0000000000003E45
.text:0000000000003E45 loc_3E45:                               ; CODE XREF: process_field+ECB↑j
.text:0000000000003E45                 fxch    st(2)
.text:0000000000003E47                 fxch    st(1)
.text:0000000000003E49                 mov     edi, 1
.text:0000000000003E4E                 jmp     short loc_3E58
.text:0000000000003E50 ; ---------------------------------------------------------------------------
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: process_field+EC3↑j
.text:0000000000003E50                                         ; DATA XREF: .rodata:jpt_3E33↓o
.text:0000000000003E50                 fstp    st(1)           ; jumptable 0000000000003E33 case 0
.text:0000000000003E52                 fxch    st(2)
.text:0000000000003E54                 jmp     short loc_3E58
.text:0000000000003E56 ; ---------------------------------------------------------------------------
.text:0000000000003E56
.text:0000000000003E56 loc_3E56:                               ; CODE XREF: process_field+11E6↓j
.text:0000000000003E56                 fxch    st(2)
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: process_field+EDE↑j
.text:0000000000003E58                                         ; process_field+EE4↑j ...
.text:0000000000003E58                 fld     st
.text:0000000000003E5A                 fldcw   [rsp+198h+var_14C]
.text:0000000000003E5E                 fistp   qword ptr [rsp+198h+var_178]
.text:0000000000003E62                 fldcw   [rsp+198h+var_14A]
.text:0000000000003E66                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000003E6A                 fxch    st(1)
.text:0000000000003E6C                 fucomip st, st(1)
.text:0000000000003E6E                 jbe     short loc_3E84
.text:0000000000003E70                 fstp    st
.text:0000000000003E72                 mov     rax, qword ptr [rsp+198h+var_178]
.text:0000000000003E77                 add     rax, 1
.text:0000000000003E7B                 mov     qword ptr [rsp+198h+var_178], rax
.text:0000000000003E80                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000003E84
.text:0000000000003E84 loc_3E84:                               ; CODE XREF: process_field+EFE↑j
.text:0000000000003E84                                         ; process_field+11B4↓j ...
.text:0000000000003E84                 test    edi, edi
.text:0000000000003E86                 faddp   st(2), st
.text:0000000000003E88                 jnz     loc_4541
.text:0000000000003E8E                 fld1
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: process_field+1290↓j
.text:0000000000003E90                                         ; process_field:loc_4211↓j ...
.text:0000000000003E90                 fdivp   st(2), st
.text:0000000000003E92                 fldz
.text:0000000000003E94                 fucomip st, st(2)
.text:0000000000003E96                 ja      loc_4402
.text:0000000000003E9C                 fxch    st(1)
.text:0000000000003E9E
.text:0000000000003E9E loc_3E9E:                               ; CODE XREF: process_field+170E↓j
.text:0000000000003E9E                 fucomi  st, st(1)
.text:0000000000003EA0                 jb      short loc_3EB0
.text:0000000000003EA2                 jmp     short loc_3EA8
.text:0000000000003EA4 ; ---------------------------------------------------------------------------
.text:0000000000003EA4
.text:0000000000003EA4 loc_3EA4:                               ; CODE XREF: process_field+1498↓j
.text:0000000000003EA4                 fstp    st
.text:0000000000003EA6                 fxch    st(1)
.text:0000000000003EA8
.text:0000000000003EA8 loc_3EA8:                               ; CODE XREF: process_field+F32↑j
.text:0000000000003EA8                 fdivrp  st(1), st
.text:0000000000003EAA                 add     r13d, 1
.text:0000000000003EAE                 jmp     short loc_3EB2
.text:0000000000003EB0 ; ---------------------------------------------------------------------------
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: process_field+F30↑j
.text:0000000000003EB0                 fstp    st(1)
.text:0000000000003EB2
.text:0000000000003EB2 loc_3EB2:                               ; CODE XREF: process_field+F3E↑j
.text:0000000000003EB2                 fldz
.text:0000000000003EB4                 fxch    st(1)
.text:0000000000003EB6                 fucomi  st, st(1)
.text:0000000000003EB8                 fstp    st(1)
.text:0000000000003EBA                 jp      loc_4501
.text:0000000000003EC0                 jnz     loc_4501
.text:0000000000003EC6                 xor     r9d, r9d
.text:0000000000003EC9
.text:0000000000003EC9 loc_3EC9:                               ; CODE XREF: process_field+14BA↓j
.text:0000000000003EC9                 test    dl, dl
.text:0000000000003ECB                 jz      short loc_3F21
.text:0000000000003ECD                 fxch    st(1)
.text:0000000000003ECF                 fstp    [rsp+198h+var_178]
.text:0000000000003ED3                 mov     dword ptr [rsp+198h+var_168], r9d
.text:0000000000003ED8                 sub     rsp, 10h
.text:0000000000003EDC                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003EE3                 lea     rdx, aAfterRoundingV ; "  after rounding, value=%Lf * %0.f ^ %u"...
.text:0000000000003EEA                 mov     esi, 1
.text:0000000000003EEF                 mov     ecx, r13d
.text:0000000000003EF2                 mov     eax, 1
.text:0000000000003EF7                 fld     st
.text:0000000000003EF9                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000003EFC                 movsd   xmm0, qword ptr [rsp+1A8h+var_188]
.text:0000000000003F02                 fstp    [rsp+1A8h+var_198]
.text:0000000000003F06                 call    ___fprintf_chk
.text:0000000000003F0B                 pop     rdi
.text:0000000000003F0C                 pop     r8
.text:0000000000003F0E                 mov     rsi, cs:user_precision
.text:0000000000003F15                 mov     r9d, dword ptr [rsp+198h+var_168]
.text:0000000000003F1A                 fld     [rsp+198h+var_178]
.text:0000000000003F1E                 fld     [rsp+198h+var_198]
.text:0000000000003F21
.text:0000000000003F21 loc_3F21:                               ; CODE XREF: process_field+F5B↑j
.text:0000000000003F21                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F25                 mov     ecx, 7325h
.text:0000000000003F2A                 mov     dword ptr [rbp+0], 664C2A2Eh
.text:0000000000003F31                 cmovnz  r9d, esi
.text:0000000000003F35                 cmp     r13d, 8         ; switch 9 cases
.text:0000000000003F39                 mov     [rbp+4], cx
.text:0000000000003F3D                 mov     byte ptr [rbp+6], 0
.text:0000000000003F41                 ja      def_3F58        ; jumptable 0000000000003F58 default case
.text:0000000000003F47                 lea     rdx, jpt_3F58
.text:0000000000003F4E                 mov     eax, r13d
.text:0000000000003F51                 movsxd  rax, ds:(jpt_3F58 - 0B064h)[rdx+rax*4]
.text:0000000000003F55                 add     rax, rdx
.text:0000000000003F58                 jmp     rax             ; switch jump
.text:0000000000003F5A ; ---------------------------------------------------------------------------
.text:0000000000003F5A
.text:0000000000003F5A loc_3F5A:                               ; CODE XREF: process_field+FE8↑j
.text:0000000000003F5A                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:0000000000003F5A                 fxch    st(1)           ; jumptable 0000000000003F58 case 1
.text:0000000000003F5C                 lea     rax, aKmgtpez   ; "KMGTPEZ"
.text:0000000000003F63
.text:0000000000003F63 loc_3F63:                               ; CODE XREF: process_field+1119↓j
.text:0000000000003F63                                         ; process_field+1127↓j ...
.text:0000000000003F63                 fstp    [rsp+198h+var_188]
.text:0000000000003F67                 lea     rbp, [rsp+198h+src]
.text:0000000000003F6F                 sub     rsp, 8
.text:0000000000003F73                 mov     r8, r12
.text:0000000000003F76                 mov     ecx, 80h
.text:0000000000003F7B                 mov     edx, 1
.text:0000000000003F80                 mov     esi, 7Fh
.text:0000000000003F85                 push    rax
.text:0000000000003F86                 mov     rdi, rbp
.text:0000000000003F89                 xor     eax, eax
.text:0000000000003F8B                 sub     rsp, 10h
.text:0000000000003F8F                 fld     st
.text:0000000000003F91                 fstp    [rsp+1B8h+var_1B8]
.text:0000000000003F94                 fstp    [rsp+1B8h+var_198]
.text:0000000000003F98                 call    ___snprintf_chk
.text:0000000000003F9D                 add     rsp, 20h
.text:0000000000003FA1                 cmp     eax, 7Eh ; '~'
.text:0000000000003FA4                 fld     [rsp+198h+var_198]
.text:0000000000003FA7                 fld     [rsp+198h+var_188]
.text:0000000000003FAB                 ja      loc_4042
.text:0000000000003FB1                 fstp    st(1)
.text:0000000000003FB3                 cmp     ebx, 4
.text:0000000000003FB6                 jnz     short loc_3FC5
.text:0000000000003FB8                 test    r13d, r13d
.text:0000000000003FBB                 jnz     loc_454C
.text:0000000000003FC1                 jmp     short loc_3FC5
.text:0000000000003FC3 ; ---------------------------------------------------------------------------
.text:0000000000003FC3
.text:0000000000003FC3 loc_3FC3:                               ; CODE XREF: process_field+10CC↓j
.text:0000000000003FC3                 fstp    st(1)
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: process_field+1046↑j
.text:0000000000003FC5                                         ; process_field+1051↑j ...
.text:0000000000003FC5                 movzx   ebx, cs:dev_debug
.text:0000000000003FCC                 test    bl, bl
.text:0000000000003FCE                 jnz     loc_43CB
.text:0000000000003FD4                 mov     rsi, cs:suffix
.text:0000000000003FDB                 test    rsi, rsi
.text:0000000000003FDE                 jnz     loc_3A45
.text:0000000000003FE4                 fstp    st
.text:0000000000003FE6                 jmp     loc_3AD7
.text:0000000000003FEB ; ---------------------------------------------------------------------------
.text:0000000000003FEB
.text:0000000000003FEB loc_3FEB:                               ; CODE XREF: process_field+FE8↑j
.text:0000000000003FEB                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:0000000000003FEB                 fxch    st(1)           ; jumptable 0000000000003F58 case 0
.text:0000000000003FED                 fstp    [rsp+198h+var_188]
.text:0000000000003FF1                 lea     rax, aReturningValue+1Dh ; ""
.text:0000000000003FF8                 lea     rbp, [rsp+198h+src]
.text:0000000000004000                 sub     rsp, 8
.text:0000000000004004                 mov     r8, r12
.text:0000000000004007                 mov     ecx, 80h
.text:000000000000400C                 mov     edx, 1
.text:0000000000004011                 push    rax
.text:0000000000004012                 mov     esi, 7Fh
.text:0000000000004017                 xor     eax, eax
.text:0000000000004019                 mov     rdi, rbp
.text:000000000000401C                 sub     rsp, 10h
.text:0000000000004020                 fld     st
.text:0000000000004022                 fstp    [rsp+1B8h+var_1B8]
.text:0000000000004025                 fstp    [rsp+1B8h+var_198]
.text:0000000000004029                 call    ___snprintf_chk
.text:000000000000402E                 add     rsp, 20h
.text:0000000000004032                 cmp     eax, 7Eh ; '~'
.text:0000000000004035                 fld     [rsp+198h+var_198]
.text:0000000000004038                 fld     [rsp+198h+var_188]
.text:000000000000403C                 jbe     short loc_3FC3
.text:000000000000403E                 fstp    st
.text:0000000000004040                 jmp     short loc_4044
.text:0000000000004042 ; ---------------------------------------------------------------------------
.text:0000000000004042
.text:0000000000004042 loc_4042:                               ; CODE XREF: process_field+103B↑j
.text:0000000000004042                 fstp    st
.text:0000000000004044
.text:0000000000004044 loc_4044:                               ; CODE XREF: process_field+10D0↑j
.text:0000000000004044                 fstp    [rsp+198h+var_198]
.text:0000000000004047                 lea     rsi, aFailedToPrepar ; "failed to prepare value '%Lf' for print"...
.text:000000000000404E                 mov     edx, 5          ; category
.text:0000000000004053                 xor     edi, edi        ; domainname
.text:0000000000004055                 call    _dcgettext
.text:000000000000405A                 sub     rsp, 10h
.text:000000000000405E                 mov     rdx, rax        ; format
.text:0000000000004061                 xor     esi, esi        ; errnum
.text:0000000000004063                 mov     edi, 1          ; status
.text:0000000000004068                 xor     eax, eax
.text:000000000000406A                 fld     [rsp+1A8h+var_198]
.text:000000000000406E                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000004071                 call    _error
.text:0000000000004076                 db      2Eh
.text:0000000000004076                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004080
.text:0000000000004080 loc_4080:                               ; CODE XREF: process_field+FE8↑j
.text:0000000000004080                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:0000000000004080                 fxch    st(1)           ; jumptable 0000000000003F58 case 8
.text:0000000000004082                 lea     rax, s+7        ; "Y"
.text:0000000000004089                 jmp     loc_3F63
.text:000000000000408E ; ---------------------------------------------------------------------------
.text:000000000000408E
.text:000000000000408E loc_408E:                               ; CODE XREF: process_field+FE8↑j
.text:000000000000408E                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:000000000000408E                 fxch    st(1)           ; jumptable 0000000000003F58 case 7
.text:0000000000004090                 lea     rax, aKmgtpez+0Ch ; "Z"
.text:0000000000004097                 jmp     loc_3F63
.text:000000000000409C ; ---------------------------------------------------------------------------
.text:000000000000409C
.text:000000000000409C loc_409C:                               ; CODE XREF: process_field+FE8↑j
.text:000000000000409C                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:000000000000409C                 fxch    st(1)           ; jumptable 0000000000003F58 case 6
.text:000000000000409E                 lea     rax, aKmgtpez+0Ah ; "EZ"
.text:00000000000040A5                 jmp     loc_3F63
.text:00000000000040AA ; ---------------------------------------------------------------------------
.text:00000000000040AA
.text:00000000000040AA loc_40AA:                               ; CODE XREF: process_field+FE8↑j
.text:00000000000040AA                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:00000000000040AA                 fxch    st(1)           ; jumptable 0000000000003F58 case 5
.text:00000000000040AC                 lea     rax, aKmgtpez+8 ; "PEZ"
.text:00000000000040B3                 jmp     loc_3F63
.text:00000000000040B8 ; ---------------------------------------------------------------------------
.text:00000000000040B8
.text:00000000000040B8 loc_40B8:                               ; CODE XREF: process_field+FE8↑j
.text:00000000000040B8                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:00000000000040B8                 fxch    st(1)           ; jumptable 0000000000003F58 case 4
.text:00000000000040BA                 lea     rax, aKmgtpez+6 ; "TPEZ"
.text:00000000000040C1                 jmp     loc_3F63
.text:00000000000040C6 ; ---------------------------------------------------------------------------
.text:00000000000040C6
.text:00000000000040C6 loc_40C6:                               ; CODE XREF: process_field+FE8↑j
.text:00000000000040C6                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:00000000000040C6                 fxch    st(1)           ; jumptable 0000000000003F58 case 3
.text:00000000000040C8                 lea     rax, aKmgtpez+4 ; "GTPEZ"
.text:00000000000040CF                 jmp     loc_3F63
.text:00000000000040D4 ; ---------------------------------------------------------------------------
.text:00000000000040D4
.text:00000000000040D4 loc_40D4:                               ; CODE XREF: process_field+FE8↑j
.text:00000000000040D4                                         ; DATA XREF: .rodata:jpt_3F58↓o
.text:00000000000040D4                 fxch    st(1)           ; jumptable 0000000000003F58 case 2
.text:00000000000040D6                 lea     rax, aKmgtpez+2 ; "MGTPEZ"
.text:00000000000040DD                 jmp     loc_3F63
.text:00000000000040E2 ; ---------------------------------------------------------------------------
.text:00000000000040E2
.text:00000000000040E2 loc_40E2:                               ; CODE XREF: process_field+158F↓j
.text:00000000000040E2                                         ; DATA XREF: .rodata:jpt_44FF↓o
.text:00000000000040E2                 fstp    st(3)           ; jumptable 00000000000044FF case 4
.text:00000000000040E4                 fxch    st(1)
.text:00000000000040E6                 fxch    st(2)
.text:00000000000040E8                 jmp     short loc_40F2
.text:00000000000040EA ; ---------------------------------------------------------------------------
.text:00000000000040EA
.text:00000000000040EA loc_40EA:                               ; CODE XREF: process_field+1762↓j
.text:00000000000040EA                                         ; DATA XREF: .rodata:jpt_46D2↓o
.text:00000000000040EA                 fstp    st(1)           ; jumptable 00000000000046D2 case 4
.text:00000000000040EC                 fxch    st(1)
.text:00000000000040EE                 fxch    st(2)
.text:00000000000040F0                 fxch    st(1)
.text:00000000000040F2
.text:00000000000040F2 loc_40F2:                               ; CODE XREF: process_field+1178↑j
.text:00000000000040F2                 fxch    st(1)
.text:00000000000040F4                 fxch    st(2)
.text:00000000000040F6                 fxch    st(1)
.text:00000000000040F8                 mov     edi, 1
.text:00000000000040FD                 jmp     short loc_4102
.text:00000000000040FD ; ---------------------------------------------------------------------------
.text:00000000000040FF                 align 20h
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: process_field+EC3↑j
.text:0000000000004100                                         ; DATA XREF: .rodata:jpt_3E33↓o
.text:0000000000004100                 fstp    st(1)           ; jumptable 0000000000003E33 case 4
.text:0000000000004102
.text:0000000000004102 loc_4102:                               ; CODE XREF: process_field+118D↑j
.text:0000000000004102                                         ; process_field+13F0↓j
.text:0000000000004102                 fldz
.text:0000000000004104                 fucomip st, st(3)
.text:0000000000004106                 ja      loc_4634
.text:000000000000410C                 fxch    st(2)
.text:000000000000410E                 fadd    cs:flt_B1C0
.text:0000000000004114                 fldcw   [rsp+198h+var_14C]
.text:0000000000004118                 fistp   qword ptr [rsp+198h+var_178]
.text:000000000000411C                 fldcw   [rsp+198h+var_14A]
.text:0000000000004120                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000004124                 jmp     loc_3E84
.text:0000000000004129 ; ---------------------------------------------------------------------------
.text:0000000000004129
.text:0000000000004129 loc_4129:                               ; CODE XREF: process_field+158F↓j
.text:0000000000004129                                         ; DATA XREF: .rodata:jpt_44FF↓o
.text:0000000000004129                 fstp    st(3)           ; jumptable 00000000000044FF case 2
.text:000000000000412B                 fxch    st(1)
.text:000000000000412D                 fxch    st(2)
.text:000000000000412F                 jmp     short loc_4139
.text:0000000000004131 ; ---------------------------------------------------------------------------
.text:0000000000004131
.text:0000000000004131 loc_4131:                               ; CODE XREF: process_field+1762↓j
.text:0000000000004131                                         ; DATA XREF: .rodata:jpt_46D2↓o
.text:0000000000004131                 fstp    st(1)           ; jumptable 00000000000046D2 case 2
.text:0000000000004133                 fxch    st(1)
.text:0000000000004135                 fxch    st(2)
.text:0000000000004137                 fxch    st(1)
.text:0000000000004139
.text:0000000000004139 loc_4139:                               ; CODE XREF: process_field+11BF↑j
.text:0000000000004139                 fxch    st(1)
.text:000000000000413B                 fxch    st(2)
.text:000000000000413D                 fxch    st(1)
.text:000000000000413F                 mov     edi, 1
.text:0000000000004144                 jmp     short loc_4152
.text:0000000000004144 ; ---------------------------------------------------------------------------
.text:0000000000004146                 align 10h
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: process_field+EC3↑j
.text:0000000000004150                                         ; DATA XREF: .rodata:jpt_3E33↓o
.text:0000000000004150                 fstp    st(1)           ; jumptable 0000000000003E33 case 2
.text:0000000000004152
.text:0000000000004152 loc_4152:                               ; CODE XREF: process_field+11D4↑j
.text:0000000000004152                                         ; process_field+13D7↓j
.text:0000000000004152                 fldz
.text:0000000000004154                 fucomip st, st(3)
.text:0000000000004156                 jbe     loc_3E56
.text:000000000000415C                 fxch    st(2)
.text:000000000000415E                 fchs
.text:0000000000004160                 fld     st
.text:0000000000004162                 fldcw   [rsp+198h+var_14C]
.text:0000000000004166                 fistp   [rsp+198h+var_158]
.text:000000000000416A                 fldcw   [rsp+198h+var_14A]
.text:000000000000416E
.text:000000000000416E loc_416E:                               ; CODE XREF: process_field+1264↓j
.text:000000000000416E                 mov     rax, [rsp+198h+var_158]
.text:0000000000004173                 xor     ecx, ecx
.text:0000000000004175                 mov     qword ptr [rsp+198h+var_178], rax
.text:000000000000417A                 fild    qword ptr [rsp+198h+var_178]
.text:000000000000417E                 fxch    st(1)
.text:0000000000004180                 fucomip st, st(1)
.text:0000000000004182                 fstp    st
.text:0000000000004184                 setnbe  cl
.text:0000000000004187                 add     rax, rcx
.text:000000000000418A                 neg     rax
.text:000000000000418D                 mov     qword ptr [rsp+198h+var_178], rax
.text:0000000000004192                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000004196                 jmp     loc_3E84
.text:000000000000419B ; ---------------------------------------------------------------------------
.text:000000000000419B
.text:000000000000419B loc_419B:                               ; CODE XREF: process_field+158F↓j
.text:000000000000419B                                         ; DATA XREF: .rodata:jpt_44FF↓o
.text:000000000000419B                 fstp    st(3)           ; jumptable 00000000000044FF case 1
.text:000000000000419D                 fxch    st(1)
.text:000000000000419F                 fxch    st(2)
.text:00000000000041A1                 jmp     short loc_41AB
.text:00000000000041A3 ; ---------------------------------------------------------------------------
.text:00000000000041A3
.text:00000000000041A3 loc_41A3:                               ; CODE XREF: process_field+1762↓j
.text:00000000000041A3                                         ; DATA XREF: .rodata:jpt_46D2↓o
.text:00000000000041A3                 fstp    st(1)           ; jumptable 00000000000046D2 case 1
.text:00000000000041A5                 fxch    st(1)
.text:00000000000041A7                 fxch    st(2)
.text:00000000000041A9                 fxch    st(1)
.text:00000000000041AB
.text:00000000000041AB loc_41AB:                               ; CODE XREF: process_field+1231↑j
.text:00000000000041AB                 fxch    st(2)
.text:00000000000041AD                 fxch    st(1)
.text:00000000000041AF                 mov     edi, 1
.text:00000000000041B4                 jmp     short loc_41C4
.text:00000000000041B4 ; ---------------------------------------------------------------------------
.text:00000000000041B6                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: process_field+EC3↑j
.text:00000000000041C0                                         ; DATA XREF: .rodata:jpt_3E33↓o
.text:00000000000041C0                 fstp    st(1)           ; jumptable 0000000000003E33 case 1
.text:00000000000041C2                 fxch    st(2)
.text:00000000000041C4
.text:00000000000041C4 loc_41C4:                               ; CODE XREF: process_field+1244↑j
.text:00000000000041C4                                         ; process_field+13E0↓j
.text:00000000000041C4                 fchs
.text:00000000000041C6                 fld     st
.text:00000000000041C8                 fldcw   [rsp+198h+var_14C]
.text:00000000000041CC                 fistp   [rsp+198h+var_158]
.text:00000000000041D0                 fldcw   [rsp+198h+var_14A]
.text:00000000000041D4                 jmp     short loc_416E
.text:00000000000041D6 ; ---------------------------------------------------------------------------
.text:00000000000041D6
.text:00000000000041D6 loc_41D6:                               ; CODE XREF: process_field+EC3↑j
.text:00000000000041D6                                         ; DATA XREF: .rodata:jpt_3E33↓o
.text:00000000000041D6                 fxch    st(3)           ; jumptable 0000000000003E33 case 3
.text:00000000000041D8                 jmp     short loc_41DC
.text:00000000000041DA ; ---------------------------------------------------------------------------
.text:00000000000041DA
.text:00000000000041DA loc_41DA:                               ; CODE XREF: process_field+1762↓j
.text:00000000000041DA                                         ; DATA XREF: .rodata:jpt_46D2↓o
.text:00000000000041DA                 fxch    st(3)           ; jumptable 00000000000046D2 case 3
.text:00000000000041DC
.text:00000000000041DC loc_41DC:                               ; CODE XREF: process_field+1268↑j
.text:00000000000041DC                 fldcw   [rsp+198h+var_14C]
.text:00000000000041E0                 fistp   qword ptr [rsp+198h+var_178]
.text:00000000000041E4                 fldcw   [rsp+198h+var_14A]
.text:00000000000041E8                 fild    qword ptr [rsp+198h+var_178]
.text:00000000000041EC                 faddp   st(3), st
.text:00000000000041EE
.text:00000000000041EE loc_41EE:                               ; CODE XREF: process_field+15D7↓j
.text:00000000000041EE                                         ; process_field+17CB↓j
.text:00000000000041EE                 mov     eax, edi
.text:00000000000041F0                 sub     eax, 1
.text:00000000000041F3                 jz      short loc_4211
.text:00000000000041F5
.text:00000000000041F5 loc_41F5:                               ; CODE XREF: process_field+17F7↓j
.text:00000000000041F5                 fld     st
.text:00000000000041F7
.text:00000000000041F7 loc_41F7:                               ; CODE XREF: process_field+128C↓j
.text:00000000000041F7                 sub     eax, 1
.text:00000000000041FA                 fmul    st, st(1)
.text:00000000000041FC                 jnz     short loc_41F7
.text:00000000000041FE                 fstp    st(1)
.text:0000000000004200                 jmp     loc_3E90
.text:0000000000004205 ; ---------------------------------------------------------------------------
.text:0000000000004205
.text:0000000000004205 def_46D2:                               ; CODE XREF: process_field+174E↓j
.text:0000000000004205                 fstp    st              ; jumptable 00000000000046D2 default case
.text:0000000000004207                 fstp    st(2)
.text:0000000000004209                 fxch    st(1)
.text:000000000000420B                 fldz
.text:000000000000420D                 fxch    st(2)
.text:000000000000420F                 fxch    st(1)
.text:0000000000004211
.text:0000000000004211 loc_4211:                               ; CODE XREF: process_field+1283↑j
.text:0000000000004211                 jmp     loc_3E90
.text:0000000000004211 ; ---------------------------------------------------------------------------
.text:0000000000004216                 align 20h
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: process_field+60D↑j
.text:0000000000004220                 lea     r12, [rsp+198h+var_108]
.text:0000000000004228                 lea     rbp, [r12+1]
.text:000000000000422D                 jmp     loc_3598
.text:0000000000004232 ; ---------------------------------------------------------------------------
.text:0000000000004232
.text:0000000000004232 loc_4232:                               ; CODE XREF: process_field+475↑j
.text:0000000000004232                 mov     ebx, 5
.text:0000000000004237                 lea     r13, aInvalidSuffixI ; "invalid suffix in input: %s"
.text:000000000000423E                 jmp     loc_3210
.text:0000000000004243 ; ---------------------------------------------------------------------------
.text:0000000000004243
.text:0000000000004243 loc_4243:                               ; CODE XREF: process_field+DB0↑j
.text:0000000000004243                                         ; process_field+DBE↑j
.text:0000000000004243                 fld     st
.text:0000000000004245                 xor     r13d, r13d
.text:0000000000004248                 jmp     loc_3D55
.text:000000000000424D ; ---------------------------------------------------------------------------
.text:000000000000424D
.text:000000000000424D loc_424D:                               ; CODE XREF: process_field+8B0↑j
.text:000000000000424D                 lea     rsi, aValueTooLargeT_1 ; "value too large to be printed: '%Lg' (c"...
.text:0000000000004254                 xor     edi, edi        ; domainname
.text:0000000000004256                 call    _dcgettext
.text:000000000000425B                 fld     [rsp+198h+var_198]
.text:000000000000425E                 mov     rdx, rax        ; format
.text:0000000000004261                 sub     rsp, 10h
.text:0000000000004265                 xor     eax, eax
.text:0000000000004267                 xor     esi, esi        ; errnum
.text:0000000000004269                 mov     edi, ebx        ; status
.text:000000000000426B                 fstp    [rsp+1A8h+var_1A8]
.text:000000000000426E                 call    _error
.text:0000000000004273                 pop     rax
.text:0000000000004274                 pop     rdx
.text:0000000000004275                 jmp     loc_32A0
.text:000000000000427A ; ---------------------------------------------------------------------------
.text:000000000000427A
.text:000000000000427A loc_427A:                               ; CODE XREF: process_field+641↑j
.text:000000000000427A                 fstp    [rsp+198h+var_188]
.text:000000000000427E                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004285                 lea     rdi, aDoubleToHuman ; "double_to_human:\n"
.text:000000000000428C                 mov     edx, 11h        ; n
.text:0000000000004291                 mov     esi, 1          ; size
.text:0000000000004296                 call    _fwrite
.text:000000000000429B                 movzx   edx, cs:dev_debug
.text:00000000000042A2                 fld     [rsp+198h+var_188]
.text:00000000000042A6                 jmp     loc_35B7
.text:00000000000042AB ; ---------------------------------------------------------------------------
.text:00000000000042AB
.text:00000000000042AB loc_42AB:                               ; CODE XREF: process_field+632↑j
.text:00000000000042AB                 fstp    [rsp+198h+var_188]
.text:00000000000042AF                 lea     r8, a0Ld        ; "0%ld"
.text:00000000000042B6                 mov     rdi, rbp
.text:00000000000042B9                 mov     ecx, 3Fh ; '?'
.text:00000000000042BE                 mov     edx, 1
.text:00000000000042C3                 mov     esi, 3Eh ; '>'
.text:00000000000042C8                 xor     eax, eax
.text:00000000000042CA                 call    ___snprintf_chk
.text:00000000000042CF                 cdqe
.text:00000000000042D1                 add     rbp, rax
.text:00000000000042D4                 fld     [rsp+198h+var_188]
.text:00000000000042D8                 jmp     loc_35A8
.text:00000000000042DD ; ---------------------------------------------------------------------------
.text:00000000000042DD
.text:00000000000042DD loc_42DD:                               ; CODE XREF: process_field+153E↓j
.text:00000000000042DD                 fstp    st
.text:00000000000042DF                 fstp    st
.text:00000000000042E1
.text:00000000000042E1 loc_42E1:                               ; CODE XREF: process_field+E5A↑j
.text:00000000000042E1                 fld     cs:tbyte_B200
.text:00000000000042E7                 fnstcw  [rsp+198h+var_14A]
.text:00000000000042EB                 movzx   eax, [rsp+198h+var_14A]
.text:00000000000042F0                 or      ah, 0Ch
.text:00000000000042F3                 cmp     r15d, 4         ; switch 5 cases
.text:00000000000042F7                 mov     [rsp+198h+var_14C], ax
.text:00000000000042FC                 fld     st(2)
.text:00000000000042FE                 fdiv    st, st(1)
.text:0000000000004300                 fldcw   [rsp+198h+var_14C]
.text:0000000000004304                 fistp   qword ptr [rsp+198h+var_178]
.text:0000000000004308                 fldcw   [rsp+198h+var_14A]
.text:000000000000430C                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000004310                 fmulp   st(1), st
.text:0000000000004312                 fsub    st(2), st
.text:0000000000004314                 ja      def_4328        ; jumptable 0000000000004328 default case
.text:000000000000431A                 lea     rcx, jpt_4328
.text:0000000000004321                 movsxd  rax, ds:(jpt_4328 - 0B088h)[rcx+r15*4]
.text:0000000000004325                 add     rax, rcx
.text:0000000000004328                 jmp     rax             ; switch jump
.text:000000000000432A ; ---------------------------------------------------------------------------
.text:000000000000432A
.text:000000000000432A loc_432A:                               ; CODE XREF: process_field+13B8↑j
.text:000000000000432A                                         ; DATA XREF: .rodata:jpt_4328↓o
.text:000000000000432A                 fxch    st(2)           ; jumptable 0000000000004328 case 3
.text:000000000000432C                 fldcw   [rsp+198h+var_14C]
.text:0000000000004330                 fistp   qword ptr [rsp+198h+var_178]
.text:0000000000004334                 fldcw   [rsp+198h+var_14A]
.text:0000000000004338                 fild    qword ptr [rsp+198h+var_178]
.text:000000000000433C                 faddp   st(2), st
.text:000000000000433E                 fld1
.text:0000000000004340                 jmp     loc_3E90
.text:0000000000004345 ; ---------------------------------------------------------------------------
.text:0000000000004345
.text:0000000000004345 loc_4345:                               ; CODE XREF: process_field+13B8↑j
.text:0000000000004345                                         ; DATA XREF: .rodata:jpt_4328↓o
.text:0000000000004345                 xor     edi, edi        ; jumptable 0000000000004328 case 2
.text:0000000000004347                 jmp     loc_4152
.text:000000000000434C ; ---------------------------------------------------------------------------
.text:000000000000434C
.text:000000000000434C loc_434C:                               ; CODE XREF: process_field+13B8↑j
.text:000000000000434C                                         ; DATA XREF: .rodata:jpt_4328↓o
.text:000000000000434C                 fxch    st(2)           ; jumptable 0000000000004328 case 1
.text:000000000000434E                 xor     edi, edi
.text:0000000000004350                 jmp     loc_41C4
.text:0000000000004355 ; ---------------------------------------------------------------------------
.text:0000000000004355
.text:0000000000004355 loc_4355:                               ; CODE XREF: process_field+13B8↑j
.text:0000000000004355                                         ; DATA XREF: .rodata:jpt_4328↓o
.text:0000000000004355                 fxch    st(2)           ; jumptable 0000000000004328 case 0
.text:0000000000004357                 xor     edi, edi
.text:0000000000004359                 jmp     loc_3E58
.text:000000000000435E ; ---------------------------------------------------------------------------
.text:000000000000435E
.text:000000000000435E loc_435E:                               ; CODE XREF: process_field+13B8↑j
.text:000000000000435E                                         ; DATA XREF: .rodata:jpt_4328↓o
.text:000000000000435E                 xor     edi, edi        ; jumptable 0000000000004328 case 4
.text:0000000000004360                 jmp     loc_4102
.text:0000000000004365 ; ---------------------------------------------------------------------------
.text:0000000000004365
.text:0000000000004365 loc_4365:                               ; CODE XREF: process_field+D88↑j
.text:0000000000004365                 movsd   xmm4, cs:qword_B1D0
.text:000000000000436D                 mov     dword ptr [rsp+198h+var_178], 3E8h
.text:0000000000004375                 movsd   qword ptr [rsp+198h+var_188], xmm4
.text:000000000000437B                 jmp     loc_3D14
.text:0000000000004380 ; ---------------------------------------------------------------------------
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: process_field+655↑j
.text:0000000000004380                 fld     cs:tbyte_B200
.text:0000000000004386                 fnstcw  [rsp+198h+var_14A]
.text:000000000000438A                 movzx   eax, [rsp+198h+var_14A]
.text:000000000000438F                 or      ah, 0Ch
.text:0000000000004392                 cmp     r15d, 4         ; switch 5 cases
.text:0000000000004396                 mov     [rsp+198h+var_14C], ax
.text:000000000000439B                 fld     st(1)
.text:000000000000439D                 fdiv    st, st(1)
.text:000000000000439F                 fldcw   [rsp+198h+var_14C]
.text:00000000000043A3                 fistp   qword ptr [rsp+198h+var_188]
.text:00000000000043A7                 fldcw   [rsp+198h+var_14A]
.text:00000000000043AB                 fild    qword ptr [rsp+198h+var_188]
.text:00000000000043AF                 fmulp   st(1), st
.text:00000000000043B1                 fld     st(1)
.text:00000000000043B3                 fsub    st, st(1)
.text:00000000000043B5                 ja      def_43C9        ; jumptable 00000000000043C9 default case
.text:00000000000043BB                 lea     rcx, jpt_43C9
.text:00000000000043C2                 movsxd  rax, ds:(jpt_43C9 - 0B09Ch)[rcx+r15*4]
.text:00000000000043C6                 add     rax, rcx
.text:00000000000043C9                 jmp     rax             ; switch jump
.text:00000000000043CB ; ---------------------------------------------------------------------------
.text:00000000000043CB
.text:00000000000043CB loc_43CB:                               ; CODE XREF: process_field+105E↑j
.text:00000000000043CB                 fstp    [rsp+198h+var_198]
.text:00000000000043CE                 mov     rdi, rbp
.text:00000000000043D1                 call    quote
.text:00000000000043D6                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000043DD                 lea     rdx, aReturningValue_0 ; "  returning value: %s\n"
.text:00000000000043E4                 mov     rcx, rax
.text:00000000000043E7                 mov     esi, 1
.text:00000000000043EC                 xor     eax, eax
.text:00000000000043EE                 call    ___fprintf_chk
.text:00000000000043F3                 movzx   ebx, cs:dev_debug
.text:00000000000043FA                 fld     [rsp+198h+var_198]
.text:00000000000043FD                 jmp     loc_3A39
.text:0000000000004402 ; ---------------------------------------------------------------------------
.text:0000000000004402
.text:0000000000004402 loc_4402:                               ; CODE XREF: process_field+F26↑j
.text:0000000000004402                 fld     st(1)
.text:0000000000004404                 fchs
.text:0000000000004406                 fucomi  st, st(1)
.text:0000000000004408                 jnb     loc_3EA4
.text:000000000000440E                 fstp    st(1)
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: process_field+1597↓j
.text:0000000000004410                                         ; process_field+159F↓j
.text:0000000000004410                 fld     cs:flt_B1B4
.text:0000000000004416                 test    r13d, r13d
.text:0000000000004419                 setnz   al
.text:000000000000441C                 xor     r9d, r9d
.text:000000000000441F                 fucomip st, st(1)
.text:0000000000004421                 fstp    st
.text:0000000000004423                 setnbe  r9b
.text:0000000000004427                 and     r9d, eax
.text:000000000000442A                 jmp     loc_3EC9
.text:000000000000442F ; ---------------------------------------------------------------------------
.text:000000000000442F
.text:000000000000442F loc_442F:                               ; CODE XREF: process_field+BBA↑j
.text:000000000000442F                 mov     qword ptr [rsp+198h+var_118], rsi
.text:0000000000004437                 mov     r8d, cs:padding_alignment
.text:000000000000443E                 lea     rcx, [rsp+198h+var_118]
.text:0000000000004446                 mov     rsi, cs:padding_buffer ; dest
.text:000000000000444D                 mov     r9d, 2
.text:0000000000004453                 mov     rdi, rbp        ; s
.text:0000000000004456                 call    mbsalign
.text:000000000000445B                 cmp     cs:dev_debug, 0
.text:0000000000004462                 jz      loc_3B4D
.text:0000000000004468                 mov     rdi, cs:padding_buffer
.text:000000000000446F                 call    quote
.text:0000000000004474                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000447B                 lea     rdx, aAfterPaddingS ; "  After padding: %s\n"
.text:0000000000004482                 mov     rcx, rax
.text:0000000000004485                 mov     esi, 1
.text:000000000000448A                 xor     eax, eax
.text:000000000000448C                 call    ___fprintf_chk
.text:0000000000004491                 jmp     loc_3B4D
.text:0000000000004496 ; ---------------------------------------------------------------------------
.text:0000000000004496
.text:0000000000004496 loc_4496:                               ; CODE XREF: process_field+E44↑j
.text:0000000000004496                 fldz
.text:0000000000004498                 fld     st(2)
.text:000000000000449A                 fxch    st(1)
.text:000000000000449C                 fucomip st, st(3)
.text:000000000000449E                 jbe     short loc_44A2
.text:00000000000044A0                 fchs
.text:00000000000044A2
.text:00000000000044A2 loc_44A2:                               ; CODE XREF: process_field+152E↑j
.text:00000000000044A2                 fld     cs:flt_B1B4
.text:00000000000044A8                 fld     st
.text:00000000000044AA                 fucomi  st, st(2)
.text:00000000000044AC                 fstp    st(2)
.text:00000000000044AE                 jbe     loc_42DD
.text:00000000000044B4                 fxch    st(3)
.text:00000000000044B6                 fmulp   st(1), st
.text:00000000000044B8                 fnstcw  [rsp+198h+var_14A]
.text:00000000000044BC                 movzx   eax, [rsp+198h+var_14A]
.text:00000000000044C1                 fld     cs:tbyte_B200
.text:00000000000044C7                 or      ah, 0Ch
.text:00000000000044CA                 cmp     r15d, 4         ; switch 5 cases
.text:00000000000044CE                 mov     [rsp+198h+var_14C], ax
.text:00000000000044D3                 fld     st(1)
.text:00000000000044D5                 fdiv    st, st(1)
.text:00000000000044D7                 fldcw   [rsp+198h+var_14C]
.text:00000000000044DB                 fistp   qword ptr [rsp+198h+var_178]
.text:00000000000044DF                 fldcw   [rsp+198h+var_14A]
.text:00000000000044E3                 fild    qword ptr [rsp+198h+var_178]
.text:00000000000044E7                 fmulp   st(1), st
.text:00000000000044E9                 fsub    st(1), st
.text:00000000000044EB                 ja      def_44FF        ; jumptable 00000000000044FF default case
.text:00000000000044F1                 lea     rcx, jpt_44FF
.text:00000000000044F8                 movsxd  rax, ds:(jpt_44FF - 0B0B0h)[rcx+r15*4]
.text:00000000000044FC                 add     rax, rcx
.text:00000000000044FF                 jmp     rax             ; switch jump
.text:0000000000004501 ; ---------------------------------------------------------------------------
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: process_field+F4A↑j
.text:0000000000004501                                         ; process_field+F50↑j
.text:0000000000004501                 fldz
.text:0000000000004503                 fucomip st, st(1)
.text:0000000000004505                 fld     st
.text:0000000000004507                 jbe     loc_4410
.text:000000000000450D                 fchs
.text:000000000000450F                 jmp     loc_4410
.text:000000000000450F ; ---------------------------------------------------------------------------
.text:0000000000004514                 align 8
.text:0000000000004518
.text:0000000000004518 loc_4518:                               ; CODE XREF: process_field+9AA↑j
.text:0000000000004518                 lea     rax, [r9+2]
.text:000000000000451C                 test    dl, dl
.text:000000000000451E                 mov     [rsp+198h+s1], rax
.text:0000000000004523                 jnz     short loc_4583
.text:0000000000004525                 fld     cs:flt_B1B8
.text:000000000000452B                 mov     r15d, 400h
.text:0000000000004531                 jmp     loc_344A
.text:0000000000004536 ; ---------------------------------------------------------------------------
.text:0000000000004536
.text:0000000000004536 loc_4536:                               ; CODE XREF: process_field+986↑j
.text:0000000000004536                 faddp   st(1), st
.text:0000000000004538                 fstp    [rsp+198h+var_128]
.text:000000000000453C                 jmp     loc_3902
.text:0000000000004541 ; ---------------------------------------------------------------------------
.text:0000000000004541
.text:0000000000004541 loc_4541:                               ; CODE XREF: process_field+F18↑j
.text:0000000000004541                 fld     cs:flt_B1B4
.text:0000000000004547                 jmp     loc_41EE
.text:000000000000454C ; ---------------------------------------------------------------------------
.text:000000000000454C
.text:000000000000454C loc_454C:                               ; CODE XREF: process_field+104B↑j
.text:000000000000454C                 fstp    [rsp+198h+var_198]
.text:000000000000454F                 cdqe
.text:0000000000004551                 mov     edx, 7Fh
.text:0000000000004556                 lea     rsi, aIecI+4    ; "i"
.text:000000000000455D                 sub     rdx, rax
.text:0000000000004560                 mov     ecx, 80h
.text:0000000000004565                 mov     rdi, rbp
.text:0000000000004568                 call    ___strncat_chk
.text:000000000000456D                 fld     [rsp+198h+var_198]
.text:0000000000004570                 jmp     loc_3FC5
.text:0000000000004575 ; ---------------------------------------------------------------------------
.text:0000000000004575
.text:0000000000004575 def_3F58:                               ; CODE XREF: process_field+FD1↑j
.text:0000000000004575                 fxch    st(1)           ; jumptable 0000000000003F58 default case
.text:0000000000004577                 lea     rax, aError_0   ; "(error)"
.text:000000000000457E                 jmp     loc_3F63
.text:0000000000004583 ; ---------------------------------------------------------------------------
.text:0000000000004583
.text:0000000000004583 loc_4583:                               ; CODE XREF: process_field+15B3↑j
.text:0000000000004583                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000458A                 lea     rdx, aAutoScalingFou ; "  Auto-scaling, found 'i', switching to"...
.text:0000000000004591                 mov     ecx, 400h
.text:0000000000004596                 mov     esi, 1
.text:000000000000459B                 xor     eax, eax
.text:000000000000459D                 mov     dword ptr [rsp+198h+var_188], r8d
.text:00000000000045A2                 mov     r15d, 400h
.text:00000000000045A8                 call    ___fprintf_chk
.text:00000000000045AD                 movzx   edx, cs:dev_debug
.text:00000000000045B4                 fld     cs:flt_B1B8
.text:00000000000045BA                 mov     r8d, dword ptr [rsp+198h+var_188]
.text:00000000000045BF                 jmp     loc_344A
.text:00000000000045C4 ; ---------------------------------------------------------------------------
.text:00000000000045C4
.text:00000000000045C4 loc_45C4:                               ; CODE XREF: process_field+C9A↑j
.text:00000000000045C4                 fsub    cs:flt_B1C0
.text:00000000000045CA                 fldcw   [rsp+198h+var_14C]
.text:00000000000045CE                 fistp   qword ptr [rsp+198h+var_198]
.text:00000000000045D1                 fldcw   [rsp+198h+var_14A]
.text:00000000000045D5                 fild    qword ptr [rsp+198h+var_198]
.text:00000000000045D8                 jmp     loc_395B
.text:00000000000045DD ; ---------------------------------------------------------------------------
.text:00000000000045DD
.text:00000000000045DD loc_45DD:                               ; CODE XREF: process_field+661↑j
.text:00000000000045DD                 fld     cs:flt_B1B4
.text:00000000000045E3                 fnstcw  [rsp+198h+var_14A]
.text:00000000000045E7                 movzx   eax, [rsp+198h+var_14A]
.text:00000000000045EC                 fld     st(1)
.text:00000000000045EE                 fmul    st, st(1)
.text:00000000000045F0                 or      ah, 0Ch
.text:00000000000045F3                 cmp     r15d, 4         ; switch 5 cases
.text:00000000000045F7                 mov     [rsp+198h+var_14C], ax
.text:00000000000045FC                 fld     cs:tbyte_B200
.text:0000000000004602                 fld     st(1)
.text:0000000000004604                 fdiv    st, st(1)
.text:0000000000004606                 fldcw   [rsp+198h+var_14C]
.text:000000000000460A                 fistp   qword ptr [rsp+198h+var_188]
.text:000000000000460E                 fldcw   [rsp+198h+var_14A]
.text:0000000000004612                 fild    qword ptr [rsp+198h+var_188]
.text:0000000000004616                 fmulp   st(1), st
.text:0000000000004618                 fsub    st(1), st
.text:000000000000461A                 ja      def_4632        ; jumptable 0000000000004632 default case
.text:0000000000004620                 fstp    st(2)
.text:0000000000004622                 fxch    st(1)
.text:0000000000004624                 lea     rcx, jpt_4632
.text:000000000000462B                 movsxd  rax, ds:(jpt_4632 - 0B0C4h)[rcx+r15*4]
.text:000000000000462F                 add     rax, rcx
.text:0000000000004632                 jmp     rax             ; switch jump
.text:0000000000004634 ; ---------------------------------------------------------------------------
.text:0000000000004634
.text:0000000000004634 loc_4634:                               ; CODE XREF: process_field+1196↑j
.text:0000000000004634                 fxch    st(2)
.text:0000000000004636                 fsub    cs:flt_B1C0
.text:000000000000463C                 fldcw   [rsp+198h+var_14C]
.text:0000000000004640                 fistp   qword ptr [rsp+198h+var_178]
.text:0000000000004644                 fldcw   [rsp+198h+var_14A]
.text:0000000000004648                 fild    qword ptr [rsp+198h+var_178]
.text:000000000000464C                 jmp     loc_3E84
.text:0000000000004651 ; ---------------------------------------------------------------------------
.text:0000000000004651
.text:0000000000004651 loc_4651:                               ; CODE XREF: process_field+95B↑j
.text:0000000000004651                 fdiv    cs:flt_B1B4
.text:0000000000004657                 jmp     loc_38E4
.text:000000000000465C ; ---------------------------------------------------------------------------
.text:000000000000465C
.text:000000000000465C loc_465C:                               ; CODE XREF: process_field+7F↑j
.text:000000000000465C                 call    ___stack_chk_fail
.text:0000000000004661 ; ---------------------------------------------------------------------------
.text:0000000000004661
.text:0000000000004661 loc_4661:                               ; CODE XREF: process_field+4DD↑j
.text:0000000000004661                 fstp    st
.text:0000000000004663                 xor     r14d, r14d
.text:0000000000004666                 fld1
.text:0000000000004668                 jmp     loc_3656
.text:000000000000466D ; ---------------------------------------------------------------------------
.text:000000000000466D
.text:000000000000466D def_43C9:                               ; CODE XREF: process_field+1445↑j
.text:000000000000466D                 fstp    st              ; jumptable 00000000000043C9 default case
.text:000000000000466F                 fstp    st
.text:0000000000004671                 fldz
.text:0000000000004673                 jmp     loc_397F
.text:0000000000004678 ; ---------------------------------------------------------------------------
.text:0000000000004678
.text:0000000000004678 def_4328:                               ; CODE XREF: process_field+13A4↑j
.text:0000000000004678                 fstp    st              ; jumptable 0000000000004328 default case
.text:000000000000467A                 fstp    st(1)
.text:000000000000467C                 fldz
.text:000000000000467E                 jmp     loc_3E9E
.text:0000000000004683 ; ---------------------------------------------------------------------------
.text:0000000000004683
.text:0000000000004683 loc_4683:                               ; CODE XREF: process_field+E63↑j
.text:0000000000004683                 fld     cs:flt_B1B4
.text:0000000000004689                 fnstcw  [rsp+198h+var_14A]
.text:000000000000468D                 movzx   eax, [rsp+198h+var_14A]
.text:0000000000004692                 fmul    st(2), st
.text:0000000000004694                 or      ah, 0Ch
.text:0000000000004697                 cmp     r15d, 4         ; switch 5 cases
.text:000000000000469B                 mov     [rsp+198h+var_14C], ax
.text:00000000000046A0                 fld     cs:tbyte_B200
.text:00000000000046A6                 fld     st(3)
.text:00000000000046A8                 fdiv    st, st(1)
.text:00000000000046AA                 fldcw   [rsp+198h+var_14C]
.text:00000000000046AE                 fistp   qword ptr [rsp+198h+var_178]
.text:00000000000046B2                 fldcw   [rsp+198h+var_14A]
.text:00000000000046B6                 fild    qword ptr [rsp+198h+var_178]
.text:00000000000046BA                 fmulp   st(1), st
.text:00000000000046BC                 fsub    st(3), st
.text:00000000000046BE                 ja      def_46D2        ; jumptable 00000000000046D2 default case
.text:00000000000046C4                 lea     rcx, jpt_46D2
.text:00000000000046CB                 movsxd  rax, ds:(jpt_46D2 - 0B0D8h)[rcx+r15*4]
.text:00000000000046CF                 add     rax, rcx
.text:00000000000046D2                 jmp     rax             ; switch jump
.text:00000000000046D4 ; ---------------------------------------------------------------------------
.text:00000000000046D4
.text:00000000000046D4 loc_46D4:                               ; CODE XREF: process_field+4BB↑j
.text:00000000000046D4                 xor     r14d, r14d
.text:00000000000046D7                 mov     ebx, 6
.text:00000000000046DC                 lea     r13, aMissingISuffix ; "missing 'i' suffix in input: %s (e.g Ki"...
.text:00000000000046E3                 jmp     loc_3210
.text:00000000000046E8 ; ---------------------------------------------------------------------------
.text:00000000000046E8
.text:00000000000046E8 loc_46E8:                               ; CODE XREF: process_field+AB6↑j
.text:00000000000046E8                 fstp    [rsp+198h+var_198]
.text:00000000000046EB                 lea     rsi, aFailedToPrepar ; "failed to prepare value '%Lf' for print"...
.text:00000000000046F2                 mov     edx, 5          ; category
.text:00000000000046F7                 xor     edi, edi        ; domainname
.text:00000000000046F9                 call    _dcgettext
.text:00000000000046FE                 sub     rsp, 10h
.text:0000000000004702                 mov     rdx, rax        ; format
.text:0000000000004705                 xor     esi, esi        ; errnum
.text:0000000000004707                 mov     edi, 1          ; status
.text:000000000000470C                 xor     eax, eax
.text:000000000000470E                 fld     [rsp+1A8h+var_198]
.text:0000000000004712                 fstp    [rsp+1A8h+var_1A8]
.text:0000000000004715                 call    _error
.text:000000000000471A
.text:000000000000471A loc_471A:                               ; CODE XREF: process_field+773↑j
.text:000000000000471A                 xor     ebx, ebx
.text:000000000000471C                 jmp     loc_3248
.text:0000000000004721 ; ---------------------------------------------------------------------------
.text:0000000000004721
.text:0000000000004721 def_3635:                               ; CODE XREF: process_field+6AD↑j
.text:0000000000004721                 fstp    st              ; jumptable 0000000000003635 default case
.text:0000000000004723                 fstp    st
.text:0000000000004725                 fldz
.text:0000000000004727                 fxch    st(1)
.text:0000000000004729                 jmp     loc_3972
.text:000000000000472E ; ---------------------------------------------------------------------------
.text:000000000000472E
.text:000000000000472E def_44FF:                               ; CODE XREF: process_field+157B↑j
.text:000000000000472E                 fstp    st              ; jumptable 00000000000044FF default case
.text:0000000000004730                 fstp    st
.text:0000000000004732                 fldz
.text:0000000000004734                 fxch    st(2)
.text:0000000000004736                 mov     edi, 1
.text:000000000000473B                 jmp     loc_41EE
.text:0000000000004740 ; ---------------------------------------------------------------------------
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: process_field+158F↑j
.text:0000000000004740                                         ; DATA XREF: .rodata:jpt_44FF↓o
.text:0000000000004740                 fxch    st(1)           ; jumptable 00000000000044FF case 3
.text:0000000000004742                 fldcw   [rsp+198h+var_14C]
.text:0000000000004746                 fistp   qword ptr [rsp+198h+var_178]
.text:000000000000474A                 fldcw   [rsp+198h+var_14A]
.text:000000000000474E                 fild    qword ptr [rsp+198h+var_178]
.text:0000000000004752                 faddp   st(1), st
.text:0000000000004754                 fxch    st(2)
.text:0000000000004756                 jmp     loc_3E90
.text:000000000000475B ; ---------------------------------------------------------------------------
.text:000000000000475B
.text:000000000000475B def_3E33:                               ; CODE XREF: process_field+EAF↑j
.text:000000000000475B                 fstp    st              ; jumptable 0000000000003E33 default case
.text:000000000000475D                 fstp    st(2)
.text:000000000000475F                 fxch    st(1)
.text:0000000000004761                 fldz
.text:0000000000004763                 fxch    st(2)
.text:0000000000004765                 fxch    st(1)
.text:0000000000004767                 jmp     loc_41F5
.text:0000000000004767 ; } // starts at 2F70
.text:0000000000004767 process_field   endp ; sp-analysis failed
.text:0000000000004767
.text:0000000000004767 ; ---------------------------------------------------------------------------
.text:000000000000476C                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770 process_line    proc near               ; CODE XREF: main+7C8↑p
.text:0000000000004770                                         ; main+88B↑p
.text:0000000000004770
.text:0000000000004770 s               = qword ptr -40h
.text:0000000000004770
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 push    r15
.text:0000000000004772                 push    r14
.text:0000000000004774                 mov     r14d, esi
.text:0000000000004777                 push    r13
.text:0000000000004779                 push    r12
.text:000000000000477B                 xor     r13d, r13d
.text:000000000000477E                 push    rbp
.text:000000000000477F                 push    rbx
.text:0000000000004780                 mov     r12d, 1
.text:0000000000004786                 xor     ebp, ebp
.text:0000000000004788                 sub     rsp, 18h
.text:000000000000478C                 mov     eax, cs:delimiter
.text:0000000000004792                 nop     word ptr [rax+rax+00h]
.text:0000000000004798
.text:0000000000004798 loc_4798:                               ; CODE XREF: process_line+175↓j
.text:0000000000004798                 add     rbp, 1
.text:000000000000479C                 cmp     eax, 80h
.text:00000000000047A1                 movzx   r15d, byte ptr [rdi]
.text:00000000000047A5                 jz      loc_4830
.text:00000000000047AB                 movsx   edx, r15b
.text:00000000000047AF                 cmp     edx, eax
.text:00000000000047B1                 jz      loc_4910
.text:00000000000047B7                 test    r15b, r15b
.text:00000000000047BA                 jz      short loc_47DB
.text:00000000000047BC                 mov     rbx, rdi
.text:00000000000047BF                 jmp     short loc_47D0
.text:00000000000047BF ; ---------------------------------------------------------------------------
.text:00000000000047C1                 align 8
.text:00000000000047C8
.text:00000000000047C8 loc_47C8:                               ; CODE XREF: process_line+69↓j
.text:00000000000047C8                 cmp     edx, eax
.text:00000000000047CA                 jz      loc_48A1
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: process_line+4F↑j
.text:00000000000047D0                 add     rbx, 1
.text:00000000000047D4                 movsx   edx, byte ptr [rbx]
.text:00000000000047D7                 test    dl, dl
.text:00000000000047D9                 jnz     short loc_47C8
.text:00000000000047DB
.text:00000000000047DB loc_47DB:                               ; CODE XREF: process_line+4A↑j
.text:00000000000047DB                                         ; process_line+C3↓j ...
.text:00000000000047DB                 mov     rsi, rbp
.text:00000000000047DE                 call    process_field
.text:00000000000047E3                 test    al, al
.text:00000000000047E5                 mov     eax, 0
.text:00000000000047EA                 cmovz   r12d, eax
.text:00000000000047EE                 test    r14b, r14b
.text:00000000000047F1                 jz      short loc_4819
.text:00000000000047F3                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000047FA                 movzx   edx, cs:line_delim
.text:0000000000004801                 mov     rax, [rdi+28h]
.text:0000000000004805                 cmp     rax, [rdi+30h]
.text:0000000000004809                 jnb     loc_4929
.text:000000000000480F                 lea     rcx, [rax+1]
.text:0000000000004813                 mov     [rdi+28h], rcx
.text:0000000000004817                 mov     [rax], dl
.text:0000000000004819
.text:0000000000004819 loc_4819:                               ; CODE XREF: process_line+81↑j
.text:0000000000004819                                         ; process_line+1C1↓j
.text:0000000000004819                 add     rsp, 18h
.text:000000000000481D                 mov     eax, r12d
.text:0000000000004820                 pop     rbx
.text:0000000000004821                 pop     rbp
.text:0000000000004822                 pop     r12
.text:0000000000004824                 pop     r13
.text:0000000000004826                 pop     r14
.text:0000000000004828                 pop     r15
.text:000000000000482A                 retn
.text:000000000000482A ; ---------------------------------------------------------------------------
.text:000000000000482B                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: process_line+35↑j
.text:0000000000004830                 test    r15b, r15b
.text:0000000000004833                 jz      short loc_47DB
.text:0000000000004835                 mov     [rsp+48h+s], rdi
.text:000000000000483A                 call    ___ctype_b_loc
.text:000000000000483F                 mov     rdi, [rsp+48h+s] ; s
.text:0000000000004844                 mov     rdx, [rax]
.text:0000000000004847                 mov     rbx, rdi
.text:000000000000484A                 nop     word ptr [rax+rax+00h]
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: process_line+18B↓j
.text:0000000000004850                 movzx   eax, r15b
.text:0000000000004854                 test    byte ptr [rdx+rax*2], 1
.text:0000000000004858                 jnz     loc_48F0
.text:000000000000485E                 cmp     r15b, 0Ah
.text:0000000000004862                 jz      loc_48F0
.text:0000000000004868                 movzx   eax, byte ptr [rbx]
.text:000000000000486B                 test    al, al
.text:000000000000486D                 jnz     short loc_488B
.text:000000000000486F                 jmp     loc_47DB
.text:000000000000486F ; ---------------------------------------------------------------------------
.text:0000000000004874                 align 8
.text:0000000000004878
.text:0000000000004878 loc_4878:                               ; CODE XREF: process_line+122↓j
.text:0000000000004878                 cmp     al, 0Ah
.text:000000000000487A                 jz      short loc_4894
.text:000000000000487C                 add     rbx, 1
.text:0000000000004880                 movzx   eax, byte ptr [rbx]
.text:0000000000004883                 test    al, al
.text:0000000000004885                 jz      loc_47DB
.text:000000000000488B
.text:000000000000488B loc_488B:                               ; CODE XREF: process_line+FD↑j
.text:000000000000488B                 movzx   ecx, al
.text:000000000000488E                 test    byte ptr [rdx+rcx*2], 1
.text:0000000000004892                 jz      short loc_4878
.text:0000000000004894
.text:0000000000004894 loc_4894:                               ; CODE XREF: process_line+10A↑j
.text:0000000000004894                 movzx   r15d, byte ptr [rbx]
.text:0000000000004898
.text:0000000000004898 loc_4898:                               ; CODE XREF: process_line+1A3↓j
.text:0000000000004898                 test    r15b, r15b
.text:000000000000489B                 jz      loc_47DB
.text:00000000000048A1
.text:00000000000048A1 loc_48A1:                               ; CODE XREF: process_line+5A↑j
.text:00000000000048A1                 mov     rsi, rbp
.text:00000000000048A4                 mov     byte ptr [rbx], 0
.text:00000000000048A7                 call    process_field
.text:00000000000048AC                 test    al, al
.text:00000000000048AE                 mov     eax, cs:delimiter
.text:00000000000048B4                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000048BB                 cmovz   r12d, r13d
.text:00000000000048BF                 mov     esi, 20h ; ' '
.text:00000000000048C4                 cmp     eax, 80h
.text:00000000000048C9                 mov     rdx, [rdi+28h]
.text:00000000000048CD                 cmovnz  esi, eax
.text:00000000000048D0                 cmp     rdx, [rdi+30h]
.text:00000000000048D4                 jnb     short loc_4918
.text:00000000000048D6                 lea     rcx, [rdx+1]
.text:00000000000048DA                 mov     [rdi+28h], rcx
.text:00000000000048DE                 mov     [rdx], sil
.text:00000000000048E1
.text:00000000000048E1 loc_48E1:                               ; CODE XREF: process_line+1B7↓j
.text:00000000000048E1                 lea     rdi, [rbx+1]
.text:00000000000048E5                 jmp     loc_4798
.text:00000000000048E5 ; ---------------------------------------------------------------------------
.text:00000000000048EA                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: process_line+E8↑j
.text:00000000000048F0                                         ; process_line+F2↑j
.text:00000000000048F0                 add     rbx, 1
.text:00000000000048F4                 movzx   r15d, byte ptr [rbx]
.text:00000000000048F8                 test    r15b, r15b
.text:00000000000048FB                 jnz     loc_4850
.text:0000000000004901                 jmp     loc_47DB
.text:0000000000004901 ; ---------------------------------------------------------------------------
.text:0000000000004906                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: process_line+41↑j
.text:0000000000004910                 mov     rbx, rdi
.text:0000000000004913                 jmp     short loc_4898
.text:0000000000004913 ; ---------------------------------------------------------------------------
.text:0000000000004915                 align 8
.text:0000000000004918
.text:0000000000004918 loc_4918:                               ; CODE XREF: process_line+164↑j
.text:0000000000004918                 movzx   esi, sil        ; int
.text:000000000000491C                 call    ___overflow
.text:0000000000004921                 mov     eax, cs:delimiter
.text:0000000000004927                 jmp     short loc_48E1
.text:0000000000004929 ; ---------------------------------------------------------------------------
.text:0000000000004929
.text:0000000000004929 loc_4929:                               ; CODE XREF: process_line+99↑j
.text:0000000000004929                 movzx   esi, dl         ; int
.text:000000000000492C                 call    ___overflow
.text:0000000000004931                 jmp     loc_4819
.text:0000000000004931 ; } // starts at 4770
.text:0000000000004931 process_line    endp
.text:0000000000004931
.text:0000000000004931 ; ---------------------------------------------------------------------------
.text:0000000000004936                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: noreturn
.text:0000000000004940
.text:0000000000004940 ; void __fastcall __noreturn usage(int status)
.text:0000000000004940                 public usage
.text:0000000000004940 usage           proc near               ; CODE XREF: main+230↑p
.text:0000000000004940                                         ; main+C44↑p ...
.text:0000000000004940
.text:0000000000004940 var_A8          = qword ptr -0A8h
.text:0000000000004940 var_A0          = qword ptr -0A0h
.text:0000000000004940 var_98          = qword ptr -98h
.text:0000000000004940 var_90          = qword ptr -90h
.text:0000000000004940 var_88          = qword ptr -88h
.text:0000000000004940 var_80          = qword ptr -80h
.text:0000000000004940 var_78          = qword ptr -78h
.text:0000000000004940 var_70          = qword ptr -70h
.text:0000000000004940 var_68          = qword ptr -68h
.text:0000000000004940 var_60          = qword ptr -60h
.text:0000000000004940 var_58          = qword ptr -58h
.text:0000000000004940 var_50          = qword ptr -50h
.text:0000000000004940 var_48          = qword ptr -48h
.text:0000000000004940 var_40          = qword ptr -40h
.text:0000000000004940 var_30          = qword ptr -30h
.text:0000000000004940
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    r13
.text:0000000000004942                 push    r12
.text:0000000000004944                 mov     edx, 5          ; category
.text:0000000000004949                 push    rbp
.text:000000000000494A                 push    rbx
.text:000000000000494B                 mov     ebp, edi
.text:000000000000494D                 sub     rsp, 88h
.text:0000000000004954                 mov     rbx, cs:program_name
.text:000000000000495B                 mov     rax, fs:28h
.text:0000000000004964                 mov     [rsp+0A8h+var_30], rax
.text:0000000000004969                 xor     eax, eax
.text:000000000000496B                 test    edi, edi
.text:000000000000496D                 jz      short loc_499D
.text:000000000000496F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000004976                 xor     edi, edi        ; domainname
.text:0000000000004978                 call    _dcgettext
.text:000000000000497D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004984                 mov     rdx, rax
.text:0000000000004987                 mov     rcx, rbx
.text:000000000000498A                 mov     esi, 1
.text:000000000000498F                 xor     eax, eax
.text:0000000000004991                 call    ___fprintf_chk
.text:0000000000004996
.text:0000000000004996 loc_4996:                               ; CODE XREF: usage+66E↓j
.text:0000000000004996                 mov     edi, ebp        ; status
.text:0000000000004998                 call    _exit
.text:000000000000499D ; ---------------------------------------------------------------------------
.text:000000000000499D
.text:000000000000499D loc_499D:                               ; CODE XREF: usage+2D↑j
.text:000000000000499D                 lea     rsi, aUsageSOptionNu ; "Usage: %s [OPTION]... [NUMBER]...\n"
.text:00000000000049A4                 xor     edi, edi        ; domainname
.text:00000000000049A6                 call    _dcgettext
.text:00000000000049AB                 mov     rdx, rbx
.text:00000000000049AE                 mov     rsi, rax
.text:00000000000049B1                 mov     edi, 1
.text:00000000000049B6                 xor     eax, eax
.text:00000000000049B8                 call    ___printf_chk
.text:00000000000049BD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049C4                 lea     rsi, aReformatNumber ; "Reformat NUMBER(s), or the numbers from"...
.text:00000000000049CB                 mov     edx, 5          ; category
.text:00000000000049D0                 xor     edi, edi        ; domainname
.text:00000000000049D2                 call    _dcgettext
.text:00000000000049D7                 mov     rsi, rbx        ; stream
.text:00000000000049DA                 mov     rdi, rax        ; s
.text:00000000000049DD                 call    _fputs_unlocked
.text:00000000000049E2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000049E9                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000049F0                 mov     edx, 5          ; category
.text:00000000000049F5                 xor     edi, edi        ; domainname
.text:00000000000049F7                 call    _dcgettext
.text:00000000000049FC                 mov     rsi, rbx        ; stream
.text:00000000000049FF                 mov     rdi, rax        ; s
.text:0000000000004A02                 call    _fputs_unlocked
.text:0000000000004A07                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A0E                 lea     rsi, aDebugPrintWarn ; "      --debug          print warnings a"...
.text:0000000000004A15                 mov     edx, 5          ; category
.text:0000000000004A1A                 xor     edi, edi        ; domainname
.text:0000000000004A1C                 call    _dcgettext
.text:0000000000004A21                 mov     rsi, rbx        ; stream
.text:0000000000004A24                 mov     rdi, rax        ; s
.text:0000000000004A27                 call    _fputs_unlocked
.text:0000000000004A2C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A33                 lea     rsi, aDDelimiterXUse ; "  -d, --delimiter=X    use X instead of"...
.text:0000000000004A3A                 mov     edx, 5          ; category
.text:0000000000004A3F                 xor     edi, edi        ; domainname
.text:0000000000004A41                 call    _dcgettext
.text:0000000000004A46                 mov     rsi, rbx        ; stream
.text:0000000000004A49                 mov     rdi, rax        ; s
.text:0000000000004A4C                 call    _fputs_unlocked
.text:0000000000004A51                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A58                 lea     rsi, aFieldFieldsRep ; "      --field=FIELDS   replace the numb"...
.text:0000000000004A5F                 mov     edx, 5          ; category
.text:0000000000004A64                 xor     edi, edi        ; domainname
.text:0000000000004A66                 call    _dcgettext
.text:0000000000004A6B                 mov     rsi, rbx        ; stream
.text:0000000000004A6E                 mov     rdi, rax        ; s
.text:0000000000004A71                 call    _fputs_unlocked
.text:0000000000004A76                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004A7D                 lea     rsi, aFormatFormatUs ; "      --format=FORMAT  use printf style"...
.text:0000000000004A84                 mov     edx, 5          ; category
.text:0000000000004A89                 xor     edi, edi        ; domainname
.text:0000000000004A8B                 call    _dcgettext
.text:0000000000004A90                 mov     rsi, rbx        ; stream
.text:0000000000004A93                 mov     rdi, rax        ; s
.text:0000000000004A96                 call    _fputs_unlocked
.text:0000000000004A9B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AA2                 lea     rsi, aFromUnitAutoSc ; "      --from=UNIT      auto-scale input"...
.text:0000000000004AA9                 mov     edx, 5          ; category
.text:0000000000004AAE                 xor     edi, edi        ; domainname
.text:0000000000004AB0                 call    _dcgettext
.text:0000000000004AB5                 mov     rsi, rbx        ; stream
.text:0000000000004AB8                 mov     rdi, rax        ; s
.text:0000000000004ABB                 call    _fputs_unlocked
.text:0000000000004AC0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AC7                 lea     rsi, aFromUnitNSpeci ; "      --from-unit=N    specify the inpu"...
.text:0000000000004ACE                 mov     edx, 5          ; category
.text:0000000000004AD3                 xor     edi, edi        ; domainname
.text:0000000000004AD5                 call    _dcgettext
.text:0000000000004ADA                 mov     rsi, rbx        ; stream
.text:0000000000004ADD                 mov     rdi, rax        ; s
.text:0000000000004AE0                 call    _fputs_unlocked
.text:0000000000004AE5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004AEC                 lea     rsi, aGroupingUseLoc ; "      --grouping       use locale-defin"...
.text:0000000000004AF3                 mov     edx, 5          ; category
.text:0000000000004AF8                 xor     edi, edi        ; domainname
.text:0000000000004AFA                 call    _dcgettext
.text:0000000000004AFF                 mov     rsi, rbx        ; stream
.text:0000000000004B02                 mov     rdi, rax        ; s
.text:0000000000004B05                 call    _fputs_unlocked
.text:0000000000004B0A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B11                 lea     rsi, aHeaderNPrintWi ; "      --header[=N]     print (without c"...
.text:0000000000004B18                 mov     edx, 5          ; category
.text:0000000000004B1D                 xor     edi, edi        ; domainname
.text:0000000000004B1F                 call    _dcgettext
.text:0000000000004B24                 mov     rsi, rbx        ; stream
.text:0000000000004B27                 mov     rdi, rax        ; s
.text:0000000000004B2A                 call    _fputs_unlocked
.text:0000000000004B2F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B36                 lea     rsi, aInvalidModeFai ; "      --invalid=MODE   failure mode for"...
.text:0000000000004B3D                 mov     edx, 5          ; category
.text:0000000000004B42                 xor     edi, edi        ; domainname
.text:0000000000004B44                 call    _dcgettext
.text:0000000000004B49                 mov     rsi, rbx        ; stream
.text:0000000000004B4C                 mov     rdi, rax        ; s
.text:0000000000004B4F                 call    _fputs_unlocked
.text:0000000000004B54                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B5B                 lea     rsi, aPaddingNPadThe ; "      --padding=N      pad the output t"...
.text:0000000000004B62                 mov     edx, 5          ; category
.text:0000000000004B67                 xor     edi, edi        ; domainname
.text:0000000000004B69                 call    _dcgettext
.text:0000000000004B6E                 mov     rsi, rbx        ; stream
.text:0000000000004B71                 mov     rdi, rax        ; s
.text:0000000000004B74                 call    _fputs_unlocked
.text:0000000000004B79                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004B80                 lea     rsi, aRoundMethodUse ; "      --round=METHOD   use METHOD for r"...
.text:0000000000004B87                 mov     edx, 5          ; category
.text:0000000000004B8C                 xor     edi, edi        ; domainname
.text:0000000000004B8E                 call    _dcgettext
.text:0000000000004B93                 mov     rsi, rbx        ; stream
.text:0000000000004B96                 mov     rdi, rax        ; s
.text:0000000000004B99                 call    _fputs_unlocked
.text:0000000000004B9E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004BA5                 lea     rsi, aSuffixSuffixAd ; "      --suffix=SUFFIX  add SUFFIX to ou"...
.text:0000000000004BAC                 mov     edx, 5          ; category
.text:0000000000004BB1                 xor     edi, edi        ; domainname
.text:0000000000004BB3                 call    _dcgettext
.text:0000000000004BB8                 mov     rsi, rbx        ; stream
.text:0000000000004BBB                 mov     rdi, rax        ; s
.text:0000000000004BBE                 call    _fputs_unlocked
.text:0000000000004BC3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004BCA                 lea     rsi, aToUnitAutoScal ; "      --to=UNIT        auto-scale outpu"...
.text:0000000000004BD1                 mov     edx, 5          ; category
.text:0000000000004BD6                 xor     edi, edi        ; domainname
.text:0000000000004BD8                 call    _dcgettext
.text:0000000000004BDD                 mov     rsi, rbx        ; stream
.text:0000000000004BE0                 mov     rdi, rax        ; s
.text:0000000000004BE3                 call    _fputs_unlocked
.text:0000000000004BE8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004BEF                 lea     rsi, aToUnitNTheOutp ; "      --to-unit=N      the output unit "...
.text:0000000000004BF6                 mov     edx, 5          ; category
.text:0000000000004BFB                 xor     edi, edi        ; domainname
.text:0000000000004BFD                 call    _dcgettext
.text:0000000000004C02                 mov     rsi, rbx        ; stream
.text:0000000000004C05                 mov     rdi, rax        ; s
.text:0000000000004C08                 call    _fputs_unlocked
.text:0000000000004C0D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004C14                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:0000000000004C1B                 mov     edx, 5          ; category
.text:0000000000004C20                 xor     edi, edi        ; domainname
.text:0000000000004C22                 call    _dcgettext
.text:0000000000004C27                 mov     rsi, rbx        ; stream
.text:0000000000004C2A                 mov     rdi, rax        ; s
.text:0000000000004C2D                 call    _fputs_unlocked
.text:0000000000004C32                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004C39                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000004C40                 mov     edx, 5          ; category
.text:0000000000004C45                 xor     edi, edi        ; domainname
.text:0000000000004C47                 call    _dcgettext
.text:0000000000004C4C                 mov     rsi, rbx        ; stream
.text:0000000000004C4F                 mov     rdi, rax        ; s
.text:0000000000004C52                 call    _fputs_unlocked
.text:0000000000004C57                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004C5E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000004C65                 mov     edx, 5          ; category
.text:0000000000004C6A                 xor     edi, edi        ; domainname
.text:0000000000004C6C                 call    _dcgettext
.text:0000000000004C71                 mov     rsi, rbx        ; stream
.text:0000000000004C74                 mov     rdi, rax        ; s
.text:0000000000004C77                 call    _fputs_unlocked
.text:0000000000004C7C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004C83                 lea     rsi, aUnitOptions ; "\nUNIT options:\n"
.text:0000000000004C8A                 mov     edx, 5          ; category
.text:0000000000004C8F                 xor     edi, edi        ; domainname
.text:0000000000004C91                 call    _dcgettext
.text:0000000000004C96                 mov     rsi, rbx        ; stream
.text:0000000000004C99                 mov     rdi, rax        ; s
.text:0000000000004C9C                 call    _fputs_unlocked
.text:0000000000004CA1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004CA8                 lea     rsi, aNoneNoAutoScal ; "  none       no auto-scaling is done; s"...
.text:0000000000004CAF                 xor     edi, edi        ; domainname
.text:0000000000004CB1                 mov     edx, 5          ; category
.text:0000000000004CB6                 call    _dcgettext
.text:0000000000004CBB                 mov     rsi, rbx        ; stream
.text:0000000000004CBE                 mov     rdi, rax        ; s
.text:0000000000004CC1                 call    _fputs_unlocked
.text:0000000000004CC6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004CCD                 lea     rsi, aAutoAcceptOpti ; "  auto       accept optional single/two"...
.text:0000000000004CD4                 mov     edx, 5          ; category
.text:0000000000004CD9                 xor     edi, edi        ; domainname
.text:0000000000004CDB                 call    _dcgettext
.text:0000000000004CE0                 mov     rsi, rbx        ; stream
.text:0000000000004CE3                 mov     rdi, rax        ; s
.text:0000000000004CE6                 call    _fputs_unlocked
.text:0000000000004CEB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004CF2                 lea     rsi, aSiAcceptOption ; "  si         accept optional single let"...
.text:0000000000004CF9                 mov     edx, 5          ; category
.text:0000000000004CFE                 xor     edi, edi        ; domainname
.text:0000000000004D00                 call    _dcgettext
.text:0000000000004D05                 mov     rsi, rbx        ; stream
.text:0000000000004D08                 mov     rdi, rax        ; s
.text:0000000000004D0B                 call    _fputs_unlocked
.text:0000000000004D10                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004D17                 lea     rsi, aIecAcceptOptio ; "  iec        accept optional single let"...
.text:0000000000004D1E                 mov     edx, 5          ; category
.text:0000000000004D23                 xor     edi, edi        ; domainname
.text:0000000000004D25                 call    _dcgettext
.text:0000000000004D2A                 mov     rsi, rbx        ; stream
.text:0000000000004D2D                 mov     rdi, rax        ; s
.text:0000000000004D30                 call    _fputs_unlocked
.text:0000000000004D35                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004D3C                 lea     rsi, aIecIAcceptOpti ; "  iec-i      accept optional two-letter"...
.text:0000000000004D43                 mov     edx, 5          ; category
.text:0000000000004D48                 xor     edi, edi        ; domainname
.text:0000000000004D4A                 call    _dcgettext
.text:0000000000004D4F                 mov     rsi, rbx        ; stream
.text:0000000000004D52                 mov     rdi, rax        ; s
.text:0000000000004D55                 call    _fputs_unlocked
.text:0000000000004D5A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004D61                 lea     rsi, aFieldsSupports ; "\nFIELDS supports cut(1) style field ra"...
.text:0000000000004D68                 mov     edx, 5          ; category
.text:0000000000004D6D                 xor     edi, edi        ; domainname
.text:0000000000004D6F                 call    _dcgettext
.text:0000000000004D74                 mov     rsi, rbx        ; stream
.text:0000000000004D77                 mov     rdi, rax        ; s
.text:0000000000004D7A                 call    _fputs_unlocked
.text:0000000000004D7F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004D86                 lea     rsi, aFormatMustBeSu ; "\nFORMAT must be suitable for printing "...
.text:0000000000004D8D                 mov     edx, 5          ; category
.text:0000000000004D92                 xor     edi, edi        ; domainname
.text:0000000000004D94                 call    _dcgettext
.text:0000000000004D99                 mov     rsi, rbx        ; stream
.text:0000000000004D9C                 mov     rdi, rax        ; s
.text:0000000000004D9F                 call    _fputs_unlocked
.text:0000000000004DA4                 mov     rbx, cs:program_name
.text:0000000000004DAB                 lea     rsi, aExitStatusIs0I ; "\nExit status is 0 if all input numbers"...
.text:0000000000004DB2                 mov     edx, 5          ; category
.text:0000000000004DB7                 xor     edi, edi        ; domainname
.text:0000000000004DB9                 call    _dcgettext
.text:0000000000004DBE                 mov     rdx, rbx
.text:0000000000004DC1                 mov     rsi, rax
.text:0000000000004DC4                 mov     edi, 1
.text:0000000000004DC9                 xor     eax, eax
.text:0000000000004DCB                 call    ___printf_chk
.text:0000000000004DD0                 mov     rbx, cs:program_name
.text:0000000000004DD7                 lea     rsi, aExamplesSToSi1 ; "\nExamples:\n  $ %s --to=si 1000\n     "...
.text:0000000000004DDE                 mov     edx, 5          ; category
.text:0000000000004DE3                 xor     edi, edi        ; domainname
.text:0000000000004DE5                 call    _dcgettext
.text:0000000000004DEA                 sub     rsp, 8
.text:0000000000004DEE                 mov     rcx, rbx
.text:0000000000004DF1                 mov     rdx, rbx
.text:0000000000004DF4                 push    rbx
.text:0000000000004DF5                 push    rbx
.text:0000000000004DF6                 mov     r9, rbx
.text:0000000000004DF9                 push    rbx
.text:0000000000004DFA                 push    rbx
.text:0000000000004DFB                 mov     r8, rbx
.text:0000000000004DFE                 push    rbx
.text:0000000000004DFF                 mov     rsi, rax
.text:0000000000004E02                 mov     edi, 1
.text:0000000000004E07                 xor     eax, eax
.text:0000000000004E09                 lea     rbx, aNumfmt    ; "numfmt"
.text:0000000000004E10                 call    ___printf_chk
.text:0000000000004E15                 lea     rax, asc_95D1   ; "["
.text:0000000000004E1C                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000004E23                 mov     [rsp+0D8h+var_48], 0
.text:0000000000004E2F                 mov     [rsp+0D8h+var_40], 0
.text:0000000000004E3B                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000004E40                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000004E47                 mov     [rsp+0D8h+var_78], rcx
.text:0000000000004E4C                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000004E53                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000004E58                 lea     rax, domainname ; "coreutils"
.text:0000000000004E5F                 mov     [rsp+0D8h+var_68], rcx
.text:0000000000004E64                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000004E6B                 mov     [rsp+0D8h+var_98], rax
.text:0000000000004E70                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000004E77                 mov     [rsp+0D8h+var_58], rcx
.text:0000000000004E7F                 mov     [rsp+0D8h+var_90], rax
.text:0000000000004E84                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000004E8B                 mov     [rsp+0D8h+var_88], rax
.text:0000000000004E90                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000004E97                 mov     [rsp+0D8h+var_80], rax
.text:0000000000004E9C                 mov     [rsp+0D8h+var_70], rax
.text:0000000000004EA1                 mov     [rsp+0D8h+var_60], rax
.text:0000000000004EA6                 mov     [rsp+0D8h+var_50], rax
.text:0000000000004EAE                 add     rsp, 30h
.text:0000000000004EB2                 mov     rdx, rsp
.text:0000000000004EB5                 nop     dword ptr [rax]
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: usage+595↓j
.text:0000000000004EB8                 add     rdx, 10h
.text:0000000000004EBC                 mov     rdi, [rdx]
.text:0000000000004EBF                 test    rdi, rdi
.text:0000000000004EC2                 jz      short loc_4ED7
.text:0000000000004EC4                 mov     ecx, 7
.text:0000000000004EC9                 mov     rsi, rbx
.text:0000000000004ECC                 repe cmpsb
.text:0000000000004ECE                 setnbe  al
.text:0000000000004ED1                 sbb     al, 0
.text:0000000000004ED3                 test    al, al
.text:0000000000004ED5                 jnz     short loc_4EB8
.text:0000000000004ED7
.text:0000000000004ED7 loc_4ED7:                               ; CODE XREF: usage+582↑j
.text:0000000000004ED7                 mov     r12, [rdx+8]
.text:0000000000004EDB                 xor     edi, edi        ; domainname
.text:0000000000004EDD                 mov     edx, 5          ; category
.text:0000000000004EE2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000004EE9                 test    r12, r12
.text:0000000000004EEC                 jz      loc_4FB3
.text:0000000000004EF2                 call    _dcgettext
.text:0000000000004EF7                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004EFE                 lea     rdx, unk_9647
.text:0000000000004F05                 mov     rsi, rax
.text:0000000000004F08                 mov     edi, 1
.text:0000000000004F0D                 xor     eax, eax
.text:0000000000004F0F                 call    ___printf_chk
.text:0000000000004F14                 xor     esi, esi        ; locale
.text:0000000000004F16                 mov     edi, 5          ; category
.text:0000000000004F1B                 call    _setlocale
.text:0000000000004F20                 test    rax, rax
.text:0000000000004F23                 jz      short loc_4F41
.text:0000000000004F25                 lea     rsi, s2         ; "en_"
.text:0000000000004F2C                 mov     edx, 3          ; n
.text:0000000000004F31                 mov     rdi, rax        ; s1
.text:0000000000004F34                 call    _strncmp
.text:0000000000004F39                 test    eax, eax
.text:0000000000004F3B                 jnz     loc_5048
.text:0000000000004F41
.text:0000000000004F41 loc_4F41:                               ; CODE XREF: usage+5E3↑j
.text:0000000000004F41                                         ; usage+72D↓j
.text:0000000000004F41                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000004F48                 xor     edi, edi        ; domainname
.text:0000000000004F4A                 mov     edx, 5          ; category
.text:0000000000004F4F                 call    _dcgettext
.text:0000000000004F54                 lea     rcx, aNumfmt    ; "numfmt"
.text:0000000000004F5B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004F62                 mov     rsi, rax
.text:0000000000004F65                 mov     edi, 1
.text:0000000000004F6A                 xor     eax, eax
.text:0000000000004F6C                 call    ___printf_chk
.text:0000000000004F71                 cmp     r12, rbx
.text:0000000000004F74                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000004F7B                 lea     rbx, aReturningValue+1Dh ; ""
.text:0000000000004F82                 cmovz   rbx, rcx
.text:0000000000004F86
.text:0000000000004F86 loc_4F86:                               ; CODE XREF: usage+6FC↓j
.text:0000000000004F86                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000004F8D                 xor     edi, edi        ; domainname
.text:0000000000004F8F                 mov     edx, 5          ; category
.text:0000000000004F94                 call    _dcgettext
.text:0000000000004F99                 mov     rcx, rbx
.text:0000000000004F9C                 mov     rsi, rax
.text:0000000000004F9F                 mov     rdx, r12
.text:0000000000004FA2                 mov     edi, 1
.text:0000000000004FA7                 xor     eax, eax
.text:0000000000004FA9                 call    ___printf_chk
.text:0000000000004FAE                 jmp     loc_4996
.text:0000000000004FB3 ; ---------------------------------------------------------------------------
.text:0000000000004FB3
.text:0000000000004FB3 loc_4FB3:                               ; CODE XREF: usage+5AC↑j
.text:0000000000004FB3                 call    _dcgettext
.text:0000000000004FB8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004FBF                 lea     rdx, unk_9647
.text:0000000000004FC6                 mov     rsi, rax
.text:0000000000004FC9                 mov     edi, 1
.text:0000000000004FCE                 xor     eax, eax
.text:0000000000004FD0                 call    ___printf_chk
.text:0000000000004FD5                 xor     esi, esi        ; locale
.text:0000000000004FD7                 mov     edi, 5          ; category
.text:0000000000004FDC                 call    _setlocale
.text:0000000000004FE1                 test    rax, rax
.text:0000000000004FE4                 jz      short loc_4FFE
.text:0000000000004FE6                 lea     rsi, s2         ; "en_"
.text:0000000000004FED                 mov     edx, 3          ; n
.text:0000000000004FF2                 mov     rdi, rax        ; s1
.text:0000000000004FF5                 call    _strncmp
.text:0000000000004FFA                 test    eax, eax
.text:0000000000004FFC                 jnz     short loc_5041
.text:0000000000004FFE
.text:0000000000004FFE loc_4FFE:                               ; CODE XREF: usage+6A4↑j
.text:0000000000004FFE                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005005                 mov     edx, 5          ; category
.text:000000000000500A                 xor     edi, edi        ; domainname
.text:000000000000500C                 lea     r12, aNumfmt    ; "numfmt"
.text:0000000000005013                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000501A                 call    _dcgettext
.text:000000000000501F                 lea     rcx, aNumfmt    ; "numfmt"
.text:0000000000005026                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000502D                 mov     rsi, rax
.text:0000000000005030                 mov     edi, 1
.text:0000000000005035                 xor     eax, eax
.text:0000000000005037                 call    ___printf_chk
.text:000000000000503C                 jmp     loc_4F86
.text:0000000000005041 ; ---------------------------------------------------------------------------
.text:0000000000005041
.text:0000000000005041 loc_5041:                               ; CODE XREF: usage+6BC↑j
.text:0000000000005041                 lea     r12, aNumfmt    ; "numfmt"
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: usage+5FB↑j
.text:0000000000005048                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000504F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000005056                 xor     edi, edi        ; domainname
.text:0000000000005058                 mov     edx, 5          ; category
.text:000000000000505D                 call    _dcgettext
.text:0000000000005062                 mov     rsi, r13        ; stream
.text:0000000000005065                 mov     rdi, rax        ; s
.text:0000000000005068                 call    _fputs_unlocked
.text:000000000000506D                 jmp     loc_4F41
.text:000000000000506D ; } // starts at 4940
.text:000000000000506D usage           endp
.text:000000000000506D
.text:000000000000506D ; ---------------------------------------------------------------------------
.text:0000000000005072                 align 20h
.text:0000000000005080
.text:0000000000005080 ; =============== S U B R O U T I N E =======================================
.text:0000000000005080
.text:0000000000005080
.text:0000000000005080 ; int compare_ranges(const void *, const void *)
.text:0000000000005080 compare_ranges  proc near               ; DATA XREF: set_fields+161↓o
.text:0000000000005080 ; __unwind {
.text:0000000000005080                 mov     eax, [rsi]
.text:0000000000005082                 cmp     [rdi], eax
.text:0000000000005084                 jl      short loc_5090
.text:0000000000005086                 setnle  al
.text:0000000000005089                 movzx   eax, al
.text:000000000000508C                 retn
.text:000000000000508C ; ---------------------------------------------------------------------------
.text:000000000000508D                 align 10h
.text:0000000000005090
.text:0000000000005090 loc_5090:                               ; CODE XREF: compare_ranges+4↑j
.text:0000000000005090                 mov     eax, 0FFFFFFFFh
.text:0000000000005095                 retn
.text:0000000000005095 ; } // starts at 5080
.text:0000000000005095 compare_ranges  endp
.text:0000000000005095
.text:0000000000005095 ; ---------------------------------------------------------------------------
.text:0000000000005096                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0
.text:00000000000050A0 add_range_pair  proc near               ; CODE XREF: set_fields+C2↓p
.text:00000000000050A0                                         ; set_fields+13F↓p ...
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 push    rbp
.text:00000000000050A1                 push    rbx
.text:00000000000050A2                 mov     rbx, rsi
.text:00000000000050A5                 mov     rbp, rdi
.text:00000000000050A8                 sub     rsp, 8
.text:00000000000050AC                 mov     rsi, cs:n_frp
.text:00000000000050B3                 cmp     rsi, cs:n_frp_allocated
.text:00000000000050BA                 mov     rdi, cs:frp
.text:00000000000050C1                 jz      short loc_50F0
.text:00000000000050C3
.text:00000000000050C3 loc_50C3:                               ; CODE XREF: add_range_pair+90↓j
.text:00000000000050C3                 mov     rax, rsi
.text:00000000000050C6                 add     rsi, 1
.text:00000000000050CA                 shl     rax, 4
.text:00000000000050CE                 add     rdi, rax
.text:00000000000050D1                 mov     [rdi], rbp
.text:00000000000050D4                 mov     [rdi+8], rbx
.text:00000000000050D8                 mov     cs:n_frp, rsi
.text:00000000000050DF                 add     rsp, 8
.text:00000000000050E3                 pop     rbx
.text:00000000000050E4                 pop     rbp
.text:00000000000050E5                 retn
.text:00000000000050E5 ; ---------------------------------------------------------------------------
.text:00000000000050E6                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: add_range_pair+21↑j
.text:00000000000050F0                 test    rdi, rdi
.text:00000000000050F3                 jz      short loc_5138
.text:00000000000050F5                 mov     rax, 555555555555554h
.text:00000000000050FF                 cmp     rsi, rax
.text:0000000000005102                 ja      short loc_515D
.text:0000000000005104                 mov     rax, rsi
.text:0000000000005107                 shr     rax, 1
.text:000000000000510A                 lea     rsi, [rsi+rax+1]
.text:000000000000510F
.text:000000000000510F loc_510F:                               ; CODE XREF: add_range_pair+BB↓j
.text:000000000000510F                 mov     cs:n_frp_allocated, rsi
.text:0000000000005116                 shl     rsi, 4
.text:000000000000511A                 call    xrealloc
.text:000000000000511F                 mov     rsi, cs:n_frp
.text:0000000000005126                 mov     rdi, rax
.text:0000000000005129                 mov     cs:frp, rax
.text:0000000000005130                 jmp     short loc_50C3
.text:0000000000005130 ; ---------------------------------------------------------------------------
.text:0000000000005132                 align 8
.text:0000000000005138
.text:0000000000005138 loc_5138:                               ; CODE XREF: add_range_pair+53↑j
.text:0000000000005138                 test    rsi, rsi
.text:000000000000513B                 mov     eax, 8
.text:0000000000005140                 mov     edx, 10h
.text:0000000000005145                 cmovz   rsi, rax
.text:0000000000005149                 mov     rax, rdx
.text:000000000000514C                 xor     ecx, ecx
.text:000000000000514E                 mul     rsi
.text:0000000000005151                 jo      short loc_5162
.text:0000000000005153
.text:0000000000005153 loc_5153:                               ; CODE XREF: add_range_pair+C7↓j
.text:0000000000005153                 test    rax, rax
.text:0000000000005156                 js      short loc_515D
.text:0000000000005158                 test    rcx, rcx
.text:000000000000515B                 jz      short loc_510F
.text:000000000000515D
.text:000000000000515D loc_515D:                               ; CODE XREF: add_range_pair+62↑j
.text:000000000000515D                                         ; add_range_pair+B6↑j
.text:000000000000515D                 call    xalloc_die
.text:0000000000005162 ; ---------------------------------------------------------------------------
.text:0000000000005162
.text:0000000000005162 loc_5162:                               ; CODE XREF: add_range_pair+B1↑j
.text:0000000000005162                 mov     ecx, 1
.text:0000000000005167                 jmp     short loc_5153
.text:0000000000005167 ; } // starts at 50A0
.text:0000000000005167 add_range_pair  endp
.text:0000000000005167
.text:0000000000005167 ; ---------------------------------------------------------------------------
.text:0000000000005169                 align 10h
.text:0000000000005170
.text:0000000000005170 ; =============== S U B R O U T I N E =======================================
.text:0000000000005170
.text:0000000000005170
.text:0000000000005170                 public set_fields
.text:0000000000005170 set_fields      proc near               ; CODE XREF: main+12F↑p
.text:0000000000005170
.text:0000000000005170 var_50          = qword ptr -50h
.text:0000000000005170 var_48          = qword ptr -48h
.text:0000000000005170 var_40          = dword ptr -40h
.text:0000000000005170 var_3C          = dword ptr -3Ch
.text:0000000000005170
.text:0000000000005170 ; __unwind {
.text:0000000000005170                 push    r15
.text:0000000000005172                 push    r14
.text:0000000000005174                 mov     eax, esi
.text:0000000000005176                 push    r13
.text:0000000000005178                 push    r12
.text:000000000000517A                 mov     r14, rdi
.text:000000000000517D                 push    rbp
.text:000000000000517E                 push    rbx
.text:000000000000517F                 sub     rsp, 28h
.text:0000000000005183                 and     eax, 1
.text:0000000000005186                 mov     [rsp+58h+var_3C], esi
.text:000000000000518A                 mov     [rsp+58h+var_40], eax
.text:000000000000518E                 jz      short loc_51AE
.text:0000000000005190                 lea     rdi, aLt+2      ; "-"
.text:0000000000005197                 mov     ecx, 2
.text:000000000000519C                 mov     rsi, r14
.text:000000000000519F                 repe cmpsb
.text:00000000000051A1                 setnbe  al
.text:00000000000051A4                 sbb     al, 0
.text:00000000000051A6                 test    al, al
.text:00000000000051A8                 jz      loc_54A9
.text:00000000000051AE
.text:00000000000051AE loc_51AE:                               ; CODE XREF: set_fields+1E↑j
.text:00000000000051AE                 xor     r15d, r15d
.text:00000000000051B1                 xor     ebx, ebx
.text:00000000000051B3
.text:00000000000051B3 loc_51B3:                               ; CODE XREF: set_fields+348↓j
.text:00000000000051B3                 mov     ebp, ebx
.text:00000000000051B5                 xor     r13d, r13d
.text:00000000000051B8                 xor     r12d, r12d
.text:00000000000051BB                 mov     [rsp+58h+var_48], 1
.text:00000000000051C4                 jmp     loc_524E
.text:00000000000051C4 ; ---------------------------------------------------------------------------
.text:00000000000051C9                 align 10h
.text:00000000000051D0
.text:00000000000051D0 loc_51D0:                               ; CODE XREF: set_fields+E6↓j
.text:00000000000051D0                 cmp     r8b, 2Ch ; ','
.text:00000000000051D4                 mov     byte ptr [rsp+58h+var_50], r8b
.text:00000000000051D9                 jz      short loc_51F7
.text:00000000000051DB                 call    ___ctype_b_loc
.text:00000000000051E0                 movzx   edx, byte ptr [rsp+58h+var_50]
.text:00000000000051E5                 mov     r10, [rax]
.text:00000000000051E8                 test    byte ptr [r10+rdx*2], 1
.text:00000000000051ED                 jnz     short loc_51F7
.text:00000000000051EF                 test    dl, dl
.text:00000000000051F1                 jnz     loc_5430
.text:00000000000051F7
.text:00000000000051F7 loc_51F7:                               ; CODE XREF: set_fields+69↑j
.text:00000000000051F7                                         ; set_fields+7D↑j
.text:00000000000051F7                 test    bpl, bpl
.text:00000000000051FA                 jz      loc_52A0
.text:0000000000005200                 test    bl, bl
.text:0000000000005202                 jnz     loc_53F0
.text:0000000000005208                 test    r12b, r12b
.text:000000000000520B                 jnz     loc_5400
.text:0000000000005211                 mov     eax, [rsp+58h+var_40]
.text:0000000000005215                 test    eax, eax
.text:0000000000005217                 jz      loc_5679
.text:000000000000521D                 mov     [rsp+58h+var_48], 1
.text:0000000000005226
.text:0000000000005226 loc_5226:                               ; CODE XREF: set_fields+283↓j
.text:0000000000005226                 mov     rdi, [rsp+58h+var_48]
.text:000000000000522B                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005232                 call    add_range_pair
.text:0000000000005237
.text:0000000000005237 loc_5237:                               ; CODE XREF: set_fields+2A8↓j
.text:0000000000005237                 cmp     byte ptr [r14], 0
.text:000000000000523B                 jz      short loc_52BA
.text:000000000000523D
.text:000000000000523D loc_523D:                               ; CODE XREF: set_fields+148↓j
.text:000000000000523D                 xor     r15d, r15d
.text:0000000000005240                 xor     r13d, r13d
.text:0000000000005243                 xor     ebp, ebp
.text:0000000000005245                 xor     r12d, r12d
.text:0000000000005248                 xor     ebx, ebx
.text:000000000000524A
.text:000000000000524A loc_524A:                               ; CODE XREF: set_fields+124↓j
.text:000000000000524A                                         ; set_fields+2BA↓j ...
.text:000000000000524A                 add     r14, 1
.text:000000000000524E
.text:000000000000524E loc_524E:                               ; CODE XREF: set_fields+54↑j
.text:000000000000524E                 movzx   r8d, byte ptr [r14]
.text:0000000000005252                 cmp     r8b, 2Dh ; '-'
.text:0000000000005256                 jnz     loc_51D0
.text:000000000000525C                 test    bpl, bpl
.text:000000000000525F                 jnz     loc_55ED
.text:0000000000005265                 test    r15, r15
.text:0000000000005268                 setz    r9b
.text:000000000000526C                 and     r9b, bl
.text:000000000000526F                 mov     r13d, r9d
.text:0000000000005272                 jnz     loc_5596
.text:0000000000005278                 test    bl, bl
.text:000000000000527A                 jnz     loc_5420
.text:0000000000005280                 mov     r13d, ebx
.text:0000000000005283                 xor     r15d, r15d
.text:0000000000005286                 mov     ebp, 1
.text:000000000000528B                 mov     [rsp+58h+var_48], 1
.text:0000000000005294                 jmp     short loc_524A
.text:0000000000005294 ; ---------------------------------------------------------------------------
.text:0000000000005296                 align 20h
.text:00000000000052A0
.text:00000000000052A0 loc_52A0:                               ; CODE XREF: set_fields+8A↑j
.text:00000000000052A0                 test    r15, r15
.text:00000000000052A3                 jz      loc_5596
.text:00000000000052A9                 mov     rsi, r15
.text:00000000000052AC                 mov     rdi, r15
.text:00000000000052AF                 call    add_range_pair
.text:00000000000052B4                 cmp     byte ptr [r14], 0
.text:00000000000052B8                 jnz     short loc_523D
.text:00000000000052BA
.text:00000000000052BA loc_52BA:                               ; CODE XREF: set_fields+CB↑j
.text:00000000000052BA                 mov     rsi, cs:n_frp   ; nmemb
.text:00000000000052C1                 test    rsi, rsi
.text:00000000000052C4                 jz      loc_56AD
.text:00000000000052CA                 mov     rdi, cs:frp     ; base
.text:00000000000052D1                 lea     rcx, compare_ranges ; compar
.text:00000000000052D8                 mov     edx, 10h        ; size
.text:00000000000052DD                 xor     r15d, r15d
.text:00000000000052E0                 xor     ebp, ebp
.text:00000000000052E2                 call    _qsort
.text:00000000000052E7                 mov     rbx, cs:n_frp
.text:00000000000052EE                 mov     rcx, cs:frp
.text:00000000000052F5                 cmp     r15, rbx
.text:00000000000052F8                 jnb     loc_538D
.text:00000000000052FE                 xchg    ax, ax
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: set_fields+217↓j
.text:0000000000005300                 add     r15, 1
.text:0000000000005304                 cmp     r15, rbx
.text:0000000000005307                 jnb     short loc_5380
.text:0000000000005309                 mov     r13, r15
.text:000000000000530C                 lea     rdx, [rcx+rbp]
.text:0000000000005310                 shl     r13, 4
.text:0000000000005314                 lea     rdi, [rcx+r13]
.text:0000000000005318                 mov     rax, [rdx+8]
.text:000000000000531C                 cmp     rax, [rdi]
.text:000000000000531F                 jb      short loc_5380
.text:0000000000005321                 lea     r14, [rbp+20h]
.text:0000000000005325                 jmp     short loc_5341
.text:0000000000005325 ; ---------------------------------------------------------------------------
.text:0000000000005327                 align 10h
.text:0000000000005330
.text:0000000000005330 loc_5330:                               ; CODE XREF: set_fields+20E↓j
.text:0000000000005330                 lea     rdi, [rcx+r13]  ; dest
.text:0000000000005334                 lea     rdx, [rcx+rbp]
.text:0000000000005338                 mov     rax, [rdx+8]
.text:000000000000533C                 cmp     [rdi], rax
.text:000000000000533F                 ja      short loc_5380
.text:0000000000005341
.text:0000000000005341 loc_5341:                               ; CODE XREF: set_fields+1B5↑j
.text:0000000000005341                 cmp     [rdi+8], rax
.text:0000000000005345                 lea     rsi, [rcx+r14]  ; src
.text:0000000000005349                 cmovnb  rax, [rdi+8]
.text:000000000000534E                 sub     rbx, r15
.text:0000000000005351                 shl     rbx, 4
.text:0000000000005355                 mov     [rdx+8], rax
.text:0000000000005359                 lea     rdx, [rbx-10h]  ; n
.text:000000000000535D                 call    _memmove
.text:0000000000005362                 mov     rax, cs:n_frp
.text:0000000000005369                 mov     rcx, cs:frp
.text:0000000000005370                 lea     rbx, [rax-1]
.text:0000000000005374                 cmp     rbx, r15
.text:0000000000005377                 mov     cs:n_frp, rbx
.text:000000000000537E                 ja      short loc_5330
.text:0000000000005380
.text:0000000000005380 loc_5380:                               ; CODE XREF: set_fields+197↑j
.text:0000000000005380                                         ; set_fields+1AF↑j ...
.text:0000000000005380                 add     rbp, 10h
.text:0000000000005384                 cmp     r15, rbx
.text:0000000000005387                 jb      loc_5300
.text:000000000000538D
.text:000000000000538D loc_538D:                               ; CODE XREF: set_fields+188↑j
.text:000000000000538D                 test    byte ptr [rsp+58h+var_3C], 2
.text:0000000000005392                 jnz     loc_54BD
.text:0000000000005398
.text:0000000000005398 loc_5398:                               ; CODE XREF: set_fields+404↓j
.text:0000000000005398                 add     rbx, 1
.text:000000000000539C                 mov     rdi, rcx
.text:000000000000539F                 mov     rsi, rbx
.text:00000000000053A2                 mov     cs:n_frp, rbx
.text:00000000000053A9                 shl     rsi, 4
.text:00000000000053AD                 call    xrealloc
.text:00000000000053B2                 mov     rdx, cs:n_frp
.text:00000000000053B9                 mov     cs:frp, rax
.text:00000000000053C0                 shl     rdx, 4
.text:00000000000053C4                 lea     rax, [rax+rdx-10h]
.text:00000000000053C9                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000053D0                 mov     [rax+8], rdx
.text:00000000000053D4                 mov     [rax], rdx
.text:00000000000053D7                 add     rsp, 28h
.text:00000000000053DB                 pop     rbx
.text:00000000000053DC                 pop     rbp
.text:00000000000053DD                 pop     r12
.text:00000000000053DF                 pop     r13
.text:00000000000053E1                 pop     r14
.text:00000000000053E3                 pop     r15
.text:00000000000053E5                 retn
.text:00000000000053E5 ; ---------------------------------------------------------------------------
.text:00000000000053E6                 align 10h
.text:00000000000053F0
.text:00000000000053F0 loc_53F0:                               ; CODE XREF: set_fields+92↑j
.text:00000000000053F0                 test    r12b, r12b
.text:00000000000053F3                 jz      loc_5226
.text:00000000000053F9                 nop     dword ptr [rax+00000000h]
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: set_fields+9B↑j
.text:0000000000005400                 cmp     [rsp+58h+var_48], r15
.text:0000000000005405                 ja      loc_55D8
.text:000000000000540B                 mov     rdi, [rsp+58h+var_48]
.text:0000000000005410                 mov     rsi, r15
.text:0000000000005413                 call    add_range_pair
.text:0000000000005418                 jmp     loc_5237
.text:0000000000005418 ; ---------------------------------------------------------------------------
.text:000000000000541D                 align 20h
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: set_fields+10A↑j
.text:0000000000005420                 mov     [rsp+58h+var_48], r15
.text:0000000000005425                 mov     ebp, ebx
.text:0000000000005427                 xor     r15d, r15d
.text:000000000000542A                 jmp     loc_524A
.text:000000000000542A ; ---------------------------------------------------------------------------
.text:000000000000542F                 align 10h
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: set_fields+81↑j
.text:0000000000005430                 movsx   eax, dl
.text:0000000000005433                 lea     edx, [rax-30h]
.text:0000000000005436                 cmp     edx, 9
.text:0000000000005439                 ja      loc_56CC
.text:000000000000543F                 test    r13b, r13b
.text:0000000000005442                 jz      short loc_54A0
.text:0000000000005444                 cmp     cs:num_start_6877, 0
.text:000000000000544C                 jz      short loc_54A0
.text:000000000000544E
.text:000000000000544E loc_544E:                               ; CODE XREF: set_fields+337↓j
.text:000000000000544E                 test    bpl, bpl
.text:0000000000005451                 mov     edx, 1
.text:0000000000005456                 mov     rcx, 1999999999999999h
.text:0000000000005460                 cmovnz  r12d, ebp
.text:0000000000005464                 cmovz   ebx, edx
.text:0000000000005467                 cmp     r15, rcx
.text:000000000000546A                 ja      loc_560D
.text:0000000000005470                 sub     eax, 30h ; '0'
.text:0000000000005473                 lea     rdx, [r15+r15*4]
.text:0000000000005477                 cdqe
.text:0000000000005479                 lea     rax, [rax+rdx*2]
.text:000000000000547D                 cmp     rax, r15
.text:0000000000005480                 jb      loc_560D
.text:0000000000005486                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000548A                 jz      loc_560D
.text:0000000000005490                 mov     r15, rax
.text:0000000000005493                 mov     r13d, 1
.text:0000000000005499                 jmp     loc_524A
.text:0000000000005499 ; ---------------------------------------------------------------------------
.text:000000000000549E                 align 20h
.text:00000000000054A0
.text:00000000000054A0 loc_54A0:                               ; CODE XREF: set_fields+2D2↑j
.text:00000000000054A0                                         ; set_fields+2DC↑j
.text:00000000000054A0                 mov     cs:num_start_6877, r14
.text:00000000000054A7                 jmp     short loc_544E
.text:00000000000054A9 ; ---------------------------------------------------------------------------
.text:00000000000054A9
.text:00000000000054A9 loc_54A9:                               ; CODE XREF: set_fields+38↑j
.text:00000000000054A9                 add     r14, 1
.text:00000000000054AD                 mov     r15d, 1
.text:00000000000054B3                 mov     ebx, 1
.text:00000000000054B8                 jmp     loc_51B3
.text:00000000000054BD ; ---------------------------------------------------------------------------
.text:00000000000054BD
.text:00000000000054BD loc_54BD:                               ; CODE XREF: set_fields+222↑j
.text:00000000000054BD                 mov     rax, [rcx]
.text:00000000000054C0                 mov     cs:frp, 0
.text:00000000000054CB                 mov     cs:n_frp, 0
.text:00000000000054D6                 mov     cs:n_frp_allocated, 0
.text:00000000000054E1                 cmp     rax, 1
.text:00000000000054E5                 ja      loc_5579
.text:00000000000054EB
.text:00000000000054EB loc_54EB:                               ; CODE XREF: set_fields+421↓j
.text:00000000000054EB                 cmp     rbx, 1
.text:00000000000054EF                 jbe     short loc_5535
.text:00000000000054F1                 mov     rax, rbx
.text:00000000000054F4                 lea     rbp, [rcx+8]
.text:00000000000054F8                 shl     rax, 4
.text:00000000000054FC                 lea     r12, [rcx+rax-8]
.text:0000000000005501                 nop     dword ptr [rax+00000000h]
.text:0000000000005508
.text:0000000000005508 loc_5508:                               ; CODE XREF: set_fields+3C3↓j
.text:0000000000005508                 mov     rax, [rbp+0]
.text:000000000000550C                 lea     rdi, [rax+1]
.text:0000000000005510                 mov     rax, [rbp+8]
.text:0000000000005514                 cmp     rdi, rax
.text:0000000000005517                 jz      short loc_552C
.text:0000000000005519                 lea     rsi, [rax-1]
.text:000000000000551D                 mov     [rsp+58h+var_50], rcx
.text:0000000000005522                 call    add_range_pair
.text:0000000000005527                 mov     rcx, [rsp+58h+var_50]
.text:000000000000552C
.text:000000000000552C loc_552C:                               ; CODE XREF: set_fields+3A7↑j
.text:000000000000552C                 add     rbp, 10h
.text:0000000000005530                 cmp     r12, rbp
.text:0000000000005533                 jnz     short loc_5508
.text:0000000000005535
.text:0000000000005535 loc_5535:                               ; CODE XREF: set_fields+37F↑j
.text:0000000000005535                 shl     rbx, 4
.text:0000000000005539                 mov     rax, [rcx+rbx-8]
.text:000000000000553E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005542                 jz      short loc_555E
.text:0000000000005544                 lea     rdi, [rax+1]
.text:0000000000005548                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000554F                 mov     [rsp+58h+var_50], rcx
.text:0000000000005554                 call    add_range_pair
.text:0000000000005559                 mov     rcx, [rsp+58h+var_50]
.text:000000000000555E
.text:000000000000555E loc_555E:                               ; CODE XREF: set_fields+3D2↑j
.text:000000000000555E                 mov     rdi, rcx        ; ptr
.text:0000000000005561                 call    _free
.text:0000000000005566                 mov     rbx, cs:n_frp
.text:000000000000556D                 mov     rcx, cs:frp
.text:0000000000005574                 jmp     loc_5398
.text:0000000000005579 ; ---------------------------------------------------------------------------
.text:0000000000005579
.text:0000000000005579 loc_5579:                               ; CODE XREF: set_fields+375↑j
.text:0000000000005579                 lea     rsi, [rax-1]
.text:000000000000557D                 mov     edi, 1
.text:0000000000005582                 mov     [rsp+58h+var_50], rcx
.text:0000000000005587                 call    add_range_pair
.text:000000000000558C                 mov     rcx, [rsp+58h+var_50]
.text:0000000000005591                 jmp     loc_54EB
.text:0000000000005596 ; ---------------------------------------------------------------------------
.text:0000000000005596
.text:0000000000005596 loc_5596:                               ; CODE XREF: set_fields+102↑j
.text:0000000000005596                                         ; set_fields+133↑j
.text:0000000000005596                 test    byte ptr [rsp+58h+var_3C], 4
.text:000000000000559B                 mov     edx, 5          ; category
.text:00000000000055A0                 jz      short loc_55C8
.text:00000000000055A2                 lea     rsi, aByteCharacterP ; "byte/character positions are numbered f"...
.text:00000000000055A9                 xor     edi, edi        ; domainname
.text:00000000000055AB                 call    _dcgettext
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: set_fields+466↓j
.text:00000000000055B0                                         ; set_fields+47B↓j ...
.text:00000000000055B0                 mov     rdx, rax        ; format
.text:00000000000055B3                 xor     edi, edi        ; status
.text:00000000000055B5                 xor     esi, esi        ; errnum
.text:00000000000055B7                 xor     eax, eax
.text:00000000000055B9                 call    _error
.text:00000000000055BE                 mov     edi, 1          ; status
.text:00000000000055C3                 call    usage
.text:00000000000055C8 ; ---------------------------------------------------------------------------
.text:00000000000055C8
.text:00000000000055C8 loc_55C8:                               ; CODE XREF: set_fields+430↑j
.text:00000000000055C8                 lea     rsi, aFieldsAreNumbe ; "fields are numbered from 1"
.text:00000000000055CF                 xor     edi, edi        ; domainname
.text:00000000000055D1                 call    _dcgettext
.text:00000000000055D6                 jmp     short loc_55B0
.text:00000000000055D8 ; ---------------------------------------------------------------------------
.text:00000000000055D8
.text:00000000000055D8 loc_55D8:                               ; CODE XREF: set_fields+295↑j
.text:00000000000055D8                 lea     rsi, aInvalidDecreas ; "invalid decreasing range"
.text:00000000000055DF                 mov     edx, 5          ; category
.text:00000000000055E4
.text:00000000000055E4 loc_55E4:                               ; CODE XREF: set_fields+515↓j
.text:00000000000055E4                                         ; set_fields+5A3↓j
.text:00000000000055E4                 xor     edi, edi        ; domainname
.text:00000000000055E6                 call    _dcgettext
.text:00000000000055EB                 jmp     short loc_55B0
.text:00000000000055ED ; ---------------------------------------------------------------------------
.text:00000000000055ED
.text:00000000000055ED loc_55ED:                               ; CODE XREF: set_fields+EF↑j
.text:00000000000055ED                 test    byte ptr [rsp+58h+var_3C], 4
.text:00000000000055F2                 mov     edx, 5          ; category
.text:00000000000055F7                 jz      loc_568A
.text:00000000000055FD                 lea     rsi, aInvalidByteOrC ; "invalid byte or character range"
.text:0000000000005604                 xor     edi, edi        ; domainname
.text:0000000000005606                 call    _dcgettext
.text:000000000000560B                 jmp     short loc_55B0
.text:000000000000560D ; ---------------------------------------------------------------------------
.text:000000000000560D
.text:000000000000560D loc_560D:                               ; CODE XREF: set_fields+2FA↑j
.text:000000000000560D                                         ; set_fields+310↑j ...
.text:000000000000560D                 mov     rbx, cs:num_start_6877
.text:0000000000005614                 lea     rsi, a0123456789 ; "0123456789"
.text:000000000000561B                 mov     rdi, rbx        ; s
.text:000000000000561E                 call    _strspn
.text:0000000000005623                 mov     rdi, rbx
.text:0000000000005626                 mov     rsi, rax
.text:0000000000005629                 call    xstrndup
.text:000000000000562E                 mov     rdi, rax
.text:0000000000005631                 mov     rbx, rax
.text:0000000000005634                 call    quote
.text:0000000000005639                 test    byte ptr [rsp+58h+var_3C], 4
.text:000000000000563E                 mov     rbp, rax
.text:0000000000005641                 mov     edx, 5          ; category
.text:0000000000005646                 jz      short loc_569D
.text:0000000000005648                 lea     rsi, aByteCharacterO ; "byte/character offset %s is too large"
.text:000000000000564F                 xor     edi, edi        ; domainname
.text:0000000000005651                 call    _dcgettext
.text:0000000000005656
.text:0000000000005656 loc_5656:                               ; CODE XREF: set_fields+53B↓j
.text:0000000000005656                 mov     rdx, rax        ; format
.text:0000000000005659                 mov     rcx, rbp
.text:000000000000565C                 xor     esi, esi        ; errnum
.text:000000000000565E                 xor     edi, edi        ; status
.text:0000000000005660                 xor     eax, eax
.text:0000000000005662                 call    _error
.text:0000000000005667                 mov     rdi, rbx        ; ptr
.text:000000000000566A                 call    _free
.text:000000000000566F                 mov     edi, 1          ; status
.text:0000000000005674                 call    usage
.text:0000000000005679 ; ---------------------------------------------------------------------------
.text:0000000000005679
.text:0000000000005679 loc_5679:                               ; CODE XREF: set_fields+A7↑j
.text:0000000000005679                 mov     edx, 5
.text:000000000000567E                 lea     rsi, aInvalidRangeWi ; "invalid range with no endpoint: -"
.text:0000000000005685                 jmp     loc_55E4
.text:000000000000568A ; ---------------------------------------------------------------------------
.text:000000000000568A
.text:000000000000568A loc_568A:                               ; CODE XREF: set_fields+487↑j
.text:000000000000568A                 lea     rsi, aInvalidFieldRa ; "invalid field range"
.text:0000000000005691                 xor     edi, edi        ; domainname
.text:0000000000005693                 call    _dcgettext
.text:0000000000005698                 jmp     loc_55B0
.text:000000000000569D ; ---------------------------------------------------------------------------
.text:000000000000569D
.text:000000000000569D loc_569D:                               ; CODE XREF: set_fields+4D6↑j
.text:000000000000569D                 lea     rsi, aFieldNumberSIs ; "field number %s is too large"
.text:00000000000056A4                 xor     edi, edi        ; domainname
.text:00000000000056A6                 call    _dcgettext
.text:00000000000056AB                 jmp     short loc_5656
.text:00000000000056AD ; ---------------------------------------------------------------------------
.text:00000000000056AD
.text:00000000000056AD loc_56AD:                               ; CODE XREF: set_fields+154↑j
.text:00000000000056AD                 test    byte ptr [rsp+58h+var_3C], 4
.text:00000000000056B2                 mov     edx, 5          ; category
.text:00000000000056B7                 jz      short loc_570C
.text:00000000000056B9                 lea     rsi, aMissingListOfB ; "missing list of byte/character position"...
.text:00000000000056C0                 xor     edi, edi        ; domainname
.text:00000000000056C2                 call    _dcgettext
.text:00000000000056C7                 jmp     loc_55B0
.text:00000000000056CC ; ---------------------------------------------------------------------------
.text:00000000000056CC
.text:00000000000056CC loc_56CC:                               ; CODE XREF: set_fields+2C9↑j
.text:00000000000056CC                 mov     rdi, r14
.text:00000000000056CF                 call    quote
.text:00000000000056D4                 test    byte ptr [rsp+58h+var_3C], 4
.text:00000000000056D9                 mov     rbx, rax
.text:00000000000056DC                 mov     edx, 5          ; category
.text:00000000000056E1                 jz      short loc_5718
.text:00000000000056E3                 lea     rsi, aInvalidByteCha ; "invalid byte/character position %s"
.text:00000000000056EA                 xor     edi, edi        ; domainname
.text:00000000000056EC                 call    _dcgettext
.text:00000000000056F1
.text:00000000000056F1 loc_56F1:                               ; CODE XREF: set_fields+5B6↓j
.text:00000000000056F1                 mov     rdx, rax        ; format
.text:00000000000056F4                 xor     edi, edi        ; status
.text:00000000000056F6                 mov     rcx, rbx
.text:00000000000056F9                 xor     esi, esi        ; errnum
.text:00000000000056FB                 xor     eax, eax
.text:00000000000056FD                 call    _error
.text:0000000000005702                 mov     edi, 1          ; status
.text:0000000000005707                 call    usage
.text:000000000000570C ; ---------------------------------------------------------------------------
.text:000000000000570C
.text:000000000000570C loc_570C:                               ; CODE XREF: set_fields+547↑j
.text:000000000000570C                 lea     rsi, aMissingListOfF ; "missing list of fields"
.text:0000000000005713                 jmp     loc_55E4
.text:0000000000005718 ; ---------------------------------------------------------------------------
.text:0000000000005718
.text:0000000000005718 loc_5718:                               ; CODE XREF: set_fields+571↑j
.text:0000000000005718                 lea     rsi, aInvalidFieldVa ; "invalid field value %s"
.text:000000000000571F                 xor     edi, edi        ; domainname
.text:0000000000005721                 call    _dcgettext
.text:0000000000005726                 jmp     short loc_56F1
.text:0000000000005726 ; } // starts at 5170
.text:0000000000005726 set_fields      endp
.text:0000000000005726
.text:0000000000005726 ; ---------------------------------------------------------------------------
.text:0000000000005728                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730
.text:0000000000005730                 public reset_fields
.text:0000000000005730 reset_fields    proc near
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 sub     rsp, 8
.text:0000000000005734                 mov     rdi, cs:frp     ; ptr
.text:000000000000573B                 mov     cs:n_frp, 0
.text:0000000000005746                 mov     cs:n_frp_allocated, 0
.text:0000000000005751                 call    _free
.text:0000000000005756                 mov     cs:frp, 0
.text:0000000000005761                 add     rsp, 8
.text:0000000000005765                 retn
.text:0000000000005765 ; } // starts at 5730
.text:0000000000005765 reset_fields    endp
.text:0000000000005765
.text:0000000000005765 ; ---------------------------------------------------------------------------
.text:0000000000005766                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: noreturn
.text:0000000000005770
.text:0000000000005770 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 mov     edi, 1          ; status
.text:0000000000005775                 jmp     usage
.text:0000000000005775 ; } // starts at 5770
.text:0000000000005775 __argmatch_die  endp
.text:0000000000005775
.text:0000000000005775 ; ---------------------------------------------------------------------------
.text:000000000000577A                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780 ; Attributes: info_from_lumina
.text:0000000000005780
.text:0000000000005780 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005780                 public argmatch
.text:0000000000005780 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000005780
.text:0000000000005780 var_58          = qword ptr -58h
.text:0000000000005780 s2              = qword ptr -50h
.text:0000000000005780 var_41          = byte ptr -41h
.text:0000000000005780 var_40          = qword ptr -40h
.text:0000000000005780
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 push    r15
.text:0000000000005782                 push    r14
.text:0000000000005784                 mov     r15, rsi
.text:0000000000005787                 push    r13
.text:0000000000005789                 push    r12
.text:000000000000578B                 mov     r13, rcx
.text:000000000000578E                 push    rbp
.text:000000000000578F                 push    rbx
.text:0000000000005790                 mov     rbp, rdx
.text:0000000000005793                 sub     rsp, 28h
.text:0000000000005797                 mov     [rsp+58h+s2], rdi
.text:000000000000579C                 mov     [rsp+58h+var_40], rdx
.text:00000000000057A1                 call    _strlen
.text:00000000000057A6                 mov     r14, [r15]
.text:00000000000057A9                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000057B1                 test    r14, r14
.text:00000000000057B4                 jz      loc_586D
.text:00000000000057BA                 mov     r12, rax
.text:00000000000057BD                 mov     [rsp+58h+var_41], 0
.text:00000000000057C2                 xor     ebx, ebx
.text:00000000000057C4                 jmp     short loc_5817
.text:00000000000057C4 ; ---------------------------------------------------------------------------
.text:00000000000057C6                 align 10h
.text:00000000000057D0
.text:00000000000057D0 loc_57D0:                               ; CODE XREF: argmatch+BD↓j
.text:00000000000057D0                 mov     rax, [rsp+58h+var_40]
.text:00000000000057D5                 test    rax, rax
.text:00000000000057D8                 jz      loc_5880
.text:00000000000057DE                 mov     rdi, [rsp+58h+var_58]
.text:00000000000057E2                 mov     rdx, r13        ; n
.text:00000000000057E5                 mov     rsi, rbp        ; s2
.text:00000000000057E8                 imul    rdi, r13
.text:00000000000057EC                 add     rdi, rax        ; s1
.text:00000000000057EF                 call    _memcmp
.text:00000000000057F4                 test    eax, eax
.text:00000000000057F6                 movzx   eax, [rsp+58h+var_41]
.text:00000000000057FB                 mov     ecx, 1
.text:0000000000005800                 cmovnz  eax, ecx
.text:0000000000005803                 mov     [rsp+58h+var_41], al
.text:0000000000005807
.text:0000000000005807 loc_5807:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000005807                                         ; argmatch+105↓j
.text:0000000000005807                 add     rbx, 1
.text:000000000000580B                 add     rbp, r13
.text:000000000000580E                 mov     r14, [r15+rbx*8]
.text:0000000000005812                 test    r14, r14
.text:0000000000005815                 jz      short loc_5858
.text:0000000000005817
.text:0000000000005817 loc_5817:                               ; CODE XREF: argmatch+44↑j
.text:0000000000005817                                         ; argmatch+D1↓j
.text:0000000000005817                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000581C                 mov     rdx, r12        ; n
.text:000000000000581F                 mov     rdi, r14        ; s1
.text:0000000000005822                 call    _strncmp
.text:0000000000005827                 test    eax, eax
.text:0000000000005829                 jnz     short loc_5807
.text:000000000000582B                 mov     rdi, r14        ; s
.text:000000000000582E                 call    _strlen
.text:0000000000005833                 cmp     rax, r12
.text:0000000000005836                 jz      short loc_5890
.text:0000000000005838                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000583D                 jnz     short loc_57D0
.text:000000000000583F                 mov     [rsp+58h+var_58], rbx
.text:0000000000005843                 add     rbx, 1
.text:0000000000005847                 add     rbp, r13
.text:000000000000584A                 mov     r14, [r15+rbx*8]
.text:000000000000584E                 test    r14, r14
.text:0000000000005851                 jnz     short loc_5817
.text:0000000000005853                 nop     dword ptr [rax+rax+00h]
.text:0000000000005858
.text:0000000000005858 loc_5858:                               ; CODE XREF: argmatch+95↑j
.text:0000000000005858                 cmp     [rsp+58h+var_41], 0
.text:000000000000585D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005864                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000005869                 mov     [rsp+58h+var_58], rax
.text:000000000000586D
.text:000000000000586D loc_586D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000586D                                         ; argmatch+114↓j
.text:000000000000586D                 mov     rax, [rsp+58h+var_58]
.text:0000000000005871                 add     rsp, 28h
.text:0000000000005875                 pop     rbx
.text:0000000000005876                 pop     rbp
.text:0000000000005877                 pop     r12
.text:0000000000005879                 pop     r13
.text:000000000000587B                 pop     r14
.text:000000000000587D                 pop     r15
.text:000000000000587F                 retn
.text:0000000000005880 ; ---------------------------------------------------------------------------
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005880                 mov     [rsp+58h+var_41], 1
.text:0000000000005885                 jmp     short loc_5807
.text:0000000000005885 ; ---------------------------------------------------------------------------
.text:0000000000005887                 align 10h
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000005890                 mov     [rsp+58h+var_58], rbx
.text:0000000000005894                 jmp     short loc_586D
.text:0000000000005894 ; } // starts at 5780
.text:0000000000005894 argmatch        endp
.text:0000000000005894
.text:0000000000005894 ; ---------------------------------------------------------------------------
.text:0000000000005896                 align 20h
.text:00000000000058A0
.text:00000000000058A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058A0
.text:00000000000058A0 ; Attributes: info_from_lumina
.text:00000000000058A0
.text:00000000000058A0 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:00000000000058A0                 public argmatch_invalid
.text:00000000000058A0 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:00000000000058A0 ; __unwind {
.text:00000000000058A0                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058A4                 push    r12
.text:00000000000058A6                 mov     edx, 5          ; category
.text:00000000000058AB                 push    rbp
.text:00000000000058AC                 mov     r12, rsi
.text:00000000000058AF                 push    rbx
.text:00000000000058B0                 mov     rbp, rdi
.text:00000000000058B3                 jz      short loc_5900
.text:00000000000058B5                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00000000000058BC                 xor     edi, edi        ; domainname
.text:00000000000058BE                 call    _dcgettext
.text:00000000000058C3                 mov     rbx, rax
.text:00000000000058C6
.text:00000000000058C6 loc_58C6:                               ; CODE XREF: argmatch_invalid+71↓j
.text:00000000000058C6                 mov     rsi, rbp
.text:00000000000058C9                 mov     edi, 1
.text:00000000000058CE                 call    quote_n
.text:00000000000058D3                 mov     rdx, r12
.text:00000000000058D6                 mov     rbp, rax
.text:00000000000058D9                 mov     esi, 8
.text:00000000000058DE                 xor     edi, edi
.text:00000000000058E0                 call    quotearg_n_style
.text:00000000000058E5                 mov     r8, rbp
.text:00000000000058E8                 mov     rdx, rbx        ; format
.text:00000000000058EB                 mov     rcx, rax
.text:00000000000058EE                 pop     rbx
.text:00000000000058EF                 pop     rbp
.text:00000000000058F0                 pop     r12
.text:00000000000058F2                 xor     esi, esi        ; errnum
.text:00000000000058F4                 xor     edi, edi        ; status
.text:00000000000058F6                 xor     eax, eax
.text:00000000000058F8                 jmp     _error
.text:00000000000058F8 ; ---------------------------------------------------------------------------
.text:00000000000058FD                 align 20h
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000005900                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000005907                 xor     edi, edi        ; domainname
.text:0000000000005909                 call    _dcgettext
.text:000000000000590E                 mov     rbx, rax
.text:0000000000005911                 jmp     short loc_58C6
.text:0000000000005911 ; } // starts at 58A0
.text:0000000000005911 argmatch_invalid endp
.text:0000000000005911
.text:0000000000005911 ; ---------------------------------------------------------------------------
.text:0000000000005913                 align 20h
.text:0000000000005920
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920
.text:0000000000005920 ; Attributes: info_from_lumina
.text:0000000000005920
.text:0000000000005920 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005920                 public argmatch_valid
.text:0000000000005920 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 push    r15
.text:0000000000005922                 push    r14
.text:0000000000005924                 mov     r14, rdi
.text:0000000000005927                 push    r13
.text:0000000000005929                 push    r12
.text:000000000000592B                 xor     edi, edi        ; domainname
.text:000000000000592D                 push    rbp
.text:000000000000592E                 push    rbx
.text:000000000000592F                 mov     rbp, rsi
.text:0000000000005932                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000005939                 mov     r12, rdx
.text:000000000000593C                 mov     edx, 5          ; category
.text:0000000000005941                 sub     rsp, 8
.text:0000000000005945                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000594C                 call    _dcgettext
.text:0000000000005951                 mov     rdi, rax        ; s
.text:0000000000005954                 mov     rsi, rbx        ; stream
.text:0000000000005957                 call    _fputs_unlocked
.text:000000000000595C                 mov     r15, [r14]
.text:000000000000595F                 test    r15, r15
.text:0000000000005962                 jz      loc_59F8
.text:0000000000005968                 xor     r13d, r13d
.text:000000000000596B                 xor     ebx, ebx
.text:000000000000596D                 jmp     short loc_59A8
.text:000000000000596D ; ---------------------------------------------------------------------------
.text:000000000000596F                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000005970                                         ; argmatch_valid+9D↓j
.text:0000000000005970                 mov     rdi, r15
.text:0000000000005973                 add     rbx, 1
.text:0000000000005977                 mov     r13, rbp
.text:000000000000597A                 call    quote
.text:000000000000597F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005986                 lea     rdx, aS         ; "\n  - %s"
.text:000000000000598D                 mov     rcx, rax
.text:0000000000005990                 mov     esi, 1
.text:0000000000005995                 xor     eax, eax
.text:0000000000005997                 add     rbp, r12
.text:000000000000599A                 call    ___fprintf_chk
.text:000000000000599F                 mov     r15, [r14+rbx*8]
.text:00000000000059A3                 test    r15, r15
.text:00000000000059A6                 jz      short loc_59F8
.text:00000000000059A8
.text:00000000000059A8 loc_59A8:                               ; CODE XREF: argmatch_valid+4D↑j
.text:00000000000059A8                                         ; argmatch_valid+D2↓j
.text:00000000000059A8                 test    rbx, rbx
.text:00000000000059AB                 jz      short loc_5970
.text:00000000000059AD                 mov     rdx, r12        ; n
.text:00000000000059B0                 mov     rsi, rbp        ; s2
.text:00000000000059B3                 mov     rdi, r13        ; s1
.text:00000000000059B6                 call    _memcmp
.text:00000000000059BB                 test    eax, eax
.text:00000000000059BD                 jnz     short loc_5970
.text:00000000000059BF                 mov     rdi, r15
.text:00000000000059C2                 add     rbx, 1
.text:00000000000059C6                 add     rbp, r12
.text:00000000000059C9                 call    quote
.text:00000000000059CE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000059D5                 lea     rdx, aS_0       ; ", %s"
.text:00000000000059DC                 mov     rcx, rax
.text:00000000000059DF                 mov     esi, 1
.text:00000000000059E4                 xor     eax, eax
.text:00000000000059E6                 call    ___fprintf_chk
.text:00000000000059EB                 mov     r15, [r14+rbx*8]
.text:00000000000059EF                 test    r15, r15
.text:00000000000059F2                 jnz     short loc_59A8
.text:00000000000059F4                 nop     dword ptr [rax+00h]
.text:00000000000059F8
.text:00000000000059F8 loc_59F8:                               ; CODE XREF: argmatch_valid+42↑j
.text:00000000000059F8                                         ; argmatch_valid+86↑j
.text:00000000000059F8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000059FF                 mov     rax, [rdi+28h]
.text:0000000000005A03                 cmp     rax, [rdi+30h]
.text:0000000000005A07                 jnb     short loc_5A28
.text:0000000000005A09                 lea     rdx, [rax+1]
.text:0000000000005A0D                 mov     [rdi+28h], rdx
.text:0000000000005A11                 mov     byte ptr [rax], 0Ah
.text:0000000000005A14                 add     rsp, 8
.text:0000000000005A18                 pop     rbx
.text:0000000000005A19                 pop     rbp
.text:0000000000005A1A                 pop     r12
.text:0000000000005A1C                 pop     r13
.text:0000000000005A1E                 pop     r14
.text:0000000000005A20                 pop     r15
.text:0000000000005A22                 retn
.text:0000000000005A22 ; ---------------------------------------------------------------------------
.text:0000000000005A23                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000005A28                 add     rsp, 8
.text:0000000000005A2C                 mov     esi, 0Ah        ; int
.text:0000000000005A31                 pop     rbx
.text:0000000000005A32                 pop     rbp
.text:0000000000005A33                 pop     r12
.text:0000000000005A35                 pop     r13
.text:0000000000005A37                 pop     r14
.text:0000000000005A39                 pop     r15
.text:0000000000005A3B                 jmp     ___overflow
.text:0000000000005A3B ; } // starts at 5920
.text:0000000000005A3B argmatch_valid  endp
.text:0000000000005A3B
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40 ; Attributes: info_from_lumina
.text:0000000000005A40
.text:0000000000005A40 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000005A40                 public __xargmatch_internal
.text:0000000000005A40 __xargmatch_internal proc near          ; CODE XREF: main+1EC↑p
.text:0000000000005A40                                         ; main+2B6↑p ...
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 push    r15
.text:0000000000005A42                 push    r14
.text:0000000000005A44                 mov     r14, rdi
.text:0000000000005A47                 push    r13
.text:0000000000005A49                 push    r12
.text:0000000000005A4B                 mov     r12, rsi
.text:0000000000005A4E                 push    rbp
.text:0000000000005A4F                 push    rbx
.text:0000000000005A50                 mov     rbp, rcx
.text:0000000000005A53                 mov     rbx, rdx
.text:0000000000005A56                 mov     rcx, r8
.text:0000000000005A59                 mov     rdx, rbp
.text:0000000000005A5C                 sub     rsp, 8
.text:0000000000005A60                 mov     rsi, rbx
.text:0000000000005A63                 mov     rdi, r12
.text:0000000000005A66                 mov     r15, r8
.text:0000000000005A69                 mov     r13, r9
.text:0000000000005A6C                 call    argmatch
.text:0000000000005A71                 test    rax, rax
.text:0000000000005A74                 js      short loc_5A85
.text:0000000000005A76
.text:0000000000005A76 loc_5A76:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000005A76                 add     rsp, 8
.text:0000000000005A7A                 pop     rbx
.text:0000000000005A7B                 pop     rbp
.text:0000000000005A7C                 pop     r12
.text:0000000000005A7E                 pop     r13
.text:0000000000005A80                 pop     r14
.text:0000000000005A82                 pop     r15
.text:0000000000005A84                 retn
.text:0000000000005A85 ; ---------------------------------------------------------------------------
.text:0000000000005A85
.text:0000000000005A85 loc_5A85:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000005A85                 mov     rdx, rax
.text:0000000000005A88                 mov     rsi, r12
.text:0000000000005A8B                 mov     rdi, r14
.text:0000000000005A8E                 call    argmatch_invalid
.text:0000000000005A93                 mov     rdx, r15
.text:0000000000005A96                 mov     rsi, rbp
.text:0000000000005A99                 mov     rdi, rbx
.text:0000000000005A9C                 call    argmatch_valid
.text:0000000000005AA1                 call    r13
.text:0000000000005AA4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AAB                 jmp     short loc_5A76
.text:0000000000005AAB ; } // starts at 5A40
.text:0000000000005AAB __xargmatch_internal endp
.text:0000000000005AAB
.text:0000000000005AAB ; ---------------------------------------------------------------------------
.text:0000000000005AAD                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0 ; Attributes: info_from_lumina
.text:0000000000005AB0
.text:0000000000005AB0 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005AB0                 public argmatch_to_argument
.text:0000000000005AB0 argmatch_to_argument proc near
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 push    r14
.text:0000000000005AB2                 push    r13
.text:0000000000005AB4                 push    r12
.text:0000000000005AB6                 push    rbp
.text:0000000000005AB7                 push    rbx
.text:0000000000005AB8                 mov     r14, [rsi]
.text:0000000000005ABB                 test    r14, r14
.text:0000000000005ABE                 jz      short loc_5AF1
.text:0000000000005AC0                 mov     r12, rcx
.text:0000000000005AC3                 mov     r13, rdi
.text:0000000000005AC6                 mov     rbp, rdx
.text:0000000000005AC9                 lea     rbx, [rsi+8]
.text:0000000000005ACD                 jmp     short loc_5ADF
.text:0000000000005ACD ; ---------------------------------------------------------------------------
.text:0000000000005ACF                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000005AD0                 mov     r14, [rbx]
.text:0000000000005AD3                 add     rbp, r12
.text:0000000000005AD6                 add     rbx, 8
.text:0000000000005ADA                 test    r14, r14
.text:0000000000005ADD                 jz      short loc_5AF1
.text:0000000000005ADF
.text:0000000000005ADF loc_5ADF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000005ADF                 mov     rdx, r12        ; n
.text:0000000000005AE2                 mov     rsi, rbp        ; s2
.text:0000000000005AE5                 mov     rdi, r13        ; s1
.text:0000000000005AE8                 call    _memcmp
.text:0000000000005AED                 test    eax, eax
.text:0000000000005AEF                 jnz     short loc_5AD0
.text:0000000000005AF1
.text:0000000000005AF1 loc_5AF1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000005AF1                                         ; argmatch_to_argument+2D↑j
.text:0000000000005AF1                 pop     rbx
.text:0000000000005AF2                 mov     rax, r14
.text:0000000000005AF5                 pop     rbp
.text:0000000000005AF6                 pop     r12
.text:0000000000005AF8                 pop     r13
.text:0000000000005AFA                 pop     r14
.text:0000000000005AFC                 retn
.text:0000000000005AFC ; } // starts at 5AB0
.text:0000000000005AFC argmatch_to_argument endp
.text:0000000000005AFC
.text:0000000000005AFC ; ---------------------------------------------------------------------------
.text:0000000000005AFD                 align 20h
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00
.text:0000000000005B00                 public close_stdout_set_file_name
.text:0000000000005B00 close_stdout_set_file_name proc near
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 mov     cs:file_name, rdi
.text:0000000000005B07                 retn
.text:0000000000005B07 ; } // starts at 5B00
.text:0000000000005B07 close_stdout_set_file_name endp
.text:0000000000005B07
.text:0000000000005B07 ; ---------------------------------------------------------------------------
.text:0000000000005B08                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10
.text:0000000000005B10                 public close_stdout_set_ignore_EPIPE
.text:0000000000005B10 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 mov     cs:ignore_EPIPE, dil
.text:0000000000005B17                 retn
.text:0000000000005B17 ; } // starts at 5B10
.text:0000000000005B17 close_stdout_set_ignore_EPIPE endp
.text:0000000000005B17
.text:0000000000005B17 ; ---------------------------------------------------------------------------
.text:0000000000005B18                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20 ; Attributes: info_from_lumina
.text:0000000000005B20
.text:0000000000005B20 ; void __cdecl close_stdout()
.text:0000000000005B20                 public close_stdout
.text:0000000000005B20 close_stdout    proc near               ; DATA XREF: main+94↑o
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 push    rbp
.text:0000000000005B21                 push    rbx
.text:0000000000005B22                 sub     rsp, 8
.text:0000000000005B26                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005B2D                 call    close_stream
.text:0000000000005B32                 test    eax, eax
.text:0000000000005B34                 jz      short loc_5B4C
.text:0000000000005B36                 call    ___errno_location
.text:0000000000005B3B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005B42                 mov     rbx, rax
.text:0000000000005B45                 jz      short loc_5B63
.text:0000000000005B47                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000005B4A                 jnz     short loc_5B63
.text:0000000000005B4C
.text:0000000000005B4C loc_5B4C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000005B4C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005B53                 call    close_stream
.text:0000000000005B58                 test    eax, eax
.text:0000000000005B5A                 jnz     short loc_5BA2
.text:0000000000005B5C                 add     rsp, 8
.text:0000000000005B60                 pop     rbx
.text:0000000000005B61                 pop     rbp
.text:0000000000005B62                 retn
.text:0000000000005B63 ; ---------------------------------------------------------------------------
.text:0000000000005B63
.text:0000000000005B63 loc_5B63:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005B63                                         ; close_stdout+2A↑j
.text:0000000000005B63                 lea     rsi, aWriteError ; "write error"
.text:0000000000005B6A                 xor     edi, edi        ; domainname
.text:0000000000005B6C                 mov     edx, 5          ; category
.text:0000000000005B71                 call    _dcgettext
.text:0000000000005B76                 mov     rdi, cs:file_name
.text:0000000000005B7D                 mov     rbp, rax
.text:0000000000005B80                 test    rdi, rdi
.text:0000000000005B83                 jz      short loc_5BAD
.text:0000000000005B85                 call    quotearg_colon
.text:0000000000005B8A                 mov     esi, [rbx]      ; errnum
.text:0000000000005B8C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005B93                 mov     rcx, rax
.text:0000000000005B96                 mov     r8, rbp
.text:0000000000005B99                 xor     edi, edi        ; status
.text:0000000000005B9B                 xor     eax, eax
.text:0000000000005B9D                 call    _error
.text:0000000000005BA2
.text:0000000000005BA2 loc_5BA2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005BA2                                         ; close_stdout+A2↓j
.text:0000000000005BA2                 mov     edi, cs:exit_failure ; status
.text:0000000000005BA8                 call    __exit
.text:0000000000005BAD ; ---------------------------------------------------------------------------
.text:0000000000005BAD
.text:0000000000005BAD loc_5BAD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000005BAD                 mov     esi, [rbx]      ; errnum
.text:0000000000005BAF                 lea     rdx, aS_0+2     ; format
.text:0000000000005BB6                 mov     rcx, rax
.text:0000000000005BB9                 xor     edi, edi        ; status
.text:0000000000005BBB                 xor     eax, eax
.text:0000000000005BBD                 call    _error
.text:0000000000005BC2                 jmp     short loc_5BA2
.text:0000000000005BC2 ; } // starts at 5B20
.text:0000000000005BC2 close_stdout    endp
.text:0000000000005BC2
.text:0000000000005BC2 ; ---------------------------------------------------------------------------
.text:0000000000005BC4                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; size_t __fastcall mbsalign(const char *src, char *dest, size_t dest_size, size_t *width, mbs_align_t align, int flags)
.text:0000000000005BD0                 public mbsalign
.text:0000000000005BD0 mbsalign        proc near               ; CODE XREF: process_field+14E6↑p
.text:0000000000005BD0                                         ; ambsalign+59↓p
.text:0000000000005BD0
.text:0000000000005BD0 ptr             = qword ptr -68h
.text:0000000000005BD0 s               = qword ptr -60h
.text:0000000000005BD0 var_58          = qword ptr -58h
.text:0000000000005BD0 var_4C          = dword ptr -4Ch
.text:0000000000005BD0 size            = qword ptr -48h
.text:0000000000005BD0 var_40          = qword ptr -40h
.text:0000000000005BD0
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 push    r15
.text:0000000000005BD2                 push    r14
.text:0000000000005BD4                 mov     r14, rdi
.text:0000000000005BD7                 push    r13
.text:0000000000005BD9                 push    r12
.text:0000000000005BDB                 mov     r13, rsi
.text:0000000000005BDE                 push    rbp
.text:0000000000005BDF                 push    rbx
.text:0000000000005BE0                 mov     ebx, r9d
.text:0000000000005BE3                 mov     r12, rcx
.text:0000000000005BE6                 sub     rsp, 38h
.text:0000000000005BEA                 mov     [rsp+68h+var_58], rdx
.text:0000000000005BEF                 mov     [rsp+68h+var_4C], r8d
.text:0000000000005BF4                 call    _strlen
.text:0000000000005BF9                 test    bl, 2
.text:0000000000005BFC                 mov     r15, rax
.text:0000000000005BFF                 mov     [rsp+68h+s], rax
.text:0000000000005C04                 jz      loc_5D70
.text:0000000000005C0A
.text:0000000000005C0A loc_5C0A:                               ; CODE XREF: mbsalign+1A9↓j
.text:0000000000005C0A                                         ; mbsalign+1C4↓j
.text:0000000000005C0A                 mov     rbp, r15
.text:0000000000005C0D                 mov     [rsp+68h+ptr], 0
.text:0000000000005C15                 mov     [rsp+68h+s], 0
.text:0000000000005C1E
.text:0000000000005C1E loc_5C1E:                               ; CODE XREF: mbsalign+32F↓j
.text:0000000000005C1E                                         ; mbsalign+340↓j ...
.text:0000000000005C1E                 mov     rax, [r12]
.text:0000000000005C22                 cmp     rax, rbp
.text:0000000000005C25                 jnb     loc_5D39
.text:0000000000005C2B                 mov     r15, rax
.text:0000000000005C2E                 xor     edx, edx
.text:0000000000005C30
.text:0000000000005C30 loc_5C30:                               ; CODE XREF: mbsalign+3BF↓j
.text:0000000000005C30                 mov     [r12], rax
.text:0000000000005C34                 mov     eax, [rsp+68h+var_4C]
.text:0000000000005C38                 test    eax, eax
.text:0000000000005C3A                 jz      loc_5D5B
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: mbsalign+185↓j
.text:0000000000005C40                 xor     ebp, ebp
.text:0000000000005C42                 cmp     eax, 1
.text:0000000000005C45                 jz      short loc_5C53
.text:0000000000005C47                 mov     rbp, rdx
.text:0000000000005C4A                 and     edx, 1
.text:0000000000005C4D                 shr     rbp, 1
.text:0000000000005C50                 add     rdx, rbp
.text:0000000000005C53
.text:0000000000005C53 loc_5C53:                               ; CODE XREF: mbsalign+75↑j
.text:0000000000005C53                                         ; mbsalign+190↓j
.text:0000000000005C53                 test    bl, 4
.text:0000000000005C56                 lea     r12, [rdx+r15]
.text:0000000000005C5A                 jz      short loc_5C61
.text:0000000000005C5C                 mov     r12, r15
.text:0000000000005C5F                 xor     edx, edx
.text:0000000000005C61
.text:0000000000005C61 loc_5C61:                               ; CODE XREF: mbsalign+8A↑j
.text:0000000000005C61                 and     ebx, 8
.text:0000000000005C64                 jnz     loc_5D68
.text:0000000000005C6A                 add     r12, rbp
.text:0000000000005C6D
.text:0000000000005C6D loc_5C6D:                               ; CODE XREF: mbsalign+19A↓j
.text:0000000000005C6D                 mov     rax, [rsp+68h+var_58]
.text:0000000000005C72                 test    rax, rax
.text:0000000000005C75                 jz      loc_5D01
.text:0000000000005C7B                 lea     rbx, [r13+rax-1]
.text:0000000000005C80                 lea     rax, [rdx-1]
.text:0000000000005C84                 cmp     r13, rbx
.text:0000000000005C87                 jnb     short loc_5CAF
.text:0000000000005C89                 test    rdx, rdx
.text:0000000000005C8C                 jz      short loc_5CAF
.text:0000000000005C8E                 xchg    ax, ax
.text:0000000000005C90
.text:0000000000005C90 loc_5C90:                               ; CODE XREF: mbsalign+DD↓j
.text:0000000000005C90                 add     r13, 1
.text:0000000000005C94                 mov     byte ptr [r13-1], 20h ; ' '
.text:0000000000005C99                 cmp     rbx, r13
.text:0000000000005C9C                 setnbe  sil
.text:0000000000005CA0                 test    rax, rax
.text:0000000000005CA3                 setnz   dl
.text:0000000000005CA6                 sub     rax, 1
.text:0000000000005CAA                 test    sil, dl
.text:0000000000005CAD                 jnz     short loc_5C90
.text:0000000000005CAF
.text:0000000000005CAF loc_5CAF:                               ; CODE XREF: mbsalign+B7↑j
.text:0000000000005CAF                                         ; mbsalign+BC↑j
.text:0000000000005CAF                 mov     rdx, rbx
.text:0000000000005CB2                 mov     byte ptr [r13+0], 0
.text:0000000000005CB7                 mov     rsi, r14        ; src
.text:0000000000005CBA                 sub     rdx, r13
.text:0000000000005CBD                 mov     rdi, r13        ; dest
.text:0000000000005CC0                 cmp     rdx, r15
.text:0000000000005CC3                 cmova   rdx, r15        ; n
.text:0000000000005CC7                 call    _mempcpy
.text:0000000000005CCC                 cmp     rbx, rax
.text:0000000000005CCF                 lea     rdx, [rbp-1]
.text:0000000000005CD3                 jbe     short loc_5CFE
.text:0000000000005CD5                 test    rbp, rbp
.text:0000000000005CD8                 jz      short loc_5CFE
.text:0000000000005CDA                 nop     word ptr [rax+rax+00h]
.text:0000000000005CE0
.text:0000000000005CE0 loc_5CE0:                               ; CODE XREF: mbsalign+12C↓j
.text:0000000000005CE0                 add     rax, 1
.text:0000000000005CE4                 test    rdx, rdx
.text:0000000000005CE7                 mov     byte ptr [rax-1], 20h ; ' '
.text:0000000000005CEB                 setnz   sil
.text:0000000000005CEF                 cmp     rbx, rax
.text:0000000000005CF2                 setnbe  cl
.text:0000000000005CF5                 sub     rdx, 1
.text:0000000000005CF9                 test    sil, cl
.text:0000000000005CFC                 jnz     short loc_5CE0
.text:0000000000005CFE
.text:0000000000005CFE loc_5CFE:                               ; CODE XREF: mbsalign+103↑j
.text:0000000000005CFE                                         ; mbsalign+108↑j
.text:0000000000005CFE                 mov     byte ptr [rax], 0
.text:0000000000005D01
.text:0000000000005D01 loc_5D01:                               ; CODE XREF: mbsalign+A5↑j
.text:0000000000005D01                                         ; mbsalign+1E2↓j ...
.text:0000000000005D01                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:0000000000005D05                 call    _free
.text:0000000000005D0A                 mov     rdi, [rsp+68h+s] ; ptr
.text:0000000000005D0F                 call    _free
.text:0000000000005D14                 add     rsp, 38h
.text:0000000000005D18                 mov     rax, r12
.text:0000000000005D1B                 pop     rbx
.text:0000000000005D1C                 pop     rbp
.text:0000000000005D1D                 pop     r12
.text:0000000000005D1F                 pop     r13
.text:0000000000005D21                 pop     r14
.text:0000000000005D23                 pop     r15
.text:0000000000005D25                 retn
.text:0000000000005D25 ; ---------------------------------------------------------------------------
.text:0000000000005D26                 align 10h
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: mbsalign+35F↓j
.text:0000000000005D30                 mov     [rsp+68h+s], 0
.text:0000000000005D39
.text:0000000000005D39 loc_5D39:                               ; CODE XREF: mbsalign+55↑j
.text:0000000000005D39                 cmp     rbp, rax
.text:0000000000005D3C                 jnb     loc_5F8A
.text:0000000000005D42                 sub     rax, rbp
.text:0000000000005D45                 mov     rdx, rax
.text:0000000000005D48                 mov     rax, rbp
.text:0000000000005D4B                 mov     [r12], rax
.text:0000000000005D4F                 mov     eax, [rsp+68h+var_4C]
.text:0000000000005D53                 test    eax, eax
.text:0000000000005D55                 jnz     loc_5C40
.text:0000000000005D5B
.text:0000000000005D5B loc_5D5B:                               ; CODE XREF: mbsalign+6A↑j
.text:0000000000005D5B                 mov     rbp, rdx
.text:0000000000005D5E                 xor     edx, edx
.text:0000000000005D60                 jmp     loc_5C53
.text:0000000000005D60 ; ---------------------------------------------------------------------------
.text:0000000000005D65                 align 8
.text:0000000000005D68
.text:0000000000005D68 loc_5D68:                               ; CODE XREF: mbsalign+94↑j
.text:0000000000005D68                 xor     ebp, ebp
.text:0000000000005D6A                 jmp     loc_5C6D
.text:0000000000005D6A ; ---------------------------------------------------------------------------
.text:0000000000005D6F                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: mbsalign+34↑j
.text:0000000000005D70                 call    ___ctype_get_mb_cur_max
.text:0000000000005D75                 cmp     rax, 1
.text:0000000000005D79                 jbe     loc_5C0A
.text:0000000000005D7F                 xor     edx, edx        ; n
.text:0000000000005D81                 xor     edi, edi        ; pwcs
.text:0000000000005D83                 mov     rsi, r14        ; s
.text:0000000000005D86                 call    _mbstowcs
.text:0000000000005D8B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D8F                 jnz     short loc_5DC0
.text:0000000000005D91                 test    bl, 1
.text:0000000000005D94                 jnz     loc_5C0A
.text:0000000000005D9A
.text:0000000000005D9A loc_5D9A:                               ; CODE XREF: mbsalign+3AA↓j
.text:0000000000005D9A                 mov     [rsp+68h+ptr], 0
.text:0000000000005DA2                 mov     [rsp+68h+s], 0
.text:0000000000005DAB                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DB2                 jmp     loc_5D01
.text:0000000000005DB2 ; ---------------------------------------------------------------------------
.text:0000000000005DB7                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: mbsalign+1BF↑j
.text:0000000000005DC0                 lea     rbp, [rax+1]
.text:0000000000005DC4                 lea     rax, ds:0[rbp*4]
.text:0000000000005DCC                 mov     rdi, rax        ; size
.text:0000000000005DCF                 mov     [rsp+68h+size], rax
.text:0000000000005DD4                 call    _malloc
.text:0000000000005DD9                 test    rax, rax
.text:0000000000005DDC                 mov     [rsp+68h+ptr], rax
.text:0000000000005DE0                 jz      loc_5F65
.text:0000000000005DE6                 mov     rdi, [rsp+68h+ptr] ; pwcs
.text:0000000000005DEA                 mov     rdx, rbp        ; n
.text:0000000000005DED                 mov     rsi, r14        ; s
.text:0000000000005DF0                 call    _mbstowcs
.text:0000000000005DF5                 test    rax, rax
.text:0000000000005DF8                 jz      loc_5F04
.text:0000000000005DFE                 mov     rax, [rsp+68h+ptr]
.text:0000000000005E02                 mov     rcx, [rsp+68h+size]
.text:0000000000005E07                 mov     dword ptr [rax+rcx-4], 0
.text:0000000000005E0F                 mov     edi, [rax]      ; wc
.text:0000000000005E11                 mov     rdx, rax
.text:0000000000005E14                 test    edi, edi
.text:0000000000005E16                 jz      loc_5F15
.text:0000000000005E1C                 mov     byte ptr [rsp+68h+size], 0
.text:0000000000005E21                 nop     dword ptr [rax+00000000h]
.text:0000000000005E28
.text:0000000000005E28 loc_5E28:                               ; CODE XREF: mbsalign+27E↓j
.text:0000000000005E28                 mov     [rsp+68h+var_40], rdx
.text:0000000000005E2D                 call    _iswprint
.text:0000000000005E32                 test    eax, eax
.text:0000000000005E34                 mov     rdx, [rsp+68h+var_40]
.text:0000000000005E39                 jnz     short loc_5E46
.text:0000000000005E3B                 mov     dword ptr [rdx], 0FFFDh
.text:0000000000005E41                 mov     byte ptr [rsp+68h+size], 1
.text:0000000000005E46
.text:0000000000005E46 loc_5E46:                               ; CODE XREF: mbsalign+269↑j
.text:0000000000005E46                 add     rdx, 4
.text:0000000000005E4A                 mov     edi, [rdx]
.text:0000000000005E4C                 test    edi, edi
.text:0000000000005E4E                 jnz     short loc_5E28
.text:0000000000005E50                 mov     rdi, [rsp+68h+ptr] ; s
.text:0000000000005E54                 mov     rsi, rbp        ; n
.text:0000000000005E57                 call    _wcswidth
.text:0000000000005E5C                 cmp     byte ptr [rsp+68h+size], 0
.text:0000000000005E61                 movsxd  rbp, eax
.text:0000000000005E64                 jz      loc_5F28
.text:0000000000005E6A                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:0000000000005E6E                 xor     edx, edx        ; n
.text:0000000000005E70                 xor     edi, edi        ; s
.text:0000000000005E72                 call    _wcstombs
.text:0000000000005E77                 add     rax, 1
.text:0000000000005E7B                 mov     [rsp+68h+size], rax
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: mbsalign+373↓j
.text:0000000000005E80                 mov     rdi, [rsp+68h+size] ; size
.text:0000000000005E85                 call    _malloc
.text:0000000000005E8A                 test    rax, rax
.text:0000000000005E8D                 mov     [rsp+68h+s], rax
.text:0000000000005E92                 jz      loc_5F50
.text:0000000000005E98                 mov     r15, [rsp+68h+ptr]
.text:0000000000005E9C                 mov     r14, [r12]
.text:0000000000005EA0                 mov     edi, [r15]
.text:0000000000005EA3                 test    edi, edi
.text:0000000000005EA5                 jz      loc_5F7F
.text:0000000000005EAB                 xor     ebp, ebp
.text:0000000000005EAD                 jmp     short loc_5EBE
.text:0000000000005EAD ; ---------------------------------------------------------------------------
.text:0000000000005EAF                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 loc_5EB0:                               ; CODE XREF: mbsalign+30D↓j
.text:0000000000005EB0                 add     r15, 4
.text:0000000000005EB4                 mov     edi, [r15]      ; c
.text:0000000000005EB7                 mov     rbp, rdx
.text:0000000000005EBA                 test    edi, edi
.text:0000000000005EBC                 jz      short loc_5EDF
.text:0000000000005EBE
.text:0000000000005EBE loc_5EBE:                               ; CODE XREF: mbsalign+2DD↑j
.text:0000000000005EBE                 call    _wcwidth
.text:0000000000005EC3                 cmp     eax, 0FFFFFFFFh
.text:0000000000005EC6                 movsxd  rdx, eax
.text:0000000000005EC9                 jnz     short loc_5ED7
.text:0000000000005ECB                 mov     dword ptr [r15], 0FFFDh
.text:0000000000005ED2                 mov     edx, 1
.text:0000000000005ED7
.text:0000000000005ED7 loc_5ED7:                               ; CODE XREF: mbsalign+2F9↑j
.text:0000000000005ED7                 add     rdx, rbp
.text:0000000000005EDA                 cmp     r14, rdx
.text:0000000000005EDD                 jnb     short loc_5EB0
.text:0000000000005EDF
.text:0000000000005EDF loc_5EDF:                               ; CODE XREF: mbsalign+2EC↑j
.text:0000000000005EDF                                         ; mbsalign+3B5↓j
.text:0000000000005EDF                 mov     r14, [rsp+68h+s]
.text:0000000000005EE4                 mov     rdx, [rsp+68h+size] ; n
.text:0000000000005EE9                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:0000000000005EED                 mov     dword ptr [r15], 0
.text:0000000000005EF4                 mov     rdi, r14        ; s
.text:0000000000005EF7                 call    _wcstombs
.text:0000000000005EFC                 mov     r15, rax
.text:0000000000005EFF                 jmp     loc_5C1E
.text:0000000000005F04 ; ---------------------------------------------------------------------------
.text:0000000000005F04
.text:0000000000005F04 loc_5F04:                               ; CODE XREF: mbsalign+228↑j
.text:0000000000005F04                 mov     rbp, r15
.text:0000000000005F07                 mov     [rsp+68h+s], 0
.text:0000000000005F10                 jmp     loc_5C1E
.text:0000000000005F15 ; ---------------------------------------------------------------------------
.text:0000000000005F15
.text:0000000000005F15 loc_5F15:                               ; CODE XREF: mbsalign+246↑j
.text:0000000000005F15                 mov     rdi, [rsp+68h+ptr] ; s
.text:0000000000005F19                 mov     rsi, rbp        ; n
.text:0000000000005F1C                 call    _wcswidth
.text:0000000000005F21                 movsxd  rbp, eax
.text:0000000000005F24                 nop     dword ptr [rax+00h]
.text:0000000000005F28
.text:0000000000005F28 loc_5F28:                               ; CODE XREF: mbsalign+294↑j
.text:0000000000005F28                 mov     rax, [r12]
.text:0000000000005F2C                 cmp     rax, rbp
.text:0000000000005F2F                 jnb     loc_5D30
.text:0000000000005F35                 mov     rax, [rsp+68h+s]
.text:0000000000005F3A                 add     rax, 1
.text:0000000000005F3E                 mov     [rsp+68h+size], rax
.text:0000000000005F43                 jmp     loc_5E80
.text:0000000000005F43 ; ---------------------------------------------------------------------------
.text:0000000000005F48                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: mbsalign+2C2↑j
.text:0000000000005F50                 test    bl, 1
.text:0000000000005F53                 jnz     loc_5C1E
.text:0000000000005F59                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F60                 jmp     loc_5D01
.text:0000000000005F65 ; ---------------------------------------------------------------------------
.text:0000000000005F65
.text:0000000000005F65 loc_5F65:                               ; CODE XREF: mbsalign+210↑j
.text:0000000000005F65                 test    bl, 1
.text:0000000000005F68                 mov     rbp, r15
.text:0000000000005F6B                 mov     [rsp+68h+s], 0
.text:0000000000005F74                 jnz     loc_5C1E
.text:0000000000005F7A                 jmp     loc_5D9A
.text:0000000000005F7F ; ---------------------------------------------------------------------------
.text:0000000000005F7F
.text:0000000000005F7F loc_5F7F:                               ; CODE XREF: mbsalign+2D5↑j
.text:0000000000005F7F                 mov     r15, [rsp+68h+ptr]
.text:0000000000005F83                 xor     ebp, ebp
.text:0000000000005F85                 jmp     loc_5EDF
.text:0000000000005F8A ; ---------------------------------------------------------------------------
.text:0000000000005F8A
.text:0000000000005F8A loc_5F8A:                               ; CODE XREF: mbsalign+16C↑j
.text:0000000000005F8A                 mov     rax, rbp
.text:0000000000005F8D                 xor     edx, edx
.text:0000000000005F8F                 jmp     loc_5C30
.text:0000000000005F8F ; } // starts at 5BD0
.text:0000000000005F8F mbsalign        endp
.text:0000000000005F8F
.text:0000000000005F8F ; ---------------------------------------------------------------------------
.text:0000000000005F94                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FA0
.text:0000000000005FA0 ; Attributes: info_from_lumina
.text:0000000000005FA0
.text:0000000000005FA0 ; char *__fastcall ambsalign(const char *src, size_t *width, mbs_align_t align, int flags)
.text:0000000000005FA0                 public ambsalign
.text:0000000000005FA0 ambsalign       proc near
.text:0000000000005FA0
.text:0000000000005FA0 var_40          = dword ptr -40h
.text:0000000000005FA0 var_3C          = dword ptr -3Ch
.text:0000000000005FA0
.text:0000000000005FA0 ; __unwind {
.text:0000000000005FA0                 push    r15
.text:0000000000005FA2                 push    r14
.text:0000000000005FA4                 mov     r15, rdi
.text:0000000000005FA7                 push    r13
.text:0000000000005FA9                 push    r12
.text:0000000000005FAB                 xor     r12d, r12d
.text:0000000000005FAE                 push    rbp
.text:0000000000005FAF                 push    rbx
.text:0000000000005FB0                 mov     rbp, rsi
.text:0000000000005FB3                 sub     rsp, 18h
.text:0000000000005FB7                 mov     r13, [rsi]
.text:0000000000005FBA                 mov     [rsp+48h+var_40], edx
.text:0000000000005FBE                 mov     [rsp+48h+var_3C], ecx
.text:0000000000005FC2                 mov     rax, r13
.text:0000000000005FC5                 nop     dword ptr [rax]
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: ambsalign+6A↓j
.text:0000000000005FC8                 lea     rbx, [rax+1]
.text:0000000000005FCC                 mov     rdi, r12        ; ptr
.text:0000000000005FCF                 mov     rsi, rbx        ; size
.text:0000000000005FD2                 call    _realloc
.text:0000000000005FD7                 test    rax, rax
.text:0000000000005FDA                 mov     r14, rax
.text:0000000000005FDD                 jz      short loc_6020
.text:0000000000005FDF                 mov     r9d, [rsp+48h+var_3C]
.text:0000000000005FE4                 mov     r8d, [rsp+48h+var_40]
.text:0000000000005FE9                 mov     rcx, rbp
.text:0000000000005FEC                 mov     [rbp+0], r13
.text:0000000000005FF0                 mov     rdx, rbx
.text:0000000000005FF3                 mov     rsi, rax        ; dest
.text:0000000000005FF6                 mov     rdi, r15        ; s
.text:0000000000005FF9                 call    mbsalign
.text:0000000000005FFE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006002                 jz      short loc_6030
.text:0000000000006004                 cmp     rbx, rax
.text:0000000000006007                 mov     r12, r14
.text:000000000000600A                 jbe     short loc_5FC8
.text:000000000000600C
.text:000000000000600C loc_600C:                               ; CODE XREF: ambsalign+88↓j
.text:000000000000600C                                         ; ambsalign+9B↓j
.text:000000000000600C                 add     rsp, 18h
.text:0000000000006010                 mov     rax, r14
.text:0000000000006013                 pop     rbx
.text:0000000000006014                 pop     rbp
.text:0000000000006015                 pop     r12
.text:0000000000006017                 pop     r13
.text:0000000000006019                 pop     r14
.text:000000000000601B                 pop     r15
.text:000000000000601D                 retn
.text:000000000000601D ; ---------------------------------------------------------------------------
.text:000000000000601E                 align 20h
.text:0000000000006020
.text:0000000000006020 loc_6020:                               ; CODE XREF: ambsalign+3D↑j
.text:0000000000006020                 mov     rdi, r12        ; ptr
.text:0000000000006023                 call    _free
.text:0000000000006028                 jmp     short loc_600C
.text:0000000000006028 ; ---------------------------------------------------------------------------
.text:000000000000602A                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: ambsalign+62↑j
.text:0000000000006030                 mov     rdi, r14        ; ptr
.text:0000000000006033                 xor     r14d, r14d
.text:0000000000006036                 call    _free
.text:000000000000603B                 jmp     short loc_600C
.text:000000000000603B ; } // starts at 5FA0
.text:000000000000603B ambsalign       endp
.text:000000000000603B
.text:000000000000603B ; ---------------------------------------------------------------------------
.text:000000000000603D                 align 20h
.text:0000000000006040
.text:0000000000006040 ; =============== S U B R O U T I N E =======================================
.text:0000000000006040
.text:0000000000006040
.text:0000000000006040                 public set_program_name
.text:0000000000006040 set_program_name proc near              ; CODE XREF: main+26↑p
.text:0000000000006040 ; __unwind {
.text:0000000000006040                 test    rdi, rdi
.text:0000000000006043                 push    rbx
.text:0000000000006044                 jz      short loc_60BD
.text:0000000000006046                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000604B                 mov     rbx, rdi
.text:000000000000604E                 call    _strrchr
.text:0000000000006053                 test    rax, rax
.text:0000000000006056                 jz      short loc_60AD
.text:0000000000006058                 lea     r8, [rax+1]
.text:000000000000605C                 mov     rdx, r8
.text:000000000000605F                 sub     rdx, rbx
.text:0000000000006062                 cmp     rdx, 6
.text:0000000000006066                 jle     short loc_60AD
.text:0000000000006068                 lea     rsi, [rax-6]
.text:000000000000606C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000006073                 mov     ecx, 7
.text:0000000000006078                 repe cmpsb
.text:000000000000607A                 setnbe  dl
.text:000000000000607D                 sbb     dl, 0
.text:0000000000006080                 test    dl, dl
.text:0000000000006082                 jnz     short loc_60AD
.text:0000000000006084                 lea     rdi, aLt        ; "lt-"
.text:000000000000608B                 mov     ecx, 3
.text:0000000000006090                 mov     rsi, r8
.text:0000000000006093                 mov     rbx, r8
.text:0000000000006096                 repe cmpsb
.text:0000000000006098                 setnbe  dl
.text:000000000000609B                 sbb     dl, 0
.text:000000000000609E                 test    dl, dl
.text:00000000000060A0                 jnz     short loc_60AD
.text:00000000000060A2                 lea     rbx, [rax+4]
.text:00000000000060A6                 mov     cs:__bss_start, rbx
.text:00000000000060AD
.text:00000000000060AD loc_60AD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000060AD                                         ; set_program_name+26↑j ...
.text:00000000000060AD                 mov     cs:program_name, rbx
.text:00000000000060B4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000060BB                 pop     rbx
.text:00000000000060BC                 retn
.text:00000000000060BD ; ---------------------------------------------------------------------------
.text:00000000000060BD
.text:00000000000060BD loc_60BD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000060BD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000060C4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000060CB                 mov     edx, 37h ; '7'  ; n
.text:00000000000060D0                 mov     esi, 1          ; size
.text:00000000000060D5                 call    _fwrite
.text:00000000000060DA                 call    _abort
.text:00000000000060DA ; } // starts at 6040
.text:00000000000060DA set_program_name endp
.text:00000000000060DA
.text:00000000000060DA ; ---------------------------------------------------------------------------
.text:00000000000060DF                 align 20h
.text:00000000000060E0
.text:00000000000060E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060E0
.text:00000000000060E0 ; Attributes: info_from_lumina
.text:00000000000060E0
.text:00000000000060E0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000060E0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000060E0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000060E0 ; __unwind {
.text:00000000000060E0                 push    rbp
.text:00000000000060E1                 push    rbx
.text:00000000000060E2                 mov     rbp, rdi
.text:00000000000060E5                 mov     ebx, esi
.text:00000000000060E7                 sub     rsp, 8
.text:00000000000060EB                 call    locale_charset
.text:00000000000060F0                 movzx   edx, byte ptr [rax]
.text:00000000000060F3                 and     edx, 0FFFFFFDFh
.text:00000000000060F6                 cmp     dl, 55h ; 'U'
.text:00000000000060F9                 jz      short loc_6170
.text:00000000000060FB                 cmp     dl, 47h ; 'G'
.text:00000000000060FE                 jz      short loc_6120
.text:0000000000006100
.text:0000000000006100 loc_6100:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000006100                                         ; gettext_quote+50↓j ...
.text:0000000000006100                 lea     rax, unk_B46B
.text:0000000000006107                 lea     rdx, asc_B46D   ; "'"
.text:000000000000610E                 cmp     ebx, 9
.text:0000000000006111                 cmovnz  rax, rdx
.text:0000000000006115                 add     rsp, 8
.text:0000000000006119                 pop     rbx
.text:000000000000611A                 pop     rbp
.text:000000000000611B                 retn
.text:000000000000611B ; ---------------------------------------------------------------------------
.text:000000000000611C                 align 20h
.text:0000000000006120
.text:0000000000006120 loc_6120:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000006120                 movzx   edx, byte ptr [rax+1]
.text:0000000000006124                 and     edx, 0FFFFFFDFh
.text:0000000000006127                 cmp     dl, 42h ; 'B'
.text:000000000000612A                 jnz     short loc_6100
.text:000000000000612C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000006130                 jnz     short loc_6100
.text:0000000000006132                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000006136                 jnz     short loc_6100
.text:0000000000006138                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000613C                 jnz     short loc_6100
.text:000000000000613E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000006142                 jnz     short loc_6100
.text:0000000000006144                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000006148                 jnz     short loc_6100
.text:000000000000614A                 cmp     byte ptr [rax+7], 0
.text:000000000000614E                 jnz     short loc_6100
.text:0000000000006150                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000006154                 lea     rax, unk_B464
.text:000000000000615B                 lea     rdx, unk_B468
.text:0000000000006162                 cmovnz  rax, rdx
.text:0000000000006166                 add     rsp, 8
.text:000000000000616A                 pop     rbx
.text:000000000000616B                 pop     rbp
.text:000000000000616C                 retn
.text:000000000000616C ; ---------------------------------------------------------------------------
.text:000000000000616D                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000006170                 movzx   edx, byte ptr [rax+1]
.text:0000000000006174                 and     edx, 0FFFFFFDFh
.text:0000000000006177                 cmp     dl, 54h ; 'T'
.text:000000000000617A                 jnz     short loc_6100
.text:000000000000617C                 movzx   edx, byte ptr [rax+2]
.text:0000000000006180                 and     edx, 0FFFFFFDFh
.text:0000000000006183                 cmp     dl, 46h ; 'F'
.text:0000000000006186                 jnz     loc_6100
.text:000000000000618C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000006190                 jnz     loc_6100
.text:0000000000006196                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000619A                 jnz     loc_6100
.text:00000000000061A0                 cmp     byte ptr [rax+5], 0
.text:00000000000061A4                 jnz     loc_6100
.text:00000000000061AA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000061AE                 lea     rax, unk_B45C
.text:00000000000061B5                 lea     rdx, unk_B460
.text:00000000000061BC                 cmovnz  rax, rdx
.text:00000000000061C0                 add     rsp, 8
.text:00000000000061C4                 pop     rbx
.text:00000000000061C5                 pop     rbp
.text:00000000000061C6                 retn
.text:00000000000061C6 ; } // starts at 60E0
.text:00000000000061C6 gettext_quote   endp
.text:00000000000061C6
.text:00000000000061C6 ; ---------------------------------------------------------------------------
.text:00000000000061C7                 align 10h
.text:00000000000061D0
.text:00000000000061D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061D0
.text:00000000000061D0 ; Attributes: info_from_lumina
.text:00000000000061D0
.text:00000000000061D0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000061D0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000061D0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000061D0
.text:00000000000061D0 var_E0          = dword ptr -0E0h
.text:00000000000061D0 var_DB          = byte ptr -0DBh
.text:00000000000061D0 var_DA          = byte ptr -0DAh
.text:00000000000061D0 var_D9          = byte ptr -0D9h
.text:00000000000061D0 s               = qword ptr -0D8h
.text:00000000000061D0 n               = qword ptr -0D0h
.text:00000000000061D0 var_C8          = qword ptr -0C8h
.text:00000000000061D0 ps              = qword ptr -0C0h
.text:00000000000061D0 var_B8          = qword ptr -0B8h
.text:00000000000061D0 var_B0          = qword ptr -0B0h
.text:00000000000061D0 var_A8          = qword ptr -0A8h
.text:00000000000061D0 s2              = qword ptr -0A0h
.text:00000000000061D0 var_98          = qword ptr -98h
.text:00000000000061D0 var_90          = qword ptr -90h
.text:00000000000061D0 var_88          = qword ptr -88h
.text:00000000000061D0 var_80          = qword ptr -80h
.text:00000000000061D0 var_78          = qword ptr -78h
.text:00000000000061D0 var_70          = dword ptr -70h
.text:00000000000061D0 var_6C          = byte ptr -6Ch
.text:00000000000061D0 var_6B          = byte ptr -6Bh
.text:00000000000061D0 var_6A          = byte ptr -6Ah
.text:00000000000061D0 var_69          = byte ptr -69h
.text:00000000000061D0 var_68          = qword ptr -68h
.text:00000000000061D0 var_60          = qword ptr -60h
.text:00000000000061D0 wc              = dword ptr -4Ch
.text:00000000000061D0 var_48          = qword ptr -48h
.text:00000000000061D0 var_40          = qword ptr -40h
.text:00000000000061D0 arg_0           = qword ptr  8
.text:00000000000061D0 arg_8           = qword ptr  10h
.text:00000000000061D0 arg_10          = qword ptr  18h
.text:00000000000061D0
.text:00000000000061D0 ; __unwind {
.text:00000000000061D0                 push    r15
.text:00000000000061D2                 push    r14
.text:00000000000061D4                 mov     r15d, r8d
.text:00000000000061D7                 push    r13
.text:00000000000061D9                 push    r12
.text:00000000000061DB                 mov     r14, rdi
.text:00000000000061DE                 push    rbp
.text:00000000000061DF                 push    rbx
.text:00000000000061E0                 mov     ebx, r9d
.text:00000000000061E3                 mov     r13, rsi
.text:00000000000061E6                 mov     rbp, rcx
.text:00000000000061E9                 and     ebx, 2
.text:00000000000061EC                 sub     rsp, 0B8h
.text:00000000000061F3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000061FB                 mov     [rsp+0E8h+s], rdx
.text:0000000000006200                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000006205                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000620A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000620F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000006217                 mov     [rsp+0E8h+var_80], rax
.text:000000000000621C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000006224                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006229                 mov     rax, fs:28h
.text:0000000000006232                 mov     [rsp+0E8h+var_40], rax
.text:000000000000623A                 xor     eax, eax
.text:000000000000623C                 call    ___ctype_get_mb_cur_max
.text:0000000000006241                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000006245                 mov     [rsp+0E8h+var_90], rax
.text:000000000000624A                 ja      def_6261        ; jumptable 00000000000121F1 default case
.text:0000000000006250                 lea     rcx, jpt_6261
.text:0000000000006257                 mov     edx, r15d
.text:000000000000625A                 movsxd  rax, ds:(jpt_6261 - 0B4C0h)[rcx+rdx*4]
.text:000000000000625E                 add     rax, rcx
.text:0000000000006261                 jmp     rax             ; switch jump
.text:0000000000006263 ; ---------------------------------------------------------------------------
.text:0000000000006263
.text:0000000000006263 loc_6263:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006263                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000006263                                         ; DATA XREF: ...
.text:0000000000006263                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000006268                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000626D                 xor     r12d, r12d
.text:0000000000006270                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006279                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000627E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006283
.text:0000000000006283 loc_6283:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000006283                 lea     rax, asc_B46D   ; "'"
.text:000000000000628A                 mov     [rsp+0E8h+n], 1
.text:0000000000006293                 xor     r15d, r15d
.text:0000000000006296                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000629E                 mov     [rsp+0E8h+s2], rax
.text:00000000000062A3
.text:00000000000062A3 loc_62A3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000062A3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000062A3                 xor     r11d, r11d
.text:00000000000062A6                 mov     rax, rbp
.text:00000000000062A9                 mov     r8d, r12d
.text:00000000000062AC                 mov     rbp, r11
.text:00000000000062AF                 mov     r11, rax
.text:00000000000062B2                 nop     word ptr [rax+rax+00h]
.text:00000000000062B8
.text:00000000000062B8 loc_62B8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000062B8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000062B8                 cmp     r11, rbp
.text:00000000000062BB                 setnz   r12b
.text:00000000000062BF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000062C3                 jnz     short loc_62D2
.text:00000000000062C5                 mov     rax, [rsp+0E8h+s]
.text:00000000000062CA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000062CE                 setnz   r12b
.text:00000000000062D2
.text:00000000000062D2 loc_62D2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000062D2                 test    r12b, r12b
.text:00000000000062D5                 jz      loc_6930
.text:00000000000062DB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000062E0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000062E5                 lea     r9, [rdi+rbp]
.text:00000000000062E9                 setnz   al
.text:00000000000062EC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000062F0                 mov     r10d, eax
.text:00000000000062F3                 jz      loc_63A0
.text:00000000000062F9                 mov     rax, [rsp+0E8h+n]
.text:00000000000062FE                 test    rax, rax
.text:0000000000006301                 jz      loc_6730
.text:0000000000006307                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000630B                 lea     rbx, [rbp+rax+0]
.text:0000000000006310                 jnz     short loc_6340
.text:0000000000006312                 cmp     rax, 1
.text:0000000000006316                 jbe     short loc_6340
.text:0000000000006318                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000631D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000006322                 mov     [rsp+0E8h+ps], r9
.text:0000000000006327                 call    _strlen
.text:000000000000632C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006332                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000006338                 mov     r11, rax
.text:000000000000633B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000006340                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000006340                 cmp     rbx, r11
.text:0000000000006343                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006348                 ja      loc_6900
.text:000000000000634E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000006353                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000006358                 mov     rdi, r9         ; s1
.text:000000000000635B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000006360                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000006365                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000636A                 call    _memcmp
.text:000000000000636F                 test    eax, eax
.text:0000000000006371                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006376                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000637C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000006381                 jnz     loc_6900
.text:0000000000006387                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000638C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006392                 jnz     loc_7315
.text:0000000000006398                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000063A0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000063A0                 movzx   ebx, byte ptr [r9]
.text:00000000000063A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000063A7                 ja      def_63BE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000063AD                 lea     rcx, jpt_63BE
.text:00000000000063B4                 movzx   edx, bl
.text:00000000000063B7                 movsxd  rax, ds:(jpt_63BE - 0B4ECh)[rcx+rdx*4]
.text:00000000000063BB                 add     rax, rcx
.text:00000000000063BE                 jmp     rax             ; switch jump
.text:00000000000063C0 ; ---------------------------------------------------------------------------
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000063C0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000063C0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000063C3
.text:00000000000063C3 loc_63C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000063C3                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000063C3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000063C7                 setnz   al
.text:00000000000063CA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000063CE                 jnz     short loc_63DC
.text:00000000000063D0                 mov     rax, [rsp+0E8h+s]
.text:00000000000063D5                 cmp     byte ptr [rax+1], 0
.text:00000000000063D9                 setnz   al
.text:00000000000063DC
.text:00000000000063DC loc_63DC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000063DC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000063E1                 setz    dl
.text:00000000000063E4                 test    al, al
.text:00000000000063E6                 jz      loc_6638
.text:00000000000063EC
.text:00000000000063EC loc_63EC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000063EC                 xor     r12d, r12d
.text:00000000000063EF                 xor     eax, eax
.text:00000000000063F1                 nop     dword ptr [rax+00000000h]
.text:00000000000063F8
.text:00000000000063F8 loc_63F8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000063F8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000063F8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000063FD                 jnz     loc_6512
.text:0000000000006403                 test    dl, dl
.text:0000000000006405                 jnz     loc_6512
.text:000000000000640B
.text:000000000000640B loc_640B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000640B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000006410                 test    rsi, rsi
.text:0000000000006413                 jz      short loc_6429
.text:0000000000006415                 mov     edx, ebx
.text:0000000000006417                 shr     dl, 5
.text:000000000000641A                 movzx   edx, dl
.text:000000000000641D                 mov     edx, [rsi+rdx*4]
.text:0000000000006420                 bt      edx, ebx
.text:0000000000006423                 jb      loc_6573
.text:0000000000006429
.text:0000000000006429 loc_6429:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000006429                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000006429                 test    r10b, r10b
.text:000000000000642C                 jnz     loc_6573
.text:0000000000006432                 xor     eax, 1
.text:0000000000006435                 add     rbp, 1
.text:0000000000006439                 and     eax, r8d
.text:000000000000643C
.text:000000000000643C loc_643C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000643C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000643C                 test    al, al
.text:000000000000643E                 jz      short loc_6460
.text:0000000000006440                 cmp     r13, r15
.text:0000000000006443                 jbe     short loc_644A
.text:0000000000006445                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000644A
.text:000000000000644A loc_644A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000644A                 lea     rax, [r15+1]
.text:000000000000644E                 cmp     r13, rax
.text:0000000000006451                 jbe     short loc_6459
.text:0000000000006453                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000006459
.text:0000000000006459 loc_6459:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000006459                 add     r15, 2
.text:000000000000645D                 xor     r8d, r8d
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000006460                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000006460                 cmp     r15, r13
.text:0000000000006463                 jnb     short loc_6469
.text:0000000000006465                 mov     [r14+r15], bl
.text:0000000000006469
.text:0000000000006469 loc_6469:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000006469                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000646E                 add     r15, 1
.text:0000000000006472                 mov     eax, 0
.text:0000000000006477                 test    r12b, r12b
.text:000000000000647A                 cmovz   edi, eax
.text:000000000000647D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000006482                 jmp     loc_62B8
.text:0000000000006482 ; ---------------------------------------------------------------------------
.text:0000000000006487                 align 10h
.text:0000000000006490
.text:0000000000006490 loc_6490:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006490                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006490                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000006493
.text:0000000000006493 loc_6493:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006493                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006493                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000006497                 cmp     eax, 2
.text:000000000000649A                 jz      loc_6A58
.text:00000000000064A0                 cmp     eax, 5
.text:00000000000064A3                 jz      loc_6A18
.text:00000000000064A9                 cmp     eax, 2
.text:00000000000064AC                 mov     ebx, 3Fh ; '?'
.text:00000000000064B1                 setz    dl
.text:00000000000064B4                 xor     r12d, r12d
.text:00000000000064B7                 xor     eax, eax
.text:00000000000064B9                 jmp     loc_63F8
.text:00000000000064B9 ; ---------------------------------------------------------------------------
.text:00000000000064BE                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000064C0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000064C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000064C3
.text:00000000000064C3 loc_64C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000064C3                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000064C3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000064C8                 jz      loc_69D0
.text:00000000000064CE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000064D3                 xor     edx, edx
.text:00000000000064D5                 xor     eax, eax
.text:00000000000064D7                 mov     ebx, 27h ; '''
.text:00000000000064DC                 jmp     loc_63F8
.text:00000000000064DC ; ---------------------------------------------------------------------------
.text:00000000000064E1                 align 8
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000064E8                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000064E8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000064ED                 mov     ebx, 74h ; 't'
.text:00000000000064F2
.text:00000000000064F2 loc_64F2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000064F2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000064F2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000064F7                 setz    al
.text:00000000000064FA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000064FE                 jnz     loc_664E
.text:0000000000006504
.text:0000000000006504 loc_6504:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000006504                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000006504                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006509                 jnz     short loc_6570
.text:000000000000650B
.text:000000000000650B loc_650B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000650B                 mov     ebx, edx
.text:000000000000650D                 xor     r12d, r12d
.text:0000000000006510                 xor     eax, eax
.text:0000000000006512
.text:0000000000006512 loc_6512:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000006512                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000006512                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006517                 jnz     loc_640B
.text:000000000000651D                 jmp     loc_6429
.text:000000000000651D ; ---------------------------------------------------------------------------
.text:0000000000006522                 align 8
.text:0000000000006528
.text:0000000000006528 loc_6528:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006528                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006528                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000652D                 mov     ebx, 62h ; 'b'
.text:0000000000006532                 jmp     short loc_6504
.text:0000000000006532 ; ---------------------------------------------------------------------------
.text:0000000000006534                 align 8
.text:0000000000006538
.text:0000000000006538 loc_6538:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006538                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006538                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000653D                 jz      loc_6910
.text:0000000000006543                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006548                 jz      loc_6760
.text:000000000000654E
.text:000000000000654E loc_654E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000654E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006553                 jz      loc_6760
.text:0000000000006559                 cmp     [rsp+0E8h+n], 0
.text:000000000000655F                 jnz     loc_691B
.text:0000000000006565                 mov     ebx, 5Ch ; '\'
.text:000000000000656A                 nop     word ptr [rax+rax+00h]
.text:0000000000006570
.text:0000000000006570 loc_6570:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000006570                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000006570                 xor     r12d, r12d
.text:0000000000006573
.text:0000000000006573 loc_6573:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000006573                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000006573                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006578                 setz    dl
.text:000000000000657B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006580                 mov     eax, edx
.text:0000000000006582                 jnz     loc_6DD8
.text:0000000000006588                 mov     eax, r8d
.text:000000000000658B                 xor     eax, 1
.text:000000000000658E                 and     al, dl
.text:0000000000006590                 jz      short loc_65C1
.text:0000000000006592                 cmp     r13, r15
.text:0000000000006595                 jbe     short loc_659C
.text:0000000000006597                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000659C
.text:000000000000659C loc_659C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000659C                 lea     rdx, [r15+1]
.text:00000000000065A0                 cmp     r13, rdx
.text:00000000000065A3                 jbe     short loc_65AB
.text:00000000000065A5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000065AB
.text:00000000000065AB loc_65AB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000065AB                 lea     rdx, [r15+2]
.text:00000000000065AF                 cmp     r13, rdx
.text:00000000000065B2                 jbe     short loc_65BA
.text:00000000000065B4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000065BA
.text:00000000000065BA loc_65BA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000065BA                 add     r15, 3
.text:00000000000065BE                 mov     r8d, eax
.text:00000000000065C1
.text:00000000000065C1 loc_65C1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000065C1                 cmp     r13, r15
.text:00000000000065C4                 jbe     short loc_65CB
.text:00000000000065C6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000065CB
.text:00000000000065CB loc_65CB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000065CB                 add     r15, 1
.text:00000000000065CF                 add     rbp, 1
.text:00000000000065D3                 jmp     loc_6460
.text:00000000000065D3 ; ---------------------------------------------------------------------------
.text:00000000000065D8                 align 20h
.text:00000000000065E0
.text:00000000000065E0 loc_65E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000065E0                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000065E0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000065E5                 jnz     loc_67B3
.text:00000000000065EB                 xor     edx, edx
.text:00000000000065ED                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000065F2                 jz      loc_650B
.text:00000000000065F8                 add     rbp, 1
.text:00000000000065FC                 jmp     loc_62B8
.text:00000000000065FC ; ---------------------------------------------------------------------------
.text:0000000000006601                 align 8
.text:0000000000006608
.text:0000000000006608 loc_6608:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006608                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000660D                 setz    dl
.text:0000000000006610                 xor     eax, eax
.text:0000000000006612                 jmp     loc_63F8
.text:0000000000006612 ; ---------------------------------------------------------------------------
.text:0000000000006617                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006620                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006620                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000006625                 mov     ebx, 61h ; 'a'
.text:000000000000662A                 jmp     loc_6504
.text:000000000000662A ; ---------------------------------------------------------------------------
.text:000000000000662F                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006630                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006630                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000006635                 setz    dl
.text:0000000000006638
.text:0000000000006638 loc_6638:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000006638                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000006638                 test    rbp, rbp
.text:000000000000663B                 jnz     loc_63EC
.text:0000000000006641
.text:0000000000006641 loc_6641:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000006641                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000006641                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006646                 and     al, dl
.text:0000000000006648                 jz      loc_63F8
.text:000000000000664E
.text:000000000000664E loc_664E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000664E                 mov     rbp, r11
.text:0000000000006651                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006659                 jmp     loc_6D59
.text:0000000000006659 ; ---------------------------------------------------------------------------
.text:000000000000665E                 align 20h
.text:0000000000006660
.text:0000000000006660 loc_6660:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006660                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006660                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006665                 setz    dl
.text:0000000000006668                 xor     r12d, r12d
.text:000000000000666B                 jmp     short loc_6641
.text:000000000000666B ; ---------------------------------------------------------------------------
.text:000000000000666D                 align 10h
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006670                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006670                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000006675                 mov     ebx, 20h ; ' '
.text:000000000000667A                 setz    dl
.text:000000000000667D                 jmp     short loc_6641
.text:000000000000667D ; ---------------------------------------------------------------------------
.text:000000000000667F                 align 20h
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006680                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006680                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000006685                 mov     ebx, 72h ; 'r'
.text:000000000000668A                 jmp     loc_64F2
.text:000000000000668A ; ---------------------------------------------------------------------------
.text:000000000000668F                 align 10h
.text:0000000000006690
.text:0000000000006690 loc_6690:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006690                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:0000000000006690                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000006695                 mov     ebx, 66h ; 'f'
.text:000000000000669A                 jmp     loc_6504
.text:000000000000669A ; ---------------------------------------------------------------------------
.text:000000000000669F                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000066A0                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000066A0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000066A5                 mov     ebx, 76h ; 'v'
.text:00000000000066AA                 jmp     loc_6504
.text:00000000000066AA ; ---------------------------------------------------------------------------
.text:00000000000066AF                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000066B0                                         ; DATA XREF: .rodata:jpt_63BE↓o
.text:00000000000066B0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000066B5                 mov     ebx, 6Eh ; 'n'
.text:00000000000066BA                 jmp     loc_64F2
.text:00000000000066BA ; ---------------------------------------------------------------------------
.text:00000000000066BF                 align 20h
.text:00000000000066C0
.text:00000000000066C0 def_674A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000066C0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000066C0                                         ; DATA XREF: ...
.text:00000000000066C0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000066C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000066C8
.text:00000000000066C8 def_63BE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000066C8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000066C8                                         ; DATA XREF: ...
.text:00000000000066C8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000066CE                 jnz     loc_6A78
.text:00000000000066D4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000066D9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000066DE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000066E3                 call    ___ctype_b_loc
.text:00000000000066E8                 mov     rcx, [rax]
.text:00000000000066EB                 movzx   edx, bl
.text:00000000000066EE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000066F4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000066FA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000066FF                 mov     edi, 1
.text:0000000000006704                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000006708                 and     ax, 4000h
.text:000000000000670C                 setnz   r12b
.text:0000000000006710                 setz    al
.text:0000000000006713                 and     al, [rsp+0E8h+var_DB]
.text:0000000000006717
.text:0000000000006717 loc_6717:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000006717                 test    al, al
.text:0000000000006719                 jnz     loc_70B1
.text:000000000000671F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006724                 setz    dl
.text:0000000000006727                 jmp     loc_63F8
.text:0000000000006727 ; ---------------------------------------------------------------------------
.text:000000000000672C                 align 10h
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000006730                 movzx   ebx, byte ptr [r9]
.text:0000000000006734                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006737                 ja      short def_674A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006739                 lea     rcx, jpt_674A
.text:0000000000006740                 movzx   edx, bl
.text:0000000000006743                 movsxd  rax, ds:(jpt_674A - 0B6E8h)[rcx+rdx*4]
.text:0000000000006747                 add     rax, rcx
.text:000000000000674A                 jmp     rax             ; switch jump
.text:000000000000674A ; ---------------------------------------------------------------------------
.text:000000000000674C                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006750                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006750                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000006753                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006758                 jnz     loc_654E
.text:000000000000675E                 xchg    ax, ax
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000006760                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000006760                 mov     edx, 5Ch ; '\'
.text:0000000000006765                 mov     ebx, 5Ch ; '\'
.text:000000000000676A                 jmp     loc_6504
.text:000000000000676A ; ---------------------------------------------------------------------------
.text:000000000000676F                 align 10h
.text:0000000000006770
.text:0000000000006770 loc_6770:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006770                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006770                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000006775                 xor     r10d, r10d
.text:0000000000006778                 mov     ebx, 66h ; 'f'
.text:000000000000677D                 jmp     loc_6504
.text:000000000000677D ; ---------------------------------------------------------------------------
.text:0000000000006782                 align 8
.text:0000000000006788
.text:0000000000006788 loc_6788:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006788                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006788                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000678D                 xor     r10d, r10d
.text:0000000000006790                 mov     ebx, 6Eh ; 'n'
.text:0000000000006795                 jmp     loc_64F2
.text:0000000000006795 ; ---------------------------------------------------------------------------
.text:000000000000679A                 align 20h
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000067A0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000067A0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000067A5                 jmp     loc_6570
.text:00000000000067A5 ; ---------------------------------------------------------------------------
.text:00000000000067AA                 align 10h
.text:00000000000067B0
.text:00000000000067B0 loc_67B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000067B0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000067B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000067B3
.text:00000000000067B3 loc_67B3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000067B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000067B8                 setz    dl
.text:00000000000067BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000067C0                 jnz     loc_735A
.text:00000000000067C6                 mov     eax, r8d
.text:00000000000067C9                 mov     rcx, r15
.text:00000000000067CC                 xor     eax, 1
.text:00000000000067CF                 and     al, dl
.text:00000000000067D1                 jz      short loc_6800
.text:00000000000067D3                 cmp     r13, r15
.text:00000000000067D6                 jbe     short loc_67DD
.text:00000000000067D8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000067DD
.text:00000000000067DD loc_67DD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000067DD                 lea     rcx, [r15+1]
.text:00000000000067E1                 cmp     r13, rcx
.text:00000000000067E4                 jbe     short loc_67EC
.text:00000000000067E6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000067EC
.text:00000000000067EC loc_67EC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000067EC                 lea     rcx, [r15+2]
.text:00000000000067F0                 cmp     r13, rcx
.text:00000000000067F3                 ja      loc_6E29
.text:00000000000067F9
.text:00000000000067F9 loc_67F9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000067F9                 lea     rcx, [r15+3]
.text:00000000000067FD                 mov     r8d, eax
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000006800                 cmp     r13, rcx
.text:0000000000006803                 jbe     short loc_680A
.text:0000000000006805                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000680A
.text:000000000000680A loc_680A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000680A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000680F                 lea     r15, [rcx+1]
.text:0000000000006813                 jz      loc_6E19
.text:0000000000006819                 lea     rax, [rbp+1]
.text:000000000000681D                 cmp     rax, r11
.text:0000000000006820                 jnb     short loc_683B
.text:0000000000006822                 mov     rax, [rsp+0E8h+s]
.text:0000000000006827                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000682C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000006830                 sub     eax, 30h ; '0'
.text:0000000000006833                 cmp     al, 9
.text:0000000000006835                 jbe     loc_7069
.text:000000000000683B
.text:000000000000683B loc_683B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000683B                 mov     eax, r12d
.text:000000000000683E                 mov     ebx, 30h ; '0'
.text:0000000000006843                 xor     r12d, r12d
.text:0000000000006846                 jmp     loc_63F8
.text:0000000000006846 ; ---------------------------------------------------------------------------
.text:000000000000684B                 align 10h
.text:0000000000006850
.text:0000000000006850 loc_6850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006850                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006850                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000006855                 mov     r12d, r10d
.text:0000000000006858                 setz    dl
.text:000000000000685B                 xor     r10d, r10d
.text:000000000000685E                 xor     eax, eax
.text:0000000000006860                 jmp     loc_63F8
.text:0000000000006860 ; ---------------------------------------------------------------------------
.text:0000000000006865                 align 8
.text:0000000000006868
.text:0000000000006868 loc_6868:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006868                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006868                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000686D                 setz    dl
.text:0000000000006870                 xor     r10d, r10d
.text:0000000000006873                 jmp     loc_6638
.text:0000000000006873 ; ---------------------------------------------------------------------------
.text:0000000000006878                 align 20h
.text:0000000000006880
.text:0000000000006880 loc_6880:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006880                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006880                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006885                 setz    dl
.text:0000000000006888                 xor     r10d, r10d
.text:000000000000688B                 xor     r12d, r12d
.text:000000000000688E                 jmp     loc_6641
.text:000000000000688E ; ---------------------------------------------------------------------------
.text:0000000000006893                 align 8
.text:0000000000006898
.text:0000000000006898 loc_6898:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006898                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:0000000000006898                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000689D                 mov     r12d, r10d
.text:00000000000068A0                 mov     ebx, 20h ; ' '
.text:00000000000068A5                 setz    dl
.text:00000000000068A8                 xor     r10d, r10d
.text:00000000000068AB                 jmp     loc_6641
.text:00000000000068B0 ; ---------------------------------------------------------------------------
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000068B0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000068B0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000068B5                 xor     r10d, r10d
.text:00000000000068B8                 mov     ebx, 72h ; 'r'
.text:00000000000068BD                 jmp     loc_64F2
.text:00000000000068BD ; ---------------------------------------------------------------------------
.text:00000000000068C2                 align 8
.text:00000000000068C8
.text:00000000000068C8 loc_68C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000068C8                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000068C8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000068CD                 jmp     loc_6570
.text:00000000000068CD ; ---------------------------------------------------------------------------
.text:00000000000068D2                 align 8
.text:00000000000068D8
.text:00000000000068D8 loc_68D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000068D8                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000068D8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000068DD                 xor     r10d, r10d
.text:00000000000068E0                 mov     ebx, 74h ; 't'
.text:00000000000068E5                 jmp     loc_64F2
.text:00000000000068E5 ; ---------------------------------------------------------------------------
.text:00000000000068EA                 align 10h
.text:00000000000068F0
.text:00000000000068F0 loc_68F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000068F0                                         ; DATA XREF: .rodata:jpt_674A↓o
.text:00000000000068F0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000068F5                 jmp     loc_6570
.text:00000000000068F5 ; ---------------------------------------------------------------------------
.text:00000000000068FA                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000006900                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000006900                 xor     r10d, r10d
.text:0000000000006903                 jmp     loc_63A0
.text:0000000000006903 ; ---------------------------------------------------------------------------
.text:0000000000006908                 align 10h
.text:0000000000006910
.text:0000000000006910 loc_6910:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000006910                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006915                 jnz     loc_7280
.text:000000000000691B
.text:000000000000691B loc_691B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000691B                 add     rbp, 1
.text:000000000000691F                 mov     eax, r8d
.text:0000000000006922                 xor     r12d, r12d
.text:0000000000006925                 mov     ebx, 5Ch ; '\'
.text:000000000000692A                 jmp     loc_643C
.text:000000000000692A ; ---------------------------------------------------------------------------
.text:000000000000692F                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000006930                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006935                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000693A                 mov     r12d, r8d
.text:000000000000693D                 mov     rbp, r11
.text:0000000000006940                 setz    dl
.text:0000000000006943                 mov     eax, ebx
.text:0000000000006945                 test    r15, r15
.text:0000000000006948                 setz    cl
.text:000000000000694B                 and     eax, edx
.text:000000000000694D                 and     al, cl
.text:000000000000694F                 jnz     loc_73B6
.text:0000000000006955                 mov     eax, ebx
.text:0000000000006957                 xor     eax, 1
.text:000000000000695A                 and     dl, al
.text:000000000000695C                 jz      loc_72CC
.text:0000000000006962                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000006967                 jz      loc_72CA
.text:000000000000696D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000006972                 jnz     loc_736D
.text:0000000000006978                 test    r13, r13
.text:000000000000697B                 setz    al
.text:000000000000697E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000006984                 setnz   dl
.text:0000000000006987                 and     al, dl
.text:0000000000006989                 jz      loc_73AC
.text:000000000000698F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006994
.text:0000000000006994 loc_6994:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000006994                 lea     rbx, asc_B46D   ; "'"
.text:000000000000699B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000699F                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000069A7                 mov     r15d, 1
.text:00000000000069AD                 mov     [rsp+0E8h+n], 1
.text:00000000000069B6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000069BB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000069C0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000069C4                 jmp     loc_62A3
.text:00000000000069C4 ; ---------------------------------------------------------------------------
.text:00000000000069C9                 align 10h
.text:00000000000069D0
.text:00000000000069D0 loc_69D0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000069D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000069D5                 jnz     loc_7280
.text:00000000000069DB                 test    r13, r13
.text:00000000000069DE                 jz      loc_6DE0
.text:00000000000069E4                 xor     edx, edx
.text:00000000000069E6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000069EC                 jnz     loc_6DE0
.text:00000000000069F2
.text:00000000000069F2 loc_69F2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000069F2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000069F2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000069F7                 add     r15, 3
.text:00000000000069FB                 xor     eax, eax
.text:00000000000069FD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000006A02                 xor     r8d, r8d
.text:0000000000006A05                 mov     r13, rdx
.text:0000000000006A08                 mov     ebx, 27h ; '''
.text:0000000000006A0D                 jmp     loc_6429
.text:0000000000006A0D ; ---------------------------------------------------------------------------
.text:0000000000006A12                 align 8
.text:0000000000006A18
.text:0000000000006A18 loc_6A18:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000006A18                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000006A1D                 jz      short loc_6A40
.text:0000000000006A1F                 lea     rcx, [rbp+2]
.text:0000000000006A23                 cmp     rcx, r11
.text:0000000000006A26                 jnb     short loc_6A40
.text:0000000000006A28                 mov     rax, [rsp+0E8h+s]
.text:0000000000006A2D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000006A32                 jz      loc_71C2
.text:0000000000006A38                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006A40
.text:0000000000006A40 loc_6A40:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000006A40                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000006A40                 xor     edx, edx
.text:0000000000006A42                 xor     r12d, r12d
.text:0000000000006A45                 xor     eax, eax
.text:0000000000006A47                 mov     ebx, 3Fh ; '?'
.text:0000000000006A4C                 jmp     loc_63F8
.text:0000000000006A4C ; ---------------------------------------------------------------------------
.text:0000000000006A51                 align 8
.text:0000000000006A58
.text:0000000000006A58 loc_6A58:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000006A58                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006A5D                 jnz     loc_7280
.text:0000000000006A63                 xor     r12d, r12d
.text:0000000000006A66                 xor     eax, eax
.text:0000000000006A68                 mov     ebx, 3Fh ; '?'
.text:0000000000006A6D                 jmp     loc_6429
.text:0000000000006A6D ; ---------------------------------------------------------------------------
.text:0000000000006A72                 align 8
.text:0000000000006A78
.text:0000000000006A78 loc_6A78:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000006A78                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000006A80                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A84                 mov     [rsp+0E8h+var_48], 0
.text:0000000000006A90                 mov     [rsp+0E8h+ps], rax
.text:0000000000006A95                 jnz     short loc_6AC4
.text:0000000000006A97                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000006A9C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000006AA1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000006AA6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000006AAB                 call    _strlen
.text:0000000000006AB0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000006AB6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006ABC                 mov     r11, rax
.text:0000000000006ABF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006AC4
.text:0000000000006AC4 loc_6AC4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000006AC4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000006ACC                 xor     ecx, ecx
.text:0000000000006ACE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000006AD2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000006AD7                 mov     rbx, rcx
.text:0000000000006ADA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000006AE2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000006AE7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000006AEC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000006AF4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000006AF9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000006AFE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000006B03
.text:0000000000006B03 loc_6B03:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000006B03                 mov     rax, [rsp+0E8h+s]
.text:0000000000006B08                 lea     r14, [rbp+rbx+0]
.text:0000000000006B0D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000006B12                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000006B17                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000006B1C                 lea     r13, [rax+r14]
.text:0000000000006B20                 sub     rdx, r14
.text:0000000000006B23                 mov     rsi, r13
.text:0000000000006B26                 call    rpl_mbrtowc
.text:0000000000006B2B                 test    rax, rax
.text:0000000000006B2E                 mov     r15, rax
.text:0000000000006B31                 jz      short loc_6B81
.text:0000000000006B33                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B37                 jz      loc_7155
.text:0000000000006B3D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006B41                 jz      loc_70E1
.text:0000000000006B47                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006B4C                 setz    al
.text:0000000000006B4F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000006B53                 jnz     loc_6CF0
.text:0000000000006B59
.text:0000000000006B59 loc_6B59:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000006B59                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000006B59                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000006B60                 call    _iswprint
.text:0000000000006B65                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000006B6A                 test    eax, eax
.text:0000000000006B6C                 mov     eax, 0
.text:0000000000006B71                 cmovz   r12d, eax
.text:0000000000006B75                 add     rbx, r15
.text:0000000000006B78                 call    _mbsinit
.text:0000000000006B7D                 test    eax, eax
.text:0000000000006B7F                 jz      short loc_6B03
.text:0000000000006B81
.text:0000000000006B81 loc_6B81:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000006B81                 mov     edx, r12d
.text:0000000000006B84                 mov     rdi, rbx
.text:0000000000006B87                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006B8D                 xor     edx, 1
.text:0000000000006B90                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006B95                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006B9B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000006B9F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006BA7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006BAC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006BB1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006BB6
.text:0000000000006BB6 loc_6BB6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000006BB6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000006BB6                 cmp     rdi, 1
.text:0000000000006BBA                 jbe     loc_71BB
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000006BC0                 mov     rcx, rdi
.text:0000000000006BC3                 xor     esi, esi
.text:0000000000006BC5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000006BCB                 add     rcx, rbp
.text:0000000000006BCE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000006BD3                 jmp     loc_6C8E
.text:0000000000006BD3 ; ---------------------------------------------------------------------------
.text:0000000000006BD8                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000006BE0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006BE5                 setz    al
.text:0000000000006BE8                 test    r9b, r9b
.text:0000000000006BEB                 jnz     loc_70A0
.text:0000000000006BF1                 mov     esi, r8d
.text:0000000000006BF4                 xor     esi, 1
.text:0000000000006BF7                 and     al, sil
.text:0000000000006BFA                 jz      short loc_6C2B
.text:0000000000006BFC                 cmp     r13, r15
.text:0000000000006BFF                 jbe     short loc_6C06
.text:0000000000006C01                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006C06
.text:0000000000006C06 loc_6C06:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000006C06                 lea     rsi, [r15+1]
.text:0000000000006C0A                 cmp     r13, rsi
.text:0000000000006C0D                 jbe     short loc_6C15
.text:0000000000006C0F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000006C15
.text:0000000000006C15 loc_6C15:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000006C15                 lea     rsi, [r15+2]
.text:0000000000006C19                 cmp     r13, rsi
.text:0000000000006C1C                 jbe     short loc_6C24
.text:0000000000006C1E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006C24
.text:0000000000006C24 loc_6C24:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000006C24                 add     r15, 3
.text:0000000000006C28                 mov     r8d, eax
.text:0000000000006C2B
.text:0000000000006C2B loc_6C2B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000006C2B                 cmp     r13, r15
.text:0000000000006C2E                 jbe     short loc_6C35
.text:0000000000006C30                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006C35
.text:0000000000006C35 loc_6C35:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006C35                 lea     rax, [r15+1]
.text:0000000000006C39                 cmp     r13, rax
.text:0000000000006C3C                 jbe     short loc_6C4B
.text:0000000000006C3E                 mov     eax, ebx
.text:0000000000006C40                 shr     al, 6
.text:0000000000006C43                 add     eax, 30h ; '0'
.text:0000000000006C46                 mov     [r14+r15+1], al
.text:0000000000006C4B
.text:0000000000006C4B loc_6C4B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000006C4B                 lea     rax, [r15+2]
.text:0000000000006C4F                 cmp     r13, rax
.text:0000000000006C52                 jbe     short loc_6C64
.text:0000000000006C54                 mov     eax, ebx
.text:0000000000006C56                 shr     al, 3
.text:0000000000006C59                 and     eax, 7
.text:0000000000006C5C                 add     eax, 30h ; '0'
.text:0000000000006C5F                 mov     [r14+r15+2], al
.text:0000000000006C64
.text:0000000000006C64 loc_6C64:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000006C64                 and     ebx, 7
.text:0000000000006C67                 add     rbp, 1
.text:0000000000006C6B                 add     r15, 3
.text:0000000000006C6F                 add     ebx, 30h ; '0'
.text:0000000000006C72                 cmp     rbp, rcx
.text:0000000000006C75                 jnb     loc_6460
.text:0000000000006C7B                 mov     esi, edx
.text:0000000000006C7D
.text:0000000000006C7D loc_6C7D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000006C7D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000006C7D                 cmp     r13, r15
.text:0000000000006C80                 jbe     short loc_6C86
.text:0000000000006C82                 mov     [r14+r15], bl
.text:0000000000006C86
.text:0000000000006C86 loc_6C86:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000006C86                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000006C8A                 add     r15, 1
.text:0000000000006C8E
.text:0000000000006C8E loc_6C8E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000006C8E                 test    dl, dl
.text:0000000000006C90                 jnz     loc_6BE0
.text:0000000000006C96                 mov     eax, esi
.text:0000000000006C98                 xor     eax, 1
.text:0000000000006C9B                 and     eax, r8d
.text:0000000000006C9E                 test    r10b, r10b
.text:0000000000006CA1                 jz      short loc_6CB1
.text:0000000000006CA3                 cmp     r13, r15
.text:0000000000006CA6                 jbe     short loc_6CAD
.text:0000000000006CA8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006CAD
.text:0000000000006CAD loc_6CAD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000006CAD                 add     r15, 1
.text:0000000000006CB1
.text:0000000000006CB1 loc_6CB1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000006CB1                 add     rbp, 1
.text:0000000000006CB5                 cmp     rbp, rcx
.text:0000000000006CB8                 jnb     loc_643C
.text:0000000000006CBE                 test    al, al
.text:0000000000006CC0                 jz      loc_70BE
.text:0000000000006CC6                 cmp     r13, r15
.text:0000000000006CC9                 jbe     short loc_6CD0
.text:0000000000006CCB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000006CD0                 lea     rax, [r15+1]
.text:0000000000006CD4                 cmp     r13, rax
.text:0000000000006CD7                 jbe     short loc_6CDF
.text:0000000000006CD9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000006CDF
.text:0000000000006CDF loc_6CDF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000006CDF                 add     r15, 2
.text:0000000000006CE3                 xor     r10d, r10d
.text:0000000000006CE6                 xor     r8d, r8d
.text:0000000000006CE9                 jmp     short loc_6C7D
.text:0000000000006CE9 ; ---------------------------------------------------------------------------
.text:0000000000006CEB                 align 10h
.text:0000000000006CF0
.text:0000000000006CF0 loc_6CF0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000006CF0                 cmp     r15, 1
.text:0000000000006CF4                 jz      loc_6B59
.text:0000000000006CFA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000006CFF                 lea     rcx, [rdi+r15]
.text:0000000000006D03                 lea     rdx, [rdi+r14+1]
.text:0000000000006D08                 lea     r8, [rcx+r14]
.text:0000000000006D0C                 jmp     short loc_6D1D
.text:0000000000006D0C ; ---------------------------------------------------------------------------
.text:0000000000006D0E                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000006D10                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000006D10                 add     rdx, 1
.text:0000000000006D14                 cmp     r8, rdx
.text:0000000000006D17                 jz      loc_6B59
.text:0000000000006D1D
.text:0000000000006D1D loc_6D1D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000006D1D                 movzx   ecx, byte ptr [rdx]
.text:0000000000006D20                 sub     ecx, 5Bh ; '['
.text:0000000000006D23                 cmp     cl, 21h ; '!'
.text:0000000000006D26                 ja      short loc_6D10
.text:0000000000006D28                 mov     esi, 1
.text:0000000000006D2D                 shl     rsi, cl
.text:0000000000006D30                 mov     rcx, rsi
.text:0000000000006D33                 mov     rsi, 20000002Bh
.text:0000000000006D3D                 test    rcx, rsi
.text:0000000000006D40                 jz      short loc_6D10
.text:0000000000006D42                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006D47                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006D4C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000006D51                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006D59
.text:0000000000006D59 loc_6D59:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000006D59                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000006D59                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006D5E                 jz      short loc_6D70
.text:0000000000006D60                 test    al, al
.text:0000000000006D62                 mov     eax, 4
.text:0000000000006D67                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000006D6C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000006D70                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000006D70                 sub     rsp, 8
.text:0000000000006D74                 mov     rcx, rbp
.text:0000000000006D77                 mov     rsi, r13
.text:0000000000006D7A                 push    [rsp+0F0h+var_88]
.text:0000000000006D7E                 push    [rsp+0F8h+var_80]
.text:0000000000006D82                 mov     rdi, r14
.text:0000000000006D85                 push    0
.text:0000000000006D87                 mov     r9d, [rsp+108h+var_70]
.text:0000000000006D8F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000006D94                 mov     rdx, [rsp+108h+s]
.text:0000000000006D99                 and     r9d, 0FFFFFFFDh
.text:0000000000006D9D                 call    quotearg_buffer_restyled
.text:0000000000006DA2                 add     rsp, 20h
.text:0000000000006DA6                 mov     r15, rax
.text:0000000000006DA9
.text:0000000000006DA9 loc_6DA9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000006DA9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000006DA9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000006DB1                 xor     rbx, fs:28h
.text:0000000000006DBA                 mov     rax, r15
.text:0000000000006DBD                 jnz     loc_73C3
.text:0000000000006DC3                 add     rsp, 0B8h
.text:0000000000006DCA                 pop     rbx
.text:0000000000006DCB                 pop     rbp
.text:0000000000006DCC                 pop     r12
.text:0000000000006DCE                 pop     r13
.text:0000000000006DD0                 pop     r14
.text:0000000000006DD2                 pop     r15
.text:0000000000006DD4                 retn
.text:0000000000006DD4 ; ---------------------------------------------------------------------------
.text:0000000000006DD5                 align 8
.text:0000000000006DD8
.text:0000000000006DD8 loc_6DD8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000006DD8                 mov     rbp, r11
.text:0000000000006DDB                 jmp     loc_6D59
.text:0000000000006DE0 ; ---------------------------------------------------------------------------
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000006DE0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000006DE0                 cmp     r13, r15
.text:0000000000006DE3                 jbe     short loc_6DEA
.text:0000000000006DE5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006DEA
.text:0000000000006DEA loc_6DEA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000006DEA                 lea     rax, [r15+1]
.text:0000000000006DEE                 cmp     r13, rax
.text:0000000000006DF1                 jbe     short loc_6DF9
.text:0000000000006DF3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000006DF9
.text:0000000000006DF9 loc_6DF9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000006DF9                 lea     rax, [r15+2]
.text:0000000000006DFD                 cmp     r13, rax
.text:0000000000006E00                 jbe     loc_73F2
.text:0000000000006E06                 mov     rdx, r13
.text:0000000000006E09                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006E0F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006E14                 jmp     loc_69F2
.text:0000000000006E19 ; ---------------------------------------------------------------------------
.text:0000000000006E19
.text:0000000000006E19 loc_6E19:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000006E19                 mov     eax, r12d
.text:0000000000006E1C                 mov     ebx, 30h ; '0'
.text:0000000000006E21                 xor     r12d, r12d
.text:0000000000006E24                 jmp     loc_6429
.text:0000000000006E29 ; ---------------------------------------------------------------------------
.text:0000000000006E29
.text:0000000000006E29 loc_6E29:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000006E29                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006E2F                 jmp     loc_67F9
.text:0000000000006E34 ; ---------------------------------------------------------------------------
.text:0000000000006E34
.text:0000000000006E34 loc_6E34:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006E34                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000006E34                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006E36                 jnz     loc_6263        ; jumptable 00000000000121F1 case 1
.text:0000000000006E3C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006E41
.text:0000000000006E41 loc_6E41:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006E41                 test    r13, r13
.text:0000000000006E44                 jnz     loc_73DA
.text:0000000000006E4A                 lea     rax, asc_B46D   ; "'"
.text:0000000000006E51                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006E5A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006E5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006E64                 xor     r12d, r12d
.text:0000000000006E67                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006E6C                 mov     [rsp+0E8h+n], 1
.text:0000000000006E75                 mov     [rsp+0E8h+s2], rax
.text:0000000000006E7A                 mov     r15d, 1
.text:0000000000006E80                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006E88                 jmp     loc_62A3
.text:0000000000006E88 ; ---------------------------------------------------------------------------
.text:0000000000006E8D                 align 10h
.text:0000000000006E90
.text:0000000000006E90 loc_6E90:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006E90                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000006E90                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000006E92                 jnz     loc_728D
.text:0000000000006E98                 test    r13, r13
.text:0000000000006E9B                 jz      loc_70C6
.text:0000000000006EA1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000006EA5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006EAA                 xor     r12d, r12d
.text:0000000000006EAD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006EB2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006EBB
.text:0000000000006EBB loc_6EBB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000006EBB                 lea     rax, unk_B46B
.text:0000000000006EC2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006EC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006ECC                 mov     [rsp+0E8h+n], 1
.text:0000000000006ED5                 mov     r15d, 1
.text:0000000000006EDB                 mov     [rsp+0E8h+s2], rax
.text:0000000000006EE0                 jmp     loc_62A3
.text:0000000000006EE5 ; ---------------------------------------------------------------------------
.text:0000000000006EE5
.text:0000000000006EE5 loc_6EE5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006EE5                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000006EE5                 lea     rax, unk_B46B   ; jumptable 00000000000121F1 case 6
.text:0000000000006EEC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006EF1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006EF6                 xor     r12d, r12d
.text:0000000000006EF9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006F02                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006F07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006F0C                 mov     [rsp+0E8h+n], 1
.text:0000000000006F15                 xor     r15d, r15d
.text:0000000000006F18                 mov     [rsp+0E8h+s2], rax
.text:0000000000006F1D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000006F25                 jmp     loc_62A3
.text:0000000000006F2A ; ---------------------------------------------------------------------------
.text:0000000000006F2A
.text:0000000000006F2A loc_6F2A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006F2A                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000006F2A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000006F2F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006F34                 xor     r12d, r12d
.text:0000000000006F37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006F40                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006F45                 xor     r15d, r15d
.text:0000000000006F48                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006F4D                 mov     [rsp+0E8h+n], 0
.text:0000000000006F56                 mov     [rsp+0E8h+s2], 0
.text:0000000000006F5F                 jmp     loc_62A3
.text:0000000000006F64 ; ---------------------------------------------------------------------------
.text:0000000000006F64
.text:0000000000006F64 loc_6F64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006F64                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000006F64                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006F69                 jz      short loc_6FC1
.text:0000000000006F6B                 lea     rsi, asc_B46F   ; "`"
.text:0000000000006F72                 xor     edi, edi        ; domainname
.text:0000000000006F74                 mov     edx, 5          ; category
.text:0000000000006F79                 call    _dcgettext
.text:0000000000006F7E                 mov     rcx, rax
.text:0000000000006F81                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006F86                 lea     rax, asc_B46F   ; "`"
.text:0000000000006F8D                 cmp     rcx, rax
.text:0000000000006F90                 jz      loc_732E
.text:0000000000006F96
.text:0000000000006F96 loc_6F96:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000006F96                 lea     rsi, asc_B46D   ; "'"
.text:0000000000006F9D                 xor     edi, edi        ; domainname
.text:0000000000006F9F                 mov     edx, 5          ; category
.text:0000000000006FA4                 call    _dcgettext
.text:0000000000006FA9                 mov     rcx, rax
.text:0000000000006FAC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006FB1                 lea     rax, asc_B46D   ; "'"
.text:0000000000006FB8                 cmp     rcx, rax
.text:0000000000006FBB                 jz      loc_7344
.text:0000000000006FC1
.text:0000000000006FC1 loc_6FC1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000006FC1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000006FC1                 xor     r15d, r15d
.text:0000000000006FC4                 test    ebx, ebx
.text:0000000000006FC6                 jz      loc_718D
.text:0000000000006FCC
.text:0000000000006FCC loc_6FCC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000006FCC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000006FCC                 test    ebx, ebx
.text:0000000000006FCE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000006FD3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000006FD8                 xor     r12d, r12d
.text:0000000000006FDB                 mov     rdi, rbx        ; s
.text:0000000000006FDE                 call    _strlen
.text:0000000000006FE3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006FE8                 mov     [rsp+0E8h+n], rax
.text:0000000000006FED                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006FF2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006FF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007000                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007005                 jmp     loc_62A3
.text:000000000000700A ; ---------------------------------------------------------------------------
.text:000000000000700A
.text:000000000000700A loc_700A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000700A                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:000000000000700A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000700F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007014                 xor     r12d, r12d
.text:0000000000007017                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007020                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007025                 xor     r15d, r15d
.text:0000000000007028                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000702D                 mov     [rsp+0E8h+n], 0
.text:0000000000007036                 mov     [rsp+0E8h+s2], 0
.text:000000000000703F                 jmp     loc_62A3
.text:0000000000007044 ; ---------------------------------------------------------------------------
.text:0000000000007044
.text:0000000000007044 loc_7044:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007044                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000007044                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000007049                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000704E                 xor     r12d, r12d
.text:0000000000007051                 mov     [rsp+0E8h+var_98], 0
.text:000000000000705A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000705F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007064                 jmp     loc_6283
.text:0000000000007069 ; ---------------------------------------------------------------------------
.text:0000000000007069
.text:0000000000007069 loc_7069:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000007069                 cmp     r13, r15
.text:000000000000706C                 jbe     short loc_7073
.text:000000000000706E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000007073
.text:0000000000007073 loc_7073:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000007073                 lea     rax, [rcx+2]
.text:0000000000007077                 cmp     r13, rax
.text:000000000000707A                 jbe     short loc_7082
.text:000000000000707C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000007082
.text:0000000000007082 loc_7082:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000007082                 mov     eax, r12d
.text:0000000000007085                 lea     r15, [rcx+3]
.text:0000000000007089                 xor     r12d, r12d
.text:000000000000708C                 mov     ebx, 30h ; '0'
.text:0000000000007091                 jmp     loc_63F8
.text:0000000000007091 ; ---------------------------------------------------------------------------
.text:0000000000007096                 align 20h
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000070A0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000070A5                 mov     rbp, r11
.text:00000000000070A8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000070AC                 jmp     loc_6D59
.text:00000000000070B1 ; ---------------------------------------------------------------------------
.text:00000000000070B1
.text:00000000000070B1 loc_70B1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000070B1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000070B6                 xor     r12d, r12d
.text:00000000000070B9                 jmp     loc_6BC0
.text:00000000000070BE ; ---------------------------------------------------------------------------
.text:00000000000070BE
.text:00000000000070BE loc_70BE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000070BE                 xor     r10d, r10d
.text:00000000000070C1                 jmp     loc_6C7D
.text:00000000000070C6 ; ---------------------------------------------------------------------------
.text:00000000000070C6
.text:00000000000070C6 loc_70C6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000070C6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000070CF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000070D4                 xor     r12d, r12d
.text:00000000000070D7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000070DC                 jmp     loc_6EBB
.text:00000000000070E1 ; ---------------------------------------------------------------------------
.text:00000000000070E1
.text:00000000000070E1 loc_70E1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000070E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000070E6                 mov     rsi, r14
.text:00000000000070E9                 mov     rcx, r13
.text:00000000000070EC                 mov     rax, rbx
.text:00000000000070EF                 mov     rdi, rbx
.text:00000000000070F2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000070F8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000070FD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000007105                 cmp     rsi, r11
.text:0000000000007108                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000710E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007116                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000711B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007120                 jnb     short loc_7148
.text:0000000000007122                 cmp     byte ptr [rcx], 0
.text:0000000000007125                 jnz     short loc_7137
.text:0000000000007127                 jmp     short loc_7148
.text:0000000000007127 ; ---------------------------------------------------------------------------
.text:0000000000007129                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000007130                 cmp     byte ptr [r9+rax], 0
.text:0000000000007135                 jz      short loc_7145
.text:0000000000007137
.text:0000000000007137 loc_7137:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000007137                 add     rax, 1
.text:000000000000713B                 lea     rdx, [rbp+rax+0]
.text:0000000000007140                 cmp     r11, rdx
.text:0000000000007143                 ja      short loc_7130
.text:0000000000007145
.text:0000000000007145 loc_7145:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000007145                 mov     rdi, rax
.text:0000000000007148
.text:0000000000007148 loc_7148:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000007148                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000007148                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000714D                 xor     r12d, r12d
.text:0000000000007150                 jmp     loc_6BB6
.text:0000000000007155 ; ---------------------------------------------------------------------------
.text:0000000000007155
.text:0000000000007155 loc_7155:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000007155                 mov     rdi, rbx
.text:0000000000007158                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000715E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007163                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007169                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007171                 xor     r12d, r12d
.text:0000000000007174                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007179                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000717E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000007183                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007188                 jmp     loc_6BB6
.text:000000000000718D ; ---------------------------------------------------------------------------
.text:000000000000718D
.text:000000000000718D loc_718D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000718D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000007192                 movzx   eax, byte ptr [rdx]
.text:0000000000007195                 test    al, al
.text:0000000000007197                 jz      loc_6FCC
.text:000000000000719D                 nop     dword ptr [rax]
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000071A0                 cmp     r13, r15
.text:00000000000071A3                 jbe     short loc_71A9
.text:00000000000071A5                 mov     [r14+r15], al
.text:00000000000071A9
.text:00000000000071A9 loc_71A9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000071A9                 add     r15, 1
.text:00000000000071AD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000071B2                 test    al, al
.text:00000000000071B4                 jnz     short loc_71A0
.text:00000000000071B6                 jmp     loc_6FCC
.text:00000000000071BB ; ---------------------------------------------------------------------------
.text:00000000000071BB
.text:00000000000071BB loc_71BB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000071BB                 mov     eax, edx
.text:00000000000071BD                 jmp     loc_6717
.text:00000000000071C2 ; ---------------------------------------------------------------------------
.text:00000000000071C2
.text:00000000000071C2 loc_71C2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000071C2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000071C6                 cmp     bl, 3Eh ; '>'
.text:00000000000071C9                 ja      loc_6A40
.text:00000000000071CF                 mov     rax, 7000A38200000000h
.text:00000000000071D9                 bt      rax, rbx
.text:00000000000071DD                 jnb     loc_6A40
.text:00000000000071E3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000071E8                 jnz     loc_73D2
.text:00000000000071EE                 cmp     r13, r15
.text:00000000000071F1                 jbe     short loc_71F8
.text:00000000000071F3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000071F8
.text:00000000000071F8 loc_71F8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000071F8                 lea     rax, [r15+1]
.text:00000000000071FC                 cmp     r13, rax
.text:00000000000071FF                 jbe     short loc_7207
.text:0000000000007201                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000007207
.text:0000000000007207 loc_7207:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000007207                 lea     rax, [r15+2]
.text:000000000000720B                 cmp     r13, rax
.text:000000000000720E                 jbe     short loc_7216
.text:0000000000007210                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000007216
.text:0000000000007216 loc_7216:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000007216                 lea     rax, [r15+3]
.text:000000000000721A                 cmp     r13, rax
.text:000000000000721D                 jbe     short loc_7225
.text:000000000000721F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000007225
.text:0000000000007225 loc_7225:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000007225                 add     r15, 4
.text:0000000000007229                 xor     edx, edx
.text:000000000000722B                 xor     r12d, r12d
.text:000000000000722E                 xor     eax, eax
.text:0000000000007230                 mov     rbp, rcx
.text:0000000000007233                 jmp     loc_63F8
.text:0000000000007238 ; ---------------------------------------------------------------------------
.text:0000000000007238
.text:0000000000007238 loc_7238:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007238                                         ; DATA XREF: .rodata:jpt_6261↓o
.text:0000000000007238                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000723A                 jz      loc_73C8
.text:0000000000007240                 lea     rax, asc_B46D   ; "'"
.text:0000000000007247                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000724C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007251                 xor     r12d, r12d
.text:0000000000007254                 mov     [rsp+0E8h+var_98], 0
.text:000000000000725D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007262                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007267                 mov     [rsp+0E8h+n], 1
.text:0000000000007270                 xor     r15d, r15d
.text:0000000000007273                 mov     [rsp+0E8h+s2], rax
.text:0000000000007278                 jmp     loc_62A3
.text:0000000000007278 ; ---------------------------------------------------------------------------
.text:000000000000727D                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000007280                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000007280                 mov     rbp, r11
.text:0000000000007283                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007288                 jmp     loc_6D59
.text:000000000000728D ; ---------------------------------------------------------------------------
.text:000000000000728D
.text:000000000000728D loc_728D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000728D                 lea     rax, unk_B46B
.text:0000000000007294                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007299                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000729E                 xor     r12d, r12d
.text:00000000000072A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000072AA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000072AF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000072B4                 mov     [rsp+0E8h+n], 1
.text:00000000000072BD                 xor     r15d, r15d
.text:00000000000072C0                 mov     [rsp+0E8h+s2], rax
.text:00000000000072C5                 jmp     loc_62A3
.text:00000000000072CA ; ---------------------------------------------------------------------------
.text:00000000000072CA
.text:00000000000072CA loc_72CA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000072CA                 mov     eax, edx
.text:00000000000072CC
.text:00000000000072CC loc_72CC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000072CC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000072CC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000072D1                 test    rbx, rbx
.text:00000000000072D4                 jz      short loc_7302
.text:00000000000072D6                 test    al, al
.text:00000000000072D8                 jz      short loc_7302
.text:00000000000072DA                 movzx   ecx, byte ptr [rbx]
.text:00000000000072DD                 mov     rax, rbx
.text:00000000000072E0                 test    cl, cl
.text:00000000000072E2                 jz      short loc_7302
.text:00000000000072E4                 mov     rdx, r15
.text:00000000000072E7                 sub     rax, r15
.text:00000000000072EA
.text:00000000000072EA loc_72EA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000072EA                 cmp     r13, rdx
.text:00000000000072ED                 jbe     short loc_72F3
.text:00000000000072EF                 mov     [r14+rdx], cl
.text:00000000000072F3
.text:00000000000072F3 loc_72F3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000072F3                 add     rdx, 1
.text:00000000000072F7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000072FB                 test    cl, cl
.text:00000000000072FD                 jnz     short loc_72EA
.text:00000000000072FF                 mov     r15, rdx
.text:0000000000007302
.text:0000000000007302 loc_7302:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000007302                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000007302                 cmp     r13, r15
.text:0000000000007305                 jbe     loc_6DA9
.text:000000000000730B                 mov     byte ptr [r14+r15], 0
.text:0000000000007310                 jmp     loc_6DA9
.text:0000000000007315 ; ---------------------------------------------------------------------------
.text:0000000000007315
.text:0000000000007315 loc_7315:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000007315                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000731A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000731F                 mov     rbp, r11
.text:0000000000007322                 setz    al
.text:0000000000007325                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007329                 jmp     loc_6D59
.text:000000000000732E ; ---------------------------------------------------------------------------
.text:000000000000732E
.text:000000000000732E loc_732E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000732E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007332                 mov     rdi, rcx
.text:0000000000007335                 call    gettext_quote
.text:000000000000733A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000733F                 jmp     loc_6F96
.text:0000000000007344 ; ---------------------------------------------------------------------------
.text:0000000000007344
.text:0000000000007344 loc_7344:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000007344                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007348                 mov     rdi, rcx
.text:000000000000734B                 call    gettext_quote
.text:0000000000007350                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007355                 jmp     loc_6FC1
.text:000000000000735A ; ---------------------------------------------------------------------------
.text:000000000000735A
.text:000000000000735A loc_735A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000735A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000735F                 mov     rbp, r11
.text:0000000000007362                 mov     eax, edx
.text:0000000000007364                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007368                 jmp     loc_6D59
.text:000000000000736D ; ---------------------------------------------------------------------------
.text:000000000000736D
.text:000000000000736D loc_736D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000736D                 sub     rsp, 8
.text:0000000000007371                 mov     r8d, 5
.text:0000000000007377                 mov     rcx, r11
.text:000000000000737A                 push    [rsp+0F0h+var_88]
.text:000000000000737E                 push    [rsp+0F8h+var_80]
.text:0000000000007382                 mov     rdi, r14
.text:0000000000007385                 push    [rsp+100h+var_C8]
.text:0000000000007389                 mov     r9d, [rsp+108h+var_70]
.text:0000000000007391                 mov     rdx, [rsp+108h+s]
.text:0000000000007396                 mov     rsi, [rsp+108h+var_98]
.text:000000000000739B                 call    quotearg_buffer_restyled
.text:00000000000073A0                 add     rsp, 20h
.text:00000000000073A4                 mov     r15, rax
.text:00000000000073A7                 jmp     loc_6DA9
.text:00000000000073AC ; ---------------------------------------------------------------------------
.text:00000000000073AC
.text:00000000000073AC loc_73AC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000073AC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000073B1                 jmp     loc_72CC
.text:00000000000073B6 ; ---------------------------------------------------------------------------
.text:00000000000073B6
.text:00000000000073B6 loc_73B6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000073B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000073BE                 jmp     loc_6D59
.text:00000000000073C3 ; ---------------------------------------------------------------------------
.text:00000000000073C3
.text:00000000000073C3 loc_73C3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000073C3                 call    ___stack_chk_fail
.text:00000000000073C8 ; ---------------------------------------------------------------------------
.text:00000000000073C8
.text:00000000000073C8 loc_73C8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000073C8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000073CD                 jmp     loc_6E41
.text:00000000000073D2 ; ---------------------------------------------------------------------------
.text:00000000000073D2
.text:00000000000073D2 loc_73D2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000073D2                 mov     rbp, r11
.text:00000000000073D5                 jmp     loc_6D70
.text:00000000000073DA ; ---------------------------------------------------------------------------
.text:00000000000073DA
.text:00000000000073DA loc_73DA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000073DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000073DF                 xor     eax, eax
.text:00000000000073E1                 xor     r12d, r12d
.text:00000000000073E4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000073ED                 jmp     loc_6994
.text:00000000000073F2 ; ---------------------------------------------------------------------------
.text:00000000000073F2
.text:00000000000073F2 loc_73F2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000073F2                 mov     rdx, r13
.text:00000000000073F5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000073FA                 jmp     loc_69F2
.text:00000000000073FF ; ---------------------------------------------------------------------------
.text:00000000000073FF
.text:00000000000073FF def_6261:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000073FF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000073FF ; } // starts at 61D0
.text:00000000000073FF quotearg_buffer_restyled endp
.text:00000000000073FF
.text:00000000000073FF ; ---------------------------------------------------------------------------
.text:0000000000007404                 align 10h
.text:0000000000007410
.text:0000000000007410 ; =============== S U B R O U T I N E =======================================
.text:0000000000007410
.text:0000000000007410
.text:0000000000007410 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000007410                                         ; quotearg_n_mem+7↓j ...
.text:0000000000007410
.text:0000000000007410 var_50          = qword ptr -50h
.text:0000000000007410 var_48          = qword ptr -48h
.text:0000000000007410 var_40          = dword ptr -40h
.text:0000000000007410 var_3C          = dword ptr -3Ch
.text:0000000000007410
.text:0000000000007410 ; __unwind {
.text:0000000000007410                 push    r15
.text:0000000000007412                 push    r14
.text:0000000000007414                 movsxd  r15, edi
.text:0000000000007417                 push    r13
.text:0000000000007419                 push    r12
.text:000000000000741B                 mov     r14, rdx
.text:000000000000741E                 push    rbp
.text:000000000000741F                 push    rbx
.text:0000000000007420                 mov     rbp, rcx
.text:0000000000007423                 sub     rsp, 28h
.text:0000000000007427                 mov     [rsp+58h+var_50], rsi
.text:000000000000742C                 call    ___errno_location
.text:0000000000007431                 mov     r13, rax
.text:0000000000007434                 mov     eax, [rax]
.text:0000000000007436                 test    r15d, r15d
.text:0000000000007439                 mov     rbx, cs:slotvec
.text:0000000000007440                 mov     [rsp+58h+var_40], eax
.text:0000000000007444                 js      loc_75B1
.text:000000000000744A                 cmp     cs:nslots, r15d
.text:0000000000007451                 jg      short loc_74B5
.text:0000000000007453                 cmp     r15d, 7FFFFFFFh
.text:000000000000745A                 jz      loc_75B6
.text:0000000000007460                 lea     r12d, [r15+1]
.text:0000000000007464                 lea     rax, slotvec0
.text:000000000000746B                 movsxd  rsi, r12d
.text:000000000000746E                 shl     rsi, 4
.text:0000000000007472                 cmp     rbx, rax
.text:0000000000007475                 jz      loc_7590
.text:000000000000747B                 mov     rdi, rbx
.text:000000000000747E                 call    xrealloc
.text:0000000000007483                 mov     rbx, rax
.text:0000000000007486                 mov     cs:slotvec, rax
.text:000000000000748D
.text:000000000000748D loc_748D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000748D                 movsxd  rdi, cs:nslots
.text:0000000000007494                 mov     edx, r12d
.text:0000000000007497                 xor     esi, esi        ; c
.text:0000000000007499                 sub     edx, edi
.text:000000000000749B                 shl     rdi, 4
.text:000000000000749F                 movsxd  rdx, edx
.text:00000000000074A2                 add     rdi, rbx        ; s
.text:00000000000074A5                 shl     rdx, 4          ; n
.text:00000000000074A9                 call    _memset
.text:00000000000074AE                 mov     cs:nslots, r12d
.text:00000000000074B5
.text:00000000000074B5 loc_74B5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000074B5                 mov     eax, [rbp+4]
.text:00000000000074B8                 shl     r15, 4
.text:00000000000074BC                 sub     rsp, 8
.text:00000000000074C0                 add     rbx, r15
.text:00000000000074C3                 lea     r15, [rbp+8]
.text:00000000000074C7                 mov     r8d, [rbp+0]
.text:00000000000074CB                 mov     r11, [rbx]
.text:00000000000074CE                 mov     r12, [rbx+8]
.text:00000000000074D2                 mov     rcx, r14
.text:00000000000074D5                 or      eax, 1
.text:00000000000074D8                 mov     [rsp+60h+var_3C], eax
.text:00000000000074DC                 push    qword ptr [rbp+30h]
.text:00000000000074DF                 mov     r9d, eax
.text:00000000000074E2                 push    qword ptr [rbp+28h]
.text:00000000000074E5                 push    r15
.text:00000000000074E7                 mov     rsi, r11
.text:00000000000074EA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000074EF                 mov     rdi, r12
.text:00000000000074F2                 mov     [rsp+78h+var_48], r11
.text:00000000000074F7                 call    quotearg_buffer_restyled
.text:00000000000074FC                 add     rsp, 20h
.text:0000000000007500                 mov     r11, [rsp+58h+var_48]
.text:0000000000007505                 cmp     r11, rax
.text:0000000000007508                 ja      short loc_7571
.text:000000000000750A                 lea     rsi, [rax+1]
.text:000000000000750E                 lea     rax, slot0
.text:0000000000007515                 cmp     r12, rax
.text:0000000000007518                 mov     [rbx], rsi
.text:000000000000751B                 jz      short loc_752F
.text:000000000000751D                 mov     rdi, r12        ; ptr
.text:0000000000007520                 mov     [rsp+58h+var_48], rsi
.text:0000000000007525                 call    _free
.text:000000000000752A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000752F
.text:000000000000752F loc_752F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000752F                 mov     rdi, rsi
.text:0000000000007532                 mov     [rsp+58h+var_48], rsi
.text:0000000000007537                 call    xmalloc
.text:000000000000753C                 sub     rsp, 8
.text:0000000000007540                 mov     [rbx+8], rax
.text:0000000000007544                 mov     r8d, [rbp+0]
.text:0000000000007548                 push    qword ptr [rbp+30h]
.text:000000000000754B                 push    qword ptr [rbp+28h]
.text:000000000000754E                 mov     rcx, r14
.text:0000000000007551                 push    r15
.text:0000000000007553                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000007558                 mov     rdi, rax
.text:000000000000755B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000007560                 mov     rsi, [rsp+78h+var_48]
.text:0000000000007565                 mov     r12, rax
.text:0000000000007568                 call    quotearg_buffer_restyled
.text:000000000000756D                 add     rsp, 20h
.text:0000000000007571
.text:0000000000007571 loc_7571:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000007571                 mov     eax, [rsp+58h+var_40]
.text:0000000000007575                 mov     [r13+0], eax
.text:0000000000007579                 add     rsp, 28h
.text:000000000000757D                 mov     rax, r12
.text:0000000000007580                 pop     rbx
.text:0000000000007581                 pop     rbp
.text:0000000000007582                 pop     r12
.text:0000000000007584                 pop     r13
.text:0000000000007586                 pop     r14
.text:0000000000007588                 pop     r15
.text:000000000000758A                 retn
.text:000000000000758A ; ---------------------------------------------------------------------------
.text:000000000000758B                 align 10h
.text:0000000000007590
.text:0000000000007590 loc_7590:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000007590                 xor     edi, edi
.text:0000000000007592                 call    xrealloc
.text:0000000000007597                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000759F                 mov     rbx, rax
.text:00000000000075A2                 mov     cs:slotvec, rax
.text:00000000000075A9                 movups  xmmword ptr [rax], xmm0
.text:00000000000075AC                 jmp     loc_748D
.text:00000000000075B1 ; ---------------------------------------------------------------------------
.text:00000000000075B1
.text:00000000000075B1 loc_75B1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000075B1                 call    _abort
.text:00000000000075B6 ; ---------------------------------------------------------------------------
.text:00000000000075B6
.text:00000000000075B6 loc_75B6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000075B6                 call    xalloc_die
.text:00000000000075B6 ; } // starts at 7410
.text:00000000000075B6 quotearg_n_options endp
.text:00000000000075B6
.text:00000000000075B6 ; ---------------------------------------------------------------------------
.text:00000000000075BB                 align 20h
.text:00000000000075C0
.text:00000000000075C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075C0
.text:00000000000075C0 ; Attributes: info_from_lumina
.text:00000000000075C0
.text:00000000000075C0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000075C0                 public clone_quoting_options
.text:00000000000075C0 clone_quoting_options proc near
.text:00000000000075C0 ; __unwind {
.text:00000000000075C0                 push    r12
.text:00000000000075C2                 push    rbp
.text:00000000000075C3                 push    rbx
.text:00000000000075C4                 mov     rbx, rdi
.text:00000000000075C7                 call    ___errno_location
.text:00000000000075CC                 mov     r12d, [rax]
.text:00000000000075CF                 mov     rbp, rax
.text:00000000000075D2                 lea     rax, default_quoting_options
.text:00000000000075D9                 test    rbx, rbx
.text:00000000000075DC                 mov     esi, 38h ; '8'  ; n
.text:00000000000075E1                 cmovz   rbx, rax
.text:00000000000075E5                 mov     rdi, rbx        ; src
.text:00000000000075E8                 call    xmemdup
.text:00000000000075ED                 mov     [rbp+0], r12d
.text:00000000000075F1                 pop     rbx
.text:00000000000075F2                 pop     rbp
.text:00000000000075F3                 pop     r12
.text:00000000000075F5                 retn
.text:00000000000075F5 ; } // starts at 75C0
.text:00000000000075F5 clone_quoting_options endp
.text:00000000000075F5
.text:00000000000075F5 ; ---------------------------------------------------------------------------
.text:00000000000075F6                 align 20h
.text:0000000000007600
.text:0000000000007600 ; =============== S U B R O U T I N E =======================================
.text:0000000000007600
.text:0000000000007600
.text:0000000000007600                 public get_quoting_style
.text:0000000000007600 get_quoting_style proc near
.text:0000000000007600 ; __unwind {
.text:0000000000007600                 lea     rax, default_quoting_options
.text:0000000000007607                 test    rdi, rdi
.text:000000000000760A                 cmovz   rdi, rax
.text:000000000000760E                 mov     eax, [rdi]
.text:0000000000007610                 retn
.text:0000000000007610 ; } // starts at 7600
.text:0000000000007610 get_quoting_style endp
.text:0000000000007610
.text:0000000000007610 ; ---------------------------------------------------------------------------
.text:0000000000007611                 align 20h
.text:0000000000007620
.text:0000000000007620 ; =============== S U B R O U T I N E =======================================
.text:0000000000007620
.text:0000000000007620
.text:0000000000007620                 public set_quoting_style
.text:0000000000007620 set_quoting_style proc near
.text:0000000000007620 ; __unwind {
.text:0000000000007620                 lea     rax, default_quoting_options
.text:0000000000007627                 test    rdi, rdi
.text:000000000000762A                 cmovz   rdi, rax
.text:000000000000762E                 mov     [rdi], esi
.text:0000000000007630                 retn
.text:0000000000007630 ; } // starts at 7620
.text:0000000000007630 set_quoting_style endp
.text:0000000000007630
.text:0000000000007630 ; ---------------------------------------------------------------------------
.text:0000000000007631                 align 20h
.text:0000000000007640
.text:0000000000007640 ; =============== S U B R O U T I N E =======================================
.text:0000000000007640
.text:0000000000007640 ; Attributes: info_from_lumina
.text:0000000000007640
.text:0000000000007640 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000007640                 public set_char_quoting
.text:0000000000007640 set_char_quoting proc near
.text:0000000000007640 ; __unwind {
.text:0000000000007640                 lea     rax, default_quoting_options
.text:0000000000007647                 test    rdi, rdi
.text:000000000000764A                 mov     ecx, esi
.text:000000000000764C                 cmovz   rdi, rax
.text:0000000000007650                 mov     eax, esi
.text:0000000000007652                 and     ecx, 1Fh
.text:0000000000007655                 shr     al, 5
.text:0000000000007658                 movzx   eax, al
.text:000000000000765B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000007660                 mov     esi, [rdi]
.text:0000000000007662                 mov     eax, esi
.text:0000000000007664                 shr     eax, cl
.text:0000000000007666                 xor     edx, eax
.text:0000000000007668                 and     eax, 1
.text:000000000000766B                 and     edx, 1
.text:000000000000766E                 shl     edx, cl
.text:0000000000007670                 xor     edx, esi
.text:0000000000007672                 mov     [rdi], edx
.text:0000000000007674                 retn
.text:0000000000007674 ; } // starts at 7640
.text:0000000000007674 set_char_quoting endp
.text:0000000000007674
.text:0000000000007674 ; ---------------------------------------------------------------------------
.text:0000000000007675                 align 20h
.text:0000000000007680
.text:0000000000007680 ; =============== S U B R O U T I N E =======================================
.text:0000000000007680
.text:0000000000007680
.text:0000000000007680                 public set_quoting_flags
.text:0000000000007680 set_quoting_flags proc near
.text:0000000000007680 ; __unwind {
.text:0000000000007680                 lea     rax, default_quoting_options
.text:0000000000007687                 test    rdi, rdi
.text:000000000000768A                 cmovz   rdi, rax
.text:000000000000768E                 mov     eax, [rdi+4]
.text:0000000000007691                 mov     [rdi+4], esi
.text:0000000000007694                 retn
.text:0000000000007694 ; } // starts at 7680
.text:0000000000007694 set_quoting_flags endp
.text:0000000000007694
.text:0000000000007694 ; ---------------------------------------------------------------------------
.text:0000000000007695                 align 20h
.text:00000000000076A0
.text:00000000000076A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076A0
.text:00000000000076A0 ; Attributes: info_from_lumina
.text:00000000000076A0
.text:00000000000076A0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000076A0                 public set_custom_quoting
.text:00000000000076A0 set_custom_quoting proc near
.text:00000000000076A0 ; __unwind {
.text:00000000000076A0                 lea     rax, default_quoting_options
.text:00000000000076A7                 test    rdi, rdi
.text:00000000000076AA                 cmovz   rdi, rax
.text:00000000000076AE                 test    rsi, rsi
.text:00000000000076B1                 mov     dword ptr [rdi], 0Ah
.text:00000000000076B7                 jz      short loc_76C7
.text:00000000000076B9                 test    rdx, rdx
.text:00000000000076BC                 jz      short loc_76C7
.text:00000000000076BE                 mov     [rdi+28h], rsi
.text:00000000000076C2                 mov     [rdi+30h], rdx
.text:00000000000076C6                 retn
.text:00000000000076C7 ; ---------------------------------------------------------------------------
.text:00000000000076C7
.text:00000000000076C7 loc_76C7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000076C7                                         ; set_custom_quoting+1C↑j
.text:00000000000076C7                 sub     rsp, 8
.text:00000000000076CB                 call    _abort
.text:00000000000076CB ; } // starts at 76A0
.text:00000000000076CB set_custom_quoting endp
.text:00000000000076CB
.text:00000000000076D0
.text:00000000000076D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076D0
.text:00000000000076D0 ; Attributes: info_from_lumina
.text:00000000000076D0
.text:00000000000076D0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000076D0                 public quotearg_buffer
.text:00000000000076D0 quotearg_buffer proc near
.text:00000000000076D0
.text:00000000000076D0 var_40          = qword ptr -40h
.text:00000000000076D0
.text:00000000000076D0 ; __unwind {
.text:00000000000076D0                 push    r15
.text:00000000000076D2                 push    r14
.text:00000000000076D4                 lea     rax, default_quoting_options
.text:00000000000076DB                 push    r13
.text:00000000000076DD                 push    r12
.text:00000000000076DF                 mov     r13, rdi
.text:00000000000076E2                 push    rbp
.text:00000000000076E3                 push    rbx
.text:00000000000076E4                 mov     rbx, r8
.text:00000000000076E7                 mov     r14, rsi
.text:00000000000076EA                 mov     r15, rdx
.text:00000000000076ED                 sub     rsp, 18h
.text:00000000000076F1                 test    r8, r8
.text:00000000000076F4                 cmovz   rbx, rax
.text:00000000000076F8                 mov     [rsp+48h+var_40], rcx
.text:00000000000076FD                 call    ___errno_location
.text:0000000000007702                 mov     r12d, [rax]
.text:0000000000007705                 mov     rbp, rax
.text:0000000000007708                 lea     rax, [rbx+8]
.text:000000000000770C                 sub     rsp, 8
.text:0000000000007710                 mov     r9d, [rbx+4]
.text:0000000000007714                 push    qword ptr [rbx+30h]
.text:0000000000007717                 mov     r8d, [rbx]
.text:000000000000771A                 push    qword ptr [rbx+28h]
.text:000000000000771D                 mov     rdx, r15
.text:0000000000007720                 push    rax
.text:0000000000007721                 mov     rcx, [rsp+68h+var_40]
.text:0000000000007726                 mov     rsi, r14
.text:0000000000007729                 mov     rdi, r13
.text:000000000000772C                 call    quotearg_buffer_restyled
.text:0000000000007731                 mov     [rbp+0], r12d
.text:0000000000007735                 add     rsp, 38h
.text:0000000000007739                 pop     rbx
.text:000000000000773A                 pop     rbp
.text:000000000000773B                 pop     r12
.text:000000000000773D                 pop     r13
.text:000000000000773F                 pop     r14
.text:0000000000007741                 pop     r15
.text:0000000000007743                 retn
.text:0000000000007743 ; } // starts at 76D0
.text:0000000000007743 quotearg_buffer endp
.text:0000000000007743
.text:0000000000007743 ; ---------------------------------------------------------------------------
.text:0000000000007744                 align 10h
.text:0000000000007750
.text:0000000000007750 ; =============== S U B R O U T I N E =======================================
.text:0000000000007750
.text:0000000000007750 ; Attributes: info_from_lumina
.text:0000000000007750
.text:0000000000007750 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000007750                 public quotearg_alloc_mem
.text:0000000000007750 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000007750
.text:0000000000007750 var_5C          = dword ptr -5Ch
.text:0000000000007750 var_58          = qword ptr -58h
.text:0000000000007750 var_50          = qword ptr -50h
.text:0000000000007750 var_48          = qword ptr -48h
.text:0000000000007750 var_40          = qword ptr -40h
.text:0000000000007750
.text:0000000000007750 ; __unwind {
.text:0000000000007750                 push    r15
.text:0000000000007752                 push    r14
.text:0000000000007754                 lea     rax, default_quoting_options
.text:000000000000775B                 push    r13
.text:000000000000775D                 push    r12
.text:000000000000775F                 mov     r12, rdx
.text:0000000000007762                 push    rbp
.text:0000000000007763                 push    rbx
.text:0000000000007764                 mov     rbx, rcx
.text:0000000000007767                 mov     r14, rdi
.text:000000000000776A                 mov     r15, rsi
.text:000000000000776D                 sub     rsp, 38h
.text:0000000000007771                 test    rcx, rcx
.text:0000000000007774                 cmovz   rbx, rax
.text:0000000000007778                 xor     ebp, ebp
.text:000000000000777A                 call    ___errno_location
.text:000000000000777F                 test    r12, r12
.text:0000000000007782                 mov     r13, rax
.text:0000000000007785                 mov     eax, [rax]
.text:0000000000007787                 setz    bpl
.text:000000000000778B                 or      ebp, [rbx+4]
.text:000000000000778E                 lea     r10, [rbx+8]
.text:0000000000007792                 sub     rsp, 8
.text:0000000000007796                 mov     r8d, [rbx]
.text:0000000000007799                 mov     rcx, r15
.text:000000000000779C                 mov     [rsp+70h+var_5C], eax
.text:00000000000077A0                 push    qword ptr [rbx+30h]
.text:00000000000077A3                 mov     rdx, r14
.text:00000000000077A6                 push    qword ptr [rbx+28h]
.text:00000000000077A9                 push    r10
.text:00000000000077AB                 xor     esi, esi
.text:00000000000077AD                 mov     r9d, ebp
.text:00000000000077B0                 xor     edi, edi
.text:00000000000077B2                 mov     [rsp+88h+var_48], r10
.text:00000000000077B7                 call    quotearg_buffer_restyled
.text:00000000000077BC                 lea     rsi, [rax+1]
.text:00000000000077C0                 mov     [rsp+88h+var_40], rax
.text:00000000000077C5                 add     rsp, 20h
.text:00000000000077C9                 mov     rdi, rsi
.text:00000000000077CC                 mov     [rsp+68h+var_50], rsi
.text:00000000000077D1                 call    xmalloc
.text:00000000000077D6                 mov     [rsp+68h+var_58], rax
.text:00000000000077DB                 sub     rsp, 8
.text:00000000000077DF                 push    qword ptr [rbx+30h]
.text:00000000000077E2                 push    qword ptr [rbx+28h]
.text:00000000000077E5                 mov     r10, [rsp+80h+var_48]
.text:00000000000077EA                 mov     r9d, ebp
.text:00000000000077ED                 mov     r8d, [rbx]
.text:00000000000077F0                 mov     rcx, r15
.text:00000000000077F3                 mov     rdx, r14
.text:00000000000077F6                 mov     rdi, rax
.text:00000000000077F9                 push    r10
.text:00000000000077FB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000007800                 call    quotearg_buffer_restyled
.text:0000000000007805                 mov     eax, [rsp+88h+var_5C]
.text:0000000000007809                 add     rsp, 20h
.text:000000000000780D                 test    r12, r12
.text:0000000000007810                 mov     [r13+0], eax
.text:0000000000007814                 jz      short loc_781F
.text:0000000000007816                 mov     r11, [rsp+68h+var_40]
.text:000000000000781B                 mov     [r12], r11
.text:000000000000781F
.text:000000000000781F loc_781F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000781F                 mov     rax, [rsp+68h+var_58]
.text:0000000000007824                 add     rsp, 38h
.text:0000000000007828                 pop     rbx
.text:0000000000007829                 pop     rbp
.text:000000000000782A                 pop     r12
.text:000000000000782C                 pop     r13
.text:000000000000782E                 pop     r14
.text:0000000000007830                 pop     r15
.text:0000000000007832                 retn
.text:0000000000007832 ; } // starts at 7750
.text:0000000000007832 quotearg_alloc_mem endp
.text:0000000000007832
.text:0000000000007832 ; ---------------------------------------------------------------------------
.text:0000000000007833                 align 20h
.text:0000000000007840
.text:0000000000007840 ; =============== S U B R O U T I N E =======================================
.text:0000000000007840
.text:0000000000007840
.text:0000000000007840                 public quotearg_alloc
.text:0000000000007840 quotearg_alloc  proc near
.text:0000000000007840 ; __unwind {
.text:0000000000007840                 mov     rcx, rdx
.text:0000000000007843                 xor     edx, edx
.text:0000000000007845                 jmp     quotearg_alloc_mem
.text:0000000000007845 ; } // starts at 7840
.text:0000000000007845 quotearg_alloc  endp
.text:0000000000007845
.text:0000000000007845 ; ---------------------------------------------------------------------------
.text:000000000000784A                 align 10h
.text:0000000000007850
.text:0000000000007850 ; =============== S U B R O U T I N E =======================================
.text:0000000000007850
.text:0000000000007850 ; Attributes: info_from_lumina
.text:0000000000007850
.text:0000000000007850 ; void __cdecl quotearg_free()
.text:0000000000007850                 public quotearg_free
.text:0000000000007850 quotearg_free   proc near
.text:0000000000007850 ; __unwind {
.text:0000000000007850                 mov     eax, cs:nslots
.text:0000000000007856                 push    r12
.text:0000000000007858                 mov     r12, cs:slotvec
.text:000000000000785F                 push    rbp
.text:0000000000007860                 push    rbx
.text:0000000000007861                 cmp     eax, 1
.text:0000000000007864                 jle     short loc_7891
.text:0000000000007866                 sub     eax, 2
.text:0000000000007869                 lea     rbx, [r12+18h]
.text:000000000000786E                 shl     rax, 4
.text:0000000000007872                 lea     rbp, [r12+rax+28h]
.text:0000000000007877                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007880
.text:0000000000007880 loc_7880:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000007880                 mov     rdi, [rbx]      ; ptr
.text:0000000000007883                 add     rbx, 10h
.text:0000000000007887                 call    _free
.text:000000000000788C                 cmp     rbx, rbp
.text:000000000000788F                 jnz     short loc_7880
.text:0000000000007891
.text:0000000000007891 loc_7891:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000007891                 mov     rdi, [r12+8]    ; ptr
.text:0000000000007896                 lea     rbx, slot0
.text:000000000000789D                 cmp     rdi, rbx
.text:00000000000078A0                 jz      short loc_78B9
.text:00000000000078A2                 call    _free
.text:00000000000078A7                 mov     cs:slotvec0, 100h
.text:00000000000078B2                 mov     cs:off_20E0B8, rbx
.text:00000000000078B9
.text:00000000000078B9 loc_78B9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000078B9                 lea     rbx, slotvec0
.text:00000000000078C0                 cmp     r12, rbx
.text:00000000000078C3                 jz      short loc_78D4
.text:00000000000078C5                 mov     rdi, r12        ; ptr
.text:00000000000078C8                 call    _free
.text:00000000000078CD                 mov     cs:slotvec, rbx
.text:00000000000078D4
.text:00000000000078D4 loc_78D4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000078D4                 pop     rbx
.text:00000000000078D5                 mov     cs:nslots, 1
.text:00000000000078DF                 pop     rbp
.text:00000000000078E0                 pop     r12
.text:00000000000078E2                 retn
.text:00000000000078E2 ; } // starts at 7850
.text:00000000000078E2 quotearg_free   endp
.text:00000000000078E2
.text:00000000000078E2 ; ---------------------------------------------------------------------------
.text:00000000000078E3                 align 10h
.text:00000000000078F0
.text:00000000000078F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078F0
.text:00000000000078F0
.text:00000000000078F0                 public quotearg_n
.text:00000000000078F0 quotearg_n      proc near
.text:00000000000078F0 ; __unwind {
.text:00000000000078F0                 lea     rcx, default_quoting_options
.text:00000000000078F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000078FE                 jmp     quotearg_n_options
.text:00000000000078FE ; } // starts at 78F0
.text:00000000000078FE quotearg_n      endp
.text:00000000000078FE
.text:00000000000078FE ; ---------------------------------------------------------------------------
.text:0000000000007903                 align 10h
.text:0000000000007910
.text:0000000000007910 ; =============== S U B R O U T I N E =======================================
.text:0000000000007910
.text:0000000000007910
.text:0000000000007910                 public quotearg_n_mem
.text:0000000000007910 quotearg_n_mem  proc near
.text:0000000000007910 ; __unwind {
.text:0000000000007910                 lea     rcx, default_quoting_options
.text:0000000000007917                 jmp     quotearg_n_options
.text:0000000000007917 ; } // starts at 7910
.text:0000000000007917 quotearg_n_mem  endp
.text:0000000000007917
.text:0000000000007917 ; ---------------------------------------------------------------------------
.text:000000000000791C                 align 20h
.text:0000000000007920
.text:0000000000007920 ; =============== S U B R O U T I N E =======================================
.text:0000000000007920
.text:0000000000007920
.text:0000000000007920                 public quotearg
.text:0000000000007920 quotearg        proc near
.text:0000000000007920 ; __unwind {
.text:0000000000007920                 lea     rcx, default_quoting_options
.text:0000000000007927                 mov     rsi, rdi
.text:000000000000792A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007931                 xor     edi, edi
.text:0000000000007933                 jmp     quotearg_n_options
.text:0000000000007933 ; } // starts at 7920
.text:0000000000007933 quotearg        endp
.text:0000000000007933
.text:0000000000007933 ; ---------------------------------------------------------------------------
.text:0000000000007938                 align 20h
.text:0000000000007940
.text:0000000000007940 ; =============== S U B R O U T I N E =======================================
.text:0000000000007940
.text:0000000000007940
.text:0000000000007940                 public quotearg_mem
.text:0000000000007940 quotearg_mem    proc near
.text:0000000000007940 ; __unwind {
.text:0000000000007940                 lea     rcx, default_quoting_options
.text:0000000000007947                 mov     rdx, rsi
.text:000000000000794A                 mov     rsi, rdi
.text:000000000000794D                 xor     edi, edi
.text:000000000000794F                 jmp     quotearg_n_options
.text:000000000000794F ; } // starts at 7940
.text:000000000000794F quotearg_mem    endp
.text:000000000000794F
.text:000000000000794F ; ---------------------------------------------------------------------------
.text:0000000000007954                 align 20h
.text:0000000000007960
.text:0000000000007960 ; =============== S U B R O U T I N E =======================================
.text:0000000000007960
.text:0000000000007960 ; Attributes: info_from_lumina
.text:0000000000007960
.text:0000000000007960 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000007960                 public quotearg_n_style
.text:0000000000007960 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000007960                                         ; quotearg_style+7↓j
.text:0000000000007960
.text:0000000000007960 var_48          = dword ptr -48h
.text:0000000000007960 var_44          = qword ptr -44h
.text:0000000000007960 var_3C          = qword ptr -3Ch
.text:0000000000007960 var_34          = qword ptr -34h
.text:0000000000007960 var_2C          = qword ptr -2Ch
.text:0000000000007960 var_24          = qword ptr -24h
.text:0000000000007960 var_1C          = qword ptr -1Ch
.text:0000000000007960 var_14          = dword ptr -14h
.text:0000000000007960 var_10          = qword ptr -10h
.text:0000000000007960
.text:0000000000007960 ; __unwind {
.text:0000000000007960                 sub     rsp, 48h
.text:0000000000007964                 mov     rax, rdx
.text:0000000000007967                 mov     rdx, fs:28h
.text:0000000000007970                 mov     [rsp+48h+var_10], rdx
.text:0000000000007975                 xor     edx, edx
.text:0000000000007977                 cmp     esi, 0Ah
.text:000000000000797A                 jz      short loc_79E4
.text:000000000000797C                 mov     [rsp+48h+var_48], esi
.text:000000000000797F                 mov     rcx, rsp
.text:0000000000007982                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007989                 mov     rsi, rax
.text:000000000000798C                 mov     [rsp+48h+var_44], 0
.text:0000000000007995                 mov     [rsp+48h+var_3C], 0
.text:000000000000799E                 mov     [rsp+48h+var_34], 0
.text:00000000000079A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000079B0                 mov     [rsp+48h+var_24], 0
.text:00000000000079B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000079C2                 mov     [rsp+48h+var_14], 0
.text:00000000000079CA                 call    quotearg_n_options
.text:00000000000079CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000079D4                 xor     rcx, fs:28h
.text:00000000000079DD                 jnz     short loc_79E9
.text:00000000000079DF                 add     rsp, 48h
.text:00000000000079E3                 retn
.text:00000000000079E4 ; ---------------------------------------------------------------------------
.text:00000000000079E4
.text:00000000000079E4 loc_79E4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000079E4                 call    _abort
.text:00000000000079E9 ; ---------------------------------------------------------------------------
.text:00000000000079E9
.text:00000000000079E9 loc_79E9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000079E9                 call    ___stack_chk_fail
.text:00000000000079E9 ; } // starts at 7960
.text:00000000000079E9 quotearg_n_style endp
.text:00000000000079E9
.text:00000000000079E9 ; ---------------------------------------------------------------------------
.text:00000000000079EE                 align 10h
.text:00000000000079F0
.text:00000000000079F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079F0
.text:00000000000079F0 ; Attributes: info_from_lumina
.text:00000000000079F0
.text:00000000000079F0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000079F0                 public quotearg_n_style_mem
.text:00000000000079F0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000079F0
.text:00000000000079F0 var_48          = dword ptr -48h
.text:00000000000079F0 var_44          = qword ptr -44h
.text:00000000000079F0 var_3C          = qword ptr -3Ch
.text:00000000000079F0 var_34          = qword ptr -34h
.text:00000000000079F0 var_2C          = qword ptr -2Ch
.text:00000000000079F0 var_24          = qword ptr -24h
.text:00000000000079F0 var_1C          = qword ptr -1Ch
.text:00000000000079F0 var_14          = dword ptr -14h
.text:00000000000079F0 var_10          = qword ptr -10h
.text:00000000000079F0
.text:00000000000079F0 ; __unwind {
.text:00000000000079F0                 sub     rsp, 48h
.text:00000000000079F4                 mov     rax, rdx
.text:00000000000079F7                 mov     rdx, rcx
.text:00000000000079FA                 mov     rcx, fs:28h
.text:0000000000007A03                 mov     [rsp+48h+var_10], rcx
.text:0000000000007A08                 xor     ecx, ecx
.text:0000000000007A0A                 cmp     esi, 0Ah
.text:0000000000007A0D                 jz      short loc_7A70
.text:0000000000007A0F                 mov     [rsp+48h+var_48], esi
.text:0000000000007A12                 mov     rcx, rsp
.text:0000000000007A15                 mov     rsi, rax
.text:0000000000007A18                 mov     [rsp+48h+var_44], 0
.text:0000000000007A21                 mov     [rsp+48h+var_3C], 0
.text:0000000000007A2A                 mov     [rsp+48h+var_34], 0
.text:0000000000007A33                 mov     [rsp+48h+var_2C], 0
.text:0000000000007A3C                 mov     [rsp+48h+var_24], 0
.text:0000000000007A45                 mov     [rsp+48h+var_1C], 0
.text:0000000000007A4E                 mov     [rsp+48h+var_14], 0
.text:0000000000007A56                 call    quotearg_n_options
.text:0000000000007A5B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000007A60                 xor     rdx, fs:28h
.text:0000000000007A69                 jnz     short loc_7A75
.text:0000000000007A6B                 add     rsp, 48h
.text:0000000000007A6F                 retn
.text:0000000000007A70 ; ---------------------------------------------------------------------------
.text:0000000000007A70
.text:0000000000007A70 loc_7A70:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000007A70                 call    _abort
.text:0000000000007A75 ; ---------------------------------------------------------------------------
.text:0000000000007A75
.text:0000000000007A75 loc_7A75:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000007A75                 call    ___stack_chk_fail
.text:0000000000007A75 ; } // starts at 79F0
.text:0000000000007A75 quotearg_n_style_mem endp
.text:0000000000007A75
.text:0000000000007A75 ; ---------------------------------------------------------------------------
.text:0000000000007A7A                 align 20h
.text:0000000000007A80
.text:0000000000007A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A80
.text:0000000000007A80
.text:0000000000007A80                 public quotearg_style
.text:0000000000007A80 quotearg_style  proc near
.text:0000000000007A80 ; __unwind {
.text:0000000000007A80                 mov     rdx, rsi
.text:0000000000007A83                 mov     esi, edi
.text:0000000000007A85                 xor     edi, edi
.text:0000000000007A87                 jmp     quotearg_n_style
.text:0000000000007A87 ; } // starts at 7A80
.text:0000000000007A87 quotearg_style  endp
.text:0000000000007A87
.text:0000000000007A87 ; ---------------------------------------------------------------------------
.text:0000000000007A8C                 align 10h
.text:0000000000007A90
.text:0000000000007A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A90
.text:0000000000007A90
.text:0000000000007A90                 public quotearg_style_mem
.text:0000000000007A90 quotearg_style_mem proc near
.text:0000000000007A90 ; __unwind {
.text:0000000000007A90                 mov     rcx, rdx
.text:0000000000007A93                 mov     rdx, rsi
.text:0000000000007A96                 mov     esi, edi
.text:0000000000007A98                 xor     edi, edi
.text:0000000000007A9A                 jmp     quotearg_n_style_mem
.text:0000000000007A9A ; } // starts at 7A90
.text:0000000000007A9A quotearg_style_mem endp
.text:0000000000007A9A
.text:0000000000007A9A ; ---------------------------------------------------------------------------
.text:0000000000007A9F                 align 20h
.text:0000000000007AA0
.text:0000000000007AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AA0
.text:0000000000007AA0 ; Attributes: info_from_lumina
.text:0000000000007AA0
.text:0000000000007AA0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000007AA0                 public quotearg_char_mem
.text:0000000000007AA0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000007AA0                                         ; quotearg_colon+C↓j ...
.text:0000000000007AA0
.text:0000000000007AA0 var_48          = xmmword ptr -48h
.text:0000000000007AA0 var_38          = xmmword ptr -38h
.text:0000000000007AA0 var_28          = xmmword ptr -28h
.text:0000000000007AA0 var_18          = qword ptr -18h
.text:0000000000007AA0 var_10          = qword ptr -10h
.text:0000000000007AA0
.text:0000000000007AA0 ; __unwind {
.text:0000000000007AA0                 sub     rsp, 48h
.text:0000000000007AA4                 mov     ecx, edx
.text:0000000000007AA6                 mov     rax, fs:28h
.text:0000000000007AAF                 mov     [rsp+48h+var_10], rax
.text:0000000000007AB4                 xor     eax, eax
.text:0000000000007AB6                 mov     rax, cs:qword_20E2F0
.text:0000000000007ABD                 mov     r8, rsp
.text:0000000000007AC0                 and     ecx, 1Fh
.text:0000000000007AC3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000007ACB                 mov     [rsp+48h+var_18], rax
.text:0000000000007AD0                 mov     eax, edx
.text:0000000000007AD2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000007AD6                 shr     al, 5
.text:0000000000007AD9                 movzx   eax, al
.text:0000000000007ADC                 lea     r9, [r8+rax*4+8]
.text:0000000000007AE1                 movdqa  xmm0, cs:xmmword_20E2D0
.text:0000000000007AE9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007AEE                 movdqa  xmm0, cs:xmmword_20E2E0
.text:0000000000007AF6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007AFB                 mov     edx, [r9]
.text:0000000000007AFE                 mov     eax, edx
.text:0000000000007B00                 shr     eax, cl
.text:0000000000007B02                 not     eax
.text:0000000000007B04                 and     eax, 1
.text:0000000000007B07                 shl     eax, cl
.text:0000000000007B09                 mov     rcx, r8
.text:0000000000007B0C                 xor     eax, edx
.text:0000000000007B0E                 mov     rdx, rsi
.text:0000000000007B11                 mov     rsi, rdi
.text:0000000000007B14                 mov     [r9], eax
.text:0000000000007B17                 xor     edi, edi
.text:0000000000007B19                 call    quotearg_n_options
.text:0000000000007B1E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000007B23                 xor     rsi, fs:28h
.text:0000000000007B2C                 jnz     short loc_7B33
.text:0000000000007B2E                 add     rsp, 48h
.text:0000000000007B32                 retn
.text:0000000000007B33 ; ---------------------------------------------------------------------------
.text:0000000000007B33
.text:0000000000007B33 loc_7B33:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000007B33                 call    ___stack_chk_fail
.text:0000000000007B33 ; } // starts at 7AA0
.text:0000000000007B33 quotearg_char_mem endp
.text:0000000000007B33
.text:0000000000007B33 ; ---------------------------------------------------------------------------
.text:0000000000007B38                 align 20h
.text:0000000000007B40
.text:0000000000007B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B40
.text:0000000000007B40
.text:0000000000007B40                 public quotearg_char
.text:0000000000007B40 quotearg_char   proc near
.text:0000000000007B40 ; __unwind {
.text:0000000000007B40                 movsx   edx, sil
.text:0000000000007B44                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B4B                 jmp     quotearg_char_mem
.text:0000000000007B4B ; } // starts at 7B40
.text:0000000000007B4B quotearg_char   endp
.text:0000000000007B4B
.text:0000000000007B50
.text:0000000000007B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B50
.text:0000000000007B50
.text:0000000000007B50                 public quotearg_colon
.text:0000000000007B50 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000007B50 ; __unwind {
.text:0000000000007B50                 mov     edx, 3Ah ; ':'
.text:0000000000007B55                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B5C                 jmp     quotearg_char_mem
.text:0000000000007B5C ; } // starts at 7B50
.text:0000000000007B5C quotearg_colon  endp
.text:0000000000007B5C
.text:0000000000007B5C ; ---------------------------------------------------------------------------
.text:0000000000007B61                 align 10h
.text:0000000000007B70
.text:0000000000007B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B70
.text:0000000000007B70
.text:0000000000007B70                 public quotearg_colon_mem
.text:0000000000007B70 quotearg_colon_mem proc near
.text:0000000000007B70 ; __unwind {
.text:0000000000007B70                 mov     edx, 3Ah ; ':'
.text:0000000000007B75                 jmp     quotearg_char_mem
.text:0000000000007B75 ; } // starts at 7B70
.text:0000000000007B75 quotearg_colon_mem endp
.text:0000000000007B75
.text:0000000000007B75 ; ---------------------------------------------------------------------------
.text:0000000000007B7A                 align 20h
.text:0000000000007B80
.text:0000000000007B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B80
.text:0000000000007B80 ; Attributes: info_from_lumina
.text:0000000000007B80
.text:0000000000007B80 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000007B80                 public quotearg_n_style_colon
.text:0000000000007B80 quotearg_n_style_colon proc near
.text:0000000000007B80
.text:0000000000007B80 var_48          = dword ptr -48h
.text:0000000000007B80 var_44          = qword ptr -44h
.text:0000000000007B80 var_3C          = qword ptr -3Ch
.text:0000000000007B80 var_34          = qword ptr -34h
.text:0000000000007B80 var_2C          = qword ptr -2Ch
.text:0000000000007B80 var_24          = qword ptr -24h
.text:0000000000007B80 var_1C          = qword ptr -1Ch
.text:0000000000007B80 var_14          = dword ptr -14h
.text:0000000000007B80 var_10          = qword ptr -10h
.text:0000000000007B80
.text:0000000000007B80 ; __unwind {
.text:0000000000007B80                 sub     rsp, 48h
.text:0000000000007B84                 mov     rax, rdx
.text:0000000000007B87                 mov     rdx, fs:28h
.text:0000000000007B90                 mov     [rsp+48h+var_10], rdx
.text:0000000000007B95                 xor     edx, edx
.text:0000000000007B97                 cmp     esi, 0Ah
.text:0000000000007B9A                 jz      short loc_7C04
.text:0000000000007B9C                 mov     [rsp+48h+var_48], esi
.text:0000000000007B9F                 mov     rcx, rsp
.text:0000000000007BA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007BA9                 mov     rsi, rax
.text:0000000000007BAC                 mov     [rsp+48h+var_44], 0
.text:0000000000007BB5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000007BBE                 mov     [rsp+48h+var_34], 0
.text:0000000000007BC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000007BD0                 mov     [rsp+48h+var_24], 0
.text:0000000000007BD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000007BE2                 mov     [rsp+48h+var_14], 0
.text:0000000000007BEA                 call    quotearg_n_options
.text:0000000000007BEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007BF4                 xor     rcx, fs:28h
.text:0000000000007BFD                 jnz     short loc_7C09
.text:0000000000007BFF                 add     rsp, 48h
.text:0000000000007C03                 retn
.text:0000000000007C04 ; ---------------------------------------------------------------------------
.text:0000000000007C04
.text:0000000000007C04 loc_7C04:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000007C04                 call    _abort
.text:0000000000007C09 ; ---------------------------------------------------------------------------
.text:0000000000007C09
.text:0000000000007C09 loc_7C09:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000007C09                 call    ___stack_chk_fail
.text:0000000000007C09 ; } // starts at 7B80
.text:0000000000007C09 quotearg_n_style_colon endp
.text:0000000000007C09
.text:0000000000007C09 ; ---------------------------------------------------------------------------
.text:0000000000007C0E                 align 10h
.text:0000000000007C10
.text:0000000000007C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007C10
.text:0000000000007C10 ; Attributes: info_from_lumina
.text:0000000000007C10
.text:0000000000007C10 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000007C10                 public quotearg_n_custom_mem
.text:0000000000007C10 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000007C10                                         ; quotearg_custom+12↓j ...
.text:0000000000007C10
.text:0000000000007C10 var_48          = xmmword ptr -48h
.text:0000000000007C10 var_38          = xmmword ptr -38h
.text:0000000000007C10 var_28          = xmmword ptr -28h
.text:0000000000007C10 var_18          = qword ptr -18h
.text:0000000000007C10 var_10          = qword ptr -10h
.text:0000000000007C10
.text:0000000000007C10 ; __unwind {
.text:0000000000007C10                 sub     rsp, 48h
.text:0000000000007C14                 mov     r9, rcx
.text:0000000000007C17                 mov     rcx, cs:qword_20E2F0
.text:0000000000007C1E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000007C26                 mov     rax, fs:28h
.text:0000000000007C2F                 mov     [rsp+48h+var_10], rax
.text:0000000000007C34                 xor     eax, eax
.text:0000000000007C36                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000007C3A                 test    rsi, rsi
.text:0000000000007C3D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007C42                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007C49                 movdqa  xmm0, cs:xmmword_20E2D0
.text:0000000000007C51                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000007C56                 movdqa  xmm0, cs:xmmword_20E2E0
.text:0000000000007C5E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000007C63                 jz      short loc_7C97
.text:0000000000007C65                 test    rdx, rdx
.text:0000000000007C68                 jz      short loc_7C97
.text:0000000000007C6A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000007C6F                 mov     [rsp+48h+var_18], rdx
.text:0000000000007C74                 mov     rcx, rsp
.text:0000000000007C77                 mov     rdx, r8
.text:0000000000007C7A                 mov     rsi, r9
.text:0000000000007C7D                 call    quotearg_n_options
.text:0000000000007C82                 mov     rdi, [rsp+48h+var_10]
.text:0000000000007C87                 xor     rdi, fs:28h
.text:0000000000007C90                 jnz     short loc_7C9C
.text:0000000000007C92                 add     rsp, 48h
.text:0000000000007C96                 retn
.text:0000000000007C97 ; ---------------------------------------------------------------------------
.text:0000000000007C97
.text:0000000000007C97 loc_7C97:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000007C97                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000007C97                 call    _abort
.text:0000000000007C9C ; ---------------------------------------------------------------------------
.text:0000000000007C9C
.text:0000000000007C9C loc_7C9C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000007C9C                 call    ___stack_chk_fail
.text:0000000000007C9C ; } // starts at 7C10
.text:0000000000007C9C quotearg_n_custom_mem endp
.text:0000000000007C9C
.text:0000000000007C9C ; ---------------------------------------------------------------------------
.text:0000000000007CA1                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CB0
.text:0000000000007CB0
.text:0000000000007CB0                 public quotearg_n_custom
.text:0000000000007CB0 quotearg_n_custom proc near
.text:0000000000007CB0 ; __unwind {
.text:0000000000007CB0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007CB7                 jmp     quotearg_n_custom_mem
.text:0000000000007CB7 ; } // starts at 7CB0
.text:0000000000007CB7 quotearg_n_custom endp
.text:0000000000007CB7
.text:0000000000007CB7 ; ---------------------------------------------------------------------------
.text:0000000000007CBC                 align 20h
.text:0000000000007CC0
.text:0000000000007CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CC0
.text:0000000000007CC0
.text:0000000000007CC0                 public quotearg_custom
.text:0000000000007CC0 quotearg_custom proc near
.text:0000000000007CC0 ; __unwind {
.text:0000000000007CC0                 mov     rcx, rdx
.text:0000000000007CC3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007CCA                 mov     rdx, rsi
.text:0000000000007CCD                 mov     rsi, rdi
.text:0000000000007CD0                 xor     edi, edi
.text:0000000000007CD2                 jmp     quotearg_n_custom_mem
.text:0000000000007CD2 ; } // starts at 7CC0
.text:0000000000007CD2 quotearg_custom endp
.text:0000000000007CD2
.text:0000000000007CD2 ; ---------------------------------------------------------------------------
.text:0000000000007CD7                 align 20h
.text:0000000000007CE0
.text:0000000000007CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007CE0
.text:0000000000007CE0
.text:0000000000007CE0                 public quotearg_custom_mem
.text:0000000000007CE0 quotearg_custom_mem proc near
.text:0000000000007CE0 ; __unwind {
.text:0000000000007CE0                 mov     r8, rcx
.text:0000000000007CE3                 mov     rcx, rdx
.text:0000000000007CE6                 mov     rdx, rsi
.text:0000000000007CE9                 mov     rsi, rdi
.text:0000000000007CEC                 xor     edi, edi
.text:0000000000007CEE                 jmp     quotearg_n_custom_mem
.text:0000000000007CEE ; } // starts at 7CE0
.text:0000000000007CEE quotearg_custom_mem endp
.text:0000000000007CEE
.text:0000000000007CEE ; ---------------------------------------------------------------------------
.text:0000000000007CF3                 align 20h
.text:0000000000007D00
.text:0000000000007D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D00
.text:0000000000007D00
.text:0000000000007D00                 public quote_n_mem
.text:0000000000007D00 quote_n_mem     proc near
.text:0000000000007D00 ; __unwind {
.text:0000000000007D00                 lea     rcx, quote_quoting_options
.text:0000000000007D07                 jmp     quotearg_n_options
.text:0000000000007D07 ; } // starts at 7D00
.text:0000000000007D07 quote_n_mem     endp
.text:0000000000007D07
.text:0000000000007D07 ; ---------------------------------------------------------------------------
.text:0000000000007D0C                 align 10h
.text:0000000000007D10
.text:0000000000007D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D10
.text:0000000000007D10
.text:0000000000007D10                 public quote_mem
.text:0000000000007D10 quote_mem       proc near
.text:0000000000007D10 ; __unwind {
.text:0000000000007D10                 lea     rcx, quote_quoting_options
.text:0000000000007D17                 mov     rdx, rsi
.text:0000000000007D1A                 mov     rsi, rdi
.text:0000000000007D1D                 xor     edi, edi
.text:0000000000007D1F                 jmp     quotearg_n_options
.text:0000000000007D1F ; } // starts at 7D10
.text:0000000000007D1F quote_mem       endp
.text:0000000000007D1F
.text:0000000000007D1F ; ---------------------------------------------------------------------------
.text:0000000000007D24                 align 10h
.text:0000000000007D30
.text:0000000000007D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D30
.text:0000000000007D30
.text:0000000000007D30                 public quote_n
.text:0000000000007D30 quote_n         proc near               ; CODE XREF: main+60D↑p
.text:0000000000007D30                                         ; main+636↑p ...
.text:0000000000007D30 ; __unwind {
.text:0000000000007D30                 lea     rcx, quote_quoting_options
.text:0000000000007D37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D3E                 jmp     quotearg_n_options
.text:0000000000007D3E ; } // starts at 7D30
.text:0000000000007D3E quote_n         endp
.text:0000000000007D3E
.text:0000000000007D3E ; ---------------------------------------------------------------------------
.text:0000000000007D43                 align 10h
.text:0000000000007D50
.text:0000000000007D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D50
.text:0000000000007D50
.text:0000000000007D50                 public quote
.text:0000000000007D50 quote           proc near               ; CODE XREF: main+49F↑p
.text:0000000000007D50                                         ; main+C4C↑p ...
.text:0000000000007D50 ; __unwind {
.text:0000000000007D50                 lea     rcx, quote_quoting_options
.text:0000000000007D57                 mov     rsi, rdi
.text:0000000000007D5A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D61                 xor     edi, edi
.text:0000000000007D63                 jmp     quotearg_n_options
.text:0000000000007D63 ; } // starts at 7D50
.text:0000000000007D63 quote           endp
.text:0000000000007D63
.text:0000000000007D63 ; ---------------------------------------------------------------------------
.text:0000000000007D68                 align 10h
.text:0000000000007D70
.text:0000000000007D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D70
.text:0000000000007D70
.text:0000000000007D70 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000007D70                 public version_etc_arn
.text:0000000000007D70 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_81AB↓j
.text:0000000000007D70                                         ; version_etc_va:loc_81FB↓p ...
.text:0000000000007D70
.text:0000000000007D70 var_58          = qword ptr -58h
.text:0000000000007D70 var_50          = qword ptr -50h
.text:0000000000007D70 var_48          = qword ptr -48h
.text:0000000000007D70 var_40          = qword ptr -40h
.text:0000000000007D70
.text:0000000000007D70 ; __unwind {
.text:0000000000007D70                 push    r15
.text:0000000000007D72                 push    r14
.text:0000000000007D74                 push    r13
.text:0000000000007D76                 push    r12
.text:0000000000007D78                 mov     r12, r9
.text:0000000000007D7B                 push    rbp
.text:0000000000007D7C                 push    rbx
.text:0000000000007D7D                 mov     rbp, rdi
.text:0000000000007D80                 mov     rbx, r8
.text:0000000000007D83                 sub     rsp, 28h
.text:0000000000007D87                 test    rsi, rsi
.text:0000000000007D8A                 jz      loc_7EA8
.text:0000000000007D90                 mov     r8, rdx
.text:0000000000007D93                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000007D9A                 mov     r9, rcx
.text:0000000000007D9D                 xor     eax, eax
.text:0000000000007D9F                 mov     rcx, rsi
.text:0000000000007DA2                 mov     esi, 1
.text:0000000000007DA7                 call    ___fprintf_chk
.text:0000000000007DAC
.text:0000000000007DAC loc_7DAC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000007DAC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000007DB3                 xor     edi, edi        ; domainname
.text:0000000000007DB5                 mov     edx, 5          ; category
.text:0000000000007DBA                 call    _dcgettext
.text:0000000000007DBF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000007DC6                 mov     rcx, rax
.text:0000000000007DC9                 mov     r8d, 7E3h
.text:0000000000007DCF                 mov     esi, 1
.text:0000000000007DD4                 mov     rdi, rbp
.text:0000000000007DD7                 xor     eax, eax
.text:0000000000007DD9                 call    ___fprintf_chk
.text:0000000000007DDE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000007DE5                 xor     edi, edi        ; domainname
.text:0000000000007DE7                 mov     edx, 5          ; category
.text:0000000000007DEC                 call    _dcgettext
.text:0000000000007DF1                 mov     rsi, rbp        ; stream
.text:0000000000007DF4                 mov     rdi, rax        ; s
.text:0000000000007DF7                 call    _fputs_unlocked
.text:0000000000007DFC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000007E00                 ja      def_7E14        ; jumptable 0000000000007E14 default case
.text:0000000000007E06                 lea     rdx, jpt_7E14
.text:0000000000007E0D                 movsxd  rax, ds:(jpt_7E14 - 0BC24h)[rdx+r12*4]
.text:0000000000007E11                 add     rax, rdx
.text:0000000000007E14                 jmp     rax             ; switch jump
.text:0000000000007E14 ; ---------------------------------------------------------------------------
.text:0000000000007E16                 align 20h
.text:0000000000007E20
.text:0000000000007E20 loc_7E20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007E20                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007E20                 mov     r9, [rbx+38h]   ; jumptable 0000000000007E14 case 8
.text:0000000000007E24                 mov     rax, [rbx+10h]
.text:0000000000007E28                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007E2F                 mov     r8, [rbx+8]
.text:0000000000007E33                 mov     edx, 5          ; category
.text:0000000000007E38                 xor     edi, edi        ; domainname
.text:0000000000007E3A                 mov     r13, [rbx+30h]
.text:0000000000007E3E                 mov     r12, [rbx+28h]
.text:0000000000007E42                 mov     [rsp+58h+var_48], r9
.text:0000000000007E47                 mov     r15, [rbx+20h]
.text:0000000000007E4B                 mov     r14, [rbx+18h]
.text:0000000000007E4F                 mov     [rsp+58h+var_58], rax
.text:0000000000007E53                 mov     [rsp+58h+var_50], r8
.text:0000000000007E58                 mov     rbx, [rbx]
.text:0000000000007E5B                 call    _dcgettext
.text:0000000000007E60                 sub     rsp, 8
.text:0000000000007E64
.text:0000000000007E64 loc_7E64:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000007E64                 mov     r9, [rsp+60h+var_48]
.text:0000000000007E69                 mov     rdx, rax
.text:0000000000007E6C                 mov     rcx, rbx
.text:0000000000007E6F                 mov     esi, 1
.text:0000000000007E74                 mov     rdi, rbp
.text:0000000000007E77                 xor     eax, eax
.text:0000000000007E79                 push    r9
.text:0000000000007E7B                 push    r13
.text:0000000000007E7D                 push    r12
.text:0000000000007E7F                 push    r15
.text:0000000000007E81                 push    r14
.text:0000000000007E83                 mov     r9, [rsp+88h+var_58]
.text:0000000000007E88                 mov     r8, [rsp+88h+var_50]
.text:0000000000007E8D                 call    ___fprintf_chk
.text:0000000000007E92                 add     rsp, 30h
.text:0000000000007E96
.text:0000000000007E96 loc_7E96:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007E96                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007E96                 add     rsp, 28h        ; jumptable 0000000000007E14 case 0
.text:0000000000007E9A                 pop     rbx
.text:0000000000007E9B                 pop     rbp
.text:0000000000007E9C                 pop     r12
.text:0000000000007E9E                 pop     r13
.text:0000000000007EA0                 pop     r14
.text:0000000000007EA2                 pop     r15
.text:0000000000007EA4                 retn
.text:0000000000007EA4 ; ---------------------------------------------------------------------------
.text:0000000000007EA5                 align 8
.text:0000000000007EA8
.text:0000000000007EA8 loc_7EA8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000007EA8                 mov     r8, rcx
.text:0000000000007EAB                 mov     rcx, rdx
.text:0000000000007EAE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000007EB5                 mov     esi, 1
.text:0000000000007EBA                 xor     eax, eax
.text:0000000000007EBC                 call    ___fprintf_chk
.text:0000000000007EC1                 jmp     loc_7DAC
.text:0000000000007EC1 ; ---------------------------------------------------------------------------
.text:0000000000007EC6                 align 10h
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007ED0                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007ED0                 mov     r10, [rbx+40h]  ; jumptable 0000000000007E14 case 9
.text:0000000000007ED4                 mov     r9, [rbx+38h]
.text:0000000000007ED8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007EDF                 mov     rax, [rbx+10h]
.text:0000000000007EE3                 mov     r8, [rbx+8]
.text:0000000000007EE7                 mov     edx, 5          ; category
.text:0000000000007EEC                 mov     r13, [rbx+30h]
.text:0000000000007EF0                 mov     r12, [rbx+28h]
.text:0000000000007EF4                 mov     r15, [rbx+20h]
.text:0000000000007EF8                 mov     r14, [rbx+18h]
.text:0000000000007EFC                 mov     rbx, [rbx]
.text:0000000000007EFF                 mov     [rsp+58h+var_40], r10
.text:0000000000007F04                 mov     [rsp+58h+var_48], r9
.text:0000000000007F09                 mov     [rsp+58h+var_58], rax
.text:0000000000007F0D                 mov     [rsp+58h+var_50], r8
.text:0000000000007F12
.text:0000000000007F12 loc_7F12:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000007F12                 xor     edi, edi        ; domainname
.text:0000000000007F14                 call    _dcgettext
.text:0000000000007F19                 mov     r10, [rsp+58h+var_40]
.text:0000000000007F1E                 push    r10
.text:0000000000007F20                 jmp     loc_7E64
.text:0000000000007F20 ; ---------------------------------------------------------------------------
.text:0000000000007F25                 align 8
.text:0000000000007F28
.text:0000000000007F28 loc_7F28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007F28                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007F28                 mov     rbx, [rbx]      ; jumptable 0000000000007E14 case 1
.text:0000000000007F2B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000007F32                 mov     edx, 5          ; category
.text:0000000000007F37                 xor     edi, edi        ; domainname
.text:0000000000007F39                 call    _dcgettext
.text:0000000000007F3E                 add     rsp, 28h
.text:0000000000007F42                 mov     rcx, rbx
.text:0000000000007F45                 mov     rdi, rbp
.text:0000000000007F48                 pop     rbx
.text:0000000000007F49                 pop     rbp
.text:0000000000007F4A                 pop     r12
.text:0000000000007F4C                 pop     r13
.text:0000000000007F4E                 pop     r14
.text:0000000000007F50                 pop     r15
.text:0000000000007F52                 mov     rdx, rax
.text:0000000000007F55                 mov     esi, 1
.text:0000000000007F5A                 xor     eax, eax
.text:0000000000007F5C                 jmp     ___fprintf_chk
.text:0000000000007F5C ; ---------------------------------------------------------------------------
.text:0000000000007F61                 align 8
.text:0000000000007F68
.text:0000000000007F68 loc_7F68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007F68                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007F68                 mov     r12, [rbx+8]    ; jumptable 0000000000007E14 case 2
.text:0000000000007F6C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000007F73                 mov     rbx, [rbx]
.text:0000000000007F76                 mov     edx, 5          ; category
.text:0000000000007F7B                 xor     edi, edi        ; domainname
.text:0000000000007F7D                 call    _dcgettext
.text:0000000000007F82                 add     rsp, 28h
.text:0000000000007F86                 mov     r8, r12
.text:0000000000007F89                 mov     rcx, rbx
.text:0000000000007F8C                 mov     rdi, rbp
.text:0000000000007F8F                 mov     rdx, rax
.text:0000000000007F92                 mov     esi, 1
.text:0000000000007F97                 pop     rbx
.text:0000000000007F98                 pop     rbp
.text:0000000000007F99                 pop     r12
.text:0000000000007F9B                 pop     r13
.text:0000000000007F9D                 pop     r14
.text:0000000000007F9F                 pop     r15
.text:0000000000007FA1                 xor     eax, eax
.text:0000000000007FA3                 jmp     ___fprintf_chk
.text:0000000000007FA3 ; ---------------------------------------------------------------------------
.text:0000000000007FA8                 align 10h
.text:0000000000007FB0
.text:0000000000007FB0 loc_7FB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007FB0                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000007FB0                 mov     r13, [rbx+10h]  ; jumptable 0000000000007E14 case 3
.text:0000000000007FB4                 mov     r12, [rbx+8]
.text:0000000000007FB8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000007FBF                 mov     rbx, [rbx]
.text:0000000000007FC2                 mov     edx, 5          ; category
.text:0000000000007FC7                 xor     edi, edi        ; domainname
.text:0000000000007FC9                 call    _dcgettext
.text:0000000000007FCE                 add     rsp, 28h
.text:0000000000007FD2                 mov     r9, r13
.text:0000000000007FD5                 mov     r8, r12
.text:0000000000007FD8                 mov     rcx, rbx
.text:0000000000007FDB                 mov     rdi, rbp
.text:0000000000007FDE                 mov     rdx, rax
.text:0000000000007FE1                 pop     rbx
.text:0000000000007FE2                 pop     rbp
.text:0000000000007FE3                 pop     r12
.text:0000000000007FE5                 pop     r13
.text:0000000000007FE7                 pop     r14
.text:0000000000007FE9                 pop     r15
.text:0000000000007FEB                 mov     esi, 1
.text:0000000000007FF0                 xor     eax, eax
.text:0000000000007FF2                 jmp     ___fprintf_chk
.text:0000000000007FF2 ; ---------------------------------------------------------------------------
.text:0000000000007FF7                 align 20h
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008000                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000008000                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000007E14 case 4
.text:0000000000008007                 mov     edx, 5          ; category
.text:000000000000800C                 xor     edi, edi        ; domainname
.text:000000000000800E                 mov     r14, [rbx+18h]
.text:0000000000008012                 mov     r13, [rbx+10h]
.text:0000000000008016                 mov     r12, [rbx+8]
.text:000000000000801A                 mov     rbx, [rbx]
.text:000000000000801D                 call    _dcgettext
.text:0000000000008022                 sub     rsp, 8
.text:0000000000008026
.text:0000000000008026 loc_8026:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000008026                 push    r14
.text:0000000000008028                 mov     rdx, rax
.text:000000000000802B                 mov     r9, r13
.text:000000000000802E                 mov     r8, r12
.text:0000000000008031                 mov     rcx, rbx
.text:0000000000008034                 mov     rdi, rbp
.text:0000000000008037                 mov     esi, 1
.text:000000000000803C                 xor     eax, eax
.text:000000000000803E                 call    ___fprintf_chk
.text:0000000000008043                 pop     rax
.text:0000000000008044                 pop     rdx
.text:0000000000008045                 add     rsp, 28h
.text:0000000000008049                 pop     rbx
.text:000000000000804A                 pop     rbp
.text:000000000000804B                 pop     r12
.text:000000000000804D                 pop     r13
.text:000000000000804F                 pop     r14
.text:0000000000008051                 pop     r15
.text:0000000000008053                 retn
.text:0000000000008053 ; ---------------------------------------------------------------------------
.text:0000000000008054                 align 8
.text:0000000000008058
.text:0000000000008058 loc_8058:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008058                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000008058                 mov     r15, [rbx+20h]  ; jumptable 0000000000007E14 case 5
.text:000000000000805C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000008063                 mov     edx, 5          ; category
.text:0000000000008068                 xor     edi, edi        ; domainname
.text:000000000000806A                 mov     r14, [rbx+18h]
.text:000000000000806E                 mov     r13, [rbx+10h]
.text:0000000000008072                 mov     r12, [rbx+8]
.text:0000000000008076                 mov     rbx, [rbx]
.text:0000000000008079                 call    _dcgettext
.text:000000000000807E                 push    r15
.text:0000000000008080                 jmp     short loc_8026
.text:0000000000008080 ; ---------------------------------------------------------------------------
.text:0000000000008082                 align 8
.text:0000000000008088
.text:0000000000008088 loc_8088:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008088                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:0000000000008088                 mov     r8, [rbx+8]     ; jumptable 0000000000007E14 case 6
.text:000000000000808C                 mov     r12, [rbx+28h]
.text:0000000000008090                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000008097                 mov     r15, [rbx+20h]
.text:000000000000809B                 mov     r14, [rbx+18h]
.text:000000000000809F                 mov     edx, 5          ; category
.text:00000000000080A4                 mov     r13, [rbx+10h]
.text:00000000000080A8                 xor     edi, edi        ; domainname
.text:00000000000080AA                 mov     rbx, [rbx]
.text:00000000000080AD                 mov     [rsp+58h+var_58], r8
.text:00000000000080B1                 call    _dcgettext
.text:00000000000080B6                 sub     rsp, 8
.text:00000000000080BA                 mov     r9, r13
.text:00000000000080BD                 push    r12
.text:00000000000080BF                 push    r15
.text:00000000000080C1                 push    r14
.text:00000000000080C3
.text:00000000000080C3 loc_80C3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000080C3                 mov     r8, [rsp+78h+var_58]
.text:00000000000080C8                 mov     rcx, rbx
.text:00000000000080CB                 mov     rdx, rax
.text:00000000000080CE                 mov     rdi, rbp
.text:00000000000080D1                 mov     esi, 1
.text:00000000000080D6                 xor     eax, eax
.text:00000000000080D8                 call    ___fprintf_chk
.text:00000000000080DD                 add     rsp, 20h
.text:00000000000080E1                 add     rsp, 28h
.text:00000000000080E5                 pop     rbx
.text:00000000000080E6                 pop     rbp
.text:00000000000080E7                 pop     r12
.text:00000000000080E9                 pop     r13
.text:00000000000080EB                 pop     r14
.text:00000000000080ED                 pop     r15
.text:00000000000080EF                 retn
.text:00000000000080F0 ; ---------------------------------------------------------------------------
.text:00000000000080F0
.text:00000000000080F0 loc_80F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000080F0                                         ; DATA XREF: .rodata:jpt_7E14↓o
.text:00000000000080F0                 mov     r9, [rbx+10h]   ; jumptable 0000000000007E14 case 7
.text:00000000000080F4                 mov     r13, [rbx+30h]
.text:00000000000080F8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000080FF                 mov     r12, [rbx+28h]
.text:0000000000008103                 mov     r15, [rbx+20h]
.text:0000000000008107                 mov     edx, 5          ; category
.text:000000000000810C                 mov     r14, [rbx+18h]
.text:0000000000008110                 mov     r8, [rbx+8]
.text:0000000000008114                 xor     edi, edi        ; domainname
.text:0000000000008116                 mov     [rsp+58h+var_50], r9
.text:000000000000811B                 mov     rbx, [rbx]
.text:000000000000811E                 mov     [rsp+58h+var_58], r8
.text:0000000000008122                 call    _dcgettext
.text:0000000000008127                 push    r13
.text:0000000000008129                 push    r12
.text:000000000000812B                 push    r15
.text:000000000000812D                 push    r14
.text:000000000000812F                 mov     r9, [rsp+78h+var_50]
.text:0000000000008134                 jmp     short loc_80C3
.text:0000000000008134 ; ---------------------------------------------------------------------------
.text:0000000000008136                 align 20h
.text:0000000000008140
.text:0000000000008140 def_7E14:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000008140                 mov     r10, [rbx+40h]  ; jumptable 0000000000007E14 default case
.text:0000000000008144                 mov     r9, [rbx+38h]
.text:0000000000008148                 mov     edx, 5
.text:000000000000814D                 mov     rax, [rbx+10h]
.text:0000000000008151                 mov     r8, [rbx+8]
.text:0000000000008155                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000815C                 mov     r13, [rbx+30h]
.text:0000000000008160                 mov     r12, [rbx+28h]
.text:0000000000008164                 mov     r15, [rbx+20h]
.text:0000000000008168                 mov     r14, [rbx+18h]
.text:000000000000816C                 mov     [rsp+58h+var_40], r10
.text:0000000000008171                 mov     [rsp+58h+var_48], r9
.text:0000000000008176                 mov     [rsp+58h+var_58], rax
.text:000000000000817A                 mov     [rsp+58h+var_50], r8
.text:000000000000817F                 mov     rbx, [rbx]
.text:0000000000008182                 jmp     loc_7F12
.text:0000000000008182 ; } // starts at 7D70
.text:0000000000008182 version_etc_arn endp
.text:0000000000008182
.text:0000000000008182 ; ---------------------------------------------------------------------------
.text:0000000000008187                 align 10h
.text:0000000000008190
.text:0000000000008190 ; =============== S U B R O U T I N E =======================================
.text:0000000000008190
.text:0000000000008190 ; Attributes: info_from_lumina
.text:0000000000008190
.text:0000000000008190 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000008190                 public version_etc_ar
.text:0000000000008190 version_etc_ar  proc near
.text:0000000000008190 ; __unwind {
.text:0000000000008190                 xor     r9d, r9d
.text:0000000000008193                 cmp     qword ptr [r8], 0
.text:0000000000008197                 jz      short loc_81AB
.text:0000000000008199                 nop     dword ptr [rax+00000000h]
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000081A0                 add     r9, 1
.text:00000000000081A4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000081A9                 jnz     short loc_81A0
.text:00000000000081AB
.text:00000000000081AB loc_81AB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000081AB                 jmp     version_etc_arn
.text:00000000000081AB ; } // starts at 8190
.text:00000000000081AB version_etc_ar  endp
.text:00000000000081AB
.text:00000000000081B0
.text:00000000000081B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081B0
.text:00000000000081B0 ; Attributes: info_from_lumina
.text:00000000000081B0
.text:00000000000081B0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000081B0                 public version_etc_va
.text:00000000000081B0 version_etc_va  proc near
.text:00000000000081B0
.text:00000000000081B0 authtab         = qword ptr -68h
.text:00000000000081B0 var_10          = qword ptr -10h
.text:00000000000081B0
.text:00000000000081B0 ; __unwind {
.text:00000000000081B0                 sub     rsp, 68h
.text:00000000000081B4                 mov     r10, r8
.text:00000000000081B7                 xor     r9d, r9d
.text:00000000000081BA                 mov     rax, fs:28h
.text:00000000000081C3                 mov     [rsp+68h+var_10], rax
.text:00000000000081C8                 xor     eax, eax
.text:00000000000081CA                 mov     r8, rsp
.text:00000000000081CD                 nop     dword ptr [rax]
.text:00000000000081D0
.text:00000000000081D0 loc_81D0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000081D0                 mov     eax, [r10]
.text:00000000000081D3                 cmp     eax, 2Fh ; '/'
.text:00000000000081D6                 ja      short loc_821A
.text:00000000000081D8                 mov     r11d, eax
.text:00000000000081DB                 add     r11, [r10+10h]
.text:00000000000081DF                 add     eax, 8
.text:00000000000081E2                 mov     [r10], eax
.text:00000000000081E5
.text:00000000000081E5 loc_81E5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000081E5                 mov     rax, [r11]
.text:00000000000081E8                 test    rax, rax
.text:00000000000081EB                 mov     [r8+r9*8], rax
.text:00000000000081EF                 jz      short loc_81FB
.text:00000000000081F1                 add     r9, 1
.text:00000000000081F5                 cmp     r9, 0Ah
.text:00000000000081F9                 jnz     short loc_81D0
.text:00000000000081FB
.text:00000000000081FB loc_81FB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000081FB                 call    version_etc_arn
.text:0000000000008200                 mov     rax, [rsp+68h+var_10]
.text:0000000000008205                 xor     rax, fs:28h
.text:000000000000820E                 jnz     short loc_8215
.text:0000000000008210                 add     rsp, 68h
.text:0000000000008214                 retn
.text:0000000000008215 ; ---------------------------------------------------------------------------
.text:0000000000008215
.text:0000000000008215 loc_8215:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000008215                 call    ___stack_chk_fail
.text:000000000000821A ; ---------------------------------------------------------------------------
.text:000000000000821A
.text:000000000000821A loc_821A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000821A                 mov     r11, [r10+8]
.text:000000000000821E                 lea     rax, [r11+8]
.text:0000000000008222                 mov     [r10+8], rax
.text:0000000000008226                 jmp     short loc_81E5
.text:0000000000008226 ; } // starts at 81B0
.text:0000000000008226 version_etc_va  endp
.text:0000000000008226
.text:0000000000008226 ; ---------------------------------------------------------------------------
.text:0000000000008228                 align 10h
.text:0000000000008230
.text:0000000000008230 ; =============== S U B R O U T I N E =======================================
.text:0000000000008230
.text:0000000000008230 ; Attributes: info_from_lumina
.text:0000000000008230
.text:0000000000008230 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000008230                 public version_etc
.text:0000000000008230 version_etc     proc near               ; CODE XREF: main+260↑p
.text:0000000000008230
.text:0000000000008230 var_C0          = dword ptr -0C0h
.text:0000000000008230 var_B8          = qword ptr -0B8h
.text:0000000000008230 var_B0          = qword ptr -0B0h
.text:0000000000008230 var_A8          = byte ptr -0A8h
.text:0000000000008230 var_50          = qword ptr -50h
.text:0000000000008230 var_48          = byte ptr -48h
.text:0000000000008230 var_28          = qword ptr -28h
.text:0000000000008230 var_20          = qword ptr -20h
.text:0000000000008230 arg_0           = byte ptr  8
.text:0000000000008230
.text:0000000000008230 ; __unwind {
.text:0000000000008230                 push    rbp
.text:0000000000008231                 push    rbx
.text:0000000000008232                 mov     r10d, 20h ; ' '
.text:0000000000008238                 xor     r11d, r11d
.text:000000000000823B                 sub     rsp, 0B8h
.text:0000000000008242                 mov     rax, fs:28h
.text:000000000000824B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000008250                 xor     eax, eax
.text:0000000000008252                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000825A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000008262                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000826A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000826F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000008277                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000827F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000008284                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000828C                 xor     r9d, r9d
.text:000000000000828F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000008294                 mov     rbp, rax
.text:0000000000008297                 nop     word ptr [rax+rax+00000000h]
.text:00000000000082A0
.text:00000000000082A0 loc_82A0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000082A0                 cmp     r10d, 2Fh ; '/'
.text:00000000000082A4                 ja      short loc_82FC
.text:00000000000082A6                 mov     eax, r10d
.text:00000000000082A9                 mov     r11d, 1
.text:00000000000082AF                 add     r10d, 8
.text:00000000000082B3                 add     rax, rbp
.text:00000000000082B6
.text:00000000000082B6 loc_82B6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000082B6                 mov     rax, [rax]
.text:00000000000082B9                 test    rax, rax
.text:00000000000082BC                 mov     [r8+r9*8], rax
.text:00000000000082C0                 jz      short loc_82CC
.text:00000000000082C2                 add     r9, 1
.text:00000000000082C6                 cmp     r9, 0Ah
.text:00000000000082CA                 jnz     short loc_82A0
.text:00000000000082CC
.text:00000000000082CC loc_82CC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000082CC                 test    r11b, r11b
.text:00000000000082CF                 jnz     short loc_82F5
.text:00000000000082D1
.text:00000000000082D1 loc_82D1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000082D1                 call    version_etc_arn
.text:00000000000082D6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000082DB                 xor     rax, fs:28h
.text:00000000000082E4                 jnz     short loc_82F0
.text:00000000000082E6                 add     rsp, 0B8h
.text:00000000000082ED                 pop     rbx
.text:00000000000082EE                 pop     rbp
.text:00000000000082EF                 retn
.text:00000000000082F0 ; ---------------------------------------------------------------------------
.text:00000000000082F0
.text:00000000000082F0 loc_82F0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000082F0                 call    ___stack_chk_fail
.text:00000000000082F5 ; ---------------------------------------------------------------------------
.text:00000000000082F5
.text:00000000000082F5 loc_82F5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000082F5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000082FA                 jmp     short loc_82D1
.text:00000000000082FC ; ---------------------------------------------------------------------------
.text:00000000000082FC
.text:00000000000082FC loc_82FC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000082FC                 mov     rax, rbx
.text:00000000000082FF                 add     rbx, 8
.text:0000000000008303                 jmp     short loc_82B6
.text:0000000000008303 ; } // starts at 8230
.text:0000000000008303 version_etc     endp
.text:0000000000008303
.text:0000000000008303 ; ---------------------------------------------------------------------------
.text:0000000000008305                 align 10h
.text:0000000000008310
.text:0000000000008310 ; =============== S U B R O U T I N E =======================================
.text:0000000000008310
.text:0000000000008310 ; Attributes: info_from_lumina
.text:0000000000008310
.text:0000000000008310 ; void __cdecl emit_bug_reporting_address()
.text:0000000000008310                 public emit_bug_reporting_address
.text:0000000000008310 emit_bug_reporting_address proc near
.text:0000000000008310 ; __unwind {
.text:0000000000008310                 push    rbx
.text:0000000000008311                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000008318                 mov     edx, 5          ; category
.text:000000000000831D                 xor     edi, edi        ; domainname
.text:000000000000831F                 call    _dcgettext
.text:0000000000008324                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000832B                 mov     rsi, rax
.text:000000000000832E                 mov     edi, 1
.text:0000000000008333                 xor     eax, eax
.text:0000000000008335                 call    ___printf_chk
.text:000000000000833A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000008341                 mov     edx, 5          ; category
.text:0000000000008346                 xor     edi, edi        ; domainname
.text:0000000000008348                 call    _dcgettext
.text:000000000000834D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000008354                 lea     rdx, unk_9647
.text:000000000000835B                 mov     rsi, rax
.text:000000000000835E                 mov     edi, 1
.text:0000000000008363                 xor     eax, eax
.text:0000000000008365                 call    ___printf_chk
.text:000000000000836A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000008371                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000008378                 xor     edi, edi        ; domainname
.text:000000000000837A                 mov     edx, 5          ; category
.text:000000000000837F                 call    _dcgettext
.text:0000000000008384                 mov     rsi, rbx        ; stream
.text:0000000000008387                 mov     rdi, rax        ; s
.text:000000000000838A                 pop     rbx
.text:000000000000838B                 jmp     _fputs_unlocked
.text:000000000000838B ; } // starts at 8310
.text:000000000000838B emit_bug_reporting_address endp
.text:000000000000838B
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390
.text:0000000000008390                 public xmalloc
.text:0000000000008390 xmalloc         proc near               ; CODE XREF: unit_to_umax+BC↑p
.text:0000000000008390                                         ; quotearg_n_options+127↑p ...
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 push    rbx
.text:0000000000008391                 mov     rbx, rdi
.text:0000000000008394                 call    _malloc
.text:0000000000008399                 test    rax, rax
.text:000000000000839C                 jnz     short loc_83A3
.text:000000000000839E                 test    rbx, rbx
.text:00000000000083A1                 jnz     short loc_83A5
.text:00000000000083A3
.text:00000000000083A3 loc_83A3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000083A3                 pop     rbx
.text:00000000000083A4                 retn
.text:00000000000083A5 ; ---------------------------------------------------------------------------
.text:00000000000083A5
.text:00000000000083A5 loc_83A5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000083A5                 call    xalloc_die
.text:00000000000083A5 ; } // starts at 8390
.text:00000000000083A5 xmalloc         endp
.text:00000000000083A5
.text:00000000000083A5 ; ---------------------------------------------------------------------------
.text:00000000000083AA                 align 10h
.text:00000000000083B0
.text:00000000000083B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083B0
.text:00000000000083B0 ; Attributes: info_from_lumina
.text:00000000000083B0
.text:00000000000083B0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000083B0                 public xnmalloc
.text:00000000000083B0 xnmalloc        proc near
.text:00000000000083B0 ; __unwind {
.text:00000000000083B0                 mov     rax, rdi
.text:00000000000083B3                 mul     rsi
.text:00000000000083B6                 mov     rdi, rax
.text:00000000000083B9                 seto    al
.text:00000000000083BC                 test    rdi, rdi
.text:00000000000083BF                 js      short loc_83CB
.text:00000000000083C1                 movzx   eax, al
.text:00000000000083C4                 test    rax, rax
.text:00000000000083C7                 jnz     short loc_83CB
.text:00000000000083C9                 jmp     short xmalloc
.text:00000000000083CB ; ---------------------------------------------------------------------------
.text:00000000000083CB
.text:00000000000083CB loc_83CB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000083CB                                         ; xnmalloc+17↑j
.text:00000000000083CB                 sub     rsp, 8
.text:00000000000083CF                 call    xalloc_die
.text:00000000000083CF ; } // starts at 83B0
.text:00000000000083CF xnmalloc        endp
.text:00000000000083CF
.text:00000000000083CF ; ---------------------------------------------------------------------------
.text:00000000000083D4                 align 20h
.text:00000000000083E0
.text:00000000000083E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083E0
.text:00000000000083E0
.text:00000000000083E0                 public xcharalloc
.text:00000000000083E0 xcharalloc      proc near
.text:00000000000083E0 ; __unwind {
.text:00000000000083E0                 jmp     short xmalloc
.text:00000000000083E0 ; } // starts at 83E0
.text:00000000000083E0 xcharalloc      endp
.text:00000000000083E0
.text:00000000000083E0 ; ---------------------------------------------------------------------------
.text:00000000000083E2                 align 10h
.text:00000000000083F0
.text:00000000000083F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083F0
.text:00000000000083F0 ; Attributes: info_from_lumina
.text:00000000000083F0
.text:00000000000083F0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000083F0                 public xrealloc
.text:00000000000083F0 xrealloc        proc near               ; CODE XREF: setup_padding_buffer_part_0+16↑p
.text:00000000000083F0                                         ; add_range_pair+7A↑p ...
.text:00000000000083F0 ; __unwind {
.text:00000000000083F0                 test    rsi, rsi
.text:00000000000083F3                 push    rbx
.text:00000000000083F4                 mov     rbx, rsi
.text:00000000000083F7                 jnz     short loc_83FE
.text:00000000000083F9                 test    rdi, rdi
.text:00000000000083FC                 jnz     short loc_8418
.text:00000000000083FE
.text:00000000000083FE loc_83FE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000083FE                 mov     rsi, rbx        ; size
.text:0000000000008401                 call    _realloc
.text:0000000000008406                 test    rax, rax
.text:0000000000008409                 jnz     short loc_8410
.text:000000000000840B                 test    rbx, rbx
.text:000000000000840E                 jnz     short loc_8421
.text:0000000000008410
.text:0000000000008410 loc_8410:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000008410                 pop     rbx
.text:0000000000008411                 retn
.text:0000000000008411 ; ---------------------------------------------------------------------------
.text:0000000000008412                 align 8
.text:0000000000008418
.text:0000000000008418 loc_8418:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000008418                 call    _free
.text:000000000000841D                 xor     eax, eax
.text:000000000000841F                 pop     rbx
.text:0000000000008420                 retn
.text:0000000000008421 ; ---------------------------------------------------------------------------
.text:0000000000008421
.text:0000000000008421 loc_8421:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000008421                 call    xalloc_die
.text:0000000000008421 ; } // starts at 83F0
.text:0000000000008421 xrealloc        endp
.text:0000000000008421
.text:0000000000008421 ; ---------------------------------------------------------------------------
.text:0000000000008426                 align 10h
.text:0000000000008430
.text:0000000000008430 ; =============== S U B R O U T I N E =======================================
.text:0000000000008430
.text:0000000000008430 ; Attributes: info_from_lumina
.text:0000000000008430
.text:0000000000008430 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000008430                 public xnrealloc
.text:0000000000008430 xnrealloc       proc near
.text:0000000000008430 ; __unwind {
.text:0000000000008430                 mov     rax, rsi
.text:0000000000008433                 mul     rdx
.text:0000000000008436                 mov     rsi, rax
.text:0000000000008439                 seto    al
.text:000000000000843C                 test    rsi, rsi
.text:000000000000843F                 js      short loc_844B
.text:0000000000008441                 movzx   eax, al
.text:0000000000008444                 test    rax, rax
.text:0000000000008447                 jnz     short loc_844B
.text:0000000000008449                 jmp     short xrealloc
.text:000000000000844B ; ---------------------------------------------------------------------------
.text:000000000000844B
.text:000000000000844B loc_844B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000844B                                         ; xnrealloc+17↑j
.text:000000000000844B                 sub     rsp, 8
.text:000000000000844F                 call    xalloc_die
.text:000000000000844F ; } // starts at 8430
.text:000000000000844F xnrealloc       endp
.text:000000000000844F
.text:000000000000844F ; ---------------------------------------------------------------------------
.text:0000000000008454                 align 20h
.text:0000000000008460
.text:0000000000008460 ; =============== S U B R O U T I N E =======================================
.text:0000000000008460
.text:0000000000008460 ; Attributes: info_from_lumina
.text:0000000000008460
.text:0000000000008460 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000008460                 public x2nrealloc
.text:0000000000008460 x2nrealloc      proc near
.text:0000000000008460 ; __unwind {
.text:0000000000008460                 test    rdi, rdi
.text:0000000000008463                 mov     r9, rdx
.text:0000000000008466                 mov     rcx, [rsi]
.text:0000000000008469                 jz      short loc_84A0
.text:000000000000846B                 xor     edx, edx
.text:000000000000846D                 mov     rax, 5555555555555554h
.text:0000000000008477                 div     r9
.text:000000000000847A                 cmp     rax, rcx
.text:000000000000847D                 jbe     short loc_84BB
.text:000000000000847F                 mov     rax, rcx
.text:0000000000008482                 shr     rax, 1
.text:0000000000008485                 lea     rcx, [rax+rcx+1]
.text:000000000000848A
.text:000000000000848A loc_848A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000848A                 mov     [rsi], rcx
.text:000000000000848D                 imul    rcx, r9
.text:0000000000008491                 mov     rsi, rcx
.text:0000000000008494                 jmp     xrealloc
.text:0000000000008494 ; ---------------------------------------------------------------------------
.text:0000000000008499                 align 20h
.text:00000000000084A0
.text:00000000000084A0 loc_84A0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000084A0                 test    rcx, rcx
.text:00000000000084A3                 jz      short loc_84C8
.text:00000000000084A5
.text:00000000000084A5 loc_84A5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000084A5                 mov     rax, rcx
.text:00000000000084A8                 mul     r9
.text:00000000000084AB                 seto    dl
.text:00000000000084AE                 test    rax, rax
.text:00000000000084B1                 movzx   edx, dl
.text:00000000000084B4                 js      short loc_84BB
.text:00000000000084B6                 test    rdx, rdx
.text:00000000000084B9                 jz      short loc_848A
.text:00000000000084BB
.text:00000000000084BB loc_84BB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000084BB                                         ; x2nrealloc+54↑j
.text:00000000000084BB                 sub     rsp, 8
.text:00000000000084BF                 call    xalloc_die
.text:00000000000084BF ; ---------------------------------------------------------------------------
.text:00000000000084C4                 align 8
.text:00000000000084C8
.text:00000000000084C8 loc_84C8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000084C8                 xor     edx, edx
.text:00000000000084CA                 mov     eax, 80h
.text:00000000000084CF                 xor     r8d, r8d
.text:00000000000084D2                 div     r9
.text:00000000000084D5                 test    rax, rax
.text:00000000000084D8                 setz    r8b
.text:00000000000084DC                 lea     rcx, [r8+rax]
.text:00000000000084E0                 jmp     short loc_84A5
.text:00000000000084E0 ; } // starts at 8460
.text:00000000000084E0 x2nrealloc      endp
.text:00000000000084E0
.text:00000000000084E0 ; ---------------------------------------------------------------------------
.text:00000000000084E2                 align 10h
.text:00000000000084F0
.text:00000000000084F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084F0
.text:00000000000084F0 ; Attributes: info_from_lumina
.text:00000000000084F0
.text:00000000000084F0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000084F0                 public x2realloc
.text:00000000000084F0 x2realloc       proc near
.text:00000000000084F0 ; __unwind {
.text:00000000000084F0                 test    rdi, rdi
.text:00000000000084F3                 mov     rax, [rsi]
.text:00000000000084F6                 jz      short loc_8520
.text:00000000000084F8                 mov     rdx, 5555555555555553h
.text:0000000000008502                 cmp     rax, rdx
.text:0000000000008505                 ja      short loc_8531
.text:0000000000008507                 mov     rdx, rax
.text:000000000000850A                 shr     rdx, 1
.text:000000000000850D                 lea     rax, [rdx+rax+1]
.text:0000000000008512
.text:0000000000008512 loc_8512:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000008512                 mov     [rsi], rax
.text:0000000000008515                 mov     rsi, rax
.text:0000000000008518                 jmp     xrealloc
.text:0000000000008518 ; ---------------------------------------------------------------------------
.text:000000000000851D                 align 20h
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000008520                 test    rax, rax
.text:0000000000008523                 mov     edx, 80h
.text:0000000000008528                 cmovz   rax, rdx
.text:000000000000852C                 test    rax, rax
.text:000000000000852F                 jns     short loc_8512
.text:0000000000008531
.text:0000000000008531 loc_8531:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000008531                 sub     rsp, 8
.text:0000000000008535                 call    xalloc_die
.text:0000000000008535 ; } // starts at 84F0
.text:0000000000008535 x2realloc       endp
.text:0000000000008535
.text:0000000000008535 ; ---------------------------------------------------------------------------
.text:000000000000853A                 align 20h
.text:0000000000008540
.text:0000000000008540 ; =============== S U B R O U T I N E =======================================
.text:0000000000008540
.text:0000000000008540
.text:0000000000008540 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000008540                 public xzalloc
.text:0000000000008540 xzalloc         proc near
.text:0000000000008540 ; __unwind {
.text:0000000000008540                 push    rbx
.text:0000000000008541                 mov     rbx, rdi
.text:0000000000008544                 call    xmalloc
.text:0000000000008549                 mov     rdx, rbx        ; n
.text:000000000000854C                 xor     esi, esi        ; c
.text:000000000000854E                 mov     rdi, rax        ; s
.text:0000000000008551                 pop     rbx
.text:0000000000008552                 jmp     _memset
.text:0000000000008552 ; } // starts at 8540
.text:0000000000008552 xzalloc         endp
.text:0000000000008552
.text:0000000000008552 ; ---------------------------------------------------------------------------
.text:0000000000008557                 align 20h
.text:0000000000008560
.text:0000000000008560 ; =============== S U B R O U T I N E =======================================
.text:0000000000008560
.text:0000000000008560 ; Attributes: info_from_lumina
.text:0000000000008560
.text:0000000000008560 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000008560                 public xcalloc
.text:0000000000008560 xcalloc         proc near
.text:0000000000008560 ; __unwind {
.text:0000000000008560                 mov     rax, rdi
.text:0000000000008563                 sub     rsp, 8
.text:0000000000008567                 mul     rsi
.text:000000000000856A                 seto    dl
.text:000000000000856D                 test    rax, rax
.text:0000000000008570                 js      short loc_8589
.text:0000000000008572                 movzx   edx, dl
.text:0000000000008575                 test    rdx, rdx
.text:0000000000008578                 jnz     short loc_8589
.text:000000000000857A                 call    _calloc
.text:000000000000857F                 test    rax, rax
.text:0000000000008582                 jz      short loc_8589
.text:0000000000008584                 add     rsp, 8
.text:0000000000008588                 retn
.text:0000000000008589 ; ---------------------------------------------------------------------------
.text:0000000000008589
.text:0000000000008589 loc_8589:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000008589                                         ; xcalloc+18↑j ...
.text:0000000000008589                 call    xalloc_die
.text:0000000000008589 ; } // starts at 8560
.text:0000000000008589 xcalloc         endp
.text:0000000000008589
.text:0000000000008589 ; ---------------------------------------------------------------------------
.text:000000000000858E                 align 10h
.text:0000000000008590
.text:0000000000008590 ; =============== S U B R O U T I N E =======================================
.text:0000000000008590
.text:0000000000008590 ; Attributes: info_from_lumina
.text:0000000000008590
.text:0000000000008590 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000008590                 public xmemdup
.text:0000000000008590 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000008590                                         ; xstrdup+11↓j
.text:0000000000008590 ; __unwind {
.text:0000000000008590                 push    rbp
.text:0000000000008591                 push    rbx
.text:0000000000008592                 mov     rbp, rdi
.text:0000000000008595                 mov     rdi, rsi
.text:0000000000008598                 mov     rbx, rsi
.text:000000000000859B                 sub     rsp, 8
.text:000000000000859F                 call    xmalloc
.text:00000000000085A4                 add     rsp, 8
.text:00000000000085A8                 mov     rdx, rbx        ; n
.text:00000000000085AB                 mov     rsi, rbp        ; src
.text:00000000000085AE                 pop     rbx
.text:00000000000085AF                 pop     rbp
.text:00000000000085B0                 mov     rdi, rax        ; dest
.text:00000000000085B3                 jmp     _memcpy
.text:00000000000085B3 ; } // starts at 8590
.text:00000000000085B3 xmemdup         endp
.text:00000000000085B3
.text:00000000000085B3 ; ---------------------------------------------------------------------------
.text:00000000000085B8                 align 20h
.text:00000000000085C0
.text:00000000000085C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085C0
.text:00000000000085C0
.text:00000000000085C0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000085C0                 public xstrdup
.text:00000000000085C0 xstrdup         proc near               ; CODE XREF: main+B1E↑p
.text:00000000000085C0 ; __unwind {
.text:00000000000085C0                 push    rbx
.text:00000000000085C1                 mov     rbx, rdi
.text:00000000000085C4                 call    _strlen
.text:00000000000085C9                 mov     rdi, rbx        ; src
.text:00000000000085CC                 lea     rsi, [rax+1]    ; n
.text:00000000000085D0                 pop     rbx
.text:00000000000085D1                 jmp     short xmemdup
.text:00000000000085D1 ; } // starts at 85C0
.text:00000000000085D1 xstrdup         endp
.text:00000000000085D1
.text:00000000000085D1 ; ---------------------------------------------------------------------------
.text:00000000000085D3                 align 20h
.text:00000000000085E0
.text:00000000000085E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085E0
.text:00000000000085E0 ; Attributes: noreturn info_from_lumina
.text:00000000000085E0
.text:00000000000085E0 ; void __cdecl xalloc_die()
.text:00000000000085E0                 public xalloc_die
.text:00000000000085E0 xalloc_die      proc near               ; CODE XREF: add_range_pair:loc_515D↑p
.text:00000000000085E0                                         ; quotearg_n_options:loc_75B6↑p ...
.text:00000000000085E0 ; __unwind {
.text:00000000000085E0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000085E7                 sub     rsp, 8
.text:00000000000085EB                 mov     edx, 5          ; category
.text:00000000000085F0                 xor     edi, edi        ; domainname
.text:00000000000085F2                 call    _dcgettext
.text:00000000000085F7                 mov     edi, cs:exit_failure ; status
.text:00000000000085FD                 lea     rdx, aS_0+2     ; format
.text:0000000000008604                 mov     rcx, rax
.text:0000000000008607                 xor     esi, esi        ; errnum
.text:0000000000008609                 xor     eax, eax
.text:000000000000860B                 call    _error
.text:0000000000008610                 call    _abort
.text:0000000000008610 ; } // starts at 85E0
.text:0000000000008610 xalloc_die      endp
.text:0000000000008610
.text:0000000000008610 ; ---------------------------------------------------------------------------
.text:0000000000008615                 align 20h
.text:0000000000008620
.text:0000000000008620 ; =============== S U B R O U T I N E =======================================
.text:0000000000008620
.text:0000000000008620
.text:0000000000008620                 public xstrndup
.text:0000000000008620 xstrndup        proc near               ; CODE XREF: main+5D4↑p
.text:0000000000008620                                         ; set_fields+4B9↑p
.text:0000000000008620 ; __unwind {
.text:0000000000008620                 sub     rsp, 8
.text:0000000000008624                 call    _strndup
.text:0000000000008629                 test    rax, rax
.text:000000000000862C                 jz      short loc_8633
.text:000000000000862E                 add     rsp, 8
.text:0000000000008632                 retn
.text:0000000000008633 ; ---------------------------------------------------------------------------
.text:0000000000008633
.text:0000000000008633 loc_8633:                               ; CODE XREF: xstrndup+C↑j
.text:0000000000008633                 call    xalloc_die
.text:0000000000008633 ; } // starts at 8620
.text:0000000000008633 xstrndup        endp
.text:0000000000008633
.text:0000000000008633 ; ---------------------------------------------------------------------------
.text:0000000000008638                 align 20h
.text:0000000000008640
.text:0000000000008640 ; =============== S U B R O U T I N E =======================================
.text:0000000000008640
.text:0000000000008640
.text:0000000000008640 ; __int64 __fastcall xstrtol(char *nptr)
.text:0000000000008640                 public xstrtol
.text:0000000000008640 xstrtol         proc near               ; CODE XREF: main+3AC↑p
.text:0000000000008640
.text:0000000000008640 var_50          = qword ptr -50h
.text:0000000000008640 endptr          = qword ptr -48h
.text:0000000000008640 var_40          = qword ptr -40h
.text:0000000000008640
.text:0000000000008640 ; __unwind {
.text:0000000000008640                 push    r15
.text:0000000000008642                 push    r14
.text:0000000000008644                 push    r13
.text:0000000000008646                 push    r12
.text:0000000000008648                 push    rbp
.text:0000000000008649                 push    rbx
.text:000000000000864A                 sub     rsp, 28h
.text:000000000000864E                 mov     rax, fs:28h
.text:0000000000008657                 mov     [rsp+58h+var_40], rax
.text:000000000000865C                 xor     eax, eax
.text:000000000000865E                 cmp     edx, 24h ; '$'
.text:0000000000008661                 ja      loc_8CCF
.text:0000000000008667                 lea     rax, [rsp+58h+endptr]
.text:000000000000866C                 test    rsi, rsi
.text:000000000000866F                 mov     rbx, rsi
.text:0000000000008672                 mov     r12, rdi
.text:0000000000008675                 mov     ebp, edx
.text:0000000000008677                 mov     r14, rcx
.text:000000000000867A                 cmovz   rbx, rax
.text:000000000000867E                 mov     r15, r8
.text:0000000000008681                 call    ___errno_location
.text:0000000000008686                 mov     edx, ebp        ; base
.text:0000000000008688                 mov     dword ptr [rax], 0
.text:000000000000868E                 mov     rsi, rbx        ; endptr
.text:0000000000008691                 mov     rdi, r12        ; nptr
.text:0000000000008694                 mov     r13, rax
.text:0000000000008697                 call    _strtol
.text:000000000000869C                 mov     rcx, [rbx]
.text:000000000000869F                 mov     rbp, rax
.text:00000000000086A2                 cmp     rcx, r12
.text:00000000000086A5                 jz      short loc_8708
.text:00000000000086A7                 mov     eax, [r13+0]
.text:00000000000086AB                 test    eax, eax
.text:00000000000086AD                 jnz     short loc_86F0
.text:00000000000086AF                 xor     r12d, r12d
.text:00000000000086B2
.text:00000000000086B2 loc_86B2:                               ; CODE XREF: xstrtol+C1↓j
.text:00000000000086B2                 test    r15, r15
.text:00000000000086B5                 jz      short loc_86C4
.text:00000000000086B7                 movzx   r13d, byte ptr [rcx]
.text:00000000000086BB                 test    r13b, r13b
.text:00000000000086BE                 jnz     loc_8743
.text:00000000000086C4
.text:00000000000086C4 loc_86C4:                               ; CODE XREF: xstrtol+75↑j
.text:00000000000086C4                                         ; xstrtol+226↓j
.text:00000000000086C4                 mov     [r14], rbp
.text:00000000000086C7
.text:00000000000086C7 loc_86C7:                               ; CODE XREF: xstrtol+B9↓j
.text:00000000000086C7                                         ; xstrtol+E3↓j ...
.text:00000000000086C7                 mov     rdi, [rsp+58h+var_40]
.text:00000000000086CC                 xor     rdi, fs:28h
.text:00000000000086D5                 mov     eax, r12d
.text:00000000000086D8                 jnz     loc_8CEE
.text:00000000000086DE                 add     rsp, 28h
.text:00000000000086E2                 pop     rbx
.text:00000000000086E3                 pop     rbp
.text:00000000000086E4                 pop     r12
.text:00000000000086E6                 pop     r13
.text:00000000000086E8                 pop     r14
.text:00000000000086EA                 pop     r15
.text:00000000000086EC                 retn
.text:00000000000086EC ; ---------------------------------------------------------------------------
.text:00000000000086ED                 align 10h
.text:00000000000086F0
.text:00000000000086F0 loc_86F0:                               ; CODE XREF: xstrtol+6D↑j
.text:00000000000086F0                 cmp     eax, 22h ; '"'
.text:00000000000086F3                 mov     r12d, 4
.text:00000000000086F9                 jnz     short loc_86C7
.text:00000000000086FB                 mov     r12d, 1
.text:0000000000008701                 jmp     short loc_86B2
.text:0000000000008701 ; ---------------------------------------------------------------------------
.text:0000000000008703                 align 8
.text:0000000000008708
.text:0000000000008708 loc_8708:                               ; CODE XREF: xstrtol+65↑j
.text:0000000000008708                 test    r15, r15
.text:000000000000870B                 jz      loc_8BA0
.text:0000000000008711                 movzx   r13d, byte ptr [rcx]
.text:0000000000008715                 mov     [rsp+58h+var_50], rcx
.text:000000000000871A                 mov     r12d, 4
.text:0000000000008720                 test    r13b, r13b
.text:0000000000008723                 jz      short loc_86C7
.text:0000000000008725                 movsx   esi, r13b       ; c
.text:0000000000008729                 mov     rdi, r15        ; s
.text:000000000000872C                 call    _strchr
.text:0000000000008731                 test    rax, rax
.text:0000000000008734                 mov     rcx, [rsp+58h+var_50]
.text:0000000000008739                 jz      short loc_86C7
.text:000000000000873B                 mov     ebp, 1
.text:0000000000008740                 xor     r12d, r12d
.text:0000000000008743
.text:0000000000008743 loc_8743:                               ; CODE XREF: xstrtol+7E↑j
.text:0000000000008743                 movsx   esi, r13b       ; c
.text:0000000000008747                 mov     rdi, r15        ; s
.text:000000000000874A                 mov     [rsp+58h+var_50], rcx
.text:000000000000874F                 call    _strchr
.text:0000000000008754                 test    rax, rax
.text:0000000000008757                 mov     rcx, [rsp+58h+var_50]
.text:000000000000875C                 jz      short def_87EE  ; jumptable 00000000000087EE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000875E                 lea     eax, [r13-45h]
.text:0000000000008762                 cmp     al, 2Fh ; '/'
.text:0000000000008764                 ja      short loc_87C8
.text:0000000000008766                 mov     rdx, 814400308945h
.text:0000000000008770                 bt      rdx, rax
.text:0000000000008774                 jnb     short loc_87C8
.text:0000000000008776                 mov     esi, 30h ; '0'  ; c
.text:000000000000877B                 mov     rdi, r15        ; s
.text:000000000000877E                 mov     [rsp+58h+var_50], rcx
.text:0000000000008783                 call    _strchr
.text:0000000000008788                 test    rax, rax
.text:000000000000878B                 mov     rcx, [rsp+58h+var_50]
.text:0000000000008790                 jz      short loc_87C8
.text:0000000000008792                 movzx   eax, byte ptr [rcx+1]
.text:0000000000008796                 cmp     al, 44h ; 'D'
.text:0000000000008798                 jz      short loc_87A6
.text:000000000000879A                 cmp     al, 69h ; 'i'
.text:000000000000879C                 jz      loc_8C88
.text:00000000000087A2                 cmp     al, 42h ; 'B'
.text:00000000000087A4                 jnz     short loc_87C8
.text:00000000000087A6
.text:00000000000087A6 loc_87A6:                               ; CODE XREF: xstrtol+158↑j
.text:00000000000087A6                 mov     edi, 2
.text:00000000000087AB                 mov     eax, 3E8h
.text:00000000000087B0                 jmp     short loc_87D2
.text:00000000000087B0 ; ---------------------------------------------------------------------------
.text:00000000000087B2                 align 8
.text:00000000000087B8
.text:00000000000087B8 def_87EE:                               ; CODE XREF: xstrtol+11C↑j
.text:00000000000087B8                                         ; xstrtol+19A↓j ...
.text:00000000000087B8                 mov     [r14], rbp      ; jumptable 00000000000087EE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000087BB                 or      r12d, 2
.text:00000000000087BF                 jmp     loc_86C7
.text:00000000000087BF ; ---------------------------------------------------------------------------
.text:00000000000087C4                 align 8
.text:00000000000087C8
.text:00000000000087C8 loc_87C8:                               ; CODE XREF: xstrtol+124↑j
.text:00000000000087C8                                         ; xstrtol+134↑j ...
.text:00000000000087C8                 mov     edi, 1
.text:00000000000087CD                 mov     eax, 400h
.text:00000000000087D2
.text:00000000000087D2 loc_87D2:                               ; CODE XREF: xstrtol+170↑j
.text:00000000000087D2                                         ; xstrtol+65B↓j
.text:00000000000087D2                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:00000000000087D6                 cmp     r13b, 35h
.text:00000000000087DA                 ja      short def_87EE  ; jumptable 00000000000087EE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000087DC                 lea     rsi, jpt_87EE
.text:00000000000087E3                 movzx   r13d, r13b
.text:00000000000087E7                 movsxd  rdx, ds:(jpt_87EE - 0BCE8h)[rsi+r13*4]
.text:00000000000087EB                 add     rdx, rsi
.text:00000000000087EE                 jmp     rdx             ; switch jump
.text:00000000000087F0 ; ---------------------------------------------------------------------------
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000087F0                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:00000000000087F0                 mov     r8, 8000000000000000h ; jumptable 00000000000087EE cases 77,109
.text:00000000000087FA                 movsxd  rsi, eax
.text:00000000000087FD                 mov     rax, r8
.text:0000000000008800                 cqo
.text:0000000000008802                 idiv    rsi
.text:0000000000008805                 cmp     rbp, rax
.text:0000000000008808                 mov     r9, rax
.text:000000000000880B                 jl      loc_8CB5
.text:0000000000008811                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000881B                 mov     rax, r10
.text:000000000000881E                 cqo
.text:0000000000008820                 idiv    rsi
.text:0000000000008823                 cmp     rbp, rax
.text:0000000000008826                 jg      loc_8CC2
.text:000000000000882C                 imul    rbp, rsi
.text:0000000000008830                 cmp     r9, rbp
.text:0000000000008833                 jg      loc_8CB5
.text:0000000000008839                 cmp     rax, rbp
.text:000000000000883C                 jl      loc_8CC2
.text:0000000000008842                 imul    rbp, rsi
.text:0000000000008846                 xor     eax, eax
.text:0000000000008848
.text:0000000000008848 loc_8848:                               ; CODE XREF: xstrtol+67D↓j
.text:0000000000008848                                         ; xstrtol+68A↓j
.text:0000000000008848                 or      r12d, eax
.text:000000000000884B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008850
.text:0000000000008850 loc_8850:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008850                                         ; xstrtol+259↓j ...
.text:0000000000008850                 movsxd  rax, edi        ; jumptable 00000000000087EE case 99
.text:0000000000008853                 add     rcx, rax
.text:0000000000008856                 mov     eax, r12d
.text:0000000000008859                 or      eax, 2
.text:000000000000885C                 mov     [rbx], rcx
.text:000000000000885F                 cmp     byte ptr [rcx], 0
.text:0000000000008862                 cmovnz  r12d, eax
.text:0000000000008866                 jmp     loc_86C4
.text:0000000000008866 ; ---------------------------------------------------------------------------
.text:000000000000886B                 align 10h
.text:0000000000008870
.text:0000000000008870 loc_8870:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008870                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008870                 mov     rax, 0C000000000000000h ; jumptable 00000000000087EE case 119
.text:000000000000887A                 cmp     rbp, rax
.text:000000000000887D                 jl      loc_8BB0
.text:0000000000008883                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000888D                 cmp     rbp, rax
.text:0000000000008890                 jg      loc_8C70
.text:0000000000008896                 add     rbp, rbp
.text:0000000000008899                 jmp     short loc_8850  ; jumptable 00000000000087EE case 99
.text:0000000000008899 ; ---------------------------------------------------------------------------
.text:000000000000889B                 align 20h
.text:00000000000088A0
.text:00000000000088A0 loc_88A0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000088A0                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:00000000000088A0                 mov     rax, 0FFC0000000000000h ; jumptable 00000000000087EE case 98
.text:00000000000088AA                 cmp     rbp, rax
.text:00000000000088AD                 jl      loc_8BB0
.text:00000000000088B3                 mov     rax, 3FFFFFFFFFFFFFh
.text:00000000000088BD                 cmp     rbp, rax
.text:00000000000088C0                 jg      loc_8C70
.text:00000000000088C6                 shl     rbp, 9
.text:00000000000088CA                 jmp     short loc_8850  ; jumptable 00000000000087EE case 99
.text:00000000000088CA ; ---------------------------------------------------------------------------
.text:00000000000088CC                 align 10h
.text:00000000000088D0
.text:00000000000088D0 loc_88D0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000088D0                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:00000000000088D0                 movsxd  rsi, eax        ; jumptable 00000000000087EE case 90
.text:00000000000088D3                 mov     rax, 8000000000000000h
.text:00000000000088DD                 mov     r8d, 7
.text:00000000000088E3                 cqo
.text:00000000000088E5                 xor     r11d, r11d
.text:00000000000088E8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000088F2                 idiv    rsi
.text:00000000000088F5                 mov     r10, rax
.text:00000000000088F8                 jmp     short loc_891F
.text:00000000000088F8 ; ---------------------------------------------------------------------------
.text:00000000000088FA                 align 20h
.text:0000000000008900
.text:0000000000008900 loc_8900:                               ; CODE XREF: xstrtol+2E2↓j
.text:0000000000008900                 mov     rax, r9
.text:0000000000008903                 cqo
.text:0000000000008905                 idiv    rsi
.text:0000000000008908                 cmp     rax, rbp
.text:000000000000890B                 jl      loc_8BF8
.text:0000000000008911                 imul    rbp, rsi
.text:0000000000008915
.text:0000000000008915 loc_8915:                               ; CODE XREF: xstrtol+2F4↓j
.text:0000000000008915                                         ; xstrtol+5C8↓j
.text:0000000000008915                 sub     r8d, 1
.text:0000000000008919                 jz      loc_8A40
.text:000000000000891F
.text:000000000000891F loc_891F:                               ; CODE XREF: xstrtol+2B8↑j
.text:000000000000891F                 cmp     r10, rbp
.text:0000000000008922                 jle     short loc_8900
.text:0000000000008924                 mov     r11d, 1
.text:000000000000892A                 mov     rbp, 8000000000000000h
.text:0000000000008934                 jmp     short loc_8915
.text:0000000000008934 ; ---------------------------------------------------------------------------
.text:0000000000008936                 align 20h
.text:0000000000008940
.text:0000000000008940 loc_8940:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008940                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008940                 movsxd  rsi, eax        ; jumptable 00000000000087EE case 89
.text:0000000000008943                 mov     rax, 8000000000000000h
.text:000000000000894D                 mov     r8d, 8
.text:0000000000008953                 cqo
.text:0000000000008955                 xor     r11d, r11d
.text:0000000000008958                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008962                 idiv    rsi
.text:0000000000008965                 mov     r10, rax
.text:0000000000008968                 jmp     short loc_898F
.text:0000000000008968 ; ---------------------------------------------------------------------------
.text:000000000000896A                 align 10h
.text:0000000000008970
.text:0000000000008970 loc_8970:                               ; CODE XREF: xstrtol+352↓j
.text:0000000000008970                 mov     rax, r9
.text:0000000000008973                 cqo
.text:0000000000008975                 idiv    rsi
.text:0000000000008978                 cmp     rax, rbp
.text:000000000000897B                 jl      loc_8BC8
.text:0000000000008981                 imul    rbp, rsi
.text:0000000000008985
.text:0000000000008985 loc_8985:                               ; CODE XREF: xstrtol+364↓j
.text:0000000000008985                                         ; xstrtol+598↓j
.text:0000000000008985                 sub     r8d, 1
.text:0000000000008989                 jz      loc_8A40
.text:000000000000898F
.text:000000000000898F loc_898F:                               ; CODE XREF: xstrtol+328↑j
.text:000000000000898F                 cmp     r10, rbp
.text:0000000000008992                 jle     short loc_8970
.text:0000000000008994                 mov     r11d, 1
.text:000000000000899A                 mov     rbp, 8000000000000000h
.text:00000000000089A4                 jmp     short loc_8985
.text:00000000000089A4 ; ---------------------------------------------------------------------------
.text:00000000000089A6                 align 10h
.text:00000000000089B0
.text:00000000000089B0 loc_89B0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000089B0                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:00000000000089B0                 mov     r8, 8000000000000000h ; jumptable 00000000000087EE cases 75,107
.text:00000000000089BA                 movsxd  rsi, eax
.text:00000000000089BD                 mov     rax, r8
.text:00000000000089C0                 cqo
.text:00000000000089C2                 idiv    rsi
.text:00000000000089C5                 cmp     rbp, rax
.text:00000000000089C8                 jl      loc_8BB0
.text:00000000000089CE                 sub     r8, 1
.text:00000000000089D2                 mov     rax, r8
.text:00000000000089D5                 cqo
.text:00000000000089D7                 idiv    rsi
.text:00000000000089DA                 cmp     rbp, rax
.text:00000000000089DD                 jg      loc_8C70
.text:00000000000089E3                 imul    rbp, rsi
.text:00000000000089E7                 jmp     loc_8850        ; jumptable 00000000000087EE case 99
.text:00000000000089E7 ; ---------------------------------------------------------------------------
.text:00000000000089EC                 align 10h
.text:00000000000089F0
.text:00000000000089F0 loc_89F0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000089F0                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:00000000000089F0                 movsxd  rsi, eax        ; jumptable 00000000000087EE cases 71,103
.text:00000000000089F3                 mov     rax, 8000000000000000h
.text:00000000000089FD                 mov     r8d, 3
.text:0000000000008A03                 cqo
.text:0000000000008A05                 xor     r11d, r11d
.text:0000000000008A08                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008A12                 idiv    rsi
.text:0000000000008A15                 mov     r10, rax
.text:0000000000008A18
.text:0000000000008A18 loc_8A18:                               ; CODE XREF: xstrtol+3FA↓j
.text:0000000000008A18                 cmp     r10, rbp
.text:0000000000008A1B                 jg      loc_8C10
.text:0000000000008A21                 mov     rax, r9
.text:0000000000008A24                 cqo
.text:0000000000008A26                 idiv    rsi
.text:0000000000008A29                 cmp     rax, rbp
.text:0000000000008A2C                 jl      loc_8CA0
.text:0000000000008A32                 imul    rbp, rsi
.text:0000000000008A36
.text:0000000000008A36 loc_8A36:                               ; CODE XREF: xstrtol+5E0↓j
.text:0000000000008A36                                         ; xstrtol+670↓j
.text:0000000000008A36                 sub     r8d, 1
.text:0000000000008A3A                 jnz     short loc_8A18
.text:0000000000008A3C                 nop     dword ptr [rax+00h]
.text:0000000000008A40
.text:0000000000008A40 loc_8A40:                               ; CODE XREF: xstrtol+2D9↑j
.text:0000000000008A40                                         ; xstrtol+349↑j ...
.text:0000000000008A40                 or      r12d, r11d
.text:0000000000008A43                 jmp     loc_8850        ; jumptable 00000000000087EE case 99
.text:0000000000008A43 ; ---------------------------------------------------------------------------
.text:0000000000008A48                 align 10h
.text:0000000000008A50
.text:0000000000008A50 loc_8A50:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008A50                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008A50                 movsxd  rsi, eax        ; jumptable 00000000000087EE case 69
.text:0000000000008A53                 mov     rax, 8000000000000000h
.text:0000000000008A5D                 mov     r8d, 6
.text:0000000000008A63                 cqo
.text:0000000000008A65                 xor     r11d, r11d
.text:0000000000008A68                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008A72                 idiv    rsi
.text:0000000000008A75                 mov     r10, rax
.text:0000000000008A78                 jmp     short loc_8A9B
.text:0000000000008A78 ; ---------------------------------------------------------------------------
.text:0000000000008A7A                 align 20h
.text:0000000000008A80
.text:0000000000008A80 loc_8A80:                               ; CODE XREF: xstrtol+45E↓j
.text:0000000000008A80                 mov     rax, r9
.text:0000000000008A83                 cqo
.text:0000000000008A85                 idiv    rsi
.text:0000000000008A88                 cmp     rax, rbp
.text:0000000000008A8B                 jl      loc_8C28
.text:0000000000008A91                 imul    rbp, rsi
.text:0000000000008A95
.text:0000000000008A95 loc_8A95:                               ; CODE XREF: xstrtol+470↓j
.text:0000000000008A95                                         ; xstrtol+5F8↓j
.text:0000000000008A95                 sub     r8d, 1
.text:0000000000008A99                 jz      short loc_8A40
.text:0000000000008A9B
.text:0000000000008A9B loc_8A9B:                               ; CODE XREF: xstrtol+438↑j
.text:0000000000008A9B                 cmp     r10, rbp
.text:0000000000008A9E                 jle     short loc_8A80
.text:0000000000008AA0                 mov     r11d, 1
.text:0000000000008AA6                 mov     rbp, 8000000000000000h
.text:0000000000008AB0                 jmp     short loc_8A95
.text:0000000000008AB0 ; ---------------------------------------------------------------------------
.text:0000000000008AB2                 align 8
.text:0000000000008AB8
.text:0000000000008AB8 loc_8AB8:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008AB8                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008AB8                 movsxd  rsi, eax        ; jumptable 00000000000087EE case 80
.text:0000000000008ABB                 mov     rax, 8000000000000000h
.text:0000000000008AC5                 mov     r8d, 5
.text:0000000000008ACB                 cqo
.text:0000000000008ACD                 xor     r11d, r11d
.text:0000000000008AD0                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008ADA                 idiv    rsi
.text:0000000000008ADD                 mov     r10, rax
.text:0000000000008AE0                 jmp     short loc_8B07
.text:0000000000008AE0 ; ---------------------------------------------------------------------------
.text:0000000000008AE2                 align 8
.text:0000000000008AE8
.text:0000000000008AE8 loc_8AE8:                               ; CODE XREF: xstrtol+4CA↓j
.text:0000000000008AE8                 mov     rax, r9
.text:0000000000008AEB                 cqo
.text:0000000000008AED                 idiv    rsi
.text:0000000000008AF0                 cmp     rax, rbp
.text:0000000000008AF3                 jl      loc_8C40
.text:0000000000008AF9                 imul    rbp, rsi
.text:0000000000008AFD
.text:0000000000008AFD loc_8AFD:                               ; CODE XREF: xstrtol+4DC↓j
.text:0000000000008AFD                                         ; xstrtol+610↓j
.text:0000000000008AFD                 sub     r8d, 1
.text:0000000000008B01                 jz      loc_8A40
.text:0000000000008B07
.text:0000000000008B07 loc_8B07:                               ; CODE XREF: xstrtol+4A0↑j
.text:0000000000008B07                 cmp     r10, rbp
.text:0000000000008B0A                 jle     short loc_8AE8
.text:0000000000008B0C                 mov     r11d, 1
.text:0000000000008B12                 mov     rbp, 8000000000000000h
.text:0000000000008B1C                 jmp     short loc_8AFD
.text:0000000000008B1C ; ---------------------------------------------------------------------------
.text:0000000000008B1E                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008B20                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008B20                 mov     rax, 0FFE0000000000000h ; jumptable 00000000000087EE case 66
.text:0000000000008B2A                 cmp     rbp, rax
.text:0000000000008B2D                 jl      loc_8BB0
.text:0000000000008B33                 mov     rax, 1FFFFFFFFFFFFFh
.text:0000000000008B3D                 cmp     rbp, rax
.text:0000000000008B40                 jg      loc_8C70
.text:0000000000008B46                 shl     rbp, 0Ah
.text:0000000000008B4A                 jmp     loc_8850        ; jumptable 00000000000087EE case 99
.text:0000000000008B4A ; ---------------------------------------------------------------------------
.text:0000000000008B4F                 align 10h
.text:0000000000008B50
.text:0000000000008B50 loc_8B50:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000008B50                                         ; DATA XREF: .rodata:jpt_87EE↓o
.text:0000000000008B50                 movsxd  rsi, eax        ; jumptable 00000000000087EE cases 84,116
.text:0000000000008B53                 mov     rax, 8000000000000000h
.text:0000000000008B5D                 mov     r8d, 4
.text:0000000000008B63                 cqo
.text:0000000000008B65                 xor     r11d, r11d
.text:0000000000008B68                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000008B72                 idiv    rsi
.text:0000000000008B75                 mov     r10, rax
.text:0000000000008B78
.text:0000000000008B78 loc_8B78:                               ; CODE XREF: xstrtol+556↓j
.text:0000000000008B78                 cmp     r10, rbp
.text:0000000000008B7B                 jg      short loc_8BE0
.text:0000000000008B7D                 mov     rax, r9
.text:0000000000008B80                 cqo
.text:0000000000008B82                 idiv    rsi
.text:0000000000008B85                 cmp     rax, rbp
.text:0000000000008B88                 jl      loc_8C58
.text:0000000000008B8E                 imul    rbp, rsi
.text:0000000000008B92
.text:0000000000008B92 loc_8B92:                               ; CODE XREF: xstrtol+5B0↓j
.text:0000000000008B92                                         ; xstrtol+628↓j
.text:0000000000008B92                 sub     r8d, 1
.text:0000000000008B96                 jnz     short loc_8B78
.text:0000000000008B98                 jmp     loc_8A40
.text:0000000000008B98 ; ---------------------------------------------------------------------------
.text:0000000000008B9D                 align 20h
.text:0000000000008BA0
.text:0000000000008BA0 loc_8BA0:                               ; CODE XREF: xstrtol+CB↑j
.text:0000000000008BA0                 mov     r12d, 4
.text:0000000000008BA6                 jmp     loc_86C7
.text:0000000000008BA6 ; ---------------------------------------------------------------------------
.text:0000000000008BAB                 align 10h
.text:0000000000008BB0
.text:0000000000008BB0 loc_8BB0:                               ; CODE XREF: xstrtol+23D↑j
.text:0000000000008BB0                                         ; xstrtol+26D↑j ...
.text:0000000000008BB0                 mov     r12d, 1
.text:0000000000008BB6                 mov     rbp, 8000000000000000h
.text:0000000000008BC0                 jmp     loc_8850        ; jumptable 00000000000087EE case 99
.text:0000000000008BC0 ; ---------------------------------------------------------------------------
.text:0000000000008BC5                 align 8
.text:0000000000008BC8
.text:0000000000008BC8 loc_8BC8:                               ; CODE XREF: xstrtol+33B↑j
.text:0000000000008BC8                 mov     r11d, 1
.text:0000000000008BCE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008BD8                 jmp     loc_8985
.text:0000000000008BD8 ; ---------------------------------------------------------------------------
.text:0000000000008BDD                 align 20h
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: xstrtol+53B↑j
.text:0000000000008BE0                 mov     r11d, 1
.text:0000000000008BE6                 mov     rbp, 8000000000000000h
.text:0000000000008BF0                 jmp     short loc_8B92
.text:0000000000008BF0 ; ---------------------------------------------------------------------------
.text:0000000000008BF2                 align 8
.text:0000000000008BF8
.text:0000000000008BF8 loc_8BF8:                               ; CODE XREF: xstrtol+2CB↑j
.text:0000000000008BF8                 mov     r11d, 1
.text:0000000000008BFE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008C08                 jmp     loc_8915
.text:0000000000008C08 ; ---------------------------------------------------------------------------
.text:0000000000008C0D                 align 10h
.text:0000000000008C10
.text:0000000000008C10 loc_8C10:                               ; CODE XREF: xstrtol+3DB↑j
.text:0000000000008C10                 mov     r11d, 1
.text:0000000000008C16                 mov     rbp, 8000000000000000h
.text:0000000000008C20                 jmp     loc_8A36
.text:0000000000008C20 ; ---------------------------------------------------------------------------
.text:0000000000008C25                 align 8
.text:0000000000008C28
.text:0000000000008C28 loc_8C28:                               ; CODE XREF: xstrtol+44B↑j
.text:0000000000008C28                 mov     r11d, 1
.text:0000000000008C2E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008C38                 jmp     loc_8A95
.text:0000000000008C38 ; ---------------------------------------------------------------------------
.text:0000000000008C3D                 align 20h
.text:0000000000008C40
.text:0000000000008C40 loc_8C40:                               ; CODE XREF: xstrtol+4B3↑j
.text:0000000000008C40                 mov     r11d, 1
.text:0000000000008C46                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008C50                 jmp     loc_8AFD
.text:0000000000008C50 ; ---------------------------------------------------------------------------
.text:0000000000008C55                 align 8
.text:0000000000008C58
.text:0000000000008C58 loc_8C58:                               ; CODE XREF: xstrtol+548↑j
.text:0000000000008C58                 mov     r11d, 1
.text:0000000000008C5E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008C68                 jmp     loc_8B92
.text:0000000000008C68 ; ---------------------------------------------------------------------------
.text:0000000000008C6D                 align 10h
.text:0000000000008C70
.text:0000000000008C70 loc_8C70:                               ; CODE XREF: xstrtol+250↑j
.text:0000000000008C70                                         ; xstrtol+280↑j ...
.text:0000000000008C70                 mov     r12d, 1
.text:0000000000008C76                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008C80                 jmp     loc_8850        ; jumptable 00000000000087EE case 99
.text:0000000000008C80 ; ---------------------------------------------------------------------------
.text:0000000000008C85                 align 8
.text:0000000000008C88
.text:0000000000008C88 loc_8C88:                               ; CODE XREF: xstrtol+15C↑j
.text:0000000000008C88                 xor     edi, edi
.text:0000000000008C8A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000008C8E                 mov     eax, 400h
.text:0000000000008C93                 setz    dil
.text:0000000000008C97                 lea     edi, [rdi+rdi+1]
.text:0000000000008C9B                 jmp     loc_87D2
.text:0000000000008CA0 ; ---------------------------------------------------------------------------
.text:0000000000008CA0
.text:0000000000008CA0 loc_8CA0:                               ; CODE XREF: xstrtol+3EC↑j
.text:0000000000008CA0                 mov     r11d, 1
.text:0000000000008CA6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000008CB0                 jmp     loc_8A36
.text:0000000000008CB5 ; ---------------------------------------------------------------------------
.text:0000000000008CB5
.text:0000000000008CB5 loc_8CB5:                               ; CODE XREF: xstrtol+1CB↑j
.text:0000000000008CB5                                         ; xstrtol+1F3↑j
.text:0000000000008CB5                 mov     eax, 1
.text:0000000000008CBA                 mov     rbp, r8
.text:0000000000008CBD                 jmp     loc_8848
.text:0000000000008CC2 ; ---------------------------------------------------------------------------
.text:0000000000008CC2
.text:0000000000008CC2 loc_8CC2:                               ; CODE XREF: xstrtol+1E6↑j
.text:0000000000008CC2                                         ; xstrtol+1FC↑j
.text:0000000000008CC2                 mov     eax, 1
.text:0000000000008CC7                 mov     rbp, r10
.text:0000000000008CCA                 jmp     loc_8848
.text:0000000000008CCF ; ---------------------------------------------------------------------------
.text:0000000000008CCF
.text:0000000000008CCF loc_8CCF:                               ; CODE XREF: xstrtol+21↑j
.text:0000000000008CCF                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtol"
.text:0000000000008CD6                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008CDD                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000008CE4                 mov     edx, 54h ; 'T'  ; line
.text:0000000000008CE9                 call    ___assert_fail
.text:0000000000008CEE ; ---------------------------------------------------------------------------
.text:0000000000008CEE
.text:0000000000008CEE loc_8CEE:                               ; CODE XREF: xstrtol+98↑j
.text:0000000000008CEE                 call    ___stack_chk_fail
.text:0000000000008CEE ; } // starts at 8640
.text:0000000000008CEE xstrtol         endp
.text:0000000000008CEE
.text:0000000000008CEE ; ---------------------------------------------------------------------------
.text:0000000000008CF3                 align 20h
.text:0000000000008D00
.text:0000000000008D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D00
.text:0000000000008D00
.text:0000000000008D00 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000008D00                 public xstrtoumax
.text:0000000000008D00 xstrtoumax      proc near               ; CODE XREF: main+481↑p
.text:0000000000008D00                                         ; unit_to_umax+60↑p
.text:0000000000008D00
.text:0000000000008D00 base            = dword ptr -50h
.text:0000000000008D00 endptr          = qword ptr -48h
.text:0000000000008D00 var_40          = qword ptr -40h
.text:0000000000008D00
.text:0000000000008D00 ; __unwind {
.text:0000000000008D00                 push    r15
.text:0000000000008D02                 push    r14
.text:0000000000008D04                 push    r13
.text:0000000000008D06                 push    r12
.text:0000000000008D08                 push    rbp
.text:0000000000008D09                 push    rbx
.text:0000000000008D0A                 sub     rsp, 28h
.text:0000000000008D0E                 mov     rax, fs:28h
.text:0000000000008D17                 mov     [rsp+58h+var_40], rax
.text:0000000000008D1C                 xor     eax, eax
.text:0000000000008D1E                 cmp     edx, 24h ; '$'
.text:0000000000008D21                 ja      loc_9085
.text:0000000000008D27                 lea     rax, [rsp+58h+endptr]
.text:0000000000008D2C                 mov     r15, rsi
.text:0000000000008D2F                 test    rsi, rsi
.text:0000000000008D32                 mov     rbp, rdi
.text:0000000000008D35                 mov     [rsp+58h+base], edx
.text:0000000000008D39                 mov     r14, rcx
.text:0000000000008D3C                 mov     r13, r8
.text:0000000000008D3F                 cmovz   r15, rax
.text:0000000000008D43                 call    ___errno_location
.text:0000000000008D48                 mov     dword ptr [rax], 0
.text:0000000000008D4E                 mov     r12, rax
.text:0000000000008D51                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008D55                 call    ___ctype_b_loc
.text:0000000000008D5A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000008D5E                 mov     rsi, [rax]
.text:0000000000008D61                 mov     rax, rbp
.text:0000000000008D64                 jmp     short loc_8D77
.text:0000000000008D64 ; ---------------------------------------------------------------------------
.text:0000000000008D66                 align 10h
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000008D70                 add     rax, 1
.text:0000000000008D74                 movzx   ebx, byte ptr [rax]
.text:0000000000008D77
.text:0000000000008D77 loc_8D77:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000008D77                 movzx   ecx, bl
.text:0000000000008D7A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000008D7F                 jnz     short loc_8D70
.text:0000000000008D81                 cmp     bl, 2Dh ; '-'
.text:0000000000008D84                 jz      short loc_8DD8
.text:0000000000008D86                 xor     ecx, ecx        ; group
.text:0000000000008D88                 mov     rsi, r15        ; endptr
.text:0000000000008D8B                 mov     rdi, rbp        ; nptr
.text:0000000000008D8E                 call    ___strtoul_internal
.text:0000000000008D93                 mov     rcx, [r15]
.text:0000000000008D96                 mov     rbx, rax
.text:0000000000008D99                 cmp     rcx, rbp
.text:0000000000008D9C                 jz      short loc_8DC8
.text:0000000000008D9E                 mov     eax, [r12]
.text:0000000000008DA2                 test    eax, eax
.text:0000000000008DA4                 jz      short loc_8E08
.text:0000000000008DA6                 cmp     eax, 22h ; '"'
.text:0000000000008DA9                 mov     ebp, 1
.text:0000000000008DAE                 jnz     short loc_8DD8
.text:0000000000008DB0
.text:0000000000008DB0 loc_8DB0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000008DB0                 test    r13, r13
.text:0000000000008DB3                 jz      short loc_8DBE
.text:0000000000008DB5                 movzx   r12d, byte ptr [rcx]
.text:0000000000008DB9                 test    r12b, r12b
.text:0000000000008DBC                 jnz     short loc_8E37
.text:0000000000008DBE
.text:0000000000008DBE loc_8DBE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000008DBE                 mov     [r14], rbx
.text:0000000000008DC1                 jmp     short loc_8DDD
.text:0000000000008DC1 ; ---------------------------------------------------------------------------
.text:0000000000008DC3                 align 8
.text:0000000000008DC8
.text:0000000000008DC8 loc_8DC8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000008DC8                 test    r13, r13
.text:0000000000008DCB                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008DD0                 jnz     short loc_8E10
.text:0000000000008DD2                 nop     word ptr [rax+rax+00h]
.text:0000000000008DD8
.text:0000000000008DD8 loc_8DD8:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000008DD8                                         ; xstrtoumax+AE↑j ...
.text:0000000000008DD8                 mov     ebp, 4
.text:0000000000008DDD
.text:0000000000008DDD loc_8DDD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000008DDD                                         ; xstrtoumax+217↓j ...
.text:0000000000008DDD                 mov     rdi, [rsp+58h+var_40]
.text:0000000000008DE2                 xor     rdi, fs:28h
.text:0000000000008DEB                 mov     eax, ebp
.text:0000000000008DED                 jnz     loc_9080
.text:0000000000008DF3                 add     rsp, 28h
.text:0000000000008DF7                 pop     rbx
.text:0000000000008DF8                 pop     rbp
.text:0000000000008DF9                 pop     r12
.text:0000000000008DFB                 pop     r13
.text:0000000000008DFD                 pop     r14
.text:0000000000008DFF                 pop     r15
.text:0000000000008E01                 retn
.text:0000000000008E01 ; ---------------------------------------------------------------------------
.text:0000000000008E02                 align 8
.text:0000000000008E08
.text:0000000000008E08 loc_8E08:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000008E08                 xor     ebp, ebp
.text:0000000000008E0A                 jmp     short loc_8DB0
.text:0000000000008E0A ; ---------------------------------------------------------------------------
.text:0000000000008E0C                 align 10h
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000008E10                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000008E15                 test    r12b, r12b
.text:0000000000008E18                 jz      short loc_8DD8
.text:0000000000008E1A                 movsx   esi, r12b       ; c
.text:0000000000008E1E                 mov     rdi, r13        ; s
.text:0000000000008E21                 xor     ebp, ebp
.text:0000000000008E23                 call    _strchr
.text:0000000000008E28                 test    rax, rax
.text:0000000000008E2B                 mov     ebx, 1
.text:0000000000008E30                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008E35                 jz      short loc_8DD8
.text:0000000000008E37
.text:0000000000008E37 loc_8E37:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000008E37                 movsx   esi, r12b       ; c
.text:0000000000008E3B                 mov     rdi, r13        ; s
.text:0000000000008E3E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008E43                 call    _strchr
.text:0000000000008E48                 test    rax, rax
.text:0000000000008E4B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008E50                 jz      def_8ED6        ; jumptable 0000000000008ED6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008E56                 lea     eax, [r12-45h]
.text:0000000000008E5B                 cmp     al, 2Fh ; '/'
.text:0000000000008E5D                 ja      short loc_8EB0
.text:0000000000008E5F                 mov     rdx, 814400308945h
.text:0000000000008E69                 bt      rdx, rax
.text:0000000000008E6D                 jnb     short loc_8EB0
.text:0000000000008E6F                 mov     esi, 30h ; '0'  ; c
.text:0000000000008E74                 mov     rdi, r13        ; s
.text:0000000000008E77                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008E7C                 call    _strchr
.text:0000000000008E81                 test    rax, rax
.text:0000000000008E84                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008E89                 jz      short loc_8EB0
.text:0000000000008E8B                 movzx   eax, byte ptr [rcx+1]
.text:0000000000008E8F                 cmp     al, 44h ; 'D'
.text:0000000000008E91                 jz      short loc_8E9F
.text:0000000000008E93                 cmp     al, 69h ; 'i'
.text:0000000000008E95                 jz      loc_9068
.text:0000000000008E9B                 cmp     al, 42h ; 'B'
.text:0000000000008E9D                 jnz     short loc_8EB0
.text:0000000000008E9F
.text:0000000000008E9F loc_8E9F:                               ; CODE XREF: xstrtoumax+191↑j
.text:0000000000008E9F                 mov     edi, 2
.text:0000000000008EA4                 mov     esi, 3E8h
.text:0000000000008EA9                 jmp     short loc_8EBA
.text:0000000000008EA9 ; ---------------------------------------------------------------------------
.text:0000000000008EAB                 align 10h
.text:0000000000008EB0
.text:0000000000008EB0 loc_8EB0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000008EB0                                         ; xstrtoumax+16D↑j ...
.text:0000000000008EB0                 mov     edi, 1
.text:0000000000008EB5                 mov     esi, 400h
.text:0000000000008EBA
.text:0000000000008EBA loc_8EBA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000008EBA                                         ; xstrtoumax+37B↓j
.text:0000000000008EBA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000008EBE                 cmp     r12b, 35h
.text:0000000000008EC2                 ja      short def_8ED6  ; jumptable 0000000000008ED6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008EC4                 lea     rdx, jpt_8ED6
.text:0000000000008ECB                 movzx   r12d, r12b
.text:0000000000008ECF                 movsxd  rax, ds:(jpt_8ED6 - 0BDC8h)[rdx+r12*4]
.text:0000000000008ED3                 add     rax, rdx
.text:0000000000008ED6                 jmp     rax             ; switch jump
.text:0000000000008ED8 ; ---------------------------------------------------------------------------
.text:0000000000008ED8
.text:0000000000008ED8 loc_8ED8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008ED8                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008ED8                 mov     rax, rbx        ; jumptable 0000000000008ED6 cases 77,109
.text:0000000000008EDB                 mul     rsi
.text:0000000000008EDE                 jo      loc_90D1
.text:0000000000008EE4                 xor     r8d, r8d
.text:0000000000008EE7
.text:0000000000008EE7 loc_8EE7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000008EE7                                         ; xstrtoumax+35E↓j ...
.text:0000000000008EE7                 mul     rsi
.text:0000000000008EEA                 jo      loc_90C2
.text:0000000000008EF0                 mov     rbx, rax
.text:0000000000008EF3
.text:0000000000008EF3 loc_8EF3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000008EF3                 or      ebp, r8d
.text:0000000000008EF6                 db      2Eh
.text:0000000000008EF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008F00
.text:0000000000008F00 loc_8F00:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F00                                         ; xstrtoumax+23B↓j ...
.text:0000000000008F00                 movsxd  rdi, edi        ; jumptable 0000000000008ED6 case 99
.text:0000000000008F03                 mov     eax, ebp
.text:0000000000008F05                 add     rcx, rdi
.text:0000000000008F08                 or      eax, 2
.text:0000000000008F0B                 mov     [r15], rcx
.text:0000000000008F0E                 cmp     byte ptr [rcx], 0
.text:0000000000008F11                 mov     [r14], rbx
.text:0000000000008F14                 cmovnz  ebp, eax
.text:0000000000008F17                 jmp     loc_8DDD
.text:0000000000008F1C ; ---------------------------------------------------------------------------
.text:0000000000008F1C
.text:0000000000008F1C def_8ED6:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000008F1C                                         ; xstrtoumax+1C2↑j ...
.text:0000000000008F1C                 mov     [r14], rbx      ; jumptable 0000000000008ED6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008F1F                 or      ebp, 2
.text:0000000000008F22                 jmp     loc_8DDD
.text:0000000000008F27 ; ---------------------------------------------------------------------------
.text:0000000000008F27
.text:0000000000008F27 loc_8F27:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F27                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008F27                 mov     edx, 2          ; jumptable 0000000000008ED6 case 119
.text:0000000000008F2C                 mov     rax, rdx
.text:0000000000008F2F                 mul     rbx
.text:0000000000008F32                 jo      loc_8FCE
.text:0000000000008F38                 add     rbx, rbx
.text:0000000000008F3B                 jmp     short loc_8F00  ; jumptable 0000000000008ED6 case 99
.text:0000000000008F3D ; ---------------------------------------------------------------------------
.text:0000000000008F3D
.text:0000000000008F3D loc_8F3D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F3D                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008F3D                 mov     edx, 200h       ; jumptable 0000000000008ED6 case 98
.text:0000000000008F42                 mov     rax, rdx
.text:0000000000008F45                 mul     rbx
.text:0000000000008F48                 jo      loc_8FCE
.text:0000000000008F4E                 shl     rbx, 9
.text:0000000000008F52                 jmp     short loc_8F00  ; jumptable 0000000000008ED6 case 99
.text:0000000000008F54 ; ---------------------------------------------------------------------------
.text:0000000000008F54
.text:0000000000008F54 loc_8F54:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F54                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008F54                 mov     r8d, 7          ; jumptable 0000000000008ED6 case 90
.text:0000000000008F5A                 xor     r9d, r9d
.text:0000000000008F5D                 nop     dword ptr [rax]
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008F60                 mov     rax, rbx
.text:0000000000008F63                 mul     rsi
.text:0000000000008F66                 mov     rbx, rax
.text:0000000000008F69                 jo      loc_90FE
.text:0000000000008F6F
.text:0000000000008F6F loc_8F6F:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000008F6F                 sub     r8d, 1
.text:0000000000008F73                 jnz     short loc_8F60
.text:0000000000008F75
.text:0000000000008F75 loc_8F75:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008F75                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008F75                 or      ebp, r9d
.text:0000000000008F78                 jmp     short loc_8F00  ; jumptable 0000000000008ED6 case 99
.text:0000000000008F7A ; ---------------------------------------------------------------------------
.text:0000000000008F7A
.text:0000000000008F7A loc_8F7A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F7A                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008F7A                 mov     r8d, 8          ; jumptable 0000000000008ED6 case 89
.text:0000000000008F80                 xor     r9d, r9d
.text:0000000000008F83                 nop     dword ptr [rax+rax+00h]
.text:0000000000008F88
.text:0000000000008F88 loc_8F88:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000008F88                 mov     rax, rbx
.text:0000000000008F8B                 mul     rsi
.text:0000000000008F8E                 mov     rbx, rax
.text:0000000000008F91                 jo      loc_90E0
.text:0000000000008F97
.text:0000000000008F97 loc_8F97:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000008F97                 sub     r8d, 1
.text:0000000000008F9B                 jnz     short loc_8F88
.text:0000000000008F9D                 jmp     short loc_8F75
.text:0000000000008F9F ; ---------------------------------------------------------------------------
.text:0000000000008F9F
.text:0000000000008F9F loc_8F9F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008F9F                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008F9F                 mov     r8d, 4          ; jumptable 0000000000008ED6 cases 84,116
.text:0000000000008FA5                 xor     r9d, r9d
.text:0000000000008FA8
.text:0000000000008FA8 loc_8FA8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000008FA8                 mov     rax, rbx
.text:0000000000008FAB                 mul     rsi
.text:0000000000008FAE                 mov     rbx, rax
.text:0000000000008FB1                 jo      loc_90B3
.text:0000000000008FB7
.text:0000000000008FB7 loc_8FB7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000008FB7                 sub     r8d, 1
.text:0000000000008FBB                 jnz     short loc_8FA8
.text:0000000000008FBD                 jmp     short loc_8F75
.text:0000000000008FBF ; ---------------------------------------------------------------------------
.text:0000000000008FBF
.text:0000000000008FBF loc_8FBF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008FBF                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008FBF                 mov     rax, rbx        ; jumptable 0000000000008ED6 cases 75,107
.text:0000000000008FC2                 mul     rsi
.text:0000000000008FC5                 mov     rbx, rax
.text:0000000000008FC8                 jno     loc_8F00        ; jumptable 0000000000008ED6 case 99
.text:0000000000008FCE
.text:0000000000008FCE loc_8FCE:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000008FCE                                         ; xstrtoumax+248↑j ...
.text:0000000000008FCE                 mov     ebp, 1
.text:0000000000008FD3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008FD7                 jmp     loc_8F00        ; jumptable 0000000000008ED6 case 99
.text:0000000000008FD7 ; ---------------------------------------------------------------------------
.text:0000000000008FDC                 align 20h
.text:0000000000008FE0
.text:0000000000008FE0 loc_8FE0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008FE0                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000008FE0                 mov     r8d, 5          ; jumptable 0000000000008ED6 case 80
.text:0000000000008FE6                 xor     r9d, r9d
.text:0000000000008FE9
.text:0000000000008FE9 loc_8FE9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000008FE9                 mov     rax, rbx
.text:0000000000008FEC                 mul     rsi
.text:0000000000008FEF                 mov     rbx, rax
.text:0000000000008FF2                 jo      loc_90EF
.text:0000000000008FF8
.text:0000000000008FF8 loc_8FF8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000008FF8                 sub     r8d, 1
.text:0000000000008FFC                 jnz     short loc_8FE9
.text:0000000000008FFE                 jmp     loc_8F75
.text:0000000000009003 ; ---------------------------------------------------------------------------
.text:0000000000009003
.text:0000000000009003 loc_9003:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009003                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000009003                 mov     r8d, 6          ; jumptable 0000000000008ED6 case 69
.text:0000000000009009                 xor     r9d, r9d
.text:000000000000900C
.text:000000000000900C loc_900C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000900C                 mov     rax, rbx
.text:000000000000900F                 mul     rsi
.text:0000000000009012                 mov     rbx, rax
.text:0000000000009015                 jo      loc_90A4
.text:000000000000901B
.text:000000000000901B loc_901B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000901B                 sub     r8d, 1
.text:000000000000901F                 jnz     short loc_900C
.text:0000000000009021                 jmp     loc_8F75
.text:0000000000009026 ; ---------------------------------------------------------------------------
.text:0000000000009026
.text:0000000000009026 loc_9026:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000009026                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:0000000000009026                 mov     edx, 400h       ; jumptable 0000000000008ED6 case 66
.text:000000000000902B                 mov     rax, rdx
.text:000000000000902E                 mul     rbx
.text:0000000000009031                 jo      short loc_8FCE
.text:0000000000009033                 shl     rbx, 0Ah
.text:0000000000009037                 jmp     loc_8F00        ; jumptable 0000000000008ED6 case 99
.text:000000000000903C ; ---------------------------------------------------------------------------
.text:000000000000903C
.text:000000000000903C loc_903C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000903C                                         ; DATA XREF: .rodata:jpt_8ED6↓o
.text:000000000000903C                 mov     rax, rbx        ; jumptable 0000000000008ED6 cases 71,103
.text:000000000000903F                 mul     rsi
.text:0000000000009042                 jo      loc_910D
.text:0000000000009048                 xor     r8d, r8d
.text:000000000000904B
.text:000000000000904B loc_904B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000904B                 mul     rsi
.text:000000000000904E                 jno     loc_8EE7
.text:0000000000009054                 mov     r8d, 1
.text:000000000000905A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000905E                 jmp     loc_8EE7
.text:000000000000905E ; ---------------------------------------------------------------------------
.text:0000000000009063                 align 8
.text:0000000000009068
.text:0000000000009068 loc_9068:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000009068                 xor     edi, edi
.text:000000000000906A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000906E                 mov     esi, 400h
.text:0000000000009073                 setz    dil
.text:0000000000009077                 lea     edi, [rdi+rdi+1]
.text:000000000000907B                 jmp     loc_8EBA
.text:0000000000009080 ; ---------------------------------------------------------------------------
.text:0000000000009080
.text:0000000000009080 loc_9080:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000009080                 call    ___stack_chk_fail
.text:0000000000009085 ; ---------------------------------------------------------------------------
.text:0000000000009085
.text:0000000000009085 loc_9085:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000009085                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:000000000000908C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000009093                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000909A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000909F                 call    ___assert_fail
.text:00000000000090A4 ; ---------------------------------------------------------------------------
.text:00000000000090A4
.text:00000000000090A4 loc_90A4:                               ; CODE XREF: xstrtoumax+315↑j
.text:00000000000090A4                 mov     r9d, 1
.text:00000000000090AA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090AE                 jmp     loc_901B
.text:00000000000090B3 ; ---------------------------------------------------------------------------
.text:00000000000090B3
.text:00000000000090B3 loc_90B3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:00000000000090B3                 mov     r9d, 1
.text:00000000000090B9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090BD                 jmp     loc_8FB7
.text:00000000000090C2 ; ---------------------------------------------------------------------------
.text:00000000000090C2
.text:00000000000090C2 loc_90C2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000090C2                 mov     r8d, 1
.text:00000000000090C8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090CC                 jmp     loc_8EF3
.text:00000000000090D1 ; ---------------------------------------------------------------------------
.text:00000000000090D1
.text:00000000000090D1 loc_90D1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:00000000000090D1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000090D5                 mov     r8d, 1
.text:00000000000090DB                 jmp     loc_8EE7
.text:00000000000090E0 ; ---------------------------------------------------------------------------
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: xstrtoumax+291↑j
.text:00000000000090E0                 mov     r9d, 1
.text:00000000000090E6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090EA                 jmp     loc_8F97
.text:00000000000090EF ; ---------------------------------------------------------------------------
.text:00000000000090EF
.text:00000000000090EF loc_90EF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:00000000000090EF                 mov     r9d, 1
.text:00000000000090F5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090F9                 jmp     loc_8FF8
.text:00000000000090FE ; ---------------------------------------------------------------------------
.text:00000000000090FE
.text:00000000000090FE loc_90FE:                               ; CODE XREF: xstrtoumax+269↑j
.text:00000000000090FE                 mov     r9d, 1
.text:0000000000009104                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009108                 jmp     loc_8F6F
.text:000000000000910D ; ---------------------------------------------------------------------------
.text:000000000000910D
.text:000000000000910D loc_910D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000910D                 mov     r8d, 1
.text:0000000000009113                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009117                 jmp     loc_904B
.text:0000000000009117 ; } // starts at 8D00
.text:0000000000009117 xstrtoumax      endp
.text:0000000000009117
.text:0000000000009117 ; ---------------------------------------------------------------------------
.text:000000000000911C                 align 20h
.text:0000000000009120
.text:0000000000009120 ; =============== S U B R O U T I N E =======================================
.text:0000000000009120
.text:0000000000009120 ; Attributes: info_from_lumina
.text:0000000000009120
.text:0000000000009120 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000009120                 public rpl_mbrtowc
.text:0000000000009120 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000009120
.text:0000000000009120 pwc             = dword ptr -34h
.text:0000000000009120 var_30          = qword ptr -30h
.text:0000000000009120
.text:0000000000009120 ; __unwind {
.text:0000000000009120                 push    r13
.text:0000000000009122                 push    r12
.text:0000000000009124                 mov     r13, rsi
.text:0000000000009127                 push    rbp
.text:0000000000009128                 push    rbx
.text:0000000000009129                 mov     rbx, rdi
.text:000000000000912C                 mov     r12, rdx
.text:000000000000912F                 sub     rsp, 18h
.text:0000000000009133                 mov     rax, fs:28h
.text:000000000000913C                 mov     [rsp+38h+var_30], rax
.text:0000000000009141                 xor     eax, eax
.text:0000000000009143                 lea     rax, [rsp+38h+pwc]
.text:0000000000009148                 test    rdi, rdi
.text:000000000000914B                 cmovz   rbx, rax
.text:000000000000914F                 mov     rdi, rbx        ; pwc
.text:0000000000009152                 call    _mbrtowc
.text:0000000000009157                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000915B                 mov     rbp, rax
.text:000000000000915E                 jbe     short loc_9180
.text:0000000000009160                 test    r12, r12
.text:0000000000009163                 jz      short loc_9180
.text:0000000000009165                 xor     edi, edi
.text:0000000000009167                 call    hard_locale
.text:000000000000916C                 test    al, al
.text:000000000000916E                 jnz     short loc_9180
.text:0000000000009170                 movzx   eax, byte ptr [r13+0]
.text:0000000000009175                 mov     ebp, 1
.text:000000000000917A                 mov     [rbx], eax
.text:000000000000917C                 nop     dword ptr [rax+00h]
.text:0000000000009180
.text:0000000000009180 loc_9180:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000009180                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000009180                 mov     rdx, [rsp+38h+var_30]
.text:0000000000009185                 xor     rdx, fs:28h
.text:000000000000918E                 mov     rax, rbp
.text:0000000000009191                 jnz     short loc_919E
.text:0000000000009193                 add     rsp, 18h
.text:0000000000009197                 pop     rbx
.text:0000000000009198                 pop     rbp
.text:0000000000009199                 pop     r12
.text:000000000000919B                 pop     r13
.text:000000000000919D                 retn
.text:000000000000919E ; ---------------------------------------------------------------------------
.text:000000000000919E
.text:000000000000919E loc_919E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000919E                 call    ___stack_chk_fail
.text:000000000000919E ; } // starts at 9120
.text:000000000000919E rpl_mbrtowc     endp
.text:000000000000919E
.text:000000000000919E ; ---------------------------------------------------------------------------
.text:00000000000091A3                 align 10h
.text:00000000000091B0
.text:00000000000091B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091B0
.text:00000000000091B0 ; Attributes: info_from_lumina
.text:00000000000091B0
.text:00000000000091B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000091B0                 public close_stream
.text:00000000000091B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000091B0                                         ; close_stdout+33↑p
.text:00000000000091B0 ; __unwind {
.text:00000000000091B0                 push    r12
.text:00000000000091B2                 push    rbp
.text:00000000000091B3                 mov     rbp, rdi
.text:00000000000091B6                 push    rbx
.text:00000000000091B7                 call    ___fpending
.text:00000000000091BC                 mov     ebx, [rbp+0]
.text:00000000000091BF                 mov     rdi, rbp        ; stream
.text:00000000000091C2                 mov     r12, rax
.text:00000000000091C5                 call    rpl_fclose
.text:00000000000091CA                 and     ebx, 20h
.text:00000000000091CD                 test    ebx, ebx
.text:00000000000091CF                 jnz     short loc_91E8
.text:00000000000091D1                 test    eax, eax
.text:00000000000091D3                 jz      short loc_91DF
.text:00000000000091D5                 test    r12, r12
.text:00000000000091D8                 mov     eax, 0FFFFFFFFh
.text:00000000000091DD                 jz      short loc_9218
.text:00000000000091DF
.text:00000000000091DF loc_91DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000091DF                 pop     rbx
.text:00000000000091E0                 pop     rbp
.text:00000000000091E1                 pop     r12
.text:00000000000091E3                 retn
.text:00000000000091E3 ; ---------------------------------------------------------------------------
.text:00000000000091E4                 align 8
.text:00000000000091E8
.text:00000000000091E8 loc_91E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000091E8                 test    eax, eax
.text:00000000000091EA                 jnz     short loc_9208
.text:00000000000091EC                 call    ___errno_location
.text:00000000000091F1                 mov     dword ptr [rax], 0
.text:00000000000091F7                 mov     eax, 0FFFFFFFFh
.text:00000000000091FC                 pop     rbx
.text:00000000000091FD                 pop     rbp
.text:00000000000091FE                 pop     r12
.text:0000000000009200                 retn
.text:0000000000009200 ; ---------------------------------------------------------------------------
.text:0000000000009201                 align 8
.text:0000000000009208
.text:0000000000009208 loc_9208:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000009208                 pop     rbx
.text:0000000000009209                 mov     eax, 0FFFFFFFFh
.text:000000000000920E                 pop     rbp
.text:000000000000920F                 pop     r12
.text:0000000000009211                 retn
.text:0000000000009211 ; ---------------------------------------------------------------------------
.text:0000000000009212                 align 8
.text:0000000000009218
.text:0000000000009218 loc_9218:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000009218                 call    ___errno_location
.text:000000000000921D                 cmp     dword ptr [rax], 9
.text:0000000000009220                 pop     rbx
.text:0000000000009221                 pop     rbp
.text:0000000000009222                 pop     r12
.text:0000000000009224                 setnz   al
.text:0000000000009227                 movzx   eax, al
.text:000000000000922A                 neg     eax
.text:000000000000922C                 retn
.text:000000000000922C ; } // starts at 91B0
.text:000000000000922C close_stream    endp
.text:000000000000922C
.text:000000000000922C ; ---------------------------------------------------------------------------
.text:000000000000922D                 align 10h
.text:0000000000009230
.text:0000000000009230 ; =============== S U B R O U T I N E =======================================
.text:0000000000009230
.text:0000000000009230
.text:0000000000009230                 public hard_locale
.text:0000000000009230 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000009230 ; __unwind {
.text:0000000000009230                 sub     rsp, 8
.text:0000000000009234                 xor     esi, esi        ; locale
.text:0000000000009236                 call    _setlocale
.text:000000000000923B                 mov     rdx, rax
.text:000000000000923E                 mov     eax, 1
.text:0000000000009243                 test    rdx, rdx
.text:0000000000009246                 jz      short loc_9265
.text:0000000000009248                 lea     rdi, aC         ; "C"
.text:000000000000924F                 mov     ecx, 2
.text:0000000000009254                 mov     rsi, rdx
.text:0000000000009257                 repe cmpsb
.text:0000000000009259                 setnbe  cl
.text:000000000000925C                 sbb     cl, 0
.text:000000000000925F                 xor     eax, eax
.text:0000000000009261                 test    cl, cl
.text:0000000000009263                 jnz     short loc_9270
.text:0000000000009265
.text:0000000000009265 loc_9265:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000009265                 add     rsp, 8
.text:0000000000009269                 retn
.text:0000000000009269 ; ---------------------------------------------------------------------------
.text:000000000000926A                 align 10h
.text:0000000000009270
.text:0000000000009270 loc_9270:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000009270                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000009277                 mov     ecx, 6
.text:000000000000927C                 mov     rsi, rdx
.text:000000000000927F                 repe cmpsb
.text:0000000000009281                 setnbe  al
.text:0000000000009284                 sbb     al, 0
.text:0000000000009286                 test    al, al
.text:0000000000009288                 setnz   al
.text:000000000000928B                 add     rsp, 8
.text:000000000000928F                 retn
.text:000000000000928F ; } // starts at 9230
.text:000000000000928F hard_locale     endp
.text:000000000000928F
.text:0000000000009290
.text:0000000000009290 ; =============== S U B R O U T I N E =======================================
.text:0000000000009290
.text:0000000000009290
.text:0000000000009290                 public locale_charset
.text:0000000000009290 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009290 ; __unwind {
.text:0000000000009290                 sub     rsp, 8
.text:0000000000009294                 mov     edi, 0Eh        ; item
.text:0000000000009299                 call    _nl_langinfo
.text:000000000000929E                 test    rax, rax
.text:00000000000092A1                 jz      short loc_92C0
.text:00000000000092A3                 cmp     byte ptr [rax], 0
.text:00000000000092A6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000092AD                 cmovz   rax, rdx
.text:00000000000092B1                 add     rsp, 8
.text:00000000000092B5                 retn
.text:00000000000092B5 ; ---------------------------------------------------------------------------
.text:00000000000092B6                 align 20h
.text:00000000000092C0
.text:00000000000092C0 loc_92C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000092C0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000092C7                 add     rsp, 8
.text:00000000000092CB                 retn
.text:00000000000092CB ; } // starts at 9290
.text:00000000000092CB locale_charset  endp
.text:00000000000092CB
.text:00000000000092CB ; ---------------------------------------------------------------------------
.text:00000000000092CC                 align 10h
.text:00000000000092D0
.text:00000000000092D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092D0
.text:00000000000092D0 ; Attributes: info_from_lumina
.text:00000000000092D0
.text:00000000000092D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000092D0                 public rpl_fclose
.text:00000000000092D0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000092D0 ; __unwind {
.text:00000000000092D0                 push    r12
.text:00000000000092D2                 push    rbp
.text:00000000000092D3                 push    rbx
.text:00000000000092D4                 mov     rbx, rdi
.text:00000000000092D7                 call    _fileno
.text:00000000000092DC                 test    eax, eax
.text:00000000000092DE                 mov     rdi, rbx        ; fp
.text:00000000000092E1                 js      short loc_9337
.text:00000000000092E3                 call    ___freading
.text:00000000000092E8                 test    eax, eax
.text:00000000000092EA                 jnz     short loc_9318
.text:00000000000092EC
.text:00000000000092EC loc_92EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000092EC                 mov     rdi, rbx        ; stream
.text:00000000000092EF                 call    rpl_fflush
.text:00000000000092F4                 test    eax, eax
.text:00000000000092F6                 jz      short loc_9334
.text:00000000000092F8                 call    ___errno_location
.text:00000000000092FD                 mov     r12d, [rax]
.text:0000000000009300                 mov     rdi, rbx        ; stream
.text:0000000000009303                 mov     rbp, rax
.text:0000000000009306                 call    _fclose
.text:000000000000930B                 test    r12d, r12d
.text:000000000000930E                 jnz     short loc_9340
.text:0000000000009310
.text:0000000000009310 loc_9310:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000009310                 pop     rbx
.text:0000000000009311                 pop     rbp
.text:0000000000009312                 pop     r12
.text:0000000000009314                 retn
.text:0000000000009314 ; ---------------------------------------------------------------------------
.text:0000000000009315                 align 8
.text:0000000000009318
.text:0000000000009318 loc_9318:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000009318                 mov     rdi, rbx        ; stream
.text:000000000000931B                 call    _fileno
.text:0000000000009320                 xor     esi, esi        ; offset
.text:0000000000009322                 mov     edx, 1          ; whence
.text:0000000000009327                 mov     edi, eax        ; fd
.text:0000000000009329                 call    _lseek
.text:000000000000932E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009332                 jnz     short loc_92EC
.text:0000000000009334
.text:0000000000009334 loc_9334:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000009334                 mov     rdi, rbx        ; stream
.text:0000000000009337
.text:0000000000009337 loc_9337:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000009337                 pop     rbx
.text:0000000000009338                 pop     rbp
.text:0000000000009339                 pop     r12
.text:000000000000933B                 jmp     _fclose
.text:0000000000009340 ; ---------------------------------------------------------------------------
.text:0000000000009340
.text:0000000000009340 loc_9340:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000009340                 mov     [rbp+0], r12d
.text:0000000000009344                 mov     eax, 0FFFFFFFFh
.text:0000000000009349                 jmp     short loc_9310
.text:0000000000009349 ; } // starts at 92D0
.text:0000000000009349 rpl_fclose      endp
.text:0000000000009349
.text:0000000000009349 ; ---------------------------------------------------------------------------
.text:000000000000934B                 align 10h
.text:0000000000009350
.text:0000000000009350 ; =============== S U B R O U T I N E =======================================
.text:0000000000009350
.text:0000000000009350 ; Attributes: info_from_lumina
.text:0000000000009350
.text:0000000000009350 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009350                 public rpl_fflush
.text:0000000000009350 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000009350 ; __unwind {
.text:0000000000009350                 test    rdi, rdi
.text:0000000000009353                 push    rbx
.text:0000000000009354                 mov     rbx, rdi
.text:0000000000009357                 jz      short loc_936A
.text:0000000000009359                 call    ___freading
.text:000000000000935E                 test    eax, eax
.text:0000000000009360                 jz      short loc_936A
.text:0000000000009362                 test    dword ptr [rbx], 100h
.text:0000000000009368                 jnz     short loc_9378
.text:000000000000936A
.text:000000000000936A loc_936A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000936A                                         ; rpl_fflush+10↑j
.text:000000000000936A                 mov     rdi, rbx        ; stream
.text:000000000000936D                 pop     rbx
.text:000000000000936E                 jmp     _fflush
.text:000000000000936E ; ---------------------------------------------------------------------------
.text:0000000000009373                 align 8
.text:0000000000009378
.text:0000000000009378 loc_9378:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000009378                 mov     rdi, rbx
.text:000000000000937B                 mov     edx, 1
.text:0000000000009380                 xor     esi, esi
.text:0000000000009382                 call    rpl_fseeko
.text:0000000000009387                 mov     rdi, rbx        ; stream
.text:000000000000938A                 pop     rbx
.text:000000000000938B                 jmp     _fflush
.text:000000000000938B ; } // starts at 9350
.text:000000000000938B rpl_fflush      endp
.text:000000000000938B
.text:0000000000009390
.text:0000000000009390 ; =============== S U B R O U T I N E =======================================
.text:0000000000009390
.text:0000000000009390 ; Attributes: info_from_lumina
.text:0000000000009390
.text:0000000000009390 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000009390                 public rpl_fseeko
.text:0000000000009390 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000009390 ; __unwind {
.text:0000000000009390                 mov     rax, [rdi+8]
.text:0000000000009394                 cmp     [rdi+10h], rax
.text:0000000000009398                 jz      short loc_93A0
.text:000000000000939A
.text:000000000000939A loc_939A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000939A                                         ; rpl_fseeko+1F↓j
.text:000000000000939A                 jmp     _fseeko
.text:000000000000939A ; ---------------------------------------------------------------------------
.text:000000000000939F                 align 20h
.text:00000000000093A0
.text:00000000000093A0 loc_93A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000093A0                 mov     rax, [rdi+20h]
.text:00000000000093A4                 cmp     [rdi+28h], rax
.text:00000000000093A8                 jnz     short loc_939A
.text:00000000000093AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000093AF                 jnz     short loc_939A
.text:00000000000093B1                 push    r12
.text:00000000000093B3                 push    rbp
.text:00000000000093B4                 mov     r12d, edx
.text:00000000000093B7                 push    rbx
.text:00000000000093B8                 mov     rbp, rsi
.text:00000000000093BB                 mov     rbx, rdi
.text:00000000000093BE                 call    _fileno
.text:00000000000093C3                 mov     edx, r12d       ; whence
.text:00000000000093C6                 mov     rsi, rbp        ; offset
.text:00000000000093C9                 mov     edi, eax        ; fd
.text:00000000000093CB                 call    _lseek
.text:00000000000093D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000093D4                 jz      short loc_93E2
.text:00000000000093D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000093D9                 mov     [rbx+90h], rax
.text:00000000000093E0                 xor     eax, eax
.text:00000000000093E2
.text:00000000000093E2 loc_93E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000093E2                 pop     rbx
.text:00000000000093E3                 pop     rbp
.text:00000000000093E4                 pop     r12
.text:00000000000093E6                 retn
.text:00000000000093E6 ; } // starts at 9390
.text:00000000000093E6 rpl_fseeko      endp
.text:00000000000093E6
.text:00000000000093E6 ; ---------------------------------------------------------------------------
.text:00000000000093E7                 align 10h
.text:00000000000093F0
.text:00000000000093F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093F0
.text:00000000000093F0 ; Attributes: info_from_lumina
.text:00000000000093F0
.text:00000000000093F0 ; void _libc_csu_init(void)
.text:00000000000093F0                 public __libc_csu_init
.text:00000000000093F0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000093F0 ; __unwind {
.text:00000000000093F0                 push    r15
.text:00000000000093F2                 push    r14
.text:00000000000093F4                 mov     r15, rdx
.text:00000000000093F7                 push    r13
.text:00000000000093F9                 push    r12
.text:00000000000093FB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000009402                 push    rbp
.text:0000000000009403                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000940A                 push    rbx
.text:000000000000940B                 mov     r13d, edi
.text:000000000000940E                 mov     r14, rsi
.text:0000000000009411                 sub     rbp, r12
.text:0000000000009414                 sub     rsp, 8
.text:0000000000009418                 sar     rbp, 3
.text:000000000000941C                 call    _init_proc
.text:0000000000009421                 test    rbp, rbp
.text:0000000000009424                 jz      short loc_9446
.text:0000000000009426                 xor     ebx, ebx
.text:0000000000009428                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009430
.text:0000000000009430 loc_9430:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000009430                 mov     rdx, r15
.text:0000000000009433                 mov     rsi, r14
.text:0000000000009436                 mov     edi, r13d
.text:0000000000009439                 call    ds:(__frame_dummy_init_array_entry - 20D830h)[r12+rbx*8]
.text:000000000000943D                 add     rbx, 1
.text:0000000000009441                 cmp     rbp, rbx
.text:0000000000009444                 jnz     short loc_9430
.text:0000000000009446
.text:0000000000009446 loc_9446:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000009446                 add     rsp, 8
.text:000000000000944A                 pop     rbx
.text:000000000000944B                 pop     rbp
.text:000000000000944C                 pop     r12
.text:000000000000944E                 pop     r13
.text:0000000000009450                 pop     r14
.text:0000000000009452                 pop     r15
.text:0000000000009454                 retn
.text:0000000000009454 ; } // starts at 93F0
.text:0000000000009454 __libc_csu_init endp
.text:0000000000009454
.text:0000000000009454 ; ---------------------------------------------------------------------------
.text:0000000000009455                 align 20h
.text:0000000000009460
.text:0000000000009460 ; =============== S U B R O U T I N E =======================================
.text:0000000000009460
.text:0000000000009460
.text:0000000000009460 ; void _libc_csu_fini(void)
.text:0000000000009460                 public __libc_csu_fini
.text:0000000000009460 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000009460 ; __unwind {
.text:0000000000009460                 rep retn
.text:0000000000009460 ; } // starts at 9460
.text:0000000000009460 __libc_csu_fini endp
.text:0000000000009460
.text:0000000000009460 ; ---------------------------------------------------------------------------
.text:0000000000009462                 align 10h
.text:0000000000009470
.text:0000000000009470 ; =============== S U B R O U T I N E =======================================
.text:0000000000009470
.text:0000000000009470
.text:0000000000009470 atexit          proc near               ; CODE XREF: main+A1↑p
.text:0000000000009470 ; __unwind {
.text:0000000000009470                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000009477                 xor     esi, esi        ; obj
.text:0000000000009479                 jmp     ___cxa_atexit
.text:0000000000009479 ; } // starts at 9470
.text:0000000000009479 atexit          endp
.text:0000000000009479
.text:0000000000009479 _text           ends
.text:0000000000009479
LOAD:000000000000947E ; ===========================================================================
LOAD:000000000000947E
LOAD:000000000000947E ; Segment type: Pure code
LOAD:000000000000947E ; Segment permissions: Read/Execute
LOAD:000000000000947E LOAD            segment byte public 'CODE' use64
LOAD:000000000000947E                 assume cs:LOAD
LOAD:000000000000947E                 ;org 947Eh
LOAD:000000000000947E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000947E                 align 20h
LOAD:000000000000947E LOAD            ends
LOAD:000000000000947E
.fini:0000000000009480 ; ===========================================================================
.fini:0000000000009480
.fini:0000000000009480 ; Segment type: Pure code
.fini:0000000000009480 ; Segment permissions: Read/Execute
.fini:0000000000009480 _fini           segment dword public 'CODE' use64
.fini:0000000000009480                 assume cs:_fini
.fini:0000000000009480                 ;org 9480h
.fini:0000000000009480                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000009480
.fini:0000000000009480 ; =============== S U B R O U T I N E =======================================
.fini:0000000000009480
.fini:0000000000009480
.fini:0000000000009480                 public _term_proc
.fini:0000000000009480 _term_proc      proc near
.fini:0000000000009480                 sub     rsp, 8          ; _fini
.fini:0000000000009484                 add     rsp, 8
.fini:0000000000009488                 retn
.fini:0000000000009488 _term_proc      endp
.fini:0000000000009488
.fini:0000000000009488 _fini           ends
.fini:0000000000009488
LOAD:0000000000009489 ; ===========================================================================
LOAD:0000000000009489
LOAD:0000000000009489 ; Segment type: Pure code
LOAD:0000000000009489 ; Segment permissions: Read/Execute
LOAD:0000000000009489 LOAD            segment byte public 'CODE' use64
LOAD:0000000000009489                 assume cs:LOAD
LOAD:0000000000009489                 ;org 9489h
LOAD:0000000000009489                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009489                 align 20h
LOAD:0000000000009489 LOAD            ends
LOAD:0000000000009489
.rodata:00000000000094A0 ; ===========================================================================
.rodata:00000000000094A0
.rodata:00000000000094A0 ; Segment type: Pure data
.rodata:00000000000094A0 ; Segment permissions: Read
.rodata:00000000000094A0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000094A0                 assume cs:_rodata
.rodata:00000000000094A0                 ;org 94A0h
.rodata:00000000000094A0                 public _IO_stdin_used
.rodata:00000000000094A0 _IO_stdin_used  db    1
.rodata:00000000000094A1                 db    0
.rodata:00000000000094A2                 db    2
.rodata:00000000000094A3                 db    0
.rodata:00000000000094A4 ; const char s[]
.rodata:00000000000094A4 s               db 'KMGTPEZY',0         ; DATA XREF: unit_to_umax:loc_2E11↑o
.rodata:00000000000094A4                                         ; unit_to_umax+122↑o ...
.rodata:00000000000094AD aKmgtpezy0      db 'KMGTPEZY0',0        ; DATA XREF: unit_to_umax+EC↑o
.rodata:00000000000094B7 ; const char aInvalidUnitSiz[]
.rodata:00000000000094B7 aInvalidUnitSiz db 'invalid unit size: %s',0
.rodata:00000000000094B7                                         ; DATA XREF: unit_to_umax+141↑o
.rodata:00000000000094CD aInvalidNumberS db 'invalid number: %s',0
.rodata:00000000000094CD                                         ; DATA XREF: process_field+868↑o
.rodata:00000000000094E0 aInvalidSuffixI db 'invalid suffix in input: %s',0
.rodata:00000000000094E0                                         ; DATA XREF: process_field+38C↑o
.rodata:00000000000094E0                                         ; process_field+12C7↑o
.rodata:00000000000094FC aError_0        db '(error)',0          ; DATA XREF: process_field+1607↑o
.rodata:0000000000009504 aKmgtpez:                               ; DATA XREF: process_field+FEC↑o
.rodata:0000000000009504                                         ; process_field+1166↑o ...
.rodata:0000000000009504                 text "UTF-16LE", 'KMGTPEZ'
.rodata:0000000000009512 aTrimmingSuffix db 'trimming suffix %s',0Ah,0
.rodata:0000000000009512                                         ; DATA XREF: process_field+913↑o
.rodata:0000000000009526 aNoValidSuffixF db 'no valid suffix found',0Ah,0
.rodata:0000000000009526                                         ; DATA XREF: process_field+7CF↑o
.rodata:000000000000953D aSuffixPowerDDL db '  suffix power=%d^%d = %Lf',0Ah,0
.rodata:000000000000953D                                         ; DATA XREF: process_field+CEB↑o
.rodata:0000000000009559 aReturningValue db '  returning value: %Lf (%LG)',0Ah,0
.rodata:0000000000009559                                         ; DATA XREF: process_field+D3B↑o
.rodata:0000000000009577 a0Ld            db '0%ld',0             ; DATA XREF: process_field+133F↑o
.rodata:000000000000957C aDoubleToHuman  db 'double_to_human:',0Ah,0
.rodata:000000000000957C                                         ; DATA XREF: process_field+1315↑o
.rodata:000000000000958E aReturningValue_0 db '  returning value: %s',0Ah,0
.rodata:000000000000958E                                         ; DATA XREF: process_field+146D↑o
.rodata:00000000000095A5 aAfterPaddingS  db '  After padding: %s',0Ah,0
.rodata:00000000000095A5                                         ; DATA XREF: process_field+150B↑o
.rodata:00000000000095BA aNumfmt         db 'numfmt',0           ; DATA XREF: main+254↑o
.rodata:00000000000095BA                                         ; usage+4C9↑o ...
.rodata:00000000000095C1 ; const char aUnitOptions[]
.rodata:00000000000095C1 aUnitOptions    db 0Ah                  ; DATA XREF: usage+343↑o
.rodata:00000000000095C1                 db 'UNIT options:',0Ah,0
.rodata:00000000000095D1 asc_95D1        db '[',0                ; DATA XREF: usage+4D5↑o
.rodata:00000000000095D3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+500↑o
.rodata:00000000000095E3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000095E3                                         ; DATA XREF: usage+530↑o
.rodata:00000000000095E3                                         ; usage+634↑o ...
.rodata:00000000000095F9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+544↑o
.rodata:0000000000009603 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+550↑o
.rodata:0000000000009612 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+4DC↑o
.rodata:000000000000961C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+50C↑o
.rodata:0000000000009626 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+524↑o
.rodata:0000000000009630 ; const char aSOnlineHelpS[]
.rodata:0000000000009630 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+5A2↑o
.rodata:0000000000009630                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000009647 unk_9647        db  47h ; G             ; DATA XREF: main+24D↑o
.rodata:0000000000009647                                         ; usage+5BE↑o ...
.rodata:0000000000009648                 db  4Eh ; N
.rodata:0000000000009649                 db  55h ; U
.rodata:000000000000964A                 db  20h
.rodata:000000000000964B ; const char domainname[]
.rodata:000000000000964B domainname      db 'coreutils',0        ; DATA XREF: main+43↑o
.rodata:000000000000964B                                         ; main+52↑o ...
.rodata:0000000000009655 ; const char s2[]
.rodata:0000000000009655 s2              db 'en_',0              ; DATA XREF: usage+5E5↑o
.rodata:0000000000009655                                         ; usage+6A6↑o
.rodata:0000000000009659 ; const char aFullDocumentat[]
.rodata:0000000000009659 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009659                                         ; DATA XREF: usage:loc_4F41↑o
.rodata:0000000000009659                                         ; usage:loc_4FFE↑o
.rodata:0000000000009674 aLeft           db 'Left',0             ; DATA XREF: main+645↑o
.rodata:0000000000009679 aRight          db 'Right',0            ; DATA XREF: main+62F↑o
.rodata:000000000000967F aYes            db 'yes',0              ; DATA XREF: main+668↑o
.rodata:0000000000009683 aNo             db 'no',0               ; DATA XREF: main+653↑o
.rodata:0000000000009686 ; const char dirname[]
.rodata:0000000000009686 dirname         db '/usr/local/share/locale',0
.rodata:0000000000009686                                         ; DATA XREF: main+3C↑o
.rodata:000000000000969E asc_969E        db '.',0                ; DATA XREF: main:loc_1E89↑o
.rodata:00000000000096A0 ; const char shortopts[]
.rodata:00000000000096A0 shortopts       db 'd:z',0              ; DATA XREF: main:loc_1E00↑o
.rodata:00000000000096A4 aFrom           db '--from',0           ; DATA XREF: main+2A9↑o
.rodata:00000000000096A4                                         ; .data.rel.ro:longopts↓o
.rodata:00000000000096AB aTo             db '--to',0             ; DATA XREF: main+364↑o
.rodata:00000000000096AB                                         ; .data.rel.ro:000000000020D880↓o
.rodata:00000000000096B0 aRound          db '--round',0          ; DATA XREF: main+40C↑o
.rodata:00000000000096B0                                         ; .data.rel.ro:000000000020D8C0↓o
.rodata:00000000000096B8 ; const char aInvalidPadding[]
.rodata:00000000000096B8 aInvalidPadding db 'invalid padding value %s',0
.rodata:00000000000096B8                                         ; DATA XREF: main+CEB↑o
.rodata:00000000000096D1 ; const char aMultipleFieldS[]
.rodata:00000000000096D1 aMultipleFieldS db 'multiple field specifications',0
.rodata:00000000000096D1                                         ; DATA XREF: main:loc_2B6C↑o
.rodata:00000000000096EF ; const char msgid[]
.rodata:00000000000096EF msgid           db 'invalid header value %s',0
.rodata:00000000000096EF                                         ; DATA XREF: main+4A4↑o
.rodata:0000000000009707 aInvalid        db '--invalid',0        ; DATA XREF: main+1DF↑o
.rodata:0000000000009707                                         ; .data.rel.ro:000000000020DA00↓o
.rodata:0000000000009711 aAssafGordon    db 'Assaf Gordon',0     ; DATA XREF: main+246↑o
.rodata:000000000000971E ; const char aFailedToSetLoc[]
.rodata:000000000000971E aFailedToSetLoc db 'failed to set locale',0
.rodata:000000000000971E                                         ; DATA XREF: main:loc_2811↑o
.rodata:000000000000971E                                         ; .data.rel.ro:000000000020DBE0↓o
.rodata:0000000000009733 ; const char aFormatSHasNoDi[]
.rodata:0000000000009733 aFormatSHasNoDi db 'format %s has no %% directive',0
.rodata:0000000000009733                                         ; DATA XREF: main+C51↑o
.rodata:0000000000009751 ; const char accept[]
.rodata:0000000000009751 accept          db ' ',0                ; DATA XREF: main+90C↑o
.rodata:0000000000009753 ; const char aFormatSEndsIn[]
.rodata:0000000000009753 aFormatSEndsIn  db 'format %s ends in %%',0
.rodata:0000000000009753                                         ; DATA XREF: main+CB5↑o
.rodata:0000000000009768 ; const char aErrorReadingIn[]
.rodata:0000000000009768 aErrorReadingIn db 'error reading input',0
.rodata:0000000000009768                                         ; DATA XREF: main+7FA↑o
.rodata:000000000000977C aFromUnit       db 'from-unit',0        ; DATA XREF: .data.rel.ro:000000000020D860↓o
.rodata:0000000000009786 aToUnit         db 'to-unit',0          ; DATA XREF: .data.rel.ro:000000000020D8A0↓o
.rodata:000000000000978E aPadding        db 'padding',0          ; DATA XREF: .data.rel.ro:000000000020D8E0↓o
.rodata:0000000000009796 aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:000000000020D900↓o
.rodata:000000000000979D aGrouping       db 'grouping',0         ; DATA XREF: .data.rel.ro:000000000020D920↓o
.rodata:00000000000097A6 aDelimiter      db 'delimiter',0        ; DATA XREF: .data.rel.ro:000000000020D940↓o
.rodata:00000000000097B0 aField          db 'field',0            ; DATA XREF: .data.rel.ro:000000000020D960↓o
.rodata:00000000000097B6 aDebug          db '-debug',0           ; DATA XREF: .data.rel.ro:000000000020D9A0↓o
.rodata:00000000000097B6                                         ; .data.rel.ro:000000000020D980↓o
.rodata:00000000000097BD aHeader         db 'header',0           ; DATA XREF: .data.rel.ro:000000000020D9C0↓o
.rodata:00000000000097C4 aFormat         db 'format',0           ; DATA XREF: .data.rel.ro:000000000020D9E0↓o
.rodata:00000000000097CB aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:000000000020DA20↓o
.rodata:00000000000097DB aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020DA40↓o
.rodata:00000000000097E0 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020DA60↓o
.rodata:00000000000097E8 aAbort_0        db 'abort',0            ; DATA XREF: .data.rel.ro:inval_args↓o
.rodata:00000000000097EE aFail           db 'fail',0             ; DATA XREF: .data.rel.ro:000000000020DAA8↓o
.rodata:00000000000097F3 aWarn           db 'warn',0             ; DATA XREF: .data.rel.ro:000000000020DAB0↓o
.rodata:00000000000097F8 aIgnore         db 'ignore',0           ; DATA XREF: .data.rel.ro:000000000020DAB8↓o
.rodata:00000000000097FF aUp             db 'up',0               ; DATA XREF: .data.rel.ro:round_args↓o
.rodata:0000000000009802 aDown           db 'down',0             ; DATA XREF: .data.rel.ro:000000000020DAE8↓o
.rodata:0000000000009807 aFromZero       db 'from-zero',0        ; DATA XREF: .data.rel.ro:000000000020DAF0↓o
.rodata:0000000000009811 aTowardsZero    db 'towards-zero',0     ; DATA XREF: .data.rel.ro:000000000020DAF8↓o
.rodata:000000000000981E aNearest        db 'nearest',0          ; DATA XREF: .data.rel.ro:000000000020DB00↓o
.rodata:0000000000009826 aNone           db 'none',0             ; DATA XREF: .data.rel.ro:scale_to_args↓o
.rodata:0000000000009826                                         ; .data.rel.ro:scale_from_args↓o
.rodata:000000000000982B aSi             db 'si',0               ; DATA XREF: .data.rel.ro:000000000020DB28↓o
.rodata:000000000000982B                                         ; .data.rel.ro:000000000020DB70↓o
.rodata:000000000000982E aIec            db 'iec',0              ; DATA XREF: .data.rel.ro:000000000020DB30↓o
.rodata:000000000000982E                                         ; .data.rel.ro:000000000020DB78↓o ...
.rodata:0000000000009832 aIecI           db 'iec-i',0            ; DATA XREF: .data.rel.ro:000000000020DB38↓o
.rodata:0000000000009832                                         ; .data.rel.ro:000000000020DB80↓o ...
.rodata:0000000000009838 aAuto           db 'auto',0             ; DATA XREF: .data.rel.ro:000000000020DB68↓o
.rodata:000000000000983D                 align 20h
.rodata:0000000000009840 ; const char aValueTooLargeT[]
.rodata:0000000000009840 aValueTooLargeT db 'value too large to be converted: %s',0
.rodata:0000000000009840                                         ; DATA XREF: process_field:loc_3200↑o
.rodata:0000000000009864                 align 8
.rodata:0000000000009868 aRejectingSuffi db 'rejecting suffix in input: %s (consider using --from)',0
.rodata:0000000000009868                                         ; DATA XREF: process_field+877↑o
.rodata:0000000000009868                                         ; process_field+D76↑o
.rodata:000000000000989E                 align 20h
.rodata:00000000000098A0 aMissingISuffix db 'missing ',27h,'i',27h,' suffix in input: %s (e.g Ki/Mi/Gi)',0
.rodata:00000000000098A0                                         ; DATA XREF: process_field+39B↑o
.rodata:00000000000098A0                                         ; process_field+D65↑o ...
.rodata:00000000000098CF                 align 10h
.rodata:00000000000098D0 aNoScalingRetur db '  no scaling, returning (grouped) value: %',27h,'.*Lf',0Ah,0
.rodata:00000000000098D0                                         ; DATA XREF: process_field+A1C↑o
.rodata:0000000000009901                 align 8
.rodata:0000000000009908 aNoScalingRetur_0 db '  no scaling, returning value: %.*Lf',0Ah,0
.rodata:0000000000009908                                         ; DATA XREF: process_field+A23↑o
.rodata:000000000000992E                 align 10h
.rodata:0000000000009930 aSettingAutoPad db 'setting Auto-Padding to %ld characters',0Ah,0
.rodata:0000000000009930                                         ; DATA XREF: process_field+236↑o
.rodata:0000000000009958 aSimpleStrtodHu db 'simple_strtod_human:',0Ah
.rodata:0000000000009958                                         ; DATA XREF: process_field+1C9↑o
.rodata:0000000000009958                 db '  input string: %s',0Ah
.rodata:0000000000009958                 db '  locale decimal-point: %s',0Ah
.rodata:0000000000009958                 db '  MAX_UNSCALED_DIGITS: %d',0Ah,0
.rodata:00000000000099B6                 align 8
.rodata:00000000000099B8 aParsedNumericV db '  parsed numeric value: %Lf',0Ah
.rodata:00000000000099B8                                         ; DATA XREF: process_field+83B↑o
.rodata:00000000000099B8                 db '  input precision = %d',0Ah,0
.rodata:00000000000099EC                 align 10h
.rodata:00000000000099F0 aAutoScalingFou db '  Auto-scaling, found ',27h,'i',27h,', switching to base %d',0Ah,0
.rodata:00000000000099F0                                         ; DATA XREF: process_field+161A↑o
.rodata:0000000000009A21                 align 8
.rodata:0000000000009A28 ; const char aInvalidSuffixI_0[]
.rodata:0000000000009A28 aInvalidSuffixI_0 db 'invalid suffix in input %s: %s',0
.rodata:0000000000009A28                                         ; DATA XREF: process_field+738↑o
.rodata:0000000000009A47                 align 8
.rodata:0000000000009A48 ; const char aLargeInputValu[]
.rodata:0000000000009A48 aLargeInputValu db 'large input value %s: possible precision loss',0
.rodata:0000000000009A48                                         ; DATA XREF: process_field+78E↑o
.rodata:0000000000009A76                 align 8
.rodata:0000000000009A78 ; const char aValuePrecision[]
.rodata:0000000000009A78 aValuePrecision db 'value/precision too large to be printed: ',27h,'%Lg/%lu',27h,' (c'
.rodata:0000000000009A78                                         ; DATA XREF: process_field+8B6↑o
.rodata:0000000000009A78                 db 'onsider using --to)',0
.rodata:0000000000009AC1                 align 8
.rodata:0000000000009AC8 ; const char aValueTooLargeT_1[]
.rodata:0000000000009AC8 aValueTooLargeT_1 db 'value too large to be printed: ',27h,'%Lg',27h,' (consider using '
.rodata:0000000000009AC8                                         ; DATA XREF: process_field:loc_424D↑o
.rodata:0000000000009AC8                 db '--to)',0
.rodata:0000000000009B03                 align 8
.rodata:0000000000009B08 ; const char aValueTooLargeT_0[]
.rodata:0000000000009B08 aValueTooLargeT_0 db 'value too large to be printed: ',27h,'%Lg',27h,' (cannot handle v'
.rodata:0000000000009B08                                         ; DATA XREF: process_field+5A2↑o
.rodata:0000000000009B08                 db 'alues > 999Y)',0
.rodata:0000000000009B4B                 align 10h
.rodata:0000000000009B50 ; const char aFailedToPrepar[]
.rodata:0000000000009B50 aFailedToPrepar db 'failed to prepare value ',27h,'%Lf',27h,' for printing',0
.rodata:0000000000009B50                                         ; DATA XREF: process_field+10D7↑o
.rodata:0000000000009B50                                         ; process_field+177B↑o
.rodata:0000000000009B7B                 align 20h
.rodata:0000000000009B80 aScaledValueToL db '  scaled value to %Lf * %0.f ^ %u',0Ah,0
.rodata:0000000000009B80                                         ; DATA XREF: process_field+DFA↑o
.rodata:0000000000009BA3                 align 8
.rodata:0000000000009BA8 aAfterRoundingV db '  after rounding, value=%Lf * %0.f ^ %u',0Ah,0
.rodata:0000000000009BA8                                         ; DATA XREF: process_field+F73↑o
.rodata:0000000000009BD1                 align 8
.rodata:0000000000009BD8 aFormattingOutp db 'formatting output:',0Ah
.rodata:0000000000009BD8                                         ; DATA XREF: process_field+B39↑o
.rodata:0000000000009BD8                 db '  value: %Lf',0Ah
.rodata:0000000000009BD8                 db '  humanized: %s',0Ah,0
.rodata:0000000000009C09                 align 10h
.rodata:0000000000009C10 ; const char aTrySHelpForMor[]
.rodata:0000000000009C10 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000009C10                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000009C37                 align 8
.rodata:0000000000009C38 ; const char aUsageSOptionNu[]
.rodata:0000000000009C38 aUsageSOptionNu db 'Usage: %s [OPTION]... [NUMBER]...',0Ah,0
.rodata:0000000000009C38                                         ; DATA XREF: usage:loc_499D↑o
.rodata:0000000000009C5B                 align 20h
.rodata:0000000000009C60 ; const char aReformatNumber[]
.rodata:0000000000009C60 aReformatNumber db 'Reformat NUMBER(s), or the numbers from standard input if none ar'
.rodata:0000000000009C60                                         ; DATA XREF: usage+84↑o
.rodata:0000000000009C60                 db 'e specified.',0Ah,0
.rodata:0000000000009CAF                 align 10h
.rodata:0000000000009CB0 ; const char aMandatoryArgum[]
.rodata:0000000000009CB0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000009CB0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000009CB0                 db 'ns too.',0Ah,0
.rodata:0000000000009CFB                 align 20h
.rodata:0000000000009D00 ; const char aDebugPrintWarn[]
.rodata:0000000000009D00 aDebugPrintWarn db '      --debug          print warnings about invalid input',0Ah,0
.rodata:0000000000009D00                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000009D3B                 align 20h
.rodata:0000000000009D40 ; const char aDDelimiterXUse[]
.rodata:0000000000009D40 aDDelimiterXUse db '  -d, --delimiter=X    use X instead of whitespace for field deli'
.rodata:0000000000009D40                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000009D40                 db 'miter',0Ah,0
.rodata:0000000000009D88 ; const char aFieldFieldsRep[]
.rodata:0000000000009D88 aFieldFieldsRep db '      --field=FIELDS   replace the numbers in these input fields '
.rodata:0000000000009D88                                         ; DATA XREF: usage+118↑o
.rodata:0000000000009D88                 db '(default=1)',0Ah
.rodata:0000000000009D88                 db '                         see FIELDS below',0Ah,0
.rodata:0000000000009E00 ; const char aFormatFormatUs[]
.rodata:0000000000009E00 aFormatFormatUs db '      --format=FORMAT  use printf style floating-point FORMAT;',0Ah
.rodata:0000000000009E00                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000009E00                 db '                         see FORMAT below for details',0Ah,0
.rodata:0000000000009E76                 align 8
.rodata:0000000000009E78 ; const char aFromUnitAutoSc[]
.rodata:0000000000009E78 aFromUnitAutoSc db '      --from=UNIT      auto-scale input numbers to UNITs; default'
.rodata:0000000000009E78                                         ; DATA XREF: usage+162↑o
.rodata:0000000000009E78                 db ' is ',27h,'none',27h,';',0Ah
.rodata:0000000000009E78                 db '                         see UNIT below',0Ah,0
.rodata:0000000000009EEE                 align 10h
.rodata:0000000000009EF0 ; const char aFromUnitNSpeci[]
.rodata:0000000000009EF0 aFromUnitNSpeci db '      --from-unit=N    specify the input unit size (instead of th'
.rodata:0000000000009EF0                                         ; DATA XREF: usage+187↑o
.rodata:0000000000009EF0                 db 'e default 1)',0Ah,0
.rodata:0000000000009F3F                 align 20h
.rodata:0000000000009F40 ; const char aGroupingUseLoc[]
.rodata:0000000000009F40 aGroupingUseLoc db '      --grouping       use locale-defined grouping of digits, e.g'
.rodata:0000000000009F40                                         ; DATA XREF: usage+1AC↑o
.rodata:0000000000009F40                 db '. 1,000,000',0Ah
.rodata:0000000000009F40                 db '                         (which means it has no effect in the C/P'
.rodata:0000000000009F40                 db 'OSIX locale)',0Ah,0
.rodata:0000000000009FDC                 align 20h
.rodata:0000000000009FE0 ; const char aHeaderNPrintWi[]
.rodata:0000000000009FE0 aHeaderNPrintWi db '      --header[=N]     print (without converting) the first N hea'
.rodata:0000000000009FE0                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000009FE0                 db 'der lines;',0Ah
.rodata:0000000000009FE0                 db '                         N defaults to 1 if not specified',0Ah,0
.rodata:000000000000A067                 align 8
.rodata:000000000000A068 ; const char aInvalidModeFai[]
.rodata:000000000000A068 aInvalidModeFai db '      --invalid=MODE   failure mode for invalid numbers: MODE can'
.rodata:000000000000A068                                         ; DATA XREF: usage+1F6↑o
.rodata:000000000000A068                 db ' be:',0Ah
.rodata:000000000000A068                 db '                         abort (default), fail, warn, ignore',0Ah
.rodata:000000000000A068                 db 0
.rodata:000000000000A0EC                 align 10h
.rodata:000000000000A0F0 ; const char aPaddingNPadThe[]
.rodata:000000000000A0F0 aPaddingNPadThe db '      --padding=N      pad the output to N characters; positive N'
.rodata:000000000000A0F0                                         ; DATA XREF: usage+21B↑o
.rodata:000000000000A0F0                 db ' will',0Ah
.rodata:000000000000A0F0                 db '                         right-align; negative N will left-align;'
.rodata:000000000000A0F0                 db 0Ah
.rodata:000000000000A0F0                 db '                         padding is ignored if the output is wide'
.rodata:000000000000A0F0                 db 'r than N;',0Ah
.rodata:000000000000A0F0                 db '                         the default is to automatically pad if a'
.rodata:000000000000A0F0                 db ' whitespace',0Ah
.rodata:000000000000A0F0                 db '                         is found',0Ah,0
.rodata:000000000000A234                 align 8
.rodata:000000000000A238 ; const char aRoundMethodUse[]
.rodata:000000000000A238 aRoundMethodUse db '      --round=METHOD   use METHOD for rounding when scaling; METH'
.rodata:000000000000A238                                         ; DATA XREF: usage+240↑o
.rodata:000000000000A238                 db 'OD can be:',0Ah
.rodata:000000000000A238                 db '                         up, down, from-zero (default), towards-z'
.rodata:000000000000A238                 db 'ero, nearest',0Ah,0
.rodata:000000000000A2D3                 align 8
.rodata:000000000000A2D8 ; const char aSuffixSuffixAd[]
.rodata:000000000000A2D8 aSuffixSuffixAd db '      --suffix=SUFFIX  add SUFFIX to output numbers, and accept o'
.rodata:000000000000A2D8                                         ; DATA XREF: usage+265↑o
.rodata:000000000000A2D8                 db 'ptional',0Ah
.rodata:000000000000A2D8                 db '                         SUFFIX in input numbers',0Ah,0
.rodata:000000000000A353                 align 8
.rodata:000000000000A358 ; const char aToUnitAutoScal[]
.rodata:000000000000A358 aToUnitAutoScal db '      --to=UNIT        auto-scale output numbers to UNITs; see UN'
.rodata:000000000000A358                                         ; DATA XREF: usage+28A↑o
.rodata:000000000000A358                 db 'IT below',0Ah,0
.rodata:000000000000A3A3                 align 8
.rodata:000000000000A3A8 ; const char aToUnitNTheOutp[]
.rodata:000000000000A3A8 aToUnitNTheOutp db '      --to-unit=N      the output unit size (instead of the defau'
.rodata:000000000000A3A8                                         ; DATA XREF: usage+2AF↑o
.rodata:000000000000A3A8                 db 'lt 1)',0Ah,0
.rodata:000000000000A3F0 ; const char aZZeroTerminate[]
.rodata:000000000000A3F0 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:000000000000A3F0                                         ; DATA XREF: usage+2D4↑o
.rodata:000000000000A3F0                 db 0
.rodata:000000000000A42F                 align 10h
.rodata:000000000000A430 ; const char aHelpDisplayThi[]
.rodata:000000000000A430 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000A430                                         ; DATA XREF: usage+2F9↑o
.rodata:000000000000A45D                 align 20h
.rodata:000000000000A460 ; const char aVersionOutputV[]
.rodata:000000000000A460 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000A460                                         ; DATA XREF: usage+31E↑o
.rodata:000000000000A496                 align 8
.rodata:000000000000A498 ; const char aNoneNoAutoScal[]
.rodata:000000000000A498 aNoneNoAutoScal db '  none       no auto-scaling is done; suffixes will trigger an er'
.rodata:000000000000A498                                         ; DATA XREF: usage+368↑o
.rodata:000000000000A498                 db 'ror',0Ah,0
.rodata:000000000000A4DE                 align 20h
.rodata:000000000000A4E0 ; const char aAutoAcceptOpti[]
.rodata:000000000000A4E0 aAutoAcceptOpti db '  auto       accept optional single/two letter suffix:',0Ah
.rodata:000000000000A4E0                                         ; DATA XREF: usage+38D↑o
.rodata:000000000000A4E0                 db '               1K = 1000,',0Ah
.rodata:000000000000A4E0                 db '               1Ki = 1024,',0Ah
.rodata:000000000000A4E0                 db '               1M = 1000000,',0Ah
.rodata:000000000000A4E0                 db '               1Mi = 1048576,',0Ah,0
.rodata:000000000000A588 ; const char aSiAcceptOption[]
.rodata:000000000000A588 aSiAcceptOption db '  si         accept optional single letter suffix:',0Ah
.rodata:000000000000A588                                         ; DATA XREF: usage+3B2↑o
.rodata:000000000000A588                 db '               1K = 1000,',0Ah
.rodata:000000000000A588                 db '               1M = 1000000,',0Ah
.rodata:000000000000A588                 db '               ...',0Ah,0
.rodata:000000000000A606                 align 8
.rodata:000000000000A608 ; const char aIecAcceptOptio[]
.rodata:000000000000A608 aIecAcceptOptio db '  iec        accept optional single letter suffix:',0Ah
.rodata:000000000000A608                                         ; DATA XREF: usage+3D7↑o
.rodata:000000000000A608                 db '               1K = 1024,',0Ah
.rodata:000000000000A608                 db '               1M = 1048576,',0Ah
.rodata:000000000000A608                 db '               ...',0Ah,0
.rodata:000000000000A686                 align 8
.rodata:000000000000A688 ; const char aIecIAcceptOpti[]
.rodata:000000000000A688 aIecIAcceptOpti db '  iec-i      accept optional two-letter suffix:',0Ah
.rodata:000000000000A688                                         ; DATA XREF: usage+3FC↑o
.rodata:000000000000A688                 db '               1Ki = 1024,',0Ah
.rodata:000000000000A688                 db '               1Mi = 1048576,',0Ah
.rodata:000000000000A688                 db '               ...',0Ah,0
.rodata:000000000000A705                 align 8
.rodata:000000000000A708 ; const char aFieldsSupports[]
.rodata:000000000000A708 aFieldsSupports db 0Ah                  ; DATA XREF: usage+421↑o
.rodata:000000000000A708                 db 'FIELDS supports cut(1) style field ranges:',0Ah
.rodata:000000000000A708                 db '  N    N',27h,'th field, counted from 1',0Ah
.rodata:000000000000A708                 db '  N-   from N',27h,'th field, to end of line',0Ah
.rodata:000000000000A708                 db '  N-M  from N',27h,'th to M',27h,'th field (inclusive)',0Ah
.rodata:000000000000A708                 db '  -M   from first to M',27h,'th field (inclusive)',0Ah
.rodata:000000000000A708                 db '  -    all fields',0Ah
.rodata:000000000000A708                 db 'Multiple fields/ranges can be separated with commas',0Ah,0
.rodata:000000000000A81B                 align 20h
.rodata:000000000000A820 ; const char aFormatMustBeSu[]
.rodata:000000000000A820 aFormatMustBeSu db 0Ah                  ; DATA XREF: usage+446↑o
.rodata:000000000000A820                 db 'FORMAT must be suitable for printing one floating-point argument '
.rodata:000000000000A820                 db 27h,'%f',27h,'.',0Ah
.rodata:000000000000A820                 db 'Optional quote (%',27h,'f) will enable --grouping (if supported b'
.rodata:000000000000A820                 db 'y current locale).',0Ah
.rodata:000000000000A820                 db 'Optional width value (%10f) will pad output. Optional zero (%010f'
.rodata:000000000000A820                 db ') width',0Ah
.rodata:000000000000A820                 db 'will zero pad the number. Optional negative values (%-10f) will l'
.rodata:000000000000A820                 db 'eft align.',0Ah
.rodata:000000000000A820                 db 'Optional precision (%.1f) will override the input determined prec'
.rodata:000000000000A820                 db 'ision.',0Ah,0
.rodata:000000000000A994                 align 8
.rodata:000000000000A998 ; const char aExitStatusIs0I[]
.rodata:000000000000A998 aExitStatusIs0I db 0Ah                  ; DATA XREF: usage+46B↑o
.rodata:000000000000A998                 db 'Exit status is 0 if all input numbers were successfully converted'
.rodata:000000000000A998                 db '.',0Ah
.rodata:000000000000A998                 db 'By default, %s will stop at the first conversion error with exit '
.rodata:000000000000A998                 db 'status 2.',0Ah
.rodata:000000000000A998                 db 'With --invalid=',27h,'fail',27h,' a warning is printed for each c'
.rodata:000000000000A998                 db 'onversion error',0Ah
.rodata:000000000000A998                 db 'and the exit status is 2.  With --invalid=',27h,'warn',27h,' each'
.rodata:000000000000A998                 db ' conversion error is',0Ah
.rodata:000000000000A998                 db 'diagnosed, but the exit status is 0.  With --invalid=',27h,'ignor'
.rodata:000000000000A998                 db 'e',27h,' conversion',0Ah
.rodata:000000000000A998                 db 'errors are not diagnosed and the exit status is 0.',0Ah,0
.rodata:000000000000AB33                 align 8
.rodata:000000000000AB38 ; const char aExamplesSToSi1[]
.rodata:000000000000AB38 aExamplesSToSi1 db 0Ah                  ; DATA XREF: usage+497↑o
.rodata:000000000000AB38                 db 'Examples:',0Ah
.rodata:000000000000AB38                 db '  $ %s --to=si 1000',0Ah
.rodata:000000000000AB38                 db '            -> "1.0K"',0Ah
.rodata:000000000000AB38                 db '  $ %s --to=iec 2048',0Ah
.rodata:000000000000AB38                 db '           -> "2.0K"',0Ah
.rodata:000000000000AB38                 db '  $ %s --to=iec-i 4096',0Ah
.rodata:000000000000AB38                 db '           -> "4.0Ki"',0Ah
.rodata:000000000000AB38                 db '  $ echo 1K | %s --from=si',0Ah
.rodata:000000000000AB38                 db '           -> "1000"',0Ah
.rodata:000000000000AB38                 db '  $ echo 1K | %s --from=iec',0Ah
.rodata:000000000000AB38                 db '           -> "1024"',0Ah
.rodata:000000000000AB38                 db '  $ df -B1 | %s --header --field 2-4 --to=si',0Ah
.rodata:000000000000AB38                 db '  $ ls -l  | %s --header --field 5 --to=iec',0Ah
.rodata:000000000000AB38                 db '  $ ls -lh | %s --header --field 5 --from=iec --padding=10',0Ah
.rodata:000000000000AB38                 db '  $ ls -lh | %s --header --field 5 --from=iec --format %%10f',0Ah
.rodata:000000000000AB38                 db 0
.rodata:000000000000ACF7                 align 8
.rodata:000000000000ACF8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000ACF8                                         ; DATA XREF: usage+5B7↑o
.rodata:000000000000ACF8                                         ; usage+61B↑o ...
.rodata:000000000000AD20 ; const char aReportAnyTrans[]
.rodata:000000000000AD20 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000AD20                                         ; DATA XREF: usage+70F↑o
.rodata:000000000000AD20                 db 'am/>',0Ah,0
.rodata:000000000000AD67                 align 8
.rodata:000000000000AD68 ; const char aOrAvailableLoc[]
.rodata:000000000000AD68 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000AD68                                         ; DATA XREF: usage:loc_4F86↑o
.rodata:000000000000AD9B                 align 20h
.rodata:000000000000ADA0 ; const char aTheDelimiterMu[]
.rodata:000000000000ADA0 aTheDelimiterMu db 'the delimiter must be a single character',0
.rodata:000000000000ADA0                                         ; DATA XREF: main:loc_2A65↑o
.rodata:000000000000ADC9                 align 10h
.rodata:000000000000ADD0 ; const char aGroupingCannot_0[]
.rodata:000000000000ADD0 aGroupingCannot_0 db '--grouping cannot be combined with --format',0
.rodata:000000000000ADD0                                         ; DATA XREF: main:loc_2B16↑o
.rodata:000000000000ADFC                 align 20h
.rodata:000000000000AE00 ; const char aNoConversionOp[]
.rodata:000000000000AE00 aNoConversionOp db 'no conversion option specified',0
.rodata:000000000000AE00                                         ; DATA XREF: main+549↑o
.rodata:000000000000AE1F                 align 20h
.rodata:000000000000AE20 ; const char aInvalidFormatS_0[]
.rodata:000000000000AE20 aInvalidFormatS_0 db 'invalid format %s (width overflow)',0
.rodata:000000000000AE20                                         ; DATA XREF: main+DF2↑o
.rodata:000000000000AE43                 align 8
.rodata:000000000000AE48 ; const char aFormatPaddingO[]
.rodata:000000000000AE48 aFormatPaddingO db '--format padding overriding --padding',0
.rodata:000000000000AE48                                         ; DATA XREF: main:loc_287F↑o
.rodata:000000000000AE6E                 align 10h
.rodata:000000000000AE70 ; const char aInvalidPrecisi[]
.rodata:000000000000AE70 aInvalidPrecisi db 'invalid precision in format %s',0
.rodata:000000000000AE70                                         ; DATA XREF: main+C83↑o
.rodata:000000000000AE8F                 align 10h
.rodata:000000000000AE90 ; const char aInvalidFormatS[]
.rodata:000000000000AE90 aInvalidFormatS db 'invalid format %s, directive must be %%[0][',27h,'][-][N][.][N]f',0
.rodata:000000000000AE90                                         ; DATA XREF: main+D73↑o
.rodata:000000000000AECB                 align 10h
.rodata:000000000000AED0 ; const char aFormatSHasTooM[]
.rodata:000000000000AED0 aFormatSHasTooM db 'format %s has too many %% directives',0
.rodata:000000000000AED0                                         ; DATA XREF: main+D41↑o
.rodata:000000000000AEF5                 align 8
.rodata:000000000000AEF8 aFormatStringIn db 'format String:',0Ah ; DATA XREF: main+68A↑o
.rodata:000000000000AEF8                 db '  input: %s',0Ah
.rodata:000000000000AEF8                 db '  grouping: %s',0Ah
.rodata:000000000000AEF8                 db '  padding width: %ld',0Ah
.rodata:000000000000AEF8                 db '  alignment: %s',0Ah
.rodata:000000000000AEF8                 db '  prefix: %s',0Ah
.rodata:000000000000AEF8                 db '  suffix: %s',0Ah,0
.rodata:000000000000AF62                 align 8
.rodata:000000000000AF68 ; const char aGroupingCannot[]
.rodata:000000000000AF68 aGroupingCannot db 'grouping cannot be combined with --to',0
.rodata:000000000000AF68                                         ; DATA XREF: main:loc_2AF2↑o
.rodata:000000000000AF8E                 align 10h
.rodata:000000000000AF90 ; const char aGroupingHasNoE[]
.rodata:000000000000AF90 aGroupingHasNoE db 'grouping has no effect in this locale',0
.rodata:000000000000AF90                                         ; DATA XREF: main+8D8↑o
.rodata:000000000000AFB6                 align 8
.rodata:000000000000AFB8 ; const char aHeaderIgnoredW[]
.rodata:000000000000AFB8 aHeaderIgnoredW db '--header ignored with command-line input',0
.rodata:000000000000AFB8                                         ; DATA XREF: main:loc_2837↑o
.rodata:000000000000AFE1                 align 8
.rodata:000000000000AFE8 ; const char aFailedToConver[]
.rodata:000000000000AFE8 aFailedToConver db 'failed to convert some of the input numbers',0
.rodata:000000000000AFE8                                         ; DATA XREF: main:loc_27EE↑o
.rodata:000000000000B014                 align 20h
.rodata:000000000000B020 jpt_3193        dd offset def_3193 - 0B020h
.rodata:000000000000B020                                         ; DATA XREF: process_field+213↑o
.rodata:000000000000B020                                         ; process_field+21C↑r
.rodata:000000000000B020                 dd offset def_3193 - 0B020h ; jump table for switch statement
.rodata:000000000000B020                 dd offset loc_3200 - 0B020h
.rodata:000000000000B020                 dd offset loc_37D0 - 0B020h
.rodata:000000000000B020                 dd offset loc_37E4 - 0B020h
.rodata:000000000000B020                 dd offset loc_32F9 - 0B020h
.rodata:000000000000B020                 dd offset loc_3308 - 0B020h
.rodata:000000000000B03C jpt_3635        dd offset loc_392E - 0B03Ch
.rodata:000000000000B03C                                         ; DATA XREF: process_field+6B7↑o
.rodata:000000000000B03C                                         ; process_field+6BE↑r
.rodata:000000000000B03C                 dd offset loc_3C29 - 0B03Ch ; jump table for switch statement
.rodata:000000000000B03C                 dd offset loc_3BB7 - 0B03Ch
.rodata:000000000000B03C                 dd offset loc_3B9E - 0B03Ch
.rodata:000000000000B03C                 dd offset loc_3C00 - 0B03Ch
.rodata:000000000000B050 jpt_3E33        dd offset loc_3E50 - 0B050h
.rodata:000000000000B050                                         ; DATA XREF: process_field+EB5↑o
.rodata:000000000000B050                                         ; process_field+EBC↑r
.rodata:000000000000B050                 dd offset loc_41C0 - 0B050h ; jump table for switch statement
.rodata:000000000000B050                 dd offset loc_4150 - 0B050h
.rodata:000000000000B050                 dd offset loc_41D6 - 0B050h
.rodata:000000000000B050                 dd offset loc_4100 - 0B050h
.rodata:000000000000B064 jpt_3F58        dd offset loc_3FEB - 0B064h
.rodata:000000000000B064                                         ; DATA XREF: process_field+FD7↑o
.rodata:000000000000B064                                         ; process_field+FE1↑r
.rodata:000000000000B064                 dd offset loc_3F5A - 0B064h ; jump table for switch statement
.rodata:000000000000B064                 dd offset loc_40D4 - 0B064h
.rodata:000000000000B064                 dd offset loc_40C6 - 0B064h
.rodata:000000000000B064                 dd offset loc_40B8 - 0B064h
.rodata:000000000000B064                 dd offset loc_40AA - 0B064h
.rodata:000000000000B064                 dd offset loc_409C - 0B064h
.rodata:000000000000B064                 dd offset loc_408E - 0B064h
.rodata:000000000000B064                 dd offset loc_4080 - 0B064h
.rodata:000000000000B088 jpt_4328        dd offset loc_4355 - 0B088h
.rodata:000000000000B088                                         ; DATA XREF: process_field+13AA↑o
.rodata:000000000000B088                                         ; process_field+13B1↑r
.rodata:000000000000B088                 dd offset loc_434C - 0B088h ; jump table for switch statement
.rodata:000000000000B088                 dd offset loc_4345 - 0B088h
.rodata:000000000000B088                 dd offset loc_432A - 0B088h
.rodata:000000000000B088                 dd offset loc_435E - 0B088h
.rodata:000000000000B09C jpt_43C9        dd offset loc_3934 - 0B09Ch
.rodata:000000000000B09C                                         ; DATA XREF: process_field+144B↑o
.rodata:000000000000B09C                                         ; process_field+1452↑r
.rodata:000000000000B09C                 dd offset loc_3C2F - 0B09Ch ; jump table for switch statement
.rodata:000000000000B09C                 dd offset loc_3BBD - 0B09Ch
.rodata:000000000000B09C                 dd offset loc_3BA4 - 0B09Ch
.rodata:000000000000B09C                 dd offset loc_3C06 - 0B09Ch
.rodata:000000000000B0B0 jpt_44FF        dd offset loc_3E35 - 0B0B0h
.rodata:000000000000B0B0                                         ; DATA XREF: process_field+1581↑o
.rodata:000000000000B0B0                                         ; process_field+1588↑r
.rodata:000000000000B0B0                 dd offset loc_419B - 0B0B0h ; jump table for switch statement
.rodata:000000000000B0B0                 dd offset loc_4129 - 0B0B0h
.rodata:000000000000B0B0                 dd offset loc_4740 - 0B0B0h
.rodata:000000000000B0B0                 dd offset loc_40E2 - 0B0B0h
.rodata:000000000000B0C4 jpt_4632        dd offset loc_3932 - 0B0C4h
.rodata:000000000000B0C4                                         ; DATA XREF: process_field+16B4↑o
.rodata:000000000000B0C4                                         ; process_field+16BB↑r
.rodata:000000000000B0C4                 dd offset loc_3C2D - 0B0C4h ; jump table for switch statement
.rodata:000000000000B0C4                 dd offset loc_3BBB - 0B0C4h
.rodata:000000000000B0C4                 dd offset loc_3BA2 - 0B0C4h
.rodata:000000000000B0C4                 dd offset loc_3C04 - 0B0C4h
.rodata:000000000000B0D8 jpt_46D2        dd offset loc_3E3D - 0B0D8h
.rodata:000000000000B0D8                                         ; DATA XREF: process_field+1754↑o
.rodata:000000000000B0D8                                         ; process_field+175B↑r
.rodata:000000000000B0D8                 dd offset loc_41A3 - 0B0D8h ; jump table for switch statement
.rodata:000000000000B0D8                 dd offset loc_4131 - 0B0D8h
.rodata:000000000000B0D8                 dd offset loc_41DA - 0B0D8h
.rodata:000000000000B0D8                 dd offset loc_40EA - 0B0D8h
.rodata:000000000000B0EC                 align 20h
.rodata:000000000000B100 CSWTCH_317      db    6                 ; DATA XREF: process_field:loc_3861↑o
.rodata:000000000000B101                 db    0
.rodata:000000000000B102                 db    0
.rodata:000000000000B103                 db    0
.rodata:000000000000B104                 db    0
.rodata:000000000000B105                 db    0
.rodata:000000000000B106                 db    0
.rodata:000000000000B107                 db    0
.rodata:000000000000B108                 db    3
.rodata:000000000000B109                 db    0
.rodata:000000000000B10A                 db    0
.rodata:000000000000B10B                 db    0
.rodata:000000000000B10C                 db    0
.rodata:000000000000B10D                 db    0
.rodata:000000000000B10E                 db    0
.rodata:000000000000B10F                 db    0
.rodata:000000000000B110                 db    0
.rodata:000000000000B111                 db    0
.rodata:000000000000B112                 db    0
.rodata:000000000000B113                 db    0
.rodata:000000000000B114                 db    0
.rodata:000000000000B115                 db    0
.rodata:000000000000B116                 db    0
.rodata:000000000000B117                 db    0
.rodata:000000000000B118                 db    1
.rodata:000000000000B119                 db    0
.rodata:000000000000B11A                 db    0
.rodata:000000000000B11B                 db    0
.rodata:000000000000B11C                 db    0
.rodata:000000000000B11D                 db    0
.rodata:000000000000B11E                 db    0
.rodata:000000000000B11F                 db    0
.rodata:000000000000B120                 db    2
.rodata:000000000000B121                 db    0
.rodata:000000000000B122                 db    0
.rodata:000000000000B123                 db    0
.rodata:000000000000B124                 db    0
.rodata:000000000000B125                 db    0
.rodata:000000000000B126                 db    0
.rodata:000000000000B127                 db    0
.rodata:000000000000B128                 db    0
.rodata:000000000000B129                 db    0
.rodata:000000000000B12A                 db    0
.rodata:000000000000B12B                 db    0
.rodata:000000000000B12C                 db    5
.rodata:000000000000B12D                 db    0
.rodata:000000000000B12E                 db    0
.rodata:000000000000B12F                 db    0
.rodata:000000000000B130                 db    0
.rodata:000000000000B131                 db    0
.rodata:000000000000B132                 db    0
.rodata:000000000000B133                 db    0
.rodata:000000000000B134                 db    0
.rodata:000000000000B135                 db    0
.rodata:000000000000B136                 db    0
.rodata:000000000000B137                 db    0
.rodata:000000000000B138                 db    0
.rodata:000000000000B139                 db    0
.rodata:000000000000B13A                 db    0
.rodata:000000000000B13B                 db    0
.rodata:000000000000B13C                 db    4
.rodata:000000000000B13D                 db    0
.rodata:000000000000B13E                 db    0
.rodata:000000000000B13F                 db    0
.rodata:000000000000B140                 db    0
.rodata:000000000000B141                 db    0
.rodata:000000000000B142                 db    0
.rodata:000000000000B143                 db    0
.rodata:000000000000B144                 db    0
.rodata:000000000000B145                 db    0
.rodata:000000000000B146                 db    0
.rodata:000000000000B147                 db    0
.rodata:000000000000B148                 db    0
.rodata:000000000000B149                 db    0
.rodata:000000000000B14A                 db    0
.rodata:000000000000B14B                 db    0
.rodata:000000000000B14C                 db    0
.rodata:000000000000B14D                 db    0
.rodata:000000000000B14E                 db    0
.rodata:000000000000B14F                 db    0
.rodata:000000000000B150                 db    8
.rodata:000000000000B151                 db    0
.rodata:000000000000B152                 db    0
.rodata:000000000000B153                 db    0
.rodata:000000000000B154                 db    7
.rodata:000000000000B155                 db    0
.rodata:000000000000B156                 db    0
.rodata:000000000000B157                 db    0
.rodata:000000000000B158                 db    0
.rodata:000000000000B159                 db    0
.rodata:000000000000B15A                 db    0
.rodata:000000000000B15B                 db    0
.rodata:000000000000B15C                 db    0
.rodata:000000000000B15D                 db    0
.rodata:000000000000B15E                 db    0
.rodata:000000000000B15F                 db    0
.rodata:000000000000B160 inval_types     db    0                 ; DATA XREF: main+1D8↑o
.rodata:000000000000B160                                         ; main+1F1↑o
.rodata:000000000000B161                 db    0
.rodata:000000000000B162                 db    0
.rodata:000000000000B163                 db    0
.rodata:000000000000B164                 db    1
.rodata:000000000000B165                 db    0
.rodata:000000000000B166                 db    0
.rodata:000000000000B167                 db    0
.rodata:000000000000B168                 db    2
.rodata:000000000000B169                 db    0
.rodata:000000000000B16A                 db    0
.rodata:000000000000B16B                 db    0
.rodata:000000000000B16C                 db    3
.rodata:000000000000B16D                 db    0
.rodata:000000000000B16E                 db    0
.rodata:000000000000B16F                 db    0
.rodata:000000000000B170 round_types     db    0                 ; DATA XREF: main+405↑o
.rodata:000000000000B170                                         ; main+41E↑o
.rodata:000000000000B171                 db    0
.rodata:000000000000B172                 db    0
.rodata:000000000000B173                 db    0
.rodata:000000000000B174                 db    1
.rodata:000000000000B175                 db    0
.rodata:000000000000B176                 db    0
.rodata:000000000000B177                 db    0
.rodata:000000000000B178                 db    2
.rodata:000000000000B179                 db    0
.rodata:000000000000B17A                 db    0
.rodata:000000000000B17B                 db    0
.rodata:000000000000B17C                 db    3
.rodata:000000000000B17D                 db    0
.rodata:000000000000B17E                 db    0
.rodata:000000000000B17F                 db    0
.rodata:000000000000B180                 db    4
.rodata:000000000000B181                 db    0
.rodata:000000000000B182                 db    0
.rodata:000000000000B183                 db    0
.rodata:000000000000B184                 db    0
.rodata:000000000000B185                 db    0
.rodata:000000000000B186                 db    0
.rodata:000000000000B187                 db    0
.rodata:000000000000B188                 db    0
.rodata:000000000000B189                 db    0
.rodata:000000000000B18A                 db    0
.rodata:000000000000B18B                 db    0
.rodata:000000000000B18C                 db    0
.rodata:000000000000B18D                 db    0
.rodata:000000000000B18E                 db    0
.rodata:000000000000B18F                 db    0
.rodata:000000000000B190 scale_to_types  db    0                 ; DATA XREF: main+35D↑o
.rodata:000000000000B190                                         ; main+376↑o
.rodata:000000000000B191                 db    0
.rodata:000000000000B192                 db    0
.rodata:000000000000B193                 db    0
.rodata:000000000000B194                 db    2
.rodata:000000000000B195                 db    0
.rodata:000000000000B196                 db    0
.rodata:000000000000B197                 db    0
.rodata:000000000000B198                 db    3
.rodata:000000000000B199                 db    0
.rodata:000000000000B19A                 db    0
.rodata:000000000000B19B                 db    0
.rodata:000000000000B19C                 db    4
.rodata:000000000000B19D                 db    0
.rodata:000000000000B19E                 db    0
.rodata:000000000000B19F                 db    0
.rodata:000000000000B1A0 scale_from_types db    0                ; DATA XREF: main+2A2↑o
.rodata:000000000000B1A0                                         ; main+2BB↑o
.rodata:000000000000B1A1                 db    0
.rodata:000000000000B1A2                 db    0
.rodata:000000000000B1A3                 db    0
.rodata:000000000000B1A4                 db    1
.rodata:000000000000B1A5                 db    0
.rodata:000000000000B1A6                 db    0
.rodata:000000000000B1A7                 db    0
.rodata:000000000000B1A8                 db    2
.rodata:000000000000B1A9                 db    0
.rodata:000000000000B1AA                 db    0
.rodata:000000000000B1AB                 db    0
.rodata:000000000000B1AC                 db    3
.rodata:000000000000B1AD                 db    0
.rodata:000000000000B1AE                 db    0
.rodata:000000000000B1AF                 db    0
.rodata:000000000000B1B0                 db    4
.rodata:000000000000B1B1                 db    0
.rodata:000000000000B1B2                 db    0
.rodata:000000000000B1B3                 db    0
.rodata:000000000000B1B4 flt_B1B4        dd 10.0                 ; DATA XREF: simple_strtod_int+28↑r
.rodata:000000000000B1B4                                         ; process_field+553↑r ...
.rodata:000000000000B1B8 flt_B1B8        dd 1024.0               ; DATA XREF: process_field+15B5↑r
.rodata:000000000000B1B8                                         ; process_field+1644↑r
.rodata:000000000000B1BC flt_B1BC        dd 1.8446744e19         ; DATA XREF: process_field+302↑r
.rodata:000000000000B1BC                                         ; process_field:loc_32C0↑r
.rodata:000000000000B1C0 flt_B1C0        dd 0.5                  ; DATA XREF: process_field+CA0↑r
.rodata:000000000000B1C0                                         ; process_field+119E↑r ...
.rodata:000000000000B1C4                 align 8
.rodata:000000000000B1C8 qword_B1C8      dq 4090000000000000h    ; DATA XREF: process_field+D8E↑r
.rodata:000000000000B1D0 qword_B1D0      dq 408F400000000000h    ; DATA XREF: process_field:loc_4365↑r
.rodata:000000000000B1D8                 align 20h
.rodata:000000000000B1E0 tbyte_B1E0      dt -1.189731495357231765e4932
.rodata:000000000000B1E0                                         ; DATA XREF: process_field:loc_3490↑r
.rodata:000000000000B1E0                                         ; process_field:loc_3D14↑r
.rodata:000000000000B1EA                 align 10h
.rodata:000000000000B1F0 tbyte_B1F0      dt 1.189731495357231765e4932
.rodata:000000000000B1F0                                         ; DATA XREF: process_field+541↑r
.rodata:000000000000B1F0                                         ; process_field+DB6↑r
.rodata:000000000000B1FA                 align 20h
.rodata:000000000000B200 tbyte_B200      dt 9.223372036854775807e18
.rodata:000000000000B200                                         ; DATA XREF: process_field+683↑r
.rodata:000000000000B200                                         ; process_field+E85↑r ...
.rodata:000000000000B20A                 align 10h
.rodata:000000000000B210 ; const char aInvalidFieldRa[]
.rodata:000000000000B210 aInvalidFieldRa db 'invalid field range',0
.rodata:000000000000B210                                         ; DATA XREF: set_fields:loc_568A↑o
.rodata:000000000000B224 ; const char aFieldsAreNumbe[]
.rodata:000000000000B224 aFieldsAreNumbe db 'fields are numbered from 1',0
.rodata:000000000000B224                                         ; DATA XREF: set_fields:loc_55C8↑o
.rodata:000000000000B23F ; const char aInvalidDecreas[]
.rodata:000000000000B23F aInvalidDecreas db 'invalid decreasing range',0
.rodata:000000000000B23F                                         ; DATA XREF: set_fields:loc_55D8↑o
.rodata:000000000000B258 ; const char a0123456789[]
.rodata:000000000000B258 a0123456789     db '0123456789',0       ; DATA XREF: set_fields+4A4↑o
.rodata:000000000000B263 ; const char aFieldNumberSIs[]
.rodata:000000000000B263 aFieldNumberSIs db 'field number %s is too large',0
.rodata:000000000000B263                                         ; DATA XREF: set_fields:loc_569D↑o
.rodata:000000000000B280 ; const char aInvalidFieldVa[]
.rodata:000000000000B280 aInvalidFieldVa db 'invalid field value %s',0
.rodata:000000000000B280                                         ; DATA XREF: set_fields:loc_5718↑o
.rodata:000000000000B297 aMissingListOfF db 'missing list of fields',0
.rodata:000000000000B297                                         ; DATA XREF: set_fields:loc_570C↑o
.rodata:000000000000B2AE                 align 10h
.rodata:000000000000B2B0 ; const char aInvalidByteOrC[]
.rodata:000000000000B2B0 aInvalidByteOrC db 'invalid byte or character range',0
.rodata:000000000000B2B0                                         ; DATA XREF: set_fields+48D↑o
.rodata:000000000000B2D0 ; const char aByteCharacterP[]
.rodata:000000000000B2D0 aByteCharacterP db 'byte/character positions are numbered from 1',0
.rodata:000000000000B2D0                                         ; DATA XREF: set_fields+432↑o
.rodata:000000000000B2FD                 align 20h
.rodata:000000000000B300 aInvalidRangeWi db 'invalid range with no endpoint: -',0
.rodata:000000000000B300                                         ; DATA XREF: set_fields+50E↑o
.rodata:000000000000B322                 align 8
.rodata:000000000000B328 ; const char aByteCharacterO[]
.rodata:000000000000B328 aByteCharacterO db 'byte/character offset %s is too large',0
.rodata:000000000000B328                                         ; DATA XREF: set_fields+4D8↑o
.rodata:000000000000B34E                 align 10h
.rodata:000000000000B350 ; const char aInvalidByteCha[]
.rodata:000000000000B350 aInvalidByteCha db 'invalid byte/character position %s',0
.rodata:000000000000B350                                         ; DATA XREF: set_fields+573↑o
.rodata:000000000000B373                 align 8
.rodata:000000000000B378 ; const char aMissingListOfB[]
.rodata:000000000000B378 aMissingListOfB db 'missing list of byte/character positions',0
.rodata:000000000000B378                                         ; DATA XREF: set_fields+549↑o
.rodata:000000000000B3A1 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000B3A6 ; const char aInvalidArgumen[]
.rodata:000000000000B3A6 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000B3A6                                         ; DATA XREF: argmatch_invalid:loc_5900↑o
.rodata:000000000000B3C1 ; const char aAmbiguousArgum[]
.rodata:000000000000B3C1 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000B3C1                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000B3DE ; const char aValidArguments[]
.rodata:000000000000B3DE aValidArguments db 'Valid arguments are:',0
.rodata:000000000000B3DE                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000B3F3 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000B3F3                 db '  - %s',0
.rodata:000000000000B3FB aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000B3FB                                         ; close_stdout+8F↑o ...
.rodata:000000000000B400 ; const char aWriteError[]
.rodata:000000000000B400 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5B63↑o
.rodata:000000000000B40C ; const char format[]
.rodata:000000000000B40C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000B413                 align 8
.rodata:000000000000B418 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000B418                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000B450 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000B458 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000B458                                         ; set_fields+20↑o
.rodata:000000000000B45C unk_B45C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000B45D                 db  80h
.rodata:000000000000B45E                 db  98h
.rodata:000000000000B45F                 db    0
.rodata:000000000000B460 unk_B460        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000B461                 db  80h
.rodata:000000000000B462                 db  99h
.rodata:000000000000B463                 db    0
.rodata:000000000000B464 unk_B464        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000B465                 db    7
.rodata:000000000000B466                 db  65h ; e
.rodata:000000000000B467                 db    0
.rodata:000000000000B468 unk_B468        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000B469                 db 0AFh
.rodata:000000000000B46A                 db    0
.rodata:000000000000B46B unk_B46B        db  22h ; "             ; DATA XREF: gettext_quote:loc_6100↑o
.rodata:000000000000B46B                                         ; quotearg_buffer_restyled:loc_6EBB↑o ...
.rodata:000000000000B46C                 db    0
.rodata:000000000000B46D ; const char asc_B46D[2]
.rodata:000000000000B46D asc_B46D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000B46D                                         ; quotearg_buffer_restyled:loc_6283↑o ...
.rodata:000000000000B46F ; const char asc_B46F[2]
.rodata:000000000000B46F asc_B46F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000B46F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000B471 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000B479 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020DBA8↓o
.rodata:000000000000B47F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020DBB0↓o
.rodata:000000000000B48C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020DBB8↓o
.rodata:000000000000B48C                                         ; .data.rel.ro:000000000020DBD8↓o
.rodata:000000000000B499 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000B499                                         ; DATA XREF: .data.rel.ro:000000000020DBC0↓o
.rodata:000000000000B4AD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020DBD0↓o
.rodata:000000000000B4B5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020DBE8↓o
.rodata:000000000000B4BD                 align 20h
.rodata:000000000000B4C0 jpt_6261        dd offset loc_700A - 0B4C0h
.rodata:000000000000B4C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000B4C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000B4C0                 dd offset loc_6263 - 0B4C0h ; jump table for switch statement
.rodata:000000000000B4C0                 dd offset loc_7238 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_7044 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6E34 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6E90 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6EE5 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6F2A - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6F64 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6F64 - 0B4C0h
.rodata:000000000000B4C0                 dd offset loc_6F64 - 0B4C0h
.rodata:000000000000B4EC jpt_63BE        dd offset loc_65E0 - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000B4EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh ; jump table for switch statement
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset loc_6620 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6528 - 0B4ECh, offset loc_64E8 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_66B0 - 0B4ECh, offset loc_66A0 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6690 - 0B4ECh, offset loc_6680 - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset def_63BE - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6670 - 0B4ECh, offset loc_6660 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6630 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_64C3 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6660 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6660 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6660 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6493 - 0B4ECh
.rodata:000000000000B4EC                 dd offset def_63BE - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6660 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6538 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_6608 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6608 - 0B4ECh, offset loc_63C3 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6660 - 0B4ECh, offset loc_63C3 - 0B4ECh
.rodata:000000000000B4EC                 dd offset loc_6630 - 0B4ECh
.rodata:000000000000B6E8 jpt_674A        dd offset loc_67B0 - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000B6E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h ; jump table for switch statement
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset loc_67A0 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_68F0 - 0B6E8h, offset loc_68D8 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6788 - 0B6E8h, offset loc_68C8 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6770 - 0B6E8h, offset loc_68B0 - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset def_674A - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6898 - 0B6E8h, offset loc_6880 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6868 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_64C0 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6880 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6880 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6880 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6490 - 0B6E8h
.rodata:000000000000B6E8                 dd offset def_674A - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6880 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6750 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_6850 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6850 - 0B6E8h, offset loc_63C0 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6880 - 0B6E8h, offset loc_63C0 - 0B6E8h
.rodata:000000000000B6E8                 dd offset loc_6868 - 0B6E8h
.rodata:000000000000B8E4                 align 20h
.rodata:000000000000B900                 public quoting_style_vals
.rodata:000000000000B900 quoting_style_vals db    0
.rodata:000000000000B901                 db    0
.rodata:000000000000B902                 db    0
.rodata:000000000000B903                 db    0
.rodata:000000000000B904                 db    1
.rodata:000000000000B905                 db    0
.rodata:000000000000B906                 db    0
.rodata:000000000000B907                 db    0
.rodata:000000000000B908                 db    2
.rodata:000000000000B909                 db    0
.rodata:000000000000B90A                 db    0
.rodata:000000000000B90B                 db    0
.rodata:000000000000B90C                 db    3
.rodata:000000000000B90D                 db    0
.rodata:000000000000B90E                 db    0
.rodata:000000000000B90F                 db    0
.rodata:000000000000B910                 db    4
.rodata:000000000000B911                 db    0
.rodata:000000000000B912                 db    0
.rodata:000000000000B913                 db    0
.rodata:000000000000B914                 db    5
.rodata:000000000000B915                 db    0
.rodata:000000000000B916                 db    0
.rodata:000000000000B917                 db    0
.rodata:000000000000B918                 db    6
.rodata:000000000000B919                 db    0
.rodata:000000000000B91A                 db    0
.rodata:000000000000B91B                 db    0
.rodata:000000000000B91C                 db    7
.rodata:000000000000B91D                 db    0
.rodata:000000000000B91E                 db    0
.rodata:000000000000B91F                 db    0
.rodata:000000000000B920                 db    8
.rodata:000000000000B921                 db    0
.rodata:000000000000B922                 db    0
.rodata:000000000000B923                 db    0
.rodata:000000000000B924                 db    9
.rodata:000000000000B925                 db    0
.rodata:000000000000B926                 db    0
.rodata:000000000000B927                 db    0
.rodata:000000000000B928 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000B934 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000B93B ; const char aC_0[]
.rodata:000000000000B93B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_7DAC↑o
.rodata:000000000000B93F ; const char aWrittenByS[]
.rodata:000000000000B93F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000B93F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000B94F ; const char aWrittenBySAndS[]
.rodata:000000000000B94F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000B94F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000B966 ; const char aWrittenBySSAnd[]
.rodata:000000000000B966 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000B966                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000B982 ; const char aReportBugsToS[]
.rodata:000000000000B982 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000B982                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000B997 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000B997                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000B9AD ; const char aSHomePageS[]
.rodata:000000000000B9AD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000B9AD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000B9C1                 align 8
.rodata:000000000000B9C8 ; const char aLicenseGplv3Gn[]
.rodata:000000000000B9C8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000B9C8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000B9C8                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000B9C8                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000B9C8                 db '.',0Ah
.rodata:000000000000B9C8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000B9C8                 db 0Ah,0
.rodata:000000000000BA94                 align 8
.rodata:000000000000BA98 ; const char aWrittenBySSSAn[]
.rodata:000000000000BA98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BA98                                         ; DATA XREF: version_etc_arn:loc_8000↑o
.rodata:000000000000BA98                 db 'and %s.',0Ah,0
.rodata:000000000000BAB8 ; const char aWrittenBySSSSA[]
.rodata:000000000000BAB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BAB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000BAB8                 db '%s, and %s.',0Ah,0
.rodata:000000000000BADC                 align 20h
.rodata:000000000000BAE0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000BAE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BAE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000BAE0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000BB08 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000BB08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BB08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000BB08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000BB34                 align 8
.rodata:000000000000BB38 ; const char aWrittenBySSSSS[]
.rodata:000000000000BB38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BB38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000BB38                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000BB38                 db 'and %s.',0Ah,0
.rodata:000000000000BB68 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000BB68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BB68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000BB68                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000BB68                 db '%s, and %s.',0Ah,0
.rodata:000000000000BB9C                 align 20h
.rodata:000000000000BBA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000BBA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000BBA0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000BBA0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000BBDC                 align 20h
.rodata:000000000000BBE0 ; const char aGeneralHelpUsi[]
.rodata:000000000000BBE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000BBE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000BBE0                 db 0
.rodata:000000000000BC21                 align 4
.rodata:000000000000BC24 jpt_7E14        dd offset loc_7E96 - 0BC24h
.rodata:000000000000BC24                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000BC24                                         ; version_etc_arn+9D↑r
.rodata:000000000000BC24                 dd offset loc_7F28 - 0BC24h ; jump table for switch statement
.rodata:000000000000BC24                 dd offset loc_7F68 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_7FB0 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_8000 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_8058 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_8088 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_80F0 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_7E20 - 0BC24h
.rodata:000000000000BC24                 dd offset loc_7ED0 - 0BC24h
.rodata:000000000000BC4C                 align 20h
.rodata:000000000000BC60                 public version_etc_copyright
.rodata:000000000000BC60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000BC60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000BC8F ; const char aMemoryExhauste[]
.rodata:000000000000BC8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000BCA0 ; const char file[]
.rodata:000000000000BCA0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000BCA0                                         ; DATA XREF: xstrtol+696↑o
.rodata:000000000000BCA0                                         ; xstrtoumax+38C↑o
.rodata:000000000000BCC0 ; const char assertion[]
.rodata:000000000000BCC0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000BCC0                                         ; DATA XREF: xstrtol+69D↑o
.rodata:000000000000BCC0                                         ; xstrtoumax+393↑o
.rodata:000000000000BCE6                 align 8
.rodata:000000000000BCE8 jpt_87EE        dd offset loc_8B20 - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                                         ; DATA XREF: xstrtol+19C↑o
.rodata:000000000000BCE8                                         ; xstrtol+1A7↑r
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_8A50 - 0BCE8h ; jump table for switch statement
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_89F0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_89B0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_87F0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset loc_8AB8 - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset loc_8B50 - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_8940 - 0BCE8h
.rodata:000000000000BCE8                 dd offset loc_88D0 - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset loc_88A0 - 0BCE8h, offset loc_8850 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_89F0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_89B0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_87F0 - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset loc_8B50 - 0BCE8h, offset def_87EE - 0BCE8h
.rodata:000000000000BCE8                 dd offset def_87EE - 0BCE8h, offset loc_8870 - 0BCE8h
.rodata:000000000000BDC0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000BDC0 __PRETTY_FUNCTION___4162 db 'xstrtol',0 ; DATA XREF: xstrtol:loc_8CCF↑o
.rodata:000000000000BDC8 jpt_8ED6        dd offset loc_9026 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000BDC8                                         ; xstrtoumax+1CF↑r
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_9003 - 0BDC8h ; jump table for switch statement
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_903C - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8FBF - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8ED8 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset loc_8FE0 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset loc_8F9F - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8F7A - 0BDC8h
.rodata:000000000000BDC8                 dd offset loc_8F54 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset loc_8F3D - 0BDC8h, offset loc_8F00 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_903C - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8FBF - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8ED8 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset loc_8F9F - 0BDC8h, offset def_8ED6 - 0BDC8h
.rodata:000000000000BDC8                 dd offset def_8ED6 - 0BDC8h, offset loc_8F27 - 0BDC8h
.rodata:000000000000BEA0 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000000BEA0 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:000000000000BEA0                                         ; DATA XREF: xstrtoumax:loc_9085↑o
.rodata:000000000000BEAB aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000BEAD aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_9270↑o
.rodata:000000000000BEB3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000BEB3                                         ; locale_charset:loc_92C0↑o
.rodata:000000000000BEB3 _rodata         ends
.rodata:000000000000BEB3
LOAD:000000000000BEB9 ; ===========================================================================
LOAD:000000000000BEB9
LOAD:000000000000BEB9 ; Segment type: Pure code
LOAD:000000000000BEB9 ; Segment permissions: Read/Execute
LOAD:000000000000BEB9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000BEB9                 assume cs:LOAD
LOAD:000000000000BEB9                 ;org 0BEB9h
LOAD:000000000000BEB9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000BEB9                 align 4
LOAD:000000000000BEB9 LOAD            ends
LOAD:000000000000BEB9
.eh_frame_hdr:000000000000BEBC ; ===========================================================================
.eh_frame_hdr:000000000000BEBC
.eh_frame_hdr:000000000000BEBC ; Segment type: Pure data
.eh_frame_hdr:000000000000BEBC ; Segment permissions: Read
.eh_frame_hdr:000000000000BEBC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000BEBC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000BEBC                 ;org 0BEBCh
.eh_frame_hdr:000000000000BEBC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000BEBD                 db  1Bh
.eh_frame_hdr:000000000000BEBE                 db    3
.eh_frame_hdr:000000000000BEBF                 db  3Bh ; ;
.eh_frame_hdr:000000000000BEC0                 db 0D8h
.eh_frame_hdr:000000000000BEC1                 db    2
.eh_frame_hdr:000000000000BEC2                 db    0
.eh_frame_hdr:000000000000BEC3                 db    0
.eh_frame_hdr:000000000000BEC4                 db  5Ah ; Z
.eh_frame_hdr:000000000000BEC5                 db    0
.eh_frame_hdr:000000000000BEC6                 db    0
.eh_frame_hdr:000000000000BEC7                 db    0
.eh_frame_hdr:000000000000BEC8                 db 0D4h
.eh_frame_hdr:000000000000BEC9                 db  5Ah ; Z
.eh_frame_hdr:000000000000BECA                 db 0FFh
.eh_frame_hdr:000000000000BECB                 db 0FFh
.eh_frame_hdr:000000000000BECC                 db  24h ; $
.eh_frame_hdr:000000000000BECD                 db    3
.eh_frame_hdr:000000000000BECE                 db    0
.eh_frame_hdr:000000000000BECF                 db    0
.eh_frame_hdr:000000000000BED0                 db  84h
.eh_frame_hdr:000000000000BED1                 db  5Eh ; ^
.eh_frame_hdr:000000000000BED2                 db 0FFh
.eh_frame_hdr:000000000000BED3                 db 0FFh
.eh_frame_hdr:000000000000BED4                 db  4Ch ; L
.eh_frame_hdr:000000000000BED5                 db    3
.eh_frame_hdr:000000000000BED6                 db    0
.eh_frame_hdr:000000000000BED7                 db    0
.eh_frame_hdr:000000000000BED8                 db  94h
.eh_frame_hdr:000000000000BED9                 db  5Eh ; ^
.eh_frame_hdr:000000000000BEDA                 db 0FFh
.eh_frame_hdr:000000000000BEDB                 db 0FFh
.eh_frame_hdr:000000000000BEDC                 db  98h
.eh_frame_hdr:000000000000BEDD                 db    5
.eh_frame_hdr:000000000000BEDE                 db    0
.eh_frame_hdr:000000000000BEDF                 db    0
.eh_frame_hdr:000000000000BEE0                 db 0D4h
.eh_frame_hdr:000000000000BEE1                 db  6Ch ; l
.eh_frame_hdr:000000000000BEE2                 db 0FFh
.eh_frame_hdr:000000000000BEE3                 db 0FFh
.eh_frame_hdr:000000000000BEE4                 db 0F4h
.eh_frame_hdr:000000000000BEE5                 db    2
.eh_frame_hdr:000000000000BEE6                 db    0
.eh_frame_hdr:000000000000BEE7                 db    0
.eh_frame_hdr:000000000000BEE8                 db 0E4h
.eh_frame_hdr:000000000000BEE9                 db  6Dh ; m
.eh_frame_hdr:000000000000BEEA                 db 0FFh
.eh_frame_hdr:000000000000BEEB                 db 0FFh
.eh_frame_hdr:000000000000BEEC                 db  64h ; d
.eh_frame_hdr:000000000000BEED                 db    3
.eh_frame_hdr:000000000000BEEE                 db    0
.eh_frame_hdr:000000000000BEEF                 db    0
.eh_frame_hdr:000000000000BEF0                 db  14h
.eh_frame_hdr:000000000000BEF1                 db  6Fh ; o
.eh_frame_hdr:000000000000BEF2                 db 0FFh
.eh_frame_hdr:000000000000BEF3                 db 0FFh
.eh_frame_hdr:000000000000BEF4                 db 0A4h
.eh_frame_hdr:000000000000BEF5                 db    3
.eh_frame_hdr:000000000000BEF6                 db    0
.eh_frame_hdr:000000000000BEF7                 db    0
.eh_frame_hdr:000000000000BEF8                 db  84h
.eh_frame_hdr:000000000000BEF9                 db  70h ; p
.eh_frame_hdr:000000000000BEFA                 db 0FFh
.eh_frame_hdr:000000000000BEFB                 db 0FFh
.eh_frame_hdr:000000000000BEFC                 db 0D8h
.eh_frame_hdr:000000000000BEFD                 db    3
.eh_frame_hdr:000000000000BEFE                 db    0
.eh_frame_hdr:000000000000BEFF                 db    0
.eh_frame_hdr:000000000000BF00                 db 0B4h
.eh_frame_hdr:000000000000BF01                 db  70h ; p
.eh_frame_hdr:000000000000BF02                 db 0FFh
.eh_frame_hdr:000000000000BF03                 db 0FFh
.eh_frame_hdr:000000000000BF04                 db 0F0h
.eh_frame_hdr:000000000000BF05                 db    3
.eh_frame_hdr:000000000000BF06                 db    0
.eh_frame_hdr:000000000000BF07                 db    0
.eh_frame_hdr:000000000000BF08                 db 0B4h
.eh_frame_hdr:000000000000BF09                 db  88h
.eh_frame_hdr:000000000000BF0A                 db 0FFh
.eh_frame_hdr:000000000000BF0B                 db 0FFh
.eh_frame_hdr:000000000000BF0C                 db    4
.eh_frame_hdr:000000000000BF0D                 db    5
.eh_frame_hdr:000000000000BF0E                 db    0
.eh_frame_hdr:000000000000BF0F                 db    0
.eh_frame_hdr:000000000000BF10                 db  84h
.eh_frame_hdr:000000000000BF11                 db  8Ah
.eh_frame_hdr:000000000000BF12                 db 0FFh
.eh_frame_hdr:000000000000BF13                 db 0FFh
.eh_frame_hdr:000000000000BF14                 db  50h ; P
.eh_frame_hdr:000000000000BF15                 db    5
.eh_frame_hdr:000000000000BF16                 db    0
.eh_frame_hdr:000000000000BF17                 db    0
.eh_frame_hdr:000000000000BF18                 db 0C4h
.eh_frame_hdr:000000000000BF19                 db  91h
.eh_frame_hdr:000000000000BF1A                 db 0FFh
.eh_frame_hdr:000000000000BF1B                 db 0FFh
.eh_frame_hdr:000000000000BF1C                 db 0FCh
.eh_frame_hdr:000000000000BF1D                 db    5
.eh_frame_hdr:000000000000BF1E                 db    0
.eh_frame_hdr:000000000000BF1F                 db    0
.eh_frame_hdr:000000000000BF20                 db 0E4h
.eh_frame_hdr:000000000000BF21                 db  91h
.eh_frame_hdr:000000000000BF22                 db 0FFh
.eh_frame_hdr:000000000000BF23                 db 0FFh
.eh_frame_hdr:000000000000BF24                 db  10h
.eh_frame_hdr:000000000000BF25                 db    6
.eh_frame_hdr:000000000000BF26                 db    0
.eh_frame_hdr:000000000000BF27                 db    0
.eh_frame_hdr:000000000000BF28                 db 0B4h
.eh_frame_hdr:000000000000BF29                 db  92h
.eh_frame_hdr:000000000000BF2A                 db 0FFh
.eh_frame_hdr:000000000000BF2B                 db 0FFh
.eh_frame_hdr:000000000000BF2C                 db  3Ch ; <
.eh_frame_hdr:000000000000BF2D                 db    6
.eh_frame_hdr:000000000000BF2E                 db    0
.eh_frame_hdr:000000000000BF2F                 db    0
.eh_frame_hdr:000000000000BF30                 db  74h ; t
.eh_frame_hdr:000000000000BF31                 db  98h
.eh_frame_hdr:000000000000BF32                 db 0FFh
.eh_frame_hdr:000000000000BF33                 db 0FFh
.eh_frame_hdr:000000000000BF34                 db  88h
.eh_frame_hdr:000000000000BF35                 db    6
.eh_frame_hdr:000000000000BF36                 db    0
.eh_frame_hdr:000000000000BF37                 db    0
.eh_frame_hdr:000000000000BF38                 db 0B4h
.eh_frame_hdr:000000000000BF39                 db  98h
.eh_frame_hdr:000000000000BF3A                 db 0FFh
.eh_frame_hdr:000000000000BF3B                 db 0FFh
.eh_frame_hdr:000000000000BF3C                 db 0A4h
.eh_frame_hdr:000000000000BF3D                 db    6
.eh_frame_hdr:000000000000BF3E                 db    0
.eh_frame_hdr:000000000000BF3F                 db    0
.eh_frame_hdr:000000000000BF40                 db 0C4h
.eh_frame_hdr:000000000000BF41                 db  98h
.eh_frame_hdr:000000000000BF42                 db 0FFh
.eh_frame_hdr:000000000000BF43                 db 0FFh
.eh_frame_hdr:000000000000BF44                 db 0B8h
.eh_frame_hdr:000000000000BF45                 db    6
.eh_frame_hdr:000000000000BF46                 db    0
.eh_frame_hdr:000000000000BF47                 db    0
.eh_frame_hdr:000000000000BF48                 db 0E4h
.eh_frame_hdr:000000000000BF49                 db  99h
.eh_frame_hdr:000000000000BF4A                 db 0FFh
.eh_frame_hdr:000000000000BF4B                 db 0FFh
.eh_frame_hdr:000000000000BF4C                 db    4
.eh_frame_hdr:000000000000BF4D                 db    7
.eh_frame_hdr:000000000000BF4E                 db    0
.eh_frame_hdr:000000000000BF4F                 db    0
.eh_frame_hdr:000000000000BF50                 db  64h ; d
.eh_frame_hdr:000000000000BF51                 db  9Ah
.eh_frame_hdr:000000000000BF52                 db 0FFh
.eh_frame_hdr:000000000000BF53                 db 0FFh
.eh_frame_hdr:000000000000BF54                 db  30h ; 0
.eh_frame_hdr:000000000000BF55                 db    7
.eh_frame_hdr:000000000000BF56                 db    0
.eh_frame_hdr:000000000000BF57                 db    0
.eh_frame_hdr:000000000000BF58                 db  84h
.eh_frame_hdr:000000000000BF59                 db  9Bh
.eh_frame_hdr:000000000000BF5A                 db 0FFh
.eh_frame_hdr:000000000000BF5B                 db 0FFh
.eh_frame_hdr:000000000000BF5C                 db  90h
.eh_frame_hdr:000000000000BF5D                 db    7
.eh_frame_hdr:000000000000BF5E                 db    0
.eh_frame_hdr:000000000000BF5F                 db    0
.eh_frame_hdr:000000000000BF60                 db 0F4h
.eh_frame_hdr:000000000000BF61                 db  9Bh
.eh_frame_hdr:000000000000BF62                 db 0FFh
.eh_frame_hdr:000000000000BF63                 db 0FFh
.eh_frame_hdr:000000000000BF64                 db 0DCh
.eh_frame_hdr:000000000000BF65                 db    7
.eh_frame_hdr:000000000000BF66                 db    0
.eh_frame_hdr:000000000000BF67                 db    0
.eh_frame_hdr:000000000000BF68                 db  44h ; D
.eh_frame_hdr:000000000000BF69                 db  9Ch
.eh_frame_hdr:000000000000BF6A                 db 0FFh
.eh_frame_hdr:000000000000BF6B                 db 0FFh
.eh_frame_hdr:000000000000BF6C                 db  1Ch
.eh_frame_hdr:000000000000BF6D                 db    8
.eh_frame_hdr:000000000000BF6E                 db    0
.eh_frame_hdr:000000000000BF6F                 db    0
.eh_frame_hdr:000000000000BF70                 db  54h ; T
.eh_frame_hdr:000000000000BF71                 db  9Ch
.eh_frame_hdr:000000000000BF72                 db 0FFh
.eh_frame_hdr:000000000000BF73                 db 0FFh
.eh_frame_hdr:000000000000BF74                 db  30h ; 0
.eh_frame_hdr:000000000000BF75                 db    8
.eh_frame_hdr:000000000000BF76                 db    0
.eh_frame_hdr:000000000000BF77                 db    0
.eh_frame_hdr:000000000000BF78                 db  64h ; d
.eh_frame_hdr:000000000000BF79                 db  9Ch
.eh_frame_hdr:000000000000BF7A                 db 0FFh
.eh_frame_hdr:000000000000BF7B                 db 0FFh
.eh_frame_hdr:000000000000BF7C                 db  44h ; D
.eh_frame_hdr:000000000000BF7D                 db    8
.eh_frame_hdr:000000000000BF7E                 db    0
.eh_frame_hdr:000000000000BF7F                 db    0
.eh_frame_hdr:000000000000BF80                 db  14h
.eh_frame_hdr:000000000000BF81                 db  9Dh
.eh_frame_hdr:000000000000BF82                 db 0FFh
.eh_frame_hdr:000000000000BF83                 db 0FFh
.eh_frame_hdr:000000000000BF84                 db  74h ; t
.eh_frame_hdr:000000000000BF85                 db    8
.eh_frame_hdr:000000000000BF86                 db    0
.eh_frame_hdr:000000000000BF87                 db    0
.eh_frame_hdr:000000000000BF88                 db 0E4h
.eh_frame_hdr:000000000000BF89                 db 0A0h
.eh_frame_hdr:000000000000BF8A                 db 0FFh
.eh_frame_hdr:000000000000BF8B                 db 0FFh
.eh_frame_hdr:000000000000BF8C                 db 0C0h
.eh_frame_hdr:000000000000BF8D                 db    8
.eh_frame_hdr:000000000000BF8E                 db    0
.eh_frame_hdr:000000000000BF8F                 db    0
.eh_frame_hdr:000000000000BF90                 db  84h
.eh_frame_hdr:000000000000BF91                 db 0A1h
.eh_frame_hdr:000000000000BF92                 db 0FFh
.eh_frame_hdr:000000000000BF93                 db 0FFh
.eh_frame_hdr:000000000000BF94                 db  0Ch
.eh_frame_hdr:000000000000BF95                 db    9
.eh_frame_hdr:000000000000BF96                 db    0
.eh_frame_hdr:000000000000BF97                 db    0
.eh_frame_hdr:000000000000BF98                 db  24h ; $
.eh_frame_hdr:000000000000BF99                 db 0A2h
.eh_frame_hdr:000000000000BF9A                 db 0FFh
.eh_frame_hdr:000000000000BF9B                 db 0FFh
.eh_frame_hdr:000000000000BF9C                 db  2Ch ; ,
.eh_frame_hdr:000000000000BF9D                 db    9
.eh_frame_hdr:000000000000BF9E                 db    0
.eh_frame_hdr:000000000000BF9F                 db    0
.eh_frame_hdr:000000000000BFA0                 db  14h
.eh_frame_hdr:000000000000BFA1                 db 0A3h
.eh_frame_hdr:000000000000BFA2                 db 0FFh
.eh_frame_hdr:000000000000BFA3                 db 0FFh
.eh_frame_hdr:000000000000BFA4                 db  70h ; p
.eh_frame_hdr:000000000000BFA5                 db    9
.eh_frame_hdr:000000000000BFA6                 db    0
.eh_frame_hdr:000000000000BFA7                 db    0
.eh_frame_hdr:000000000000BFA8                 db  54h ; T
.eh_frame_hdr:000000000000BFA9                 db 0B5h
.eh_frame_hdr:000000000000BFAA                 db 0FFh
.eh_frame_hdr:000000000000BFAB                 db 0FFh
.eh_frame_hdr:000000000000BFAC                 db 0E8h
.eh_frame_hdr:000000000000BFAD                 db    9
.eh_frame_hdr:000000000000BFAE                 db    0
.eh_frame_hdr:000000000000BFAF                 db    0
.eh_frame_hdr:000000000000BFB0                 db    4
.eh_frame_hdr:000000000000BFB1                 db 0B7h
.eh_frame_hdr:000000000000BFB2                 db 0FFh
.eh_frame_hdr:000000000000BFB3                 db 0FFh
.eh_frame_hdr:000000000000BFB4                 db  54h ; T
.eh_frame_hdr:000000000000BFB5                 db  0Ah
.eh_frame_hdr:000000000000BFB6                 db    0
.eh_frame_hdr:000000000000BFB7                 db    0
.eh_frame_hdr:000000000000BFB8                 db  44h ; D
.eh_frame_hdr:000000000000BFB9                 db 0B7h
.eh_frame_hdr:000000000000BFBA                 db 0FFh
.eh_frame_hdr:000000000000BFBB                 db 0FFh
.eh_frame_hdr:000000000000BFBC                 db  80h
.eh_frame_hdr:000000000000BFBD                 db  0Ah
.eh_frame_hdr:000000000000BFBE                 db    0
.eh_frame_hdr:000000000000BFBF                 db    0
.eh_frame_hdr:000000000000BFC0                 db  64h ; d
.eh_frame_hdr:000000000000BFC1                 db 0B7h
.eh_frame_hdr:000000000000BFC2                 db 0FFh
.eh_frame_hdr:000000000000BFC3                 db 0FFh
.eh_frame_hdr:000000000000BFC4                 db  94h
.eh_frame_hdr:000000000000BFC5                 db  0Ah
.eh_frame_hdr:000000000000BFC6                 db    0
.eh_frame_hdr:000000000000BFC7                 db    0
.eh_frame_hdr:000000000000BFC8                 db  84h
.eh_frame_hdr:000000000000BFC9                 db 0B7h
.eh_frame_hdr:000000000000BFCA                 db 0FFh
.eh_frame_hdr:000000000000BFCB                 db 0FFh
.eh_frame_hdr:000000000000BFCC                 db 0A8h
.eh_frame_hdr:000000000000BFCD                 db  0Ah
.eh_frame_hdr:000000000000BFCE                 db    0
.eh_frame_hdr:000000000000BFCF                 db    0
.eh_frame_hdr:000000000000BFD0                 db 0C4h
.eh_frame_hdr:000000000000BFD1                 db 0B7h
.eh_frame_hdr:000000000000BFD2                 db 0FFh
.eh_frame_hdr:000000000000BFD3                 db 0FFh
.eh_frame_hdr:000000000000BFD4                 db 0BCh
.eh_frame_hdr:000000000000BFD5                 db  0Ah
.eh_frame_hdr:000000000000BFD6                 db    0
.eh_frame_hdr:000000000000BFD7                 db    0
.eh_frame_hdr:000000000000BFD8                 db 0E4h
.eh_frame_hdr:000000000000BFD9                 db 0B7h
.eh_frame_hdr:000000000000BFDA                 db 0FFh
.eh_frame_hdr:000000000000BFDB                 db 0FFh
.eh_frame_hdr:000000000000BFDC                 db 0D0h
.eh_frame_hdr:000000000000BFDD                 db  0Ah
.eh_frame_hdr:000000000000BFDE                 db    0
.eh_frame_hdr:000000000000BFDF                 db    0
.eh_frame_hdr:000000000000BFE0                 db  14h
.eh_frame_hdr:000000000000BFE1                 db 0B8h
.eh_frame_hdr:000000000000BFE2                 db 0FFh
.eh_frame_hdr:000000000000BFE3                 db 0FFh
.eh_frame_hdr:000000000000BFE4                 db 0E4h
.eh_frame_hdr:000000000000BFE5                 db  0Ah
.eh_frame_hdr:000000000000BFE6                 db    0
.eh_frame_hdr:000000000000BFE7                 db    0
.eh_frame_hdr:000000000000BFE8                 db  94h
.eh_frame_hdr:000000000000BFE9                 db 0B8h
.eh_frame_hdr:000000000000BFEA                 db 0FFh
.eh_frame_hdr:000000000000BFEB                 db 0FFh
.eh_frame_hdr:000000000000BFEC                 db  38h ; 8
.eh_frame_hdr:000000000000BFED                 db  0Bh
.eh_frame_hdr:000000000000BFEE                 db    0
.eh_frame_hdr:000000000000BFEF                 db    0
.eh_frame_hdr:000000000000BFF0                 db  84h
.eh_frame_hdr:000000000000BFF1                 db 0B9h
.eh_frame_hdr:000000000000BFF2                 db 0FFh
.eh_frame_hdr:000000000000BFF3                 db 0FFh
.eh_frame_hdr:000000000000BFF4                 db 0A4h
.eh_frame_hdr:000000000000BFF5                 db  0Bh
.eh_frame_hdr:000000000000BFF6                 db    0
.eh_frame_hdr:000000000000BFF7                 db    0
.eh_frame_hdr:000000000000BFF8                 db  94h
.eh_frame_hdr:000000000000BFF9                 db 0B9h
.eh_frame_hdr:000000000000BFFA                 db 0FFh
.eh_frame_hdr:000000000000BFFB                 db 0FFh
.eh_frame_hdr:000000000000BFFC                 db 0B8h
.eh_frame_hdr:000000000000BFFD                 db  0Bh
.eh_frame_hdr:000000000000BFFE                 db    0
.eh_frame_hdr:000000000000BFFF                 db    0
.eh_frame_hdr:000000000000C000                 db  34h ; 4
.eh_frame_hdr:000000000000C001                 db 0BAh
.eh_frame_hdr:000000000000C002                 db 0FFh
.eh_frame_hdr:000000000000C003                 db 0FFh
.eh_frame_hdr:000000000000C004                 db 0E4h
.eh_frame_hdr:000000000000C005                 db  0Bh
.eh_frame_hdr:000000000000C006                 db    0
.eh_frame_hdr:000000000000C007                 db    0
.eh_frame_hdr:000000000000C008                 db  54h ; T
.eh_frame_hdr:000000000000C009                 db 0BAh
.eh_frame_hdr:000000000000C00A                 db 0FFh
.eh_frame_hdr:000000000000C00B                 db 0FFh
.eh_frame_hdr:000000000000C00C                 db 0F8h
.eh_frame_hdr:000000000000C00D                 db  0Bh
.eh_frame_hdr:000000000000C00E                 db    0
.eh_frame_hdr:000000000000C00F                 db    0
.eh_frame_hdr:000000000000C010                 db  64h ; d
.eh_frame_hdr:000000000000C011                 db 0BAh
.eh_frame_hdr:000000000000C012                 db 0FFh
.eh_frame_hdr:000000000000C013                 db 0FFh
.eh_frame_hdr:000000000000C014                 db  0Ch
.eh_frame_hdr:000000000000C015                 db  0Ch
.eh_frame_hdr:000000000000C016                 db    0
.eh_frame_hdr:000000000000C017                 db    0
.eh_frame_hdr:000000000000C018                 db  84h
.eh_frame_hdr:000000000000C019                 db 0BAh
.eh_frame_hdr:000000000000C01A                 db 0FFh
.eh_frame_hdr:000000000000C01B                 db 0FFh
.eh_frame_hdr:000000000000C01C                 db  20h
.eh_frame_hdr:000000000000C01D                 db  0Ch
.eh_frame_hdr:000000000000C01E                 db    0
.eh_frame_hdr:000000000000C01F                 db    0
.eh_frame_hdr:000000000000C020                 db 0A4h
.eh_frame_hdr:000000000000C021                 db 0BAh
.eh_frame_hdr:000000000000C022                 db 0FFh
.eh_frame_hdr:000000000000C023                 db 0FFh
.eh_frame_hdr:000000000000C024                 db  34h ; 4
.eh_frame_hdr:000000000000C025                 db  0Ch
.eh_frame_hdr:000000000000C026                 db    0
.eh_frame_hdr:000000000000C027                 db    0
.eh_frame_hdr:000000000000C028                 db  34h ; 4
.eh_frame_hdr:000000000000C029                 db 0BBh
.eh_frame_hdr:000000000000C02A                 db 0FFh
.eh_frame_hdr:000000000000C02B                 db 0FFh
.eh_frame_hdr:000000000000C02C                 db  50h ; P
.eh_frame_hdr:000000000000C02D                 db  0Ch
.eh_frame_hdr:000000000000C02E                 db    0
.eh_frame_hdr:000000000000C02F                 db    0
.eh_frame_hdr:000000000000C030                 db 0C4h
.eh_frame_hdr:000000000000C031                 db 0BBh
.eh_frame_hdr:000000000000C032                 db 0FFh
.eh_frame_hdr:000000000000C033                 db 0FFh
.eh_frame_hdr:000000000000C034                 db  6Ch ; l
.eh_frame_hdr:000000000000C035                 db  0Ch
.eh_frame_hdr:000000000000C036                 db    0
.eh_frame_hdr:000000000000C037                 db    0
.eh_frame_hdr:000000000000C038                 db 0D4h
.eh_frame_hdr:000000000000C039                 db 0BBh
.eh_frame_hdr:000000000000C03A                 db 0FFh
.eh_frame_hdr:000000000000C03B                 db 0FFh
.eh_frame_hdr:000000000000C03C                 db  80h
.eh_frame_hdr:000000000000C03D                 db  0Ch
.eh_frame_hdr:000000000000C03E                 db    0
.eh_frame_hdr:000000000000C03F                 db    0
.eh_frame_hdr:000000000000C040                 db 0E4h
.eh_frame_hdr:000000000000C041                 db 0BBh
.eh_frame_hdr:000000000000C042                 db 0FFh
.eh_frame_hdr:000000000000C043                 db 0FFh
.eh_frame_hdr:000000000000C044                 db  94h
.eh_frame_hdr:000000000000C045                 db  0Ch
.eh_frame_hdr:000000000000C046                 db    0
.eh_frame_hdr:000000000000C047                 db    0
.eh_frame_hdr:000000000000C048                 db  84h
.eh_frame_hdr:000000000000C049                 db 0BCh
.eh_frame_hdr:000000000000C04A                 db 0FFh
.eh_frame_hdr:000000000000C04B                 db 0FFh
.eh_frame_hdr:000000000000C04C                 db 0B0h
.eh_frame_hdr:000000000000C04D                 db  0Ch
.eh_frame_hdr:000000000000C04E                 db    0
.eh_frame_hdr:000000000000C04F                 db    0
.eh_frame_hdr:000000000000C050                 db  94h
.eh_frame_hdr:000000000000C051                 db 0BCh
.eh_frame_hdr:000000000000C052                 db 0FFh
.eh_frame_hdr:000000000000C053                 db 0FFh
.eh_frame_hdr:000000000000C054                 db 0C4h
.eh_frame_hdr:000000000000C055                 db  0Ch
.eh_frame_hdr:000000000000C056                 db    0
.eh_frame_hdr:000000000000C057                 db    0
.eh_frame_hdr:000000000000C058                 db 0B4h
.eh_frame_hdr:000000000000C059                 db 0BCh
.eh_frame_hdr:000000000000C05A                 db 0FFh
.eh_frame_hdr:000000000000C05B                 db 0FFh
.eh_frame_hdr:000000000000C05C                 db 0D8h
.eh_frame_hdr:000000000000C05D                 db  0Ch
.eh_frame_hdr:000000000000C05E                 db    0
.eh_frame_hdr:000000000000C05F                 db    0
.eh_frame_hdr:000000000000C060                 db 0C4h
.eh_frame_hdr:000000000000C061                 db 0BCh
.eh_frame_hdr:000000000000C062                 db 0FFh
.eh_frame_hdr:000000000000C063                 db 0FFh
.eh_frame_hdr:000000000000C064                 db 0ECh
.eh_frame_hdr:000000000000C065                 db  0Ch
.eh_frame_hdr:000000000000C066                 db    0
.eh_frame_hdr:000000000000C067                 db    0
.eh_frame_hdr:000000000000C068                 db  54h ; T
.eh_frame_hdr:000000000000C069                 db 0BDh
.eh_frame_hdr:000000000000C06A                 db 0FFh
.eh_frame_hdr:000000000000C06B                 db 0FFh
.eh_frame_hdr:000000000000C06C                 db    8
.eh_frame_hdr:000000000000C06D                 db  0Dh
.eh_frame_hdr:000000000000C06E                 db    0
.eh_frame_hdr:000000000000C06F                 db    0
.eh_frame_hdr:000000000000C070                 db 0F4h
.eh_frame_hdr:000000000000C071                 db 0BDh
.eh_frame_hdr:000000000000C072                 db 0FFh
.eh_frame_hdr:000000000000C073                 db 0FFh
.eh_frame_hdr:000000000000C074                 db  24h ; $
.eh_frame_hdr:000000000000C075                 db  0Dh
.eh_frame_hdr:000000000000C076                 db    0
.eh_frame_hdr:000000000000C077                 db    0
.eh_frame_hdr:000000000000C078                 db    4
.eh_frame_hdr:000000000000C079                 db 0BEh
.eh_frame_hdr:000000000000C07A                 db 0FFh
.eh_frame_hdr:000000000000C07B                 db 0FFh
.eh_frame_hdr:000000000000C07C                 db  38h ; 8
.eh_frame_hdr:000000000000C07D                 db  0Dh
.eh_frame_hdr:000000000000C07E                 db    0
.eh_frame_hdr:000000000000C07F                 db    0
.eh_frame_hdr:000000000000C080                 db  24h ; $
.eh_frame_hdr:000000000000C081                 db 0BEh
.eh_frame_hdr:000000000000C082                 db 0FFh
.eh_frame_hdr:000000000000C083                 db 0FFh
.eh_frame_hdr:000000000000C084                 db  4Ch ; L
.eh_frame_hdr:000000000000C085                 db  0Dh
.eh_frame_hdr:000000000000C086                 db    0
.eh_frame_hdr:000000000000C087                 db    0
.eh_frame_hdr:000000000000C088                 db  44h ; D
.eh_frame_hdr:000000000000C089                 db 0BEh
.eh_frame_hdr:000000000000C08A                 db 0FFh
.eh_frame_hdr:000000000000C08B                 db 0FFh
.eh_frame_hdr:000000000000C08C                 db  60h ; `
.eh_frame_hdr:000000000000C08D                 db  0Dh
.eh_frame_hdr:000000000000C08E                 db    0
.eh_frame_hdr:000000000000C08F                 db    0
.eh_frame_hdr:000000000000C090                 db  54h ; T
.eh_frame_hdr:000000000000C091                 db 0BEh
.eh_frame_hdr:000000000000C092                 db 0FFh
.eh_frame_hdr:000000000000C093                 db 0FFh
.eh_frame_hdr:000000000000C094                 db  74h ; t
.eh_frame_hdr:000000000000C095                 db  0Dh
.eh_frame_hdr:000000000000C096                 db    0
.eh_frame_hdr:000000000000C097                 db    0
.eh_frame_hdr:000000000000C098                 db  74h ; t
.eh_frame_hdr:000000000000C099                 db 0BEh
.eh_frame_hdr:000000000000C09A                 db 0FFh
.eh_frame_hdr:000000000000C09B                 db 0FFh
.eh_frame_hdr:000000000000C09C                 db  88h
.eh_frame_hdr:000000000000C09D                 db  0Dh
.eh_frame_hdr:000000000000C09E                 db    0
.eh_frame_hdr:000000000000C09F                 db    0
.eh_frame_hdr:000000000000C0A0                 db  94h
.eh_frame_hdr:000000000000C0A1                 db 0BEh
.eh_frame_hdr:000000000000C0A2                 db 0FFh
.eh_frame_hdr:000000000000C0A3                 db 0FFh
.eh_frame_hdr:000000000000C0A4                 db  9Ch
.eh_frame_hdr:000000000000C0A5                 db  0Dh
.eh_frame_hdr:000000000000C0A6                 db    0
.eh_frame_hdr:000000000000C0A7                 db    0
.eh_frame_hdr:000000000000C0A8                 db 0B4h
.eh_frame_hdr:000000000000C0A9                 db 0BEh
.eh_frame_hdr:000000000000C0AA                 db 0FFh
.eh_frame_hdr:000000000000C0AB                 db 0FFh
.eh_frame_hdr:000000000000C0AC                 db 0B4h
.eh_frame_hdr:000000000000C0AD                 db  0Dh
.eh_frame_hdr:000000000000C0AE                 db    0
.eh_frame_hdr:000000000000C0AF                 db    0
.eh_frame_hdr:000000000000C0B0                 db 0D4h
.eh_frame_hdr:000000000000C0B1                 db 0C2h
.eh_frame_hdr:000000000000C0B2                 db 0FFh
.eh_frame_hdr:000000000000C0B3                 db 0FFh
.eh_frame_hdr:000000000000C0B4                 db 0C8h
.eh_frame_hdr:000000000000C0B5                 db  0Eh
.eh_frame_hdr:000000000000C0B6                 db    0
.eh_frame_hdr:000000000000C0B7                 db    0
.eh_frame_hdr:000000000000C0B8                 db 0F4h
.eh_frame_hdr:000000000000C0B9                 db 0C2h
.eh_frame_hdr:000000000000C0BA                 db 0FFh
.eh_frame_hdr:000000000000C0BB                 db 0FFh
.eh_frame_hdr:000000000000C0BC                 db 0DCh
.eh_frame_hdr:000000000000C0BD                 db  0Eh
.eh_frame_hdr:000000000000C0BE                 db    0
.eh_frame_hdr:000000000000C0BF                 db    0
.eh_frame_hdr:000000000000C0C0                 db  74h ; t
.eh_frame_hdr:000000000000C0C1                 db 0C3h
.eh_frame_hdr:000000000000C0C2                 db 0FFh
.eh_frame_hdr:000000000000C0C3                 db 0FFh
.eh_frame_hdr:000000000000C0C4                 db 0F8h
.eh_frame_hdr:000000000000C0C5                 db  0Eh
.eh_frame_hdr:000000000000C0C6                 db    0
.eh_frame_hdr:000000000000C0C7                 db    0
.eh_frame_hdr:000000000000C0C8                 db  54h ; T
.eh_frame_hdr:000000000000C0C9                 db 0C4h
.eh_frame_hdr:000000000000C0CA                 db 0FFh
.eh_frame_hdr:000000000000C0CB                 db 0FFh
.eh_frame_hdr:000000000000C0CC                 db  24h ; $
.eh_frame_hdr:000000000000C0CD                 db  0Fh
.eh_frame_hdr:000000000000C0CE                 db    0
.eh_frame_hdr:000000000000C0CF                 db    0
.eh_frame_hdr:000000000000C0D0                 db 0D4h
.eh_frame_hdr:000000000000C0D1                 db 0C4h
.eh_frame_hdr:000000000000C0D2                 db 0FFh
.eh_frame_hdr:000000000000C0D3                 db 0FFh
.eh_frame_hdr:000000000000C0D4                 db  44h ; D
.eh_frame_hdr:000000000000C0D5                 db  0Fh
.eh_frame_hdr:000000000000C0D6                 db    0
.eh_frame_hdr:000000000000C0D7                 db    0
.eh_frame_hdr:000000000000C0D8                 db 0F4h
.eh_frame_hdr:000000000000C0D9                 db 0C4h
.eh_frame_hdr:000000000000C0DA                 db 0FFh
.eh_frame_hdr:000000000000C0DB                 db 0FFh
.eh_frame_hdr:000000000000C0DC                 db  60h ; `
.eh_frame_hdr:000000000000C0DD                 db  0Fh
.eh_frame_hdr:000000000000C0DE                 db    0
.eh_frame_hdr:000000000000C0DF                 db    0
.eh_frame_hdr:000000000000C0E0                 db  24h ; $
.eh_frame_hdr:000000000000C0E1                 db 0C5h
.eh_frame_hdr:000000000000C0E2                 db 0FFh
.eh_frame_hdr:000000000000C0E3                 db 0FFh
.eh_frame_hdr:000000000000C0E4                 db  74h ; t
.eh_frame_hdr:000000000000C0E5                 db  0Fh
.eh_frame_hdr:000000000000C0E6                 db    0
.eh_frame_hdr:000000000000C0E7                 db    0
.eh_frame_hdr:000000000000C0E8                 db  34h ; 4
.eh_frame_hdr:000000000000C0E9                 db 0C5h
.eh_frame_hdr:000000000000C0EA                 db 0FFh
.eh_frame_hdr:000000000000C0EB                 db 0FFh
.eh_frame_hdr:000000000000C0EC                 db  88h
.eh_frame_hdr:000000000000C0ED                 db  0Fh
.eh_frame_hdr:000000000000C0EE                 db    0
.eh_frame_hdr:000000000000C0EF                 db    0
.eh_frame_hdr:000000000000C0F0                 db  74h ; t
.eh_frame_hdr:000000000000C0F1                 db 0C5h
.eh_frame_hdr:000000000000C0F2                 db 0FFh
.eh_frame_hdr:000000000000C0F3                 db 0FFh
.eh_frame_hdr:000000000000C0F4                 db 0ACh
.eh_frame_hdr:000000000000C0F5                 db  0Fh
.eh_frame_hdr:000000000000C0F6                 db    0
.eh_frame_hdr:000000000000C0F7                 db    0
.eh_frame_hdr:000000000000C0F8                 db 0A4h
.eh_frame_hdr:000000000000C0F9                 db 0C5h
.eh_frame_hdr:000000000000C0FA                 db 0FFh
.eh_frame_hdr:000000000000C0FB                 db 0FFh
.eh_frame_hdr:000000000000C0FC                 db 0C0h
.eh_frame_hdr:000000000000C0FD                 db  0Fh
.eh_frame_hdr:000000000000C0FE                 db    0
.eh_frame_hdr:000000000000C0FF                 db    0
.eh_frame_hdr:000000000000C100                 db  34h ; 4
.eh_frame_hdr:000000000000C101                 db 0C6h
.eh_frame_hdr:000000000000C102                 db 0FFh
.eh_frame_hdr:000000000000C103                 db 0FFh
.eh_frame_hdr:000000000000C104                 db 0D8h
.eh_frame_hdr:000000000000C105                 db  0Fh
.eh_frame_hdr:000000000000C106                 db    0
.eh_frame_hdr:000000000000C107                 db    0
.eh_frame_hdr:000000000000C108                 db  84h
.eh_frame_hdr:000000000000C109                 db 0C6h
.eh_frame_hdr:000000000000C10A                 db 0FFh
.eh_frame_hdr:000000000000C10B                 db 0FFh
.eh_frame_hdr:000000000000C10C                 db 0F0h
.eh_frame_hdr:000000000000C10D                 db  0Fh
.eh_frame_hdr:000000000000C10E                 db    0
.eh_frame_hdr:000000000000C10F                 db    0
.eh_frame_hdr:000000000000C110                 db 0A4h
.eh_frame_hdr:000000000000C111                 db 0C6h
.eh_frame_hdr:000000000000C112                 db 0FFh
.eh_frame_hdr:000000000000C113                 db 0FFh
.eh_frame_hdr:000000000000C114                 db  0Ch
.eh_frame_hdr:000000000000C115                 db  10h
.eh_frame_hdr:000000000000C116                 db    0
.eh_frame_hdr:000000000000C117                 db    0
.eh_frame_hdr:000000000000C118                 db 0D4h
.eh_frame_hdr:000000000000C119                 db 0C6h
.eh_frame_hdr:000000000000C11A                 db 0FFh
.eh_frame_hdr:000000000000C11B                 db 0FFh
.eh_frame_hdr:000000000000C11C                 db  28h ; (
.eh_frame_hdr:000000000000C11D                 db  10h
.eh_frame_hdr:000000000000C11E                 db    0
.eh_frame_hdr:000000000000C11F                 db    0
.eh_frame_hdr:000000000000C120                 db    4
.eh_frame_hdr:000000000000C121                 db 0C7h
.eh_frame_hdr:000000000000C122                 db 0FFh
.eh_frame_hdr:000000000000C123                 db 0FFh
.eh_frame_hdr:000000000000C124                 db  50h ; P
.eh_frame_hdr:000000000000C125                 db  10h
.eh_frame_hdr:000000000000C126                 db    0
.eh_frame_hdr:000000000000C127                 db    0
.eh_frame_hdr:000000000000C128                 db  24h ; $
.eh_frame_hdr:000000000000C129                 db 0C7h
.eh_frame_hdr:000000000000C12A                 db 0FFh
.eh_frame_hdr:000000000000C12B                 db 0FFh
.eh_frame_hdr:000000000000C12C                 db  6Ch ; l
.eh_frame_hdr:000000000000C12D                 db  10h
.eh_frame_hdr:000000000000C12E                 db    0
.eh_frame_hdr:000000000000C12F                 db    0
.eh_frame_hdr:000000000000C130                 db  64h ; d
.eh_frame_hdr:000000000000C131                 db 0C7h
.eh_frame_hdr:000000000000C132                 db 0FFh
.eh_frame_hdr:000000000000C133                 db 0FFh
.eh_frame_hdr:000000000000C134                 db  84h
.eh_frame_hdr:000000000000C135                 db  10h
.eh_frame_hdr:000000000000C136                 db    0
.eh_frame_hdr:000000000000C137                 db    0
.eh_frame_hdr:000000000000C138                 db  84h
.eh_frame_hdr:000000000000C139                 db 0C7h
.eh_frame_hdr:000000000000C13A                 db 0FFh
.eh_frame_hdr:000000000000C13B                 db 0FFh
.eh_frame_hdr:000000000000C13C                 db 0A4h
.eh_frame_hdr:000000000000C13D                 db  10h
.eh_frame_hdr:000000000000C13E                 db    0
.eh_frame_hdr:000000000000C13F                 db    0
.eh_frame_hdr:000000000000C140                 db  44h ; D
.eh_frame_hdr:000000000000C141                 db 0CEh
.eh_frame_hdr:000000000000C142                 db 0FFh
.eh_frame_hdr:000000000000C143                 db 0FFh
.eh_frame_hdr:000000000000C144                 db 0F4h
.eh_frame_hdr:000000000000C145                 db  10h
.eh_frame_hdr:000000000000C146                 db    0
.eh_frame_hdr:000000000000C147                 db    0
.eh_frame_hdr:000000000000C148                 db  64h ; d
.eh_frame_hdr:000000000000C149                 db 0D2h
.eh_frame_hdr:000000000000C14A                 db 0FFh
.eh_frame_hdr:000000000000C14B                 db 0FFh
.eh_frame_hdr:000000000000C14C                 db  44h ; D
.eh_frame_hdr:000000000000C14D                 db  11h
.eh_frame_hdr:000000000000C14E                 db    0
.eh_frame_hdr:000000000000C14F                 db    0
.eh_frame_hdr:000000000000C150                 db 0F4h
.eh_frame_hdr:000000000000C151                 db 0D2h
.eh_frame_hdr:000000000000C152                 db 0FFh
.eh_frame_hdr:000000000000C153                 db 0FFh
.eh_frame_hdr:000000000000C154                 db  84h
.eh_frame_hdr:000000000000C155                 db  11h
.eh_frame_hdr:000000000000C156                 db    0
.eh_frame_hdr:000000000000C157                 db    0
.eh_frame_hdr:000000000000C158                 db  74h ; t
.eh_frame_hdr:000000000000C159                 db 0D3h
.eh_frame_hdr:000000000000C15A                 db 0FFh
.eh_frame_hdr:000000000000C15B                 db 0FFh
.eh_frame_hdr:000000000000C15C                 db 0D4h
.eh_frame_hdr:000000000000C15D                 db  11h
.eh_frame_hdr:000000000000C15E                 db    0
.eh_frame_hdr:000000000000C15F                 db    0
.eh_frame_hdr:000000000000C160                 db 0D4h
.eh_frame_hdr:000000000000C161                 db 0D3h
.eh_frame_hdr:000000000000C162                 db 0FFh
.eh_frame_hdr:000000000000C163                 db 0FFh
.eh_frame_hdr:000000000000C164                 db 0F4h
.eh_frame_hdr:000000000000C165                 db  11h
.eh_frame_hdr:000000000000C166                 db    0
.eh_frame_hdr:000000000000C167                 db    0
.eh_frame_hdr:000000000000C168                 db  14h
.eh_frame_hdr:000000000000C169                 db 0D4h
.eh_frame_hdr:000000000000C16A                 db 0FFh
.eh_frame_hdr:000000000000C16B                 db 0FFh
.eh_frame_hdr:000000000000C16C                 db  14h
.eh_frame_hdr:000000000000C16D                 db  12h
.eh_frame_hdr:000000000000C16E                 db    0
.eh_frame_hdr:000000000000C16F                 db    0
.eh_frame_hdr:000000000000C170                 db  94h
.eh_frame_hdr:000000000000C171                 db 0D4h
.eh_frame_hdr:000000000000C172                 db 0FFh
.eh_frame_hdr:000000000000C173                 db 0FFh
.eh_frame_hdr:000000000000C174                 db  4Ch ; L
.eh_frame_hdr:000000000000C175                 db  12h
.eh_frame_hdr:000000000000C176                 db    0
.eh_frame_hdr:000000000000C177                 db    0
.eh_frame_hdr:000000000000C178                 db 0D4h
.eh_frame_hdr:000000000000C179                 db 0D4h
.eh_frame_hdr:000000000000C17A                 db 0FFh
.eh_frame_hdr:000000000000C17B                 db 0FFh
.eh_frame_hdr:000000000000C17C                 db  6Ch ; l
.eh_frame_hdr:000000000000C17D                 db  12h
.eh_frame_hdr:000000000000C17E                 db    0
.eh_frame_hdr:000000000000C17F                 db    0
.eh_frame_hdr:000000000000C180                 db  34h ; 4
.eh_frame_hdr:000000000000C181                 db 0D5h
.eh_frame_hdr:000000000000C182                 db 0FFh
.eh_frame_hdr:000000000000C183                 db 0FFh
.eh_frame_hdr:000000000000C184                 db  9Ch
.eh_frame_hdr:000000000000C185                 db  12h
.eh_frame_hdr:000000000000C186                 db    0
.eh_frame_hdr:000000000000C187                 db    0
.eh_frame_hdr:000000000000C188                 db 0A4h
.eh_frame_hdr:000000000000C189                 db 0D5h
.eh_frame_hdr:000000000000C18A                 db 0FFh
.eh_frame_hdr:000000000000C18B                 db 0FFh
.eh_frame_hdr:000000000000C18C                 db 0E4h
.eh_frame_hdr:000000000000C18D                 db  12h
.eh_frame_hdr:000000000000C18E                 db    0
.eh_frame_hdr:000000000000C18F                 db    0
.eh_frame_hdr:000000000000C190                 db 0B4h
.eh_frame_hdr:000000000000C191                 db 0D5h
.eh_frame_hdr:000000000000C192                 db 0FFh
.eh_frame_hdr:000000000000C193                 db 0FFh
.eh_frame_hdr:000000000000C194                 db 0FCh
.eh_frame_hdr:000000000000C195                 db  12h
.eh_frame_hdr:000000000000C196                 db    0
.eh_frame_hdr:000000000000C197                 db    0
.eh_frame_hdr:000000000000C197 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000C197
.eh_frame:000000000000C198 ; ===========================================================================
.eh_frame:000000000000C198
.eh_frame:000000000000C198 ; Segment type: Pure data
.eh_frame:000000000000C198 ; Segment permissions: Read
.eh_frame:000000000000C198 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000C198                 assume cs:_eh_frame
.eh_frame:000000000000C198                 ;org 0C198h
.eh_frame:000000000000C198                 db  14h
.eh_frame:000000000000C199                 db    0
.eh_frame:000000000000C19A                 db    0
.eh_frame:000000000000C19B                 db    0
.eh_frame:000000000000C19C                 db    0
.eh_frame:000000000000C19D                 db    0
.eh_frame:000000000000C19E                 db    0
.eh_frame:000000000000C19F                 db    0
.eh_frame:000000000000C1A0                 db    1
.eh_frame:000000000000C1A1                 db  7Ah ; z
.eh_frame:000000000000C1A2                 db  52h ; R
.eh_frame:000000000000C1A3                 db    0
.eh_frame:000000000000C1A4                 db    1
.eh_frame:000000000000C1A5                 db  78h ; x
.eh_frame:000000000000C1A6                 db  10h
.eh_frame:000000000000C1A7                 db    1
.eh_frame:000000000000C1A8                 db  1Bh
.eh_frame:000000000000C1A9                 db  0Ch
.eh_frame:000000000000C1AA                 db    7
.eh_frame:000000000000C1AB                 db    8
.eh_frame:000000000000C1AC                 db  90h
.eh_frame:000000000000C1AD                 db    1
.eh_frame:000000000000C1AE                 db    7
.eh_frame:000000000000C1AF                 db  10h
.eh_frame:000000000000C1B0                 db  14h
.eh_frame:000000000000C1B1                 db    0
.eh_frame:000000000000C1B2                 db    0
.eh_frame:000000000000C1B3                 db    0
.eh_frame:000000000000C1B4                 db  1Ch
.eh_frame:000000000000C1B5                 db    0
.eh_frame:000000000000C1B6                 db    0
.eh_frame:000000000000C1B7                 db    0
.eh_frame:000000000000C1B8                 db 0D8h
.eh_frame:000000000000C1B9                 db  69h ; i
.eh_frame:000000000000C1BA                 db 0FFh
.eh_frame:000000000000C1BB                 db 0FFh
.eh_frame:000000000000C1BC                 db  2Bh ; +
.eh_frame:000000000000C1BD                 db    0
.eh_frame:000000000000C1BE                 db    0
.eh_frame:000000000000C1BF                 db    0
.eh_frame:000000000000C1C0                 db    0
.eh_frame:000000000000C1C1                 db    0
.eh_frame:000000000000C1C2                 db    0
.eh_frame:000000000000C1C3                 db    0
.eh_frame:000000000000C1C4                 db    0
.eh_frame:000000000000C1C5                 db    0
.eh_frame:000000000000C1C6                 db    0
.eh_frame:000000000000C1C7                 db    0
.eh_frame:000000000000C1C8                 db  14h
.eh_frame:000000000000C1C9                 db    0
.eh_frame:000000000000C1CA                 db    0
.eh_frame:000000000000C1CB                 db    0
.eh_frame:000000000000C1CC                 db    0
.eh_frame:000000000000C1CD                 db    0
.eh_frame:000000000000C1CE                 db    0
.eh_frame:000000000000C1CF                 db    0
.eh_frame:000000000000C1D0                 db    1
.eh_frame:000000000000C1D1                 db  7Ah ; z
.eh_frame:000000000000C1D2                 db  52h ; R
.eh_frame:000000000000C1D3                 db    0
.eh_frame:000000000000C1D4                 db    1
.eh_frame:000000000000C1D5                 db  78h ; x
.eh_frame:000000000000C1D6                 db  10h
.eh_frame:000000000000C1D7                 db    1
.eh_frame:000000000000C1D8                 db  1Bh
.eh_frame:000000000000C1D9                 db  0Ch
.eh_frame:000000000000C1DA                 db    7
.eh_frame:000000000000C1DB                 db    8
.eh_frame:000000000000C1DC                 db  90h
.eh_frame:000000000000C1DD                 db    1
.eh_frame:000000000000C1DE                 db    0
.eh_frame:000000000000C1DF                 db    0
.eh_frame:000000000000C1E0                 db  24h ; $
.eh_frame:000000000000C1E1                 db    0
.eh_frame:000000000000C1E2                 db    0
.eh_frame:000000000000C1E3                 db    0
.eh_frame:000000000000C1E4                 db  1Ch
.eh_frame:000000000000C1E5                 db    0
.eh_frame:000000000000C1E6                 db    0
.eh_frame:000000000000C1E7                 db    0
.eh_frame:000000000000C1E8                 db 0A8h
.eh_frame:000000000000C1E9                 db  57h ; W
.eh_frame:000000000000C1EA                 db 0FFh
.eh_frame:000000000000C1EB                 db 0FFh
.eh_frame:000000000000C1EC                 db 0B0h
.eh_frame:000000000000C1ED                 db    3
.eh_frame:000000000000C1EE                 db    0
.eh_frame:000000000000C1EF                 db    0
.eh_frame:000000000000C1F0                 db    0
.eh_frame:000000000000C1F1                 db  0Eh
.eh_frame:000000000000C1F2                 db  10h
.eh_frame:000000000000C1F3                 db  46h ; F
.eh_frame:000000000000C1F4                 db  0Eh
.eh_frame:000000000000C1F5                 db  18h
.eh_frame:000000000000C1F6                 db  4Ah ; J
.eh_frame:000000000000C1F7                 db  0Fh
.eh_frame:000000000000C1F8                 db  0Bh
.eh_frame:000000000000C1F9                 db  77h ; w
.eh_frame:000000000000C1FA                 db    8
.eh_frame:000000000000C1FB                 db  80h
.eh_frame:000000000000C1FC                 db    0
.eh_frame:000000000000C1FD                 db  3Fh ; ?
.eh_frame:000000000000C1FE                 db  1Ah
.eh_frame:000000000000C1FF                 db  3Bh ; ;
.eh_frame:000000000000C200                 db  2Ah ; *
.eh_frame:000000000000C201                 db  33h ; 3
.eh_frame:000000000000C202                 db  24h ; $
.eh_frame:000000000000C203                 db  22h ; "
.eh_frame:000000000000C204                 db    0
.eh_frame:000000000000C205                 db    0
.eh_frame:000000000000C206                 db    0
.eh_frame:000000000000C207                 db    0
.eh_frame:000000000000C208                 db  14h
.eh_frame:000000000000C209                 db    0
.eh_frame:000000000000C20A                 db    0
.eh_frame:000000000000C20B                 db    0
.eh_frame:000000000000C20C                 db  44h ; D
.eh_frame:000000000000C20D                 db    0
.eh_frame:000000000000C20E                 db    0
.eh_frame:000000000000C20F                 db    0
.eh_frame:000000000000C210                 db  30h ; 0
.eh_frame:000000000000C211                 db  5Bh ; [
.eh_frame:000000000000C212                 db 0FFh
.eh_frame:000000000000C213                 db 0FFh
.eh_frame:000000000000C214                 db    8
.eh_frame:000000000000C215                 db    0
.eh_frame:000000000000C216                 db    0
.eh_frame:000000000000C217                 db    0
.eh_frame:000000000000C218                 db    0
.eh_frame:000000000000C219                 db    0
.eh_frame:000000000000C21A                 db    0
.eh_frame:000000000000C21B                 db    0
.eh_frame:000000000000C21C                 db    0
.eh_frame:000000000000C21D                 db    0
.eh_frame:000000000000C21E                 db    0
.eh_frame:000000000000C21F                 db    0
.eh_frame:000000000000C220                 db  3Ch ; <
.eh_frame:000000000000C221                 db    0
.eh_frame:000000000000C222                 db    0
.eh_frame:000000000000C223                 db    0
.eh_frame:000000000000C224                 db  5Ch ; \
.eh_frame:000000000000C225                 db    0
.eh_frame:000000000000C226                 db    0
.eh_frame:000000000000C227                 db    0
.eh_frame:000000000000C228                 db  78h ; x
.eh_frame:000000000000C229                 db  6Ah ; j
.eh_frame:000000000000C22A                 db 0FFh
.eh_frame:000000000000C22B                 db 0FFh
.eh_frame:000000000000C22C                 db  28h ; (
.eh_frame:000000000000C22D                 db    1
.eh_frame:000000000000C22E                 db    0
.eh_frame:000000000000C22F                 db    0
.eh_frame:000000000000C230                 db    0
.eh_frame:000000000000C231                 db  41h ; A
.eh_frame:000000000000C232                 db  0Eh
.eh_frame:000000000000C233                 db  10h
.eh_frame:000000000000C234                 db  86h
.eh_frame:000000000000C235                 db    2
.eh_frame:000000000000C236                 db  41h ; A
.eh_frame:000000000000C237                 db  0Eh
.eh_frame:000000000000C238                 db  18h
.eh_frame:000000000000C239                 db  83h
.eh_frame:000000000000C23A                 db    3
.eh_frame:000000000000C23B                 db  47h ; G
.eh_frame:000000000000C23C                 db  0Eh
.eh_frame:000000000000C23D                 db  40h ; @
.eh_frame:000000000000C23E                 db    2
.eh_frame:000000000000C23F                 db 0C7h
.eh_frame:000000000000C240                 db  0Ah
.eh_frame:000000000000C241                 db  0Eh
.eh_frame:000000000000C242                 db  18h
.eh_frame:000000000000C243                 db  41h ; A
.eh_frame:000000000000C244                 db  0Eh
.eh_frame:000000000000C245                 db  10h
.eh_frame:000000000000C246                 db  41h ; A
.eh_frame:000000000000C247                 db  0Eh
.eh_frame:000000000000C248                 db    8
.eh_frame:000000000000C249                 db  46h ; F
.eh_frame:000000000000C24A                 db  0Bh
.eh_frame:000000000000C24B                 db  75h ; u
.eh_frame:000000000000C24C                 db  0Ah
.eh_frame:000000000000C24D                 db  0Eh
.eh_frame:000000000000C24E                 db  18h
.eh_frame:000000000000C24F                 db  43h ; C
.eh_frame:000000000000C250                 db  0Eh
.eh_frame:000000000000C251                 db  10h
.eh_frame:000000000000C252                 db  41h ; A
.eh_frame:000000000000C253                 db  0Eh
.eh_frame:000000000000C254                 db    8
.eh_frame:000000000000C255                 db  47h ; G
.eh_frame:000000000000C256                 db  0Bh
.eh_frame:000000000000C257                 db  4Bh ; K
.eh_frame:000000000000C258                 db  0Eh
.eh_frame:000000000000C259                 db  18h
.eh_frame:000000000000C25A                 db  43h ; C
.eh_frame:000000000000C25B                 db  0Eh
.eh_frame:000000000000C25C                 db  10h
.eh_frame:000000000000C25D                 db  41h ; A
.eh_frame:000000000000C25E                 db  0Eh
.eh_frame:000000000000C25F                 db    8
.eh_frame:000000000000C260                 db  30h ; 0
.eh_frame:000000000000C261                 db    0
.eh_frame:000000000000C262                 db    0
.eh_frame:000000000000C263                 db    0
.eh_frame:000000000000C264                 db  9Ch
.eh_frame:000000000000C265                 db    0
.eh_frame:000000000000C266                 db    0
.eh_frame:000000000000C267                 db    0
.eh_frame:000000000000C268                 db  68h ; h
.eh_frame:000000000000C269                 db  6Bh ; k
.eh_frame:000000000000C26A                 db 0FFh
.eh_frame:000000000000C26B                 db 0FFh
.eh_frame:000000000000C26C                 db  70h ; p
.eh_frame:000000000000C26D                 db    1
.eh_frame:000000000000C26E                 db    0
.eh_frame:000000000000C26F                 db    0
.eh_frame:000000000000C270                 db    0
.eh_frame:000000000000C271                 db  42h ; B
.eh_frame:000000000000C272                 db  0Eh
.eh_frame:000000000000C273                 db  10h
.eh_frame:000000000000C274                 db  8Ch
.eh_frame:000000000000C275                 db    2
.eh_frame:000000000000C276                 db  41h ; A
.eh_frame:000000000000C277                 db  0Eh
.eh_frame:000000000000C278                 db  18h
.eh_frame:000000000000C279                 db  86h
.eh_frame:000000000000C27A                 db    3
.eh_frame:000000000000C27B                 db  41h ; A
.eh_frame:000000000000C27C                 db  0Eh
.eh_frame:000000000000C27D                 db  20h
.eh_frame:000000000000C27E                 db  83h
.eh_frame:000000000000C27F                 db    4
.eh_frame:000000000000C280                 db  47h ; G
.eh_frame:000000000000C281                 db  0Eh
.eh_frame:000000000000C282                 db  40h ; @
.eh_frame:000000000000C283                 db    2
.eh_frame:000000000000C284                 db 0A1h
.eh_frame:000000000000C285                 db  0Ah
.eh_frame:000000000000C286                 db  0Eh
.eh_frame:000000000000C287                 db  20h
.eh_frame:000000000000C288                 db  41h ; A
.eh_frame:000000000000C289                 db  0Eh
.eh_frame:000000000000C28A                 db  18h
.eh_frame:000000000000C28B                 db  41h ; A
.eh_frame:000000000000C28C                 db  0Eh
.eh_frame:000000000000C28D                 db  10h
.eh_frame:000000000000C28E                 db  42h ; B
.eh_frame:000000000000C28F                 db  0Eh
.eh_frame:000000000000C290                 db    8
.eh_frame:000000000000C291                 db  48h ; H
.eh_frame:000000000000C292                 db  0Bh
.eh_frame:000000000000C293                 db    0
.eh_frame:000000000000C294                 db  14h
.eh_frame:000000000000C295                 db    0
.eh_frame:000000000000C296                 db    0
.eh_frame:000000000000C297                 db    0
.eh_frame:000000000000C298                 db 0D0h
.eh_frame:000000000000C299                 db    0
.eh_frame:000000000000C29A                 db    0
.eh_frame:000000000000C29B                 db    0
.eh_frame:000000000000C29C                 db 0A4h
.eh_frame:000000000000C29D                 db  6Ch ; l
.eh_frame:000000000000C29E                 db 0FFh
.eh_frame:000000000000C29F                 db 0FFh
.eh_frame:000000000000C2A0                 db  27h ; '
.eh_frame:000000000000C2A1                 db    0
.eh_frame:000000000000C2A2                 db    0
.eh_frame:000000000000C2A3                 db    0
.eh_frame:000000000000C2A4                 db    0
.eh_frame:000000000000C2A5                 db  44h ; D
.eh_frame:000000000000C2A6                 db  0Eh
.eh_frame:000000000000C2A7                 db  10h
.eh_frame:000000000000C2A8                 db  62h ; b
.eh_frame:000000000000C2A9                 db  0Eh
.eh_frame:000000000000C2AA                 db    8
.eh_frame:000000000000C2AB                 db    0
.eh_frame:000000000000C2AC                 db  10h
.eh_frame:000000000000C2AD                 db    1
.eh_frame:000000000000C2AE                 db    0
.eh_frame:000000000000C2AF                 db    0
.eh_frame:000000000000C2B0                 db 0E8h
.eh_frame:000000000000C2B1                 db    0
.eh_frame:000000000000C2B2                 db    0
.eh_frame:000000000000C2B3                 db    0
.eh_frame:000000000000C2B4                 db 0BCh
.eh_frame:000000000000C2B5                 db  6Ch ; l
.eh_frame:000000000000C2B6                 db 0FFh
.eh_frame:000000000000C2B7                 db 0FFh
.eh_frame:000000000000C2B8                 db 0FCh
.eh_frame:000000000000C2B9                 db  17h
.eh_frame:000000000000C2BA                 db    0
.eh_frame:000000000000C2BB                 db    0
.eh_frame:000000000000C2BC                 db    0
.eh_frame:000000000000C2BD                 db  42h ; B
.eh_frame:000000000000C2BE                 db  0Eh
.eh_frame:000000000000C2BF                 db  10h
.eh_frame:000000000000C2C0                 db  8Fh
.eh_frame:000000000000C2C1                 db    2
.eh_frame:000000000000C2C2                 db  42h ; B
.eh_frame:000000000000C2C3                 db  0Eh
.eh_frame:000000000000C2C4                 db  18h
.eh_frame:000000000000C2C5                 db  8Eh
.eh_frame:000000000000C2C6                 db    3
.eh_frame:000000000000C2C7                 db  42h ; B
.eh_frame:000000000000C2C8                 db  0Eh
.eh_frame:000000000000C2C9                 db  20h
.eh_frame:000000000000C2CA                 db  8Dh
.eh_frame:000000000000C2CB                 db    4
.eh_frame:000000000000C2CC                 db  42h ; B
.eh_frame:000000000000C2CD                 db  0Eh
.eh_frame:000000000000C2CE                 db  28h ; (
.eh_frame:000000000000C2CF                 db  8Ch
.eh_frame:000000000000C2D0                 db    5
.eh_frame:000000000000C2D1                 db  44h ; D
.eh_frame:000000000000C2D2                 db  0Eh
.eh_frame:000000000000C2D3                 db  30h ; 0
.eh_frame:000000000000C2D4                 db  86h
.eh_frame:000000000000C2D5                 db    6
.eh_frame:000000000000C2D6                 db  41h ; A
.eh_frame:000000000000C2D7                 db  0Eh
.eh_frame:000000000000C2D8                 db  38h ; 8
.eh_frame:000000000000C2D9                 db  83h
.eh_frame:000000000000C2DA                 db    7
.eh_frame:000000000000C2DB                 db  4Ah ; J
.eh_frame:000000000000C2DC                 db  0Eh
.eh_frame:000000000000C2DD                 db 0A0h
.eh_frame:000000000000C2DE                 db    3
.eh_frame:000000000000C2DF                 db    2
.eh_frame:000000000000C2E0                 db  75h ; u
.eh_frame:000000000000C2E1                 db  0Ah
.eh_frame:000000000000C2E2                 db  0Eh
.eh_frame:000000000000C2E3                 db  38h ; 8
.eh_frame:000000000000C2E4                 db  41h ; A
.eh_frame:000000000000C2E5                 db  0Eh
.eh_frame:000000000000C2E6                 db  30h ; 0
.eh_frame:000000000000C2E7                 db  41h ; A
.eh_frame:000000000000C2E8                 db  0Eh
.eh_frame:000000000000C2E9                 db  28h ; (
.eh_frame:000000000000C2EA                 db  42h ; B
.eh_frame:000000000000C2EB                 db  0Eh
.eh_frame:000000000000C2EC                 db  20h
.eh_frame:000000000000C2ED                 db  42h ; B
.eh_frame:000000000000C2EE                 db  0Eh
.eh_frame:000000000000C2EF                 db  18h
.eh_frame:000000000000C2F0                 db  42h ; B
.eh_frame:000000000000C2F1                 db  0Eh
.eh_frame:000000000000C2F2                 db  10h
.eh_frame:000000000000C2F3                 db  42h ; B
.eh_frame:000000000000C2F4                 db  0Eh
.eh_frame:000000000000C2F5                 db    8
.eh_frame:000000000000C2F6                 db  4Ah ; J
.eh_frame:000000000000C2F7                 db  0Bh
.eh_frame:000000000000C2F8                 db    3
.eh_frame:000000000000C2F9                 db  22h ; "
.eh_frame:000000000000C2FA                 db    5
.eh_frame:000000000000C2FB                 db  0Eh
.eh_frame:000000000000C2FC                 db 0B0h
.eh_frame:000000000000C2FD                 db    3
.eh_frame:000000000000C2FE                 db  51h ; Q
.eh_frame:000000000000C2FF                 db  0Eh
.eh_frame:000000000000C300                 db 0A8h
.eh_frame:000000000000C301                 db    3
.eh_frame:000000000000C302                 db  41h ; A
.eh_frame:000000000000C303                 db  0Eh
.eh_frame:000000000000C304                 db 0A0h
.eh_frame:000000000000C305                 db    3
.eh_frame:000000000000C306                 db    3
.eh_frame:000000000000C307                 db  67h ; g
.eh_frame:000000000000C308                 db    2
.eh_frame:000000000000C309                 db  0Eh
.eh_frame:000000000000C30A                 db 0A8h
.eh_frame:000000000000C30B                 db    3
.eh_frame:000000000000C30C                 db  4Bh ; K
.eh_frame:000000000000C30D                 db  0Eh
.eh_frame:000000000000C30E                 db 0B0h
.eh_frame:000000000000C30F                 db    3
.eh_frame:000000000000C310                 db  51h ; Q
.eh_frame:000000000000C311                 db  0Eh
.eh_frame:000000000000C312                 db 0A8h
.eh_frame:000000000000C313                 db    3
.eh_frame:000000000000C314                 db  42h ; B
.eh_frame:000000000000C315                 db  0Eh
.eh_frame:000000000000C316                 db 0A0h
.eh_frame:000000000000C317                 db    3
.eh_frame:000000000000C318                 db    2
.eh_frame:000000000000C319                 db  6Fh ; o
.eh_frame:000000000000C31A                 db  0Eh
.eh_frame:000000000000C31B                 db 0B0h
.eh_frame:000000000000C31C                 db    3
.eh_frame:000000000000C31D                 db  59h ; Y
.eh_frame:000000000000C31E                 db  0Eh
.eh_frame:000000000000C31F                 db 0A8h
.eh_frame:000000000000C320                 db    3
.eh_frame:000000000000C321                 db  41h ; A
.eh_frame:000000000000C322                 db  0Eh
.eh_frame:000000000000C323                 db 0A0h
.eh_frame:000000000000C324                 db    3
.eh_frame:000000000000C325                 db    3
.eh_frame:000000000000C326                 db  60h ; `
.eh_frame:000000000000C327                 db    1
.eh_frame:000000000000C328                 db  0Eh
.eh_frame:000000000000C329                 db 0B0h
.eh_frame:000000000000C32A                 db    3
.eh_frame:000000000000C32B                 db  59h ; Y
.eh_frame:000000000000C32C                 db  0Eh
.eh_frame:000000000000C32D                 db 0A8h
.eh_frame:000000000000C32E                 db    3
.eh_frame:000000000000C32F                 db  42h ; B
.eh_frame:000000000000C330                 db  0Eh
.eh_frame:000000000000C331                 db 0A0h
.eh_frame:000000000000C332                 db    3
.eh_frame:000000000000C333                 db  67h ; g
.eh_frame:000000000000C334                 db  0Eh
.eh_frame:000000000000C335                 db 0B0h
.eh_frame:000000000000C336                 db    3
.eh_frame:000000000000C337                 db  6Eh ; n
.eh_frame:000000000000C338                 db  0Eh
.eh_frame:000000000000C339                 db 0A8h
.eh_frame:000000000000C33A                 db    3
.eh_frame:000000000000C33B                 db  41h ; A
.eh_frame:000000000000C33C                 db  0Eh
.eh_frame:000000000000C33D                 db 0A0h
.eh_frame:000000000000C33E                 db    3
.eh_frame:000000000000C33F                 db    2
.eh_frame:000000000000C340                 db  91h
.eh_frame:000000000000C341                 db  0Eh
.eh_frame:000000000000C342                 db 0B0h
.eh_frame:000000000000C343                 db    3
.eh_frame:000000000000C344                 db  5Eh ; ^
.eh_frame:000000000000C345                 db  0Eh
.eh_frame:000000000000C346                 db 0A8h
.eh_frame:000000000000C347                 db    3
.eh_frame:000000000000C348                 db  41h ; A
.eh_frame:000000000000C349                 db  0Eh
.eh_frame:000000000000C34A                 db 0A0h
.eh_frame:000000000000C34B                 db    3
.eh_frame:000000000000C34C                 db    3
.eh_frame:000000000000C34D                 db  81h
.eh_frame:000000000000C34E                 db    1
.eh_frame:000000000000C34F                 db  0Eh
.eh_frame:000000000000C350                 db 0B0h
.eh_frame:000000000000C351                 db    3
.eh_frame:000000000000C352                 db    2
.eh_frame:000000000000C353                 db  44h ; D
.eh_frame:000000000000C354                 db  0Eh
.eh_frame:000000000000C355                 db 0A8h
.eh_frame:000000000000C356                 db    3
.eh_frame:000000000000C357                 db  42h ; B
.eh_frame:000000000000C358                 db  0Eh
.eh_frame:000000000000C359                 db 0A0h
.eh_frame:000000000000C35A                 db    3
.eh_frame:000000000000C35B                 db  4Ah ; J
.eh_frame:000000000000C35C                 db  0Eh
.eh_frame:000000000000C35D                 db 0C0h
.eh_frame:000000000000C35E                 db    3
.eh_frame:000000000000C35F                 db  67h ; g
.eh_frame:000000000000C360                 db  0Eh
.eh_frame:000000000000C361                 db 0A0h
.eh_frame:000000000000C362                 db    3
.eh_frame:000000000000C363                 db    2
.eh_frame:000000000000C364                 db  98h
.eh_frame:000000000000C365                 db  0Eh
.eh_frame:000000000000C366                 db 0B0h
.eh_frame:000000000000C367                 db    3
.eh_frame:000000000000C368                 db  71h ; q
.eh_frame:000000000000C369                 db  0Eh
.eh_frame:000000000000C36A                 db 0A8h
.eh_frame:000000000000C36B                 db    3
.eh_frame:000000000000C36C                 db  42h ; B
.eh_frame:000000000000C36D                 db  0Eh
.eh_frame:000000000000C36E                 db 0A0h
.eh_frame:000000000000C36F                 db    3
.eh_frame:000000000000C370                 db    3
.eh_frame:000000000000C371                 db  46h ; F
.eh_frame:000000000000C372                 db    1
.eh_frame:000000000000C373                 db  0Eh
.eh_frame:000000000000C374                 db 0B0h
.eh_frame:000000000000C375                 db    3
.eh_frame:000000000000C376                 db  70h ; p
.eh_frame:000000000000C377                 db  0Eh
.eh_frame:000000000000C378                 db 0A8h
.eh_frame:000000000000C379                 db    3
.eh_frame:000000000000C37A                 db  42h ; B
.eh_frame:000000000000C37B                 db  0Eh
.eh_frame:000000000000C37C                 db 0A0h
.eh_frame:000000000000C37D                 db    3
.eh_frame:000000000000C37E                 db    2
.eh_frame:000000000000C37F                 db  65h ; e
.eh_frame:000000000000C380                 db  0Eh
.eh_frame:000000000000C381                 db 0A8h
.eh_frame:000000000000C382                 db    3
.eh_frame:000000000000C383                 db  53h ; S
.eh_frame:000000000000C384                 db  0Eh
.eh_frame:000000000000C385                 db 0B0h
.eh_frame:000000000000C386                 db    3
.eh_frame:000000000000C387                 db  49h ; I
.eh_frame:000000000000C388                 db  0Eh
.eh_frame:000000000000C389                 db 0C0h
.eh_frame:000000000000C38A                 db    3
.eh_frame:000000000000C38B                 db  52h ; R
.eh_frame:000000000000C38C                 db  0Eh
.eh_frame:000000000000C38D                 db 0A0h
.eh_frame:000000000000C38E                 db    3
.eh_frame:000000000000C38F                 db    2
.eh_frame:000000000000C390                 db  63h ; c
.eh_frame:000000000000C391                 db  0Eh
.eh_frame:000000000000C392                 db 0A8h
.eh_frame:000000000000C393                 db    3
.eh_frame:000000000000C394                 db  4Eh ; N
.eh_frame:000000000000C395                 db  0Eh
.eh_frame:000000000000C396                 db 0B0h
.eh_frame:000000000000C397                 db    3
.eh_frame:000000000000C398                 db  4Eh ; N
.eh_frame:000000000000C399                 db  0Eh
.eh_frame:000000000000C39A                 db 0C0h
.eh_frame:000000000000C39B                 db    3
.eh_frame:000000000000C39C                 db  52h ; R
.eh_frame:000000000000C39D                 db  0Eh
.eh_frame:000000000000C39E                 db 0A0h
.eh_frame:000000000000C39F                 db    3
.eh_frame:000000000000C3A0                 db  6Ch ; l
.eh_frame:000000000000C3A1                 db  0Ah
.eh_frame:000000000000C3A2                 db  0Eh
.eh_frame:000000000000C3A3                 db 0B0h
.eh_frame:000000000000C3A4                 db    3
.eh_frame:000000000000C3A5                 db  62h ; b
.eh_frame:000000000000C3A6                 db  0Bh
.eh_frame:000000000000C3A7                 db    3
.eh_frame:000000000000C3A8                 db 0E5h
.eh_frame:000000000000C3A9                 db    1
.eh_frame:000000000000C3AA                 db  0Eh
.eh_frame:000000000000C3AB                 db 0B0h
.eh_frame:000000000000C3AC                 db    3
.eh_frame:000000000000C3AD                 db  4Fh ; O
.eh_frame:000000000000C3AE                 db  0Eh
.eh_frame:000000000000C3AF                 db 0A8h
.eh_frame:000000000000C3B0                 db    3
.eh_frame:000000000000C3B1                 db  41h ; A
.eh_frame:000000000000C3B2                 db  0Eh
.eh_frame:000000000000C3B3                 db 0A0h
.eh_frame:000000000000C3B4                 db    3
.eh_frame:000000000000C3B5                 db    3
.eh_frame:000000000000C3B6                 db  8Dh
.eh_frame:000000000000C3B7                 db    4
.eh_frame:000000000000C3B8                 db  0Ah
.eh_frame:000000000000C3B9                 db  0Eh
.eh_frame:000000000000C3BA                 db 0B0h
.eh_frame:000000000000C3BB                 db    3
.eh_frame:000000000000C3BC                 db  58h ; X
.eh_frame:000000000000C3BD                 db  0Bh
.eh_frame:000000000000C3BE                 db    0
.eh_frame:000000000000C3BF                 db    0
.eh_frame:000000000000C3C0                 db  48h ; H
.eh_frame:000000000000C3C1                 db    0
.eh_frame:000000000000C3C2                 db    0
.eh_frame:000000000000C3C3                 db    0
.eh_frame:000000000000C3C4                 db 0FCh
.eh_frame:000000000000C3C5                 db    1
.eh_frame:000000000000C3C6                 db    0
.eh_frame:000000000000C3C7                 db    0
.eh_frame:000000000000C3C8                 db 0A8h
.eh_frame:000000000000C3C9                 db  83h
.eh_frame:000000000000C3CA                 db 0FFh
.eh_frame:000000000000C3CB                 db 0FFh
.eh_frame:000000000000C3CC                 db 0C6h
.eh_frame:000000000000C3CD                 db    1
.eh_frame:000000000000C3CE                 db    0
.eh_frame:000000000000C3CF                 db    0
.eh_frame:000000000000C3D0                 db    0
.eh_frame:000000000000C3D1                 db  42h ; B
.eh_frame:000000000000C3D2                 db  0Eh
.eh_frame:000000000000C3D3                 db  10h
.eh_frame:000000000000C3D4                 db  8Fh
.eh_frame:000000000000C3D5                 db    2
.eh_frame:000000000000C3D6                 db  42h ; B
.eh_frame:000000000000C3D7                 db  0Eh
.eh_frame:000000000000C3D8                 db  18h
.eh_frame:000000000000C3D9                 db  8Eh
.eh_frame:000000000000C3DA                 db    3
.eh_frame:000000000000C3DB                 db  45h ; E
.eh_frame:000000000000C3DC                 db  0Eh
.eh_frame:000000000000C3DD                 db  20h
.eh_frame:000000000000C3DE                 db  8Dh
.eh_frame:000000000000C3DF                 db    4
.eh_frame:000000000000C3E0                 db  42h ; B
.eh_frame:000000000000C3E1                 db  0Eh
.eh_frame:000000000000C3E2                 db  28h ; (
.eh_frame:000000000000C3E3                 db  8Ch
.eh_frame:000000000000C3E4                 db    5
.eh_frame:000000000000C3E5                 db  44h ; D
.eh_frame:000000000000C3E6                 db  0Eh
.eh_frame:000000000000C3E7                 db  30h ; 0
.eh_frame:000000000000C3E8                 db  86h
.eh_frame:000000000000C3E9                 db    6
.eh_frame:000000000000C3EA                 db  41h ; A
.eh_frame:000000000000C3EB                 db  0Eh
.eh_frame:000000000000C3EC                 db  38h ; 8
.eh_frame:000000000000C3ED                 db  83h
.eh_frame:000000000000C3EE                 db    7
.eh_frame:000000000000C3EF                 db  4Ch ; L
.eh_frame:000000000000C3F0                 db  0Eh
.eh_frame:000000000000C3F1                 db  50h ; P
.eh_frame:000000000000C3F2                 db    2
.eh_frame:000000000000C3F3                 db  91h
.eh_frame:000000000000C3F4                 db  0Ah
.eh_frame:000000000000C3F5                 db  0Eh
.eh_frame:000000000000C3F6                 db  38h ; 8
.eh_frame:000000000000C3F7                 db  44h ; D
.eh_frame:000000000000C3F8                 db  0Eh
.eh_frame:000000000000C3F9                 db  30h ; 0
.eh_frame:000000000000C3FA                 db  41h ; A
.eh_frame:000000000000C3FB                 db  0Eh
.eh_frame:000000000000C3FC                 db  28h ; (
.eh_frame:000000000000C3FD                 db  42h ; B
.eh_frame:000000000000C3FE                 db  0Eh
.eh_frame:000000000000C3FF                 db  20h
.eh_frame:000000000000C400                 db  42h ; B
.eh_frame:000000000000C401                 db  0Eh
.eh_frame:000000000000C402                 db  18h
.eh_frame:000000000000C403                 db  42h ; B
.eh_frame:000000000000C404                 db  0Eh
.eh_frame:000000000000C405                 db  10h
.eh_frame:000000000000C406                 db  42h ; B
.eh_frame:000000000000C407                 db  0Eh
.eh_frame:000000000000C408                 db    8
.eh_frame:000000000000C409                 db  46h ; F
.eh_frame:000000000000C40A                 db  0Bh
.eh_frame:000000000000C40B                 db    0
.eh_frame:000000000000C40C                 db  44h ; D
.eh_frame:000000000000C40D                 db    0
.eh_frame:000000000000C40E                 db    0
.eh_frame:000000000000C40F                 db    0
.eh_frame:000000000000C410                 db  48h ; H
.eh_frame:000000000000C411                 db    2
.eh_frame:000000000000C412                 db    0
.eh_frame:000000000000C413                 db    0
.eh_frame:000000000000C414                 db  2Ch ; ,
.eh_frame:000000000000C415                 db  85h
.eh_frame:000000000000C416                 db 0FFh
.eh_frame:000000000000C417                 db 0FFh
.eh_frame:000000000000C418                 db  32h ; 2
.eh_frame:000000000000C419                 db    7
.eh_frame:000000000000C41A                 db    0
.eh_frame:000000000000C41B                 db    0
.eh_frame:000000000000C41C                 db    0
.eh_frame:000000000000C41D                 db  42h ; B
.eh_frame:000000000000C41E                 db  0Eh
.eh_frame:000000000000C41F                 db  10h
.eh_frame:000000000000C420                 db  8Dh
.eh_frame:000000000000C421                 db    2
.eh_frame:000000000000C422                 db  42h ; B
.eh_frame:000000000000C423                 db  0Eh
.eh_frame:000000000000C424                 db  18h
.eh_frame:000000000000C425                 db  8Ch
.eh_frame:000000000000C426                 db    3
.eh_frame:000000000000C427                 db  46h ; F
.eh_frame:000000000000C428                 db  0Eh
.eh_frame:000000000000C429                 db  20h
.eh_frame:000000000000C42A                 db  86h
.eh_frame:000000000000C42B                 db    4
.eh_frame:000000000000C42C                 db  41h ; A
.eh_frame:000000000000C42D                 db  0Eh
.eh_frame:000000000000C42E                 db  28h ; (
.eh_frame:000000000000C42F                 db  83h
.eh_frame:000000000000C430                 db    5
.eh_frame:000000000000C431                 db  49h ; I
.eh_frame:000000000000C432                 db  0Eh
.eh_frame:000000000000C433                 db 0B0h
.eh_frame:000000000000C434                 db    1
.eh_frame:000000000000C435                 db    3
.eh_frame:000000000000C436                 db  9Ah
.eh_frame:000000000000C437                 db    4
.eh_frame:000000000000C438                 db  0Eh
.eh_frame:000000000000C439                 db 0B8h
.eh_frame:000000000000C43A                 db    1
.eh_frame:000000000000C43B                 db  47h ; G
.eh_frame:000000000000C43C                 db  0Eh
.eh_frame:000000000000C43D                 db 0C0h
.eh_frame:000000000000C43E                 db    1
.eh_frame:000000000000C43F                 db  41h ; A
.eh_frame:000000000000C440                 db  0Eh
.eh_frame:000000000000C441                 db 0C8h
.eh_frame:000000000000C442                 db    1
.eh_frame:000000000000C443                 db  44h ; D
.eh_frame:000000000000C444                 db  0Eh
.eh_frame:000000000000C445                 db 0D0h
.eh_frame:000000000000C446                 db    1
.eh_frame:000000000000C447                 db  41h ; A
.eh_frame:000000000000C448                 db  0Eh
.eh_frame:000000000000C449                 db 0D8h
.eh_frame:000000000000C44A                 db    1
.eh_frame:000000000000C44B                 db  44h ; D
.eh_frame:000000000000C44C                 db  0Eh
.eh_frame:000000000000C44D                 db 0E0h
.eh_frame:000000000000C44E                 db    1
.eh_frame:000000000000C44F                 db    2
.eh_frame:000000000000C450                 db 0B3h
.eh_frame:000000000000C451                 db  0Eh
.eh_frame:000000000000C452                 db 0B0h
.eh_frame:000000000000C453                 db    1
.eh_frame:000000000000C454                 db  60h ; `
.eh_frame:000000000000C455                 db    0
.eh_frame:000000000000C456                 db    0
.eh_frame:000000000000C457                 db    0
.eh_frame:000000000000C458                 db  90h
.eh_frame:000000000000C459                 db    2
.eh_frame:000000000000C45A                 db    0
.eh_frame:000000000000C45B                 db    0
.eh_frame:000000000000C45C                 db 0F4h
.eh_frame:000000000000C45D                 db  58h ; X
.eh_frame:000000000000C45E                 db 0FFh
.eh_frame:000000000000C45F                 db 0FFh
.eh_frame:000000000000C460                 db  40h ; @
.eh_frame:000000000000C461                 db  0Eh
.eh_frame:000000000000C462                 db    0
.eh_frame:000000000000C463                 db    0
.eh_frame:000000000000C464                 db    0
.eh_frame:000000000000C465                 db  42h ; B
.eh_frame:000000000000C466                 db  0Eh
.eh_frame:000000000000C467                 db  10h
.eh_frame:000000000000C468                 db  8Fh
.eh_frame:000000000000C469                 db    2
.eh_frame:000000000000C46A                 db  42h ; B
.eh_frame:000000000000C46B                 db  0Eh
.eh_frame:000000000000C46C                 db  18h
.eh_frame:000000000000C46D                 db  8Eh
.eh_frame:000000000000C46E                 db    3
.eh_frame:000000000000C46F                 db  42h ; B
.eh_frame:000000000000C470                 db  0Eh
.eh_frame:000000000000C471                 db  20h
.eh_frame:000000000000C472                 db  8Dh
.eh_frame:000000000000C473                 db    4
.eh_frame:000000000000C474                 db  42h ; B
.eh_frame:000000000000C475                 db  0Eh
.eh_frame:000000000000C476                 db  28h ; (
.eh_frame:000000000000C477                 db  8Ch
.eh_frame:000000000000C478                 db    5
.eh_frame:000000000000C479                 db  41h ; A
.eh_frame:000000000000C47A                 db  0Eh
.eh_frame:000000000000C47B                 db  30h ; 0
.eh_frame:000000000000C47C                 db  86h
.eh_frame:000000000000C47D                 db    6
.eh_frame:000000000000C47E                 db  41h ; A
.eh_frame:000000000000C47F                 db  0Eh
.eh_frame:000000000000C480                 db  38h ; 8
.eh_frame:000000000000C481                 db  83h
.eh_frame:000000000000C482                 db    7
.eh_frame:000000000000C483                 db  49h ; I
.eh_frame:000000000000C484                 db  0Eh
.eh_frame:000000000000C485                 db  80h
.eh_frame:000000000000C486                 db    1
.eh_frame:000000000000C487                 db    3
.eh_frame:000000000000C488                 db  70h ; p
.eh_frame:000000000000C489                 db    6
.eh_frame:000000000000C48A                 db  0Eh
.eh_frame:000000000000C48B                 db  88h
.eh_frame:000000000000C48C                 db    1
.eh_frame:000000000000C48D                 db  5Ch ; \
.eh_frame:000000000000C48E                 db  0Eh
.eh_frame:000000000000C48F                 db  90h
.eh_frame:000000000000C490                 db    1
.eh_frame:000000000000C491                 db  42h ; B
.eh_frame:000000000000C492                 db  0Eh
.eh_frame:000000000000C493                 db  98h
.eh_frame:000000000000C494                 db    1
.eh_frame:000000000000C495                 db  45h ; E
.eh_frame:000000000000C496                 db  0Eh
.eh_frame:000000000000C497                 db 0A0h
.eh_frame:000000000000C498                 db    1
.eh_frame:000000000000C499                 db  50h ; P
.eh_frame:000000000000C49A                 db  0Eh
.eh_frame:000000000000C49B                 db  80h
.eh_frame:000000000000C49C                 db    1
.eh_frame:000000000000C49D                 db    3
.eh_frame:000000000000C49E                 db  9Dh
.eh_frame:000000000000C49F                 db    1
.eh_frame:000000000000C4A0                 db  0Ah
.eh_frame:000000000000C4A1                 db  0Eh
.eh_frame:000000000000C4A2                 db  38h ; 8
.eh_frame:000000000000C4A3                 db  41h ; A
.eh_frame:000000000000C4A4                 db  0Eh
.eh_frame:000000000000C4A5                 db  30h ; 0
.eh_frame:000000000000C4A6                 db  41h ; A
.eh_frame:000000000000C4A7                 db  0Eh
.eh_frame:000000000000C4A8                 db  28h ; (
.eh_frame:000000000000C4A9                 db  42h ; B
.eh_frame:000000000000C4AA                 db  0Eh
.eh_frame:000000000000C4AB                 db  20h
.eh_frame:000000000000C4AC                 db  42h ; B
.eh_frame:000000000000C4AD                 db  0Eh
.eh_frame:000000000000C4AE                 db  18h
.eh_frame:000000000000C4AF                 db  42h ; B
.eh_frame:000000000000C4B0                 db  0Eh
.eh_frame:000000000000C4B1                 db  10h
.eh_frame:000000000000C4B2                 db  42h ; B
.eh_frame:000000000000C4B3                 db  0Eh
.eh_frame:000000000000C4B4                 db    8
.eh_frame:000000000000C4B5                 db  41h ; A
.eh_frame:000000000000C4B6                 db  0Bh
.eh_frame:000000000000C4B7                 db    0
.eh_frame:000000000000C4B8                 db  10h
.eh_frame:000000000000C4B9                 db    0
.eh_frame:000000000000C4BA                 db    0
.eh_frame:000000000000C4BB                 db    0
.eh_frame:000000000000C4BC                 db 0F4h
.eh_frame:000000000000C4BD                 db    2
.eh_frame:000000000000C4BE                 db    0
.eh_frame:000000000000C4BF                 db    0
.eh_frame:000000000000C4C0                 db 0C0h
.eh_frame:000000000000C4C1                 db  8Bh
.eh_frame:000000000000C4C2                 db 0FFh
.eh_frame:000000000000C4C3                 db 0FFh
.eh_frame:000000000000C4C4                 db  16h
.eh_frame:000000000000C4C5                 db    0
.eh_frame:000000000000C4C6                 db    0
.eh_frame:000000000000C4C7                 db    0
.eh_frame:000000000000C4C8                 db    0
.eh_frame:000000000000C4C9                 db    0
.eh_frame:000000000000C4CA                 db    0
.eh_frame:000000000000C4CB                 db    0
.eh_frame:000000000000C4CC                 db  28h ; (
.eh_frame:000000000000C4CD                 db    0
.eh_frame:000000000000C4CE                 db    0
.eh_frame:000000000000C4CF                 db    0
.eh_frame:000000000000C4D0                 db    8
.eh_frame:000000000000C4D1                 db    3
.eh_frame:000000000000C4D2                 db    0
.eh_frame:000000000000C4D3                 db    0
.eh_frame:000000000000C4D4                 db 0CCh
.eh_frame:000000000000C4D5                 db  8Bh
.eh_frame:000000000000C4D6                 db 0FFh
.eh_frame:000000000000C4D7                 db 0FFh
.eh_frame:000000000000C4D8                 db 0C9h
.eh_frame:000000000000C4D9                 db    0
.eh_frame:000000000000C4DA                 db    0
.eh_frame:000000000000C4DB                 db    0
.eh_frame:000000000000C4DC                 db    0
.eh_frame:000000000000C4DD                 db  41h ; A
.eh_frame:000000000000C4DE                 db  0Eh
.eh_frame:000000000000C4DF                 db  10h
.eh_frame:000000000000C4E0                 db  86h
.eh_frame:000000000000C4E1                 db    2
.eh_frame:000000000000C4E2                 db  41h ; A
.eh_frame:000000000000C4E3                 db  0Eh
.eh_frame:000000000000C4E4                 db  18h
.eh_frame:000000000000C4E5                 db  83h
.eh_frame:000000000000C4E6                 db    3
.eh_frame:000000000000C4E7                 db  4Ah ; J
.eh_frame:000000000000C4E8                 db  0Eh
.eh_frame:000000000000C4E9                 db  20h
.eh_frame:000000000000C4EA                 db  77h ; w
.eh_frame:000000000000C4EB                 db  0Ah
.eh_frame:000000000000C4EC                 db  0Eh
.eh_frame:000000000000C4ED                 db  18h
.eh_frame:000000000000C4EE                 db  41h ; A
.eh_frame:000000000000C4EF                 db  0Eh
.eh_frame:000000000000C4F0                 db  10h
.eh_frame:000000000000C4F1                 db  41h ; A
.eh_frame:000000000000C4F2                 db  0Eh
.eh_frame:000000000000C4F3                 db    8
.eh_frame:000000000000C4F4                 db  4Bh ; K
.eh_frame:000000000000C4F5                 db  0Bh
.eh_frame:000000000000C4F6                 db    0
.eh_frame:000000000000C4F7                 db    0
.eh_frame:000000000000C4F8                 db  48h ; H
.eh_frame:000000000000C4F9                 db    0
.eh_frame:000000000000C4FA                 db    0
.eh_frame:000000000000C4FB                 db    0
.eh_frame:000000000000C4FC                 db  34h ; 4
.eh_frame:000000000000C4FD                 db    3
.eh_frame:000000000000C4FE                 db    0
.eh_frame:000000000000C4FF                 db    0
.eh_frame:000000000000C500                 db  70h ; p
.eh_frame:000000000000C501                 db  8Ch
.eh_frame:000000000000C502                 db 0FFh
.eh_frame:000000000000C503                 db 0FFh
.eh_frame:000000000000C504                 db 0B8h
.eh_frame:000000000000C505                 db    5
.eh_frame:000000000000C506                 db    0
.eh_frame:000000000000C507                 db    0
.eh_frame:000000000000C508                 db    0
.eh_frame:000000000000C509                 db  42h ; B
.eh_frame:000000000000C50A                 db  0Eh
.eh_frame:000000000000C50B                 db  10h
.eh_frame:000000000000C50C                 db  8Fh
.eh_frame:000000000000C50D                 db    2
.eh_frame:000000000000C50E                 db  42h ; B
.eh_frame:000000000000C50F                 db  0Eh
.eh_frame:000000000000C510                 db  18h
.eh_frame:000000000000C511                 db  8Eh
.eh_frame:000000000000C512                 db    3
.eh_frame:000000000000C513                 db  44h ; D
.eh_frame:000000000000C514                 db  0Eh
.eh_frame:000000000000C515                 db  20h
.eh_frame:000000000000C516                 db  8Dh
.eh_frame:000000000000C517                 db    4
.eh_frame:000000000000C518                 db  42h ; B
.eh_frame:000000000000C519                 db  0Eh
.eh_frame:000000000000C51A                 db  28h ; (
.eh_frame:000000000000C51B                 db  8Ch
.eh_frame:000000000000C51C                 db    5
.eh_frame:000000000000C51D                 db  44h ; D
.eh_frame:000000000000C51E                 db  0Eh
.eh_frame:000000000000C51F                 db  30h ; 0
.eh_frame:000000000000C520                 db  86h
.eh_frame:000000000000C521                 db    6
.eh_frame:000000000000C522                 db  41h ; A
.eh_frame:000000000000C523                 db  0Eh
.eh_frame:000000000000C524                 db  38h ; 8
.eh_frame:000000000000C525                 db  83h
.eh_frame:000000000000C526                 db    7
.eh_frame:000000000000C527                 db  44h ; D
.eh_frame:000000000000C528                 db  0Eh
.eh_frame:000000000000C529                 db  60h ; `
.eh_frame:000000000000C52A                 db    3
.eh_frame:000000000000C52B                 db  58h ; X
.eh_frame:000000000000C52C                 db    2
.eh_frame:000000000000C52D                 db  0Ah
.eh_frame:000000000000C52E                 db  0Eh
.eh_frame:000000000000C52F                 db  38h ; 8
.eh_frame:000000000000C530                 db  41h ; A
.eh_frame:000000000000C531                 db  0Eh
.eh_frame:000000000000C532                 db  30h ; 0
.eh_frame:000000000000C533                 db  41h ; A
.eh_frame:000000000000C534                 db  0Eh
.eh_frame:000000000000C535                 db  28h ; (
.eh_frame:000000000000C536                 db  42h ; B
.eh_frame:000000000000C537                 db  0Eh
.eh_frame:000000000000C538                 db  20h
.eh_frame:000000000000C539                 db  42h ; B
.eh_frame:000000000000C53A                 db  0Eh
.eh_frame:000000000000C53B                 db  18h
.eh_frame:000000000000C53C                 db  42h ; B
.eh_frame:000000000000C53D                 db  0Eh
.eh_frame:000000000000C53E                 db  10h
.eh_frame:000000000000C53F                 db  42h ; B
.eh_frame:000000000000C540                 db  0Eh
.eh_frame:000000000000C541                 db    8
.eh_frame:000000000000C542                 db  4Bh ; K
.eh_frame:000000000000C543                 db  0Bh
.eh_frame:000000000000C544                 db  18h
.eh_frame:000000000000C545                 db    0
.eh_frame:000000000000C546                 db    0
.eh_frame:000000000000C547                 db    0
.eh_frame:000000000000C548                 db  80h
.eh_frame:000000000000C549                 db    3
.eh_frame:000000000000C54A                 db    0
.eh_frame:000000000000C54B                 db    0
.eh_frame:000000000000C54C                 db 0E4h
.eh_frame:000000000000C54D                 db  91h
.eh_frame:000000000000C54E                 db 0FFh
.eh_frame:000000000000C54F                 db 0FFh
.eh_frame:000000000000C550                 db  36h ; 6
.eh_frame:000000000000C551                 db    0
.eh_frame:000000000000C552                 db    0
.eh_frame:000000000000C553                 db    0
.eh_frame:000000000000C554                 db    0
.eh_frame:000000000000C555                 db  44h ; D
.eh_frame:000000000000C556                 db  0Eh
.eh_frame:000000000000C557                 db  10h
.eh_frame:000000000000C558                 db  71h ; q
.eh_frame:000000000000C559                 db  0Eh
.eh_frame:000000000000C55A                 db    8
.eh_frame:000000000000C55B                 db    0
.eh_frame:000000000000C55C                 db    0
.eh_frame:000000000000C55D                 db    0
.eh_frame:000000000000C55E                 db    0
.eh_frame:000000000000C55F                 db    0
.eh_frame:000000000000C560                 db  10h
.eh_frame:000000000000C561                 db    0
.eh_frame:000000000000C562                 db    0
.eh_frame:000000000000C563                 db    0
.eh_frame:000000000000C564                 db  9Ch
.eh_frame:000000000000C565                 db    3
.eh_frame:000000000000C566                 db    0
.eh_frame:000000000000C567                 db    0
.eh_frame:000000000000C568                 db    8
.eh_frame:000000000000C569                 db  92h
.eh_frame:000000000000C56A                 db 0FFh
.eh_frame:000000000000C56B                 db 0FFh
.eh_frame:000000000000C56C                 db  0Ah
.eh_frame:000000000000C56D                 db    0
.eh_frame:000000000000C56E                 db    0
.eh_frame:000000000000C56F                 db    0
.eh_frame:000000000000C570                 db    0
.eh_frame:000000000000C571                 db    0
.eh_frame:000000000000C572                 db    0
.eh_frame:000000000000C573                 db    0
.eh_frame:000000000000C574                 db  48h ; H
.eh_frame:000000000000C575                 db    0
.eh_frame:000000000000C576                 db    0
.eh_frame:000000000000C577                 db    0
.eh_frame:000000000000C578                 db 0B0h
.eh_frame:000000000000C579                 db    3
.eh_frame:000000000000C57A                 db    0
.eh_frame:000000000000C57B                 db    0
.eh_frame:000000000000C57C                 db    4
.eh_frame:000000000000C57D                 db  92h
.eh_frame:000000000000C57E                 db 0FFh
.eh_frame:000000000000C57F                 db 0FFh
.eh_frame:000000000000C580                 db  16h
.eh_frame:000000000000C581                 db    1
.eh_frame:000000000000C582                 db    0
.eh_frame:000000000000C583                 db    0
.eh_frame:000000000000C584                 db    0
.eh_frame:000000000000C585                 db  42h ; B
.eh_frame:000000000000C586                 db  0Eh
.eh_frame:000000000000C587                 db  10h
.eh_frame:000000000000C588                 db  8Fh
.eh_frame:000000000000C589                 db    2
.eh_frame:000000000000C58A                 db  42h ; B
.eh_frame:000000000000C58B                 db  0Eh
.eh_frame:000000000000C58C                 db  18h
.eh_frame:000000000000C58D                 db  8Eh
.eh_frame:000000000000C58E                 db    3
.eh_frame:000000000000C58F                 db  45h ; E
.eh_frame:000000000000C590                 db  0Eh
.eh_frame:000000000000C591                 db  20h
.eh_frame:000000000000C592                 db  8Dh
.eh_frame:000000000000C593                 db    4
.eh_frame:000000000000C594                 db  42h ; B
.eh_frame:000000000000C595                 db  0Eh
.eh_frame:000000000000C596                 db  28h ; (
.eh_frame:000000000000C597                 db  8Ch
.eh_frame:000000000000C598                 db    5
.eh_frame:000000000000C599                 db  44h ; D
.eh_frame:000000000000C59A                 db  0Eh
.eh_frame:000000000000C59B                 db  30h ; 0
.eh_frame:000000000000C59C                 db  86h
.eh_frame:000000000000C59D                 db    6
.eh_frame:000000000000C59E                 db  41h ; A
.eh_frame:000000000000C59F                 db  0Eh
.eh_frame:000000000000C5A0                 db  38h ; 8
.eh_frame:000000000000C5A1                 db  83h
.eh_frame:000000000000C5A2                 db    7
.eh_frame:000000000000C5A3                 db  47h ; G
.eh_frame:000000000000C5A4                 db  0Eh
.eh_frame:000000000000C5A5                 db  60h ; `
.eh_frame:000000000000C5A6                 db    2
.eh_frame:000000000000C5A7                 db 0DEh
.eh_frame:000000000000C5A8                 db  0Ah
.eh_frame:000000000000C5A9                 db  0Eh
.eh_frame:000000000000C5AA                 db  38h ; 8
.eh_frame:000000000000C5AB                 db  41h ; A
.eh_frame:000000000000C5AC                 db  0Eh
.eh_frame:000000000000C5AD                 db  30h ; 0
.eh_frame:000000000000C5AE                 db  41h ; A
.eh_frame:000000000000C5AF                 db  0Eh
.eh_frame:000000000000C5B0                 db  28h ; (
.eh_frame:000000000000C5B1                 db  42h ; B
.eh_frame:000000000000C5B2                 db  0Eh
.eh_frame:000000000000C5B3                 db  20h
.eh_frame:000000000000C5B4                 db  42h ; B
.eh_frame:000000000000C5B5                 db  0Eh
.eh_frame:000000000000C5B6                 db  18h
.eh_frame:000000000000C5B7                 db  42h ; B
.eh_frame:000000000000C5B8                 db  0Eh
.eh_frame:000000000000C5B9                 db  10h
.eh_frame:000000000000C5BA                 db  42h ; B
.eh_frame:000000000000C5BB                 db  0Eh
.eh_frame:000000000000C5BC                 db    8
.eh_frame:000000000000C5BD                 db  41h ; A
.eh_frame:000000000000C5BE                 db  0Bh
.eh_frame:000000000000C5BF                 db    0
.eh_frame:000000000000C5C0                 db  28h ; (
.eh_frame:000000000000C5C1                 db    0
.eh_frame:000000000000C5C2                 db    0
.eh_frame:000000000000C5C3                 db    0
.eh_frame:000000000000C5C4                 db 0FCh
.eh_frame:000000000000C5C5                 db    3
.eh_frame:000000000000C5C6                 db    0
.eh_frame:000000000000C5C7                 db    0
.eh_frame:000000000000C5C8                 db 0D8h
.eh_frame:000000000000C5C9                 db  92h
.eh_frame:000000000000C5CA                 db 0FFh
.eh_frame:000000000000C5CB                 db 0FFh
.eh_frame:000000000000C5CC                 db  73h ; s
.eh_frame:000000000000C5CD                 db    0
.eh_frame:000000000000C5CE                 db    0
.eh_frame:000000000000C5CF                 db    0
.eh_frame:000000000000C5D0                 db    0
.eh_frame:000000000000C5D1                 db  46h ; F
.eh_frame:000000000000C5D2                 db  0Eh
.eh_frame:000000000000C5D3                 db  10h
.eh_frame:000000000000C5D4                 db  8Ch
.eh_frame:000000000000C5D5                 db    2
.eh_frame:000000000000C5D6                 db  46h ; F
.eh_frame:000000000000C5D7                 db  0Eh
.eh_frame:000000000000C5D8                 db  18h
.eh_frame:000000000000C5D9                 db  86h
.eh_frame:000000000000C5DA                 db    3
.eh_frame:000000000000C5DB                 db  44h ; D
.eh_frame:000000000000C5DC                 db  0Eh
.eh_frame:000000000000C5DD                 db  20h
.eh_frame:000000000000C5DE                 db  83h
.eh_frame:000000000000C5DF                 db    4
.eh_frame:000000000000C5E0                 db  7Fh ; 
.eh_frame:000000000000C5E1                 db  0Ah
.eh_frame:000000000000C5E2                 db  0Eh
.eh_frame:000000000000C5E3                 db  18h
.eh_frame:000000000000C5E4                 db  41h ; A
.eh_frame:000000000000C5E5                 db  0Eh
.eh_frame:000000000000C5E6                 db  10h
.eh_frame:000000000000C5E7                 db  42h ; B
.eh_frame:000000000000C5E8                 db  0Eh
.eh_frame:000000000000C5E9                 db    8
.eh_frame:000000000000C5EA                 db  4Eh ; N
.eh_frame:000000000000C5EB                 db  0Bh
.eh_frame:000000000000C5EC                 db  5Ch ; \
.eh_frame:000000000000C5ED                 db    0
.eh_frame:000000000000C5EE                 db    0
.eh_frame:000000000000C5EF                 db    0
.eh_frame:000000000000C5F0                 db  28h ; (
.eh_frame:000000000000C5F1                 db    4
.eh_frame:000000000000C5F2                 db    0
.eh_frame:000000000000C5F3                 db    0
.eh_frame:000000000000C5F4                 db  2Ch ; ,
.eh_frame:000000000000C5F5                 db  93h
.eh_frame:000000000000C5F6                 db 0FFh
.eh_frame:000000000000C5F7                 db 0FFh
.eh_frame:000000000000C5F8                 db  20h
.eh_frame:000000000000C5F9                 db    1
.eh_frame:000000000000C5FA                 db    0
.eh_frame:000000000000C5FB                 db    0
.eh_frame:000000000000C5FC                 db    0
.eh_frame:000000000000C5FD                 db  42h ; B
.eh_frame:000000000000C5FE                 db  0Eh
.eh_frame:000000000000C5FF                 db  10h
.eh_frame:000000000000C600                 db  8Fh
.eh_frame:000000000000C601                 db    2
.eh_frame:000000000000C602                 db  42h ; B
.eh_frame:000000000000C603                 db  0Eh
.eh_frame:000000000000C604                 db  18h
.eh_frame:000000000000C605                 db  8Eh
.eh_frame:000000000000C606                 db    3
.eh_frame:000000000000C607                 db  45h ; E
.eh_frame:000000000000C608                 db  0Eh
.eh_frame:000000000000C609                 db  20h
.eh_frame:000000000000C60A                 db  8Dh
.eh_frame:000000000000C60B                 db    4
.eh_frame:000000000000C60C                 db  42h ; B
.eh_frame:000000000000C60D                 db  0Eh
.eh_frame:000000000000C60E                 db  28h ; (
.eh_frame:000000000000C60F                 db  8Ch
.eh_frame:000000000000C610                 db    5
.eh_frame:000000000000C611                 db  43h ; C
.eh_frame:000000000000C612                 db  0Eh
.eh_frame:000000000000C613                 db  30h ; 0
.eh_frame:000000000000C614                 db  86h
.eh_frame:000000000000C615                 db    6
.eh_frame:000000000000C616                 db  41h ; A
.eh_frame:000000000000C617                 db  0Eh
.eh_frame:000000000000C618                 db  38h ; 8
.eh_frame:000000000000C619                 db  83h
.eh_frame:000000000000C61A                 db    7
.eh_frame:000000000000C61B                 db  56h ; V
.eh_frame:000000000000C61C                 db  0Eh
.eh_frame:000000000000C61D                 db  40h ; @
.eh_frame:000000000000C61E                 db    2
.eh_frame:000000000000C61F                 db 0D3h
.eh_frame:000000000000C620                 db  0Ah
.eh_frame:000000000000C621                 db  0Eh
.eh_frame:000000000000C622                 db  38h ; 8
.eh_frame:000000000000C623                 db  41h ; A
.eh_frame:000000000000C624                 db  0Eh
.eh_frame:000000000000C625                 db  30h ; 0
.eh_frame:000000000000C626                 db  41h ; A
.eh_frame:000000000000C627                 db  0Eh
.eh_frame:000000000000C628                 db  28h ; (
.eh_frame:000000000000C629                 db  42h ; B
.eh_frame:000000000000C62A                 db  0Eh
.eh_frame:000000000000C62B                 db  20h
.eh_frame:000000000000C62C                 db  42h ; B
.eh_frame:000000000000C62D                 db  0Eh
.eh_frame:000000000000C62E                 db  18h
.eh_frame:000000000000C62F                 db  42h ; B
.eh_frame:000000000000C630                 db  0Eh
.eh_frame:000000000000C631                 db  10h
.eh_frame:000000000000C632                 db  42h ; B
.eh_frame:000000000000C633                 db  0Eh
.eh_frame:000000000000C634                 db    8
.eh_frame:000000000000C635                 db  46h ; F
.eh_frame:000000000000C636                 db  0Bh
.eh_frame:000000000000C637                 db  44h ; D
.eh_frame:000000000000C638                 db  0Eh
.eh_frame:000000000000C639                 db  38h ; 8
.eh_frame:000000000000C63A                 db  46h ; F
.eh_frame:000000000000C63B                 db  0Eh
.eh_frame:000000000000C63C                 db  30h ; 0
.eh_frame:000000000000C63D                 db  41h ; A
.eh_frame:000000000000C63E                 db  0Eh
.eh_frame:000000000000C63F                 db  28h ; (
.eh_frame:000000000000C640                 db  42h ; B
.eh_frame:000000000000C641                 db  0Eh
.eh_frame:000000000000C642                 db  20h
.eh_frame:000000000000C643                 db  42h ; B
.eh_frame:000000000000C644                 db  0Eh
.eh_frame:000000000000C645                 db  18h
.eh_frame:000000000000C646                 db  42h ; B
.eh_frame:000000000000C647                 db  0Eh
.eh_frame:000000000000C648                 db  10h
.eh_frame:000000000000C649                 db  42h ; B
.eh_frame:000000000000C64A                 db  0Eh
.eh_frame:000000000000C64B                 db    8
.eh_frame:000000000000C64C                 db  48h ; H
.eh_frame:000000000000C64D                 db    0
.eh_frame:000000000000C64E                 db    0
.eh_frame:000000000000C64F                 db    0
.eh_frame:000000000000C650                 db  88h
.eh_frame:000000000000C651                 db    4
.eh_frame:000000000000C652                 db    0
.eh_frame:000000000000C653                 db    0
.eh_frame:000000000000C654                 db 0ECh
.eh_frame:000000000000C655                 db  93h
.eh_frame:000000000000C656                 db 0FFh
.eh_frame:000000000000C657                 db 0FFh
.eh_frame:000000000000C658                 db  6Dh ; m
.eh_frame:000000000000C659                 db    0
.eh_frame:000000000000C65A                 db    0
.eh_frame:000000000000C65B                 db    0
.eh_frame:000000000000C65C                 db    0
.eh_frame:000000000000C65D                 db  42h ; B
.eh_frame:000000000000C65E                 db  0Eh
.eh_frame:000000000000C65F                 db  10h
.eh_frame:000000000000C660                 db  8Fh
.eh_frame:000000000000C661                 db    2
.eh_frame:000000000000C662                 db  42h ; B
.eh_frame:000000000000C663                 db  0Eh
.eh_frame:000000000000C664                 db  18h
.eh_frame:000000000000C665                 db  8Eh
.eh_frame:000000000000C666                 db    3
.eh_frame:000000000000C667                 db  45h ; E
.eh_frame:000000000000C668                 db  0Eh
.eh_frame:000000000000C669                 db  20h
.eh_frame:000000000000C66A                 db  8Dh
.eh_frame:000000000000C66B                 db    4
.eh_frame:000000000000C66C                 db  42h ; B
.eh_frame:000000000000C66D                 db  0Eh
.eh_frame:000000000000C66E                 db  28h ; (
.eh_frame:000000000000C66F                 db  8Ch
.eh_frame:000000000000C670                 db    5
.eh_frame:000000000000C671                 db  44h ; D
.eh_frame:000000000000C672                 db  0Eh
.eh_frame:000000000000C673                 db  30h ; 0
.eh_frame:000000000000C674                 db  86h
.eh_frame:000000000000C675                 db    6
.eh_frame:000000000000C676                 db  41h ; A
.eh_frame:000000000000C677                 db  0Eh
.eh_frame:000000000000C678                 db  38h ; 8
.eh_frame:000000000000C679                 db  83h
.eh_frame:000000000000C67A                 db    7
.eh_frame:000000000000C67B                 db  50h ; P
.eh_frame:000000000000C67C                 db  0Eh
.eh_frame:000000000000C67D                 db  40h ; @
.eh_frame:000000000000C67E                 db  5Ah ; Z
.eh_frame:000000000000C67F                 db  0Ah
.eh_frame:000000000000C680                 db  0Eh
.eh_frame:000000000000C681                 db  38h ; 8
.eh_frame:000000000000C682                 db  41h ; A
.eh_frame:000000000000C683                 db  0Eh
.eh_frame:000000000000C684                 db  30h ; 0
.eh_frame:000000000000C685                 db  41h ; A
.eh_frame:000000000000C686                 db  0Eh
.eh_frame:000000000000C687                 db  28h ; (
.eh_frame:000000000000C688                 db  42h ; B
.eh_frame:000000000000C689                 db  0Eh
.eh_frame:000000000000C68A                 db  20h
.eh_frame:000000000000C68B                 db  42h ; B
.eh_frame:000000000000C68C                 db  0Eh
.eh_frame:000000000000C68D                 db  18h
.eh_frame:000000000000C68E                 db  42h ; B
.eh_frame:000000000000C68F                 db  0Eh
.eh_frame:000000000000C690                 db  10h
.eh_frame:000000000000C691                 db  42h ; B
.eh_frame:000000000000C692                 db  0Eh
.eh_frame:000000000000C693                 db    8
.eh_frame:000000000000C694                 db  41h ; A
.eh_frame:000000000000C695                 db  0Bh
.eh_frame:000000000000C696                 db    0
.eh_frame:000000000000C697                 db    0
.eh_frame:000000000000C698                 db  3Ch ; <
.eh_frame:000000000000C699                 db    0
.eh_frame:000000000000C69A                 db    0
.eh_frame:000000000000C69B                 db    0
.eh_frame:000000000000C69C                 db 0D4h
.eh_frame:000000000000C69D                 db    4
.eh_frame:000000000000C69E                 db    0
.eh_frame:000000000000C69F                 db    0
.eh_frame:000000000000C6A0                 db  10h
.eh_frame:000000000000C6A1                 db  94h
.eh_frame:000000000000C6A2                 db 0FFh
.eh_frame:000000000000C6A3                 db 0FFh
.eh_frame:000000000000C6A4                 db  4Dh ; M
.eh_frame:000000000000C6A5                 db    0
.eh_frame:000000000000C6A6                 db    0
.eh_frame:000000000000C6A7                 db    0
.eh_frame:000000000000C6A8                 db    0
.eh_frame:000000000000C6A9                 db  42h ; B
.eh_frame:000000000000C6AA                 db  0Eh
.eh_frame:000000000000C6AB                 db  10h
.eh_frame:000000000000C6AC                 db  8Eh
.eh_frame:000000000000C6AD                 db    2
.eh_frame:000000000000C6AE                 db  42h ; B
.eh_frame:000000000000C6AF                 db  0Eh
.eh_frame:000000000000C6B0                 db  18h
.eh_frame:000000000000C6B1                 db  8Dh
.eh_frame:000000000000C6B2                 db    3
.eh_frame:000000000000C6B3                 db  42h ; B
.eh_frame:000000000000C6B4                 db  0Eh
.eh_frame:000000000000C6B5                 db  20h
.eh_frame:000000000000C6B6                 db  8Ch
.eh_frame:000000000000C6B7                 db    4
.eh_frame:000000000000C6B8                 db  41h ; A
.eh_frame:000000000000C6B9                 db  0Eh
.eh_frame:000000000000C6BA                 db  28h ; (
.eh_frame:000000000000C6BB                 db  86h
.eh_frame:000000000000C6BC                 db    5
.eh_frame:000000000000C6BD                 db  41h ; A
.eh_frame:000000000000C6BE                 db  0Eh
.eh_frame:000000000000C6BF                 db  30h ; 0
.eh_frame:000000000000C6C0                 db  83h
.eh_frame:000000000000C6C1                 db    6
.eh_frame:000000000000C6C2                 db  7Ah ; z
.eh_frame:000000000000C6C3                 db  0Eh
.eh_frame:000000000000C6C4                 db  28h ; (
.eh_frame:000000000000C6C5                 db  44h ; D
.eh_frame:000000000000C6C6                 db  0Eh
.eh_frame:000000000000C6C7                 db  20h
.eh_frame:000000000000C6C8                 db  42h ; B
.eh_frame:000000000000C6C9                 db  0Eh
.eh_frame:000000000000C6CA                 db  18h
.eh_frame:000000000000C6CB                 db  42h ; B
.eh_frame:000000000000C6CC                 db  0Eh
.eh_frame:000000000000C6CD                 db  10h
.eh_frame:000000000000C6CE                 db  42h ; B
.eh_frame:000000000000C6CF                 db  0Eh
.eh_frame:000000000000C6D0                 db    8
.eh_frame:000000000000C6D1                 db    0
.eh_frame:000000000000C6D2                 db    0
.eh_frame:000000000000C6D3                 db    0
.eh_frame:000000000000C6D4                 db    0
.eh_frame:000000000000C6D5                 db    0
.eh_frame:000000000000C6D6                 db    0
.eh_frame:000000000000C6D7                 db    0
.eh_frame:000000000000C6D8                 db  10h
.eh_frame:000000000000C6D9                 db    0
.eh_frame:000000000000C6DA                 db    0
.eh_frame:000000000000C6DB                 db    0
.eh_frame:000000000000C6DC                 db  14h
.eh_frame:000000000000C6DD                 db    5
.eh_frame:000000000000C6DE                 db    0
.eh_frame:000000000000C6DF                 db    0
.eh_frame:000000000000C6E0                 db  20h
.eh_frame:000000000000C6E1                 db  94h
.eh_frame:000000000000C6E2                 db 0FFh
.eh_frame:000000000000C6E3                 db 0FFh
.eh_frame:000000000000C6E4                 db    8
.eh_frame:000000000000C6E5                 db    0
.eh_frame:000000000000C6E6                 db    0
.eh_frame:000000000000C6E7                 db    0
.eh_frame:000000000000C6E8                 db    0
.eh_frame:000000000000C6E9                 db    0
.eh_frame:000000000000C6EA                 db    0
.eh_frame:000000000000C6EB                 db    0
.eh_frame:000000000000C6EC                 db  10h
.eh_frame:000000000000C6ED                 db    0
.eh_frame:000000000000C6EE                 db    0
.eh_frame:000000000000C6EF                 db    0
.eh_frame:000000000000C6F0                 db  28h ; (
.eh_frame:000000000000C6F1                 db    5
.eh_frame:000000000000C6F2                 db    0
.eh_frame:000000000000C6F3                 db    0
.eh_frame:000000000000C6F4                 db  1Ch
.eh_frame:000000000000C6F5                 db  94h
.eh_frame:000000000000C6F6                 db 0FFh
.eh_frame:000000000000C6F7                 db 0FFh
.eh_frame:000000000000C6F8                 db    8
.eh_frame:000000000000C6F9                 db    0
.eh_frame:000000000000C6FA                 db    0
.eh_frame:000000000000C6FB                 db    0
.eh_frame:000000000000C6FC                 db    0
.eh_frame:000000000000C6FD                 db    0
.eh_frame:000000000000C6FE                 db    0
.eh_frame:000000000000C6FF                 db    0
.eh_frame:000000000000C700                 db  2Ch ; ,
.eh_frame:000000000000C701                 db    0
.eh_frame:000000000000C702                 db    0
.eh_frame:000000000000C703                 db    0
.eh_frame:000000000000C704                 db  3Ch ; <
.eh_frame:000000000000C705                 db    5
.eh_frame:000000000000C706                 db    0
.eh_frame:000000000000C707                 db    0
.eh_frame:000000000000C708                 db  18h
.eh_frame:000000000000C709                 db  94h
.eh_frame:000000000000C70A                 db 0FFh
.eh_frame:000000000000C70B                 db 0FFh
.eh_frame:000000000000C70C                 db 0A4h
.eh_frame:000000000000C70D                 db    0
.eh_frame:000000000000C70E                 db    0
.eh_frame:000000000000C70F                 db    0
.eh_frame:000000000000C710                 db    0
.eh_frame:000000000000C711                 db  41h ; A
.eh_frame:000000000000C712                 db  0Eh
.eh_frame:000000000000C713                 db  10h
.eh_frame:000000000000C714                 db  86h
.eh_frame:000000000000C715                 db    2
.eh_frame:000000000000C716                 db  41h ; A
.eh_frame:000000000000C717                 db  0Eh
.eh_frame:000000000000C718                 db  18h
.eh_frame:000000000000C719                 db  83h
.eh_frame:000000000000C71A                 db    3
.eh_frame:000000000000C71B                 db  44h ; D
.eh_frame:000000000000C71C                 db  0Eh
.eh_frame:000000000000C71D                 db  20h
.eh_frame:000000000000C71E                 db  7Ah ; z
.eh_frame:000000000000C71F                 db  0Ah
.eh_frame:000000000000C720                 db  0Eh
.eh_frame:000000000000C721                 db  18h
.eh_frame:000000000000C722                 db  41h ; A
.eh_frame:000000000000C723                 db  0Eh
.eh_frame:000000000000C724                 db  10h
.eh_frame:000000000000C725                 db  41h ; A
.eh_frame:000000000000C726                 db  0Eh
.eh_frame:000000000000C727                 db    8
.eh_frame:000000000000C728                 db  41h ; A
.eh_frame:000000000000C729                 db  0Bh
.eh_frame:000000000000C72A                 db    0
.eh_frame:000000000000C72B                 db    0
.eh_frame:000000000000C72C                 db    0
.eh_frame:000000000000C72D                 db    0
.eh_frame:000000000000C72E                 db    0
.eh_frame:000000000000C72F                 db    0
.eh_frame:000000000000C730                 db  48h ; H
.eh_frame:000000000000C731                 db    0
.eh_frame:000000000000C732                 db    0
.eh_frame:000000000000C733                 db    0
.eh_frame:000000000000C734                 db  6Ch ; l
.eh_frame:000000000000C735                 db    5
.eh_frame:000000000000C736                 db    0
.eh_frame:000000000000C737                 db    0
.eh_frame:000000000000C738                 db  98h
.eh_frame:000000000000C739                 db  94h
.eh_frame:000000000000C73A                 db 0FFh
.eh_frame:000000000000C73B                 db 0FFh
.eh_frame:000000000000C73C                 db 0C4h
.eh_frame:000000000000C73D                 db    3
.eh_frame:000000000000C73E                 db    0
.eh_frame:000000000000C73F                 db    0
.eh_frame:000000000000C740                 db    0
.eh_frame:000000000000C741                 db  42h ; B
.eh_frame:000000000000C742                 db  0Eh
.eh_frame:000000000000C743                 db  10h
.eh_frame:000000000000C744                 db  8Fh
.eh_frame:000000000000C745                 db    2
.eh_frame:000000000000C746                 db  42h ; B
.eh_frame:000000000000C747                 db  0Eh
.eh_frame:000000000000C748                 db  18h
.eh_frame:000000000000C749                 db  8Eh
.eh_frame:000000000000C74A                 db    3
.eh_frame:000000000000C74B                 db  45h ; E
.eh_frame:000000000000C74C                 db  0Eh
.eh_frame:000000000000C74D                 db  20h
.eh_frame:000000000000C74E                 db  8Dh
.eh_frame:000000000000C74F                 db    4
.eh_frame:000000000000C750                 db  42h ; B
.eh_frame:000000000000C751                 db  0Eh
.eh_frame:000000000000C752                 db  28h ; (
.eh_frame:000000000000C753                 db  8Ch
.eh_frame:000000000000C754                 db    5
.eh_frame:000000000000C755                 db  44h ; D
.eh_frame:000000000000C756                 db  0Eh
.eh_frame:000000000000C757                 db  30h ; 0
.eh_frame:000000000000C758                 db  86h
.eh_frame:000000000000C759                 db    6
.eh_frame:000000000000C75A                 db  41h ; A
.eh_frame:000000000000C75B                 db  0Eh
.eh_frame:000000000000C75C                 db  38h ; 8
.eh_frame:000000000000C75D                 db  83h
.eh_frame:000000000000C75E                 db    7
.eh_frame:000000000000C75F                 db  4Ah ; J
.eh_frame:000000000000C760                 db  0Eh
.eh_frame:000000000000C761                 db  70h ; p
.eh_frame:000000000000C762                 db    3
.eh_frame:000000000000C763                 db  2Eh ; .
.eh_frame:000000000000C764                 db    1
.eh_frame:000000000000C765                 db  0Ah
.eh_frame:000000000000C766                 db  0Eh
.eh_frame:000000000000C767                 db  38h ; 8
.eh_frame:000000000000C768                 db  44h ; D
.eh_frame:000000000000C769                 db  0Eh
.eh_frame:000000000000C76A                 db  30h ; 0
.eh_frame:000000000000C76B                 db  41h ; A
.eh_frame:000000000000C76C                 db  0Eh
.eh_frame:000000000000C76D                 db  28h ; (
.eh_frame:000000000000C76E                 db  42h ; B
.eh_frame:000000000000C76F                 db  0Eh
.eh_frame:000000000000C770                 db  20h
.eh_frame:000000000000C771                 db  42h ; B
.eh_frame:000000000000C772                 db  0Eh
.eh_frame:000000000000C773                 db  18h
.eh_frame:000000000000C774                 db  42h ; B
.eh_frame:000000000000C775                 db  0Eh
.eh_frame:000000000000C776                 db  10h
.eh_frame:000000000000C777                 db  42h ; B
.eh_frame:000000000000C778                 db  0Eh
.eh_frame:000000000000C779                 db    8
.eh_frame:000000000000C77A                 db  4Bh ; K
.eh_frame:000000000000C77B                 db  0Bh
.eh_frame:000000000000C77C                 db  48h ; H
.eh_frame:000000000000C77D                 db    0
.eh_frame:000000000000C77E                 db    0
.eh_frame:000000000000C77F                 db    0
.eh_frame:000000000000C780                 db 0B8h
.eh_frame:000000000000C781                 db    5
.eh_frame:000000000000C782                 db    0
.eh_frame:000000000000C783                 db    0
.eh_frame:000000000000C784                 db  1Ch
.eh_frame:000000000000C785                 db  98h
.eh_frame:000000000000C786                 db 0FFh
.eh_frame:000000000000C787                 db 0FFh
.eh_frame:000000000000C788                 db  9Dh
.eh_frame:000000000000C789                 db    0
.eh_frame:000000000000C78A                 db    0
.eh_frame:000000000000C78B                 db    0
.eh_frame:000000000000C78C                 db    0
.eh_frame:000000000000C78D                 db  42h ; B
.eh_frame:000000000000C78E                 db  0Eh
.eh_frame:000000000000C78F                 db  10h
.eh_frame:000000000000C790                 db  8Fh
.eh_frame:000000000000C791                 db    2
.eh_frame:000000000000C792                 db  42h ; B
.eh_frame:000000000000C793                 db  0Eh
.eh_frame:000000000000C794                 db  18h
.eh_frame:000000000000C795                 db  8Eh
.eh_frame:000000000000C796                 db    3
.eh_frame:000000000000C797                 db  45h ; E
.eh_frame:000000000000C798                 db  0Eh
.eh_frame:000000000000C799                 db  20h
.eh_frame:000000000000C79A                 db  8Dh
.eh_frame:000000000000C79B                 db    4
.eh_frame:000000000000C79C                 db  42h ; B
.eh_frame:000000000000C79D                 db  0Eh
.eh_frame:000000000000C79E                 db  28h ; (
.eh_frame:000000000000C79F                 db  8Ch
.eh_frame:000000000000C7A0                 db    5
.eh_frame:000000000000C7A1                 db  44h ; D
.eh_frame:000000000000C7A2                 db  0Eh
.eh_frame:000000000000C7A3                 db  30h ; 0
.eh_frame:000000000000C7A4                 db  86h
.eh_frame:000000000000C7A5                 db    6
.eh_frame:000000000000C7A6                 db  41h ; A
.eh_frame:000000000000C7A7                 db  0Eh
.eh_frame:000000000000C7A8                 db  38h ; 8
.eh_frame:000000000000C7A9                 db  83h
.eh_frame:000000000000C7AA                 db    7
.eh_frame:000000000000C7AB                 db  47h ; G
.eh_frame:000000000000C7AC                 db  0Eh
.eh_frame:000000000000C7AD                 db  50h ; P
.eh_frame:000000000000C7AE                 db    2
.eh_frame:000000000000C7AF                 db  59h ; Y
.eh_frame:000000000000C7B0                 db  0Ah
.eh_frame:000000000000C7B1                 db  0Eh
.eh_frame:000000000000C7B2                 db  38h ; 8
.eh_frame:000000000000C7B3                 db  44h ; D
.eh_frame:000000000000C7B4                 db  0Eh
.eh_frame:000000000000C7B5                 db  30h ; 0
.eh_frame:000000000000C7B6                 db  41h ; A
.eh_frame:000000000000C7B7                 db  0Eh
.eh_frame:000000000000C7B8                 db  28h ; (
.eh_frame:000000000000C7B9                 db  42h ; B
.eh_frame:000000000000C7BA                 db  0Eh
.eh_frame:000000000000C7BB                 db  20h
.eh_frame:000000000000C7BC                 db  42h ; B
.eh_frame:000000000000C7BD                 db  0Eh
.eh_frame:000000000000C7BE                 db  18h
.eh_frame:000000000000C7BF                 db  42h ; B
.eh_frame:000000000000C7C0                 db  0Eh
.eh_frame:000000000000C7C1                 db  10h
.eh_frame:000000000000C7C2                 db  42h ; B
.eh_frame:000000000000C7C3                 db  0Eh
.eh_frame:000000000000C7C4                 db    8
.eh_frame:000000000000C7C5                 db  43h ; C
.eh_frame:000000000000C7C6                 db  0Bh
.eh_frame:000000000000C7C7                 db    0
.eh_frame:000000000000C7C8                 db  1Ch
.eh_frame:000000000000C7C9                 db    0
.eh_frame:000000000000C7CA                 db    0
.eh_frame:000000000000C7CB                 db    0
.eh_frame:000000000000C7CC                 db    4
.eh_frame:000000000000C7CD                 db    6
.eh_frame:000000000000C7CE                 db    0
.eh_frame:000000000000C7CF                 db    0
.eh_frame:000000000000C7D0                 db  70h ; p
.eh_frame:000000000000C7D1                 db  98h
.eh_frame:000000000000C7D2                 db 0FFh
.eh_frame:000000000000C7D3                 db 0FFh
.eh_frame:000000000000C7D4                 db  9Fh
.eh_frame:000000000000C7D5                 db    0
.eh_frame:000000000000C7D6                 db    0
.eh_frame:000000000000C7D7                 db    0
.eh_frame:000000000000C7D8                 db    0
.eh_frame:000000000000C7D9                 db  44h ; D
.eh_frame:000000000000C7DA                 db  0Eh
.eh_frame:000000000000C7DB                 db  10h
.eh_frame:000000000000C7DC                 db  83h
.eh_frame:000000000000C7DD                 db    2
.eh_frame:000000000000C7DE                 db    2
.eh_frame:000000000000C7DF                 db  78h ; x
.eh_frame:000000000000C7E0                 db  0Ah
.eh_frame:000000000000C7E1                 db  0Eh
.eh_frame:000000000000C7E2                 db    8
.eh_frame:000000000000C7E3                 db  41h ; A
.eh_frame:000000000000C7E4                 db  0Bh
.eh_frame:000000000000C7E5                 db    0
.eh_frame:000000000000C7E6                 db    0
.eh_frame:000000000000C7E7                 db    0
.eh_frame:000000000000C7E8                 db  40h ; @
.eh_frame:000000000000C7E9                 db    0
.eh_frame:000000000000C7EA                 db    0
.eh_frame:000000000000C7EB                 db    0
.eh_frame:000000000000C7EC                 db  24h ; $
.eh_frame:000000000000C7ED                 db    6
.eh_frame:000000000000C7EE                 db    0
.eh_frame:000000000000C7EF                 db    0
.eh_frame:000000000000C7F0                 db 0F0h
.eh_frame:000000000000C7F1                 db  98h
.eh_frame:000000000000C7F2                 db 0FFh
.eh_frame:000000000000C7F3                 db 0FFh
.eh_frame:000000000000C7F4                 db 0E7h
.eh_frame:000000000000C7F5                 db    0
.eh_frame:000000000000C7F6                 db    0
.eh_frame:000000000000C7F7                 db    0
.eh_frame:000000000000C7F8                 db    0
.eh_frame:000000000000C7F9                 db  41h ; A
.eh_frame:000000000000C7FA                 db  0Eh
.eh_frame:000000000000C7FB                 db  10h
.eh_frame:000000000000C7FC                 db  86h
.eh_frame:000000000000C7FD                 db    2
.eh_frame:000000000000C7FE                 db  41h ; A
.eh_frame:000000000000C7FF                 db  0Eh
.eh_frame:000000000000C800                 db  18h
.eh_frame:000000000000C801                 db  83h
.eh_frame:000000000000C802                 db    3
.eh_frame:000000000000C803                 db  49h ; I
.eh_frame:000000000000C804                 db  0Eh
.eh_frame:000000000000C805                 db  20h
.eh_frame:000000000000C806                 db  6Eh ; n
.eh_frame:000000000000C807                 db  0Ah
.eh_frame:000000000000C808                 db  0Eh
.eh_frame:000000000000C809                 db  18h
.eh_frame:000000000000C80A                 db  41h ; A
.eh_frame:000000000000C80B                 db  0Eh
.eh_frame:000000000000C80C                 db  10h
.eh_frame:000000000000C80D                 db  41h ; A
.eh_frame:000000000000C80E                 db  0Eh
.eh_frame:000000000000C80F                 db    8
.eh_frame:000000000000C810                 db  45h ; E
.eh_frame:000000000000C811                 db  0Bh
.eh_frame:000000000000C812                 db    2
.eh_frame:000000000000C813                 db  4Ah ; J
.eh_frame:000000000000C814                 db  0Ah
.eh_frame:000000000000C815                 db  0Eh
.eh_frame:000000000000C816                 db  18h
.eh_frame:000000000000C817                 db  41h ; A
.eh_frame:000000000000C818                 db  0Eh
.eh_frame:000000000000C819                 db  10h
.eh_frame:000000000000C81A                 db  41h ; A
.eh_frame:000000000000C81B                 db  0Eh
.eh_frame:000000000000C81C                 db    8
.eh_frame:000000000000C81D                 db  44h ; D
.eh_frame:000000000000C81E                 db  0Bh
.eh_frame:000000000000C81F                 db    2
.eh_frame:000000000000C820                 db  54h ; T
.eh_frame:000000000000C821                 db  0Eh
.eh_frame:000000000000C822                 db  18h
.eh_frame:000000000000C823                 db  41h ; A
.eh_frame:000000000000C824                 db  0Eh
.eh_frame:000000000000C825                 db  10h
.eh_frame:000000000000C826                 db  41h ; A
.eh_frame:000000000000C827                 db  0Eh
.eh_frame:000000000000C828                 db    8
.eh_frame:000000000000C829                 db    0
.eh_frame:000000000000C82A                 db    0
.eh_frame:000000000000C82B                 db    0
.eh_frame:000000000000C82C                 db  74h ; t
.eh_frame:000000000000C82D                 db    0
.eh_frame:000000000000C82E                 db    0
.eh_frame:000000000000C82F                 db    0
.eh_frame:000000000000C830                 db  68h ; h
.eh_frame:000000000000C831                 db    6
.eh_frame:000000000000C832                 db    0
.eh_frame:000000000000C833                 db    0
.eh_frame:000000000000C834                 db  9Ch
.eh_frame:000000000000C835                 db  99h
.eh_frame:000000000000C836                 db 0FFh
.eh_frame:000000000000C837                 db 0FFh
.eh_frame:000000000000C838                 db  34h ; 4
.eh_frame:000000000000C839                 db  12h
.eh_frame:000000000000C83A                 db    0
.eh_frame:000000000000C83B                 db    0
.eh_frame:000000000000C83C                 db    0
.eh_frame:000000000000C83D                 db  42h ; B
.eh_frame:000000000000C83E                 db  0Eh
.eh_frame:000000000000C83F                 db  10h
.eh_frame:000000000000C840                 db  8Fh
.eh_frame:000000000000C841                 db    2
.eh_frame:000000000000C842                 db  42h ; B
.eh_frame:000000000000C843                 db  0Eh
.eh_frame:000000000000C844                 db  18h
.eh_frame:000000000000C845                 db  8Eh
.eh_frame:000000000000C846                 db    3
.eh_frame:000000000000C847                 db  45h ; E
.eh_frame:000000000000C848                 db  0Eh
.eh_frame:000000000000C849                 db  20h
.eh_frame:000000000000C84A                 db  8Dh
.eh_frame:000000000000C84B                 db    4
.eh_frame:000000000000C84C                 db  42h ; B
.eh_frame:000000000000C84D                 db  0Eh
.eh_frame:000000000000C84E                 db  28h ; (
.eh_frame:000000000000C84F                 db  8Ch
.eh_frame:000000000000C850                 db    5
.eh_frame:000000000000C851                 db  44h ; D
.eh_frame:000000000000C852                 db  0Eh
.eh_frame:000000000000C853                 db  30h ; 0
.eh_frame:000000000000C854                 db  86h
.eh_frame:000000000000C855                 db    6
.eh_frame:000000000000C856                 db  41h ; A
.eh_frame:000000000000C857                 db  0Eh
.eh_frame:000000000000C858                 db  38h ; 8
.eh_frame:000000000000C859                 db  83h
.eh_frame:000000000000C85A                 db    7
.eh_frame:000000000000C85B                 db  53h ; S
.eh_frame:000000000000C85C                 db  0Eh
.eh_frame:000000000000C85D                 db 0F0h
.eh_frame:000000000000C85E                 db    1
.eh_frame:000000000000C85F                 db    3
.eh_frame:000000000000C860                 db  81h
.eh_frame:000000000000C861                 db  0Bh
.eh_frame:000000000000C862                 db  0Eh
.eh_frame:000000000000C863                 db 0F8h
.eh_frame:000000000000C864                 db    1
.eh_frame:000000000000C865                 db  4Ah ; J
.eh_frame:000000000000C866                 db  0Eh
.eh_frame:000000000000C867                 db  80h
.eh_frame:000000000000C868                 db    2
.eh_frame:000000000000C869                 db  44h ; D
.eh_frame:000000000000C86A                 db  0Eh
.eh_frame:000000000000C86B                 db  88h
.eh_frame:000000000000C86C                 db    2
.eh_frame:000000000000C86D                 db  45h ; E
.eh_frame:000000000000C86E                 db  0Eh
.eh_frame:000000000000C86F                 db  90h
.eh_frame:000000000000C870                 db    2
.eh_frame:000000000000C871                 db  5Fh ; _
.eh_frame:000000000000C872                 db  0Eh
.eh_frame:000000000000C873                 db 0F0h
.eh_frame:000000000000C874                 db    1
.eh_frame:000000000000C875                 db  64h ; d
.eh_frame:000000000000C876                 db  0Ah
.eh_frame:000000000000C877                 db  0Eh
.eh_frame:000000000000C878                 db  38h ; 8
.eh_frame:000000000000C879                 db  41h ; A
.eh_frame:000000000000C87A                 db  0Eh
.eh_frame:000000000000C87B                 db  30h ; 0
.eh_frame:000000000000C87C                 db  41h ; A
.eh_frame:000000000000C87D                 db  0Eh
.eh_frame:000000000000C87E                 db  28h ; (
.eh_frame:000000000000C87F                 db  42h ; B
.eh_frame:000000000000C880                 db  0Eh
.eh_frame:000000000000C881                 db  20h
.eh_frame:000000000000C882                 db  42h ; B
.eh_frame:000000000000C883                 db  0Eh
.eh_frame:000000000000C884                 db  18h
.eh_frame:000000000000C885                 db  42h ; B
.eh_frame:000000000000C886                 db  0Eh
.eh_frame:000000000000C887                 db  10h
.eh_frame:000000000000C888                 db  42h ; B
.eh_frame:000000000000C889                 db  0Eh
.eh_frame:000000000000C88A                 db    8
.eh_frame:000000000000C88B                 db  44h ; D
.eh_frame:000000000000C88C                 db  0Bh
.eh_frame:000000000000C88D                 db    3
.eh_frame:000000000000C88E                 db  99h
.eh_frame:000000000000C88F                 db    5
.eh_frame:000000000000C890                 db  0Eh
.eh_frame:000000000000C891                 db 0F8h
.eh_frame:000000000000C892                 db    1
.eh_frame:000000000000C893                 db  4Dh ; M
.eh_frame:000000000000C894                 db  0Eh
.eh_frame:000000000000C895                 db  80h
.eh_frame:000000000000C896                 db    2
.eh_frame:000000000000C897                 db  44h ; D
.eh_frame:000000000000C898                 db  0Eh
.eh_frame:000000000000C899                 db  88h
.eh_frame:000000000000C89A                 db    2
.eh_frame:000000000000C89B                 db  47h ; G
.eh_frame:000000000000C89C                 db  0Eh
.eh_frame:000000000000C89D                 db  90h
.eh_frame:000000000000C89E                 db    2
.eh_frame:000000000000C89F                 db  5Bh ; [
.eh_frame:000000000000C8A0                 db  0Eh
.eh_frame:000000000000C8A1                 db 0F0h
.eh_frame:000000000000C8A2                 db    1
.eh_frame:000000000000C8A3                 db    0
.eh_frame:000000000000C8A4                 db  68h ; h
.eh_frame:000000000000C8A5                 db    0
.eh_frame:000000000000C8A6                 db    0
.eh_frame:000000000000C8A7                 db    0
.eh_frame:000000000000C8A8                 db 0E0h
.eh_frame:000000000000C8A9                 db    6
.eh_frame:000000000000C8AA                 db    0
.eh_frame:000000000000C8AB                 db    0
.eh_frame:000000000000C8AC                 db  64h ; d
.eh_frame:000000000000C8AD                 db 0ABh
.eh_frame:000000000000C8AE                 db 0FFh
.eh_frame:000000000000C8AF                 db 0FFh
.eh_frame:000000000000C8B0                 db 0ABh
.eh_frame:000000000000C8B1                 db    1
.eh_frame:000000000000C8B2                 db    0
.eh_frame:000000000000C8B3                 db    0
.eh_frame:000000000000C8B4                 db    0
.eh_frame:000000000000C8B5                 db  42h ; B
.eh_frame:000000000000C8B6                 db  0Eh
.eh_frame:000000000000C8B7                 db  10h
.eh_frame:000000000000C8B8                 db  8Fh
.eh_frame:000000000000C8B9                 db    2
.eh_frame:000000000000C8BA                 db  42h ; B
.eh_frame:000000000000C8BB                 db  0Eh
.eh_frame:000000000000C8BC                 db  18h
.eh_frame:000000000000C8BD                 db  8Eh
.eh_frame:000000000000C8BE                 db    3
.eh_frame:000000000000C8BF                 db  45h ; E
.eh_frame:000000000000C8C0                 db  0Eh
.eh_frame:000000000000C8C1                 db  20h
.eh_frame:000000000000C8C2                 db  8Dh
.eh_frame:000000000000C8C3                 db    4
.eh_frame:000000000000C8C4                 db  42h ; B
.eh_frame:000000000000C8C5                 db  0Eh
.eh_frame:000000000000C8C6                 db  28h ; (
.eh_frame:000000000000C8C7                 db  8Ch
.eh_frame:000000000000C8C8                 db    5
.eh_frame:000000000000C8C9                 db  44h ; D
.eh_frame:000000000000C8CA                 db  0Eh
.eh_frame:000000000000C8CB                 db  30h ; 0
.eh_frame:000000000000C8CC                 db  86h
.eh_frame:000000000000C8CD                 db    6
.eh_frame:000000000000C8CE                 db  41h ; A
.eh_frame:000000000000C8CF                 db  0Eh
.eh_frame:000000000000C8D0                 db  38h ; 8
.eh_frame:000000000000C8D1                 db  83h
.eh_frame:000000000000C8D2                 db    7
.eh_frame:000000000000C8D3                 db  47h ; G
.eh_frame:000000000000C8D4                 db  0Eh
.eh_frame:000000000000C8D5                 db  60h ; `
.eh_frame:000000000000C8D6                 db    2
.eh_frame:000000000000C8D7                 db  99h
.eh_frame:000000000000C8D8                 db  0Eh
.eh_frame:000000000000C8D9                 db  68h ; h
.eh_frame:000000000000C8DA                 db  5Fh ; _
.eh_frame:000000000000C8DB                 db  0Eh
.eh_frame:000000000000C8DC                 db  70h ; p
.eh_frame:000000000000C8DD                 db  46h ; F
.eh_frame:000000000000C8DE                 db  0Eh
.eh_frame:000000000000C8DF                 db  78h ; x
.eh_frame:000000000000C8E0                 db  42h ; B
.eh_frame:000000000000C8E1                 db  0Eh
.eh_frame:000000000000C8E2                 db  80h
.eh_frame:000000000000C8E3                 db    1
.eh_frame:000000000000C8E4                 db  59h ; Y
.eh_frame:000000000000C8E5                 db  0Eh
.eh_frame:000000000000C8E6                 db  60h ; `
.eh_frame:000000000000C8E7                 db    2
.eh_frame:000000000000C8E8                 db  40h ; @
.eh_frame:000000000000C8E9                 db  0Eh
.eh_frame:000000000000C8EA                 db  68h ; h
.eh_frame:000000000000C8EB                 db  4Bh ; K
.eh_frame:000000000000C8EC                 db  0Eh
.eh_frame:000000000000C8ED                 db  70h ; p
.eh_frame:000000000000C8EE                 db  43h ; C
.eh_frame:000000000000C8EF                 db  0Eh
.eh_frame:000000000000C8F0                 db  78h ; x
.eh_frame:000000000000C8F1                 db  45h ; E
.eh_frame:000000000000C8F2                 db  0Eh
.eh_frame:000000000000C8F3                 db  80h
.eh_frame:000000000000C8F4                 db    1
.eh_frame:000000000000C8F5                 db  5Eh ; ^
.eh_frame:000000000000C8F6                 db  0Eh
.eh_frame:000000000000C8F7                 db  60h ; `
.eh_frame:000000000000C8F8                 db  4Ch ; L
.eh_frame:000000000000C8F9                 db  0Ah
.eh_frame:000000000000C8FA                 db  0Eh
.eh_frame:000000000000C8FB                 db  38h ; 8
.eh_frame:000000000000C8FC                 db  44h ; D
.eh_frame:000000000000C8FD                 db  0Eh
.eh_frame:000000000000C8FE                 db  30h ; 0
.eh_frame:000000000000C8FF                 db  41h ; A
.eh_frame:000000000000C900                 db  0Eh
.eh_frame:000000000000C901                 db  28h ; (
.eh_frame:000000000000C902                 db  42h ; B
.eh_frame:000000000000C903                 db  0Eh
.eh_frame:000000000000C904                 db  20h
.eh_frame:000000000000C905                 db  42h ; B
.eh_frame:000000000000C906                 db  0Eh
.eh_frame:000000000000C907                 db  18h
.eh_frame:000000000000C908                 db  42h ; B
.eh_frame:000000000000C909                 db  0Eh
.eh_frame:000000000000C90A                 db  10h
.eh_frame:000000000000C90B                 db  42h ; B
.eh_frame:000000000000C90C                 db  0Eh
.eh_frame:000000000000C90D                 db    8
.eh_frame:000000000000C90E                 db  46h ; F
.eh_frame:000000000000C90F                 db  0Bh
.eh_frame:000000000000C910                 db  28h ; (
.eh_frame:000000000000C911                 db    0
.eh_frame:000000000000C912                 db    0
.eh_frame:000000000000C913                 db    0
.eh_frame:000000000000C914                 db  4Ch ; L
.eh_frame:000000000000C915                 db    7
.eh_frame:000000000000C916                 db    0
.eh_frame:000000000000C917                 db    0
.eh_frame:000000000000C918                 db 0A8h
.eh_frame:000000000000C919                 db 0ACh
.eh_frame:000000000000C91A                 db 0FFh
.eh_frame:000000000000C91B                 db 0FFh
.eh_frame:000000000000C91C                 db  36h ; 6
.eh_frame:000000000000C91D                 db    0
.eh_frame:000000000000C91E                 db    0
.eh_frame:000000000000C91F                 db    0
.eh_frame:000000000000C920                 db    0
.eh_frame:000000000000C921                 db  42h ; B
.eh_frame:000000000000C922                 db  0Eh
.eh_frame:000000000000C923                 db  10h
.eh_frame:000000000000C924                 db  8Ch
.eh_frame:000000000000C925                 db    2
.eh_frame:000000000000C926                 db  41h ; A
.eh_frame:000000000000C927                 db  0Eh
.eh_frame:000000000000C928                 db  18h
.eh_frame:000000000000C929                 db  86h
.eh_frame:000000000000C92A                 db    3
.eh_frame:000000000000C92B                 db  41h ; A
.eh_frame:000000000000C92C                 db  0Eh
.eh_frame:000000000000C92D                 db  20h
.eh_frame:000000000000C92E                 db  83h
.eh_frame:000000000000C92F                 db    4
.eh_frame:000000000000C930                 db  6Eh ; n
.eh_frame:000000000000C931                 db  0Eh
.eh_frame:000000000000C932                 db  18h
.eh_frame:000000000000C933                 db  41h ; A
.eh_frame:000000000000C934                 db  0Eh
.eh_frame:000000000000C935                 db  10h
.eh_frame:000000000000C936                 db  42h ; B
.eh_frame:000000000000C937                 db  0Eh
.eh_frame:000000000000C938                 db    8
.eh_frame:000000000000C939                 db    0
.eh_frame:000000000000C93A                 db    0
.eh_frame:000000000000C93B                 db    0
.eh_frame:000000000000C93C                 db  10h
.eh_frame:000000000000C93D                 db    0
.eh_frame:000000000000C93E                 db    0
.eh_frame:000000000000C93F                 db    0
.eh_frame:000000000000C940                 db  78h ; x
.eh_frame:000000000000C941                 db    7
.eh_frame:000000000000C942                 db    0
.eh_frame:000000000000C943                 db    0
.eh_frame:000000000000C944                 db 0BCh
.eh_frame:000000000000C945                 db 0ACh
.eh_frame:000000000000C946                 db 0FFh
.eh_frame:000000000000C947                 db 0FFh
.eh_frame:000000000000C948                 db  11h
.eh_frame:000000000000C949                 db    0
.eh_frame:000000000000C94A                 db    0
.eh_frame:000000000000C94B                 db    0
.eh_frame:000000000000C94C                 db    0
.eh_frame:000000000000C94D                 db    0
.eh_frame:000000000000C94E                 db    0
.eh_frame:000000000000C94F                 db    0
.eh_frame:000000000000C950                 db  10h
.eh_frame:000000000000C951                 db    0
.eh_frame:000000000000C952                 db    0
.eh_frame:000000000000C953                 db    0
.eh_frame:000000000000C954                 db  8Ch
.eh_frame:000000000000C955                 db    7
.eh_frame:000000000000C956                 db    0
.eh_frame:000000000000C957                 db    0
.eh_frame:000000000000C958                 db 0C8h
.eh_frame:000000000000C959                 db 0ACh
.eh_frame:000000000000C95A                 db 0FFh
.eh_frame:000000000000C95B                 db 0FFh
.eh_frame:000000000000C95C                 db  11h
.eh_frame:000000000000C95D                 db    0
.eh_frame:000000000000C95E                 db    0
.eh_frame:000000000000C95F                 db    0
.eh_frame:000000000000C960                 db    0
.eh_frame:000000000000C961                 db    0
.eh_frame:000000000000C962                 db    0
.eh_frame:000000000000C963                 db    0
.eh_frame:000000000000C964                 db  10h
.eh_frame:000000000000C965                 db    0
.eh_frame:000000000000C966                 db    0
.eh_frame:000000000000C967                 db    0
.eh_frame:000000000000C968                 db 0A0h
.eh_frame:000000000000C969                 db    7
.eh_frame:000000000000C96A                 db    0
.eh_frame:000000000000C96B                 db    0
.eh_frame:000000000000C96C                 db 0D4h
.eh_frame:000000000000C96D                 db 0ACh
.eh_frame:000000000000C96E                 db 0FFh
.eh_frame:000000000000C96F                 db 0FFh
.eh_frame:000000000000C970                 db  35h ; 5
.eh_frame:000000000000C971                 db    0
.eh_frame:000000000000C972                 db    0
.eh_frame:000000000000C973                 db    0
.eh_frame:000000000000C974                 db    0
.eh_frame:000000000000C975                 db    0
.eh_frame:000000000000C976                 db    0
.eh_frame:000000000000C977                 db    0
.eh_frame:000000000000C978                 db  10h
.eh_frame:000000000000C979                 db    0
.eh_frame:000000000000C97A                 db    0
.eh_frame:000000000000C97B                 db    0
.eh_frame:000000000000C97C                 db 0B4h
.eh_frame:000000000000C97D                 db    7
.eh_frame:000000000000C97E                 db    0
.eh_frame:000000000000C97F                 db    0
.eh_frame:000000000000C980                 db    0
.eh_frame:000000000000C981                 db 0ADh
.eh_frame:000000000000C982                 db 0FFh
.eh_frame:000000000000C983                 db 0FFh
.eh_frame:000000000000C984                 db  15h
.eh_frame:000000000000C985                 db    0
.eh_frame:000000000000C986                 db    0
.eh_frame:000000000000C987                 db    0
.eh_frame:000000000000C988                 db    0
.eh_frame:000000000000C989                 db    0
.eh_frame:000000000000C98A                 db    0
.eh_frame:000000000000C98B                 db    0
.eh_frame:000000000000C98C                 db  10h
.eh_frame:000000000000C98D                 db    0
.eh_frame:000000000000C98E                 db    0
.eh_frame:000000000000C98F                 db    0
.eh_frame:000000000000C990                 db 0C8h
.eh_frame:000000000000C991                 db    7
.eh_frame:000000000000C992                 db    0
.eh_frame:000000000000C993                 db    0
.eh_frame:000000000000C994                 db  0Ch
.eh_frame:000000000000C995                 db 0ADh
.eh_frame:000000000000C996                 db 0FFh
.eh_frame:000000000000C997                 db 0FFh
.eh_frame:000000000000C998                 db  30h ; 0
.eh_frame:000000000000C999                 db    0
.eh_frame:000000000000C99A                 db    0
.eh_frame:000000000000C99B                 db    0
.eh_frame:000000000000C99C                 db    0
.eh_frame:000000000000C99D                 db  6Bh ; k
.eh_frame:000000000000C99E                 db  0Eh
.eh_frame:000000000000C99F                 db  10h
.eh_frame:000000000000C9A0                 db  50h ; P
.eh_frame:000000000000C9A1                 db    0
.eh_frame:000000000000C9A2                 db    0
.eh_frame:000000000000C9A3                 db    0
.eh_frame:000000000000C9A4                 db 0DCh
.eh_frame:000000000000C9A5                 db    7
.eh_frame:000000000000C9A6                 db    0
.eh_frame:000000000000C9A7                 db    0
.eh_frame:000000000000C9A8                 db  28h ; (
.eh_frame:000000000000C9A9                 db 0ADh
.eh_frame:000000000000C9AA                 db 0FFh
.eh_frame:000000000000C9AB                 db 0FFh
.eh_frame:000000000000C9AC                 db  74h ; t
.eh_frame:000000000000C9AD                 db    0
.eh_frame:000000000000C9AE                 db    0
.eh_frame:000000000000C9AF                 db    0
.eh_frame:000000000000C9B0                 db    0
.eh_frame:000000000000C9B1                 db  42h ; B
.eh_frame:000000000000C9B2                 db  0Eh
.eh_frame:000000000000C9B3                 db  10h
.eh_frame:000000000000C9B4                 db  8Fh
.eh_frame:000000000000C9B5                 db    2
.eh_frame:000000000000C9B6                 db  42h ; B
.eh_frame:000000000000C9B7                 db  0Eh
.eh_frame:000000000000C9B8                 db  18h
.eh_frame:000000000000C9B9                 db  8Eh
.eh_frame:000000000000C9BA                 db    3
.eh_frame:000000000000C9BB                 db  49h ; I
.eh_frame:000000000000C9BC                 db  0Eh
.eh_frame:000000000000C9BD                 db  20h
.eh_frame:000000000000C9BE                 db  8Dh
.eh_frame:000000000000C9BF                 db    4
.eh_frame:000000000000C9C0                 db  42h ; B
.eh_frame:000000000000C9C1                 db  0Eh
.eh_frame:000000000000C9C2                 db  28h ; (
.eh_frame:000000000000C9C3                 db  8Ch
.eh_frame:000000000000C9C4                 db    5
.eh_frame:000000000000C9C5                 db  44h ; D
.eh_frame:000000000000C9C6                 db  0Eh
.eh_frame:000000000000C9C7                 db  30h ; 0
.eh_frame:000000000000C9C8                 db  86h
.eh_frame:000000000000C9C9                 db    6
.eh_frame:000000000000C9CA                 db  41h ; A
.eh_frame:000000000000C9CB                 db  0Eh
.eh_frame:000000000000C9CC                 db  38h ; 8
.eh_frame:000000000000C9CD                 db  83h
.eh_frame:000000000000C9CE                 db    7
.eh_frame:000000000000C9CF                 db  4Dh ; M
.eh_frame:000000000000C9D0                 db  0Eh
.eh_frame:000000000000C9D1                 db  50h ; P
.eh_frame:000000000000C9D2                 db  5Fh ; _
.eh_frame:000000000000C9D3                 db  0Eh
.eh_frame:000000000000C9D4                 db  58h ; X
.eh_frame:000000000000C9D5                 db  47h ; G
.eh_frame:000000000000C9D6                 db  0Eh
.eh_frame:000000000000C9D7                 db  60h ; `
.eh_frame:000000000000C9D8                 db  46h ; F
.eh_frame:000000000000C9D9                 db  0Eh
.eh_frame:000000000000C9DA                 db  68h ; h
.eh_frame:000000000000C9DB                 db  44h ; D
.eh_frame:000000000000C9DC                 db  0Eh
.eh_frame:000000000000C9DD                 db  70h ; p
.eh_frame:000000000000C9DE                 db  58h ; X
.eh_frame:000000000000C9DF                 db  0Eh
.eh_frame:000000000000C9E0                 db  38h ; 8
.eh_frame:000000000000C9E1                 db  41h ; A
.eh_frame:000000000000C9E2                 db  0Eh
.eh_frame:000000000000C9E3                 db  30h ; 0
.eh_frame:000000000000C9E4                 db  41h ; A
.eh_frame:000000000000C9E5                 db  0Eh
.eh_frame:000000000000C9E6                 db  28h ; (
.eh_frame:000000000000C9E7                 db  42h ; B
.eh_frame:000000000000C9E8                 db  0Eh
.eh_frame:000000000000C9E9                 db  20h
.eh_frame:000000000000C9EA                 db  42h ; B
.eh_frame:000000000000C9EB                 db  0Eh
.eh_frame:000000000000C9EC                 db  18h
.eh_frame:000000000000C9ED                 db  42h ; B
.eh_frame:000000000000C9EE                 db  0Eh
.eh_frame:000000000000C9EF                 db  10h
.eh_frame:000000000000C9F0                 db  42h ; B
.eh_frame:000000000000C9F1                 db  0Eh
.eh_frame:000000000000C9F2                 db    8
.eh_frame:000000000000C9F3                 db    0
.eh_frame:000000000000C9F4                 db  68h ; h
.eh_frame:000000000000C9F5                 db    0
.eh_frame:000000000000C9F6                 db    0
.eh_frame:000000000000C9F7                 db    0
.eh_frame:000000000000C9F8                 db  30h ; 0
.eh_frame:000000000000C9F9                 db    8
.eh_frame:000000000000C9FA                 db    0
.eh_frame:000000000000C9FB                 db    0
.eh_frame:000000000000C9FC                 db  54h ; T
.eh_frame:000000000000C9FD                 db 0ADh
.eh_frame:000000000000C9FE                 db 0FFh
.eh_frame:000000000000C9FF                 db 0FFh
.eh_frame:000000000000CA00                 db 0E3h
.eh_frame:000000000000CA01                 db    0
.eh_frame:000000000000CA02                 db    0
.eh_frame:000000000000CA03                 db    0
.eh_frame:000000000000CA04                 db    0
.eh_frame:000000000000CA05                 db  42h ; B
.eh_frame:000000000000CA06                 db  0Eh
.eh_frame:000000000000CA07                 db  10h
.eh_frame:000000000000CA08                 db  8Fh
.eh_frame:000000000000CA09                 db    2
.eh_frame:000000000000CA0A                 db  42h ; B
.eh_frame:000000000000CA0B                 db  0Eh
.eh_frame:000000000000CA0C                 db  18h
.eh_frame:000000000000CA0D                 db  8Eh
.eh_frame:000000000000CA0E                 db    3
.eh_frame:000000000000CA0F                 db  49h ; I
.eh_frame:000000000000CA10                 db  0Eh
.eh_frame:000000000000CA11                 db  20h
.eh_frame:000000000000CA12                 db  8Dh
.eh_frame:000000000000CA13                 db    4
.eh_frame:000000000000CA14                 db  42h ; B
.eh_frame:000000000000CA15                 db  0Eh
.eh_frame:000000000000CA16                 db  28h ; (
.eh_frame:000000000000CA17                 db  8Ch
.eh_frame:000000000000CA18                 db    5
.eh_frame:000000000000CA19                 db  44h ; D
.eh_frame:000000000000CA1A                 db  0Eh
.eh_frame:000000000000CA1B                 db  30h ; 0
.eh_frame:000000000000CA1C                 db  86h
.eh_frame:000000000000CA1D                 db    6
.eh_frame:000000000000CA1E                 db  41h ; A
.eh_frame:000000000000CA1F                 db  0Eh
.eh_frame:000000000000CA20                 db  38h ; 8
.eh_frame:000000000000CA21                 db  83h
.eh_frame:000000000000CA22                 db    7
.eh_frame:000000000000CA23                 db  4Dh ; M
.eh_frame:000000000000CA24                 db  0Eh
.eh_frame:000000000000CA25                 db  70h ; p
.eh_frame:000000000000CA26                 db  65h ; e
.eh_frame:000000000000CA27                 db  0Eh
.eh_frame:000000000000CA28                 db  78h ; x
.eh_frame:000000000000CA29                 db  4Dh ; M
.eh_frame:000000000000CA2A                 db  0Eh
.eh_frame:000000000000CA2B                 db  80h
.eh_frame:000000000000CA2C                 db    1
.eh_frame:000000000000CA2D                 db  46h ; F
.eh_frame:000000000000CA2E                 db  0Eh
.eh_frame:000000000000CA2F                 db  88h
.eh_frame:000000000000CA30                 db    1
.eh_frame:000000000000CA31                 db  42h ; B
.eh_frame:000000000000CA32                 db  0Eh
.eh_frame:000000000000CA33                 db  90h
.eh_frame:000000000000CA34                 db    1
.eh_frame:000000000000CA35                 db  5Eh ; ^
.eh_frame:000000000000CA36                 db  0Eh
.eh_frame:000000000000CA37                 db  70h ; p
.eh_frame:000000000000CA38                 db  56h ; V
.eh_frame:000000000000CA39                 db  0Eh
.eh_frame:000000000000CA3A                 db  78h ; x
.eh_frame:000000000000CA3B                 db  43h ; C
.eh_frame:000000000000CA3C                 db  0Eh
.eh_frame:000000000000CA3D                 db  80h
.eh_frame:000000000000CA3E                 db    1
.eh_frame:000000000000CA3F                 db  43h ; C
.eh_frame:000000000000CA40                 db  0Eh
.eh_frame:000000000000CA41                 db  88h
.eh_frame:000000000000CA42                 db    1
.eh_frame:000000000000CA43                 db  56h ; V
.eh_frame:000000000000CA44                 db  0Eh
.eh_frame:000000000000CA45                 db  90h
.eh_frame:000000000000CA46                 db    1
.eh_frame:000000000000CA47                 db  52h ; R
.eh_frame:000000000000CA48                 db  0Eh
.eh_frame:000000000000CA49                 db  70h ; p
.eh_frame:000000000000CA4A                 db  5Bh ; [
.eh_frame:000000000000CA4B                 db  0Eh
.eh_frame:000000000000CA4C                 db  38h ; 8
.eh_frame:000000000000CA4D                 db  41h ; A
.eh_frame:000000000000CA4E                 db  0Eh
.eh_frame:000000000000CA4F                 db  30h ; 0
.eh_frame:000000000000CA50                 db  41h ; A
.eh_frame:000000000000CA51                 db  0Eh
.eh_frame:000000000000CA52                 db  28h ; (
.eh_frame:000000000000CA53                 db  42h ; B
.eh_frame:000000000000CA54                 db  0Eh
.eh_frame:000000000000CA55                 db  20h
.eh_frame:000000000000CA56                 db  42h ; B
.eh_frame:000000000000CA57                 db  0Eh
.eh_frame:000000000000CA58                 db  18h
.eh_frame:000000000000CA59                 db  42h ; B
.eh_frame:000000000000CA5A                 db  0Eh
.eh_frame:000000000000CA5B                 db  10h
.eh_frame:000000000000CA5C                 db  42h ; B
.eh_frame:000000000000CA5D                 db  0Eh
.eh_frame:000000000000CA5E                 db    8
.eh_frame:000000000000CA5F                 db    0
.eh_frame:000000000000CA60                 db  10h
.eh_frame:000000000000CA61                 db    0
.eh_frame:000000000000CA62                 db    0
.eh_frame:000000000000CA63                 db    0
.eh_frame:000000000000CA64                 db  9Ch
.eh_frame:000000000000CA65                 db    8
.eh_frame:000000000000CA66                 db    0
.eh_frame:000000000000CA67                 db    0
.eh_frame:000000000000CA68                 db 0D8h
.eh_frame:000000000000CA69                 db 0ADh
.eh_frame:000000000000CA6A                 db 0FFh
.eh_frame:000000000000CA6B                 db 0FFh
.eh_frame:000000000000CA6C                 db  0Ah
.eh_frame:000000000000CA6D                 db    0
.eh_frame:000000000000CA6E                 db    0
.eh_frame:000000000000CA6F                 db    0
.eh_frame:000000000000CA70                 db    0
.eh_frame:000000000000CA71                 db    0
.eh_frame:000000000000CA72                 db    0
.eh_frame:000000000000CA73                 db    0
.eh_frame:000000000000CA74                 db  28h ; (
.eh_frame:000000000000CA75                 db    0
.eh_frame:000000000000CA76                 db    0
.eh_frame:000000000000CA77                 db    0
.eh_frame:000000000000CA78                 db 0B0h
.eh_frame:000000000000CA79                 db    8
.eh_frame:000000000000CA7A                 db    0
.eh_frame:000000000000CA7B                 db    0
.eh_frame:000000000000CA7C                 db 0D4h
.eh_frame:000000000000CA7D                 db 0ADh
.eh_frame:000000000000CA7E                 db 0FFh
.eh_frame:000000000000CA7F                 db 0FFh
.eh_frame:000000000000CA80                 db  93h
.eh_frame:000000000000CA81                 db    0
.eh_frame:000000000000CA82                 db    0
.eh_frame:000000000000CA83                 db    0
.eh_frame:000000000000CA84                 db    0
.eh_frame:000000000000CA85                 db  48h ; H
.eh_frame:000000000000CA86                 db  0Eh
.eh_frame:000000000000CA87                 db  10h
.eh_frame:000000000000CA88                 db  8Ch
.eh_frame:000000000000CA89                 db    2
.eh_frame:000000000000CA8A                 db  48h ; H
.eh_frame:000000000000CA8B                 db  0Eh
.eh_frame:000000000000CA8C                 db  18h
.eh_frame:000000000000CA8D                 db  86h
.eh_frame:000000000000CA8E                 db    3
.eh_frame:000000000000CA8F                 db  41h ; A
.eh_frame:000000000000CA90                 db  0Eh
.eh_frame:000000000000CA91                 db  20h
.eh_frame:000000000000CA92                 db  83h
.eh_frame:000000000000CA93                 db    4
.eh_frame:000000000000CA94                 db    2
.eh_frame:000000000000CA95                 db  74h ; t
.eh_frame:000000000000CA96                 db  0Eh
.eh_frame:000000000000CA97                 db  18h
.eh_frame:000000000000CA98                 db  4Bh ; K
.eh_frame:000000000000CA99                 db  0Eh
.eh_frame:000000000000CA9A                 db  10h
.eh_frame:000000000000CA9B                 db  42h ; B
.eh_frame:000000000000CA9C                 db  0Eh
.eh_frame:000000000000CA9D                 db    8
.eh_frame:000000000000CA9E                 db    0
.eh_frame:000000000000CA9F                 db    0
.eh_frame:000000000000CAA0                 db  10h
.eh_frame:000000000000CAA1                 db    0
.eh_frame:000000000000CAA2                 db    0
.eh_frame:000000000000CAA3                 db    0
.eh_frame:000000000000CAA4                 db 0DCh
.eh_frame:000000000000CAA5                 db    8
.eh_frame:000000000000CAA6                 db    0
.eh_frame:000000000000CAA7                 db    0
.eh_frame:000000000000CAA8                 db  48h ; H
.eh_frame:000000000000CAA9                 db 0AEh
.eh_frame:000000000000CAAA                 db 0FFh
.eh_frame:000000000000CAAB                 db 0FFh
.eh_frame:000000000000CAAC                 db  13h
.eh_frame:000000000000CAAD                 db    0
.eh_frame:000000000000CAAE                 db    0
.eh_frame:000000000000CAAF                 db    0
.eh_frame:000000000000CAB0                 db    0
.eh_frame:000000000000CAB1                 db    0
.eh_frame:000000000000CAB2                 db    0
.eh_frame:000000000000CAB3                 db    0
.eh_frame:000000000000CAB4                 db  10h
.eh_frame:000000000000CAB5                 db    0
.eh_frame:000000000000CAB6                 db    0
.eh_frame:000000000000CAB7                 db    0
.eh_frame:000000000000CAB8                 db 0F0h
.eh_frame:000000000000CAB9                 db    8
.eh_frame:000000000000CABA                 db    0
.eh_frame:000000000000CABB                 db    0
.eh_frame:000000000000CABC                 db  54h ; T
.eh_frame:000000000000CABD                 db 0AEh
.eh_frame:000000000000CABE                 db 0FFh
.eh_frame:000000000000CABF                 db 0FFh
.eh_frame:000000000000CAC0                 db  0Ch
.eh_frame:000000000000CAC1                 db    0
.eh_frame:000000000000CAC2                 db    0
.eh_frame:000000000000CAC3                 db    0
.eh_frame:000000000000CAC4                 db    0
.eh_frame:000000000000CAC5                 db    0
.eh_frame:000000000000CAC6                 db    0
.eh_frame:000000000000CAC7                 db    0
.eh_frame:000000000000CAC8                 db  10h
.eh_frame:000000000000CAC9                 db    0
.eh_frame:000000000000CACA                 db    0
.eh_frame:000000000000CACB                 db    0
.eh_frame:000000000000CACC                 db    4
.eh_frame:000000000000CACD                 db    9
.eh_frame:000000000000CACE                 db    0
.eh_frame:000000000000CACF                 db    0
.eh_frame:000000000000CAD0                 db  50h ; P
.eh_frame:000000000000CAD1                 db 0AEh
.eh_frame:000000000000CAD2                 db 0FFh
.eh_frame:000000000000CAD3                 db 0FFh
.eh_frame:000000000000CAD4                 db  18h
.eh_frame:000000000000CAD5                 db    0
.eh_frame:000000000000CAD6                 db    0
.eh_frame:000000000000CAD7                 db    0
.eh_frame:000000000000CAD8                 db    0
.eh_frame:000000000000CAD9                 db    0
.eh_frame:000000000000CADA                 db    0
.eh_frame:000000000000CADB                 db    0
.eh_frame:000000000000CADC                 db  10h
.eh_frame:000000000000CADD                 db    0
.eh_frame:000000000000CADE                 db    0
.eh_frame:000000000000CADF                 db    0
.eh_frame:000000000000CAE0                 db  18h
.eh_frame:000000000000CAE1                 db    9
.eh_frame:000000000000CAE2                 db    0
.eh_frame:000000000000CAE3                 db    0
.eh_frame:000000000000CAE4                 db  5Ch ; \
.eh_frame:000000000000CAE5                 db 0AEh
.eh_frame:000000000000CAE6                 db 0FFh
.eh_frame:000000000000CAE7                 db 0FFh
.eh_frame:000000000000CAE8                 db  14h
.eh_frame:000000000000CAE9                 db    0
.eh_frame:000000000000CAEA                 db    0
.eh_frame:000000000000CAEB                 db    0
.eh_frame:000000000000CAEC                 db    0
.eh_frame:000000000000CAED                 db    0
.eh_frame:000000000000CAEE                 db    0
.eh_frame:000000000000CAEF                 db    0
.eh_frame:000000000000CAF0                 db  18h
.eh_frame:000000000000CAF1                 db    0
.eh_frame:000000000000CAF2                 db    0
.eh_frame:000000000000CAF3                 db    0
.eh_frame:000000000000CAF4                 db  2Ch ; ,
.eh_frame:000000000000CAF5                 db    9
.eh_frame:000000000000CAF6                 db    0
.eh_frame:000000000000CAF7                 db    0
.eh_frame:000000000000CAF8                 db  68h ; h
.eh_frame:000000000000CAF9                 db 0AEh
.eh_frame:000000000000CAFA                 db 0FFh
.eh_frame:000000000000CAFB                 db 0FFh
.eh_frame:000000000000CAFC                 db  8Eh
.eh_frame:000000000000CAFD                 db    0
.eh_frame:000000000000CAFE                 db    0
.eh_frame:000000000000CAFF                 db    0
.eh_frame:000000000000CB00                 db    0
.eh_frame:000000000000CB01                 db  44h ; D
.eh_frame:000000000000CB02                 db  0Eh
.eh_frame:000000000000CB03                 db  50h ; P
.eh_frame:000000000000CB04                 db    2
.eh_frame:000000000000CB05                 db  7Fh ; 
.eh_frame:000000000000CB06                 db  0Ah
.eh_frame:000000000000CB07                 db  0Eh
.eh_frame:000000000000CB08                 db    8
.eh_frame:000000000000CB09                 db  41h ; A
.eh_frame:000000000000CB0A                 db  0Bh
.eh_frame:000000000000CB0B                 db    0
.eh_frame:000000000000CB0C                 db  18h
.eh_frame:000000000000CB0D                 db    0
.eh_frame:000000000000CB0E                 db    0
.eh_frame:000000000000CB0F                 db    0
.eh_frame:000000000000CB10                 db  48h ; H
.eh_frame:000000000000CB11                 db    9
.eh_frame:000000000000CB12                 db    0
.eh_frame:000000000000CB13                 db    0
.eh_frame:000000000000CB14                 db 0DCh
.eh_frame:000000000000CB15                 db 0AEh
.eh_frame:000000000000CB16                 db 0FFh
.eh_frame:000000000000CB17                 db 0FFh
.eh_frame:000000000000CB18                 db  8Ah
.eh_frame:000000000000CB19                 db    0
.eh_frame:000000000000CB1A                 db    0
.eh_frame:000000000000CB1B                 db    0
.eh_frame:000000000000CB1C                 db    0
.eh_frame:000000000000CB1D                 db  44h ; D
.eh_frame:000000000000CB1E                 db  0Eh
.eh_frame:000000000000CB1F                 db  50h ; P
.eh_frame:000000000000CB20                 db    2
.eh_frame:000000000000CB21                 db  7Bh ; {
.eh_frame:000000000000CB22                 db  0Ah
.eh_frame:000000000000CB23                 db  0Eh
.eh_frame:000000000000CB24                 db    8
.eh_frame:000000000000CB25                 db  41h ; A
.eh_frame:000000000000CB26                 db  0Bh
.eh_frame:000000000000CB27                 db    0
.eh_frame:000000000000CB28                 db  10h
.eh_frame:000000000000CB29                 db    0
.eh_frame:000000000000CB2A                 db    0
.eh_frame:000000000000CB2B                 db    0
.eh_frame:000000000000CB2C                 db  64h ; d
.eh_frame:000000000000CB2D                 db    9
.eh_frame:000000000000CB2E                 db    0
.eh_frame:000000000000CB2F                 db    0
.eh_frame:000000000000CB30                 db  50h ; P
.eh_frame:000000000000CB31                 db 0AFh
.eh_frame:000000000000CB32                 db 0FFh
.eh_frame:000000000000CB33                 db 0FFh
.eh_frame:000000000000CB34                 db  0Ch
.eh_frame:000000000000CB35                 db    0
.eh_frame:000000000000CB36                 db    0
.eh_frame:000000000000CB37                 db    0
.eh_frame:000000000000CB38                 db    0
.eh_frame:000000000000CB39                 db    0
.eh_frame:000000000000CB3A                 db    0
.eh_frame:000000000000CB3B                 db    0
.eh_frame:000000000000CB3C                 db  10h
.eh_frame:000000000000CB3D                 db    0
.eh_frame:000000000000CB3E                 db    0
.eh_frame:000000000000CB3F                 db    0
.eh_frame:000000000000CB40                 db  78h ; x
.eh_frame:000000000000CB41                 db    9
.eh_frame:000000000000CB42                 db    0
.eh_frame:000000000000CB43                 db    0
.eh_frame:000000000000CB44                 db  4Ch ; L
.eh_frame:000000000000CB45                 db 0AFh
.eh_frame:000000000000CB46                 db 0FFh
.eh_frame:000000000000CB47                 db 0FFh
.eh_frame:000000000000CB48                 db  0Fh
.eh_frame:000000000000CB49                 db    0
.eh_frame:000000000000CB4A                 db    0
.eh_frame:000000000000CB4B                 db    0
.eh_frame:000000000000CB4C                 db    0
.eh_frame:000000000000CB4D                 db    0
.eh_frame:000000000000CB4E                 db    0
.eh_frame:000000000000CB4F                 db    0
.eh_frame:000000000000CB50                 db  18h
.eh_frame:000000000000CB51                 db    0
.eh_frame:000000000000CB52                 db    0
.eh_frame:000000000000CB53                 db    0
.eh_frame:000000000000CB54                 db  8Ch
.eh_frame:000000000000CB55                 db    9
.eh_frame:000000000000CB56                 db    0
.eh_frame:000000000000CB57                 db    0
.eh_frame:000000000000CB58                 db  48h ; H
.eh_frame:000000000000CB59                 db 0AFh
.eh_frame:000000000000CB5A                 db 0FFh
.eh_frame:000000000000CB5B                 db 0FFh
.eh_frame:000000000000CB5C                 db  98h
.eh_frame:000000000000CB5D                 db    0
.eh_frame:000000000000CB5E                 db    0
.eh_frame:000000000000CB5F                 db    0
.eh_frame:000000000000CB60                 db    0
.eh_frame:000000000000CB61                 db  44h ; D
.eh_frame:000000000000CB62                 db  0Eh
.eh_frame:000000000000CB63                 db  50h ; P
.eh_frame:000000000000CB64                 db    2
.eh_frame:000000000000CB65                 db  8Eh
.eh_frame:000000000000CB66                 db  0Ah
.eh_frame:000000000000CB67                 db  0Eh
.eh_frame:000000000000CB68                 db    8
.eh_frame:000000000000CB69                 db  41h ; A
.eh_frame:000000000000CB6A                 db  0Bh
.eh_frame:000000000000CB6B                 db    0
.eh_frame:000000000000CB6C                 db  10h
.eh_frame:000000000000CB6D                 db    0
.eh_frame:000000000000CB6E                 db    0
.eh_frame:000000000000CB6F                 db    0
.eh_frame:000000000000CB70                 db 0A8h
.eh_frame:000000000000CB71                 db    9
.eh_frame:000000000000CB72                 db    0
.eh_frame:000000000000CB73                 db    0
.eh_frame:000000000000CB74                 db 0CCh
.eh_frame:000000000000CB75                 db 0AFh
.eh_frame:000000000000CB76                 db 0FFh
.eh_frame:000000000000CB77                 db 0FFh
.eh_frame:000000000000CB78                 db  10h
.eh_frame:000000000000CB79                 db    0
.eh_frame:000000000000CB7A                 db    0
.eh_frame:000000000000CB7B                 db    0
.eh_frame:000000000000CB7C                 db    0
.eh_frame:000000000000CB7D                 db    0
.eh_frame:000000000000CB7E                 db    0
.eh_frame:000000000000CB7F                 db    0
.eh_frame:000000000000CB80                 db  10h
.eh_frame:000000000000CB81                 db    0
.eh_frame:000000000000CB82                 db    0
.eh_frame:000000000000CB83                 db    0
.eh_frame:000000000000CB84                 db 0BCh
.eh_frame:000000000000CB85                 db    9
.eh_frame:000000000000CB86                 db    0
.eh_frame:000000000000CB87                 db    0
.eh_frame:000000000000CB88                 db 0C8h
.eh_frame:000000000000CB89                 db 0AFh
.eh_frame:000000000000CB8A                 db 0FFh
.eh_frame:000000000000CB8B                 db 0FFh
.eh_frame:000000000000CB8C                 db  11h
.eh_frame:000000000000CB8D                 db    0
.eh_frame:000000000000CB8E                 db    0
.eh_frame:000000000000CB8F                 db    0
.eh_frame:000000000000CB90                 db    0
.eh_frame:000000000000CB91                 db    0
.eh_frame:000000000000CB92                 db    0
.eh_frame:000000000000CB93                 db    0
.eh_frame:000000000000CB94                 db  10h
.eh_frame:000000000000CB95                 db    0
.eh_frame:000000000000CB96                 db    0
.eh_frame:000000000000CB97                 db    0
.eh_frame:000000000000CB98                 db 0D0h
.eh_frame:000000000000CB99                 db    9
.eh_frame:000000000000CB9A                 db    0
.eh_frame:000000000000CB9B                 db    0
.eh_frame:000000000000CB9C                 db 0D4h
.eh_frame:000000000000CB9D                 db 0AFh
.eh_frame:000000000000CB9E                 db 0FFh
.eh_frame:000000000000CB9F                 db 0FFh
.eh_frame:000000000000CBA0                 db  0Ah
.eh_frame:000000000000CBA1                 db    0
.eh_frame:000000000000CBA2                 db    0
.eh_frame:000000000000CBA3                 db    0
.eh_frame:000000000000CBA4                 db    0
.eh_frame:000000000000CBA5                 db    0
.eh_frame:000000000000CBA6                 db    0
.eh_frame:000000000000CBA7                 db    0
.eh_frame:000000000000CBA8                 db  18h
.eh_frame:000000000000CBA9                 db    0
.eh_frame:000000000000CBAA                 db    0
.eh_frame:000000000000CBAB                 db    0
.eh_frame:000000000000CBAC                 db 0E4h
.eh_frame:000000000000CBAD                 db    9
.eh_frame:000000000000CBAE                 db    0
.eh_frame:000000000000CBAF                 db    0
.eh_frame:000000000000CBB0                 db 0D0h
.eh_frame:000000000000CBB1                 db 0AFh
.eh_frame:000000000000CBB2                 db 0FFh
.eh_frame:000000000000CBB3                 db 0FFh
.eh_frame:000000000000CBB4                 db  8Eh
.eh_frame:000000000000CBB5                 db    0
.eh_frame:000000000000CBB6                 db    0
.eh_frame:000000000000CBB7                 db    0
.eh_frame:000000000000CBB8                 db    0
.eh_frame:000000000000CBB9                 db  44h ; D
.eh_frame:000000000000CBBA                 db  0Eh
.eh_frame:000000000000CBBB                 db  50h ; P
.eh_frame:000000000000CBBC                 db    2
.eh_frame:000000000000CBBD                 db  7Fh ; 
.eh_frame:000000000000CBBE                 db  0Ah
.eh_frame:000000000000CBBF                 db  0Eh
.eh_frame:000000000000CBC0                 db    8
.eh_frame:000000000000CBC1                 db  41h ; A
.eh_frame:000000000000CBC2                 db  0Bh
.eh_frame:000000000000CBC3                 db    0
.eh_frame:000000000000CBC4                 db  18h
.eh_frame:000000000000CBC5                 db    0
.eh_frame:000000000000CBC6                 db    0
.eh_frame:000000000000CBC7                 db    0
.eh_frame:000000000000CBC8                 db    0
.eh_frame:000000000000CBC9                 db  0Ah
.eh_frame:000000000000CBCA                 db    0
.eh_frame:000000000000CBCB                 db    0
.eh_frame:000000000000CBCC                 db  44h ; D
.eh_frame:000000000000CBCD                 db 0B0h
.eh_frame:000000000000CBCE                 db 0FFh
.eh_frame:000000000000CBCF                 db 0FFh
.eh_frame:000000000000CBD0                 db  91h
.eh_frame:000000000000CBD1                 db    0
.eh_frame:000000000000CBD2                 db    0
.eh_frame:000000000000CBD3                 db    0
.eh_frame:000000000000CBD4                 db    0
.eh_frame:000000000000CBD5                 db  44h ; D
.eh_frame:000000000000CBD6                 db  0Eh
.eh_frame:000000000000CBD7                 db  50h ; P
.eh_frame:000000000000CBD8                 db    2
.eh_frame:000000000000CBD9                 db  82h
.eh_frame:000000000000CBDA                 db  0Ah
.eh_frame:000000000000CBDB                 db  0Eh
.eh_frame:000000000000CBDC                 db    8
.eh_frame:000000000000CBDD                 db  41h ; A
.eh_frame:000000000000CBDE                 db  0Bh
.eh_frame:000000000000CBDF                 db    0
.eh_frame:000000000000CBE0                 db  10h
.eh_frame:000000000000CBE1                 db    0
.eh_frame:000000000000CBE2                 db    0
.eh_frame:000000000000CBE3                 db    0
.eh_frame:000000000000CBE4                 db  1Ch
.eh_frame:000000000000CBE5                 db  0Ah
.eh_frame:000000000000CBE6                 db    0
.eh_frame:000000000000CBE7                 db    0
.eh_frame:000000000000CBE8                 db 0C8h
.eh_frame:000000000000CBE9                 db 0B0h
.eh_frame:000000000000CBEA                 db 0FFh
.eh_frame:000000000000CBEB                 db 0FFh
.eh_frame:000000000000CBEC                 db  0Ch
.eh_frame:000000000000CBED                 db    0
.eh_frame:000000000000CBEE                 db    0
.eh_frame:000000000000CBEF                 db    0
.eh_frame:000000000000CBF0                 db    0
.eh_frame:000000000000CBF1                 db    0
.eh_frame:000000000000CBF2                 db    0
.eh_frame:000000000000CBF3                 db    0
.eh_frame:000000000000CBF4                 db  10h
.eh_frame:000000000000CBF5                 db    0
.eh_frame:000000000000CBF6                 db    0
.eh_frame:000000000000CBF7                 db    0
.eh_frame:000000000000CBF8                 db  30h ; 0
.eh_frame:000000000000CBF9                 db  0Ah
.eh_frame:000000000000CBFA                 db    0
.eh_frame:000000000000CBFB                 db    0
.eh_frame:000000000000CBFC                 db 0C4h
.eh_frame:000000000000CBFD                 db 0B0h
.eh_frame:000000000000CBFE                 db 0FFh
.eh_frame:000000000000CBFF                 db 0FFh
.eh_frame:000000000000CC00                 db  17h
.eh_frame:000000000000CC01                 db    0
.eh_frame:000000000000CC02                 db    0
.eh_frame:000000000000CC03                 db    0
.eh_frame:000000000000CC04                 db    0
.eh_frame:000000000000CC05                 db    0
.eh_frame:000000000000CC06                 db    0
.eh_frame:000000000000CC07                 db    0
.eh_frame:000000000000CC08                 db  10h
.eh_frame:000000000000CC09                 db    0
.eh_frame:000000000000CC0A                 db    0
.eh_frame:000000000000CC0B                 db    0
.eh_frame:000000000000CC0C                 db  44h ; D
.eh_frame:000000000000CC0D                 db  0Ah
.eh_frame:000000000000CC0E                 db    0
.eh_frame:000000000000CC0F                 db    0
.eh_frame:000000000000CC10                 db 0D0h
.eh_frame:000000000000CC11                 db 0B0h
.eh_frame:000000000000CC12                 db 0FFh
.eh_frame:000000000000CC13                 db 0FFh
.eh_frame:000000000000CC14                 db  13h
.eh_frame:000000000000CC15                 db    0
.eh_frame:000000000000CC16                 db    0
.eh_frame:000000000000CC17                 db    0
.eh_frame:000000000000CC18                 db    0
.eh_frame:000000000000CC19                 db    0
.eh_frame:000000000000CC1A                 db    0
.eh_frame:000000000000CC1B                 db    0
.eh_frame:000000000000CC1C                 db  10h
.eh_frame:000000000000CC1D                 db    0
.eh_frame:000000000000CC1E                 db    0
.eh_frame:000000000000CC1F                 db    0
.eh_frame:000000000000CC20                 db  58h ; X
.eh_frame:000000000000CC21                 db  0Ah
.eh_frame:000000000000CC22                 db    0
.eh_frame:000000000000CC23                 db    0
.eh_frame:000000000000CC24                 db 0DCh
.eh_frame:000000000000CC25                 db 0B0h
.eh_frame:000000000000CC26                 db 0FFh
.eh_frame:000000000000CC27                 db 0FFh
.eh_frame:000000000000CC28                 db  0Ch
.eh_frame:000000000000CC29                 db    0
.eh_frame:000000000000CC2A                 db    0
.eh_frame:000000000000CC2B                 db    0
.eh_frame:000000000000CC2C                 db    0
.eh_frame:000000000000CC2D                 db    0
.eh_frame:000000000000CC2E                 db    0
.eh_frame:000000000000CC2F                 db    0
.eh_frame:000000000000CC30                 db  10h
.eh_frame:000000000000CC31                 db    0
.eh_frame:000000000000CC32                 db    0
.eh_frame:000000000000CC33                 db    0
.eh_frame:000000000000CC34                 db  6Ch ; l
.eh_frame:000000000000CC35                 db  0Ah
.eh_frame:000000000000CC36                 db    0
.eh_frame:000000000000CC37                 db    0
.eh_frame:000000000000CC38                 db 0D8h
.eh_frame:000000000000CC39                 db 0B0h
.eh_frame:000000000000CC3A                 db 0FFh
.eh_frame:000000000000CC3B                 db 0FFh
.eh_frame:000000000000CC3C                 db  14h
.eh_frame:000000000000CC3D                 db    0
.eh_frame:000000000000CC3E                 db    0
.eh_frame:000000000000CC3F                 db    0
.eh_frame:000000000000CC40                 db    0
.eh_frame:000000000000CC41                 db    0
.eh_frame:000000000000CC42                 db    0
.eh_frame:000000000000CC43                 db    0
.eh_frame:000000000000CC44                 db  10h
.eh_frame:000000000000CC45                 db    0
.eh_frame:000000000000CC46                 db    0
.eh_frame:000000000000CC47                 db    0
.eh_frame:000000000000CC48                 db  80h
.eh_frame:000000000000CC49                 db  0Ah
.eh_frame:000000000000CC4A                 db    0
.eh_frame:000000000000CC4B                 db    0
.eh_frame:000000000000CC4C                 db 0E4h
.eh_frame:000000000000CC4D                 db 0B0h
.eh_frame:000000000000CC4E                 db 0FFh
.eh_frame:000000000000CC4F                 db 0FFh
.eh_frame:000000000000CC50                 db  13h
.eh_frame:000000000000CC51                 db    0
.eh_frame:000000000000CC52                 db    0
.eh_frame:000000000000CC53                 db    0
.eh_frame:000000000000CC54                 db    0
.eh_frame:000000000000CC55                 db    0
.eh_frame:000000000000CC56                 db    0
.eh_frame:000000000000CC57                 db    0
.eh_frame:000000000000CC58                 db  14h
.eh_frame:000000000000CC59                 db    0
.eh_frame:000000000000CC5A                 db    0
.eh_frame:000000000000CC5B                 db    0
.eh_frame:000000000000CC5C                 db  94h
.eh_frame:000000000000CC5D                 db  0Ah
.eh_frame:000000000000CC5E                 db    0
.eh_frame:000000000000CC5F                 db    0
.eh_frame:000000000000CC60                 db 0F0h
.eh_frame:000000000000CC61                 db 0B0h
.eh_frame:000000000000CC62                 db 0FFh
.eh_frame:000000000000CC63                 db 0FFh
.eh_frame:000000000000CC64                 db  18h
.eh_frame:000000000000CC65                 db    0
.eh_frame:000000000000CC66                 db    0
.eh_frame:000000000000CC67                 db    0
.eh_frame:000000000000CC68                 db    0
.eh_frame:000000000000CC69                 db    0
.eh_frame:000000000000CC6A                 db    0
.eh_frame:000000000000CC6B                 db    0
.eh_frame:000000000000CC6C                 db    0
.eh_frame:000000000000CC6D                 db    0
.eh_frame:000000000000CC6E                 db    0
.eh_frame:000000000000CC6F                 db    0
.eh_frame:000000000000CC70                 db  10h
.eh_frame:000000000000CC71                 db    1
.eh_frame:000000000000CC72                 db    0
.eh_frame:000000000000CC73                 db    0
.eh_frame:000000000000CC74                 db 0ACh
.eh_frame:000000000000CC75                 db  0Ah
.eh_frame:000000000000CC76                 db    0
.eh_frame:000000000000CC77                 db    0
.eh_frame:000000000000CC78                 db 0F8h
.eh_frame:000000000000CC79                 db 0B0h
.eh_frame:000000000000CC7A                 db 0FFh
.eh_frame:000000000000CC7B                 db 0FFh
.eh_frame:000000000000CC7C                 db  17h
.eh_frame:000000000000CC7D                 db    4
.eh_frame:000000000000CC7E                 db    0
.eh_frame:000000000000CC7F                 db    0
.eh_frame:000000000000CC80                 db    0
.eh_frame:000000000000CC81                 db  42h ; B
.eh_frame:000000000000CC82                 db  0Eh
.eh_frame:000000000000CC83                 db  10h
.eh_frame:000000000000CC84                 db  8Fh
.eh_frame:000000000000CC85                 db    2
.eh_frame:000000000000CC86                 db  42h ; B
.eh_frame:000000000000CC87                 db  0Eh
.eh_frame:000000000000CC88                 db  18h
.eh_frame:000000000000CC89                 db  8Eh
.eh_frame:000000000000CC8A                 db    3
.eh_frame:000000000000CC8B                 db  42h ; B
.eh_frame:000000000000CC8C                 db  0Eh
.eh_frame:000000000000CC8D                 db  20h
.eh_frame:000000000000CC8E                 db  8Dh
.eh_frame:000000000000CC8F                 db    4
.eh_frame:000000000000CC90                 db  42h ; B
.eh_frame:000000000000CC91                 db  0Eh
.eh_frame:000000000000CC92                 db  28h ; (
.eh_frame:000000000000CC93                 db  8Ch
.eh_frame:000000000000CC94                 db    5
.eh_frame:000000000000CC95                 db  44h ; D
.eh_frame:000000000000CC96                 db  0Eh
.eh_frame:000000000000CC97                 db  30h ; 0
.eh_frame:000000000000CC98                 db  86h
.eh_frame:000000000000CC99                 db    6
.eh_frame:000000000000CC9A                 db  41h ; A
.eh_frame:000000000000CC9B                 db  0Eh
.eh_frame:000000000000CC9C                 db  38h ; 8
.eh_frame:000000000000CC9D                 db  83h
.eh_frame:000000000000CC9E                 db    7
.eh_frame:000000000000CC9F                 db  4Ah ; J
.eh_frame:000000000000CCA0                 db  0Eh
.eh_frame:000000000000CCA1                 db  60h ; `
.eh_frame:000000000000CCA2                 db    2
.eh_frame:000000000000CCA3                 db 0DDh
.eh_frame:000000000000CCA4                 db  0Eh
.eh_frame:000000000000CCA5                 db  68h ; h
.eh_frame:000000000000CCA6                 db  57h ; W
.eh_frame:000000000000CCA7                 db  0Eh
.eh_frame:000000000000CCA8                 db  70h ; p
.eh_frame:000000000000CCA9                 db  42h ; B
.eh_frame:000000000000CCAA                 db  0Eh
.eh_frame:000000000000CCAB                 db  78h ; x
.eh_frame:000000000000CCAC                 db  42h ; B
.eh_frame:000000000000CCAD                 db  0Eh
.eh_frame:000000000000CCAE                 db  80h
.eh_frame:000000000000CCAF                 db    1
.eh_frame:000000000000CCB0                 db  42h ; B
.eh_frame:000000000000CCB1                 db  0Eh
.eh_frame:000000000000CCB2                 db  88h
.eh_frame:000000000000CCB3                 db    1
.eh_frame:000000000000CCB4                 db  42h ; B
.eh_frame:000000000000CCB5                 db  0Eh
.eh_frame:000000000000CCB6                 db  90h
.eh_frame:000000000000CCB7                 db    1
.eh_frame:000000000000CCB8                 db  53h ; S
.eh_frame:000000000000CCB9                 db  0Eh
.eh_frame:000000000000CCBA                 db  60h ; `
.eh_frame:000000000000CCBB                 db  44h ; D
.eh_frame:000000000000CCBC                 db  0Ah
.eh_frame:000000000000CCBD                 db  0Eh
.eh_frame:000000000000CCBE                 db  38h ; 8
.eh_frame:000000000000CCBF                 db  41h ; A
.eh_frame:000000000000CCC0                 db  0Eh
.eh_frame:000000000000CCC1                 db  30h ; 0
.eh_frame:000000000000CCC2                 db  41h ; A
.eh_frame:000000000000CCC3                 db  0Eh
.eh_frame:000000000000CCC4                 db  28h ; (
.eh_frame:000000000000CCC5                 db  42h ; B
.eh_frame:000000000000CCC6                 db  0Eh
.eh_frame:000000000000CCC7                 db  20h
.eh_frame:000000000000CCC8                 db  42h ; B
.eh_frame:000000000000CCC9                 db  0Eh
.eh_frame:000000000000CCCA                 db  18h
.eh_frame:000000000000CCCB                 db  42h ; B
.eh_frame:000000000000CCCC                 db  0Eh
.eh_frame:000000000000CCCD                 db  10h
.eh_frame:000000000000CCCE                 db  42h ; B
.eh_frame:000000000000CCCF                 db  0Eh
.eh_frame:000000000000CCD0                 db    8
.eh_frame:000000000000CCD1                 db  44h ; D
.eh_frame:000000000000CCD2                 db  0Bh
.eh_frame:000000000000CCD3                 db    2
.eh_frame:000000000000CCD4                 db  78h ; x
.eh_frame:000000000000CCD5                 db  0Ah
.eh_frame:000000000000CCD6                 db  0Eh
.eh_frame:000000000000CCD7                 db  68h ; h
.eh_frame:000000000000CCD8                 db  48h ; H
.eh_frame:000000000000CCD9                 db  0Bh
.eh_frame:000000000000CCDA                 db  5Ah ; Z
.eh_frame:000000000000CCDB                 db  0Ah
.eh_frame:000000000000CCDC                 db  0Eh
.eh_frame:000000000000CCDD                 db  38h ; 8
.eh_frame:000000000000CCDE                 db  47h ; G
.eh_frame:000000000000CCDF                 db  0Eh
.eh_frame:000000000000CCE0                 db  30h ; 0
.eh_frame:000000000000CCE1                 db  41h ; A
.eh_frame:000000000000CCE2                 db  0Eh
.eh_frame:000000000000CCE3                 db  28h ; (
.eh_frame:000000000000CCE4                 db  42h ; B
.eh_frame:000000000000CCE5                 db  0Eh
.eh_frame:000000000000CCE6                 db  20h
.eh_frame:000000000000CCE7                 db  42h ; B
.eh_frame:000000000000CCE8                 db  0Eh
.eh_frame:000000000000CCE9                 db  18h
.eh_frame:000000000000CCEA                 db  42h ; B
.eh_frame:000000000000CCEB                 db  0Eh
.eh_frame:000000000000CCEC                 db  10h
.eh_frame:000000000000CCED                 db  42h ; B
.eh_frame:000000000000CCEE                 db  0Eh
.eh_frame:000000000000CCEF                 db    8
.eh_frame:000000000000CCF0                 db  56h ; V
.eh_frame:000000000000CCF1                 db  0Bh
.eh_frame:000000000000CCF2                 db  5Eh ; ^
.eh_frame:000000000000CCF3                 db  0Ah
.eh_frame:000000000000CCF4                 db  0Eh
.eh_frame:000000000000CCF5                 db  38h ; 8
.eh_frame:000000000000CCF6                 db  52h ; R
.eh_frame:000000000000CCF7                 db  0Eh
.eh_frame:000000000000CCF8                 db  30h ; 0
.eh_frame:000000000000CCF9                 db  41h ; A
.eh_frame:000000000000CCFA                 db  0Eh
.eh_frame:000000000000CCFB                 db  28h ; (
.eh_frame:000000000000CCFC                 db  42h ; B
.eh_frame:000000000000CCFD                 db  0Eh
.eh_frame:000000000000CCFE                 db  20h
.eh_frame:000000000000CCFF                 db  42h ; B
.eh_frame:000000000000CD00                 db  0Eh
.eh_frame:000000000000CD01                 db  18h
.eh_frame:000000000000CD02                 db  42h ; B
.eh_frame:000000000000CD03                 db  0Eh
.eh_frame:000000000000CD04                 db  10h
.eh_frame:000000000000CD05                 db  42h ; B
.eh_frame:000000000000CD06                 db  0Eh
.eh_frame:000000000000CD07                 db    8
.eh_frame:000000000000CD08                 db  4Fh ; O
.eh_frame:000000000000CD09                 db  0Bh
.eh_frame:000000000000CD0A                 db  62h ; b
.eh_frame:000000000000CD0B                 db  0Ah
.eh_frame:000000000000CD0C                 db  0Eh
.eh_frame:000000000000CD0D                 db  38h ; 8
.eh_frame:000000000000CD0E                 db  50h ; P
.eh_frame:000000000000CD0F                 db  0Eh
.eh_frame:000000000000CD10                 db  30h ; 0
.eh_frame:000000000000CD11                 db  41h ; A
.eh_frame:000000000000CD12                 db  0Eh
.eh_frame:000000000000CD13                 db  28h ; (
.eh_frame:000000000000CD14                 db  42h ; B
.eh_frame:000000000000CD15                 db  0Eh
.eh_frame:000000000000CD16                 db  20h
.eh_frame:000000000000CD17                 db  42h ; B
.eh_frame:000000000000CD18                 db  0Eh
.eh_frame:000000000000CD19                 db  18h
.eh_frame:000000000000CD1A                 db  42h ; B
.eh_frame:000000000000CD1B                 db  0Eh
.eh_frame:000000000000CD1C                 db  10h
.eh_frame:000000000000CD1D                 db  42h ; B
.eh_frame:000000000000CD1E                 db  0Eh
.eh_frame:000000000000CD1F                 db    8
.eh_frame:000000000000CD20                 db  55h ; U
.eh_frame:000000000000CD21                 db  0Bh
.eh_frame:000000000000CD22                 db  66h ; f
.eh_frame:000000000000CD23                 db  0Eh
.eh_frame:000000000000CD24                 db  68h ; h
.eh_frame:000000000000CD25                 db  42h ; B
.eh_frame:000000000000CD26                 db  0Eh
.eh_frame:000000000000CD27                 db  70h ; p
.eh_frame:000000000000CD28                 db  5Ch ; \
.eh_frame:000000000000CD29                 db  0Eh
.eh_frame:000000000000CD2A                 db  68h ; h
.eh_frame:000000000000CD2B                 db  41h ; A
.eh_frame:000000000000CD2C                 db  0Eh
.eh_frame:000000000000CD2D                 db  60h ; `
.eh_frame:000000000000CD2E                 db  44h ; D
.eh_frame:000000000000CD2F                 db  0Ah
.eh_frame:000000000000CD30                 db  0Eh
.eh_frame:000000000000CD31                 db  38h ; 8
.eh_frame:000000000000CD32                 db  41h ; A
.eh_frame:000000000000CD33                 db  0Eh
.eh_frame:000000000000CD34                 db  30h ; 0
.eh_frame:000000000000CD35                 db  41h ; A
.eh_frame:000000000000CD36                 db  0Eh
.eh_frame:000000000000CD37                 db  28h ; (
.eh_frame:000000000000CD38                 db  42h ; B
.eh_frame:000000000000CD39                 db  0Eh
.eh_frame:000000000000CD3A                 db  20h
.eh_frame:000000000000CD3B                 db  42h ; B
.eh_frame:000000000000CD3C                 db  0Eh
.eh_frame:000000000000CD3D                 db  18h
.eh_frame:000000000000CD3E                 db  42h ; B
.eh_frame:000000000000CD3F                 db  0Eh
.eh_frame:000000000000CD40                 db  10h
.eh_frame:000000000000CD41                 db  42h ; B
.eh_frame:000000000000CD42                 db  0Eh
.eh_frame:000000000000CD43                 db    8
.eh_frame:000000000000CD44                 db  45h ; E
.eh_frame:000000000000CD45                 db  0Bh
.eh_frame:000000000000CD46                 db  68h ; h
.eh_frame:000000000000CD47                 db  0Ah
.eh_frame:000000000000CD48                 db  0Eh
.eh_frame:000000000000CD49                 db  68h ; h
.eh_frame:000000000000CD4A                 db  48h ; H
.eh_frame:000000000000CD4B                 db  0Bh
.eh_frame:000000000000CD4C                 db  72h ; r
.eh_frame:000000000000CD4D                 db  0Eh
.eh_frame:000000000000CD4E                 db  68h ; h
.eh_frame:000000000000CD4F                 db  45h ; E
.eh_frame:000000000000CD50                 db  0Eh
.eh_frame:000000000000CD51                 db  70h ; p
.eh_frame:000000000000CD52                 db  42h ; B
.eh_frame:000000000000CD53                 db  0Eh
.eh_frame:000000000000CD54                 db  78h ; x
.eh_frame:000000000000CD55                 db  42h ; B
.eh_frame:000000000000CD56                 db  0Eh
.eh_frame:000000000000CD57                 db  80h
.eh_frame:000000000000CD58                 db    1
.eh_frame:000000000000CD59                 db  5Eh ; ^
.eh_frame:000000000000CD5A                 db  0Eh
.eh_frame:000000000000CD5B                 db  60h ; `
.eh_frame:000000000000CD5C                 db  44h ; D
.eh_frame:000000000000CD5D                 db  0Ah
.eh_frame:000000000000CD5E                 db  0Eh
.eh_frame:000000000000CD5F                 db  38h ; 8
.eh_frame:000000000000CD60                 db  41h ; A
.eh_frame:000000000000CD61                 db  0Eh
.eh_frame:000000000000CD62                 db  30h ; 0
.eh_frame:000000000000CD63                 db  41h ; A
.eh_frame:000000000000CD64                 db  0Eh
.eh_frame:000000000000CD65                 db  28h ; (
.eh_frame:000000000000CD66                 db  42h ; B
.eh_frame:000000000000CD67                 db  0Eh
.eh_frame:000000000000CD68                 db  20h
.eh_frame:000000000000CD69                 db  42h ; B
.eh_frame:000000000000CD6A                 db  0Eh
.eh_frame:000000000000CD6B                 db  18h
.eh_frame:000000000000CD6C                 db  42h ; B
.eh_frame:000000000000CD6D                 db  0Eh
.eh_frame:000000000000CD6E                 db  10h
.eh_frame:000000000000CD6F                 db  42h ; B
.eh_frame:000000000000CD70                 db  0Eh
.eh_frame:000000000000CD71                 db    8
.eh_frame:000000000000CD72                 db  41h ; A
.eh_frame:000000000000CD73                 db  0Bh
.eh_frame:000000000000CD74                 db  79h ; y
.eh_frame:000000000000CD75                 db  0Ah
.eh_frame:000000000000CD76                 db  0Eh
.eh_frame:000000000000CD77                 db  68h ; h
.eh_frame:000000000000CD78                 db  42h ; B
.eh_frame:000000000000CD79                 db  0Eh
.eh_frame:000000000000CD7A                 db  70h ; p
.eh_frame:000000000000CD7B                 db  42h ; B
.eh_frame:000000000000CD7C                 db  0Eh
.eh_frame:000000000000CD7D                 db  78h ; x
.eh_frame:000000000000CD7E                 db  42h ; B
.eh_frame:000000000000CD7F                 db  0Eh
.eh_frame:000000000000CD80                 db  80h
.eh_frame:000000000000CD81                 db    1
.eh_frame:000000000000CD82                 db  51h ; Q
.eh_frame:000000000000CD83                 db  0Bh
.eh_frame:000000000000CD84                 db  10h
.eh_frame:000000000000CD85                 db    0
.eh_frame:000000000000CD86                 db    0
.eh_frame:000000000000CD87                 db    0
.eh_frame:000000000000CD88                 db 0C0h
.eh_frame:000000000000CD89                 db  0Bh
.eh_frame:000000000000CD8A                 db    0
.eh_frame:000000000000CD8B                 db    0
.eh_frame:000000000000CD8C                 db    4
.eh_frame:000000000000CD8D                 db 0B4h
.eh_frame:000000000000CD8E                 db 0FFh
.eh_frame:000000000000CD8F                 db 0FFh
.eh_frame:000000000000CD90                 db  20h
.eh_frame:000000000000CD91                 db    0
.eh_frame:000000000000CD92                 db    0
.eh_frame:000000000000CD93                 db    0
.eh_frame:000000000000CD94                 db    0
.eh_frame:000000000000CD95                 db    0
.eh_frame:000000000000CD96                 db    0
.eh_frame:000000000000CD97                 db    0
.eh_frame:000000000000CD98                 db  18h
.eh_frame:000000000000CD99                 db    0
.eh_frame:000000000000CD9A                 db    0
.eh_frame:000000000000CD9B                 db    0
.eh_frame:000000000000CD9C                 db 0D4h
.eh_frame:000000000000CD9D                 db  0Bh
.eh_frame:000000000000CD9E                 db    0
.eh_frame:000000000000CD9F                 db    0
.eh_frame:000000000000CDA0                 db  10h
.eh_frame:000000000000CDA1                 db 0B4h
.eh_frame:000000000000CDA2                 db 0FFh
.eh_frame:000000000000CDA3                 db 0FFh
.eh_frame:000000000000CDA4                 db  78h ; x
.eh_frame:000000000000CDA5                 db    0
.eh_frame:000000000000CDA6                 db    0
.eh_frame:000000000000CDA7                 db    0
.eh_frame:000000000000CDA8                 db    0
.eh_frame:000000000000CDA9                 db  44h ; D
.eh_frame:000000000000CDAA                 db  0Eh
.eh_frame:000000000000CDAB                 db  70h ; p
.eh_frame:000000000000CDAC                 db    2
.eh_frame:000000000000CDAD                 db  60h ; `
.eh_frame:000000000000CDAE                 db  0Ah
.eh_frame:000000000000CDAF                 db  0Eh
.eh_frame:000000000000CDB0                 db    8
.eh_frame:000000000000CDB1                 db  41h ; A
.eh_frame:000000000000CDB2                 db  0Bh
.eh_frame:000000000000CDB3                 db    0
.eh_frame:000000000000CDB4                 db  28h ; (
.eh_frame:000000000000CDB5                 db    0
.eh_frame:000000000000CDB6                 db    0
.eh_frame:000000000000CDB7                 db    0
.eh_frame:000000000000CDB8                 db 0F0h
.eh_frame:000000000000CDB9                 db  0Bh
.eh_frame:000000000000CDBA                 db    0
.eh_frame:000000000000CDBB                 db    0
.eh_frame:000000000000CDBC                 db  74h ; t
.eh_frame:000000000000CDBD                 db 0B4h
.eh_frame:000000000000CDBE                 db 0FFh
.eh_frame:000000000000CDBF                 db 0FFh
.eh_frame:000000000000CDC0                 db 0D5h
.eh_frame:000000000000CDC1                 db    0
.eh_frame:000000000000CDC2                 db    0
.eh_frame:000000000000CDC3                 db    0
.eh_frame:000000000000CDC4                 db    0
.eh_frame:000000000000CDC5                 db  41h ; A
.eh_frame:000000000000CDC6                 db  0Eh
.eh_frame:000000000000CDC7                 db  10h
.eh_frame:000000000000CDC8                 db  86h
.eh_frame:000000000000CDC9                 db    2
.eh_frame:000000000000CDCA                 db  41h ; A
.eh_frame:000000000000CDCB                 db  0Eh
.eh_frame:000000000000CDCC                 db  18h
.eh_frame:000000000000CDCD                 db  83h
.eh_frame:000000000000CDCE                 db    3
.eh_frame:000000000000CDCF                 db  50h ; P
.eh_frame:000000000000CDD0                 db  0Eh
.eh_frame:000000000000CDD1                 db 0D0h
.eh_frame:000000000000CDD2                 db    1
.eh_frame:000000000000CDD3                 db    2
.eh_frame:000000000000CDD4                 db 0ABh
.eh_frame:000000000000CDD5                 db  0Ah
.eh_frame:000000000000CDD6                 db  0Eh
.eh_frame:000000000000CDD7                 db  18h
.eh_frame:000000000000CDD8                 db  41h ; A
.eh_frame:000000000000CDD9                 db  0Eh
.eh_frame:000000000000CDDA                 db  10h
.eh_frame:000000000000CDDB                 db  41h ; A
.eh_frame:000000000000CDDC                 db  0Eh
.eh_frame:000000000000CDDD                 db    8
.eh_frame:000000000000CDDE                 db  41h ; A
.eh_frame:000000000000CDDF                 db  0Bh
.eh_frame:000000000000CDE0                 db  1Ch
.eh_frame:000000000000CDE1                 db    0
.eh_frame:000000000000CDE2                 db    0
.eh_frame:000000000000CDE3                 db    0
.eh_frame:000000000000CDE4                 db  1Ch
.eh_frame:000000000000CDE5                 db  0Ch
.eh_frame:000000000000CDE6                 db    0
.eh_frame:000000000000CDE7                 db    0
.eh_frame:000000000000CDE8                 db  28h ; (
.eh_frame:000000000000CDE9                 db 0B5h
.eh_frame:000000000000CDEA                 db 0FFh
.eh_frame:000000000000CDEB                 db 0FFh
.eh_frame:000000000000CDEC                 db  80h
.eh_frame:000000000000CDED                 db    0
.eh_frame:000000000000CDEE                 db    0
.eh_frame:000000000000CDEF                 db    0
.eh_frame:000000000000CDF0                 db    0
.eh_frame:000000000000CDF1                 db  41h ; A
.eh_frame:000000000000CDF2                 db  0Eh
.eh_frame:000000000000CDF3                 db  10h
.eh_frame:000000000000CDF4                 db  83h
.eh_frame:000000000000CDF5                 db    2
.eh_frame:000000000000CDF6                 db    2
.eh_frame:000000000000CDF7                 db  7Ah ; z
.eh_frame:000000000000CDF8                 db  0Eh
.eh_frame:000000000000CDF9                 db    8
.eh_frame:000000000000CDFA                 db    0
.eh_frame:000000000000CDFB                 db    0
.eh_frame:000000000000CDFC                 db    0
.eh_frame:000000000000CDFD                 db    0
.eh_frame:000000000000CDFE                 db    0
.eh_frame:000000000000CDFF                 db    0
.eh_frame:000000000000CE00                 db  18h
.eh_frame:000000000000CE01                 db    0
.eh_frame:000000000000CE02                 db    0
.eh_frame:000000000000CE03                 db    0
.eh_frame:000000000000CE04                 db  3Ch ; <
.eh_frame:000000000000CE05                 db  0Ch
.eh_frame:000000000000CE06                 db    0
.eh_frame:000000000000CE07                 db    0
.eh_frame:000000000000CE08                 db  88h
.eh_frame:000000000000CE09                 db 0B5h
.eh_frame:000000000000CE0A                 db 0FFh
.eh_frame:000000000000CE0B                 db 0FFh
.eh_frame:000000000000CE0C                 db  1Ah
.eh_frame:000000000000CE0D                 db    0
.eh_frame:000000000000CE0E                 db    0
.eh_frame:000000000000CE0F                 db    0
.eh_frame:000000000000CE10                 db    0
.eh_frame:000000000000CE11                 db  41h ; A
.eh_frame:000000000000CE12                 db  0Eh
.eh_frame:000000000000CE13                 db  10h
.eh_frame:000000000000CE14                 db  83h
.eh_frame:000000000000CE15                 db    2
.eh_frame:000000000000CE16                 db  53h ; S
.eh_frame:000000000000CE17                 db  0Ah
.eh_frame:000000000000CE18                 db  0Eh
.eh_frame:000000000000CE19                 db    8
.eh_frame:000000000000CE1A                 db  41h ; A
.eh_frame:000000000000CE1B                 db  0Bh
.eh_frame:000000000000CE1C                 db  10h
.eh_frame:000000000000CE1D                 db    0
.eh_frame:000000000000CE1E                 db    0
.eh_frame:000000000000CE1F                 db    0
.eh_frame:000000000000CE20                 db  58h ; X
.eh_frame:000000000000CE21                 db  0Ch
.eh_frame:000000000000CE22                 db    0
.eh_frame:000000000000CE23                 db    0
.eh_frame:000000000000CE24                 db  8Ch
.eh_frame:000000000000CE25                 db 0B5h
.eh_frame:000000000000CE26                 db 0FFh
.eh_frame:000000000000CE27                 db 0FFh
.eh_frame:000000000000CE28                 db  24h ; $
.eh_frame:000000000000CE29                 db    0
.eh_frame:000000000000CE2A                 db    0
.eh_frame:000000000000CE2B                 db    0
.eh_frame:000000000000CE2C                 db    0
.eh_frame:000000000000CE2D                 db  5Fh ; _
.eh_frame:000000000000CE2E                 db  0Eh
.eh_frame:000000000000CE2F                 db  10h
.eh_frame:000000000000CE30                 db  10h
.eh_frame:000000000000CE31                 db    0
.eh_frame:000000000000CE32                 db    0
.eh_frame:000000000000CE33                 db    0
.eh_frame:000000000000CE34                 db  6Ch ; l
.eh_frame:000000000000CE35                 db  0Ch
.eh_frame:000000000000CE36                 db    0
.eh_frame:000000000000CE37                 db    0
.eh_frame:000000000000CE38                 db 0A8h
.eh_frame:000000000000CE39                 db 0B5h
.eh_frame:000000000000CE3A                 db 0FFh
.eh_frame:000000000000CE3B                 db 0FFh
.eh_frame:000000000000CE3C                 db    2
.eh_frame:000000000000CE3D                 db    0
.eh_frame:000000000000CE3E                 db    0
.eh_frame:000000000000CE3F                 db    0
.eh_frame:000000000000CE40                 db    0
.eh_frame:000000000000CE41                 db    0
.eh_frame:000000000000CE42                 db    0
.eh_frame:000000000000CE43                 db    0
.eh_frame:000000000000CE44                 db  20h
.eh_frame:000000000000CE45                 db    0
.eh_frame:000000000000CE46                 db    0
.eh_frame:000000000000CE47                 db    0
.eh_frame:000000000000CE48                 db  80h
.eh_frame:000000000000CE49                 db  0Ch
.eh_frame:000000000000CE4A                 db    0
.eh_frame:000000000000CE4B                 db    0
.eh_frame:000000000000CE4C                 db 0A4h
.eh_frame:000000000000CE4D                 db 0B5h
.eh_frame:000000000000CE4E                 db 0FFh
.eh_frame:000000000000CE4F                 db 0FFh
.eh_frame:000000000000CE50                 db  36h ; 6
.eh_frame:000000000000CE51                 db    0
.eh_frame:000000000000CE52                 db    0
.eh_frame:000000000000CE53                 db    0
.eh_frame:000000000000CE54                 db    0
.eh_frame:000000000000CE55                 db  44h ; D
.eh_frame:000000000000CE56                 db  0Eh
.eh_frame:000000000000CE57                 db  10h
.eh_frame:000000000000CE58                 db  83h
.eh_frame:000000000000CE59                 db    2
.eh_frame:000000000000CE5A                 db  5Dh ; ]
.eh_frame:000000000000CE5B                 db  0Ah
.eh_frame:000000000000CE5C                 db  0Eh
.eh_frame:000000000000CE5D                 db    8
.eh_frame:000000000000CE5E                 db  47h ; G
.eh_frame:000000000000CE5F                 db  0Bh
.eh_frame:000000000000CE60                 db  48h ; H
.eh_frame:000000000000CE61                 db  0Ah
.eh_frame:000000000000CE62                 db  0Eh
.eh_frame:000000000000CE63                 db    8
.eh_frame:000000000000CE64                 db  41h ; A
.eh_frame:000000000000CE65                 db  0Bh
.eh_frame:000000000000CE66                 db    0
.eh_frame:000000000000CE67                 db    0
.eh_frame:000000000000CE68                 db  10h
.eh_frame:000000000000CE69                 db    0
.eh_frame:000000000000CE6A                 db    0
.eh_frame:000000000000CE6B                 db    0
.eh_frame:000000000000CE6C                 db 0A4h
.eh_frame:000000000000CE6D                 db  0Ch
.eh_frame:000000000000CE6E                 db    0
.eh_frame:000000000000CE6F                 db    0
.eh_frame:000000000000CE70                 db 0C0h
.eh_frame:000000000000CE71                 db 0B5h
.eh_frame:000000000000CE72                 db 0FFh
.eh_frame:000000000000CE73                 db 0FFh
.eh_frame:000000000000CE74                 db  24h ; $
.eh_frame:000000000000CE75                 db    0
.eh_frame:000000000000CE76                 db    0
.eh_frame:000000000000CE77                 db    0
.eh_frame:000000000000CE78                 db    0
.eh_frame:000000000000CE79                 db  5Fh ; _
.eh_frame:000000000000CE7A                 db  0Eh
.eh_frame:000000000000CE7B                 db  10h
.eh_frame:000000000000CE7C                 db  14h
.eh_frame:000000000000CE7D                 db    0
.eh_frame:000000000000CE7E                 db    0
.eh_frame:000000000000CE7F                 db    0
.eh_frame:000000000000CE80                 db 0B8h
.eh_frame:000000000000CE81                 db  0Ch
.eh_frame:000000000000CE82                 db    0
.eh_frame:000000000000CE83                 db    0
.eh_frame:000000000000CE84                 db 0DCh
.eh_frame:000000000000CE85                 db 0B5h
.eh_frame:000000000000CE86                 db 0FFh
.eh_frame:000000000000CE87                 db 0FFh
.eh_frame:000000000000CE88                 db  82h
.eh_frame:000000000000CE89                 db    0
.eh_frame:000000000000CE8A                 db    0
.eh_frame:000000000000CE8B                 db    0
.eh_frame:000000000000CE8C                 db    0
.eh_frame:000000000000CE8D                 db    2
.eh_frame:000000000000CE8E                 db  5Fh ; _
.eh_frame:000000000000CE8F                 db  0Eh
.eh_frame:000000000000CE90                 db  10h
.eh_frame:000000000000CE91                 db  49h ; I
.eh_frame:000000000000CE92                 db  0Eh
.eh_frame:000000000000CE93                 db    8
.eh_frame:000000000000CE94                 db  14h
.eh_frame:000000000000CE95                 db    0
.eh_frame:000000000000CE96                 db    0
.eh_frame:000000000000CE97                 db    0
.eh_frame:000000000000CE98                 db 0D0h
.eh_frame:000000000000CE99                 db  0Ch
.eh_frame:000000000000CE9A                 db    0
.eh_frame:000000000000CE9B                 db    0
.eh_frame:000000000000CE9C                 db  54h ; T
.eh_frame:000000000000CE9D                 db 0B6h
.eh_frame:000000000000CE9E                 db 0FFh
.eh_frame:000000000000CE9F                 db 0FFh
.eh_frame:000000000000CEA0                 db  4Ah ; J
.eh_frame:000000000000CEA1                 db    0
.eh_frame:000000000000CEA2                 db    0
.eh_frame:000000000000CEA3                 db    0
.eh_frame:000000000000CEA4                 db    0
.eh_frame:000000000000CEA5                 db    2
.eh_frame:000000000000CEA6                 db  45h ; E
.eh_frame:000000000000CEA7                 db  0Eh
.eh_frame:000000000000CEA8                 db  10h
.eh_frame:000000000000CEA9                 db    0
.eh_frame:000000000000CEAA                 db    0
.eh_frame:000000000000CEAB                 db    0
.eh_frame:000000000000CEAC                 db  18h
.eh_frame:000000000000CEAD                 db    0
.eh_frame:000000000000CEAE                 db    0
.eh_frame:000000000000CEAF                 db    0
.eh_frame:000000000000CEB0                 db 0E8h
.eh_frame:000000000000CEB1                 db  0Ch
.eh_frame:000000000000CEB2                 db    0
.eh_frame:000000000000CEB3                 db    0
.eh_frame:000000000000CEB4                 db  8Ch
.eh_frame:000000000000CEB5                 db 0B6h
.eh_frame:000000000000CEB6                 db 0FFh
.eh_frame:000000000000CEB7                 db 0FFh
.eh_frame:000000000000CEB8                 db  17h
.eh_frame:000000000000CEB9                 db    0
.eh_frame:000000000000CEBA                 db    0
.eh_frame:000000000000CEBB                 db    0
.eh_frame:000000000000CEBC                 db    0
.eh_frame:000000000000CEBD                 db  41h ; A
.eh_frame:000000000000CEBE                 db  0Eh
.eh_frame:000000000000CEBF                 db  10h
.eh_frame:000000000000CEC0                 db  83h
.eh_frame:000000000000CEC1                 db    2
.eh_frame:000000000000CEC2                 db  51h ; Q
.eh_frame:000000000000CEC3                 db  0Eh
.eh_frame:000000000000CEC4                 db    8
.eh_frame:000000000000CEC5                 db    0
.eh_frame:000000000000CEC6                 db    0
.eh_frame:000000000000CEC7                 db    0
.eh_frame:000000000000CEC8                 db  18h
.eh_frame:000000000000CEC9                 db    0
.eh_frame:000000000000CECA                 db    0
.eh_frame:000000000000CECB                 db    0
.eh_frame:000000000000CECC                 db    4
.eh_frame:000000000000CECD                 db  0Dh
.eh_frame:000000000000CECE                 db    0
.eh_frame:000000000000CECF                 db    0
.eh_frame:000000000000CED0                 db  90h
.eh_frame:000000000000CED1                 db 0B6h
.eh_frame:000000000000CED2                 db 0FFh
.eh_frame:000000000000CED3                 db 0FFh
.eh_frame:000000000000CED4                 db  2Eh ; .
.eh_frame:000000000000CED5                 db    0
.eh_frame:000000000000CED6                 db    0
.eh_frame:000000000000CED7                 db    0
.eh_frame:000000000000CED8                 db    0
.eh_frame:000000000000CED9                 db  47h ; G
.eh_frame:000000000000CEDA                 db  0Eh
.eh_frame:000000000000CEDB                 db  10h
.eh_frame:000000000000CEDC                 db  61h ; a
.eh_frame:000000000000CEDD                 db  0Ah
.eh_frame:000000000000CEDE                 db  0Eh
.eh_frame:000000000000CEDF                 db    8
.eh_frame:000000000000CEE0                 db  41h ; A
.eh_frame:000000000000CEE1                 db  0Bh
.eh_frame:000000000000CEE2                 db    0
.eh_frame:000000000000CEE3                 db    0
.eh_frame:000000000000CEE4                 db  24h ; $
.eh_frame:000000000000CEE5                 db    0
.eh_frame:000000000000CEE6                 db    0
.eh_frame:000000000000CEE7                 db    0
.eh_frame:000000000000CEE8                 db  20h
.eh_frame:000000000000CEE9                 db  0Dh
.eh_frame:000000000000CEEA                 db    0
.eh_frame:000000000000CEEB                 db    0
.eh_frame:000000000000CEEC                 db 0A4h
.eh_frame:000000000000CEED                 db 0B6h
.eh_frame:000000000000CEEE                 db 0FFh
.eh_frame:000000000000CEEF                 db 0FFh
.eh_frame:000000000000CEF0                 db  28h ; (
.eh_frame:000000000000CEF1                 db    0
.eh_frame:000000000000CEF2                 db    0
.eh_frame:000000000000CEF3                 db    0
.eh_frame:000000000000CEF4                 db    0
.eh_frame:000000000000CEF5                 db  41h ; A
.eh_frame:000000000000CEF6                 db  0Eh
.eh_frame:000000000000CEF7                 db  10h
.eh_frame:000000000000CEF8                 db  86h
.eh_frame:000000000000CEF9                 db    2
.eh_frame:000000000000CEFA                 db  41h ; A
.eh_frame:000000000000CEFB                 db  0Eh
.eh_frame:000000000000CEFC                 db  18h
.eh_frame:000000000000CEFD                 db  83h
.eh_frame:000000000000CEFE                 db    3
.eh_frame:000000000000CEFF                 db  4Dh ; M
.eh_frame:000000000000CF00                 db  0Eh
.eh_frame:000000000000CF01                 db  20h
.eh_frame:000000000000CF02                 db  49h ; I
.eh_frame:000000000000CF03                 db  0Eh
.eh_frame:000000000000CF04                 db  18h
.eh_frame:000000000000CF05                 db  47h ; G
.eh_frame:000000000000CF06                 db  0Eh
.eh_frame:000000000000CF07                 db  10h
.eh_frame:000000000000CF08                 db  41h ; A
.eh_frame:000000000000CF09                 db  0Eh
.eh_frame:000000000000CF0A                 db    8
.eh_frame:000000000000CF0B                 db    0
.eh_frame:000000000000CF0C                 db  18h
.eh_frame:000000000000CF0D                 db    0
.eh_frame:000000000000CF0E                 db    0
.eh_frame:000000000000CF0F                 db    0
.eh_frame:000000000000CF10                 db  48h ; H
.eh_frame:000000000000CF11                 db  0Dh
.eh_frame:000000000000CF12                 db    0
.eh_frame:000000000000CF13                 db    0
.eh_frame:000000000000CF14                 db 0ACh
.eh_frame:000000000000CF15                 db 0B6h
.eh_frame:000000000000CF16                 db 0FFh
.eh_frame:000000000000CF17                 db 0FFh
.eh_frame:000000000000CF18                 db  13h
.eh_frame:000000000000CF19                 db    0
.eh_frame:000000000000CF1A                 db    0
.eh_frame:000000000000CF1B                 db    0
.eh_frame:000000000000CF1C                 db    0
.eh_frame:000000000000CF1D                 db  41h ; A
.eh_frame:000000000000CF1E                 db  0Eh
.eh_frame:000000000000CF1F                 db  10h
.eh_frame:000000000000CF20                 db  83h
.eh_frame:000000000000CF21                 db    2
.eh_frame:000000000000CF22                 db  50h ; P
.eh_frame:000000000000CF23                 db  0Eh
.eh_frame:000000000000CF24                 db    8
.eh_frame:000000000000CF25                 db    0
.eh_frame:000000000000CF26                 db    0
.eh_frame:000000000000CF27                 db    0
.eh_frame:000000000000CF28                 db  14h
.eh_frame:000000000000CF29                 db    0
.eh_frame:000000000000CF2A                 db    0
.eh_frame:000000000000CF2B                 db    0
.eh_frame:000000000000CF2C                 db  64h ; d
.eh_frame:000000000000CF2D                 db  0Dh
.eh_frame:000000000000CF2E                 db    0
.eh_frame:000000000000CF2F                 db    0
.eh_frame:000000000000CF30                 db 0B0h
.eh_frame:000000000000CF31                 db 0B6h
.eh_frame:000000000000CF32                 db 0FFh
.eh_frame:000000000000CF33                 db 0FFh
.eh_frame:000000000000CF34                 db  35h ; 5
.eh_frame:000000000000CF35                 db    0
.eh_frame:000000000000CF36                 db    0
.eh_frame:000000000000CF37                 db    0
.eh_frame:000000000000CF38                 db    0
.eh_frame:000000000000CF39                 db  4Bh ; K
.eh_frame:000000000000CF3A                 db  0Eh
.eh_frame:000000000000CF3B                 db  10h
.eh_frame:000000000000CF3C                 db    0
.eh_frame:000000000000CF3D                 db    0
.eh_frame:000000000000CF3E                 db    0
.eh_frame:000000000000CF3F                 db    0
.eh_frame:000000000000CF40                 db  1Ch
.eh_frame:000000000000CF41                 db    0
.eh_frame:000000000000CF42                 db    0
.eh_frame:000000000000CF43                 db    0
.eh_frame:000000000000CF44                 db  7Ch ; |
.eh_frame:000000000000CF45                 db  0Dh
.eh_frame:000000000000CF46                 db    0
.eh_frame:000000000000CF47                 db    0
.eh_frame:000000000000CF48                 db 0D8h
.eh_frame:000000000000CF49                 db 0B6h
.eh_frame:000000000000CF4A                 db 0FFh
.eh_frame:000000000000CF4B                 db 0FFh
.eh_frame:000000000000CF4C                 db  18h
.eh_frame:000000000000CF4D                 db    0
.eh_frame:000000000000CF4E                 db    0
.eh_frame:000000000000CF4F                 db    0
.eh_frame:000000000000CF50                 db    0
.eh_frame:000000000000CF51                 db  44h ; D
.eh_frame:000000000000CF52                 db  0Eh
.eh_frame:000000000000CF53                 db  10h
.eh_frame:000000000000CF54                 db  4Eh ; N
.eh_frame:000000000000CF55                 db  0Ah
.eh_frame:000000000000CF56                 db  0Eh
.eh_frame:000000000000CF57                 db    8
.eh_frame:000000000000CF58                 db  41h ; A
.eh_frame:000000000000CF59                 db  0Bh
.eh_frame:000000000000CF5A                 db    0
.eh_frame:000000000000CF5B                 db    0
.eh_frame:000000000000CF5C                 db    0
.eh_frame:000000000000CF5D                 db    0
.eh_frame:000000000000CF5E                 db    0
.eh_frame:000000000000CF5F                 db    0
.eh_frame:000000000000CF60                 db  4Ch ; L
.eh_frame:000000000000CF61                 db    0
.eh_frame:000000000000CF62                 db    0
.eh_frame:000000000000CF63                 db    0
.eh_frame:000000000000CF64                 db  9Ch
.eh_frame:000000000000CF65                 db  0Dh
.eh_frame:000000000000CF66                 db    0
.eh_frame:000000000000CF67                 db    0
.eh_frame:000000000000CF68                 db 0D8h
.eh_frame:000000000000CF69                 db 0B6h
.eh_frame:000000000000CF6A                 db 0FFh
.eh_frame:000000000000CF6B                 db 0FFh
.eh_frame:000000000000CF6C                 db 0B3h
.eh_frame:000000000000CF6D                 db    6
.eh_frame:000000000000CF6E                 db    0
.eh_frame:000000000000CF6F                 db    0
.eh_frame:000000000000CF70                 db    0
.eh_frame:000000000000CF71                 db  42h ; B
.eh_frame:000000000000CF72                 db  0Eh
.eh_frame:000000000000CF73                 db  10h
.eh_frame:000000000000CF74                 db  8Fh
.eh_frame:000000000000CF75                 db    2
.eh_frame:000000000000CF76                 db  42h ; B
.eh_frame:000000000000CF77                 db  0Eh
.eh_frame:000000000000CF78                 db  18h
.eh_frame:000000000000CF79                 db  8Eh
.eh_frame:000000000000CF7A                 db    3
.eh_frame:000000000000CF7B                 db  42h ; B
.eh_frame:000000000000CF7C                 db  0Eh
.eh_frame:000000000000CF7D                 db  20h
.eh_frame:000000000000CF7E                 db  8Dh
.eh_frame:000000000000CF7F                 db    4
.eh_frame:000000000000CF80                 db  42h ; B
.eh_frame:000000000000CF81                 db  0Eh
.eh_frame:000000000000CF82                 db  28h ; (
.eh_frame:000000000000CF83                 db  8Ch
.eh_frame:000000000000CF84                 db    5
.eh_frame:000000000000CF85                 db  41h ; A
.eh_frame:000000000000CF86                 db  0Eh
.eh_frame:000000000000CF87                 db  30h ; 0
.eh_frame:000000000000CF88                 db  86h
.eh_frame:000000000000CF89                 db    6
.eh_frame:000000000000CF8A                 db  41h ; A
.eh_frame:000000000000CF8B                 db  0Eh
.eh_frame:000000000000CF8C                 db  38h ; 8
.eh_frame:000000000000CF8D                 db  83h
.eh_frame:000000000000CF8E                 db    7
.eh_frame:000000000000CF8F                 db  44h ; D
.eh_frame:000000000000CF90                 db  0Eh
.eh_frame:000000000000CF91                 db  60h ; `
.eh_frame:000000000000CF92                 db    2
.eh_frame:000000000000CF93                 db  94h
.eh_frame:000000000000CF94                 db  0Ah
.eh_frame:000000000000CF95                 db  0Eh
.eh_frame:000000000000CF96                 db  38h ; 8
.eh_frame:000000000000CF97                 db  41h ; A
.eh_frame:000000000000CF98                 db  0Eh
.eh_frame:000000000000CF99                 db  30h ; 0
.eh_frame:000000000000CF9A                 db  41h ; A
.eh_frame:000000000000CF9B                 db  0Eh
.eh_frame:000000000000CF9C                 db  28h ; (
.eh_frame:000000000000CF9D                 db  42h ; B
.eh_frame:000000000000CF9E                 db  0Eh
.eh_frame:000000000000CF9F                 db  20h
.eh_frame:000000000000CFA0                 db  42h ; B
.eh_frame:000000000000CFA1                 db  0Eh
.eh_frame:000000000000CFA2                 db  18h
.eh_frame:000000000000CFA3                 db  42h ; B
.eh_frame:000000000000CFA4                 db  0Eh
.eh_frame:000000000000CFA5                 db  10h
.eh_frame:000000000000CFA6                 db  42h ; B
.eh_frame:000000000000CFA7                 db  0Eh
.eh_frame:000000000000CFA8                 db    8
.eh_frame:000000000000CFA9                 db  44h ; D
.eh_frame:000000000000CFAA                 db  0Bh
.eh_frame:000000000000CFAB                 db    0
.eh_frame:000000000000CFAC                 db    0
.eh_frame:000000000000CFAD                 db    0
.eh_frame:000000000000CFAE                 db    0
.eh_frame:000000000000CFAF                 db    0
.eh_frame:000000000000CFB0                 db  4Ch ; L
.eh_frame:000000000000CFB1                 db    0
.eh_frame:000000000000CFB2                 db    0
.eh_frame:000000000000CFB3                 db    0
.eh_frame:000000000000CFB4                 db 0ECh
.eh_frame:000000000000CFB5                 db  0Dh
.eh_frame:000000000000CFB6                 db    0
.eh_frame:000000000000CFB7                 db    0
.eh_frame:000000000000CFB8                 db  48h ; H
.eh_frame:000000000000CFB9                 db 0BDh
.eh_frame:000000000000CFBA                 db 0FFh
.eh_frame:000000000000CFBB                 db 0FFh
.eh_frame:000000000000CFBC                 db  1Ch
.eh_frame:000000000000CFBD                 db    4
.eh_frame:000000000000CFBE                 db    0
.eh_frame:000000000000CFBF                 db    0
.eh_frame:000000000000CFC0                 db    0
.eh_frame:000000000000CFC1                 db  42h ; B
.eh_frame:000000000000CFC2                 db  0Eh
.eh_frame:000000000000CFC3                 db  10h
.eh_frame:000000000000CFC4                 db  8Fh
.eh_frame:000000000000CFC5                 db    2
.eh_frame:000000000000CFC6                 db  42h ; B
.eh_frame:000000000000CFC7                 db  0Eh
.eh_frame:000000000000CFC8                 db  18h
.eh_frame:000000000000CFC9                 db  8Eh
.eh_frame:000000000000CFCA                 db    3
.eh_frame:000000000000CFCB                 db  42h ; B
.eh_frame:000000000000CFCC                 db  0Eh
.eh_frame:000000000000CFCD                 db  20h
.eh_frame:000000000000CFCE                 db  8Dh
.eh_frame:000000000000CFCF                 db    4
.eh_frame:000000000000CFD0                 db  42h ; B
.eh_frame:000000000000CFD1                 db  0Eh
.eh_frame:000000000000CFD2                 db  28h ; (
.eh_frame:000000000000CFD3                 db  8Ch
.eh_frame:000000000000CFD4                 db    5
.eh_frame:000000000000CFD5                 db  41h ; A
.eh_frame:000000000000CFD6                 db  0Eh
.eh_frame:000000000000CFD7                 db  30h ; 0
.eh_frame:000000000000CFD8                 db  86h
.eh_frame:000000000000CFD9                 db    6
.eh_frame:000000000000CFDA                 db  41h ; A
.eh_frame:000000000000CFDB                 db  0Eh
.eh_frame:000000000000CFDC                 db  38h ; 8
.eh_frame:000000000000CFDD                 db  83h
.eh_frame:000000000000CFDE                 db    7
.eh_frame:000000000000CFDF                 db  44h ; D
.eh_frame:000000000000CFE0                 db  0Eh
.eh_frame:000000000000CFE1                 db  60h ; `
.eh_frame:000000000000CFE2                 db    2
.eh_frame:000000000000CFE3                 db 0E9h
.eh_frame:000000000000CFE4                 db  0Ah
.eh_frame:000000000000CFE5                 db  0Eh
.eh_frame:000000000000CFE6                 db  38h ; 8
.eh_frame:000000000000CFE7                 db  41h ; A
.eh_frame:000000000000CFE8                 db  0Eh
.eh_frame:000000000000CFE9                 db  30h ; 0
.eh_frame:000000000000CFEA                 db  41h ; A
.eh_frame:000000000000CFEB                 db  0Eh
.eh_frame:000000000000CFEC                 db  28h ; (
.eh_frame:000000000000CFED                 db  42h ; B
.eh_frame:000000000000CFEE                 db  0Eh
.eh_frame:000000000000CFEF                 db  20h
.eh_frame:000000000000CFF0                 db  42h ; B
.eh_frame:000000000000CFF1                 db  0Eh
.eh_frame:000000000000CFF2                 db  18h
.eh_frame:000000000000CFF3                 db  42h ; B
.eh_frame:000000000000CFF4                 db  0Eh
.eh_frame:000000000000CFF5                 db  10h
.eh_frame:000000000000CFF6                 db  42h ; B
.eh_frame:000000000000CFF7                 db  0Eh
.eh_frame:000000000000CFF8                 db    8
.eh_frame:000000000000CFF9                 db  47h ; G
.eh_frame:000000000000CFFA                 db  0Bh
.eh_frame:000000000000CFFB                 db    0
.eh_frame:000000000000CFFC                 db    0
.eh_frame:000000000000CFFD                 db    0
.eh_frame:000000000000CFFE                 db    0
.eh_frame:000000000000CFFF                 db    0
.eh_frame:000000000000D000                 db  3Ch ; <
.eh_frame:000000000000D001                 db    0
.eh_frame:000000000000D002                 db    0
.eh_frame:000000000000D003                 db    0
.eh_frame:000000000000D004                 db  3Ch ; <
.eh_frame:000000000000D005                 db  0Eh
.eh_frame:000000000000D006                 db    0
.eh_frame:000000000000D007                 db    0
.eh_frame:000000000000D008                 db  18h
.eh_frame:000000000000D009                 db 0C1h
.eh_frame:000000000000D00A                 db 0FFh
.eh_frame:000000000000D00B                 db 0FFh
.eh_frame:000000000000D00C                 db  83h
.eh_frame:000000000000D00D                 db    0
.eh_frame:000000000000D00E                 db    0
.eh_frame:000000000000D00F                 db    0
.eh_frame:000000000000D010                 db    0
.eh_frame:000000000000D011                 db  42h ; B
.eh_frame:000000000000D012                 db  0Eh
.eh_frame:000000000000D013                 db  10h
.eh_frame:000000000000D014                 db  8Dh
.eh_frame:000000000000D015                 db    2
.eh_frame:000000000000D016                 db  42h ; B
.eh_frame:000000000000D017                 db  0Eh
.eh_frame:000000000000D018                 db  18h
.eh_frame:000000000000D019                 db  8Ch
.eh_frame:000000000000D01A                 db    3
.eh_frame:000000000000D01B                 db  44h ; D
.eh_frame:000000000000D01C                 db  0Eh
.eh_frame:000000000000D01D                 db  20h
.eh_frame:000000000000D01E                 db  86h
.eh_frame:000000000000D01F                 db    4
.eh_frame:000000000000D020                 db  41h ; A
.eh_frame:000000000000D021                 db  0Eh
.eh_frame:000000000000D022                 db  28h ; (
.eh_frame:000000000000D023                 db  83h
.eh_frame:000000000000D024                 db    5
.eh_frame:000000000000D025                 db  4Ah ; J
.eh_frame:000000000000D026                 db  0Eh
.eh_frame:000000000000D027                 db  40h ; @
.eh_frame:000000000000D028                 db    2
.eh_frame:000000000000D029                 db  64h ; d
.eh_frame:000000000000D02A                 db  0Ah
.eh_frame:000000000000D02B                 db  0Eh
.eh_frame:000000000000D02C                 db  28h ; (
.eh_frame:000000000000D02D                 db  41h ; A
.eh_frame:000000000000D02E                 db  0Eh
.eh_frame:000000000000D02F                 db  20h
.eh_frame:000000000000D030                 db  41h ; A
.eh_frame:000000000000D031                 db  0Eh
.eh_frame:000000000000D032                 db  18h
.eh_frame:000000000000D033                 db  42h ; B
.eh_frame:000000000000D034                 db  0Eh
.eh_frame:000000000000D035                 db  10h
.eh_frame:000000000000D036                 db  42h ; B
.eh_frame:000000000000D037                 db  0Eh
.eh_frame:000000000000D038                 db    8
.eh_frame:000000000000D039                 db  41h ; A
.eh_frame:000000000000D03A                 db  0Bh
.eh_frame:000000000000D03B                 db    0
.eh_frame:000000000000D03C                 db    0
.eh_frame:000000000000D03D                 db    0
.eh_frame:000000000000D03E                 db    0
.eh_frame:000000000000D03F                 db    0
.eh_frame:000000000000D040                 db  4Ch ; L
.eh_frame:000000000000D041                 db    0
.eh_frame:000000000000D042                 db    0
.eh_frame:000000000000D043                 db    0
.eh_frame:000000000000D044                 db  7Ch ; |
.eh_frame:000000000000D045                 db  0Eh
.eh_frame:000000000000D046                 db    0
.eh_frame:000000000000D047                 db    0
.eh_frame:000000000000D048                 db  68h ; h
.eh_frame:000000000000D049                 db 0C1h
.eh_frame:000000000000D04A                 db 0FFh
.eh_frame:000000000000D04B                 db 0FFh
.eh_frame:000000000000D04C                 db  7Dh ; }
.eh_frame:000000000000D04D                 db    0
.eh_frame:000000000000D04E                 db    0
.eh_frame:000000000000D04F                 db    0
.eh_frame:000000000000D050                 db    0
.eh_frame:000000000000D051                 db  42h ; B
.eh_frame:000000000000D052                 db  0Eh
.eh_frame:000000000000D053                 db  10h
.eh_frame:000000000000D054                 db  8Ch
.eh_frame:000000000000D055                 db    2
.eh_frame:000000000000D056                 db  41h ; A
.eh_frame:000000000000D057                 db  0Eh
.eh_frame:000000000000D058                 db  18h
.eh_frame:000000000000D059                 db  86h
.eh_frame:000000000000D05A                 db    3
.eh_frame:000000000000D05B                 db  44h ; D
.eh_frame:000000000000D05C                 db  0Eh
.eh_frame:000000000000D05D                 db  20h
.eh_frame:000000000000D05E                 db  83h
.eh_frame:000000000000D05F                 db    4
.eh_frame:000000000000D060                 db  69h ; i
.eh_frame:000000000000D061                 db  0Ah
.eh_frame:000000000000D062                 db  0Eh
.eh_frame:000000000000D063                 db  18h
.eh_frame:000000000000D064                 db  41h ; A
.eh_frame:000000000000D065                 db  0Eh
.eh_frame:000000000000D066                 db  10h
.eh_frame:000000000000D067                 db  42h ; B
.eh_frame:000000000000D068                 db  0Eh
.eh_frame:000000000000D069                 db    8
.eh_frame:000000000000D06A                 db  45h ; E
.eh_frame:000000000000D06B                 db  0Bh
.eh_frame:000000000000D06C                 db  55h ; U
.eh_frame:000000000000D06D                 db  0Ah
.eh_frame:000000000000D06E                 db  0Eh
.eh_frame:000000000000D06F                 db  18h
.eh_frame:000000000000D070                 db  41h ; A
.eh_frame:000000000000D071                 db  0Eh
.eh_frame:000000000000D072                 db  10h
.eh_frame:000000000000D073                 db  42h ; B
.eh_frame:000000000000D074                 db  0Eh
.eh_frame:000000000000D075                 db    8
.eh_frame:000000000000D076                 db  48h ; H
.eh_frame:000000000000D077                 db  0Bh
.eh_frame:000000000000D078                 db  41h ; A
.eh_frame:000000000000D079                 db  0Ah
.eh_frame:000000000000D07A                 db  0Eh
.eh_frame:000000000000D07B                 db  18h
.eh_frame:000000000000D07C                 db  46h ; F
.eh_frame:000000000000D07D                 db  0Eh
.eh_frame:000000000000D07E                 db  10h
.eh_frame:000000000000D07F                 db  42h ; B
.eh_frame:000000000000D080                 db  0Eh
.eh_frame:000000000000D081                 db    8
.eh_frame:000000000000D082                 db  47h ; G
.eh_frame:000000000000D083                 db  0Bh
.eh_frame:000000000000D084                 db  49h ; I
.eh_frame:000000000000D085                 db  0Eh
.eh_frame:000000000000D086                 db  18h
.eh_frame:000000000000D087                 db  41h ; A
.eh_frame:000000000000D088                 db  0Eh
.eh_frame:000000000000D089                 db  10h
.eh_frame:000000000000D08A                 db  42h ; B
.eh_frame:000000000000D08B                 db  0Eh
.eh_frame:000000000000D08C                 db    8
.eh_frame:000000000000D08D                 db    0
.eh_frame:000000000000D08E                 db    0
.eh_frame:000000000000D08F                 db    0
.eh_frame:000000000000D090                 db  1Ch
.eh_frame:000000000000D091                 db    0
.eh_frame:000000000000D092                 db    0
.eh_frame:000000000000D093                 db    0
.eh_frame:000000000000D094                 db 0CCh
.eh_frame:000000000000D095                 db  0Eh
.eh_frame:000000000000D096                 db    0
.eh_frame:000000000000D097                 db    0
.eh_frame:000000000000D098                 db  98h
.eh_frame:000000000000D099                 db 0C1h
.eh_frame:000000000000D09A                 db 0FFh
.eh_frame:000000000000D09B                 db 0FFh
.eh_frame:000000000000D09C                 db  60h ; `
.eh_frame:000000000000D09D                 db    0
.eh_frame:000000000000D09E                 db    0
.eh_frame:000000000000D09F                 db    0
.eh_frame:000000000000D0A0                 db    0
.eh_frame:000000000000D0A1                 db  44h ; D
.eh_frame:000000000000D0A2                 db  0Eh
.eh_frame:000000000000D0A3                 db  10h
.eh_frame:000000000000D0A4                 db  75h ; u
.eh_frame:000000000000D0A5                 db  0Ah
.eh_frame:000000000000D0A6                 db  0Eh
.eh_frame:000000000000D0A7                 db    8
.eh_frame:000000000000D0A8                 db  47h ; G
.eh_frame:000000000000D0A9                 db  0Bh
.eh_frame:000000000000D0AA                 db  5Fh ; _
.eh_frame:000000000000D0AB                 db  0Eh
.eh_frame:000000000000D0AC                 db    8
.eh_frame:000000000000D0AD                 db    0
.eh_frame:000000000000D0AE                 db    0
.eh_frame:000000000000D0AF                 db    0
.eh_frame:000000000000D0B0                 db  1Ch
.eh_frame:000000000000D0B1                 db    0
.eh_frame:000000000000D0B2                 db    0
.eh_frame:000000000000D0B3                 db    0
.eh_frame:000000000000D0B4                 db 0ECh
.eh_frame:000000000000D0B5                 db  0Eh
.eh_frame:000000000000D0B6                 db    0
.eh_frame:000000000000D0B7                 db    0
.eh_frame:000000000000D0B8                 db 0D8h
.eh_frame:000000000000D0B9                 db 0C1h
.eh_frame:000000000000D0BA                 db 0FFh
.eh_frame:000000000000D0BB                 db 0FFh
.eh_frame:000000000000D0BC                 db  3Ch ; <
.eh_frame:000000000000D0BD                 db    0
.eh_frame:000000000000D0BE                 db    0
.eh_frame:000000000000D0BF                 db    0
.eh_frame:000000000000D0C0                 db    0
.eh_frame:000000000000D0C1                 db  44h ; D
.eh_frame:000000000000D0C2                 db  0Eh
.eh_frame:000000000000D0C3                 db  10h
.eh_frame:000000000000D0C4                 db  61h ; a
.eh_frame:000000000000D0C5                 db  0Ah
.eh_frame:000000000000D0C6                 db  0Eh
.eh_frame:000000000000D0C7                 db    8
.eh_frame:000000000000D0C8                 db  4Bh ; K
.eh_frame:000000000000D0C9                 db  0Bh
.eh_frame:000000000000D0CA                 db  4Bh ; K
.eh_frame:000000000000D0CB                 db  0Eh
.eh_frame:000000000000D0CC                 db    8
.eh_frame:000000000000D0CD                 db    0
.eh_frame:000000000000D0CE                 db    0
.eh_frame:000000000000D0CF                 db    0
.eh_frame:000000000000D0D0                 db  34h ; 4
.eh_frame:000000000000D0D1                 db    0
.eh_frame:000000000000D0D2                 db    0
.eh_frame:000000000000D0D3                 db    0
.eh_frame:000000000000D0D4                 db  0Ch
.eh_frame:000000000000D0D5                 db  0Fh
.eh_frame:000000000000D0D6                 db    0
.eh_frame:000000000000D0D7                 db    0
.eh_frame:000000000000D0D8                 db 0F8h
.eh_frame:000000000000D0D9                 db 0C1h
.eh_frame:000000000000D0DA                 db 0FFh
.eh_frame:000000000000D0DB                 db 0FFh
.eh_frame:000000000000D0DC                 db  7Bh ; {
.eh_frame:000000000000D0DD                 db    0
.eh_frame:000000000000D0DE                 db    0
.eh_frame:000000000000D0DF                 db    0
.eh_frame:000000000000D0E0                 db    0
.eh_frame:000000000000D0E1                 db  42h ; B
.eh_frame:000000000000D0E2                 db  0Eh
.eh_frame:000000000000D0E3                 db  10h
.eh_frame:000000000000D0E4                 db  8Ch
.eh_frame:000000000000D0E5                 db    2
.eh_frame:000000000000D0E6                 db  41h ; A
.eh_frame:000000000000D0E7                 db  0Eh
.eh_frame:000000000000D0E8                 db  18h
.eh_frame:000000000000D0E9                 db  86h
.eh_frame:000000000000D0EA                 db    3
.eh_frame:000000000000D0EB                 db  41h ; A
.eh_frame:000000000000D0EC                 db  0Eh
.eh_frame:000000000000D0ED                 db  20h
.eh_frame:000000000000D0EE                 db  83h
.eh_frame:000000000000D0EF                 db    4
.eh_frame:000000000000D0F0                 db  7Dh ; }
.eh_frame:000000000000D0F1                 db  0Ah
.eh_frame:000000000000D0F2                 db  0Eh
.eh_frame:000000000000D0F3                 db  18h
.eh_frame:000000000000D0F4                 db  41h ; A
.eh_frame:000000000000D0F5                 db  0Eh
.eh_frame:000000000000D0F6                 db  10h
.eh_frame:000000000000D0F7                 db  42h ; B
.eh_frame:000000000000D0F8                 db  0Eh
.eh_frame:000000000000D0F9                 db    8
.eh_frame:000000000000D0FA                 db  44h ; D
.eh_frame:000000000000D0FB                 db  0Bh
.eh_frame:000000000000D0FC                 db  60h ; `
.eh_frame:000000000000D0FD                 db  0Ah
.eh_frame:000000000000D0FE                 db  0Eh
.eh_frame:000000000000D0FF                 db  18h
.eh_frame:000000000000D100                 db  41h ; A
.eh_frame:000000000000D101                 db  0Eh
.eh_frame:000000000000D102                 db  10h
.eh_frame:000000000000D103                 db  42h ; B
.eh_frame:000000000000D104                 db  0Eh
.eh_frame:000000000000D105                 db    8
.eh_frame:000000000000D106                 db  45h ; E
.eh_frame:000000000000D107                 db  0Bh
.eh_frame:000000000000D108                 db  1Ch
.eh_frame:000000000000D109                 db    0
.eh_frame:000000000000D10A                 db    0
.eh_frame:000000000000D10B                 db    0
.eh_frame:000000000000D10C                 db  44h ; D
.eh_frame:000000000000D10D                 db  0Fh
.eh_frame:000000000000D10E                 db    0
.eh_frame:000000000000D10F                 db    0
.eh_frame:000000000000D110                 db  40h ; @
.eh_frame:000000000000D111                 db 0C2h
.eh_frame:000000000000D112                 db 0FFh
.eh_frame:000000000000D113                 db 0FFh
.eh_frame:000000000000D114                 db  40h ; @
.eh_frame:000000000000D115                 db    0
.eh_frame:000000000000D116                 db    0
.eh_frame:000000000000D117                 db    0
.eh_frame:000000000000D118                 db    0
.eh_frame:000000000000D119                 db  44h ; D
.eh_frame:000000000000D11A                 db  0Eh
.eh_frame:000000000000D11B                 db  10h
.eh_frame:000000000000D11C                 db  83h
.eh_frame:000000000000D11D                 db    2
.eh_frame:000000000000D11E                 db  5Ah ; Z
.eh_frame:000000000000D11F                 db  0Ah
.eh_frame:000000000000D120                 db  0Eh
.eh_frame:000000000000D121                 db    8
.eh_frame:000000000000D122                 db  4Ah ; J
.eh_frame:000000000000D123                 db  0Bh
.eh_frame:000000000000D124                 db  53h ; S
.eh_frame:000000000000D125                 db  0Eh
.eh_frame:000000000000D126                 db    8
.eh_frame:000000000000D127                 db    0
.eh_frame:000000000000D128                 db  2Ch ; ,
.eh_frame:000000000000D129                 db    0
.eh_frame:000000000000D12A                 db    0
.eh_frame:000000000000D12B                 db    0
.eh_frame:000000000000D12C                 db  64h ; d
.eh_frame:000000000000D12D                 db  0Fh
.eh_frame:000000000000D12E                 db    0
.eh_frame:000000000000D12F                 db    0
.eh_frame:000000000000D130                 db  60h ; `
.eh_frame:000000000000D131                 db 0C2h
.eh_frame:000000000000D132                 db 0FFh
.eh_frame:000000000000D133                 db 0FFh
.eh_frame:000000000000D134                 db  57h ; W
.eh_frame:000000000000D135                 db    0
.eh_frame:000000000000D136                 db    0
.eh_frame:000000000000D137                 db    0
.eh_frame:000000000000D138                 db    0
.eh_frame:000000000000D139                 db  63h ; c
.eh_frame:000000000000D13A                 db  0Eh
.eh_frame:000000000000D13B                 db  10h
.eh_frame:000000000000D13C                 db  8Ch
.eh_frame:000000000000D13D                 db    2
.eh_frame:000000000000D13E                 db  41h ; A
.eh_frame:000000000000D13F                 db  0Eh
.eh_frame:000000000000D140                 db  18h
.eh_frame:000000000000D141                 db  86h
.eh_frame:000000000000D142                 db    3
.eh_frame:000000000000D143                 db  44h ; D
.eh_frame:000000000000D144                 db  0Eh
.eh_frame:000000000000D145                 db  20h
.eh_frame:000000000000D146                 db  83h
.eh_frame:000000000000D147                 db    4
.eh_frame:000000000000D148                 db  6Bh ; k
.eh_frame:000000000000D149                 db  0Eh
.eh_frame:000000000000D14A                 db  18h
.eh_frame:000000000000D14B                 db  41h ; A
.eh_frame:000000000000D14C                 db  0Eh
.eh_frame:000000000000D14D                 db  10h
.eh_frame:000000000000D14E                 db  42h ; B
.eh_frame:000000000000D14F                 db  0Eh
.eh_frame:000000000000D150                 db    8
.eh_frame:000000000000D151                 db    0
.eh_frame:000000000000D152                 db    0
.eh_frame:000000000000D153                 db    0
.eh_frame:000000000000D154                 db    0
.eh_frame:000000000000D155                 db    0
.eh_frame:000000000000D156                 db    0
.eh_frame:000000000000D157                 db    0
.eh_frame:000000000000D158                 db  44h ; D
.eh_frame:000000000000D159                 db    0
.eh_frame:000000000000D15A                 db    0
.eh_frame:000000000000D15B                 db    0
.eh_frame:000000000000D15C                 db  94h
.eh_frame:000000000000D15D                 db  0Fh
.eh_frame:000000000000D15E                 db    0
.eh_frame:000000000000D15F                 db    0
.eh_frame:000000000000D160                 db  90h
.eh_frame:000000000000D161                 db 0C2h
.eh_frame:000000000000D162                 db 0FFh
.eh_frame:000000000000D163                 db 0FFh
.eh_frame:000000000000D164                 db  65h ; e
.eh_frame:000000000000D165                 db    0
.eh_frame:000000000000D166                 db    0
.eh_frame:000000000000D167                 db    0
.eh_frame:000000000000D168                 db    0
.eh_frame:000000000000D169                 db  42h ; B
.eh_frame:000000000000D16A                 db  0Eh
.eh_frame:000000000000D16B                 db  10h
.eh_frame:000000000000D16C                 db  8Fh
.eh_frame:000000000000D16D                 db    2
.eh_frame:000000000000D16E                 db  42h ; B
.eh_frame:000000000000D16F                 db  0Eh
.eh_frame:000000000000D170                 db  18h
.eh_frame:000000000000D171                 db  8Eh
.eh_frame:000000000000D172                 db    3
.eh_frame:000000000000D173                 db  45h ; E
.eh_frame:000000000000D174                 db  0Eh
.eh_frame:000000000000D175                 db  20h
.eh_frame:000000000000D176                 db  8Dh
.eh_frame:000000000000D177                 db    4
.eh_frame:000000000000D178                 db  42h ; B
.eh_frame:000000000000D179                 db  0Eh
.eh_frame:000000000000D17A                 db  28h ; (
.eh_frame:000000000000D17B                 db  8Ch
.eh_frame:000000000000D17C                 db    5
.eh_frame:000000000000D17D                 db  48h ; H
.eh_frame:000000000000D17E                 db  0Eh
.eh_frame:000000000000D17F                 db  30h ; 0
.eh_frame:000000000000D180                 db  86h
.eh_frame:000000000000D181                 db    6
.eh_frame:000000000000D182                 db  48h ; H
.eh_frame:000000000000D183                 db  0Eh
.eh_frame:000000000000D184                 db  38h ; 8
.eh_frame:000000000000D185                 db  83h
.eh_frame:000000000000D186                 db    7
.eh_frame:000000000000D187                 db  4Dh ; M
.eh_frame:000000000000D188                 db  0Eh
.eh_frame:000000000000D189                 db  40h ; @
.eh_frame:000000000000D18A                 db  72h ; r
.eh_frame:000000000000D18B                 db  0Eh
.eh_frame:000000000000D18C                 db  38h ; 8
.eh_frame:000000000000D18D                 db  41h ; A
.eh_frame:000000000000D18E                 db  0Eh
.eh_frame:000000000000D18F                 db  30h ; 0
.eh_frame:000000000000D190                 db  41h ; A
.eh_frame:000000000000D191                 db  0Eh
.eh_frame:000000000000D192                 db  28h ; (
.eh_frame:000000000000D193                 db  42h ; B
.eh_frame:000000000000D194                 db  0Eh
.eh_frame:000000000000D195                 db  20h
.eh_frame:000000000000D196                 db  42h ; B
.eh_frame:000000000000D197                 db  0Eh
.eh_frame:000000000000D198                 db  18h
.eh_frame:000000000000D199                 db  42h ; B
.eh_frame:000000000000D19A                 db  0Eh
.eh_frame:000000000000D19B                 db  10h
.eh_frame:000000000000D19C                 db  42h ; B
.eh_frame:000000000000D19D                 db  0Eh
.eh_frame:000000000000D19E                 db    8
.eh_frame:000000000000D19F                 db    0
.eh_frame:000000000000D1A0                 db  14h
.eh_frame:000000000000D1A1                 db    0
.eh_frame:000000000000D1A2                 db    0
.eh_frame:000000000000D1A3                 db    0
.eh_frame:000000000000D1A4                 db 0DCh
.eh_frame:000000000000D1A5                 db  0Fh
.eh_frame:000000000000D1A6                 db    0
.eh_frame:000000000000D1A7                 db    0
.eh_frame:000000000000D1A8                 db 0B8h
.eh_frame:000000000000D1A9                 db 0C2h
.eh_frame:000000000000D1AA                 db 0FFh
.eh_frame:000000000000D1AB                 db 0FFh
.eh_frame:000000000000D1AC                 db    2
.eh_frame:000000000000D1AD                 db    0
.eh_frame:000000000000D1AE                 db    0
.eh_frame:000000000000D1AF                 db    0
.eh_frame:000000000000D1B0                 db    0
.eh_frame:000000000000D1B1                 db    0
.eh_frame:000000000000D1B2                 db    0
.eh_frame:000000000000D1B3                 db    0
.eh_frame:000000000000D1B4                 db    0
.eh_frame:000000000000D1B5                 db    0
.eh_frame:000000000000D1B6                 db    0
.eh_frame:000000000000D1B7                 db    0
.eh_frame:000000000000D1B8                 db  10h
.eh_frame:000000000000D1B9                 db    0
.eh_frame:000000000000D1BA                 db    0
.eh_frame:000000000000D1BB                 db    0
.eh_frame:000000000000D1BC                 db 0F4h
.eh_frame:000000000000D1BD                 db  0Fh
.eh_frame:000000000000D1BE                 db    0
.eh_frame:000000000000D1BF                 db    0
.eh_frame:000000000000D1C0                 db 0B0h
.eh_frame:000000000000D1C1                 db 0C2h
.eh_frame:000000000000D1C2                 db 0FFh
.eh_frame:000000000000D1C3                 db 0FFh
.eh_frame:000000000000D1C4                 db  0Eh
.eh_frame:000000000000D1C5                 db    0
.eh_frame:000000000000D1C6                 db    0
.eh_frame:000000000000D1C7                 db    0
.eh_frame:000000000000D1C8                 db    0
.eh_frame:000000000000D1C9                 db    0
.eh_frame:000000000000D1CA                 db    0
.eh_frame:000000000000D1CB                 db    0
.eh_frame:000000000000D1CC __FRAME_END__   db    0
.eh_frame:000000000000D1CD                 db    0
.eh_frame:000000000000D1CE                 db    0
.eh_frame:000000000000D1CF                 db    0
.eh_frame:000000000000D1CF _eh_frame       ends
.eh_frame:000000000000D1CF
.init_array:000000000020D830 ; ELF Initialization Function Table
.init_array:000000000020D830 ; ===========================================================================
.init_array:000000000020D830
.init_array:000000000020D830 ; Segment type: Pure data
.init_array:000000000020D830 ; Segment permissions: Read/Write
.init_array:000000000020D830 _init_array     segment qword public 'DATA' use64
.init_array:000000000020D830                 assume cs:_init_array
.init_array:000000000020D830                 ;org 20D830h
.init_array:000000000020D830 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020D830                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020D830                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020D830 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020D830
.fini_array:000000000020D838 ; ELF Termination Function Table
.fini_array:000000000020D838 ; ===========================================================================
.fini_array:000000000020D838
.fini_array:000000000020D838 ; Segment type: Pure data
.fini_array:000000000020D838 ; Segment permissions: Read/Write
.fini_array:000000000020D838 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020D838                 assume cs:_fini_array
.fini_array:000000000020D838                 ;org 20D838h
.fini_array:000000000020D838 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020D838                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020D838 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020D838
.data.rel.ro:000000000020D840 ; ===========================================================================
.data.rel.ro:000000000020D840
.data.rel.ro:000000000020D840 ; Segment type: Pure data
.data.rel.ro:000000000020D840 ; Segment permissions: Read/Write
.data.rel.ro:000000000020D840 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020D840                 assume cs:_data_rel_ro
.data.rel.ro:000000000020D840                 ;org 20D840h
.data.rel.ro:000000000020D840 ; struct option longopts
.data.rel.ro:000000000020D840 longopts        dq offset aFrom+2       ; name
.data.rel.ro:000000000020D840                                         ; DATA XREF: main+88↑o
.data.rel.ro:000000000020D840                 dd 1                    ; has_arg ; "from"
.data.rel.ro:000000000020D840                 db 4 dup(0)
.data.rel.ro:000000000020D840                 dq 0                    ; flag
.data.rel.ro:000000000020D840                 dd 80h                  ; val
.data.rel.ro:000000000020D840                 db 4 dup(0)
.data.rel.ro:000000000020D860                 dq offset aFromUnit     ; "from-unit"
.data.rel.ro:000000000020D868                 db    1
.data.rel.ro:000000000020D869                 db    0
.data.rel.ro:000000000020D86A                 db    0
.data.rel.ro:000000000020D86B                 db    0
.data.rel.ro:000000000020D86C                 db    0
.data.rel.ro:000000000020D86D                 db    0
.data.rel.ro:000000000020D86E                 db    0
.data.rel.ro:000000000020D86F                 db    0
.data.rel.ro:000000000020D870                 db    0
.data.rel.ro:000000000020D871                 db    0
.data.rel.ro:000000000020D872                 db    0
.data.rel.ro:000000000020D873                 db    0
.data.rel.ro:000000000020D874                 db    0
.data.rel.ro:000000000020D875                 db    0
.data.rel.ro:000000000020D876                 db    0
.data.rel.ro:000000000020D877                 db    0
.data.rel.ro:000000000020D878                 db  81h
.data.rel.ro:000000000020D879                 db    0
.data.rel.ro:000000000020D87A                 db    0
.data.rel.ro:000000000020D87B                 db    0
.data.rel.ro:000000000020D87C                 db    0
.data.rel.ro:000000000020D87D                 db    0
.data.rel.ro:000000000020D87E                 db    0
.data.rel.ro:000000000020D87F                 db    0
.data.rel.ro:000000000020D880                 dq offset aTo+2         ; "to"
.data.rel.ro:000000000020D888                 db    1
.data.rel.ro:000000000020D889                 db    0
.data.rel.ro:000000000020D88A                 db    0
.data.rel.ro:000000000020D88B                 db    0
.data.rel.ro:000000000020D88C                 db    0
.data.rel.ro:000000000020D88D                 db    0
.data.rel.ro:000000000020D88E                 db    0
.data.rel.ro:000000000020D88F                 db    0
.data.rel.ro:000000000020D890                 db    0
.data.rel.ro:000000000020D891                 db    0
.data.rel.ro:000000000020D892                 db    0
.data.rel.ro:000000000020D893                 db    0
.data.rel.ro:000000000020D894                 db    0
.data.rel.ro:000000000020D895                 db    0
.data.rel.ro:000000000020D896                 db    0
.data.rel.ro:000000000020D897                 db    0
.data.rel.ro:000000000020D898                 db  82h
.data.rel.ro:000000000020D899                 db    0
.data.rel.ro:000000000020D89A                 db    0
.data.rel.ro:000000000020D89B                 db    0
.data.rel.ro:000000000020D89C                 db    0
.data.rel.ro:000000000020D89D                 db    0
.data.rel.ro:000000000020D89E                 db    0
.data.rel.ro:000000000020D89F                 db    0
.data.rel.ro:000000000020D8A0                 dq offset aToUnit       ; "to-unit"
.data.rel.ro:000000000020D8A8                 db    1
.data.rel.ro:000000000020D8A9                 db    0
.data.rel.ro:000000000020D8AA                 db    0
.data.rel.ro:000000000020D8AB                 db    0
.data.rel.ro:000000000020D8AC                 db    0
.data.rel.ro:000000000020D8AD                 db    0
.data.rel.ro:000000000020D8AE                 db    0
.data.rel.ro:000000000020D8AF                 db    0
.data.rel.ro:000000000020D8B0                 db    0
.data.rel.ro:000000000020D8B1                 db    0
.data.rel.ro:000000000020D8B2                 db    0
.data.rel.ro:000000000020D8B3                 db    0
.data.rel.ro:000000000020D8B4                 db    0
.data.rel.ro:000000000020D8B5                 db    0
.data.rel.ro:000000000020D8B6                 db    0
.data.rel.ro:000000000020D8B7                 db    0
.data.rel.ro:000000000020D8B8                 db  83h
.data.rel.ro:000000000020D8B9                 db    0
.data.rel.ro:000000000020D8BA                 db    0
.data.rel.ro:000000000020D8BB                 db    0
.data.rel.ro:000000000020D8BC                 db    0
.data.rel.ro:000000000020D8BD                 db    0
.data.rel.ro:000000000020D8BE                 db    0
.data.rel.ro:000000000020D8BF                 db    0
.data.rel.ro:000000000020D8C0                 dq offset aRound+2      ; "round"
.data.rel.ro:000000000020D8C8                 db    1
.data.rel.ro:000000000020D8C9                 db    0
.data.rel.ro:000000000020D8CA                 db    0
.data.rel.ro:000000000020D8CB                 db    0
.data.rel.ro:000000000020D8CC                 db    0
.data.rel.ro:000000000020D8CD                 db    0
.data.rel.ro:000000000020D8CE                 db    0
.data.rel.ro:000000000020D8CF                 db    0
.data.rel.ro:000000000020D8D0                 db    0
.data.rel.ro:000000000020D8D1                 db    0
.data.rel.ro:000000000020D8D2                 db    0
.data.rel.ro:000000000020D8D3                 db    0
.data.rel.ro:000000000020D8D4                 db    0
.data.rel.ro:000000000020D8D5                 db    0
.data.rel.ro:000000000020D8D6                 db    0
.data.rel.ro:000000000020D8D7                 db    0
.data.rel.ro:000000000020D8D8                 db  84h
.data.rel.ro:000000000020D8D9                 db    0
.data.rel.ro:000000000020D8DA                 db    0
.data.rel.ro:000000000020D8DB                 db    0
.data.rel.ro:000000000020D8DC                 db    0
.data.rel.ro:000000000020D8DD                 db    0
.data.rel.ro:000000000020D8DE                 db    0
.data.rel.ro:000000000020D8DF                 db    0
.data.rel.ro:000000000020D8E0                 dq offset aPadding      ; "padding"
.data.rel.ro:000000000020D8E8                 db    1
.data.rel.ro:000000000020D8E9                 db    0
.data.rel.ro:000000000020D8EA                 db    0
.data.rel.ro:000000000020D8EB                 db    0
.data.rel.ro:000000000020D8EC                 db    0
.data.rel.ro:000000000020D8ED                 db    0
.data.rel.ro:000000000020D8EE                 db    0
.data.rel.ro:000000000020D8EF                 db    0
.data.rel.ro:000000000020D8F0                 db    0
.data.rel.ro:000000000020D8F1                 db    0
.data.rel.ro:000000000020D8F2                 db    0
.data.rel.ro:000000000020D8F3                 db    0
.data.rel.ro:000000000020D8F4                 db    0
.data.rel.ro:000000000020D8F5                 db    0
.data.rel.ro:000000000020D8F6                 db    0
.data.rel.ro:000000000020D8F7                 db    0
.data.rel.ro:000000000020D8F8                 db  87h
.data.rel.ro:000000000020D8F9                 db    0
.data.rel.ro:000000000020D8FA                 db    0
.data.rel.ro:000000000020D8FB                 db    0
.data.rel.ro:000000000020D8FC                 db    0
.data.rel.ro:000000000020D8FD                 db    0
.data.rel.ro:000000000020D8FE                 db    0
.data.rel.ro:000000000020D8FF                 db    0
.data.rel.ro:000000000020D900                 dq offset aSuffix       ; "suffix"
.data.rel.ro:000000000020D908                 db    1
.data.rel.ro:000000000020D909                 db    0
.data.rel.ro:000000000020D90A                 db    0
.data.rel.ro:000000000020D90B                 db    0
.data.rel.ro:000000000020D90C                 db    0
.data.rel.ro:000000000020D90D                 db    0
.data.rel.ro:000000000020D90E                 db    0
.data.rel.ro:000000000020D90F                 db    0
.data.rel.ro:000000000020D910                 db    0
.data.rel.ro:000000000020D911                 db    0
.data.rel.ro:000000000020D912                 db    0
.data.rel.ro:000000000020D913                 db    0
.data.rel.ro:000000000020D914                 db    0
.data.rel.ro:000000000020D915                 db    0
.data.rel.ro:000000000020D916                 db    0
.data.rel.ro:000000000020D917                 db    0
.data.rel.ro:000000000020D918                 db  85h
.data.rel.ro:000000000020D919                 db    0
.data.rel.ro:000000000020D91A                 db    0
.data.rel.ro:000000000020D91B                 db    0
.data.rel.ro:000000000020D91C                 db    0
.data.rel.ro:000000000020D91D                 db    0
.data.rel.ro:000000000020D91E                 db    0
.data.rel.ro:000000000020D91F                 db    0
.data.rel.ro:000000000020D920                 dq offset aGrouping     ; "grouping"
.data.rel.ro:000000000020D928                 db    0
.data.rel.ro:000000000020D929                 db    0
.data.rel.ro:000000000020D92A                 db    0
.data.rel.ro:000000000020D92B                 db    0
.data.rel.ro:000000000020D92C                 db    0
.data.rel.ro:000000000020D92D                 db    0
.data.rel.ro:000000000020D92E                 db    0
.data.rel.ro:000000000020D92F                 db    0
.data.rel.ro:000000000020D930                 db    0
.data.rel.ro:000000000020D931                 db    0
.data.rel.ro:000000000020D932                 db    0
.data.rel.ro:000000000020D933                 db    0
.data.rel.ro:000000000020D934                 db    0
.data.rel.ro:000000000020D935                 db    0
.data.rel.ro:000000000020D936                 db    0
.data.rel.ro:000000000020D937                 db    0
.data.rel.ro:000000000020D938                 db  86h
.data.rel.ro:000000000020D939                 db    0
.data.rel.ro:000000000020D93A                 db    0
.data.rel.ro:000000000020D93B                 db    0
.data.rel.ro:000000000020D93C                 db    0
.data.rel.ro:000000000020D93D                 db    0
.data.rel.ro:000000000020D93E                 db    0
.data.rel.ro:000000000020D93F                 db    0
.data.rel.ro:000000000020D940                 dq offset aDelimiter    ; "delimiter"
.data.rel.ro:000000000020D948                 db    1
.data.rel.ro:000000000020D949                 db    0
.data.rel.ro:000000000020D94A                 db    0
.data.rel.ro:000000000020D94B                 db    0
.data.rel.ro:000000000020D94C                 db    0
.data.rel.ro:000000000020D94D                 db    0
.data.rel.ro:000000000020D94E                 db    0
.data.rel.ro:000000000020D94F                 db    0
.data.rel.ro:000000000020D950                 db    0
.data.rel.ro:000000000020D951                 db    0
.data.rel.ro:000000000020D952                 db    0
.data.rel.ro:000000000020D953                 db    0
.data.rel.ro:000000000020D954                 db    0
.data.rel.ro:000000000020D955                 db    0
.data.rel.ro:000000000020D956                 db    0
.data.rel.ro:000000000020D957                 db    0
.data.rel.ro:000000000020D958                 db  64h ; d
.data.rel.ro:000000000020D959                 db    0
.data.rel.ro:000000000020D95A                 db    0
.data.rel.ro:000000000020D95B                 db    0
.data.rel.ro:000000000020D95C                 db    0
.data.rel.ro:000000000020D95D                 db    0
.data.rel.ro:000000000020D95E                 db    0
.data.rel.ro:000000000020D95F                 db    0
.data.rel.ro:000000000020D960                 dq offset aField        ; "field"
.data.rel.ro:000000000020D968                 db    1
.data.rel.ro:000000000020D969                 db    0
.data.rel.ro:000000000020D96A                 db    0
.data.rel.ro:000000000020D96B                 db    0
.data.rel.ro:000000000020D96C                 db    0
.data.rel.ro:000000000020D96D                 db    0
.data.rel.ro:000000000020D96E                 db    0
.data.rel.ro:000000000020D96F                 db    0
.data.rel.ro:000000000020D970                 db    0
.data.rel.ro:000000000020D971                 db    0
.data.rel.ro:000000000020D972                 db    0
.data.rel.ro:000000000020D973                 db    0
.data.rel.ro:000000000020D974                 db    0
.data.rel.ro:000000000020D975                 db    0
.data.rel.ro:000000000020D976                 db    0
.data.rel.ro:000000000020D977                 db    0
.data.rel.ro:000000000020D978                 db  88h
.data.rel.ro:000000000020D979                 db    0
.data.rel.ro:000000000020D97A                 db    0
.data.rel.ro:000000000020D97B                 db    0
.data.rel.ro:000000000020D97C                 db    0
.data.rel.ro:000000000020D97D                 db    0
.data.rel.ro:000000000020D97E                 db    0
.data.rel.ro:000000000020D97F                 db    0
.data.rel.ro:000000000020D980                 dq offset aDebug+1      ; "debug"
.data.rel.ro:000000000020D988                 db    0
.data.rel.ro:000000000020D989                 db    0
.data.rel.ro:000000000020D98A                 db    0
.data.rel.ro:000000000020D98B                 db    0
.data.rel.ro:000000000020D98C                 db    0
.data.rel.ro:000000000020D98D                 db    0
.data.rel.ro:000000000020D98E                 db    0
.data.rel.ro:000000000020D98F                 db    0
.data.rel.ro:000000000020D990                 db    0
.data.rel.ro:000000000020D991                 db    0
.data.rel.ro:000000000020D992                 db    0
.data.rel.ro:000000000020D993                 db    0
.data.rel.ro:000000000020D994                 db    0
.data.rel.ro:000000000020D995                 db    0
.data.rel.ro:000000000020D996                 db    0
.data.rel.ro:000000000020D997                 db    0
.data.rel.ro:000000000020D998                 db  89h
.data.rel.ro:000000000020D999                 db    0
.data.rel.ro:000000000020D99A                 db    0
.data.rel.ro:000000000020D99B                 db    0
.data.rel.ro:000000000020D99C                 db    0
.data.rel.ro:000000000020D99D                 db    0
.data.rel.ro:000000000020D99E                 db    0
.data.rel.ro:000000000020D99F                 db    0
.data.rel.ro:000000000020D9A0                 dq offset aDebug        ; "-debug"
.data.rel.ro:000000000020D9A8                 db    0
.data.rel.ro:000000000020D9A9                 db    0
.data.rel.ro:000000000020D9AA                 db    0
.data.rel.ro:000000000020D9AB                 db    0
.data.rel.ro:000000000020D9AC                 db    0
.data.rel.ro:000000000020D9AD                 db    0
.data.rel.ro:000000000020D9AE                 db    0
.data.rel.ro:000000000020D9AF                 db    0
.data.rel.ro:000000000020D9B0                 db    0
.data.rel.ro:000000000020D9B1                 db    0
.data.rel.ro:000000000020D9B2                 db    0
.data.rel.ro:000000000020D9B3                 db    0
.data.rel.ro:000000000020D9B4                 db    0
.data.rel.ro:000000000020D9B5                 db    0
.data.rel.ro:000000000020D9B6                 db    0
.data.rel.ro:000000000020D9B7                 db    0
.data.rel.ro:000000000020D9B8                 db  8Ah
.data.rel.ro:000000000020D9B9                 db    0
.data.rel.ro:000000000020D9BA                 db    0
.data.rel.ro:000000000020D9BB                 db    0
.data.rel.ro:000000000020D9BC                 db    0
.data.rel.ro:000000000020D9BD                 db    0
.data.rel.ro:000000000020D9BE                 db    0
.data.rel.ro:000000000020D9BF                 db    0
.data.rel.ro:000000000020D9C0                 dq offset aHeader       ; "header"
.data.rel.ro:000000000020D9C8                 db    2
.data.rel.ro:000000000020D9C9                 db    0
.data.rel.ro:000000000020D9CA                 db    0
.data.rel.ro:000000000020D9CB                 db    0
.data.rel.ro:000000000020D9CC                 db    0
.data.rel.ro:000000000020D9CD                 db    0
.data.rel.ro:000000000020D9CE                 db    0
.data.rel.ro:000000000020D9CF                 db    0
.data.rel.ro:000000000020D9D0                 db    0
.data.rel.ro:000000000020D9D1                 db    0
.data.rel.ro:000000000020D9D2                 db    0
.data.rel.ro:000000000020D9D3                 db    0
.data.rel.ro:000000000020D9D4                 db    0
.data.rel.ro:000000000020D9D5                 db    0
.data.rel.ro:000000000020D9D6                 db    0
.data.rel.ro:000000000020D9D7                 db    0
.data.rel.ro:000000000020D9D8                 db  8Bh
.data.rel.ro:000000000020D9D9                 db    0
.data.rel.ro:000000000020D9DA                 db    0
.data.rel.ro:000000000020D9DB                 db    0
.data.rel.ro:000000000020D9DC                 db    0
.data.rel.ro:000000000020D9DD                 db    0
.data.rel.ro:000000000020D9DE                 db    0
.data.rel.ro:000000000020D9DF                 db    0
.data.rel.ro:000000000020D9E0                 dq offset aFormat       ; "format"
.data.rel.ro:000000000020D9E8                 db    1
.data.rel.ro:000000000020D9E9                 db    0
.data.rel.ro:000000000020D9EA                 db    0
.data.rel.ro:000000000020D9EB                 db    0
.data.rel.ro:000000000020D9EC                 db    0
.data.rel.ro:000000000020D9ED                 db    0
.data.rel.ro:000000000020D9EE                 db    0
.data.rel.ro:000000000020D9EF                 db    0
.data.rel.ro:000000000020D9F0                 db    0
.data.rel.ro:000000000020D9F1                 db    0
.data.rel.ro:000000000020D9F2                 db    0
.data.rel.ro:000000000020D9F3                 db    0
.data.rel.ro:000000000020D9F4                 db    0
.data.rel.ro:000000000020D9F5                 db    0
.data.rel.ro:000000000020D9F6                 db    0
.data.rel.ro:000000000020D9F7                 db    0
.data.rel.ro:000000000020D9F8                 db  8Ch
.data.rel.ro:000000000020D9F9                 db    0
.data.rel.ro:000000000020D9FA                 db    0
.data.rel.ro:000000000020D9FB                 db    0
.data.rel.ro:000000000020D9FC                 db    0
.data.rel.ro:000000000020D9FD                 db    0
.data.rel.ro:000000000020D9FE                 db    0
.data.rel.ro:000000000020D9FF                 db    0
.data.rel.ro:000000000020DA00                 dq offset aInvalid+2    ; "invalid"
.data.rel.ro:000000000020DA08                 db    1
.data.rel.ro:000000000020DA09                 db    0
.data.rel.ro:000000000020DA0A                 db    0
.data.rel.ro:000000000020DA0B                 db    0
.data.rel.ro:000000000020DA0C                 db    0
.data.rel.ro:000000000020DA0D                 db    0
.data.rel.ro:000000000020DA0E                 db    0
.data.rel.ro:000000000020DA0F                 db    0
.data.rel.ro:000000000020DA10                 db    0
.data.rel.ro:000000000020DA11                 db    0
.data.rel.ro:000000000020DA12                 db    0
.data.rel.ro:000000000020DA13                 db    0
.data.rel.ro:000000000020DA14                 db    0
.data.rel.ro:000000000020DA15                 db    0
.data.rel.ro:000000000020DA16                 db    0
.data.rel.ro:000000000020DA17                 db    0
.data.rel.ro:000000000020DA18                 db  8Dh
.data.rel.ro:000000000020DA19                 db    0
.data.rel.ro:000000000020DA1A                 db    0
.data.rel.ro:000000000020DA1B                 db    0
.data.rel.ro:000000000020DA1C                 db    0
.data.rel.ro:000000000020DA1D                 db    0
.data.rel.ro:000000000020DA1E                 db    0
.data.rel.ro:000000000020DA1F                 db    0
.data.rel.ro:000000000020DA20                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:000000000020DA28                 db    0
.data.rel.ro:000000000020DA29                 db    0
.data.rel.ro:000000000020DA2A                 db    0
.data.rel.ro:000000000020DA2B                 db    0
.data.rel.ro:000000000020DA2C                 db    0
.data.rel.ro:000000000020DA2D                 db    0
.data.rel.ro:000000000020DA2E                 db    0
.data.rel.ro:000000000020DA2F                 db    0
.data.rel.ro:000000000020DA30                 db    0
.data.rel.ro:000000000020DA31                 db    0
.data.rel.ro:000000000020DA32                 db    0
.data.rel.ro:000000000020DA33                 db    0
.data.rel.ro:000000000020DA34                 db    0
.data.rel.ro:000000000020DA35                 db    0
.data.rel.ro:000000000020DA36                 db    0
.data.rel.ro:000000000020DA37                 db    0
.data.rel.ro:000000000020DA38                 db  7Ah ; z
.data.rel.ro:000000000020DA39                 db    0
.data.rel.ro:000000000020DA3A                 db    0
.data.rel.ro:000000000020DA3B                 db    0
.data.rel.ro:000000000020DA3C                 db    0
.data.rel.ro:000000000020DA3D                 db    0
.data.rel.ro:000000000020DA3E                 db    0
.data.rel.ro:000000000020DA3F                 db    0
.data.rel.ro:000000000020DA40                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020DA48                 db    0
.data.rel.ro:000000000020DA49                 db    0
.data.rel.ro:000000000020DA4A                 db    0
.data.rel.ro:000000000020DA4B                 db    0
.data.rel.ro:000000000020DA4C                 db    0
.data.rel.ro:000000000020DA4D                 db    0
.data.rel.ro:000000000020DA4E                 db    0
.data.rel.ro:000000000020DA4F                 db    0
.data.rel.ro:000000000020DA50                 db    0
.data.rel.ro:000000000020DA51                 db    0
.data.rel.ro:000000000020DA52                 db    0
.data.rel.ro:000000000020DA53                 db    0
.data.rel.ro:000000000020DA54                 db    0
.data.rel.ro:000000000020DA55                 db    0
.data.rel.ro:000000000020DA56                 db    0
.data.rel.ro:000000000020DA57                 db    0
.data.rel.ro:000000000020DA58                 db  7Eh ; ~
.data.rel.ro:000000000020DA59                 db 0FFh
.data.rel.ro:000000000020DA5A                 db 0FFh
.data.rel.ro:000000000020DA5B                 db 0FFh
.data.rel.ro:000000000020DA5C                 db    0
.data.rel.ro:000000000020DA5D                 db    0
.data.rel.ro:000000000020DA5E                 db    0
.data.rel.ro:000000000020DA5F                 db    0
.data.rel.ro:000000000020DA60                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020DA68                 db    0
.data.rel.ro:000000000020DA69                 db    0
.data.rel.ro:000000000020DA6A                 db    0
.data.rel.ro:000000000020DA6B                 db    0
.data.rel.ro:000000000020DA6C                 db    0
.data.rel.ro:000000000020DA6D                 db    0
.data.rel.ro:000000000020DA6E                 db    0
.data.rel.ro:000000000020DA6F                 db    0
.data.rel.ro:000000000020DA70                 db    0
.data.rel.ro:000000000020DA71                 db    0
.data.rel.ro:000000000020DA72                 db    0
.data.rel.ro:000000000020DA73                 db    0
.data.rel.ro:000000000020DA74                 db    0
.data.rel.ro:000000000020DA75                 db    0
.data.rel.ro:000000000020DA76                 db    0
.data.rel.ro:000000000020DA77                 db    0
.data.rel.ro:000000000020DA78                 db  7Dh ; }
.data.rel.ro:000000000020DA79                 db 0FFh
.data.rel.ro:000000000020DA7A                 db 0FFh
.data.rel.ro:000000000020DA7B                 db 0FFh
.data.rel.ro:000000000020DA7C                 db    0
.data.rel.ro:000000000020DA7D                 db    0
.data.rel.ro:000000000020DA7E                 db    0
.data.rel.ro:000000000020DA7F                 db    0
.data.rel.ro:000000000020DA80                 db    0
.data.rel.ro:000000000020DA81                 db    0
.data.rel.ro:000000000020DA82                 db    0
.data.rel.ro:000000000020DA83                 db    0
.data.rel.ro:000000000020DA84                 db    0
.data.rel.ro:000000000020DA85                 db    0
.data.rel.ro:000000000020DA86                 db    0
.data.rel.ro:000000000020DA87                 db    0
.data.rel.ro:000000000020DA88                 db    0
.data.rel.ro:000000000020DA89                 db    0
.data.rel.ro:000000000020DA8A                 db    0
.data.rel.ro:000000000020DA8B                 db    0
.data.rel.ro:000000000020DA8C                 db    0
.data.rel.ro:000000000020DA8D                 db    0
.data.rel.ro:000000000020DA8E                 db    0
.data.rel.ro:000000000020DA8F                 db    0
.data.rel.ro:000000000020DA90                 db    0
.data.rel.ro:000000000020DA91                 db    0
.data.rel.ro:000000000020DA92                 db    0
.data.rel.ro:000000000020DA93                 db    0
.data.rel.ro:000000000020DA94                 db    0
.data.rel.ro:000000000020DA95                 db    0
.data.rel.ro:000000000020DA96                 db    0
.data.rel.ro:000000000020DA97                 db    0
.data.rel.ro:000000000020DA98                 db    0
.data.rel.ro:000000000020DA99                 db    0
.data.rel.ro:000000000020DA9A                 db    0
.data.rel.ro:000000000020DA9B                 db    0
.data.rel.ro:000000000020DA9C                 db    0
.data.rel.ro:000000000020DA9D                 db    0
.data.rel.ro:000000000020DA9E                 db    0
.data.rel.ro:000000000020DA9F                 db    0
.data.rel.ro:000000000020DAA0 inval_args      dq offset aAbort_0      ; DATA XREF: main+1D1↑o
.data.rel.ro:000000000020DAA0                                         ; "abort"
.data.rel.ro:000000000020DAA8                 dq offset aFail         ; "fail"
.data.rel.ro:000000000020DAB0                 dq offset aWarn         ; "warn"
.data.rel.ro:000000000020DAB8                 dq offset aIgnore       ; "ignore"
.data.rel.ro:000000000020DAC0                 db    0
.data.rel.ro:000000000020DAC1                 db    0
.data.rel.ro:000000000020DAC2                 db    0
.data.rel.ro:000000000020DAC3                 db    0
.data.rel.ro:000000000020DAC4                 db    0
.data.rel.ro:000000000020DAC5                 db    0
.data.rel.ro:000000000020DAC6                 db    0
.data.rel.ro:000000000020DAC7                 db    0
.data.rel.ro:000000000020DAC8                 db    0
.data.rel.ro:000000000020DAC9                 db    0
.data.rel.ro:000000000020DACA                 db    0
.data.rel.ro:000000000020DACB                 db    0
.data.rel.ro:000000000020DACC                 db    0
.data.rel.ro:000000000020DACD                 db    0
.data.rel.ro:000000000020DACE                 db    0
.data.rel.ro:000000000020DACF                 db    0
.data.rel.ro:000000000020DAD0                 db    0
.data.rel.ro:000000000020DAD1                 db    0
.data.rel.ro:000000000020DAD2                 db    0
.data.rel.ro:000000000020DAD3                 db    0
.data.rel.ro:000000000020DAD4                 db    0
.data.rel.ro:000000000020DAD5                 db    0
.data.rel.ro:000000000020DAD6                 db    0
.data.rel.ro:000000000020DAD7                 db    0
.data.rel.ro:000000000020DAD8                 db    0
.data.rel.ro:000000000020DAD9                 db    0
.data.rel.ro:000000000020DADA                 db    0
.data.rel.ro:000000000020DADB                 db    0
.data.rel.ro:000000000020DADC                 db    0
.data.rel.ro:000000000020DADD                 db    0
.data.rel.ro:000000000020DADE                 db    0
.data.rel.ro:000000000020DADF                 db    0
.data.rel.ro:000000000020DAE0 round_args      dq offset aUp           ; DATA XREF: main+3FE↑o
.data.rel.ro:000000000020DAE0                                         ; "up"
.data.rel.ro:000000000020DAE8                 dq offset aDown         ; "down"
.data.rel.ro:000000000020DAF0                 dq offset aFromZero     ; "from-zero"
.data.rel.ro:000000000020DAF8                 dq offset aTowardsZero  ; "towards-zero"
.data.rel.ro:000000000020DB00                 dq offset aNearest      ; "nearest"
.data.rel.ro:000000000020DB08                 align 20h
.data.rel.ro:000000000020DB20 scale_to_args   dq offset aNone         ; DATA XREF: main+356↑o
.data.rel.ro:000000000020DB20                                         ; "none"
.data.rel.ro:000000000020DB28                 dq offset aSi           ; "si"
.data.rel.ro:000000000020DB30                 dq offset aIec          ; "iec"
.data.rel.ro:000000000020DB38                 dq offset aIecI         ; "iec-i"
.data.rel.ro:000000000020DB40                 db    0
.data.rel.ro:000000000020DB41                 db    0
.data.rel.ro:000000000020DB42                 db    0
.data.rel.ro:000000000020DB43                 db    0
.data.rel.ro:000000000020DB44                 db    0
.data.rel.ro:000000000020DB45                 db    0
.data.rel.ro:000000000020DB46                 db    0
.data.rel.ro:000000000020DB47                 db    0
.data.rel.ro:000000000020DB48                 db    0
.data.rel.ro:000000000020DB49                 db    0
.data.rel.ro:000000000020DB4A                 db    0
.data.rel.ro:000000000020DB4B                 db    0
.data.rel.ro:000000000020DB4C                 db    0
.data.rel.ro:000000000020DB4D                 db    0
.data.rel.ro:000000000020DB4E                 db    0
.data.rel.ro:000000000020DB4F                 db    0
.data.rel.ro:000000000020DB50                 db    0
.data.rel.ro:000000000020DB51                 db    0
.data.rel.ro:000000000020DB52                 db    0
.data.rel.ro:000000000020DB53                 db    0
.data.rel.ro:000000000020DB54                 db    0
.data.rel.ro:000000000020DB55                 db    0
.data.rel.ro:000000000020DB56                 db    0
.data.rel.ro:000000000020DB57                 db    0
.data.rel.ro:000000000020DB58                 db    0
.data.rel.ro:000000000020DB59                 db    0
.data.rel.ro:000000000020DB5A                 db    0
.data.rel.ro:000000000020DB5B                 db    0
.data.rel.ro:000000000020DB5C                 db    0
.data.rel.ro:000000000020DB5D                 db    0
.data.rel.ro:000000000020DB5E                 db    0
.data.rel.ro:000000000020DB5F                 db    0
.data.rel.ro:000000000020DB60 scale_from_args dq offset aNone         ; DATA XREF: main+29B↑o
.data.rel.ro:000000000020DB60                                         ; "none"
.data.rel.ro:000000000020DB68                 dq offset aAuto         ; "auto"
.data.rel.ro:000000000020DB70                 dq offset aSi           ; "si"
.data.rel.ro:000000000020DB78                 dq offset aIec          ; "iec"
.data.rel.ro:000000000020DB80                 dq offset aIecI         ; "iec-i"
.data.rel.ro:000000000020DB88                 align 20h
.data.rel.ro:000000000020DBA0                 public quoting_style_args
.data.rel.ro:000000000020DBA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020DBA8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020DBB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020DBB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020DBC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020DBC8                 dq offset aIec+2        ; "c"
.data.rel.ro:000000000020DBD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020DBD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020DBE0                 dq offset aFailedToSetLoc+0Eh ; "locale"
.data.rel.ro:000000000020DBE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020DBF0                 db    0
.data.rel.ro:000000000020DBF1                 db    0
.data.rel.ro:000000000020DBF2                 db    0
.data.rel.ro:000000000020DBF3                 db    0
.data.rel.ro:000000000020DBF4                 db    0
.data.rel.ro:000000000020DBF5                 db    0
.data.rel.ro:000000000020DBF6                 db    0
.data.rel.ro:000000000020DBF7                 db    0
.data.rel.ro:000000000020DBF7 _data_rel_ro    ends
.data.rel.ro:000000000020DBF7
LOAD:000000000020DBF8 ; ELF Dynamic Information
LOAD:000000000020DBF8 ; ===========================================================================
LOAD:000000000020DBF8
LOAD:000000000020DBF8 ; Segment type: Pure data
LOAD:000000000020DBF8 ; Segment permissions: Read/Write
LOAD:000000000020DBF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DBF8                 assume cs:LOAD
LOAD:000000000020DBF8                 ;org 20DBF8h
LOAD:000000000020DBF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020DBF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020DBF8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020DC08                 Elf64_Dyn <0Ch, 1970h>  ; DT_INIT
LOAD:000000000020DC18                 Elf64_Dyn <0Dh, 9480h>  ; DT_FINI
LOAD:000000000020DC28                 Elf64_Dyn <19h, 20D830h> ; DT_INIT_ARRAY
LOAD:000000000020DC38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020DC48                 Elf64_Dyn <1Ah, 20D838h> ; DT_FINI_ARRAY
LOAD:000000000020DC58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020DC68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020DC78                 Elf64_Dyn <5, 9B8h>     ; DT_STRTAB
LOAD:000000000020DC88                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020DC98                 Elf64_Dyn <0Ah, 33Bh>   ; DT_STRSZ
LOAD:000000000020DCA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020DCB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020DCC8                 Elf64_Dyn <3, 20DDE8h>  ; DT_PLTGOT
LOAD:000000000020DCD8                 Elf64_Dyn <2, 570h>     ; DT_PLTRELSZ
LOAD:000000000020DCE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020DCF8                 Elf64_Dyn <17h, 1400h>  ; DT_JMPREL
LOAD:000000000020DD08                 Elf64_Dyn <7, 0DE8h>    ; DT_RELA
LOAD:000000000020DD18                 Elf64_Dyn <8, 618h>     ; DT_RELASZ
LOAD:000000000020DD28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020DD38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020DD48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020DD58                 Elf64_Dyn <6FFFFFFEh, 0D88h> ; DT_VERNEED
LOAD:000000000020DD68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020DD78                 Elf64_Dyn <6FFFFFF0h, 0CF4h> ; DT_VERSYM
LOAD:000000000020DD88                 Elf64_Dyn <6FFFFFF9h, 35h> ; DT_RELACOUNT
LOAD:000000000020DD98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020DDA8                 db    0
LOAD:000000000020DDA9                 db    0
LOAD:000000000020DDAA                 db    0
LOAD:000000000020DDAB                 db    0
LOAD:000000000020DDAC                 db    0
LOAD:000000000020DDAD                 db    0
LOAD:000000000020DDAE                 db    0
LOAD:000000000020DDAF                 db    0
LOAD:000000000020DDB0                 db    0
LOAD:000000000020DDB1                 db    0
LOAD:000000000020DDB2                 db    0
LOAD:000000000020DDB3                 db    0
LOAD:000000000020DDB4                 db    0
LOAD:000000000020DDB5                 db    0
LOAD:000000000020DDB6                 db    0
LOAD:000000000020DDB7                 db    0
LOAD:000000000020DDB8                 db    0
LOAD:000000000020DDB9                 db    0
LOAD:000000000020DDBA                 db    0
LOAD:000000000020DDBB                 db    0
LOAD:000000000020DDBC                 db    0
LOAD:000000000020DDBD                 db    0
LOAD:000000000020DDBE                 db    0
LOAD:000000000020DDBF                 db    0
LOAD:000000000020DDC0                 db    0
LOAD:000000000020DDC1                 db    0
LOAD:000000000020DDC2                 db    0
LOAD:000000000020DDC3                 db    0
LOAD:000000000020DDC4                 db    0
LOAD:000000000020DDC5                 db    0
LOAD:000000000020DDC6                 db    0
LOAD:000000000020DDC7                 db    0
LOAD:000000000020DDC8                 db    0
LOAD:000000000020DDC9                 db    0
LOAD:000000000020DDCA                 db    0
LOAD:000000000020DDCB                 db    0
LOAD:000000000020DDCC                 db    0
LOAD:000000000020DDCD                 db    0
LOAD:000000000020DDCE                 db    0
LOAD:000000000020DDCF                 db    0
LOAD:000000000020DDD0                 db    0
LOAD:000000000020DDD1                 db    0
LOAD:000000000020DDD2                 db    0
LOAD:000000000020DDD3                 db    0
LOAD:000000000020DDD4                 db    0
LOAD:000000000020DDD5                 db    0
LOAD:000000000020DDD6                 db    0
LOAD:000000000020DDD7                 db    0
LOAD:000000000020DDD8                 db    0
LOAD:000000000020DDD9                 db    0
LOAD:000000000020DDDA                 db    0
LOAD:000000000020DDDB                 db    0
LOAD:000000000020DDDC                 db    0
LOAD:000000000020DDDD                 db    0
LOAD:000000000020DDDE                 db    0
LOAD:000000000020DDDF                 db    0
LOAD:000000000020DDE0                 db    0
LOAD:000000000020DDE1                 db    0
LOAD:000000000020DDE2                 db    0
LOAD:000000000020DDE3                 db    0
LOAD:000000000020DDE4                 db    0
LOAD:000000000020DDE5                 db    0
LOAD:000000000020DDE6                 db    0
LOAD:000000000020DDE7                 db    0
LOAD:000000000020DDE7 LOAD            ends
LOAD:000000000020DDE7
.got:000000000020DDE8 ; ===========================================================================
.got:000000000020DDE8
.got:000000000020DDE8 ; Segment type: Pure data
.got:000000000020DDE8 ; Segment permissions: Read/Write
.got:000000000020DDE8 _got            segment qword public 'DATA' use64
.got:000000000020DDE8                 assume cs:_got
.got:000000000020DDE8                 ;org 20DDE8h
.got:000000000020DDE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020DDF0 qword_20DDF0    dq 0                    ; DATA XREF: sub_1990↑r
.got:000000000020DDF8 qword_20DDF8    dq 0                    ; DATA XREF: sub_1990+6↑r
.got:000000000020DE00 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020DE00                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020DE08 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020DE10 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020DE18 __errno_location_ptr dq offset __errno_location
.got:000000000020DE18                                         ; DATA XREF: ___errno_location↑r
.got:000000000020DE20 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020DE28 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020DE30 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020DE38 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020DE40 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020DE48 wcswidth_ptr    dq offset wcswidth      ; DATA XREF: _wcswidth↑r
.got:000000000020DE50 mbstowcs_ptr    dq offset mbstowcs      ; DATA XREF: _mbstowcs↑r
.got:000000000020DE58 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020DE60 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020DE68 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020DE68                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020DE70 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020DE78 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020DE78                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020DE80 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020DE88 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020DE88                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020DE90 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020DE98 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020DEA0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020DEA8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020DEB0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020DEB8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020DEC0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020DEC0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020DEC8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020DEC8                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020DED0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020DED8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000020DEE0 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:000000000020DEE8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020DEF0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020DEF0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020DEF8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020DF00 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020DF08 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020DF10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020DF18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020DF20 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:000000000020DF28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020DF30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020DF38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020DF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020DF48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020DF50 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020DF58 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020DF60 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020DF68 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020DF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020DF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020DF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020DF88 wcstombs_ptr    dq offset wcstombs      ; DATA XREF: _wcstombs↑r
.got:000000000020DF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020DF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020DFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020DFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020DFA8 __strncat_chk_ptr dq offset __strncat_chk
.got:000000000020DFA8                                         ; DATA XREF: ___strncat_chk↑r
.got:000000000020DFB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020DFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020DFC0 getdelim_ptr    dq offset getdelim      ; DATA XREF: _getdelim↑r
.got:000000000020DFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020DFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020DFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020DFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020DFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020DFD8                                         ; DATA XREF: start+24↑r
.got:000000000020DFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020DFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020DFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020DFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020DFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020DFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020DFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020DFF0 _got            ends
.got:000000000020DFF0
LOAD:000000000020DFF8 ; ===========================================================================
LOAD:000000000020DFF8
LOAD:000000000020DFF8 ; Segment type: Pure data
LOAD:000000000020DFF8 ; Segment permissions: Read/Write
LOAD:000000000020DFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DFF8                 assume cs:LOAD
LOAD:000000000020DFF8                 ;org 20DFF8h
LOAD:000000000020DFF8                 align 20h
LOAD:000000000020DFF8 LOAD            ends
LOAD:000000000020DFF8
.data:000000000020E000 ; ===========================================================================
.data:000000000020E000
.data:000000000020E000 ; Segment type: Pure data
.data:000000000020E000 ; Segment permissions: Read/Write
.data:000000000020E000 _data           segment align_32 public 'DATA' use64
.data:000000000020E000                 assume cs:_data
.data:000000000020E000                 ;org 20E000h
.data:000000000020E000                 public __data_start ; weak
.data:000000000020E000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020E000                                         ; data_start
.data:000000000020E001                 db    0
.data:000000000020E002                 db    0
.data:000000000020E003                 db    0
.data:000000000020E004                 db    0
.data:000000000020E005                 db    0
.data:000000000020E006                 db    0
.data:000000000020E007                 db    0
.data:000000000020E008                 public __dso_handle
.data:000000000020E008 ; void *_dso_handle
.data:000000000020E008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020E008                                         ; atexit↑r ...
.data:000000000020E010 line_delim      db 0Ah                  ; DATA XREF: main:loc_2188↑w
.data:000000000020E010                                         ; main:loc_24C8↑r ...
.data:000000000020E011                 align 4
.data:000000000020E014 delimiter       dd 80h                  ; DATA XREF: main:loc_2088↑w
.data:000000000020E014                                         ; main+6E5↑r ...
.data:000000000020E018 padding_alignment dd 1                  ; DATA XREF: main+3D2↑w
.data:000000000020E018                                         ; main+63B↑r ...
.data:000000000020E01C ; int conv_exit_code
.data:000000000020E01C conv_exit_code  dd 2                    ; DATA XREF: main+701↑w
.data:000000000020E01C                                         ; process_field+2C3↑r ...
.data:000000000020E020 user_precision  dq 0FFFFFFFFFFFFFFFFh   ; DATA XREF: main+BA0↑w
.data:000000000020E020                                         ; process_field+528↑r ...
.data:000000000020E028 to_unit_size    dq 1                    ; DATA XREF: main+192↑w
.data:000000000020E028                                         ; process_field+2DF↑r
.data:000000000020E030 from_unit_size  dq 1                    ; DATA XREF: main+2DC↑w
.data:000000000020E030                                         ; process_field:loc_3248↑r
.data:000000000020E038 round_style     dd 2                    ; DATA XREF: main+428↑w
.data:000000000020E038                                         ; process_field+5FB↑r
.data:000000000020E03C                 align 20h
.data:000000000020E040                 public Version
.data:000000000020E040 Version         dq offset a831          ; DATA XREF: main+23F↑r
.data:000000000020E040                                         ; "8.31"
.data:000000000020E048                 public argmatch_die
.data:000000000020E048 argmatch_die    dq offset __argmatch_die
.data:000000000020E048                                         ; DATA XREF: main+1C3↑r
.data:000000000020E048                                         ; main+28D↑r ...
.data:000000000020E050                 public exit_failure
.data:000000000020E050 ; int exit_failure
.data:000000000020E050 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5BA2↑r
.data:000000000020E050                                         ; xalloc_die+17↑r
.data:000000000020E054                 align 20h
.data:000000000020E060                 public quote_quoting_options
.data:000000000020E060 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020E060                                         ; quote_mem↑o ...
.data:000000000020E061                 db    0
.data:000000000020E062                 db    0
.data:000000000020E063                 db    0
.data:000000000020E064                 db    0
.data:000000000020E065                 db    0
.data:000000000020E066                 db    0
.data:000000000020E067                 db    0
.data:000000000020E068                 db    0
.data:000000000020E069                 db    0
.data:000000000020E06A                 db    0
.data:000000000020E06B                 db    0
.data:000000000020E06C                 db    0
.data:000000000020E06D                 db    0
.data:000000000020E06E                 db    0
.data:000000000020E06F                 db    0
.data:000000000020E070                 db    0
.data:000000000020E071                 db    0
.data:000000000020E072                 db    0
.data:000000000020E073                 db    0
.data:000000000020E074                 db    0
.data:000000000020E075                 db    0
.data:000000000020E076                 db    0
.data:000000000020E077                 db    0
.data:000000000020E078                 db    0
.data:000000000020E079                 db    0
.data:000000000020E07A                 db    0
.data:000000000020E07B                 db    0
.data:000000000020E07C                 db    0
.data:000000000020E07D                 db    0
.data:000000000020E07E                 db    0
.data:000000000020E07F                 db    0
.data:000000000020E080                 db    0
.data:000000000020E081                 db    0
.data:000000000020E082                 db    0
.data:000000000020E083                 db    0
.data:000000000020E084                 db    0
.data:000000000020E085                 db    0
.data:000000000020E086                 db    0
.data:000000000020E087                 db    0
.data:000000000020E088                 db    0
.data:000000000020E089                 db    0
.data:000000000020E08A                 db    0
.data:000000000020E08B                 db    0
.data:000000000020E08C                 db    0
.data:000000000020E08D                 db    0
.data:000000000020E08E                 db    0
.data:000000000020E08F                 db    0
.data:000000000020E090                 db    0
.data:000000000020E091                 db    0
.data:000000000020E092                 db    0
.data:000000000020E093                 db    0
.data:000000000020E094                 db    0
.data:000000000020E095                 db    0
.data:000000000020E096                 db    0
.data:000000000020E097                 db    0
.data:000000000020E098 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020E098                                         ; quotearg_n_options:loc_748D↑r ...
.data:000000000020E09C                 align 20h
.data:000000000020E0A0 ; void *slotvec
.data:000000000020E0A0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020E0A0                                         ; quotearg_n_options+76↑w ...
.data:000000000020E0A8                 align 10h
.data:000000000020E0B0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020E0B0                                         ; quotearg_n_options+187↑r ...
.data:000000000020E0B8 off_20E0B8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020E0B8 _data           ends
.data:000000000020E0B8
.bss:000000000020E0C0 ; ===========================================================================
.bss:000000000020E0C0
.bss:000000000020E0C0 ; Segment type: Uninitialized
.bss:000000000020E0C0 ; Segment permissions: Read/Write
.bss:000000000020E0C0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020E0C0                 assume cs:_bss
.bss:000000000020E0C0                 ;org 20E0C0h
.bss:000000000020E0C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020E0C0                 public __bss_start ; weak
.bss:000000000020E0C0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020E0C0                                         ; LOAD:0000000000000958↑o ...
.bss:000000000020E0C0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020E0C0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020E0C0                                         ; _edata
.bss:000000000020E0C0                                         ; Copy of shared data
.bss:000000000020E0C8                 public stdout@@GLIBC_2_2_5
.bss:000000000020E0C8 ; FILE *stdout
.bss:000000000020E0C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008E0↑o
.bss:000000000020E0C8                                         ; main:loc_1F88↑r ...
.bss:000000000020E0C8                                         ; Alternative name is 'stdout'
.bss:000000000020E0C8                                         ; Copy of shared data
.bss:000000000020E0D0                 public stdin@@GLIBC_2_2_5
.bss:000000000020E0D0 ; FILE *stdin
.bss:000000000020E0D0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000910↑o
.bss:000000000020E0D0                                         ; main+77F↑r ...
.bss:000000000020E0D0                                         ; Alternative name is 'stdin'
.bss:000000000020E0D0                                         ; Copy of shared data
.bss:000000000020E0D8                 public optind@@GLIBC_2_2_5
.bss:000000000020E0D8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:000000000020E0D8                                         ; main:loc_245B↑r ...
.bss:000000000020E0D8                                         ; Alternative name is 'optind'
.bss:000000000020E0D8                                         ; Copy of shared data
.bss:000000000020E0DC                 align 20h
.bss:000000000020E0E0                 public optarg@@GLIBC_2_2_5
.bss:000000000020E0E0 ; char *optarg
.bss:000000000020E0E0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020E0E0                                         ; main+123↑r ...
.bss:000000000020E0E0                                         ; Alternative name is 'optarg'
.bss:000000000020E0E0                                         ; Copy of shared data
.bss:000000000020E0E8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020E0E8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020E0E8                                         ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020E0E8                                         ; LOAD:0000000000000940↑o ...
.bss:000000000020E0E8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020E0E8                                         ; Copy of shared data
.bss:000000000020E0F0                 align 20h
.bss:000000000020E100                 public stderr@@GLIBC_2_2_5
.bss:000000000020E100 ; FILE *stderr
.bss:000000000020E100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000970↑o
.bss:000000000020E100                                         ; main+683↑r ...
.bss:000000000020E100                                         ; Alternative name is 'stderr'
.bss:000000000020E100                                         ; Copy of shared data
.bss:000000000020E108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020E108                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020E109                 align 10h
.bss:000000000020E110 dev_debug       db ?                    ; DATA XREF: main:loc_1FC0↑w
.bss:000000000020E110                                         ; main:loc_233B↑r ...
.bss:000000000020E111                 align 4
.bss:000000000020E114 decimal_point_length dd ?               ; DATA XREF: main+9B↑w
.bss:000000000020E114                                         ; simple_strtod_int+9A↑r ...
.bss:000000000020E118 ; char *decimal_point
.bss:000000000020E118 decimal_point   dq ?                    ; DATA XREF: main+6B↑w
.bss:000000000020E118                                         ; main:loc_1DD1↑r ...
.bss:000000000020E120 debug           db ?                    ; DATA XREF: main:loc_1FC7↑w
.bss:000000000020E120                                         ; main+4FA↑r ...
.bss:000000000020E121                 align 8
.bss:000000000020E128 header          dq ?                    ; DATA XREF: main+473↑o
.bss:000000000020E128                                         ; main+48A↑r ...
.bss:000000000020E130 auto_padding    dd ?                    ; DATA XREF: main+6F9↑w
.bss:000000000020E130                                         ; process_field:loc_309F↑r
.bss:000000000020E134                 align 8
.bss:000000000020E138 ; char *format_str_suffix
.bss:000000000020E138 format_str_suffix dq ?                  ; DATA XREF: main+5F8↑r
.bss:000000000020E138                                         ; main+B23↑w ...
.bss:000000000020E140 ; char *format_str_prefix
.bss:000000000020E140 format_str_prefix dq ?                  ; DATA XREF: main+5DE↑w
.bss:000000000020E140                                         ; main+612↑r ...
.bss:000000000020E148 format_str      dq ?                    ; DATA XREF: main+44F↑w
.bss:000000000020E148                                         ; main:loc_222E↑r ...
.bss:000000000020E150 zero_padding_width dq ?                 ; DATA XREF: main:loc_271E↑w
.bss:000000000020E150                                         ; process_field:loc_3598↑r
.bss:000000000020E158 padding_width   dq ?                    ; DATA XREF: main+39E↑o
.bss:000000000020E158                                         ; main+3B9↑r ...
.bss:000000000020E160 padding_buffer_size dq ?                ; DATA XREF: main+6CA↑r
.bss:000000000020E160                                         ; setup_padding_buffer_part_0+F↑w ...
.bss:000000000020E168 ; char *padding_buffer
.bss:000000000020E168 padding_buffer  dq ?                    ; DATA XREF: setup_padding_buffer_part_0+8↑r
.bss:000000000020E168                                         ; setup_padding_buffer_part_0+1B↑w ...
.bss:000000000020E170 grouping        dd ?                    ; DATA XREF: main:loc_2058↑w
.bss:000000000020E170                                         ; main+4E8↑r ...
.bss:000000000020E174                 align 8
.bss:000000000020E178 ; char *suffix
.bss:000000000020E178 suffix          dq ?                    ; DATA XREF: main+2F7↑w
.bss:000000000020E178                                         ; process_field:loc_3016↑r ...
.bss:000000000020E180 inval_style     dd ?                    ; DATA XREF: main+1FB↑w
.bss:000000000020E180                                         ; main:loc_2442↑r ...
.bss:000000000020E184 scale_to        dd ?                    ; DATA XREF: main+380↑w
.bss:000000000020E184                                         ; main+519↑r ...
.bss:000000000020E188 scale_from      dd ?                    ; DATA XREF: main+2C5↑w
.bss:000000000020E188                                         ; main+510↑r ...
.bss:000000000020E18C                 align 10h
.bss:000000000020E190 ; char *num_start_6877
.bss:000000000020E190 num_start_6877  dq ?                    ; DATA XREF: set_fields+2D4↑r
.bss:000000000020E190                                         ; set_fields:loc_54A0↑w ...
.bss:000000000020E198 n_frp_allocated dq ?                    ; DATA XREF: add_range_pair+13↑r
.bss:000000000020E198                                         ; add_range_pair:loc_510F↑w ...
.bss:000000000020E1A0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020E1A0                                         ; close_stdout+1B↑r
.bss:000000000020E1A1                 align 8
.bss:000000000020E1A8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020E1A8                                         ; close_stdout+56↑r
.bss:000000000020E1B0                 public program_name
.bss:000000000020E1B0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020E1B0                                         ; usage+464↑r ...
.bss:000000000020E1B8                 align 20h
.bss:000000000020E1C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020E1C0                                         ; quotearg_free+46↑o ...
.bss:000000000020E1C1                 db    ? ;
.bss:000000000020E1C2                 db    ? ;
.bss:000000000020E1C3                 db    ? ;
.bss:000000000020E1C4                 db    ? ;
.bss:000000000020E1C5                 db    ? ;
.bss:000000000020E1C6                 db    ? ;
.bss:000000000020E1C7                 db    ? ;
.bss:000000000020E1C8                 db    ? ;
.bss:000000000020E1C9                 db    ? ;
.bss:000000000020E1CA                 db    ? ;
.bss:000000000020E1CB                 db    ? ;
.bss:000000000020E1CC                 db    ? ;
.bss:000000000020E1CD                 db    ? ;
.bss:000000000020E1CE                 db    ? ;
.bss:000000000020E1CF                 db    ? ;
.bss:000000000020E1D0                 db    ? ;
.bss:000000000020E1D1                 db    ? ;
.bss:000000000020E1D2                 db    ? ;
.bss:000000000020E1D3                 db    ? ;
.bss:000000000020E1D4                 db    ? ;
.bss:000000000020E1D5                 db    ? ;
.bss:000000000020E1D6                 db    ? ;
.bss:000000000020E1D7                 db    ? ;
.bss:000000000020E1D8                 db    ? ;
.bss:000000000020E1D9                 db    ? ;
.bss:000000000020E1DA                 db    ? ;
.bss:000000000020E1DB                 db    ? ;
.bss:000000000020E1DC                 db    ? ;
.bss:000000000020E1DD                 db    ? ;
.bss:000000000020E1DE                 db    ? ;
.bss:000000000020E1DF                 db    ? ;
.bss:000000000020E1E0                 db    ? ;
.bss:000000000020E1E1                 db    ? ;
.bss:000000000020E1E2                 db    ? ;
.bss:000000000020E1E3                 db    ? ;
.bss:000000000020E1E4                 db    ? ;
.bss:000000000020E1E5                 db    ? ;
.bss:000000000020E1E6                 db    ? ;
.bss:000000000020E1E7                 db    ? ;
.bss:000000000020E1E8                 db    ? ;
.bss:000000000020E1E9                 db    ? ;
.bss:000000000020E1EA                 db    ? ;
.bss:000000000020E1EB                 db    ? ;
.bss:000000000020E1EC                 db    ? ;
.bss:000000000020E1ED                 db    ? ;
.bss:000000000020E1EE                 db    ? ;
.bss:000000000020E1EF                 db    ? ;
.bss:000000000020E1F0                 db    ? ;
.bss:000000000020E1F1                 db    ? ;
.bss:000000000020E1F2                 db    ? ;
.bss:000000000020E1F3                 db    ? ;
.bss:000000000020E1F4                 db    ? ;
.bss:000000000020E1F5                 db    ? ;
.bss:000000000020E1F6                 db    ? ;
.bss:000000000020E1F7                 db    ? ;
.bss:000000000020E1F8                 db    ? ;
.bss:000000000020E1F9                 db    ? ;
.bss:000000000020E1FA                 db    ? ;
.bss:000000000020E1FB                 db    ? ;
.bss:000000000020E1FC                 db    ? ;
.bss:000000000020E1FD                 db    ? ;
.bss:000000000020E1FE                 db    ? ;
.bss:000000000020E1FF                 db    ? ;
.bss:000000000020E200                 db    ? ;
.bss:000000000020E201                 db    ? ;
.bss:000000000020E202                 db    ? ;
.bss:000000000020E203                 db    ? ;
.bss:000000000020E204                 db    ? ;
.bss:000000000020E205                 db    ? ;
.bss:000000000020E206                 db    ? ;
.bss:000000000020E207                 db    ? ;
.bss:000000000020E208                 db    ? ;
.bss:000000000020E209                 db    ? ;
.bss:000000000020E20A                 db    ? ;
.bss:000000000020E20B                 db    ? ;
.bss:000000000020E20C                 db    ? ;
.bss:000000000020E20D                 db    ? ;
.bss:000000000020E20E                 db    ? ;
.bss:000000000020E20F                 db    ? ;
.bss:000000000020E210                 db    ? ;
.bss:000000000020E211                 db    ? ;
.bss:000000000020E212                 db    ? ;
.bss:000000000020E213                 db    ? ;
.bss:000000000020E214                 db    ? ;
.bss:000000000020E215                 db    ? ;
.bss:000000000020E216                 db    ? ;
.bss:000000000020E217                 db    ? ;
.bss:000000000020E218                 db    ? ;
.bss:000000000020E219                 db    ? ;
.bss:000000000020E21A                 db    ? ;
.bss:000000000020E21B                 db    ? ;
.bss:000000000020E21C                 db    ? ;
.bss:000000000020E21D                 db    ? ;
.bss:000000000020E21E                 db    ? ;
.bss:000000000020E21F                 db    ? ;
.bss:000000000020E220                 db    ? ;
.bss:000000000020E221                 db    ? ;
.bss:000000000020E222                 db    ? ;
.bss:000000000020E223                 db    ? ;
.bss:000000000020E224                 db    ? ;
.bss:000000000020E225                 db    ? ;
.bss:000000000020E226                 db    ? ;
.bss:000000000020E227                 db    ? ;
.bss:000000000020E228                 db    ? ;
.bss:000000000020E229                 db    ? ;
.bss:000000000020E22A                 db    ? ;
.bss:000000000020E22B                 db    ? ;
.bss:000000000020E22C                 db    ? ;
.bss:000000000020E22D                 db    ? ;
.bss:000000000020E22E                 db    ? ;
.bss:000000000020E22F                 db    ? ;
.bss:000000000020E230                 db    ? ;
.bss:000000000020E231                 db    ? ;
.bss:000000000020E232                 db    ? ;
.bss:000000000020E233                 db    ? ;
.bss:000000000020E234                 db    ? ;
.bss:000000000020E235                 db    ? ;
.bss:000000000020E236                 db    ? ;
.bss:000000000020E237                 db    ? ;
.bss:000000000020E238                 db    ? ;
.bss:000000000020E239                 db    ? ;
.bss:000000000020E23A                 db    ? ;
.bss:000000000020E23B                 db    ? ;
.bss:000000000020E23C                 db    ? ;
.bss:000000000020E23D                 db    ? ;
.bss:000000000020E23E                 db    ? ;
.bss:000000000020E23F                 db    ? ;
.bss:000000000020E240                 db    ? ;
.bss:000000000020E241                 db    ? ;
.bss:000000000020E242                 db    ? ;
.bss:000000000020E243                 db    ? ;
.bss:000000000020E244                 db    ? ;
.bss:000000000020E245                 db    ? ;
.bss:000000000020E246                 db    ? ;
.bss:000000000020E247                 db    ? ;
.bss:000000000020E248                 db    ? ;
.bss:000000000020E249                 db    ? ;
.bss:000000000020E24A                 db    ? ;
.bss:000000000020E24B                 db    ? ;
.bss:000000000020E24C                 db    ? ;
.bss:000000000020E24D                 db    ? ;
.bss:000000000020E24E                 db    ? ;
.bss:000000000020E24F                 db    ? ;
.bss:000000000020E250                 db    ? ;
.bss:000000000020E251                 db    ? ;
.bss:000000000020E252                 db    ? ;
.bss:000000000020E253                 db    ? ;
.bss:000000000020E254                 db    ? ;
.bss:000000000020E255                 db    ? ;
.bss:000000000020E256                 db    ? ;
.bss:000000000020E257                 db    ? ;
.bss:000000000020E258                 db    ? ;
.bss:000000000020E259                 db    ? ;
.bss:000000000020E25A                 db    ? ;
.bss:000000000020E25B                 db    ? ;
.bss:000000000020E25C                 db    ? ;
.bss:000000000020E25D                 db    ? ;
.bss:000000000020E25E                 db    ? ;
.bss:000000000020E25F                 db    ? ;
.bss:000000000020E260                 db    ? ;
.bss:000000000020E261                 db    ? ;
.bss:000000000020E262                 db    ? ;
.bss:000000000020E263                 db    ? ;
.bss:000000000020E264                 db    ? ;
.bss:000000000020E265                 db    ? ;
.bss:000000000020E266                 db    ? ;
.bss:000000000020E267                 db    ? ;
.bss:000000000020E268                 db    ? ;
.bss:000000000020E269                 db    ? ;
.bss:000000000020E26A                 db    ? ;
.bss:000000000020E26B                 db    ? ;
.bss:000000000020E26C                 db    ? ;
.bss:000000000020E26D                 db    ? ;
.bss:000000000020E26E                 db    ? ;
.bss:000000000020E26F                 db    ? ;
.bss:000000000020E270                 db    ? ;
.bss:000000000020E271                 db    ? ;
.bss:000000000020E272                 db    ? ;
.bss:000000000020E273                 db    ? ;
.bss:000000000020E274                 db    ? ;
.bss:000000000020E275                 db    ? ;
.bss:000000000020E276                 db    ? ;
.bss:000000000020E277                 db    ? ;
.bss:000000000020E278                 db    ? ;
.bss:000000000020E279                 db    ? ;
.bss:000000000020E27A                 db    ? ;
.bss:000000000020E27B                 db    ? ;
.bss:000000000020E27C                 db    ? ;
.bss:000000000020E27D                 db    ? ;
.bss:000000000020E27E                 db    ? ;
.bss:000000000020E27F                 db    ? ;
.bss:000000000020E280                 db    ? ;
.bss:000000000020E281                 db    ? ;
.bss:000000000020E282                 db    ? ;
.bss:000000000020E283                 db    ? ;
.bss:000000000020E284                 db    ? ;
.bss:000000000020E285                 db    ? ;
.bss:000000000020E286                 db    ? ;
.bss:000000000020E287                 db    ? ;
.bss:000000000020E288                 db    ? ;
.bss:000000000020E289                 db    ? ;
.bss:000000000020E28A                 db    ? ;
.bss:000000000020E28B                 db    ? ;
.bss:000000000020E28C                 db    ? ;
.bss:000000000020E28D                 db    ? ;
.bss:000000000020E28E                 db    ? ;
.bss:000000000020E28F                 db    ? ;
.bss:000000000020E290                 db    ? ;
.bss:000000000020E291                 db    ? ;
.bss:000000000020E292                 db    ? ;
.bss:000000000020E293                 db    ? ;
.bss:000000000020E294                 db    ? ;
.bss:000000000020E295                 db    ? ;
.bss:000000000020E296                 db    ? ;
.bss:000000000020E297                 db    ? ;
.bss:000000000020E298                 db    ? ;
.bss:000000000020E299                 db    ? ;
.bss:000000000020E29A                 db    ? ;
.bss:000000000020E29B                 db    ? ;
.bss:000000000020E29C                 db    ? ;
.bss:000000000020E29D                 db    ? ;
.bss:000000000020E29E                 db    ? ;
.bss:000000000020E29F                 db    ? ;
.bss:000000000020E2A0                 db    ? ;
.bss:000000000020E2A1                 db    ? ;
.bss:000000000020E2A2                 db    ? ;
.bss:000000000020E2A3                 db    ? ;
.bss:000000000020E2A4                 db    ? ;
.bss:000000000020E2A5                 db    ? ;
.bss:000000000020E2A6                 db    ? ;
.bss:000000000020E2A7                 db    ? ;
.bss:000000000020E2A8                 db    ? ;
.bss:000000000020E2A9                 db    ? ;
.bss:000000000020E2AA                 db    ? ;
.bss:000000000020E2AB                 db    ? ;
.bss:000000000020E2AC                 db    ? ;
.bss:000000000020E2AD                 db    ? ;
.bss:000000000020E2AE                 db    ? ;
.bss:000000000020E2AF                 db    ? ;
.bss:000000000020E2B0                 db    ? ;
.bss:000000000020E2B1                 db    ? ;
.bss:000000000020E2B2                 db    ? ;
.bss:000000000020E2B3                 db    ? ;
.bss:000000000020E2B4                 db    ? ;
.bss:000000000020E2B5                 db    ? ;
.bss:000000000020E2B6                 db    ? ;
.bss:000000000020E2B7                 db    ? ;
.bss:000000000020E2B8                 db    ? ;
.bss:000000000020E2B9                 db    ? ;
.bss:000000000020E2BA                 db    ? ;
.bss:000000000020E2BB                 db    ? ;
.bss:000000000020E2BC                 db    ? ;
.bss:000000000020E2BD                 db    ? ;
.bss:000000000020E2BE                 db    ? ;
.bss:000000000020E2BF                 db    ? ;
.bss:000000000020E2C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020E2C0                                         ; get_quoting_style↑o ...
.bss:000000000020E2D0 xmmword_20E2D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020E2D0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020E2E0 xmmword_20E2E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020E2E0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020E2F0 qword_20E2F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020E2F0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020E2F8                 public frp
.bss:000000000020E2F8 ; void *frp
.bss:000000000020E2F8 frp             dq ?                    ; DATA XREF: process_field+2A↑r
.bss:000000000020E2F8                                         ; add_range_pair+1A↑r ...
.bss:000000000020E300                 public n_frp
.bss:000000000020E300 ; size_t n_frp
.bss:000000000020E300 n_frp           dq ?                    ; DATA XREF: main+115↑r
.bss:000000000020E300                                         ; add_range_pair+C↑r ...
.bss:000000000020E300 _bss            ends
.bss:000000000020E300
.prgend:000000000020E308 ; ===========================================================================
.prgend:000000000020E308
.prgend:000000000020E308 ; Segment type: Zero-length
.prgend:000000000020E308 _prgend         segment byte public '' use64
.prgend:000000000020E308 _end            label byte
.prgend:000000000020E308 _prgend         ends
.prgend:000000000020E308
extern:000000000020E310 ; ===========================================================================
extern:000000000020E310
extern:000000000020E310 ; Segment type: Externs
extern:000000000020E310 ; extern
extern:000000000020E310                 extrn __snprintf_chk:near
extern:000000000020E310                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020E310                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020E318 ; void free(void *ptr)
extern:000000000020E318                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020E318                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020E320 ; void __noreturn abort(void)
extern:000000000020E320                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020E320                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020E328 ; int *_errno_location(void)
extern:000000000020E328                 extrn __errno_location:near
extern:000000000020E328                                         ; CODE XREF: ___errno_location↑j
extern:000000000020E328                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020E330 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020E330                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020E330                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020E338 ; void __noreturn exit(int status)
extern:000000000020E338                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020E338                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020E340 ; char *strcpy(char *dest, const char *src)
extern:000000000020E340                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020E340                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020E348 ; size_t _fpending(FILE *fp)
extern:000000000020E348                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020E348                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020E350 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020E350                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020E350                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020E358 ; int wcswidth(const wchar_t *s, size_t n)
extern:000000000020E358                 extrn wcswidth:near     ; CODE XREF: _wcswidth↑j
extern:000000000020E358                                         ; DATA XREF: .got:wcswidth_ptr↑o
extern:000000000020E360 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
extern:000000000020E360                 extrn mbstowcs:near     ; CODE XREF: _mbstowcs↑j
extern:000000000020E360                                         ; DATA XREF: .got:mbstowcs_ptr↑o
extern:000000000020E368 ; char *textdomain(const char *domainname)
extern:000000000020E368                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020E368                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020E370 ; int fclose(FILE *stream)
extern:000000000020E370                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020E370                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020E378 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020E378                 extrn bindtextdomain:near
extern:000000000020E378                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020E378                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020E380 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020E380                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020E380                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020E388 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020E388                 extrn __ctype_get_mb_cur_max:near
extern:000000000020E388                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020E388                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020E390 ; size_t strlen(const char *s)
extern:000000000020E390                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020E390                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020E398                 extrn __stack_chk_fail:near
extern:000000000020E398                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020E398                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020E3A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020E3A0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020E3A0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020E3A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020E3A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020E3A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020E3B0 ; char *strchr(const char *s, int c)
extern:000000000020E3B0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020E3B0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020E3B8 ; int _overflow(_IO_FILE *, int)
extern:000000000020E3B8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020E3B8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020E3C0 ; char *strrchr(const char *s, int c)
extern:000000000020E3C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020E3C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020E3C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020E3C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020E3C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020E3D0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020E3D0                 extrn __assert_fail:near
extern:000000000020E3D0                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020E3D0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020E3D8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020E3D8                 extrn __strtoul_internal:near
extern:000000000020E3D8                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020E3D8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020E3E0 ; void *memset(void *s, int c, size_t n)
extern:000000000020E3E0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020E3E0                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020E3E8 ; size_t strspn(const char *s, const char *accept)
extern:000000000020E3E8                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020E3E8                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020E3F0 ; char *strndup(const char *string, size_t n)
extern:000000000020E3F0                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:000000000020E3F0                                         ; DATA XREF: .got:strndup_ptr↑o
extern:000000000020E3F8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020E3F8                 extrn __libc_start_main:near
extern:000000000020E3F8                                         ; CODE XREF: start+24↑p
extern:000000000020E3F8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020E400 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020E400                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020E400                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020E408 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020E408                 extrn fputs_unlocked:near
extern:000000000020E408                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020E408                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020E410 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020E410                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020E410                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020E418 ; int strcmp(const char *s1, const char *s2)
extern:000000000020E418                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020E418                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020E420 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020E420                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020E420                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020E428 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020E428                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020E428                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020E430 ; int fileno(FILE *stream)
extern:000000000020E430                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020E430                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020E438 ; int wcwidth(wchar_t c)
extern:000000000020E438                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:000000000020E438                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:000000000020E440 ; void *malloc(size_t size)
extern:000000000020E440                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020E440                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020E448 ; int fflush(FILE *stream)
extern:000000000020E448                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020E448                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020E450 ; char *nl_langinfo(nl_item item)
extern:000000000020E450                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020E450                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020E458 ; int _freading(FILE *fp)
extern:000000000020E458                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020E458                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020E460 ; void *realloc(void *ptr, size_t size)
extern:000000000020E460                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020E460                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020E468 ; char *setlocale(int category, const char *locale)
extern:000000000020E468                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020E468                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020E470                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020E470                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020E478 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020E478                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020E478                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020E480 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020E480                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020E480                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020E488 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020E488                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020E488                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020E490 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020E490                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020E490                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020E498 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020E498                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020E498                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020E4A0 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
extern:000000000020E4A0                 extrn wcstombs:near     ; CODE XREF: _wcstombs↑j
extern:000000000020E4A0                                         ; DATA XREF: .got:wcstombs_ptr↑o
extern:000000000020E4A8 ; void __noreturn exit(int status)
extern:000000000020E4A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020E4A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020E4B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020E4B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020E4B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020E4B8                 extrn __fprintf_chk:near
extern:000000000020E4B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020E4B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020E4C0                 extrn __strncat_chk:near
extern:000000000020E4C0                                         ; CODE XREF: ___strncat_chk↑j
extern:000000000020E4C0                                         ; DATA XREF: .got:__strncat_chk_ptr↑o
extern:000000000020E4C8 ; int mbsinit(const mbstate_t *ps)
extern:000000000020E4C8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020E4C8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020E4D0 ; int iswprint(wint_t wc)
extern:000000000020E4D0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020E4D0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020E4D8 ; int __fastcall __cxa_finalize(void *)
extern:000000000020E4D8                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020E4D8                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020E4D8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020E4E0 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020E4E0                 extrn getdelim:near     ; CODE XREF: _getdelim↑j
extern:000000000020E4E0                                         ; DATA XREF: .got:getdelim_ptr↑o
extern:000000000020E4E8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020E4E8                 extrn __ctype_b_loc:near
extern:000000000020E4E8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020E4E8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020E4F0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020E4F0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020E4F8                 extrn __gmon_start__:near ; weak
extern:000000000020E4F8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020E4F8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020E500                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020E500                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020E500
extern:000000000020E500
extern:000000000020E500                 end start
