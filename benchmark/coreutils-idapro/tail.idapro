LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 8E8904A5401EC93FBF58B9ABF9097E09FF78F232E65D28B07489697243E140EA
LOAD:0000000000000000 ; Input MD5    : 097FD5BBD0ECEE516AC9EB6D3D437C77
LOAD:0000000000000000 ; Input CRC32  : 7CCB47D8
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tail
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'tail.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'cl-strtod.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'offtostr.c'
LOAD:0000000000000000 ; Source File : 'posixver.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xnanosleep.c'
LOAD:0000000000000000 ; Source File : 'xstrtod.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'nanosleep.c'
LOAD:0000000000000000 ; Source File : 'c-strtod.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'dtotimespec.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 4CD00h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0EFD8h               ; Size in file image
LOAD:00000000000000D8                 dq 0EFD8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0F910h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20F910h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 7B0h                 ; Size in file image
LOAD:0000000000000110                 dq 978h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0FB98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20FB98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0D47Ch               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0D47Ch               ; Physical address
LOAD:00000000000001B0                 dq 44Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 44Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0F910h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20F910h              ; Physical address
LOAD:0000000000000220                 dq 6F0h                 ; Size in file image
LOAD:0000000000000228                 dq 6F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 7, 1Fh, 63h, 0B5h, 0DBh, 9, 1Dh, 64h, 0Ah, 1Ah, 25h ; Desc
LOAD:0000000000000284                 db 0FEh, 54h, 55h, 83h, 17h, 82h, 7Dh, 0C2h, 24h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Dh, 4Eh, 53h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_AD8, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aRaise - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_AD8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_AD8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_AD8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_AD8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aIsatty - offset byte_AD8, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aStrtod - offset byte_AD8, 12h, 0, 0, \ ; "strtod"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFcntl - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aClearerrUnlock - offset byte_AD8, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AD8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrtodL - offset byte_AD8, 12h, 0, 0, \ ; "strtod_l"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFclose - offset byte_AD8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain - offset byte_AD8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_AD8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_AD8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLxstat - offset byte_AD8, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStackChkFail - offset byte_AD8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetoptLong - offset byte_AD8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMbrtowc - offset byte_AD8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrchr - offset byte_AD8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFdeltChk - offset byte_AD8, 12h, 0, 0, \ ; "__fdelt_chk"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aNewlocale - offset byte_AD8, 12h, 0, 0, \ ; "newlocale"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aNanosleep - offset byte_AD8, 12h, 0, 0, \ ; "nanosleep"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aOverflow - offset byte_AD8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrrchr - offset byte_AD8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLseek - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aAssertFail - offset byte_AD8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrtoulInterna - offset byte_AD8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemset - offset byte_AD8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFclose+1 - offset byte_AD8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemchr - offset byte_AD8, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aRead - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aLibcStartMain - offset byte_AD8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcmp - offset byte_AD8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFputsUnlocked - offset byte_AD8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aCalloc - offset byte_AD8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrcmp - offset byte_AD8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aGmonStart - offset byte_AD8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aStrtol - offset byte_AD8, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcpy - offset byte_AD8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aKill - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aInotifyInit - offset byte_AD8, 12h, 0, 0, \ ; "inotify_init"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFileno - offset byte_AD8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aSelect - offset byte_AD8, 12h, 0, 0, \ ; "select"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aXstat - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMalloc - offset byte_AD8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFflush - offset byte_AD8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aInotifyAddWatc - offset byte_AD8, 12h, 0, 0, \ ; "inotify_add_watch"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aNlLanginfo - offset byte_AD8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFxstat - offset byte_AD8, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aFreading - offset byte_AD8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFwriteUnlocked - offset byte_AD8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aRealloc - offset byte_AD8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aSetlocale - offset byte_AD8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aPrintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aError - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMemrchr - offset byte_AD8, 12h, 0, 0, \ ; "memrchr"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aOpen - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000008C8                            0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFseeko - offset byte_AD8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFstatfs - offset byte_AD8, 12h, 0, 0, \ ; "fstatfs"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aCxaAtexit - offset byte_AD8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aExit+1 - offset byte_AD8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFwrite - offset byte_AD8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFprintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aItmRegistertmc - offset byte_AD8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aFflushUnlocked - offset byte_AD8, 12h, 0, 0, \ ; "fflush_unlocked"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMbsinit - offset byte_AD8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aIswprint - offset byte_AD8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aInotifyRmWatch - offset byte_AD8, 12h, 0, 0, \ ; "inotify_rm_watch"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aCxaFinalize - offset byte_AD8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aCtypeBLoc - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aStdout - offset byte_AD8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A18                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aProgname - offset byte_AD8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A30                            offset __bss_start, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aProgramInvocat - offset byte_AD8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A48                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aPrognameFull - offset byte_AD8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A60                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AD8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A78                            offset __bss_start, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aStderr - offset byte_AD8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A90                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aOptind - offset byte_AD8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000AA8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000AC0                 Elf64_Sym <offset aOptarg - offset byte_AD8, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000AC0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD8 ; ELF String Table
LOAD:0000000000000AD8 byte_AD8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AD8                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AD9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F40↓o
LOAD:0000000000000AE3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000AEA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AF7 aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000AF7                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B09 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B13 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000B1B aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B23 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000B2A aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B32 aFflushUnlocked db 'fflush_unlocked',0  ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000B42 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B4C aFdeltChk       db '__fdelt_chk',0      ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B58 aNanosleep      db 'nanosleep',0        ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B62 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000B68 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B79 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B82 aInotifyRmWatch db 'inotify_rm_watch',0 ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000B93 aSelect         db 'select',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B9A aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000BA3 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000BAB aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000BB3 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000BB9 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BB9                                         ; LOAD:0000000000000928↑o
LOAD:0000000000000BBF aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000BC6 aMemrchr        db 'memrchr',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BCE aKill           db 'kill',0             ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BD3 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000BD3                                         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000BEB aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BF9 aStrtod         db 'strtod',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000C00 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C00                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000C17 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C1E aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000C25 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C2C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000C33 aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000C3D aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C44 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C55 aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C5A aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000C61 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C6F aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000C76 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C7C aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C83 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C83                                         ; LOAD:0000000000000628↑o
LOAD:0000000000000C8A aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C91 aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C97 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C9F aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000CAB aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000CB9 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000CC0 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000CC7 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000CD2 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000CD9 aInotifyInit    db 'inotify_init',0     ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000CE6 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000CF2 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000CFB aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000D02 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000D09 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000D14 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000D19 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D20 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D20                                         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000D3E aInotifyAddWatc db 'inotify_add_watch',0
LOAD:0000000000000D3E                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000D50 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000D5F aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000D65 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000D6D aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000D6D                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000D7C aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000D8C aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000D93 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D93                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000DA5 aStrtodL        db 'strtod_l',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000DAE aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000DB5 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000DC0 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000DC0                                         ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000DD3 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000DE2 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000DE7 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DF2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000E02 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000E0F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F50↓o
LOAD:0000000000000E1B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F60↓o
LOAD:0000000000000E26 aGlibc215       db 'GLIBC_2.15',0       ; DATA XREF: LOAD:0000000000000F70↓o
LOAD:0000000000000E31 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F80↓o
LOAD:0000000000000E3B aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000F90↓o
LOAD:0000000000000E45 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000FA0↓o
LOAD:0000000000000E51 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E51                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000E6D aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000E7C aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E7C                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E96 ; ELF GNU Symbol Version Table
LOAD:0000000000000E96                 dw 0
LOAD:0000000000000E98                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 2                    ; raise@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000EA0                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000EA6                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000EA8                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000EAA                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 2                    ; strtod@@GLIBC_2.2.5
LOAD:0000000000000EAE                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000EB0                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 3                    ; strtod_l@@GLIBC_2.3
LOAD:0000000000000EB6                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000EB8                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000EBA                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000EC4                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000EC8                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000ECA                 dw 5                    ; __fdelt_chk@@GLIBC_2.15
LOAD:0000000000000ECC                 dw 3                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000ECE                 dw 2                    ; nanosleep@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000ED4                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ED6                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000EDE                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000EE0                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000EE2                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000EE4                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000EE6                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EE8                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000EEA                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000EEE                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000EF2                 dw 2                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 4                    ; inotify_init@@GLIBC_2.4
LOAD:0000000000000EF6                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000EF8                 dw 2                    ; select@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000EFC                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000EFE                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F00                 dw 4                    ; inotify_add_watch@@GLIBC_2.4
LOAD:0000000000000F02                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000F06                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F08                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F0C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 7                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F10                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 2                    ; memrchr@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F20                 dw 7                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F22                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F24                 dw 2                    ; fflush_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 4                    ; inotify_rm_watch@@GLIBC_2.4
LOAD:0000000000000F2C                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 3                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F30                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F36                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000F38                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000F3C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000F40 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000F40                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_AD8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F50                 Elf64_Vernaux <9691974h, 0, 7, offset aGlibc234 - offset byte_AD8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F50                                10h>
LOAD:0000000000000F60                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_AD8, \ ; "GLIBC_2.14"
LOAD:0000000000000F60                                10h>
LOAD:0000000000000F70                 Elf64_Vernaux <6969195h, 0, 5, offset aGlibc215 - offset byte_AD8, \ ; "GLIBC_2.15"
LOAD:0000000000000F70                                10h>
LOAD:0000000000000F80                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_AD8, \ ; "GLIBC_2.4"
LOAD:0000000000000F80                                10h>
LOAD:0000000000000F90                 Elf64_Vernaux <0D696913h, 0, 3, offset aGlibc23 - offset byte_AD8, \ ; "GLIBC_2.3"
LOAD:0000000000000F90                                10h>
LOAD:0000000000000FA0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_AD8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000FB0 ; ELF RELA Relocation Table
LOAD:0000000000000FB0                 Elf64_Rela <20F910h, 8, 49B0h> ; R_X86_64_RELATIVE +49B0h
LOAD:0000000000000FC8                 Elf64_Rela <20F918h, 8, 4970h> ; R_X86_64_RELATIVE +4970h
LOAD:0000000000000FE0                 Elf64_Rela <20F920h, 8, 0B833h> ; R_X86_64_RELATIVE +0B833h
LOAD:0000000000000FF8                 Elf64_Rela <20F940h, 8, 0B848h> ; R_X86_64_RELATIVE +0B848h
LOAD:0000000000001010                 Elf64_Rela <20F960h, 8, 0B81Bh> ; R_X86_64_RELATIVE +0B81Bh
LOAD:0000000000001028                 Elf64_Rela <20F980h, 8, 0B996h> ; R_X86_64_RELATIVE +0B996h
LOAD:0000000000001040                 Elf64_Rela <20F9A0h, 8, 0B9AAh> ; R_X86_64_RELATIVE +0B9AAh
LOAD:0000000000001058                 Elf64_Rela <20F9C0h, 8, 0B9BBh> ; R_X86_64_RELATIVE +0B9BBh
LOAD:0000000000001070                 Elf64_Rela <20F9E0h, 8, 0B9BFh> ; R_X86_64_RELATIVE +0B9BFh
LOAD:0000000000001088                 Elf64_Rela <20FA00h, 8, 0B9D3h> ; R_X86_64_RELATIVE +0B9D3h
LOAD:00000000000010A0                 Elf64_Rela <20FA20h, 8, 0B9D9h> ; R_X86_64_RELATIVE +0B9D9h
LOAD:00000000000010B8                 Elf64_Rela <20FA40h, 8, 0B9DFh> ; R_X86_64_RELATIVE +0B9DFh
LOAD:00000000000010D0                 Elf64_Rela <20FA60h, 8, 0B9E6h> ; R_X86_64_RELATIVE +0B9E6h
LOAD:00000000000010E8                 Elf64_Rela <20FA80h, 8, 0B9F5h> ; R_X86_64_RELATIVE +0B9F5h
LOAD:0000000000001100                 Elf64_Rela <20FAA0h, 8, 0B9FDh> ; R_X86_64_RELATIVE +0B9FDh
LOAD:0000000000001118                 Elf64_Rela <20FAC0h, 8, 0BA0Dh> ; R_X86_64_RELATIVE +0BA0Dh
LOAD:0000000000001130                 Elf64_Rela <20FAE0h, 8, 0BA12h> ; R_X86_64_RELATIVE +0BA12h
LOAD:0000000000001148                 Elf64_Rela <20FB20h, 8, 0BA1Ah> ; R_X86_64_RELATIVE +0BA1Ah
LOAD:0000000000001160                 Elf64_Rela <20FB28h, 8, 0B702h> ; R_X86_64_RELATIVE +0B702h
LOAD:0000000000001178                 Elf64_Rela <20FB40h, 8, 0CAE9h> ; R_X86_64_RELATIVE +0CAE9h
LOAD:0000000000001190                 Elf64_Rela <20FB48h, 8, 0CAF1h> ; R_X86_64_RELATIVE +0CAF1h
LOAD:00000000000011A8                 Elf64_Rela <20FB50h, 8, 0CAF7h> ; R_X86_64_RELATIVE +0CAF7h
LOAD:00000000000011C0                 Elf64_Rela <20FB58h, 8, 0CB04h> ; R_X86_64_RELATIVE +0CB04h
LOAD:00000000000011D8                 Elf64_Rela <20FB60h, 8, 0CB11h> ; R_X86_64_RELATIVE +0CB11h
LOAD:00000000000011F0                 Elf64_Rela <20FB68h, 8, 0B6BDh> ; R_X86_64_RELATIVE +0B6BDh
LOAD:0000000000001208                 Elf64_Rela <20FB70h, 8, 0CB25h> ; R_X86_64_RELATIVE +0CB25h
LOAD:0000000000001220                 Elf64_Rela <20FB78h, 8, 0CB0Ah> ; R_X86_64_RELATIVE +0CB0Ah
LOAD:0000000000001238                 Elf64_Rela <20FB80h, 8, 0B7E7h> ; R_X86_64_RELATIVE +0B7E7h
LOAD:0000000000001250                 Elf64_Rela <20FB88h, 8, 0CB2Dh> ; R_X86_64_RELATIVE +0CB2Dh
LOAD:0000000000001268                 Elf64_Rela <210008h, 8, 210008h> ; R_X86_64_RELATIVE +210008h
LOAD:0000000000001280                 Elf64_Rela <210028h, 8, 0B7EFh> ; R_X86_64_RELATIVE +0B7EFh
LOAD:0000000000001298                 Elf64_Rela <210030h, 8, 0C970h> ; R_X86_64_RELATIVE +0C970h
LOAD:00000000000012B0                 Elf64_Rela <210038h, 8, 65D0h> ; R_X86_64_RELATIVE +65D0h
LOAD:00000000000012C8                 Elf64_Rela <2100A0h, 8, 2100B0h> ; R_X86_64_RELATIVE +2100B0h
LOAD:00000000000012E0                 Elf64_Rela <2100B8h, 8, 210140h> ; R_X86_64_RELATIVE +210140h
LOAD:00000000000012F8                 Elf64_Rela <20FFD8h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001310                 Elf64_Rela <20FFE0h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001328                 Elf64_Rela <20FFE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001340                 Elf64_Rela <20FFF0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001358                 Elf64_Rela <20FFF8h, 4B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001370                 Elf64_Rela <2100C0h, 4E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001388                 Elf64_Rela <2100C8h, 4D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000013A0                 Elf64_Rela <2100D0h, 5300000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000013B8                 Elf64_Rela <2100D8h, 5400000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000013D0                 Elf64_Rela <2100E0h, 5000000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000013E8                 Elf64_Rela <210100h, 5200000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001400 ; ELF JMPREL Relocation Table
LOAD:0000000000001400                 Elf64_Rela <20FDA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001418                 Elf64_Rela <20FDA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:0000000000001430                 Elf64_Rela <20FDB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001448                 Elf64_Rela <20FDB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001460                 Elf64_Rela <20FDC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001478                 Elf64_Rela <20FDC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001490                 Elf64_Rela <20FDD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000014A8                 Elf64_Rela <20FDD8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000014C0                 Elf64_Rela <20FDE0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:00000000000014D8                 Elf64_Rela <20FDE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT strtod
LOAD:00000000000014F0                 Elf64_Rela <20FDF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001508                 Elf64_Rela <20FDF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001520                 Elf64_Rela <20FE00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001538                 Elf64_Rela <20FE08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strtod_l
LOAD:0000000000001550                 Elf64_Rela <20FE10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001568                 Elf64_Rela <20FE18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001580                 Elf64_Rela <20FE20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001598                 Elf64_Rela <20FE28h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000015B0                 Elf64_Rela <20FE30h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000015C8                 Elf64_Rela <20FE38h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000015E0                 Elf64_Rela <20FE40h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000015F8                 Elf64_Rela <20FE48h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001610                 Elf64_Rela <20FE50h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001628                 Elf64_Rela <20FE58h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001640                 Elf64_Rela <20FE60h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __fdelt_chk
LOAD:0000000000001658                 Elf64_Rela <20FE68h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:0000000000001670                 Elf64_Rela <20FE70h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT nanosleep
LOAD:0000000000001688                 Elf64_Rela <20FE78h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000016A0                 Elf64_Rela <20FE80h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000016B8                 Elf64_Rela <20FE88h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000016D0                 Elf64_Rela <20FE90h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000016E8                 Elf64_Rela <20FE98h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001700                 Elf64_Rela <20FEA0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001718                 Elf64_Rela <20FEA8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001730                 Elf64_Rela <20FEB0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001748                 Elf64_Rela <20FEB8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001760                 Elf64_Rela <20FEC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001778                 Elf64_Rela <20FEC8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001790                 Elf64_Rela <20FED0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000017A8                 Elf64_Rela <20FED8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000017C0                 Elf64_Rela <20FEE0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000017D8                 Elf64_Rela <20FEE8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000017F0                 Elf64_Rela <20FEF0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001808                 Elf64_Rela <20FEF8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT inotify_init
LOAD:0000000000001820                 Elf64_Rela <20FF00h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001838                 Elf64_Rela <20FF08h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT select
LOAD:0000000000001850                 Elf64_Rela <20FF10h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001868                 Elf64_Rela <20FF18h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001880                 Elf64_Rela <20FF20h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001898                 Elf64_Rela <20FF28h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT inotify_add_watch
LOAD:00000000000018B0                 Elf64_Rela <20FF30h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000018C8                 Elf64_Rela <20FF38h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000018E0                 Elf64_Rela <20FF40h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000018F8                 Elf64_Rela <20FF48h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001910                 Elf64_Rela <20FF50h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001928                 Elf64_Rela <20FF58h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001940                 Elf64_Rela <20FF60h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001958                 Elf64_Rela <20FF68h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001970                 Elf64_Rela <20FF70h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT memrchr
LOAD:0000000000001988                 Elf64_Rela <20FF78h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000019A0                 Elf64_Rela <20FF80h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000019B8                 Elf64_Rela <20FF88h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:00000000000019D0                 Elf64_Rela <20FF90h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000019E8                 Elf64_Rela <20FF98h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001A00                 Elf64_Rela <20FFA0h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001A18                 Elf64_Rela <20FFA8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001A30                 Elf64_Rela <20FFB0h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT fflush_unlocked
LOAD:0000000000001A48                 Elf64_Rela <20FFB8h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001A60                 Elf64_Rela <20FFC0h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001A78                 Elf64_Rela <20FFC8h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT inotify_rm_watch
LOAD:0000000000001A90                 Elf64_Rela <20FFD0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001A90 LOAD            ends
LOAD:0000000000001A90
.init:0000000000001AA8 ; ===========================================================================
.init:0000000000001AA8
.init:0000000000001AA8 ; Segment type: Pure code
.init:0000000000001AA8 ; Segment permissions: Read/Execute
.init:0000000000001AA8 _init           segment dword public 'CODE' use64
.init:0000000000001AA8                 assume cs:_init
.init:0000000000001AA8                 ;org 1AA8h
.init:0000000000001AA8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001AA8
.init:0000000000001AA8 ; =============== S U B R O U T I N E =======================================
.init:0000000000001AA8
.init:0000000000001AA8
.init:0000000000001AA8                 public _init_proc
.init:0000000000001AA8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001AA8                 sub     rsp, 8          ; _init
.init:0000000000001AAC                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001AB3                 test    rax, rax
.init:0000000000001AB6                 jz      short loc_1ABA
.init:0000000000001AB8                 call    rax ; __gmon_start__
.init:0000000000001ABA
.init:0000000000001ABA loc_1ABA:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001ABA                 add     rsp, 8
.init:0000000000001ABE                 retn
.init:0000000000001ABE _init_proc      endp
.init:0000000000001ABE
.init:0000000000001ABE _init           ends
.init:0000000000001ABE
LOAD:0000000000001ABF ; ===========================================================================
LOAD:0000000000001ABF
LOAD:0000000000001ABF ; Segment type: Pure code
LOAD:0000000000001ABF ; Segment permissions: Read/Execute
LOAD:0000000000001ABF LOAD            segment byte public 'CODE' use64
LOAD:0000000000001ABF                 assume cs:LOAD
LOAD:0000000000001ABF                 ;org 1ABFh
LOAD:0000000000001ABF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001ABF                 align 20h
LOAD:0000000000001ABF LOAD            ends
LOAD:0000000000001ABF
.plt:0000000000001AC0 ; ===========================================================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Segment type: Pure code
.plt:0000000000001AC0 ; Segment permissions: Read/Execute
.plt:0000000000001AC0 _plt            segment para public 'CODE' use64
.plt:0000000000001AC0                 assume cs:_plt
.plt:0000000000001AC0                 ;org 1AC0h
.plt:0000000000001AC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0
.plt:0000000000001AC0 sub_1AC0        proc near               ; CODE XREF: .plt:0000000000001ADB↓j
.plt:0000000000001AC0                                         ; .plt:0000000000001AEB↓j ...
.plt:0000000000001AC0 ; __unwind {
.plt:0000000000001AC0                 push    cs:qword_20FD90
.plt:0000000000001AC6                 jmp     cs:qword_20FD98
.plt:0000000000001AC6 sub_1AC0        endp
.plt:0000000000001AC6
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001ACC                 align 10h
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; char *getenv(const char *name)
.plt:0000000000001AD0 _getenv         proc near               ; CODE XREF: posix2_version+21↓p
.plt:0000000000001AD0                 jmp     cs:getenv_ptr
.plt:0000000000001AD0 _getenv         endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    0
.plt:0000000000001ADB                 jmp     sub_1AC0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int raise(int sig)
.plt:0000000000001AE0 _raise          proc near               ; CODE XREF: main+28F6↓p
.plt:0000000000001AE0                 jmp     cs:raise_ptr
.plt:0000000000001AE0 _raise          endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    1
.plt:0000000000001AEB                 jmp     sub_1AC0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; void free(void *ptr)
.plt:0000000000001AF0 _free           proc near               ; CODE XREF: main+D0F↓p
.plt:0000000000001AF0                                         ; main+D4F↓p ...
.plt:0000000000001AF0                 jmp     cs:free_ptr
.plt:0000000000001AF0 _free           endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    2
.plt:0000000000001AFB                 jmp     sub_1AC0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: noreturn thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void __noreturn abort(void)
.plt:0000000000001B00 _abort          proc near               ; CODE XREF: safe_hasher:loc_6DAD↓p
.plt:0000000000001B00                                         ; hash_get_first+3C↓p ...
.plt:0000000000001B00                 jmp     cs:abort_ptr
.plt:0000000000001B00 _abort          endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    3
.plt:0000000000001B0B                 jmp     sub_1AC0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int *__errno_location(void)
.plt:0000000000001B10 ___errno_location proc near             ; CODE XREF: main+5E1↓p
.plt:0000000000001B10                                         ; main:loc_295D↓p ...
.plt:0000000000001B10                 jmp     cs:__errno_location_ptr
.plt:0000000000001B10 ___errno_location endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    4
.plt:0000000000001B1B                 jmp     sub_1AC0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001B20 _strncmp        proc near               ; CODE XREF: usage+37C↓p
.plt:0000000000001B20                                         ; usage+43D↓p ...
.plt:0000000000001B20                 jmp     cs:strncmp_ptr
.plt:0000000000001B20 _strncmp        endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    5
.plt:0000000000001B2B                 jmp     sub_1AC0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: noreturn thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void __noreturn _exit(int status)
.plt:0000000000001B30 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001B30                 jmp     cs:_exit_ptr
.plt:0000000000001B30 __exit          endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    6
.plt:0000000000001B3B                 jmp     sub_1AC0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; size_t __fpending(FILE *fp)
.plt:0000000000001B40 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001B40                 jmp     cs:__fpending_ptr
.plt:0000000000001B40 ___fpending     endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    7
.plt:0000000000001B4B                 jmp     sub_1AC0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int isatty(int fd)
.plt:0000000000001B50 _isatty         proc near               ; CODE XREF: main+9AB↓p
.plt:0000000000001B50                 jmp     cs:isatty_ptr
.plt:0000000000001B50 _isatty         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    8
.plt:0000000000001B5B                 jmp     sub_1AC0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; double strtod(const char *nptr, char **endptr)
.plt:0000000000001B60 _strtod         proc near               ; CODE XREF: cl_strtod+25↓p
.plt:0000000000001B60                 jmp     cs:strtod_ptr
.plt:0000000000001B60 _strtod         endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    9
.plt:0000000000001B6B                 jmp     sub_1AC0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001B70 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001B70                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001B70                 jmp     cs:fcntl_ptr
.plt:0000000000001B70 _fcntl          endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    0Ah
.plt:0000000000001B7B                 jmp     sub_1AC0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001B80 _clearerr_unlocked proc near            ; CODE XREF: xwrite_stdout_part_10+30↓p
.plt:0000000000001B80                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001B80 _clearerr_unlocked endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    0Bh
.plt:0000000000001B8B                 jmp     sub_1AC0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; char *textdomain(const char *domainname)
.plt:0000000000001B90 _textdomain     proc near               ; CODE XREF: main+68↓p
.plt:0000000000001B90                 jmp     cs:textdomain_ptr
.plt:0000000000001B90 _textdomain     endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    0Ch
.plt:0000000000001B9B                 jmp     sub_1AC0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
.plt:0000000000001BA0 _strtod_l       proc near               ; CODE XREF: c_strtod+30↓j
.plt:0000000000001BA0                 jmp     cs:strtod_l_ptr
.plt:0000000000001BA0 _strtod_l       endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    0Dh
.plt:0000000000001BAB                 jmp     sub_1AC0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int fclose(FILE *stream)
.plt:0000000000001BB0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001BB0                                         ; rpl_fclose+6B↓j
.plt:0000000000001BB0                 jmp     cs:fclose_ptr
.plt:0000000000001BB0 _fclose         endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    0Eh
.plt:0000000000001BBB                 jmp     sub_1AC0
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001BC0 _bindtextdomain proc near               ; CODE XREF: main+5C↓p
.plt:0000000000001BC0                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001BC0 _bindtextdomain endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    0Fh
.plt:0000000000001BCB                 jmp     sub_1AC0
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001BD0 _dcgettext      proc near               ; CODE XREF: main+266↓p
.plt:0000000000001BD0                                         ; main+30F↓p ...
.plt:0000000000001BD0                 jmp     cs:dcgettext_ptr
.plt:0000000000001BD0 _dcgettext      endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    10h
.plt:0000000000001BDB                 jmp     sub_1AC0
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001BE0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001BE0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001BE0 ___ctype_get_mb_cur_max endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    11h
.plt:0000000000001BEB                 jmp     sub_1AC0
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; size_t strlen(const char *s)
.plt:0000000000001BF0 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000001BF0                                         ; argmatch+AE↓p ...
.plt:0000000000001BF0                 jmp     cs:strlen_ptr
.plt:0000000000001BF0 _strlen         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    12h
.plt:0000000000001BFB                 jmp     sub_1AC0
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001C00 ___lxstat       proc near               ; CODE XREF: main+1D55↓p
.plt:0000000000001C00                                         ; recheck+468↓p ...
.plt:0000000000001C00                 jmp     cs:__lxstat_ptr
.plt:0000000000001C00 ___lxstat       endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    13h
.plt:0000000000001C0B                 jmp     sub_1AC0
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: noreturn thunk
.plt:0000000000001C10
.plt:0000000000001C10 ___stack_chk_fail proc near             ; CODE XREF: main:loc_483C↓p
.plt:0000000000001C10                                         ; start_lines:loc_4C41↓p ...
.plt:0000000000001C10                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001C10 ___stack_chk_fail endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    14h
.plt:0000000000001C1B                 jmp     sub_1AC0
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001C20 _getopt_long    proc near               ; CODE XREF: main+106↓p
.plt:0000000000001C20                 jmp     cs:getopt_long_ptr
.plt:0000000000001C20 _getopt_long    endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    15h
.plt:0000000000001C2B                 jmp     sub_1AC0
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001C30 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001C30                 jmp     cs:mbrtowc_ptr
.plt:0000000000001C30 _mbrtowc        endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    16h
.plt:0000000000001C3B                 jmp     sub_1AC0
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *strchr(const char *s, int c)
.plt:0000000000001C40 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:0000000000001C40                                         ; xstrtoumax+143↓p ...
.plt:0000000000001C40                 jmp     cs:strchr_ptr
.plt:0000000000001C40 _strchr         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    17h
.plt:0000000000001C4B                 jmp     sub_1AC0
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ___fdelt_chk    proc near               ; CODE XREF: main+2217↓p
.plt:0000000000001C50                 jmp     cs:__fdelt_chk_ptr
.plt:0000000000001C50 ___fdelt_chk    endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    18h
.plt:0000000000001C5B                 jmp     sub_1AC0
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:0000000000001C60 _newlocale      proc near               ; CODE XREF: c_strtod+5E↓p
.plt:0000000000001C60                 jmp     cs:newlocale_ptr
.plt:0000000000001C60 _newlocale      endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    19h
.plt:0000000000001C6B                 jmp     sub_1AC0
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
.plt:0000000000001C70 _nanosleep      proc near               ; CODE XREF: rpl_nanosleep+6F↓p
.plt:0000000000001C70                                         ; rpl_nanosleep+92↓p
.plt:0000000000001C70                 jmp     cs:nanosleep_ptr
.plt:0000000000001C70 _nanosleep      endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    1Ah
.plt:0000000000001C7B                 jmp     sub_1AC0
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001C80 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000001C80                 jmp     cs:__overflow_ptr
.plt:0000000000001C80 ___overflow     endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    1Bh
.plt:0000000000001C8B                 jmp     sub_1AC0
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; char *strrchr(const char *s, int c)
.plt:0000000000001C90 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001C90                 jmp     cs:strrchr_ptr
.plt:0000000000001C90 _strrchr        endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    1Ch
.plt:0000000000001C9B                 jmp     sub_1AC0
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001CA0 _lseek          proc near               ; CODE XREF: main+8C3↓p
.plt:0000000000001CA0                                         ; main+1B9E↓p ...
.plt:0000000000001CA0                 jmp     cs:lseek_ptr
.plt:0000000000001CA0 _lseek          endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    1Dh
.plt:0000000000001CAB                 jmp     sub_1AC0
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: noreturn thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001CB0 ___assert_fail  proc near               ; CODE XREF: main+28DD↓p
.plt:0000000000001CB0                                         ; recheck+645↓p ...
.plt:0000000000001CB0                 jmp     cs:__assert_fail_ptr
.plt:0000000000001CB0 ___assert_fail  endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    1Eh
.plt:0000000000001CBB                 jmp     sub_1AC0
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001CC0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001CC0                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001CC0 ___strtoul_internal endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    1Fh
.plt:0000000000001CCB                 jmp     sub_1AC0
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001CD0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001CD0                                         ; xzalloc+12↓j
.plt:0000000000001CD0                 jmp     cs:memset_ptr
.plt:0000000000001CD0 _memset         endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    20h ; ' '
.plt:0000000000001CDB                 jmp     sub_1AC0
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int close(int fd)
.plt:0000000000001CE0 _close          proc near               ; CODE XREF: main+D78↓p
.plt:0000000000001CE0                                         ; main+1307↓p ...
.plt:0000000000001CE0                 jmp     cs:close_ptr
.plt:0000000000001CE0 _close          endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    21h ; '!'
.plt:0000000000001CEB                 jmp     sub_1AC0
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001CF0 _memchr         proc near               ; CODE XREF: main+C07↓p
.plt:0000000000001CF0                                         ; main+1438↓p ...
.plt:0000000000001CF0                 jmp     cs:memchr_ptr
.plt:0000000000001CF0 _memchr         endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    22h ; '"'
.plt:0000000000001CFB                 jmp     sub_1AC0
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001D00 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001D00                 jmp     cs:read_ptr
.plt:0000000000001D00 _read           endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    23h ; '#'
.plt:0000000000001D0B                 jmp     sub_1AC0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001D10 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001D10                                         ; argmatch_valid+96↓p ...
.plt:0000000000001D10                 jmp     cs:memcmp_ptr
.plt:0000000000001D10 _memcmp         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    24h ; '$'
.plt:0000000000001D1B                 jmp     sub_1AC0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001D20 _fputs_unlocked proc near               ; CODE XREF: usage+C4↓p
.plt:0000000000001D20                                         ; usage+E9↓p ...
.plt:0000000000001D20                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001D20 _fputs_unlocked endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    25h ; '%'
.plt:0000000000001D2B                 jmp     sub_1AC0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001D30 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:0000000000001D30                                         ; hash_rehash+C6↓p ...
.plt:0000000000001D30                 jmp     cs:calloc_ptr
.plt:0000000000001D30 _calloc         endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    26h ; '&'
.plt:0000000000001D3B                 jmp     sub_1AC0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001D40 _strcmp         proc near               ; CODE XREF: main+90F↓p
.plt:0000000000001D40                                         ; main+1212↓p ...
.plt:0000000000001D40                 jmp     cs:strcmp_ptr
.plt:0000000000001D40 _strcmp         endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    27h ; '''
.plt:0000000000001D4B                 jmp     sub_1AC0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001D50 _strtol         proc near               ; CODE XREF: posix2_version+5B↓p
.plt:0000000000001D50                 jmp     cs:strtol_ptr
.plt:0000000000001D50 _strtol         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    28h ; '('
.plt:0000000000001D5B                 jmp     sub_1AC0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001D60 _memcpy         proc near               ; CODE XREF: main+C76↓p
.plt:0000000000001D60                                         ; main+1033↓p ...
.plt:0000000000001D60                 jmp     cs:memcpy_ptr
.plt:0000000000001D60 _memcpy         endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    29h ; ')'
.plt:0000000000001D6B                 jmp     sub_1AC0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; int kill(__pid_t pid, int sig)
.plt:0000000000001D70 _kill           proc near               ; CODE XREF: main+5D8↓p
.plt:0000000000001D70                                         ; main+1A63↓p ...
.plt:0000000000001D70                 jmp     cs:kill_ptr
.plt:0000000000001D70 _kill           endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    2Ah ; '*'
.plt:0000000000001D7B                 jmp     sub_1AC0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int inotify_init(void)
.plt:0000000000001D80 _inotify_init   proc near               ; CODE XREF: main:loc_3D53↓p
.plt:0000000000001D80                 jmp     cs:inotify_init_ptr
.plt:0000000000001D80 _inotify_init   endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    2Bh ; '+'
.plt:0000000000001D8B                 jmp     sub_1AC0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; int fileno(FILE *stream)
.plt:0000000000001D90 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001D90                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001D90                 jmp     cs:fileno_ptr
.plt:0000000000001D90 _fileno         endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    2Ch ; ','
.plt:0000000000001D9B                 jmp     sub_1AC0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
.plt:0000000000001DA0 _select         proc near               ; CODE XREF: main+1802↓p
.plt:0000000000001DA0                                         ; main+2261↓p
.plt:0000000000001DA0                 jmp     cs:select_ptr
.plt:0000000000001DA0 _select         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    2Dh ; '-'
.plt:0000000000001DAB                 jmp     sub_1AC0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001DB0 ___xstat        proc near               ; CODE XREF: main+20DD↓p
.plt:0000000000001DB0                 jmp     cs:__xstat_ptr
.plt:0000000000001DB0 ___xstat        endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    2Eh ; '.'
.plt:0000000000001DBB                 jmp     sub_1AC0
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; void *malloc(size_t size)
.plt:0000000000001DC0 _malloc         proc near               ; CODE XREF: mdir_name+1F↓p
.plt:0000000000001DC0                                         ; transfer_entries+125↓p ...
.plt:0000000000001DC0                 jmp     cs:malloc_ptr
.plt:0000000000001DC0 _malloc         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    2Fh ; '/'
.plt:0000000000001DCB                 jmp     sub_1AC0
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; int fflush(FILE *stream)
.plt:0000000000001DD0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001DD0                                         ; rpl_fflush+3B↓j
.plt:0000000000001DD0                 jmp     cs:fflush_ptr
.plt:0000000000001DD0 _fflush         endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    30h ; '0'
.plt:0000000000001DDB                 jmp     sub_1AC0
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int inotify_add_watch(int fd, const char *name, uint32_t mask)
.plt:0000000000001DE0 _inotify_add_watch proc near            ; CODE XREF: main+1F0F↓p
.plt:0000000000001DE0                                         ; main+1F37↓p ...
.plt:0000000000001DE0                 jmp     cs:inotify_add_watch_ptr
.plt:0000000000001DE0 _inotify_add_watch endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    31h ; '1'
.plt:0000000000001DEB                 jmp     sub_1AC0
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001DF0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001DF0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001DF0 _nl_langinfo    endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    32h ; '2'
.plt:0000000000001DFB                 jmp     sub_1AC0
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001E00 ___fxstat       proc near               ; CODE XREF: main+6DC↓p
.plt:0000000000001E00                                         ; main+861↓p ...
.plt:0000000000001E00                 jmp     cs:__fxstat_ptr
.plt:0000000000001E00 ___fxstat       endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    33h ; '3'
.plt:0000000000001E0B                 jmp     sub_1AC0
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; int __freading(FILE *fp)
.plt:0000000000001E10 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001E10                                         ; rpl_fflush+9↓p
.plt:0000000000001E10                 jmp     cs:__freading_ptr
.plt:0000000000001E10 ___freading     endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    34h ; '4'
.plt:0000000000001E1B                 jmp     sub_1AC0
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001E20 _fwrite_unlocked proc near              ; CODE XREF: xwrite_stdout_part_10+18↓p
.plt:0000000000001E20                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001E20 _fwrite_unlocked endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    35h ; '5'
.plt:0000000000001E2B                 jmp     sub_1AC0
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001E30 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001E30                 jmp     cs:realloc_ptr
.plt:0000000000001E30 _realloc        endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    36h ; '6'
.plt:0000000000001E3B                 jmp     sub_1AC0
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; char *setlocale(int category, const char *locale)
.plt:0000000000001E40 _setlocale      proc near               ; CODE XREF: main+49↓p
.plt:0000000000001E40                                         ; usage+363↓p ...
.plt:0000000000001E40                 jmp     cs:setlocale_ptr
.plt:0000000000001E40 _setlocale      endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    37h ; '7'
.plt:0000000000001E4B                 jmp     sub_1AC0
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ___printf_chk   proc near               ; CODE XREF: main+CCE↓p
.plt:0000000000001E50                                         ; main+16C0↓p ...
.plt:0000000000001E50                 jmp     cs:__printf_chk_ptr
.plt:0000000000001E50 ___printf_chk   endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    38h ; '8'
.plt:0000000000001E5B                 jmp     sub_1AC0
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001E60 _error          proc near               ; CODE XREF: main+323↓p
.plt:0000000000001E60                                         ; main+607↓p ...
.plt:0000000000001E60                 jmp     cs:error_ptr
.plt:0000000000001E60 _error          endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    39h ; '9'
.plt:0000000000001E6B                 jmp     sub_1AC0
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; void *memrchr(const void *s, int c, size_t n)
.plt:0000000000001E70 _memrchr        proc near               ; CODE XREF: file_lines+F8↓p
.plt:0000000000001E70                 jmp     cs:memrchr_ptr
.plt:0000000000001E70 _memrchr        endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    3Ah ; ':'
.plt:0000000000001E7B                 jmp     sub_1AC0
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; int open(const char *file, int oflag, ...)
.plt:0000000000001E80 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000001E80                 jmp     cs:open_ptr
.plt:0000000000001E80 _open           endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    3Bh ; ';'
.plt:0000000000001E8B                 jmp     sub_1AC0
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001E90 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_B50A↓j
.plt:0000000000001E90                 jmp     cs:fseeko_ptr
.plt:0000000000001E90 _fseeko         endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    3Ch ; '<'
.plt:0000000000001E9B                 jmp     sub_1AC0
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001EA0 _fstatfs        proc near               ; CODE XREF: fremote+1E↓p
.plt:0000000000001EA0                 jmp     cs:fstatfs_ptr
.plt:0000000000001EA0 _fstatfs        endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    3Dh ; '='
.plt:0000000000001EAB                 jmp     sub_1AC0
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001EB0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001EB0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001EB0 ___cxa_atexit   endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    3Eh ; '>'
.plt:0000000000001EBB                 jmp     sub_1AC0
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: noreturn thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; void __noreturn exit(int status)
.plt:0000000000001EC0 _exit           proc near               ; CODE XREF: main+23C↓p
.plt:0000000000001EC0                                         ; main+2741↓p ...
.plt:0000000000001EC0                 jmp     cs:exit_ptr
.plt:0000000000001EC0 _exit           endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    3Fh ; '?'
.plt:0000000000001ECB                 jmp     sub_1AC0
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001ED0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001ED0                 jmp     cs:fwrite_ptr
.plt:0000000000001ED0 _fwrite         endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    40h ; '@'
.plt:0000000000001EDB                 jmp     sub_1AC0
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001EE0                                         ; argmatch_valid+7A↓p ...
.plt:0000000000001EE0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001EE0 ___fprintf_chk  endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    41h ; 'A'
.plt:0000000000001EEB                 jmp     sub_1AC0
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; int fflush_unlocked(FILE *stream)
.plt:0000000000001EF0 _fflush_unlocked proc near              ; CODE XREF: main+1A1C↓p
.plt:0000000000001EF0                                         ; main+1E1A↓p ...
.plt:0000000000001EF0                 jmp     cs:fflush_unlocked_ptr
.plt:0000000000001EF0 _fflush_unlocked endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    42h ; 'B'
.plt:0000000000001EFB                 jmp     sub_1AC0
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001F00 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001F00                 jmp     cs:mbsinit_ptr
.plt:0000000000001F00 _mbsinit        endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    43h ; 'C'
.plt:0000000000001F0B                 jmp     sub_1AC0
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int iswprint(wint_t wc)
.plt:0000000000001F10 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001F10                 jmp     cs:iswprint_ptr
.plt:0000000000001F10 _iswprint       endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    44h ; 'D'
.plt:0000000000001F1B                 jmp     sub_1AC0
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; int inotify_rm_watch(int fd, int wd)
.plt:0000000000001F20 _inotify_rm_watch proc near             ; CODE XREF: main+1FF6↓p
.plt:0000000000001F20                                         ; main+2006↓p ...
.plt:0000000000001F20                 jmp     cs:inotify_rm_watch_ptr
.plt:0000000000001F20 _inotify_rm_watch endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    45h ; 'E'
.plt:0000000000001F2B                 jmp     sub_1AC0
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001F30 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001F30                                         ; xstrtoumax+55↓p
.plt:0000000000001F30                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001F30 ___ctype_b_loc  endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    46h ; 'F'
.plt:0000000000001F3B                 jmp     sub_1AC0
.plt:0000000000001F3B ; } // starts at 1AC0
.plt:0000000000001F3B _plt            ends
.plt:0000000000001F3B
.plt.got:0000000000001F40 ; ===========================================================================
.plt.got:0000000000001F40
.plt.got:0000000000001F40 ; Segment type: Pure code
.plt.got:0000000000001F40 ; Segment permissions: Read/Execute
.plt.got:0000000000001F40 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001F40                 assume cs:_plt_got
.plt.got:0000000000001F40                 ;org 1F40h
.plt.got:0000000000001F40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001F40
.plt.got:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001F40
.plt.got:0000000000001F40 ; Attributes: thunk
.plt.got:0000000000001F40
.plt.got:0000000000001F40 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001F40 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001F40 ; __unwind {
.plt.got:0000000000001F40                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001F40 __cxa_finalize  endp
.plt.got:0000000000001F40
.plt.got:0000000000001F40 ; ---------------------------------------------------------------------------
.plt.got:0000000000001F46                 align 8
.plt.got:0000000000001F46 ; } // starts at 1F40
.plt.got:0000000000001F46 _plt_got        ends
.plt.got:0000000000001F46
LOAD:0000000000001F48 ; ===========================================================================
LOAD:0000000000001F48
LOAD:0000000000001F48 ; Segment type: Pure code
LOAD:0000000000001F48 ; Segment permissions: Read/Execute
LOAD:0000000000001F48 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001F48                 assume cs:LOAD
LOAD:0000000000001F48                 ;org 1F48h
LOAD:0000000000001F48                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001F48                 align 10h
LOAD:0000000000001F48 LOAD            ends
LOAD:0000000000001F48
.text:0000000000001F50 ; ===========================================================================
.text:0000000000001F50
.text:0000000000001F50 ; Segment type: Pure code
.text:0000000000001F50 ; Segment permissions: Read/Execute
.text:0000000000001F50 _text           segment para public 'CODE' use64
.text:0000000000001F50                 assume cs:_text
.text:0000000000001F50                 ;org 1F50h
.text:0000000000001F50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001F50
.text:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F50
.text:0000000000001F50
.text:0000000000001F50 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001F50                 public main
.text:0000000000001F50 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001F50
.text:0000000000001F50 var_2F8         = qword ptr -2F8h
.text:0000000000001F50 fildes          = dword ptr -2F0h
.text:0000000000001F50 buf             = qword ptr -2E8h
.text:0000000000001F50 var_2E0         = qword ptr -2E0h
.text:0000000000001F50 offset          = qword ptr -2D8h
.text:0000000000001F50 var_2D0         = qword ptr -2D0h
.text:0000000000001F50 var_2C8         = qword ptr -2C8h
.text:0000000000001F50 nbytes          = qword ptr -2C0h
.text:0000000000001F50 mask            = dword ptr -2B4h
.text:0000000000001F50 var_2B0         = qword ptr -2B0h
.text:0000000000001F50 ptr             = qword ptr -2A8h
.text:0000000000001F50 readfds         = qword ptr -2A0h
.text:0000000000001F50 var_298         = qword ptr -298h
.text:0000000000001F50 var_290         = qword ptr -290h
.text:0000000000001F50 var_288         = qword ptr -288h
.text:0000000000001F50 s1              = qword ptr -280h
.text:0000000000001F50 var_278         = qword ptr -278h
.text:0000000000001F50 var_26D         = byte ptr -26Dh
.text:0000000000001F50 var_26C         = dword ptr -26Ch
.text:0000000000001F50 var_268         = qword ptr -268h
.text:0000000000001F50 var_260         = qword ptr -260h
.text:0000000000001F50 var_258         = timeval ptr -258h
.text:0000000000001F50 timeout         = timeval ptr -248h
.text:0000000000001F50 var_204         = dword ptr -204h
.text:0000000000001F50 var_1E8         = qword ptr -1E8h
.text:0000000000001F50 var_168         = stat ptr -168h
.text:0000000000001F50 stat_buf        = stat ptr -0D8h
.text:0000000000001F50 var_40          = qword ptr -40h
.text:0000000000001F50
.text:0000000000001F50 ; __unwind {
.text:0000000000001F50                 push    r15
.text:0000000000001F52                 push    r14
.text:0000000000001F54                 push    r13
.text:0000000000001F56                 push    r12
.text:0000000000001F58                 push    rbp
.text:0000000000001F59                 push    rbx
.text:0000000000001F5A                 mov     ebx, edi
.text:0000000000001F5C                 mov     rbp, rsi
.text:0000000000001F5F                 sub     rsp, 2C8h
.text:0000000000001F66                 mov     rdi, [rsi]
.text:0000000000001F69                 mov     rax, fs:28h
.text:0000000000001F72                 mov     [rsp+2F8h+var_40], rax
.text:0000000000001F7A                 xor     eax, eax
.text:0000000000001F7C                 mov     [rsp+2F8h+var_268], 0Ah
.text:0000000000001F88                 call    set_program_name
.text:0000000000001F8D                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001F94                 mov     edi, 6          ; category
.text:0000000000001F99                 call    _setlocale
.text:0000000000001F9E                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001FA5                 lea     rdi, domainname ; "coreutils"
.text:0000000000001FAC                 call    _bindtextdomain
.text:0000000000001FB1                 lea     rdi, domainname ; "coreutils"
.text:0000000000001FB8                 call    _textdomain
.text:0000000000001FBD                 lea     rdi, close_stdout
.text:0000000000001FC4                 call    atexit
.text:0000000000001FC9                 cmp     ebx, 2
.text:0000000000001FCC                 mov     cs:have_read_stdin, 0
.text:0000000000001FD3                 mov     cs:count_lines, 1
.text:0000000000001FDA                 mov     cs:print_headers, 0
.text:0000000000001FE1                 mov     cs:from_start, 0
.text:0000000000001FE8                 mov     cs:forever, 0
.text:0000000000001FEF                 mov     cs:line_end, 0Ah
.text:0000000000001FF6                 jz      loc_23C9
.text:0000000000001FFC                 cmp     ebx, 3
.text:0000000000001FFF                 jz      loc_23BC
.text:0000000000002005                 cmp     ebx, 4
.text:0000000000002008                 jz      loc_2854
.text:000000000000200E
.text:000000000000200E loc_200E:                               ; CODE XREF: main+49B↓j
.text:000000000000200E                                         ; main+4B6↓j ...
.text:000000000000200E                 xor     eax, eax
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: main+56C↓j
.text:0000000000002010                 movsd   xmm2, cs:qword_C960
.text:0000000000002018                 movzx   edx, al
.text:000000000000201B                 lea     r15, [rsp+2F8h+timeout]
.text:0000000000002023                 lea     r12, [rbp+rax*8+0]
.text:0000000000002028                 sub     ebx, edx
.text:000000000000202A                 xor     ebp, ebp
.text:000000000000202C                 movsd   [rsp+2F8h+var_2C8], xmm2
.text:0000000000002032                 mov     r14d, 1
.text:0000000000002038                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: main+154↓j
.text:0000000000002040                                         ; main+192↓j ...
.text:0000000000002040                 lea     rcx, long_options ; longopts
.text:0000000000002047                 lea     rdx, shortopts  ; "c:n:fFqs:vz0123456789"
.text:000000000000204E                 xor     r8d, r8d        ; longind
.text:0000000000002051                 mov     rsi, r12        ; argv
.text:0000000000002054                 mov     edi, ebx        ; argc
.text:0000000000002056                 call    _getopt_long
.text:000000000000205B                 cmp     eax, 0FFFFFFFFh
.text:000000000000205E                 jz      loc_24F2
.text:0000000000002064                 cmp     eax, 71h ; 'q'
.text:0000000000002067                 jz      loc_2198
.text:000000000000206D                 jle     short loc_20B0
.text:000000000000206F                 cmp     eax, 81h
.text:0000000000002074                 jz      loc_21A8
.text:000000000000207A                 jg      short loc_20F0
.text:000000000000207C                 cmp     eax, 76h ; 'v'
.text:000000000000207F                 jz      loc_2280
.text:0000000000002085                 jle     loc_2200
.text:000000000000208B                 cmp     eax, 7Ah ; 'z'
.text:000000000000208E                 jz      loc_21F0
.text:0000000000002094                 add     eax, 0FFFFFF80h
.text:0000000000002097                 jnz     loc_3C71
.text:000000000000209D                 mov     cs:reopen_inaccessible_files, 1
.text:00000000000020A4                 jmp     short loc_2040
.text:00000000000020A4 ; ---------------------------------------------------------------------------
.text:00000000000020A6                 align 10h
.text:00000000000020B0
.text:00000000000020B0 loc_20B0:                               ; CODE XREF: main+11D↑j
.text:00000000000020B0                 cmp     eax, 39h ; '9'
.text:00000000000020B3                 jle     short loc_2128
.text:00000000000020B5                 cmp     eax, 63h ; 'c'
.text:00000000000020B8                 jz      loc_229E
.text:00000000000020BE                 jg      loc_2290
.text:00000000000020C4                 cmp     eax, 46h ; 'F'
.text:00000000000020C7                 jnz     loc_3C71
.text:00000000000020CD                 mov     cs:forever, 1
.text:00000000000020D4                 mov     cs:follow_mode, r14d
.text:00000000000020DB                 mov     cs:reopen_inaccessible_files, 1
.text:00000000000020E2                 jmp     loc_2040
.text:00000000000020E2 ; ---------------------------------------------------------------------------
.text:00000000000020E7                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: main+12A↑j
.text:00000000000020F0                 cmp     eax, 83h
.text:00000000000020F5                 jz      loc_23B0
.text:00000000000020FB                 jl      loc_2368
.text:0000000000002101                 cmp     eax, 84h
.text:0000000000002106                 jz      loc_2310
.text:000000000000210C                 cmp     eax, 85h
.text:0000000000002111                 jnz     loc_3C71
.text:0000000000002117                 mov     cs:disable_inotify, 1
.text:000000000000211E                 jmp     loc_2040
.text:000000000000211E ; ---------------------------------------------------------------------------
.text:0000000000002123                 align 8
.text:0000000000002128
.text:0000000000002128 loc_2128:                               ; CODE XREF: main+163↑j
.text:0000000000002128                 cmp     eax, 30h ; '0'
.text:000000000000212B                 mov     r13d, eax
.text:000000000000212E                 jge     loc_3C4A
.text:0000000000002134                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002139                 jnz     loc_3C3C
.text:000000000000213F                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:0000000000002146                 sub     rsp, 8
.text:000000000000214A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002151                 push    0
.text:0000000000002153                 mov     rcx, cs:Version
.text:000000000000215A                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002161                 push    rax
.text:0000000000002162                 lea     rax, aIanLanceTaylor ; "Ian Lance Taylor"
.text:0000000000002169                 lea     r8, aPaulRubin  ; "Paul Rubin"
.text:0000000000002170                 lea     rdx, unk_B7A7
.text:0000000000002177                 lea     rsi, aTail      ; "tail"
.text:000000000000217E                 push    rax
.text:000000000000217F                 xor     eax, eax
.text:0000000000002181                 call    version_etc
.text:0000000000002186                 add     rsp, 20h
.text:000000000000218A                 xor     edi, edi        ; status
.text:000000000000218C                 call    _exit
.text:000000000000218C ; ---------------------------------------------------------------------------
.text:0000000000002191                 align 8
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: main+117↑j
.text:0000000000002198                 mov     ebp, 2
.text:000000000000219D                 jmp     loc_2040
.text:000000000000219D ; ---------------------------------------------------------------------------
.text:00000000000021A2                 align 8
.text:00000000000021A8
.text:00000000000021A8 loc_21A8:                               ; CODE XREF: main+124↑j
.text:00000000000021A8                 lea     rsi, msgid      ; "invalid maximum number of unchanged sta"...
.text:00000000000021AF                 mov     edx, 5          ; category
.text:00000000000021B4                 xor     edi, edi        ; domainname
.text:00000000000021B6                 call    _dcgettext
.text:00000000000021BB                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000021C2                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000021C9                 mov     r8, rax
.text:00000000000021CC                 xor     r9d, r9d
.text:00000000000021CF                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000021D6                 xor     esi, esi
.text:00000000000021D8                 call    xdectoumax
.text:00000000000021DD                 mov     cs:max_n_unchanged_stats_between_opens, rax
.text:00000000000021E4                 jmp     loc_2040
.text:00000000000021E4 ; ---------------------------------------------------------------------------
.text:00000000000021E9                 align 10h
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: main+13E↑j
.text:00000000000021F0                 mov     cs:line_end, 0
.text:00000000000021F7                 jmp     loc_2040
.text:00000000000021F7 ; ---------------------------------------------------------------------------
.text:00000000000021FC                 align 20h
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: main+135↑j
.text:0000000000002200                 cmp     eax, 73h ; 's'
.text:0000000000002203                 jnz     loc_3C71
.text:0000000000002209                 lea     rcx, cl_strtod
.text:0000000000002210                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002217                 xor     esi, esi
.text:0000000000002219                 mov     rdx, r15
.text:000000000000221C                 call    xstrtod
.text:0000000000002221                 test    al, al
.text:0000000000002223                 jz      short loc_2242
.text:0000000000002225                 pxor    xmm3, xmm3
.text:0000000000002229                 movsd   xmm1, [rsp+2F8h+timeout.tv_sec]
.text:0000000000002232                 ucomisd xmm1, xmm3
.text:0000000000002236                 movsd   [rsp+2F8h+var_2C8], xmm1
.text:000000000000223C                 jnb     loc_2040
.text:0000000000002242
.text:0000000000002242 loc_2242:                               ; CODE XREF: main+2D3↑j
.text:0000000000002242                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002249                 call    quote
.text:000000000000224E                 lea     rsi, aInvalidNumberO ; "invalid number of seconds: %s"
.text:0000000000002255                 mov     rbx, rax
.text:0000000000002258                 mov     edx, 5          ; category
.text:000000000000225D                 xor     edi, edi        ; domainname
.text:000000000000225F                 call    _dcgettext
.text:0000000000002264                 mov     rcx, rbx
.text:0000000000002267                 mov     rdx, rax        ; format
.text:000000000000226A                 xor     esi, esi        ; errnum
.text:000000000000226C                 mov     edi, 1          ; status
.text:0000000000002271                 xor     eax, eax
.text:0000000000002273                 call    _error
.text:0000000000002278                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: main+12F↑j
.text:0000000000002280                 mov     ebp, 1
.text:0000000000002285                 jmp     loc_2040
.text:0000000000002285 ; ---------------------------------------------------------------------------
.text:000000000000228A                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: main+16E↑j
.text:0000000000002290                 cmp     eax, 66h ; 'f'
.text:0000000000002293                 jz      short loc_2310
.text:0000000000002295                 cmp     eax, 6Eh ; 'n'
.text:0000000000002298                 jnz     loc_3C71
.text:000000000000229E
.text:000000000000229E loc_229E:                               ; CODE XREF: main+168↑j
.text:000000000000229E                 mov     rcx, cs:optarg@@GLIBC_2_2_5
.text:00000000000022A5                 cmp     eax, 6Eh ; 'n'
.text:00000000000022A8                 setz    cs:count_lines
.text:00000000000022AF                 movzx   edx, byte ptr [rcx]
.text:00000000000022B2                 cmp     dl, 2Bh ; '+'
.text:00000000000022B5                 jz      loc_24E6
.text:00000000000022BB                 cmp     dl, 2Dh ; '-'
.text:00000000000022BE                 jz      loc_2871
.text:00000000000022C4
.text:00000000000022C4 loc_22C4:                               ; CODE XREF: main+59D↓j
.text:00000000000022C4                                         ; main+92C↓j
.text:00000000000022C4                 cmp     eax, 6Eh ; 'n'
.text:00000000000022C7                 mov     edx, 5          ; category
.text:00000000000022CC                 jz      loc_24C1
.text:00000000000022D2                 lea     rsi, aInvalidNumberO_0 ; "invalid number of bytes"
.text:00000000000022D9                 xor     edi, edi        ; domainname
.text:00000000000022DB                 call    _dcgettext
.text:00000000000022E0                 mov     r8, rax
.text:00000000000022E3
.text:00000000000022E3 loc_22E3:                               ; CODE XREF: main+582↓j
.text:00000000000022E3                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000022EA                 lea     rcx, aBkkmmgtpezy0 ; "bkKmMGTPEZY0"
.text:00000000000022F1                 xor     r9d, r9d
.text:00000000000022F4                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000022FB                 xor     esi, esi
.text:00000000000022FD                 call    xdectoumax
.text:0000000000002302                 mov     [rsp+2F8h+var_268], rax
.text:000000000000230A                 jmp     loc_2040
.text:000000000000230A ; ---------------------------------------------------------------------------
.text:000000000000230F                 align 10h
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: main+1B6↑j
.text:0000000000002310                                         ; main+343↑j
.text:0000000000002310                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002317                 mov     cs:forever, 1
.text:000000000000231E                 test    rsi, rsi
.text:0000000000002321                 jz      loc_24D7
.text:0000000000002327                 mov     r9, cs:argmatch_die
.text:000000000000232E                 lea     rdx, follow_mode_string
.text:0000000000002335                 lea     rcx, follow_mode_map
.text:000000000000233C                 lea     rdi, aFollow    ; "--follow"
.text:0000000000002343                 mov     r8d, 4
.text:0000000000002349                 call    __xargmatch_internal
.text:000000000000234E                 lea     rdx, follow_mode_map
.text:0000000000002355                 mov     eax, [rdx+rax*4]
.text:0000000000002358                 mov     cs:follow_mode, eax
.text:000000000000235E                 jmp     loc_2040
.text:000000000000235E ; ---------------------------------------------------------------------------
.text:0000000000002363                 align 8
.text:0000000000002368
.text:0000000000002368 loc_2368:                               ; CODE XREF: main+1AB↑j
.text:0000000000002368                 lea     rsi, aInvalidPid ; "invalid PID"
.text:000000000000236F                 mov     edx, 5          ; category
.text:0000000000002374                 xor     edi, edi        ; domainname
.text:0000000000002376                 call    _dcgettext
.text:000000000000237B                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002382                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002389                 mov     r8, rax
.text:000000000000238C                 xor     r9d, r9d
.text:000000000000238F                 mov     edx, 7FFFFFFFh
.text:0000000000002394                 xor     esi, esi
.text:0000000000002396                 call    xdectoumax
.text:000000000000239B                 mov     cs:pid, eax
.text:00000000000023A1                 jmp     loc_2040
.text:00000000000023A1 ; ---------------------------------------------------------------------------
.text:00000000000023A6                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: main+1A5↑j
.text:00000000000023B0                 mov     cs:presume_input_pipe, 1
.text:00000000000023B7                 jmp     loc_2040
.text:00000000000023BC ; ---------------------------------------------------------------------------
.text:00000000000023BC
.text:00000000000023BC loc_23BC:                               ; CODE XREF: main+AF↑j
.text:00000000000023BC                 mov     rdi, [rbp+10h]
.text:00000000000023C0                 cmp     byte ptr [rdi], 2Dh ; '-'
.text:00000000000023C3                 jz      loc_28EA
.text:00000000000023C9
.text:00000000000023C9 loc_23C9:                               ; CODE XREF: main+A6↑j
.text:00000000000023C9                                         ; main+916↓j ...
.text:00000000000023C9                 call    posix2_version
.text:00000000000023CE                 mov     rdx, [rbp+8]
.text:00000000000023D2                 lea     esi, [rax-30DB0h]
.text:00000000000023D8                 movzx   ecx, byte ptr [rdx]
.text:00000000000023DB                 lea     rdi, [rdx+1]    ; nptr
.text:00000000000023DF                 cmp     cl, 2Bh ; '+'
.text:00000000000023E2                 jz      loc_283D
.text:00000000000023E8                 cmp     cl, 2Dh ; '-'
.text:00000000000023EB                 jnz     loc_200E
.text:00000000000023F1                 cmp     eax, 30DAFh
.text:00000000000023F6                 jle     short loc_240C
.text:00000000000023F8                 xor     eax, eax
.text:00000000000023FA                 cmp     byte ptr [rdx+1], 63h ; 'c'
.text:00000000000023FE                 setz    al
.text:0000000000002401                 cmp     byte ptr [rdx+rax+1], 0
.text:0000000000002406                 jz      loc_200E
.text:000000000000240C
.text:000000000000240C loc_240C:                               ; CODE XREF: main+4A6↑j
.text:000000000000240C                 xor     r12d, r12d
.text:000000000000240F
.text:000000000000240F loc_240F:                               ; CODE XREF: main+8F9↓j
.text:000000000000240F                 movsx   eax, byte ptr [rdx+1]
.text:0000000000002413                 mov     rdx, rdi
.text:0000000000002416                 mov     ecx, eax
.text:0000000000002418                 sub     eax, 30h ; '0'
.text:000000000000241B                 cmp     eax, 9
.text:000000000000241E                 ja      short loc_2431
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: main+4DF↓j
.text:0000000000002420                 add     rdx, 1
.text:0000000000002424                 movsx   eax, byte ptr [rdx]
.text:0000000000002427                 mov     ecx, eax
.text:0000000000002429                 sub     eax, 30h ; '0'
.text:000000000000242C                 cmp     eax, 9
.text:000000000000242F                 jbe     short loc_2420
.text:0000000000002431
.text:0000000000002431 loc_2431:                               ; CODE XREF: main+4CE↑j
.text:0000000000002431                 cmp     cl, 63h ; 'c'
.text:0000000000002434                 jz      loc_32B3
.text:000000000000243A                 cmp     cl, 6Ch ; 'l'
.text:000000000000243D                 jz      loc_32A6
.text:0000000000002443                 cmp     cl, 62h ; 'b'
.text:0000000000002446                 jz      loc_3286
.text:000000000000244C                 mov     rax, rdx
.text:000000000000244F                 mov     r14d, 1
.text:0000000000002455                 mov     ecx, 0Ah
.text:000000000000245A
.text:000000000000245A loc_245A:                               ; CODE XREF: main+1342↓j
.text:000000000000245A                 xor     r13d, r13d
.text:000000000000245D                 cmp     byte ptr [rax], 66h ; 'f'
.text:0000000000002460                 jnz     short loc_246C
.text:0000000000002462                 add     rax, 1
.text:0000000000002466                 mov     r13d, 1
.text:000000000000246C
.text:000000000000246C loc_246C:                               ; CODE XREF: main+510↑j
.text:000000000000246C                 cmp     byte ptr [rax], 0
.text:000000000000246F                 jnz     loc_200E
.text:0000000000002475                 cmp     rdi, rdx
.text:0000000000002478                 jz      loc_3297
.text:000000000000247E                 lea     rcx, [rsp+2F8h+var_268]
.text:0000000000002486                 lea     r8, aB          ; "b"
.text:000000000000248D                 xor     esi, esi
.text:000000000000248F                 mov     edx, 0Ah
.text:0000000000002494                 call    xstrtoumax
.text:0000000000002499                 and     eax, 0FFFFFFFDh
.text:000000000000249C                 jnz     loc_4714
.text:00000000000024A2
.text:00000000000024A2 loc_24A2:                               ; CODE XREF: main+1351↓j
.text:00000000000024A2                 mov     cs:from_start, r12b
.text:00000000000024A9                 mov     cs:count_lines, r14b
.text:00000000000024B0                 mov     eax, 1
.text:00000000000024B5                 mov     cs:forever, r13b
.text:00000000000024BC                 jmp     loc_2010
.text:00000000000024C1 ; ---------------------------------------------------------------------------
.text:00000000000024C1
.text:00000000000024C1 loc_24C1:                               ; CODE XREF: main+37C↑j
.text:00000000000024C1                 lea     rsi, aInvalidNumberO_1 ; "invalid number of lines"
.text:00000000000024C8                 xor     edi, edi        ; domainname
.text:00000000000024CA                 call    _dcgettext
.text:00000000000024CF                 mov     r8, rax
.text:00000000000024D2                 jmp     loc_22E3
.text:00000000000024D7 ; ---------------------------------------------------------------------------
.text:00000000000024D7
.text:00000000000024D7 loc_24D7:                               ; CODE XREF: main+3D1↑j
.text:00000000000024D7                 mov     cs:follow_mode, 2
.text:00000000000024E1                 jmp     loc_2040
.text:00000000000024E6 ; ---------------------------------------------------------------------------
.text:00000000000024E6
.text:00000000000024E6 loc_24E6:                               ; CODE XREF: main+365↑j
.text:00000000000024E6                 mov     cs:from_start, 1
.text:00000000000024ED                 jmp     loc_22C4
.text:00000000000024F2 ; ---------------------------------------------------------------------------
.text:00000000000024F2
.text:00000000000024F2 loc_24F2:                               ; CODE XREF: main+10E↑j
.text:00000000000024F2                 cmp     cs:reopen_inaccessible_files, 0
.text:00000000000024F9                 mov     r13d, eax
.text:00000000000024FC                 jz      loc_28A9
.text:0000000000002502                 cmp     cs:forever, 0
.text:0000000000002509                 jz      loc_2881
.text:000000000000250F                 cmp     cs:follow_mode, 2
.text:0000000000002516                 jz      loc_3B70
.text:000000000000251C                 mov     edi, cs:pid     ; pid
.text:0000000000002522                 test    edi, edi
.text:0000000000002524                 jz      short loc_2566
.text:0000000000002526
.text:0000000000002526 loc_2526:                               ; CODE XREF: main+96E↓j
.text:0000000000002526                 xor     esi, esi        ; sig
.text:0000000000002528                 call    _kill
.text:000000000000252D                 test    eax, eax
.text:000000000000252F                 jz      short loc_2566
.text:0000000000002531                 call    ___errno_location
.text:0000000000002536                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000002539                 jnz     short loc_2566
.text:000000000000253B                 lea     rsi, aWarningPidPidI ; "warning: --pid=PID is not supported on "...
.text:0000000000002542                 mov     edx, 5          ; category
.text:0000000000002547                 xor     edi, edi        ; domainname
.text:0000000000002549                 call    _dcgettext
.text:000000000000254E                 xor     esi, esi        ; errnum
.text:0000000000002550                 mov     rdx, rax        ; format
.text:0000000000002553                 xor     edi, edi        ; status
.text:0000000000002555                 xor     eax, eax
.text:0000000000002557                 call    _error
.text:000000000000255C                 mov     cs:pid, 0
.text:0000000000002566
.text:0000000000002566 loc_2566:                               ; CODE XREF: main+5D4↑j
.text:0000000000002566                                         ; main+5DF↑j ...
.text:0000000000002566                 cmp     cs:from_start, 0
.text:000000000000256D                 jz      short loc_2588
.text:000000000000256F                 mov     rax, [rsp+2F8h+var_268]
.text:0000000000002577                 test    rax, rax
.text:000000000000257A                 jz      short loc_2588
.text:000000000000257C                 sub     rax, 1
.text:0000000000002580                 mov     [rsp+2F8h+var_268], rax
.text:0000000000002588
.text:0000000000002588 loc_2588:                               ; CODE XREF: main+61D↑j
.text:0000000000002588                                         ; main+62A↑j
.text:0000000000002588                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000258F                 cmp     ebx, eax
.text:0000000000002591                 jg      loc_312E
.text:0000000000002597                 lea     rbx, dummy_stdin_7874
.text:000000000000259E                 mov     [rsp+2F8h+var_2F8], 1
.text:00000000000025A6
.text:00000000000025A6 loc_25A6:                               ; CODE XREF: main+11EB↓j
.text:00000000000025A6                 mov     r10, [rsp+2F8h+var_2F8]
.text:00000000000025AA                 xor     r8d, r8d
.text:00000000000025AD                 xor     eax, eax
.text:00000000000025AF                 mov     r9d, 1
.text:00000000000025B5                 nop     dword ptr [rax]
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: main+68D↓j
.text:00000000000025B8                 mov     rsi, [rbx+rax*8]
.text:00000000000025BC                 lea     rdi, s2+1       ; "-"
.text:00000000000025C3                 mov     ecx, 2
.text:00000000000025C8                 repe cmpsb
.text:00000000000025CA                 setnbe  dl
.text:00000000000025CD                 sbb     dl, 0
.text:00000000000025D0                 test    dl, dl
.text:00000000000025D2                 cmovz   r8d, r9d
.text:00000000000025D6                 add     rax, 1
.text:00000000000025DA                 cmp     rax, r10
.text:00000000000025DD                 jb      short loc_25B8
.text:00000000000025DF                 test    r8b, r8b
.text:00000000000025E2                 jz      short loc_2650
.text:00000000000025E4                 mov     eax, cs:follow_mode
.text:00000000000025EA                 cmp     eax, 1
.text:00000000000025ED                 jz      loc_47D8
.text:00000000000025F3                 cmp     cs:forever, 0
.text:00000000000025FA                 jz      short loc_2650
.text:00000000000025FC                 cmp     cs:pid, 0
.text:0000000000002603                 jnz     loc_28F9
.text:0000000000002609                 cmp     eax, 2
.text:000000000000260C                 jnz     loc_28F9
.text:0000000000002612                 cmp     [rsp+2F8h+var_2F8], 1
.text:0000000000002617                 jnz     loc_28F9
.text:000000000000261D                 lea     rdx, [rsp+2F8h+stat_buf] ; stat_buf
.text:0000000000002625                 xor     esi, esi        ; fildes
.text:0000000000002627                 mov     edi, 1          ; ver
.text:000000000000262C                 call    ___fxstat
.text:0000000000002631                 test    eax, eax
.text:0000000000002633                 jnz     loc_28F9
.text:0000000000002639                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:0000000000002640                 and     eax, 0F000h
.text:0000000000002645                 cmp     eax, 8000h
.text:000000000000264A                 jz      loc_28F9
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: main+692↑j
.text:0000000000002650                                         ; main+6AA↑j ...
.text:0000000000002650                 cmp     [rsp+2F8h+var_268], 0
.text:0000000000002659                 jnz     short loc_2671
.text:000000000000265B                 cmp     cs:forever, 0
.text:0000000000002662                 jnz     short loc_2671
.text:0000000000002664                 cmp     cs:from_start, 0
.text:000000000000266B                 jz      loc_3401
.text:0000000000002671
.text:0000000000002671 loc_2671:                               ; CODE XREF: main+709↑j
.text:0000000000002671                                         ; main+712↑j
.text:0000000000002671                 mov     edx, 60h ; '`'
.text:0000000000002676                 xor     ecx, ecx
.text:0000000000002678                 mov     rax, rdx
.text:000000000000267B                 mul     [rsp+2F8h+var_2F8]
.text:000000000000267F                 jo      loc_4832
.text:0000000000002685
.text:0000000000002685 loc_2685:                               ; CODE XREF: main+28E7↓j
.text:0000000000002685                 test    rax, rax
.text:0000000000002688                 js      loc_44FB
.text:000000000000268E                 test    rcx, rcx
.text:0000000000002691                 jnz     loc_44FB
.text:0000000000002697                 mov     r14, [rsp+2F8h+var_2F8]
.text:000000000000269B                 imul    r15, r14, 60h ; '`'
.text:000000000000269F                 mov     rdi, r15
.text:00000000000026A2                 mov     [rsp+2F8h+var_298], r15
.text:00000000000026A7                 call    xmalloc
.text:00000000000026AC                 test    r14, r14
.text:00000000000026AF                 mov     [rsp+2F8h+var_2D0], rax
.text:00000000000026B4                 jz      loc_3AC9
.text:00000000000026BA                 mov     rcx, r15
.text:00000000000026BD                 add     rcx, rax
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: main+782↓j
.text:00000000000026C0                 mov     rdx, [rbx]
.text:00000000000026C3                 add     rax, 60h ; '`'
.text:00000000000026C7                 add     rbx, 8
.text:00000000000026CB                 mov     [rax-60h], rdx
.text:00000000000026CF                 cmp     rcx, rax
.text:00000000000026D2                 jnz     short loc_26C0
.text:00000000000026D4                 cmp     ebp, 1
.text:00000000000026D7                 jz      short loc_26E4
.text:00000000000026D9                 cmp     [rsp+2F8h+var_2F8], 1
.text:00000000000026DE                 jbe     short loc_26F6
.text:00000000000026E0                 test    ebp, ebp
.text:00000000000026E2                 jnz     short loc_26F6
.text:00000000000026E4
.text:00000000000026E4 loc_26E4:                               ; CODE XREF: main+787↑j
.text:00000000000026E4                                         ; main+1B7C↓j
.text:00000000000026E4                 cmp     [rsp+2F8h+var_2F8], 0
.text:00000000000026E9                 mov     cs:print_headers, 1
.text:00000000000026F0                 jz      loc_3AD2
.text:00000000000026F6
.text:00000000000026F6 loc_26F6:                               ; CODE XREF: main+78E↑j
.text:00000000000026F6                                         ; main+792↑j
.text:00000000000026F6                 lea     rax, [rsp+2F8h+stat_buf]
.text:00000000000026FE                 mov     r15, [rsp+2F8h+var_2D0]
.text:0000000000002703                 mov     [rsp+2F8h+buf], 0
.text:000000000000270C                 mov     [rsp+2F8h+var_26D], 1
.text:0000000000002714                 mov     dword ptr [rsp+2F8h+var_288], r13d
.text:0000000000002719                 mov     [rsp+2F8h+readfds], rax
.text:000000000000271E                 xchg    ax, ax
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: main+AA4↓j
.text:0000000000002720                 mov     rax, [rsp+2F8h+var_268]
.text:0000000000002728                 lea     rdi, s2+1       ; "-"
.text:000000000000272F                 mov     ecx, 2
.text:0000000000002734                 mov     [rsp+2F8h+offset], rax
.text:0000000000002739                 mov     rax, [r15]
.text:000000000000273C                 mov     rsi, rax
.text:000000000000273F                 repe cmpsb
.text:0000000000002741                 setnbe  dl
.text:0000000000002744                 sbb     dl, 0
.text:0000000000002747                 movsx   esi, dl
.text:000000000000274A                 test    esi, esi
.text:000000000000274C                 mov     [rsp+2F8h+mask], esi
.text:0000000000002750                 jnz     loc_292E
.text:0000000000002756                 mov     cs:have_read_stdin, 1
.text:000000000000275D                 mov     [rsp+2F8h+fildes], 0
.text:0000000000002765
.text:0000000000002765 loc_2765:                               ; CODE XREF: main+1331↓j
.text:0000000000002765                 mov     byte ptr [r15+36h], 1
.text:000000000000276A
.text:000000000000276A loc_276A:                               ; CODE XREF: main+2883↓j
.text:000000000000276A                 cmp     cs:print_headers, 0
.text:0000000000002771                 jnz     loc_2BEC
.text:0000000000002777
.text:0000000000002777 loc_2777:                               ; CODE XREF: main+CDA↓j
.text:0000000000002777                 mov     rdi, [r15]
.text:000000000000277A                 call    pretty_name_isra_7
.text:000000000000277F                 mov     [rsp+2F8h+var_2B0], rax
.text:0000000000002784                 movzx   eax, cs:count_lines
.text:000000000000278B                 mov     edi, 1          ; ver
.text:0000000000002790                 mov     [rsp+2F8h+timeout.tv_sec], 0
.text:000000000000279C                 mov     rdx, [rsp+2F8h+readfds] ; stat_buf
.text:00000000000027A1                 mov     esi, [rsp+2F8h+fildes] ; fildes
.text:00000000000027A5                 test    al, al
.text:00000000000027A7                 mov     byte ptr [rsp+2F8h+var_2E0], al
.text:00000000000027AB                 jnz     loc_2A51
.text:00000000000027B1                 call    ___fxstat
.text:00000000000027B6                 test    eax, eax
.text:00000000000027B8                 jnz     loc_2F9E
.text:00000000000027BE                 movzx   eax, cs:from_start
.text:00000000000027C5                 mov     ecx, eax
.text:00000000000027C7                 mov     byte ptr [rsp+2F8h+var_2E0], al
.text:00000000000027CB                 movzx   eax, cs:presume_input_pipe
.text:00000000000027D2                 test    cl, cl
.text:00000000000027D4                 jz      loc_2EB5
.text:00000000000027DA                 test    al, al
.text:00000000000027DC                 jnz     loc_3029
.text:00000000000027E2                 cmp     [rsp+2F8h+offset], 0
.text:00000000000027E8                 js      loc_3029
.text:00000000000027EE                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:00000000000027F5                 and     eax, 0F000h
.text:00000000000027FA                 cmp     eax, 8000h
.text:00000000000027FF                 jz      loc_3408
.text:0000000000002805
.text:0000000000002805 loc_2805:                               ; CODE XREF: main+14D9↓j
.text:0000000000002805                 mov     rsi, [rsp+2F8h+offset] ; offset
.text:000000000000280A                 mov     edi, [rsp+2F8h+fildes] ; fd
.text:000000000000280E                 mov     edx, 1          ; whence
.text:0000000000002813                 call    _lseek
.text:0000000000002818                 add     rax, 1
.text:000000000000281C                 jz      loc_3029
.text:0000000000002822
.text:0000000000002822 loc_2822:                               ; CODE XREF: main+14D3↓j
.text:0000000000002822                 mov     rax, [rsp+2F8h+offset]
.text:0000000000002827                 mov     [rsp+2F8h+offset], 0FFFFFFFFFFFFFFFFh
.text:0000000000002830                 add     [rsp+2F8h+timeout.tv_sec], rax
.text:0000000000002838                 jmp     loc_3051
.text:000000000000283D ; ---------------------------------------------------------------------------
.text:000000000000283D
.text:000000000000283D loc_283D:                               ; CODE XREF: main+492↑j
.text:000000000000283D                 cmp     esi, 2B8h
.text:0000000000002843                 mov     r12d, 1
.text:0000000000002849                 ja      loc_240F
.text:000000000000284F                 jmp     loc_200E
.text:0000000000002854 ; ---------------------------------------------------------------------------
.text:0000000000002854
.text:0000000000002854 loc_2854:                               ; CODE XREF: main+B8↑j
.text:0000000000002854                 mov     rdi, [rbp+10h]  ; s1
.text:0000000000002858
.text:0000000000002858 loc_2858:                               ; CODE XREF: main+99E↓j
.text:0000000000002858                 lea     rsi, s2         ; "--"
.text:000000000000285F                 call    _strcmp
.text:0000000000002864                 test    eax, eax
.text:0000000000002866                 jz      loc_23C9
.text:000000000000286C                 jmp     loc_200E
.text:0000000000002871 ; ---------------------------------------------------------------------------
.text:0000000000002871
.text:0000000000002871 loc_2871:                               ; CODE XREF: main+36E↑j
.text:0000000000002871                 add     rcx, 1
.text:0000000000002875                 mov     cs:optarg@@GLIBC_2_2_5, rcx
.text:000000000000287C                 jmp     loc_22C4
.text:0000000000002881 ; ---------------------------------------------------------------------------
.text:0000000000002881
.text:0000000000002881 loc_2881:                               ; CODE XREF: main+5B9↑j
.text:0000000000002881                 lea     rsi, aWarningRetryIg ; "warning: --retry ignored; --retry is us"...
.text:0000000000002888                 mov     cs:reopen_inaccessible_files, 0
.text:000000000000288F                 mov     edx, 5          ; category
.text:0000000000002894
.text:0000000000002894 loc_2894:                               ; CODE XREF: main+1C2C↓j
.text:0000000000002894                 xor     edi, edi        ; domainname
.text:0000000000002896                 call    _dcgettext
.text:000000000000289B                 xor     esi, esi        ; errnum
.text:000000000000289D                 mov     rdx, rax        ; format
.text:00000000000028A0                 xor     edi, edi        ; status
.text:00000000000028A2                 xor     eax, eax
.text:00000000000028A4                 call    _error
.text:00000000000028A9
.text:00000000000028A9 loc_28A9:                               ; CODE XREF: main+5AC↑j
.text:00000000000028A9                 mov     edi, cs:pid
.text:00000000000028AF                 test    edi, edi
.text:00000000000028B1                 jz      loc_2566
.text:00000000000028B7                 cmp     cs:forever, 0
.text:00000000000028BE                 jnz     loc_2526
.text:00000000000028C4                 lea     rsi, aWarningPidIgno ; "warning: PID ignored; --pid=PID is usef"...
.text:00000000000028CB                 xor     edi, edi        ; domainname
.text:00000000000028CD                 mov     edx, 5          ; category
.text:00000000000028D2                 call    _dcgettext
.text:00000000000028D7                 xor     esi, esi        ; errnum
.text:00000000000028D9                 mov     rdx, rax        ; format
.text:00000000000028DC                 xor     edi, edi        ; status
.text:00000000000028DE                 xor     eax, eax
.text:00000000000028E0                 call    _error
.text:00000000000028E5                 jmp     loc_2566
.text:00000000000028EA ; ---------------------------------------------------------------------------
.text:00000000000028EA
.text:00000000000028EA loc_28EA:                               ; CODE XREF: main+473↑j
.text:00000000000028EA                 cmp     byte ptr [rdi+1], 0
.text:00000000000028EE                 jnz     loc_2858
.text:00000000000028F4                 jmp     loc_23C9
.text:00000000000028F9 ; ---------------------------------------------------------------------------
.text:00000000000028F9
.text:00000000000028F9 loc_28F9:                               ; CODE XREF: main+6B3↑j
.text:00000000000028F9                                         ; main+6BC↑j ...
.text:00000000000028F9                 xor     edi, edi        ; fd
.text:00000000000028FB                 call    _isatty
.text:0000000000002900                 test    eax, eax
.text:0000000000002902                 jz      loc_2650
.text:0000000000002908                 lea     rsi, aWarningFollowi ; "warning: following standard input indef"...
.text:000000000000290F                 xor     edi, edi        ; domainname
.text:0000000000002911                 mov     edx, 5          ; category
.text:0000000000002916                 call    _dcgettext
.text:000000000000291B                 xor     esi, esi        ; errnum
.text:000000000000291D                 mov     rdx, rax        ; format
.text:0000000000002920                 xor     edi, edi        ; status
.text:0000000000002922                 xor     eax, eax
.text:0000000000002924                 call    _error
.text:0000000000002929                 jmp     loc_2650
.text:000000000000292E ; ---------------------------------------------------------------------------
.text:000000000000292E
.text:000000000000292E loc_292E:                               ; CODE XREF: main+800↑j
.text:000000000000292E                 xor     esi, esi
.text:0000000000002930                 mov     rdi, rax
.text:0000000000002933                 xor     eax, eax
.text:0000000000002935                 call    open_safer
.text:000000000000293A                 movzx   ebx, cs:reopen_inaccessible_files
.text:0000000000002941                 mov     [rsp+2F8h+fildes], eax
.text:0000000000002945                 test    bl, bl
.text:0000000000002947                 jnz     loc_2C44
.text:000000000000294D                 cmp     [rsp+2F8h+fildes], 0FFFFFFFFh
.text:0000000000002952                 mov     byte ptr [r15+36h], 1
.text:0000000000002957                 jnz     loc_47D0
.text:000000000000295D
.text:000000000000295D loc_295D:                               ; CODE XREF: main+D02↓j
.text:000000000000295D                 call    ___errno_location
.text:0000000000002962                 cmp     cs:forever, 0
.text:0000000000002969                 mov     rbp, rax
.text:000000000000296C                 jz      short loc_2993
.text:000000000000296E                 mov     eax, [rax]
.text:0000000000002970                 xor     ebx, 1
.text:0000000000002973                 mov     dword ptr [r15+38h], 0FFFFFFFFh
.text:000000000000297B                 mov     [r15+34h], bl
.text:000000000000297F                 mov     qword ptr [r15+28h], 0
.text:0000000000002987                 mov     qword ptr [r15+20h], 0
.text:000000000000298F                 mov     [r15+3Ch], eax
.text:0000000000002993
.text:0000000000002993 loc_2993:                               ; CODE XREF: main+A1C↑j
.text:0000000000002993                 mov     rdi, [r15]
.text:0000000000002996                 call    pretty_name_isra_7
.text:000000000000299B                 mov     edi, 4
.text:00000000000029A0                 mov     rsi, rax
.text:00000000000029A3                 call    quotearg_style
.text:00000000000029A8                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:00000000000029AF                 mov     edx, 5          ; category
.text:00000000000029B4                 xor     edi, edi        ; domainname
.text:00000000000029B6                 mov     rbx, rax
.text:00000000000029B9                 call    _dcgettext
.text:00000000000029BE                 mov     esi, [rbp+0]    ; errnum
.text:00000000000029C1                 mov     rdx, rax        ; format
.text:00000000000029C4                 mov     rcx, rbx
.text:00000000000029C7                 xor     edi, edi        ; status
.text:00000000000029C9                 xor     eax, eax
.text:00000000000029CB                 call    _error
.text:00000000000029D0                 mov     byte ptr [rsp+2F8h+var_2E0], 0
.text:00000000000029D5
.text:00000000000029D5 loc_29D5:                               ; CODE XREF: main+D6E↓j
.text:00000000000029D5                                         ; main+D7F↓j ...
.text:00000000000029D5                 add     [rsp+2F8h+buf], 1
.text:00000000000029DB                 movzx   ecx, byte ptr [rsp+2F8h+var_2E0]
.text:00000000000029E0                 add     r15, 60h ; '`'
.text:00000000000029E4                 and     [rsp+2F8h+var_26D], cl
.text:00000000000029EB                 mov     rax, [rsp+2F8h+buf]
.text:00000000000029F0                 cmp     rax, [rsp+2F8h+var_2F8]
.text:00000000000029F4                 jnz     loc_2720
.text:00000000000029FA
.text:00000000000029FA loc_29FA:                               ; CODE XREF: main+1B8A↓j
.text:00000000000029FA                 movzx   eax, cs:forever
.text:0000000000002A01                 test    al, al
.text:0000000000002A03                 mov     byte ptr [rsp+2F8h+ptr], al
.text:0000000000002A07                 jnz     loc_3140
.text:0000000000002A0D
.text:0000000000002A0D loc_2A0D:                               ; CODE XREF: main+1255↓j
.text:0000000000002A0D                                         ; main+1820↓j ...
.text:0000000000002A0D                 cmp     cs:have_read_stdin, 0
.text:0000000000002A14                 jnz     loc_3255
.text:0000000000002A1A
.text:0000000000002A1A loc_2A1A:                               ; CODE XREF: main+130E↓j
.text:0000000000002A1A                 movzx   eax, [rsp+2F8h+var_26D]
.text:0000000000002A22                 xor     eax, 1
.text:0000000000002A25                 movzx   eax, al
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: main+14B3↓j
.text:0000000000002A28                                         ; main+236F↓j
.text:0000000000002A28                 mov     rcx, [rsp+2F8h+var_40]
.text:0000000000002A30                 xor     rcx, fs:28h
.text:0000000000002A39                 jnz     loc_483C
.text:0000000000002A3F                 add     rsp, 2C8h
.text:0000000000002A46                 pop     rbx
.text:0000000000002A47                 pop     rbp
.text:0000000000002A48                 pop     r12
.text:0000000000002A4A                 pop     r13
.text:0000000000002A4C                 pop     r14
.text:0000000000002A4E                 pop     r15
.text:0000000000002A50                 retn
.text:0000000000002A51 ; ---------------------------------------------------------------------------
.text:0000000000002A51
.text:0000000000002A51 loc_2A51:                               ; CODE XREF: main+85B↑j
.text:0000000000002A51                 call    ___fxstat
.text:0000000000002A56                 test    eax, eax
.text:0000000000002A58                 jnz     loc_2FE1
.text:0000000000002A5E                 movzx   ebx, cs:from_start
.text:0000000000002A65                 test    bl, bl
.text:0000000000002A67                 jnz     loc_3078
.text:0000000000002A6D                 cmp     cs:presume_input_pipe, 0
.text:0000000000002A74                 jnz     short loc_2A8D
.text:0000000000002A76                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:0000000000002A7D                 and     eax, 0F000h
.text:0000000000002A82                 cmp     eax, 8000h
.text:0000000000002A87                 jz      loc_3ADF
.text:0000000000002A8D
.text:0000000000002A8D loc_2A8D:                               ; CODE XREF: main+B24↑j
.text:0000000000002A8D                                         ; main+1BAA↓j ...
.text:0000000000002A8D                 mov     edi, 2018h
.text:0000000000002A92                 call    xmalloc
.text:0000000000002A97                 mov     edi, 2018h
.text:0000000000002A9C                 mov     r14, rax
.text:0000000000002A9F                 mov     qword ptr [rax+2008h], 0
.text:0000000000002AAA                 mov     qword ptr [rax+2000h], 0
.text:0000000000002AB5                 mov     qword ptr [rax+2010h], 0
.text:0000000000002AC0                 call    xmalloc
.text:0000000000002AC5                 mov     [rsp+2F8h+ptr], r14
.text:0000000000002ACA                 mov     rbx, rax
.text:0000000000002ACD                 mov     [rsp+2F8h+nbytes], 0
.text:0000000000002AD6                 mov     [rsp+2F8h+var_290], r15
.text:0000000000002ADB                 nop     dword ptr [rax+rax+00h]
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: main+C68↓j
.text:0000000000002AE0                                         ; main+C97↓j ...
.text:0000000000002AE0                 mov     edi, [rsp+2F8h+fildes] ; fd
.text:0000000000002AE4                 mov     edx, 2000h      ; nbytes
.text:0000000000002AE9                 mov     rsi, rbx        ; buf
.text:0000000000002AEC                 call    safe_read
.text:0000000000002AF1                 mov     r13, rax
.text:0000000000002AF4                 lea     rax, [rax-1]
.text:0000000000002AF8                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000002AFC                 ja      loc_2C57
.text:0000000000002B02                 mov     [rbx+2000h], r13
.text:0000000000002B09                 movsx   r12d, cs:line_end
.text:0000000000002B11                 lea     rbp, [rbx+r13]
.text:0000000000002B15                 add     [rsp+2F8h+timeout.tv_sec], r13
.text:0000000000002B1D                 mov     rdi, rbx
.text:0000000000002B20                 mov     qword ptr [rbx+2008h], 0
.text:0000000000002B2B                 mov     qword ptr [rbx+2010h], 0
.text:0000000000002B36                 xor     r15d, r15d
.text:0000000000002B39                 jmp     short loc_2B4E
.text:0000000000002B39 ; ---------------------------------------------------------------------------
.text:0000000000002B3B                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: main+C13↓j
.text:0000000000002B40                 lea     rdi, [rax+1]    ; s
.text:0000000000002B44                 mov     [rbx+2008h], rdx
.text:0000000000002B4B                 mov     r15, rdx
.text:0000000000002B4E
.text:0000000000002B4E loc_2B4E:                               ; CODE XREF: main+BE9↑j
.text:0000000000002B4E                 mov     rdx, rbp
.text:0000000000002B51                 mov     esi, r12d       ; c
.text:0000000000002B54                 sub     rdx, rdi        ; n
.text:0000000000002B57                 call    _memchr
.text:0000000000002B5C                 test    rax, rax
.text:0000000000002B5F                 lea     rdx, [r15+1]
.text:0000000000002B63                 jnz     short loc_2B40
.text:0000000000002B65                 mov     rdi, [r14+2000h]
.text:0000000000002B6C                 add     [rsp+2F8h+nbytes], r15
.text:0000000000002B71                 lea     rax, [r13+rdi+0]
.text:0000000000002B76                 cmp     rax, 1FFFh
.text:0000000000002B7C                 jbe     short loc_2BBD
.text:0000000000002B7E                 mov     rsi, [rsp+2F8h+ptr]
.text:0000000000002B83                 mov     rax, [rsp+2F8h+nbytes]
.text:0000000000002B88                 mov     [r14+2010h], rbx
.text:0000000000002B8F                 sub     rax, [rsi+2008h]
.text:0000000000002B96                 cmp     [rsp+2F8h+offset], rax
.text:0000000000002B9B                 jnb     loc_2C2F
.text:0000000000002BA1                 mov     [rsp+2F8h+nbytes], rax
.text:0000000000002BA6                 mov     rax, [rsi+2010h]
.text:0000000000002BAD                 mov     r14, rbx
.text:0000000000002BB0                 mov     rbx, rsi
.text:0000000000002BB3                 mov     [rsp+2F8h+ptr], rax
.text:0000000000002BB8                 jmp     loc_2AE0
.text:0000000000002BBD ; ---------------------------------------------------------------------------
.text:0000000000002BBD
.text:0000000000002BBD loc_2BBD:                               ; CODE XREF: main+C2C↑j
.text:0000000000002BBD                 add     rdi, r14        ; dest
.text:0000000000002BC0                 mov     rdx, r13        ; n
.text:0000000000002BC3                 mov     rsi, rbx        ; src
.text:0000000000002BC6                 call    _memcpy
.text:0000000000002BCB                 mov     rax, [rbx+2000h]
.text:0000000000002BD2                 add     [r14+2000h], rax
.text:0000000000002BD9                 mov     rax, [rbx+2008h]
.text:0000000000002BE0                 add     [r14+2008h], rax
.text:0000000000002BE7                 jmp     loc_2AE0
.text:0000000000002BEC ; ---------------------------------------------------------------------------
.text:0000000000002BEC
.text:0000000000002BEC loc_2BEC:                               ; CODE XREF: main+821↑j
.text:0000000000002BEC                 mov     rdi, rax
.text:0000000000002BEF                 call    pretty_name_isra_7
.text:0000000000002BF4                 cmp     cs:first_file_7393, 0
.text:0000000000002BFB                 lea     rsi, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000002C02                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002C09                 mov     rcx, rax
.text:0000000000002C0C                 mov     edi, 1
.text:0000000000002C11                 cmovz   rdx, rsi
.text:0000000000002C15                 lea     rsi, aSS        ; "%s==> %s <==\n"
.text:0000000000002C1C                 xor     eax, eax
.text:0000000000002C1E                 call    ___printf_chk
.text:0000000000002C23                 mov     cs:first_file_7393, 0
.text:0000000000002C2A                 jmp     loc_2777
.text:0000000000002C2F ; ---------------------------------------------------------------------------
.text:0000000000002C2F
.text:0000000000002C2F loc_2C2F:                               ; CODE XREF: main+C4B↑j
.text:0000000000002C2F                 mov     edi, 2018h
.text:0000000000002C34                 mov     r14, rbx
.text:0000000000002C37                 call    xmalloc
.text:0000000000002C3C                 mov     rbx, rax
.text:0000000000002C3F                 jmp     loc_2AE0
.text:0000000000002C44 ; ---------------------------------------------------------------------------
.text:0000000000002C44
.text:0000000000002C44 loc_2C44:                               ; CODE XREF: main+9F7↑j
.text:0000000000002C44                 add     eax, 1
.text:0000000000002C47                 jnz     loc_327E
.text:0000000000002C4D                 mov     byte ptr [r15+36h], 0
.text:0000000000002C52                 jmp     loc_295D
.text:0000000000002C57 ; ---------------------------------------------------------------------------
.text:0000000000002C57
.text:0000000000002C57 loc_2C57:                               ; CODE XREF: main+BAC↑j
.text:0000000000002C57                 mov     rdi, rbx        ; ptr
.text:0000000000002C5A                 mov     r15, [rsp+2F8h+var_290]
.text:0000000000002C5F                 call    _free
.text:0000000000002C64                 add     r13, 1
.text:0000000000002C68                 jz      loc_3A81
.text:0000000000002C6E                 cmp     [rsp+2F8h+offset], 0
.text:0000000000002C74                 mov     rax, [r14+2000h]
.text:0000000000002C7B                 jz      short loc_2C86
.text:0000000000002C7D                 test    rax, rax
.text:0000000000002C80                 jnz     loc_331B
.text:0000000000002C86
.text:0000000000002C86 loc_2C86:                               ; CODE XREF: main+D2B↑j
.text:0000000000002C86                                         ; main+1470↓j ...
.text:0000000000002C86                 cmp     [rsp+2F8h+ptr], 0
.text:0000000000002C8C                 jz      short loc_2CB0
.text:0000000000002C8E                 mov     rdi, [rsp+2F8h+ptr] ; ptr
.text:0000000000002C93                 nop     dword ptr [rax+rax+00h]
.text:0000000000002C98
.text:0000000000002C98 loc_2C98:                               ; CODE XREF: main+D5A↓j
.text:0000000000002C98                 mov     rbx, [rdi+2010h]
.text:0000000000002C9F                 call    _free
.text:0000000000002CA4                 test    rbx, rbx
.text:0000000000002CA7                 mov     rdi, rbx
.text:0000000000002CAA                 jnz     short loc_2C98
.text:0000000000002CAC                 nop     dword ptr [rax+00h]
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: main+D3C↑j
.text:0000000000002CB0                                         ; main+108C↓j ...
.text:0000000000002CB0                 cmp     cs:forever, 0
.text:0000000000002CB7                 jnz     short loc_2D23
.text:0000000000002CB9                 cmp     [rsp+2F8h+mask], 0
.text:0000000000002CBE                 jz      loc_29D5
.text:0000000000002CC4                 mov     edi, [rsp+2F8h+fildes] ; fd
.text:0000000000002CC8                 call    _close
.text:0000000000002CCD                 test    eax, eax
.text:0000000000002CCF                 jz      loc_29D5
.text:0000000000002CD5                 mov     rdi, [r15]
.text:0000000000002CD8                 call    pretty_name_isra_7
.text:0000000000002CDD                 mov     edi, 4
.text:0000000000002CE2                 mov     rsi, rax
.text:0000000000002CE5                 call    quotearg_style
.text:0000000000002CEA                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000002CF1                 mov     edx, 5          ; category
.text:0000000000002CF6                 xor     edi, edi        ; domainname
.text:0000000000002CF8                 mov     rbx, rax
.text:0000000000002CFB                 call    _dcgettext
.text:0000000000002D00                 mov     rbp, rax
.text:0000000000002D03                 call    ___errno_location
.text:0000000000002D08                 mov     esi, [rax]      ; errnum
.text:0000000000002D0A                 mov     rcx, rbx
.text:0000000000002D0D                 mov     rdx, rbp        ; format
.text:0000000000002D10                 xor     edi, edi        ; status
.text:0000000000002D12                 xor     eax, eax
.text:0000000000002D14                 call    _error
.text:0000000000002D19                 mov     byte ptr [rsp+2F8h+var_2E0], 0
.text:0000000000002D1E                 jmp     loc_29D5
.text:0000000000002D23 ; ---------------------------------------------------------------------------
.text:0000000000002D23
.text:0000000000002D23 loc_2D23:                               ; CODE XREF: main+D67↑j
.text:0000000000002D23                 movzx   eax, byte ptr [rsp+2F8h+var_2E0]
.text:0000000000002D28                 mov     rdx, [rsp+2F8h+readfds] ; stat_buf
.text:0000000000002D2D                 mov     edi, 1          ; ver
.text:0000000000002D32                 mov     esi, [rsp+2F8h+fildes] ; fildes
.text:0000000000002D36                 sub     eax, 1
.text:0000000000002D39                 mov     [r15+3Ch], eax
.text:0000000000002D3D                 call    ___fxstat
.text:0000000000002D42                 test    eax, eax
.text:0000000000002D44                 js      loc_32BD
.text:0000000000002D4A                 mov     edx, [rsp+2F8h+stat_buf.st_mode]
.text:0000000000002D51                 mov     eax, edx
.text:0000000000002D53                 and     eax, 0F000h
.text:0000000000002D58                 sub     eax, 1000h
.text:0000000000002D5D                 test    eax, 0FFFFE000h
.text:0000000000002D62                 jz      short loc_2D76
.text:0000000000002D64                 mov     eax, edx
.text:0000000000002D66                 and     eax, 0B000h
.text:0000000000002D6B                 cmp     eax, 8000h
.text:0000000000002D70                 jnz     loc_2E04
.text:0000000000002D76
.text:0000000000002D76 loc_2D76:                               ; CODE XREF: main+E12↑j
.text:0000000000002D76                 cmp     byte ptr [rsp+2F8h+var_2E0], 0
.text:0000000000002D7B                 jz      loc_2E81
.text:0000000000002D81                 mov     rcx, [rsp+2F8h+timeout.tv_sec]
.text:0000000000002D89                 cmp     [rsp+2F8h+mask], 0
.text:0000000000002D8E                 mov     eax, 1
.text:0000000000002D93                 cmovz   eax, dword ptr [rsp+2F8h+var_288]
.text:0000000000002D98                 mov     ebx, [rsp+2F8h+fildes]
.text:0000000000002D9C                 mov     rdi, [r15]
.text:0000000000002D9F                 mov     [r15+30h], edx
.text:0000000000002DA3                 mov     [r15+8], rcx
.text:0000000000002DA7                 mov     rcx, [rsp+2F8h+stat_buf.st_mtim.tv_sec]
.text:0000000000002DAF                 mov     [r15+38h], ebx
.text:0000000000002DB3                 mov     qword ptr [r15+58h], 0
.text:0000000000002DBB                 mov     [r15+40h], eax
.text:0000000000002DBF                 mov     byte ptr [r15+34h], 0
.text:0000000000002DC4                 mov     [r15+10h], rcx
.text:0000000000002DC8                 mov     rcx, [rsp+2F8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000002DD0                 mov     [r15+18h], rcx
.text:0000000000002DD4                 mov     rcx, [rsp+2F8h+stat_buf.st_dev]
.text:0000000000002DDC                 mov     [r15+20h], rcx
.text:0000000000002DE0                 mov     rcx, [rsp+2F8h+stat_buf.st_ino]
.text:0000000000002DE8                 mov     [r15+28h], rcx
.text:0000000000002DEC                 call    pretty_name_isra_7
.text:0000000000002DF1                 mov     edi, ebx
.text:0000000000002DF3                 mov     rsi, rax
.text:0000000000002DF6                 call    fremote
.text:0000000000002DFB                 mov     [r15+35h], al
.text:0000000000002DFF                 jmp     loc_29D5
.text:0000000000002E04 ; ---------------------------------------------------------------------------
.text:0000000000002E04
.text:0000000000002E04 loc_2E04:                               ; CODE XREF: main+E20↑j
.text:0000000000002E04                 movzx   eax, cs:reopen_inaccessible_files
.text:0000000000002E0B                 mov     dword ptr [r15+3Ch], 0FFFFFFFFh
.text:0000000000002E13                 lea     rbp, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002E1A                 mov     byte ptr [r15+36h], 0
.text:0000000000002E1F                 xor     eax, 1
.text:0000000000002E22                 test    al, al
.text:0000000000002E24                 mov     [r15+34h], al
.text:0000000000002E28                 jz      short loc_2E40
.text:0000000000002E2A                 lea     rsi, aGivingUpOnThis ; "; giving up on this name"
.text:0000000000002E31                 mov     edx, 5          ; category
.text:0000000000002E36                 xor     edi, edi        ; domainname
.text:0000000000002E38                 call    _dcgettext
.text:0000000000002E3D                 mov     rbp, rax
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: main+ED8↑j
.text:0000000000002E40                 mov     rdi, [r15]
.text:0000000000002E43                 call    pretty_name_isra_7
.text:0000000000002E48                 mov     esi, 3
.text:0000000000002E4D                 mov     rdx, rax
.text:0000000000002E50                 xor     edi, edi
.text:0000000000002E52                 call    quotearg_n_style_colon
.text:0000000000002E57                 lea     rsi, aSCannotFollowE ; "%s: cannot follow end of this type of f"...
.text:0000000000002E5E                 mov     rbx, rax
.text:0000000000002E61                 mov     edx, 5          ; category
.text:0000000000002E66                 xor     edi, edi        ; domainname
.text:0000000000002E68                 call    _dcgettext
.text:0000000000002E6D                 mov     r8, rbp
.text:0000000000002E70                 mov     rdx, rax        ; format
.text:0000000000002E73                 mov     rcx, rbx
.text:0000000000002E76                 xor     esi, esi        ; errnum
.text:0000000000002E78                 xor     edi, edi        ; status
.text:0000000000002E7A                 xor     eax, eax
.text:0000000000002E7C                 call    _error
.text:0000000000002E81
.text:0000000000002E81 loc_2E81:                               ; CODE XREF: main+E2B↑j
.text:0000000000002E81                                         ; main+13B7↓j
.text:0000000000002E81                 movzx   eax, cs:reopen_inaccessible_files
.text:0000000000002E88                 mov     rdi, [r15]
.text:0000000000002E8B                 xor     eax, 1
.text:0000000000002E8E                 mov     [r15+34h], al
.text:0000000000002E92                 call    pretty_name_isra_7
.text:0000000000002E97                 mov     edi, [rsp+2F8h+fildes]
.text:0000000000002E9B                 mov     rsi, rax
.text:0000000000002E9E                 call    close_fd
.text:0000000000002EA3                 mov     dword ptr [r15+38h], 0FFFFFFFFh
.text:0000000000002EAB                 mov     byte ptr [rsp+2F8h+var_2E0], 0
.text:0000000000002EB0                 jmp     loc_29D5
.text:0000000000002EB5 ; ---------------------------------------------------------------------------
.text:0000000000002EB5
.text:0000000000002EB5 loc_2EB5:                               ; CODE XREF: main+884↑j
.text:0000000000002EB5                 test    al, al
.text:0000000000002EB7                 jz      loc_30A7
.text:0000000000002EBD
.text:0000000000002EBD loc_2EBD:                               ; CODE XREF: main+115D↓j
.text:0000000000002EBD                                         ; main+11AB↓j ...
.text:0000000000002EBD                 mov     edi, 2010h
.text:0000000000002EC2                 xor     r12d, r12d
.text:0000000000002EC5                 call    xmalloc
.text:0000000000002ECA                 mov     edi, 2010h
.text:0000000000002ECF                 mov     r13, rax
.text:0000000000002ED2                 mov     qword ptr [rax+2000h], 0
.text:0000000000002EDD                 mov     qword ptr [rax+2008h], 0
.text:0000000000002EE8                 mov     rbp, r13
.text:0000000000002EEB                 call    xmalloc
.text:0000000000002EF0                 mov     r14d, [rsp+2F8h+fildes]
.text:0000000000002EF5                 mov     rbx, rax
.text:0000000000002EF8                 jmp     short loc_2F29
.text:0000000000002EFA ; ---------------------------------------------------------------------------
.text:0000000000002EFA
.text:0000000000002EFA loc_2EFA:                               ; CODE XREF: main+1026↓j
.text:0000000000002EFA                 mov     rax, r12
.text:0000000000002EFD                 sub     rax, [rbp+2000h]
.text:0000000000002F04                 mov     [r13+2008h], rbx
.text:0000000000002F0B                 cmp     [rsp+2F8h+offset], rax
.text:0000000000002F10                 jnb     loc_330C
.text:0000000000002F16                 mov     r12, rax
.text:0000000000002F19                 mov     rax, rbp
.text:0000000000002F1C                 mov     rbp, [rbp+2008h]
.text:0000000000002F23
.text:0000000000002F23 loc_2F23:                               ; CODE XREF: main+104C↓j
.text:0000000000002F23                                         ; main+13C6↓j
.text:0000000000002F23                 mov     r13, rbx
.text:0000000000002F26                 mov     rbx, rax
.text:0000000000002F29
.text:0000000000002F29 loc_2F29:                               ; CODE XREF: main+FA8↑j
.text:0000000000002F29                 mov     edx, 2000h      ; nbytes
.text:0000000000002F2E                 mov     rsi, rbx        ; buf
.text:0000000000002F31                 mov     edi, r14d       ; fd
.text:0000000000002F34                 call    safe_read
.text:0000000000002F39                 lea     rdx, [rax-1]
.text:0000000000002F3D                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000002F41                 ja      loc_39DC
.text:0000000000002F47                 add     [rsp+2F8h+timeout.tv_sec], rax
.text:0000000000002F4F                 mov     [rbx+2000h], rax
.text:0000000000002F56                 add     r12, rax
.text:0000000000002F59                 mov     rdx, [r13+2000h]
.text:0000000000002F60                 mov     qword ptr [rbx+2008h], 0
.text:0000000000002F6B                 lea     rsi, [rax+rdx]
.text:0000000000002F6F                 cmp     rsi, 1FFFh
.text:0000000000002F76                 ja      short loc_2EFA
.text:0000000000002F78                 lea     rdi, [r13+rdx+0] ; dest
.text:0000000000002F7D                 mov     rsi, rbx        ; src
.text:0000000000002F80                 mov     rdx, rax        ; n
.text:0000000000002F83                 call    _memcpy
.text:0000000000002F88                 mov     rax, [rbx+2000h]
.text:0000000000002F8F                 add     [r13+2000h], rax
.text:0000000000002F96                 mov     rax, rbx
.text:0000000000002F99                 mov     rbx, r13
.text:0000000000002F9C                 jmp     short loc_2F23
.text:0000000000002F9E ; ---------------------------------------------------------------------------
.text:0000000000002F9E
.text:0000000000002F9E loc_2F9E:                               ; CODE XREF: main+868↑j
.text:0000000000002F9E                 mov     rsi, [rsp+2F8h+var_2B0]
.text:0000000000002FA3                 mov     edi, 4
.text:0000000000002FA8                 call    quotearg_style
.text:0000000000002FAD                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000002FB4                 xor     edi, edi        ; domainname
.text:0000000000002FB6                 mov     edx, 5          ; category
.text:0000000000002FBB                 mov     rbx, rax
.text:0000000000002FBE                 call    _dcgettext
.text:0000000000002FC3                 mov     rbp, rax
.text:0000000000002FC6                 call    ___errno_location
.text:0000000000002FCB                 mov     esi, [rax]      ; errnum
.text:0000000000002FCD                 mov     rcx, rbx
.text:0000000000002FD0                 mov     rdx, rbp        ; format
.text:0000000000002FD3                 xor     edi, edi        ; status
.text:0000000000002FD5                 xor     eax, eax
.text:0000000000002FD7                 call    _error
.text:0000000000002FDC                 jmp     loc_2CB0
.text:0000000000002FE1 ; ---------------------------------------------------------------------------
.text:0000000000002FE1
.text:0000000000002FE1 loc_2FE1:                               ; CODE XREF: main+B08↑j
.text:0000000000002FE1                 mov     rsi, [rsp+2F8h+var_2B0]
.text:0000000000002FE6                 mov     edi, 4
.text:0000000000002FEB                 call    quotearg_style
.text:0000000000002FF0                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:0000000000002FF7                 mov     edx, 5          ; category
.text:0000000000002FFC                 xor     edi, edi        ; domainname
.text:0000000000002FFE                 mov     rbx, rax
.text:0000000000003001                 call    _dcgettext
.text:0000000000003006                 mov     rbp, rax
.text:0000000000003009                 call    ___errno_location
.text:000000000000300E                 mov     esi, [rax]      ; errnum
.text:0000000000003010                 mov     rcx, rbx
.text:0000000000003013                 mov     rdx, rbp        ; format
.text:0000000000003016                 xor     edi, edi        ; status
.text:0000000000003018                 xor     eax, eax
.text:000000000000301A                 call    _error
.text:000000000000301F                 mov     byte ptr [rsp+2F8h+var_2E0], 0
.text:0000000000003024                 jmp     loc_2CB0
.text:0000000000003029 ; ---------------------------------------------------------------------------
.text:0000000000003029
.text:0000000000003029 loc_3029:                               ; CODE XREF: main+88C↑j
.text:0000000000003029                                         ; main+898↑j ...
.text:0000000000003029                 mov     rdx, [rsp+2F8h+offset]
.text:000000000000302E                 mov     esi, [rsp+2F8h+fildes]
.text:0000000000003032                 lea     rcx, [rsp+2F8h+timeout]
.text:000000000000303A                 mov     rdi, [rsp+2F8h+var_2B0]
.text:000000000000303F                 call    start_bytes
.text:0000000000003044                 test    eax, eax
.text:0000000000003046                 mov     [rsp+2F8h+offset], 0FFFFFFFFFFFFFFFFh
.text:000000000000304F                 jnz     short loc_309B
.text:0000000000003051
.text:0000000000003051 loc_3051:                               ; CODE XREF: main+8E8↑j
.text:0000000000003051                                         ; main+11D9↓j
.text:0000000000003051                 mov     rcx, [rsp+2F8h+offset]
.text:0000000000003056                 mov     edx, [rsp+2F8h+fildes]
.text:000000000000305A                 xor     edi, edi
.text:000000000000305C                 mov     rsi, [rsp+2F8h+var_2B0]
.text:0000000000003061                 call    dump_remainder
.text:0000000000003066                 mov     byte ptr [rsp+2F8h+var_2E0], 1
.text:000000000000306B                 add     [rsp+2F8h+timeout.tv_sec], rax
.text:0000000000003073                 jmp     loc_2CB0
.text:0000000000003078 ; ---------------------------------------------------------------------------
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: main+B17↑j
.text:0000000000003078                 mov     rdx, [rsp+2F8h+offset]
.text:000000000000307D                 mov     esi, [rsp+2F8h+fildes]
.text:0000000000003081                 lea     rcx, [rsp+2F8h+timeout]
.text:0000000000003089                 mov     rdi, [rsp+2F8h+var_2B0]
.text:000000000000308E                 call    start_lines
.text:0000000000003093                 test    eax, eax
.text:0000000000003095                 jz      loc_33DC
.text:000000000000309B
.text:000000000000309B loc_309B:                               ; CODE XREF: main+10FF↑j
.text:000000000000309B                 shr     eax, 1Fh
.text:000000000000309E                 mov     dword ptr [rsp+2F8h+var_2E0], eax
.text:00000000000030A2                 jmp     loc_2CB0
.text:00000000000030A7 ; ---------------------------------------------------------------------------
.text:00000000000030A7
.text:00000000000030A7 loc_30A7:                               ; CODE XREF: main+F67↑j
.text:00000000000030A7                 cmp     [rsp+2F8h+offset], 0
.text:00000000000030AD                 js      loc_2EBD
.text:00000000000030B3                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:00000000000030BA                 and     eax, 0D000h
.text:00000000000030BF                 cmp     eax, 8000h
.text:00000000000030C4                 jnz     loc_3BA1
.text:00000000000030CA                 mov     rbp, [rsp+2F8h+stat_buf.st_size]
.text:00000000000030D2                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000030D6
.text:00000000000030D6 loc_30D6:                               ; CODE XREF: main+1C7B↓j
.text:00000000000030D6                 mov     rax, [rsp+2F8h+stat_buf.st_blksize]
.text:00000000000030DE                 mov     rcx, 1FFFFFFFFFFFFFFFh
.text:00000000000030E8                 lea     rdx, [rax-1]
.text:00000000000030EC                 cmp     rdx, rcx
.text:00000000000030EF                 mov     edx, 200h
.text:00000000000030F4                 cmova   rax, rdx
.text:00000000000030F8                 cmp     rbp, rax
.text:00000000000030FB                 jle     loc_2EBD
.text:0000000000003101                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003105                 jz      loc_3B53
.text:000000000000310B
.text:000000000000310B loc_310B:                               ; CODE XREF: main+1C1B↓j
.text:000000000000310B                 cmp     rbp, rbx
.text:000000000000310E                 jle     short loc_3121
.text:0000000000003110                 mov     rax, rbp
.text:0000000000003113                 sub     rax, rbx
.text:0000000000003116                 cmp     [rsp+2F8h+offset], rax
.text:000000000000311B                 jb      loc_3B81
.text:0000000000003121
.text:0000000000003121 loc_3121:                               ; CODE XREF: main+11BE↑j
.text:0000000000003121                                         ; main+1C4C↓j
.text:0000000000003121                 mov     [rsp+2F8h+timeout.tv_sec], rbx
.text:0000000000003129                 jmp     loc_3051
.text:000000000000312E ; ---------------------------------------------------------------------------
.text:000000000000312E
.text:000000000000312E loc_312E:                               ; CODE XREF: main+641↑j
.text:000000000000312E                 sub     ebx, eax
.text:0000000000003130                 movsxd  rcx, ebx
.text:0000000000003133                 lea     rbx, [r12+rax*8]
.text:0000000000003137                 mov     [rsp+2F8h+var_2F8], rcx
.text:000000000000313B                 jmp     loc_25A6
.text:0000000000003140 ; ---------------------------------------------------------------------------
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: main+AB7↑j
.text:0000000000003140                 mov     rbp, [rsp+2F8h+var_298]
.text:0000000000003145                 mov     r13, [rsp+2F8h+var_2D0]
.text:000000000000314A                 lea     r12, s2+1       ; "-"
.text:0000000000003151                 xor     ebx, ebx
.text:0000000000003153                 add     rbp, r13
.text:0000000000003156
.text:0000000000003156 loc_3156:                               ; CODE XREF: main+1241↓j
.text:0000000000003156                 cmp     rbp, r13
.text:0000000000003159                 jz      short loc_31A2
.text:000000000000315B                 mov     rdi, [r13+0]    ; s1
.text:000000000000315F                 mov     rsi, r12        ; s2
.text:0000000000003162                 call    _strcmp
.text:0000000000003167                 test    eax, eax
.text:0000000000003169                 jnz     short loc_3189
.text:000000000000316B                 cmp     byte ptr [r13+34h], 0
.text:0000000000003170                 jnz     short loc_3189
.text:0000000000003172                 cmp     dword ptr [r13+38h], 0
.text:0000000000003177                 js      short loc_3189
.text:0000000000003179                 mov     eax, [r13+30h]
.text:000000000000317D                 and     eax, 0F000h
.text:0000000000003182                 cmp     eax, 1000h
.text:0000000000003187                 jz      short loc_3193
.text:0000000000003189
.text:0000000000003189 loc_3189:                               ; CODE XREF: main+1219↑j
.text:0000000000003189                                         ; main+1220↑j ...
.text:0000000000003189                 add     rbx, 1
.text:000000000000318D
.text:000000000000318D loc_318D:                               ; CODE XREF: main+1250↓j
.text:000000000000318D                 add     r13, 60h ; '`'
.text:0000000000003191                 jmp     short loc_3156
.text:0000000000003193 ; ---------------------------------------------------------------------------
.text:0000000000003193
.text:0000000000003193 loc_3193:                               ; CODE XREF: main+1237↑j
.text:0000000000003193                 mov     dword ptr [r13+38h], 0FFFFFFFFh
.text:000000000000319B                 mov     byte ptr [r13+34h], 1
.text:00000000000031A0                 jmp     short loc_318D
.text:00000000000031A2 ; ---------------------------------------------------------------------------
.text:00000000000031A2
.text:00000000000031A2 loc_31A2:                               ; CODE XREF: main+1209↑j
.text:00000000000031A2                 test    rbx, rbx
.text:00000000000031A5                 jz      loc_2A0D
.text:00000000000031AB                 lea     rdx, [rsp+2F8h+var_168] ; stat_buf
.text:00000000000031B3                 mov     esi, 1          ; fildes
.text:00000000000031B8                 mov     edi, 1          ; ver
.text:00000000000031BD                 call    ___fxstat
.text:00000000000031C2                 test    eax, eax
.text:00000000000031C4                 js      loc_4881
.text:00000000000031CA                 mov     eax, [rsp+2F8h+var_168.st_mode]
.text:00000000000031D1                 and     eax, 0F000h
.text:00000000000031D6                 cmp     eax, 1000h
.text:00000000000031DB                 setz    cs:monitor_output
.text:00000000000031E2                 cmp     cs:disable_inotify, 0
.text:00000000000031E9                 jnz     loc_3448
.text:00000000000031EF                 mov     rbp, [rsp+2F8h+var_2D0]
.text:00000000000031F4                 lea     rbx, s2+1       ; "-"
.text:00000000000031FB                 jmp     short loc_321B
.text:00000000000031FD ; ---------------------------------------------------------------------------
.text:00000000000031FD
.text:00000000000031FD loc_31FD:                               ; CODE XREF: main+12CE↓j
.text:00000000000031FD                 cmp     byte ptr [rbp+34h], 0
.text:0000000000003201                 jnz     short loc_3217
.text:0000000000003203                 mov     rdi, [rbp+0]    ; s1
.text:0000000000003207                 mov     rsi, rbx        ; s2
.text:000000000000320A                 call    _strcmp
.text:000000000000320F                 test    eax, eax
.text:0000000000003211                 jz      loc_3448
.text:0000000000003217
.text:0000000000003217 loc_3217:                               ; CODE XREF: main+12B1↑j
.text:0000000000003217                 add     rbp, 60h ; '`'
.text:000000000000321B
.text:000000000000321B loc_321B:                               ; CODE XREF: main+12AB↑j
.text:000000000000321B                 cmp     rbp, r13
.text:000000000000321E                 jnz     short loc_31FD
.text:0000000000003220                 mov     rax, [rsp+2F8h+var_2D0]
.text:0000000000003225                 mov     rcx, [rsp+2F8h+var_298]
.text:000000000000322A                 lea     rdx, [rax+35h]
.text:000000000000322E                 lea     rcx, [rax+rcx+35h]
.text:0000000000003233                 mov     rax, rdx
.text:0000000000003236                 jmp     short loc_324B
.text:0000000000003238 ; ---------------------------------------------------------------------------
.text:0000000000003238
.text:0000000000003238 loc_3238:                               ; CODE XREF: main+12FE↓j
.text:0000000000003238                 cmp     dword ptr [rax+3], 0
.text:000000000000323C                 js      short loc_3247
.text:000000000000323E                 cmp     byte ptr [rax], 0
.text:0000000000003241                 jnz     loc_3448
.text:0000000000003247
.text:0000000000003247 loc_3247:                               ; CODE XREF: main+12EC↑j
.text:0000000000003247                 add     rax, 60h ; '`'
.text:000000000000324B
.text:000000000000324B loc_324B:                               ; CODE XREF: main+12E6↑j
.text:000000000000324B                 cmp     rax, rcx
.text:000000000000324E                 jnz     short loc_3238
.text:0000000000003250                 jmp     loc_3443
.text:0000000000003255 ; ---------------------------------------------------------------------------
.text:0000000000003255
.text:0000000000003255 loc_3255:                               ; CODE XREF: main+AC4↑j
.text:0000000000003255                 xor     edi, edi        ; fd
.text:0000000000003257                 call    _close
.text:000000000000325C                 test    eax, eax
.text:000000000000325E                 jns     loc_2A1A
.text:0000000000003264                 call    ___errno_location
.text:0000000000003269                 mov     esi, [rax]      ; errnum
.text:000000000000326B                 lea     rdx, s2+1       ; format
.text:0000000000003272                 mov     edi, 1          ; status
.text:0000000000003277                 xor     eax, eax
.text:0000000000003279                 call    _error
.text:000000000000327E
.text:000000000000327E loc_327E:                               ; CODE XREF: main+CF7↑j
.text:000000000000327E                 mov     rax, [r15]
.text:0000000000003281                 jmp     loc_2765
.text:0000000000003286 ; ---------------------------------------------------------------------------
.text:0000000000003286
.text:0000000000003286 loc_3286:                               ; CODE XREF: main+4F6↑j
.text:0000000000003286                 xor     r14d, r14d
.text:0000000000003289                 mov     ecx, 1400h
.text:000000000000328E
.text:000000000000328E loc_328E:                               ; CODE XREF: main+1361↓j
.text:000000000000328E                                         ; main+136B↓j
.text:000000000000328E                 lea     rax, [rdx+1]
.text:0000000000003292                 jmp     loc_245A
.text:0000000000003297 ; ---------------------------------------------------------------------------
.text:0000000000003297
.text:0000000000003297 loc_3297:                               ; CODE XREF: main+528↑j
.text:0000000000003297                 mov     eax, ecx
.text:0000000000003299                 mov     [rsp+2F8h+var_268], rax
.text:00000000000032A1                 jmp     loc_24A2
.text:00000000000032A6 ; ---------------------------------------------------------------------------
.text:00000000000032A6
.text:00000000000032A6 loc_32A6:                               ; CODE XREF: main+4ED↑j
.text:00000000000032A6                 mov     r14d, 1
.text:00000000000032AC                 mov     ecx, 0Ah
.text:00000000000032B1                 jmp     short loc_328E
.text:00000000000032B3 ; ---------------------------------------------------------------------------
.text:00000000000032B3
.text:00000000000032B3 loc_32B3:                               ; CODE XREF: main+4E4↑j
.text:00000000000032B3                 xor     r14d, r14d
.text:00000000000032B6                 mov     ecx, 0Ah
.text:00000000000032BB                 jmp     short loc_328E
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032BD
.text:00000000000032BD loc_32BD:                               ; CODE XREF: main+DF4↑j
.text:00000000000032BD                 call    ___errno_location
.text:00000000000032C2                 mov     rbx, rax
.text:00000000000032C5                 mov     eax, [rax]
.text:00000000000032C7                 mov     rdi, [r15]
.text:00000000000032CA                 mov     [r15+3Ch], eax
.text:00000000000032CE                 call    pretty_name_isra_7
.text:00000000000032D3                 mov     edi, 4
.text:00000000000032D8                 mov     rsi, rax
.text:00000000000032DB                 call    quotearg_style
.text:00000000000032E0                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000032E7                 xor     edi, edi        ; domainname
.text:00000000000032E9                 mov     edx, 5          ; category
.text:00000000000032EE                 mov     rbp, rax
.text:00000000000032F1                 call    _dcgettext
.text:00000000000032F6                 mov     esi, [rbx]      ; errnum
.text:00000000000032F8                 mov     rdx, rax        ; format
.text:00000000000032FB                 mov     rcx, rbp
.text:00000000000032FE                 xor     edi, edi        ; status
.text:0000000000003300                 xor     eax, eax
.text:0000000000003302                 call    _error
.text:0000000000003307                 jmp     loc_2E81
.text:000000000000330C ; ---------------------------------------------------------------------------
.text:000000000000330C
.text:000000000000330C loc_330C:                               ; CODE XREF: main+FC0↑j
.text:000000000000330C                 mov     edi, 2010h
.text:0000000000003311                 call    xmalloc
.text:0000000000003316                 jmp     loc_2F23
.text:000000000000331B ; ---------------------------------------------------------------------------
.text:000000000000331B
.text:000000000000331B loc_331B:                               ; CODE XREF: main+D30↑j
.text:000000000000331B                 movsx   r12d, cs:line_end
.text:0000000000003323                 cmp     [r14+rax-1], r12b
.text:0000000000003328                 jz      short loc_3338
.text:000000000000332A                 add     qword ptr [r14+2008h], 1
.text:0000000000003332                 add     [rsp+2F8h+nbytes], 1
.text:0000000000003338
.text:0000000000003338 loc_3338:                               ; CODE XREF: main+13D8↑j
.text:0000000000003338                 mov     r13, [rsp+2F8h+ptr]
.text:000000000000333D                 mov     rdx, [rsp+2F8h+nbytes]
.text:0000000000003342                 mov     rcx, [rsp+2F8h+offset]
.text:0000000000003347                 jmp     short loc_3353
.text:0000000000003349 ; ---------------------------------------------------------------------------
.text:0000000000003349
.text:0000000000003349 loc_3349:                               ; CODE XREF: main+1410↓j
.text:0000000000003349                 mov     r13, [r13+2010h]
.text:0000000000003350                 mov     rdx, rax
.text:0000000000003353
.text:0000000000003353 loc_3353:                               ; CODE XREF: main+13F7↑j
.text:0000000000003353                 mov     rax, rdx
.text:0000000000003356                 sub     rax, [r13+2008h]
.text:000000000000335D                 cmp     rcx, rax
.text:0000000000003360                 jb      short loc_3349
.text:0000000000003362                 mov     rbp, [r13+2000h]
.text:0000000000003369                 mov     rax, [rsp+2F8h+offset]
.text:000000000000336E                 mov     rbx, rdx
.text:0000000000003371                 mov     rdi, r13        ; s
.text:0000000000003374                 add     rbp, r13
.text:0000000000003377                 cmp     rax, rdx
.text:000000000000337A                 jnb     short loc_33A0
.text:000000000000337C                 sub     rbx, rax
.text:000000000000337F
.text:000000000000337F loc_337F:                               ; CODE XREF: main+144E↓j
.text:000000000000337F                 mov     rdx, rbp
.text:0000000000003382                 mov     esi, r12d       ; c
.text:0000000000003385                 sub     rdx, rdi        ; n
.text:0000000000003388                 call    _memchr
.text:000000000000338D                 test    rax, rax
.text:0000000000003390                 jz      loc_4813
.text:0000000000003396                 sub     rbx, 1
.text:000000000000339A                 lea     rdi, [rax+1]
.text:000000000000339E                 jnz     short loc_337F
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: main+142A↑j
.text:00000000000033A0                 mov     rsi, rbp
.text:00000000000033A3                 sub     rsi, rdi
.text:00000000000033A6                 jz      short loc_33AD
.text:00000000000033A8                 call    xwrite_stdout_part_10
.text:00000000000033AD
.text:00000000000033AD loc_33AD:                               ; CODE XREF: main+1456↑j
.text:00000000000033AD                 mov     rbx, [r13+2010h]
.text:00000000000033B4                 jmp     short loc_33BD
.text:00000000000033B6 ; ---------------------------------------------------------------------------
.text:00000000000033B6
.text:00000000000033B6 loc_33B6:                               ; CODE XREF: main+1480↓j
.text:00000000000033B6                                         ; main+148A↓j
.text:00000000000033B6                 mov     rbx, [rbx+2010h]
.text:00000000000033BD
.text:00000000000033BD loc_33BD:                               ; CODE XREF: main+1464↑j
.text:00000000000033BD                 test    rbx, rbx
.text:00000000000033C0                 jz      loc_2C86
.text:00000000000033C6                 mov     rsi, [rbx+2000h]
.text:00000000000033CD                 test    rsi, rsi
.text:00000000000033D0                 jz      short loc_33B6
.text:00000000000033D2                 mov     rdi, rbx
.text:00000000000033D5                 call    xwrite_stdout_part_10
.text:00000000000033DA                 jmp     short loc_33B6
.text:00000000000033DC ; ---------------------------------------------------------------------------
.text:00000000000033DC
.text:00000000000033DC loc_33DC:                               ; CODE XREF: main+1145↑j
.text:00000000000033DC                 mov     edx, [rsp+2F8h+fildes]
.text:00000000000033E0                 mov     rsi, [rsp+2F8h+var_2B0]
.text:00000000000033E5                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000033E9                 xor     edi, edi
.text:00000000000033EB                 call    dump_remainder
.text:00000000000033F0                 mov     byte ptr [rsp+2F8h+var_2E0], bl
.text:00000000000033F4                 add     [rsp+2F8h+timeout.tv_sec], rax
.text:00000000000033FC                 jmp     loc_2CB0
.text:0000000000003401 ; ---------------------------------------------------------------------------
.text:0000000000003401
.text:0000000000003401 loc_3401:                               ; CODE XREF: main+71B↑j
.text:0000000000003401                 xor     eax, eax
.text:0000000000003403                 jmp     loc_2A28
.text:0000000000003408 ; ---------------------------------------------------------------------------
.text:0000000000003408
.text:0000000000003408 loc_3408:                               ; CODE XREF: main+8AF↑j
.text:0000000000003408                 mov     rcx, [rsp+2F8h+var_2B0]
.text:000000000000340D                 mov     rsi, [rsp+2F8h+offset]
.text:0000000000003412                 mov     edx, 1
.text:0000000000003417                 mov     edi, [rsp+2F8h+fildes]
.text:000000000000341B                 call    xlseek
.text:0000000000003420                 test    rax, rax
.text:0000000000003423                 jns     loc_2822
.text:0000000000003429                 jmp     loc_2805
.text:000000000000342E ; ---------------------------------------------------------------------------
.text:000000000000342E
.text:000000000000342E loc_342E:                               ; CODE XREF: main+14F6↓j
.text:000000000000342E                 cmp     dword ptr [rdx+3], 0
.text:0000000000003432                 js      short loc_343F
.text:0000000000003434                 movzx   ecx, byte ptr [rdx]
.text:0000000000003437                 test    cl, cl
.text:0000000000003439                 jz      loc_3C7B
.text:000000000000343F
.text:000000000000343F loc_343F:                               ; CODE XREF: main+14E2↑j
.text:000000000000343F                 add     rdx, 60h ; '`'
.text:0000000000003443
.text:0000000000003443 loc_3443:                               ; CODE XREF: main+1300↑j
.text:0000000000003443                 cmp     rax, rdx
.text:0000000000003446                 jnz     short loc_342E
.text:0000000000003448
.text:0000000000003448 loc_3448:                               ; CODE XREF: main+1299↑j
.text:0000000000003448                                         ; main+12C1↑j ...
.text:0000000000003448                 cmp     cs:pid, 0
.text:000000000000344F                 mov     cs:disable_inotify, 1
.text:0000000000003456                 jnz     short loc_346C
.text:0000000000003458                 cmp     cs:follow_mode, 2
.text:000000000000345F                 jnz     short loc_346C
.text:0000000000003461                 cmp     [rsp+2F8h+var_2F8], 1
.text:0000000000003466                 jz      loc_3CCB
.text:000000000000346C
.text:000000000000346C loc_346C:                               ; CODE XREF: main+1506↑j
.text:000000000000346C                                         ; main+150F↑j ...
.text:000000000000346C                 xor     r15d, r15d
.text:000000000000346F
.text:000000000000346F loc_346F:                               ; CODE XREF: main+1DA2↓j
.text:000000000000346F                 mov     eax, r15d
.text:0000000000003472                 mov     rcx, [rsp+2F8h+var_298]
.text:0000000000003477                 mov     byte ptr [rsp+2F8h+var_2B0], 0
.text:000000000000347C                 and     eax, 1
.text:000000000000347F                 mov     byte ptr [rsp+2F8h+mask], al
.text:0000000000003483                 mov     rax, [rsp+2F8h+var_2F8]
.text:0000000000003487                 sub     rax, 1
.text:000000000000348B                 mov     [rsp+2F8h+buf], rax
.text:0000000000003490                 mov     rax, [rsp+2F8h+var_2D0]
.text:0000000000003495                 lea     rax, [rax+rcx+34h]
.text:000000000000349A                 mov     [rsp+2F8h+var_2E0], rax
.text:000000000000349F                 lea     rax, [rsp+2F8h+stat_buf]
.text:00000000000034A7                 mov     [rsp+2F8h+offset], rax
.text:00000000000034AC
.text:00000000000034AC loc_34AC:                               ; CODE XREF: main+17B5↓j
.text:00000000000034AC                                         ; main+1815↓j ...
.text:00000000000034AC                 cmp     [rsp+2F8h+var_2F8], 0
.text:00000000000034B1                 jz      loc_394E
.text:00000000000034B7                 mov     r14, [rsp+2F8h+var_2D0]
.text:00000000000034BC                 mov     byte ptr [rsp+2F8h+fildes], 0
.text:00000000000034C1                 xor     ebx, ebx
.text:00000000000034C3                 jmp     short loc_34F4
.text:00000000000034C3 ; ---------------------------------------------------------------------------
.text:00000000000034C5                 align 8
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: main+161E↓j
.text:00000000000034C8                                         ; main+16EB↓j ...
.text:00000000000034C8                 mov     edx, ebp
.text:00000000000034CA                 xor     edi, edi
.text:00000000000034CC                 mov     rsi, r13
.text:00000000000034CF                 call    dump_remainder
.text:00000000000034D4                 test    rax, rax
.text:00000000000034D7                 setnz   dl
.text:00000000000034DA                 add     [r14+8], rax
.text:00000000000034DE                 or      byte ptr [rsp+2F8h+fildes], dl
.text:00000000000034E2
.text:00000000000034E2 loc_34E2:                               ; CODE XREF: main+15A9↓j
.text:00000000000034E2                                         ; main+18FB↓j ...
.text:00000000000034E2                 add     rbx, 1
.text:00000000000034E6                 add     r14, 60h ; '`'
.text:00000000000034EA                 cmp     [rsp+2F8h+var_2F8], rbx
.text:00000000000034EE                 jz      loc_367D
.text:00000000000034F4
.text:00000000000034F4 loc_34F4:                               ; CODE XREF: main+1573↑j
.text:00000000000034F4                                         ; main+1727↓j
.text:00000000000034F4                 cmp     byte ptr [r14+34h], 0
.text:00000000000034F9                 jnz     short loc_34E2
.text:00000000000034FB                 mov     ebp, [r14+38h]
.text:00000000000034FF                 test    ebp, ebp
.text:0000000000003501                 js      loc_3660
.text:0000000000003507                 mov     rdi, [r14]
.text:000000000000350A                 call    pretty_name_isra_7
.text:000000000000350F                 mov     r13, rax
.text:0000000000003512                 mov     eax, [r14+40h]
.text:0000000000003516                 mov     r12d, [r14+30h]
.text:000000000000351A                 cmp     r15d, eax
.text:000000000000351D                 jz      short loc_3565
.text:000000000000351F                 xor     eax, eax
.text:0000000000003521                 mov     esi, 3
.text:0000000000003526                 mov     edi, ebp        ; fd
.text:0000000000003528                 call    rpl_fcntl
.text:000000000000352D                 test    r15d, r15d
.text:0000000000003530                 jnz     loc_37C8
.text:0000000000003536                 test    eax, eax
.text:0000000000003538                 js      loc_37D0
.text:000000000000353E                 mov     edx, eax
.text:0000000000003540                 or      dh, 8
.text:0000000000003543                 cmp     eax, edx
.text:0000000000003545                 jz      short loc_355E
.text:0000000000003547                 xor     eax, eax
.text:0000000000003549                 mov     esi, 4
.text:000000000000354E                 mov     edi, ebp        ; fd
.text:0000000000003550                 call    rpl_fcntl
.text:0000000000003555                 cmp     eax, 0FFFFFFFFh
.text:0000000000003558                 jz      loc_37D0
.text:000000000000355E
.text:000000000000355E loc_355E:                               ; CODE XREF: main+15F5↑j
.text:000000000000355E                                         ; main+187A↓j
.text:000000000000355E                 mov     [r14+40h], r15d
.text:0000000000003562                 mov     eax, r15d
.text:0000000000003565
.text:0000000000003565 loc_3565:                               ; CODE XREF: main+15CD↑j
.text:0000000000003565                                         ; main+18A8↓j
.text:0000000000003565                 test    eax, eax
.text:0000000000003567                 mov     rcx, 0FFFFFFFFFFFFFFFEh
.text:000000000000356E                 jnz     loc_34C8
.text:0000000000003574                 mov     rdx, [rsp+2F8h+offset] ; stat_buf
.text:0000000000003579                 mov     esi, ebp        ; fildes
.text:000000000000357B                 mov     edi, 1          ; ver
.text:0000000000003580                 call    ___fxstat
.text:0000000000003585                 test    eax, eax
.text:0000000000003587                 jnz     loc_38E7
.text:000000000000358D                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:0000000000003594                 cmp     [r14+30h], eax
.text:0000000000003598                 jz      loc_3800
.text:000000000000359E                 mov     rdx, [rsp+2F8h+stat_buf.st_mtim.tv_sec]
.text:00000000000035A6                 mov     rcx, [rsp+2F8h+stat_buf.st_mtim.tv_nsec]
.text:00000000000035AE
.text:00000000000035AE loc_35AE:                               ; CODE XREF: main+18D8↓j
.text:00000000000035AE                                         ; main+18E2↓j ...
.text:00000000000035AE                 and     r12d, 0F000h
.text:00000000000035B5                 mov     [r14+10h], rdx
.text:00000000000035B9                 mov     [r14+18h], rcx
.text:00000000000035BD                 cmp     r12d, 8000h
.text:00000000000035C4                 mov     [r14+30h], eax
.text:00000000000035C8                 mov     qword ptr [r14+58h], 0
.text:00000000000035D0                 jz      loc_3880
.text:00000000000035D6
.text:00000000000035D6 loc_35D6:                               ; CODE XREF: main+193C↓j
.text:00000000000035D6                                         ; main+1992↓j
.text:00000000000035D6                 cmp     [rsp+2F8h+buf], rbx
.text:00000000000035DB                 jz      short loc_361C
.text:00000000000035DD                 cmp     cs:print_headers, 0
.text:00000000000035E4                 jz      short loc_361C
.text:00000000000035E6                 cmp     cs:first_file_7393, 0
.text:00000000000035ED                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:00000000000035F4                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000035FB                 lea     rsi, aSS        ; "%s==> %s <==\n"
.text:0000000000003602                 mov     rcx, r13
.text:0000000000003605                 mov     edi, 1
.text:000000000000360A                 cmovz   rdx, rax
.text:000000000000360E                 xor     eax, eax
.text:0000000000003610                 call    ___printf_chk
.text:0000000000003615                 mov     cs:first_file_7393, 0
.text:000000000000361C
.text:000000000000361C loc_361C:                               ; CODE XREF: main+168B↑j
.text:000000000000361C                                         ; main+1694↑j
.text:000000000000361C                 mov     edi, [r14+40h]
.text:0000000000003620                 mov     [rsp+2F8h+buf], rbx
.text:0000000000003625                 test    edi, edi
.text:0000000000003627                 jnz     loc_4782
.text:000000000000362D                 cmp     r12d, 8000h
.text:0000000000003634                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000363B                 jnz     loc_34C8
.text:0000000000003641                 cmp     byte ptr [r14+35h], 0
.text:0000000000003646                 jz      loc_34C8
.text:000000000000364C                 mov     rcx, [rsp+2F8h+stat_buf.st_size]
.text:0000000000003654                 sub     rcx, [r14+8]
.text:0000000000003658                 jmp     loc_34C8
.text:0000000000003658 ; ---------------------------------------------------------------------------
.text:000000000000365D                 align 20h
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: main+15B1↑j
.text:0000000000003660                 mov     rdi, r14
.text:0000000000003663                 mov     esi, r15d
.text:0000000000003666                 add     rbx, 1
.text:000000000000366A                 call    recheck
.text:000000000000366F                 add     r14, 60h ; '`'
.text:0000000000003673                 cmp     [rsp+2F8h+var_2F8], rbx
.text:0000000000003677                 jnz     loc_34F4
.text:000000000000367D
.text:000000000000367D loc_367D:                               ; CODE XREF: main+159E↑j
.text:000000000000367D                 movzx   ecx, cs:reopen_inaccessible_files
.text:0000000000003684                 test    cl, cl
.text:0000000000003686                 jz      short loc_3691
.text:0000000000003688                 cmp     cs:follow_mode, 1
.text:000000000000368F                 jz      short loc_36E2
.text:0000000000003691
.text:0000000000003691 loc_3691:                               ; CODE XREF: main+1736↑j
.text:0000000000003691                 mov     rax, [rsp+2F8h+var_2D0]
.text:0000000000003696                 cmp     dword ptr [rax+38h], 0
.text:000000000000369A                 jns     short loc_36E2
.text:000000000000369C                 mov     rax, [rsp+2F8h+var_2D0]
.text:00000000000036A1                 cmp     byte ptr [rax+34h], 1
.text:00000000000036A5                 jz      short loc_36AB
.text:00000000000036A7                 test    cl, cl
.text:00000000000036A9                 jnz     short loc_36E2
.text:00000000000036AB
.text:00000000000036AB loc_36AB:                               ; CODE XREF: main+1755↑j
.text:00000000000036AB                 mov     rax, [rsp+2F8h+var_2D0]
.text:00000000000036B0                 add     rax, 94h
.text:00000000000036B6                 db      2Eh
.text:00000000000036B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: main+178C↓j
.text:00000000000036C0                                         ; main+1790↓j
.text:00000000000036C0                 cmp     rax, [rsp+2F8h+var_2E0]
.text:00000000000036C5                 jz      loc_398B
.text:00000000000036CB                 mov     esi, [rax+4]
.text:00000000000036CE                 mov     rdx, rax
.text:00000000000036D1                 test    esi, esi
.text:00000000000036D3                 jns     short loc_36E2
.text:00000000000036D5                 add     rax, 60h ; '`'
.text:00000000000036D9                 cmp     byte ptr [rdx], 1
.text:00000000000036DC                 jz      short loc_36C0
.text:00000000000036DE                 test    cl, cl
.text:00000000000036E0                 jz      short loc_36C0
.text:00000000000036E2
.text:00000000000036E2 loc_36E2:                               ; CODE XREF: main+173F↑j
.text:00000000000036E2                                         ; main+174A↑j ...
.text:00000000000036E2                 cmp     byte ptr [rsp+2F8h+fildes], 1
.text:00000000000036E7                 jnz     loc_3965
.text:00000000000036ED                 cmp     byte ptr [rsp+2F8h+mask], 0
.text:00000000000036F2                 jnz     loc_3965
.text:00000000000036F8                 movzx   eax, cs:monitor_output
.text:00000000000036FF                 test    al, al
.text:0000000000003701                 mov     byte ptr [rsp+2F8h+fildes], al
.text:0000000000003705                 jz      loc_34AC
.text:000000000000370B
.text:000000000000370B loc_370B:                               ; CODE XREF: main+1A36↓j
.text:000000000000370B                 mov     [rsp+2F8h+timeout.tv_usec], 0
.text:0000000000003717                 mov     [rsp+2F8h+timeout.tv_sec], 0
.text:0000000000003723                 xor     eax, eax
.text:0000000000003725                 mov     ecx, 10h
.text:000000000000372A                 mov     rdi, [rsp+2F8h+offset]
.text:000000000000372F                 cld
.text:0000000000003730                 rep stosq
.text:0000000000003733                 mov     rsi, [rsp+2F8h+offset] ; readfds
.text:0000000000003738                 lea     r8, [rsp+2F8h+timeout] ; timeout
.text:0000000000003740                 xor     ecx, ecx        ; exceptfds
.text:0000000000003742                 xor     edx, edx        ; writefds
.text:0000000000003744                 mov     edi, 2          ; nfds
.text:0000000000003749                 or      [rsp+2F8h+stat_buf.st_dev], 2
.text:0000000000003752                 call    _select
.text:0000000000003757                 sub     eax, 1
.text:000000000000375A                 jz      loc_4841
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: main+1A30↓j
.text:0000000000003760                 cmp     byte ptr [rsp+2F8h+fildes], 0
.text:0000000000003765                 jnz     loc_34AC
.text:000000000000376B                 cmp     byte ptr [rsp+2F8h+var_2B0], 0
.text:0000000000003770                 jnz     loc_2A0D
.text:0000000000003776                 mov     edi, cs:pid     ; pid
.text:000000000000377C                 test    edi, edi
.text:000000000000377E                 jnz     loc_39B1
.text:0000000000003784
.text:0000000000003784 loc_3784:                               ; CODE XREF: main+1A6A↓j
.text:0000000000003784                                         ; main+1A78↓j
.text:0000000000003784                 movsd   xmm0, [rsp+2F8h+var_2C8]
.text:000000000000378A                 call    xnanosleep
.text:000000000000378F                 test    eax, eax
.text:0000000000003791                 jz      loc_34AC
.text:0000000000003797                 lea     rsi, aCannotReadReal ; "cannot read realtime clock"
.text:000000000000379E                 mov     edx, 5          ; category
.text:00000000000037A3                 xor     edi, edi        ; domainname
.text:00000000000037A5                 call    _dcgettext
.text:00000000000037AA                 mov     rbx, rax
.text:00000000000037AD                 call    ___errno_location
.text:00000000000037B2                 mov     esi, [rax]      ; errnum
.text:00000000000037B4                 mov     rdx, rbx        ; format
.text:00000000000037B7                 mov     edi, 1          ; status
.text:00000000000037BC                 xor     eax, eax
.text:00000000000037BE                 call    _error
.text:00000000000037C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: main+15E0↑j
.text:00000000000037C8                 test    eax, eax
.text:00000000000037CA                 jns     loc_355E
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: main+15E8↑j
.text:00000000000037D0                                         ; main+1608↑j
.text:00000000000037D0                 call    ___errno_location
.text:00000000000037D5                 mov     edx, [r14+30h]
.text:00000000000037D9                 and     edx, 0F000h
.text:00000000000037DF                 cmp     edx, 8000h
.text:00000000000037E5                 jnz     loc_478E
.text:00000000000037EB                 cmp     dword ptr [rax], 1
.text:00000000000037EE                 jnz     loc_478E
.text:00000000000037F4                 mov     eax, [r14+40h]
.text:00000000000037F8                 jmp     loc_3565
.text:00000000000037F8 ; ---------------------------------------------------------------------------
.text:00000000000037FD                 align 20h
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: main+1648↑j
.text:0000000000003800                 mov     edx, eax
.text:0000000000003802                 and     edx, 0F000h
.text:0000000000003808                 cmp     edx, 8000h
.text:000000000000380E                 mov     rdx, [rsp+2F8h+stat_buf.st_mtim.tv_sec]
.text:0000000000003816                 jz      loc_392F
.text:000000000000381C
.text:000000000000381C loc_381C:                               ; CODE XREF: main+19EB↓j
.text:000000000000381C                 cmp     rdx, [r14+10h]
.text:0000000000003820                 mov     rcx, [rsp+2F8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000003828                 jnz     loc_35AE
.text:000000000000382E                 cmp     [r14+18h], ecx
.text:0000000000003832                 jnz     loc_35AE
.text:0000000000003838                 mov     rax, [r14+58h]
.text:000000000000383C                 cmp     rax, cs:max_n_unchanged_stats_between_opens
.text:0000000000003843                 lea     rdx, [rax+1]
.text:0000000000003847                 mov     [r14+58h], rdx
.text:000000000000384B                 jb      loc_34E2
.text:0000000000003851                 cmp     cs:follow_mode, 1
.text:0000000000003858                 jnz     loc_34E2
.text:000000000000385E                 xor     esi, esi
.text:0000000000003860                 cmp     dword ptr [r14+40h], 0
.text:0000000000003865                 mov     rdi, r14
.text:0000000000003868                 setnz   sil
.text:000000000000386C                 call    recheck
.text:0000000000003871                 mov     qword ptr [r14+58h], 0
.text:0000000000003879                 jmp     loc_34E2
.text:0000000000003879 ; ---------------------------------------------------------------------------
.text:000000000000387E                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: main+1680↑j
.text:0000000000003880                 mov     rax, [r14+8]
.text:0000000000003884                 cmp     [rsp+2F8h+stat_buf.st_size], rax
.text:000000000000388C                 jge     loc_35D6
.text:0000000000003892                 mov     rdx, r13
.text:0000000000003895                 mov     esi, 3
.text:000000000000389A                 xor     edi, edi
.text:000000000000389C                 call    quotearg_n_style_colon
.text:00000000000038A1                 lea     rsi, aSFileTruncated ; "%s: file truncated"
.text:00000000000038A8                 mov     edx, 5          ; category
.text:00000000000038AD                 xor     edi, edi        ; domainname
.text:00000000000038AF                 mov     [rsp+2F8h+nbytes], rax
.text:00000000000038B4                 call    _dcgettext
.text:00000000000038B9                 mov     rcx, [rsp+2F8h+nbytes]
.text:00000000000038BE                 mov     rdx, rax        ; format
.text:00000000000038C1                 xor     esi, esi        ; errnum
.text:00000000000038C3                 xor     edi, edi        ; status
.text:00000000000038C5                 xor     eax, eax
.text:00000000000038C7                 call    _error
.text:00000000000038CC                 mov     rcx, r13
.text:00000000000038CF                 xor     edx, edx
.text:00000000000038D1                 xor     esi, esi
.text:00000000000038D3                 mov     edi, ebp
.text:00000000000038D5                 call    xlseek
.text:00000000000038DA                 mov     qword ptr [r14+8], 0
.text:00000000000038E2                 jmp     loc_35D6
.text:00000000000038E7 ; ---------------------------------------------------------------------------
.text:00000000000038E7
.text:00000000000038E7 loc_38E7:                               ; CODE XREF: main+1637↑j
.text:00000000000038E7                 mov     dword ptr [r14+38h], 0FFFFFFFFh
.text:00000000000038EF                 call    ___errno_location
.text:00000000000038F4                 mov     r12, rax
.text:00000000000038F7                 mov     eax, [rax]
.text:00000000000038F9                 mov     rdx, r13
.text:00000000000038FC                 xor     edi, edi
.text:00000000000038FE                 mov     esi, 3
.text:0000000000003903                 mov     [r14+3Ch], eax
.text:0000000000003907                 call    quotearg_n_style_colon
.text:000000000000390C                 mov     esi, [r12]      ; errnum
.text:0000000000003910                 lea     rdx, aS_0+2     ; format
.text:0000000000003917                 mov     rcx, rax
.text:000000000000391A                 xor     edi, edi        ; status
.text:000000000000391C                 xor     eax, eax
.text:000000000000391E                 call    _error
.text:0000000000003923                 mov     edi, ebp        ; fd
.text:0000000000003925                 call    _close
.text:000000000000392A                 jmp     loc_34E2
.text:000000000000392F ; ---------------------------------------------------------------------------
.text:000000000000392F
.text:000000000000392F loc_392F:                               ; CODE XREF: main+18C6↑j
.text:000000000000392F                 mov     rcx, [rsp+2F8h+stat_buf.st_size]
.text:0000000000003937                 cmp     [r14+8], rcx
.text:000000000000393B                 jz      loc_381C
.text:0000000000003941                 mov     rcx, [rsp+2F8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000003949                 jmp     loc_35AE
.text:000000000000394E ; ---------------------------------------------------------------------------
.text:000000000000394E
.text:000000000000394E loc_394E:                               ; CODE XREF: main+1561↑j
.text:000000000000394E                 cmp     cs:reopen_inaccessible_files, 0
.text:0000000000003955                 jz      short loc_398B
.text:0000000000003957                 cmp     cs:follow_mode, 1
.text:000000000000395E                 jnz     short loc_398B
.text:0000000000003960                 mov     byte ptr [rsp+2F8h+fildes], 0
.text:0000000000003965
.text:0000000000003965 loc_3965:                               ; CODE XREF: main+1797↑j
.text:0000000000003965                                         ; main+17A2↑j
.text:0000000000003965                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000396C                 call    _fflush_unlocked
.text:0000000000003971                 test    eax, eax
.text:0000000000003973                 jnz     loc_4855
.text:0000000000003979                 cmp     cs:monitor_output, 0
.text:0000000000003980                 jz      loc_3760
.text:0000000000003986                 jmp     loc_370B
.text:000000000000398B ; ---------------------------------------------------------------------------
.text:000000000000398B
.text:000000000000398B loc_398B:                               ; CODE XREF: main+1775↑j
.text:000000000000398B                                         ; main+1A05↑j ...
.text:000000000000398B                 lea     rsi, aNoFilesRemaini ; "no files remaining"
.text:0000000000003992                 xor     edi, edi        ; domainname
.text:0000000000003994                 mov     edx, 5          ; category
.text:0000000000003999                 call    _dcgettext
.text:000000000000399E                 xor     esi, esi        ; errnum
.text:00000000000039A0                 mov     rdx, rax        ; format
.text:00000000000039A3                 xor     edi, edi        ; status
.text:00000000000039A5                 xor     eax, eax
.text:00000000000039A7                 call    _error
.text:00000000000039AC                 jmp     loc_2A0D
.text:00000000000039B1 ; ---------------------------------------------------------------------------
.text:00000000000039B1
.text:00000000000039B1 loc_39B1:                               ; CODE XREF: main+182E↑j
.text:00000000000039B1                 xor     esi, esi        ; sig
.text:00000000000039B3                 call    _kill
.text:00000000000039B8                 test    eax, eax
.text:00000000000039BA                 jz      loc_3784
.text:00000000000039C0                 call    ___errno_location
.text:00000000000039C5                 cmp     dword ptr [rax], 1
.text:00000000000039C8                 jz      loc_3784
.text:00000000000039CE                 movzx   eax, byte ptr [rsp+2F8h+ptr]
.text:00000000000039D3                 mov     byte ptr [rsp+2F8h+var_2B0], al
.text:00000000000039D7                 jmp     loc_34AC
.text:00000000000039DC ; ---------------------------------------------------------------------------
.text:00000000000039DC
.text:00000000000039DC loc_39DC:                               ; CODE XREF: main+FF1↑j
.text:00000000000039DC                 mov     rdi, rbx        ; ptr
.text:00000000000039DF                 mov     [rsp+2F8h+nbytes], rax
.text:00000000000039E4                 mov     rbx, rbp
.text:00000000000039E7                 call    _free
.text:00000000000039EC                 mov     rax, [rsp+2F8h+nbytes]
.text:00000000000039F1                 add     rax, 1
.text:00000000000039F5                 jz      loc_3BF6
.text:00000000000039FB                 mov     rcx, [rsp+2F8h+offset]
.text:0000000000003A00                 jmp     short loc_3A0C
.text:0000000000003A02 ; ---------------------------------------------------------------------------
.text:0000000000003A02
.text:0000000000003A02 loc_3A02:                               ; CODE XREF: main+1ACC↓j
.text:0000000000003A02                 mov     rbx, [rbx+2008h]
.text:0000000000003A09                 mov     r12, rax
.text:0000000000003A0C
.text:0000000000003A0C loc_3A0C:                               ; CODE XREF: main+1AB0↑j
.text:0000000000003A0C                 mov     rdx, [rbx+2000h]
.text:0000000000003A13                 mov     rax, r12
.text:0000000000003A16                 sub     rax, rdx
.text:0000000000003A19                 cmp     rcx, rax
.text:0000000000003A1C                 jb      short loc_3A02
.text:0000000000003A1E                 mov     rcx, [rsp+2F8h+offset]
.text:0000000000003A23                 xor     eax, eax
.text:0000000000003A25                 cmp     rcx, r12
.text:0000000000003A28                 jnb     short loc_3A30
.text:0000000000003A2A                 mov     rax, r12
.text:0000000000003A2D                 sub     rax, rcx
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: main+1AD8↑j
.text:0000000000003A30                 mov     rsi, rdx
.text:0000000000003A33                 sub     rsi, rax
.text:0000000000003A36                 jnz     loc_3BE8
.text:0000000000003A3C
.text:0000000000003A3C loc_3A3C:                               ; CODE XREF: main+1B02↓j
.text:0000000000003A3C                                         ; main+1B0C↓j ...
.text:0000000000003A3C                 mov     rbx, [rbx+2008h]
.text:0000000000003A43                 test    rbx, rbx
.text:0000000000003A46                 jz      short loc_3A5E
.text:0000000000003A48                 mov     rsi, [rbx+2000h]
.text:0000000000003A4F                 test    rsi, rsi
.text:0000000000003A52                 jz      short loc_3A3C
.text:0000000000003A54                 mov     rdi, rbx
.text:0000000000003A57                 call    xwrite_stdout_part_10
.text:0000000000003A5C                 jmp     short loc_3A3C
.text:0000000000003A5E ; ---------------------------------------------------------------------------
.text:0000000000003A5E
.text:0000000000003A5E loc_3A5E:                               ; CODE XREF: main+1AF6↑j
.text:0000000000003A5E                 mov     byte ptr [rsp+2F8h+var_2E0], 1
.text:0000000000003A63                 mov     rdi, rbp
.text:0000000000003A66                 jmp     short loc_3A77
.text:0000000000003A68 ; ---------------------------------------------------------------------------
.text:0000000000003A68
.text:0000000000003A68 loc_3A68:                               ; CODE XREF: main+1B2A↓j
.text:0000000000003A68                 mov     rbx, [rdi+2008h]
.text:0000000000003A6F                 call    _free
.text:0000000000003A74                 mov     rdi, rbx        ; ptr
.text:0000000000003A77
.text:0000000000003A77 loc_3A77:                               ; CODE XREF: main+1B16↑j
.text:0000000000003A77                                         ; main+1CE7↓j
.text:0000000000003A77                 test    rdi, rdi
.text:0000000000003A7A                 jnz     short loc_3A68
.text:0000000000003A7C                 jmp     loc_2CB0
.text:0000000000003A81 ; ---------------------------------------------------------------------------
.text:0000000000003A81
.text:0000000000003A81 loc_3A81:                               ; CODE XREF: main+D18↑j
.text:0000000000003A81                 mov     rsi, [rsp+2F8h+var_2B0]
.text:0000000000003A86                 mov     edi, 4
.text:0000000000003A8B                 call    quotearg_style
.text:0000000000003A90                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000003A97                 mov     edx, 5          ; category
.text:0000000000003A9C                 xor     edi, edi        ; domainname
.text:0000000000003A9E                 mov     rbx, rax
.text:0000000000003AA1                 call    _dcgettext
.text:0000000000003AA6                 mov     rbp, rax
.text:0000000000003AA9                 call    ___errno_location
.text:0000000000003AAE                 mov     esi, [rax]      ; errnum
.text:0000000000003AB0                 mov     rcx, rbx
.text:0000000000003AB3                 mov     rdx, rbp        ; format
.text:0000000000003AB6                 xor     edi, edi        ; status
.text:0000000000003AB8                 xor     eax, eax
.text:0000000000003ABA                 call    _error
.text:0000000000003ABF                 mov     byte ptr [rsp+2F8h+var_2E0], 0
.text:0000000000003AC4                 jmp     loc_2C86
.text:0000000000003AC9 ; ---------------------------------------------------------------------------
.text:0000000000003AC9
.text:0000000000003AC9 loc_3AC9:                               ; CODE XREF: main+764↑j
.text:0000000000003AC9                 sub     ebp, 1
.text:0000000000003ACC                 jz      loc_26E4
.text:0000000000003AD2
.text:0000000000003AD2 loc_3AD2:                               ; CODE XREF: main+7A0↑j
.text:0000000000003AD2                 mov     [rsp+2F8h+var_26D], 1
.text:0000000000003ADA                 jmp     loc_29FA
.text:0000000000003ADF ; ---------------------------------------------------------------------------
.text:0000000000003ADF
.text:0000000000003ADF loc_3ADF:                               ; CODE XREF: main+B37↑j
.text:0000000000003ADF                 mov     r14d, [rsp+2F8h+fildes]
.text:0000000000003AE4                 xor     esi, esi        ; offset
.text:0000000000003AE6                 mov     edx, 1          ; whence
.text:0000000000003AEB                 mov     edi, r14d       ; fd
.text:0000000000003AEE                 call    _lseek
.text:0000000000003AF3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AF7                 mov     rbx, rax
.text:0000000000003AFA                 jz      loc_2A8D
.text:0000000000003B00                 xor     esi, esi        ; offset
.text:0000000000003B02                 mov     edx, 2          ; whence
.text:0000000000003B07                 mov     edi, r14d       ; fd
.text:0000000000003B0A                 call    _lseek
.text:0000000000003B0F                 cmp     rbx, rax
.text:0000000000003B12                 mov     r8, rax
.text:0000000000003B15                 jge     loc_3BD0
.text:0000000000003B1B                 test    rax, rax
.text:0000000000003B1E                 mov     [rsp+2F8h+timeout.tv_sec], rax
.text:0000000000003B26                 jz      loc_2CB0
.text:0000000000003B2C                 mov     rdx, [rsp+2F8h+offset]
.text:0000000000003B31                 mov     esi, [rsp+2F8h+fildes]
.text:0000000000003B35                 lea     r9, [rsp+2F8h+timeout]
.text:0000000000003B3D                 mov     rdi, [rsp+2F8h+var_2B0]
.text:0000000000003B42                 mov     rcx, rbx
.text:0000000000003B45                 call    file_lines
.text:0000000000003B4A                 mov     byte ptr [rsp+2F8h+var_2E0], al
.text:0000000000003B4E                 jmp     loc_2CB0
.text:0000000000003B53 ; ---------------------------------------------------------------------------
.text:0000000000003B53
.text:0000000000003B53 loc_3B53:                               ; CODE XREF: main+11B5↑j
.text:0000000000003B53                 mov     rcx, [rsp+2F8h+var_2B0]
.text:0000000000003B58                 mov     edi, [rsp+2F8h+fildes]
.text:0000000000003B5C                 mov     edx, 1
.text:0000000000003B61                 xor     esi, esi
.text:0000000000003B63                 call    xlseek
.text:0000000000003B68                 mov     rbx, rax
.text:0000000000003B6B                 jmp     loc_310B
.text:0000000000003B70 ; ---------------------------------------------------------------------------
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: main+5C6↑j
.text:0000000000003B70                 mov     edx, 5
.text:0000000000003B75                 lea     rsi, aWarningRetryOn ; "warning: --retry only effective for the"...
.text:0000000000003B7C                 jmp     loc_2894
.text:0000000000003B81 ; ---------------------------------------------------------------------------
.text:0000000000003B81
.text:0000000000003B81 loc_3B81:                               ; CODE XREF: main+11CB↑j
.text:0000000000003B81                 mov     rbx, rbp
.text:0000000000003B84                 sub     rbx, [rsp+2F8h+offset]
.text:0000000000003B89                 mov     rcx, [rsp+2F8h+var_2B0]
.text:0000000000003B8E                 mov     edi, [rsp+2F8h+fildes]
.text:0000000000003B92                 xor     edx, edx
.text:0000000000003B94                 mov     rsi, rbx
.text:0000000000003B97                 call    xlseek
.text:0000000000003B9C                 jmp     loc_3121
.text:0000000000003BA1 ; ---------------------------------------------------------------------------
.text:0000000000003BA1
.text:0000000000003BA1 loc_3BA1:                               ; CODE XREF: main+1174↑j
.text:0000000000003BA1                 mov     r14, [rsp+2F8h+offset]
.text:0000000000003BA6                 mov     edi, [rsp+2F8h+fildes] ; fd
.text:0000000000003BAA                 mov     edx, 2          ; whence
.text:0000000000003BAF                 mov     rsi, r14
.text:0000000000003BB2                 neg     rsi             ; offset
.text:0000000000003BB5                 call    _lseek
.text:0000000000003BBA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BBE                 mov     rbx, rax
.text:0000000000003BC1                 jz      loc_2EBD
.text:0000000000003BC7                 lea     rbp, [rax+r14]
.text:0000000000003BCB                 jmp     loc_30D6
.text:0000000000003BD0 ; ---------------------------------------------------------------------------
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: main+1BC5↑j
.text:0000000000003BD0                 mov     rcx, [rsp+2F8h+var_2B0]
.text:0000000000003BD5                 mov     edi, [rsp+2F8h+fildes]
.text:0000000000003BD9                 xor     edx, edx
.text:0000000000003BDB                 mov     rsi, rbx
.text:0000000000003BDE                 call    xlseek
.text:0000000000003BE3                 jmp     loc_2A8D
.text:0000000000003BE8 ; ---------------------------------------------------------------------------
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: main+1AE6↑j
.text:0000000000003BE8                 lea     rdi, [rbx+rax]
.text:0000000000003BEC                 call    xwrite_stdout_part_10
.text:0000000000003BF1                 jmp     loc_3A3C
.text:0000000000003BF6 ; ---------------------------------------------------------------------------
.text:0000000000003BF6
.text:0000000000003BF6 loc_3BF6:                               ; CODE XREF: main+1AA5↑j
.text:0000000000003BF6                 mov     rsi, [rsp+2F8h+var_2B0]
.text:0000000000003BFB                 mov     edi, 4
.text:0000000000003C00                 call    quotearg_style
.text:0000000000003C05                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000003C0C                 mov     edx, 5          ; category
.text:0000000000003C11                 xor     edi, edi        ; domainname
.text:0000000000003C13                 mov     rbx, rax
.text:0000000000003C16                 call    _dcgettext
.text:0000000000003C1B                 mov     r12, rax
.text:0000000000003C1E                 call    ___errno_location
.text:0000000000003C23                 mov     esi, [rax]      ; errnum
.text:0000000000003C25                 xor     edi, edi        ; status
.text:0000000000003C27                 mov     rcx, rbx
.text:0000000000003C2A                 mov     rdx, r12        ; format
.text:0000000000003C2D                 xor     eax, eax
.text:0000000000003C2F                 call    _error
.text:0000000000003C34                 mov     rdi, rbp
.text:0000000000003C37                 jmp     loc_3A77
.text:0000000000003C3C ; ---------------------------------------------------------------------------
.text:0000000000003C3C
.text:0000000000003C3C loc_3C3C:                               ; CODE XREF: main+1E9↑j
.text:0000000000003C3C                 cmp     eax, 0FFFFFF7Eh
.text:0000000000003C41                 jnz     short loc_3C71
.text:0000000000003C43                 xor     edi, edi        ; status
.text:0000000000003C45                 call    usage
.text:0000000000003C4A ; ---------------------------------------------------------------------------
.text:0000000000003C4A
.text:0000000000003C4A loc_3C4A:                               ; CODE XREF: main+1DE↑j
.text:0000000000003C4A                 lea     rsi, aOptionUsedInIn ; "option used in invalid context -- %c"
.text:0000000000003C51                 mov     edx, 5          ; category
.text:0000000000003C56                 xor     edi, edi        ; domainname
.text:0000000000003C58                 call    _dcgettext
.text:0000000000003C5D                 mov     ecx, r13d
.text:0000000000003C60                 mov     rdx, rax        ; format
.text:0000000000003C63                 xor     esi, esi        ; errnum
.text:0000000000003C65                 mov     edi, 1          ; status
.text:0000000000003C6A                 xor     eax, eax
.text:0000000000003C6C                 call    _error
.text:0000000000003C71
.text:0000000000003C71 loc_3C71:                               ; CODE XREF: main+147↑j
.text:0000000000003C71                                         ; main+177↑j ...
.text:0000000000003C71                 mov     edi, 1          ; status
.text:0000000000003C76                 call    usage
.text:0000000000003C7B ; ---------------------------------------------------------------------------
.text:0000000000003C7B
.text:0000000000003C7B loc_3C7B:                               ; CODE XREF: main+14E9↑j
.text:0000000000003C7B                 lea     rbx, [rsp+2F8h+stat_buf]
.text:0000000000003C83                 mov     byte ptr [rsp+2F8h+offset], cl
.text:0000000000003C87                 xor     r12d, r12d
.text:0000000000003C8A
.text:0000000000003C8A loc_3C8A:                               ; CODE XREF: main+1D79↓j
.text:0000000000003C8A                 cmp     r12, [rsp+2F8h+var_2F8]
.text:0000000000003C8E                 jz      short loc_3CF7
.text:0000000000003C90                 imul    rax, r12, 60h ; '`'
.text:0000000000003C94                 mov     rcx, [rsp+2F8h+var_2D0]
.text:0000000000003C99                 mov     rdx, rbx        ; stat_buf
.text:0000000000003C9C                 mov     edi, 1          ; ver
.text:0000000000003CA1                 mov     rsi, [rcx+rax]  ; filename
.text:0000000000003CA5                 call    ___lxstat
.text:0000000000003CAA                 test    eax, eax
.text:0000000000003CAC                 jnz     short loc_3CC5
.text:0000000000003CAE                 mov     eax, [rsp+2F8h+stat_buf.st_mode]
.text:0000000000003CB5                 and     eax, 0F000h
.text:0000000000003CBA                 cmp     eax, 0A000h
.text:0000000000003CBF                 jz      loc_3448
.text:0000000000003CC5
.text:0000000000003CC5 loc_3CC5:                               ; CODE XREF: main+1D5C↑j
.text:0000000000003CC5                 add     r12, 1
.text:0000000000003CC9                 jmp     short loc_3C8A
.text:0000000000003CCB ; ---------------------------------------------------------------------------
.text:0000000000003CCB
.text:0000000000003CCB loc_3CCB:                               ; CODE XREF: main+1516↑j
.text:0000000000003CCB                 mov     rax, [rsp+2F8h+var_2D0]
.text:0000000000003CD0                 cmp     dword ptr [rax+38h], 0FFFFFFFFh
.text:0000000000003CD4                 jz      loc_346C
.text:0000000000003CDA                 mov     eax, [rax+30h]
.text:0000000000003CDD                 xor     r15d, r15d
.text:0000000000003CE0                 mov     [rsp+2F8h+fildes], eax
.text:0000000000003CE4                 and     eax, 0F000h
.text:0000000000003CE9                 cmp     eax, 8000h
.text:0000000000003CEE                 setnz   r15b
.text:0000000000003CF2                 jmp     loc_346F
.text:0000000000003CF7 ; ---------------------------------------------------------------------------
.text:0000000000003CF7
.text:0000000000003CF7 loc_3CF7:                               ; CODE XREF: main+1D3E↑j
.text:0000000000003CF7                 mov     rsi, [rsp+2F8h+var_2D0]
.text:0000000000003CFC                 mov     rcx, [rsp+2F8h+var_298]
.text:0000000000003D01                 mov     [rsp+2F8h+var_2E0], r12
.text:0000000000003D06                 lea     rax, [rsi+30h]
.text:0000000000003D0A                 lea     rcx, [rsi+rcx+30h]
.text:0000000000003D0F                 jmp     short loc_3D37
.text:0000000000003D11 ; ---------------------------------------------------------------------------
.text:0000000000003D11
.text:0000000000003D11 loc_3D11:                               ; CODE XREF: main+1DEA↓j
.text:0000000000003D11                 cmp     dword ptr [rax+8], 0
.text:0000000000003D15                 js      short loc_3D33
.text:0000000000003D17                 mov     edx, [rax]
.text:0000000000003D19                 and     edx, 0F000h
.text:0000000000003D1F                 cmp     edx, 8000h
.text:0000000000003D25                 jz      short loc_3D33
.text:0000000000003D27                 cmp     edx, 1000h
.text:0000000000003D2D                 jnz     loc_3448
.text:0000000000003D33
.text:0000000000003D33 loc_3D33:                               ; CODE XREF: main+1DC5↑j
.text:0000000000003D33                                         ; main+1DD5↑j
.text:0000000000003D33                 add     rax, 60h ; '`'
.text:0000000000003D37
.text:0000000000003D37 loc_3D37:                               ; CODE XREF: main+1DBF↑j
.text:0000000000003D37                 cmp     rcx, rax
.text:0000000000003D3A                 jnz     short loc_3D11
.text:0000000000003D3C                 cmp     [rsp+2F8h+var_26D], 0
.text:0000000000003D44                 jnz     short loc_3D53
.text:0000000000003D46                 cmp     cs:follow_mode, 2
.text:0000000000003D4D                 jz      loc_3448
.text:0000000000003D53
.text:0000000000003D53 loc_3D53:                               ; CODE XREF: main+1DF4↑j
.text:0000000000003D53                 call    _inotify_init
.text:0000000000003D58                 test    eax, eax
.text:0000000000003D5A                 mov     r13d, eax
.text:0000000000003D5D                 js      loc_3EFD
.text:0000000000003D63                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003D6A                 call    _fflush_unlocked
.text:0000000000003D6F                 test    eax, eax
.text:0000000000003D71                 jnz     loc_4756
.text:0000000000003D77                 mov     rdi, [rsp+2F8h+var_2E0]
.text:0000000000003D7C                 lea     rcx, wd_comparator
.text:0000000000003D83                 lea     rdx, wd_hasher
.text:0000000000003D8A                 xor     r8d, r8d
.text:0000000000003D8D                 xor     esi, esi
.text:0000000000003D8F                 call    hash_initialize
.text:0000000000003D94                 test    rax, rax
.text:0000000000003D97                 mov     r14, rax
.text:0000000000003D9A                 jz      loc_44FB
.text:0000000000003DA0                 cmp     cs:follow_mode, 1
.text:0000000000003DA7                 mov     edx, 0C06h
.text:0000000000003DAC                 mov     eax, 2
.text:0000000000003DB1                 mov     r15, [rsp+2F8h+var_2D0]
.text:0000000000003DB6                 mov     byte ptr [rsp+2F8h+buf], 0
.text:0000000000003DBB                 mov     byte ptr [rsp+2F8h+nbytes], 0
.text:0000000000003DC0                 mov     qword ptr [rsp+2F8h+fildes], r14
.text:0000000000003DC5                 cmovz   eax, edx
.text:0000000000003DC8                 mov     edx, cs:follow_mode
.text:0000000000003DCE                 xor     r12d, r12d
.text:0000000000003DD1                 mov     [rsp+2F8h+mask], eax
.text:0000000000003DD5                 mov     rbx, r15
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: main+2042↓j
.text:0000000000003DD8                 cmp     rbx, rbp
.text:0000000000003DDB                 jz      loc_3FDD
.text:0000000000003DE1                 cmp     byte ptr [rbx+34h], 0
.text:0000000000003DE5                 jnz     loc_3F8E
.text:0000000000003DEB                 mov     r15, [rbx]
.text:0000000000003DEE                 xor     eax, eax
.text:0000000000003DF0                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DF4                 mov     rdi, r15
.text:0000000000003DF7                 repne scasb
.text:0000000000003DF9                 mov     dword ptr [rbx+44h], 0FFFFFFFFh
.text:0000000000003E00                 mov     rax, rcx
.text:0000000000003E03                 not     rax
.text:0000000000003E06                 sub     rax, 1
.text:0000000000003E0A                 cmp     r12, rax
.text:0000000000003E0D                 cmovb   r12, rax
.text:0000000000003E11                 sub     edx, 1
.text:0000000000003E14                 jnz     short loc_3E7D
.text:0000000000003E16                 mov     rdi, r15
.text:0000000000003E19                 call    dir_len
.text:0000000000003E1E                 lea     rdx, [r15+rax]
.text:0000000000003E22                 mov     r14, rax
.text:0000000000003E25                 mov     rdi, r15
.text:0000000000003E28                 movzx   eax, byte ptr [rdx]
.text:0000000000003E2B                 mov     [rsp+2F8h+readfds], rdx
.text:0000000000003E30                 mov     byte ptr [rsp+2F8h+var_2B0], al
.text:0000000000003E34                 call    last_component
.text:0000000000003E39                 mov     rdx, [rsp+2F8h+readfds]
.text:0000000000003E3E                 sub     rax, r15
.text:0000000000003E41                 test    r14, r14
.text:0000000000003E44                 mov     [rbx+50h], rax
.text:0000000000003E48                 lea     rsi, asc_B7D4   ; "."
.text:0000000000003E4F                 mov     byte ptr [rdx], 0
.text:0000000000003E52                 jz      short loc_3E57
.text:0000000000003E54                 mov     rsi, [rbx]      ; name
.text:0000000000003E57
.text:0000000000003E57 loc_3E57:                               ; CODE XREF: main+1F02↑j
.text:0000000000003E57                 mov     edx, 784h       ; mask
.text:0000000000003E5C                 mov     edi, r13d       ; fd
.text:0000000000003E5F                 call    _inotify_add_watch
.text:0000000000003E64                 movzx   ecx, byte ptr [rsp+2F8h+var_2B0]
.text:0000000000003E69                 mov     [rbx+48h], eax
.text:0000000000003E6C                 mov     rax, [rbx]
.text:0000000000003E6F                 mov     [rax+r14], cl
.text:0000000000003E73                 cmp     dword ptr [rbx+48h], 0
.text:0000000000003E77                 js      loc_46C2
.text:0000000000003E7D
.text:0000000000003E7D loc_3E7D:                               ; CODE XREF: main+1EC4↑j
.text:0000000000003E7D                 mov     edx, [rsp+2F8h+mask] ; mask
.text:0000000000003E81                 mov     rsi, [rbx]      ; name
.text:0000000000003E84                 mov     edi, r13d       ; fd
.text:0000000000003E87                 call    _inotify_add_watch
.text:0000000000003E8C                 test    eax, eax
.text:0000000000003E8E                 mov     [rbx+44h], eax
.text:0000000000003E91                 jns     loc_3F69
.text:0000000000003E97                 cmp     dword ptr [rbx+38h], 0FFFFFFFFh
.text:0000000000003E9B                 movzx   eax, byte ptr [rsp+2F8h+buf]
.text:0000000000003EA0                 movzx   esi, byte ptr [rsp+2F8h+ptr]
.text:0000000000003EA5                 cmovnz  eax, esi
.text:0000000000003EA8                 mov     byte ptr [rsp+2F8h+buf], al
.text:0000000000003EAC                 call    ___errno_location
.text:0000000000003EB1                 mov     r14, rax
.text:0000000000003EB4                 mov     eax, [rax]
.text:0000000000003EB6                 mov     edx, eax
.text:0000000000003EB8                 and     edx, 0FFFFFFEFh
.text:0000000000003EBB                 cmp     edx, 0Ch
.text:0000000000003EBE                 jnz     loc_3F97
.text:0000000000003EC4                 mov     r14, qword ptr [rsp+2F8h+fildes]
.text:0000000000003EC9
.text:0000000000003EC9 loc_3EC9:                               ; CODE XREF: main+2785↓j
.text:0000000000003EC9                 lea     rsi, aInotifyResourc ; "inotify resources exhausted"
.text:0000000000003ED0                 mov     edx, 5          ; category
.text:0000000000003ED5                 xor     edi, edi        ; domainname
.text:0000000000003ED7                 call    _dcgettext
.text:0000000000003EDC                 xor     esi, esi        ; errnum
.text:0000000000003EDE                 mov     rdx, rax        ; format
.text:0000000000003EE1                 xor     edi, edi        ; status
.text:0000000000003EE3                 xor     eax, eax
.text:0000000000003EE5                 call    _error
.text:0000000000003EEA
.text:0000000000003EEA loc_3EEA:                               ; CODE XREF: main+264D↓j
.text:0000000000003EEA                                         ; main+27BF↓j
.text:0000000000003EEA                 mov     rdi, r14        ; ptr
.text:0000000000003EED                 call    hash_free
.text:0000000000003EF2                 call    ___errno_location
.text:0000000000003EF7                 mov     dword ptr [rax], 0
.text:0000000000003EFD
.text:0000000000003EFD loc_3EFD:                               ; CODE XREF: main+1E0D↑j
.text:0000000000003EFD                                         ; main+2609↓j ...
.text:0000000000003EFD                 lea     rsi, aInotifyCannotB ; "inotify cannot be used, reverting to po"...
.text:0000000000003F04                 mov     edx, 5          ; category
.text:0000000000003F09                 xor     edi, edi        ; domainname
.text:0000000000003F0B                 call    _dcgettext
.text:0000000000003F10                 mov     rbx, rax
.text:0000000000003F13                 call    ___errno_location
.text:0000000000003F18                 mov     esi, [rax]      ; errnum
.text:0000000000003F1A                 mov     rdx, rbx        ; format
.text:0000000000003F1D                 xor     eax, eax
.text:0000000000003F1F                 xor     edi, edi        ; status
.text:0000000000003F21                 call    _error
.text:0000000000003F26                 mov     rax, [rsp+2F8h+var_2D0]
.text:0000000000003F2B                 mov     rsi, [rsp+2F8h+var_298]
.text:0000000000003F30                 lea     rbp, [rax+44h]
.text:0000000000003F34                 lea     rbx, [rax+rsi+44h]
.text:0000000000003F39                 jmp     short loc_3F5F
.text:0000000000003F3B ; ---------------------------------------------------------------------------
.text:0000000000003F3B
.text:0000000000003F3B loc_3F3B:                               ; CODE XREF: main+2012↓j
.text:0000000000003F3B                 mov     esi, [rbp+0]    ; wd
.text:0000000000003F3E                 cmp     esi, 0FFFFFFFFh
.text:0000000000003F41                 jz      short loc_3F4B
.text:0000000000003F43                 mov     edi, r13d       ; fd
.text:0000000000003F46                 call    _inotify_rm_watch
.text:0000000000003F4B
.text:0000000000003F4B loc_3F4B:                               ; CODE XREF: main+1FF1↑j
.text:0000000000003F4B                 mov     esi, [rbp+4]    ; wd
.text:0000000000003F4E                 cmp     esi, 0FFFFFFFFh
.text:0000000000003F51                 jz      short loc_3F5B
.text:0000000000003F53                 mov     edi, r13d       ; fd
.text:0000000000003F56                 call    _inotify_rm_watch
.text:0000000000003F5B
.text:0000000000003F5B loc_3F5B:                               ; CODE XREF: main+2001↑j
.text:0000000000003F5B                 add     rbp, 60h ; '`'
.text:0000000000003F5F
.text:0000000000003F5F loc_3F5F:                               ; CODE XREF: main+1FE9↑j
.text:0000000000003F5F                 cmp     rbx, rbp
.text:0000000000003F62                 jnz     short loc_3F3B
.text:0000000000003F64                 jmp     loc_3448
.text:0000000000003F69 ; ---------------------------------------------------------------------------
.text:0000000000003F69
.text:0000000000003F69 loc_3F69:                               ; CODE XREF: main+1F41↑j
.text:0000000000003F69                 mov     rdi, qword ptr [rsp+2F8h+fildes]
.text:0000000000003F6E                 mov     rsi, rbx
.text:0000000000003F71                 call    hash_insert
.text:0000000000003F76                 test    rax, rax
.text:0000000000003F79                 jz      loc_44FB
.text:0000000000003F7F                 movzx   eax, byte ptr [rsp+2F8h+ptr]
.text:0000000000003F84                 mov     byte ptr [rsp+2F8h+nbytes], al
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: main+204A↓j
.text:0000000000003F88                 mov     edx, cs:follow_mode
.text:0000000000003F8E
.text:0000000000003F8E loc_3F8E:                               ; CODE XREF: main+1E95↑j
.text:0000000000003F8E                                         ; main+208B↓j
.text:0000000000003F8E                 add     rbx, 60h ; '`'
.text:0000000000003F92                 jmp     loc_3DD8
.text:0000000000003F97 ; ---------------------------------------------------------------------------
.text:0000000000003F97
.text:0000000000003F97 loc_3F97:                               ; CODE XREF: main+1F6E↑j
.text:0000000000003F97                 cmp     eax, [rbx+3Ch]
.text:0000000000003F9A                 jz      short loc_3F88
.text:0000000000003F9C                 mov     rsi, [rbx]
.text:0000000000003F9F                 mov     edi, 4
.text:0000000000003FA4                 call    quotearg_style
.text:0000000000003FA9                 lea     rsi, aCannotWatchS ; "cannot watch %s"
.text:0000000000003FB0                 mov     edx, 5          ; category
.text:0000000000003FB5                 xor     edi, edi        ; domainname
.text:0000000000003FB7                 mov     [rsp+2F8h+var_2B0], rax
.text:0000000000003FBC                 call    _dcgettext
.text:0000000000003FC1                 mov     rcx, [rsp+2F8h+var_2B0]
.text:0000000000003FC6                 mov     esi, [r14]      ; errnum
.text:0000000000003FC9                 mov     rdx, rax        ; format
.text:0000000000003FCC                 xor     edi, edi        ; status
.text:0000000000003FCE                 xor     eax, eax
.text:0000000000003FD0                 call    _error
.text:0000000000003FD5                 mov     edx, cs:follow_mode
.text:0000000000003FDB                 jmp     short loc_3F8E
.text:0000000000003FDD ; ---------------------------------------------------------------------------
.text:0000000000003FDD
.text:0000000000003FDD loc_3FDD:                               ; CODE XREF: main+1E8B↑j
.text:0000000000003FDD                 cmp     edx, 2
.text:0000000000003FE0                 mov     r14, qword ptr [rsp+2F8h+fildes]
.text:0000000000003FE5                 jz      loc_4598
.text:0000000000003FEB
.text:0000000000003FEB loc_3FEB:                               ; CODE XREF: main+2658↓j
.text:0000000000003FEB                 mov     r15, [rsp+2F8h+var_2D0]
.text:0000000000003FF0                 mov     rax, [rsp+2F8h+var_298]
.text:0000000000003FF5                 lea     rbx, [rsp+2F8h+var_260]
.text:0000000000003FFD                 lea     rax, [r15+rax-60h]
.text:0000000000004002                 mov     [rsp+2F8h+var_260], rax
.text:000000000000400A                 lea     rax, [rsp+2F8h+stat_buf]
.text:0000000000004012                 mov     qword ptr [rsp+2F8h+fildes], rax
.text:0000000000004017                 jmp     short loc_4069
.text:0000000000004019 ; ---------------------------------------------------------------------------
.text:0000000000004019
.text:0000000000004019 loc_4019:                               ; CODE XREF: main+212C↓j
.text:0000000000004019                 cmp     dword ptr [r15+38h], 0FFFFFFFFh
.text:000000000000401E                 jz      short loc_405A
.text:0000000000004020                 mov     rdx, qword ptr [rsp+2F8h+fildes] ; stat_buf
.text:0000000000004025                 mov     rsi, [r15]      ; filename
.text:0000000000004028                 mov     edi, 1          ; ver
.text:000000000000402D                 call    ___xstat
.text:0000000000004032                 test    eax, eax
.text:0000000000004034                 jnz     short loc_405A
.text:0000000000004036                 mov     rax, [rsp+2F8h+stat_buf.st_dev]
.text:000000000000403E                 cmp     [r15+20h], rax
.text:0000000000004042                 jnz     loc_45E7
.text:0000000000004048                 mov     rax, [rsp+2F8h+stat_buf.st_ino]
.text:0000000000004050                 cmp     [r15+28h], rax
.text:0000000000004054                 jnz     loc_45E7
.text:000000000000405A
.text:000000000000405A loc_405A:                               ; CODE XREF: main+20CE↑j
.text:000000000000405A                                         ; main+20E4↑j ...
.text:000000000000405A                 mov     rsi, rbx
.text:000000000000405D                 mov     rdi, r15
.text:0000000000004060                 call    check_fspec
.text:0000000000004065
.text:0000000000004065 loc_4065:                               ; CODE XREF: main+2123↓j
.text:0000000000004065                 add     r15, 60h ; '`'
.text:0000000000004069
.text:0000000000004069 loc_4069:                               ; CODE XREF: main+20C7↑j
.text:0000000000004069                 cmp     r15, rbp
.text:000000000000406C                 jz      short loc_408A
.text:000000000000406E                 cmp     byte ptr [r15+34h], 0
.text:0000000000004073                 jnz     short loc_4065
.text:0000000000004075                 cmp     cs:follow_mode, 1
.text:000000000000407C                 jnz     short loc_4019
.text:000000000000407E                 xor     esi, esi
.text:0000000000004080                 mov     rdi, r15
.text:0000000000004083                 call    recheck
.text:0000000000004088                 jmp     short loc_405A
.text:000000000000408A ; ---------------------------------------------------------------------------
.text:000000000000408A
.text:000000000000408A loc_408A:                               ; CODE XREF: main+211C↑j
.text:000000000000408A                 lea     rax, [r12+11h]
.text:000000000000408F                 xor     r15d, r15d
.text:0000000000004092                 mov     rdi, rax
.text:0000000000004095                 mov     [rsp+2F8h+nbytes], rax
.text:000000000000409A                 call    xmalloc
.text:000000000000409F                 mov     ecx, r13d
.text:00000000000040A2                 mov     [rsp+2F8h+buf], rax
.text:00000000000040A7                 mov     eax, 1
.text:00000000000040AC                 shl     rax, cl
.text:00000000000040AF                 mov     qword ptr [rsp+2F8h+fildes], 0
.text:00000000000040B8                 mov     dword ptr [rsp+2F8h+var_2B0], 3
.text:00000000000040C0                 mov     [rsp+2F8h+var_288], rax
.text:00000000000040C5                 lea     rax, [rsp+2F8h+var_1E8]
.text:00000000000040CD                 mov     [rsp+2F8h+readfds], rax
.text:00000000000040D2                 movsxd  rax, r13d
.text:00000000000040D5                 mov     [rsp+2F8h+var_278], rax
.text:00000000000040DD
.text:00000000000040DD loc_40DD:                               ; CODE XREF: main+22E8↓j
.text:00000000000040DD                                         ; main+243B↓j ...
.text:00000000000040DD                 cmp     cs:follow_mode, 1
.text:00000000000040E4                 jz      loc_427B
.text:00000000000040EA
.text:00000000000040EA loc_40EA:                               ; CODE XREF: main+2332↓j
.text:00000000000040EA                                         ; main+2343↓j
.text:00000000000040EA                 movzx   ebp, byte ptr [rsp+2F8h+offset]
.text:00000000000040EF                 lea     rbx, [rsp+2F8h+var_258]
.text:00000000000040F7
.text:00000000000040F7 loc_40F7:                               ; CODE XREF: main+2268↓j
.text:00000000000040F7                 cmp     r15, qword ptr [rsp+2F8h+fildes]
.text:00000000000040FC                 jb      loc_45DD
.text:0000000000004102                 mov     edi, cs:pid     ; pid
.text:0000000000004108                 test    edi, edi
.text:000000000000410A                 jz      short loc_414F
.text:000000000000410C                 test    bpl, bpl
.text:000000000000410F                 jnz     loc_468F
.text:0000000000004115                 xor     esi, esi        ; sig
.text:0000000000004117                 call    _kill
.text:000000000000411C                 test    eax, eax
.text:000000000000411E                 jz      loc_423D
.text:0000000000004124                 call    ___errno_location
.text:0000000000004129                 cmp     dword ptr [rax], 1
.text:000000000000412C                 jz      loc_423D
.text:0000000000004132                 movzx   ebp, byte ptr [rsp+2F8h+ptr]
.text:0000000000004137                 mov     [rsp+2F8h+var_258.tv_usec], 0
.text:0000000000004143                 mov     [rsp+2F8h+var_258.tv_sec], 0
.text:000000000000414F
.text:000000000000414F loc_414F:                               ; CODE XREF: main+21BA↑j
.text:000000000000414F                                         ; main+2326↓j
.text:000000000000414F                 xor     eax, eax
.text:0000000000004151                 mov     ecx, 10h
.text:0000000000004156                 mov     rdi, [rsp+2F8h+readfds]
.text:000000000000415B                 cld
.text:000000000000415C                 rep stosq
.text:000000000000415F                 mov     rdi, [rsp+2F8h+var_278]
.text:0000000000004167                 call    ___fdelt_chk
.text:000000000000416C                 mov     rcx, [rsp+2F8h+var_288]
.text:0000000000004171                 or      [rsp+rax*8+2F8h+var_1E8], rcx
.text:0000000000004179                 cmp     cs:monitor_output, 0
.text:0000000000004180                 jz      short loc_418B
.text:0000000000004182                 or      [rsp+2F8h+var_1E8], 2
.text:000000000000418B
.text:000000000000418B loc_418B:                               ; CODE XREF: main+2230↑j
.text:000000000000418B                 xor     r8d, r8d
.text:000000000000418E                 cmp     cs:pid, 0
.text:0000000000004195                 mov     edi, 1
.text:000000000000419A                 mov     rsi, [rsp+2F8h+readfds] ; readfds
.text:000000000000419F                 cmovnz  r8, rbx         ; timeout
.text:00000000000041A3                 test    r13d, r13d
.text:00000000000041A6                 cmovg   edi, r13d
.text:00000000000041AA                 xor     ecx, ecx        ; exceptfds
.text:00000000000041AC                 xor     edx, edx        ; writefds
.text:00000000000041AE                 add     edi, 1          ; nfds
.text:00000000000041B1                 call    _select
.text:00000000000041B6                 test    eax, eax
.text:00000000000041B8                 jz      loc_40F7
.text:00000000000041BE                 add     eax, 1
.text:00000000000041C1                 mov     byte ptr [rsp+2F8h+offset], bpl
.text:00000000000041C6                 jz      loc_4696
.text:00000000000041CC                 test    byte ptr [rsp+2F8h+var_1E8], 2
.text:00000000000041D4                 jnz     loc_4841
.text:00000000000041DA                 mov     rdx, [rsp+2F8h+nbytes] ; nbytes
.text:00000000000041DF                 mov     rsi, [rsp+2F8h+buf] ; buf
.text:00000000000041E4                 mov     edi, r13d       ; fd
.text:00000000000041E7                 call    safe_read
.text:00000000000041EC                 test    rax, rax
.text:00000000000041EF                 mov     qword ptr [rsp+2F8h+fildes], rax
.text:00000000000041F4                 jnz     loc_42C4
.text:00000000000041FA
.text:00000000000041FA loc_41FA:                               ; CODE XREF: main+2616↓j
.text:00000000000041FA                 cmp     dword ptr [rsp+2F8h+var_2B0], 0
.text:00000000000041FF                 jz      loc_456C
.text:0000000000004205                 mov     rsi, [rsp+2F8h+nbytes]
.text:000000000000420A                 mov     rdi, [rsp+2F8h+buf]
.text:000000000000420F                 xor     r15d, r15d
.text:0000000000004212                 sub     dword ptr [rsp+2F8h+var_2B0], 1
.text:0000000000004217                 mov     rax, rsi
.text:000000000000421A                 add     rax, rsi
.text:000000000000421D                 mov     rsi, rax
.text:0000000000004220                 mov     [rsp+2F8h+nbytes], rax
.text:0000000000004225                 call    xrealloc
.text:000000000000422A                 mov     qword ptr [rsp+2F8h+fildes], 0
.text:0000000000004233                 mov     [rsp+2F8h+buf], rax
.text:0000000000004238                 jmp     loc_40DD
.text:000000000000423D ; ---------------------------------------------------------------------------
.text:000000000000423D
.text:000000000000423D loc_423D:                               ; CODE XREF: main+21CE↑j
.text:000000000000423D                                         ; main+21DC↑j
.text:000000000000423D                 movsd   xmm4, [rsp+2F8h+var_2C8]
.text:0000000000004243                 pxor    xmm0, xmm0
.text:0000000000004247                 cvttsd2si rax, xmm4
.text:000000000000424C                 cvtsi2sd xmm0, rax
.text:0000000000004251                 mov     [rsp+2F8h+var_258.tv_sec], rax
.text:0000000000004259                 subsd   xmm4, xmm0
.text:000000000000425D                 movsd   xmm0, cs:qword_C968
.text:0000000000004265                 mulsd   xmm0, xmm4
.text:0000000000004269                 cvttsd2si rax, xmm0
.text:000000000000426E                 mov     [rsp+2F8h+var_258.tv_usec], rax
.text:0000000000004276                 jmp     loc_414F
.text:000000000000427B ; ---------------------------------------------------------------------------
.text:000000000000427B
.text:000000000000427B loc_427B:                               ; CODE XREF: main+2194↑j
.text:000000000000427B                 cmp     cs:reopen_inaccessible_files, 0
.text:0000000000004282                 jnz     loc_40EA
.text:0000000000004288                 mov     rdi, r14
.text:000000000000428B                 call    hash_get_n_entries
.text:0000000000004290                 test    rax, rax
.text:0000000000004293                 jnz     loc_40EA
.text:0000000000004299                 lea     rsi, aNoFilesRemaini ; "no files remaining"
.text:00000000000042A0                 mov     edx, 5          ; category
.text:00000000000042A5                 xor     edi, edi        ; domainname
.text:00000000000042A7                 call    _dcgettext
.text:00000000000042AC                 xor     esi, esi        ; errnum
.text:00000000000042AE                 mov     rdx, rax        ; format
.text:00000000000042B1                 xor     edi, edi        ; status
.text:00000000000042B3                 xor     eax, eax
.text:00000000000042B5                 call    _error
.text:00000000000042BA
.text:00000000000042BA loc_42BA:                               ; CODE XREF: main+265E↓j
.text:00000000000042BA                 mov     eax, 1
.text:00000000000042BF                 jmp     loc_2A28
.text:00000000000042C4 ; ---------------------------------------------------------------------------
.text:00000000000042C4
.text:00000000000042C4 loc_42C4:                               ; CODE XREF: main+22A4↑j
.text:00000000000042C4                 xor     r15d, r15d
.text:00000000000042C7                 cmp     qword ptr [rsp+2F8h+fildes], 0FFFFFFFFFFFFFFFFh
.text:00000000000042CD                 jz      loc_455E
.text:00000000000042D3
.text:00000000000042D3 loc_42D3:                               ; CODE XREF: main+2692↓j
.text:00000000000042D3                 mov     rax, [rsp+2F8h+buf]
.text:00000000000042D8                 lea     rbp, [rax+r15]
.text:00000000000042DC                 mov     edx, [rbp+0Ch]
.text:00000000000042DF                 mov     ecx, [rbp+4]
.text:00000000000042E2                 test    ch, 4
.text:00000000000042E5                 lea     r15, [r15+rdx+10h]
.text:00000000000042EA                 jz      loc_43B3
.text:00000000000042F0                 test    edx, edx
.text:00000000000042F2                 jz      loc_4500
.text:00000000000042F8
.text:00000000000042F8 loc_42F8:                               ; CODE XREF: main+2465↓j
.text:00000000000042F8                 lea     rax, [rbp+10h]
.text:00000000000042FC                 mov     [rsp+2F8h+var_290], r15
.text:0000000000004301                 mov     rbx, [rsp+2F8h+var_2D0]
.text:0000000000004306                 mov     r15, r14
.text:0000000000004309                 xor     r12d, r12d
.text:000000000000430C                 mov     r14d, r13d
.text:000000000000430F                 mov     [rsp+2F8h+s1], rax
.text:0000000000004314                 mov     r13, rbp
.text:0000000000004317                 mov     rbp, [rsp+2F8h+var_2E0]
.text:000000000000431C                 jmp     short loc_4326
.text:000000000000431E ; ---------------------------------------------------------------------------
.text:000000000000431E
.text:000000000000431E loc_431E:                               ; CODE XREF: main+23E6↓j
.text:000000000000431E                                         ; main+2409↓j
.text:000000000000431E                 add     r12, 1
.text:0000000000004322                 add     rbx, 60h ; '`'
.text:0000000000004326
.text:0000000000004326 loc_4326:                               ; CODE XREF: main+23CC↑j
.text:0000000000004326                 cmp     rbp, r12
.text:0000000000004329                 jz      loc_43DA
.text:000000000000432F                 mov     eax, [r13+0]
.text:0000000000004333                 cmp     [rbx+48h], eax
.text:0000000000004336                 jnz     short loc_431E
.text:0000000000004338                 mov     rsi, [rbx+50h]
.text:000000000000433C                 add     rsi, [rbx]      ; s2
.text:000000000000433F                 mov     rdi, [rsp+2F8h+s1] ; s1
.text:0000000000004344                 mov     [rsp+2F8h+var_26C], ecx
.text:000000000000434B                 call    _strcmp
.text:0000000000004350                 test    eax, eax
.text:0000000000004352                 mov     ecx, [rsp+2F8h+var_26C]
.text:0000000000004359                 jnz     short loc_431E
.text:000000000000435B                 imul    rbx, r12, 60h ; '`'
.text:000000000000435F                 mov     rbp, r13
.text:0000000000004362                 mov     r13d, r14d
.text:0000000000004365                 add     rbx, [rsp+2F8h+var_2D0]
.text:000000000000436A                 and     ch, 2
.text:000000000000436D                 mov     r14, r15
.text:0000000000004370                 mov     r15, [rsp+2F8h+var_290]
.text:0000000000004375                 jz      loc_43FF
.text:000000000000437B
.text:000000000000437B loc_437B:                               ; CODE XREF: main+2528↓j
.text:000000000000437B                                         ; main+25A5↓j
.text:000000000000437B                 cmp     cs:follow_mode, 1
.text:0000000000004382                 jz      loc_45CE
.text:0000000000004388
.text:0000000000004388 loc_4388:                               ; CODE XREF: main+2488↓j
.text:0000000000004388                                         ; main+2688↓j
.text:0000000000004388                 test    rbx, rbx
.text:000000000000438B                 jz      loc_40DD
.text:0000000000004391                 mov     eax, [rbp+4]
.text:0000000000004394                 test    eax, 0E04h
.text:0000000000004399                 jz      short loc_43EA
.text:000000000000439B                 test    ah, 4
.text:000000000000439E                 jnz     loc_45B3
.text:00000000000043A4
.text:00000000000043A4 loc_43A4:                               ; CODE XREF: main+2679↓j
.text:00000000000043A4                 xor     esi, esi
.text:00000000000043A6                 mov     rdi, rbx
.text:00000000000043A9                 call    recheck
.text:00000000000043AE                 jmp     loc_40DD
.text:00000000000043B3 ; ---------------------------------------------------------------------------
.text:00000000000043B3
.text:00000000000043B3 loc_43B3:                               ; CODE XREF: main+239A↑j
.text:00000000000043B3                 test    edx, edx
.text:00000000000043B5                 jnz     loc_42F8
.text:00000000000043BB                 mov     edx, [rbp+0]
.text:00000000000043BE
.text:00000000000043BE loc_43BE:                               ; CODE XREF: main+25C0↓j
.text:00000000000043BE                 lea     rsi, [rsp+2F8h+timeout]
.text:00000000000043C6                 mov     rdi, r14
.text:00000000000043C9                 mov     [rsp+2F8h+var_204], edx
.text:00000000000043D0                 call    hash_lookup
.text:00000000000043D5                 mov     rbx, rax
.text:00000000000043D8                 jmp     short loc_4388
.text:00000000000043DA ; ---------------------------------------------------------------------------
.text:00000000000043DA
.text:00000000000043DA loc_43DA:                               ; CODE XREF: main+23D9↑j
.text:00000000000043DA                 mov     r13d, r14d
.text:00000000000043DD                 mov     r14, r15
.text:00000000000043E0                 mov     r15, [rsp+2F8h+var_290]
.text:00000000000043E5                 jmp     loc_40DD
.text:00000000000043EA ; ---------------------------------------------------------------------------
.text:00000000000043EA
.text:00000000000043EA loc_43EA:                               ; CODE XREF: main+2449↑j
.text:00000000000043EA                 lea     rsi, [rsp+2F8h+var_260]
.text:00000000000043F2                 mov     rdi, rbx
.text:00000000000043F5                 call    check_fspec
.text:00000000000043FA                 jmp     loc_40DD
.text:00000000000043FF ; ---------------------------------------------------------------------------
.text:00000000000043FF
.text:00000000000043FF loc_43FF:                               ; CODE XREF: main+2425↑j
.text:00000000000043FF                 mov     edx, [rsp+2F8h+mask] ; mask
.text:0000000000004403                 mov     rsi, [rbx]      ; name
.text:0000000000004406                 mov     edi, r13d       ; fd
.text:0000000000004409                 call    _inotify_add_watch
.text:000000000000440E                 test    eax, eax
.text:0000000000004410                 mov     r12d, eax
.text:0000000000004413                 jns     short loc_446E
.text:0000000000004415                 call    ___errno_location
.text:000000000000441A                 mov     r8, rax
.text:000000000000441D                 mov     eax, [rax]
.text:000000000000441F                 and     eax, 0FFFFFFEFh
.text:0000000000004422                 cmp     eax, 0Ch
.text:0000000000004425                 jz      loc_4641
.text:000000000000442B                 mov     rsi, [rbx]
.text:000000000000442E                 mov     edi, 4
.text:0000000000004433                 mov     [rsp+2F8h+s1], r8
.text:0000000000004438                 call    quotearg_style
.text:000000000000443D                 lea     rsi, aCannotWatchS ; "cannot watch %s"
.text:0000000000004444                 mov     edx, 5          ; category
.text:0000000000004449                 xor     edi, edi        ; domainname
.text:000000000000444B                 mov     [rsp+2F8h+var_290], rax
.text:0000000000004450                 call    _dcgettext
.text:0000000000004455                 mov     r8, [rsp+2F8h+s1]
.text:000000000000445A                 mov     rcx, [rsp+2F8h+var_290]
.text:000000000000445F                 mov     rdx, rax        ; format
.text:0000000000004462                 xor     edi, edi        ; status
.text:0000000000004464                 xor     eax, eax
.text:0000000000004466                 mov     esi, [r8]       ; errnum
.text:0000000000004469                 call    _error
.text:000000000000446E
.text:000000000000446E loc_446E:                               ; CODE XREF: main+24C3↑j
.text:000000000000446E                 mov     esi, [rbx+44h]  ; wd
.text:0000000000004471                 test    esi, esi
.text:0000000000004473                 js      short loc_447E
.text:0000000000004475                 cmp     r12d, esi
.text:0000000000004478                 jz      loc_437B
.text:000000000000447E
.text:000000000000447E loc_447E:                               ; CODE XREF: main+2523↑j
.text:000000000000447E                 test    esi, esi
.text:0000000000004480                 js      short loc_4495
.text:0000000000004482                 mov     edi, r13d       ; fd
.text:0000000000004485                 call    _inotify_rm_watch
.text:000000000000448A                 mov     rsi, rbx
.text:000000000000448D                 mov     rdi, r14
.text:0000000000004490                 call    hash_delete
.text:0000000000004495
.text:0000000000004495 loc_4495:                               ; CODE XREF: main+2530↑j
.text:0000000000004495                 mov     [rbx+44h], r12d
.text:0000000000004499                 add     r12d, 1
.text:000000000000449D                 jz      loc_40DD
.text:00000000000044A3                 mov     rsi, rbx
.text:00000000000044A6                 mov     rdi, r14
.text:00000000000044A9                 call    hash_delete
.text:00000000000044AE                 test    rax, rax
.text:00000000000044B1                 mov     r12, rax
.text:00000000000044B4                 jz      short loc_44E7
.text:00000000000044B6                 cmp     rbx, rax
.text:00000000000044B9                 jz      short loc_44E7
.text:00000000000044BB                 cmp     cs:follow_mode, 1
.text:00000000000044C2                 jz      loc_4680
.text:00000000000044C8
.text:00000000000044C8 loc_44C8:                               ; CODE XREF: main+273A↓j
.text:00000000000044C8                 mov     rdi, [r12]
.text:00000000000044CC                 mov     dword ptr [r12+44h], 0FFFFFFFFh
.text:00000000000044D5                 call    pretty_name_isra_7
.text:00000000000044DA                 mov     edi, [r12+38h]
.text:00000000000044DF                 mov     rsi, rax
.text:00000000000044E2                 call    close_fd
.text:00000000000044E7
.text:00000000000044E7 loc_44E7:                               ; CODE XREF: main+2564↑j
.text:00000000000044E7                                         ; main+2569↑j
.text:00000000000044E7                 mov     rsi, rbx
.text:00000000000044EA                 mov     rdi, r14
.text:00000000000044ED                 call    hash_insert
.text:00000000000044F2                 test    rax, rax
.text:00000000000044F5                 jnz     loc_437B
.text:00000000000044FB
.text:00000000000044FB loc_44FB:                               ; CODE XREF: main+738↑j
.text:00000000000044FB                                         ; main+741↑j ...
.text:00000000000044FB                 call    xalloc_die
.text:0000000000004500 ; ---------------------------------------------------------------------------
.text:0000000000004500
.text:0000000000004500 loc_4500:                               ; CODE XREF: main+23A2↑j
.text:0000000000004500                 mov     edx, [rbp+0]
.text:0000000000004503                 xor     eax, eax
.text:0000000000004505                 jmp     short loc_450B
.text:0000000000004507 ; ---------------------------------------------------------------------------
.text:0000000000004507
.text:0000000000004507 loc_4507:                               ; CODE XREF: main+25D3↓j
.text:0000000000004507                 add     rax, 1
.text:000000000000450B
.text:000000000000450B loc_450B:                               ; CODE XREF: main+25B5↑j
.text:000000000000450B                 cmp     [rsp+2F8h+var_2E0], rax
.text:0000000000004510                 jz      loc_43BE
.text:0000000000004516                 imul    rcx, rax, 60h ; '`'
.text:000000000000451A                 mov     rsi, [rsp+2F8h+var_2D0]
.text:000000000000451F                 cmp     [rsi+rcx+48h], edx
.text:0000000000004523                 jnz     short loc_4507
.text:0000000000004525                 mov     rdi, r14        ; ptr
.text:0000000000004528                 call    hash_free
.text:000000000000452D                 lea     rsi, aDirectoryConta ; "directory containing watched file was r"...
.text:0000000000004534                 mov     edx, 5          ; category
.text:0000000000004539                 xor     edi, edi        ; domainname
.text:000000000000453B                 call    _dcgettext
.text:0000000000004540                 xor     esi, esi        ; errnum
.text:0000000000004542                 mov     rdx, rax        ; format
.text:0000000000004545                 xor     edi, edi        ; status
.text:0000000000004547                 xor     eax, eax
.text:0000000000004549                 call    _error
.text:000000000000454E                 call    ___errno_location
.text:0000000000004553                 mov     dword ptr [rax], 0
.text:0000000000004559                 jmp     loc_3EFD
.text:000000000000455E ; ---------------------------------------------------------------------------
.text:000000000000455E
.text:000000000000455E loc_455E:                               ; CODE XREF: main+237D↑j
.text:000000000000455E                 call    ___errno_location
.text:0000000000004563                 cmp     dword ptr [rax], 16h
.text:0000000000004566                 jz      loc_41FA
.text:000000000000456C
.text:000000000000456C loc_456C:                               ; CODE XREF: main+22AF↑j
.text:000000000000456C                 lea     rsi, aErrorReadingIn ; "error reading inotify event"
.text:0000000000004573                 mov     edx, 5          ; category
.text:0000000000004578                 xor     edi, edi        ; domainname
.text:000000000000457A                 call    _dcgettext
.text:000000000000457F                 mov     rbx, rax
.text:0000000000004582                 call    ___errno_location
.text:0000000000004587                 mov     esi, [rax]      ; errnum
.text:0000000000004589                 mov     rdx, rbx        ; format
.text:000000000000458C                 mov     edi, 1          ; status
.text:0000000000004591                 xor     eax, eax
.text:0000000000004593                 call    _error
.text:0000000000004598
.text:0000000000004598 loc_4598:                               ; CODE XREF: main+2095↑j
.text:0000000000004598                 cmp     byte ptr [rsp+2F8h+buf], 0
.text:000000000000459D                 jnz     loc_3EEA
.text:00000000000045A3                 cmp     byte ptr [rsp+2F8h+nbytes], 0
.text:00000000000045A8                 jnz     loc_3FEB
.text:00000000000045AE                 jmp     loc_42BA
.text:00000000000045B3 ; ---------------------------------------------------------------------------
.text:00000000000045B3
.text:00000000000045B3 loc_45B3:                               ; CODE XREF: main+244E↑j
.text:00000000000045B3                 mov     esi, [rbx+44h]  ; wd
.text:00000000000045B6                 mov     edi, r13d       ; fd
.text:00000000000045B9                 call    _inotify_rm_watch
.text:00000000000045BE                 mov     rsi, rbx
.text:00000000000045C1                 mov     rdi, r14
.text:00000000000045C4                 call    hash_delete
.text:00000000000045C9                 jmp     loc_43A4
.text:00000000000045CE ; ---------------------------------------------------------------------------
.text:00000000000045CE
.text:00000000000045CE loc_45CE:                               ; CODE XREF: main+2432↑j
.text:00000000000045CE                 xor     esi, esi
.text:00000000000045D0                 mov     rdi, rbx
.text:00000000000045D3                 call    recheck
.text:00000000000045D8                 jmp     loc_4388
.text:00000000000045DD ; ---------------------------------------------------------------------------
.text:00000000000045DD
.text:00000000000045DD loc_45DD:                               ; CODE XREF: main+21AC↑j
.text:00000000000045DD                 mov     byte ptr [rsp+2F8h+offset], bpl
.text:00000000000045E2                 jmp     loc_42D3
.text:00000000000045E7 ; ---------------------------------------------------------------------------
.text:00000000000045E7
.text:00000000000045E7 loc_45E7:                               ; CODE XREF: main+20F2↑j
.text:00000000000045E7                                         ; main+2104↑j
.text:00000000000045E7                 mov     rdi, [r15]
.text:00000000000045EA                 call    pretty_name_isra_7
.text:00000000000045EF                 mov     edi, 4
.text:00000000000045F4                 mov     rsi, rax
.text:00000000000045F7                 call    quotearg_style
.text:00000000000045FC                 lea     rsi, aSWasReplaced ; "%s was replaced"
.text:0000000000004603                 mov     edx, 5          ; category
.text:0000000000004608                 xor     edi, edi        ; domainname
.text:000000000000460A                 mov     rbp, rax
.text:000000000000460D                 call    _dcgettext
.text:0000000000004612                 mov     r12, rax
.text:0000000000004615                 call    ___errno_location
.text:000000000000461A                 mov     esi, [rax]      ; errnum
.text:000000000000461C                 mov     rbx, rax
.text:000000000000461F                 mov     rcx, rbp
.text:0000000000004622                 mov     rdx, r12        ; format
.text:0000000000004625                 xor     edi, edi        ; status
.text:0000000000004627                 xor     eax, eax
.text:0000000000004629                 call    _error
.text:000000000000462E                 mov     rdi, r14        ; ptr
.text:0000000000004631                 call    hash_free
.text:0000000000004636                 mov     dword ptr [rbx], 0
.text:000000000000463C                 jmp     loc_3EFD
.text:0000000000004641 ; ---------------------------------------------------------------------------
.text:0000000000004641
.text:0000000000004641 loc_4641:                               ; CODE XREF: main+24D5↑j
.text:0000000000004641                 lea     rsi, aInotifyResourc ; "inotify resources exhausted"
.text:0000000000004648                 mov     edx, 5          ; category
.text:000000000000464D                 xor     edi, edi        ; domainname
.text:000000000000464F                 mov     qword ptr [rsp+2F8h+fildes], r8
.text:0000000000004654                 call    _dcgettext
.text:0000000000004659                 xor     esi, esi        ; errnum
.text:000000000000465B                 mov     rdx, rax        ; format
.text:000000000000465E                 xor     edi, edi        ; status
.text:0000000000004660                 xor     eax, eax
.text:0000000000004662                 call    _error
.text:0000000000004667                 mov     rdi, r14        ; ptr
.text:000000000000466A                 call    hash_free
.text:000000000000466F                 mov     r8, qword ptr [rsp+2F8h+fildes]
.text:0000000000004674                 mov     dword ptr [r8], 0
.text:000000000000467B                 jmp     loc_3EFD
.text:0000000000004680 ; ---------------------------------------------------------------------------
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: main+2572↑j
.text:0000000000004680                 xor     esi, esi
.text:0000000000004682                 mov     rdi, rax
.text:0000000000004685                 call    recheck
.text:000000000000468A                 jmp     loc_44C8
.text:000000000000468F ; ---------------------------------------------------------------------------
.text:000000000000468F
.text:000000000000468F loc_468F:                               ; CODE XREF: main+21BF↑j
.text:000000000000468F                 xor     edi, edi        ; status
.text:0000000000004691                 call    _exit
.text:0000000000004696 ; ---------------------------------------------------------------------------
.text:0000000000004696
.text:0000000000004696 loc_4696:                               ; CODE XREF: main+2276↑j
.text:0000000000004696                 lea     rsi, aErrorWaitingFo ; "error waiting for inotify and output ev"...
.text:000000000000469D                 mov     edx, 5          ; category
.text:00000000000046A2                 xor     edi, edi        ; domainname
.text:00000000000046A4                 call    _dcgettext
.text:00000000000046A9                 mov     rbx, rax
.text:00000000000046AC                 call    ___errno_location
.text:00000000000046B1                 mov     esi, [rax]      ; errnum
.text:00000000000046B3                 mov     rdx, rbx        ; format
.text:00000000000046B6                 mov     edi, 1          ; status
.text:00000000000046BB                 xor     eax, eax
.text:00000000000046BD                 call    _error
.text:00000000000046C2
.text:00000000000046C2 loc_46C2:                               ; CODE XREF: main+1F27↑j
.text:00000000000046C2                 call    ___errno_location
.text:00000000000046C7                 cmp     dword ptr [rax], 1Ch
.text:00000000000046CA                 mov     r15, rbx
.text:00000000000046CD                 mov     r14, qword ptr [rsp+2F8h+fildes]
.text:00000000000046D2                 mov     rbx, rax
.text:00000000000046D5                 jz      loc_3EC9
.text:00000000000046DB                 mov     rsi, [r15]
.text:00000000000046DE                 mov     edi, 4
.text:00000000000046E3                 call    quotearg_style
.text:00000000000046E8                 lea     rsi, aCannotWatchPar ; "cannot watch parent directory of %s"
.text:00000000000046EF                 xor     edi, edi        ; domainname
.text:00000000000046F1                 mov     edx, 5          ; category
.text:00000000000046F6                 mov     rbp, rax
.text:00000000000046F9                 call    _dcgettext
.text:00000000000046FE                 mov     esi, [rbx]      ; errnum
.text:0000000000004700                 mov     rdx, rax        ; format
.text:0000000000004703                 mov     rcx, rbp
.text:0000000000004706                 xor     edi, edi        ; status
.text:0000000000004708                 xor     eax, eax
.text:000000000000470A                 call    _error
.text:000000000000470F                 jmp     loc_3EEA
.text:0000000000004714 ; ---------------------------------------------------------------------------
.text:0000000000004714
.text:0000000000004714 loc_4714:                               ; CODE XREF: main+54C↑j
.text:0000000000004714                 mov     rdi, [rbp+8]
.text:0000000000004718                 call    quote
.text:000000000000471D                 lea     rsi, aInvalidNumber ; "invalid number"
.text:0000000000004724                 mov     edx, 5          ; category
.text:0000000000004729                 xor     edi, edi        ; domainname
.text:000000000000472B                 mov     rbp, rax
.text:000000000000472E                 call    _dcgettext
.text:0000000000004733                 mov     rbx, rax
.text:0000000000004736                 call    ___errno_location
.text:000000000000473B                 mov     esi, [rax]      ; errnum
.text:000000000000473D                 lea     rdx, format     ; "%s: %s"
.text:0000000000004744                 mov     r8, rbp
.text:0000000000004747                 mov     rcx, rbx
.text:000000000000474A                 mov     edi, 1          ; status
.text:000000000000474F                 xor     eax, eax
.text:0000000000004751                 call    _error
.text:0000000000004756
.text:0000000000004756 loc_4756:                               ; CODE XREF: main+1E21↑j
.text:0000000000004756                 lea     rsi, aWriteError ; "write error"
.text:000000000000475D                 mov     edx, 5          ; category
.text:0000000000004762                 xor     edi, edi        ; domainname
.text:0000000000004764                 call    _dcgettext
.text:0000000000004769                 mov     rbx, rax
.text:000000000000476C                 call    ___errno_location
.text:0000000000004771                 mov     esi, [rax]      ; errnum
.text:0000000000004773                 mov     rdx, rbx        ; format
.text:0000000000004776                 mov     edi, 1          ; status
.text:000000000000477B                 xor     eax, eax
.text:000000000000477D                 call    _error
.text:0000000000004782
.text:0000000000004782 loc_4782:                               ; CODE XREF: main+16D7↑j
.text:0000000000004782                 mov     rcx, 0FFFFFFFFFFFFFFFEh
.text:0000000000004789                 jmp     loc_34C8
.text:000000000000478E ; ---------------------------------------------------------------------------
.text:000000000000478E
.text:000000000000478E loc_478E:                               ; CODE XREF: main+1895↑j
.text:000000000000478E                                         ; main+189E↑j
.text:000000000000478E                 mov     rdx, r13
.text:0000000000004791                 mov     esi, 3
.text:0000000000004796                 xor     edi, edi
.text:0000000000004798                 mov     [rsp+2F8h+var_2F8], rax
.text:000000000000479C                 call    quotearg_n_style_colon
.text:00000000000047A1                 lea     rsi, aSCannotChangeN ; "%s: cannot change nonblocking mode"
.text:00000000000047A8                 mov     edx, 5          ; category
.text:00000000000047AD                 xor     edi, edi        ; domainname
.text:00000000000047AF                 mov     rbx, rax
.text:00000000000047B2                 call    _dcgettext
.text:00000000000047B7                 mov     r9, [rsp+2F8h+var_2F8]
.text:00000000000047BB                 mov     rdx, rax        ; format
.text:00000000000047BE                 mov     rcx, rbx
.text:00000000000047C1                 mov     edi, 1          ; status
.text:00000000000047C6                 xor     eax, eax
.text:00000000000047C8                 mov     esi, [r9]       ; errnum
.text:00000000000047CB                 call    _error
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: main+A07↑j
.text:00000000000047D0                 mov     rax, [r15]
.text:00000000000047D3                 jmp     loc_276A
.text:00000000000047D8 ; ---------------------------------------------------------------------------
.text:00000000000047D8
.text:00000000000047D8 loc_47D8:                               ; CODE XREF: main+69D↑j
.text:00000000000047D8                 lea     rsi, s2+1       ; "-"
.text:00000000000047DF                 mov     edi, 4
.text:00000000000047E4                 call    quotearg_style
.text:00000000000047E9                 lea     rsi, aCannotFollowSB ; "cannot follow %s by name"
.text:00000000000047F0                 mov     rbx, rax
.text:00000000000047F3                 mov     edx, 5          ; category
.text:00000000000047F8                 xor     edi, edi        ; domainname
.text:00000000000047FA                 call    _dcgettext
.text:00000000000047FF                 mov     rcx, rbx
.text:0000000000004802                 mov     rdx, rax        ; format
.text:0000000000004805                 xor     esi, esi        ; errnum
.text:0000000000004807                 mov     edi, 1          ; status
.text:000000000000480C                 xor     eax, eax
.text:000000000000480E                 call    _error
.text:0000000000004813
.text:0000000000004813 loc_4813:                               ; CODE XREF: main+1440↑j
.text:0000000000004813                 lea     rcx, __PRETTY_FUNCTION___7486 ; "pipe_lines"
.text:000000000000481A                 lea     rsi, file       ; "../coreutils-8.31/src/tail.c"
.text:0000000000004821                 lea     rdi, assertion  ; "beg"
.text:0000000000004828                 mov     edx, 2E0h       ; line
.text:000000000000482D                 call    ___assert_fail
.text:0000000000004832 ; ---------------------------------------------------------------------------
.text:0000000000004832
.text:0000000000004832 loc_4832:                               ; CODE XREF: main+72F↑j
.text:0000000000004832                 mov     ecx, 1
.text:0000000000004837                 jmp     loc_2685
.text:000000000000483C ; ---------------------------------------------------------------------------
.text:000000000000483C
.text:000000000000483C loc_483C:                               ; CODE XREF: main+AE9↑j
.text:000000000000483C                 call    ___stack_chk_fail
.text:0000000000004841 ; ---------------------------------------------------------------------------
.text:0000000000004841
.text:0000000000004841 loc_4841:                               ; CODE XREF: main+180A↑j
.text:0000000000004841                                         ; main+2284↑j
.text:0000000000004841                 mov     edi, 0Dh        ; sig
.text:0000000000004846                 call    _raise
.text:000000000000484B                 mov     edi, 1          ; status
.text:0000000000004850                 call    _exit
.text:0000000000004855 ; ---------------------------------------------------------------------------
.text:0000000000004855
.text:0000000000004855 loc_4855:                               ; CODE XREF: main+1A23↑j
.text:0000000000004855                 lea     rsi, aWriteError ; "write error"
.text:000000000000485C                 mov     edx, 5          ; category
.text:0000000000004861                 xor     edi, edi        ; domainname
.text:0000000000004863                 call    _dcgettext
.text:0000000000004868                 mov     rbx, rax
.text:000000000000486B                 call    ___errno_location
.text:0000000000004870                 mov     esi, [rax]      ; errnum
.text:0000000000004872                 mov     rdx, rbx        ; format
.text:0000000000004875                 mov     edi, 1          ; status
.text:000000000000487A                 xor     eax, eax
.text:000000000000487C                 call    _error
.text:0000000000004881
.text:0000000000004881 loc_4881:                               ; CODE XREF: main+1274↑j
.text:0000000000004881                 lea     rsi, aStandardOutput ; "standard output"
.text:0000000000004888                 mov     edx, 5          ; category
.text:000000000000488D                 xor     edi, edi        ; domainname
.text:000000000000488F                 call    _dcgettext
.text:0000000000004894                 mov     rbx, rax
.text:0000000000004897                 call    ___errno_location
.text:000000000000489C                 mov     esi, [rax]      ; errnum
.text:000000000000489E                 mov     rdx, rbx        ; format
.text:00000000000048A1                 mov     edi, 1          ; status
.text:00000000000048A6                 xor     eax, eax
.text:00000000000048A8                 call    _error
.text:00000000000048A8 ; } // starts at 1F50
.text:00000000000048AD                 nop     dword ptr [rax]
.text:00000000000048AD main            endp ; sp-analysis failed
.text:00000000000048AD
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000048B0                 public start
.text:00000000000048B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000048B0 ; __unwind {
.text:00000000000048B0                 xor     ebp, ebp
.text:00000000000048B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000048B5                 pop     rsi             ; argc
.text:00000000000048B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000048B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000048BD                 push    rax
.text:00000000000048BE                 push    rsp             ; stack_end
.text:00000000000048BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000048C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000048CD                 lea     rdi, main       ; main
.text:00000000000048D4                 call    cs:__libc_start_main_ptr
.text:00000000000048DA                 hlt
.text:00000000000048DA ; } // starts at 48B0
.text:00000000000048DA start           endp
.text:00000000000048DA
.text:00000000000048DA ; ---------------------------------------------------------------------------
.text:00000000000048DB                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000048E0
.text:00000000000048E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_4993↓p
.text:00000000000048E0                 lea     rdi, __bss_start
.text:00000000000048E7                 push    rbp
.text:00000000000048E8                 lea     rax, __bss_start
.text:00000000000048EF                 cmp     rax, rdi
.text:00000000000048F2                 mov     rbp, rsp
.text:00000000000048F5                 jz      short loc_4910
.text:00000000000048F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000048FE                 test    rax, rax
.text:0000000000004901                 jz      short loc_4910
.text:0000000000004903                 pop     rbp
.text:0000000000004904                 jmp     rax
.text:0000000000004904 ; ---------------------------------------------------------------------------
.text:0000000000004906                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000004910                                         ; deregister_tm_clones+21↑j
.text:0000000000004910                 pop     rbp
.text:0000000000004911                 retn
.text:0000000000004911 deregister_tm_clones endp
.text:0000000000004911
.text:0000000000004911 ; ---------------------------------------------------------------------------
.text:0000000000004912                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: bp-based frame info_from_lumina
.text:0000000000004920
.text:0000000000004920 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000004920                 lea     rdi, __bss_start
.text:0000000000004927                 lea     rsi, __bss_start
.text:000000000000492E                 push    rbp
.text:000000000000492F                 sub     rsi, rdi
.text:0000000000004932                 mov     rbp, rsp
.text:0000000000004935                 sar     rsi, 3
.text:0000000000004939                 mov     rax, rsi
.text:000000000000493C                 shr     rax, 3Fh
.text:0000000000004940                 add     rsi, rax
.text:0000000000004943                 sar     rsi, 1
.text:0000000000004946                 jz      short loc_4960
.text:0000000000004948                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000494F                 test    rax, rax
.text:0000000000004952                 jz      short loc_4960
.text:0000000000004954                 pop     rbp
.text:0000000000004955                 jmp     rax
.text:0000000000004955 ; ---------------------------------------------------------------------------
.text:0000000000004957                 align 20h
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000004960                                         ; register_tm_clones+32↑j
.text:0000000000004960                 pop     rbp
.text:0000000000004961                 retn
.text:0000000000004961 register_tm_clones endp
.text:0000000000004961
.text:0000000000004961 ; ---------------------------------------------------------------------------
.text:0000000000004962                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970 ; Attributes: info_from_lumina
.text:0000000000004970
.text:0000000000004970 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000004970                 cmp     cs:completed_7697, 0
.text:0000000000004977                 jnz     short locret_49A8
.text:0000000000004979                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000004981                 push    rbp
.text:0000000000004982                 mov     rbp, rsp
.text:0000000000004985                 jz      short loc_4993
.text:0000000000004987                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000498E                 call    __cxa_finalize
.text:0000000000004993
.text:0000000000004993 loc_4993:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000004993                 call    deregister_tm_clones
.text:0000000000004998                 mov     cs:completed_7697, 1
.text:000000000000499F                 pop     rbp
.text:00000000000049A0                 retn
.text:00000000000049A0 ; ---------------------------------------------------------------------------
.text:00000000000049A1                 align 8
.text:00000000000049A8
.text:00000000000049A8 locret_49A8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000049A8                 rep retn
.text:00000000000049A8 __do_global_dtors_aux endp
.text:00000000000049A8
.text:00000000000049A8 ; ---------------------------------------------------------------------------
.text:00000000000049AA                 align 10h
.text:00000000000049B0
.text:00000000000049B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049B0
.text:00000000000049B0 ; Attributes: bp-based frame
.text:00000000000049B0
.text:00000000000049B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000049B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000049B0                 push    rbp
.text:00000000000049B1                 mov     rbp, rsp
.text:00000000000049B4                 pop     rbp
.text:00000000000049B5                 jmp     register_tm_clones
.text:00000000000049B5 frame_dummy     endp
.text:00000000000049B5
.text:00000000000049B5 ; ---------------------------------------------------------------------------
.text:00000000000049BA                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0
.text:00000000000049C0 wd_hasher       proc near               ; DATA XREF: main+1E33↑o
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 movsxd  rax, dword ptr [rdi+44h]
.text:00000000000049C4                 xor     edx, edx
.text:00000000000049C6                 div     rsi
.text:00000000000049C9                 mov     rax, rdx
.text:00000000000049CC                 retn
.text:00000000000049CC ; } // starts at 49C0
.text:00000000000049CC wd_hasher       endp
.text:00000000000049CC
.text:00000000000049CC ; ---------------------------------------------------------------------------
.text:00000000000049CD                 align 10h
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0
.text:00000000000049D0 wd_comparator   proc near               ; DATA XREF: main+1E2C↑o
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 mov     eax, [rsi+44h]
.text:00000000000049D3                 cmp     [rdi+44h], eax
.text:00000000000049D6                 setz    al
.text:00000000000049D9                 retn
.text:00000000000049D9 ; } // starts at 49D0
.text:00000000000049D9 wd_comparator   endp
.text:00000000000049D9
.text:00000000000049D9 ; ---------------------------------------------------------------------------
.text:00000000000049DA                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0
.text:00000000000049E0 pretty_name_isra_7 proc near            ; CODE XREF: main+82A↑p
.text:00000000000049E0                                         ; main+A46↑p ...
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 mov     rax, rdi
.text:00000000000049E3                 lea     rdi, s2+1       ; "-"
.text:00000000000049EA                 mov     ecx, 2
.text:00000000000049EF                 mov     rsi, rax
.text:00000000000049F2                 repe cmpsb
.text:00000000000049F4                 setnbe  dl
.text:00000000000049F7                 sbb     dl, 0
.text:00000000000049FA                 test    dl, dl
.text:00000000000049FC                 jz      short loc_4A00
.text:00000000000049FE                 rep retn
.text:0000000000004A00 ; ---------------------------------------------------------------------------
.text:0000000000004A00
.text:0000000000004A00 loc_4A00:                               ; CODE XREF: pretty_name_isra_7+1C↑j
.text:0000000000004A00                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000004A07                 mov     edx, 5          ; category
.text:0000000000004A0C                 xor     edi, edi        ; domainname
.text:0000000000004A0E                 jmp     _dcgettext
.text:0000000000004A0E ; } // starts at 49E0
.text:0000000000004A0E pretty_name_isra_7 endp
.text:0000000000004A0E
.text:0000000000004A0E ; ---------------------------------------------------------------------------
.text:0000000000004A13                 align 20h
.text:0000000000004A20
.text:0000000000004A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A20
.text:0000000000004A20
.text:0000000000004A20 close_fd        proc near               ; CODE XREF: main+F4E↑p
.text:0000000000004A20                                         ; main+2592↑p ...
.text:0000000000004A20 ; __unwind {
.text:0000000000004A20                 lea     eax, [rdi+1]
.text:0000000000004A23                 cmp     eax, 1
.text:0000000000004A26                 jbe     short locret_4A40
.text:0000000000004A28                 push    r12
.text:0000000000004A2A                 push    rbp
.text:0000000000004A2B                 mov     rbp, rsi
.text:0000000000004A2E                 push    rbx
.text:0000000000004A2F                 mov     ebx, edi
.text:0000000000004A31                 call    _close
.text:0000000000004A36                 test    eax, eax
.text:0000000000004A38                 jnz     short loc_4A48
.text:0000000000004A3A                 pop     rbx
.text:0000000000004A3B                 pop     rbp
.text:0000000000004A3C                 pop     r12
.text:0000000000004A3E                 retn
.text:0000000000004A3E ; ---------------------------------------------------------------------------
.text:0000000000004A3F                 align 20h
.text:0000000000004A40
.text:0000000000004A40 locret_4A40:                            ; CODE XREF: close_fd+6↑j
.text:0000000000004A40                 rep retn
.text:0000000000004A40 ; ---------------------------------------------------------------------------
.text:0000000000004A42                 align 8
.text:0000000000004A48
.text:0000000000004A48 loc_4A48:                               ; CODE XREF: close_fd+18↑j
.text:0000000000004A48                 mov     rsi, rbp
.text:0000000000004A4B                 mov     edi, 4
.text:0000000000004A50                 call    quotearg_style
.text:0000000000004A55                 lea     rsi, aClosingSFdD ; "closing %s (fd=%d)"
.text:0000000000004A5C                 mov     edx, 5          ; category
.text:0000000000004A61                 xor     edi, edi        ; domainname
.text:0000000000004A63                 mov     r12, rax
.text:0000000000004A66                 call    _dcgettext
.text:0000000000004A6B                 mov     rbp, rax
.text:0000000000004A6E                 call    ___errno_location
.text:0000000000004A73                 mov     r8d, ebx
.text:0000000000004A76                 mov     rcx, r12
.text:0000000000004A79                 mov     rdx, rbp        ; format
.text:0000000000004A7C                 pop     rbx
.text:0000000000004A7D                 pop     rbp
.text:0000000000004A7E                 pop     r12
.text:0000000000004A80                 mov     esi, [rax]      ; errnum
.text:0000000000004A82                 xor     edi, edi        ; status
.text:0000000000004A84                 xor     eax, eax
.text:0000000000004A86                 jmp     _error
.text:0000000000004A86 ; } // starts at 4A20
.text:0000000000004A86 close_fd        endp
.text:0000000000004A86
.text:0000000000004A86 ; ---------------------------------------------------------------------------
.text:0000000000004A8B                 align 10h
.text:0000000000004A90
.text:0000000000004A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A90
.text:0000000000004A90
.text:0000000000004A90 xwrite_stdout_part_10 proc near         ; CODE XREF: main+1458↑p
.text:0000000000004A90                                         ; main+1485↑p ...
.text:0000000000004A90 ; __unwind {
.text:0000000000004A90                 push    rbp
.text:0000000000004A91                 push    rbx
.text:0000000000004A92                 mov     rdx, rsi        ; n
.text:0000000000004A95                 mov     rbx, rsi
.text:0000000000004A98                 mov     esi, 1          ; size
.text:0000000000004A9D                 sub     rsp, 8
.text:0000000000004AA1                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004AA8                 call    _fwrite_unlocked
.text:0000000000004AAD                 cmp     rbx, rax
.text:0000000000004AB0                 ja      short loc_4AB9
.text:0000000000004AB2                 add     rsp, 8
.text:0000000000004AB6                 pop     rbx
.text:0000000000004AB7                 pop     rbp
.text:0000000000004AB8                 retn
.text:0000000000004AB9 ; ---------------------------------------------------------------------------
.text:0000000000004AB9
.text:0000000000004AB9 loc_4AB9:                               ; CODE XREF: xwrite_stdout_part_10+20↑j
.text:0000000000004AB9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004AC0                 call    _clearerr_unlocked
.text:0000000000004AC5                 lea     rsi, aStandardOutput ; "standard output"
.text:0000000000004ACC                 mov     edi, 4
.text:0000000000004AD1                 call    quotearg_style
.text:0000000000004AD6                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:0000000000004ADD                 mov     edx, 5          ; category
.text:0000000000004AE2                 xor     edi, edi        ; domainname
.text:0000000000004AE4                 mov     rbp, rax
.text:0000000000004AE7                 call    _dcgettext
.text:0000000000004AEC                 mov     rbx, rax
.text:0000000000004AEF                 call    ___errno_location
.text:0000000000004AF4                 mov     esi, [rax]      ; errnum
.text:0000000000004AF6                 mov     rcx, rbp
.text:0000000000004AF9                 mov     rdx, rbx        ; format
.text:0000000000004AFC                 mov     edi, 1          ; status
.text:0000000000004B01                 xor     eax, eax
.text:0000000000004B03                 call    _error
.text:0000000000004B03 ; } // starts at 4A90
.text:0000000000004B08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004B08 xwrite_stdout_part_10 endp ; sp-analysis failed
.text:0000000000004B08
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10 start_lines     proc near               ; CODE XREF: main+113E↑p
.text:0000000000004B10
.text:0000000000004B10 var_2050        = qword ptr -2050h
.text:0000000000004B10 s               = byte ptr -2048h
.text:0000000000004B10 var_40          = qword ptr -40h
.text:0000000000004B10
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    r15
.text:0000000000004B12                 push    r14
.text:0000000000004B14                 push    r13
.text:0000000000004B16                 push    r12
.text:0000000000004B18                 push    rbp
.text:0000000000004B19                 push    rbx
.text:0000000000004B1A                 sub     rsp, 2028h
.text:0000000000004B21                 mov     rax, fs:28h
.text:0000000000004B2A                 mov     [rsp+2058h+var_40], rax
.text:0000000000004B32                 xor     eax, eax
.text:0000000000004B34                 test    rdx, rdx
.text:0000000000004B37                 mov     [rsp+2058h+var_2050], rdi
.text:0000000000004B3C                 jz      short loc_4BB8
.text:0000000000004B3E                 lea     r13, [rsp+2058h+s]
.text:0000000000004B43                 mov     r15d, esi
.text:0000000000004B46                 mov     rbx, rdx
.text:0000000000004B49                 mov     r14, rcx
.text:0000000000004B4C
.text:0000000000004B4C loc_4B4C:                               ; CODE XREF: start_lines+89↓j
.text:0000000000004B4C                 mov     edx, 2000h      ; nbytes
.text:0000000000004B51                 mov     rsi, r13        ; buf
.text:0000000000004B54                 mov     edi, r15d       ; fd
.text:0000000000004B57                 call    safe_read
.text:0000000000004B5C                 test    rax, rax
.text:0000000000004B5F                 jz      loc_4BF2
.text:0000000000004B65                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B69                 jz      loc_4BF9
.text:0000000000004B6F                 add     [r14], rax
.text:0000000000004B72                 movsx   r12d, cs:line_end
.text:0000000000004B7A                 lea     rbp, [r13+rax+0]
.text:0000000000004B7F                 mov     rdi, r13        ; s
.text:0000000000004B82                 nop     word ptr [rax+rax+00h]
.text:0000000000004B88
.text:0000000000004B88 loc_4B88:                               ; CODE XREF: start_lines+93↓j
.text:0000000000004B88                 mov     rdx, rbp
.text:0000000000004B8B                 mov     esi, r12d       ; c
.text:0000000000004B8E                 sub     rdx, rdi        ; n
.text:0000000000004B91                 call    _memchr
.text:0000000000004B96                 test    rax, rax
.text:0000000000004B99                 jz      short loc_4B4C
.text:0000000000004B9B                 sub     rbx, 1
.text:0000000000004B9F                 lea     rdi, [rax+1]
.text:0000000000004BA3                 jnz     short loc_4B88
.text:0000000000004BA5                 xor     eax, eax
.text:0000000000004BA7                 cmp     rbp, rdi
.text:0000000000004BAA                 jbe     short loc_4BB8
.text:0000000000004BAC                 sub     rbp, rdi
.text:0000000000004BAF                 jnz     short loc_4BE0
.text:0000000000004BB1                 nop     dword ptr [rax+00000000h]
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: start_lines+2C↑j
.text:0000000000004BB8                                         ; start_lines+9A↑j ...
.text:0000000000004BB8                 mov     rcx, [rsp+2058h+var_40]
.text:0000000000004BC0                 xor     rcx, fs:28h
.text:0000000000004BC9                 jnz     short loc_4C41
.text:0000000000004BCB                 add     rsp, 2028h
.text:0000000000004BD2                 pop     rbx
.text:0000000000004BD3                 pop     rbp
.text:0000000000004BD4                 pop     r12
.text:0000000000004BD6                 pop     r13
.text:0000000000004BD8                 pop     r14
.text:0000000000004BDA                 pop     r15
.text:0000000000004BDC                 retn
.text:0000000000004BDC ; ---------------------------------------------------------------------------
.text:0000000000004BDD                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: start_lines+9F↑j
.text:0000000000004BE0                 mov     rsi, rbp
.text:0000000000004BE3                 mov     dword ptr [rsp+2058h+var_2050], eax
.text:0000000000004BE7                 call    xwrite_stdout_part_10
.text:0000000000004BEC                 mov     eax, dword ptr [rsp+2058h+var_2050]
.text:0000000000004BF0                 jmp     short loc_4BB8
.text:0000000000004BF2 ; ---------------------------------------------------------------------------
.text:0000000000004BF2
.text:0000000000004BF2 loc_4BF2:                               ; CODE XREF: start_lines+4F↑j
.text:0000000000004BF2                 mov     eax, 0FFFFFFFFh
.text:0000000000004BF7                 jmp     short loc_4BB8
.text:0000000000004BF9 ; ---------------------------------------------------------------------------
.text:0000000000004BF9
.text:0000000000004BF9 loc_4BF9:                               ; CODE XREF: start_lines+59↑j
.text:0000000000004BF9                 mov     rsi, [rsp+2058h+var_2050]
.text:0000000000004BFE                 mov     edi, 4
.text:0000000000004C03                 call    quotearg_style
.text:0000000000004C08                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000004C0F                 mov     edx, 5          ; category
.text:0000000000004C14                 xor     edi, edi        ; domainname
.text:0000000000004C16                 mov     rbp, rax
.text:0000000000004C19                 call    _dcgettext
.text:0000000000004C1E                 mov     rbx, rax
.text:0000000000004C21                 call    ___errno_location
.text:0000000000004C26                 mov     esi, [rax]      ; errnum
.text:0000000000004C28                 mov     rcx, rbp
.text:0000000000004C2B                 xor     eax, eax
.text:0000000000004C2D                 mov     rdx, rbx        ; format
.text:0000000000004C30                 xor     edi, edi        ; status
.text:0000000000004C32                 call    _error
.text:0000000000004C37                 mov     eax, 1
.text:0000000000004C3C                 jmp     loc_4BB8
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C41
.text:0000000000004C41 loc_4C41:                               ; CODE XREF: start_lines+B9↑j
.text:0000000000004C41                 call    ___stack_chk_fail
.text:0000000000004C41 ; } // starts at 4B10
.text:0000000000004C41 start_lines     endp
.text:0000000000004C41
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C46                 align 10h
.text:0000000000004C50
.text:0000000000004C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C50
.text:0000000000004C50
.text:0000000000004C50 dump_remainder  proc near               ; CODE XREF: main+1111↑p
.text:0000000000004C50                                         ; main+149B↑p ...
.text:0000000000004C50
.text:0000000000004C50 fd              = dword ptr -2054h
.text:0000000000004C50 var_2050        = qword ptr -2050h
.text:0000000000004C50 buf             = byte ptr -2048h
.text:0000000000004C50 var_40          = qword ptr -40h
.text:0000000000004C50
.text:0000000000004C50 ; __unwind {
.text:0000000000004C50                 push    r15
.text:0000000000004C52                 push    r14
.text:0000000000004C54                 mov     r14, rcx
.text:0000000000004C57                 push    r13
.text:0000000000004C59                 push    r12
.text:0000000000004C5B                 xor     r12d, r12d
.text:0000000000004C5E                 push    rbp
.text:0000000000004C5F                 push    rbx
.text:0000000000004C60                 mov     ebp, edi
.text:0000000000004C62                 mov     rbx, rcx
.text:0000000000004C65                 sub     rsp, 2028h
.text:0000000000004C6C                 mov     rax, fs:28h
.text:0000000000004C75                 mov     [rsp+2058h+var_40], rax
.text:0000000000004C7D                 xor     eax, eax
.text:0000000000004C7F                 lea     r13, [rsp+2058h+buf]
.text:0000000000004C84                 mov     [rsp+2058h+var_2050], rsi
.text:0000000000004C89                 mov     [rsp+2058h+fd], edx
.text:0000000000004C8D                 nop     dword ptr [rax]
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: dump_remainder+C8↓j
.text:0000000000004C90                 mov     edi, [rsp+2058h+fd] ; fd
.text:0000000000004C94                 cmp     rbx, 2000h
.text:0000000000004C9B                 mov     edx, 2000h
.text:0000000000004CA0                 cmovbe  rdx, rbx        ; nbytes
.text:0000000000004CA4                 mov     rsi, r13        ; buf
.text:0000000000004CA7                 call    safe_read
.text:0000000000004CAC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CB0                 mov     r15, rax
.text:0000000000004CB3                 jz      short loc_4D20
.text:0000000000004CB5                 test    rax, rax
.text:0000000000004CB8                 jz      short loc_4D2D
.text:0000000000004CBA                 test    bpl, bpl
.text:0000000000004CBD                 jz      short loc_4CF7
.text:0000000000004CBF                 cmp     cs:first_file_7393, 0
.text:0000000000004CC6                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004CCD                 lea     rdx, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000004CD4                 mov     rcx, [rsp+2058h+var_2050]
.text:0000000000004CD9                 lea     rsi, aSS        ; "%s==> %s <==\n"
.text:0000000000004CE0                 mov     edi, 1
.text:0000000000004CE5                 cmovnz  rdx, rax
.text:0000000000004CE9                 xor     eax, eax
.text:0000000000004CEB                 call    ___printf_chk
.text:0000000000004CF0                 mov     cs:first_file_7393, 0
.text:0000000000004CF7
.text:0000000000004CF7 loc_4CF7:                               ; CODE XREF: dump_remainder+6D↑j
.text:0000000000004CF7                 mov     rsi, r15
.text:0000000000004CFA                 mov     rdi, r13
.text:0000000000004CFD                 add     r12, r15
.text:0000000000004D00                 call    xwrite_stdout_part_10
.text:0000000000004D05                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D09                 jz      short loc_4D16
.text:0000000000004D0B                 sub     rbx, r15
.text:0000000000004D0E                 jz      short loc_4D2D
.text:0000000000004D10                 cmp     r14, 0FFFFFFFFFFFFFFFEh
.text:0000000000004D14                 jz      short loc_4D2D
.text:0000000000004D16
.text:0000000000004D16 loc_4D16:                               ; CODE XREF: dump_remainder+B9↑j
.text:0000000000004D16                 xor     ebp, ebp
.text:0000000000004D18                 jmp     loc_4C90
.text:0000000000004D18 ; ---------------------------------------------------------------------------
.text:0000000000004D1D                 align 20h
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: dump_remainder+63↑j
.text:0000000000004D20                 call    ___errno_location
.text:0000000000004D25                 cmp     dword ptr [rax], 0Bh
.text:0000000000004D28                 mov     rbx, rax
.text:0000000000004D2B                 jnz     short loc_4D5A
.text:0000000000004D2D
.text:0000000000004D2D loc_4D2D:                               ; CODE XREF: dump_remainder+68↑j
.text:0000000000004D2D                                         ; dump_remainder+BE↑j ...
.text:0000000000004D2D                 mov     rcx, [rsp+2058h+var_40]
.text:0000000000004D35                 xor     rcx, fs:28h
.text:0000000000004D3E                 mov     rax, r12
.text:0000000000004D41                 jnz     short loc_4D55
.text:0000000000004D43                 add     rsp, 2028h
.text:0000000000004D4A                 pop     rbx
.text:0000000000004D4B                 pop     rbp
.text:0000000000004D4C                 pop     r12
.text:0000000000004D4E                 pop     r13
.text:0000000000004D50                 pop     r14
.text:0000000000004D52                 pop     r15
.text:0000000000004D54                 retn
.text:0000000000004D55 ; ---------------------------------------------------------------------------
.text:0000000000004D55
.text:0000000000004D55 loc_4D55:                               ; CODE XREF: dump_remainder+F1↑j
.text:0000000000004D55                 call    ___stack_chk_fail
.text:0000000000004D5A ; ---------------------------------------------------------------------------
.text:0000000000004D5A
.text:0000000000004D5A loc_4D5A:                               ; CODE XREF: dump_remainder+DB↑j
.text:0000000000004D5A                 mov     rsi, [rsp+2058h+var_2050]
.text:0000000000004D5F                 mov     edi, 4
.text:0000000000004D64                 call    quotearg_style
.text:0000000000004D69                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000004D70                 mov     edx, 5          ; category
.text:0000000000004D75                 xor     edi, edi        ; domainname
.text:0000000000004D77                 mov     rbp, rax
.text:0000000000004D7A                 call    _dcgettext
.text:0000000000004D7F                 mov     esi, [rbx]      ; errnum
.text:0000000000004D81                 mov     rdx, rax        ; format
.text:0000000000004D84                 mov     rcx, rbp
.text:0000000000004D87                 mov     edi, 1          ; status
.text:0000000000004D8C                 xor     eax, eax
.text:0000000000004D8E                 call    _error
.text:0000000000004D8E ; } // starts at 4C50
.text:0000000000004D93                 nop     dword ptr [rax]
.text:0000000000004D96                 db      2Eh
.text:0000000000004D96                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004D96 dump_remainder  endp ; sp-analysis failed
.text:0000000000004D96
.text:0000000000004DA0
.text:0000000000004DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DA0
.text:0000000000004DA0
.text:0000000000004DA0 start_bytes     proc near               ; CODE XREF: main+10EF↑p
.text:0000000000004DA0
.text:0000000000004DA0 var_30          = qword ptr -30h
.text:0000000000004DA0
.text:0000000000004DA0 ; __unwind {
.text:0000000000004DA0                 push    r14
.text:0000000000004DA2                 push    r13
.text:0000000000004DA4                 push    r12
.text:0000000000004DA6                 push    rbp
.text:0000000000004DA7                 push    rbx
.text:0000000000004DA8                 sub     rsp, 2010h
.text:0000000000004DAF                 mov     rax, fs:28h
.text:0000000000004DB8                 mov     [rsp+2038h+var_30], rax
.text:0000000000004DC0                 xor     eax, eax
.text:0000000000004DC2                 test    rdx, rdx
.text:0000000000004DC5                 jz      short loc_4E28
.text:0000000000004DC7                 mov     r14, rdi
.text:0000000000004DCA                 mov     r13d, esi
.text:0000000000004DCD                 mov     rbx, rdx
.text:0000000000004DD0                 mov     rbp, rcx
.text:0000000000004DD3                 mov     r12, rsp
.text:0000000000004DD6                 jmp     short loc_4DF4
.text:0000000000004DD6 ; ---------------------------------------------------------------------------
.text:0000000000004DD8                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: start_bytes+67↓j
.text:0000000000004DE0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DE4                 jz      short loc_4E50
.text:0000000000004DE6                 add     [rbp+0], rax
.text:0000000000004DEA                 cmp     rax, rbx
.text:0000000000004DED                 ja      short loc_4E10
.text:0000000000004DEF                 sub     rbx, rax
.text:0000000000004DF2                 jz      short loc_4E28
.text:0000000000004DF4
.text:0000000000004DF4 loc_4DF4:                               ; CODE XREF: start_bytes+36↑j
.text:0000000000004DF4                 mov     edx, 2000h      ; nbytes
.text:0000000000004DF9                 mov     rsi, r12        ; buf
.text:0000000000004DFC                 mov     edi, r13d       ; fd
.text:0000000000004DFF                 call    safe_read
.text:0000000000004E04                 test    rax, rax
.text:0000000000004E07                 jnz     short loc_4DE0
.text:0000000000004E09                 mov     eax, 0FFFFFFFFh
.text:0000000000004E0E                 jmp     short loc_4E2A
.text:0000000000004E10 ; ---------------------------------------------------------------------------
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: start_bytes+4D↑j
.text:0000000000004E10                 sub     rax, rbx
.text:0000000000004E13                 jz      short loc_4E28
.text:0000000000004E15                 lea     rdi, [r12+rbx]
.text:0000000000004E19                 mov     rsi, rax
.text:0000000000004E1C                 call    xwrite_stdout_part_10
.text:0000000000004E21                 nop     dword ptr [rax+00000000h]
.text:0000000000004E28
.text:0000000000004E28 loc_4E28:                               ; CODE XREF: start_bytes+25↑j
.text:0000000000004E28                                         ; start_bytes+52↑j ...
.text:0000000000004E28                 xor     eax, eax
.text:0000000000004E2A
.text:0000000000004E2A loc_4E2A:                               ; CODE XREF: start_bytes+6E↑j
.text:0000000000004E2A                                         ; start_bytes+F1↓j
.text:0000000000004E2A                 mov     rcx, [rsp+2038h+var_30]
.text:0000000000004E32                 xor     rcx, fs:28h
.text:0000000000004E3B                 jnz     short loc_4E93
.text:0000000000004E3D                 add     rsp, 2010h
.text:0000000000004E44                 pop     rbx
.text:0000000000004E45                 pop     rbp
.text:0000000000004E46                 pop     r12
.text:0000000000004E48                 pop     r13
.text:0000000000004E4A                 pop     r14
.text:0000000000004E4C                 retn
.text:0000000000004E4C ; ---------------------------------------------------------------------------
.text:0000000000004E4D                 align 10h
.text:0000000000004E50
.text:0000000000004E50 loc_4E50:                               ; CODE XREF: start_bytes+44↑j
.text:0000000000004E50                 mov     rsi, r14
.text:0000000000004E53                 mov     edi, 4
.text:0000000000004E58                 call    quotearg_style
.text:0000000000004E5D                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000004E64                 mov     edx, 5          ; category
.text:0000000000004E69                 xor     edi, edi        ; domainname
.text:0000000000004E6B                 mov     rbp, rax
.text:0000000000004E6E                 call    _dcgettext
.text:0000000000004E73                 mov     rbx, rax
.text:0000000000004E76                 call    ___errno_location
.text:0000000000004E7B                 mov     esi, [rax]      ; errnum
.text:0000000000004E7D                 mov     rcx, rbp
.text:0000000000004E80                 xor     eax, eax
.text:0000000000004E82                 mov     rdx, rbx        ; format
.text:0000000000004E85                 xor     edi, edi        ; status
.text:0000000000004E87                 call    _error
.text:0000000000004E8C                 mov     eax, 1
.text:0000000000004E91                 jmp     short loc_4E2A
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E93
.text:0000000000004E93 loc_4E93:                               ; CODE XREF: start_bytes+9B↑j
.text:0000000000004E93                 call    ___stack_chk_fail
.text:0000000000004E93 ; } // starts at 4DA0
.text:0000000000004E93 start_bytes     endp
.text:0000000000004E93
.text:0000000000004E93 ; ---------------------------------------------------------------------------
.text:0000000000004E98                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0
.text:0000000000004EA0 xlseek          proc near               ; CODE XREF: main+14CB↑p
.text:0000000000004EA0                                         ; main+1985↑p ...
.text:0000000000004EA0
.text:0000000000004EA0 var_30          = qword ptr -30h
.text:0000000000004EA0
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 push    r13
.text:0000000000004EA2                 push    r12
.text:0000000000004EA4                 mov     r12, rcx
.text:0000000000004EA7                 push    rbp
.text:0000000000004EA8                 push    rbx
.text:0000000000004EA9                 mov     rbp, rsi
.text:0000000000004EAC                 mov     ebx, edx
.text:0000000000004EAE                 sub     rsp, 28h
.text:0000000000004EB2                 mov     rax, fs:28h
.text:0000000000004EBB                 mov     [rsp+48h+var_30], rax
.text:0000000000004EC0                 xor     eax, eax
.text:0000000000004EC2                 call    _lseek
.text:0000000000004EC7                 test    rax, rax
.text:0000000000004ECA                 js      short loc_4EF0
.text:0000000000004ECC                 mov     rcx, [rsp+48h+var_30]
.text:0000000000004ED1                 xor     rcx, fs:28h
.text:0000000000004EDA                 jnz     loc_4F66
.text:0000000000004EE0                 add     rsp, 28h
.text:0000000000004EE4                 pop     rbx
.text:0000000000004EE5                 pop     rbp
.text:0000000000004EE6                 pop     r12
.text:0000000000004EE8                 pop     r13
.text:0000000000004EEA                 retn
.text:0000000000004EEA ; ---------------------------------------------------------------------------
.text:0000000000004EEB                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: xlseek+2A↑j
.text:0000000000004EF0                 mov     rdi, rbp
.text:0000000000004EF3                 mov     rsi, rsp
.text:0000000000004EF6                 call    imaxtostr
.text:0000000000004EFB                 mov     r13, rax
.text:0000000000004EFE                 call    ___errno_location
.text:0000000000004F03                 xor     edi, edi
.text:0000000000004F05                 cmp     ebx, 1
.text:0000000000004F08                 mov     rbp, rax
.text:0000000000004F0B                 mov     rdx, r12
.text:0000000000004F0E                 mov     esi, 3
.text:0000000000004F13                 jz      short loc_4F50
.text:0000000000004F15                 call    quotearg_n_style_colon
.text:0000000000004F1A                 lea     rsi, aSCannotSeekToO ; "%s: cannot seek to offset %s"
.text:0000000000004F21                 mov     rbx, rax
.text:0000000000004F24                 mov     edx, 5          ; category
.text:0000000000004F29
.text:0000000000004F29 loc_4F29:                               ; CODE XREF: xlseek+C4↓j
.text:0000000000004F29                 xor     edi, edi        ; domainname
.text:0000000000004F2B                 call    _dcgettext
.text:0000000000004F30                 mov     esi, [rbp+0]    ; errnum
.text:0000000000004F33                 mov     rdx, rax        ; format
.text:0000000000004F36                 xor     edi, edi        ; status
.text:0000000000004F38                 mov     r8, r13
.text:0000000000004F3B                 mov     rcx, rbx
.text:0000000000004F3E                 xor     eax, eax
.text:0000000000004F40                 call    _error
.text:0000000000004F45                 mov     edi, 1          ; status
.text:0000000000004F4A                 call    _exit
.text:0000000000004F4A ; ---------------------------------------------------------------------------
.text:0000000000004F4F                 align 10h
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: xlseek+73↑j
.text:0000000000004F50                 call    quotearg_n_style_colon
.text:0000000000004F55                 mov     edx, 5
.text:0000000000004F5A                 mov     rbx, rax
.text:0000000000004F5D                 lea     rsi, aSCannotSeekToR ; "%s: cannot seek to relative offset %s"
.text:0000000000004F64                 jmp     short loc_4F29
.text:0000000000004F66 ; ---------------------------------------------------------------------------
.text:0000000000004F66
.text:0000000000004F66 loc_4F66:                               ; CODE XREF: xlseek+3A↑j
.text:0000000000004F66                 call    ___stack_chk_fail
.text:0000000000004F66 ; } // starts at 4EA0
.text:0000000000004F66 xlseek          endp
.text:0000000000004F66
.text:0000000000004F66 ; ---------------------------------------------------------------------------
.text:0000000000004F6B                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70 file_lines      proc near               ; CODE XREF: main+1BF5↑p
.text:0000000000004F70
.text:0000000000004F70 var_2068        = qword ptr -2068h
.text:0000000000004F70 var_2060        = qword ptr -2060h
.text:0000000000004F70 var_2058        = qword ptr -2058h
.text:0000000000004F70 var_2050        = qword ptr -2050h
.text:0000000000004F70 s               = byte ptr -2048h
.text:0000000000004F70 var_40          = qword ptr -40h
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 push    r15
.text:0000000000004F72                 push    r14
.text:0000000000004F74                 push    r13
.text:0000000000004F76                 push    r12
.text:0000000000004F78                 push    rbp
.text:0000000000004F79                 push    rbx
.text:0000000000004F7A                 sub     rsp, 2038h
.text:0000000000004F81                 mov     rax, fs:28h
.text:0000000000004F8A                 mov     [rsp+2068h+var_40], rax
.text:0000000000004F92                 xor     eax, eax
.text:0000000000004F94                 test    rdx, rdx
.text:0000000000004F97                 mov     [rsp+2068h+var_2060], rdi
.text:0000000000004F9C                 mov     [rsp+2068h+var_2058], rcx
.text:0000000000004FA1                 mov     [rsp+2068h+var_2050], r8
.text:0000000000004FA6                 mov     [rsp+2068h+var_2068], r9
.text:0000000000004FAA                 jz      loc_50D0
.text:0000000000004FB0                 mov     rbp, r8
.text:0000000000004FB3                 mov     r14d, esi
.text:0000000000004FB6                 lea     rbx, [rsp+2068h+s]
.text:0000000000004FBB                 sub     rbp, rcx
.text:0000000000004FBE                 mov     rsi, r8
.text:0000000000004FC1                 mov     rcx, rdi
.text:0000000000004FC4                 mov     rax, rbp
.text:0000000000004FC7                 mov     edi, r14d
.text:0000000000004FCA                 mov     r15, rdx
.text:0000000000004FCD                 sar     rax, 3Fh
.text:0000000000004FD1                 shr     rax, 33h
.text:0000000000004FD5                 add     rbp, rax
.text:0000000000004FD8                 and     ebp, 1FFFh
.text:0000000000004FDE                 sub     rbp, rax
.text:0000000000004FE1                 mov     eax, 2000h
.text:0000000000004FE6                 cmovz   rbp, rax
.text:0000000000004FEA                 xor     edx, edx
.text:0000000000004FEC                 sub     rsi, rbp
.text:0000000000004FEF                 mov     r13, rsi
.text:0000000000004FF2                 call    xlseek
.text:0000000000004FF7                 mov     rdx, rbp        ; nbytes
.text:0000000000004FFA                 mov     rsi, rbx        ; buf
.text:0000000000004FFD                 mov     edi, r14d       ; fd
.text:0000000000005000                 call    safe_read
.text:0000000000005005                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005009                 mov     r12, rax
.text:000000000000500C                 jz      loc_5140
.text:0000000000005012                 mov     rsi, [rsp+2068h+var_2068]
.text:0000000000005016                 lea     rax, [r13+rax+0]
.text:000000000000501B                 test    r12, r12
.text:000000000000501E                 mov     [rsi], rax
.text:0000000000005021                 jz      short loc_5072
.text:0000000000005023                 movzx   eax, cs:line_end
.text:000000000000502A                 cmp     byte ptr [rsp+r12+2068h+var_2050+7], al
.text:000000000000502F                 setnz   al
.text:0000000000005032                 movzx   eax, al
.text:0000000000005035                 sub     r15, rax
.text:0000000000005038
.text:0000000000005038 loc_5038:                               ; CODE XREF: file_lines+152↓j
.text:0000000000005038                 movsx   ebp, cs:line_end
.text:000000000000503F                 mov     rdx, r12
.text:0000000000005042                 jmp     short loc_5063
.text:0000000000005042 ; ---------------------------------------------------------------------------
.text:0000000000005044                 align 8
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: file_lines+100↓j
.text:0000000000005048                 mov     rdx, rax
.text:000000000000504B                 lea     rcx, [r15-1]
.text:000000000000504F                 sub     rdx, rbx        ; n
.text:0000000000005052                 test    r15, r15
.text:0000000000005055                 jz      loc_5100
.text:000000000000505B                 test    rdx, rdx
.text:000000000000505E                 mov     r15, rcx
.text:0000000000005061                 jz      short loc_5072
.text:0000000000005063
.text:0000000000005063 loc_5063:                               ; CODE XREF: file_lines+D2↑j
.text:0000000000005063                 mov     esi, ebp        ; c
.text:0000000000005065                 mov     rdi, rbx        ; s
.text:0000000000005068                 call    _memrchr
.text:000000000000506D                 test    rax, rax
.text:0000000000005070                 jnz     short loc_5048
.text:0000000000005072
.text:0000000000005072 loc_5072:                               ; CODE XREF: file_lines+B1↑j
.text:0000000000005072                                         ; file_lines+F1↑j
.text:0000000000005072                 cmp     r13, [rsp+2068h+var_2058]
.text:0000000000005077                 jz      loc_5185
.text:000000000000507D                 mov     rcx, [rsp+2068h+var_2060]
.text:0000000000005082                 sub     r13, 2000h
.text:0000000000005089                 xor     edx, edx
.text:000000000000508B                 mov     rsi, r13
.text:000000000000508E                 mov     edi, r14d
.text:0000000000005091                 call    xlseek
.text:0000000000005096                 mov     edx, 2000h      ; nbytes
.text:000000000000509B                 mov     rsi, rbx        ; buf
.text:000000000000509E                 mov     edi, r14d       ; fd
.text:00000000000050A1                 call    safe_read
.text:00000000000050A6                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000050AA                 mov     r12, rax
.text:00000000000050AD                 jz      loc_5140
.text:00000000000050B3                 mov     rdi, [rsp+2068h+var_2068]
.text:00000000000050B7                 lea     rax, [r13+rax+0]
.text:00000000000050BC                 test    r12, r12
.text:00000000000050BF                 mov     [rdi], rax
.text:00000000000050C2                 jnz     loc_5038
.text:00000000000050C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: file_lines+3A↑j
.text:00000000000050D0                 mov     eax, 1
.text:00000000000050D5
.text:00000000000050D5 loc_50D5:                               ; CODE XREF: file_lines+1CC↓j
.text:00000000000050D5                                         ; file_lines+210↓j ...
.text:00000000000050D5                 mov     rdi, [rsp+2068h+var_40]
.text:00000000000050DD                 xor     rdi, fs:28h
.text:00000000000050E6                 jnz     loc_51C0
.text:00000000000050EC                 add     rsp, 2038h
.text:00000000000050F3                 pop     rbx
.text:00000000000050F4                 pop     rbp
.text:00000000000050F5                 pop     r12
.text:00000000000050F7                 pop     r13
.text:00000000000050F9                 pop     r14
.text:00000000000050FB                 pop     r15
.text:00000000000050FD                 retn
.text:00000000000050FD ; ---------------------------------------------------------------------------
.text:00000000000050FE                 align 20h
.text:0000000000005100
.text:0000000000005100 loc_5100:                               ; CODE XREF: file_lines+E5↑j
.text:0000000000005100                 lea     rsi, [r12-1]
.text:0000000000005105                 cmp     rsi, rdx
.text:0000000000005108                 jz      short loc_5116
.text:000000000000510A                 lea     rdi, [rax+1]
.text:000000000000510E                 sub     rsi, rdx
.text:0000000000005111                 call    xwrite_stdout_part_10
.text:0000000000005116
.text:0000000000005116 loc_5116:                               ; CODE XREF: file_lines+198↑j
.text:0000000000005116                 mov     rcx, [rsp+2068h+var_2050]
.text:000000000000511B                 mov     rsi, [rsp+2068h+var_2060]
.text:0000000000005120                 mov     edx, r14d
.text:0000000000005123                 xor     edi, edi
.text:0000000000005125                 sub     rcx, r12
.text:0000000000005128                 sub     rcx, r13
.text:000000000000512B                 call    dump_remainder
.text:0000000000005130                 mov     rbx, [rsp+2068h+var_2068]
.text:0000000000005134                 add     [rbx], rax
.text:0000000000005137                 mov     eax, 1
.text:000000000000513C                 jmp     short loc_50D5
.text:000000000000513C ; ---------------------------------------------------------------------------
.text:000000000000513E                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: file_lines+9C↑j
.text:0000000000005140                                         ; file_lines+13D↑j
.text:0000000000005140                 mov     rsi, [rsp+2068h+var_2060]
.text:0000000000005145                 mov     edi, 4
.text:000000000000514A                 call    quotearg_style
.text:000000000000514F                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:0000000000005156                 mov     edx, 5          ; category
.text:000000000000515B                 xor     edi, edi        ; domainname
.text:000000000000515D                 mov     rbp, rax
.text:0000000000005160                 call    _dcgettext
.text:0000000000005165                 mov     rbx, rax
.text:0000000000005168                 call    ___errno_location
.text:000000000000516D                 mov     esi, [rax]      ; errnum
.text:000000000000516F                 mov     rcx, rbp
.text:0000000000005172                 xor     eax, eax
.text:0000000000005174                 mov     rdx, rbx        ; format
.text:0000000000005177                 xor     edi, edi        ; status
.text:0000000000005179                 call    _error
.text:000000000000517E                 xor     eax, eax
.text:0000000000005180                 jmp     loc_50D5
.text:0000000000005185 ; ---------------------------------------------------------------------------
.text:0000000000005185
.text:0000000000005185 loc_5185:                               ; CODE XREF: file_lines+107↑j
.text:0000000000005185                 mov     rbx, [rsp+2068h+var_2060]
.text:000000000000518A                 mov     rsi, r13
.text:000000000000518D                 xor     edx, edx
.text:000000000000518F                 mov     edi, r14d
.text:0000000000005192                 mov     rcx, rbx
.text:0000000000005195                 call    xlseek
.text:000000000000519A                 mov     rcx, [rsp+2068h+var_2050]
.text:000000000000519F                 mov     edx, r14d
.text:00000000000051A2                 mov     rsi, rbx
.text:00000000000051A5                 xor     edi, edi
.text:00000000000051A7                 call    dump_remainder
.text:00000000000051AC                 add     r13, rax
.text:00000000000051AF                 mov     rax, [rsp+2068h+var_2068]
.text:00000000000051B3                 mov     [rax], r13
.text:00000000000051B6                 mov     eax, 1
.text:00000000000051BB                 jmp     loc_50D5
.text:00000000000051C0 ; ---------------------------------------------------------------------------
.text:00000000000051C0
.text:00000000000051C0 loc_51C0:                               ; CODE XREF: file_lines+176↑j
.text:00000000000051C0                 call    ___stack_chk_fail
.text:00000000000051C0 ; } // starts at 4F70
.text:00000000000051C0 file_lines      endp
.text:00000000000051C0
.text:00000000000051C0 ; ---------------------------------------------------------------------------
.text:00000000000051C5                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0
.text:00000000000051D0 check_fspec     proc near               ; CODE XREF: main+2110↑p
.text:00000000000051D0                                         ; main+24A5↑p
.text:00000000000051D0
.text:00000000000051D0 var_98          = qword ptr -98h
.text:00000000000051D0 var_70          = qword ptr -70h
.text:00000000000051D0 var_68          = dword ptr -68h
.text:00000000000051D0 var_30          = qword ptr -30h
.text:00000000000051D0
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 push    r14
.text:00000000000051D2                 push    r13
.text:00000000000051D4                 push    r12
.text:00000000000051D6                 push    rbp
.text:00000000000051D7                 push    rbx
.text:00000000000051D8                 sub     rsp, 0A0h
.text:00000000000051DF                 mov     rax, fs:28h
.text:00000000000051E8                 mov     [rsp+0C8h+var_30], rax
.text:00000000000051F0                 xor     eax, eax
.text:00000000000051F2                 cmp     dword ptr [rdi+38h], 0FFFFFFFFh
.text:00000000000051F6                 jnz     short loc_5220
.text:00000000000051F8
.text:00000000000051F8 loc_51F8:                               ; CODE XREF: check_fspec+BC↓j
.text:00000000000051F8                                         ; check_fspec+D4↓j ...
.text:00000000000051F8                 mov     rax, [rsp+0C8h+var_30]
.text:0000000000005200                 xor     rax, fs:28h
.text:0000000000005209                 jnz     loc_5392
.text:000000000000520F                 add     rsp, 0A0h
.text:0000000000005216                 pop     rbx
.text:0000000000005217                 pop     rbp
.text:0000000000005218                 pop     r12
.text:000000000000521A                 pop     r13
.text:000000000000521C                 pop     r14
.text:000000000000521E                 retn
.text:000000000000521E ; ---------------------------------------------------------------------------
.text:000000000000521F                 align 20h
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: check_fspec+26↑j
.text:0000000000005220                 mov     rbx, rdi
.text:0000000000005223                 mov     rdi, [rdi]
.text:0000000000005226                 mov     r12, rsi
.text:0000000000005229                 call    pretty_name_isra_7
.text:000000000000522E                 mov     esi, [rbx+38h]  ; fildes
.text:0000000000005231                 mov     rdx, rsp        ; stat_buf
.text:0000000000005234                 mov     edi, 1          ; ver
.text:0000000000005239                 mov     r13, rax
.text:000000000000523C                 call    ___fxstat
.text:0000000000005241                 test    eax, eax
.text:0000000000005243                 mov     ebp, eax
.text:0000000000005245                 jnz     loc_52E0
.text:000000000000524B                 mov     eax, [rbx+30h]
.text:000000000000524E                 and     eax, 0F000h
.text:0000000000005253                 cmp     eax, 8000h
.text:0000000000005258                 jz      loc_5308
.text:000000000000525E
.text:000000000000525E loc_525E:                               ; CODE XREF: check_fspec+143↓j
.text:000000000000525E                                         ; check_fspec+152↓j ...
.text:000000000000525E                 cmp     cs:print_headers, 0
.text:0000000000005265                 jz      short loc_5271
.text:0000000000005267                 xor     ebp, ebp
.text:0000000000005269                 cmp     [r12], rbx
.text:000000000000526D                 setnz   bpl
.text:0000000000005271
.text:0000000000005271 loc_5271:                               ; CODE XREF: check_fspec+95↑j
.text:0000000000005271                 mov     edx, [rbx+38h]
.text:0000000000005274                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000527B                 mov     rsi, r13
.text:000000000000527E                 mov     edi, ebp
.text:0000000000005280                 call    dump_remainder
.text:0000000000005285                 add     [rbx+8], rax
.text:0000000000005289                 test    rax, rax
.text:000000000000528C                 jz      loc_51F8
.text:0000000000005292                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005299                 mov     [r12], rbx
.text:000000000000529D                 call    _fflush_unlocked
.text:00000000000052A2                 test    eax, eax
.text:00000000000052A4                 jz      loc_51F8
.text:00000000000052AA                 lea     rsi, aWriteError ; "write error"
.text:00000000000052B1                 mov     edx, 5          ; category
.text:00000000000052B6                 xor     edi, edi        ; domainname
.text:00000000000052B8                 call    _dcgettext
.text:00000000000052BD                 mov     rbx, rax
.text:00000000000052C0                 call    ___errno_location
.text:00000000000052C5                 mov     esi, [rax]      ; errnum
.text:00000000000052C7                 mov     rdx, rbx        ; format
.text:00000000000052CA                 mov     edi, 1          ; status
.text:00000000000052CF                 xor     eax, eax
.text:00000000000052D1                 call    _error
.text:00000000000052D6                 db      2Eh
.text:00000000000052D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: check_fspec+75↑j
.text:00000000000052E0                 call    ___errno_location
.text:00000000000052E5                 mov     eax, [rax]
.text:00000000000052E7                 mov     edi, [rbx+38h]
.text:00000000000052EA                 mov     rsi, r13
.text:00000000000052ED                 mov     [rbx+3Ch], eax
.text:00000000000052F0                 call    close_fd
.text:00000000000052F5                 mov     dword ptr [rbx+38h], 0FFFFFFFFh
.text:00000000000052FC                 jmp     loc_51F8
.text:00000000000052FC ; ---------------------------------------------------------------------------
.text:0000000000005301                 align 8
.text:0000000000005308
.text:0000000000005308 loc_5308:                               ; CODE XREF: check_fspec+88↑j
.text:0000000000005308                 mov     rax, [rbx+8]
.text:000000000000530C                 cmp     [rsp+0C8h+var_98], rax
.text:0000000000005311                 jl      short loc_5340
.text:0000000000005313                 jnz     loc_525E
.text:0000000000005319                 mov     rax, [rbx+10h]
.text:000000000000531D                 cmp     [rsp+0C8h+var_70], rax
.text:0000000000005322                 jnz     loc_525E
.text:0000000000005328                 mov     eax, [rsp+0C8h+var_68]
.text:000000000000532C                 cmp     [rbx+18h], eax
.text:000000000000532F                 jnz     loc_525E
.text:0000000000005335                 jmp     loc_51F8
.text:0000000000005335 ; ---------------------------------------------------------------------------
.text:000000000000533A                 align 20h
.text:0000000000005340
.text:0000000000005340 loc_5340:                               ; CODE XREF: check_fspec+141↑j
.text:0000000000005340                 mov     rdx, r13
.text:0000000000005343                 mov     esi, 3
.text:0000000000005348                 xor     edi, edi
.text:000000000000534A                 call    quotearg_n_style_colon
.text:000000000000534F                 lea     rsi, aSFileTruncated ; "%s: file truncated"
.text:0000000000005356                 mov     r14, rax
.text:0000000000005359                 mov     edx, 5          ; category
.text:000000000000535E                 xor     edi, edi        ; domainname
.text:0000000000005360                 call    _dcgettext
.text:0000000000005365                 mov     rcx, r14
.text:0000000000005368                 mov     rdx, rax        ; format
.text:000000000000536B                 xor     esi, esi        ; errnum
.text:000000000000536D                 xor     edi, edi        ; status
.text:000000000000536F                 xor     eax, eax
.text:0000000000005371                 call    _error
.text:0000000000005376                 mov     edi, [rbx+38h]
.text:0000000000005379                 mov     rcx, r13
.text:000000000000537C                 xor     edx, edx
.text:000000000000537E                 xor     esi, esi
.text:0000000000005380                 call    xlseek
.text:0000000000005385                 mov     qword ptr [rbx+8], 0
.text:000000000000538D                 jmp     loc_525E
.text:0000000000005392 ; ---------------------------------------------------------------------------
.text:0000000000005392
.text:0000000000005392 loc_5392:                               ; CODE XREF: check_fspec+39↑j
.text:0000000000005392                 call    ___stack_chk_fail
.text:0000000000005392 ; } // starts at 51D0
.text:0000000000005392 check_fspec     endp
.text:0000000000005392
.text:0000000000005392 ; ---------------------------------------------------------------------------
.text:0000000000005397                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0
.text:00000000000053A0 fremote         proc near               ; CODE XREF: main+EA6↑p
.text:00000000000053A0                                         ; recheck+22E↓p
.text:00000000000053A0
.text:00000000000053A0 var_98          = qword ptr -98h
.text:00000000000053A0 var_20          = qword ptr -20h
.text:00000000000053A0
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 push    r12
.text:00000000000053A2                 push    rbp
.text:00000000000053A3                 mov     rbp, rsi
.text:00000000000053A6                 push    rbx
.text:00000000000053A7                 add     rsp, 0FFFFFFFFFFFFFF80h
.text:00000000000053AB                 mov     rsi, rsp        ; buf
.text:00000000000053AE                 mov     rax, fs:28h
.text:00000000000053B7                 mov     [rsp+98h+var_20], rax
.text:00000000000053BC                 xor     eax, eax
.text:00000000000053BE                 call    _fstatfs
.text:00000000000053C3                 test    eax, eax
.text:00000000000053C5                 jz      short loc_5400
.text:00000000000053C7                 call    ___errno_location
.text:00000000000053CC                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000053CF                 mov     r12, rax
.text:00000000000053D2                 mov     ebx, 1
.text:00000000000053D7                 jnz     loc_5470
.text:00000000000053DD
.text:00000000000053DD loc_53DD:                               ; CODE XREF: fremote+C2↓j
.text:00000000000053DD                                         ; fremote+106↓j ...
.text:00000000000053DD                 mov     rcx, [rsp+98h+var_20]
.text:00000000000053E2                 xor     rcx, fs:28h
.text:00000000000053EB                 mov     eax, ebx
.text:00000000000053ED                 jnz     loc_5A87
.text:00000000000053F3                 sub     rsp, 0FFFFFFFFFFFFFF80h
.text:00000000000053F7                 pop     rbx
.text:00000000000053F8                 pop     rbp
.text:00000000000053F9                 pop     r12
.text:00000000000053FB                 retn
.text:00000000000053FB ; ---------------------------------------------------------------------------
.text:00000000000053FC                 align 20h
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: fremote+25↑j
.text:0000000000005400                 mov     rax, [rsp+98h+var_98]
.text:0000000000005404                 cmp     rax, 19800202h
.text:000000000000540A                 jz      short loc_5460
.text:000000000000540C                 jg      loc_54B0
.text:0000000000005412                 cmp     rax, 9660h
.text:0000000000005418                 jz      short loc_5460
.text:000000000000541A                 jg      loc_5560
.text:0000000000005420                 cmp     rax, 3434h
.text:0000000000005426                 jz      short loc_5460
.text:0000000000005428                 jg      loc_55B8
.text:000000000000542E                 cmp     rax, 137Dh
.text:0000000000005434                 jz      short loc_5460
.text:0000000000005436                 jle     loc_57F0
.text:000000000000543C                 cmp     rax, 1CD1h
.text:0000000000005442                 jz      short loc_5460
.text:0000000000005444                 jg      loc_58C0
.text:000000000000544A                 cmp     rax, 137Fh
.text:0000000000005450                 jz      short loc_5460
.text:0000000000005452                 cmp     rax, 138Fh
.text:0000000000005458                 jnz     loc_5690
.text:000000000000545E                 xchg    ax, ax
.text:0000000000005460
.text:0000000000005460 loc_5460:                               ; CODE XREF: fremote+6A↑j
.text:0000000000005460                                         ; fremote+78↑j ...
.text:0000000000005460                 xor     ebx, ebx
.text:0000000000005462                 jmp     loc_53DD
.text:0000000000005462 ; ---------------------------------------------------------------------------
.text:0000000000005467                 align 10h
.text:0000000000005470
.text:0000000000005470 loc_5470:                               ; CODE XREF: fremote+37↑j
.text:0000000000005470                 mov     rsi, rbp
.text:0000000000005473                 mov     edi, 4
.text:0000000000005478                 call    quotearg_style
.text:000000000000547D                 lea     rsi, aCannotDetermin ; "cannot determine location of %s. revert"...
.text:0000000000005484                 xor     edi, edi        ; domainname
.text:0000000000005486                 mov     edx, 5          ; category
.text:000000000000548B                 mov     rbp, rax
.text:000000000000548E                 call    _dcgettext
.text:0000000000005493                 mov     esi, [r12]      ; errnum
.text:0000000000005497                 mov     rdx, rax        ; format
.text:000000000000549A                 mov     rcx, rbp
.text:000000000000549D                 xor     edi, edi        ; status
.text:000000000000549F                 xor     eax, eax
.text:00000000000054A1                 call    _error
.text:00000000000054A6                 jmp     loc_53DD
.text:00000000000054A6 ; ---------------------------------------------------------------------------
.text:00000000000054AB                 align 10h
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: fremote+6C↑j
.text:00000000000054B0                 cmp     rax, 6165676Ch
.text:00000000000054B6                 jz      short loc_5460
.text:00000000000054B8                 jle     short loc_5508
.text:00000000000054BA                 cmp     rax, 73727279h
.text:00000000000054C0                 jz      short loc_5460
.text:00000000000054C2                 jg      loc_5600
.text:00000000000054C8                 cmp     rax, 64646178h
.text:00000000000054CE                 jz      short loc_5460
.text:00000000000054D0                 jg      loc_56E0
.text:00000000000054D6                 cmp     rax, 62656572h
.text:00000000000054DC                 jz      short loc_5460
.text:00000000000054DE                 jg      loc_5880
.text:00000000000054E4                 cmp     rax, 62646576h
.text:00000000000054EA                 jz      loc_5460
.text:00000000000054F0                 cmp     rax, 62656570h
.text:00000000000054F6                 jnz     loc_5690
.text:00000000000054FC                 xor     ebx, ebx
.text:00000000000054FE                 jmp     loc_53DD
.text:00000000000054FE ; ---------------------------------------------------------------------------
.text:0000000000005503                 align 8
.text:0000000000005508
.text:0000000000005508 loc_5508:                               ; CODE XREF: fremote+118↑j
.text:0000000000005508                 cmp     rax, 45584653h
.text:000000000000550E                 jz      loc_5460
.text:0000000000005514                 jg      loc_5650
.text:000000000000551A                 cmp     rax, 2FC12FC1h
.text:0000000000005520                 jz      loc_5460
.text:0000000000005526                 jle     loc_5748
.text:000000000000552C                 cmp     rax, 42494E4Dh
.text:0000000000005532                 jz      loc_5460
.text:0000000000005538                 jg      loc_59B0
.text:000000000000553E                 cmp     rax, 3153464Ah
.text:0000000000005544                 jz      loc_5460
.text:000000000000554A                 cmp     rax, 42465331h
.text:0000000000005550                 jnz     loc_5690
.text:0000000000005556                 xor     ebx, ebx
.text:0000000000005558                 jmp     loc_53DD
.text:0000000000005558 ; ---------------------------------------------------------------------------
.text:000000000000555D                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: fremote+7A↑j
.text:0000000000005560                 cmp     rax, 0C0FFEEh
.text:0000000000005566                 jz      loc_5460
.text:000000000000556C                 jg      loc_56A0
.text:0000000000005572                 cmp     rax, 0EF51h
.text:0000000000005578                 jz      loc_5460
.text:000000000000557E                 jle     loc_5850
.text:0000000000005584                 cmp     rax, 11954h
.text:000000000000558A                 jz      loc_5460
.text:0000000000005590                 jg      loc_5908
.text:0000000000005596                 cmp     rax, 0EF53h
.text:000000000000559C                 jz      loc_5460
.text:00000000000055A2                 cmp     rax, 0F15Fh
.text:00000000000055A8                 jnz     loc_5690
.text:00000000000055AE                 xor     ebx, ebx
.text:00000000000055B0                 jmp     loc_53DD
.text:00000000000055B0 ; ---------------------------------------------------------------------------
.text:00000000000055B5                 align 8
.text:00000000000055B8
.text:00000000000055B8 loc_55B8:                               ; CODE XREF: fremote+88↑j
.text:00000000000055B8                 cmp     rax, 4858h
.text:00000000000055BE                 jz      loc_5460
.text:00000000000055C4                 jg      loc_5818
.text:00000000000055CA                 cmp     rax, 4006h
.text:00000000000055D0                 jz      loc_5460
.text:00000000000055D6                 jg      loc_58A0
.text:00000000000055DC                 cmp     rax, 4000h
.text:00000000000055E2                 jz      loc_5460
.text:00000000000055E8                 cmp     rax, 4004h
.text:00000000000055EE                 jnz     loc_5690
.text:00000000000055F4                 xor     ebx, ebx
.text:00000000000055F6                 jmp     loc_53DD
.text:00000000000055F6 ; ---------------------------------------------------------------------------
.text:00000000000055FB                 align 20h
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: fremote+122↑j
.text:0000000000005600                 mov     edx, 0C97E8168h
.text:0000000000005605                 cmp     rax, rdx
.text:0000000000005608                 jz      loc_5460
.text:000000000000560E                 jg      loc_57A8
.text:0000000000005614                 sub     rdx, 385B192Ah
.text:000000000000561B                 cmp     rax, rdx
.text:000000000000561E                 jz      loc_5460
.text:0000000000005624                 cmp     rax, rdx
.text:0000000000005627                 jg      loc_58E0
.text:000000000000562D                 cmp     rax, 74726163h
.text:0000000000005633                 jz      loc_5460
.text:0000000000005639                 sub     rdx, 0B9F0F48h
.text:0000000000005640                 cmp     rax, rdx
.text:0000000000005643                 jnz     short loc_5690
.text:0000000000005645                 xor     ebx, ebx
.text:0000000000005647                 jmp     loc_53DD
.text:0000000000005647 ; ---------------------------------------------------------------------------
.text:000000000000564C                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: fremote+174↑j
.text:0000000000005650                 cmp     rax, 54190100h
.text:0000000000005656                 jz      loc_5460
.text:000000000000565C                 jg      loc_5710
.text:0000000000005662                 cmp     rax, 53464846h
.text:0000000000005668                 jz      loc_5460
.text:000000000000566E                 jg      loc_5950
.text:0000000000005674                 cmp     rax, 52654973h
.text:000000000000567A                 jz      loc_5460
.text:0000000000005680                 cmp     rax, 5346314Dh
.text:0000000000005686                 jz      loc_5460
.text:000000000000568C                 nop     dword ptr [rax+00h]
.text:0000000000005690
.text:0000000000005690 loc_5690:                               ; CODE XREF: fremote+B8↑j
.text:0000000000005690                                         ; fremote+156↑j ...
.text:0000000000005690                 mov     ebx, 1
.text:0000000000005695                 jmp     loc_53DD
.text:0000000000005695 ; ---------------------------------------------------------------------------
.text:000000000000569A                 align 20h
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: fremote+1CC↑j
.text:00000000000056A0                 cmp     rax, 7655821h
.text:00000000000056A6                 jz      loc_5460
.text:00000000000056AC                 jle     loc_5770
.text:00000000000056B2                 cmp     rax, 11307854h
.text:00000000000056B8                 jz      loc_5460
.text:00000000000056BE                 jg      loc_59F0
.text:00000000000056C4                 cmp     rax, 9041934h
.text:00000000000056CA                 jz      loc_5460
.text:00000000000056D0                 cmp     rax, 0BAD1DEAh
.text:00000000000056D6                 jnz     short loc_5690
.text:00000000000056D8                 xor     ebx, ebx
.text:00000000000056DA                 jmp     loc_53DD
.text:00000000000056DA ; ---------------------------------------------------------------------------
.text:00000000000056DF                 align 20h
.text:00000000000056E0
.text:00000000000056E0 loc_56E0:                               ; CODE XREF: fremote+130↑j
.text:00000000000056E0                 cmp     rax, 6E736673h
.text:00000000000056E6                 jz      loc_5460
.text:00000000000056EC                 jg      loc_5970
.text:00000000000056F2                 cmp     rax, 67596969h
.text:00000000000056F8                 jz      loc_5460
.text:00000000000056FE                 cmp     rax, 68191122h
.text:0000000000005704                 jnz     short loc_5690
.text:0000000000005706                 xor     ebx, ebx
.text:0000000000005708                 jmp     loc_53DD
.text:0000000000005708 ; ---------------------------------------------------------------------------
.text:000000000000570D                 align 10h
.text:0000000000005710
.text:0000000000005710 loc_5710:                               ; CODE XREF: fremote+2BC↑j
.text:0000000000005710                 cmp     rax, 58465342h
.text:0000000000005716                 jz      loc_5460
.text:000000000000571C                 jg      loc_59D0
.text:0000000000005722                 cmp     rax, 565A4653h
.text:0000000000005728                 jz      loc_5460
.text:000000000000572E                 cmp     rax, 58295829h
.text:0000000000005734                 jnz     loc_5690
.text:000000000000573A                 xor     ebx, ebx
.text:000000000000573C                 jmp     loc_53DD
.text:000000000000573C ; ---------------------------------------------------------------------------
.text:0000000000005741                 align 8
.text:0000000000005748
.text:0000000000005748 loc_5748:                               ; CODE XREF: fremote+186↑j
.text:0000000000005748                 cmp     rax, 24051905h
.text:000000000000574E                 jz      loc_5460
.text:0000000000005754                 jg      loc_5930
.text:000000000000575A                 cmp     rax, 1BADFACEh
.text:0000000000005760                 jnz     loc_5690
.text:0000000000005766                 xor     ebx, ebx
.text:0000000000005768                 jmp     loc_53DD
.text:0000000000005768 ; ---------------------------------------------------------------------------
.text:000000000000576D                 align 10h
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: fremote+30C↑j
.text:0000000000005770                 cmp     rax, 12FD16Dh
.text:0000000000005776                 jz      loc_5460
.text:000000000000577C                 jg      loc_5A70
.text:0000000000005782                 cmp     rax, 1021994h
.text:0000000000005788                 jz      loc_5460
.text:000000000000578E                 cmp     rax, 1021997h
.text:0000000000005794                 jnz     loc_5690
.text:000000000000579A                 xor     ebx, ebx
.text:000000000000579C                 jmp     loc_53DD
.text:000000000000579C ; ---------------------------------------------------------------------------
.text:00000000000057A1                 align 8
.text:00000000000057A8
.text:00000000000057A8 loc_57A8:                               ; CODE XREF: fremote+26E↑j
.text:00000000000057A8                 mov     edx, 0F2F52010h
.text:00000000000057AD                 cmp     rax, rdx
.text:00000000000057B0                 jz      loc_5460
.text:00000000000057B6                 cmp     rax, rdx
.text:00000000000057B9                 jg      loc_5A28
.text:00000000000057BF                 sub     rdx, 27F6D5FFh
.text:00000000000057C6                 cmp     rax, rdx
.text:00000000000057C9                 jz      loc_5460
.text:00000000000057CF                 add     rdx, 136037D3h
.text:00000000000057D6                 cmp     rax, rdx
.text:00000000000057D9                 jnz     loc_5690
.text:00000000000057DF                 xor     ebx, ebx
.text:00000000000057E1                 jmp     loc_53DD
.text:00000000000057E1 ; ---------------------------------------------------------------------------
.text:00000000000057E6                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: fremote+96↑j
.text:00000000000057F0                 cmp     rax, 187h
.text:00000000000057F6                 jz      loc_5460
.text:00000000000057FC                 jg      loc_5990
.text:0000000000005802                 cmp     rax, 2Fh ; '/'
.text:0000000000005806                 jnz     loc_5690
.text:000000000000580C                 xor     ebx, ebx
.text:000000000000580E                 jmp     loc_53DD
.text:000000000000580E ; ---------------------------------------------------------------------------
.text:0000000000005813                 align 8
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: fremote+224↑j
.text:0000000000005818                 cmp     rax, 5DF5h
.text:000000000000581E                 jz      loc_5460
.text:0000000000005824                 jg      loc_5A50
.text:000000000000582A                 cmp     rax, 4D44h
.text:0000000000005830                 jz      loc_5460
.text:0000000000005836                 cmp     rax, 4D5Ah
.text:000000000000583C                 jnz     loc_5690
.text:0000000000005842                 xor     ebx, ebx
.text:0000000000005844                 jmp     loc_53DD
.text:0000000000005844 ; ---------------------------------------------------------------------------
.text:0000000000005849                 align 10h
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: fremote+1DE↑j
.text:0000000000005850                 cmp     rax, 0ADF5h
.text:0000000000005856                 jz      loc_5460
.text:000000000000585C                 jg      loc_5A10
.text:0000000000005862                 sub     rax, 9FA0h
.text:0000000000005868                 cmp     rax, 2
.text:000000000000586C                 ja      loc_5690
.text:0000000000005872                 xor     ebx, ebx
.text:0000000000005874                 jmp     loc_53DD
.text:0000000000005874 ; ---------------------------------------------------------------------------
.text:0000000000005879                 align 20h
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: fremote+13E↑j
.text:0000000000005880                 cmp     rax, 63677270h
.text:0000000000005886                 jz      loc_5460
.text:000000000000588C                 cmp     rax, 64626720h
.text:0000000000005892                 jnz     loc_5690
.text:0000000000005898                 xor     ebx, ebx
.text:000000000000589A                 jmp     loc_53DD
.text:000000000000589A ; ---------------------------------------------------------------------------
.text:000000000000589F                 align 20h
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: fremote+236↑j
.text:00000000000058A0                 cmp     rax, 4244h
.text:00000000000058A6                 jz      loc_5460
.text:00000000000058AC                 cmp     rax, 482Bh
.text:00000000000058B2                 jnz     loc_5690
.text:00000000000058B8                 xor     ebx, ebx
.text:00000000000058BA                 jmp     loc_53DD
.text:00000000000058BA ; ---------------------------------------------------------------------------
.text:00000000000058BF                 align 20h
.text:00000000000058C0
.text:00000000000058C0 loc_58C0:                               ; CODE XREF: fremote+A4↑j
.text:00000000000058C0                 cmp     rax, 2468h
.text:00000000000058C6                 jz      loc_5460
.text:00000000000058CC                 cmp     rax, 2478h
.text:00000000000058D2                 jnz     loc_5690
.text:00000000000058D8                 xor     ebx, ebx
.text:00000000000058DA                 jmp     loc_53DD
.text:00000000000058DA ; ---------------------------------------------------------------------------
.text:00000000000058DF                 align 20h
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: fremote+287↑j
.text:00000000000058E0                 mov     edx, 958458F6h
.text:00000000000058E5                 cmp     rax, rdx
.text:00000000000058E8                 jz      loc_5460
.text:00000000000058EE                 add     rdx, 1635C07Eh
.text:00000000000058F5                 cmp     rax, rdx
.text:00000000000058F8                 jnz     loc_5690
.text:00000000000058FE                 xor     ebx, ebx
.text:0000000000005900                 jmp     loc_53DD
.text:0000000000005900 ; ---------------------------------------------------------------------------
.text:0000000000005905                 align 8
.text:0000000000005908
.text:0000000000005908 loc_5908:                               ; CODE XREF: fremote+1F0↑j
.text:0000000000005908                 cmp     rax, 27E0EBh
.text:000000000000590E                 jz      loc_5460
.text:0000000000005914                 cmp     rax, 414A53h
.text:000000000000591A                 jnz     loc_5690
.text:0000000000005920                 xor     ebx, ebx
.text:0000000000005922                 jmp     loc_53DD
.text:0000000000005922 ; ---------------------------------------------------------------------------
.text:0000000000005927                 align 10h
.text:0000000000005930
.text:0000000000005930 loc_5930:                               ; CODE XREF: fremote+3B4↑j
.text:0000000000005930                 cmp     rax, 28CD3D45h
.text:0000000000005936                 jz      loc_5460
.text:000000000000593C                 cmp     rax, 2BAD1DEAh
.text:0000000000005942                 jnz     loc_5690
.text:0000000000005948                 xor     ebx, ebx
.text:000000000000594A                 jmp     loc_53DD
.text:000000000000594A ; ---------------------------------------------------------------------------
.text:000000000000594F                 align 10h
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: fremote+2CE↑j
.text:0000000000005950                 cmp     rax, 5346544Eh
.text:0000000000005956                 jz      loc_5460
.text:000000000000595C                 cmp     rax, 534F434Bh
.text:0000000000005962                 jnz     loc_5690
.text:0000000000005968                 xor     ebx, ebx
.text:000000000000596A                 jmp     loc_53DD
.text:000000000000596A ; ---------------------------------------------------------------------------
.text:000000000000596F                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: fremote+34C↑j
.text:0000000000005970                 cmp     rax, 73636673h
.text:0000000000005976                 jz      loc_5460
.text:000000000000597C                 cmp     rax, 73717368h
.text:0000000000005982                 jnz     loc_5690
.text:0000000000005988                 xor     ebx, ebx
.text:000000000000598A                 jmp     loc_53DD
.text:000000000000598A ; ---------------------------------------------------------------------------
.text:000000000000598F                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: fremote+45C↑j
.text:0000000000005990                 cmp     rax, 7C0h
.text:0000000000005996                 jz      loc_5460
.text:000000000000599C                 cmp     rax, 1373h
.text:00000000000059A2                 jnz     loc_5690
.text:00000000000059A8                 xor     ebx, ebx
.text:00000000000059AA                 jmp     loc_53DD
.text:00000000000059AA ; ---------------------------------------------------------------------------
.text:00000000000059AF                 align 10h
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: fremote+198↑j
.text:00000000000059B0                 cmp     rax, 43415D53h
.text:00000000000059B6                 jz      loc_5460
.text:00000000000059BC                 cmp     rax, 453DCD28h
.text:00000000000059C2                 jnz     loc_5690
.text:00000000000059C8                 xor     ebx, ebx
.text:00000000000059CA                 jmp     loc_53DD
.text:00000000000059CA ; ---------------------------------------------------------------------------
.text:00000000000059CF                 align 10h
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: fremote+37C↑j
.text:00000000000059D0                 cmp     rax, 5A3C69F0h
.text:00000000000059D6                 jz      loc_5460
.text:00000000000059DC                 cmp     rax, 5DCA2DF5h
.text:00000000000059E2                 jnz     loc_5690
.text:00000000000059E8                 xor     ebx, ebx
.text:00000000000059EA                 jmp     loc_53DD
.text:00000000000059EA ; ---------------------------------------------------------------------------
.text:00000000000059EF                 align 10h
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: fremote+31E↑j
.text:00000000000059F0                 cmp     rax, 13661366h
.text:00000000000059F6                 jz      loc_5460
.text:00000000000059FC                 cmp     rax, 15013346h
.text:0000000000005A02                 jnz     loc_5690
.text:0000000000005A08                 xor     ebx, ebx
.text:0000000000005A0A                 jmp     loc_53DD
.text:0000000000005A0A ; ---------------------------------------------------------------------------
.text:0000000000005A0F                 align 10h
.text:0000000000005A10
.text:0000000000005A10 loc_5A10:                               ; CODE XREF: fremote+4BC↑j
.text:0000000000005A10                 cmp     rax, 0ADFFh
.text:0000000000005A16                 jnz     loc_5690
.text:0000000000005A1C                 xor     ebx, ebx
.text:0000000000005A1E                 jmp     loc_53DD
.text:0000000000005A1E ; ---------------------------------------------------------------------------
.text:0000000000005A23                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: fremote+419↑j
.text:0000000000005A28                 mov     edx, 0F97CFF8Ch
.text:0000000000005A2D                 cmp     rax, rdx
.text:0000000000005A30                 jz      loc_5460
.text:0000000000005A36                 add     rdx, 18E8BDh
.text:0000000000005A3D                 cmp     rax, rdx
.text:0000000000005A40                 jnz     loc_5690
.text:0000000000005A46                 xor     ebx, ebx
.text:0000000000005A48                 jmp     loc_53DD
.text:0000000000005A48 ; ---------------------------------------------------------------------------
.text:0000000000005A4D                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: fremote+484↑j
.text:0000000000005A50                 cmp     rax, 7275h
.text:0000000000005A56                 jz      loc_5460
.text:0000000000005A5C                 cmp     rax, 72B6h
.text:0000000000005A62                 jnz     loc_5690
.text:0000000000005A68                 xor     ebx, ebx
.text:0000000000005A6A                 jmp     loc_53DD
.text:0000000000005A6A ; ---------------------------------------------------------------------------
.text:0000000000005A6F                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: fremote+3DC↑j
.text:0000000000005A70                 sub     rax, 12FF7B4h
.text:0000000000005A76                 cmp     rax, 3
.text:0000000000005A7A                 ja      loc_5690
.text:0000000000005A80                 xor     ebx, ebx
.text:0000000000005A82                 jmp     loc_53DD
.text:0000000000005A87 ; ---------------------------------------------------------------------------
.text:0000000000005A87
.text:0000000000005A87 loc_5A87:                               ; CODE XREF: fremote+4D↑j
.text:0000000000005A87                 call    ___stack_chk_fail
.text:0000000000005A87 ; } // starts at 53A0
.text:0000000000005A87 fremote         endp
.text:0000000000005A87
.text:0000000000005A87 ; ---------------------------------------------------------------------------
.text:0000000000005A8C                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90
.text:0000000000005A90 recheck         proc near               ; CODE XREF: main+171A↑p
.text:0000000000005A90                                         ; main+191C↑p ...
.text:0000000000005A90
.text:0000000000005A90 var_E1          = byte ptr -0E1h
.text:0000000000005A90 var_E0          = qword ptr -0E0h
.text:0000000000005A90 stat_buf        = stat ptr -0D8h
.text:0000000000005A90 var_40          = qword ptr -40h
.text:0000000000005A90
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 push    r15
.text:0000000000005A92                 push    r14
.text:0000000000005A94                 mov     ecx, 2
.text:0000000000005A99                 push    r13
.text:0000000000005A9B                 push    r12
.text:0000000000005A9D                 mov     r13d, esi
.text:0000000000005AA0                 push    rbp
.text:0000000000005AA1                 push    rbx
.text:0000000000005AA2                 mov     rbx, rdi
.text:0000000000005AA5                 sub     rsp, 0B8h
.text:0000000000005AAC                 mov     r14d, [rbx+3Ch]
.text:0000000000005AB0                 mov     rax, fs:28h
.text:0000000000005AB9                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005AC1                 xor     eax, eax
.text:0000000000005AC3                 mov     rax, [rdi]
.text:0000000000005AC6                 lea     rdi, s2+1       ; "-"
.text:0000000000005ACD                 mov     rsi, rax
.text:0000000000005AD0                 repe cmpsb
.text:0000000000005AD2                 movzx   ecx, byte ptr [rbx+36h]
.text:0000000000005AD6                 setnbe  bpl
.text:0000000000005ADA                 sbb     bpl, 0
.text:0000000000005ADE                 movsx   ebp, bpl
.text:0000000000005AE2                 test    ebp, ebp
.text:0000000000005AE4                 mov     [rsp+0E8h+var_E1], cl
.text:0000000000005AE8                 jz      loc_5C00
.text:0000000000005AEE                 xor     esi, esi
.text:0000000000005AF0                 test    r13b, r13b
.text:0000000000005AF3                 mov     rdi, rax
.text:0000000000005AF6                 setz    sil
.text:0000000000005AFA                 xor     eax, eax
.text:0000000000005AFC                 shl     esi, 0Bh
.text:0000000000005AFF                 call    open_safer
.text:0000000000005B04                 mov     r12d, eax
.text:0000000000005B07                 mov     eax, [rbx+3Ch]
.text:0000000000005B0A
.text:0000000000005B0A loc_5B0A:                               ; CODE XREF: recheck+176↓j
.text:0000000000005B0A                 cmp     dword ptr [rbx+38h], 0FFFFFFFFh
.text:0000000000005B0E                 setz    dl
.text:0000000000005B11                 test    eax, eax
.text:0000000000005B13                 setz    al
.text:0000000000005B16                 cmp     dl, al
.text:0000000000005B18                 jz      loc_60BB
.text:0000000000005B1E                 movzx   r15d, cs:reopen_inaccessible_files
.text:0000000000005B26                 movzx   eax, cs:disable_inotify
.text:0000000000005B2D                 test    r15b, r15b
.text:0000000000005B30                 jnz     loc_5C10
.text:0000000000005B36                 test    al, al
.text:0000000000005B38                 mov     byte ptr [rbx+36h], 1
.text:0000000000005B3C                 jz      loc_5EE8
.text:0000000000005B42
.text:0000000000005B42 loc_5B42:                               ; CODE XREF: recheck+46F↓j
.text:0000000000005B42                                         ; recheck+483↓j
.text:0000000000005B42                 cmp     r12d, 0FFFFFFFFh
.text:0000000000005B46                 jnz     loc_5F70
.text:0000000000005B4C
.text:0000000000005B4C loc_5B4C:                               ; CODE XREF: recheck+1AD↓j
.text:0000000000005B4C                                         ; recheck+5DC↓j ...
.text:0000000000005B4C                 movzx   r15d, byte ptr [rbx+36h]
.text:0000000000005B51                 mov     rbp, [rbx]
.text:0000000000005B54                 call    ___errno_location
.text:0000000000005B59                 mov     r13, rax
.text:0000000000005B5C                 mov     eax, [rax]
.text:0000000000005B5E                 test    r15b, r15b
.text:0000000000005B61                 mov     [rbx+3Ch], eax
.text:0000000000005B64                 jz      loc_5DB9
.text:0000000000005B6A                 cmp     [r13+0], r14d
.text:0000000000005B6E                 jz      short loc_5BA1
.text:0000000000005B70                 mov     rdi, rbp
.text:0000000000005B73                 call    pretty_name_isra_7
.text:0000000000005B78                 mov     esi, 3
.text:0000000000005B7D                 mov     rdx, rax
.text:0000000000005B80                 xor     edi, edi
.text:0000000000005B82                 call    quotearg_n_style_colon
.text:0000000000005B87                 mov     esi, [r13+0]    ; errnum
.text:0000000000005B8B                 lea     rdx, aS_0+2     ; format
.text:0000000000005B92                 mov     rcx, rax
.text:0000000000005B95                 xor     edi, edi        ; status
.text:0000000000005B97                 xor     eax, eax
.text:0000000000005B99                 call    _error
.text:0000000000005B9E                 mov     rbp, [rbx]
.text:0000000000005BA1
.text:0000000000005BA1 loc_5BA1:                               ; CODE XREF: recheck+DE↑j
.text:0000000000005BA1                                         ; recheck+32E↓j ...
.text:0000000000005BA1                 mov     rdi, rbp
.text:0000000000005BA4                 call    pretty_name_isra_7
.text:0000000000005BA9                 mov     edi, r12d
.text:0000000000005BAC                 mov     rsi, rax
.text:0000000000005BAF                 call    close_fd
.text:0000000000005BB4                 mov     rdi, [rbx]
.text:0000000000005BB7                 call    pretty_name_isra_7
.text:0000000000005BBC                 mov     edi, [rbx+38h]
.text:0000000000005BBF                 mov     rsi, rax
.text:0000000000005BC2                 call    close_fd
.text:0000000000005BC7                 mov     dword ptr [rbx+38h], 0FFFFFFFFh
.text:0000000000005BCE
.text:0000000000005BCE loc_5BCE:                               ; CODE XREF: recheck+304↓j
.text:0000000000005BCE                                         ; recheck+562↓j
.text:0000000000005BCE                 mov     rax, [rsp+0E8h+var_40]
.text:0000000000005BD6                 xor     rax, fs:28h
.text:0000000000005BDF                 jnz     loc_60B6
.text:0000000000005BE5                 add     rsp, 0B8h
.text:0000000000005BEC                 pop     rbx
.text:0000000000005BED                 pop     rbp
.text:0000000000005BEE                 pop     r12
.text:0000000000005BF0                 pop     r13
.text:0000000000005BF2                 pop     r14
.text:0000000000005BF4                 pop     r15
.text:0000000000005BF6                 retn
.text:0000000000005BF6 ; ---------------------------------------------------------------------------
.text:0000000000005BF7                 align 20h
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: recheck+58↑j
.text:0000000000005C00                 mov     eax, r14d
.text:0000000000005C03                 xor     r12d, r12d
.text:0000000000005C06                 jmp     loc_5B0A
.text:0000000000005C06 ; ---------------------------------------------------------------------------
.text:0000000000005C0B                 align 10h
.text:0000000000005C10
.text:0000000000005C10 loc_5C10:                               ; CODE XREF: recheck+A0↑j
.text:0000000000005C10                 cmp     r12d, 0FFFFFFFFh
.text:0000000000005C14                 jz      loc_5DA0
.text:0000000000005C1A                 test    al, al
.text:0000000000005C1C                 mov     byte ptr [rbx+36h], 1
.text:0000000000005C20                 lea     r8, [rsp+0E8h+stat_buf]
.text:0000000000005C25                 jz      loc_5F80
.text:0000000000005C2B
.text:0000000000005C2B loc_5C2B:                               ; CODE XREF: recheck+4E5↓j
.text:0000000000005C2B                                         ; recheck+50C↓j ...
.text:0000000000005C2B                 mov     rdx, r8         ; stat_buf
.text:0000000000005C2E                 mov     esi, r12d       ; fildes
.text:0000000000005C31                 mov     edi, 1          ; ver
.text:0000000000005C36                 call    ___fxstat
.text:0000000000005C3B                 test    eax, eax
.text:0000000000005C3D                 js      loc_5B4C
.text:0000000000005C43                 mov     edx, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000005C47                 mov     eax, edx
.text:0000000000005C49                 and     eax, 0F000h
.text:0000000000005C4E                 sub     eax, 1000h
.text:0000000000005C53                 test    eax, 0FFFFE000h
.text:0000000000005C58                 jz      short loc_5CB0
.text:0000000000005C5A                 and     edx, 0B000h
.text:0000000000005C60                 cmp     edx, 8000h
.text:0000000000005C66                 jz      short loc_5CB0
.text:0000000000005C68                 test    r15b, r15b
.text:0000000000005C6B                 mov     dword ptr [rbx+3Ch], 0FFFFFFFFh
.text:0000000000005C72                 mov     byte ptr [rbx+36h], 0
.text:0000000000005C76                 jz      loc_5E70
.text:0000000000005C7C                 cmp     cs:follow_mode, 1
.text:0000000000005C83                 jnz     loc_5E70
.text:0000000000005C89                 cmp     [rsp+0E8h+var_E1], 0
.text:0000000000005C8E                 mov     byte ptr [rbx+34h], 0
.text:0000000000005C92                 mov     rbp, [rbx]
.text:0000000000005C95                 jz      loc_60DA
.text:0000000000005C9B                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:0000000000005CA2                 jmp     loc_5E9A
.text:0000000000005CA2 ; ---------------------------------------------------------------------------
.text:0000000000005CA7                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 loc_5CB0:                               ; CODE XREF: recheck+1C8↑j
.text:0000000000005CB0                                         ; recheck+1D6↑j
.text:0000000000005CB0                 mov     rdi, [rbx]
.text:0000000000005CB3                 call    pretty_name_isra_7
.text:0000000000005CB8                 mov     edi, r12d
.text:0000000000005CBB                 mov     rsi, rax
.text:0000000000005CBE                 call    fremote
.text:0000000000005CC3                 test    al, al
.text:0000000000005CC5                 mov     [rbx+35h], al
.text:0000000000005CC8                 jnz     loc_5E10
.text:0000000000005CCE
.text:0000000000005CCE loc_5CCE:                               ; CODE XREF: recheck+387↓j
.text:0000000000005CCE                 and     r14d, 0FFFFFFFDh
.text:0000000000005CD2                 mov     dword ptr [rbx+3Ch], 0
.text:0000000000005CD9                 mov     eax, [rbx+38h]
.text:0000000000005CDC                 jz      loc_5FC0
.text:0000000000005CE2                 cmp     eax, 0FFFFFFFFh
.text:0000000000005CE5                 jnz     loc_60F0
.text:0000000000005CEB                 mov     rdi, [rbx]
.text:0000000000005CEE                 call    pretty_name_isra_7
.text:0000000000005CF3                 mov     edi, 4
.text:0000000000005CF8                 mov     rsi, rax
.text:0000000000005CFB                 call    quotearg_style
.text:0000000000005D00                 lea     rsi, aSHasBecomeAcce ; "%s has become accessible"
.text:0000000000005D07                 mov     r14, rax
.text:0000000000005D0A                 mov     edx, 5          ; category
.text:0000000000005D0F
.text:0000000000005D0F loc_5D0F:                               ; CODE XREF: recheck+621↓j
.text:0000000000005D0F                 xor     edi, edi        ; domainname
.text:0000000000005D11                 call    _dcgettext
.text:0000000000005D16                 mov     rcx, r14
.text:0000000000005D19                 mov     rdx, rax        ; format
.text:0000000000005D1C                 xor     esi, esi        ; errnum
.text:0000000000005D1E                 xor     edi, edi        ; status
.text:0000000000005D20                 xor     eax, eax
.text:0000000000005D22                 call    _error
.text:0000000000005D27
.text:0000000000005D27 loc_5D27:                               ; CODE XREF: recheck+5BC↓j
.text:0000000000005D27                 test    ebp, ebp
.text:0000000000005D29                 mov     eax, 0FFFFFFFFh
.text:0000000000005D2E                 movzx   r13d, r13b
.text:0000000000005D32                 cmovz   r13d, eax
.text:0000000000005D36                 mov     rax, [rsp+0E8h+stat_buf.st_mtim.tv_sec]
.text:0000000000005D3B                 mov     rdi, [rbx]
.text:0000000000005D3E                 mov     [rbx+38h], r12d
.text:0000000000005D42                 mov     qword ptr [rbx+8], 0
.text:0000000000005D4A                 mov     [rbx+40h], r13d
.text:0000000000005D4E                 mov     qword ptr [rbx+58h], 0
.text:0000000000005D56                 mov     [rbx+10h], rax
.text:0000000000005D5A                 mov     rax, [rsp+0E8h+stat_buf.st_mtim.tv_nsec]
.text:0000000000005D5F                 mov     byte ptr [rbx+34h], 0
.text:0000000000005D63                 mov     [rbx+18h], rax
.text:0000000000005D67                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000005D6C                 mov     [rbx+20h], rax
.text:0000000000005D70                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000005D75                 mov     [rbx+28h], rax
.text:0000000000005D79                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000005D7D                 mov     [rbx+30h], eax
.text:0000000000005D80                 call    pretty_name_isra_7
.text:0000000000005D85                 xor     edx, edx
.text:0000000000005D87                 mov     rcx, rax
.text:0000000000005D8A                 xor     esi, esi
.text:0000000000005D8C                 mov     edi, r12d
.text:0000000000005D8F                 call    xlseek
.text:0000000000005D94                 jmp     loc_5BCE
.text:0000000000005D94 ; ---------------------------------------------------------------------------
.text:0000000000005D99                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: recheck+184↑j
.text:0000000000005DA0                 test    al, al
.text:0000000000005DA2                 mov     byte ptr [rbx+36h], 0
.text:0000000000005DA6                 mov     rbp, [rbx]
.text:0000000000005DA9                 jz      loc_6058
.text:0000000000005DAF                 call    ___errno_location
.text:0000000000005DB4                 mov     eax, [rax]
.text:0000000000005DB6                 mov     [rbx+3Ch], eax
.text:0000000000005DB9
.text:0000000000005DB9 loc_5DB9:                               ; CODE XREF: recheck+D4↑j
.text:0000000000005DB9                 cmp     [rsp+0E8h+var_E1], 0
.text:0000000000005DBE                 jz      loc_5BA1
.text:0000000000005DC4                 mov     rdi, rbp
.text:0000000000005DC7                 call    pretty_name_isra_7
.text:0000000000005DCC                 mov     edi, 4
.text:0000000000005DD1                 mov     rsi, rax
.text:0000000000005DD4                 call    quotearg_style
.text:0000000000005DD9                 lea     rsi, aSHasBecomeInac ; "%s has become inaccessible"
.text:0000000000005DE0                 mov     edx, 5          ; category
.text:0000000000005DE5                 xor     edi, edi        ; domainname
.text:0000000000005DE7                 mov     rbp, rax
.text:0000000000005DEA                 call    _dcgettext
.text:0000000000005DEF                 mov     esi, [rbx+3Ch]  ; errnum
.text:0000000000005DF2                 mov     rcx, rbp
.text:0000000000005DF5                 mov     rdx, rax        ; format
.text:0000000000005DF8                 xor     edi, edi        ; status
.text:0000000000005DFA                 xor     eax, eax
.text:0000000000005DFC                 call    _error
.text:0000000000005E01                 mov     rbp, [rbx]
.text:0000000000005E04                 jmp     loc_5BA1
.text:0000000000005E04 ; ---------------------------------------------------------------------------
.text:0000000000005E09                 align 10h
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: recheck+238↑j
.text:0000000000005E10                 cmp     cs:disable_inotify, 0
.text:0000000000005E17                 jnz     loc_5CCE
.text:0000000000005E1D                 mov     rdi, [rbx]
.text:0000000000005E20                 mov     dword ptr [rbx+3Ch], 0FFFFFFFFh
.text:0000000000005E27                 call    pretty_name_isra_7
.text:0000000000005E2C                 mov     edi, 4
.text:0000000000005E31                 mov     rsi, rax
.text:0000000000005E34                 call    quotearg_style
.text:0000000000005E39                 lea     rsi, aSHasBeenReplac ; "%s has been replaced with an untailable"...
.text:0000000000005E40                 mov     rbp, rax
.text:0000000000005E43                 mov     edx, 5          ; category
.text:0000000000005E48                 xor     edi, edi        ; domainname
.text:0000000000005E4A                 call    _dcgettext
.text:0000000000005E4F                 mov     rcx, rbp
.text:0000000000005E52                 mov     rdx, rax        ; format
.text:0000000000005E55                 xor     esi, esi        ; errnum
.text:0000000000005E57                 xor     edi, edi        ; status
.text:0000000000005E59                 xor     eax, eax
.text:0000000000005E5B                 call    _error
.text:0000000000005E60                 mov     byte ptr [rbx+34h], 1
.text:0000000000005E64                 mov     byte ptr [rbx+35h], 1
.text:0000000000005E68                 mov     rbp, [rbx]
.text:0000000000005E6B                 jmp     loc_5BA1
.text:0000000000005E70 ; ---------------------------------------------------------------------------
.text:0000000000005E70
.text:0000000000005E70 loc_5E70:                               ; CODE XREF: recheck+1E6↑j
.text:0000000000005E70                                         ; recheck+1F3↑j
.text:0000000000005E70                 cmp     [rsp+0E8h+var_E1], 0
.text:0000000000005E75                 mov     byte ptr [rbx+34h], 1
.text:0000000000005E79                 jnz     short loc_5E81
.text:0000000000005E7B                 cmp     r14d, 0FFFFFFFFh
.text:0000000000005E7F                 jz      short loc_5ED9
.text:0000000000005E81
.text:0000000000005E81 loc_5E81:                               ; CODE XREF: recheck+3E9↑j
.text:0000000000005E81                 lea     rsi, aGivingUpOnThis ; "; giving up on this name"
.text:0000000000005E88                 mov     edx, 5          ; category
.text:0000000000005E8D                 xor     edi, edi        ; domainname
.text:0000000000005E8F                 call    _dcgettext
.text:0000000000005E94                 mov     rbp, [rbx]
.text:0000000000005E97                 mov     r13, rax
.text:0000000000005E9A
.text:0000000000005E9A loc_5E9A:                               ; CODE XREF: recheck+212↑j
.text:0000000000005E9A                                         ; recheck+655↓j
.text:0000000000005E9A                 mov     rdi, rbp
.text:0000000000005E9D                 call    pretty_name_isra_7
.text:0000000000005EA2                 mov     edi, 4
.text:0000000000005EA7                 mov     rsi, rax
.text:0000000000005EAA                 call    quotearg_style
.text:0000000000005EAF                 lea     rsi, aSHasBeenReplac_0 ; "%s has been replaced with an untailable"...
.text:0000000000005EB6                 mov     rbp, rax
.text:0000000000005EB9                 mov     edx, 5          ; category
.text:0000000000005EBE                 xor     edi, edi        ; domainname
.text:0000000000005EC0                 call    _dcgettext
.text:0000000000005EC5                 mov     r8, r13
.text:0000000000005EC8                 mov     rdx, rax        ; format
.text:0000000000005ECB                 mov     rcx, rbp
.text:0000000000005ECE                 xor     esi, esi        ; errnum
.text:0000000000005ED0                 xor     edi, edi        ; status
.text:0000000000005ED2                 xor     eax, eax
.text:0000000000005ED4                 call    _error
.text:0000000000005ED9
.text:0000000000005ED9 loc_5ED9:                               ; CODE XREF: recheck+3EF↑j
.text:0000000000005ED9                 mov     rbp, [rbx]
.text:0000000000005EDC                 jmp     loc_5BA1
.text:0000000000005EDC ; ---------------------------------------------------------------------------
.text:0000000000005EE1                 align 8
.text:0000000000005EE8
.text:0000000000005EE8 loc_5EE8:                               ; CODE XREF: recheck+AC↑j
.text:0000000000005EE8                 lea     r8, [rsp+0E8h+stat_buf]
.text:0000000000005EED                 mov     rsi, [rbx]      ; filename
.text:0000000000005EF0                 mov     edi, 1          ; ver
.text:0000000000005EF5                 mov     rdx, r8         ; stat_buf
.text:0000000000005EF8                 call    ___lxstat
.text:0000000000005EFD                 test    eax, eax
.text:0000000000005EFF                 jnz     loc_5B42
.text:0000000000005F05                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000005F09                 and     eax, 0F000h
.text:0000000000005F0E                 cmp     eax, 0A000h
.text:0000000000005F13                 jnz     loc_5B42
.text:0000000000005F19
.text:0000000000005F19 loc_5F19:                               ; CODE XREF: recheck+526↓j
.text:0000000000005F19                                         ; recheck+5F6↓j
.text:0000000000005F19                 mov     rdi, [rbx]
.text:0000000000005F1C                 mov     dword ptr [rbx+3Ch], 0FFFFFFFFh
.text:0000000000005F23                 mov     byte ptr [rbx+34h], 1
.text:0000000000005F27                 call    pretty_name_isra_7
.text:0000000000005F2C                 mov     edi, 4
.text:0000000000005F31                 mov     rsi, rax
.text:0000000000005F34                 call    quotearg_style
.text:0000000000005F39                 lea     rsi, aSHasBeenReplac_1 ; "%s has been replaced with an untailable"...
.text:0000000000005F40                 mov     rbp, rax
.text:0000000000005F43                 mov     edx, 5          ; category
.text:0000000000005F48                 xor     edi, edi        ; domainname
.text:0000000000005F4A                 call    _dcgettext
.text:0000000000005F4F                 mov     rcx, rbp
.text:0000000000005F52                 mov     rdx, rax        ; format
.text:0000000000005F55                 xor     esi, esi        ; errnum
.text:0000000000005F57                 xor     edi, edi        ; status
.text:0000000000005F59                 xor     eax, eax
.text:0000000000005F5B                 call    _error
.text:0000000000005F60                 mov     rbp, [rbx]
.text:0000000000005F63                 jmp     loc_5BA1
.text:0000000000005F63 ; ---------------------------------------------------------------------------
.text:0000000000005F68                 align 10h
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: recheck+B6↑j
.text:0000000000005F70                 lea     r8, [rsp+0E8h+stat_buf]
.text:0000000000005F75                 jmp     loc_5C2B
.text:0000000000005F75 ; ---------------------------------------------------------------------------
.text:0000000000005F7A                 align 20h
.text:0000000000005F80
.text:0000000000005F80 loc_5F80:                               ; CODE XREF: recheck+195↑j
.text:0000000000005F80                 mov     rsi, [rbx]      ; filename
.text:0000000000005F83                 mov     rdx, r8         ; stat_buf
.text:0000000000005F86                 mov     edi, 1          ; ver
.text:0000000000005F8B                 mov     [rsp+0E8h+var_E0], r8
.text:0000000000005F90                 call    ___lxstat
.text:0000000000005F95                 test    eax, eax
.text:0000000000005F97                 mov     r8, [rsp+0E8h+var_E0]
.text:0000000000005F9C                 jnz     loc_5C2B
.text:0000000000005FA2                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000005FA6                 and     eax, 0F000h
.text:0000000000005FAB                 cmp     eax, 0A000h
.text:0000000000005FB0                 jnz     loc_5C2B
.text:0000000000005FB6                 jmp     loc_5F19
.text:0000000000005FB6 ; ---------------------------------------------------------------------------
.text:0000000000005FBB                 align 20h
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: recheck+24C↑j
.text:0000000000005FC0                 cmp     eax, 0FFFFFFFFh
.text:0000000000005FC3                 mov     rdi, [rbx]
.text:0000000000005FC6                 jz      loc_6090
.text:0000000000005FCC                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000005FD1                 cmp     [rbx+28h], rax
.text:0000000000005FD5                 jnz     short loc_6000
.text:0000000000005FD7                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000005FDC                 cmp     [rbx+20h], rax
.text:0000000000005FE0                 jnz     short loc_6000
.text:0000000000005FE2                 call    pretty_name_isra_7
.text:0000000000005FE7                 mov     edi, r12d
.text:0000000000005FEA                 mov     rsi, rax
.text:0000000000005FED                 call    close_fd
.text:0000000000005FF2                 jmp     loc_5BCE
.text:0000000000005FF2 ; ---------------------------------------------------------------------------
.text:0000000000005FF7                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: recheck+545↑j
.text:0000000000006000                                         ; recheck+550↑j
.text:0000000000006000                 call    pretty_name_isra_7
.text:0000000000006005                 mov     edi, 4
.text:000000000000600A                 mov     rsi, rax
.text:000000000000600D                 call    quotearg_style
.text:0000000000006012                 lea     rsi, aSHasBeenReplac_2 ; "%s has been replaced;  following new fi"...
.text:0000000000006019                 mov     r14, rax
.text:000000000000601C                 xor     edi, edi        ; domainname
.text:000000000000601E                 mov     edx, 5          ; category
.text:0000000000006023                 call    _dcgettext
.text:0000000000006028                 xor     esi, esi        ; errnum
.text:000000000000602A                 mov     rdx, rax        ; format
.text:000000000000602D                 mov     rcx, r14
.text:0000000000006030                 xor     edi, edi        ; status
.text:0000000000006032                 xor     eax, eax
.text:0000000000006034                 call    _error
.text:0000000000006039                 mov     rdi, [rbx]
.text:000000000000603C                 call    pretty_name_isra_7
.text:0000000000006041                 mov     edi, [rbx+38h]
.text:0000000000006044                 mov     rsi, rax
.text:0000000000006047                 call    close_fd
.text:000000000000604C                 jmp     loc_5D27
.text:000000000000604C ; ---------------------------------------------------------------------------
.text:0000000000006051                 align 8
.text:0000000000006058
.text:0000000000006058 loc_6058:                               ; CODE XREF: recheck+319↑j
.text:0000000000006058                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000000605D                 mov     rsi, rbp        ; filename
.text:0000000000006060                 mov     edi, 1          ; ver
.text:0000000000006065                 call    ___lxstat
.text:000000000000606A                 test    eax, eax
.text:000000000000606C                 jnz     loc_5B4C
.text:0000000000006072                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:0000000000006076                 and     eax, 0F000h
.text:000000000000607B                 cmp     eax, 0A000h
.text:0000000000006080                 jnz     loc_5B4C
.text:0000000000006086                 jmp     loc_5F19
.text:0000000000006086 ; ---------------------------------------------------------------------------
.text:000000000000608B                 align 10h
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: recheck+536↑j
.text:0000000000006090                 call    pretty_name_isra_7
.text:0000000000006095                 mov     edi, 4
.text:000000000000609A                 mov     rsi, rax
.text:000000000000609D                 call    quotearg_style
.text:00000000000060A2                 mov     edx, 5
.text:00000000000060A7                 mov     r14, rax
.text:00000000000060AA                 lea     rsi, aSHasAppearedFo ; "%s has appeared;  following new file"
.text:00000000000060B1                 jmp     loc_5D0F
.text:00000000000060B6 ; ---------------------------------------------------------------------------
.text:00000000000060B6
.text:00000000000060B6 loc_60B6:                               ; CODE XREF: recheck+14F↑j
.text:00000000000060B6                 call    ___stack_chk_fail
.text:00000000000060BB ; ---------------------------------------------------------------------------
.text:00000000000060BB
.text:00000000000060BB loc_60BB:                               ; CODE XREF: recheck+88↑j
.text:00000000000060BB                 lea     rcx, __PRETTY_FUNCTION___7576 ; "recheck"
.text:00000000000060C2                 lea     rsi, file       ; "../coreutils-8.31/src/tail.c"
.text:00000000000060C9                 lea     rdi, aValidFileSpecF ; "valid_file_spec (f)"
.text:00000000000060D0                 mov     edx, 3DFh       ; line
.text:00000000000060D5                 call    ___assert_fail
.text:00000000000060DA ; ---------------------------------------------------------------------------
.text:00000000000060DA
.text:00000000000060DA loc_60DA:                               ; CODE XREF: recheck+205↑j
.text:00000000000060DA                 add     r14d, 1
.text:00000000000060DE                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:00000000000060E5                 jnz     loc_5E9A
.text:00000000000060EB                 jmp     loc_5BA1
.text:00000000000060F0 ; ---------------------------------------------------------------------------
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: recheck+255↑j
.text:00000000000060F0                 lea     rcx, __PRETTY_FUNCTION___7576 ; "recheck"
.text:00000000000060F7                 lea     rsi, file       ; "../coreutils-8.31/src/tail.c"
.text:00000000000060FE                 lea     rdi, aFFd1      ; "f->fd == -1"
.text:0000000000006105                 mov     edx, 42Ch       ; line
.text:000000000000610A                 call    ___assert_fail
.text:000000000000610A ; } // starts at 5A90
.text:000000000000610A recheck         endp
.text:000000000000610A
.text:000000000000610A ; ---------------------------------------------------------------------------
.text:000000000000610F                 align 10h
.text:0000000000006110
.text:0000000000006110 ; =============== S U B R O U T I N E =======================================
.text:0000000000006110
.text:0000000000006110 ; Attributes: noreturn
.text:0000000000006110
.text:0000000000006110 ; void __fastcall __noreturn usage(int status)
.text:0000000000006110                 public usage
.text:0000000000006110 usage           proc near               ; CODE XREF: main+1CF5↑p
.text:0000000000006110                                         ; main+1D26↑p ...
.text:0000000000006110
.text:0000000000006110 var_A8          = qword ptr -0A8h
.text:0000000000006110 var_A0          = qword ptr -0A0h
.text:0000000000006110 var_98          = qword ptr -98h
.text:0000000000006110 var_90          = qword ptr -90h
.text:0000000000006110 var_88          = qword ptr -88h
.text:0000000000006110 var_80          = qword ptr -80h
.text:0000000000006110 var_78          = qword ptr -78h
.text:0000000000006110 var_70          = qword ptr -70h
.text:0000000000006110 var_68          = qword ptr -68h
.text:0000000000006110 var_60          = qword ptr -60h
.text:0000000000006110 var_58          = qword ptr -58h
.text:0000000000006110 var_50          = qword ptr -50h
.text:0000000000006110 var_48          = qword ptr -48h
.text:0000000000006110 var_40          = qword ptr -40h
.text:0000000000006110 var_30          = qword ptr -30h
.text:0000000000006110
.text:0000000000006110 ; __unwind {
.text:0000000000006110                 push    r13
.text:0000000000006112                 push    r12
.text:0000000000006114                 mov     edx, 5          ; category
.text:0000000000006119                 push    rbp
.text:000000000000611A                 push    rbx
.text:000000000000611B                 mov     ebp, edi
.text:000000000000611D                 sub     rsp, 88h
.text:0000000000006124                 mov     rbx, cs:program_name
.text:000000000000612B                 mov     rax, fs:28h
.text:0000000000006134                 mov     [rsp+0A8h+var_30], rax
.text:0000000000006139                 xor     eax, eax
.text:000000000000613B                 test    edi, edi
.text:000000000000613D                 jz      short loc_616D
.text:000000000000613F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000006146                 xor     edi, edi        ; domainname
.text:0000000000006148                 call    _dcgettext
.text:000000000000614D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006154                 mov     rdx, rax
.text:0000000000006157                 mov     rcx, rbx
.text:000000000000615A                 mov     esi, 1
.text:000000000000615F                 xor     eax, eax
.text:0000000000006161                 call    ___fprintf_chk
.text:0000000000006166
.text:0000000000006166 loc_6166:                               ; CODE XREF: usage+3F6↓j
.text:0000000000006166                 mov     edi, ebp        ; status
.text:0000000000006168                 call    _exit
.text:000000000000616D ; ---------------------------------------------------------------------------
.text:000000000000616D
.text:000000000000616D loc_616D:                               ; CODE XREF: usage+2D↑j
.text:000000000000616D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000006174                 xor     edi, edi        ; domainname
.text:0000000000006176                 call    _dcgettext
.text:000000000000617B                 mov     rdx, rbx
.text:000000000000617E                 mov     rsi, rax
.text:0000000000006181                 mov     edi, 1
.text:0000000000006186                 xor     eax, eax
.text:0000000000006188                 call    ___printf_chk
.text:000000000000618D                 lea     rsi, aPrintTheLastDL ; "Print the last %d lines of each FILE to"...
.text:0000000000006194                 xor     edi, edi        ; domainname
.text:0000000000006196                 mov     edx, 5          ; category
.text:000000000000619B                 call    _dcgettext
.text:00000000000061A0                 mov     edx, 0Ah
.text:00000000000061A5                 mov     rsi, rax
.text:00000000000061A8                 mov     edi, 1
.text:00000000000061AD                 xor     eax, eax
.text:00000000000061AF                 call    ___printf_chk
.text:00000000000061B4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000061BB                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:00000000000061C2                 mov     edx, 5          ; category
.text:00000000000061C7                 xor     edi, edi        ; domainname
.text:00000000000061C9                 call    _dcgettext
.text:00000000000061CE                 mov     rsi, rbx        ; stream
.text:00000000000061D1                 mov     rdi, rax        ; s
.text:00000000000061D4                 call    _fputs_unlocked
.text:00000000000061D9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000061E0                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000061E7                 mov     edx, 5          ; category
.text:00000000000061EC                 xor     edi, edi        ; domainname
.text:00000000000061EE                 call    _dcgettext
.text:00000000000061F3                 mov     rsi, rbx        ; stream
.text:00000000000061F6                 mov     rdi, rax        ; s
.text:00000000000061F9                 call    _fputs_unlocked
.text:00000000000061FE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006205                 lea     rsi, aCBytesNumOutpu ; "  -c, --bytes=[+]NUM       output the l"...
.text:000000000000620C                 mov     edx, 5          ; category
.text:0000000000006211                 xor     edi, edi        ; domainname
.text:0000000000006213                 call    _dcgettext
.text:0000000000006218                 mov     rsi, rbx        ; stream
.text:000000000000621B                 mov     rdi, rax        ; s
.text:000000000000621E                 call    _fputs_unlocked
.text:0000000000006223                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000622A                 lea     rsi, aFFollowNameDes ; "  -f, --follow[={name|descriptor}]\n   "...
.text:0000000000006231                 mov     edx, 5          ; category
.text:0000000000006236                 xor     edi, edi        ; domainname
.text:0000000000006238                 call    _dcgettext
.text:000000000000623D                 mov     rsi, rbx        ; stream
.text:0000000000006240                 mov     rdi, rax        ; s
.text:0000000000006243                 call    _fputs_unlocked
.text:0000000000006248                 lea     rsi, aNLinesNumOutpu ; "  -n, --lines=[+]NUM       output the l"...
.text:000000000000624F                 xor     edi, edi        ; domainname
.text:0000000000006251                 mov     edx, 5          ; category
.text:0000000000006256                 call    _dcgettext
.text:000000000000625B                 mov     ecx, 5
.text:0000000000006260                 mov     rsi, rax
.text:0000000000006263                 mov     edx, 0Ah
.text:0000000000006268                 mov     edi, 1
.text:000000000000626D                 xor     eax, eax
.text:000000000000626F                 call    ___printf_chk
.text:0000000000006274                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000627B                 lea     rsi, aPidPidWithFTer ; "      --pid=PID            with -f, ter"...
.text:0000000000006282                 mov     edx, 5          ; category
.text:0000000000006287                 xor     edi, edi        ; domainname
.text:0000000000006289                 call    _dcgettext
.text:000000000000628E                 mov     rsi, rbx        ; stream
.text:0000000000006291                 mov     rdi, rax        ; s
.text:0000000000006294                 call    _fputs_unlocked
.text:0000000000006299                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000062A0                 lea     rsi, aSSleepInterval ; "  -s, --sleep-interval=N   with -f, sle"...
.text:00000000000062A7                 mov     edx, 5          ; category
.text:00000000000062AC                 xor     edi, edi        ; domainname
.text:00000000000062AE                 call    _dcgettext
.text:00000000000062B3                 mov     rsi, rbx        ; stream
.text:00000000000062B6                 mov     rdi, rax        ; s
.text:00000000000062B9                 call    _fputs_unlocked
.text:00000000000062BE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000062C5                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:00000000000062CC                 mov     edx, 5          ; category
.text:00000000000062D1                 xor     edi, edi        ; domainname
.text:00000000000062D3                 call    _dcgettext
.text:00000000000062D8                 mov     rsi, rbx        ; stream
.text:00000000000062DB                 mov     rdi, rax        ; s
.text:00000000000062DE                 call    _fputs_unlocked
.text:00000000000062E3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000062EA                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000062F1                 mov     edx, 5          ; category
.text:00000000000062F6                 xor     edi, edi        ; domainname
.text:00000000000062F8                 call    _dcgettext
.text:00000000000062FD                 mov     rsi, rbx        ; stream
.text:0000000000006300                 mov     rdi, rax        ; s
.text:0000000000006303                 call    _fputs_unlocked
.text:0000000000006308                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000630F                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000006316                 mov     edx, 5          ; category
.text:000000000000631B                 xor     edi, edi        ; domainname
.text:000000000000631D                 call    _dcgettext
.text:0000000000006322                 mov     rsi, rbx        ; stream
.text:0000000000006325                 mov     rdi, rax        ; s
.text:0000000000006328                 call    _fputs_unlocked
.text:000000000000632D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006334                 lea     rsi, aNumMayHaveAMul ; "\nNUM may have a multiplier suffix:\nb "...
.text:000000000000633B                 mov     edx, 5          ; category
.text:0000000000006340                 xor     edi, edi        ; domainname
.text:0000000000006342                 call    _dcgettext
.text:0000000000006347                 mov     rsi, rbx        ; stream
.text:000000000000634A                 mov     rdi, rax        ; s
.text:000000000000634D                 call    _fputs_unlocked
.text:0000000000006352                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006359                 lea     rsi, aWithFollowFTai ; "With --follow (-f), tail defaults to fo"...
.text:0000000000006360                 mov     edx, 5          ; category
.text:0000000000006365                 xor     edi, edi        ; domainname
.text:0000000000006367                 call    _dcgettext
.text:000000000000636C                 mov     rsi, rbx        ; stream
.text:000000000000636F                 mov     rdi, rax        ; s
.text:0000000000006372                 lea     rbx, aTail      ; "tail"
.text:0000000000006379                 call    _fputs_unlocked
.text:000000000000637E                 lea     rax, asc_B731   ; "["
.text:0000000000006385                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000638C                 mov     [rsp+0A8h+var_48], 0
.text:0000000000006395                 mov     [rsp+0A8h+var_40], 0
.text:000000000000639E                 mov     rdx, rsp
.text:00000000000063A1                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000063A5                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000063AC                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000063B1                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000063B8                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000063BD                 lea     rax, domainname ; "coreutils"
.text:00000000000063C4                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000063C9                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000063D0                 mov     [rsp+0A8h+var_98], rax
.text:00000000000063D5                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000063DC                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000063E1                 mov     [rsp+0A8h+var_90], rax
.text:00000000000063E6                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000063ED                 mov     [rsp+0A8h+var_88], rax
.text:00000000000063F2                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000063F9                 mov     [rsp+0A8h+var_80], rax
.text:00000000000063FE                 mov     [rsp+0A8h+var_70], rax
.text:0000000000006403                 mov     [rsp+0A8h+var_60], rax
.text:0000000000006408                 mov     [rsp+0A8h+var_50], rax
.text:000000000000640D                 nop     dword ptr [rax]
.text:0000000000006410
.text:0000000000006410 loc_6410:                               ; CODE XREF: usage+31D↓j
.text:0000000000006410                 add     rdx, 10h
.text:0000000000006414                 mov     rdi, [rdx]
.text:0000000000006417                 test    rdi, rdi
.text:000000000000641A                 jz      short loc_642F
.text:000000000000641C                 mov     ecx, 5
.text:0000000000006421                 mov     rsi, rbx
.text:0000000000006424                 repe cmpsb
.text:0000000000006426                 setnbe  al
.text:0000000000006429                 sbb     al, 0
.text:000000000000642B                 test    al, al
.text:000000000000642D                 jnz     short loc_6410
.text:000000000000642F
.text:000000000000642F loc_642F:                               ; CODE XREF: usage+30A↑j
.text:000000000000642F                 mov     r12, [rdx+8]
.text:0000000000006433                 xor     edi, edi        ; domainname
.text:0000000000006435                 mov     edx, 5          ; category
.text:000000000000643A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000006441                 test    r12, r12
.text:0000000000006444                 jz      loc_650B
.text:000000000000644A                 call    _dcgettext
.text:000000000000644F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006456                 lea     rdx, unk_B7A7
.text:000000000000645D                 mov     rsi, rax
.text:0000000000006460                 mov     edi, 1
.text:0000000000006465                 xor     eax, eax
.text:0000000000006467                 call    ___printf_chk
.text:000000000000646C                 xor     esi, esi        ; locale
.text:000000000000646E                 mov     edi, 5          ; category
.text:0000000000006473                 call    _setlocale
.text:0000000000006478                 test    rax, rax
.text:000000000000647B                 jz      short loc_6499
.text:000000000000647D                 lea     rsi, aEn        ; "en_"
.text:0000000000006484                 mov     edx, 3          ; n
.text:0000000000006489                 mov     rdi, rax        ; s1
.text:000000000000648C                 call    _strncmp
.text:0000000000006491                 test    eax, eax
.text:0000000000006493                 jnz     loc_65A0
.text:0000000000006499
.text:0000000000006499 loc_6499:                               ; CODE XREF: usage+36B↑j
.text:0000000000006499                                         ; usage+4B5↓j
.text:0000000000006499                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000064A0                 xor     edi, edi        ; domainname
.text:00000000000064A2                 mov     edx, 5          ; category
.text:00000000000064A7                 call    _dcgettext
.text:00000000000064AC                 lea     rcx, aTail      ; "tail"
.text:00000000000064B3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000064BA                 mov     rsi, rax
.text:00000000000064BD                 mov     edi, 1
.text:00000000000064C2                 xor     eax, eax
.text:00000000000064C4                 call    ___printf_chk
.text:00000000000064C9                 cmp     r12, rbx
.text:00000000000064CC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000064D3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000064DA                 cmovz   rbx, rcx
.text:00000000000064DE
.text:00000000000064DE loc_64DE:                               ; CODE XREF: usage+484↓j
.text:00000000000064DE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000064E5                 xor     edi, edi        ; domainname
.text:00000000000064E7                 mov     edx, 5          ; category
.text:00000000000064EC                 call    _dcgettext
.text:00000000000064F1                 mov     rcx, rbx
.text:00000000000064F4                 mov     rsi, rax
.text:00000000000064F7                 mov     rdx, r12
.text:00000000000064FA                 mov     edi, 1
.text:00000000000064FF                 xor     eax, eax
.text:0000000000006501                 call    ___printf_chk
.text:0000000000006506                 jmp     loc_6166
.text:000000000000650B ; ---------------------------------------------------------------------------
.text:000000000000650B
.text:000000000000650B loc_650B:                               ; CODE XREF: usage+334↑j
.text:000000000000650B                 call    _dcgettext
.text:0000000000006510                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006517                 lea     rdx, unk_B7A7
.text:000000000000651E                 mov     rsi, rax
.text:0000000000006521                 mov     edi, 1
.text:0000000000006526                 xor     eax, eax
.text:0000000000006528                 call    ___printf_chk
.text:000000000000652D                 xor     esi, esi        ; locale
.text:000000000000652F                 mov     edi, 5          ; category
.text:0000000000006534                 call    _setlocale
.text:0000000000006539                 test    rax, rax
.text:000000000000653C                 jz      short loc_6556
.text:000000000000653E                 lea     rsi, aEn        ; "en_"
.text:0000000000006545                 mov     edx, 3          ; n
.text:000000000000654A                 mov     rdi, rax        ; s1
.text:000000000000654D                 call    _strncmp
.text:0000000000006552                 test    eax, eax
.text:0000000000006554                 jnz     short loc_6599
.text:0000000000006556
.text:0000000000006556 loc_6556:                               ; CODE XREF: usage+42C↑j
.text:0000000000006556                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000655D                 mov     edx, 5          ; category
.text:0000000000006562                 xor     edi, edi        ; domainname
.text:0000000000006564                 lea     r12, aTail      ; "tail"
.text:000000000000656B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000006572                 call    _dcgettext
.text:0000000000006577                 lea     rcx, aTail      ; "tail"
.text:000000000000657E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006585                 mov     rsi, rax
.text:0000000000006588                 mov     edi, 1
.text:000000000000658D                 xor     eax, eax
.text:000000000000658F                 call    ___printf_chk
.text:0000000000006594                 jmp     loc_64DE
.text:0000000000006599 ; ---------------------------------------------------------------------------
.text:0000000000006599
.text:0000000000006599 loc_6599:                               ; CODE XREF: usage+444↑j
.text:0000000000006599                 lea     r12, aTail      ; "tail"
.text:00000000000065A0
.text:00000000000065A0 loc_65A0:                               ; CODE XREF: usage+383↑j
.text:00000000000065A0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000065A7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000065AE                 xor     edi, edi        ; domainname
.text:00000000000065B0                 mov     edx, 5          ; category
.text:00000000000065B5                 call    _dcgettext
.text:00000000000065BA                 mov     rsi, r13        ; stream
.text:00000000000065BD                 mov     rdi, rax        ; s
.text:00000000000065C0                 call    _fputs_unlocked
.text:00000000000065C5                 jmp     loc_6499
.text:00000000000065C5 ; } // starts at 6110
.text:00000000000065C5 usage           endp
.text:00000000000065C5
.text:00000000000065C5 ; ---------------------------------------------------------------------------
.text:00000000000065CA                 align 10h
.text:00000000000065D0
.text:00000000000065D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065D0
.text:00000000000065D0 ; Attributes: noreturn
.text:00000000000065D0
.text:00000000000065D0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:00000000000065D0 ; __unwind {
.text:00000000000065D0                 mov     edi, 1          ; status
.text:00000000000065D5                 jmp     usage
.text:00000000000065D5 ; } // starts at 65D0
.text:00000000000065D5 __argmatch_die  endp
.text:00000000000065D5
.text:00000000000065D5 ; ---------------------------------------------------------------------------
.text:00000000000065DA                 align 20h
.text:00000000000065E0
.text:00000000000065E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065E0
.text:00000000000065E0 ; Attributes: info_from_lumina
.text:00000000000065E0
.text:00000000000065E0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000065E0                 public argmatch
.text:00000000000065E0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:00000000000065E0
.text:00000000000065E0 var_58          = qword ptr -58h
.text:00000000000065E0 s2              = qword ptr -50h
.text:00000000000065E0 var_41          = byte ptr -41h
.text:00000000000065E0 var_40          = qword ptr -40h
.text:00000000000065E0
.text:00000000000065E0 ; __unwind {
.text:00000000000065E0                 push    r15
.text:00000000000065E2                 push    r14
.text:00000000000065E4                 mov     r15, rsi
.text:00000000000065E7                 push    r13
.text:00000000000065E9                 push    r12
.text:00000000000065EB                 mov     r13, rcx
.text:00000000000065EE                 push    rbp
.text:00000000000065EF                 push    rbx
.text:00000000000065F0                 mov     rbp, rdx
.text:00000000000065F3                 sub     rsp, 28h
.text:00000000000065F7                 mov     [rsp+58h+s2], rdi
.text:00000000000065FC                 mov     [rsp+58h+var_40], rdx
.text:0000000000006601                 call    _strlen
.text:0000000000006606                 mov     r14, [r15]
.text:0000000000006609                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000006611                 test    r14, r14
.text:0000000000006614                 jz      loc_66CD
.text:000000000000661A                 mov     r12, rax
.text:000000000000661D                 mov     [rsp+58h+var_41], 0
.text:0000000000006622                 xor     ebx, ebx
.text:0000000000006624                 jmp     short loc_6677
.text:0000000000006624 ; ---------------------------------------------------------------------------
.text:0000000000006626                 align 10h
.text:0000000000006630
.text:0000000000006630 loc_6630:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000006630                 mov     rax, [rsp+58h+var_40]
.text:0000000000006635                 test    rax, rax
.text:0000000000006638                 jz      loc_66E0
.text:000000000000663E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000006642                 mov     rdx, r13        ; n
.text:0000000000006645                 mov     rsi, rbp        ; s2
.text:0000000000006648                 imul    rdi, r13
.text:000000000000664C                 add     rdi, rax        ; s1
.text:000000000000664F                 call    _memcmp
.text:0000000000006654                 test    eax, eax
.text:0000000000006656                 movzx   eax, [rsp+58h+var_41]
.text:000000000000665B                 mov     ecx, 1
.text:0000000000006660                 cmovnz  eax, ecx
.text:0000000000006663                 mov     [rsp+58h+var_41], al
.text:0000000000006667
.text:0000000000006667 loc_6667:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000006667                                         ; argmatch+105↓j
.text:0000000000006667                 add     rbx, 1
.text:000000000000666B                 add     rbp, r13
.text:000000000000666E                 mov     r14, [r15+rbx*8]
.text:0000000000006672                 test    r14, r14
.text:0000000000006675                 jz      short loc_66B8
.text:0000000000006677
.text:0000000000006677 loc_6677:                               ; CODE XREF: argmatch+44↑j
.text:0000000000006677                                         ; argmatch+D1↓j
.text:0000000000006677                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000667C                 mov     rdx, r12        ; n
.text:000000000000667F                 mov     rdi, r14        ; s1
.text:0000000000006682                 call    _strncmp
.text:0000000000006687                 test    eax, eax
.text:0000000000006689                 jnz     short loc_6667
.text:000000000000668B                 mov     rdi, r14        ; s
.text:000000000000668E                 call    _strlen
.text:0000000000006693                 cmp     rax, r12
.text:0000000000006696                 jz      short loc_66F0
.text:0000000000006698                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000669D                 jnz     short loc_6630
.text:000000000000669F                 mov     [rsp+58h+var_58], rbx
.text:00000000000066A3                 add     rbx, 1
.text:00000000000066A7                 add     rbp, r13
.text:00000000000066AA                 mov     r14, [r15+rbx*8]
.text:00000000000066AE                 test    r14, r14
.text:00000000000066B1                 jnz     short loc_6677
.text:00000000000066B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000066B8
.text:00000000000066B8 loc_66B8:                               ; CODE XREF: argmatch+95↑j
.text:00000000000066B8                 cmp     [rsp+58h+var_41], 0
.text:00000000000066BD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000066C4                 cmovz   rax, [rsp+58h+var_58]
.text:00000000000066C9                 mov     [rsp+58h+var_58], rax
.text:00000000000066CD
.text:00000000000066CD loc_66CD:                               ; CODE XREF: argmatch+34↑j
.text:00000000000066CD                                         ; argmatch+114↓j
.text:00000000000066CD                 mov     rax, [rsp+58h+var_58]
.text:00000000000066D1                 add     rsp, 28h
.text:00000000000066D5                 pop     rbx
.text:00000000000066D6                 pop     rbp
.text:00000000000066D7                 pop     r12
.text:00000000000066D9                 pop     r13
.text:00000000000066DB                 pop     r14
.text:00000000000066DD                 pop     r15
.text:00000000000066DF                 retn
.text:00000000000066E0 ; ---------------------------------------------------------------------------
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: argmatch+58↑j
.text:00000000000066E0                 mov     [rsp+58h+var_41], 1
.text:00000000000066E5                 jmp     short loc_6667
.text:00000000000066E5 ; ---------------------------------------------------------------------------
.text:00000000000066E7                 align 10h
.text:00000000000066F0
.text:00000000000066F0 loc_66F0:                               ; CODE XREF: argmatch+B6↑j
.text:00000000000066F0                 mov     [rsp+58h+var_58], rbx
.text:00000000000066F4                 jmp     short loc_66CD
.text:00000000000066F4 ; } // starts at 65E0
.text:00000000000066F4 argmatch        endp
.text:00000000000066F4
.text:00000000000066F4 ; ---------------------------------------------------------------------------
.text:00000000000066F6                 align 20h
.text:0000000000006700
.text:0000000000006700 ; =============== S U B R O U T I N E =======================================
.text:0000000000006700
.text:0000000000006700 ; Attributes: info_from_lumina
.text:0000000000006700
.text:0000000000006700 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000006700                 public argmatch_invalid
.text:0000000000006700 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000006700 ; __unwind {
.text:0000000000006700                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006704                 push    r12
.text:0000000000006706                 mov     edx, 5          ; category
.text:000000000000670B                 push    rbp
.text:000000000000670C                 mov     r12, rsi
.text:000000000000670F                 push    rbx
.text:0000000000006710                 mov     rbp, rdi
.text:0000000000006713                 jz      short loc_6760
.text:0000000000006715                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000671C                 xor     edi, edi        ; domainname
.text:000000000000671E                 call    _dcgettext
.text:0000000000006723                 mov     rbx, rax
.text:0000000000006726
.text:0000000000006726 loc_6726:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000006726                 mov     rsi, rbp
.text:0000000000006729                 mov     edi, 1
.text:000000000000672E                 call    quote_n
.text:0000000000006733                 mov     rdx, r12
.text:0000000000006736                 mov     rbp, rax
.text:0000000000006739                 mov     esi, 8
.text:000000000000673E                 xor     edi, edi
.text:0000000000006740                 call    quotearg_n_style
.text:0000000000006745                 mov     r8, rbp
.text:0000000000006748                 mov     rdx, rbx        ; format
.text:000000000000674B                 mov     rcx, rax
.text:000000000000674E                 pop     rbx
.text:000000000000674F                 pop     rbp
.text:0000000000006750                 pop     r12
.text:0000000000006752                 xor     esi, esi        ; errnum
.text:0000000000006754                 xor     edi, edi        ; status
.text:0000000000006756                 xor     eax, eax
.text:0000000000006758                 jmp     _error
.text:0000000000006758 ; ---------------------------------------------------------------------------
.text:000000000000675D                 align 20h
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000006760                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000006767                 xor     edi, edi        ; domainname
.text:0000000000006769                 call    _dcgettext
.text:000000000000676E                 mov     rbx, rax
.text:0000000000006771                 jmp     short loc_6726
.text:0000000000006771 ; } // starts at 6700
.text:0000000000006771 argmatch_invalid endp
.text:0000000000006771
.text:0000000000006771 ; ---------------------------------------------------------------------------
.text:0000000000006773                 align 20h
.text:0000000000006780
.text:0000000000006780 ; =============== S U B R O U T I N E =======================================
.text:0000000000006780
.text:0000000000006780 ; Attributes: info_from_lumina
.text:0000000000006780
.text:0000000000006780 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000006780                 public argmatch_valid
.text:0000000000006780 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000006780 ; __unwind {
.text:0000000000006780                 push    r15
.text:0000000000006782                 push    r14
.text:0000000000006784                 mov     r14, rdi
.text:0000000000006787                 push    r13
.text:0000000000006789                 push    r12
.text:000000000000678B                 xor     edi, edi        ; domainname
.text:000000000000678D                 push    rbp
.text:000000000000678E                 push    rbx
.text:000000000000678F                 mov     rbp, rsi
.text:0000000000006792                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000006799                 mov     r12, rdx
.text:000000000000679C                 mov     edx, 5          ; category
.text:00000000000067A1                 sub     rsp, 8
.text:00000000000067A5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000067AC                 call    _dcgettext
.text:00000000000067B1                 mov     rdi, rax        ; s
.text:00000000000067B4                 mov     rsi, rbx        ; stream
.text:00000000000067B7                 call    _fputs_unlocked
.text:00000000000067BC                 mov     r15, [r14]
.text:00000000000067BF                 test    r15, r15
.text:00000000000067C2                 jz      loc_6858
.text:00000000000067C8                 xor     r13d, r13d
.text:00000000000067CB                 xor     ebx, ebx
.text:00000000000067CD                 jmp     short loc_6808
.text:00000000000067CD ; ---------------------------------------------------------------------------
.text:00000000000067CF                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:00000000000067D0                                         ; argmatch_valid+9D↓j
.text:00000000000067D0                 mov     rdi, r15
.text:00000000000067D3                 add     rbx, 1
.text:00000000000067D7                 mov     r13, rbp
.text:00000000000067DA                 call    quote
.text:00000000000067DF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000067E6                 lea     rdx, aS         ; "\n  - %s"
.text:00000000000067ED                 mov     rcx, rax
.text:00000000000067F0                 mov     esi, 1
.text:00000000000067F5                 xor     eax, eax
.text:00000000000067F7                 add     rbp, r12
.text:00000000000067FA                 call    ___fprintf_chk
.text:00000000000067FF                 mov     r15, [r14+rbx*8]
.text:0000000000006803                 test    r15, r15
.text:0000000000006806                 jz      short loc_6858
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000006808                                         ; argmatch_valid+D2↓j
.text:0000000000006808                 test    rbx, rbx
.text:000000000000680B                 jz      short loc_67D0
.text:000000000000680D                 mov     rdx, r12        ; n
.text:0000000000006810                 mov     rsi, rbp        ; s2
.text:0000000000006813                 mov     rdi, r13        ; s1
.text:0000000000006816                 call    _memcmp
.text:000000000000681B                 test    eax, eax
.text:000000000000681D                 jnz     short loc_67D0
.text:000000000000681F                 mov     rdi, r15
.text:0000000000006822                 add     rbx, 1
.text:0000000000006826                 add     rbp, r12
.text:0000000000006829                 call    quote
.text:000000000000682E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006835                 lea     rdx, aS_0       ; ", %s"
.text:000000000000683C                 mov     rcx, rax
.text:000000000000683F                 mov     esi, 1
.text:0000000000006844                 xor     eax, eax
.text:0000000000006846                 call    ___fprintf_chk
.text:000000000000684B                 mov     r15, [r14+rbx*8]
.text:000000000000684F                 test    r15, r15
.text:0000000000006852                 jnz     short loc_6808
.text:0000000000006854                 nop     dword ptr [rax+00h]
.text:0000000000006858
.text:0000000000006858 loc_6858:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000006858                                         ; argmatch_valid+86↑j
.text:0000000000006858                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000685F                 mov     rax, [rdi+28h]
.text:0000000000006863                 cmp     rax, [rdi+30h]
.text:0000000000006867                 jnb     short loc_6888
.text:0000000000006869                 lea     rdx, [rax+1]
.text:000000000000686D                 mov     [rdi+28h], rdx
.text:0000000000006871                 mov     byte ptr [rax], 0Ah
.text:0000000000006874                 add     rsp, 8
.text:0000000000006878                 pop     rbx
.text:0000000000006879                 pop     rbp
.text:000000000000687A                 pop     r12
.text:000000000000687C                 pop     r13
.text:000000000000687E                 pop     r14
.text:0000000000006880                 pop     r15
.text:0000000000006882                 retn
.text:0000000000006882 ; ---------------------------------------------------------------------------
.text:0000000000006883                 align 8
.text:0000000000006888
.text:0000000000006888 loc_6888:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000006888                 add     rsp, 8
.text:000000000000688C                 mov     esi, 0Ah        ; int
.text:0000000000006891                 pop     rbx
.text:0000000000006892                 pop     rbp
.text:0000000000006893                 pop     r12
.text:0000000000006895                 pop     r13
.text:0000000000006897                 pop     r14
.text:0000000000006899                 pop     r15
.text:000000000000689B                 jmp     ___overflow
.text:000000000000689B ; } // starts at 6780
.text:000000000000689B argmatch_valid  endp
.text:000000000000689B
.text:00000000000068A0
.text:00000000000068A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068A0
.text:00000000000068A0 ; Attributes: info_from_lumina
.text:00000000000068A0
.text:00000000000068A0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:00000000000068A0                 public __xargmatch_internal
.text:00000000000068A0 __xargmatch_internal proc near          ; CODE XREF: main+3F9↑p
.text:00000000000068A0 ; __unwind {
.text:00000000000068A0                 push    r15
.text:00000000000068A2                 push    r14
.text:00000000000068A4                 mov     r14, rdi
.text:00000000000068A7                 push    r13
.text:00000000000068A9                 push    r12
.text:00000000000068AB                 mov     r12, rsi
.text:00000000000068AE                 push    rbp
.text:00000000000068AF                 push    rbx
.text:00000000000068B0                 mov     rbp, rcx
.text:00000000000068B3                 mov     rbx, rdx
.text:00000000000068B6                 mov     rcx, r8
.text:00000000000068B9                 mov     rdx, rbp
.text:00000000000068BC                 sub     rsp, 8
.text:00000000000068C0                 mov     rsi, rbx
.text:00000000000068C3                 mov     rdi, r12
.text:00000000000068C6                 mov     r15, r8
.text:00000000000068C9                 mov     r13, r9
.text:00000000000068CC                 call    argmatch
.text:00000000000068D1                 test    rax, rax
.text:00000000000068D4                 js      short loc_68E5
.text:00000000000068D6
.text:00000000000068D6 loc_68D6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:00000000000068D6                 add     rsp, 8
.text:00000000000068DA                 pop     rbx
.text:00000000000068DB                 pop     rbp
.text:00000000000068DC                 pop     r12
.text:00000000000068DE                 pop     r13
.text:00000000000068E0                 pop     r14
.text:00000000000068E2                 pop     r15
.text:00000000000068E4                 retn
.text:00000000000068E5 ; ---------------------------------------------------------------------------
.text:00000000000068E5
.text:00000000000068E5 loc_68E5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:00000000000068E5                 mov     rdx, rax
.text:00000000000068E8                 mov     rsi, r12
.text:00000000000068EB                 mov     rdi, r14
.text:00000000000068EE                 call    argmatch_invalid
.text:00000000000068F3                 mov     rdx, r15
.text:00000000000068F6                 mov     rsi, rbp
.text:00000000000068F9                 mov     rdi, rbx
.text:00000000000068FC                 call    argmatch_valid
.text:0000000000006901                 call    r13
.text:0000000000006904                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000690B                 jmp     short loc_68D6
.text:000000000000690B ; } // starts at 68A0
.text:000000000000690B __xargmatch_internal endp
.text:000000000000690B
.text:000000000000690B ; ---------------------------------------------------------------------------
.text:000000000000690D                 align 10h
.text:0000000000006910
.text:0000000000006910 ; =============== S U B R O U T I N E =======================================
.text:0000000000006910
.text:0000000000006910 ; Attributes: info_from_lumina
.text:0000000000006910
.text:0000000000006910 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000006910                 public argmatch_to_argument
.text:0000000000006910 argmatch_to_argument proc near
.text:0000000000006910 ; __unwind {
.text:0000000000006910                 push    r14
.text:0000000000006912                 push    r13
.text:0000000000006914                 push    r12
.text:0000000000006916                 push    rbp
.text:0000000000006917                 push    rbx
.text:0000000000006918                 mov     r14, [rsi]
.text:000000000000691B                 test    r14, r14
.text:000000000000691E                 jz      short loc_6951
.text:0000000000006920                 mov     r12, rcx
.text:0000000000006923                 mov     r13, rdi
.text:0000000000006926                 mov     rbp, rdx
.text:0000000000006929                 lea     rbx, [rsi+8]
.text:000000000000692D                 jmp     short loc_693F
.text:000000000000692D ; ---------------------------------------------------------------------------
.text:000000000000692F                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000006930                 mov     r14, [rbx]
.text:0000000000006933                 add     rbp, r12
.text:0000000000006936                 add     rbx, 8
.text:000000000000693A                 test    r14, r14
.text:000000000000693D                 jz      short loc_6951
.text:000000000000693F
.text:000000000000693F loc_693F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000693F                 mov     rdx, r12        ; n
.text:0000000000006942                 mov     rsi, rbp        ; s2
.text:0000000000006945                 mov     rdi, r13        ; s1
.text:0000000000006948                 call    _memcmp
.text:000000000000694D                 test    eax, eax
.text:000000000000694F                 jnz     short loc_6930
.text:0000000000006951
.text:0000000000006951 loc_6951:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000006951                                         ; argmatch_to_argument+2D↑j
.text:0000000000006951                 pop     rbx
.text:0000000000006952                 mov     rax, r14
.text:0000000000006955                 pop     rbp
.text:0000000000006956                 pop     r12
.text:0000000000006958                 pop     r13
.text:000000000000695A                 pop     r14
.text:000000000000695C                 retn
.text:000000000000695C ; } // starts at 6910
.text:000000000000695C argmatch_to_argument endp
.text:000000000000695C
.text:000000000000695C ; ---------------------------------------------------------------------------
.text:000000000000695D                 align 20h
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960
.text:0000000000006960 ; __int64 __fastcall cl_strtod(char *nptr)
.text:0000000000006960                 public cl_strtod
.text:0000000000006960 cl_strtod       proc near               ; DATA XREF: main+2B9↑o
.text:0000000000006960
.text:0000000000006960 var_50          = qword ptr -50h
.text:0000000000006960 endptr          = qword ptr -40h
.text:0000000000006960 var_38          = qword ptr -38h
.text:0000000000006960 var_30          = qword ptr -30h
.text:0000000000006960
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 push    r13
.text:0000000000006962                 push    r12
.text:0000000000006964                 push    rbp
.text:0000000000006965                 push    rbx
.text:0000000000006966                 mov     rbx, rsi
.text:0000000000006969                 mov     rbp, rdi
.text:000000000000696C                 sub     rsp, 38h
.text:0000000000006970                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:0000000000006975                 mov     rax, fs:28h
.text:000000000000697E                 mov     [rsp+58h+var_30], rax
.text:0000000000006983                 xor     eax, eax
.text:0000000000006985                 call    _strtod
.text:000000000000698A                 mov     rax, [rsp+58h+endptr]
.text:000000000000698F                 movapd  xmm1, xmm0
.text:0000000000006993                 cmp     byte ptr [rax], 0
.text:0000000000006996                 jnz     short loc_69C8
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: cl_strtod+A1↓j
.text:0000000000006998                                         ; cl_strtod+AC↓j
.text:0000000000006998                 test    rbx, rbx
.text:000000000000699B                 jz      short loc_69A5
.text:000000000000699D                 mov     rax, [rsp+58h+endptr]
.text:00000000000069A2                 mov     [rbx], rax
.text:00000000000069A5
.text:00000000000069A5 loc_69A5:                               ; CODE XREF: cl_strtod+3B↑j
.text:00000000000069A5                 mov     rax, [rsp+58h+var_30]
.text:00000000000069AA                 xor     rax, fs:28h
.text:00000000000069B3                 movapd  xmm0, xmm1
.text:00000000000069B7                 jnz     short loc_6A0E
.text:00000000000069B9                 add     rsp, 38h
.text:00000000000069BD                 pop     rbx
.text:00000000000069BE                 pop     rbp
.text:00000000000069BF                 pop     r12
.text:00000000000069C1                 pop     r13
.text:00000000000069C3                 retn
.text:00000000000069C3 ; ---------------------------------------------------------------------------
.text:00000000000069C4                 align 8
.text:00000000000069C8
.text:00000000000069C8 loc_69C8:                               ; CODE XREF: cl_strtod+36↑j
.text:00000000000069C8                 movsd   [rsp+58h+var_50], xmm0
.text:00000000000069CE                 call    ___errno_location
.text:00000000000069D3                 lea     rsi, [rsp+58h+var_38] ; endptr
.text:00000000000069D8                 mov     rdi, rbp        ; nptr
.text:00000000000069DB                 mov     r12, rax
.text:00000000000069DE                 mov     r13d, [rax]
.text:00000000000069E1                 call    c_strtod
.text:00000000000069E6                 mov     rax, [rsp+58h+var_38]
.text:00000000000069EB                 cmp     [rsp+58h+endptr], rax
.text:00000000000069F0                 movsd   xmm1, [rsp+58h+var_50]
.text:00000000000069F6                 jnb     short loc_6A08
.text:00000000000069F8                 mov     [rsp+58h+endptr], rax
.text:00000000000069FD                 movapd  xmm1, xmm0
.text:0000000000006A01                 jmp     short loc_6998
.text:0000000000006A01 ; ---------------------------------------------------------------------------
.text:0000000000006A03                 align 8
.text:0000000000006A08
.text:0000000000006A08 loc_6A08:                               ; CODE XREF: cl_strtod+96↑j
.text:0000000000006A08                 mov     [r12], r13d
.text:0000000000006A0C                 jmp     short loc_6998
.text:0000000000006A0E ; ---------------------------------------------------------------------------
.text:0000000000006A0E
.text:0000000000006A0E loc_6A0E:                               ; CODE XREF: cl_strtod+57↑j
.text:0000000000006A0E                 call    ___stack_chk_fail
.text:0000000000006A0E ; } // starts at 6960
.text:0000000000006A0E cl_strtod       endp
.text:0000000000006A0E
.text:0000000000006A0E ; ---------------------------------------------------------------------------
.text:0000000000006A13                 align 20h
.text:0000000000006A20
.text:0000000000006A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A20
.text:0000000000006A20
.text:0000000000006A20                 public close_stdout_set_file_name
.text:0000000000006A20 close_stdout_set_file_name proc near
.text:0000000000006A20 ; __unwind {
.text:0000000000006A20                 mov     cs:file_name, rdi
.text:0000000000006A27                 retn
.text:0000000000006A27 ; } // starts at 6A20
.text:0000000000006A27 close_stdout_set_file_name endp
.text:0000000000006A27
.text:0000000000006A27 ; ---------------------------------------------------------------------------
.text:0000000000006A28                 align 10h
.text:0000000000006A30
.text:0000000000006A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A30
.text:0000000000006A30
.text:0000000000006A30                 public close_stdout_set_ignore_EPIPE
.text:0000000000006A30 close_stdout_set_ignore_EPIPE proc near
.text:0000000000006A30 ; __unwind {
.text:0000000000006A30                 mov     cs:ignore_EPIPE, dil
.text:0000000000006A37                 retn
.text:0000000000006A37 ; } // starts at 6A30
.text:0000000000006A37 close_stdout_set_ignore_EPIPE endp
.text:0000000000006A37
.text:0000000000006A37 ; ---------------------------------------------------------------------------
.text:0000000000006A38                 align 20h
.text:0000000000006A40
.text:0000000000006A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A40
.text:0000000000006A40 ; Attributes: info_from_lumina
.text:0000000000006A40
.text:0000000000006A40 ; void __cdecl close_stdout()
.text:0000000000006A40                 public close_stdout
.text:0000000000006A40 close_stdout    proc near               ; DATA XREF: main+6D↑o
.text:0000000000006A40 ; __unwind {
.text:0000000000006A40                 push    rbp
.text:0000000000006A41                 push    rbx
.text:0000000000006A42                 sub     rsp, 8
.text:0000000000006A46                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000006A4D                 call    close_stream
.text:0000000000006A52                 test    eax, eax
.text:0000000000006A54                 jz      short loc_6A6C
.text:0000000000006A56                 call    ___errno_location
.text:0000000000006A5B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000006A62                 mov     rbx, rax
.text:0000000000006A65                 jz      short loc_6A83
.text:0000000000006A67                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000006A6A                 jnz     short loc_6A83
.text:0000000000006A6C
.text:0000000000006A6C loc_6A6C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000006A6C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006A73                 call    close_stream
.text:0000000000006A78                 test    eax, eax
.text:0000000000006A7A                 jnz     short loc_6AC2
.text:0000000000006A7C                 add     rsp, 8
.text:0000000000006A80                 pop     rbx
.text:0000000000006A81                 pop     rbp
.text:0000000000006A82                 retn
.text:0000000000006A83 ; ---------------------------------------------------------------------------
.text:0000000000006A83
.text:0000000000006A83 loc_6A83:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000006A83                                         ; close_stdout+2A↑j
.text:0000000000006A83                 lea     rsi, aWriteError ; "write error"
.text:0000000000006A8A                 xor     edi, edi        ; domainname
.text:0000000000006A8C                 mov     edx, 5          ; category
.text:0000000000006A91                 call    _dcgettext
.text:0000000000006A96                 mov     rdi, cs:file_name
.text:0000000000006A9D                 mov     rbp, rax
.text:0000000000006AA0                 test    rdi, rdi
.text:0000000000006AA3                 jz      short loc_6ACD
.text:0000000000006AA5                 call    quotearg_colon
.text:0000000000006AAA                 mov     esi, [rbx]      ; errnum
.text:0000000000006AAC                 lea     rdx, format     ; "%s: %s"
.text:0000000000006AB3                 mov     rcx, rax
.text:0000000000006AB6                 mov     r8, rbp
.text:0000000000006AB9                 xor     edi, edi        ; status
.text:0000000000006ABB                 xor     eax, eax
.text:0000000000006ABD                 call    _error
.text:0000000000006AC2
.text:0000000000006AC2 loc_6AC2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000006AC2                                         ; close_stdout+A2↓j
.text:0000000000006AC2                 mov     edi, cs:exit_failure ; status
.text:0000000000006AC8                 call    __exit
.text:0000000000006ACD ; ---------------------------------------------------------------------------
.text:0000000000006ACD
.text:0000000000006ACD loc_6ACD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000006ACD                 mov     esi, [rbx]      ; errnum
.text:0000000000006ACF                 lea     rdx, aS_0+2     ; format
.text:0000000000006AD6                 mov     rcx, rax
.text:0000000000006AD9                 xor     edi, edi        ; status
.text:0000000000006ADB                 xor     eax, eax
.text:0000000000006ADD                 call    _error
.text:0000000000006AE2                 jmp     short loc_6AC2
.text:0000000000006AE2 ; } // starts at 6A40
.text:0000000000006AE2 close_stdout    endp
.text:0000000000006AE2
.text:0000000000006AE2 ; ---------------------------------------------------------------------------
.text:0000000000006AE4                 align 10h
.text:0000000000006AF0
.text:0000000000006AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AF0
.text:0000000000006AF0 ; Attributes: info_from_lumina
.text:0000000000006AF0
.text:0000000000006AF0 ; size_t __fastcall dir_len(const char *file)
.text:0000000000006AF0                 public dir_len
.text:0000000000006AF0 dir_len         proc near               ; CODE XREF: main+1EC9↑p
.text:0000000000006AF0                                         ; mdir_name+9↓p
.text:0000000000006AF0 ; __unwind {
.text:0000000000006AF0                 push    rbp
.text:0000000000006AF1                 push    rbx
.text:0000000000006AF2                 xor     ebp, ebp
.text:0000000000006AF4                 mov     rbx, rdi
.text:0000000000006AF7                 sub     rsp, 8
.text:0000000000006AFB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:0000000000006AFE                 setz    bpl
.text:0000000000006B02                 call    last_component
.text:0000000000006B07                 mov     rcx, rax
.text:0000000000006B0A                 sub     rcx, rbx
.text:0000000000006B0D                 cmp     rcx, rbp
.text:0000000000006B10                 jbe     short loc_6B40
.text:0000000000006B12                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000006B16                 lea     rdx, [rcx-1]
.text:0000000000006B1A                 jz      short loc_6B2E
.text:0000000000006B1C                 jmp     short loc_6B40
.text:0000000000006B1C ; ---------------------------------------------------------------------------
.text:0000000000006B1E                 align 20h
.text:0000000000006B20
.text:0000000000006B20 loc_6B20:                               ; CODE XREF: dir_len+41↓j
.text:0000000000006B20                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006B25                 lea     rax, [rdx-1]
.text:0000000000006B29                 jnz     short loc_6B33
.text:0000000000006B2B                 mov     rdx, rax
.text:0000000000006B2E
.text:0000000000006B2E loc_6B2E:                               ; CODE XREF: dir_len+2A↑j
.text:0000000000006B2E                 cmp     rbp, rdx
.text:0000000000006B31                 jnz     short loc_6B20
.text:0000000000006B33
.text:0000000000006B33 loc_6B33:                               ; CODE XREF: dir_len+39↑j
.text:0000000000006B33                 add     rsp, 8
.text:0000000000006B37                 mov     rax, rdx
.text:0000000000006B3A                 pop     rbx
.text:0000000000006B3B                 pop     rbp
.text:0000000000006B3C                 retn
.text:0000000000006B3C ; ---------------------------------------------------------------------------
.text:0000000000006B3D                 align 20h
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: dir_len+20↑j
.text:0000000000006B40                                         ; dir_len+2C↑j
.text:0000000000006B40                 add     rsp, 8
.text:0000000000006B44                 mov     rdx, rcx
.text:0000000000006B47                 mov     rax, rdx
.text:0000000000006B4A                 pop     rbx
.text:0000000000006B4B                 pop     rbp
.text:0000000000006B4C                 retn
.text:0000000000006B4C ; } // starts at 6AF0
.text:0000000000006B4C dir_len         endp
.text:0000000000006B4C
.text:0000000000006B4C ; ---------------------------------------------------------------------------
.text:0000000000006B4D                 align 10h
.text:0000000000006B50
.text:0000000000006B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B50
.text:0000000000006B50 ; Attributes: info_from_lumina
.text:0000000000006B50
.text:0000000000006B50 ; char *__fastcall mdir_name(const char *file)
.text:0000000000006B50                 public mdir_name
.text:0000000000006B50 mdir_name       proc near
.text:0000000000006B50 ; __unwind {
.text:0000000000006B50                 push    rbp
.text:0000000000006B51                 push    rbx
.text:0000000000006B52                 mov     rbp, rdi
.text:0000000000006B55                 sub     rsp, 8
.text:0000000000006B59                 call    dir_len
.text:0000000000006B5E                 test    rax, rax
.text:0000000000006B61                 mov     rbx, rax
.text:0000000000006B64                 setz    al
.text:0000000000006B67                 movzx   eax, al
.text:0000000000006B6A                 lea     rdi, [rbx+rax+1] ; size
.text:0000000000006B6F                 call    _malloc
.text:0000000000006B74                 test    rax, rax
.text:0000000000006B77                 mov     rcx, rax
.text:0000000000006B7A                 jz      short loc_6B96
.text:0000000000006B7C                 mov     rdx, rbx        ; n
.text:0000000000006B7F                 mov     rsi, rbp        ; src
.text:0000000000006B82                 mov     rdi, rax        ; dest
.text:0000000000006B85                 call    _memcpy
.text:0000000000006B8A                 test    rbx, rbx
.text:0000000000006B8D                 mov     rcx, rax
.text:0000000000006B90                 jz      short loc_6BA0
.text:0000000000006B92
.text:0000000000006B92 loc_6B92:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000006B92                 mov     byte ptr [rcx+rbx], 0
.text:0000000000006B96
.text:0000000000006B96 loc_6B96:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000006B96                 add     rsp, 8
.text:0000000000006B9A                 mov     rax, rcx
.text:0000000000006B9D                 pop     rbx
.text:0000000000006B9E                 pop     rbp
.text:0000000000006B9F                 retn
.text:0000000000006BA0 ; ---------------------------------------------------------------------------
.text:0000000000006BA0
.text:0000000000006BA0 loc_6BA0:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000006BA0                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000006BA3                 mov     ebx, 1
.text:0000000000006BA8                 jmp     short loc_6B92
.text:0000000000006BA8 ; } // starts at 6B50
.text:0000000000006BA8 mdir_name       endp
.text:0000000000006BA8
.text:0000000000006BA8 ; ---------------------------------------------------------------------------
.text:0000000000006BAA                 align 10h
.text:0000000000006BB0
.text:0000000000006BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BB0
.text:0000000000006BB0 ; Attributes: info_from_lumina
.text:0000000000006BB0
.text:0000000000006BB0 ; char *__fastcall last_component(const char *name)
.text:0000000000006BB0                 public last_component
.text:0000000000006BB0 last_component  proc near               ; CODE XREF: main+1EE4↑p
.text:0000000000006BB0                                         ; dir_len+12↑p
.text:0000000000006BB0 ; __unwind {
.text:0000000000006BB0                 movzx   edx, byte ptr [rdi]
.text:0000000000006BB3                 mov     rax, rdi
.text:0000000000006BB6                 cmp     dl, 2Fh ; '/'
.text:0000000000006BB9                 jnz     short loc_6BCC
.text:0000000000006BBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006BC0
.text:0000000000006BC0 loc_6BC0:                               ; CODE XREF: last_component+1A↓j
.text:0000000000006BC0                 add     rax, 1
.text:0000000000006BC4                 movzx   edx, byte ptr [rax]
.text:0000000000006BC7                 cmp     dl, 2Fh ; '/'
.text:0000000000006BCA                 jz      short loc_6BC0
.text:0000000000006BCC
.text:0000000000006BCC loc_6BCC:                               ; CODE XREF: last_component+9↑j
.text:0000000000006BCC                 test    dl, dl
.text:0000000000006BCE                 jz      short locret_6C0A
.text:0000000000006BD0                 mov     rcx, rax
.text:0000000000006BD3                 xor     esi, esi
.text:0000000000006BD5                 jmp     short loc_6BF5
.text:0000000000006BD5 ; ---------------------------------------------------------------------------
.text:0000000000006BD7                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: last_component+48↓j
.text:0000000000006BE0                 test    sil, sil
.text:0000000000006BE3                 jz      short loc_6BEA
.text:0000000000006BE5                 mov     rax, rcx
.text:0000000000006BE8                 xor     esi, esi
.text:0000000000006BEA
.text:0000000000006BEA loc_6BEA:                               ; CODE XREF: last_component+33↑j
.text:0000000000006BEA                 add     rcx, 1
.text:0000000000006BEE                 movzx   edx, byte ptr [rcx]
.text:0000000000006BF1                 test    dl, dl
.text:0000000000006BF3                 jz      short locret_6C0A
.text:0000000000006BF5
.text:0000000000006BF5 loc_6BF5:                               ; CODE XREF: last_component+25↑j
.text:0000000000006BF5                                         ; last_component+58↓j
.text:0000000000006BF5                 cmp     dl, 2Fh ; '/'
.text:0000000000006BF8                 jnz     short loc_6BE0
.text:0000000000006BFA                 add     rcx, 1
.text:0000000000006BFE                 movzx   edx, byte ptr [rcx]
.text:0000000000006C01                 mov     esi, 1
.text:0000000000006C06                 test    dl, dl
.text:0000000000006C08                 jnz     short loc_6BF5
.text:0000000000006C0A
.text:0000000000006C0A locret_6C0A:                            ; CODE XREF: last_component+1E↑j
.text:0000000000006C0A                                         ; last_component+43↑j
.text:0000000000006C0A                 rep retn
.text:0000000000006C0A ; } // starts at 6BB0
.text:0000000000006C0A last_component  endp
.text:0000000000006C0A
.text:0000000000006C0A ; ---------------------------------------------------------------------------
.text:0000000000006C0C                 align 10h
.text:0000000000006C10
.text:0000000000006C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C10
.text:0000000000006C10 ; Attributes: info_from_lumina
.text:0000000000006C10
.text:0000000000006C10 ; size_t __fastcall base_len(const char *name)
.text:0000000000006C10                 public base_len
.text:0000000000006C10 base_len        proc near
.text:0000000000006C10 ; __unwind {
.text:0000000000006C10                 push    rbx
.text:0000000000006C11                 mov     rbx, rdi
.text:0000000000006C14                 call    _strlen
.text:0000000000006C19                 cmp     rax, 1
.text:0000000000006C1D                 jbe     short loc_6C2A
.text:0000000000006C1F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000006C24                 lea     rdx, [rax-1]
.text:0000000000006C28                 jz      short loc_6C38
.text:0000000000006C2A
.text:0000000000006C2A loc_6C2A:                               ; CODE XREF: base_len+D↑j
.text:0000000000006C2A                 pop     rbx
.text:0000000000006C2B                 retn
.text:0000000000006C2B ; ---------------------------------------------------------------------------
.text:0000000000006C2C                 align 10h
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: base_len+37↓j
.text:0000000000006C30                 mov     rdx, rax
.text:0000000000006C33                 nop     dword ptr [rax+rax+00h]
.text:0000000000006C38
.text:0000000000006C38 loc_6C38:                               ; CODE XREF: base_len+18↑j
.text:0000000000006C38                 cmp     rdx, 1
.text:0000000000006C3C                 jz      short loc_6C50
.text:0000000000006C3E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000006C43                 lea     rax, [rdx-1]
.text:0000000000006C47                 jz      short loc_6C30
.text:0000000000006C49                 mov     rax, rdx
.text:0000000000006C4C                 pop     rbx
.text:0000000000006C4D                 retn
.text:0000000000006C4D ; ---------------------------------------------------------------------------
.text:0000000000006C4E                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: base_len+2C↑j
.text:0000000000006C50                 mov     eax, 1
.text:0000000000006C55                 pop     rbx
.text:0000000000006C56                 retn
.text:0000000000006C56 ; } // starts at 6C10
.text:0000000000006C56 base_len        endp
.text:0000000000006C56
.text:0000000000006C56 ; ---------------------------------------------------------------------------
.text:0000000000006C57                 align 20h
.text:0000000000006C60
.text:0000000000006C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C60
.text:0000000000006C60
.text:0000000000006C60                 public open_safer
.text:0000000000006C60 open_safer      proc near               ; CODE XREF: main+9E5↑p
.text:0000000000006C60                                         ; recheck+6F↑p
.text:0000000000006C60
.text:0000000000006C60 var_58          = dword ptr -58h
.text:0000000000006C60 var_50          = qword ptr -50h
.text:0000000000006C60 var_48          = qword ptr -48h
.text:0000000000006C60 var_40          = qword ptr -40h
.text:0000000000006C60 var_38          = byte ptr -38h
.text:0000000000006C60 var_28          = qword ptr -28h
.text:0000000000006C60 arg_0           = byte ptr  8
.text:0000000000006C60
.text:0000000000006C60 ; __unwind {
.text:0000000000006C60                 sub     rsp, 58h
.text:0000000000006C64                 mov     [rsp+58h+var_28], rdx
.text:0000000000006C69                 xor     edx, edx
.text:0000000000006C6B                 mov     rax, fs:28h
.text:0000000000006C74                 mov     [rsp+58h+var_40], rax
.text:0000000000006C79                 xor     eax, eax
.text:0000000000006C7B                 test    sil, 40h
.text:0000000000006C7F                 jnz     short loc_6CA8
.text:0000000000006C81
.text:0000000000006C81 loc_6C81:                               ; CODE XREF: open_safer+67↓j
.text:0000000000006C81                 xor     eax, eax
.text:0000000000006C83                 call    _open
.text:0000000000006C88                 mov     edi, eax        ; fd
.text:0000000000006C8A                 call    fd_safer_flag
.text:0000000000006C8F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000006C94                 xor     rcx, fs:28h
.text:0000000000006C9D                 jnz     short loc_6CC9
.text:0000000000006C9F                 add     rsp, 58h
.text:0000000000006CA3                 retn
.text:0000000000006CA3 ; ---------------------------------------------------------------------------
.text:0000000000006CA4                 align 8
.text:0000000000006CA8
.text:0000000000006CA8 loc_6CA8:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000006CA8                 lea     rax, [rsp+58h+arg_0]
.text:0000000000006CAD                 mov     [rsp+58h+var_58], 10h
.text:0000000000006CB4                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000006CB8                 mov     [rsp+58h+var_50], rax
.text:0000000000006CBD                 lea     rax, [rsp+58h+var_38]
.text:0000000000006CC2                 mov     [rsp+58h+var_48], rax
.text:0000000000006CC7                 jmp     short loc_6C81
.text:0000000000006CC9 ; ---------------------------------------------------------------------------
.text:0000000000006CC9
.text:0000000000006CC9 loc_6CC9:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000006CC9                 call    ___stack_chk_fail
.text:0000000000006CC9 ; } // starts at 6C60
.text:0000000000006CC9 open_safer      endp
.text:0000000000006CC9
.text:0000000000006CC9 ; ---------------------------------------------------------------------------
.text:0000000000006CCE                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006CD0
.text:0000000000006CD0 ; Attributes: info_from_lumina
.text:0000000000006CD0
.text:0000000000006CD0 ; size_t __fastcall next_prime(size_t candidate)
.text:0000000000006CD0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:0000000000006CD0                                         ; hash_rehash+7B↓p
.text:0000000000006CD0 ; __unwind {
.text:0000000000006CD0                 cmp     rdi, 0Ah
.text:0000000000006CD4                 mov     eax, 0Ah
.text:0000000000006CD9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:0000000000006CE3                 cmovb   rdi, rax
.text:0000000000006CE7                 or      rdi, 1
.text:0000000000006CEB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006CEF                 jz      short loc_6D5F
.text:0000000000006CF1                 nop     dword ptr [rax+00000000h]
.text:0000000000006CF8
.text:0000000000006CF8 loc_6CF8:                               ; CODE XREF: next_prime+8D↓j
.text:0000000000006CF8                 mov     rax, rdi
.text:0000000000006CFB                 mov     rcx, rdi
.text:0000000000006CFE                 mul     r9
.text:0000000000006D01                 mov     rax, rdx
.text:0000000000006D04                 shr     rax, 1
.text:0000000000006D07                 lea     rax, [rax+rax*2]
.text:0000000000006D0B                 sub     rcx, rax
.text:0000000000006D0E                 cmp     rdi, 9
.text:0000000000006D12                 mov     rax, rcx
.text:0000000000006D15                 jbe     short loc_6D50
.text:0000000000006D17                 test    rcx, rcx
.text:0000000000006D1A                 jz      short loc_6D55
.text:0000000000006D1C                 mov     r8d, 10h
.text:0000000000006D22                 mov     esi, 9
.text:0000000000006D27                 mov     ecx, 3
.text:0000000000006D2C                 jmp     short loc_6D39
.text:0000000000006D2C ; ---------------------------------------------------------------------------
.text:0000000000006D2E                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000006D30                 add     r8, 8
.text:0000000000006D34                 test    rdx, rdx
.text:0000000000006D37                 jz      short loc_6D55
.text:0000000000006D39
.text:0000000000006D39 loc_6D39:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000006D39                 add     rcx, 2
.text:0000000000006D3D                 xor     edx, edx
.text:0000000000006D3F                 mov     rax, rdi
.text:0000000000006D42                 div     rcx
.text:0000000000006D45                 add     rsi, r8
.text:0000000000006D48                 cmp     rsi, rdi
.text:0000000000006D4B                 mov     rax, rdx
.text:0000000000006D4E                 jb      short loc_6D30
.text:0000000000006D50
.text:0000000000006D50 loc_6D50:                               ; CODE XREF: next_prime+45↑j
.text:0000000000006D50                 test    rax, rax
.text:0000000000006D53                 jnz     short loc_6D5F
.text:0000000000006D55
.text:0000000000006D55 loc_6D55:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000006D55                                         ; next_prime+67↑j
.text:0000000000006D55                 add     rdi, 2
.text:0000000000006D59                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D5D                 jnz     short loc_6CF8
.text:0000000000006D5F
.text:0000000000006D5F loc_6D5F:                               ; CODE XREF: next_prime+1F↑j
.text:0000000000006D5F                                         ; next_prime+83↑j
.text:0000000000006D5F                 mov     rax, rdi
.text:0000000000006D62                 retn
.text:0000000000006D62 ; } // starts at 6CD0
.text:0000000000006D62 next_prime      endp
.text:0000000000006D62
.text:0000000000006D62 ; ---------------------------------------------------------------------------
.text:0000000000006D63                 align 10h
.text:0000000000006D70
.text:0000000000006D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D70
.text:0000000000006D70
.text:0000000000006D70 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000006D70 ; __unwind {
.text:0000000000006D70                 mov     rax, rdi
.text:0000000000006D73                 xor     edx, edx
.text:0000000000006D75                 ror     rax, 3
.text:0000000000006D79                 div     rsi
.text:0000000000006D7C                 mov     rax, rdx
.text:0000000000006D7F                 retn
.text:0000000000006D7F ; } // starts at 6D70
.text:0000000000006D7F raw_hasher      endp
.text:0000000000006D7F
.text:0000000000006D80
.text:0000000000006D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D80
.text:0000000000006D80
.text:0000000000006D80 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000006D80 ; __unwind {
.text:0000000000006D80                 cmp     rdi, rsi
.text:0000000000006D83                 setz    al
.text:0000000000006D86                 retn
.text:0000000000006D86 ; } // starts at 6D80
.text:0000000000006D86 raw_comparator  endp
.text:0000000000006D86
.text:0000000000006D86 ; ---------------------------------------------------------------------------
.text:0000000000006D87                 align 10h
.text:0000000000006D90
.text:0000000000006D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D90
.text:0000000000006D90 ; Attributes: info_from_lumina
.text:0000000000006D90
.text:0000000000006D90 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000006D90 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000006D90                                         ; transfer_entries+65↓p ...
.text:0000000000006D90 ; __unwind {
.text:0000000000006D90                 push    rbx
.text:0000000000006D91                 mov     rbx, rdi
.text:0000000000006D94                 mov     rdi, rsi
.text:0000000000006D97                 mov     rsi, [rbx+10h]
.text:0000000000006D9B                 call    qword ptr [rbx+30h]
.text:0000000000006D9E                 cmp     [rbx+10h], rax
.text:0000000000006DA2                 jbe     short loc_6DAD
.text:0000000000006DA4                 shl     rax, 4
.text:0000000000006DA8                 add     rax, [rbx]
.text:0000000000006DAB                 pop     rbx
.text:0000000000006DAC                 retn
.text:0000000000006DAD ; ---------------------------------------------------------------------------
.text:0000000000006DAD
.text:0000000000006DAD loc_6DAD:                               ; CODE XREF: safe_hasher+12↑j
.text:0000000000006DAD                 call    _abort
.text:0000000000006DAD ; } // starts at 6D90
.text:0000000000006DAD safe_hasher     endp
.text:0000000000006DAD
.text:0000000000006DAD ; ---------------------------------------------------------------------------
.text:0000000000006DB2                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DC0
.text:0000000000006DC0 ; Attributes: info_from_lumina
.text:0000000000006DC0
.text:0000000000006DC0 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000006DC0 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000006DC0                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000006DC0 ; __unwind {
.text:0000000000006DC0                 push    r14
.text:0000000000006DC2                 push    r13
.text:0000000000006DC4                 mov     r14, rdx
.text:0000000000006DC7                 push    r12
.text:0000000000006DC9                 push    rbp
.text:0000000000006DCA                 mov     r12, rdi
.text:0000000000006DCD                 push    rbx
.text:0000000000006DCE                 mov     rbp, rsi
.text:0000000000006DD1                 mov     r13d, ecx
.text:0000000000006DD4                 call    safe_hasher
.text:0000000000006DD9                 mov     [r14], rax
.text:0000000000006DDC                 mov     rsi, [rax]
.text:0000000000006DDF                 test    rsi, rsi
.text:0000000000006DE2                 jz      loc_6ED0
.text:0000000000006DE8                 cmp     rsi, rbp
.text:0000000000006DEB                 mov     rbx, rax
.text:0000000000006DEE                 jz      loc_6E83
.text:0000000000006DF4                 mov     rdi, rbp
.text:0000000000006DF7                 call    qword ptr [r12+38h]
.text:0000000000006DFC                 test    al, al
.text:0000000000006DFE                 jnz     loc_6E80
.text:0000000000006E04                 mov     rax, [rbx+8]
.text:0000000000006E08                 test    rax, rax
.text:0000000000006E0B                 jz      loc_6ED0
.text:0000000000006E11                 mov     rsi, [rax]
.text:0000000000006E14                 cmp     rbp, rsi
.text:0000000000006E17                 jnz     short loc_6E39
.text:0000000000006E19                 jmp     short loc_6E4C
.text:0000000000006E19 ; ---------------------------------------------------------------------------
.text:0000000000006E1B                 align 20h
.text:0000000000006E20
.text:0000000000006E20 loc_6E20:                               ; CODE XREF: hash_find_entry+83↓j
.text:0000000000006E20                 mov     rbx, [rbx+8]
.text:0000000000006E24                 mov     rax, [rbx+8]
.text:0000000000006E28                 test    rax, rax
.text:0000000000006E2B                 jz      loc_6ED0
.text:0000000000006E31                 mov     rsi, [rax]
.text:0000000000006E34                 cmp     rsi, rbp
.text:0000000000006E37                 jz      short loc_6E4C
.text:0000000000006E39
.text:0000000000006E39 loc_6E39:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000006E39                 mov     rdi, rbp
.text:0000000000006E3C                 call    qword ptr [r12+38h]
.text:0000000000006E41                 test    al, al
.text:0000000000006E43                 jz      short loc_6E20
.text:0000000000006E45                 mov     rax, [rbx+8]
.text:0000000000006E49                 mov     rsi, [rax]
.text:0000000000006E4C
.text:0000000000006E4C loc_6E4C:                               ; CODE XREF: hash_find_entry+59↑j
.text:0000000000006E4C                                         ; hash_find_entry+77↑j
.text:0000000000006E4C                 test    r13b, r13b
.text:0000000000006E4F                 jz      short loc_6E6E
.text:0000000000006E51                 mov     rdx, [rax+8]
.text:0000000000006E55                 mov     [rbx+8], rdx
.text:0000000000006E59                 mov     qword ptr [rax], 0
.text:0000000000006E60                 mov     rdx, [r12+48h]
.text:0000000000006E65                 mov     [rax+8], rdx
.text:0000000000006E69                 mov     [r12+48h], rax
.text:0000000000006E6E
.text:0000000000006E6E loc_6E6E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:0000000000006E6E                                         ; hash_find_entry+C6↓j ...
.text:0000000000006E6E                 pop     rbx
.text:0000000000006E6F                 mov     rax, rsi
.text:0000000000006E72                 pop     rbp
.text:0000000000006E73                 pop     r12
.text:0000000000006E75                 pop     r13
.text:0000000000006E77                 pop     r14
.text:0000000000006E79                 retn
.text:0000000000006E79 ; ---------------------------------------------------------------------------
.text:0000000000006E7A                 align 20h
.text:0000000000006E80
.text:0000000000006E80 loc_6E80:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000006E80                 mov     rsi, [rbx]
.text:0000000000006E83
.text:0000000000006E83 loc_6E83:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000006E83                 test    r13b, r13b
.text:0000000000006E86                 jz      short loc_6E6E
.text:0000000000006E88                 mov     rax, [rbx+8]
.text:0000000000006E8C                 test    rax, rax
.text:0000000000006E8F                 jz      short loc_6EC0
.text:0000000000006E91                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000006E95                 movups  xmmword ptr [rbx], xmm0
.text:0000000000006E98                 mov     qword ptr [rax], 0
.text:0000000000006E9F                 mov     rdx, [r12+48h]
.text:0000000000006EA4                 mov     [rax+8], rdx
.text:0000000000006EA8                 mov     [r12+48h], rax
.text:0000000000006EAD                 mov     rax, rsi
.text:0000000000006EB0                 pop     rbx
.text:0000000000006EB1                 pop     rbp
.text:0000000000006EB2                 pop     r12
.text:0000000000006EB4                 pop     r13
.text:0000000000006EB6                 pop     r14
.text:0000000000006EB8                 retn
.text:0000000000006EB8 ; ---------------------------------------------------------------------------
.text:0000000000006EB9                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 loc_6EC0:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000006EC0                 mov     qword ptr [rbx], 0
.text:0000000000006EC7                 jmp     short loc_6E6E
.text:0000000000006EC7 ; ---------------------------------------------------------------------------
.text:0000000000006EC9                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: hash_find_entry+22↑j
.text:0000000000006ED0                                         ; hash_find_entry+4B↑j ...
.text:0000000000006ED0                 xor     esi, esi
.text:0000000000006ED2                 pop     rbx
.text:0000000000006ED3                 mov     rax, rsi
.text:0000000000006ED6                 pop     rbp
.text:0000000000006ED7                 pop     r12
.text:0000000000006ED9                 pop     r13
.text:0000000000006EDB                 pop     r14
.text:0000000000006EDD                 retn
.text:0000000000006EDD ; } // starts at 6DC0
.text:0000000000006EDD hash_find_entry endp
.text:0000000000006EDD
.text:0000000000006EDD ; ---------------------------------------------------------------------------
.text:0000000000006EDE                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EE0
.text:0000000000006EE0 ; Attributes: info_from_lumina
.text:0000000000006EE0
.text:0000000000006EE0 ; _Bool check_tuning(Hash_table *table)
.text:0000000000006EE0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:0000000000006EE0                                         ; hash_initialize+11B↓p ...
.text:0000000000006EE0 ; __unwind {
.text:0000000000006EE0                 mov     rdx, [rdi]
.text:0000000000006EE3                 lea     rcx, default_tuning
.text:0000000000006EEA                 mov     eax, 1
.text:0000000000006EEF                 cmp     rdx, rcx
.text:0000000000006EF2                 jz      short locret_6F55
.text:0000000000006EF4                 movss   xmm0, dword ptr [rdx+8]
.text:0000000000006EF9                 ucomiss xmm0, cs:dword_CA54
.text:0000000000006F00                 jbe     short loc_6F50
.text:0000000000006F02                 movss   xmm1, cs:dword_CA58
.text:0000000000006F0A                 ucomiss xmm1, xmm0
.text:0000000000006F0D                 jbe     short loc_6F50
.text:0000000000006F0F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:0000000000006F14                 ucomiss xmm1, cs:dword_CA5C
.text:0000000000006F1B                 jbe     short loc_6F50
.text:0000000000006F1D                 movss   xmm1, dword ptr [rdx]
.text:0000000000006F21                 ucomiss xmm1, cs:dword_CA60
.text:0000000000006F28                 jb      short loc_6F50
.text:0000000000006F2A                 addss   xmm1, cs:dword_CA54
.text:0000000000006F32                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000006F37                 ucomiss xmm2, xmm1
.text:0000000000006F3A                 jbe     short loc_6F50
.text:0000000000006F3C                 movss   xmm3, cs:dword_CA64
.text:0000000000006F44                 ucomiss xmm3, xmm2
.text:0000000000006F47                 jb      short loc_6F50
.text:0000000000006F49                 ucomiss xmm0, xmm1
.text:0000000000006F4C                 ja      short locret_6F55
.text:0000000000006F4E                 xchg    ax, ax
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000006F50                                         ; check_tuning+2D↑j ...
.text:0000000000006F50                 mov     [rdi], rcx
.text:0000000000006F53                 xor     eax, eax
.text:0000000000006F55
.text:0000000000006F55 locret_6F55:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000006F55                                         ; check_tuning+6C↑j
.text:0000000000006F55                 rep retn
.text:0000000000006F55 ; } // starts at 6EE0
.text:0000000000006F55 check_tuning    endp
.text:0000000000006F55
.text:0000000000006F55 ; ---------------------------------------------------------------------------
.text:0000000000006F57                 align 20h
.text:0000000000006F60
.text:0000000000006F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F60
.text:0000000000006F60 ; Attributes: info_from_lumina
.text:0000000000006F60
.text:0000000000006F60 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000006F60 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000006F60                                         ; hash_rehash+152↓p ...
.text:0000000000006F60 ; __unwind {
.text:0000000000006F60                 push    r15
.text:0000000000006F62                 push    r14
.text:0000000000006F64                 push    r13
.text:0000000000006F66                 push    r12
.text:0000000000006F68                 push    rbp
.text:0000000000006F69                 push    rbx
.text:0000000000006F6A                 sub     rsp, 8
.text:0000000000006F6E                 mov     r12, [rsi]
.text:0000000000006F71                 cmp     r12, [rsi+8]
.text:0000000000006F75                 jnb     loc_7058
.text:0000000000006F7B                 mov     rbp, rdi
.text:0000000000006F7E                 mov     r13, rsi
.text:0000000000006F81                 mov     r14d, edx
.text:0000000000006F84                 nop     dword ptr [rax+00h]
.text:0000000000006F88
.text:0000000000006F88 loc_6F88:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000006F88                 mov     r15, [r12]
.text:0000000000006F8C                 test    r15, r15
.text:0000000000006F8F                 jz      loc_704A
.text:0000000000006F95                 mov     rbx, [r12+8]
.text:0000000000006F9A                 test    rbx, rbx
.text:0000000000006F9D                 jnz     short loc_6FBC
.text:0000000000006F9F                 jmp     short loc_6FFB
.text:0000000000006F9F ; ---------------------------------------------------------------------------
.text:0000000000006FA1                 align 8
.text:0000000000006FA8
.text:0000000000006FA8 loc_6FA8:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000006FA8                 mov     rcx, [rax+8]
.text:0000000000006FAC                 test    rdx, rdx
.text:0000000000006FAF                 mov     [rbx+8], rcx
.text:0000000000006FB3                 mov     [rax+8], rbx
.text:0000000000006FB7                 mov     rbx, rdx
.text:0000000000006FBA                 jz      short loc_6FF7
.text:0000000000006FBC
.text:0000000000006FBC loc_6FBC:                               ; CODE XREF: transfer_entries+3D↑j
.text:0000000000006FBC                                         ; transfer_entries+95↓j
.text:0000000000006FBC                 mov     r15, [rbx]
.text:0000000000006FBF                 mov     rdi, rbp
.text:0000000000006FC2                 mov     rsi, r15
.text:0000000000006FC5                 call    safe_hasher
.text:0000000000006FCA                 cmp     qword ptr [rax], 0
.text:0000000000006FCE                 mov     rdx, [rbx+8]
.text:0000000000006FD2                 jnz     short loc_6FA8
.text:0000000000006FD4                 mov     [rax], r15
.text:0000000000006FD7                 add     qword ptr [rbp+18h], 1
.text:0000000000006FDC                 test    rdx, rdx
.text:0000000000006FDF                 mov     qword ptr [rbx], 0
.text:0000000000006FE6                 mov     rax, [rbp+48h]
.text:0000000000006FEA                 mov     [rbx+8], rax
.text:0000000000006FEE                 mov     [rbp+48h], rbx
.text:0000000000006FF2                 mov     rbx, rdx
.text:0000000000006FF5                 jnz     short loc_6FBC
.text:0000000000006FF7
.text:0000000000006FF7 loc_6FF7:                               ; CODE XREF: transfer_entries+5A↑j
.text:0000000000006FF7                 mov     r15, [r12]
.text:0000000000006FFB
.text:0000000000006FFB loc_6FFB:                               ; CODE XREF: transfer_entries+3F↑j
.text:0000000000006FFB                 test    r14b, r14b
.text:0000000000006FFE                 mov     qword ptr [r12+8], 0
.text:0000000000007007                 jnz     short loc_704A
.text:0000000000007009                 mov     rsi, r15
.text:000000000000700C                 mov     rdi, rbp
.text:000000000000700F                 call    safe_hasher
.text:0000000000007014                 cmp     qword ptr [rax], 0
.text:0000000000007018                 mov     rbx, rax
.text:000000000000701B                 jz      short loc_7070
.text:000000000000701D                 mov     rax, [rbp+48h]
.text:0000000000007021                 test    rax, rax
.text:0000000000007024                 jz      short loc_7080
.text:0000000000007026                 mov     rdx, [rax+8]
.text:000000000000702A                 mov     [rbp+48h], rdx
.text:000000000000702E
.text:000000000000702E loc_702E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000702E                 mov     rdx, [rbx+8]
.text:0000000000007032                 mov     [rax], r15
.text:0000000000007035                 mov     [rax+8], rdx
.text:0000000000007039                 mov     [rbx+8], rax
.text:000000000000703D
.text:000000000000703D loc_703D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000703D                 mov     qword ptr [r12], 0
.text:0000000000007045                 sub     qword ptr [r13+18h], 1
.text:000000000000704A
.text:000000000000704A loc_704A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000704A                                         ; transfer_entries+A7↑j
.text:000000000000704A                 add     r12, 10h
.text:000000000000704E                 cmp     [r13+8], r12
.text:0000000000007052                 ja      loc_6F88
.text:0000000000007058
.text:0000000000007058 loc_7058:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000007058                 add     rsp, 8
.text:000000000000705C                 mov     eax, 1
.text:0000000000007061                 pop     rbx
.text:0000000000007062                 pop     rbp
.text:0000000000007063                 pop     r12
.text:0000000000007065                 pop     r13
.text:0000000000007067                 pop     r14
.text:0000000000007069                 pop     r15
.text:000000000000706B                 retn
.text:000000000000706B ; ---------------------------------------------------------------------------
.text:000000000000706C                 align 10h
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000007070                 mov     [rax], r15
.text:0000000000007073                 add     qword ptr [rbp+18h], 1
.text:0000000000007078                 jmp     short loc_703D
.text:0000000000007078 ; ---------------------------------------------------------------------------
.text:000000000000707A                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000007080                 mov     edi, 10h        ; size
.text:0000000000007085                 call    _malloc
.text:000000000000708A                 test    rax, rax
.text:000000000000708D                 jnz     short loc_702E
.text:000000000000708F                 add     rsp, 8
.text:0000000000007093                 xor     eax, eax
.text:0000000000007095                 pop     rbx
.text:0000000000007096                 pop     rbp
.text:0000000000007097                 pop     r12
.text:0000000000007099                 pop     r13
.text:000000000000709B                 pop     r14
.text:000000000000709D                 pop     r15
.text:000000000000709F                 retn
.text:000000000000709F ; } // starts at 6F60
.text:000000000000709F transfer_entries endp
.text:000000000000709F
.text:00000000000070A0
.text:00000000000070A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070A0
.text:00000000000070A0
.text:00000000000070A0                 public hash_get_n_buckets
.text:00000000000070A0 hash_get_n_buckets proc near
.text:00000000000070A0 ; __unwind {
.text:00000000000070A0                 mov     rax, [rdi+10h]
.text:00000000000070A4                 retn
.text:00000000000070A4 ; } // starts at 70A0
.text:00000000000070A4 hash_get_n_buckets endp
.text:00000000000070A4
.text:00000000000070A4 ; ---------------------------------------------------------------------------
.text:00000000000070A5                 align 10h
.text:00000000000070B0
.text:00000000000070B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070B0
.text:00000000000070B0
.text:00000000000070B0                 public hash_get_n_buckets_used
.text:00000000000070B0 hash_get_n_buckets_used proc near
.text:00000000000070B0 ; __unwind {
.text:00000000000070B0                 mov     rax, [rdi+18h]
.text:00000000000070B4                 retn
.text:00000000000070B4 ; } // starts at 70B0
.text:00000000000070B4 hash_get_n_buckets_used endp
.text:00000000000070B4
.text:00000000000070B4 ; ---------------------------------------------------------------------------
.text:00000000000070B5                 align 20h
.text:00000000000070C0
.text:00000000000070C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070C0
.text:00000000000070C0
.text:00000000000070C0                 public hash_get_n_entries
.text:00000000000070C0 hash_get_n_entries proc near            ; CODE XREF: main+233B↑p
.text:00000000000070C0 ; __unwind {
.text:00000000000070C0                 mov     rax, [rdi+20h]
.text:00000000000070C4                 retn
.text:00000000000070C4 ; } // starts at 70C0
.text:00000000000070C4 hash_get_n_entries endp
.text:00000000000070C4
.text:00000000000070C4 ; ---------------------------------------------------------------------------
.text:00000000000070C5                 align 10h
.text:00000000000070D0
.text:00000000000070D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070D0
.text:00000000000070D0 ; Attributes: info_from_lumina
.text:00000000000070D0
.text:00000000000070D0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000070D0                 public hash_get_max_bucket_length
.text:00000000000070D0 hash_get_max_bucket_length proc near
.text:00000000000070D0 ; __unwind {
.text:00000000000070D0                 mov     rsi, [rdi]
.text:00000000000070D3                 mov     rdi, [rdi+8]
.text:00000000000070D7                 xor     eax, eax
.text:00000000000070D9                 cmp     rsi, rdi
.text:00000000000070DC                 jnb     short locret_7117
.text:00000000000070DE                 xchg    ax, ax
.text:00000000000070E0
.text:00000000000070E0 loc_70E0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:00000000000070E0                 cmp     qword ptr [rsi], 0
.text:00000000000070E4                 jz      short loc_710C
.text:00000000000070E6                 mov     rdx, [rsi+8]
.text:00000000000070EA                 mov     ecx, 1
.text:00000000000070EF                 test    rdx, rdx
.text:00000000000070F2                 jz      short loc_7105
.text:00000000000070F4                 nop     dword ptr [rax+00h]
.text:00000000000070F8
.text:00000000000070F8 loc_70F8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:00000000000070F8                 mov     rdx, [rdx+8]
.text:00000000000070FC                 add     rcx, 1
.text:0000000000007100                 test    rdx, rdx
.text:0000000000007103                 jnz     short loc_70F8
.text:0000000000007105
.text:0000000000007105 loc_7105:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:0000000000007105                 cmp     rax, rcx
.text:0000000000007108                 cmovb   rax, rcx
.text:000000000000710C
.text:000000000000710C loc_710C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000710C                 add     rsi, 10h
.text:0000000000007110                 cmp     rsi, rdi
.text:0000000000007113                 jb      short loc_70E0
.text:0000000000007115                 rep retn
.text:0000000000007117 ; ---------------------------------------------------------------------------
.text:0000000000007117
.text:0000000000007117 locret_7117:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:0000000000007117                 rep retn
.text:0000000000007117 ; } // starts at 70D0
.text:0000000000007117 hash_get_max_bucket_length endp
.text:0000000000007117
.text:0000000000007117 ; ---------------------------------------------------------------------------
.text:0000000000007119                 align 20h
.text:0000000000007120
.text:0000000000007120 ; =============== S U B R O U T I N E =======================================
.text:0000000000007120
.text:0000000000007120 ; Attributes: info_from_lumina
.text:0000000000007120
.text:0000000000007120 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:0000000000007120                 public hash_table_ok
.text:0000000000007120 hash_table_ok   proc near
.text:0000000000007120 ; __unwind {
.text:0000000000007120                 mov     rcx, [rdi]
.text:0000000000007123                 mov     r8, [rdi+8]
.text:0000000000007127                 xor     edx, edx
.text:0000000000007129                 xor     esi, esi
.text:000000000000712B                 cmp     rcx, r8
.text:000000000000712E                 jnb     short loc_7166
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000007130                 cmp     qword ptr [rcx], 0
.text:0000000000007134                 jz      short loc_715D
.text:0000000000007136                 mov     rax, [rcx+8]
.text:000000000000713A                 add     rsi, 1
.text:000000000000713E                 add     rdx, 1
.text:0000000000007142                 test    rax, rax
.text:0000000000007145                 jz      short loc_715D
.text:0000000000007147                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000007150                 mov     rax, [rax+8]
.text:0000000000007154                 add     rdx, 1
.text:0000000000007158                 test    rax, rax
.text:000000000000715B                 jnz     short loc_7150
.text:000000000000715D
.text:000000000000715D loc_715D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000715D                                         ; hash_table_ok+25↑j
.text:000000000000715D                 add     rcx, 10h
.text:0000000000007161                 cmp     rcx, r8
.text:0000000000007164                 jb      short loc_7130
.text:0000000000007166
.text:0000000000007166 loc_7166:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000007166                 xor     eax, eax
.text:0000000000007168                 cmp     [rdi+18h], rsi
.text:000000000000716C                 jz      short loc_7170
.text:000000000000716E                 rep retn
.text:0000000000007170 ; ---------------------------------------------------------------------------
.text:0000000000007170
.text:0000000000007170 loc_7170:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000007170                 cmp     [rdi+20h], rdx
.text:0000000000007174                 setz    al
.text:0000000000007177                 retn
.text:0000000000007177 ; } // starts at 7120
.text:0000000000007177 hash_table_ok   endp
.text:0000000000007177
.text:0000000000007177 ; ---------------------------------------------------------------------------
.text:0000000000007178                 align 20h
.text:0000000000007180
.text:0000000000007180 ; =============== S U B R O U T I N E =======================================
.text:0000000000007180
.text:0000000000007180 ; Attributes: info_from_lumina
.text:0000000000007180
.text:0000000000007180 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000007180                 public hash_print_statistics
.text:0000000000007180 hash_print_statistics proc near
.text:0000000000007180 ; __unwind {
.text:0000000000007180                 push    r13
.text:0000000000007182                 push    r12
.text:0000000000007184                 mov     r12, rsi
.text:0000000000007187                 push    rbp
.text:0000000000007188                 push    rbx
.text:0000000000007189                 xor     ebx, ebx
.text:000000000000718B                 sub     rsp, 8
.text:000000000000718F                 mov     rsi, [rdi]
.text:0000000000007192                 mov     rcx, [rdi+20h]
.text:0000000000007196                 mov     rbp, [rdi+10h]
.text:000000000000719A                 mov     r13, [rdi+18h]
.text:000000000000719E                 mov     rdi, [rdi+8]
.text:00000000000071A2                 cmp     rsi, rdi
.text:00000000000071A5                 jnb     short loc_71E5
.text:00000000000071A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: hash_print_statistics+63↓j
.text:00000000000071B0                 cmp     qword ptr [rsi], 0
.text:00000000000071B4                 jz      short loc_71DC
.text:00000000000071B6                 mov     rax, [rsi+8]
.text:00000000000071BA                 mov     edx, 1
.text:00000000000071BF                 test    rax, rax
.text:00000000000071C2                 jz      short loc_71D5
.text:00000000000071C4                 nop     dword ptr [rax+00h]
.text:00000000000071C8
.text:00000000000071C8 loc_71C8:                               ; CODE XREF: hash_print_statistics+53↓j
.text:00000000000071C8                 mov     rax, [rax+8]
.text:00000000000071CC                 add     rdx, 1
.text:00000000000071D0                 test    rax, rax
.text:00000000000071D3                 jnz     short loc_71C8
.text:00000000000071D5
.text:00000000000071D5 loc_71D5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000071D5                 cmp     rbx, rdx
.text:00000000000071D8                 cmovb   rbx, rdx
.text:00000000000071DC
.text:00000000000071DC loc_71DC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000071DC                 add     rsi, 10h
.text:00000000000071E0                 cmp     rsi, rdi
.text:00000000000071E3                 jb      short loc_71B0
.text:00000000000071E5
.text:00000000000071E5 loc_71E5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:00000000000071E5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:00000000000071EC                 mov     esi, 1
.text:00000000000071F1                 mov     rdi, r12
.text:00000000000071F4                 xor     eax, eax
.text:00000000000071F6                 call    ___fprintf_chk
.text:00000000000071FB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:0000000000007202                 xor     eax, eax
.text:0000000000007204                 mov     rcx, rbp
.text:0000000000007207                 mov     esi, 1
.text:000000000000720C                 mov     rdi, r12
.text:000000000000720F                 call    ___fprintf_chk
.text:0000000000007214                 test    r13, r13
.text:0000000000007217                 js      short loc_7280
.text:0000000000007219                 pxor    xmm0, xmm0
.text:000000000000721D                 test    rbp, rbp
.text:0000000000007220                 cvtsi2sd xmm0, r13
.text:0000000000007225                 mulsd   xmm0, cs:qword_CA78
.text:000000000000722D                 js      short loc_72A9
.text:000000000000722F
.text:000000000000722F loc_722F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000722F                 pxor    xmm1, xmm1
.text:0000000000007233                 cvtsi2sd xmm1, rbp
.text:0000000000007238
.text:0000000000007238 loc_7238:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000007238                 divsd   xmm0, xmm1
.text:000000000000723C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000007243                 mov     rcx, r13
.text:0000000000007246                 mov     rdi, r12
.text:0000000000007249                 mov     esi, 1
.text:000000000000724E                 mov     eax, 1
.text:0000000000007253                 call    ___fprintf_chk
.text:0000000000007258                 add     rsp, 8
.text:000000000000725C                 mov     rcx, rbx
.text:000000000000725F                 mov     rdi, r12
.text:0000000000007262                 pop     rbx
.text:0000000000007263                 pop     rbp
.text:0000000000007264                 pop     r12
.text:0000000000007266                 pop     r13
.text:0000000000007268                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000726F                 mov     esi, 1
.text:0000000000007274                 xor     eax, eax
.text:0000000000007276                 jmp     ___fprintf_chk
.text:0000000000007276 ; ---------------------------------------------------------------------------
.text:000000000000727B                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000007280                 mov     rax, r13
.text:0000000000007283                 mov     rdx, r13
.text:0000000000007286                 pxor    xmm0, xmm0
.text:000000000000728A                 shr     rax, 1
.text:000000000000728D                 and     edx, 1
.text:0000000000007290                 or      rax, rdx
.text:0000000000007293                 test    rbp, rbp
.text:0000000000007296                 cvtsi2sd xmm0, rax
.text:000000000000729B                 addsd   xmm0, xmm0
.text:000000000000729F                 mulsd   xmm0, cs:qword_CA78
.text:00000000000072A7                 jns     short loc_722F
.text:00000000000072A9
.text:00000000000072A9 loc_72A9:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:00000000000072A9                 mov     rax, rbp
.text:00000000000072AC                 pxor    xmm1, xmm1
.text:00000000000072B0                 shr     rax, 1
.text:00000000000072B3                 and     ebp, 1
.text:00000000000072B6                 or      rax, rbp
.text:00000000000072B9                 cvtsi2sd xmm1, rax
.text:00000000000072BE                 addsd   xmm1, xmm1
.text:00000000000072C2                 jmp     loc_7238
.text:00000000000072C2 ; } // starts at 7180
.text:00000000000072C2 hash_print_statistics endp
.text:00000000000072C2
.text:00000000000072C2 ; ---------------------------------------------------------------------------
.text:00000000000072C7                 align 10h
.text:00000000000072D0
.text:00000000000072D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072D0
.text:00000000000072D0 ; Attributes: info_from_lumina
.text:00000000000072D0
.text:00000000000072D0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000072D0                 public hash_lookup
.text:00000000000072D0 hash_lookup     proc near               ; CODE XREF: main+2480↑p
.text:00000000000072D0 ; __unwind {
.text:00000000000072D0                 push    r12
.text:00000000000072D2                 push    rbp
.text:00000000000072D3                 mov     r12, rdi
.text:00000000000072D6                 push    rbx
.text:00000000000072D7                 mov     rbp, rsi
.text:00000000000072DA                 call    safe_hasher
.text:00000000000072DF                 mov     rsi, [rax]
.text:00000000000072E2                 test    rsi, rsi
.text:00000000000072E5                 jz      short loc_730D
.text:00000000000072E7                 mov     rbx, rax
.text:00000000000072EA                 jmp     short loc_72F3
.text:00000000000072EA ; ---------------------------------------------------------------------------
.text:00000000000072EC                 align 10h
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000072F0                 mov     rsi, [rbx]
.text:00000000000072F3
.text:00000000000072F3 loc_72F3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000072F3                 cmp     rsi, rbp
.text:00000000000072F6                 jz      short loc_730F
.text:00000000000072F8                 mov     rdi, rbp
.text:00000000000072FB                 call    qword ptr [r12+38h]
.text:0000000000007300                 test    al, al
.text:0000000000007302                 jnz     short loc_7320
.text:0000000000007304                 mov     rbx, [rbx+8]
.text:0000000000007308                 test    rbx, rbx
.text:000000000000730B                 jnz     short loc_72F0
.text:000000000000730D
.text:000000000000730D loc_730D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000730D                 xor     esi, esi
.text:000000000000730F
.text:000000000000730F loc_730F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000730F                 pop     rbx
.text:0000000000007310                 mov     rax, rsi
.text:0000000000007313                 pop     rbp
.text:0000000000007314                 pop     r12
.text:0000000000007316                 retn
.text:0000000000007316 ; ---------------------------------------------------------------------------
.text:0000000000007317                 align 20h
.text:0000000000007320
.text:0000000000007320 loc_7320:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000007320                 mov     rsi, [rbx]
.text:0000000000007323                 pop     rbx
.text:0000000000007324                 pop     rbp
.text:0000000000007325                 mov     rax, rsi
.text:0000000000007328                 pop     r12
.text:000000000000732A                 retn
.text:000000000000732A ; } // starts at 72D0
.text:000000000000732A hash_lookup     endp
.text:000000000000732A
.text:000000000000732A ; ---------------------------------------------------------------------------
.text:000000000000732B                 align 10h
.text:0000000000007330
.text:0000000000007330 ; =============== S U B R O U T I N E =======================================
.text:0000000000007330
.text:0000000000007330 ; Attributes: info_from_lumina
.text:0000000000007330
.text:0000000000007330 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000007330                 public hash_get_first
.text:0000000000007330 hash_get_first  proc near
.text:0000000000007330 ; __unwind {
.text:0000000000007330                 cmp     qword ptr [rdi+20h], 0
.text:0000000000007335                 jz      short loc_7363
.text:0000000000007337                 mov     rdx, [rdi]
.text:000000000000733A                 mov     rcx, [rdi+8]
.text:000000000000733E                 cmp     rdx, rcx
.text:0000000000007341                 jnb     short loc_7368
.text:0000000000007343                 mov     rax, [rdx]
.text:0000000000007346                 test    rax, rax
.text:0000000000007349                 jnz     short locret_7366
.text:000000000000734B                 nop     dword ptr [rax+rax+00h]
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000007350                 add     rdx, 10h
.text:0000000000007354                 cmp     rdx, rcx
.text:0000000000007357                 jnb     short loc_7368
.text:0000000000007359                 mov     rax, [rdx]
.text:000000000000735C                 test    rax, rax
.text:000000000000735F                 jz      short loc_7350
.text:0000000000007361                 rep retn
.text:0000000000007363 ; ---------------------------------------------------------------------------
.text:0000000000007363
.text:0000000000007363 loc_7363:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000007363                 xor     eax, eax
.text:0000000000007365                 retn
.text:0000000000007366 ; ---------------------------------------------------------------------------
.text:0000000000007366
.text:0000000000007366 locret_7366:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000007366                 rep retn
.text:0000000000007368 ; ---------------------------------------------------------------------------
.text:0000000000007368
.text:0000000000007368 loc_7368:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000007368                                         ; hash_get_first+27↑j
.text:0000000000007368                 sub     rsp, 8
.text:000000000000736C                 call    _abort
.text:000000000000736C ; } // starts at 7330
.text:000000000000736C hash_get_first  endp
.text:000000000000736C
.text:000000000000736C ; ---------------------------------------------------------------------------
.text:0000000000007371                 align 20h
.text:0000000000007380
.text:0000000000007380 ; =============== S U B R O U T I N E =======================================
.text:0000000000007380
.text:0000000000007380 ; Attributes: info_from_lumina
.text:0000000000007380
.text:0000000000007380 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000007380                 public hash_get_next
.text:0000000000007380 hash_get_next   proc near
.text:0000000000007380 ; __unwind {
.text:0000000000007380                 push    rbp
.text:0000000000007381                 push    rbx
.text:0000000000007382                 mov     rbp, rdi
.text:0000000000007385                 mov     rbx, rsi
.text:0000000000007388                 sub     rsp, 8
.text:000000000000738C                 call    safe_hasher
.text:0000000000007391                 mov     rdx, rax
.text:0000000000007394                 mov     rcx, rax
.text:0000000000007397                 mov     rax, [rdx]
.text:000000000000739A                 mov     rdx, [rdx+8]
.text:000000000000739E                 cmp     rax, rbx
.text:00000000000073A1                 jz      short loc_73B9
.text:00000000000073A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000073A8
.text:00000000000073A8 loc_73A8:                               ; CODE XREF: hash_get_next+37↓j
.text:00000000000073A8                 test    rdx, rdx
.text:00000000000073AB                 jz      short loc_73BE
.text:00000000000073AD                 mov     rax, [rdx]
.text:00000000000073B0                 mov     rdx, [rdx+8]
.text:00000000000073B4                 cmp     rax, rbx
.text:00000000000073B7                 jnz     short loc_73A8
.text:00000000000073B9
.text:00000000000073B9 loc_73B9:                               ; CODE XREF: hash_get_next+21↑j
.text:00000000000073B9                 test    rdx, rdx
.text:00000000000073BC                 jnz     short loc_73E8
.text:00000000000073BE
.text:00000000000073BE loc_73BE:                               ; CODE XREF: hash_get_next+2B↑j
.text:00000000000073BE                 mov     rdx, [rbp+8]
.text:00000000000073C2                 jmp     short loc_73D0
.text:00000000000073C2 ; ---------------------------------------------------------------------------
.text:00000000000073C4                 align 8
.text:00000000000073C8
.text:00000000000073C8 loc_73C8:                               ; CODE XREF: hash_get_next+57↓j
.text:00000000000073C8                 mov     rax, [rcx]
.text:00000000000073CB                 test    rax, rax
.text:00000000000073CE                 jnz     short loc_73DB
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000073D0                 add     rcx, 10h
.text:00000000000073D4                 cmp     rdx, rcx
.text:00000000000073D7                 ja      short loc_73C8
.text:00000000000073D9                 xor     eax, eax
.text:00000000000073DB
.text:00000000000073DB loc_73DB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000073DB                 add     rsp, 8
.text:00000000000073DF                 pop     rbx
.text:00000000000073E0                 pop     rbp
.text:00000000000073E1                 retn
.text:00000000000073E1 ; ---------------------------------------------------------------------------
.text:00000000000073E2                 align 8
.text:00000000000073E8
.text:00000000000073E8 loc_73E8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000073E8                 mov     rax, [rdx]
.text:00000000000073EB                 add     rsp, 8
.text:00000000000073EF                 pop     rbx
.text:00000000000073F0                 pop     rbp
.text:00000000000073F1                 retn
.text:00000000000073F1 ; } // starts at 7380
.text:00000000000073F1 hash_get_next   endp
.text:00000000000073F1
.text:00000000000073F1 ; ---------------------------------------------------------------------------
.text:00000000000073F2                 align 20h
.text:0000000000007400
.text:0000000000007400 ; =============== S U B R O U T I N E =======================================
.text:0000000000007400
.text:0000000000007400 ; Attributes: info_from_lumina
.text:0000000000007400
.text:0000000000007400 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000007400                 public hash_get_entries
.text:0000000000007400 hash_get_entries proc near
.text:0000000000007400 ; __unwind {
.text:0000000000007400                 mov     r9, [rdi]
.text:0000000000007403                 cmp     [rdi+8], r9
.text:0000000000007407                 jbe     short loc_7462
.text:0000000000007409                 xor     r8d, r8d
.text:000000000000740C
.text:000000000000740C loc_740C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000740C                 mov     rcx, [r9]
.text:000000000000740F                 test    rcx, rcx
.text:0000000000007412                 jz      short loc_744D
.text:0000000000007414                 cmp     rdx, r8
.text:0000000000007417                 jbe     short loc_7457
.text:0000000000007419                 mov     [rsi+r8*8], rcx
.text:000000000000741D                 mov     rcx, [r9+8]
.text:0000000000007421                 lea     rax, [r8+1]
.text:0000000000007425                 test    rcx, rcx
.text:0000000000007428                 jz      short loc_744A
.text:000000000000742A                 nop     word ptr [rax+rax+00h]
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000007430                 cmp     rdx, rax
.text:0000000000007433                 jz      short locret_7460
.text:0000000000007435                 mov     r8, [rcx]
.text:0000000000007438                 add     rax, 1
.text:000000000000743C                 mov     [rsi+rax*8-8], r8
.text:0000000000007441                 mov     rcx, [rcx+8]
.text:0000000000007445                 test    rcx, rcx
.text:0000000000007448                 jnz     short loc_7430
.text:000000000000744A
.text:000000000000744A loc_744A:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000744A                 mov     r8, rax
.text:000000000000744D
.text:000000000000744D loc_744D:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000744D                 add     r9, 10h
.text:0000000000007451                 cmp     [rdi+8], r9
.text:0000000000007455                 ja      short loc_740C
.text:0000000000007457
.text:0000000000007457 loc_7457:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000007457                 mov     rax, r8
.text:000000000000745A                 retn
.text:000000000000745A ; ---------------------------------------------------------------------------
.text:000000000000745B                 align 20h
.text:0000000000007460
.text:0000000000007460 locret_7460:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000007460                 rep retn
.text:0000000000007462 ; ---------------------------------------------------------------------------
.text:0000000000007462
.text:0000000000007462 loc_7462:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000007462                 xor     eax, eax
.text:0000000000007464                 retn
.text:0000000000007464 ; } // starts at 7400
.text:0000000000007464 hash_get_entries endp
.text:0000000000007464
.text:0000000000007464 ; ---------------------------------------------------------------------------
.text:0000000000007465                 align 10h
.text:0000000000007470
.text:0000000000007470 ; =============== S U B R O U T I N E =======================================
.text:0000000000007470
.text:0000000000007470 ; Attributes: info_from_lumina
.text:0000000000007470
.text:0000000000007470 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000007470                 public hash_do_for_each
.text:0000000000007470 hash_do_for_each proc near
.text:0000000000007470 ; __unwind {
.text:0000000000007470                 push    r15
.text:0000000000007472                 push    r14
.text:0000000000007474                 push    r13
.text:0000000000007476                 push    r12
.text:0000000000007478                 push    rbp
.text:0000000000007479                 push    rbx
.text:000000000000747A                 sub     rsp, 8
.text:000000000000747E                 mov     r14, [rdi]
.text:0000000000007481                 cmp     [rdi+8], r14
.text:0000000000007485                 jbe     short loc_74D6
.text:0000000000007487                 mov     r13, rdx
.text:000000000000748A                 mov     r12, rsi
.text:000000000000748D                 mov     r15, rdi
.text:0000000000007490                 xor     ebp, ebp
.text:0000000000007492
.text:0000000000007492 loc_7492:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000007492                 mov     rdi, [r14]
.text:0000000000007495                 test    rdi, rdi
.text:0000000000007498                 jz      short loc_74BA
.text:000000000000749A                 mov     rbx, r14
.text:000000000000749D                 jmp     short loc_74A3
.text:000000000000749D ; ---------------------------------------------------------------------------
.text:000000000000749F                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: hash_do_for_each+48↓j
.text:00000000000074A0                 mov     rdi, [rbx]
.text:00000000000074A3
.text:00000000000074A3 loc_74A3:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:00000000000074A3                 mov     rsi, r13
.text:00000000000074A6                 call    r12
.text:00000000000074A9                 test    al, al
.text:00000000000074AB                 jz      short loc_74C4
.text:00000000000074AD                 mov     rbx, [rbx+8]
.text:00000000000074B1                 add     rbp, 1
.text:00000000000074B5                 test    rbx, rbx
.text:00000000000074B8                 jnz     short loc_74A0
.text:00000000000074BA
.text:00000000000074BA loc_74BA:                               ; CODE XREF: hash_do_for_each+28↑j
.text:00000000000074BA                 add     r14, 10h
.text:00000000000074BE                 cmp     [r15+8], r14
.text:00000000000074C2                 ja      short loc_7492
.text:00000000000074C4
.text:00000000000074C4 loc_74C4:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:00000000000074C4                                         ; hash_do_for_each+68↓j
.text:00000000000074C4                 add     rsp, 8
.text:00000000000074C8                 mov     rax, rbp
.text:00000000000074CB                 pop     rbx
.text:00000000000074CC                 pop     rbp
.text:00000000000074CD                 pop     r12
.text:00000000000074CF                 pop     r13
.text:00000000000074D1                 pop     r14
.text:00000000000074D3                 pop     r15
.text:00000000000074D5                 retn
.text:00000000000074D6 ; ---------------------------------------------------------------------------
.text:00000000000074D6
.text:00000000000074D6 loc_74D6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:00000000000074D6                 xor     ebp, ebp
.text:00000000000074D8                 jmp     short loc_74C4
.text:00000000000074D8 ; } // starts at 7470
.text:00000000000074D8 hash_do_for_each endp
.text:00000000000074D8
.text:00000000000074D8 ; ---------------------------------------------------------------------------
.text:00000000000074DA                 align 20h
.text:00000000000074E0
.text:00000000000074E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074E0
.text:00000000000074E0 ; Attributes: info_from_lumina
.text:00000000000074E0
.text:00000000000074E0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:00000000000074E0                 public hash_string
.text:00000000000074E0 hash_string     proc near
.text:00000000000074E0 ; __unwind {
.text:00000000000074E0                 movzx   ecx, byte ptr [rdi]
.text:00000000000074E3                 xor     edx, edx
.text:00000000000074E5                 test    cl, cl
.text:00000000000074E7                 jz      short loc_750D
.text:00000000000074E9                 nop     dword ptr [rax+00000000h]
.text:00000000000074F0
.text:00000000000074F0 loc_74F0:                               ; CODE XREF: hash_string+2B↓j
.text:00000000000074F0                 mov     rax, rdx
.text:00000000000074F3                 add     rdi, 1
.text:00000000000074F7                 shl     rax, 5
.text:00000000000074FB                 sub     rax, rdx
.text:00000000000074FE                 xor     edx, edx
.text:0000000000007500                 add     rax, rcx
.text:0000000000007503                 movzx   ecx, byte ptr [rdi]
.text:0000000000007506                 div     rsi
.text:0000000000007509                 test    cl, cl
.text:000000000000750B                 jnz     short loc_74F0
.text:000000000000750D
.text:000000000000750D loc_750D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000750D                 mov     rax, rdx
.text:0000000000007510                 retn
.text:0000000000007510 ; } // starts at 74E0
.text:0000000000007510 hash_string     endp
.text:0000000000007510
.text:0000000000007510 ; ---------------------------------------------------------------------------
.text:0000000000007511                 align 20h
.text:0000000000007520
.text:0000000000007520 ; =============== S U B R O U T I N E =======================================
.text:0000000000007520
.text:0000000000007520 ; Attributes: info_from_lumina
.text:0000000000007520
.text:0000000000007520 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000007520                 public hash_reset_tuning
.text:0000000000007520 hash_reset_tuning proc near
.text:0000000000007520 ; __unwind {
.text:0000000000007520                 mov     rax, 3F80000000000000h
.text:000000000000752A                 mov     byte ptr [rdi+10h], 0
.text:000000000000752E                 mov     [rdi], rax
.text:0000000000007531                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000753B                 mov     [rdi+8], rax
.text:000000000000753F                 retn
.text:000000000000753F ; } // starts at 7520
.text:000000000000753F hash_reset_tuning endp
.text:000000000000753F
.text:0000000000007540
.text:0000000000007540 ; =============== S U B R O U T I N E =======================================
.text:0000000000007540
.text:0000000000007540 ; Attributes: info_from_lumina
.text:0000000000007540
.text:0000000000007540 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000007540                 public hash_initialize
.text:0000000000007540 hash_initialize proc near               ; CODE XREF: main+1E3F↑p
.text:0000000000007540 ; __unwind {
.text:0000000000007540                 push    r15
.text:0000000000007542                 push    r14
.text:0000000000007544                 lea     rax, raw_hasher
.text:000000000000754B                 push    r13
.text:000000000000754D                 push    r12
.text:000000000000754F                 mov     r12, rdx
.text:0000000000007552                 push    rbp
.text:0000000000007553                 push    rbx
.text:0000000000007554                 mov     r13, rcx
.text:0000000000007557                 mov     rbp, rdi
.text:000000000000755A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000755F                 mov     r15, rsi
.text:0000000000007562                 sub     rsp, 8
.text:0000000000007566                 test    rdx, rdx
.text:0000000000007569                 mov     r14, r8
.text:000000000000756C                 cmovz   r12, rax
.text:0000000000007570                 lea     rax, raw_comparator
.text:0000000000007577                 test    rcx, rcx
.text:000000000000757A                 cmovz   r13, rax
.text:000000000000757E                 call    _malloc
.text:0000000000007583                 test    rax, rax
.text:0000000000007586                 mov     rbx, rax
.text:0000000000007589                 jz      loc_763A
.text:000000000000758F                 test    r15, r15
.text:0000000000007592                 lea     rdi, [rax+28h]
.text:0000000000007596                 jz      loc_7650
.text:000000000000759C                 mov     [rax+28h], r15
.text:00000000000075A0                 call    check_tuning
.text:00000000000075A5                 test    al, al
.text:00000000000075A7                 jz      loc_7630
.text:00000000000075AD                 cmp     byte ptr [r15+10h], 0
.text:00000000000075B2                 jz      loc_76B0
.text:00000000000075B8
.text:00000000000075B8 loc_75B8:                               ; CODE XREF: hash_initialize+16A↓j
.text:00000000000075B8                                         ; hash_initialize+1A5↓j
.text:00000000000075B8                 mov     rdi, rbp
.text:00000000000075BB                 call    next_prime
.text:00000000000075C0                 mov     edx, 8
.text:00000000000075C5                 mov     rbp, rax
.text:00000000000075C8                 xor     ecx, ecx
.text:00000000000075CA                 mov     rax, rdx
.text:00000000000075CD                 mul     rbp
.text:00000000000075D0                 jo      loc_76EA
.text:00000000000075D6
.text:00000000000075D6 loc_75D6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:00000000000075D6                 test    rax, rax
.text:00000000000075D9                 js      short loc_7630
.text:00000000000075DB                 test    rcx, rcx
.text:00000000000075DE                 jnz     short loc_7630
.text:00000000000075E0                 test    rbp, rbp
.text:00000000000075E3                 mov     [rbx+10h], rbp
.text:00000000000075E7                 jz      short loc_7630
.text:00000000000075E9                 mov     esi, 10h        ; size
.text:00000000000075EE                 mov     rdi, rbp        ; nmemb
.text:00000000000075F1                 call    _calloc
.text:00000000000075F6                 test    rax, rax
.text:00000000000075F9                 mov     [rbx], rax
.text:00000000000075FC                 jz      short loc_7630
.text:00000000000075FE                 shl     rbp, 4
.text:0000000000007602                 mov     qword ptr [rbx+18h], 0
.text:000000000000760A                 mov     qword ptr [rbx+20h], 0
.text:0000000000007612                 add     rbp, rax
.text:0000000000007615                 mov     [rbx+30h], r12
.text:0000000000007619                 mov     [rbx+38h], r13
.text:000000000000761D                 mov     [rbx+8], rbp
.text:0000000000007621                 mov     [rbx+40h], r14
.text:0000000000007625                 mov     qword ptr [rbx+48h], 0
.text:000000000000762D                 jmp     short loc_763A
.text:000000000000762D ; ---------------------------------------------------------------------------
.text:000000000000762F                 align 10h
.text:0000000000007630
.text:0000000000007630 loc_7630:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000007630                                         ; hash_initialize+99↑j ...
.text:0000000000007630                 mov     rdi, rbx        ; ptr
.text:0000000000007633                 xor     ebx, ebx
.text:0000000000007635                 call    _free
.text:000000000000763A
.text:000000000000763A loc_763A:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000763A                                         ; hash_initialize+ED↑j
.text:000000000000763A                 add     rsp, 8
.text:000000000000763E                 mov     rax, rbx
.text:0000000000007641                 pop     rbx
.text:0000000000007642                 pop     rbp
.text:0000000000007643                 pop     r12
.text:0000000000007645                 pop     r13
.text:0000000000007647                 pop     r14
.text:0000000000007649                 pop     r15
.text:000000000000764B                 retn
.text:000000000000764B ; ---------------------------------------------------------------------------
.text:000000000000764C                 align 10h
.text:0000000000007650
.text:0000000000007650 loc_7650:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000007650                 lea     rax, default_tuning
.text:0000000000007657                 mov     [rbx+28h], rax
.text:000000000000765B                 call    check_tuning
.text:0000000000007660                 test    al, al
.text:0000000000007662                 movss   xmm1, cs:dword_CA68
.text:000000000000766A                 jz      short loc_7630
.text:000000000000766C                 test    rbp, rbp
.text:000000000000766F                 js      short loc_76BB
.text:0000000000007671
.text:0000000000007671 loc_7671:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000007671                 pxor    xmm0, xmm0
.text:0000000000007675                 cvtsi2ss xmm0, rbp
.text:000000000000767A
.text:000000000000767A loc_767A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000767A                 divss   xmm0, xmm1
.text:000000000000767E                 ucomiss xmm0, cs:dword_CA6C
.text:0000000000007685                 jnb     short loc_7630
.text:0000000000007687                 ucomiss xmm0, cs:dword_CA70
.text:000000000000768E                 jb      short loc_76E0
.text:0000000000007690                 subss   xmm0, cs:dword_CA70
.text:0000000000007698                 mov     rax, 8000000000000000h
.text:00000000000076A2                 cvttss2si rbp, xmm0
.text:00000000000076A7                 xor     rbp, rax
.text:00000000000076AA                 jmp     loc_75B8
.text:00000000000076AA ; ---------------------------------------------------------------------------
.text:00000000000076AF                 align 10h
.text:00000000000076B0
.text:00000000000076B0 loc_76B0:                               ; CODE XREF: hash_initialize+72↑j
.text:00000000000076B0                 test    rbp, rbp
.text:00000000000076B3                 movss   xmm1, dword ptr [r15+8]
.text:00000000000076B9                 jns     short loc_7671
.text:00000000000076BB
.text:00000000000076BB loc_76BB:                               ; CODE XREF: hash_initialize+12F↑j
.text:00000000000076BB                 mov     rax, rbp
.text:00000000000076BE                 pxor    xmm0, xmm0
.text:00000000000076C2                 shr     rax, 1
.text:00000000000076C5                 and     ebp, 1
.text:00000000000076C8                 or      rax, rbp
.text:00000000000076CB                 cvtsi2ss xmm0, rax
.text:00000000000076D0                 addss   xmm0, xmm0
.text:00000000000076D4                 jmp     short loc_767A
.text:00000000000076D4 ; ---------------------------------------------------------------------------
.text:00000000000076D6                 align 20h
.text:00000000000076E0
.text:00000000000076E0 loc_76E0:                               ; CODE XREF: hash_initialize+14E↑j
.text:00000000000076E0                 cvttss2si rbp, xmm0
.text:00000000000076E5                 jmp     loc_75B8
.text:00000000000076EA ; ---------------------------------------------------------------------------
.text:00000000000076EA
.text:00000000000076EA loc_76EA:                               ; CODE XREF: hash_initialize+90↑j
.text:00000000000076EA                 mov     ecx, 1
.text:00000000000076EF                 jmp     loc_75D6
.text:00000000000076EF ; } // starts at 7540
.text:00000000000076EF hash_initialize endp
.text:00000000000076EF
.text:00000000000076EF ; ---------------------------------------------------------------------------
.text:00000000000076F4                 align 20h
.text:0000000000007700
.text:0000000000007700 ; =============== S U B R O U T I N E =======================================
.text:0000000000007700
.text:0000000000007700 ; Attributes: info_from_lumina
.text:0000000000007700
.text:0000000000007700 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000007700                 public hash_clear
.text:0000000000007700 hash_clear      proc near
.text:0000000000007700 ; __unwind {
.text:0000000000007700                 push    r12
.text:0000000000007702                 push    rbp
.text:0000000000007703                 mov     rbp, rdi
.text:0000000000007706                 push    rbx
.text:0000000000007707                 mov     r12, [rdi]
.text:000000000000770A                 cmp     r12, [rdi+8]
.text:000000000000770E                 jnb     short loc_777B
.text:0000000000007710
.text:0000000000007710 loc_7710:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000007710                 cmp     qword ptr [r12], 0
.text:0000000000007715                 jz      short loc_7771
.text:0000000000007717                 mov     rbx, [r12+8]
.text:000000000000771C                 mov     rax, [rbp+40h]
.text:0000000000007720                 test    rbx, rbx
.text:0000000000007723                 jz      short loc_7755
.text:0000000000007725                 nop     dword ptr [rax]
.text:0000000000007728
.text:0000000000007728 loc_7728:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000007728                 test    rax, rax
.text:000000000000772B                 jz      short loc_7736
.text:000000000000772D                 mov     rdi, [rbx]
.text:0000000000007730                 call    rax
.text:0000000000007732                 mov     rax, [rbp+40h]
.text:0000000000007736
.text:0000000000007736 loc_7736:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000007736                 mov     rdx, [rbx+8]
.text:000000000000773A                 mov     rcx, [rbp+48h]
.text:000000000000773E                 mov     qword ptr [rbx], 0
.text:0000000000007745                 test    rdx, rdx
.text:0000000000007748                 mov     [rbx+8], rcx
.text:000000000000774C                 mov     [rbp+48h], rbx
.text:0000000000007750                 mov     rbx, rdx
.text:0000000000007753                 jnz     short loc_7728
.text:0000000000007755
.text:0000000000007755 loc_7755:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000007755                 test    rax, rax
.text:0000000000007758                 jz      short loc_7760
.text:000000000000775A                 mov     rdi, [r12]
.text:000000000000775E                 call    rax
.text:0000000000007760
.text:0000000000007760 loc_7760:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000007760                 mov     qword ptr [r12], 0
.text:0000000000007768                 mov     qword ptr [r12+8], 0
.text:0000000000007771
.text:0000000000007771 loc_7771:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000007771                 add     r12, 10h
.text:0000000000007775                 cmp     [rbp+8], r12
.text:0000000000007779                 ja      short loc_7710
.text:000000000000777B
.text:000000000000777B loc_777B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000777B                 mov     qword ptr [rbp+18h], 0
.text:0000000000007783                 mov     qword ptr [rbp+20h], 0
.text:000000000000778B                 pop     rbx
.text:000000000000778C                 pop     rbp
.text:000000000000778D                 pop     r12
.text:000000000000778F                 retn
.text:000000000000778F ; } // starts at 7700
.text:000000000000778F hash_clear      endp
.text:000000000000778F
.text:0000000000007790
.text:0000000000007790 ; =============== S U B R O U T I N E =======================================
.text:0000000000007790
.text:0000000000007790 ; Attributes: info_from_lumina
.text:0000000000007790
.text:0000000000007790 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000007790                 public hash_free
.text:0000000000007790 hash_free       proc near               ; CODE XREF: main+1F9D↑p
.text:0000000000007790                                         ; main+25D8↑p ...
.text:0000000000007790 ; __unwind {
.text:0000000000007790                 push    r12
.text:0000000000007792                 push    rbp
.text:0000000000007793                 mov     r12, rdi
.text:0000000000007796                 push    rbx
.text:0000000000007797                 cmp     qword ptr [rdi+40h], 0
.text:000000000000779C                 mov     rbp, [rdi]
.text:000000000000779F                 mov     rax, [rdi+8]
.text:00000000000077A3                 jz      short loc_77F3
.text:00000000000077A5                 cmp     qword ptr [rdi+20h], 0
.text:00000000000077AA                 jz      short loc_77F3
.text:00000000000077AC                 cmp     rbp, rax
.text:00000000000077AF                 jnb     short loc_782C
.text:00000000000077B1                 nop     dword ptr [rax+00000000h]
.text:00000000000077B8
.text:00000000000077B8 loc_77B8:                               ; CODE XREF: hash_free+5D↓j
.text:00000000000077B8                 mov     rdi, [rbp+0]
.text:00000000000077BC                 test    rdi, rdi
.text:00000000000077BF                 jz      short loc_77E6
.text:00000000000077C1                 mov     rbx, rbp
.text:00000000000077C4                 jmp     short loc_77D3
.text:00000000000077C4 ; ---------------------------------------------------------------------------
.text:00000000000077C6                 align 10h
.text:00000000000077D0
.text:00000000000077D0 loc_77D0:                               ; CODE XREF: hash_free+4F↓j
.text:00000000000077D0                 mov     rdi, [rbx]
.text:00000000000077D3
.text:00000000000077D3 loc_77D3:                               ; CODE XREF: hash_free+34↑j
.text:00000000000077D3                 call    qword ptr [r12+40h]
.text:00000000000077D8                 mov     rbx, [rbx+8]
.text:00000000000077DC                 test    rbx, rbx
.text:00000000000077DF                 jnz     short loc_77D0
.text:00000000000077E1                 mov     rax, [r12+8]
.text:00000000000077E6
.text:00000000000077E6 loc_77E6:                               ; CODE XREF: hash_free+2F↑j
.text:00000000000077E6                 add     rbp, 10h
.text:00000000000077EA                 cmp     rax, rbp
.text:00000000000077ED                 ja      short loc_77B8
.text:00000000000077EF                 mov     rbp, [r12]
.text:00000000000077F3
.text:00000000000077F3 loc_77F3:                               ; CODE XREF: hash_free+13↑j
.text:00000000000077F3                                         ; hash_free+1A↑j
.text:00000000000077F3                 cmp     rbp, rax
.text:00000000000077F6                 jnb     short loc_782C
.text:00000000000077F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000007800                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000007804                 test    rdi, rdi
.text:0000000000007807                 jz      short loc_7821
.text:0000000000007809                 nop     dword ptr [rax+00000000h]
.text:0000000000007810
.text:0000000000007810 loc_7810:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000007810                 mov     rbx, [rdi+8]
.text:0000000000007814                 call    _free
.text:0000000000007819                 test    rbx, rbx
.text:000000000000781C                 mov     rdi, rbx
.text:000000000000781F                 jnz     short loc_7810
.text:0000000000007821
.text:0000000000007821 loc_7821:                               ; CODE XREF: hash_free+77↑j
.text:0000000000007821                 add     rbp, 10h
.text:0000000000007825                 cmp     [r12+8], rbp
.text:000000000000782A                 ja      short loc_7800
.text:000000000000782C
.text:000000000000782C loc_782C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000782C                                         ; hash_free+66↑j
.text:000000000000782C                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000007831                 test    rdi, rdi
.text:0000000000007834                 jz      short loc_7851
.text:0000000000007836                 db      2Eh
.text:0000000000007836                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000007840                 mov     rbx, [rdi+8]
.text:0000000000007844                 call    _free
.text:0000000000007849                 test    rbx, rbx
.text:000000000000784C                 mov     rdi, rbx
.text:000000000000784F                 jnz     short loc_7840
.text:0000000000007851
.text:0000000000007851 loc_7851:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000007851                 mov     rdi, [r12]      ; ptr
.text:0000000000007855                 call    _free
.text:000000000000785A                 pop     rbx
.text:000000000000785B                 mov     rdi, r12        ; ptr
.text:000000000000785E                 pop     rbp
.text:000000000000785F                 pop     r12
.text:0000000000007861                 jmp     _free
.text:0000000000007861 ; } // starts at 7790
.text:0000000000007861 hash_free       endp
.text:0000000000007861
.text:0000000000007861 ; ---------------------------------------------------------------------------
.text:0000000000007866                 align 10h
.text:0000000000007870
.text:0000000000007870 ; =============== S U B R O U T I N E =======================================
.text:0000000000007870
.text:0000000000007870 ; Attributes: info_from_lumina
.text:0000000000007870
.text:0000000000007870 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000007870                 public hash_rehash
.text:0000000000007870 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000007870                                         ; hash_delete+10F↓p
.text:0000000000007870
.text:0000000000007870 ptr             = qword ptr -78h
.text:0000000000007870 var_70          = qword ptr -70h
.text:0000000000007870 var_68          = qword ptr -68h
.text:0000000000007870 var_60          = qword ptr -60h
.text:0000000000007870 var_58          = qword ptr -58h
.text:0000000000007870 var_50          = qword ptr -50h
.text:0000000000007870 var_48          = qword ptr -48h
.text:0000000000007870 var_40          = qword ptr -40h
.text:0000000000007870 var_38          = qword ptr -38h
.text:0000000000007870 var_30          = qword ptr -30h
.text:0000000000007870 var_20          = qword ptr -20h
.text:0000000000007870
.text:0000000000007870 ; __unwind {
.text:0000000000007870                 push    r12
.text:0000000000007872                 push    rbp
.text:0000000000007873                 mov     rbp, rdi
.text:0000000000007876                 push    rbx
.text:0000000000007877                 sub     rsp, 60h
.text:000000000000787B                 mov     r12, [rdi+28h]
.text:000000000000787F                 mov     rax, fs:28h
.text:0000000000007888                 mov     [rsp+78h+var_20], rax
.text:000000000000788D                 xor     eax, eax
.text:000000000000788F                 cmp     byte ptr [r12+10h], 0
.text:0000000000007895                 jnz     short loc_78E8
.text:0000000000007897                 test    rsi, rsi
.text:000000000000789A                 js      loc_7A18
.text:00000000000078A0                 pxor    xmm0, xmm0
.text:00000000000078A4                 cvtsi2ss xmm0, rsi
.text:00000000000078A9
.text:00000000000078A9 loc_78A9:                               ; CODE XREF: hash_rehash+1C1↓j
.text:00000000000078A9                 divss   xmm0, dword ptr [r12+8]
.text:00000000000078B0                 ucomiss xmm0, cs:dword_CA6C
.text:00000000000078B7                 jnb     loc_79F0
.text:00000000000078BD                 ucomiss xmm0, cs:dword_CA70
.text:00000000000078C4                 jb      loc_7A40
.text:00000000000078CA                 subss   xmm0, cs:dword_CA70
.text:00000000000078D2                 mov     rax, 8000000000000000h
.text:00000000000078DC                 cvttss2si rsi, xmm0
.text:00000000000078E1                 xor     rsi, rax
.text:00000000000078E4                 nop     dword ptr [rax+00h]
.text:00000000000078E8
.text:00000000000078E8 loc_78E8:                               ; CODE XREF: hash_rehash+25↑j
.text:00000000000078E8                                         ; hash_rehash+1D5↓j
.text:00000000000078E8                 mov     rdi, rsi
.text:00000000000078EB                 call    next_prime
.text:00000000000078F0                 mov     edx, 8
.text:00000000000078F5                 mov     rbx, rax
.text:00000000000078F8                 xor     ecx, ecx
.text:00000000000078FA                 mov     rax, rdx
.text:00000000000078FD                 mul     rbx
.text:0000000000007900                 jo      loc_7A9F
.text:0000000000007906
.text:0000000000007906 loc_7906:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000007906                 test    rax, rax
.text:0000000000007909                 mov     eax, 1
.text:000000000000790E                 cmovs   rcx, rax
.text:0000000000007912                 test    rbx, rbx
.text:0000000000007915                 jz      loc_79F0
.text:000000000000791B                 and     ecx, 1
.text:000000000000791E                 jnz     loc_79F0
.text:0000000000007924                 cmp     [rbp+10h], rbx
.text:0000000000007928                 jz      loc_7A50
.text:000000000000792E                 mov     esi, 10h        ; size
.text:0000000000007933                 mov     rdi, rbx        ; nmemb
.text:0000000000007936                 call    _calloc
.text:000000000000793B                 test    rax, rax
.text:000000000000793E                 mov     [rsp+78h+ptr], rax
.text:0000000000007942                 jz      loc_79F0
.text:0000000000007948                 mov     [rsp+78h+var_68], rbx
.text:000000000000794D                 shl     rbx, 4
.text:0000000000007951                 mov     [rsp+78h+var_50], r12
.text:0000000000007956                 add     rbx, rax
.text:0000000000007959                 mov     rax, [rbp+30h]
.text:000000000000795D                 mov     r12, rsp
.text:0000000000007960                 xor     edx, edx
.text:0000000000007962                 mov     rsi, rbp
.text:0000000000007965                 mov     rdi, r12
.text:0000000000007968                 mov     [rsp+78h+var_70], rbx
.text:000000000000796D                 mov     [rsp+78h+var_60], 0
.text:0000000000007976                 mov     [rsp+78h+var_48], rax
.text:000000000000797B                 mov     rax, [rbp+38h]
.text:000000000000797F                 mov     [rsp+78h+var_58], 0
.text:0000000000007988                 mov     [rsp+78h+var_40], rax
.text:000000000000798D                 mov     rax, [rbp+40h]
.text:0000000000007991                 mov     [rsp+78h+var_38], rax
.text:0000000000007996                 mov     rax, [rbp+48h]
.text:000000000000799A                 mov     [rsp+78h+var_30], rax
.text:000000000000799F                 call    transfer_entries
.text:00000000000079A4                 test    al, al
.text:00000000000079A6                 mov     ebx, eax
.text:00000000000079A8                 jnz     loc_7A60
.text:00000000000079AE                 mov     rax, [rsp+78h+var_30]
.text:00000000000079B3                 mov     edx, 1
.text:00000000000079B8                 mov     rsi, r12
.text:00000000000079BB                 mov     rdi, rbp
.text:00000000000079BE                 mov     [rbp+48h], rax
.text:00000000000079C2                 call    transfer_entries
.text:00000000000079C7                 test    al, al
.text:00000000000079C9                 jz      loc_7AA9
.text:00000000000079CF                 xor     edx, edx
.text:00000000000079D1                 mov     rsi, r12
.text:00000000000079D4                 mov     rdi, rbp
.text:00000000000079D7                 call    transfer_entries
.text:00000000000079DC                 test    al, al
.text:00000000000079DE                 jz      loc_7AA9
.text:00000000000079E4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000079E8                 call    _free
.text:00000000000079ED                 jmp     short loc_79F2
.text:00000000000079ED ; ---------------------------------------------------------------------------
.text:00000000000079EF                 align 10h
.text:00000000000079F0
.text:00000000000079F0 loc_79F0:                               ; CODE XREF: hash_rehash+47↑j
.text:00000000000079F0                                         ; hash_rehash+A5↑j ...
.text:00000000000079F0                 xor     ebx, ebx
.text:00000000000079F2
.text:00000000000079F2 loc_79F2:                               ; CODE XREF: hash_rehash+17D↑j
.text:00000000000079F2                                         ; hash_rehash+1E5↓j ...
.text:00000000000079F2                 mov     rcx, [rsp+78h+var_20]
.text:00000000000079F7                 xor     rcx, fs:28h
.text:0000000000007A00                 mov     eax, ebx
.text:0000000000007A02                 jnz     loc_7A9A
.text:0000000000007A08                 add     rsp, 60h
.text:0000000000007A0C                 pop     rbx
.text:0000000000007A0D                 pop     rbp
.text:0000000000007A0E                 pop     r12
.text:0000000000007A10                 retn
.text:0000000000007A10 ; ---------------------------------------------------------------------------
.text:0000000000007A11                 align 8
.text:0000000000007A18
.text:0000000000007A18 loc_7A18:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000007A18                 mov     rax, rsi
.text:0000000000007A1B                 pxor    xmm0, xmm0
.text:0000000000007A1F                 shr     rax, 1
.text:0000000000007A22                 and     esi, 1
.text:0000000000007A25                 or      rax, rsi
.text:0000000000007A28                 cvtsi2ss xmm0, rax
.text:0000000000007A2D                 addss   xmm0, xmm0
.text:0000000000007A31                 jmp     loc_78A9
.text:0000000000007A31 ; ---------------------------------------------------------------------------
.text:0000000000007A36                 align 20h
.text:0000000000007A40
.text:0000000000007A40 loc_7A40:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000007A40                 cvttss2si rsi, xmm0
.text:0000000000007A45                 jmp     loc_78E8
.text:0000000000007A45 ; ---------------------------------------------------------------------------
.text:0000000000007A4A                 align 10h
.text:0000000000007A50
.text:0000000000007A50 loc_7A50:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000007A50                 mov     ebx, 1
.text:0000000000007A55                 jmp     short loc_79F2
.text:0000000000007A55 ; ---------------------------------------------------------------------------
.text:0000000000007A57                 align 20h
.text:0000000000007A60
.text:0000000000007A60 loc_7A60:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000007A60                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000007A64                 call    _free
.text:0000000000007A69                 mov     rax, [rsp+78h+ptr]
.text:0000000000007A6D                 mov     [rbp+0], rax
.text:0000000000007A71                 mov     rax, [rsp+78h+var_70]
.text:0000000000007A76                 mov     [rbp+8], rax
.text:0000000000007A7A                 mov     rax, [rsp+78h+var_68]
.text:0000000000007A7F                 mov     [rbp+10h], rax
.text:0000000000007A83                 mov     rax, [rsp+78h+var_60]
.text:0000000000007A88                 mov     [rbp+18h], rax
.text:0000000000007A8C                 mov     rax, [rsp+78h+var_30]
.text:0000000000007A91                 mov     [rbp+48h], rax
.text:0000000000007A95                 jmp     loc_79F2
.text:0000000000007A9A ; ---------------------------------------------------------------------------
.text:0000000000007A9A
.text:0000000000007A9A loc_7A9A:                               ; CODE XREF: hash_rehash+192↑j
.text:0000000000007A9A                 call    ___stack_chk_fail
.text:0000000000007A9F ; ---------------------------------------------------------------------------
.text:0000000000007A9F
.text:0000000000007A9F loc_7A9F:                               ; CODE XREF: hash_rehash+90↑j
.text:0000000000007A9F                 mov     ecx, 1
.text:0000000000007AA4                 jmp     loc_7906
.text:0000000000007AA9 ; ---------------------------------------------------------------------------
.text:0000000000007AA9
.text:0000000000007AA9 loc_7AA9:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000007AA9                                         ; hash_rehash+16E↑j
.text:0000000000007AA9                 call    _abort
.text:0000000000007AA9 ; } // starts at 7870
.text:0000000000007AA9 hash_rehash     endp
.text:0000000000007AA9
.text:0000000000007AA9 ; ---------------------------------------------------------------------------
.text:0000000000007AAE                 align 10h
.text:0000000000007AB0
.text:0000000000007AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007AB0
.text:0000000000007AB0 ; Attributes: info_from_lumina
.text:0000000000007AB0
.text:0000000000007AB0 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000007AB0                 public hash_insert_if_absent
.text:0000000000007AB0 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000007AB0
.text:0000000000007AB0 var_38          = qword ptr -38h
.text:0000000000007AB0 var_30          = qword ptr -30h
.text:0000000000007AB0
.text:0000000000007AB0 ; __unwind {
.text:0000000000007AB0                 push    r13
.text:0000000000007AB2                 push    r12
.text:0000000000007AB4                 push    rbp
.text:0000000000007AB5                 push    rbx
.text:0000000000007AB6                 sub     rsp, 18h
.text:0000000000007ABA                 mov     rax, fs:28h
.text:0000000000007AC3                 mov     [rsp+38h+var_30], rax
.text:0000000000007AC8                 xor     eax, eax
.text:0000000000007ACA                 test    rsi, rsi
.text:0000000000007ACD                 jz      loc_7C8D
.text:0000000000007AD3                 mov     r12, rsp
.text:0000000000007AD6                 xor     ecx, ecx
.text:0000000000007AD8                 mov     r13, rdx
.text:0000000000007ADB                 mov     rdx, r12
.text:0000000000007ADE                 mov     rbx, rdi
.text:0000000000007AE1                 mov     rbp, rsi
.text:0000000000007AE4                 call    hash_find_entry
.text:0000000000007AE9                 test    rax, rax
.text:0000000000007AEC                 mov     rdx, rax
.text:0000000000007AEF                 jz      short loc_7B20
.text:0000000000007AF1                 xor     eax, eax
.text:0000000000007AF3                 test    r13, r13
.text:0000000000007AF6                 jz      short loc_7AFC
.text:0000000000007AF8                 mov     [r13+0], rdx
.text:0000000000007AFC
.text:0000000000007AFC loc_7AFC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:0000000000007AFC                                         ; hash_insert_if_absent+E9↓j ...
.text:0000000000007AFC                 mov     rcx, [rsp+38h+var_30]
.text:0000000000007B01                 xor     rcx, fs:28h
.text:0000000000007B0A                 jnz     loc_7D2F
.text:0000000000007B10                 add     rsp, 18h
.text:0000000000007B14                 pop     rbx
.text:0000000000007B15                 pop     rbp
.text:0000000000007B16                 pop     r12
.text:0000000000007B18                 pop     r13
.text:0000000000007B1A                 retn
.text:0000000000007B1A ; ---------------------------------------------------------------------------
.text:0000000000007B1B                 align 20h
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:0000000000007B20                 mov     rax, [rbx+18h]
.text:0000000000007B24                 test    rax, rax
.text:0000000000007B27                 js      short loc_7BA0
.text:0000000000007B29                 pxor    xmm1, xmm1
.text:0000000000007B2D                 mov     rdx, [rbx+28h]
.text:0000000000007B31                 cvtsi2ss xmm1, rax
.text:0000000000007B36                 mov     rax, [rbx+10h]
.text:0000000000007B3A                 test    rax, rax
.text:0000000000007B3D                 js      loc_7BCA
.text:0000000000007B43
.text:0000000000007B43 loc_7B43:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000007B43                 pxor    xmm0, xmm0
.text:0000000000007B47                 cvtsi2ss xmm0, rax
.text:0000000000007B4C
.text:0000000000007B4C loc_7B4C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:0000000000007B4C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000007B51                 ucomiss xmm1, xmm0
.text:0000000000007B54                 ja      loc_7BF0
.text:0000000000007B5A
.text:0000000000007B5A loc_7B5A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:0000000000007B5A                                         ; hash_insert_if_absent+1D7↓j
.text:0000000000007B5A                 mov     r12, [rsp+38h+var_38]
.text:0000000000007B5E                 cmp     qword ptr [r12], 0
.text:0000000000007B63                 jz      loc_7C98
.text:0000000000007B69                 mov     rax, [rbx+48h]
.text:0000000000007B6D                 test    rax, rax
.text:0000000000007B70                 jz      loc_7CB0
.text:0000000000007B76                 mov     rdx, [rax+8]
.text:0000000000007B7A                 mov     [rbx+48h], rdx
.text:0000000000007B7E
.text:0000000000007B7E loc_7B7E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:0000000000007B7E                 mov     rdx, [r12+8]
.text:0000000000007B83                 mov     [rax], rbp
.text:0000000000007B86                 mov     [rax+8], rdx
.text:0000000000007B8A                 mov     [r12+8], rax
.text:0000000000007B8F                 mov     eax, 1
.text:0000000000007B94                 add     qword ptr [rbx+20h], 1
.text:0000000000007B99                 jmp     loc_7AFC
.text:0000000000007B99 ; ---------------------------------------------------------------------------
.text:0000000000007B9E                 align 20h
.text:0000000000007BA0
.text:0000000000007BA0 loc_7BA0:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000007BA0                 mov     rdx, rax
.text:0000000000007BA3                 pxor    xmm1, xmm1
.text:0000000000007BA7                 and     eax, 1
.text:0000000000007BAA                 shr     rdx, 1
.text:0000000000007BAD                 or      rdx, rax
.text:0000000000007BB0                 mov     rax, [rbx+10h]
.text:0000000000007BB4                 cvtsi2ss xmm1, rdx
.text:0000000000007BB9                 mov     rdx, [rbx+28h]
.text:0000000000007BBD                 test    rax, rax
.text:0000000000007BC0                 addss   xmm1, xmm1
.text:0000000000007BC4                 jns     loc_7B43
.text:0000000000007BCA
.text:0000000000007BCA loc_7BCA:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:0000000000007BCA                 mov     rcx, rax
.text:0000000000007BCD                 pxor    xmm0, xmm0
.text:0000000000007BD1                 shr     rcx, 1
.text:0000000000007BD4                 and     eax, 1
.text:0000000000007BD7                 or      rcx, rax
.text:0000000000007BDA                 cvtsi2ss xmm0, rcx
.text:0000000000007BDF                 addss   xmm0, xmm0
.text:0000000000007BE3                 jmp     loc_7B4C
.text:0000000000007BE3 ; ---------------------------------------------------------------------------
.text:0000000000007BE8                 align 10h
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:0000000000007BF0                 lea     rdi, [rbx+28h]
.text:0000000000007BF4                 call    check_tuning
.text:0000000000007BF9                 mov     rax, [rbx+10h]
.text:0000000000007BFD                 mov     rdx, [rbx+28h]
.text:0000000000007C01                 test    rax, rax
.text:0000000000007C04                 movss   xmm2, dword ptr [rdx+8]
.text:0000000000007C09                 js      loc_7CD0
.text:0000000000007C0F                 pxor    xmm0, xmm0
.text:0000000000007C13                 cvtsi2ss xmm0, rax
.text:0000000000007C18
.text:0000000000007C18 loc_7C18:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:0000000000007C18                 mov     rax, [rbx+18h]
.text:0000000000007C1C                 test    rax, rax
.text:0000000000007C1F                 js      loc_7CF0
.text:0000000000007C25                 pxor    xmm1, xmm1
.text:0000000000007C29                 cvtsi2ss xmm1, rax
.text:0000000000007C2E
.text:0000000000007C2E loc_7C2E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:0000000000007C2E                 movaps  xmm3, xmm2
.text:0000000000007C31                 mulss   xmm3, xmm0
.text:0000000000007C35                 ucomiss xmm1, xmm3
.text:0000000000007C38                 jbe     loc_7B5A
.text:0000000000007C3E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000007C42                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000007C47                 jnz     short loc_7C4D
.text:0000000000007C49                 mulss   xmm0, xmm2
.text:0000000000007C4D
.text:0000000000007C4D loc_7C4D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:0000000000007C4D                 ucomiss xmm0, cs:dword_CA6C
.text:0000000000007C54                 jnb     short loc_7CC3
.text:0000000000007C56                 ucomiss xmm0, cs:dword_CA70
.text:0000000000007C5D                 jnb     loc_7D10
.text:0000000000007C63                 cvttss2si rsi, xmm0
.text:0000000000007C68
.text:0000000000007C68 loc_7C68:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000007C68                 mov     rdi, rbx
.text:0000000000007C6B                 call    hash_rehash
.text:0000000000007C70                 test    al, al
.text:0000000000007C72                 jz      short loc_7CC3
.text:0000000000007C74                 xor     ecx, ecx
.text:0000000000007C76                 mov     rdx, r12
.text:0000000000007C79                 mov     rsi, rbp
.text:0000000000007C7C                 mov     rdi, rbx
.text:0000000000007C7F                 call    hash_find_entry
.text:0000000000007C84                 test    rax, rax
.text:0000000000007C87                 jz      loc_7B5A
.text:0000000000007C8D
.text:0000000000007C8D loc_7C8D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:0000000000007C8D                 call    _abort
.text:0000000000007C8D ; ---------------------------------------------------------------------------
.text:0000000000007C92                 align 8
.text:0000000000007C98
.text:0000000000007C98 loc_7C98:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000007C98                 mov     [r12], rbp
.text:0000000000007C9C                 mov     eax, 1
.text:0000000000007CA1                 add     qword ptr [rbx+20h], 1
.text:0000000000007CA6                 add     qword ptr [rbx+18h], 1
.text:0000000000007CAB                 jmp     loc_7AFC
.text:0000000000007CB0 ; ---------------------------------------------------------------------------
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000007CB0                 mov     edi, 10h        ; size
.text:0000000000007CB5                 call    _malloc
.text:0000000000007CBA                 test    rax, rax
.text:0000000000007CBD                 jnz     loc_7B7E
.text:0000000000007CC3
.text:0000000000007CC3 loc_7CC3:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000007CC3                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000007CC3                 mov     eax, 0FFFFFFFFh
.text:0000000000007CC8                 jmp     loc_7AFC
.text:0000000000007CC8 ; ---------------------------------------------------------------------------
.text:0000000000007CCD                 align 10h
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:0000000000007CD0                 mov     rcx, rax
.text:0000000000007CD3                 pxor    xmm0, xmm0
.text:0000000000007CD7                 shr     rcx, 1
.text:0000000000007CDA                 and     eax, 1
.text:0000000000007CDD                 or      rcx, rax
.text:0000000000007CE0                 cvtsi2ss xmm0, rcx
.text:0000000000007CE5                 addss   xmm0, xmm0
.text:0000000000007CE9                 jmp     loc_7C18
.text:0000000000007CE9 ; ---------------------------------------------------------------------------
.text:0000000000007CEE                 align 10h
.text:0000000000007CF0
.text:0000000000007CF0 loc_7CF0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:0000000000007CF0                 mov     rcx, rax
.text:0000000000007CF3                 pxor    xmm1, xmm1
.text:0000000000007CF7                 shr     rcx, 1
.text:0000000000007CFA                 and     eax, 1
.text:0000000000007CFD                 or      rcx, rax
.text:0000000000007D00                 cvtsi2ss xmm1, rcx
.text:0000000000007D05                 addss   xmm1, xmm1
.text:0000000000007D09                 jmp     loc_7C2E
.text:0000000000007D09 ; ---------------------------------------------------------------------------
.text:0000000000007D0E                 align 10h
.text:0000000000007D10
.text:0000000000007D10 loc_7D10:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:0000000000007D10                 subss   xmm0, cs:dword_CA70
.text:0000000000007D18                 mov     rax, 8000000000000000h
.text:0000000000007D22                 cvttss2si rsi, xmm0
.text:0000000000007D27                 xor     rsi, rax
.text:0000000000007D2A                 jmp     loc_7C68
.text:0000000000007D2F ; ---------------------------------------------------------------------------
.text:0000000000007D2F
.text:0000000000007D2F loc_7D2F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:0000000000007D2F                 call    ___stack_chk_fail
.text:0000000000007D2F ; } // starts at 7AB0
.text:0000000000007D2F hash_insert_if_absent endp
.text:0000000000007D2F
.text:0000000000007D2F ; ---------------------------------------------------------------------------
.text:0000000000007D34                 align 20h
.text:0000000000007D40
.text:0000000000007D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D40
.text:0000000000007D40 ; Attributes: info_from_lumina
.text:0000000000007D40
.text:0000000000007D40 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000007D40                 public hash_insert
.text:0000000000007D40 hash_insert     proc near               ; CODE XREF: main+2021↑p
.text:0000000000007D40                                         ; main+259D↑p
.text:0000000000007D40
.text:0000000000007D40 var_18          = qword ptr -18h
.text:0000000000007D40 var_10          = qword ptr -10h
.text:0000000000007D40
.text:0000000000007D40 ; __unwind {
.text:0000000000007D40                 push    rbx
.text:0000000000007D41                 mov     rbx, rsi
.text:0000000000007D44                 sub     rsp, 10h
.text:0000000000007D48                 mov     rdx, rsp
.text:0000000000007D4B                 mov     rax, fs:28h
.text:0000000000007D54                 mov     [rsp+18h+var_10], rax
.text:0000000000007D59                 xor     eax, eax
.text:0000000000007D5B                 call    hash_insert_if_absent
.text:0000000000007D60                 cmp     eax, 0FFFFFFFFh
.text:0000000000007D63                 jz      short loc_7D90
.text:0000000000007D65                 test    eax, eax
.text:0000000000007D67                 jnz     short loc_7D6D
.text:0000000000007D69                 mov     rbx, [rsp+18h+var_18]
.text:0000000000007D6D
.text:0000000000007D6D loc_7D6D:                               ; CODE XREF: hash_insert+27↑j
.text:0000000000007D6D                                         ; hash_insert+52↓j
.text:0000000000007D6D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000007D72                 xor     rcx, fs:28h
.text:0000000000007D7B                 mov     rax, rbx
.text:0000000000007D7E                 jnz     short loc_7D94
.text:0000000000007D80                 add     rsp, 10h
.text:0000000000007D84                 pop     rbx
.text:0000000000007D85                 retn
.text:0000000000007D85 ; ---------------------------------------------------------------------------
.text:0000000000007D86                 align 10h
.text:0000000000007D90
.text:0000000000007D90 loc_7D90:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000007D90                 xor     ebx, ebx
.text:0000000000007D92                 jmp     short loc_7D6D
.text:0000000000007D94 ; ---------------------------------------------------------------------------
.text:0000000000007D94
.text:0000000000007D94 loc_7D94:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000007D94                 call    ___stack_chk_fail
.text:0000000000007D94 ; } // starts at 7D40
.text:0000000000007D94 hash_insert     endp
.text:0000000000007D94
.text:0000000000007D94 ; ---------------------------------------------------------------------------
.text:0000000000007D99                 align 20h
.text:0000000000007DA0
.text:0000000000007DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DA0
.text:0000000000007DA0 ; Attributes: info_from_lumina
.text:0000000000007DA0
.text:0000000000007DA0 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000007DA0                 public hash_delete
.text:0000000000007DA0 hash_delete     proc near               ; CODE XREF: main+2540↑p
.text:0000000000007DA0                                         ; main+2559↑p ...
.text:0000000000007DA0
.text:0000000000007DA0 var_28          = qword ptr -28h
.text:0000000000007DA0 var_20          = qword ptr -20h
.text:0000000000007DA0
.text:0000000000007DA0 ; __unwind {
.text:0000000000007DA0                 push    r12
.text:0000000000007DA2                 push    rbp
.text:0000000000007DA3                 mov     ecx, 1
.text:0000000000007DA8                 push    rbx
.text:0000000000007DA9                 mov     rbx, rdi
.text:0000000000007DAC                 sub     rsp, 10h
.text:0000000000007DB0                 mov     rdx, rsp
.text:0000000000007DB3                 mov     rax, fs:28h
.text:0000000000007DBC                 mov     [rsp+28h+var_20], rax
.text:0000000000007DC1                 xor     eax, eax
.text:0000000000007DC3                 call    hash_find_entry
.text:0000000000007DC8                 test    rax, rax
.text:0000000000007DCB                 mov     rbp, rax
.text:0000000000007DCE                 jz      short loc_7DDF
.text:0000000000007DD0                 mov     rax, [rsp+28h+var_28]
.text:0000000000007DD4                 sub     qword ptr [rbx+20h], 1
.text:0000000000007DD9                 cmp     qword ptr [rax], 0
.text:0000000000007DDD                 jz      short loc_7E00
.text:0000000000007DDF
.text:0000000000007DDF loc_7DDF:                               ; CODE XREF: hash_delete+2E↑j
.text:0000000000007DDF                                         ; hash_delete+9F↓j ...
.text:0000000000007DDF                 mov     rcx, [rsp+28h+var_20]
.text:0000000000007DE4                 xor     rcx, fs:28h
.text:0000000000007DED                 mov     rax, rbp
.text:0000000000007DF0                 jnz     loc_7F9E
.text:0000000000007DF6                 add     rsp, 10h
.text:0000000000007DFA                 pop     rbx
.text:0000000000007DFB                 pop     rbp
.text:0000000000007DFC                 pop     r12
.text:0000000000007DFE                 retn
.text:0000000000007DFE ; ---------------------------------------------------------------------------
.text:0000000000007DFF                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: hash_delete+3D↑j
.text:0000000000007E00                 mov     rax, [rbx+18h]
.text:0000000000007E04                 sub     rax, 1
.text:0000000000007E08                 test    rax, rax
.text:0000000000007E0B                 mov     [rbx+18h], rax
.text:0000000000007E0F                 js      loc_7F10
.text:0000000000007E15                 pxor    xmm0, xmm0
.text:0000000000007E19                 cvtsi2ss xmm0, rax
.text:0000000000007E1E
.text:0000000000007E1E loc_7E1E:                               ; CODE XREF: hash_delete+189↓j
.text:0000000000007E1E                 mov     rax, [rbx+10h]
.text:0000000000007E22                 mov     rdx, [rbx+28h]
.text:0000000000007E26                 test    rax, rax
.text:0000000000007E29                 js      loc_7EF0
.text:0000000000007E2F                 pxor    xmm1, xmm1
.text:0000000000007E33                 cvtsi2ss xmm1, rax
.text:0000000000007E38
.text:0000000000007E38 loc_7E38:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000007E38                 mulss   xmm1, dword ptr [rdx]
.text:0000000000007E3C                 ucomiss xmm1, xmm0
.text:0000000000007E3F                 jbe     short loc_7DDF
.text:0000000000007E41                 lea     rdi, [rbx+28h]
.text:0000000000007E45                 call    check_tuning
.text:0000000000007E4A                 mov     rax, [rbx+10h]
.text:0000000000007E4E                 mov     rdx, [rbx+28h]
.text:0000000000007E52                 test    rax, rax
.text:0000000000007E55                 js      loc_7F80
.text:0000000000007E5B                 pxor    xmm0, xmm0
.text:0000000000007E5F                 cvtsi2ss xmm0, rax
.text:0000000000007E64
.text:0000000000007E64 loc_7E64:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000007E64                 mov     rax, [rbx+18h]
.text:0000000000007E68                 test    rax, rax
.text:0000000000007E6B                 js      loc_7F60
.text:0000000000007E71                 pxor    xmm1, xmm1
.text:0000000000007E75                 cvtsi2ss xmm1, rax
.text:0000000000007E7A
.text:0000000000007E7A loc_7E7A:                               ; CODE XREF: hash_delete+1D9↓j
.text:0000000000007E7A                 movss   xmm2, dword ptr [rdx]
.text:0000000000007E7E                 mulss   xmm2, xmm0
.text:0000000000007E82                 ucomiss xmm2, xmm1
.text:0000000000007E85                 jbe     loc_7DDF
.text:0000000000007E8B                 cmp     byte ptr [rdx+10h], 0
.text:0000000000007E8F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000007E94                 jz      loc_7F50
.text:0000000000007E9A
.text:0000000000007E9A loc_7E9A:                               ; CODE XREF: hash_delete+1B5↓j
.text:0000000000007E9A                 ucomiss xmm0, cs:dword_CA70
.text:0000000000007EA1                 jnb     loc_7F30
.text:0000000000007EA7                 cvttss2si rsi, xmm0
.text:0000000000007EAC
.text:0000000000007EAC loc_7EAC:                               ; CODE XREF: hash_delete+1AA↓j
.text:0000000000007EAC                 mov     rdi, rbx
.text:0000000000007EAF                 call    hash_rehash
.text:0000000000007EB4                 test    al, al
.text:0000000000007EB6                 jnz     loc_7DDF
.text:0000000000007EBC                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000007EC0                 test    rdi, rdi
.text:0000000000007EC3                 jz      short loc_7ED9
.text:0000000000007EC5                 nop     dword ptr [rax]
.text:0000000000007EC8
.text:0000000000007EC8 loc_7EC8:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000007EC8                 mov     r12, [rdi+8]
.text:0000000000007ECC                 call    _free
.text:0000000000007ED1                 test    r12, r12
.text:0000000000007ED4                 mov     rdi, r12
.text:0000000000007ED7                 jnz     short loc_7EC8
.text:0000000000007ED9
.text:0000000000007ED9 loc_7ED9:                               ; CODE XREF: hash_delete+123↑j
.text:0000000000007ED9                 mov     qword ptr [rbx+48h], 0
.text:0000000000007EE1                 jmp     loc_7DDF
.text:0000000000007EE1 ; ---------------------------------------------------------------------------
.text:0000000000007EE6                 align 10h
.text:0000000000007EF0
.text:0000000000007EF0 loc_7EF0:                               ; CODE XREF: hash_delete+89↑j
.text:0000000000007EF0                 mov     rcx, rax
.text:0000000000007EF3                 pxor    xmm1, xmm1
.text:0000000000007EF7                 shr     rcx, 1
.text:0000000000007EFA                 and     eax, 1
.text:0000000000007EFD                 or      rcx, rax
.text:0000000000007F00                 cvtsi2ss xmm1, rcx
.text:0000000000007F05                 addss   xmm1, xmm1
.text:0000000000007F09                 jmp     loc_7E38
.text:0000000000007F09 ; ---------------------------------------------------------------------------
.text:0000000000007F0E                 align 10h
.text:0000000000007F10
.text:0000000000007F10 loc_7F10:                               ; CODE XREF: hash_delete+6F↑j
.text:0000000000007F10                 mov     rdx, rax
.text:0000000000007F13                 pxor    xmm0, xmm0
.text:0000000000007F17                 shr     rdx, 1
.text:0000000000007F1A                 and     eax, 1
.text:0000000000007F1D                 or      rdx, rax
.text:0000000000007F20                 cvtsi2ss xmm0, rdx
.text:0000000000007F25                 addss   xmm0, xmm0
.text:0000000000007F29                 jmp     loc_7E1E
.text:0000000000007F29 ; ---------------------------------------------------------------------------
.text:0000000000007F2E                 align 10h
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000007F30                 subss   xmm0, cs:dword_CA70
.text:0000000000007F38                 mov     rax, 8000000000000000h
.text:0000000000007F42                 cvttss2si rsi, xmm0
.text:0000000000007F47                 xor     rsi, rax
.text:0000000000007F4A                 jmp     loc_7EAC
.text:0000000000007F4A ; ---------------------------------------------------------------------------
.text:0000000000007F4F                 align 10h
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000007F50                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000007F55                 jmp     loc_7E9A
.text:0000000000007F55 ; ---------------------------------------------------------------------------
.text:0000000000007F5A                 align 20h
.text:0000000000007F60
.text:0000000000007F60 loc_7F60:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000007F60                 mov     rcx, rax
.text:0000000000007F63                 pxor    xmm1, xmm1
.text:0000000000007F67                 shr     rcx, 1
.text:0000000000007F6A                 and     eax, 1
.text:0000000000007F6D                 or      rcx, rax
.text:0000000000007F70                 cvtsi2ss xmm1, rcx
.text:0000000000007F75                 addss   xmm1, xmm1
.text:0000000000007F79                 jmp     loc_7E7A
.text:0000000000007F79 ; ---------------------------------------------------------------------------
.text:0000000000007F7E                 align 20h
.text:0000000000007F80
.text:0000000000007F80 loc_7F80:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000007F80                 mov     rcx, rax
.text:0000000000007F83                 pxor    xmm0, xmm0
.text:0000000000007F87                 shr     rcx, 1
.text:0000000000007F8A                 and     eax, 1
.text:0000000000007F8D                 or      rcx, rax
.text:0000000000007F90                 cvtsi2ss xmm0, rcx
.text:0000000000007F95                 addss   xmm0, xmm0
.text:0000000000007F99                 jmp     loc_7E64
.text:0000000000007F9E ; ---------------------------------------------------------------------------
.text:0000000000007F9E
.text:0000000000007F9E loc_7F9E:                               ; CODE XREF: hash_delete+50↑j
.text:0000000000007F9E                 call    ___stack_chk_fail
.text:0000000000007F9E ; } // starts at 7DA0
.text:0000000000007F9E hash_delete     endp
.text:0000000000007F9E
.text:0000000000007F9E ; ---------------------------------------------------------------------------
.text:0000000000007FA3                 align 10h
.text:0000000000007FB0
.text:0000000000007FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FB0
.text:0000000000007FB0 ; Attributes: info_from_lumina
.text:0000000000007FB0
.text:0000000000007FB0 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000007FB0                 public imaxtostr
.text:0000000000007FB0 imaxtostr       proc near               ; CODE XREF: xlseek+56↑p
.text:0000000000007FB0 ; __unwind {
.text:0000000000007FB0                 test    rdi, rdi
.text:0000000000007FB3                 lea     rcx, [rsi+14h]
.text:0000000000007FB7                 mov     byte ptr [rsi+14h], 0
.text:0000000000007FBB                 mov     r9, 6666666666666667h
.text:0000000000007FC5                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000007FCF                 mov     r8d, 30h ; '0'
.text:0000000000007FD5                 js      short loc_8013
.text:0000000000007FD7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007FE0
.text:0000000000007FE0 loc_7FE0:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000007FE0                 mov     rax, rdi
.text:0000000000007FE3                 sub     rcx, 1
.text:0000000000007FE7                 mul     rsi
.text:0000000000007FEA                 shr     rdx, 3
.text:0000000000007FEE                 lea     rax, [rdx+rdx*4]
.text:0000000000007FF2                 add     rax, rax
.text:0000000000007FF5                 sub     rdi, rax
.text:0000000000007FF8                 add     edi, 30h ; '0'
.text:0000000000007FFB                 test    rdx, rdx
.text:0000000000007FFE                 mov     [rcx], dil
.text:0000000000008001                 mov     rdi, rdx
.text:0000000000008004                 jnz     short loc_7FE0
.text:0000000000008006                 mov     rax, rcx
.text:0000000000008009                 retn
.text:0000000000008009 ; ---------------------------------------------------------------------------
.text:000000000000800A                 align 10h
.text:0000000000008010
.text:0000000000008010 loc_8010:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000008010                 mov     rcx, rsi
.text:0000000000008013
.text:0000000000008013 loc_8013:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000008013                 mov     rax, rdi
.text:0000000000008016                 lea     rsi, [rcx-1]
.text:000000000000801A                 imul    r9
.text:000000000000801D                 mov     rax, rdi
.text:0000000000008020                 sar     rax, 3Fh
.text:0000000000008024                 sar     rdx, 2
.text:0000000000008028                 sub     rdx, rax
.text:000000000000802B                 lea     rax, [rdx+rdx*4]
.text:000000000000802F                 lea     eax, [r8+rax*2]
.text:0000000000008033                 sub     eax, edi
.text:0000000000008035                 test    rdx, rdx
.text:0000000000008038                 mov     rdi, rdx
.text:000000000000803B                 mov     [rcx-1], al
.text:000000000000803E                 jnz     short loc_8010
.text:0000000000008040                 sub     rcx, 2
.text:0000000000008044                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000008048                 mov     rax, rcx
.text:000000000000804B                 retn
.text:000000000000804B ; } // starts at 7FB0
.text:000000000000804B imaxtostr       endp
.text:000000000000804B
.text:000000000000804B ; ---------------------------------------------------------------------------
.text:000000000000804C                 align 10h
.text:0000000000008050
.text:0000000000008050 ; =============== S U B R O U T I N E =======================================
.text:0000000000008050
.text:0000000000008050
.text:0000000000008050                 public posix2_version
.text:0000000000008050 posix2_version  proc near               ; CODE XREF: main:loc_23C9↑p
.text:0000000000008050
.text:0000000000008050 var_18          = qword ptr -18h
.text:0000000000008050 var_10          = qword ptr -10h
.text:0000000000008050
.text:0000000000008050 ; __unwind {
.text:0000000000008050                 push    rbx
.text:0000000000008051                 lea     rdi, name       ; "_POSIX2_VERSION"
.text:0000000000008058                 mov     ebx, 31069h
.text:000000000000805D                 sub     rsp, 10h
.text:0000000000008061                 mov     rax, fs:28h
.text:000000000000806A                 mov     [rsp+18h+var_10], rax
.text:000000000000806F                 xor     eax, eax
.text:0000000000008071                 call    _getenv
.text:0000000000008076                 test    rax, rax
.text:0000000000008079                 jz      short loc_8080
.text:000000000000807B                 cmp     byte ptr [rax], 0
.text:000000000000807E                 jnz     short loc_80A0
.text:0000000000008080
.text:0000000000008080 loc_8080:                               ; CODE XREF: posix2_version+29↑j
.text:0000000000008080                                         ; posix2_version+67↓j ...
.text:0000000000008080                 mov     rcx, [rsp+18h+var_10]
.text:0000000000008085                 xor     rcx, fs:28h
.text:000000000000808E                 mov     eax, ebx
.text:0000000000008090                 jnz     short loc_80D9
.text:0000000000008092                 add     rsp, 10h
.text:0000000000008096                 pop     rbx
.text:0000000000008097                 retn
.text:0000000000008097 ; ---------------------------------------------------------------------------
.text:0000000000008098                 align 20h
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: posix2_version+2E↑j
.text:00000000000080A0                 mov     edx, 0Ah        ; base
.text:00000000000080A5                 mov     rsi, rsp        ; endptr
.text:00000000000080A8                 mov     rdi, rax        ; nptr
.text:00000000000080AB                 call    _strtol
.text:00000000000080B0                 mov     rdx, [rsp+18h+var_18]
.text:00000000000080B4                 cmp     byte ptr [rdx], 0
.text:00000000000080B7                 jnz     short loc_8080
.text:00000000000080B9                 cmp     rax, 0FFFFFFFF80000000h
.text:00000000000080BF                 jl      short loc_80D2
.text:00000000000080C1                 cmp     rax, 7FFFFFFFh
.text:00000000000080C7                 mov     ebx, 7FFFFFFFh
.text:00000000000080CC                 cmovle  rbx, rax
.text:00000000000080D0                 jmp     short loc_8080
.text:00000000000080D2 ; ---------------------------------------------------------------------------
.text:00000000000080D2
.text:00000000000080D2 loc_80D2:                               ; CODE XREF: posix2_version+6F↑j
.text:00000000000080D2                 mov     ebx, 80000000h
.text:00000000000080D7                 jmp     short loc_8080
.text:00000000000080D9 ; ---------------------------------------------------------------------------
.text:00000000000080D9
.text:00000000000080D9 loc_80D9:                               ; CODE XREF: posix2_version+40↑j
.text:00000000000080D9                 call    ___stack_chk_fail
.text:00000000000080D9 ; } // starts at 8050
.text:00000000000080D9 posix2_version  endp
.text:00000000000080D9
.text:00000000000080D9 ; ---------------------------------------------------------------------------
.text:00000000000080DE                 align 20h
.text:00000000000080E0
.text:00000000000080E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080E0
.text:00000000000080E0
.text:00000000000080E0                 public set_program_name
.text:00000000000080E0 set_program_name proc near              ; CODE XREF: main+38↑p
.text:00000000000080E0 ; __unwind {
.text:00000000000080E0                 test    rdi, rdi
.text:00000000000080E3                 push    rbx
.text:00000000000080E4                 jz      short loc_815D
.text:00000000000080E6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000080EB                 mov     rbx, rdi
.text:00000000000080EE                 call    _strrchr
.text:00000000000080F3                 test    rax, rax
.text:00000000000080F6                 jz      short loc_814D
.text:00000000000080F8                 lea     r8, [rax+1]
.text:00000000000080FC                 mov     rdx, r8
.text:00000000000080FF                 sub     rdx, rbx
.text:0000000000008102                 cmp     rdx, 6
.text:0000000000008106                 jle     short loc_814D
.text:0000000000008108                 lea     rsi, [rax-6]
.text:000000000000810C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000008113                 mov     ecx, 7
.text:0000000000008118                 repe cmpsb
.text:000000000000811A                 setnbe  dl
.text:000000000000811D                 sbb     dl, 0
.text:0000000000008120                 test    dl, dl
.text:0000000000008122                 jnz     short loc_814D
.text:0000000000008124                 lea     rdi, aLt        ; "lt-"
.text:000000000000812B                 mov     ecx, 3
.text:0000000000008130                 mov     rsi, r8
.text:0000000000008133                 mov     rbx, r8
.text:0000000000008136                 repe cmpsb
.text:0000000000008138                 setnbe  dl
.text:000000000000813B                 sbb     dl, 0
.text:000000000000813E                 test    dl, dl
.text:0000000000008140                 jnz     short loc_814D
.text:0000000000008142                 lea     rbx, [rax+4]
.text:0000000000008146                 mov     cs:__bss_start, rbx
.text:000000000000814D
.text:000000000000814D loc_814D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000814D                                         ; set_program_name+26↑j ...
.text:000000000000814D                 mov     cs:program_name, rbx
.text:0000000000008154                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000815B                 pop     rbx
.text:000000000000815C                 retn
.text:000000000000815D ; ---------------------------------------------------------------------------
.text:000000000000815D
.text:000000000000815D loc_815D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000815D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000008164                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000816B                 mov     edx, 37h ; '7'  ; n
.text:0000000000008170                 mov     esi, 1          ; size
.text:0000000000008175                 call    _fwrite
.text:000000000000817A                 call    _abort
.text:000000000000817A ; } // starts at 80E0
.text:000000000000817A set_program_name endp
.text:000000000000817A
.text:000000000000817A ; ---------------------------------------------------------------------------
.text:000000000000817F                 align 20h
.text:0000000000008180
.text:0000000000008180 ; =============== S U B R O U T I N E =======================================
.text:0000000000008180
.text:0000000000008180 ; Attributes: info_from_lumina
.text:0000000000008180
.text:0000000000008180 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000008180 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000008180                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000008180 ; __unwind {
.text:0000000000008180                 push    rbp
.text:0000000000008181                 push    rbx
.text:0000000000008182                 mov     rbp, rdi
.text:0000000000008185                 mov     ebx, esi
.text:0000000000008187                 sub     rsp, 8
.text:000000000000818B                 call    locale_charset
.text:0000000000008190                 movzx   edx, byte ptr [rax]
.text:0000000000008193                 and     edx, 0FFFFFFDFh
.text:0000000000008196                 cmp     dl, 55h ; 'U'
.text:0000000000008199                 jz      short loc_8210
.text:000000000000819B                 cmp     dl, 47h ; 'G'
.text:000000000000819E                 jz      short loc_81C0
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000081A0                                         ; gettext_quote+50↓j ...
.text:00000000000081A0                 lea     rax, unk_CAE3
.text:00000000000081A7                 lea     rdx, asc_CAE5   ; "'"
.text:00000000000081AE                 cmp     ebx, 9
.text:00000000000081B1                 cmovnz  rax, rdx
.text:00000000000081B5                 add     rsp, 8
.text:00000000000081B9                 pop     rbx
.text:00000000000081BA                 pop     rbp
.text:00000000000081BB                 retn
.text:00000000000081BB ; ---------------------------------------------------------------------------
.text:00000000000081BC                 align 20h
.text:00000000000081C0
.text:00000000000081C0 loc_81C0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000081C0                 movzx   edx, byte ptr [rax+1]
.text:00000000000081C4                 and     edx, 0FFFFFFDFh
.text:00000000000081C7                 cmp     dl, 42h ; 'B'
.text:00000000000081CA                 jnz     short loc_81A0
.text:00000000000081CC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000081D0                 jnz     short loc_81A0
.text:00000000000081D2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000081D6                 jnz     short loc_81A0
.text:00000000000081D8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000081DC                 jnz     short loc_81A0
.text:00000000000081DE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000081E2                 jnz     short loc_81A0
.text:00000000000081E4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000081E8                 jnz     short loc_81A0
.text:00000000000081EA                 cmp     byte ptr [rax+7], 0
.text:00000000000081EE                 jnz     short loc_81A0
.text:00000000000081F0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000081F4                 lea     rax, unk_CADC
.text:00000000000081FB                 lea     rdx, unk_CAE0
.text:0000000000008202                 cmovnz  rax, rdx
.text:0000000000008206                 add     rsp, 8
.text:000000000000820A                 pop     rbx
.text:000000000000820B                 pop     rbp
.text:000000000000820C                 retn
.text:000000000000820C ; ---------------------------------------------------------------------------
.text:000000000000820D                 align 10h
.text:0000000000008210
.text:0000000000008210 loc_8210:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000008210                 movzx   edx, byte ptr [rax+1]
.text:0000000000008214                 and     edx, 0FFFFFFDFh
.text:0000000000008217                 cmp     dl, 54h ; 'T'
.text:000000000000821A                 jnz     short loc_81A0
.text:000000000000821C                 movzx   edx, byte ptr [rax+2]
.text:0000000000008220                 and     edx, 0FFFFFFDFh
.text:0000000000008223                 cmp     dl, 46h ; 'F'
.text:0000000000008226                 jnz     loc_81A0
.text:000000000000822C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000008230                 jnz     loc_81A0
.text:0000000000008236                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000823A                 jnz     loc_81A0
.text:0000000000008240                 cmp     byte ptr [rax+5], 0
.text:0000000000008244                 jnz     loc_81A0
.text:000000000000824A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000824E                 lea     rax, unk_CAD4
.text:0000000000008255                 lea     rdx, unk_CAD8
.text:000000000000825C                 cmovnz  rax, rdx
.text:0000000000008260                 add     rsp, 8
.text:0000000000008264                 pop     rbx
.text:0000000000008265                 pop     rbp
.text:0000000000008266                 retn
.text:0000000000008266 ; } // starts at 8180
.text:0000000000008266 gettext_quote   endp
.text:0000000000008266
.text:0000000000008266 ; ---------------------------------------------------------------------------
.text:0000000000008267                 align 10h
.text:0000000000008270
.text:0000000000008270 ; =============== S U B R O U T I N E =======================================
.text:0000000000008270
.text:0000000000008270 ; Attributes: info_from_lumina
.text:0000000000008270
.text:0000000000008270 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000008270 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000008270                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000008270
.text:0000000000008270 var_E0          = dword ptr -0E0h
.text:0000000000008270 var_DB          = byte ptr -0DBh
.text:0000000000008270 var_DA          = byte ptr -0DAh
.text:0000000000008270 var_D9          = byte ptr -0D9h
.text:0000000000008270 s               = qword ptr -0D8h
.text:0000000000008270 n               = qword ptr -0D0h
.text:0000000000008270 var_C8          = qword ptr -0C8h
.text:0000000000008270 ps              = qword ptr -0C0h
.text:0000000000008270 var_B8          = qword ptr -0B8h
.text:0000000000008270 var_B0          = qword ptr -0B0h
.text:0000000000008270 var_A8          = qword ptr -0A8h
.text:0000000000008270 s2              = qword ptr -0A0h
.text:0000000000008270 var_98          = qword ptr -98h
.text:0000000000008270 var_90          = qword ptr -90h
.text:0000000000008270 var_88          = qword ptr -88h
.text:0000000000008270 var_80          = qword ptr -80h
.text:0000000000008270 var_78          = qword ptr -78h
.text:0000000000008270 var_70          = dword ptr -70h
.text:0000000000008270 var_6C          = byte ptr -6Ch
.text:0000000000008270 var_6B          = byte ptr -6Bh
.text:0000000000008270 var_6A          = byte ptr -6Ah
.text:0000000000008270 var_69          = byte ptr -69h
.text:0000000000008270 var_68          = qword ptr -68h
.text:0000000000008270 var_60          = qword ptr -60h
.text:0000000000008270 wc              = dword ptr -4Ch
.text:0000000000008270 var_48          = qword ptr -48h
.text:0000000000008270 var_40          = qword ptr -40h
.text:0000000000008270 arg_0           = qword ptr  8
.text:0000000000008270 arg_8           = qword ptr  10h
.text:0000000000008270 arg_10          = qword ptr  18h
.text:0000000000008270
.text:0000000000008270 ; __unwind {
.text:0000000000008270                 push    r15
.text:0000000000008272                 push    r14
.text:0000000000008274                 mov     r15d, r8d
.text:0000000000008277                 push    r13
.text:0000000000008279                 push    r12
.text:000000000000827B                 mov     r14, rdi
.text:000000000000827E                 push    rbp
.text:000000000000827F                 push    rbx
.text:0000000000008280                 mov     ebx, r9d
.text:0000000000008283                 mov     r13, rsi
.text:0000000000008286                 mov     rbp, rcx
.text:0000000000008289                 and     ebx, 2
.text:000000000000828C                 sub     rsp, 0B8h
.text:0000000000008293                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000829B                 mov     [rsp+0E8h+s], rdx
.text:00000000000082A0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000082A5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000082AA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000082AF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000082B7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000082BC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000082C4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000082C9                 mov     rax, fs:28h
.text:00000000000082D2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000082DA                 xor     eax, eax
.text:00000000000082DC                 call    ___ctype_get_mb_cur_max
.text:00000000000082E1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000082E5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000082EA                 ja      def_8301        ; jumptable 00000000000121F1 default case
.text:00000000000082F0                 lea     rcx, jpt_8301
.text:00000000000082F7                 mov     edx, r15d
.text:00000000000082FA                 movsxd  rax, ds:(jpt_8301 - 0CB40h)[rcx+rdx*4]
.text:00000000000082FE                 add     rax, rcx
.text:0000000000008301                 jmp     rax             ; switch jump
.text:0000000000008303 ; ---------------------------------------------------------------------------
.text:0000000000008303
.text:0000000000008303 loc_8303:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008303                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000008303                                         ; DATA XREF: ...
.text:0000000000008303                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000008308                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000830D                 xor     r12d, r12d
.text:0000000000008310                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008319                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000831E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008323
.text:0000000000008323 loc_8323:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000008323                 lea     rax, asc_CAE5   ; "'"
.text:000000000000832A                 mov     [rsp+0E8h+n], 1
.text:0000000000008333                 xor     r15d, r15d
.text:0000000000008336                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000833E                 mov     [rsp+0E8h+s2], rax
.text:0000000000008343
.text:0000000000008343 loc_8343:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000008343                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000008343                 xor     r11d, r11d
.text:0000000000008346                 mov     rax, rbp
.text:0000000000008349                 mov     r8d, r12d
.text:000000000000834C                 mov     rbp, r11
.text:000000000000834F                 mov     r11, rax
.text:0000000000008352                 nop     word ptr [rax+rax+00h]
.text:0000000000008358
.text:0000000000008358 loc_8358:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000008358                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000008358                 cmp     r11, rbp
.text:000000000000835B                 setnz   r12b
.text:000000000000835F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008363                 jnz     short loc_8372
.text:0000000000008365                 mov     rax, [rsp+0E8h+s]
.text:000000000000836A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000836E                 setnz   r12b
.text:0000000000008372
.text:0000000000008372 loc_8372:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000008372                 test    r12b, r12b
.text:0000000000008375                 jz      loc_89D0
.text:000000000000837B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008380                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000008385                 lea     r9, [rdi+rbp]
.text:0000000000008389                 setnz   al
.text:000000000000838C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000008390                 mov     r10d, eax
.text:0000000000008393                 jz      loc_8440
.text:0000000000008399                 mov     rax, [rsp+0E8h+n]
.text:000000000000839E                 test    rax, rax
.text:00000000000083A1                 jz      loc_87D0
.text:00000000000083A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000083AB                 lea     rbx, [rbp+rax+0]
.text:00000000000083B0                 jnz     short loc_83E0
.text:00000000000083B2                 cmp     rax, 1
.text:00000000000083B6                 jbe     short loc_83E0
.text:00000000000083B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000083BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000083C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000083C7                 call    _strlen
.text:00000000000083CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000083D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000083D8                 mov     r11, rax
.text:00000000000083DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000083E0
.text:00000000000083E0 loc_83E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000083E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000083E0                 cmp     rbx, r11
.text:00000000000083E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000083E8                 ja      loc_89A0
.text:00000000000083EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000083F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000083F8                 mov     rdi, r9         ; s1
.text:00000000000083FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000008400                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000008405                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000840A                 call    _memcmp
.text:000000000000840F                 test    eax, eax
.text:0000000000008411                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008416                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000841C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000008421                 jnz     loc_89A0
.text:0000000000008427                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000842C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008432                 jnz     loc_93B5
.text:0000000000008438                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008440
.text:0000000000008440 loc_8440:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000008440                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000008440                 movzx   ebx, byte ptr [r9]
.text:0000000000008444                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000008447                 ja      def_845E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000844D                 lea     rcx, jpt_845E
.text:0000000000008454                 movzx   edx, bl
.text:0000000000008457                 movsxd  rax, ds:(jpt_845E - 0CB6Ch)[rcx+rdx*4]
.text:000000000000845B                 add     rax, rcx
.text:000000000000845E                 jmp     rax             ; switch jump
.text:0000000000008460 ; ---------------------------------------------------------------------------
.text:0000000000008460
.text:0000000000008460 loc_8460:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008460                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008460                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000008463
.text:0000000000008463 loc_8463:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008463                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008463                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000008467                 setnz   al
.text:000000000000846A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000846E                 jnz     short loc_847C
.text:0000000000008470                 mov     rax, [rsp+0E8h+s]
.text:0000000000008475                 cmp     byte ptr [rax+1], 0
.text:0000000000008479                 setnz   al
.text:000000000000847C
.text:000000000000847C loc_847C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000847C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008481                 setz    dl
.text:0000000000008484                 test    al, al
.text:0000000000008486                 jz      loc_86D8
.text:000000000000848C
.text:000000000000848C loc_848C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000848C                 xor     r12d, r12d
.text:000000000000848F                 xor     eax, eax
.text:0000000000008491                 nop     dword ptr [rax+00000000h]
.text:0000000000008498
.text:0000000000008498 loc_8498:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000008498                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000008498                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000849D                 jnz     loc_85B2
.text:00000000000084A3                 test    dl, dl
.text:00000000000084A5                 jnz     loc_85B2
.text:00000000000084AB
.text:00000000000084AB loc_84AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000084AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000084B0                 test    rsi, rsi
.text:00000000000084B3                 jz      short loc_84C9
.text:00000000000084B5                 mov     edx, ebx
.text:00000000000084B7                 shr     dl, 5
.text:00000000000084BA                 movzx   edx, dl
.text:00000000000084BD                 mov     edx, [rsi+rdx*4]
.text:00000000000084C0                 bt      edx, ebx
.text:00000000000084C3                 jb      loc_8613
.text:00000000000084C9
.text:00000000000084C9 loc_84C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000084C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000084C9                 test    r10b, r10b
.text:00000000000084CC                 jnz     loc_8613
.text:00000000000084D2                 xor     eax, 1
.text:00000000000084D5                 add     rbp, 1
.text:00000000000084D9                 and     eax, r8d
.text:00000000000084DC
.text:00000000000084DC loc_84DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000084DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000084DC                 test    al, al
.text:00000000000084DE                 jz      short loc_8500
.text:00000000000084E0                 cmp     r13, r15
.text:00000000000084E3                 jbe     short loc_84EA
.text:00000000000084E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000084EA
.text:00000000000084EA loc_84EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000084EA                 lea     rax, [r15+1]
.text:00000000000084EE                 cmp     r13, rax
.text:00000000000084F1                 jbe     short loc_84F9
.text:00000000000084F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000084F9
.text:00000000000084F9 loc_84F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000084F9                 add     r15, 2
.text:00000000000084FD                 xor     r8d, r8d
.text:0000000000008500
.text:0000000000008500 loc_8500:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000008500                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000008500                 cmp     r15, r13
.text:0000000000008503                 jnb     short loc_8509
.text:0000000000008505                 mov     [r14+r15], bl
.text:0000000000008509
.text:0000000000008509 loc_8509:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000008509                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000850E                 add     r15, 1
.text:0000000000008512                 mov     eax, 0
.text:0000000000008517                 test    r12b, r12b
.text:000000000000851A                 cmovz   edi, eax
.text:000000000000851D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000008522                 jmp     loc_8358
.text:0000000000008522 ; ---------------------------------------------------------------------------
.text:0000000000008527                 align 10h
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008530                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008530                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000008533
.text:0000000000008533 loc_8533:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008533                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008533                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000008537                 cmp     eax, 2
.text:000000000000853A                 jz      loc_8AF8
.text:0000000000008540                 cmp     eax, 5
.text:0000000000008543                 jz      loc_8AB8
.text:0000000000008549                 cmp     eax, 2
.text:000000000000854C                 mov     ebx, 3Fh ; '?'
.text:0000000000008551                 setz    dl
.text:0000000000008554                 xor     r12d, r12d
.text:0000000000008557                 xor     eax, eax
.text:0000000000008559                 jmp     loc_8498
.text:0000000000008559 ; ---------------------------------------------------------------------------
.text:000000000000855E                 align 20h
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008560                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008560                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000008563
.text:0000000000008563 loc_8563:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008563                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008563                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000008568                 jz      loc_8A70
.text:000000000000856E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000008573                 xor     edx, edx
.text:0000000000008575                 xor     eax, eax
.text:0000000000008577                 mov     ebx, 27h ; '''
.text:000000000000857C                 jmp     loc_8498
.text:000000000000857C ; ---------------------------------------------------------------------------
.text:0000000000008581                 align 8
.text:0000000000008588
.text:0000000000008588 loc_8588:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008588                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008588                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000858D                 mov     ebx, 74h ; 't'
.text:0000000000008592
.text:0000000000008592 loc_8592:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000008592                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000008592                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008597                 setz    al
.text:000000000000859A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000859E                 jnz     loc_86EE
.text:00000000000085A4
.text:00000000000085A4 loc_85A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000085A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000085A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000085A9                 jnz     short loc_8610
.text:00000000000085AB
.text:00000000000085AB loc_85AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000085AB                 mov     ebx, edx
.text:00000000000085AD                 xor     r12d, r12d
.text:00000000000085B0                 xor     eax, eax
.text:00000000000085B2
.text:00000000000085B2 loc_85B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000085B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000085B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000085B7                 jnz     loc_84AB
.text:00000000000085BD                 jmp     loc_84C9
.text:00000000000085BD ; ---------------------------------------------------------------------------
.text:00000000000085C2                 align 8
.text:00000000000085C8
.text:00000000000085C8 loc_85C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000085C8                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:00000000000085C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000085CD                 mov     ebx, 62h ; 'b'
.text:00000000000085D2                 jmp     short loc_85A4
.text:00000000000085D2 ; ---------------------------------------------------------------------------
.text:00000000000085D4                 align 8
.text:00000000000085D8
.text:00000000000085D8 loc_85D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000085D8                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:00000000000085D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000085DD                 jz      loc_89B0
.text:00000000000085E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000085E8                 jz      loc_8800
.text:00000000000085EE
.text:00000000000085EE loc_85EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000085EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000085F3                 jz      loc_8800
.text:00000000000085F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000085FF                 jnz     loc_89BB
.text:0000000000008605                 mov     ebx, 5Ch ; '\'
.text:000000000000860A                 nop     word ptr [rax+rax+00h]
.text:0000000000008610
.text:0000000000008610 loc_8610:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000008610                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000008610                 xor     r12d, r12d
.text:0000000000008613
.text:0000000000008613 loc_8613:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000008613                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000008613                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008618                 setz    dl
.text:000000000000861B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008620                 mov     eax, edx
.text:0000000000008622                 jnz     loc_8E78
.text:0000000000008628                 mov     eax, r8d
.text:000000000000862B                 xor     eax, 1
.text:000000000000862E                 and     al, dl
.text:0000000000008630                 jz      short loc_8661
.text:0000000000008632                 cmp     r13, r15
.text:0000000000008635                 jbe     short loc_863C
.text:0000000000008637                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000863C
.text:000000000000863C loc_863C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000863C                 lea     rdx, [r15+1]
.text:0000000000008640                 cmp     r13, rdx
.text:0000000000008643                 jbe     short loc_864B
.text:0000000000008645                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000864B
.text:000000000000864B loc_864B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000864B                 lea     rdx, [r15+2]
.text:000000000000864F                 cmp     r13, rdx
.text:0000000000008652                 jbe     short loc_865A
.text:0000000000008654                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000865A
.text:000000000000865A loc_865A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000865A                 add     r15, 3
.text:000000000000865E                 mov     r8d, eax
.text:0000000000008661
.text:0000000000008661 loc_8661:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000008661                 cmp     r13, r15
.text:0000000000008664                 jbe     short loc_866B
.text:0000000000008666                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000866B
.text:000000000000866B loc_866B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000866B                 add     r15, 1
.text:000000000000866F                 add     rbp, 1
.text:0000000000008673                 jmp     loc_8500
.text:0000000000008673 ; ---------------------------------------------------------------------------
.text:0000000000008678                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008680                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008680                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000008685                 jnz     loc_8853
.text:000000000000868B                 xor     edx, edx
.text:000000000000868D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000008692                 jz      loc_85AB
.text:0000000000008698                 add     rbp, 1
.text:000000000000869C                 jmp     loc_8358
.text:000000000000869C ; ---------------------------------------------------------------------------
.text:00000000000086A1                 align 8
.text:00000000000086A8
.text:00000000000086A8 loc_86A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000086A8                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:00000000000086A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000086AD                 setz    dl
.text:00000000000086B0                 xor     eax, eax
.text:00000000000086B2                 jmp     loc_8498
.text:00000000000086B2 ; ---------------------------------------------------------------------------
.text:00000000000086B7                 align 20h
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000086C0                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:00000000000086C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000086C5                 mov     ebx, 61h ; 'a'
.text:00000000000086CA                 jmp     loc_85A4
.text:00000000000086CA ; ---------------------------------------------------------------------------
.text:00000000000086CF                 align 10h
.text:00000000000086D0
.text:00000000000086D0 loc_86D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000086D0                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:00000000000086D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000086D5                 setz    dl
.text:00000000000086D8
.text:00000000000086D8 loc_86D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000086D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000086D8                 test    rbp, rbp
.text:00000000000086DB                 jnz     loc_848C
.text:00000000000086E1
.text:00000000000086E1 loc_86E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000086E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000086E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000086E6                 and     al, dl
.text:00000000000086E8                 jz      loc_8498
.text:00000000000086EE
.text:00000000000086EE loc_86EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000086EE                 mov     rbp, r11
.text:00000000000086F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000086F9                 jmp     loc_8DF9
.text:00000000000086F9 ; ---------------------------------------------------------------------------
.text:00000000000086FE                 align 20h
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008700                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008700                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000008705                 setz    dl
.text:0000000000008708                 xor     r12d, r12d
.text:000000000000870B                 jmp     short loc_86E1
.text:000000000000870B ; ---------------------------------------------------------------------------
.text:000000000000870D                 align 10h
.text:0000000000008710
.text:0000000000008710 loc_8710:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008710                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008710                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000008715                 mov     ebx, 20h ; ' '
.text:000000000000871A                 setz    dl
.text:000000000000871D                 jmp     short loc_86E1
.text:000000000000871D ; ---------------------------------------------------------------------------
.text:000000000000871F                 align 20h
.text:0000000000008720
.text:0000000000008720 loc_8720:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008720                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008720                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000008725                 mov     ebx, 72h ; 'r'
.text:000000000000872A                 jmp     loc_8592
.text:000000000000872A ; ---------------------------------------------------------------------------
.text:000000000000872F                 align 10h
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008730                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008730                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000008735                 mov     ebx, 66h ; 'f'
.text:000000000000873A                 jmp     loc_85A4
.text:000000000000873A ; ---------------------------------------------------------------------------
.text:000000000000873F                 align 20h
.text:0000000000008740
.text:0000000000008740 loc_8740:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008740                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008740                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000008745                 mov     ebx, 76h ; 'v'
.text:000000000000874A                 jmp     loc_85A4
.text:000000000000874A ; ---------------------------------------------------------------------------
.text:000000000000874F                 align 10h
.text:0000000000008750
.text:0000000000008750 loc_8750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008750                                         ; DATA XREF: .rodata:jpt_845E↓o
.text:0000000000008750                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000008755                 mov     ebx, 6Eh ; 'n'
.text:000000000000875A                 jmp     loc_8592
.text:000000000000875A ; ---------------------------------------------------------------------------
.text:000000000000875F                 align 20h
.text:0000000000008760
.text:0000000000008760 def_87EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000008760                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000008760                                         ; DATA XREF: ...
.text:0000000000008760                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000008763                 nop     dword ptr [rax+rax+00h]
.text:0000000000008768
.text:0000000000008768 def_845E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000008768                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000008768                                         ; DATA XREF: ...
.text:0000000000008768                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000876E                 jnz     loc_8B18
.text:0000000000008774                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000008779                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000877E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000008783                 call    ___ctype_b_loc
.text:0000000000008788                 mov     rcx, [rax]
.text:000000000000878B                 movzx   edx, bl
.text:000000000000878E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008794                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000879A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000879F                 mov     edi, 1
.text:00000000000087A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000087A8                 and     ax, 4000h
.text:00000000000087AC                 setnz   r12b
.text:00000000000087B0                 setz    al
.text:00000000000087B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000087B7
.text:00000000000087B7 loc_87B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000087B7                 test    al, al
.text:00000000000087B9                 jnz     loc_9151
.text:00000000000087BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000087C4                 setz    dl
.text:00000000000087C7                 jmp     loc_8498
.text:00000000000087C7 ; ---------------------------------------------------------------------------
.text:00000000000087CC                 align 10h
.text:00000000000087D0
.text:00000000000087D0 loc_87D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000087D0                 movzx   ebx, byte ptr [r9]
.text:00000000000087D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000087D7                 ja      short def_87EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000087D9                 lea     rcx, jpt_87EA
.text:00000000000087E0                 movzx   edx, bl
.text:00000000000087E3                 movsxd  rax, ds:(jpt_87EA - 0CD68h)[rcx+rdx*4]
.text:00000000000087E7                 add     rax, rcx
.text:00000000000087EA                 jmp     rax             ; switch jump
.text:00000000000087EA ; ---------------------------------------------------------------------------
.text:00000000000087EC                 align 10h
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000087F0                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:00000000000087F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000087F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000087F8                 jnz     loc_85EE
.text:00000000000087FE                 xchg    ax, ax
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000008800                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000008800                 mov     edx, 5Ch ; '\'
.text:0000000000008805                 mov     ebx, 5Ch ; '\'
.text:000000000000880A                 jmp     loc_85A4
.text:000000000000880A ; ---------------------------------------------------------------------------
.text:000000000000880F                 align 10h
.text:0000000000008810
.text:0000000000008810 loc_8810:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008810                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008810                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000008815                 xor     r10d, r10d
.text:0000000000008818                 mov     ebx, 66h ; 'f'
.text:000000000000881D                 jmp     loc_85A4
.text:000000000000881D ; ---------------------------------------------------------------------------
.text:0000000000008822                 align 8
.text:0000000000008828
.text:0000000000008828 loc_8828:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008828                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008828                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000882D                 xor     r10d, r10d
.text:0000000000008830                 mov     ebx, 6Eh ; 'n'
.text:0000000000008835                 jmp     loc_8592
.text:0000000000008835 ; ---------------------------------------------------------------------------
.text:000000000000883A                 align 20h
.text:0000000000008840
.text:0000000000008840 loc_8840:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008840                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008840                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000008845                 jmp     loc_8610
.text:0000000000008845 ; ---------------------------------------------------------------------------
.text:000000000000884A                 align 10h
.text:0000000000008850
.text:0000000000008850 loc_8850:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008850                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008850                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000008853
.text:0000000000008853 loc_8853:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000008853                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008858                 setz    dl
.text:000000000000885B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008860                 jnz     loc_93FA
.text:0000000000008866                 mov     eax, r8d
.text:0000000000008869                 mov     rcx, r15
.text:000000000000886C                 xor     eax, 1
.text:000000000000886F                 and     al, dl
.text:0000000000008871                 jz      short loc_88A0
.text:0000000000008873                 cmp     r13, r15
.text:0000000000008876                 jbe     short loc_887D
.text:0000000000008878                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000887D
.text:000000000000887D loc_887D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000887D                 lea     rcx, [r15+1]
.text:0000000000008881                 cmp     r13, rcx
.text:0000000000008884                 jbe     short loc_888C
.text:0000000000008886                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000888C
.text:000000000000888C loc_888C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000888C                 lea     rcx, [r15+2]
.text:0000000000008890                 cmp     r13, rcx
.text:0000000000008893                 ja      loc_8EC9
.text:0000000000008899
.text:0000000000008899 loc_8899:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000008899                 lea     rcx, [r15+3]
.text:000000000000889D                 mov     r8d, eax
.text:00000000000088A0
.text:00000000000088A0 loc_88A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000088A0                 cmp     r13, rcx
.text:00000000000088A3                 jbe     short loc_88AA
.text:00000000000088A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000088AA
.text:00000000000088AA loc_88AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000088AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000088AF                 lea     r15, [rcx+1]
.text:00000000000088B3                 jz      loc_8EB9
.text:00000000000088B9                 lea     rax, [rbp+1]
.text:00000000000088BD                 cmp     rax, r11
.text:00000000000088C0                 jnb     short loc_88DB
.text:00000000000088C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000088C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000088CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000088D0                 sub     eax, 30h ; '0'
.text:00000000000088D3                 cmp     al, 9
.text:00000000000088D5                 jbe     loc_9109
.text:00000000000088DB
.text:00000000000088DB loc_88DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000088DB                 mov     eax, r12d
.text:00000000000088DE                 mov     ebx, 30h ; '0'
.text:00000000000088E3                 xor     r12d, r12d
.text:00000000000088E6                 jmp     loc_8498
.text:00000000000088E6 ; ---------------------------------------------------------------------------
.text:00000000000088EB                 align 10h
.text:00000000000088F0
.text:00000000000088F0 loc_88F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000088F0                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:00000000000088F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000088F5                 mov     r12d, r10d
.text:00000000000088F8                 setz    dl
.text:00000000000088FB                 xor     r10d, r10d
.text:00000000000088FE                 xor     eax, eax
.text:0000000000008900                 jmp     loc_8498
.text:0000000000008900 ; ---------------------------------------------------------------------------
.text:0000000000008905                 align 8
.text:0000000000008908
.text:0000000000008908 loc_8908:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008908                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008908                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000890D                 setz    dl
.text:0000000000008910                 xor     r10d, r10d
.text:0000000000008913                 jmp     loc_86D8
.text:0000000000008913 ; ---------------------------------------------------------------------------
.text:0000000000008918                 align 20h
.text:0000000000008920
.text:0000000000008920 loc_8920:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008920                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008920                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000008925                 setz    dl
.text:0000000000008928                 xor     r10d, r10d
.text:000000000000892B                 xor     r12d, r12d
.text:000000000000892E                 jmp     loc_86E1
.text:000000000000892E ; ---------------------------------------------------------------------------
.text:0000000000008933                 align 8
.text:0000000000008938
.text:0000000000008938 loc_8938:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008938                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008938                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000893D                 mov     r12d, r10d
.text:0000000000008940                 mov     ebx, 20h ; ' '
.text:0000000000008945                 setz    dl
.text:0000000000008948                 xor     r10d, r10d
.text:000000000000894B                 jmp     loc_86E1
.text:0000000000008950 ; ---------------------------------------------------------------------------
.text:0000000000008950
.text:0000000000008950 loc_8950:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008950                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008950                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000008955                 xor     r10d, r10d
.text:0000000000008958                 mov     ebx, 72h ; 'r'
.text:000000000000895D                 jmp     loc_8592
.text:000000000000895D ; ---------------------------------------------------------------------------
.text:0000000000008962                 align 8
.text:0000000000008968
.text:0000000000008968 loc_8968:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008968                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008968                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000896D                 jmp     loc_8610
.text:000000000000896D ; ---------------------------------------------------------------------------
.text:0000000000008972                 align 8
.text:0000000000008978
.text:0000000000008978 loc_8978:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008978                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008978                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000897D                 xor     r10d, r10d
.text:0000000000008980                 mov     ebx, 74h ; 't'
.text:0000000000008985                 jmp     loc_8592
.text:0000000000008985 ; ---------------------------------------------------------------------------
.text:000000000000898A                 align 10h
.text:0000000000008990
.text:0000000000008990 loc_8990:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008990                                         ; DATA XREF: .rodata:jpt_87EA↓o
.text:0000000000008990                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000008995                 jmp     loc_8610
.text:0000000000008995 ; ---------------------------------------------------------------------------
.text:000000000000899A                 align 20h
.text:00000000000089A0
.text:00000000000089A0 loc_89A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000089A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000089A0                 xor     r10d, r10d
.text:00000000000089A3                 jmp     loc_8440
.text:00000000000089A3 ; ---------------------------------------------------------------------------
.text:00000000000089A8                 align 10h
.text:00000000000089B0
.text:00000000000089B0 loc_89B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000089B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000089B5                 jnz     loc_9320
.text:00000000000089BB
.text:00000000000089BB loc_89BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000089BB                 add     rbp, 1
.text:00000000000089BF                 mov     eax, r8d
.text:00000000000089C2                 xor     r12d, r12d
.text:00000000000089C5                 mov     ebx, 5Ch ; '\'
.text:00000000000089CA                 jmp     loc_84DC
.text:00000000000089CA ; ---------------------------------------------------------------------------
.text:00000000000089CF                 align 10h
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000089D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000089D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000089DA                 mov     r12d, r8d
.text:00000000000089DD                 mov     rbp, r11
.text:00000000000089E0                 setz    dl
.text:00000000000089E3                 mov     eax, ebx
.text:00000000000089E5                 test    r15, r15
.text:00000000000089E8                 setz    cl
.text:00000000000089EB                 and     eax, edx
.text:00000000000089ED                 and     al, cl
.text:00000000000089EF                 jnz     loc_9456
.text:00000000000089F5                 mov     eax, ebx
.text:00000000000089F7                 xor     eax, 1
.text:00000000000089FA                 and     dl, al
.text:00000000000089FC                 jz      loc_936C
.text:0000000000008A02                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000008A07                 jz      loc_936A
.text:0000000000008A0D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000008A12                 jnz     loc_940D
.text:0000000000008A18                 test    r13, r13
.text:0000000000008A1B                 setz    al
.text:0000000000008A1E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000008A24                 setnz   dl
.text:0000000000008A27                 and     al, dl
.text:0000000000008A29                 jz      loc_944C
.text:0000000000008A2F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008A34
.text:0000000000008A34 loc_8A34:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000008A34                 lea     rbx, asc_CAE5   ; "'"
.text:0000000000008A3B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000008A3F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008A47                 mov     r15d, 1
.text:0000000000008A4D                 mov     [rsp+0E8h+n], 1
.text:0000000000008A56                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008A5B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000008A60                 mov     [rsp+0E8h+var_6C], al
.text:0000000000008A64                 jmp     loc_8343
.text:0000000000008A64 ; ---------------------------------------------------------------------------
.text:0000000000008A69                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000008A70                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008A75                 jnz     loc_9320
.text:0000000000008A7B                 test    r13, r13
.text:0000000000008A7E                 jz      loc_8E80
.text:0000000000008A84                 xor     edx, edx
.text:0000000000008A86                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000008A8C                 jnz     loc_8E80
.text:0000000000008A92
.text:0000000000008A92 loc_8A92:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000008A92                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000008A92                 mov     [rsp+0E8h+var_98], r13
.text:0000000000008A97                 add     r15, 3
.text:0000000000008A9B                 xor     eax, eax
.text:0000000000008A9D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000008AA2                 xor     r8d, r8d
.text:0000000000008AA5                 mov     r13, rdx
.text:0000000000008AA8                 mov     ebx, 27h ; '''
.text:0000000000008AAD                 jmp     loc_84C9
.text:0000000000008AAD ; ---------------------------------------------------------------------------
.text:0000000000008AB2                 align 8
.text:0000000000008AB8
.text:0000000000008AB8 loc_8AB8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000008AB8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000008ABD                 jz      short loc_8AE0
.text:0000000000008ABF                 lea     rcx, [rbp+2]
.text:0000000000008AC3                 cmp     rcx, r11
.text:0000000000008AC6                 jnb     short loc_8AE0
.text:0000000000008AC8                 mov     rax, [rsp+0E8h+s]
.text:0000000000008ACD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000008AD2                 jz      loc_9262
.text:0000000000008AD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008AE0
.text:0000000000008AE0 loc_8AE0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000008AE0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000008AE0                 xor     edx, edx
.text:0000000000008AE2                 xor     r12d, r12d
.text:0000000000008AE5                 xor     eax, eax
.text:0000000000008AE7                 mov     ebx, 3Fh ; '?'
.text:0000000000008AEC                 jmp     loc_8498
.text:0000000000008AEC ; ---------------------------------------------------------------------------
.text:0000000000008AF1                 align 8
.text:0000000000008AF8
.text:0000000000008AF8 loc_8AF8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000008AF8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008AFD                 jnz     loc_9320
.text:0000000000008B03                 xor     r12d, r12d
.text:0000000000008B06                 xor     eax, eax
.text:0000000000008B08                 mov     ebx, 3Fh ; '?'
.text:0000000000008B0D                 jmp     loc_84C9
.text:0000000000008B0D ; ---------------------------------------------------------------------------
.text:0000000000008B12                 align 8
.text:0000000000008B18
.text:0000000000008B18 loc_8B18:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000008B18                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000008B20                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B24                 mov     [rsp+0E8h+var_48], 0
.text:0000000000008B30                 mov     [rsp+0E8h+ps], rax
.text:0000000000008B35                 jnz     short loc_8B64
.text:0000000000008B37                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000008B3C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000008B41                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000008B46                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000008B4B                 call    _strlen
.text:0000000000008B50                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000008B56                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000008B5C                 mov     r11, rax
.text:0000000000008B5F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008B64
.text:0000000000008B64 loc_8B64:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000008B64                 lea     rax, [rsp+0E8h+wc]
.text:0000000000008B6C                 xor     ecx, ecx
.text:0000000000008B6E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000008B72                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000008B77                 mov     rbx, rcx
.text:0000000000008B7A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000008B82                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000008B87                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000008B8C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000008B94                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000008B99                 mov     [rsp+0E8h+var_78], r13
.text:0000000000008B9E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000008BA3
.text:0000000000008BA3 loc_8BA3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000008BA3                 mov     rax, [rsp+0E8h+s]
.text:0000000000008BA8                 lea     r14, [rbp+rbx+0]
.text:0000000000008BAD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000008BB2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000008BB7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000008BBC                 lea     r13, [rax+r14]
.text:0000000000008BC0                 sub     rdx, r14
.text:0000000000008BC3                 mov     rsi, r13
.text:0000000000008BC6                 call    rpl_mbrtowc
.text:0000000000008BCB                 test    rax, rax
.text:0000000000008BCE                 mov     r15, rax
.text:0000000000008BD1                 jz      short loc_8C21
.text:0000000000008BD3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BD7                 jz      loc_91F5
.text:0000000000008BDD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000008BE1                 jz      loc_9181
.text:0000000000008BE7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008BEC                 setz    al
.text:0000000000008BEF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000008BF3                 jnz     loc_8D90
.text:0000000000008BF9
.text:0000000000008BF9 loc_8BF9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000008BF9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000008BF9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000008C00                 call    _iswprint
.text:0000000000008C05                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000008C0A                 test    eax, eax
.text:0000000000008C0C                 mov     eax, 0
.text:0000000000008C11                 cmovz   r12d, eax
.text:0000000000008C15                 add     rbx, r15
.text:0000000000008C18                 call    _mbsinit
.text:0000000000008C1D                 test    eax, eax
.text:0000000000008C1F                 jz      short loc_8BA3
.text:0000000000008C21
.text:0000000000008C21 loc_8C21:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000008C21                 mov     edx, r12d
.text:0000000000008C24                 mov     rdi, rbx
.text:0000000000008C27                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000008C2D                 xor     edx, 1
.text:0000000000008C30                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000008C35                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000008C3B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000008C3F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008C47                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000008C4C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008C51                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008C56
.text:0000000000008C56 loc_8C56:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000008C56                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000008C56                 cmp     rdi, 1
.text:0000000000008C5A                 jbe     loc_925B
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000008C60                 mov     rcx, rdi
.text:0000000000008C63                 xor     esi, esi
.text:0000000000008C65                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000008C6B                 add     rcx, rbp
.text:0000000000008C6E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000008C73                 jmp     loc_8D2E
.text:0000000000008C73 ; ---------------------------------------------------------------------------
.text:0000000000008C78                 align 20h
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000008C80                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008C85                 setz    al
.text:0000000000008C88                 test    r9b, r9b
.text:0000000000008C8B                 jnz     loc_9140
.text:0000000000008C91                 mov     esi, r8d
.text:0000000000008C94                 xor     esi, 1
.text:0000000000008C97                 and     al, sil
.text:0000000000008C9A                 jz      short loc_8CCB
.text:0000000000008C9C                 cmp     r13, r15
.text:0000000000008C9F                 jbe     short loc_8CA6
.text:0000000000008CA1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008CA6
.text:0000000000008CA6 loc_8CA6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000008CA6                 lea     rsi, [r15+1]
.text:0000000000008CAA                 cmp     r13, rsi
.text:0000000000008CAD                 jbe     short loc_8CB5
.text:0000000000008CAF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000008CB5
.text:0000000000008CB5 loc_8CB5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000008CB5                 lea     rsi, [r15+2]
.text:0000000000008CB9                 cmp     r13, rsi
.text:0000000000008CBC                 jbe     short loc_8CC4
.text:0000000000008CBE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000008CC4
.text:0000000000008CC4 loc_8CC4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000008CC4                 add     r15, 3
.text:0000000000008CC8                 mov     r8d, eax
.text:0000000000008CCB
.text:0000000000008CCB loc_8CCB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000008CCB                 cmp     r13, r15
.text:0000000000008CCE                 jbe     short loc_8CD5
.text:0000000000008CD0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000008CD5
.text:0000000000008CD5 loc_8CD5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000008CD5                 lea     rax, [r15+1]
.text:0000000000008CD9                 cmp     r13, rax
.text:0000000000008CDC                 jbe     short loc_8CEB
.text:0000000000008CDE                 mov     eax, ebx
.text:0000000000008CE0                 shr     al, 6
.text:0000000000008CE3                 add     eax, 30h ; '0'
.text:0000000000008CE6                 mov     [r14+r15+1], al
.text:0000000000008CEB
.text:0000000000008CEB loc_8CEB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000008CEB                 lea     rax, [r15+2]
.text:0000000000008CEF                 cmp     r13, rax
.text:0000000000008CF2                 jbe     short loc_8D04
.text:0000000000008CF4                 mov     eax, ebx
.text:0000000000008CF6                 shr     al, 3
.text:0000000000008CF9                 and     eax, 7
.text:0000000000008CFC                 add     eax, 30h ; '0'
.text:0000000000008CFF                 mov     [r14+r15+2], al
.text:0000000000008D04
.text:0000000000008D04 loc_8D04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000008D04                 and     ebx, 7
.text:0000000000008D07                 add     rbp, 1
.text:0000000000008D0B                 add     r15, 3
.text:0000000000008D0F                 add     ebx, 30h ; '0'
.text:0000000000008D12                 cmp     rbp, rcx
.text:0000000000008D15                 jnb     loc_8500
.text:0000000000008D1B                 mov     esi, edx
.text:0000000000008D1D
.text:0000000000008D1D loc_8D1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000008D1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000008D1D                 cmp     r13, r15
.text:0000000000008D20                 jbe     short loc_8D26
.text:0000000000008D22                 mov     [r14+r15], bl
.text:0000000000008D26
.text:0000000000008D26 loc_8D26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000008D26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000008D2A                 add     r15, 1
.text:0000000000008D2E
.text:0000000000008D2E loc_8D2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000008D2E                 test    dl, dl
.text:0000000000008D30                 jnz     loc_8C80
.text:0000000000008D36                 mov     eax, esi
.text:0000000000008D38                 xor     eax, 1
.text:0000000000008D3B                 and     eax, r8d
.text:0000000000008D3E                 test    r10b, r10b
.text:0000000000008D41                 jz      short loc_8D51
.text:0000000000008D43                 cmp     r13, r15
.text:0000000000008D46                 jbe     short loc_8D4D
.text:0000000000008D48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000008D4D
.text:0000000000008D4D loc_8D4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000008D4D                 add     r15, 1
.text:0000000000008D51
.text:0000000000008D51 loc_8D51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000008D51                 add     rbp, 1
.text:0000000000008D55                 cmp     rbp, rcx
.text:0000000000008D58                 jnb     loc_84DC
.text:0000000000008D5E                 test    al, al
.text:0000000000008D60                 jz      loc_915E
.text:0000000000008D66                 cmp     r13, r15
.text:0000000000008D69                 jbe     short loc_8D70
.text:0000000000008D6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000008D70                 lea     rax, [r15+1]
.text:0000000000008D74                 cmp     r13, rax
.text:0000000000008D77                 jbe     short loc_8D7F
.text:0000000000008D79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000008D7F
.text:0000000000008D7F loc_8D7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000008D7F                 add     r15, 2
.text:0000000000008D83                 xor     r10d, r10d
.text:0000000000008D86                 xor     r8d, r8d
.text:0000000000008D89                 jmp     short loc_8D1D
.text:0000000000008D89 ; ---------------------------------------------------------------------------
.text:0000000000008D8B                 align 10h
.text:0000000000008D90
.text:0000000000008D90 loc_8D90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000008D90                 cmp     r15, 1
.text:0000000000008D94                 jz      loc_8BF9
.text:0000000000008D9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000008D9F                 lea     rcx, [rdi+r15]
.text:0000000000008DA3                 lea     rdx, [rdi+r14+1]
.text:0000000000008DA8                 lea     r8, [rcx+r14]
.text:0000000000008DAC                 jmp     short loc_8DBD
.text:0000000000008DAC ; ---------------------------------------------------------------------------
.text:0000000000008DAE                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 loc_8DB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000008DB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000008DB0                 add     rdx, 1
.text:0000000000008DB4                 cmp     r8, rdx
.text:0000000000008DB7                 jz      loc_8BF9
.text:0000000000008DBD
.text:0000000000008DBD loc_8DBD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000008DBD                 movzx   ecx, byte ptr [rdx]
.text:0000000000008DC0                 sub     ecx, 5Bh ; '['
.text:0000000000008DC3                 cmp     cl, 21h ; '!'
.text:0000000000008DC6                 ja      short loc_8DB0
.text:0000000000008DC8                 mov     esi, 1
.text:0000000000008DCD                 shl     rsi, cl
.text:0000000000008DD0                 mov     rcx, rsi
.text:0000000000008DD3                 mov     rsi, 20000002Bh
.text:0000000000008DDD                 test    rcx, rsi
.text:0000000000008DE0                 jz      short loc_8DB0
.text:0000000000008DE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000008DE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008DEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000008DF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008DF9
.text:0000000000008DF9 loc_8DF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000008DF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000008DF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000008DFE                 jz      short loc_8E10
.text:0000000000008E00                 test    al, al
.text:0000000000008E02                 mov     eax, 4
.text:0000000000008E07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000008E0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000008E10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000008E10                 sub     rsp, 8
.text:0000000000008E14                 mov     rcx, rbp
.text:0000000000008E17                 mov     rsi, r13
.text:0000000000008E1A                 push    [rsp+0F0h+var_88]
.text:0000000000008E1E                 push    [rsp+0F8h+var_80]
.text:0000000000008E22                 mov     rdi, r14
.text:0000000000008E25                 push    0
.text:0000000000008E27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000008E2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000008E34                 mov     rdx, [rsp+108h+s]
.text:0000000000008E39                 and     r9d, 0FFFFFFFDh
.text:0000000000008E3D                 call    quotearg_buffer_restyled
.text:0000000000008E42                 add     rsp, 20h
.text:0000000000008E46                 mov     r15, rax
.text:0000000000008E49
.text:0000000000008E49 loc_8E49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000008E49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000008E49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000008E51                 xor     rbx, fs:28h
.text:0000000000008E5A                 mov     rax, r15
.text:0000000000008E5D                 jnz     loc_9463
.text:0000000000008E63                 add     rsp, 0B8h
.text:0000000000008E6A                 pop     rbx
.text:0000000000008E6B                 pop     rbp
.text:0000000000008E6C                 pop     r12
.text:0000000000008E6E                 pop     r13
.text:0000000000008E70                 pop     r14
.text:0000000000008E72                 pop     r15
.text:0000000000008E74                 retn
.text:0000000000008E74 ; ---------------------------------------------------------------------------
.text:0000000000008E75                 align 8
.text:0000000000008E78
.text:0000000000008E78 loc_8E78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000008E78                 mov     rbp, r11
.text:0000000000008E7B                 jmp     loc_8DF9
.text:0000000000008E80 ; ---------------------------------------------------------------------------
.text:0000000000008E80
.text:0000000000008E80 loc_8E80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000008E80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000008E80                 cmp     r13, r15
.text:0000000000008E83                 jbe     short loc_8E8A
.text:0000000000008E85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008E8A
.text:0000000000008E8A loc_8E8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000008E8A                 lea     rax, [r15+1]
.text:0000000000008E8E                 cmp     r13, rax
.text:0000000000008E91                 jbe     short loc_8E99
.text:0000000000008E93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000008E99
.text:0000000000008E99 loc_8E99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000008E99                 lea     rax, [r15+2]
.text:0000000000008E9D                 cmp     r13, rax
.text:0000000000008EA0                 jbe     loc_9492
.text:0000000000008EA6                 mov     rdx, r13
.text:0000000000008EA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000008EAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008EB4                 jmp     loc_8A92
.text:0000000000008EB9 ; ---------------------------------------------------------------------------
.text:0000000000008EB9
.text:0000000000008EB9 loc_8EB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000008EB9                 mov     eax, r12d
.text:0000000000008EBC                 mov     ebx, 30h ; '0'
.text:0000000000008EC1                 xor     r12d, r12d
.text:0000000000008EC4                 jmp     loc_84C9
.text:0000000000008EC9 ; ---------------------------------------------------------------------------
.text:0000000000008EC9
.text:0000000000008EC9 loc_8EC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000008EC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000008ECF                 jmp     loc_8899
.text:0000000000008ED4 ; ---------------------------------------------------------------------------
.text:0000000000008ED4
.text:0000000000008ED4 loc_8ED4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008ED4                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:0000000000008ED4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000008ED6                 jnz     loc_8303        ; jumptable 00000000000121F1 case 1
.text:0000000000008EDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008EE1
.text:0000000000008EE1 loc_8EE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000008EE1                 test    r13, r13
.text:0000000000008EE4                 jnz     loc_947A
.text:0000000000008EEA                 lea     rax, asc_CAE5   ; "'"
.text:0000000000008EF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008EFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008EFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008F04                 xor     r12d, r12d
.text:0000000000008F07                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008F0C                 mov     [rsp+0E8h+n], 1
.text:0000000000008F15                 mov     [rsp+0E8h+s2], rax
.text:0000000000008F1A                 mov     r15d, 1
.text:0000000000008F20                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008F28                 jmp     loc_8343
.text:0000000000008F28 ; ---------------------------------------------------------------------------
.text:0000000000008F2D                 align 10h
.text:0000000000008F30
.text:0000000000008F30 loc_8F30:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008F30                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:0000000000008F30                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000008F32                 jnz     loc_932D
.text:0000000000008F38                 test    r13, r13
.text:0000000000008F3B                 jz      loc_9166
.text:0000000000008F41                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000008F45                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008F4A                 xor     r12d, r12d
.text:0000000000008F4D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008F52                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008F5B
.text:0000000000008F5B loc_8F5B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000008F5B                 lea     rax, unk_CAE3
.text:0000000000008F62                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008F67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008F6C                 mov     [rsp+0E8h+n], 1
.text:0000000000008F75                 mov     r15d, 1
.text:0000000000008F7B                 mov     [rsp+0E8h+s2], rax
.text:0000000000008F80                 jmp     loc_8343
.text:0000000000008F85 ; ---------------------------------------------------------------------------
.text:0000000000008F85
.text:0000000000008F85 loc_8F85:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008F85                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:0000000000008F85                 lea     rax, unk_CAE3   ; jumptable 00000000000121F1 case 6
.text:0000000000008F8C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008F91                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008F96                 xor     r12d, r12d
.text:0000000000008F99                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008FA2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008FA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008FAC                 mov     [rsp+0E8h+n], 1
.text:0000000000008FB5                 xor     r15d, r15d
.text:0000000000008FB8                 mov     [rsp+0E8h+s2], rax
.text:0000000000008FBD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000008FC5                 jmp     loc_8343
.text:0000000000008FCA ; ---------------------------------------------------------------------------
.text:0000000000008FCA
.text:0000000000008FCA loc_8FCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008FCA                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:0000000000008FCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000008FCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008FD4                 xor     r12d, r12d
.text:0000000000008FD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008FE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008FE5                 xor     r15d, r15d
.text:0000000000008FE8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008FED                 mov     [rsp+0E8h+n], 0
.text:0000000000008FF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000008FFF                 jmp     loc_8343
.text:0000000000009004 ; ---------------------------------------------------------------------------
.text:0000000000009004
.text:0000000000009004 loc_9004:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009004                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:0000000000009004                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000009009                 jz      short loc_9061
.text:000000000000900B                 lea     rsi, asc_CAE7   ; "`"
.text:0000000000009012                 xor     edi, edi        ; domainname
.text:0000000000009014                 mov     edx, 5          ; category
.text:0000000000009019                 call    _dcgettext
.text:000000000000901E                 mov     rcx, rax
.text:0000000000009021                 mov     [rsp+0E8h+var_80], rax
.text:0000000000009026                 lea     rax, asc_CAE7   ; "`"
.text:000000000000902D                 cmp     rcx, rax
.text:0000000000009030                 jz      loc_93CE
.text:0000000000009036
.text:0000000000009036 loc_9036:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000009036                 lea     rsi, asc_CAE5   ; "'"
.text:000000000000903D                 xor     edi, edi        ; domainname
.text:000000000000903F                 mov     edx, 5          ; category
.text:0000000000009044                 call    _dcgettext
.text:0000000000009049                 mov     rcx, rax
.text:000000000000904C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000009051                 lea     rax, asc_CAE5   ; "'"
.text:0000000000009058                 cmp     rcx, rax
.text:000000000000905B                 jz      loc_93E4
.text:0000000000009061
.text:0000000000009061 loc_9061:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000009061                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000009061                 xor     r15d, r15d
.text:0000000000009064                 test    ebx, ebx
.text:0000000000009066                 jz      loc_922D
.text:000000000000906C
.text:000000000000906C loc_906C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000906C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000906C                 test    ebx, ebx
.text:000000000000906E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000009073                 setnz   [rsp+0E8h+var_D9]
.text:0000000000009078                 xor     r12d, r12d
.text:000000000000907B                 mov     rdi, rbx        ; s
.text:000000000000907E                 call    _strlen
.text:0000000000009083                 mov     [rsp+0E8h+s2], rbx
.text:0000000000009088                 mov     [rsp+0E8h+n], rax
.text:000000000000908D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009092                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009097                 mov     [rsp+0E8h+var_98], 0
.text:00000000000090A0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000090A5                 jmp     loc_8343
.text:00000000000090AA ; ---------------------------------------------------------------------------
.text:00000000000090AA
.text:00000000000090AA loc_90AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000090AA                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:00000000000090AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000090AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000090B4                 xor     r12d, r12d
.text:00000000000090B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000090C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000090C5                 xor     r15d, r15d
.text:00000000000090C8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000090CD                 mov     [rsp+0E8h+n], 0
.text:00000000000090D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000090DF                 jmp     loc_8343
.text:00000000000090E4 ; ---------------------------------------------------------------------------
.text:00000000000090E4
.text:00000000000090E4 loc_90E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000090E4                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:00000000000090E4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000090E9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000090EE                 xor     r12d, r12d
.text:00000000000090F1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000090FA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000090FF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009104                 jmp     loc_8323
.text:0000000000009109 ; ---------------------------------------------------------------------------
.text:0000000000009109
.text:0000000000009109 loc_9109:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000009109                 cmp     r13, r15
.text:000000000000910C                 jbe     short loc_9113
.text:000000000000910E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000009113
.text:0000000000009113 loc_9113:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000009113                 lea     rax, [rcx+2]
.text:0000000000009117                 cmp     r13, rax
.text:000000000000911A                 jbe     short loc_9122
.text:000000000000911C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000009122
.text:0000000000009122 loc_9122:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000009122                 mov     eax, r12d
.text:0000000000009125                 lea     r15, [rcx+3]
.text:0000000000009129                 xor     r12d, r12d
.text:000000000000912C                 mov     ebx, 30h ; '0'
.text:0000000000009131                 jmp     loc_8498
.text:0000000000009131 ; ---------------------------------------------------------------------------
.text:0000000000009136                 align 20h
.text:0000000000009140
.text:0000000000009140 loc_9140:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000009140                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009145                 mov     rbp, r11
.text:0000000000009148                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000914C                 jmp     loc_8DF9
.text:0000000000009151 ; ---------------------------------------------------------------------------
.text:0000000000009151
.text:0000000000009151 loc_9151:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000009151                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009156                 xor     r12d, r12d
.text:0000000000009159                 jmp     loc_8C60
.text:000000000000915E ; ---------------------------------------------------------------------------
.text:000000000000915E
.text:000000000000915E loc_915E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000915E                 xor     r10d, r10d
.text:0000000000009161                 jmp     loc_8D1D
.text:0000000000009166 ; ---------------------------------------------------------------------------
.text:0000000000009166
.text:0000000000009166 loc_9166:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000009166                 mov     [rsp+0E8h+var_98], 0
.text:000000000000916F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009174                 xor     r12d, r12d
.text:0000000000009177                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000917C                 jmp     loc_8F5B
.text:0000000000009181 ; ---------------------------------------------------------------------------
.text:0000000000009181
.text:0000000000009181 loc_9181:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000009181                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009186                 mov     rsi, r14
.text:0000000000009189                 mov     rcx, r13
.text:000000000000918C                 mov     rax, rbx
.text:000000000000918F                 mov     rdi, rbx
.text:0000000000009192                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000009198                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000919D                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000091A5                 cmp     rsi, r11
.text:00000000000091A8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000091AE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000091B6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000091BB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000091C0                 jnb     short loc_91E8
.text:00000000000091C2                 cmp     byte ptr [rcx], 0
.text:00000000000091C5                 jnz     short loc_91D7
.text:00000000000091C7                 jmp     short loc_91E8
.text:00000000000091C7 ; ---------------------------------------------------------------------------
.text:00000000000091C9                 align 10h
.text:00000000000091D0
.text:00000000000091D0 loc_91D0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000091D0                 cmp     byte ptr [r9+rax], 0
.text:00000000000091D5                 jz      short loc_91E5
.text:00000000000091D7
.text:00000000000091D7 loc_91D7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000091D7                 add     rax, 1
.text:00000000000091DB                 lea     rdx, [rbp+rax+0]
.text:00000000000091E0                 cmp     r11, rdx
.text:00000000000091E3                 ja      short loc_91D0
.text:00000000000091E5
.text:00000000000091E5 loc_91E5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000091E5                 mov     rdi, rax
.text:00000000000091E8
.text:00000000000091E8 loc_91E8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000091E8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000091E8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000091ED                 xor     r12d, r12d
.text:00000000000091F0                 jmp     loc_8C56
.text:00000000000091F5 ; ---------------------------------------------------------------------------
.text:00000000000091F5
.text:00000000000091F5 loc_91F5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000091F5                 mov     rdi, rbx
.text:00000000000091F8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000091FE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000009203                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000009209                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000009211                 xor     r12d, r12d
.text:0000000000009214                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009219                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000921E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009223                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009228                 jmp     loc_8C56
.text:000000000000922D ; ---------------------------------------------------------------------------
.text:000000000000922D
.text:000000000000922D loc_922D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000922D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000009232                 movzx   eax, byte ptr [rdx]
.text:0000000000009235                 test    al, al
.text:0000000000009237                 jz      loc_906C
.text:000000000000923D                 nop     dword ptr [rax]
.text:0000000000009240
.text:0000000000009240 loc_9240:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000009240                 cmp     r13, r15
.text:0000000000009243                 jbe     short loc_9249
.text:0000000000009245                 mov     [r14+r15], al
.text:0000000000009249
.text:0000000000009249 loc_9249:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000009249                 add     r15, 1
.text:000000000000924D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000009252                 test    al, al
.text:0000000000009254                 jnz     short loc_9240
.text:0000000000009256                 jmp     loc_906C
.text:000000000000925B ; ---------------------------------------------------------------------------
.text:000000000000925B
.text:000000000000925B loc_925B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000925B                 mov     eax, edx
.text:000000000000925D                 jmp     loc_87B7
.text:0000000000009262 ; ---------------------------------------------------------------------------
.text:0000000000009262
.text:0000000000009262 loc_9262:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000009262                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000009266                 cmp     bl, 3Eh ; '>'
.text:0000000000009269                 ja      loc_8AE0
.text:000000000000926F                 mov     rax, 7000A38200000000h
.text:0000000000009279                 bt      rax, rbx
.text:000000000000927D                 jnb     loc_8AE0
.text:0000000000009283                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009288                 jnz     loc_9472
.text:000000000000928E                 cmp     r13, r15
.text:0000000000009291                 jbe     short loc_9298
.text:0000000000009293                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000009298
.text:0000000000009298 loc_9298:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000009298                 lea     rax, [r15+1]
.text:000000000000929C                 cmp     r13, rax
.text:000000000000929F                 jbe     short loc_92A7
.text:00000000000092A1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000092A7
.text:00000000000092A7 loc_92A7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000092A7                 lea     rax, [r15+2]
.text:00000000000092AB                 cmp     r13, rax
.text:00000000000092AE                 jbe     short loc_92B6
.text:00000000000092B0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000092B6
.text:00000000000092B6 loc_92B6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000092B6                 lea     rax, [r15+3]
.text:00000000000092BA                 cmp     r13, rax
.text:00000000000092BD                 jbe     short loc_92C5
.text:00000000000092BF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000092C5
.text:00000000000092C5 loc_92C5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000092C5                 add     r15, 4
.text:00000000000092C9                 xor     edx, edx
.text:00000000000092CB                 xor     r12d, r12d
.text:00000000000092CE                 xor     eax, eax
.text:00000000000092D0                 mov     rbp, rcx
.text:00000000000092D3                 jmp     loc_8498
.text:00000000000092D8 ; ---------------------------------------------------------------------------
.text:00000000000092D8
.text:00000000000092D8 loc_92D8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000092D8                                         ; DATA XREF: .rodata:jpt_8301↓o
.text:00000000000092D8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000092DA                 jz      loc_9468
.text:00000000000092E0                 lea     rax, asc_CAE5   ; "'"
.text:00000000000092E7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000092EC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000092F1                 xor     r12d, r12d
.text:00000000000092F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000092FD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009302                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009307                 mov     [rsp+0E8h+n], 1
.text:0000000000009310                 xor     r15d, r15d
.text:0000000000009313                 mov     [rsp+0E8h+s2], rax
.text:0000000000009318                 jmp     loc_8343
.text:0000000000009318 ; ---------------------------------------------------------------------------
.text:000000000000931D                 align 20h
.text:0000000000009320
.text:0000000000009320 loc_9320:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000009320                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000009320                 mov     rbp, r11
.text:0000000000009323                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000009328                 jmp     loc_8DF9
.text:000000000000932D ; ---------------------------------------------------------------------------
.text:000000000000932D
.text:000000000000932D loc_932D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000932D                 lea     rax, unk_CAE3
.text:0000000000009334                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009339                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000933E                 xor     r12d, r12d
.text:0000000000009341                 mov     [rsp+0E8h+var_98], 0
.text:000000000000934A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000934F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009354                 mov     [rsp+0E8h+n], 1
.text:000000000000935D                 xor     r15d, r15d
.text:0000000000009360                 mov     [rsp+0E8h+s2], rax
.text:0000000000009365                 jmp     loc_8343
.text:000000000000936A ; ---------------------------------------------------------------------------
.text:000000000000936A
.text:000000000000936A loc_936A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000936A                 mov     eax, edx
.text:000000000000936C
.text:000000000000936C loc_936C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000936C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000936C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000009371                 test    rbx, rbx
.text:0000000000009374                 jz      short loc_93A2
.text:0000000000009376                 test    al, al
.text:0000000000009378                 jz      short loc_93A2
.text:000000000000937A                 movzx   ecx, byte ptr [rbx]
.text:000000000000937D                 mov     rax, rbx
.text:0000000000009380                 test    cl, cl
.text:0000000000009382                 jz      short loc_93A2
.text:0000000000009384                 mov     rdx, r15
.text:0000000000009387                 sub     rax, r15
.text:000000000000938A
.text:000000000000938A loc_938A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000938A                 cmp     r13, rdx
.text:000000000000938D                 jbe     short loc_9393
.text:000000000000938F                 mov     [r14+rdx], cl
.text:0000000000009393
.text:0000000000009393 loc_9393:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000009393                 add     rdx, 1
.text:0000000000009397                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000939B                 test    cl, cl
.text:000000000000939D                 jnz     short loc_938A
.text:000000000000939F                 mov     r15, rdx
.text:00000000000093A2
.text:00000000000093A2 loc_93A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000093A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000093A2                 cmp     r13, r15
.text:00000000000093A5                 jbe     loc_8E49
.text:00000000000093AB                 mov     byte ptr [r14+r15], 0
.text:00000000000093B0                 jmp     loc_8E49
.text:00000000000093B5 ; ---------------------------------------------------------------------------
.text:00000000000093B5
.text:00000000000093B5 loc_93B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000093B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000093BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000093BF                 mov     rbp, r11
.text:00000000000093C2                 setz    al
.text:00000000000093C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000093C9                 jmp     loc_8DF9
.text:00000000000093CE ; ---------------------------------------------------------------------------
.text:00000000000093CE
.text:00000000000093CE loc_93CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000093CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000093D2                 mov     rdi, rcx
.text:00000000000093D5                 call    gettext_quote
.text:00000000000093DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000093DF                 jmp     loc_9036
.text:00000000000093E4 ; ---------------------------------------------------------------------------
.text:00000000000093E4
.text:00000000000093E4 loc_93E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000093E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000093E8                 mov     rdi, rcx
.text:00000000000093EB                 call    gettext_quote
.text:00000000000093F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000093F5                 jmp     loc_9061
.text:00000000000093FA ; ---------------------------------------------------------------------------
.text:00000000000093FA
.text:00000000000093FA loc_93FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000093FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000093FF                 mov     rbp, r11
.text:0000000000009402                 mov     eax, edx
.text:0000000000009404                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009408                 jmp     loc_8DF9
.text:000000000000940D ; ---------------------------------------------------------------------------
.text:000000000000940D
.text:000000000000940D loc_940D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000940D                 sub     rsp, 8
.text:0000000000009411                 mov     r8d, 5
.text:0000000000009417                 mov     rcx, r11
.text:000000000000941A                 push    [rsp+0F0h+var_88]
.text:000000000000941E                 push    [rsp+0F8h+var_80]
.text:0000000000009422                 mov     rdi, r14
.text:0000000000009425                 push    [rsp+100h+var_C8]
.text:0000000000009429                 mov     r9d, [rsp+108h+var_70]
.text:0000000000009431                 mov     rdx, [rsp+108h+s]
.text:0000000000009436                 mov     rsi, [rsp+108h+var_98]
.text:000000000000943B                 call    quotearg_buffer_restyled
.text:0000000000009440                 add     rsp, 20h
.text:0000000000009444                 mov     r15, rax
.text:0000000000009447                 jmp     loc_8E49
.text:000000000000944C ; ---------------------------------------------------------------------------
.text:000000000000944C
.text:000000000000944C loc_944C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000944C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000009451                 jmp     loc_936C
.text:0000000000009456 ; ---------------------------------------------------------------------------
.text:0000000000009456
.text:0000000000009456 loc_9456:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000009456                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000945E                 jmp     loc_8DF9
.text:0000000000009463 ; ---------------------------------------------------------------------------
.text:0000000000009463
.text:0000000000009463 loc_9463:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000009463                 call    ___stack_chk_fail
.text:0000000000009468 ; ---------------------------------------------------------------------------
.text:0000000000009468
.text:0000000000009468 loc_9468:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000009468                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000946D                 jmp     loc_8EE1
.text:0000000000009472 ; ---------------------------------------------------------------------------
.text:0000000000009472
.text:0000000000009472 loc_9472:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000009472                 mov     rbp, r11
.text:0000000000009475                 jmp     loc_8E10
.text:000000000000947A ; ---------------------------------------------------------------------------
.text:000000000000947A
.text:000000000000947A loc_947A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000947A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000947F                 xor     eax, eax
.text:0000000000009481                 xor     r12d, r12d
.text:0000000000009484                 mov     [rsp+0E8h+var_98], 0
.text:000000000000948D                 jmp     loc_8A34
.text:0000000000009492 ; ---------------------------------------------------------------------------
.text:0000000000009492
.text:0000000000009492 loc_9492:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000009492                 mov     rdx, r13
.text:0000000000009495                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000949A                 jmp     loc_8A92
.text:000000000000949F ; ---------------------------------------------------------------------------
.text:000000000000949F
.text:000000000000949F def_8301:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000949F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000949F ; } // starts at 8270
.text:000000000000949F quotearg_buffer_restyled endp
.text:000000000000949F
.text:000000000000949F ; ---------------------------------------------------------------------------
.text:00000000000094A4                 align 10h
.text:00000000000094B0
.text:00000000000094B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094B0
.text:00000000000094B0
.text:00000000000094B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000094B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000094B0
.text:00000000000094B0 var_50          = qword ptr -50h
.text:00000000000094B0 var_48          = qword ptr -48h
.text:00000000000094B0 var_40          = dword ptr -40h
.text:00000000000094B0 var_3C          = dword ptr -3Ch
.text:00000000000094B0
.text:00000000000094B0 ; __unwind {
.text:00000000000094B0                 push    r15
.text:00000000000094B2                 push    r14
.text:00000000000094B4                 movsxd  r15, edi
.text:00000000000094B7                 push    r13
.text:00000000000094B9                 push    r12
.text:00000000000094BB                 mov     r14, rdx
.text:00000000000094BE                 push    rbp
.text:00000000000094BF                 push    rbx
.text:00000000000094C0                 mov     rbp, rcx
.text:00000000000094C3                 sub     rsp, 28h
.text:00000000000094C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000094CC                 call    ___errno_location
.text:00000000000094D1                 mov     r13, rax
.text:00000000000094D4                 mov     eax, [rax]
.text:00000000000094D6                 test    r15d, r15d
.text:00000000000094D9                 mov     rbx, cs:slotvec
.text:00000000000094E0                 mov     [rsp+58h+var_40], eax
.text:00000000000094E4                 js      loc_9651
.text:00000000000094EA                 cmp     cs:nslots, r15d
.text:00000000000094F1                 jg      short loc_9555
.text:00000000000094F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000094FA                 jz      loc_9656
.text:0000000000009500                 lea     r12d, [r15+1]
.text:0000000000009504                 lea     rax, slotvec0
.text:000000000000950B                 movsxd  rsi, r12d
.text:000000000000950E                 shl     rsi, 4
.text:0000000000009512                 cmp     rbx, rax
.text:0000000000009515                 jz      loc_9630
.text:000000000000951B                 mov     rdi, rbx
.text:000000000000951E                 call    xrealloc
.text:0000000000009523                 mov     rbx, rax
.text:0000000000009526                 mov     cs:slotvec, rax
.text:000000000000952D
.text:000000000000952D loc_952D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000952D                 movsxd  rdi, cs:nslots
.text:0000000000009534                 mov     edx, r12d
.text:0000000000009537                 xor     esi, esi        ; c
.text:0000000000009539                 sub     edx, edi
.text:000000000000953B                 shl     rdi, 4
.text:000000000000953F                 movsxd  rdx, edx
.text:0000000000009542                 add     rdi, rbx        ; s
.text:0000000000009545                 shl     rdx, 4          ; n
.text:0000000000009549                 call    _memset
.text:000000000000954E                 mov     cs:nslots, r12d
.text:0000000000009555
.text:0000000000009555 loc_9555:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000009555                 mov     eax, [rbp+4]
.text:0000000000009558                 shl     r15, 4
.text:000000000000955C                 sub     rsp, 8
.text:0000000000009560                 add     rbx, r15
.text:0000000000009563                 lea     r15, [rbp+8]
.text:0000000000009567                 mov     r8d, [rbp+0]
.text:000000000000956B                 mov     r11, [rbx]
.text:000000000000956E                 mov     r12, [rbx+8]
.text:0000000000009572                 mov     rcx, r14
.text:0000000000009575                 or      eax, 1
.text:0000000000009578                 mov     [rsp+60h+var_3C], eax
.text:000000000000957C                 push    qword ptr [rbp+30h]
.text:000000000000957F                 mov     r9d, eax
.text:0000000000009582                 push    qword ptr [rbp+28h]
.text:0000000000009585                 push    r15
.text:0000000000009587                 mov     rsi, r11
.text:000000000000958A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000958F                 mov     rdi, r12
.text:0000000000009592                 mov     [rsp+78h+var_48], r11
.text:0000000000009597                 call    quotearg_buffer_restyled
.text:000000000000959C                 add     rsp, 20h
.text:00000000000095A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000095A5                 cmp     r11, rax
.text:00000000000095A8                 ja      short loc_9611
.text:00000000000095AA                 lea     rsi, [rax+1]
.text:00000000000095AE                 lea     rax, slot0
.text:00000000000095B5                 cmp     r12, rax
.text:00000000000095B8                 mov     [rbx], rsi
.text:00000000000095BB                 jz      short loc_95CF
.text:00000000000095BD                 mov     rdi, r12        ; ptr
.text:00000000000095C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000095C5                 call    _free
.text:00000000000095CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000095CF
.text:00000000000095CF loc_95CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000095CF                 mov     rdi, rsi
.text:00000000000095D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000095D7                 call    xmalloc
.text:00000000000095DC                 sub     rsp, 8
.text:00000000000095E0                 mov     [rbx+8], rax
.text:00000000000095E4                 mov     r8d, [rbp+0]
.text:00000000000095E8                 push    qword ptr [rbp+30h]
.text:00000000000095EB                 push    qword ptr [rbp+28h]
.text:00000000000095EE                 mov     rcx, r14
.text:00000000000095F1                 push    r15
.text:00000000000095F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000095F8                 mov     rdi, rax
.text:00000000000095FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000009600                 mov     rsi, [rsp+78h+var_48]
.text:0000000000009605                 mov     r12, rax
.text:0000000000009608                 call    quotearg_buffer_restyled
.text:000000000000960D                 add     rsp, 20h
.text:0000000000009611
.text:0000000000009611 loc_9611:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000009611                 mov     eax, [rsp+58h+var_40]
.text:0000000000009615                 mov     [r13+0], eax
.text:0000000000009619                 add     rsp, 28h
.text:000000000000961D                 mov     rax, r12
.text:0000000000009620                 pop     rbx
.text:0000000000009621                 pop     rbp
.text:0000000000009622                 pop     r12
.text:0000000000009624                 pop     r13
.text:0000000000009626                 pop     r14
.text:0000000000009628                 pop     r15
.text:000000000000962A                 retn
.text:000000000000962A ; ---------------------------------------------------------------------------
.text:000000000000962B                 align 10h
.text:0000000000009630
.text:0000000000009630 loc_9630:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000009630                 xor     edi, edi
.text:0000000000009632                 call    xrealloc
.text:0000000000009637                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000963F                 mov     rbx, rax
.text:0000000000009642                 mov     cs:slotvec, rax
.text:0000000000009649                 movups  xmmword ptr [rax], xmm0
.text:000000000000964C                 jmp     loc_952D
.text:0000000000009651 ; ---------------------------------------------------------------------------
.text:0000000000009651
.text:0000000000009651 loc_9651:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000009651                 call    _abort
.text:0000000000009656 ; ---------------------------------------------------------------------------
.text:0000000000009656
.text:0000000000009656 loc_9656:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000009656                 call    xalloc_die
.text:0000000000009656 ; } // starts at 94B0
.text:0000000000009656 quotearg_n_options endp
.text:0000000000009656
.text:0000000000009656 ; ---------------------------------------------------------------------------
.text:000000000000965B                 align 20h
.text:0000000000009660
.text:0000000000009660 ; =============== S U B R O U T I N E =======================================
.text:0000000000009660
.text:0000000000009660 ; Attributes: info_from_lumina
.text:0000000000009660
.text:0000000000009660 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000009660                 public clone_quoting_options
.text:0000000000009660 clone_quoting_options proc near
.text:0000000000009660 ; __unwind {
.text:0000000000009660                 push    r12
.text:0000000000009662                 push    rbp
.text:0000000000009663                 push    rbx
.text:0000000000009664                 mov     rbx, rdi
.text:0000000000009667                 call    ___errno_location
.text:000000000000966C                 mov     r12d, [rax]
.text:000000000000966F                 mov     rbp, rax
.text:0000000000009672                 lea     rax, default_quoting_options
.text:0000000000009679                 test    rbx, rbx
.text:000000000000967C                 mov     esi, 38h ; '8'  ; n
.text:0000000000009681                 cmovz   rbx, rax
.text:0000000000009685                 mov     rdi, rbx        ; src
.text:0000000000009688                 call    xmemdup
.text:000000000000968D                 mov     [rbp+0], r12d
.text:0000000000009691                 pop     rbx
.text:0000000000009692                 pop     rbp
.text:0000000000009693                 pop     r12
.text:0000000000009695                 retn
.text:0000000000009695 ; } // starts at 9660
.text:0000000000009695 clone_quoting_options endp
.text:0000000000009695
.text:0000000000009695 ; ---------------------------------------------------------------------------
.text:0000000000009696                 align 20h
.text:00000000000096A0
.text:00000000000096A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096A0
.text:00000000000096A0
.text:00000000000096A0                 public get_quoting_style
.text:00000000000096A0 get_quoting_style proc near
.text:00000000000096A0 ; __unwind {
.text:00000000000096A0                 lea     rax, default_quoting_options
.text:00000000000096A7                 test    rdi, rdi
.text:00000000000096AA                 cmovz   rdi, rax
.text:00000000000096AE                 mov     eax, [rdi]
.text:00000000000096B0                 retn
.text:00000000000096B0 ; } // starts at 96A0
.text:00000000000096B0 get_quoting_style endp
.text:00000000000096B0
.text:00000000000096B0 ; ---------------------------------------------------------------------------
.text:00000000000096B1                 align 20h
.text:00000000000096C0
.text:00000000000096C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096C0
.text:00000000000096C0
.text:00000000000096C0                 public set_quoting_style
.text:00000000000096C0 set_quoting_style proc near
.text:00000000000096C0 ; __unwind {
.text:00000000000096C0                 lea     rax, default_quoting_options
.text:00000000000096C7                 test    rdi, rdi
.text:00000000000096CA                 cmovz   rdi, rax
.text:00000000000096CE                 mov     [rdi], esi
.text:00000000000096D0                 retn
.text:00000000000096D0 ; } // starts at 96C0
.text:00000000000096D0 set_quoting_style endp
.text:00000000000096D0
.text:00000000000096D0 ; ---------------------------------------------------------------------------
.text:00000000000096D1                 align 20h
.text:00000000000096E0
.text:00000000000096E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096E0
.text:00000000000096E0 ; Attributes: info_from_lumina
.text:00000000000096E0
.text:00000000000096E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000096E0                 public set_char_quoting
.text:00000000000096E0 set_char_quoting proc near
.text:00000000000096E0 ; __unwind {
.text:00000000000096E0                 lea     rax, default_quoting_options
.text:00000000000096E7                 test    rdi, rdi
.text:00000000000096EA                 mov     ecx, esi
.text:00000000000096EC                 cmovz   rdi, rax
.text:00000000000096F0                 mov     eax, esi
.text:00000000000096F2                 and     ecx, 1Fh
.text:00000000000096F5                 shr     al, 5
.text:00000000000096F8                 movzx   eax, al
.text:00000000000096FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000009700                 mov     esi, [rdi]
.text:0000000000009702                 mov     eax, esi
.text:0000000000009704                 shr     eax, cl
.text:0000000000009706                 xor     edx, eax
.text:0000000000009708                 and     eax, 1
.text:000000000000970B                 and     edx, 1
.text:000000000000970E                 shl     edx, cl
.text:0000000000009710                 xor     edx, esi
.text:0000000000009712                 mov     [rdi], edx
.text:0000000000009714                 retn
.text:0000000000009714 ; } // starts at 96E0
.text:0000000000009714 set_char_quoting endp
.text:0000000000009714
.text:0000000000009714 ; ---------------------------------------------------------------------------
.text:0000000000009715                 align 20h
.text:0000000000009720
.text:0000000000009720 ; =============== S U B R O U T I N E =======================================
.text:0000000000009720
.text:0000000000009720
.text:0000000000009720                 public set_quoting_flags
.text:0000000000009720 set_quoting_flags proc near
.text:0000000000009720 ; __unwind {
.text:0000000000009720                 lea     rax, default_quoting_options
.text:0000000000009727                 test    rdi, rdi
.text:000000000000972A                 cmovz   rdi, rax
.text:000000000000972E                 mov     eax, [rdi+4]
.text:0000000000009731                 mov     [rdi+4], esi
.text:0000000000009734                 retn
.text:0000000000009734 ; } // starts at 9720
.text:0000000000009734 set_quoting_flags endp
.text:0000000000009734
.text:0000000000009734 ; ---------------------------------------------------------------------------
.text:0000000000009735                 align 20h
.text:0000000000009740
.text:0000000000009740 ; =============== S U B R O U T I N E =======================================
.text:0000000000009740
.text:0000000000009740 ; Attributes: info_from_lumina
.text:0000000000009740
.text:0000000000009740 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000009740                 public set_custom_quoting
.text:0000000000009740 set_custom_quoting proc near
.text:0000000000009740 ; __unwind {
.text:0000000000009740                 lea     rax, default_quoting_options
.text:0000000000009747                 test    rdi, rdi
.text:000000000000974A                 cmovz   rdi, rax
.text:000000000000974E                 test    rsi, rsi
.text:0000000000009751                 mov     dword ptr [rdi], 0Ah
.text:0000000000009757                 jz      short loc_9767
.text:0000000000009759                 test    rdx, rdx
.text:000000000000975C                 jz      short loc_9767
.text:000000000000975E                 mov     [rdi+28h], rsi
.text:0000000000009762                 mov     [rdi+30h], rdx
.text:0000000000009766                 retn
.text:0000000000009767 ; ---------------------------------------------------------------------------
.text:0000000000009767
.text:0000000000009767 loc_9767:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000009767                                         ; set_custom_quoting+1C↑j
.text:0000000000009767                 sub     rsp, 8
.text:000000000000976B                 call    _abort
.text:000000000000976B ; } // starts at 9740
.text:000000000000976B set_custom_quoting endp
.text:000000000000976B
.text:0000000000009770
.text:0000000000009770 ; =============== S U B R O U T I N E =======================================
.text:0000000000009770
.text:0000000000009770 ; Attributes: info_from_lumina
.text:0000000000009770
.text:0000000000009770 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000009770                 public quotearg_buffer
.text:0000000000009770 quotearg_buffer proc near
.text:0000000000009770
.text:0000000000009770 var_40          = qword ptr -40h
.text:0000000000009770
.text:0000000000009770 ; __unwind {
.text:0000000000009770                 push    r15
.text:0000000000009772                 push    r14
.text:0000000000009774                 lea     rax, default_quoting_options
.text:000000000000977B                 push    r13
.text:000000000000977D                 push    r12
.text:000000000000977F                 mov     r13, rdi
.text:0000000000009782                 push    rbp
.text:0000000000009783                 push    rbx
.text:0000000000009784                 mov     rbx, r8
.text:0000000000009787                 mov     r14, rsi
.text:000000000000978A                 mov     r15, rdx
.text:000000000000978D                 sub     rsp, 18h
.text:0000000000009791                 test    r8, r8
.text:0000000000009794                 cmovz   rbx, rax
.text:0000000000009798                 mov     [rsp+48h+var_40], rcx
.text:000000000000979D                 call    ___errno_location
.text:00000000000097A2                 mov     r12d, [rax]
.text:00000000000097A5                 mov     rbp, rax
.text:00000000000097A8                 lea     rax, [rbx+8]
.text:00000000000097AC                 sub     rsp, 8
.text:00000000000097B0                 mov     r9d, [rbx+4]
.text:00000000000097B4                 push    qword ptr [rbx+30h]
.text:00000000000097B7                 mov     r8d, [rbx]
.text:00000000000097BA                 push    qword ptr [rbx+28h]
.text:00000000000097BD                 mov     rdx, r15
.text:00000000000097C0                 push    rax
.text:00000000000097C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000097C6                 mov     rsi, r14
.text:00000000000097C9                 mov     rdi, r13
.text:00000000000097CC                 call    quotearg_buffer_restyled
.text:00000000000097D1                 mov     [rbp+0], r12d
.text:00000000000097D5                 add     rsp, 38h
.text:00000000000097D9                 pop     rbx
.text:00000000000097DA                 pop     rbp
.text:00000000000097DB                 pop     r12
.text:00000000000097DD                 pop     r13
.text:00000000000097DF                 pop     r14
.text:00000000000097E1                 pop     r15
.text:00000000000097E3                 retn
.text:00000000000097E3 ; } // starts at 9770
.text:00000000000097E3 quotearg_buffer endp
.text:00000000000097E3
.text:00000000000097E3 ; ---------------------------------------------------------------------------
.text:00000000000097E4                 align 10h
.text:00000000000097F0
.text:00000000000097F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097F0
.text:00000000000097F0 ; Attributes: info_from_lumina
.text:00000000000097F0
.text:00000000000097F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000097F0                 public quotearg_alloc_mem
.text:00000000000097F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000097F0
.text:00000000000097F0 var_5C          = dword ptr -5Ch
.text:00000000000097F0 var_58          = qword ptr -58h
.text:00000000000097F0 var_50          = qword ptr -50h
.text:00000000000097F0 var_48          = qword ptr -48h
.text:00000000000097F0 var_40          = qword ptr -40h
.text:00000000000097F0
.text:00000000000097F0 ; __unwind {
.text:00000000000097F0                 push    r15
.text:00000000000097F2                 push    r14
.text:00000000000097F4                 lea     rax, default_quoting_options
.text:00000000000097FB                 push    r13
.text:00000000000097FD                 push    r12
.text:00000000000097FF                 mov     r12, rdx
.text:0000000000009802                 push    rbp
.text:0000000000009803                 push    rbx
.text:0000000000009804                 mov     rbx, rcx
.text:0000000000009807                 mov     r14, rdi
.text:000000000000980A                 mov     r15, rsi
.text:000000000000980D                 sub     rsp, 38h
.text:0000000000009811                 test    rcx, rcx
.text:0000000000009814                 cmovz   rbx, rax
.text:0000000000009818                 xor     ebp, ebp
.text:000000000000981A                 call    ___errno_location
.text:000000000000981F                 test    r12, r12
.text:0000000000009822                 mov     r13, rax
.text:0000000000009825                 mov     eax, [rax]
.text:0000000000009827                 setz    bpl
.text:000000000000982B                 or      ebp, [rbx+4]
.text:000000000000982E                 lea     r10, [rbx+8]
.text:0000000000009832                 sub     rsp, 8
.text:0000000000009836                 mov     r8d, [rbx]
.text:0000000000009839                 mov     rcx, r15
.text:000000000000983C                 mov     [rsp+70h+var_5C], eax
.text:0000000000009840                 push    qword ptr [rbx+30h]
.text:0000000000009843                 mov     rdx, r14
.text:0000000000009846                 push    qword ptr [rbx+28h]
.text:0000000000009849                 push    r10
.text:000000000000984B                 xor     esi, esi
.text:000000000000984D                 mov     r9d, ebp
.text:0000000000009850                 xor     edi, edi
.text:0000000000009852                 mov     [rsp+88h+var_48], r10
.text:0000000000009857                 call    quotearg_buffer_restyled
.text:000000000000985C                 lea     rsi, [rax+1]
.text:0000000000009860                 mov     [rsp+88h+var_40], rax
.text:0000000000009865                 add     rsp, 20h
.text:0000000000009869                 mov     rdi, rsi
.text:000000000000986C                 mov     [rsp+68h+var_50], rsi
.text:0000000000009871                 call    xmalloc
.text:0000000000009876                 mov     [rsp+68h+var_58], rax
.text:000000000000987B                 sub     rsp, 8
.text:000000000000987F                 push    qword ptr [rbx+30h]
.text:0000000000009882                 push    qword ptr [rbx+28h]
.text:0000000000009885                 mov     r10, [rsp+80h+var_48]
.text:000000000000988A                 mov     r9d, ebp
.text:000000000000988D                 mov     r8d, [rbx]
.text:0000000000009890                 mov     rcx, r15
.text:0000000000009893                 mov     rdx, r14
.text:0000000000009896                 mov     rdi, rax
.text:0000000000009899                 push    r10
.text:000000000000989B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000098A0                 call    quotearg_buffer_restyled
.text:00000000000098A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000098A9                 add     rsp, 20h
.text:00000000000098AD                 test    r12, r12
.text:00000000000098B0                 mov     [r13+0], eax
.text:00000000000098B4                 jz      short loc_98BF
.text:00000000000098B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000098BB                 mov     [r12], r11
.text:00000000000098BF
.text:00000000000098BF loc_98BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000098BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000098C4                 add     rsp, 38h
.text:00000000000098C8                 pop     rbx
.text:00000000000098C9                 pop     rbp
.text:00000000000098CA                 pop     r12
.text:00000000000098CC                 pop     r13
.text:00000000000098CE                 pop     r14
.text:00000000000098D0                 pop     r15
.text:00000000000098D2                 retn
.text:00000000000098D2 ; } // starts at 97F0
.text:00000000000098D2 quotearg_alloc_mem endp
.text:00000000000098D2
.text:00000000000098D2 ; ---------------------------------------------------------------------------
.text:00000000000098D3                 align 20h
.text:00000000000098E0
.text:00000000000098E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098E0
.text:00000000000098E0
.text:00000000000098E0                 public quotearg_alloc
.text:00000000000098E0 quotearg_alloc  proc near
.text:00000000000098E0 ; __unwind {
.text:00000000000098E0                 mov     rcx, rdx
.text:00000000000098E3                 xor     edx, edx
.text:00000000000098E5                 jmp     quotearg_alloc_mem
.text:00000000000098E5 ; } // starts at 98E0
.text:00000000000098E5 quotearg_alloc  endp
.text:00000000000098E5
.text:00000000000098E5 ; ---------------------------------------------------------------------------
.text:00000000000098EA                 align 10h
.text:00000000000098F0
.text:00000000000098F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098F0
.text:00000000000098F0 ; Attributes: info_from_lumina
.text:00000000000098F0
.text:00000000000098F0 ; void __cdecl quotearg_free()
.text:00000000000098F0                 public quotearg_free
.text:00000000000098F0 quotearg_free   proc near
.text:00000000000098F0 ; __unwind {
.text:00000000000098F0                 mov     eax, cs:nslots
.text:00000000000098F6                 push    r12
.text:00000000000098F8                 mov     r12, cs:slotvec
.text:00000000000098FF                 push    rbp
.text:0000000000009900                 push    rbx
.text:0000000000009901                 cmp     eax, 1
.text:0000000000009904                 jle     short loc_9931
.text:0000000000009906                 sub     eax, 2
.text:0000000000009909                 lea     rbx, [r12+18h]
.text:000000000000990E                 shl     rax, 4
.text:0000000000009912                 lea     rbp, [r12+rax+28h]
.text:0000000000009917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000009920                 mov     rdi, [rbx]      ; ptr
.text:0000000000009923                 add     rbx, 10h
.text:0000000000009927                 call    _free
.text:000000000000992C                 cmp     rbx, rbp
.text:000000000000992F                 jnz     short loc_9920
.text:0000000000009931
.text:0000000000009931 loc_9931:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000009931                 mov     rdi, [r12+8]    ; ptr
.text:0000000000009936                 lea     rbx, slot0
.text:000000000000993D                 cmp     rdi, rbx
.text:0000000000009940                 jz      short loc_9959
.text:0000000000009942                 call    _free
.text:0000000000009947                 mov     cs:slotvec0, 100h
.text:0000000000009952                 mov     cs:off_2100B8, rbx
.text:0000000000009959
.text:0000000000009959 loc_9959:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000009959                 lea     rbx, slotvec0
.text:0000000000009960                 cmp     r12, rbx
.text:0000000000009963                 jz      short loc_9974
.text:0000000000009965                 mov     rdi, r12        ; ptr
.text:0000000000009968                 call    _free
.text:000000000000996D                 mov     cs:slotvec, rbx
.text:0000000000009974
.text:0000000000009974 loc_9974:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000009974                 pop     rbx
.text:0000000000009975                 mov     cs:nslots, 1
.text:000000000000997F                 pop     rbp
.text:0000000000009980                 pop     r12
.text:0000000000009982                 retn
.text:0000000000009982 ; } // starts at 98F0
.text:0000000000009982 quotearg_free   endp
.text:0000000000009982
.text:0000000000009982 ; ---------------------------------------------------------------------------
.text:0000000000009983                 align 10h
.text:0000000000009990
.text:0000000000009990 ; =============== S U B R O U T I N E =======================================
.text:0000000000009990
.text:0000000000009990
.text:0000000000009990                 public quotearg_n
.text:0000000000009990 quotearg_n      proc near
.text:0000000000009990 ; __unwind {
.text:0000000000009990                 lea     rcx, default_quoting_options
.text:0000000000009997                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000999E                 jmp     quotearg_n_options
.text:000000000000999E ; } // starts at 9990
.text:000000000000999E quotearg_n      endp
.text:000000000000999E
.text:000000000000999E ; ---------------------------------------------------------------------------
.text:00000000000099A3                 align 10h
.text:00000000000099B0
.text:00000000000099B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099B0
.text:00000000000099B0
.text:00000000000099B0                 public quotearg_n_mem
.text:00000000000099B0 quotearg_n_mem  proc near
.text:00000000000099B0 ; __unwind {
.text:00000000000099B0                 lea     rcx, default_quoting_options
.text:00000000000099B7                 jmp     quotearg_n_options
.text:00000000000099B7 ; } // starts at 99B0
.text:00000000000099B7 quotearg_n_mem  endp
.text:00000000000099B7
.text:00000000000099B7 ; ---------------------------------------------------------------------------
.text:00000000000099BC                 align 20h
.text:00000000000099C0
.text:00000000000099C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099C0
.text:00000000000099C0
.text:00000000000099C0                 public quotearg
.text:00000000000099C0 quotearg        proc near
.text:00000000000099C0 ; __unwind {
.text:00000000000099C0                 lea     rcx, default_quoting_options
.text:00000000000099C7                 mov     rsi, rdi
.text:00000000000099CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000099D1                 xor     edi, edi
.text:00000000000099D3                 jmp     quotearg_n_options
.text:00000000000099D3 ; } // starts at 99C0
.text:00000000000099D3 quotearg        endp
.text:00000000000099D3
.text:00000000000099D3 ; ---------------------------------------------------------------------------
.text:00000000000099D8                 align 20h
.text:00000000000099E0
.text:00000000000099E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099E0
.text:00000000000099E0
.text:00000000000099E0                 public quotearg_mem
.text:00000000000099E0 quotearg_mem    proc near
.text:00000000000099E0 ; __unwind {
.text:00000000000099E0                 lea     rcx, default_quoting_options
.text:00000000000099E7                 mov     rdx, rsi
.text:00000000000099EA                 mov     rsi, rdi
.text:00000000000099ED                 xor     edi, edi
.text:00000000000099EF                 jmp     quotearg_n_options
.text:00000000000099EF ; } // starts at 99E0
.text:00000000000099EF quotearg_mem    endp
.text:00000000000099EF
.text:00000000000099EF ; ---------------------------------------------------------------------------
.text:00000000000099F4                 align 20h
.text:0000000000009A00
.text:0000000000009A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A00
.text:0000000000009A00 ; Attributes: info_from_lumina
.text:0000000000009A00
.text:0000000000009A00 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000009A00                 public quotearg_n_style
.text:0000000000009A00 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000009A00                                         ; quotearg_style+7↓j
.text:0000000000009A00
.text:0000000000009A00 var_48          = dword ptr -48h
.text:0000000000009A00 var_44          = qword ptr -44h
.text:0000000000009A00 var_3C          = qword ptr -3Ch
.text:0000000000009A00 var_34          = qword ptr -34h
.text:0000000000009A00 var_2C          = qword ptr -2Ch
.text:0000000000009A00 var_24          = qword ptr -24h
.text:0000000000009A00 var_1C          = qword ptr -1Ch
.text:0000000000009A00 var_14          = dword ptr -14h
.text:0000000000009A00 var_10          = qword ptr -10h
.text:0000000000009A00
.text:0000000000009A00 ; __unwind {
.text:0000000000009A00                 sub     rsp, 48h
.text:0000000000009A04                 mov     rax, rdx
.text:0000000000009A07                 mov     rdx, fs:28h
.text:0000000000009A10                 mov     [rsp+48h+var_10], rdx
.text:0000000000009A15                 xor     edx, edx
.text:0000000000009A17                 cmp     esi, 0Ah
.text:0000000000009A1A                 jz      short loc_9A84
.text:0000000000009A1C                 mov     [rsp+48h+var_48], esi
.text:0000000000009A1F                 mov     rcx, rsp
.text:0000000000009A22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009A29                 mov     rsi, rax
.text:0000000000009A2C                 mov     [rsp+48h+var_44], 0
.text:0000000000009A35                 mov     [rsp+48h+var_3C], 0
.text:0000000000009A3E                 mov     [rsp+48h+var_34], 0
.text:0000000000009A47                 mov     [rsp+48h+var_2C], 0
.text:0000000000009A50                 mov     [rsp+48h+var_24], 0
.text:0000000000009A59                 mov     [rsp+48h+var_1C], 0
.text:0000000000009A62                 mov     [rsp+48h+var_14], 0
.text:0000000000009A6A                 call    quotearg_n_options
.text:0000000000009A6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009A74                 xor     rcx, fs:28h
.text:0000000000009A7D                 jnz     short loc_9A89
.text:0000000000009A7F                 add     rsp, 48h
.text:0000000000009A83                 retn
.text:0000000000009A84 ; ---------------------------------------------------------------------------
.text:0000000000009A84
.text:0000000000009A84 loc_9A84:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000009A84                 call    _abort
.text:0000000000009A89 ; ---------------------------------------------------------------------------
.text:0000000000009A89
.text:0000000000009A89 loc_9A89:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000009A89                 call    ___stack_chk_fail
.text:0000000000009A89 ; } // starts at 9A00
.text:0000000000009A89 quotearg_n_style endp
.text:0000000000009A89
.text:0000000000009A89 ; ---------------------------------------------------------------------------
.text:0000000000009A8E                 align 10h
.text:0000000000009A90
.text:0000000000009A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A90
.text:0000000000009A90 ; Attributes: info_from_lumina
.text:0000000000009A90
.text:0000000000009A90 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000009A90                 public quotearg_n_style_mem
.text:0000000000009A90 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000009A90
.text:0000000000009A90 var_48          = dword ptr -48h
.text:0000000000009A90 var_44          = qword ptr -44h
.text:0000000000009A90 var_3C          = qword ptr -3Ch
.text:0000000000009A90 var_34          = qword ptr -34h
.text:0000000000009A90 var_2C          = qword ptr -2Ch
.text:0000000000009A90 var_24          = qword ptr -24h
.text:0000000000009A90 var_1C          = qword ptr -1Ch
.text:0000000000009A90 var_14          = dword ptr -14h
.text:0000000000009A90 var_10          = qword ptr -10h
.text:0000000000009A90
.text:0000000000009A90 ; __unwind {
.text:0000000000009A90                 sub     rsp, 48h
.text:0000000000009A94                 mov     rax, rdx
.text:0000000000009A97                 mov     rdx, rcx
.text:0000000000009A9A                 mov     rcx, fs:28h
.text:0000000000009AA3                 mov     [rsp+48h+var_10], rcx
.text:0000000000009AA8                 xor     ecx, ecx
.text:0000000000009AAA                 cmp     esi, 0Ah
.text:0000000000009AAD                 jz      short loc_9B10
.text:0000000000009AAF                 mov     [rsp+48h+var_48], esi
.text:0000000000009AB2                 mov     rcx, rsp
.text:0000000000009AB5                 mov     rsi, rax
.text:0000000000009AB8                 mov     [rsp+48h+var_44], 0
.text:0000000000009AC1                 mov     [rsp+48h+var_3C], 0
.text:0000000000009ACA                 mov     [rsp+48h+var_34], 0
.text:0000000000009AD3                 mov     [rsp+48h+var_2C], 0
.text:0000000000009ADC                 mov     [rsp+48h+var_24], 0
.text:0000000000009AE5                 mov     [rsp+48h+var_1C], 0
.text:0000000000009AEE                 mov     [rsp+48h+var_14], 0
.text:0000000000009AF6                 call    quotearg_n_options
.text:0000000000009AFB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000009B00                 xor     rdx, fs:28h
.text:0000000000009B09                 jnz     short loc_9B15
.text:0000000000009B0B                 add     rsp, 48h
.text:0000000000009B0F                 retn
.text:0000000000009B10 ; ---------------------------------------------------------------------------
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000009B10                 call    _abort
.text:0000000000009B15 ; ---------------------------------------------------------------------------
.text:0000000000009B15
.text:0000000000009B15 loc_9B15:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000009B15                 call    ___stack_chk_fail
.text:0000000000009B15 ; } // starts at 9A90
.text:0000000000009B15 quotearg_n_style_mem endp
.text:0000000000009B15
.text:0000000000009B15 ; ---------------------------------------------------------------------------
.text:0000000000009B1A                 align 20h
.text:0000000000009B20
.text:0000000000009B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B20
.text:0000000000009B20
.text:0000000000009B20                 public quotearg_style
.text:0000000000009B20 quotearg_style  proc near               ; CODE XREF: main+A53↑p
.text:0000000000009B20                                         ; main+D95↑p ...
.text:0000000000009B20 ; __unwind {
.text:0000000000009B20                 mov     rdx, rsi
.text:0000000000009B23                 mov     esi, edi
.text:0000000000009B25                 xor     edi, edi
.text:0000000000009B27                 jmp     quotearg_n_style
.text:0000000000009B27 ; } // starts at 9B20
.text:0000000000009B27 quotearg_style  endp
.text:0000000000009B27
.text:0000000000009B27 ; ---------------------------------------------------------------------------
.text:0000000000009B2C                 align 10h
.text:0000000000009B30
.text:0000000000009B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B30
.text:0000000000009B30
.text:0000000000009B30                 public quotearg_style_mem
.text:0000000000009B30 quotearg_style_mem proc near
.text:0000000000009B30 ; __unwind {
.text:0000000000009B30                 mov     rcx, rdx
.text:0000000000009B33                 mov     rdx, rsi
.text:0000000000009B36                 mov     esi, edi
.text:0000000000009B38                 xor     edi, edi
.text:0000000000009B3A                 jmp     quotearg_n_style_mem
.text:0000000000009B3A ; } // starts at 9B30
.text:0000000000009B3A quotearg_style_mem endp
.text:0000000000009B3A
.text:0000000000009B3A ; ---------------------------------------------------------------------------
.text:0000000000009B3F                 align 20h
.text:0000000000009B40
.text:0000000000009B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B40
.text:0000000000009B40 ; Attributes: info_from_lumina
.text:0000000000009B40
.text:0000000000009B40 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000009B40                 public quotearg_char_mem
.text:0000000000009B40 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000009B40                                         ; quotearg_colon+C↓j ...
.text:0000000000009B40
.text:0000000000009B40 var_48          = xmmword ptr -48h
.text:0000000000009B40 var_38          = xmmword ptr -38h
.text:0000000000009B40 var_28          = xmmword ptr -28h
.text:0000000000009B40 var_18          = qword ptr -18h
.text:0000000000009B40 var_10          = qword ptr -10h
.text:0000000000009B40
.text:0000000000009B40 ; __unwind {
.text:0000000000009B40                 sub     rsp, 48h
.text:0000000000009B44                 mov     ecx, edx
.text:0000000000009B46                 mov     rax, fs:28h
.text:0000000000009B4F                 mov     [rsp+48h+var_10], rax
.text:0000000000009B54                 xor     eax, eax
.text:0000000000009B56                 mov     rax, cs:qword_210270
.text:0000000000009B5D                 mov     r8, rsp
.text:0000000000009B60                 and     ecx, 1Fh
.text:0000000000009B63                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000009B6B                 mov     [rsp+48h+var_18], rax
.text:0000000000009B70                 mov     eax, edx
.text:0000000000009B72                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000009B76                 shr     al, 5
.text:0000000000009B79                 movzx   eax, al
.text:0000000000009B7C                 lea     r9, [r8+rax*4+8]
.text:0000000000009B81                 movdqa  xmm0, cs:xmmword_210250
.text:0000000000009B89                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000009B8E                 movdqa  xmm0, cs:xmmword_210260
.text:0000000000009B96                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000009B9B                 mov     edx, [r9]
.text:0000000000009B9E                 mov     eax, edx
.text:0000000000009BA0                 shr     eax, cl
.text:0000000000009BA2                 not     eax
.text:0000000000009BA4                 and     eax, 1
.text:0000000000009BA7                 shl     eax, cl
.text:0000000000009BA9                 mov     rcx, r8
.text:0000000000009BAC                 xor     eax, edx
.text:0000000000009BAE                 mov     rdx, rsi
.text:0000000000009BB1                 mov     rsi, rdi
.text:0000000000009BB4                 mov     [r9], eax
.text:0000000000009BB7                 xor     edi, edi
.text:0000000000009BB9                 call    quotearg_n_options
.text:0000000000009BBE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000009BC3                 xor     rsi, fs:28h
.text:0000000000009BCC                 jnz     short loc_9BD3
.text:0000000000009BCE                 add     rsp, 48h
.text:0000000000009BD2                 retn
.text:0000000000009BD3 ; ---------------------------------------------------------------------------
.text:0000000000009BD3
.text:0000000000009BD3 loc_9BD3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000009BD3                 call    ___stack_chk_fail
.text:0000000000009BD3 ; } // starts at 9B40
.text:0000000000009BD3 quotearg_char_mem endp
.text:0000000000009BD3
.text:0000000000009BD3 ; ---------------------------------------------------------------------------
.text:0000000000009BD8                 align 20h
.text:0000000000009BE0
.text:0000000000009BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BE0
.text:0000000000009BE0
.text:0000000000009BE0                 public quotearg_char
.text:0000000000009BE0 quotearg_char   proc near
.text:0000000000009BE0 ; __unwind {
.text:0000000000009BE0                 movsx   edx, sil
.text:0000000000009BE4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000009BEB                 jmp     quotearg_char_mem
.text:0000000000009BEB ; } // starts at 9BE0
.text:0000000000009BEB quotearg_char   endp
.text:0000000000009BEB
.text:0000000000009BF0
.text:0000000000009BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BF0
.text:0000000000009BF0
.text:0000000000009BF0                 public quotearg_colon
.text:0000000000009BF0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000009BF0 ; __unwind {
.text:0000000000009BF0                 mov     edx, 3Ah ; ':'
.text:0000000000009BF5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000009BFC                 jmp     quotearg_char_mem
.text:0000000000009BFC ; } // starts at 9BF0
.text:0000000000009BFC quotearg_colon  endp
.text:0000000000009BFC
.text:0000000000009BFC ; ---------------------------------------------------------------------------
.text:0000000000009C01                 align 10h
.text:0000000000009C10
.text:0000000000009C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C10
.text:0000000000009C10
.text:0000000000009C10                 public quotearg_colon_mem
.text:0000000000009C10 quotearg_colon_mem proc near
.text:0000000000009C10 ; __unwind {
.text:0000000000009C10                 mov     edx, 3Ah ; ':'
.text:0000000000009C15                 jmp     quotearg_char_mem
.text:0000000000009C15 ; } // starts at 9C10
.text:0000000000009C15 quotearg_colon_mem endp
.text:0000000000009C15
.text:0000000000009C15 ; ---------------------------------------------------------------------------
.text:0000000000009C1A                 align 20h
.text:0000000000009C20
.text:0000000000009C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C20
.text:0000000000009C20 ; Attributes: info_from_lumina
.text:0000000000009C20
.text:0000000000009C20 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000009C20                 public quotearg_n_style_colon
.text:0000000000009C20 quotearg_n_style_colon proc near        ; CODE XREF: main+F02↑p
.text:0000000000009C20                                         ; main+194C↑p ...
.text:0000000000009C20
.text:0000000000009C20 var_48          = dword ptr -48h
.text:0000000000009C20 var_44          = qword ptr -44h
.text:0000000000009C20 var_3C          = qword ptr -3Ch
.text:0000000000009C20 var_34          = qword ptr -34h
.text:0000000000009C20 var_2C          = qword ptr -2Ch
.text:0000000000009C20 var_24          = qword ptr -24h
.text:0000000000009C20 var_1C          = qword ptr -1Ch
.text:0000000000009C20 var_14          = dword ptr -14h
.text:0000000000009C20 var_10          = qword ptr -10h
.text:0000000000009C20
.text:0000000000009C20 ; __unwind {
.text:0000000000009C20                 sub     rsp, 48h
.text:0000000000009C24                 mov     rax, rdx
.text:0000000000009C27                 mov     rdx, fs:28h
.text:0000000000009C30                 mov     [rsp+48h+var_10], rdx
.text:0000000000009C35                 xor     edx, edx
.text:0000000000009C37                 cmp     esi, 0Ah
.text:0000000000009C3A                 jz      short loc_9CA4
.text:0000000000009C3C                 mov     [rsp+48h+var_48], esi
.text:0000000000009C3F                 mov     rcx, rsp
.text:0000000000009C42                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009C49                 mov     rsi, rax
.text:0000000000009C4C                 mov     [rsp+48h+var_44], 0
.text:0000000000009C55                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000009C5E                 mov     [rsp+48h+var_34], 0
.text:0000000000009C67                 mov     [rsp+48h+var_2C], 0
.text:0000000000009C70                 mov     [rsp+48h+var_24], 0
.text:0000000000009C79                 mov     [rsp+48h+var_1C], 0
.text:0000000000009C82                 mov     [rsp+48h+var_14], 0
.text:0000000000009C8A                 call    quotearg_n_options
.text:0000000000009C8F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009C94                 xor     rcx, fs:28h
.text:0000000000009C9D                 jnz     short loc_9CA9
.text:0000000000009C9F                 add     rsp, 48h
.text:0000000000009CA3                 retn
.text:0000000000009CA4 ; ---------------------------------------------------------------------------
.text:0000000000009CA4
.text:0000000000009CA4 loc_9CA4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000009CA4                 call    _abort
.text:0000000000009CA9 ; ---------------------------------------------------------------------------
.text:0000000000009CA9
.text:0000000000009CA9 loc_9CA9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000009CA9                 call    ___stack_chk_fail
.text:0000000000009CA9 ; } // starts at 9C20
.text:0000000000009CA9 quotearg_n_style_colon endp
.text:0000000000009CA9
.text:0000000000009CA9 ; ---------------------------------------------------------------------------
.text:0000000000009CAE                 align 10h
.text:0000000000009CB0
.text:0000000000009CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CB0
.text:0000000000009CB0 ; Attributes: info_from_lumina
.text:0000000000009CB0
.text:0000000000009CB0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000009CB0                 public quotearg_n_custom_mem
.text:0000000000009CB0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000009CB0                                         ; quotearg_custom+12↓j ...
.text:0000000000009CB0
.text:0000000000009CB0 var_48          = xmmword ptr -48h
.text:0000000000009CB0 var_38          = xmmword ptr -38h
.text:0000000000009CB0 var_28          = xmmword ptr -28h
.text:0000000000009CB0 var_18          = qword ptr -18h
.text:0000000000009CB0 var_10          = qword ptr -10h
.text:0000000000009CB0
.text:0000000000009CB0 ; __unwind {
.text:0000000000009CB0                 sub     rsp, 48h
.text:0000000000009CB4                 mov     r9, rcx
.text:0000000000009CB7                 mov     rcx, cs:qword_210270
.text:0000000000009CBE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000009CC6                 mov     rax, fs:28h
.text:0000000000009CCF                 mov     [rsp+48h+var_10], rax
.text:0000000000009CD4                 xor     eax, eax
.text:0000000000009CD6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000009CDA                 test    rsi, rsi
.text:0000000000009CDD                 mov     [rsp+48h+var_18], rcx
.text:0000000000009CE2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000009CE9                 movdqa  xmm0, cs:xmmword_210250
.text:0000000000009CF1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000009CF6                 movdqa  xmm0, cs:xmmword_210260
.text:0000000000009CFE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000009D03                 jz      short loc_9D37
.text:0000000000009D05                 test    rdx, rdx
.text:0000000000009D08                 jz      short loc_9D37
.text:0000000000009D0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000009D0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000009D14                 mov     rcx, rsp
.text:0000000000009D17                 mov     rdx, r8
.text:0000000000009D1A                 mov     rsi, r9
.text:0000000000009D1D                 call    quotearg_n_options
.text:0000000000009D22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000009D27                 xor     rdi, fs:28h
.text:0000000000009D30                 jnz     short loc_9D3C
.text:0000000000009D32                 add     rsp, 48h
.text:0000000000009D36                 retn
.text:0000000000009D37 ; ---------------------------------------------------------------------------
.text:0000000000009D37
.text:0000000000009D37 loc_9D37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000009D37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000009D37                 call    _abort
.text:0000000000009D3C ; ---------------------------------------------------------------------------
.text:0000000000009D3C
.text:0000000000009D3C loc_9D3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000009D3C                 call    ___stack_chk_fail
.text:0000000000009D3C ; } // starts at 9CB0
.text:0000000000009D3C quotearg_n_custom_mem endp
.text:0000000000009D3C
.text:0000000000009D3C ; ---------------------------------------------------------------------------
.text:0000000000009D41                 align 10h
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50
.text:0000000000009D50                 public quotearg_n_custom
.text:0000000000009D50 quotearg_n_custom proc near
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000009D57                 jmp     quotearg_n_custom_mem
.text:0000000000009D57 ; } // starts at 9D50
.text:0000000000009D57 quotearg_n_custom endp
.text:0000000000009D57
.text:0000000000009D57 ; ---------------------------------------------------------------------------
.text:0000000000009D5C                 align 20h
.text:0000000000009D60
.text:0000000000009D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D60
.text:0000000000009D60
.text:0000000000009D60                 public quotearg_custom
.text:0000000000009D60 quotearg_custom proc near
.text:0000000000009D60 ; __unwind {
.text:0000000000009D60                 mov     rcx, rdx
.text:0000000000009D63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000009D6A                 mov     rdx, rsi
.text:0000000000009D6D                 mov     rsi, rdi
.text:0000000000009D70                 xor     edi, edi
.text:0000000000009D72                 jmp     quotearg_n_custom_mem
.text:0000000000009D72 ; } // starts at 9D60
.text:0000000000009D72 quotearg_custom endp
.text:0000000000009D72
.text:0000000000009D72 ; ---------------------------------------------------------------------------
.text:0000000000009D77                 align 20h
.text:0000000000009D80
.text:0000000000009D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D80
.text:0000000000009D80
.text:0000000000009D80                 public quotearg_custom_mem
.text:0000000000009D80 quotearg_custom_mem proc near
.text:0000000000009D80 ; __unwind {
.text:0000000000009D80                 mov     r8, rcx
.text:0000000000009D83                 mov     rcx, rdx
.text:0000000000009D86                 mov     rdx, rsi
.text:0000000000009D89                 mov     rsi, rdi
.text:0000000000009D8C                 xor     edi, edi
.text:0000000000009D8E                 jmp     quotearg_n_custom_mem
.text:0000000000009D8E ; } // starts at 9D80
.text:0000000000009D8E quotearg_custom_mem endp
.text:0000000000009D8E
.text:0000000000009D8E ; ---------------------------------------------------------------------------
.text:0000000000009D93                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DA0
.text:0000000000009DA0
.text:0000000000009DA0                 public quote_n_mem
.text:0000000000009DA0 quote_n_mem     proc near
.text:0000000000009DA0 ; __unwind {
.text:0000000000009DA0                 lea     rcx, quote_quoting_options
.text:0000000000009DA7                 jmp     quotearg_n_options
.text:0000000000009DA7 ; } // starts at 9DA0
.text:0000000000009DA7 quote_n_mem     endp
.text:0000000000009DA7
.text:0000000000009DA7 ; ---------------------------------------------------------------------------
.text:0000000000009DAC                 align 10h
.text:0000000000009DB0
.text:0000000000009DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DB0
.text:0000000000009DB0
.text:0000000000009DB0                 public quote_mem
.text:0000000000009DB0 quote_mem       proc near
.text:0000000000009DB0 ; __unwind {
.text:0000000000009DB0                 lea     rcx, quote_quoting_options
.text:0000000000009DB7                 mov     rdx, rsi
.text:0000000000009DBA                 mov     rsi, rdi
.text:0000000000009DBD                 xor     edi, edi
.text:0000000000009DBF                 jmp     quotearg_n_options
.text:0000000000009DBF ; } // starts at 9DB0
.text:0000000000009DBF quote_mem       endp
.text:0000000000009DBF
.text:0000000000009DBF ; ---------------------------------------------------------------------------
.text:0000000000009DC4                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DD0
.text:0000000000009DD0
.text:0000000000009DD0                 public quote_n
.text:0000000000009DD0 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000009DD0 ; __unwind {
.text:0000000000009DD0                 lea     rcx, quote_quoting_options
.text:0000000000009DD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009DDE                 jmp     quotearg_n_options
.text:0000000000009DDE ; } // starts at 9DD0
.text:0000000000009DDE quote_n         endp
.text:0000000000009DDE
.text:0000000000009DDE ; ---------------------------------------------------------------------------
.text:0000000000009DE3                 align 10h
.text:0000000000009DF0
.text:0000000000009DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DF0
.text:0000000000009DF0
.text:0000000000009DF0                 public quote
.text:0000000000009DF0 quote           proc near               ; CODE XREF: main+2F9↑p
.text:0000000000009DF0                                         ; main+27C8↑p ...
.text:0000000000009DF0 ; __unwind {
.text:0000000000009DF0                 lea     rcx, quote_quoting_options
.text:0000000000009DF7                 mov     rsi, rdi
.text:0000000000009DFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009E01                 xor     edi, edi
.text:0000000000009E03                 jmp     quotearg_n_options
.text:0000000000009E03 ; } // starts at 9DF0
.text:0000000000009E03 quote           endp
.text:0000000000009E03
.text:0000000000009E03 ; ---------------------------------------------------------------------------
.text:0000000000009E08                 align 10h
.text:0000000000009E10
.text:0000000000009E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E10
.text:0000000000009E10
.text:0000000000009E10 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000009E10                 public safe_read
.text:0000000000009E10 safe_read       proc near               ; CODE XREF: main+B9C↑p
.text:0000000000009E10                                         ; main+FE4↑p ...
.text:0000000000009E10 ; __unwind {
.text:0000000000009E10                 push    r13
.text:0000000000009E12                 push    r12
.text:0000000000009E14                 mov     r13d, edi
.text:0000000000009E17                 push    rbp
.text:0000000000009E18                 push    rbx
.text:0000000000009E19                 mov     r12, rsi
.text:0000000000009E1C                 mov     rbx, rdx
.text:0000000000009E1F                 sub     rsp, 8
.text:0000000000009E23                 nop     dword ptr [rax+rax+00h]
.text:0000000000009E28
.text:0000000000009E28 loc_9E28:                               ; CODE XREF: safe_read+38↓j
.text:0000000000009E28                                         ; safe_read+4D↓j
.text:0000000000009E28                 mov     rdx, rbx        ; nbytes
.text:0000000000009E2B                 mov     rsi, r12        ; buf
.text:0000000000009E2E                 mov     edi, r13d       ; fd
.text:0000000000009E31                 call    _read
.text:0000000000009E36                 test    rax, rax
.text:0000000000009E39                 mov     rbp, rax
.text:0000000000009E3C                 jns     short loc_9E60
.text:0000000000009E3E                 call    ___errno_location
.text:0000000000009E43                 mov     eax, [rax]
.text:0000000000009E45                 cmp     eax, 4
.text:0000000000009E48                 jz      short loc_9E28
.text:0000000000009E4A                 cmp     rbx, 7FF00000h
.text:0000000000009E51                 jbe     short loc_9E60
.text:0000000000009E53                 cmp     eax, 16h
.text:0000000000009E56                 jnz     short loc_9E60
.text:0000000000009E58                 mov     ebx, 7FF00000h
.text:0000000000009E5D                 jmp     short loc_9E28
.text:0000000000009E5D ; ---------------------------------------------------------------------------
.text:0000000000009E5F                 align 20h
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000009E60                                         ; safe_read+41↑j ...
.text:0000000000009E60                 add     rsp, 8
.text:0000000000009E64                 mov     rax, rbp
.text:0000000000009E67                 pop     rbx
.text:0000000000009E68                 pop     rbp
.text:0000000000009E69                 pop     r12
.text:0000000000009E6B                 pop     r13
.text:0000000000009E6D                 retn
.text:0000000000009E6D ; } // starts at 9E10
.text:0000000000009E6D safe_read       endp
.text:0000000000009E6D
.text:0000000000009E6D ; ---------------------------------------------------------------------------
.text:0000000000009E6E                 align 10h
.text:0000000000009E70
.text:0000000000009E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E70
.text:0000000000009E70 ; Attributes: info_from_lumina
.text:0000000000009E70
.text:0000000000009E70 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000009E70                 public fd_safer_flag
.text:0000000000009E70 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000009E70 ; __unwind {
.text:0000000000009E70                 push    r13
.text:0000000000009E72                 push    r12
.text:0000000000009E74                 push    rbp
.text:0000000000009E75                 push    rbx
.text:0000000000009E76                 mov     ebx, edi
.text:0000000000009E78                 sub     rsp, 8
.text:0000000000009E7C                 cmp     edi, 2
.text:0000000000009E7F                 ja      short loc_9EA2
.text:0000000000009E81                 call    dup_safer
.text:0000000000009E86                 mov     r12d, eax
.text:0000000000009E89                 call    ___errno_location
.text:0000000000009E8E                 mov     r13d, [rax]
.text:0000000000009E91                 mov     rbp, rax
.text:0000000000009E94                 mov     edi, ebx        ; fd
.text:0000000000009E96                 call    _close
.text:0000000000009E9B                 mov     ebx, r12d
.text:0000000000009E9E                 mov     [rbp+0], r13d
.text:0000000000009EA2
.text:0000000000009EA2 loc_9EA2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000009EA2                 add     rsp, 8
.text:0000000000009EA6                 mov     eax, ebx
.text:0000000000009EA8                 pop     rbx
.text:0000000000009EA9                 pop     rbp
.text:0000000000009EAA                 pop     r12
.text:0000000000009EAC                 pop     r13
.text:0000000000009EAE                 retn
.text:0000000000009EAE ; } // starts at 9E70
.text:0000000000009EAE fd_safer_flag   endp
.text:0000000000009EAE
.text:0000000000009EAE ; ---------------------------------------------------------------------------
.text:0000000000009EAF                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EB0
.text:0000000000009EB0
.text:0000000000009EB0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000009EB0                 public version_etc_arn
.text:0000000000009EB0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_A2EB↓j
.text:0000000000009EB0                                         ; version_etc_va:loc_A33B↓p ...
.text:0000000000009EB0
.text:0000000000009EB0 var_58          = qword ptr -58h
.text:0000000000009EB0 var_50          = qword ptr -50h
.text:0000000000009EB0 var_48          = qword ptr -48h
.text:0000000000009EB0 var_40          = qword ptr -40h
.text:0000000000009EB0
.text:0000000000009EB0 ; __unwind {
.text:0000000000009EB0                 push    r15
.text:0000000000009EB2                 push    r14
.text:0000000000009EB4                 push    r13
.text:0000000000009EB6                 push    r12
.text:0000000000009EB8                 mov     r12, r9
.text:0000000000009EBB                 push    rbp
.text:0000000000009EBC                 push    rbx
.text:0000000000009EBD                 mov     rbp, rdi
.text:0000000000009EC0                 mov     rbx, r8
.text:0000000000009EC3                 sub     rsp, 28h
.text:0000000000009EC7                 test    rsi, rsi
.text:0000000000009ECA                 jz      loc_9FE8
.text:0000000000009ED0                 mov     r8, rdx
.text:0000000000009ED3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000009EDA                 mov     r9, rcx
.text:0000000000009EDD                 xor     eax, eax
.text:0000000000009EDF                 mov     rcx, rsi
.text:0000000000009EE2                 mov     esi, 1
.text:0000000000009EE7                 call    ___fprintf_chk
.text:0000000000009EEC
.text:0000000000009EEC loc_9EEC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000009EEC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000009EF3                 xor     edi, edi        ; domainname
.text:0000000000009EF5                 mov     edx, 5          ; category
.text:0000000000009EFA                 call    _dcgettext
.text:0000000000009EFF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000009F06                 mov     rcx, rax
.text:0000000000009F09                 mov     r8d, 7E3h
.text:0000000000009F0F                 mov     esi, 1
.text:0000000000009F14                 mov     rdi, rbp
.text:0000000000009F17                 xor     eax, eax
.text:0000000000009F19                 call    ___fprintf_chk
.text:0000000000009F1E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000009F25                 xor     edi, edi        ; domainname
.text:0000000000009F27                 mov     edx, 5          ; category
.text:0000000000009F2C                 call    _dcgettext
.text:0000000000009F31                 mov     rsi, rbp        ; stream
.text:0000000000009F34                 mov     rdi, rax        ; s
.text:0000000000009F37                 call    _fputs_unlocked
.text:0000000000009F3C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000009F40                 ja      def_9F54        ; jumptable 0000000000009F54 default case
.text:0000000000009F46                 lea     rdx, jpt_9F54
.text:0000000000009F4D                 movsxd  rax, ds:(jpt_9F54 - 0D2A4h)[rdx+r12*4]
.text:0000000000009F51                 add     rax, rdx
.text:0000000000009F54                 jmp     rax             ; switch jump
.text:0000000000009F54 ; ---------------------------------------------------------------------------
.text:0000000000009F56                 align 20h
.text:0000000000009F60
.text:0000000000009F60 loc_9F60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009F60                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:0000000000009F60                 mov     r9, [rbx+38h]   ; jumptable 0000000000009F54 case 8
.text:0000000000009F64                 mov     rax, [rbx+10h]
.text:0000000000009F68                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000009F6F                 mov     r8, [rbx+8]
.text:0000000000009F73                 mov     edx, 5          ; category
.text:0000000000009F78                 xor     edi, edi        ; domainname
.text:0000000000009F7A                 mov     r13, [rbx+30h]
.text:0000000000009F7E                 mov     r12, [rbx+28h]
.text:0000000000009F82                 mov     [rsp+58h+var_48], r9
.text:0000000000009F87                 mov     r15, [rbx+20h]
.text:0000000000009F8B                 mov     r14, [rbx+18h]
.text:0000000000009F8F                 mov     [rsp+58h+var_58], rax
.text:0000000000009F93                 mov     [rsp+58h+var_50], r8
.text:0000000000009F98                 mov     rbx, [rbx]
.text:0000000000009F9B                 call    _dcgettext
.text:0000000000009FA0                 sub     rsp, 8
.text:0000000000009FA4
.text:0000000000009FA4 loc_9FA4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000009FA4                 mov     r9, [rsp+60h+var_48]
.text:0000000000009FA9                 mov     rdx, rax
.text:0000000000009FAC                 mov     rcx, rbx
.text:0000000000009FAF                 mov     esi, 1
.text:0000000000009FB4                 mov     rdi, rbp
.text:0000000000009FB7                 xor     eax, eax
.text:0000000000009FB9                 push    r9
.text:0000000000009FBB                 push    r13
.text:0000000000009FBD                 push    r12
.text:0000000000009FBF                 push    r15
.text:0000000000009FC1                 push    r14
.text:0000000000009FC3                 mov     r9, [rsp+88h+var_58]
.text:0000000000009FC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000009FCD                 call    ___fprintf_chk
.text:0000000000009FD2                 add     rsp, 30h
.text:0000000000009FD6
.text:0000000000009FD6 loc_9FD6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009FD6                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:0000000000009FD6                 add     rsp, 28h        ; jumptable 0000000000009F54 case 0
.text:0000000000009FDA                 pop     rbx
.text:0000000000009FDB                 pop     rbp
.text:0000000000009FDC                 pop     r12
.text:0000000000009FDE                 pop     r13
.text:0000000000009FE0                 pop     r14
.text:0000000000009FE2                 pop     r15
.text:0000000000009FE4                 retn
.text:0000000000009FE4 ; ---------------------------------------------------------------------------
.text:0000000000009FE5                 align 8
.text:0000000000009FE8
.text:0000000000009FE8 loc_9FE8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000009FE8                 mov     r8, rcx
.text:0000000000009FEB                 mov     rcx, rdx
.text:0000000000009FEE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:0000000000009FF5                 mov     esi, 1
.text:0000000000009FFA                 xor     eax, eax
.text:0000000000009FFC                 call    ___fprintf_chk
.text:000000000000A001                 jmp     loc_9EEC
.text:000000000000A001 ; ---------------------------------------------------------------------------
.text:000000000000A006                 align 10h
.text:000000000000A010
.text:000000000000A010 loc_A010:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A010                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A010                 mov     r10, [rbx+40h]  ; jumptable 0000000000009F54 case 9
.text:000000000000A014                 mov     r9, [rbx+38h]
.text:000000000000A018                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000A01F                 mov     rax, [rbx+10h]
.text:000000000000A023                 mov     r8, [rbx+8]
.text:000000000000A027                 mov     edx, 5          ; category
.text:000000000000A02C                 mov     r13, [rbx+30h]
.text:000000000000A030                 mov     r12, [rbx+28h]
.text:000000000000A034                 mov     r15, [rbx+20h]
.text:000000000000A038                 mov     r14, [rbx+18h]
.text:000000000000A03C                 mov     rbx, [rbx]
.text:000000000000A03F                 mov     [rsp+58h+var_40], r10
.text:000000000000A044                 mov     [rsp+58h+var_48], r9
.text:000000000000A049                 mov     [rsp+58h+var_58], rax
.text:000000000000A04D                 mov     [rsp+58h+var_50], r8
.text:000000000000A052
.text:000000000000A052 loc_A052:                               ; CODE XREF: version_etc_arn+412↓j
.text:000000000000A052                 xor     edi, edi        ; domainname
.text:000000000000A054                 call    _dcgettext
.text:000000000000A059                 mov     r10, [rsp+58h+var_40]
.text:000000000000A05E                 push    r10
.text:000000000000A060                 jmp     loc_9FA4
.text:000000000000A060 ; ---------------------------------------------------------------------------
.text:000000000000A065                 align 8
.text:000000000000A068
.text:000000000000A068 loc_A068:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A068                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A068                 mov     rbx, [rbx]      ; jumptable 0000000000009F54 case 1
.text:000000000000A06B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:000000000000A072                 mov     edx, 5          ; category
.text:000000000000A077                 xor     edi, edi        ; domainname
.text:000000000000A079                 call    _dcgettext
.text:000000000000A07E                 add     rsp, 28h
.text:000000000000A082                 mov     rcx, rbx
.text:000000000000A085                 mov     rdi, rbp
.text:000000000000A088                 pop     rbx
.text:000000000000A089                 pop     rbp
.text:000000000000A08A                 pop     r12
.text:000000000000A08C                 pop     r13
.text:000000000000A08E                 pop     r14
.text:000000000000A090                 pop     r15
.text:000000000000A092                 mov     rdx, rax
.text:000000000000A095                 mov     esi, 1
.text:000000000000A09A                 xor     eax, eax
.text:000000000000A09C                 jmp     ___fprintf_chk
.text:000000000000A09C ; ---------------------------------------------------------------------------
.text:000000000000A0A1                 align 8
.text:000000000000A0A8
.text:000000000000A0A8 loc_A0A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A0A8                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A0A8                 mov     r12, [rbx+8]    ; jumptable 0000000000009F54 case 2
.text:000000000000A0AC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:000000000000A0B3                 mov     rbx, [rbx]
.text:000000000000A0B6                 mov     edx, 5          ; category
.text:000000000000A0BB                 xor     edi, edi        ; domainname
.text:000000000000A0BD                 call    _dcgettext
.text:000000000000A0C2                 add     rsp, 28h
.text:000000000000A0C6                 mov     r8, r12
.text:000000000000A0C9                 mov     rcx, rbx
.text:000000000000A0CC                 mov     rdi, rbp
.text:000000000000A0CF                 mov     rdx, rax
.text:000000000000A0D2                 mov     esi, 1
.text:000000000000A0D7                 pop     rbx
.text:000000000000A0D8                 pop     rbp
.text:000000000000A0D9                 pop     r12
.text:000000000000A0DB                 pop     r13
.text:000000000000A0DD                 pop     r14
.text:000000000000A0DF                 pop     r15
.text:000000000000A0E1                 xor     eax, eax
.text:000000000000A0E3                 jmp     ___fprintf_chk
.text:000000000000A0E3 ; ---------------------------------------------------------------------------
.text:000000000000A0E8                 align 10h
.text:000000000000A0F0
.text:000000000000A0F0 loc_A0F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A0F0                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A0F0                 mov     r13, [rbx+10h]  ; jumptable 0000000000009F54 case 3
.text:000000000000A0F4                 mov     r12, [rbx+8]
.text:000000000000A0F8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000A0FF                 mov     rbx, [rbx]
.text:000000000000A102                 mov     edx, 5          ; category
.text:000000000000A107                 xor     edi, edi        ; domainname
.text:000000000000A109                 call    _dcgettext
.text:000000000000A10E                 add     rsp, 28h
.text:000000000000A112                 mov     r9, r13
.text:000000000000A115                 mov     r8, r12
.text:000000000000A118                 mov     rcx, rbx
.text:000000000000A11B                 mov     rdi, rbp
.text:000000000000A11E                 mov     rdx, rax
.text:000000000000A121                 pop     rbx
.text:000000000000A122                 pop     rbp
.text:000000000000A123                 pop     r12
.text:000000000000A125                 pop     r13
.text:000000000000A127                 pop     r14
.text:000000000000A129                 pop     r15
.text:000000000000A12B                 mov     esi, 1
.text:000000000000A130                 xor     eax, eax
.text:000000000000A132                 jmp     ___fprintf_chk
.text:000000000000A132 ; ---------------------------------------------------------------------------
.text:000000000000A137                 align 20h
.text:000000000000A140
.text:000000000000A140 loc_A140:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A140                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A140                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000009F54 case 4
.text:000000000000A147                 mov     edx, 5          ; category
.text:000000000000A14C                 xor     edi, edi        ; domainname
.text:000000000000A14E                 mov     r14, [rbx+18h]
.text:000000000000A152                 mov     r13, [rbx+10h]
.text:000000000000A156                 mov     r12, [rbx+8]
.text:000000000000A15A                 mov     rbx, [rbx]
.text:000000000000A15D                 call    _dcgettext
.text:000000000000A162                 sub     rsp, 8
.text:000000000000A166
.text:000000000000A166 loc_A166:                               ; CODE XREF: version_etc_arn+310↓j
.text:000000000000A166                 push    r14
.text:000000000000A168                 mov     rdx, rax
.text:000000000000A16B                 mov     r9, r13
.text:000000000000A16E                 mov     r8, r12
.text:000000000000A171                 mov     rcx, rbx
.text:000000000000A174                 mov     rdi, rbp
.text:000000000000A177                 mov     esi, 1
.text:000000000000A17C                 xor     eax, eax
.text:000000000000A17E                 call    ___fprintf_chk
.text:000000000000A183                 pop     rax
.text:000000000000A184                 pop     rdx
.text:000000000000A185                 add     rsp, 28h
.text:000000000000A189                 pop     rbx
.text:000000000000A18A                 pop     rbp
.text:000000000000A18B                 pop     r12
.text:000000000000A18D                 pop     r13
.text:000000000000A18F                 pop     r14
.text:000000000000A191                 pop     r15
.text:000000000000A193                 retn
.text:000000000000A193 ; ---------------------------------------------------------------------------
.text:000000000000A194                 align 8
.text:000000000000A198
.text:000000000000A198 loc_A198:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A198                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A198                 mov     r15, [rbx+20h]  ; jumptable 0000000000009F54 case 5
.text:000000000000A19C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:000000000000A1A3                 mov     edx, 5          ; category
.text:000000000000A1A8                 xor     edi, edi        ; domainname
.text:000000000000A1AA                 mov     r14, [rbx+18h]
.text:000000000000A1AE                 mov     r13, [rbx+10h]
.text:000000000000A1B2                 mov     r12, [rbx+8]
.text:000000000000A1B6                 mov     rbx, [rbx]
.text:000000000000A1B9                 call    _dcgettext
.text:000000000000A1BE                 push    r15
.text:000000000000A1C0                 jmp     short loc_A166
.text:000000000000A1C0 ; ---------------------------------------------------------------------------
.text:000000000000A1C2                 align 8
.text:000000000000A1C8
.text:000000000000A1C8 loc_A1C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A1C8                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A1C8                 mov     r8, [rbx+8]     ; jumptable 0000000000009F54 case 6
.text:000000000000A1CC                 mov     r12, [rbx+28h]
.text:000000000000A1D0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:000000000000A1D7                 mov     r15, [rbx+20h]
.text:000000000000A1DB                 mov     r14, [rbx+18h]
.text:000000000000A1DF                 mov     edx, 5          ; category
.text:000000000000A1E4                 mov     r13, [rbx+10h]
.text:000000000000A1E8                 xor     edi, edi        ; domainname
.text:000000000000A1EA                 mov     rbx, [rbx]
.text:000000000000A1ED                 mov     [rsp+58h+var_58], r8
.text:000000000000A1F1                 call    _dcgettext
.text:000000000000A1F6                 sub     rsp, 8
.text:000000000000A1FA                 mov     r9, r13
.text:000000000000A1FD                 push    r12
.text:000000000000A1FF                 push    r15
.text:000000000000A201                 push    r14
.text:000000000000A203
.text:000000000000A203 loc_A203:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:000000000000A203                 mov     r8, [rsp+78h+var_58]
.text:000000000000A208                 mov     rcx, rbx
.text:000000000000A20B                 mov     rdx, rax
.text:000000000000A20E                 mov     rdi, rbp
.text:000000000000A211                 mov     esi, 1
.text:000000000000A216                 xor     eax, eax
.text:000000000000A218                 call    ___fprintf_chk
.text:000000000000A21D                 add     rsp, 20h
.text:000000000000A221                 add     rsp, 28h
.text:000000000000A225                 pop     rbx
.text:000000000000A226                 pop     rbp
.text:000000000000A227                 pop     r12
.text:000000000000A229                 pop     r13
.text:000000000000A22B                 pop     r14
.text:000000000000A22D                 pop     r15
.text:000000000000A22F                 retn
.text:000000000000A230 ; ---------------------------------------------------------------------------
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A230                                         ; DATA XREF: .rodata:jpt_9F54↓o
.text:000000000000A230                 mov     r9, [rbx+10h]   ; jumptable 0000000000009F54 case 7
.text:000000000000A234                 mov     r13, [rbx+30h]
.text:000000000000A238                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000A23F                 mov     r12, [rbx+28h]
.text:000000000000A243                 mov     r15, [rbx+20h]
.text:000000000000A247                 mov     edx, 5          ; category
.text:000000000000A24C                 mov     r14, [rbx+18h]
.text:000000000000A250                 mov     r8, [rbx+8]
.text:000000000000A254                 xor     edi, edi        ; domainname
.text:000000000000A256                 mov     [rsp+58h+var_50], r9
.text:000000000000A25B                 mov     rbx, [rbx]
.text:000000000000A25E                 mov     [rsp+58h+var_58], r8
.text:000000000000A262                 call    _dcgettext
.text:000000000000A267                 push    r13
.text:000000000000A269                 push    r12
.text:000000000000A26B                 push    r15
.text:000000000000A26D                 push    r14
.text:000000000000A26F                 mov     r9, [rsp+78h+var_50]
.text:000000000000A274                 jmp     short loc_A203
.text:000000000000A274 ; ---------------------------------------------------------------------------
.text:000000000000A276                 align 20h
.text:000000000000A280
.text:000000000000A280 def_9F54:                               ; CODE XREF: version_etc_arn+90↑j
.text:000000000000A280                 mov     r10, [rbx+40h]  ; jumptable 0000000000009F54 default case
.text:000000000000A284                 mov     r9, [rbx+38h]
.text:000000000000A288                 mov     edx, 5
.text:000000000000A28D                 mov     rax, [rbx+10h]
.text:000000000000A291                 mov     r8, [rbx+8]
.text:000000000000A295                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000A29C                 mov     r13, [rbx+30h]
.text:000000000000A2A0                 mov     r12, [rbx+28h]
.text:000000000000A2A4                 mov     r15, [rbx+20h]
.text:000000000000A2A8                 mov     r14, [rbx+18h]
.text:000000000000A2AC                 mov     [rsp+58h+var_40], r10
.text:000000000000A2B1                 mov     [rsp+58h+var_48], r9
.text:000000000000A2B6                 mov     [rsp+58h+var_58], rax
.text:000000000000A2BA                 mov     [rsp+58h+var_50], r8
.text:000000000000A2BF                 mov     rbx, [rbx]
.text:000000000000A2C2                 jmp     loc_A052
.text:000000000000A2C2 ; } // starts at 9EB0
.text:000000000000A2C2 version_etc_arn endp
.text:000000000000A2C2
.text:000000000000A2C2 ; ---------------------------------------------------------------------------
.text:000000000000A2C7                 align 10h
.text:000000000000A2D0
.text:000000000000A2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2D0
.text:000000000000A2D0 ; Attributes: info_from_lumina
.text:000000000000A2D0
.text:000000000000A2D0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:000000000000A2D0                 public version_etc_ar
.text:000000000000A2D0 version_etc_ar  proc near
.text:000000000000A2D0 ; __unwind {
.text:000000000000A2D0                 xor     r9d, r9d
.text:000000000000A2D3                 cmp     qword ptr [r8], 0
.text:000000000000A2D7                 jz      short loc_A2EB
.text:000000000000A2D9                 nop     dword ptr [rax+00000000h]
.text:000000000000A2E0
.text:000000000000A2E0 loc_A2E0:                               ; CODE XREF: version_etc_ar+19↓j
.text:000000000000A2E0                 add     r9, 1
.text:000000000000A2E4                 cmp     qword ptr [r8+r9*8], 0
.text:000000000000A2E9                 jnz     short loc_A2E0
.text:000000000000A2EB
.text:000000000000A2EB loc_A2EB:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000A2EB                 jmp     version_etc_arn
.text:000000000000A2EB ; } // starts at A2D0
.text:000000000000A2EB version_etc_ar  endp
.text:000000000000A2EB
.text:000000000000A2F0
.text:000000000000A2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A2F0
.text:000000000000A2F0 ; Attributes: info_from_lumina
.text:000000000000A2F0
.text:000000000000A2F0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:000000000000A2F0                 public version_etc_va
.text:000000000000A2F0 version_etc_va  proc near
.text:000000000000A2F0
.text:000000000000A2F0 authtab         = qword ptr -68h
.text:000000000000A2F0 var_10          = qword ptr -10h
.text:000000000000A2F0
.text:000000000000A2F0 ; __unwind {
.text:000000000000A2F0                 sub     rsp, 68h
.text:000000000000A2F4                 mov     r10, r8
.text:000000000000A2F7                 xor     r9d, r9d
.text:000000000000A2FA                 mov     rax, fs:28h
.text:000000000000A303                 mov     [rsp+68h+var_10], rax
.text:000000000000A308                 xor     eax, eax
.text:000000000000A30A                 mov     r8, rsp
.text:000000000000A30D                 nop     dword ptr [rax]
.text:000000000000A310
.text:000000000000A310 loc_A310:                               ; CODE XREF: version_etc_va+49↓j
.text:000000000000A310                 mov     eax, [r10]
.text:000000000000A313                 cmp     eax, 2Fh ; '/'
.text:000000000000A316                 ja      short loc_A35A
.text:000000000000A318                 mov     r11d, eax
.text:000000000000A31B                 add     r11, [r10+10h]
.text:000000000000A31F                 add     eax, 8
.text:000000000000A322                 mov     [r10], eax
.text:000000000000A325
.text:000000000000A325 loc_A325:                               ; CODE XREF: version_etc_va+76↓j
.text:000000000000A325                 mov     rax, [r11]
.text:000000000000A328                 test    rax, rax
.text:000000000000A32B                 mov     [r8+r9*8], rax
.text:000000000000A32F                 jz      short loc_A33B
.text:000000000000A331                 add     r9, 1
.text:000000000000A335                 cmp     r9, 0Ah
.text:000000000000A339                 jnz     short loc_A310
.text:000000000000A33B
.text:000000000000A33B loc_A33B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000A33B                 call    version_etc_arn
.text:000000000000A340                 mov     rax, [rsp+68h+var_10]
.text:000000000000A345                 xor     rax, fs:28h
.text:000000000000A34E                 jnz     short loc_A355
.text:000000000000A350                 add     rsp, 68h
.text:000000000000A354                 retn
.text:000000000000A355 ; ---------------------------------------------------------------------------
.text:000000000000A355
.text:000000000000A355 loc_A355:                               ; CODE XREF: version_etc_va+5E↑j
.text:000000000000A355                 call    ___stack_chk_fail
.text:000000000000A35A ; ---------------------------------------------------------------------------
.text:000000000000A35A
.text:000000000000A35A loc_A35A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000A35A                 mov     r11, [r10+8]
.text:000000000000A35E                 lea     rax, [r11+8]
.text:000000000000A362                 mov     [r10+8], rax
.text:000000000000A366                 jmp     short loc_A325
.text:000000000000A366 ; } // starts at A2F0
.text:000000000000A366 version_etc_va  endp
.text:000000000000A366
.text:000000000000A366 ; ---------------------------------------------------------------------------
.text:000000000000A368                 align 10h
.text:000000000000A370
.text:000000000000A370 ; =============== S U B R O U T I N E =======================================
.text:000000000000A370
.text:000000000000A370 ; Attributes: info_from_lumina
.text:000000000000A370
.text:000000000000A370 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:000000000000A370                 public version_etc
.text:000000000000A370 version_etc     proc near               ; CODE XREF: main+231↑p
.text:000000000000A370
.text:000000000000A370 var_C0          = dword ptr -0C0h
.text:000000000000A370 var_B8          = qword ptr -0B8h
.text:000000000000A370 var_B0          = qword ptr -0B0h
.text:000000000000A370 var_A8          = byte ptr -0A8h
.text:000000000000A370 var_50          = qword ptr -50h
.text:000000000000A370 var_48          = byte ptr -48h
.text:000000000000A370 var_28          = qword ptr -28h
.text:000000000000A370 var_20          = qword ptr -20h
.text:000000000000A370 arg_0           = byte ptr  8
.text:000000000000A370
.text:000000000000A370 ; __unwind {
.text:000000000000A370                 push    rbp
.text:000000000000A371                 push    rbx
.text:000000000000A372                 mov     r10d, 20h ; ' '
.text:000000000000A378                 xor     r11d, r11d
.text:000000000000A37B                 sub     rsp, 0B8h
.text:000000000000A382                 mov     rax, fs:28h
.text:000000000000A38B                 mov     [rsp+0C8h+var_50], rax
.text:000000000000A390                 xor     eax, eax
.text:000000000000A392                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000A39A                 mov     [rsp+0C8h+var_28], r8
.text:000000000000A3A2                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000A3AA                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000A3AF                 mov     [rsp+0C8h+var_20], r9
.text:000000000000A3B7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000A3BF                 mov     [rsp+0C8h+var_B8], rax
.text:000000000000A3C4                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000A3CC                 xor     r9d, r9d
.text:000000000000A3CF                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000A3D4                 mov     rbp, rax
.text:000000000000A3D7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A3E0
.text:000000000000A3E0 loc_A3E0:                               ; CODE XREF: version_etc+9A↓j
.text:000000000000A3E0                 cmp     r10d, 2Fh ; '/'
.text:000000000000A3E4                 ja      short loc_A43C
.text:000000000000A3E6                 mov     eax, r10d
.text:000000000000A3E9                 mov     r11d, 1
.text:000000000000A3EF                 add     r10d, 8
.text:000000000000A3F3                 add     rax, rbp
.text:000000000000A3F6
.text:000000000000A3F6 loc_A3F6:                               ; CODE XREF: version_etc+D3↓j
.text:000000000000A3F6                 mov     rax, [rax]
.text:000000000000A3F9                 test    rax, rax
.text:000000000000A3FC                 mov     [r8+r9*8], rax
.text:000000000000A400                 jz      short loc_A40C
.text:000000000000A402                 add     r9, 1
.text:000000000000A406                 cmp     r9, 0Ah
.text:000000000000A40A                 jnz     short loc_A3E0
.text:000000000000A40C
.text:000000000000A40C loc_A40C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000A40C                 test    r11b, r11b
.text:000000000000A40F                 jnz     short loc_A435
.text:000000000000A411
.text:000000000000A411 loc_A411:                               ; CODE XREF: version_etc+CA↓j
.text:000000000000A411                 call    version_etc_arn
.text:000000000000A416                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000A41B                 xor     rax, fs:28h
.text:000000000000A424                 jnz     short loc_A430
.text:000000000000A426                 add     rsp, 0B8h
.text:000000000000A42D                 pop     rbx
.text:000000000000A42E                 pop     rbp
.text:000000000000A42F                 retn
.text:000000000000A430 ; ---------------------------------------------------------------------------
.text:000000000000A430
.text:000000000000A430 loc_A430:                               ; CODE XREF: version_etc+B4↑j
.text:000000000000A430                 call    ___stack_chk_fail
.text:000000000000A435 ; ---------------------------------------------------------------------------
.text:000000000000A435
.text:000000000000A435 loc_A435:                               ; CODE XREF: version_etc+9F↑j
.text:000000000000A435                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000A43A                 jmp     short loc_A411
.text:000000000000A43C ; ---------------------------------------------------------------------------
.text:000000000000A43C
.text:000000000000A43C loc_A43C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000A43C                 mov     rax, rbx
.text:000000000000A43F                 add     rbx, 8
.text:000000000000A443                 jmp     short loc_A3F6
.text:000000000000A443 ; } // starts at A370
.text:000000000000A443 version_etc     endp
.text:000000000000A443
.text:000000000000A443 ; ---------------------------------------------------------------------------
.text:000000000000A445                 align 10h
.text:000000000000A450
.text:000000000000A450 ; =============== S U B R O U T I N E =======================================
.text:000000000000A450
.text:000000000000A450 ; Attributes: info_from_lumina
.text:000000000000A450
.text:000000000000A450 ; void __cdecl emit_bug_reporting_address()
.text:000000000000A450                 public emit_bug_reporting_address
.text:000000000000A450 emit_bug_reporting_address proc near
.text:000000000000A450 ; __unwind {
.text:000000000000A450                 push    rbx
.text:000000000000A451                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:000000000000A458                 mov     edx, 5          ; category
.text:000000000000A45D                 xor     edi, edi        ; domainname
.text:000000000000A45F                 call    _dcgettext
.text:000000000000A464                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000A46B                 mov     rsi, rax
.text:000000000000A46E                 mov     edi, 1
.text:000000000000A473                 xor     eax, eax
.text:000000000000A475                 call    ___printf_chk
.text:000000000000A47A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:000000000000A481                 mov     edx, 5          ; category
.text:000000000000A486                 xor     edi, edi        ; domainname
.text:000000000000A488                 call    _dcgettext
.text:000000000000A48D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000A494                 lea     rdx, unk_B7A7
.text:000000000000A49B                 mov     rsi, rax
.text:000000000000A49E                 mov     edi, 1
.text:000000000000A4A3                 xor     eax, eax
.text:000000000000A4A5                 call    ___printf_chk
.text:000000000000A4AA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000A4B1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:000000000000A4B8                 xor     edi, edi        ; domainname
.text:000000000000A4BA                 mov     edx, 5          ; category
.text:000000000000A4BF                 call    _dcgettext
.text:000000000000A4C4                 mov     rsi, rbx        ; stream
.text:000000000000A4C7                 mov     rdi, rax        ; s
.text:000000000000A4CA                 pop     rbx
.text:000000000000A4CB                 jmp     _fputs_unlocked
.text:000000000000A4CB ; } // starts at A450
.text:000000000000A4CB emit_bug_reporting_address endp
.text:000000000000A4CB
.text:000000000000A4D0
.text:000000000000A4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4D0
.text:000000000000A4D0
.text:000000000000A4D0                 public xmalloc
.text:000000000000A4D0 xmalloc         proc near               ; CODE XREF: main+757↑p
.text:000000000000A4D0                                         ; main+B42↑p ...
.text:000000000000A4D0 ; __unwind {
.text:000000000000A4D0                 push    rbx
.text:000000000000A4D1                 mov     rbx, rdi
.text:000000000000A4D4                 call    _malloc
.text:000000000000A4D9                 test    rax, rax
.text:000000000000A4DC                 jnz     short loc_A4E3
.text:000000000000A4DE                 test    rbx, rbx
.text:000000000000A4E1                 jnz     short loc_A4E5
.text:000000000000A4E3
.text:000000000000A4E3 loc_A4E3:                               ; CODE XREF: xmalloc+C↑j
.text:000000000000A4E3                 pop     rbx
.text:000000000000A4E4                 retn
.text:000000000000A4E5 ; ---------------------------------------------------------------------------
.text:000000000000A4E5
.text:000000000000A4E5 loc_A4E5:                               ; CODE XREF: xmalloc+11↑j
.text:000000000000A4E5                 call    xalloc_die
.text:000000000000A4E5 ; } // starts at A4D0
.text:000000000000A4E5 xmalloc         endp
.text:000000000000A4E5
.text:000000000000A4E5 ; ---------------------------------------------------------------------------
.text:000000000000A4EA                 align 10h
.text:000000000000A4F0
.text:000000000000A4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4F0
.text:000000000000A4F0 ; Attributes: info_from_lumina
.text:000000000000A4F0
.text:000000000000A4F0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:000000000000A4F0                 public xnmalloc
.text:000000000000A4F0 xnmalloc        proc near
.text:000000000000A4F0 ; __unwind {
.text:000000000000A4F0                 mov     rax, rdi
.text:000000000000A4F3                 mul     rsi
.text:000000000000A4F6                 mov     rdi, rax
.text:000000000000A4F9                 seto    al
.text:000000000000A4FC                 test    rdi, rdi
.text:000000000000A4FF                 js      short loc_A50B
.text:000000000000A501                 movzx   eax, al
.text:000000000000A504                 test    rax, rax
.text:000000000000A507                 jnz     short loc_A50B
.text:000000000000A509                 jmp     short xmalloc
.text:000000000000A50B ; ---------------------------------------------------------------------------
.text:000000000000A50B
.text:000000000000A50B loc_A50B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000A50B                                         ; xnmalloc+17↑j
.text:000000000000A50B                 sub     rsp, 8
.text:000000000000A50F                 call    xalloc_die
.text:000000000000A50F ; } // starts at A4F0
.text:000000000000A50F xnmalloc        endp
.text:000000000000A50F
.text:000000000000A50F ; ---------------------------------------------------------------------------
.text:000000000000A514                 align 20h
.text:000000000000A520
.text:000000000000A520 ; =============== S U B R O U T I N E =======================================
.text:000000000000A520
.text:000000000000A520
.text:000000000000A520                 public xcharalloc
.text:000000000000A520 xcharalloc      proc near
.text:000000000000A520 ; __unwind {
.text:000000000000A520                 jmp     short xmalloc
.text:000000000000A520 ; } // starts at A520
.text:000000000000A520 xcharalloc      endp
.text:000000000000A520
.text:000000000000A520 ; ---------------------------------------------------------------------------
.text:000000000000A522                 align 10h
.text:000000000000A530
.text:000000000000A530 ; =============== S U B R O U T I N E =======================================
.text:000000000000A530
.text:000000000000A530 ; Attributes: info_from_lumina
.text:000000000000A530
.text:000000000000A530 ; void *__fastcall xrealloc(void *p, size_t n)
.text:000000000000A530                 public xrealloc
.text:000000000000A530 xrealloc        proc near               ; CODE XREF: main+22D5↑p
.text:000000000000A530                                         ; quotearg_n_options+6E↑p ...
.text:000000000000A530 ; __unwind {
.text:000000000000A530                 test    rsi, rsi
.text:000000000000A533                 push    rbx
.text:000000000000A534                 mov     rbx, rsi
.text:000000000000A537                 jnz     short loc_A53E
.text:000000000000A539                 test    rdi, rdi
.text:000000000000A53C                 jnz     short loc_A558
.text:000000000000A53E
.text:000000000000A53E loc_A53E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000A53E                 mov     rsi, rbx        ; size
.text:000000000000A541                 call    _realloc
.text:000000000000A546                 test    rax, rax
.text:000000000000A549                 jnz     short loc_A550
.text:000000000000A54B                 test    rbx, rbx
.text:000000000000A54E                 jnz     short loc_A561
.text:000000000000A550
.text:000000000000A550 loc_A550:                               ; CODE XREF: xrealloc+19↑j
.text:000000000000A550                 pop     rbx
.text:000000000000A551                 retn
.text:000000000000A551 ; ---------------------------------------------------------------------------
.text:000000000000A552                 align 8
.text:000000000000A558
.text:000000000000A558 loc_A558:                               ; CODE XREF: xrealloc+C↑j
.text:000000000000A558                 call    _free
.text:000000000000A55D                 xor     eax, eax
.text:000000000000A55F                 pop     rbx
.text:000000000000A560                 retn
.text:000000000000A561 ; ---------------------------------------------------------------------------
.text:000000000000A561
.text:000000000000A561 loc_A561:                               ; CODE XREF: xrealloc+1E↑j
.text:000000000000A561                 call    xalloc_die
.text:000000000000A561 ; } // starts at A530
.text:000000000000A561 xrealloc        endp
.text:000000000000A561
.text:000000000000A561 ; ---------------------------------------------------------------------------
.text:000000000000A566                 align 10h
.text:000000000000A570
.text:000000000000A570 ; =============== S U B R O U T I N E =======================================
.text:000000000000A570
.text:000000000000A570 ; Attributes: info_from_lumina
.text:000000000000A570
.text:000000000000A570 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:000000000000A570                 public xnrealloc
.text:000000000000A570 xnrealloc       proc near
.text:000000000000A570 ; __unwind {
.text:000000000000A570                 mov     rax, rsi
.text:000000000000A573                 mul     rdx
.text:000000000000A576                 mov     rsi, rax
.text:000000000000A579                 seto    al
.text:000000000000A57C                 test    rsi, rsi
.text:000000000000A57F                 js      short loc_A58B
.text:000000000000A581                 movzx   eax, al
.text:000000000000A584                 test    rax, rax
.text:000000000000A587                 jnz     short loc_A58B
.text:000000000000A589                 jmp     short xrealloc
.text:000000000000A58B ; ---------------------------------------------------------------------------
.text:000000000000A58B
.text:000000000000A58B loc_A58B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000A58B                                         ; xnrealloc+17↑j
.text:000000000000A58B                 sub     rsp, 8
.text:000000000000A58F                 call    xalloc_die
.text:000000000000A58F ; } // starts at A570
.text:000000000000A58F xnrealloc       endp
.text:000000000000A58F
.text:000000000000A58F ; ---------------------------------------------------------------------------
.text:000000000000A594                 align 20h
.text:000000000000A5A0
.text:000000000000A5A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5A0
.text:000000000000A5A0 ; Attributes: info_from_lumina
.text:000000000000A5A0
.text:000000000000A5A0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:000000000000A5A0                 public x2nrealloc
.text:000000000000A5A0 x2nrealloc      proc near
.text:000000000000A5A0 ; __unwind {
.text:000000000000A5A0                 test    rdi, rdi
.text:000000000000A5A3                 mov     r9, rdx
.text:000000000000A5A6                 mov     rcx, [rsi]
.text:000000000000A5A9                 jz      short loc_A5E0
.text:000000000000A5AB                 xor     edx, edx
.text:000000000000A5AD                 mov     rax, 5555555555555554h
.text:000000000000A5B7                 div     r9
.text:000000000000A5BA                 cmp     rax, rcx
.text:000000000000A5BD                 jbe     short loc_A5FB
.text:000000000000A5BF                 mov     rax, rcx
.text:000000000000A5C2                 shr     rax, 1
.text:000000000000A5C5                 lea     rcx, [rax+rcx+1]
.text:000000000000A5CA
.text:000000000000A5CA loc_A5CA:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000A5CA                 mov     [rsi], rcx
.text:000000000000A5CD                 imul    rcx, r9
.text:000000000000A5D1                 mov     rsi, rcx
.text:000000000000A5D4                 jmp     xrealloc
.text:000000000000A5D4 ; ---------------------------------------------------------------------------
.text:000000000000A5D9                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 loc_A5E0:                               ; CODE XREF: x2nrealloc+9↑j
.text:000000000000A5E0                 test    rcx, rcx
.text:000000000000A5E3                 jz      short loc_A608
.text:000000000000A5E5
.text:000000000000A5E5 loc_A5E5:                               ; CODE XREF: x2nrealloc+80↓j
.text:000000000000A5E5                 mov     rax, rcx
.text:000000000000A5E8                 mul     r9
.text:000000000000A5EB                 seto    dl
.text:000000000000A5EE                 test    rax, rax
.text:000000000000A5F1                 movzx   edx, dl
.text:000000000000A5F4                 js      short loc_A5FB
.text:000000000000A5F6                 test    rdx, rdx
.text:000000000000A5F9                 jz      short loc_A5CA
.text:000000000000A5FB
.text:000000000000A5FB loc_A5FB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000A5FB                                         ; x2nrealloc+54↑j
.text:000000000000A5FB                 sub     rsp, 8
.text:000000000000A5FF                 call    xalloc_die
.text:000000000000A5FF ; ---------------------------------------------------------------------------
.text:000000000000A604                 align 8
.text:000000000000A608
.text:000000000000A608 loc_A608:                               ; CODE XREF: x2nrealloc+43↑j
.text:000000000000A608                 xor     edx, edx
.text:000000000000A60A                 mov     eax, 80h
.text:000000000000A60F                 xor     r8d, r8d
.text:000000000000A612                 div     r9
.text:000000000000A615                 test    rax, rax
.text:000000000000A618                 setz    r8b
.text:000000000000A61C                 lea     rcx, [r8+rax]
.text:000000000000A620                 jmp     short loc_A5E5
.text:000000000000A620 ; } // starts at A5A0
.text:000000000000A620 x2nrealloc      endp
.text:000000000000A620
.text:000000000000A620 ; ---------------------------------------------------------------------------
.text:000000000000A622                 align 10h
.text:000000000000A630
.text:000000000000A630 ; =============== S U B R O U T I N E =======================================
.text:000000000000A630
.text:000000000000A630 ; Attributes: info_from_lumina
.text:000000000000A630
.text:000000000000A630 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:000000000000A630                 public x2realloc
.text:000000000000A630 x2realloc       proc near
.text:000000000000A630 ; __unwind {
.text:000000000000A630                 test    rdi, rdi
.text:000000000000A633                 mov     rax, [rsi]
.text:000000000000A636                 jz      short loc_A660
.text:000000000000A638                 mov     rdx, 5555555555555553h
.text:000000000000A642                 cmp     rax, rdx
.text:000000000000A645                 ja      short loc_A671
.text:000000000000A647                 mov     rdx, rax
.text:000000000000A64A                 shr     rdx, 1
.text:000000000000A64D                 lea     rax, [rdx+rax+1]
.text:000000000000A652
.text:000000000000A652 loc_A652:                               ; CODE XREF: x2realloc+3F↓j
.text:000000000000A652                 mov     [rsi], rax
.text:000000000000A655                 mov     rsi, rax
.text:000000000000A658                 jmp     xrealloc
.text:000000000000A658 ; ---------------------------------------------------------------------------
.text:000000000000A65D                 align 20h
.text:000000000000A660
.text:000000000000A660 loc_A660:                               ; CODE XREF: x2realloc+6↑j
.text:000000000000A660                 test    rax, rax
.text:000000000000A663                 mov     edx, 80h
.text:000000000000A668                 cmovz   rax, rdx
.text:000000000000A66C                 test    rax, rax
.text:000000000000A66F                 jns     short loc_A652
.text:000000000000A671
.text:000000000000A671 loc_A671:                               ; CODE XREF: x2realloc+15↑j
.text:000000000000A671                 sub     rsp, 8
.text:000000000000A675                 call    xalloc_die
.text:000000000000A675 ; } // starts at A630
.text:000000000000A675 x2realloc       endp
.text:000000000000A675
.text:000000000000A675 ; ---------------------------------------------------------------------------
.text:000000000000A67A                 align 20h
.text:000000000000A680
.text:000000000000A680 ; =============== S U B R O U T I N E =======================================
.text:000000000000A680
.text:000000000000A680
.text:000000000000A680 ; __int64 __fastcall xzalloc(size_t n)
.text:000000000000A680                 public xzalloc
.text:000000000000A680 xzalloc         proc near
.text:000000000000A680 ; __unwind {
.text:000000000000A680                 push    rbx
.text:000000000000A681                 mov     rbx, rdi
.text:000000000000A684                 call    xmalloc
.text:000000000000A689                 mov     rdx, rbx        ; n
.text:000000000000A68C                 xor     esi, esi        ; c
.text:000000000000A68E                 mov     rdi, rax        ; s
.text:000000000000A691                 pop     rbx
.text:000000000000A692                 jmp     _memset
.text:000000000000A692 ; } // starts at A680
.text:000000000000A692 xzalloc         endp
.text:000000000000A692
.text:000000000000A692 ; ---------------------------------------------------------------------------
.text:000000000000A697                 align 20h
.text:000000000000A6A0
.text:000000000000A6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6A0
.text:000000000000A6A0 ; Attributes: info_from_lumina
.text:000000000000A6A0
.text:000000000000A6A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:000000000000A6A0                 public xcalloc
.text:000000000000A6A0 xcalloc         proc near
.text:000000000000A6A0 ; __unwind {
.text:000000000000A6A0                 mov     rax, rdi
.text:000000000000A6A3                 sub     rsp, 8
.text:000000000000A6A7                 mul     rsi
.text:000000000000A6AA                 seto    dl
.text:000000000000A6AD                 test    rax, rax
.text:000000000000A6B0                 js      short loc_A6C9
.text:000000000000A6B2                 movzx   edx, dl
.text:000000000000A6B5                 test    rdx, rdx
.text:000000000000A6B8                 jnz     short loc_A6C9
.text:000000000000A6BA                 call    _calloc
.text:000000000000A6BF                 test    rax, rax
.text:000000000000A6C2                 jz      short loc_A6C9
.text:000000000000A6C4                 add     rsp, 8
.text:000000000000A6C8                 retn
.text:000000000000A6C9 ; ---------------------------------------------------------------------------
.text:000000000000A6C9
.text:000000000000A6C9 loc_A6C9:                               ; CODE XREF: xcalloc+10↑j
.text:000000000000A6C9                                         ; xcalloc+18↑j ...
.text:000000000000A6C9                 call    xalloc_die
.text:000000000000A6C9 ; } // starts at A6A0
.text:000000000000A6C9 xcalloc         endp
.text:000000000000A6C9
.text:000000000000A6C9 ; ---------------------------------------------------------------------------
.text:000000000000A6CE                 align 10h
.text:000000000000A6D0
.text:000000000000A6D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6D0
.text:000000000000A6D0 ; Attributes: info_from_lumina
.text:000000000000A6D0
.text:000000000000A6D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:000000000000A6D0                 public xmemdup
.text:000000000000A6D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:000000000000A6D0                                         ; xstrdup+11↓j
.text:000000000000A6D0 ; __unwind {
.text:000000000000A6D0                 push    rbp
.text:000000000000A6D1                 push    rbx
.text:000000000000A6D2                 mov     rbp, rdi
.text:000000000000A6D5                 mov     rdi, rsi
.text:000000000000A6D8                 mov     rbx, rsi
.text:000000000000A6DB                 sub     rsp, 8
.text:000000000000A6DF                 call    xmalloc
.text:000000000000A6E4                 add     rsp, 8
.text:000000000000A6E8                 mov     rdx, rbx        ; n
.text:000000000000A6EB                 mov     rsi, rbp        ; src
.text:000000000000A6EE                 pop     rbx
.text:000000000000A6EF                 pop     rbp
.text:000000000000A6F0                 mov     rdi, rax        ; dest
.text:000000000000A6F3                 jmp     _memcpy
.text:000000000000A6F3 ; } // starts at A6D0
.text:000000000000A6F3 xmemdup         endp
.text:000000000000A6F3
.text:000000000000A6F3 ; ---------------------------------------------------------------------------
.text:000000000000A6F8                 align 20h
.text:000000000000A700
.text:000000000000A700 ; =============== S U B R O U T I N E =======================================
.text:000000000000A700
.text:000000000000A700
.text:000000000000A700 ; __int64 __fastcall xstrdup(void *src)
.text:000000000000A700                 public xstrdup
.text:000000000000A700 xstrdup         proc near
.text:000000000000A700 ; __unwind {
.text:000000000000A700                 push    rbx
.text:000000000000A701                 mov     rbx, rdi
.text:000000000000A704                 call    _strlen
.text:000000000000A709                 mov     rdi, rbx        ; src
.text:000000000000A70C                 lea     rsi, [rax+1]    ; n
.text:000000000000A710                 pop     rbx
.text:000000000000A711                 jmp     short xmemdup
.text:000000000000A711 ; } // starts at A700
.text:000000000000A711 xstrdup         endp
.text:000000000000A711
.text:000000000000A711 ; ---------------------------------------------------------------------------
.text:000000000000A713                 align 20h
.text:000000000000A720
.text:000000000000A720 ; =============== S U B R O U T I N E =======================================
.text:000000000000A720
.text:000000000000A720 ; Attributes: noreturn info_from_lumina
.text:000000000000A720
.text:000000000000A720 ; void __cdecl xalloc_die()
.text:000000000000A720                 public xalloc_die
.text:000000000000A720 xalloc_die      proc near               ; CODE XREF: main:loc_44FB↑p
.text:000000000000A720                                         ; quotearg_n_options:loc_9656↑p ...
.text:000000000000A720 ; __unwind {
.text:000000000000A720                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:000000000000A727                 sub     rsp, 8
.text:000000000000A72B                 mov     edx, 5          ; category
.text:000000000000A730                 xor     edi, edi        ; domainname
.text:000000000000A732                 call    _dcgettext
.text:000000000000A737                 mov     edi, cs:exit_failure ; status
.text:000000000000A73D                 lea     rdx, aS_0+2     ; format
.text:000000000000A744                 mov     rcx, rax
.text:000000000000A747                 xor     esi, esi        ; errnum
.text:000000000000A749                 xor     eax, eax
.text:000000000000A74B                 call    _error
.text:000000000000A750                 call    _abort
.text:000000000000A750 ; } // starts at A720
.text:000000000000A750 xalloc_die      endp
.text:000000000000A750
.text:000000000000A750 ; ---------------------------------------------------------------------------
.text:000000000000A755                 align 20h
.text:000000000000A760
.text:000000000000A760 ; =============== S U B R O U T I N E =======================================
.text:000000000000A760
.text:000000000000A760 ; Attributes: info_from_lumina
.text:000000000000A760
.text:000000000000A760 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:000000000000A760                 public xnumtoumax
.text:000000000000A760 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:000000000000A760
.text:000000000000A760 var_48          = qword ptr -48h
.text:000000000000A760 var_40          = qword ptr -40h
.text:000000000000A760 arg_0           = dword ptr  8
.text:000000000000A760
.text:000000000000A760 ; __unwind {
.text:000000000000A760                 push    r15
.text:000000000000A762                 push    r14
.text:000000000000A764                 mov     r15, rcx
.text:000000000000A767                 push    r13
.text:000000000000A769                 push    r12
.text:000000000000A76B                 mov     r14, rdx
.text:000000000000A76E                 push    rbp
.text:000000000000A76F                 push    rbx
.text:000000000000A770                 mov     edx, esi
.text:000000000000A772                 xor     esi, esi
.text:000000000000A774                 mov     r12, rdi
.text:000000000000A777                 mov     r13, r9
.text:000000000000A77A                 sub     rsp, 18h
.text:000000000000A77E                 mov     rcx, rsp
.text:000000000000A781                 mov     ebx, [rsp+48h+arg_0]
.text:000000000000A785                 mov     rax, fs:28h
.text:000000000000A78E                 mov     [rsp+48h+var_40], rax
.text:000000000000A793                 xor     eax, eax
.text:000000000000A795                 call    xstrtoumax
.text:000000000000A79A                 test    eax, eax
.text:000000000000A79C                 jnz     loc_A830
.text:000000000000A7A2                 mov     rbp, [rsp+48h+var_48]
.text:000000000000A7A6                 cmp     rbp, r14
.text:000000000000A7A9                 jb      short loc_A7B0
.text:000000000000A7AB                 cmp     rbp, r15
.text:000000000000A7AE                 jbe     short loc_A804
.text:000000000000A7B0
.text:000000000000A7B0 loc_A7B0:                               ; CODE XREF: xnumtoumax+49↑j
.text:000000000000A7B0                 call    ___errno_location
.text:000000000000A7B5                 cmp     rbp, 40000000h
.text:000000000000A7BC                 mov     r14, rax
.text:000000000000A7BF                 sbb     eax, eax
.text:000000000000A7C1                 and     eax, 0FFFFFFD7h
.text:000000000000A7C4                 add     eax, 4Bh ; 'K'
.text:000000000000A7C7                 mov     [r14], eax
.text:000000000000A7CA
.text:000000000000A7CA loc_A7CA:                               ; CODE XREF: xnumtoumax+E2↓j
.text:000000000000A7CA                                         ; xnumtoumax+EA↓j ...
.text:000000000000A7CA                 mov     rdi, r12
.text:000000000000A7CD                 call    quote
.text:000000000000A7D2                 mov     esi, [r14]
.text:000000000000A7D5                 mov     r8, rax
.text:000000000000A7D8                 mov     eax, 0
.text:000000000000A7DD                 lea     rdx, format     ; "%s: %s"
.text:000000000000A7E4                 mov     rcx, r13
.text:000000000000A7E7                 cmp     esi, 16h
.text:000000000000A7EA                 cmovz   esi, eax        ; errnum
.text:000000000000A7ED                 test    ebx, ebx
.text:000000000000A7EF                 mov     eax, 1
.text:000000000000A7F4                 cmovz   ebx, eax
.text:000000000000A7F7                 xor     eax, eax
.text:000000000000A7F9                 mov     edi, ebx        ; status
.text:000000000000A7FB                 call    _error
.text:000000000000A800                 mov     rbp, [rsp+48h+var_48]
.text:000000000000A804
.text:000000000000A804 loc_A804:                               ; CODE XREF: xnumtoumax+4E↑j
.text:000000000000A804                 mov     rdx, [rsp+48h+var_40]
.text:000000000000A809                 xor     rdx, fs:28h
.text:000000000000A812                 mov     rax, rbp
.text:000000000000A815                 jnz     short loc_A85B
.text:000000000000A817                 add     rsp, 18h
.text:000000000000A81B                 pop     rbx
.text:000000000000A81C                 pop     rbp
.text:000000000000A81D                 pop     r12
.text:000000000000A81F                 pop     r13
.text:000000000000A821                 pop     r14
.text:000000000000A823                 pop     r15
.text:000000000000A825                 retn
.text:000000000000A825 ; ---------------------------------------------------------------------------
.text:000000000000A826                 align 10h
.text:000000000000A830
.text:000000000000A830 loc_A830:                               ; CODE XREF: xnumtoumax+3C↑j
.text:000000000000A830                 mov     ebp, eax
.text:000000000000A832                 call    ___errno_location
.text:000000000000A837                 cmp     ebp, 1
.text:000000000000A83A                 mov     r14, rax
.text:000000000000A83D                 jz      short loc_A850
.text:000000000000A83F                 cmp     ebp, 3
.text:000000000000A842                 jnz     short loc_A7CA
.text:000000000000A844                 mov     dword ptr [rax], 0
.text:000000000000A84A                 jmp     loc_A7CA
.text:000000000000A84A ; ---------------------------------------------------------------------------
.text:000000000000A84F                 align 10h
.text:000000000000A850
.text:000000000000A850 loc_A850:                               ; CODE XREF: xnumtoumax+DD↑j
.text:000000000000A850                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000A856                 jmp     loc_A7CA
.text:000000000000A85B ; ---------------------------------------------------------------------------
.text:000000000000A85B
.text:000000000000A85B loc_A85B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:000000000000A85B                 call    ___stack_chk_fail
.text:000000000000A85B ; } // starts at A760
.text:000000000000A85B xnumtoumax      endp
.text:000000000000A85B
.text:000000000000A860
.text:000000000000A860 ; =============== S U B R O U T I N E =======================================
.text:000000000000A860
.text:000000000000A860 ; Attributes: info_from_lumina
.text:000000000000A860
.text:000000000000A860 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:000000000000A860                 public xdectoumax
.text:000000000000A860 xdectoumax      proc near               ; CODE XREF: main+288↑p
.text:000000000000A860                                         ; main+3AD↑p ...
.text:000000000000A860 ; __unwind {
.text:000000000000A860                 sub     rsp, 10h
.text:000000000000A864                 push    r9
.text:000000000000A866                 mov     r9, r8
.text:000000000000A869                 mov     r8, rcx
.text:000000000000A86C                 mov     rcx, rdx
.text:000000000000A86F                 mov     rdx, rsi
.text:000000000000A872                 mov     esi, 0Ah
.text:000000000000A877                 call    xnumtoumax
.text:000000000000A87C                 add     rsp, 18h
.text:000000000000A880                 retn
.text:000000000000A880 ; } // starts at A860
.text:000000000000A880 xdectoumax      endp
.text:000000000000A880
.text:000000000000A880 ; ---------------------------------------------------------------------------
.text:000000000000A881                 align 10h
.text:000000000000A890
.text:000000000000A890 ; =============== S U B R O U T I N E =======================================
.text:000000000000A890
.text:000000000000A890 ; Attributes: bp-based frame
.text:000000000000A890
.text:000000000000A890                 public xnanosleep
.text:000000000000A890 xnanosleep      proc near               ; CODE XREF: main+183A↑p
.text:000000000000A890
.text:000000000000A890 var_s0          = qword ptr  0
.text:000000000000A890 var_s8          = qword ptr  8
.text:000000000000A890 var_s18         = qword ptr  18h
.text:000000000000A890
.text:000000000000A890 ; __unwind {
.text:000000000000A890                 push    rbp
.text:000000000000A891                 push    rbx
.text:000000000000A892                 sub     rsp, 28h
.text:000000000000A896                 mov     rax, fs:28h
.text:000000000000A89F                 mov     [rsp+var_s18], rax
.text:000000000000A8A4                 xor     eax, eax
.text:000000000000A8A6                 mov     rbp, rsp
.text:000000000000A8A9                 call    dtotimespec
.text:000000000000A8AE                 mov     [rsp+var_s0], rax
.text:000000000000A8B2                 mov     [rsp+var_s8], rdx
.text:000000000000A8B7                 call    ___errno_location
.text:000000000000A8BC                 mov     rbx, rax
.text:000000000000A8BF                 jmp     short loc_A8D0
.text:000000000000A8BF ; ---------------------------------------------------------------------------
.text:000000000000A8C1                 align 8
.text:000000000000A8C8
.text:000000000000A8C8 loc_A8C8:                               ; CODE XREF: xnanosleep+52↓j
.text:000000000000A8C8                 test    dword ptr [rbx], 0FFFFFFFBh
.text:000000000000A8CE                 jnz     short loc_A900
.text:000000000000A8D0
.text:000000000000A8D0 loc_A8D0:                               ; CODE XREF: xnanosleep+2F↑j
.text:000000000000A8D0                 xor     esi, esi
.text:000000000000A8D2                 mov     dword ptr [rbx], 0
.text:000000000000A8D8                 mov     rdi, rbp
.text:000000000000A8DB                 call    rpl_nanosleep
.text:000000000000A8E0                 test    eax, eax
.text:000000000000A8E2                 jnz     short loc_A8C8
.text:000000000000A8E4
.text:000000000000A8E4 loc_A8E4:                               ; CODE XREF: xnanosleep+75↓j
.text:000000000000A8E4                 mov     rdx, [rsp+var_s18]
.text:000000000000A8E9                 xor     rdx, fs:28h
.text:000000000000A8F2                 jnz     short loc_A907
.text:000000000000A8F4                 add     rsp, 28h
.text:000000000000A8F8                 pop     rbx
.text:000000000000A8F9                 pop     rbp
.text:000000000000A8FA                 retn
.text:000000000000A8FA ; ---------------------------------------------------------------------------
.text:000000000000A8FB                 align 20h
.text:000000000000A900
.text:000000000000A900 loc_A900:                               ; CODE XREF: xnanosleep+3E↑j
.text:000000000000A900                 mov     eax, 0FFFFFFFFh
.text:000000000000A905                 jmp     short loc_A8E4
.text:000000000000A907 ; ---------------------------------------------------------------------------
.text:000000000000A907
.text:000000000000A907 loc_A907:                               ; CODE XREF: xnanosleep+62↑j
.text:000000000000A907                 call    ___stack_chk_fail
.text:000000000000A907 ; } // starts at A890
.text:000000000000A907 xnanosleep      endp
.text:000000000000A907
.text:000000000000A907 ; ---------------------------------------------------------------------------
.text:000000000000A90C                 align 10h
.text:000000000000A910
.text:000000000000A910 ; =============== S U B R O U T I N E =======================================
.text:000000000000A910
.text:000000000000A910
.text:000000000000A910                 public xstrtod
.text:000000000000A910 xstrtod         proc near               ; CODE XREF: main+2CC↑p
.text:000000000000A910
.text:000000000000A910 var_38          = qword ptr -38h
.text:000000000000A910 var_30          = qword ptr -30h
.text:000000000000A910
.text:000000000000A910 ; __unwind {
.text:000000000000A910                 push    r14
.text:000000000000A912                 push    r13
.text:000000000000A914                 mov     r14, rcx
.text:000000000000A917                 push    r12
.text:000000000000A919                 push    rbp
.text:000000000000A91A                 mov     rbp, rdi
.text:000000000000A91D                 push    rbx
.text:000000000000A91E                 mov     r13, rdx
.text:000000000000A921                 mov     rbx, rsi
.text:000000000000A924                 sub     rsp, 10h
.text:000000000000A928                 mov     rax, fs:28h
.text:000000000000A931                 mov     [rsp+38h+var_30], rax
.text:000000000000A936                 xor     eax, eax
.text:000000000000A938                 call    ___errno_location
.text:000000000000A93D                 mov     rsi, rsp
.text:000000000000A940                 mov     r12, rax
.text:000000000000A943                 mov     dword ptr [rax], 0
.text:000000000000A949                 mov     rdi, rbp
.text:000000000000A94C                 call    r14
.text:000000000000A94F                 mov     rcx, [rsp+38h+var_38]
.text:000000000000A953                 cmp     rcx, rbp
.text:000000000000A956                 jz      short loc_A9C8
.text:000000000000A958                 test    rbx, rbx
.text:000000000000A95B                 jz      short loc_A9A8
.text:000000000000A95D                 ucomisd xmm0, cs:qword_D320
.text:000000000000A965                 jp      short loc_A96E
.text:000000000000A967                 mov     eax, 1
.text:000000000000A96C                 jz      short loc_A97B
.text:000000000000A96E
.text:000000000000A96E loc_A96E:                               ; CODE XREF: xstrtod+55↑j
.text:000000000000A96E                                         ; xstrtod+A7↓j ...
.text:000000000000A96E                 cmp     dword ptr [r12], 22h ; '"'
.text:000000000000A973                 setnz   al
.text:000000000000A976
.text:000000000000A976 loc_A976:                               ; CODE XREF: xstrtod+BA↓j
.text:000000000000A976                 test    rbx, rbx
.text:000000000000A979                 jz      short loc_A97E
.text:000000000000A97B
.text:000000000000A97B loc_A97B:                               ; CODE XREF: xstrtod+5C↑j
.text:000000000000A97B                 mov     [rbx], rcx
.text:000000000000A97E
.text:000000000000A97E loc_A97E:                               ; CODE XREF: xstrtod+69↑j
.text:000000000000A97E                                         ; xstrtod+9D↓j ...
.text:000000000000A97E                 mov     rdx, [rsp+38h+var_30]
.text:000000000000A983                 xor     rdx, fs:28h
.text:000000000000A98C                 movsd   qword ptr [r13+0], xmm0
.text:000000000000A992                 jnz     short loc_A9CC
.text:000000000000A994                 add     rsp, 10h
.text:000000000000A998                 pop     rbx
.text:000000000000A999                 pop     rbp
.text:000000000000A99A                 pop     r12
.text:000000000000A99C                 pop     r13
.text:000000000000A99E                 pop     r14
.text:000000000000A9A0                 retn
.text:000000000000A9A0 ; ---------------------------------------------------------------------------
.text:000000000000A9A1                 align 8
.text:000000000000A9A8
.text:000000000000A9A8 loc_A9A8:                               ; CODE XREF: xstrtod+4B↑j
.text:000000000000A9A8                 xor     eax, eax
.text:000000000000A9AA                 cmp     byte ptr [rcx], 0
.text:000000000000A9AD                 jnz     short loc_A97E
.text:000000000000A9AF                 ucomisd xmm0, cs:qword_D320
.text:000000000000A9B7                 jp      short loc_A96E
.text:000000000000A9B9                 jnz     short loc_A96E
.text:000000000000A9BB                 mov     eax, 1
.text:000000000000A9C0                 jmp     short loc_A97E
.text:000000000000A9C0 ; ---------------------------------------------------------------------------
.text:000000000000A9C2                 align 8
.text:000000000000A9C8
.text:000000000000A9C8 loc_A9C8:                               ; CODE XREF: xstrtod+46↑j
.text:000000000000A9C8                 xor     eax, eax
.text:000000000000A9CA                 jmp     short loc_A976
.text:000000000000A9CC ; ---------------------------------------------------------------------------
.text:000000000000A9CC
.text:000000000000A9CC loc_A9CC:                               ; CODE XREF: xstrtod+82↑j
.text:000000000000A9CC                 call    ___stack_chk_fail
.text:000000000000A9CC ; } // starts at A910
.text:000000000000A9CC xstrtod         endp
.text:000000000000A9CC
.text:000000000000A9CC ; ---------------------------------------------------------------------------
.text:000000000000A9D1                 align 20h
.text:000000000000A9E0
.text:000000000000A9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9E0
.text:000000000000A9E0
.text:000000000000A9E0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:000000000000A9E0                 public xstrtoumax
.text:000000000000A9E0 xstrtoumax      proc near               ; CODE XREF: main+544↑p
.text:000000000000A9E0                                         ; xnumtoumax+35↑p
.text:000000000000A9E0
.text:000000000000A9E0 base            = dword ptr -50h
.text:000000000000A9E0 endptr          = qword ptr -48h
.text:000000000000A9E0 var_40          = qword ptr -40h
.text:000000000000A9E0
.text:000000000000A9E0 ; __unwind {
.text:000000000000A9E0                 push    r15
.text:000000000000A9E2                 push    r14
.text:000000000000A9E4                 push    r13
.text:000000000000A9E6                 push    r12
.text:000000000000A9E8                 push    rbp
.text:000000000000A9E9                 push    rbx
.text:000000000000A9EA                 sub     rsp, 28h
.text:000000000000A9EE                 mov     rax, fs:28h
.text:000000000000A9F7                 mov     [rsp+58h+var_40], rax
.text:000000000000A9FC                 xor     eax, eax
.text:000000000000A9FE                 cmp     edx, 24h ; '$'
.text:000000000000AA01                 ja      loc_AD65
.text:000000000000AA07                 lea     rax, [rsp+58h+endptr]
.text:000000000000AA0C                 mov     r15, rsi
.text:000000000000AA0F                 test    rsi, rsi
.text:000000000000AA12                 mov     rbp, rdi
.text:000000000000AA15                 mov     [rsp+58h+base], edx
.text:000000000000AA19                 mov     r14, rcx
.text:000000000000AA1C                 mov     r13, r8
.text:000000000000AA1F                 cmovz   r15, rax
.text:000000000000AA23                 call    ___errno_location
.text:000000000000AA28                 mov     dword ptr [rax], 0
.text:000000000000AA2E                 mov     r12, rax
.text:000000000000AA31                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000AA35                 call    ___ctype_b_loc
.text:000000000000AA3A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000AA3E                 mov     rsi, [rax]
.text:000000000000AA41                 mov     rax, rbp
.text:000000000000AA44                 jmp     short loc_AA57
.text:000000000000AA44 ; ---------------------------------------------------------------------------
.text:000000000000AA46                 align 10h
.text:000000000000AA50
.text:000000000000AA50 loc_AA50:                               ; CODE XREF: xstrtoumax+7F↓j
.text:000000000000AA50                 add     rax, 1
.text:000000000000AA54                 movzx   ebx, byte ptr [rax]
.text:000000000000AA57
.text:000000000000AA57 loc_AA57:                               ; CODE XREF: xstrtoumax+64↑j
.text:000000000000AA57                 movzx   ecx, bl
.text:000000000000AA5A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000AA5F                 jnz     short loc_AA50
.text:000000000000AA61                 cmp     bl, 2Dh ; '-'
.text:000000000000AA64                 jz      short loc_AAB8
.text:000000000000AA66                 xor     ecx, ecx        ; group
.text:000000000000AA68                 mov     rsi, r15        ; endptr
.text:000000000000AA6B                 mov     rdi, rbp        ; nptr
.text:000000000000AA6E                 call    ___strtoul_internal
.text:000000000000AA73                 mov     rcx, [r15]
.text:000000000000AA76                 mov     rbx, rax
.text:000000000000AA79                 cmp     rcx, rbp
.text:000000000000AA7C                 jz      short loc_AAA8
.text:000000000000AA7E                 mov     eax, [r12]
.text:000000000000AA82                 test    eax, eax
.text:000000000000AA84                 jz      short loc_AAE8
.text:000000000000AA86                 cmp     eax, 22h ; '"'
.text:000000000000AA89                 mov     ebp, 1
.text:000000000000AA8E                 jnz     short loc_AAB8
.text:000000000000AA90
.text:000000000000AA90 loc_AA90:                               ; CODE XREF: xstrtoumax+10A↓j
.text:000000000000AA90                 test    r13, r13
.text:000000000000AA93                 jz      short loc_AA9E
.text:000000000000AA95                 movzx   r12d, byte ptr [rcx]
.text:000000000000AA99                 test    r12b, r12b
.text:000000000000AA9C                 jnz     short loc_AB17
.text:000000000000AA9E
.text:000000000000AA9E loc_AA9E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000AA9E                 mov     [r14], rbx
.text:000000000000AAA1                 jmp     short loc_AABD
.text:000000000000AAA1 ; ---------------------------------------------------------------------------
.text:000000000000AAA3                 align 8
.text:000000000000AAA8
.text:000000000000AAA8 loc_AAA8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:000000000000AAA8                 test    r13, r13
.text:000000000000AAAB                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000AAB0                 jnz     short loc_AAF0
.text:000000000000AAB2                 nop     word ptr [rax+rax+00h]
.text:000000000000AAB8
.text:000000000000AAB8 loc_AAB8:                               ; CODE XREF: xstrtoumax+84↑j
.text:000000000000AAB8                                         ; xstrtoumax+AE↑j ...
.text:000000000000AAB8                 mov     ebp, 4
.text:000000000000AABD
.text:000000000000AABD loc_AABD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000AABD                                         ; xstrtoumax+217↓j ...
.text:000000000000AABD                 mov     rdi, [rsp+58h+var_40]
.text:000000000000AAC2                 xor     rdi, fs:28h
.text:000000000000AACB                 mov     eax, ebp
.text:000000000000AACD                 jnz     loc_AD60
.text:000000000000AAD3                 add     rsp, 28h
.text:000000000000AAD7                 pop     rbx
.text:000000000000AAD8                 pop     rbp
.text:000000000000AAD9                 pop     r12
.text:000000000000AADB                 pop     r13
.text:000000000000AADD                 pop     r14
.text:000000000000AADF                 pop     r15
.text:000000000000AAE1                 retn
.text:000000000000AAE1 ; ---------------------------------------------------------------------------
.text:000000000000AAE2                 align 8
.text:000000000000AAE8
.text:000000000000AAE8 loc_AAE8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:000000000000AAE8                 xor     ebp, ebp
.text:000000000000AAEA                 jmp     short loc_AA90
.text:000000000000AAEA ; ---------------------------------------------------------------------------
.text:000000000000AAEC                 align 10h
.text:000000000000AAF0
.text:000000000000AAF0 loc_AAF0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:000000000000AAF0                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000AAF5                 test    r12b, r12b
.text:000000000000AAF8                 jz      short loc_AAB8
.text:000000000000AAFA                 movsx   esi, r12b       ; c
.text:000000000000AAFE                 mov     rdi, r13        ; s
.text:000000000000AB01                 xor     ebp, ebp
.text:000000000000AB03                 call    _strchr
.text:000000000000AB08                 test    rax, rax
.text:000000000000AB0B                 mov     ebx, 1
.text:000000000000AB10                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000AB15                 jz      short loc_AAB8
.text:000000000000AB17
.text:000000000000AB17 loc_AB17:                               ; CODE XREF: xstrtoumax+BC↑j
.text:000000000000AB17                 movsx   esi, r12b       ; c
.text:000000000000AB1B                 mov     rdi, r13        ; s
.text:000000000000AB1E                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000AB23                 call    _strchr
.text:000000000000AB28                 test    rax, rax
.text:000000000000AB2B                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000AB30                 jz      def_ABB6        ; jumptable 000000000000ABB6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000AB36                 lea     eax, [r12-45h]
.text:000000000000AB3B                 cmp     al, 2Fh ; '/'
.text:000000000000AB3D                 ja      short loc_AB90
.text:000000000000AB3F                 mov     rdx, 814400308945h
.text:000000000000AB49                 bt      rdx, rax
.text:000000000000AB4D                 jnb     short loc_AB90
.text:000000000000AB4F                 mov     esi, 30h ; '0'  ; c
.text:000000000000AB54                 mov     rdi, r13        ; s
.text:000000000000AB57                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000AB5C                 call    _strchr
.text:000000000000AB61                 test    rax, rax
.text:000000000000AB64                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000AB69                 jz      short loc_AB90
.text:000000000000AB6B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000AB6F                 cmp     al, 44h ; 'D'
.text:000000000000AB71                 jz      short loc_AB7F
.text:000000000000AB73                 cmp     al, 69h ; 'i'
.text:000000000000AB75                 jz      loc_AD48
.text:000000000000AB7B                 cmp     al, 42h ; 'B'
.text:000000000000AB7D                 jnz     short loc_AB90
.text:000000000000AB7F
.text:000000000000AB7F loc_AB7F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000AB7F                 mov     edi, 2
.text:000000000000AB84                 mov     esi, 3E8h
.text:000000000000AB89                 jmp     short loc_AB9A
.text:000000000000AB89 ; ---------------------------------------------------------------------------
.text:000000000000AB8B                 align 10h
.text:000000000000AB90
.text:000000000000AB90 loc_AB90:                               ; CODE XREF: xstrtoumax+15D↑j
.text:000000000000AB90                                         ; xstrtoumax+16D↑j ...
.text:000000000000AB90                 mov     edi, 1
.text:000000000000AB95                 mov     esi, 400h
.text:000000000000AB9A
.text:000000000000AB9A loc_AB9A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000AB9A                                         ; xstrtoumax+37B↓j
.text:000000000000AB9A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000AB9E                 cmp     r12b, 35h
.text:000000000000ABA2                 ja      short def_ABB6  ; jumptable 000000000000ABB6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000ABA4                 lea     rdx, jpt_ABB6
.text:000000000000ABAB                 movzx   r12d, r12b
.text:000000000000ABAF                 movsxd  rax, ds:(jpt_ABB6 - 0D370h)[rdx+r12*4]
.text:000000000000ABB3                 add     rax, rdx
.text:000000000000ABB6                 jmp     rax             ; switch jump
.text:000000000000ABB8 ; ---------------------------------------------------------------------------
.text:000000000000ABB8
.text:000000000000ABB8 loc_ABB8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000ABB8                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000ABB8                 mov     rax, rbx        ; jumptable 000000000000ABB6 cases 77,109
.text:000000000000ABBB                 mul     rsi
.text:000000000000ABBE                 jo      loc_ADB1
.text:000000000000ABC4                 xor     r8d, r8d
.text:000000000000ABC7
.text:000000000000ABC7 loc_ABC7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:000000000000ABC7                                         ; xstrtoumax+35E↓j ...
.text:000000000000ABC7                 mul     rsi
.text:000000000000ABCA                 jo      loc_ADA2
.text:000000000000ABD0                 mov     rbx, rax
.text:000000000000ABD3
.text:000000000000ABD3 loc_ABD3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:000000000000ABD3                 or      ebp, r8d
.text:000000000000ABD6                 db      2Eh
.text:000000000000ABD6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000ABE0
.text:000000000000ABE0 loc_ABE0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000ABE0                                         ; xstrtoumax+23B↓j ...
.text:000000000000ABE0                 movsxd  rdi, edi        ; jumptable 000000000000ABB6 case 99
.text:000000000000ABE3                 mov     eax, ebp
.text:000000000000ABE5                 add     rcx, rdi
.text:000000000000ABE8                 or      eax, 2
.text:000000000000ABEB                 mov     [r15], rcx
.text:000000000000ABEE                 cmp     byte ptr [rcx], 0
.text:000000000000ABF1                 mov     [r14], rbx
.text:000000000000ABF4                 cmovnz  ebp, eax
.text:000000000000ABF7                 jmp     loc_AABD
.text:000000000000ABFC ; ---------------------------------------------------------------------------
.text:000000000000ABFC
.text:000000000000ABFC def_ABB6:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000ABFC                                         ; xstrtoumax+1C2↑j ...
.text:000000000000ABFC                 mov     [r14], rbx      ; jumptable 000000000000ABB6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000ABFF                 or      ebp, 2
.text:000000000000AC02                 jmp     loc_AABD
.text:000000000000AC07 ; ---------------------------------------------------------------------------
.text:000000000000AC07
.text:000000000000AC07 loc_AC07:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC07                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC07                 mov     edx, 2          ; jumptable 000000000000ABB6 case 119
.text:000000000000AC0C                 mov     rax, rdx
.text:000000000000AC0F                 mul     rbx
.text:000000000000AC12                 jo      loc_ACAE
.text:000000000000AC18                 add     rbx, rbx
.text:000000000000AC1B                 jmp     short loc_ABE0  ; jumptable 000000000000ABB6 case 99
.text:000000000000AC1D ; ---------------------------------------------------------------------------
.text:000000000000AC1D
.text:000000000000AC1D loc_AC1D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC1D                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC1D                 mov     edx, 200h       ; jumptable 000000000000ABB6 case 98
.text:000000000000AC22                 mov     rax, rdx
.text:000000000000AC25                 mul     rbx
.text:000000000000AC28                 jo      loc_ACAE
.text:000000000000AC2E                 shl     rbx, 9
.text:000000000000AC32                 jmp     short loc_ABE0  ; jumptable 000000000000ABB6 case 99
.text:000000000000AC34 ; ---------------------------------------------------------------------------
.text:000000000000AC34
.text:000000000000AC34 loc_AC34:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC34                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC34                 mov     r8d, 7          ; jumptable 000000000000ABB6 case 90
.text:000000000000AC3A                 xor     r9d, r9d
.text:000000000000AC3D                 nop     dword ptr [rax]
.text:000000000000AC40
.text:000000000000AC40 loc_AC40:                               ; CODE XREF: xstrtoumax+273↓j
.text:000000000000AC40                 mov     rax, rbx
.text:000000000000AC43                 mul     rsi
.text:000000000000AC46                 mov     rbx, rax
.text:000000000000AC49                 jo      loc_ADDE
.text:000000000000AC4F
.text:000000000000AC4F loc_AC4F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000AC4F                 sub     r8d, 1
.text:000000000000AC53                 jnz     short loc_AC40
.text:000000000000AC55
.text:000000000000AC55 loc_AC55:                               ; CODE XREF: xstrtoumax+29D↓j
.text:000000000000AC55                                         ; xstrtoumax+2BD↓j ...
.text:000000000000AC55                 or      ebp, r9d
.text:000000000000AC58                 jmp     short loc_ABE0  ; jumptable 000000000000ABB6 case 99
.text:000000000000AC5A ; ---------------------------------------------------------------------------
.text:000000000000AC5A
.text:000000000000AC5A loc_AC5A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC5A                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC5A                 mov     r8d, 8          ; jumptable 000000000000ABB6 case 89
.text:000000000000AC60                 xor     r9d, r9d
.text:000000000000AC63                 nop     dword ptr [rax+rax+00h]
.text:000000000000AC68
.text:000000000000AC68 loc_AC68:                               ; CODE XREF: xstrtoumax+29B↓j
.text:000000000000AC68                 mov     rax, rbx
.text:000000000000AC6B                 mul     rsi
.text:000000000000AC6E                 mov     rbx, rax
.text:000000000000AC71                 jo      loc_ADC0
.text:000000000000AC77
.text:000000000000AC77 loc_AC77:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:000000000000AC77                 sub     r8d, 1
.text:000000000000AC7B                 jnz     short loc_AC68
.text:000000000000AC7D                 jmp     short loc_AC55
.text:000000000000AC7F ; ---------------------------------------------------------------------------
.text:000000000000AC7F
.text:000000000000AC7F loc_AC7F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC7F                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC7F                 mov     r8d, 4          ; jumptable 000000000000ABB6 cases 84,116
.text:000000000000AC85                 xor     r9d, r9d
.text:000000000000AC88
.text:000000000000AC88 loc_AC88:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:000000000000AC88                 mov     rax, rbx
.text:000000000000AC8B                 mul     rsi
.text:000000000000AC8E                 mov     rbx, rax
.text:000000000000AC91                 jo      loc_AD93
.text:000000000000AC97
.text:000000000000AC97 loc_AC97:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:000000000000AC97                 sub     r8d, 1
.text:000000000000AC9B                 jnz     short loc_AC88
.text:000000000000AC9D                 jmp     short loc_AC55
.text:000000000000AC9F ; ---------------------------------------------------------------------------
.text:000000000000AC9F
.text:000000000000AC9F loc_AC9F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AC9F                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AC9F                 mov     rax, rbx        ; jumptable 000000000000ABB6 cases 75,107
.text:000000000000ACA2                 mul     rsi
.text:000000000000ACA5                 mov     rbx, rax
.text:000000000000ACA8                 jno     loc_ABE0        ; jumptable 000000000000ABB6 case 99
.text:000000000000ACAE
.text:000000000000ACAE loc_ACAE:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000ACAE                                         ; xstrtoumax+248↑j ...
.text:000000000000ACAE                 mov     ebp, 1
.text:000000000000ACB3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ACB7                 jmp     loc_ABE0        ; jumptable 000000000000ABB6 case 99
.text:000000000000ACB7 ; ---------------------------------------------------------------------------
.text:000000000000ACBC                 align 20h
.text:000000000000ACC0
.text:000000000000ACC0 loc_ACC0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000ACC0                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000ACC0                 mov     r8d, 5          ; jumptable 000000000000ABB6 case 80
.text:000000000000ACC6                 xor     r9d, r9d
.text:000000000000ACC9
.text:000000000000ACC9 loc_ACC9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:000000000000ACC9                 mov     rax, rbx
.text:000000000000ACCC                 mul     rsi
.text:000000000000ACCF                 mov     rbx, rax
.text:000000000000ACD2                 jo      loc_ADCF
.text:000000000000ACD8
.text:000000000000ACD8 loc_ACD8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:000000000000ACD8                 sub     r8d, 1
.text:000000000000ACDC                 jnz     short loc_ACC9
.text:000000000000ACDE                 jmp     loc_AC55
.text:000000000000ACE3 ; ---------------------------------------------------------------------------
.text:000000000000ACE3
.text:000000000000ACE3 loc_ACE3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000ACE3                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000ACE3                 mov     r8d, 6          ; jumptable 000000000000ABB6 case 69
.text:000000000000ACE9                 xor     r9d, r9d
.text:000000000000ACEC
.text:000000000000ACEC loc_ACEC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000ACEC                 mov     rax, rbx
.text:000000000000ACEF                 mul     rsi
.text:000000000000ACF2                 mov     rbx, rax
.text:000000000000ACF5                 jo      loc_AD84
.text:000000000000ACFB
.text:000000000000ACFB loc_ACFB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000ACFB                 sub     r8d, 1
.text:000000000000ACFF                 jnz     short loc_ACEC
.text:000000000000AD01                 jmp     loc_AC55
.text:000000000000AD06 ; ---------------------------------------------------------------------------
.text:000000000000AD06
.text:000000000000AD06 loc_AD06:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AD06                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AD06                 mov     edx, 400h       ; jumptable 000000000000ABB6 case 66
.text:000000000000AD0B                 mov     rax, rdx
.text:000000000000AD0E                 mul     rbx
.text:000000000000AD11                 jo      short loc_ACAE
.text:000000000000AD13                 shl     rbx, 0Ah
.text:000000000000AD17                 jmp     loc_ABE0        ; jumptable 000000000000ABB6 case 99
.text:000000000000AD1C ; ---------------------------------------------------------------------------
.text:000000000000AD1C
.text:000000000000AD1C loc_AD1C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000AD1C                                         ; DATA XREF: .rodata:jpt_ABB6↓o
.text:000000000000AD1C                 mov     rax, rbx        ; jumptable 000000000000ABB6 cases 71,103
.text:000000000000AD1F                 mul     rsi
.text:000000000000AD22                 jo      loc_ADED
.text:000000000000AD28                 xor     r8d, r8d
.text:000000000000AD2B
.text:000000000000AD2B loc_AD2B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000AD2B                 mul     rsi
.text:000000000000AD2E                 jno     loc_ABC7
.text:000000000000AD34                 mov     r8d, 1
.text:000000000000AD3A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AD3E                 jmp     loc_ABC7
.text:000000000000AD3E ; ---------------------------------------------------------------------------
.text:000000000000AD43                 align 8
.text:000000000000AD48
.text:000000000000AD48 loc_AD48:                               ; CODE XREF: xstrtoumax+195↑j
.text:000000000000AD48                 xor     edi, edi
.text:000000000000AD4A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000AD4E                 mov     esi, 400h
.text:000000000000AD53                 setz    dil
.text:000000000000AD57                 lea     edi, [rdi+rdi+1]
.text:000000000000AD5B                 jmp     loc_AB9A
.text:000000000000AD60 ; ---------------------------------------------------------------------------
.text:000000000000AD60
.text:000000000000AD60 loc_AD60:                               ; CODE XREF: xstrtoumax+ED↑j
.text:000000000000AD60                 call    ___stack_chk_fail
.text:000000000000AD65 ; ---------------------------------------------------------------------------
.text:000000000000AD65
.text:000000000000AD65 loc_AD65:                               ; CODE XREF: xstrtoumax+21↑j
.text:000000000000AD65                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:000000000000AD6C                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000AD73                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000AD7A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000AD7F                 call    ___assert_fail
.text:000000000000AD84 ; ---------------------------------------------------------------------------
.text:000000000000AD84
.text:000000000000AD84 loc_AD84:                               ; CODE XREF: xstrtoumax+315↑j
.text:000000000000AD84                 mov     r9d, 1
.text:000000000000AD8A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AD8E                 jmp     loc_ACFB
.text:000000000000AD93 ; ---------------------------------------------------------------------------
.text:000000000000AD93
.text:000000000000AD93 loc_AD93:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:000000000000AD93                 mov     r9d, 1
.text:000000000000AD99                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000AD9D                 jmp     loc_AC97
.text:000000000000ADA2 ; ---------------------------------------------------------------------------
.text:000000000000ADA2
.text:000000000000ADA2 loc_ADA2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:000000000000ADA2                 mov     r8d, 1
.text:000000000000ADA8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADAC                 jmp     loc_ABD3
.text:000000000000ADB1 ; ---------------------------------------------------------------------------
.text:000000000000ADB1
.text:000000000000ADB1 loc_ADB1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:000000000000ADB1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADB5                 mov     r8d, 1
.text:000000000000ADBB                 jmp     loc_ABC7
.text:000000000000ADC0 ; ---------------------------------------------------------------------------
.text:000000000000ADC0
.text:000000000000ADC0 loc_ADC0:                               ; CODE XREF: xstrtoumax+291↑j
.text:000000000000ADC0                 mov     r9d, 1
.text:000000000000ADC6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADCA                 jmp     loc_AC77
.text:000000000000ADCF ; ---------------------------------------------------------------------------
.text:000000000000ADCF
.text:000000000000ADCF loc_ADCF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000ADCF                 mov     r9d, 1
.text:000000000000ADD5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADD9                 jmp     loc_ACD8
.text:000000000000ADDE ; ---------------------------------------------------------------------------
.text:000000000000ADDE
.text:000000000000ADDE loc_ADDE:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000ADDE                 mov     r9d, 1
.text:000000000000ADE4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADE8                 jmp     loc_AC4F
.text:000000000000ADED ; ---------------------------------------------------------------------------
.text:000000000000ADED
.text:000000000000ADED loc_ADED:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000ADED                 mov     r8d, 1
.text:000000000000ADF3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADF7                 jmp     loc_AD2B
.text:000000000000ADF7 ; } // starts at A9E0
.text:000000000000ADF7 xstrtoumax      endp
.text:000000000000ADF7
.text:000000000000ADF7 ; ---------------------------------------------------------------------------
.text:000000000000ADFC                 align 20h
.text:000000000000AE00
.text:000000000000AE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE00
.text:000000000000AE00
.text:000000000000AE00 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000AE00                 public rpl_fcntl
.text:000000000000AE00 rpl_fcntl       proc near               ; CODE XREF: main+15D8↑p
.text:000000000000AE00                                         ; main+1600↑p ...
.text:000000000000AE00
.text:000000000000AE00 var_68          = dword ptr -68h
.text:000000000000AE00 var_60          = qword ptr -60h
.text:000000000000AE00 var_58          = qword ptr -58h
.text:000000000000AE00 var_50          = qword ptr -50h
.text:000000000000AE00 var_48          = byte ptr -48h
.text:000000000000AE00 var_38          = qword ptr -38h
.text:000000000000AE00 var_30          = qword ptr -30h
.text:000000000000AE00 var_28          = qword ptr -28h
.text:000000000000AE00 var_20          = qword ptr -20h
.text:000000000000AE00 arg_0           = byte ptr  8
.text:000000000000AE00
.text:000000000000AE00 ; __unwind {
.text:000000000000AE00                 push    r12
.text:000000000000AE02                 push    rbp
.text:000000000000AE03                 mov     ebp, edi
.text:000000000000AE05                 push    rbx
.text:000000000000AE06                 sub     rsp, 50h
.text:000000000000AE0A                 mov     rax, fs:28h
.text:000000000000AE13                 mov     [rsp+68h+var_50], rax
.text:000000000000AE18                 xor     eax, eax
.text:000000000000AE1A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000AE1F                 test    esi, esi
.text:000000000000AE21                 mov     [rsp+68h+var_38], rdx
.text:000000000000AE26                 mov     [rsp+68h+var_30], rcx
.text:000000000000AE2B                 mov     [rsp+68h+var_28], r8
.text:000000000000AE30                 mov     [rsp+68h+var_60], rax
.text:000000000000AE35                 lea     rax, [rsp+68h+var_48]
.text:000000000000AE3A                 mov     [rsp+68h+var_20], r9
.text:000000000000AE3F                 mov     [rsp+68h+var_68], 10h
.text:000000000000AE46                 mov     [rsp+68h+var_58], rax
.text:000000000000AE4B                 jz      loc_B052
.text:000000000000AE51                 cmp     esi, 406h
.text:000000000000AE57                 jnz     short loc_AEA0
.text:000000000000AE59                 mov     rax, [rsp+68h+var_58]
.text:000000000000AE5E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000AE65                 mov     [rsp+68h+var_68], 18h
.text:000000000000AE6C                 mov     r12d, [rax+10h]
.text:000000000000AE70                 mov     edx, r12d
.text:000000000000AE73                 js      loc_AFA3
.text:000000000000AE79                 xor     eax, eax
.text:000000000000AE7B                 mov     esi, 406h       ; cmd
.text:000000000000AE80                 call    _fcntl
.text:000000000000AE85                 test    eax, eax
.text:000000000000AE87                 mov     ebx, eax
.text:000000000000AE89                 js      loc_B018
.text:000000000000AE8F
.text:000000000000AE8F loc_AE8F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000AE8F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000AE99                 jmp     short loc_AEE0
.text:000000000000AE99 ; ---------------------------------------------------------------------------
.text:000000000000AE9B                 align 20h
.text:000000000000AEA0
.text:000000000000AEA0 loc_AEA0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000AEA0                 cmp     esi, 0Bh
.text:000000000000AEA3                 jz      short loc_AED0
.text:000000000000AEA5                 jg      short loc_AF00
.text:000000000000AEA7                 cmp     esi, 4
.text:000000000000AEAA                 jz      loc_AF80
.text:000000000000AEB0                 jg      loc_AF70
.text:000000000000AEB6                 cmp     esi, 2
.text:000000000000AEB9                 jz      loc_AF80
.text:000000000000AEBF                 jg      short loc_AED0
.text:000000000000AEC1                 cmp     esi, 1
.text:000000000000AEC4                 jnz     short loc_AF28
.text:000000000000AEC6                 db      2Eh
.text:000000000000AEC6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000AED0
.text:000000000000AED0 loc_AED0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000AED0                                         ; rpl_fcntl+BF↑j ...
.text:000000000000AED0                 mov     edi, ebp        ; fd
.text:000000000000AED2                 xor     eax, eax
.text:000000000000AED4                 call    _fcntl
.text:000000000000AED9                 mov     ebx, eax
.text:000000000000AEDB                 nop     dword ptr [rax+rax+00h]
.text:000000000000AEE0
.text:000000000000AEE0 loc_AEE0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000AEE0                                         ; rpl_fcntl+147↓j ...
.text:000000000000AEE0                 mov     rcx, [rsp+68h+var_50]
.text:000000000000AEE5                 xor     rcx, fs:28h
.text:000000000000AEEE                 mov     eax, ebx
.text:000000000000AEF0                 jnz     loc_B04D
.text:000000000000AEF6                 add     rsp, 50h
.text:000000000000AEFA                 pop     rbx
.text:000000000000AEFB                 pop     rbp
.text:000000000000AEFC                 pop     r12
.text:000000000000AEFE                 retn
.text:000000000000AEFE ; ---------------------------------------------------------------------------
.text:000000000000AEFF                 align 20h
.text:000000000000AF00
.text:000000000000AF00 loc_AF00:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000AF00                 cmp     esi, 407h
.text:000000000000AF06                 jg      short loc_AF50
.text:000000000000AF08                 cmp     esi, 406h
.text:000000000000AF0E                 jge     short loc_AF80
.text:000000000000AF10                 cmp     esi, 401h
.text:000000000000AF16                 jz      short loc_AED0
.text:000000000000AF18                 cmp     esi, 402h
.text:000000000000AF1E                 jz      short loc_AF80
.text:000000000000AF20                 cmp     esi, 400h
.text:000000000000AF26                 jz      short loc_AF80
.text:000000000000AF28
.text:000000000000AF28 loc_AF28:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000AF28                                         ; rpl_fcntl+164↓j ...
.text:000000000000AF28                 mov     eax, [rsp+68h+var_68]
.text:000000000000AF2B                 cmp     eax, 2Fh ; '/'
.text:000000000000AF2E                 ja      loc_B06A
.text:000000000000AF34                 add     rax, [rsp+68h+var_58]
.text:000000000000AF39
.text:000000000000AF39 loc_AF39:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000AF39                 mov     rdx, [rax]
.text:000000000000AF3C                 mov     edi, ebp        ; fd
.text:000000000000AF3E                 xor     eax, eax
.text:000000000000AF40                 call    _fcntl
.text:000000000000AF45                 mov     ebx, eax
.text:000000000000AF47                 jmp     short loc_AEE0
.text:000000000000AF47 ; ---------------------------------------------------------------------------
.text:000000000000AF49                 align 10h
.text:000000000000AF50
.text:000000000000AF50 loc_AF50:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000AF50                 cmp     esi, 409h
.text:000000000000AF56                 jz      short loc_AF80
.text:000000000000AF58                 jl      loc_AED0
.text:000000000000AF5E                 cmp     esi, 40Ah
.text:000000000000AF64                 jnz     short loc_AF28
.text:000000000000AF66                 jmp     loc_AED0
.text:000000000000AF66 ; ---------------------------------------------------------------------------
.text:000000000000AF6B                 align 10h
.text:000000000000AF70
.text:000000000000AF70 loc_AF70:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000AF70                 cmp     esi, 9
.text:000000000000AF73                 jz      loc_AED0
.text:000000000000AF79                 jg      short loc_AF80
.text:000000000000AF7B                 cmp     esi, 8
.text:000000000000AF7E                 jnz     short loc_AF28
.text:000000000000AF80
.text:000000000000AF80 loc_AF80:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000AF80                                         ; rpl_fcntl+B9↑j ...
.text:000000000000AF80                 mov     eax, [rsp+68h+var_68]
.text:000000000000AF83                 cmp     eax, 2Fh ; '/'
.text:000000000000AF86                 ja      loc_B074
.text:000000000000AF8C                 add     rax, [rsp+68h+var_58]
.text:000000000000AF91
.text:000000000000AF91 loc_AF91:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000AF91                 mov     edx, [rax]
.text:000000000000AF93                 mov     edi, ebp        ; fd
.text:000000000000AF95                 xor     eax, eax
.text:000000000000AF97                 call    _fcntl
.text:000000000000AF9C                 mov     ebx, eax
.text:000000000000AF9E                 jmp     loc_AEE0
.text:000000000000AFA3 ; ---------------------------------------------------------------------------
.text:000000000000AFA3
.text:000000000000AFA3 loc_AFA3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000AFA3                 xor     esi, esi        ; cmd
.text:000000000000AFA5                 xor     eax, eax
.text:000000000000AFA7                 call    _fcntl
.text:000000000000AFAC                 test    eax, eax
.text:000000000000AFAE                 mov     ebx, eax
.text:000000000000AFB0                 js      loc_AEE0
.text:000000000000AFB6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000AFBD                 jnz     loc_AEE0
.text:000000000000AFC3
.text:000000000000AFC3 loc_AFC3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000AFC3                 xor     eax, eax
.text:000000000000AFC5                 mov     esi, 1          ; cmd
.text:000000000000AFCA                 mov     edi, ebx        ; fd
.text:000000000000AFCC                 call    _fcntl
.text:000000000000AFD1                 test    eax, eax
.text:000000000000AFD3                 js      short loc_AFF1
.text:000000000000AFD5                 or      eax, 1
.text:000000000000AFD8                 mov     esi, 2          ; cmd
.text:000000000000AFDD                 mov     edi, ebx        ; fd
.text:000000000000AFDF                 mov     edx, eax
.text:000000000000AFE1                 xor     eax, eax
.text:000000000000AFE3                 call    _fcntl
.text:000000000000AFE8                 cmp     eax, 0FFFFFFFFh
.text:000000000000AFEB                 jnz     loc_AEE0
.text:000000000000AFF1
.text:000000000000AFF1 loc_AFF1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000AFF1                 call    ___errno_location
.text:000000000000AFF6                 mov     r12d, [rax]
.text:000000000000AFF9                 mov     rbp, rax
.text:000000000000AFFC                 mov     edi, ebx        ; fd
.text:000000000000AFFE                 call    _close
.text:000000000000B003                 mov     ebx, 0FFFFFFFFh
.text:000000000000B008                 mov     [rbp+0], r12d
.text:000000000000B00C                 jmp     loc_AEE0
.text:000000000000B00C ; ---------------------------------------------------------------------------
.text:000000000000B011                 align 8
.text:000000000000B018
.text:000000000000B018 loc_B018:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000B018                 call    ___errno_location
.text:000000000000B01D                 cmp     dword ptr [rax], 16h
.text:000000000000B020                 jnz     loc_AE8F
.text:000000000000B026                 xor     esi, esi        ; cmd
.text:000000000000B028                 xor     eax, eax
.text:000000000000B02A                 mov     edx, r12d
.text:000000000000B02D                 mov     edi, ebp        ; fd
.text:000000000000B02F                 call    _fcntl
.text:000000000000B034                 test    eax, eax
.text:000000000000B036                 mov     ebx, eax
.text:000000000000B038                 js      loc_AEE0
.text:000000000000B03E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000B048                 jmp     loc_AFC3
.text:000000000000B04D ; ---------------------------------------------------------------------------
.text:000000000000B04D
.text:000000000000B04D loc_B04D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000B04D                 call    ___stack_chk_fail
.text:000000000000B052 ; ---------------------------------------------------------------------------
.text:000000000000B052
.text:000000000000B052 loc_B052:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000B052                 mov     rax, [rsp+68h+var_58]
.text:000000000000B057                 xor     esi, esi        ; cmd
.text:000000000000B059                 mov     edx, [rax+10h]
.text:000000000000B05C                 xor     eax, eax
.text:000000000000B05E                 call    _fcntl
.text:000000000000B063                 mov     ebx, eax
.text:000000000000B065                 jmp     loc_AEE0
.text:000000000000B06A ; ---------------------------------------------------------------------------
.text:000000000000B06A
.text:000000000000B06A loc_B06A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000B06A                 mov     rax, [rsp+68h+var_60]
.text:000000000000B06F                 jmp     loc_AF39
.text:000000000000B074 ; ---------------------------------------------------------------------------
.text:000000000000B074
.text:000000000000B074 loc_B074:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000B074                 mov     rax, [rsp+68h+var_60]
.text:000000000000B079                 jmp     loc_AF91
.text:000000000000B079 ; } // starts at AE00
.text:000000000000B079 rpl_fcntl       endp
.text:000000000000B079
.text:000000000000B079 ; ---------------------------------------------------------------------------
.text:000000000000B07E                 align 20h
.text:000000000000B080
.text:000000000000B080 ; =============== S U B R O U T I N E =======================================
.text:000000000000B080
.text:000000000000B080 ; Attributes: info_from_lumina
.text:000000000000B080
.text:000000000000B080 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000B080                 public rpl_mbrtowc
.text:000000000000B080 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:000000000000B080
.text:000000000000B080 pwc             = dword ptr -34h
.text:000000000000B080 var_30          = qword ptr -30h
.text:000000000000B080
.text:000000000000B080 ; __unwind {
.text:000000000000B080                 push    r13
.text:000000000000B082                 push    r12
.text:000000000000B084                 mov     r13, rsi
.text:000000000000B087                 push    rbp
.text:000000000000B088                 push    rbx
.text:000000000000B089                 mov     rbx, rdi
.text:000000000000B08C                 mov     r12, rdx
.text:000000000000B08F                 sub     rsp, 18h
.text:000000000000B093                 mov     rax, fs:28h
.text:000000000000B09C                 mov     [rsp+38h+var_30], rax
.text:000000000000B0A1                 xor     eax, eax
.text:000000000000B0A3                 lea     rax, [rsp+38h+pwc]
.text:000000000000B0A8                 test    rdi, rdi
.text:000000000000B0AB                 cmovz   rbx, rax
.text:000000000000B0AF                 mov     rdi, rbx        ; pwc
.text:000000000000B0B2                 call    _mbrtowc
.text:000000000000B0B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000B0BB                 mov     rbp, rax
.text:000000000000B0BE                 jbe     short loc_B0E0
.text:000000000000B0C0                 test    r12, r12
.text:000000000000B0C3                 jz      short loc_B0E0
.text:000000000000B0C5                 xor     edi, edi
.text:000000000000B0C7                 call    hard_locale
.text:000000000000B0CC                 test    al, al
.text:000000000000B0CE                 jnz     short loc_B0E0
.text:000000000000B0D0                 movzx   eax, byte ptr [r13+0]
.text:000000000000B0D5                 mov     ebp, 1
.text:000000000000B0DA                 mov     [rbx], eax
.text:000000000000B0DC                 nop     dword ptr [rax+00h]
.text:000000000000B0E0
.text:000000000000B0E0 loc_B0E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000B0E0                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000B0E0                 mov     rdx, [rsp+38h+var_30]
.text:000000000000B0E5                 xor     rdx, fs:28h
.text:000000000000B0EE                 mov     rax, rbp
.text:000000000000B0F1                 jnz     short loc_B0FE
.text:000000000000B0F3                 add     rsp, 18h
.text:000000000000B0F7                 pop     rbx
.text:000000000000B0F8                 pop     rbp
.text:000000000000B0F9                 pop     r12
.text:000000000000B0FB                 pop     r13
.text:000000000000B0FD                 retn
.text:000000000000B0FE ; ---------------------------------------------------------------------------
.text:000000000000B0FE
.text:000000000000B0FE loc_B0FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000B0FE                 call    ___stack_chk_fail
.text:000000000000B0FE ; } // starts at B080
.text:000000000000B0FE rpl_mbrtowc     endp
.text:000000000000B0FE
.text:000000000000B0FE ; ---------------------------------------------------------------------------
.text:000000000000B103                 align 10h
.text:000000000000B110
.text:000000000000B110 ; =============== S U B R O U T I N E =======================================
.text:000000000000B110
.text:000000000000B110
.text:000000000000B110                 public rpl_nanosleep
.text:000000000000B110 rpl_nanosleep   proc near               ; CODE XREF: xnanosleep+4B↑p
.text:000000000000B110
.text:000000000000B110 var_38          = qword ptr -38h
.text:000000000000B110 var_30          = qword ptr -30h
.text:000000000000B110 var_20          = qword ptr -20h
.text:000000000000B110
.text:000000000000B110 ; __unwind {
.text:000000000000B110                 push    r12
.text:000000000000B112                 push    rbp
.text:000000000000B113                 push    rbx
.text:000000000000B114                 sub     rsp, 20h
.text:000000000000B118                 mov     rax, fs:28h
.text:000000000000B121                 mov     [rsp+38h+var_20], rax
.text:000000000000B126                 xor     eax, eax
.text:000000000000B128                 mov     rax, [rdi+8]
.text:000000000000B12C                 cmp     rax, 3B9AC9FFh
.text:000000000000B132                 ja      loc_B1C0
.text:000000000000B138                 mov     rbx, [rdi]
.text:000000000000B13B                 mov     rbp, rsi
.text:000000000000B13E                 mov     [rsp+38h+var_30], rax
.text:000000000000B143                 mov     r12, rsp
.text:000000000000B146                 cmp     rbx, 1FA400h
.text:000000000000B14D                 jg      short loc_B16A
.text:000000000000B14F                 jmp     short loc_B198
.text:000000000000B14F ; ---------------------------------------------------------------------------
.text:000000000000B151                 align 8
.text:000000000000B158
.text:000000000000B158 loc_B158:                               ; CODE XREF: rpl_nanosleep+76↓j
.text:000000000000B158                 cmp     rbx, 1FA400h
.text:000000000000B15F                 mov     [rsp+38h+var_30], 0
.text:000000000000B168                 jle     short loc_B198
.text:000000000000B16A
.text:000000000000B16A loc_B16A:                               ; CODE XREF: rpl_nanosleep+3D↑j
.text:000000000000B16A                 mov     rsi, rbp        ; remaining
.text:000000000000B16D                 mov     rdi, r12        ; requested_time
.text:000000000000B170                 mov     [rsp+38h+var_38], 1FA400h
.text:000000000000B178                 sub     rbx, 1FA400h
.text:000000000000B17F                 call    _nanosleep
.text:000000000000B184                 test    eax, eax
.text:000000000000B186                 jz      short loc_B158
.text:000000000000B188                 test    rbp, rbp
.text:000000000000B18B                 jz      short loc_B1A7
.text:000000000000B18D                 add     [rbp+0], rbx
.text:000000000000B191                 jmp     short loc_B1A7
.text:000000000000B191 ; ---------------------------------------------------------------------------
.text:000000000000B193                 align 8
.text:000000000000B198
.text:000000000000B198 loc_B198:                               ; CODE XREF: rpl_nanosleep+3F↑j
.text:000000000000B198                                         ; rpl_nanosleep+58↑j
.text:000000000000B198                 mov     rsi, rbp        ; remaining
.text:000000000000B19B                 mov     rdi, r12        ; requested_time
.text:000000000000B19E                 mov     [rsp+38h+var_38], rbx
.text:000000000000B1A2                 call    _nanosleep
.text:000000000000B1A7
.text:000000000000B1A7 loc_B1A7:                               ; CODE XREF: rpl_nanosleep+7B↑j
.text:000000000000B1A7                                         ; rpl_nanosleep+81↑j ...
.text:000000000000B1A7                 mov     rdx, [rsp+38h+var_20]
.text:000000000000B1AC                 xor     rdx, fs:28h
.text:000000000000B1B5                 jnz     short loc_B1D2
.text:000000000000B1B7                 add     rsp, 20h
.text:000000000000B1BB                 pop     rbx
.text:000000000000B1BC                 pop     rbp
.text:000000000000B1BD                 pop     r12
.text:000000000000B1BF                 retn
.text:000000000000B1C0 ; ---------------------------------------------------------------------------
.text:000000000000B1C0
.text:000000000000B1C0 loc_B1C0:                               ; CODE XREF: rpl_nanosleep+22↑j
.text:000000000000B1C0                 call    ___errno_location
.text:000000000000B1C5                 mov     dword ptr [rax], 16h
.text:000000000000B1CB                 mov     eax, 0FFFFFFFFh
.text:000000000000B1D0                 jmp     short loc_B1A7
.text:000000000000B1D2 ; ---------------------------------------------------------------------------
.text:000000000000B1D2
.text:000000000000B1D2 loc_B1D2:                               ; CODE XREF: rpl_nanosleep+A5↑j
.text:000000000000B1D2                 call    ___stack_chk_fail
.text:000000000000B1D2 ; } // starts at B110
.text:000000000000B1D2 rpl_nanosleep   endp
.text:000000000000B1D2
.text:000000000000B1D2 ; ---------------------------------------------------------------------------
.text:000000000000B1D7                 align 20h
.text:000000000000B1E0
.text:000000000000B1E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1E0
.text:000000000000B1E0
.text:000000000000B1E0 ; __int64 __fastcall c_strtod(char *nptr, char **endptr)
.text:000000000000B1E0                 public c_strtod
.text:000000000000B1E0 c_strtod        proc near               ; CODE XREF: cl_strtod+81↑p
.text:000000000000B1E0 ; __unwind {
.text:000000000000B1E0                 push    rbp
.text:000000000000B1E1                 push    rbx
.text:000000000000B1E2                 mov     rbp, rdi
.text:000000000000B1E5                 mov     rbx, rsi
.text:000000000000B1E8                 sub     rsp, 8
.text:000000000000B1EC                 mov     rax, cs:c_locale_cache
.text:000000000000B1F3                 test    rax, rax
.text:000000000000B1F6                 jz      short loc_B230
.text:000000000000B1F8
.text:000000000000B1F8 loc_B1F8:                               ; CODE XREF: c_strtod+6A↓j
.text:000000000000B1F8                 mov     rdx, cs:c_locale_cache ; loc
.text:000000000000B1FF                 test    rdx, rdx
.text:000000000000B202                 jz      short loc_B218
.text:000000000000B204                 add     rsp, 8
.text:000000000000B208                 mov     rsi, rbx        ; endptr
.text:000000000000B20B                 mov     rdi, rbp        ; nptr
.text:000000000000B20E                 pop     rbx
.text:000000000000B20F                 pop     rbp
.text:000000000000B210                 jmp     _strtod_l
.text:000000000000B210 ; ---------------------------------------------------------------------------
.text:000000000000B215                 align 8
.text:000000000000B218
.text:000000000000B218 loc_B218:                               ; CODE XREF: c_strtod+22↑j
.text:000000000000B218                 test    rbx, rbx
.text:000000000000B21B                 pxor    xmm0, xmm0
.text:000000000000B21F                 jz      short loc_B228
.text:000000000000B221                 pxor    xmm0, xmm0
.text:000000000000B225                 mov     [rbx], rbp
.text:000000000000B228
.text:000000000000B228 loc_B228:                               ; CODE XREF: c_strtod+3F↑j
.text:000000000000B228                 add     rsp, 8
.text:000000000000B22C                 pop     rbx
.text:000000000000B22D                 pop     rbp
.text:000000000000B22E                 retn
.text:000000000000B22E ; ---------------------------------------------------------------------------
.text:000000000000B22F                 align 10h
.text:000000000000B230
.text:000000000000B230 loc_B230:                               ; CODE XREF: c_strtod+16↑j
.text:000000000000B230                 lea     rsi, locale     ; "C"
.text:000000000000B237                 xor     edx, edx        ; base
.text:000000000000B239                 mov     edi, 1FBFh      ; category_mask
.text:000000000000B23E                 call    _newlocale
.text:000000000000B243                 mov     cs:c_locale_cache, rax
.text:000000000000B24A                 jmp     short loc_B1F8
.text:000000000000B24A ; } // starts at B1E0
.text:000000000000B24A c_strtod        endp
.text:000000000000B24A
.text:000000000000B24A ; ---------------------------------------------------------------------------
.text:000000000000B24C                 align 10h
.text:000000000000B250
.text:000000000000B250 ; =============== S U B R O U T I N E =======================================
.text:000000000000B250
.text:000000000000B250 ; Attributes: info_from_lumina
.text:000000000000B250
.text:000000000000B250 ; int __fastcall close_stream(FILE *stream)
.text:000000000000B250                 public close_stream
.text:000000000000B250 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000B250                                         ; close_stdout+33↑p
.text:000000000000B250 ; __unwind {
.text:000000000000B250                 push    r12
.text:000000000000B252                 push    rbp
.text:000000000000B253                 mov     rbp, rdi
.text:000000000000B256                 push    rbx
.text:000000000000B257                 call    ___fpending
.text:000000000000B25C                 mov     ebx, [rbp+0]
.text:000000000000B25F                 mov     rdi, rbp        ; stream
.text:000000000000B262                 mov     r12, rax
.text:000000000000B265                 call    rpl_fclose
.text:000000000000B26A                 and     ebx, 20h
.text:000000000000B26D                 test    ebx, ebx
.text:000000000000B26F                 jnz     short loc_B288
.text:000000000000B271                 test    eax, eax
.text:000000000000B273                 jz      short loc_B27F
.text:000000000000B275                 test    r12, r12
.text:000000000000B278                 mov     eax, 0FFFFFFFFh
.text:000000000000B27D                 jz      short loc_B2B8
.text:000000000000B27F
.text:000000000000B27F loc_B27F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000B27F                 pop     rbx
.text:000000000000B280                 pop     rbp
.text:000000000000B281                 pop     r12
.text:000000000000B283                 retn
.text:000000000000B283 ; ---------------------------------------------------------------------------
.text:000000000000B284                 align 8
.text:000000000000B288
.text:000000000000B288 loc_B288:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000B288                 test    eax, eax
.text:000000000000B28A                 jnz     short loc_B2A8
.text:000000000000B28C                 call    ___errno_location
.text:000000000000B291                 mov     dword ptr [rax], 0
.text:000000000000B297                 mov     eax, 0FFFFFFFFh
.text:000000000000B29C                 pop     rbx
.text:000000000000B29D                 pop     rbp
.text:000000000000B29E                 pop     r12
.text:000000000000B2A0                 retn
.text:000000000000B2A0 ; ---------------------------------------------------------------------------
.text:000000000000B2A1                 align 8
.text:000000000000B2A8
.text:000000000000B2A8 loc_B2A8:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000B2A8                 pop     rbx
.text:000000000000B2A9                 mov     eax, 0FFFFFFFFh
.text:000000000000B2AE                 pop     rbp
.text:000000000000B2AF                 pop     r12
.text:000000000000B2B1                 retn
.text:000000000000B2B1 ; ---------------------------------------------------------------------------
.text:000000000000B2B2                 align 8
.text:000000000000B2B8
.text:000000000000B2B8 loc_B2B8:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000B2B8                 call    ___errno_location
.text:000000000000B2BD                 cmp     dword ptr [rax], 9
.text:000000000000B2C0                 pop     rbx
.text:000000000000B2C1                 pop     rbp
.text:000000000000B2C2                 pop     r12
.text:000000000000B2C4                 setnz   al
.text:000000000000B2C7                 movzx   eax, al
.text:000000000000B2CA                 neg     eax
.text:000000000000B2CC                 retn
.text:000000000000B2CC ; } // starts at B250
.text:000000000000B2CC close_stream    endp
.text:000000000000B2CC
.text:000000000000B2CC ; ---------------------------------------------------------------------------
.text:000000000000B2CD                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2D0
.text:000000000000B2D0
.text:000000000000B2D0                 public dtotimespec
.text:000000000000B2D0 dtotimespec     proc near               ; CODE XREF: xnanosleep+19↑p
.text:000000000000B2D0 ; __unwind {
.text:000000000000B2D0                 ucomisd xmm0, cs:qword_D458
.text:000000000000B2D8                 jbe     loc_B370
.text:000000000000B2DE                 movsd   xmm1, cs:qword_D460
.text:000000000000B2E6                 ucomisd xmm1, xmm0
.text:000000000000B2EA                 jbe     short loc_B358
.text:000000000000B2EC                 cvttsd2si rsi, xmm0
.text:000000000000B2F1                 pxor    xmm1, xmm1
.text:000000000000B2F5                 xor     ecx, ecx
.text:000000000000B2F7                 cvtsi2sd xmm1, rsi
.text:000000000000B2FC                 subsd   xmm0, xmm1
.text:000000000000B300                 pxor    xmm1, xmm1
.text:000000000000B304                 mulsd   xmm0, cs:qword_D468
.text:000000000000B30C                 cvttsd2si rdx, xmm0
.text:000000000000B311                 cvtsi2sd xmm1, rdx
.text:000000000000B316                 ucomisd xmm0, xmm1
.text:000000000000B31A                 setnbe  cl
.text:000000000000B31D                 add     rcx, rdx
.text:000000000000B320                 mov     rdx, 112E0BE826D694B3h
.text:000000000000B32A                 mov     rax, rcx
.text:000000000000B32D                 imul    rdx
.text:000000000000B330                 mov     rax, rcx
.text:000000000000B333                 sar     rax, 3Fh
.text:000000000000B337                 sar     rdx, 1Ah
.text:000000000000B33B                 sub     rdx, rax
.text:000000000000B33E                 lea     rax, [rdx+rsi]
.text:000000000000B342                 imul    rdx, 3B9ACA00h
.text:000000000000B349                 sub     rcx, rdx
.text:000000000000B34C                 mov     rdx, rcx
.text:000000000000B34F                 js      short loc_B380
.text:000000000000B351                 rep retn
.text:000000000000B351 ; ---------------------------------------------------------------------------
.text:000000000000B353                 align 8
.text:000000000000B358
.text:000000000000B358 loc_B358:                               ; CODE XREF: dtotimespec+1A↑j
.text:000000000000B358                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000B362                 mov     edx, 3B9AC9FFh
.text:000000000000B367                 retn
.text:000000000000B367 ; ---------------------------------------------------------------------------
.text:000000000000B368                 align 10h
.text:000000000000B370
.text:000000000000B370 loc_B370:                               ; CODE XREF: dtotimespec+8↑j
.text:000000000000B370                 mov     rax, 8000000000000000h
.text:000000000000B37A                 xor     edx, edx
.text:000000000000B37C                 retn
.text:000000000000B37C ; ---------------------------------------------------------------------------
.text:000000000000B37D                 align 20h
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: dtotimespec+7F↑j
.text:000000000000B380                 sub     rax, 1
.text:000000000000B384                 add     rdx, 3B9ACA00h
.text:000000000000B38B                 retn
.text:000000000000B38B ; } // starts at B2D0
.text:000000000000B38B dtotimespec     endp
.text:000000000000B38B
.text:000000000000B38B ; ---------------------------------------------------------------------------
.text:000000000000B38C                 align 10h
.text:000000000000B390
.text:000000000000B390 ; =============== S U B R O U T I N E =======================================
.text:000000000000B390
.text:000000000000B390
.text:000000000000B390                 public hard_locale
.text:000000000000B390 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000B390 ; __unwind {
.text:000000000000B390                 sub     rsp, 8
.text:000000000000B394                 xor     esi, esi        ; locale
.text:000000000000B396                 call    _setlocale
.text:000000000000B39B                 mov     rdx, rax
.text:000000000000B39E                 mov     eax, 1
.text:000000000000B3A3                 test    rdx, rdx
.text:000000000000B3A6                 jz      short loc_B3C5
.text:000000000000B3A8                 lea     rdi, locale     ; "C"
.text:000000000000B3AF                 mov     ecx, 2
.text:000000000000B3B4                 mov     rsi, rdx
.text:000000000000B3B7                 repe cmpsb
.text:000000000000B3B9                 setnbe  cl
.text:000000000000B3BC                 sbb     cl, 0
.text:000000000000B3BF                 xor     eax, eax
.text:000000000000B3C1                 test    cl, cl
.text:000000000000B3C3                 jnz     short loc_B3D0
.text:000000000000B3C5
.text:000000000000B3C5 loc_B3C5:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000B3C5                 add     rsp, 8
.text:000000000000B3C9                 retn
.text:000000000000B3C9 ; ---------------------------------------------------------------------------
.text:000000000000B3CA                 align 10h
.text:000000000000B3D0
.text:000000000000B3D0 loc_B3D0:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000B3D0                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000B3D7                 mov     ecx, 6
.text:000000000000B3DC                 mov     rsi, rdx
.text:000000000000B3DF                 repe cmpsb
.text:000000000000B3E1                 setnbe  al
.text:000000000000B3E4                 sbb     al, 0
.text:000000000000B3E6                 test    al, al
.text:000000000000B3E8                 setnz   al
.text:000000000000B3EB                 add     rsp, 8
.text:000000000000B3EF                 retn
.text:000000000000B3EF ; } // starts at B390
.text:000000000000B3EF hard_locale     endp
.text:000000000000B3EF
.text:000000000000B3F0
.text:000000000000B3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3F0
.text:000000000000B3F0
.text:000000000000B3F0                 public locale_charset
.text:000000000000B3F0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000B3F0 ; __unwind {
.text:000000000000B3F0                 sub     rsp, 8
.text:000000000000B3F4                 mov     edi, 0Eh        ; item
.text:000000000000B3F9                 call    _nl_langinfo
.text:000000000000B3FE                 test    rax, rax
.text:000000000000B401                 jz      short loc_B420
.text:000000000000B403                 cmp     byte ptr [rax], 0
.text:000000000000B406                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000B40D                 cmovz   rax, rdx
.text:000000000000B411                 add     rsp, 8
.text:000000000000B415                 retn
.text:000000000000B415 ; ---------------------------------------------------------------------------
.text:000000000000B416                 align 20h
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000B420                 lea     rax, aAscii     ; "ASCII"
.text:000000000000B427                 add     rsp, 8
.text:000000000000B42B                 retn
.text:000000000000B42B ; } // starts at B3F0
.text:000000000000B42B locale_charset  endp
.text:000000000000B42B
.text:000000000000B42B ; ---------------------------------------------------------------------------
.text:000000000000B42C                 align 10h
.text:000000000000B430
.text:000000000000B430 ; =============== S U B R O U T I N E =======================================
.text:000000000000B430
.text:000000000000B430
.text:000000000000B430                 public dup_safer
.text:000000000000B430 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000B430 ; __unwind {
.text:000000000000B430                 mov     edx, 3
.text:000000000000B435                 xor     esi, esi
.text:000000000000B437                 xor     eax, eax
.text:000000000000B439                 jmp     rpl_fcntl
.text:000000000000B439 ; } // starts at B430
.text:000000000000B439 dup_safer       endp
.text:000000000000B439
.text:000000000000B439 ; ---------------------------------------------------------------------------
.text:000000000000B43E                 align 20h
.text:000000000000B440
.text:000000000000B440 ; =============== S U B R O U T I N E =======================================
.text:000000000000B440
.text:000000000000B440 ; Attributes: info_from_lumina
.text:000000000000B440
.text:000000000000B440 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000B440                 public rpl_fclose
.text:000000000000B440 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:000000000000B440 ; __unwind {
.text:000000000000B440                 push    r12
.text:000000000000B442                 push    rbp
.text:000000000000B443                 push    rbx
.text:000000000000B444                 mov     rbx, rdi
.text:000000000000B447                 call    _fileno
.text:000000000000B44C                 test    eax, eax
.text:000000000000B44E                 mov     rdi, rbx        ; fp
.text:000000000000B451                 js      short loc_B4A7
.text:000000000000B453                 call    ___freading
.text:000000000000B458                 test    eax, eax
.text:000000000000B45A                 jnz     short loc_B488
.text:000000000000B45C
.text:000000000000B45C loc_B45C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000B45C                 mov     rdi, rbx        ; stream
.text:000000000000B45F                 call    rpl_fflush
.text:000000000000B464                 test    eax, eax
.text:000000000000B466                 jz      short loc_B4A4
.text:000000000000B468                 call    ___errno_location
.text:000000000000B46D                 mov     r12d, [rax]
.text:000000000000B470                 mov     rdi, rbx        ; stream
.text:000000000000B473                 mov     rbp, rax
.text:000000000000B476                 call    _fclose
.text:000000000000B47B                 test    r12d, r12d
.text:000000000000B47E                 jnz     short loc_B4B0
.text:000000000000B480
.text:000000000000B480 loc_B480:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000B480                 pop     rbx
.text:000000000000B481                 pop     rbp
.text:000000000000B482                 pop     r12
.text:000000000000B484                 retn
.text:000000000000B484 ; ---------------------------------------------------------------------------
.text:000000000000B485                 align 8
.text:000000000000B488
.text:000000000000B488 loc_B488:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000B488                 mov     rdi, rbx        ; stream
.text:000000000000B48B                 call    _fileno
.text:000000000000B490                 xor     esi, esi        ; offset
.text:000000000000B492                 mov     edx, 1          ; whence
.text:000000000000B497                 mov     edi, eax        ; fd
.text:000000000000B499                 call    _lseek
.text:000000000000B49E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B4A2                 jnz     short loc_B45C
.text:000000000000B4A4
.text:000000000000B4A4 loc_B4A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000B4A4                 mov     rdi, rbx        ; stream
.text:000000000000B4A7
.text:000000000000B4A7 loc_B4A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000B4A7                 pop     rbx
.text:000000000000B4A8                 pop     rbp
.text:000000000000B4A9                 pop     r12
.text:000000000000B4AB                 jmp     _fclose
.text:000000000000B4B0 ; ---------------------------------------------------------------------------
.text:000000000000B4B0
.text:000000000000B4B0 loc_B4B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000B4B0                 mov     [rbp+0], r12d
.text:000000000000B4B4                 mov     eax, 0FFFFFFFFh
.text:000000000000B4B9                 jmp     short loc_B480
.text:000000000000B4B9 ; } // starts at B440
.text:000000000000B4B9 rpl_fclose      endp
.text:000000000000B4B9
.text:000000000000B4B9 ; ---------------------------------------------------------------------------
.text:000000000000B4BB                 align 20h
.text:000000000000B4C0
.text:000000000000B4C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B4C0
.text:000000000000B4C0 ; Attributes: info_from_lumina
.text:000000000000B4C0
.text:000000000000B4C0 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000B4C0                 public rpl_fflush
.text:000000000000B4C0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000B4C0 ; __unwind {
.text:000000000000B4C0                 test    rdi, rdi
.text:000000000000B4C3                 push    rbx
.text:000000000000B4C4                 mov     rbx, rdi
.text:000000000000B4C7                 jz      short loc_B4DA
.text:000000000000B4C9                 call    ___freading
.text:000000000000B4CE                 test    eax, eax
.text:000000000000B4D0                 jz      short loc_B4DA
.text:000000000000B4D2                 test    dword ptr [rbx], 100h
.text:000000000000B4D8                 jnz     short loc_B4E8
.text:000000000000B4DA
.text:000000000000B4DA loc_B4DA:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000B4DA                                         ; rpl_fflush+10↑j
.text:000000000000B4DA                 mov     rdi, rbx        ; stream
.text:000000000000B4DD                 pop     rbx
.text:000000000000B4DE                 jmp     _fflush
.text:000000000000B4DE ; ---------------------------------------------------------------------------
.text:000000000000B4E3                 align 8
.text:000000000000B4E8
.text:000000000000B4E8 loc_B4E8:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000B4E8                 mov     rdi, rbx
.text:000000000000B4EB                 mov     edx, 1
.text:000000000000B4F0                 xor     esi, esi
.text:000000000000B4F2                 call    rpl_fseeko
.text:000000000000B4F7                 mov     rdi, rbx        ; stream
.text:000000000000B4FA                 pop     rbx
.text:000000000000B4FB                 jmp     _fflush
.text:000000000000B4FB ; } // starts at B4C0
.text:000000000000B4FB rpl_fflush      endp
.text:000000000000B4FB
.text:000000000000B500
.text:000000000000B500 ; =============== S U B R O U T I N E =======================================
.text:000000000000B500
.text:000000000000B500 ; Attributes: info_from_lumina
.text:000000000000B500
.text:000000000000B500 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000B500                 public rpl_fseeko
.text:000000000000B500 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000B500 ; __unwind {
.text:000000000000B500                 mov     rax, [rdi+8]
.text:000000000000B504                 cmp     [rdi+10h], rax
.text:000000000000B508                 jz      short loc_B510
.text:000000000000B50A
.text:000000000000B50A loc_B50A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000B50A                                         ; rpl_fseeko+1F↓j
.text:000000000000B50A                 jmp     _fseeko
.text:000000000000B50A ; ---------------------------------------------------------------------------
.text:000000000000B50F                 align 10h
.text:000000000000B510
.text:000000000000B510 loc_B510:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000B510                 mov     rax, [rdi+20h]
.text:000000000000B514                 cmp     [rdi+28h], rax
.text:000000000000B518                 jnz     short loc_B50A
.text:000000000000B51A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000B51F                 jnz     short loc_B50A
.text:000000000000B521                 push    r12
.text:000000000000B523                 push    rbp
.text:000000000000B524                 mov     r12d, edx
.text:000000000000B527                 push    rbx
.text:000000000000B528                 mov     rbp, rsi
.text:000000000000B52B                 mov     rbx, rdi
.text:000000000000B52E                 call    _fileno
.text:000000000000B533                 mov     edx, r12d       ; whence
.text:000000000000B536                 mov     rsi, rbp        ; offset
.text:000000000000B539                 mov     edi, eax        ; fd
.text:000000000000B53B                 call    _lseek
.text:000000000000B540                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B544                 jz      short loc_B552
.text:000000000000B546                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000B549                 mov     [rbx+90h], rax
.text:000000000000B550                 xor     eax, eax
.text:000000000000B552
.text:000000000000B552 loc_B552:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000B552                 pop     rbx
.text:000000000000B553                 pop     rbp
.text:000000000000B554                 pop     r12
.text:000000000000B556                 retn
.text:000000000000B556 ; } // starts at B500
.text:000000000000B556 rpl_fseeko      endp
.text:000000000000B556
.text:000000000000B556 ; ---------------------------------------------------------------------------
.text:000000000000B557                 align 20h
.text:000000000000B560
.text:000000000000B560 ; =============== S U B R O U T I N E =======================================
.text:000000000000B560
.text:000000000000B560 ; Attributes: info_from_lumina
.text:000000000000B560
.text:000000000000B560 ; void _libc_csu_init(void)
.text:000000000000B560                 public __libc_csu_init
.text:000000000000B560 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000B560 ; __unwind {
.text:000000000000B560                 push    r15
.text:000000000000B562                 push    r14
.text:000000000000B564                 mov     r15, rdx
.text:000000000000B567                 push    r13
.text:000000000000B569                 push    r12
.text:000000000000B56B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000B572                 push    rbp
.text:000000000000B573                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000B57A                 push    rbx
.text:000000000000B57B                 mov     r13d, edi
.text:000000000000B57E                 mov     r14, rsi
.text:000000000000B581                 sub     rbp, r12
.text:000000000000B584                 sub     rsp, 8
.text:000000000000B588                 sar     rbp, 3
.text:000000000000B58C                 call    _init_proc
.text:000000000000B591                 test    rbp, rbp
.text:000000000000B594                 jz      short loc_B5B6
.text:000000000000B596                 xor     ebx, ebx
.text:000000000000B598                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B5A0
.text:000000000000B5A0 loc_B5A0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000B5A0                 mov     rdx, r15
.text:000000000000B5A3                 mov     rsi, r14
.text:000000000000B5A6                 mov     edi, r13d
.text:000000000000B5A9                 call    ds:(__frame_dummy_init_array_entry - 20F910h)[r12+rbx*8]
.text:000000000000B5AD                 add     rbx, 1
.text:000000000000B5B1                 cmp     rbp, rbx
.text:000000000000B5B4                 jnz     short loc_B5A0
.text:000000000000B5B6
.text:000000000000B5B6 loc_B5B6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000B5B6                 add     rsp, 8
.text:000000000000B5BA                 pop     rbx
.text:000000000000B5BB                 pop     rbp
.text:000000000000B5BC                 pop     r12
.text:000000000000B5BE                 pop     r13
.text:000000000000B5C0                 pop     r14
.text:000000000000B5C2                 pop     r15
.text:000000000000B5C4                 retn
.text:000000000000B5C4 ; } // starts at B560
.text:000000000000B5C4 __libc_csu_init endp
.text:000000000000B5C4
.text:000000000000B5C4 ; ---------------------------------------------------------------------------
.text:000000000000B5C5                 align 10h
.text:000000000000B5D0
.text:000000000000B5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5D0
.text:000000000000B5D0
.text:000000000000B5D0 ; void _libc_csu_fini(void)
.text:000000000000B5D0                 public __libc_csu_fini
.text:000000000000B5D0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000B5D0 ; __unwind {
.text:000000000000B5D0                 rep retn
.text:000000000000B5D0 ; } // starts at B5D0
.text:000000000000B5D0 __libc_csu_fini endp
.text:000000000000B5D0
.text:000000000000B5D0 ; ---------------------------------------------------------------------------
.text:000000000000B5D2                 align 20h
.text:000000000000B5E0
.text:000000000000B5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5E0
.text:000000000000B5E0
.text:000000000000B5E0 atexit          proc near               ; CODE XREF: main+74↑p
.text:000000000000B5E0 ; __unwind {
.text:000000000000B5E0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000B5E7                 xor     esi, esi        ; obj
.text:000000000000B5E9                 jmp     ___cxa_atexit
.text:000000000000B5E9 ; } // starts at B5E0
.text:000000000000B5E9 atexit          endp
.text:000000000000B5E9
.text:000000000000B5E9 _text           ends
.text:000000000000B5E9
LOAD:000000000000B5EE ; ===========================================================================
LOAD:000000000000B5EE
LOAD:000000000000B5EE ; Segment type: Pure code
LOAD:000000000000B5EE ; Segment permissions: Read/Execute
LOAD:000000000000B5EE LOAD            segment byte public 'CODE' use64
LOAD:000000000000B5EE                 assume cs:LOAD
LOAD:000000000000B5EE                 ;org 0B5EEh
LOAD:000000000000B5EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B5EE                 align 10h
LOAD:000000000000B5EE LOAD            ends
LOAD:000000000000B5EE
.fini:000000000000B5F0 ; ===========================================================================
.fini:000000000000B5F0
.fini:000000000000B5F0 ; Segment type: Pure code
.fini:000000000000B5F0 ; Segment permissions: Read/Execute
.fini:000000000000B5F0 _fini           segment dword public 'CODE' use64
.fini:000000000000B5F0                 assume cs:_fini
.fini:000000000000B5F0                 ;org 0B5F0h
.fini:000000000000B5F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000B5F0
.fini:000000000000B5F0 ; =============== S U B R O U T I N E =======================================
.fini:000000000000B5F0
.fini:000000000000B5F0
.fini:000000000000B5F0                 public _term_proc
.fini:000000000000B5F0 _term_proc      proc near
.fini:000000000000B5F0                 sub     rsp, 8          ; _fini
.fini:000000000000B5F4                 add     rsp, 8
.fini:000000000000B5F8                 retn
.fini:000000000000B5F8 _term_proc      endp
.fini:000000000000B5F8
.fini:000000000000B5F8 _fini           ends
.fini:000000000000B5F8
LOAD:000000000000B5F9 ; ===========================================================================
LOAD:000000000000B5F9
LOAD:000000000000B5F9 ; Segment type: Pure code
LOAD:000000000000B5F9 ; Segment permissions: Read/Execute
LOAD:000000000000B5F9 LOAD            segment byte public 'CODE' use64
LOAD:000000000000B5F9                 assume cs:LOAD
LOAD:000000000000B5F9                 ;org 0B5F9h
LOAD:000000000000B5F9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B5F9                 align 20h
LOAD:000000000000B5F9 LOAD            ends
LOAD:000000000000B5F9
.rodata:000000000000B600 ; ===========================================================================
.rodata:000000000000B600
.rodata:000000000000B600 ; Segment type: Pure data
.rodata:000000000000B600 ; Segment permissions: Read
.rodata:000000000000B600 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000B600                 assume cs:_rodata
.rodata:000000000000B600                 ;org 0B600h
.rodata:000000000000B600                 public _IO_stdin_used
.rodata:000000000000B600 _IO_stdin_used  db    1
.rodata:000000000000B601                 db    0
.rodata:000000000000B602                 db    2
.rodata:000000000000B603                 db    0
.rodata:000000000000B604 ; const char aStandardInput[]
.rodata:000000000000B604 aStandardInput  db 'standard input',0   ; DATA XREF: pretty_name_isra_7:loc_4A00↑o
.rodata:000000000000B613 ; const char aClosingSFdD[]
.rodata:000000000000B613 aClosingSFdD    db 'closing %s (fd=%d)',0
.rodata:000000000000B613                                         ; DATA XREF: close_fd+35↑o
.rodata:000000000000B626 ; const char aStandardOutput[]
.rodata:000000000000B626 aStandardOutput db 'standard output',0  ; DATA XREF: main:loc_4881↑o
.rodata:000000000000B626                                         ; xwrite_stdout_part_10+35↑o
.rodata:000000000000B636 ; const char aErrorWritingS[]
.rodata:000000000000B636 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: xwrite_stdout_part_10+46↑o
.rodata:000000000000B647 ; const char aErrorReadingS[]
.rodata:000000000000B647 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: main+D9A↑o
.rodata:000000000000B647                                         ; main+1390↑o ...
.rodata:000000000000B658 aSS             db '%s==> %s <==',0Ah,0 ; DATA XREF: main+CC5↑o
.rodata:000000000000B658                                         ; main+16AB↑o ...
.rodata:000000000000B666 ; const char aSCannotSeekToO[]
.rodata:000000000000B666 aSCannotSeekToO db '%s: cannot seek to offset %s',0
.rodata:000000000000B666                                         ; DATA XREF: xlseek+7A↑o
.rodata:000000000000B683 ; const char aSFileTruncated[]
.rodata:000000000000B683 aSFileTruncated db '%s: file truncated',0
.rodata:000000000000B683                                         ; DATA XREF: main+1951↑o
.rodata:000000000000B683                                         ; check_fspec+17F↑o
.rodata:000000000000B696 ; const char aWriteError[]
.rodata:000000000000B696 aWriteError     db 'write error',0      ; DATA XREF: main:loc_4756↑o
.rodata:000000000000B696                                         ; main:loc_4855↑o ...
.rodata:000000000000B6A2 ; const char file[]
.rodata:000000000000B6A2 file            db '../coreutils-8.31/src/tail.c',0
.rodata:000000000000B6A2                                         ; DATA XREF: main+28CA↑o
.rodata:000000000000B6A2                                         ; recheck+632↑o ...
.rodata:000000000000B6BF ; const char aValidFileSpecF[]
.rodata:000000000000B6BF aValidFileSpecF db 'valid_file_spec (f)',0
.rodata:000000000000B6BF                                         ; DATA XREF: recheck+639↑o
.rodata:000000000000B6D3 ; const char aSHasBecomeInac[]
.rodata:000000000000B6D3 aSHasBecomeInac db '%s has become inaccessible',0
.rodata:000000000000B6D3                                         ; DATA XREF: recheck+349↑o
.rodata:000000000000B6EE ; const char aGivingUpOnThis[]
.rodata:000000000000B6EE aGivingUpOnThis db '; giving up on this name',0
.rodata:000000000000B6EE                                         ; DATA XREF: main+EDA↑o
.rodata:000000000000B6EE                                         ; recheck:loc_5E81↑o
.rodata:000000000000B707 ; const char aFFd1[]
.rodata:000000000000B707 aFFd1           db 'f->fd == -1',0      ; DATA XREF: recheck+66E↑o
.rodata:000000000000B713 ; const char aSHasBecomeAcce[]
.rodata:000000000000B713 aSHasBecomeAcce db '%s has become accessible',0
.rodata:000000000000B713                                         ; DATA XREF: recheck+270↑o
.rodata:000000000000B72C aTail           db 'tail',0             ; DATA XREF: main+227↑o
.rodata:000000000000B72C                                         ; usage+262↑o ...
.rodata:000000000000B731 asc_B731        db '[',0                ; DATA XREF: usage+26E↑o
.rodata:000000000000B733 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+295↑o
.rodata:000000000000B743 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000B743                                         ; DATA XREF: usage+2C5↑o
.rodata:000000000000B743                                         ; usage+3BC↑o ...
.rodata:000000000000B759 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2D6↑o
.rodata:000000000000B763 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2E2↑o
.rodata:000000000000B772 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+275↑o
.rodata:000000000000B77C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+2A1↑o
.rodata:000000000000B786 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+2B9↑o
.rodata:000000000000B790 ; const char aSOnlineHelpS[]
.rodata:000000000000B790 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+32A↑o
.rodata:000000000000B790                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000B7A7 unk_B7A7        db  47h ; G             ; DATA XREF: main+220↑o
.rodata:000000000000B7A7                                         ; usage+346↑o ...
.rodata:000000000000B7A8                 db  4Eh ; N
.rodata:000000000000B7A9                 db  55h ; U
.rodata:000000000000B7AA                 db  20h
.rodata:000000000000B7AB ; const char domainname[]
.rodata:000000000000B7AB domainname      db 'coreutils',0        ; DATA XREF: main+55↑o
.rodata:000000000000B7AB                                         ; main+61↑o ...
.rodata:000000000000B7B5 ; const char aEn[]
.rodata:000000000000B7B5 aEn             db 'en_',0              ; DATA XREF: usage+36D↑o
.rodata:000000000000B7B5                                         ; usage+42E↑o
.rodata:000000000000B7B9 ; const char aFullDocumentat[]
.rodata:000000000000B7B9 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000B7B9                                         ; DATA XREF: usage:loc_6499↑o
.rodata:000000000000B7B9                                         ; usage:loc_6556↑o
.rodata:000000000000B7D4 asc_B7D4        db '.',0                ; DATA XREF: main+1EF8↑o
.rodata:000000000000B7D6 ; const char dirname[]
.rodata:000000000000B7D6 dirname         db '/usr/local/share/locale',0
.rodata:000000000000B7D6                                         ; DATA XREF: main+4E↑o
.rodata:000000000000B7EE ; const char s2[]
.rodata:000000000000B7EE s2              db '--',0               ; DATA XREF: main:loc_2858↑o
.rodata:000000000000B7EE                                         ; main+66C↑o ...
.rodata:000000000000B7F1 aB              db 'b',0                ; DATA XREF: main+536↑o
.rodata:000000000000B7F3 ; const char aInvalidNumber[]
.rodata:000000000000B7F3 aInvalidNumber  db 'invalid number',0   ; DATA XREF: main+27CD↑o
.rodata:000000000000B802 ; const char format[]
.rodata:000000000000B802 format          db '%s: %s',0           ; DATA XREF: main+27ED↑o
.rodata:000000000000B802                                         ; close_stdout+6C↑o ...
.rodata:000000000000B809 ; const char aInvalidNumberO_1[]
.rodata:000000000000B809 aInvalidNumberO_1 db 'invalid number of lines',0
.rodata:000000000000B809                                         ; DATA XREF: main:loc_24C1↑o
.rodata:000000000000B821 ; const char aInvalidNumberO_0[]
.rodata:000000000000B821 aInvalidNumberO_0 db 'invalid number of bytes',0
.rodata:000000000000B821                                         ; DATA XREF: main+382↑o
.rodata:000000000000B839 aBkkmmgtpezy0   db 'bkKmMGTPEZY0',0     ; DATA XREF: main+39A↑o
.rodata:000000000000B846 aFollow         db '--follow',0         ; DATA XREF: main+3EC↑o
.rodata:000000000000B846                                         ; .data.rel.ro:000000000020F940↓o
.rodata:000000000000B84F ; const char aInvalidPid[]
.rodata:000000000000B84F aInvalidPid     db 'invalid PID',0      ; DATA XREF: main:loc_2368↑o
.rodata:000000000000B85B ; const char aInvalidNumberO[]
.rodata:000000000000B85B aInvalidNumberO db 'invalid number of seconds: %s',0
.rodata:000000000000B85B                                         ; DATA XREF: main+2FE↑o
.rodata:000000000000B879 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+20A↑o
.rodata:000000000000B889 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: main+219↑o
.rodata:000000000000B894 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+1EF↑o
.rodata:000000000000B8A1 aIanLanceTaylor db 'Ian Lance Taylor',0 ; DATA XREF: main+212↑o
.rodata:000000000000B8B2 ; const char shortopts[]
.rodata:000000000000B8B2 shortopts       db 'c:n:fFqs:vz0123456789',0
.rodata:000000000000B8B2                                         ; DATA XREF: main+F7↑o
.rodata:000000000000B8C8 ; const char aCannotFollowSB[]
.rodata:000000000000B8C8 aCannotFollowSB db 'cannot follow %s by name',0
.rodata:000000000000B8C8                                         ; DATA XREF: main+2899↑o
.rodata:000000000000B8E1 ; const char aCannotOpenSFor[]
.rodata:000000000000B8E1 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:000000000000B8E1                                         ; DATA XREF: main+A58↑o
.rodata:000000000000B8FC ; const char aCannotFstatS[]
.rodata:000000000000B8FC aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: main+105D↑o
.rodata:000000000000B8FC                                         ; main+10A0↑o
.rodata:000000000000B90C ; const char assertion[]
.rodata:000000000000B90C assertion       db 'beg',0              ; DATA XREF: main+28D1↑o
.rodata:000000000000B910 ; const char aInotifyResourc[]
.rodata:000000000000B910 aInotifyResourc db 'inotify resources exhausted',0
.rodata:000000000000B910                                         ; DATA XREF: main:loc_3EC9↑o
.rodata:000000000000B910                                         ; main:loc_4641↑o
.rodata:000000000000B92C ; const char aCannotWatchS[]
.rodata:000000000000B92C aCannotWatchS   db 'cannot watch %s',0  ; DATA XREF: main+2059↑o
.rodata:000000000000B92C                                         ; main+24ED↑o
.rodata:000000000000B93C ; const char aSWasReplaced[]
.rodata:000000000000B93C aSWasReplaced   db '%s was replaced',0  ; DATA XREF: main+26AC↑o
.rodata:000000000000B94C ; const char aNoFilesRemaini[]
.rodata:000000000000B94C aNoFilesRemaini db 'no files remaining',0
.rodata:000000000000B94C                                         ; DATA XREF: main:loc_398B↑o
.rodata:000000000000B94C                                         ; main+2349↑o
.rodata:000000000000B95F ; const char aErrorReadingIn[]
.rodata:000000000000B95F aErrorReadingIn db 'error reading inotify event',0
.rodata:000000000000B95F                                         ; DATA XREF: main:loc_456C↑o
.rodata:000000000000B97B ; const char aCannotReadReal[]
.rodata:000000000000B97B aCannotReadReal db 'cannot read realtime clock',0
.rodata:000000000000B97B                                         ; DATA XREF: main+1847↑o
.rodata:000000000000B996 aMaxUnchangedSt db 'max-unchanged-stats',0
.rodata:000000000000B996                                         ; DATA XREF: .data.rel.ro:000000000020F980↓o
.rodata:000000000000B9AA aDisableInotify db '-disable-inotify',0 ; DATA XREF: .data.rel.ro:000000000020F9A0↓o
.rodata:000000000000B9BB aPid            db 'pid',0              ; DATA XREF: .data.rel.ro:000000000020F9C0↓o
.rodata:000000000000B9BF aPresumeInputPi db '-presume-input-pipe',0
.rodata:000000000000B9BF                                         ; DATA XREF: .data.rel.ro:000000000020F9E0↓o
.rodata:000000000000B9D3 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000020FA00↓o
.rodata:000000000000B9D9 aRetry          db 'retry',0            ; DATA XREF: .data.rel.ro:000000000020FA20↓o
.rodata:000000000000B9DF aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:000000000020FA40↓o
.rodata:000000000000B9E6 aSleepInterval  db 'sleep-interval',0   ; DATA XREF: .data.rel.ro:000000000020FA60↓o
.rodata:000000000000B9F5 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020FA80↓o
.rodata:000000000000B9FD aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:000000000020FAA0↓o
.rodata:000000000000BA0D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020FAC0↓o
.rodata:000000000000BA12 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020FAE0↓o
.rodata:000000000000BA1A aDescriptor     db 'descriptor',0       ; DATA XREF: .data.rel.ro:follow_mode_string↓o
.rodata:000000000000BA25                 align 8
.rodata:000000000000BA28 aSCannotSeekToR db '%s: cannot seek to relative offset %s',0
.rodata:000000000000BA28                                         ; DATA XREF: xlseek+BD↑o
.rodata:000000000000BA4E                 align 10h
.rodata:000000000000BA50 ; const char aCannotDetermin[]
.rodata:000000000000BA50 aCannotDetermin db 'cannot determine location of %s. reverting to polling',0
.rodata:000000000000BA50                                         ; DATA XREF: fremote+DD↑o
.rodata:000000000000BA86                 align 8
.rodata:000000000000BA88 ; const char aSHasBeenReplac_1[]
.rodata:000000000000BA88 aSHasBeenReplac_1 db '%s has been replaced with an untailable symbolic link',0
.rodata:000000000000BA88                                         ; DATA XREF: recheck+4A9↑o
.rodata:000000000000BABE                 align 20h
.rodata:000000000000BAC0 ; const char aSHasBeenReplac_0[]
.rodata:000000000000BAC0 aSHasBeenReplac_0 db '%s has been replaced with an untailable file%s',0
.rodata:000000000000BAC0                                         ; DATA XREF: recheck+41F↑o
.rodata:000000000000BAEF                 align 10h
.rodata:000000000000BAF0 ; const char aSHasBeenReplac[]
.rodata:000000000000BAF0 aSHasBeenReplac db '%s has been replaced with an untailable remote file',0
.rodata:000000000000BAF0                                         ; DATA XREF: recheck+3A9↑o
.rodata:000000000000BB24                 align 8
.rodata:000000000000BB28 aSHasAppearedFo db '%s has appeared;  following new file',0
.rodata:000000000000BB28                                         ; DATA XREF: recheck+61A↑o
.rodata:000000000000BB4D                 align 10h
.rodata:000000000000BB50 ; const char aSHasBeenReplac_2[]
.rodata:000000000000BB50 aSHasBeenReplac_2 db '%s has been replaced;  following new file',0
.rodata:000000000000BB50                                         ; DATA XREF: recheck+582↑o
.rodata:000000000000BB7A                 align 20h
.rodata:000000000000BB80 ; const char aTrySHelpForMor[]
.rodata:000000000000BB80 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000BB80                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000BBA7                 align 8
.rodata:000000000000BBA8 ; const char aUsageSOptionFi[]
.rodata:000000000000BBA8 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:000000000000BBA8                                         ; DATA XREF: usage:loc_616D↑o
.rodata:000000000000BBC9                 align 10h
.rodata:000000000000BBD0 ; const char aPrintTheLastDL[]
.rodata:000000000000BBD0 aPrintTheLastDL db 'Print the last %d lines of each FILE to standard output.',0Ah
.rodata:000000000000BBD0                                         ; DATA XREF: usage+7D↑o
.rodata:000000000000BBD0                 db 'With more than one FILE, precede each with a header giving the fi'
.rodata:000000000000BBD0                 db 'le name.',0Ah,0
.rodata:000000000000BC54                 align 8
.rodata:000000000000BC58 ; const char aWithNoFileOrWh[]
.rodata:000000000000BC58 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AB↑o
.rodata:000000000000BC58                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:000000000000BC90 ; const char aMandatoryArgum[]
.rodata:000000000000BC90 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D0↑o
.rodata:000000000000BC90                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000BC90                 db 'ns too.',0Ah,0
.rodata:000000000000BCDB                 align 20h
.rodata:000000000000BCE0 ; const char aCBytesNumOutpu[]
.rodata:000000000000BCE0 aCBytesNumOutpu db '  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +'
.rodata:000000000000BCE0                                         ; DATA XREF: usage+F5↑o
.rodata:000000000000BCE0                 db 'NUM to',0Ah
.rodata:000000000000BCE0                 db '                             output starting with byte NUM of eac'
.rodata:000000000000BCE0                 db 'h file',0Ah,0
.rodata:000000000000BD71                 align 8
.rodata:000000000000BD78 ; const char aFFollowNameDes[]
.rodata:000000000000BD78 aFFollowNameDes db '  -f, --follow[={name|descriptor}]',0Ah
.rodata:000000000000BD78                                         ; DATA XREF: usage+11A↑o
.rodata:000000000000BD78                 db '                           output appended data as the file grows'
.rodata:000000000000BD78                 db ';',0Ah
.rodata:000000000000BD78                 db '                             an absent option argument means ',27h
.rodata:000000000000BD78                 db 'descriptor',27h,0Ah
.rodata:000000000000BD78                 db '  -F                       same as --follow=name --retry',0Ah,0
.rodata:000000000000BE62                 align 8
.rodata:000000000000BE68 ; const char aNLinesNumOutpu[]
.rodata:000000000000BE68 aNLinesNumOutpu db '  -n, --lines=[+]NUM       output the last NUM lines, instead of '
.rodata:000000000000BE68                                         ; DATA XREF: usage+138↑o
.rodata:000000000000BE68                 db 'the last %d;',0Ah
.rodata:000000000000BE68                 db '                             or use -n +NUM to output starting wi'
.rodata:000000000000BE68                 db 'th line NUM',0Ah
.rodata:000000000000BE68                 db '      --max-unchanged-stats=N',0Ah
.rodata:000000000000BE68                 db '                           with --follow=name, reopen a FILE whic'
.rodata:000000000000BE68                 db 'h has not',0Ah
.rodata:000000000000BE68                 db '                             changed size after N (default %d) it'
.rodata:000000000000BE68                 db 'erations',0Ah
.rodata:000000000000BE68                 db '                             to see if it has been unlinked or re'
.rodata:000000000000BE68                 db 'named',0Ah
.rodata:000000000000BE68                 db '                             (this is the usual case of rotated l'
.rodata:000000000000BE68                 db 'og files);',0Ah
.rodata:000000000000BE68                 db '                             with inotify, this option is rarely '
.rodata:000000000000BE68                 db 'useful',0Ah,0
.rodata:000000000000C092                 align 8
.rodata:000000000000C098 ; const char aPidPidWithFTer[]
.rodata:000000000000C098 aPidPidWithFTer db '      --pid=PID            with -f, terminate after process ID, P'
.rodata:000000000000C098                                         ; DATA XREF: usage+16B↑o
.rodata:000000000000C098                 db 'ID dies',0Ah
.rodata:000000000000C098                 db '  -q, --quiet, --silent    never output headers giving file names'
.rodata:000000000000C098                 db 0Ah
.rodata:000000000000C098                 db '      --retry              keep trying to open a file if it is in'
.rodata:000000000000C098                 db 'accessible',0Ah,0
.rodata:000000000000C170 ; const char aSSleepInterval[]
.rodata:000000000000C170 aSSleepInterval db '  -s, --sleep-interval=N   with -f, sleep for approximately N sec'
.rodata:000000000000C170                                         ; DATA XREF: usage+190↑o
.rodata:000000000000C170                 db 'onds',0Ah
.rodata:000000000000C170                 db '                             (default 1.0) between iterations;',0Ah
.rodata:000000000000C170                 db '                             with inotify and --pid=P, check proc'
.rodata:000000000000C170                 db 'ess P at',0Ah
.rodata:000000000000C170                 db '                             least once every N seconds',0Ah
.rodata:000000000000C170                 db '  -v, --verbose            always output headers giving file name'
.rodata:000000000000C170                 db 's',0Ah,0
.rodata:000000000000C2BB                 align 20h
.rodata:000000000000C2C0 ; const char aZZeroTerminate[]
.rodata:000000000000C2C0 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:000000000000C2C0                                         ; DATA XREF: usage+1B5↑o
.rodata:000000000000C2C0                 db 0
.rodata:000000000000C2FF                 align 20h
.rodata:000000000000C300 ; const char aHelpDisplayThi[]
.rodata:000000000000C300 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000C300                                         ; DATA XREF: usage+1DA↑o
.rodata:000000000000C32D                 align 10h
.rodata:000000000000C330 ; const char aVersionOutputV[]
.rodata:000000000000C330 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000C330                                         ; DATA XREF: usage+1FF↑o
.rodata:000000000000C366                 align 8
.rodata:000000000000C368 ; const char aNumMayHaveAMul[]
.rodata:000000000000C368 aNumMayHaveAMul db 0Ah                  ; DATA XREF: usage+224↑o
.rodata:000000000000C368                 db 'NUM may have a multiplier suffix:',0Ah
.rodata:000000000000C368                 db 'b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,',0Ah
.rodata:000000000000C368                 db 'GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.'
.rodata:000000000000C368                 db 0Ah
.rodata:000000000000C368                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah
.rodata:000000000000C368                 db 0Ah,0
.rodata:000000000000C43D                 align 20h
.rodata:000000000000C440 ; const char aWithFollowFTai[]
.rodata:000000000000C440 aWithFollowFTai db 'With --follow (-f), tail defaults to following the file descripto'
.rodata:000000000000C440                                         ; DATA XREF: usage+249↑o
.rodata:000000000000C440                 db 'r, which',0Ah
.rodata:000000000000C440                 db 'means that even if a tail',27h,'ed file is renamed, tail will con'
.rodata:000000000000C440                 db 'tinue to track',0Ah
.rodata:000000000000C440                 db 'its end.  This default behavior is not desirable when you really '
.rodata:000000000000C440                 db 'want to',0Ah
.rodata:000000000000C440                 db 'track the actual name of the file, not the file descriptor (e.g.,'
.rodata:000000000000C440                 db ' log',0Ah
.rodata:000000000000C440                 db 'rotation).  Use --follow=name in that case.  That causes tail to '
.rodata:000000000000C440                 db 'track the',0Ah
.rodata:000000000000C440                 db 'named file in a way that accommodates renaming, removal and creat'
.rodata:000000000000C440                 db 'ion.',0Ah,0
.rodata:000000000000C5F5                 align 8
.rodata:000000000000C5F8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000C5F8                                         ; DATA XREF: usage+33F↑o
.rodata:000000000000C5F8                                         ; usage+3A3↑o ...
.rodata:000000000000C620 ; const char aReportAnyTrans[]
.rodata:000000000000C620 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000C620                                         ; DATA XREF: usage+497↑o
.rodata:000000000000C620                 db 'am/>',0Ah,0
.rodata:000000000000C667                 align 8
.rodata:000000000000C668 ; const char aOrAvailableLoc[]
.rodata:000000000000C668 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000C668                                         ; DATA XREF: usage:loc_64DE↑o
.rodata:000000000000C69B                 align 20h
.rodata:000000000000C6A0 ; const char msgid[]
.rodata:000000000000C6A0 msgid           db 'invalid maximum number of unchanged stats between opens',0
.rodata:000000000000C6A0                                         ; DATA XREF: main:loc_21A8↑o
.rodata:000000000000C6D8 ; const char aOptionUsedInIn[]
.rodata:000000000000C6D8 aOptionUsedInIn db 'option used in invalid context -- %c',0
.rodata:000000000000C6D8                                         ; DATA XREF: main:loc_3C4A↑o
.rodata:000000000000C6FD                 align 20h
.rodata:000000000000C700 ; const char aWarningRetryIg[]
.rodata:000000000000C700 aWarningRetryIg db 'warning: --retry ignored; --retry is useful only when following',0
.rodata:000000000000C700                                         ; DATA XREF: main:loc_2881↑o
.rodata:000000000000C740 aWarningRetryOn db 'warning: --retry only effective for the initial open',0
.rodata:000000000000C740                                         ; DATA XREF: main+1C25↑o
.rodata:000000000000C775                 align 8
.rodata:000000000000C778 ; const char aWarningPidIgno[]
.rodata:000000000000C778 aWarningPidIgno db 'warning: PID ignored; --pid=PID is useful only when following',0
.rodata:000000000000C778                                         ; DATA XREF: main+974↑o
.rodata:000000000000C7B6                 align 8
.rodata:000000000000C7B8 ; const char aWarningPidPidI[]
.rodata:000000000000C7B8 aWarningPidPidI db 'warning: --pid=PID is not supported on this system',0
.rodata:000000000000C7B8                                         ; DATA XREF: main+5EB↑o
.rodata:000000000000C7EB                 align 10h
.rodata:000000000000C7F0 ; const char aWarningFollowi[]
.rodata:000000000000C7F0 aWarningFollowi db 'warning: following standard input indefinitely is ineffective',0
.rodata:000000000000C7F0                                         ; DATA XREF: main+9B8↑o
.rodata:000000000000C82E                 align 10h
.rodata:000000000000C830 ; const char aSCannotFollowE[]
.rodata:000000000000C830 aSCannotFollowE db '%s: cannot follow end of this type of file%s',0
.rodata:000000000000C830                                         ; DATA XREF: main+F07↑o
.rodata:000000000000C85D                 align 20h
.rodata:000000000000C860 ; const char aCannotWatchPar[]
.rodata:000000000000C860 aCannotWatchPar db 'cannot watch parent directory of %s',0
.rodata:000000000000C860                                         ; DATA XREF: main+2798↑o
.rodata:000000000000C884                 align 8
.rodata:000000000000C888 ; const char aErrorWaitingFo[]
.rodata:000000000000C888 aErrorWaitingFo db 'error waiting for inotify and output events',0
.rodata:000000000000C888                                         ; DATA XREF: main:loc_4696↑o
.rodata:000000000000C8B4                 align 8
.rodata:000000000000C8B8 ; const char aDirectoryConta[]
.rodata:000000000000C8B8 aDirectoryConta db 'directory containing watched file was removed',0
.rodata:000000000000C8B8                                         ; DATA XREF: main+25DD↑o
.rodata:000000000000C8E6                 align 8
.rodata:000000000000C8E8 ; const char aInotifyCannotB[]
.rodata:000000000000C8E8 aInotifyCannotB db 'inotify cannot be used, reverting to polling',0
.rodata:000000000000C8E8                                         ; DATA XREF: main:loc_3EFD↑o
.rodata:000000000000C915                 align 8
.rodata:000000000000C918 ; const char aSCannotChangeN[]
.rodata:000000000000C918 aSCannotChangeN db '%s: cannot change nonblocking mode',0
.rodata:000000000000C918                                         ; DATA XREF: main+2851↑o
.rodata:000000000000C93B                 align 20h
.rodata:000000000000C940 ; const char _PRETTY_FUNCTION___7576[]
.rodata:000000000000C940 __PRETTY_FUNCTION___7576 db 'recheck',0 ; DATA XREF: recheck:loc_60BB↑o
.rodata:000000000000C940                                         ; recheck:loc_60F0↑o
.rodata:000000000000C948 ; const char _PRETTY_FUNCTION___7486[]
.rodata:000000000000C948 __PRETTY_FUNCTION___7486 db 'pipe_lines',0
.rodata:000000000000C948                                         ; DATA XREF: main:loc_4813↑o
.rodata:000000000000C953                 align 8
.rodata:000000000000C958 follow_mode_map db    2                 ; DATA XREF: main+3E5↑o
.rodata:000000000000C958                                         ; main+3FE↑o
.rodata:000000000000C959                 db    0
.rodata:000000000000C95A                 db    0
.rodata:000000000000C95B                 db    0
.rodata:000000000000C95C                 db    1
.rodata:000000000000C95D                 db    0
.rodata:000000000000C95E                 db    0
.rodata:000000000000C95F                 db    0
.rodata:000000000000C960 qword_C960      dq 3FF0000000000000h    ; DATA XREF: main:loc_2010↑r
.rodata:000000000000C968 qword_C968      dq 412E848000000000h    ; DATA XREF: main+230D↑r
.rodata:000000000000C970 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000C975 ; const char aInvalidArgumen[]
.rodata:000000000000C975 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000C975                                         ; DATA XREF: argmatch_invalid:loc_6760↑o
.rodata:000000000000C990 ; const char aAmbiguousArgum[]
.rodata:000000000000C990 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000C990                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000C9AD ; const char aValidArguments[]
.rodata:000000000000C9AD aValidArguments db 'Valid arguments are:',0
.rodata:000000000000C9AD                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000C9C2 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000C9C2                 db '  - %s',0
.rodata:000000000000C9CA aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000C9CA                                         ; main+19C0↑o ...
.rodata:000000000000C9CF aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000C9CF                                         ; DATA XREF: hash_print_statistics:loc_71E5↑o
.rodata:000000000000C9E7 aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000C9E7                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000C9FF aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000C9FF                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000CA17                 align 8
.rodata:000000000000CA18 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000CA18                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000CA39                 align 20h
.rodata:000000000000CA40 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000CA40                                         ; hash_initialize:loc_7650↑o
.rodata:000000000000CA41                 db    0
.rodata:000000000000CA42                 db    0
.rodata:000000000000CA43                 db    0
.rodata:000000000000CA44                 db    0
.rodata:000000000000CA45                 db    0
.rodata:000000000000CA46                 db  80h
.rodata:000000000000CA47                 db  3Fh ; ?
.rodata:000000000000CA48                 db 0CDh
.rodata:000000000000CA49                 db 0CCh
.rodata:000000000000CA4A                 db  4Ch ; L
.rodata:000000000000CA4B                 db  3Fh ; ?
.rodata:000000000000CA4C                 db 0F4h
.rodata:000000000000CA4D                 db 0FDh
.rodata:000000000000CA4E                 db 0B4h
.rodata:000000000000CA4F                 db  3Fh ; ?
.rodata:000000000000CA50                 db    0
.rodata:000000000000CA51                 db    0
.rodata:000000000000CA52                 db    0
.rodata:000000000000CA53                 db    0
.rodata:000000000000CA54 dword_CA54      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000CA54                                         ; check_tuning+4A↑r
.rodata:000000000000CA58 dword_CA58      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000CA5C dword_CA5C      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000CA60 dword_CA60      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000CA64 dword_CA64      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000CA68 dword_CA68      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000CA6C dword_CA6C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000CA6C                                         ; hash_rehash+40↑r ...
.rodata:000000000000CA70 dword_CA70      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000CA70                                         ; hash_initialize+150↑r ...
.rodata:000000000000CA74                 align 8
.rodata:000000000000CA78 qword_CA78      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000CA78                                         ; hash_print_statistics+11F↑r
.rodata:000000000000CA80 ; const char name[]
.rodata:000000000000CA80 name            db '_POSIX2_VERSION',0  ; DATA XREF: posix2_version+1↑o
.rodata:000000000000CA90 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000CA90                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000CAC8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000CAD0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000CAD4 unk_CAD4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000CAD5                 db  80h
.rodata:000000000000CAD6                 db  98h
.rodata:000000000000CAD7                 db    0
.rodata:000000000000CAD8 unk_CAD8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000CAD9                 db  80h
.rodata:000000000000CADA                 db  99h
.rodata:000000000000CADB                 db    0
.rodata:000000000000CADC unk_CADC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000CADD                 db    7
.rodata:000000000000CADE                 db  65h ; e
.rodata:000000000000CADF                 db    0
.rodata:000000000000CAE0 unk_CAE0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000CAE1                 db 0AFh
.rodata:000000000000CAE2                 db    0
.rodata:000000000000CAE3 unk_CAE3        db  22h ; "             ; DATA XREF: gettext_quote:loc_81A0↑o
.rodata:000000000000CAE3                                         ; quotearg_buffer_restyled:loc_8F5B↑o ...
.rodata:000000000000CAE4                 db    0
.rodata:000000000000CAE5 ; const char asc_CAE5[2]
.rodata:000000000000CAE5 asc_CAE5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000CAE5                                         ; quotearg_buffer_restyled:loc_8323↑o ...
.rodata:000000000000CAE7 ; const char asc_CAE7[2]
.rodata:000000000000CAE7 asc_CAE7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000CAE7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000CAE9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000CAF1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020FB48↓o
.rodata:000000000000CAF7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020FB50↓o
.rodata:000000000000CB04 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020FB58↓o
.rodata:000000000000CB04                                         ; .data.rel.ro:000000000020FB78↓o
.rodata:000000000000CB11 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000CB11                                         ; DATA XREF: .data.rel.ro:000000000020FB60↓o
.rodata:000000000000CB25 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020FB70↓o
.rodata:000000000000CB2D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020FB88↓o
.rodata:000000000000CB35                 align 20h
.rodata:000000000000CB40 jpt_8301        dd offset loc_90AA - 0CB40h
.rodata:000000000000CB40                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000CB40                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000CB40                 dd offset loc_8303 - 0CB40h ; jump table for switch statement
.rodata:000000000000CB40                 dd offset loc_92D8 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_90E4 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_8ED4 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_8F30 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_8F85 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_8FCA - 0CB40h
.rodata:000000000000CB40                 dd offset loc_9004 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_9004 - 0CB40h
.rodata:000000000000CB40                 dd offset loc_9004 - 0CB40h
.rodata:000000000000CB6C jpt_845E        dd offset loc_8680 - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000CB6C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch ; jump table for switch statement
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset loc_86C0 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_85C8 - 0CB6Ch, offset loc_8588 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8750 - 0CB6Ch, offset loc_8740 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8730 - 0CB6Ch, offset loc_8720 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset def_845E - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8710 - 0CB6Ch, offset loc_8700 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_86D0 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_8563 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_8700 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_8700 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_8700 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_8533 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset def_845E - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_8700 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_85D8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_86A8 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86A8 - 0CB6Ch, offset loc_8463 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_8700 - 0CB6Ch, offset loc_8463 - 0CB6Ch
.rodata:000000000000CB6C                 dd offset loc_86D0 - 0CB6Ch
.rodata:000000000000CD68 jpt_87EA        dd offset loc_8850 - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000CD68                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h ; jump table for switch statement
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset loc_8840 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8990 - 0CD68h, offset loc_8978 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8828 - 0CD68h, offset loc_8968 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8810 - 0CD68h, offset loc_8950 - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset def_87EA - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8938 - 0CD68h, offset loc_8920 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8908 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8560 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8920 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_8920 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8920 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8530 - 0CD68h
.rodata:000000000000CD68                 dd offset def_87EA - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_8920 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_87F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_88F0 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_88F0 - 0CD68h, offset loc_8460 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8920 - 0CD68h, offset loc_8460 - 0CD68h
.rodata:000000000000CD68                 dd offset loc_8908 - 0CD68h
.rodata:000000000000CF64                 align 20h
.rodata:000000000000CF80                 public quoting_style_vals
.rodata:000000000000CF80 quoting_style_vals db    0
.rodata:000000000000CF81                 db    0
.rodata:000000000000CF82                 db    0
.rodata:000000000000CF83                 db    0
.rodata:000000000000CF84                 db    1
.rodata:000000000000CF85                 db    0
.rodata:000000000000CF86                 db    0
.rodata:000000000000CF87                 db    0
.rodata:000000000000CF88                 db    2
.rodata:000000000000CF89                 db    0
.rodata:000000000000CF8A                 db    0
.rodata:000000000000CF8B                 db    0
.rodata:000000000000CF8C                 db    3
.rodata:000000000000CF8D                 db    0
.rodata:000000000000CF8E                 db    0
.rodata:000000000000CF8F                 db    0
.rodata:000000000000CF90                 db    4
.rodata:000000000000CF91                 db    0
.rodata:000000000000CF92                 db    0
.rodata:000000000000CF93                 db    0
.rodata:000000000000CF94                 db    5
.rodata:000000000000CF95                 db    0
.rodata:000000000000CF96                 db    0
.rodata:000000000000CF97                 db    0
.rodata:000000000000CF98                 db    6
.rodata:000000000000CF99                 db    0
.rodata:000000000000CF9A                 db    0
.rodata:000000000000CF9B                 db    0
.rodata:000000000000CF9C                 db    7
.rodata:000000000000CF9D                 db    0
.rodata:000000000000CF9E                 db    0
.rodata:000000000000CF9F                 db    0
.rodata:000000000000CFA0                 db    8
.rodata:000000000000CFA1                 db    0
.rodata:000000000000CFA2                 db    0
.rodata:000000000000CFA3                 db    0
.rodata:000000000000CFA4                 db    9
.rodata:000000000000CFA5                 db    0
.rodata:000000000000CFA6                 db    0
.rodata:000000000000CFA7                 db    0
.rodata:000000000000CFA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000CFB4 aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000CFBB ; const char aC_0[]
.rodata:000000000000CFBB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_9EEC↑o
.rodata:000000000000CFBF ; const char aWrittenByS[]
.rodata:000000000000CFBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000CFBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000CFCF ; const char aWrittenBySAndS[]
.rodata:000000000000CFCF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000CFCF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000CFE6 ; const char aWrittenBySSAnd[]
.rodata:000000000000CFE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000CFE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000D002 ; const char aReportBugsToS[]
.rodata:000000000000D002 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000D002                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000D017 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000D017                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000D02D ; const char aSHomePageS[]
.rodata:000000000000D02D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000D02D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000D041                 align 8
.rodata:000000000000D048 ; const char aLicenseGplv3Gn[]
.rodata:000000000000D048 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000D048                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000D048                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000D048                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000D048                 db '.',0Ah
.rodata:000000000000D048                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000D048                 db 0Ah,0
.rodata:000000000000D114                 align 8
.rodata:000000000000D118 ; const char aWrittenBySSSAn[]
.rodata:000000000000D118 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D118                                         ; DATA XREF: version_etc_arn:loc_A140↑o
.rodata:000000000000D118                 db 'and %s.',0Ah,0
.rodata:000000000000D138 ; const char aWrittenBySSSSA[]
.rodata:000000000000D138 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D138                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000D138                 db '%s, and %s.',0Ah,0
.rodata:000000000000D15C                 align 20h
.rodata:000000000000D160 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000D160 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D160                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000D160                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000D188 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000D188 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D188                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000D188                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000D1B4                 align 8
.rodata:000000000000D1B8 ; const char aWrittenBySSSSS[]
.rodata:000000000000D1B8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D1B8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000D1B8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000D1B8                 db 'and %s.',0Ah,0
.rodata:000000000000D1E8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000D1E8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D1E8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000D1E8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000D1E8                 db '%s, and %s.',0Ah,0
.rodata:000000000000D21C                 align 20h
.rodata:000000000000D220 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000D220                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000D220                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000D220                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000D25C                 align 20h
.rodata:000000000000D260 ; const char aGeneralHelpUsi[]
.rodata:000000000000D260 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000D260                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000D260                 db 0
.rodata:000000000000D2A1                 align 4
.rodata:000000000000D2A4 jpt_9F54        dd offset loc_9FD6 - 0D2A4h
.rodata:000000000000D2A4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000D2A4                                         ; version_etc_arn+9D↑r
.rodata:000000000000D2A4                 dd offset loc_A068 - 0D2A4h ; jump table for switch statement
.rodata:000000000000D2A4                 dd offset loc_A0A8 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A0F0 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A140 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A198 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A1C8 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A230 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_9F60 - 0D2A4h
.rodata:000000000000D2A4                 dd offset loc_A010 - 0D2A4h
.rodata:000000000000D2CC                 align 20h
.rodata:000000000000D2E0                 public version_etc_copyright
.rodata:000000000000D2E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000D2E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000D30F ; const char aMemoryExhauste[]
.rodata:000000000000D30F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000D320 qword_D320      dq 0                    ; DATA XREF: xstrtod+4D↑r
.rodata:000000000000D320                                         ; xstrtod+9F↑r
.rodata:000000000000D328 ; const char aCoreutils831Li[]
.rodata:000000000000D328 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000D328                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:000000000000D348 ; const char a0StrtolBaseStr[]
.rodata:000000000000D348 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000D348                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:000000000000D36E                 align 10h
.rodata:000000000000D370 jpt_ABB6        dd offset loc_AD06 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000D370                                         ; xstrtoumax+1CF↑r
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_ACE3 - 0D370h ; jump table for switch statement
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AD1C - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AC9F - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_ABB8 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset loc_ACC0 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset loc_AC7F - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AC5A - 0D370h
.rodata:000000000000D370                 dd offset loc_AC34 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset loc_AC1D - 0D370h, offset loc_ABE0 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AD1C - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AC9F - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_ABB8 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset loc_AC7F - 0D370h, offset def_ABB6 - 0D370h
.rodata:000000000000D370                 dd offset def_ABB6 - 0D370h, offset loc_AC07 - 0D370h
.rodata:000000000000D448 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000D448 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:000000000000D448                                         ; DATA XREF: xstrtoumax:loc_AD65↑o
.rodata:000000000000D453 ; const char locale[]
.rodata:000000000000D453 locale          db 'C',0                ; DATA XREF: c_strtod:loc_B230↑o
.rodata:000000000000D453                                         ; hard_locale+18↑o
.rodata:000000000000D455                 align 8
.rodata:000000000000D458 qword_D458      dq 0C3E0000000000000h   ; DATA XREF: dtotimespec↑r
.rodata:000000000000D460 qword_D460      dq 43E0000000000000h    ; DATA XREF: dtotimespec+E↑r
.rodata:000000000000D468 qword_D468      dq 41CDCD6500000000h    ; DATA XREF: dtotimespec+34↑r
.rodata:000000000000D470 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_B3D0↑o
.rodata:000000000000D476 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000D476                                         ; locale_charset:loc_B420↑o
.rodata:000000000000D476 _rodata         ends
.rodata:000000000000D476
.eh_frame_hdr:000000000000D47C ; ===========================================================================
.eh_frame_hdr:000000000000D47C
.eh_frame_hdr:000000000000D47C ; Segment type: Pure data
.eh_frame_hdr:000000000000D47C ; Segment permissions: Read
.eh_frame_hdr:000000000000D47C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000D47C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000D47C                 ;org 0D47Ch
.eh_frame_hdr:000000000000D47C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000D47D                 db  1Bh
.eh_frame_hdr:000000000000D47E                 db    3
.eh_frame_hdr:000000000000D47F                 db  3Bh ; ;
.eh_frame_hdr:000000000000D480                 db  48h ; H
.eh_frame_hdr:000000000000D481                 db    4
.eh_frame_hdr:000000000000D482                 db    0
.eh_frame_hdr:000000000000D483                 db    0
.eh_frame_hdr:000000000000D484                 db  88h
.eh_frame_hdr:000000000000D485                 db    0
.eh_frame_hdr:000000000000D486                 db    0
.eh_frame_hdr:000000000000D487                 db    0
.eh_frame_hdr:000000000000D488                 db  44h ; D
.eh_frame_hdr:000000000000D489                 db  46h ; F
.eh_frame_hdr:000000000000D48A                 db 0FFh
.eh_frame_hdr:000000000000D48B                 db 0FFh
.eh_frame_hdr:000000000000D48C                 db  94h
.eh_frame_hdr:000000000000D48D                 db    4
.eh_frame_hdr:000000000000D48E                 db    0
.eh_frame_hdr:000000000000D48F                 db    0
.eh_frame_hdr:000000000000D490                 db 0C4h
.eh_frame_hdr:000000000000D491                 db  4Ah ; J
.eh_frame_hdr:000000000000D492                 db 0FFh
.eh_frame_hdr:000000000000D493                 db 0FFh
.eh_frame_hdr:000000000000D494                 db 0BCh
.eh_frame_hdr:000000000000D495                 db    4
.eh_frame_hdr:000000000000D496                 db    0
.eh_frame_hdr:000000000000D497                 db    0
.eh_frame_hdr:000000000000D498                 db 0D4h
.eh_frame_hdr:000000000000D499                 db  4Ah ; J
.eh_frame_hdr:000000000000D49A                 db 0FFh
.eh_frame_hdr:000000000000D49B                 db 0FFh
.eh_frame_hdr:000000000000D49C                 db 0DCh
.eh_frame_hdr:000000000000D49D                 db    7
.eh_frame_hdr:000000000000D49E                 db    0
.eh_frame_hdr:000000000000D49F                 db    0
.eh_frame_hdr:000000000000D4A0                 db  34h ; 4
.eh_frame_hdr:000000000000D4A1                 db  74h ; t
.eh_frame_hdr:000000000000D4A2                 db 0FFh
.eh_frame_hdr:000000000000D4A3                 db 0FFh
.eh_frame_hdr:000000000000D4A4                 db  64h ; d
.eh_frame_hdr:000000000000D4A5                 db    4
.eh_frame_hdr:000000000000D4A6                 db    0
.eh_frame_hdr:000000000000D4A7                 db    0
.eh_frame_hdr:000000000000D4A8                 db  44h ; D
.eh_frame_hdr:000000000000D4A9                 db  75h ; u
.eh_frame_hdr:000000000000D4AA                 db 0FFh
.eh_frame_hdr:000000000000D4AB                 db 0FFh
.eh_frame_hdr:000000000000D4AC                 db 0D4h
.eh_frame_hdr:000000000000D4AD                 db    4
.eh_frame_hdr:000000000000D4AE                 db    0
.eh_frame_hdr:000000000000D4AF                 db    0
.eh_frame_hdr:000000000000D4B0                 db  54h ; T
.eh_frame_hdr:000000000000D4B1                 db  75h ; u
.eh_frame_hdr:000000000000D4B2                 db 0FFh
.eh_frame_hdr:000000000000D4B3                 db 0FFh
.eh_frame_hdr:000000000000D4B4                 db 0E8h
.eh_frame_hdr:000000000000D4B5                 db    4
.eh_frame_hdr:000000000000D4B6                 db    0
.eh_frame_hdr:000000000000D4B7                 db    0
.eh_frame_hdr:000000000000D4B8                 db  64h ; d
.eh_frame_hdr:000000000000D4B9                 db  75h ; u
.eh_frame_hdr:000000000000D4BA                 db 0FFh
.eh_frame_hdr:000000000000D4BB                 db 0FFh
.eh_frame_hdr:000000000000D4BC                 db 0FCh
.eh_frame_hdr:000000000000D4BD                 db    4
.eh_frame_hdr:000000000000D4BE                 db    0
.eh_frame_hdr:000000000000D4BF                 db    0
.eh_frame_hdr:000000000000D4C0                 db 0A4h
.eh_frame_hdr:000000000000D4C1                 db  75h ; u
.eh_frame_hdr:000000000000D4C2                 db 0FFh
.eh_frame_hdr:000000000000D4C3                 db 0FFh
.eh_frame_hdr:000000000000D4C4                 db  10h
.eh_frame_hdr:000000000000D4C5                 db    5
.eh_frame_hdr:000000000000D4C6                 db    0
.eh_frame_hdr:000000000000D4C7                 db    0
.eh_frame_hdr:000000000000D4C8                 db  14h
.eh_frame_hdr:000000000000D4C9                 db  76h ; v
.eh_frame_hdr:000000000000D4CA                 db 0FFh
.eh_frame_hdr:000000000000D4CB                 db 0FFh
.eh_frame_hdr:000000000000D4CC                 db  54h ; T
.eh_frame_hdr:000000000000D4CD                 db    5
.eh_frame_hdr:000000000000D4CE                 db    0
.eh_frame_hdr:000000000000D4CF                 db    0
.eh_frame_hdr:000000000000D4D0                 db  94h
.eh_frame_hdr:000000000000D4D1                 db  76h ; v
.eh_frame_hdr:000000000000D4D2                 db 0FFh
.eh_frame_hdr:000000000000D4D3                 db 0FFh
.eh_frame_hdr:000000000000D4D4                 db  80h
.eh_frame_hdr:000000000000D4D5                 db    5
.eh_frame_hdr:000000000000D4D6                 db    0
.eh_frame_hdr:000000000000D4D7                 db    0
.eh_frame_hdr:000000000000D4D8                 db 0D4h
.eh_frame_hdr:000000000000D4D9                 db  77h ; w
.eh_frame_hdr:000000000000D4DA                 db 0FFh
.eh_frame_hdr:000000000000D4DB                 db 0FFh
.eh_frame_hdr:000000000000D4DC                 db 0CCh
.eh_frame_hdr:000000000000D4DD                 db    5
.eh_frame_hdr:000000000000D4DE                 db    0
.eh_frame_hdr:000000000000D4DF                 db    0
.eh_frame_hdr:000000000000D4E0                 db  24h ; $
.eh_frame_hdr:000000000000D4E1                 db  79h ; y
.eh_frame_hdr:000000000000D4E2                 db 0FFh
.eh_frame_hdr:000000000000D4E3                 db 0FFh
.eh_frame_hdr:000000000000D4E4                 db  18h
.eh_frame_hdr:000000000000D4E5                 db    6
.eh_frame_hdr:000000000000D4E6                 db    0
.eh_frame_hdr:000000000000D4E7                 db    0
.eh_frame_hdr:000000000000D4E8                 db  24h ; $
.eh_frame_hdr:000000000000D4E9                 db  7Ah ; z
.eh_frame_hdr:000000000000D4EA                 db 0FFh
.eh_frame_hdr:000000000000D4EB                 db 0FFh
.eh_frame_hdr:000000000000D4EC                 db  5Ch ; \
.eh_frame_hdr:000000000000D4ED                 db    6
.eh_frame_hdr:000000000000D4EE                 db    0
.eh_frame_hdr:000000000000D4EF                 db    0
.eh_frame_hdr:000000000000D4F0                 db 0F4h
.eh_frame_hdr:000000000000D4F1                 db  7Ah ; z
.eh_frame_hdr:000000000000D4F2                 db 0FFh
.eh_frame_hdr:000000000000D4F3                 db 0FFh
.eh_frame_hdr:000000000000D4F4                 db  98h
.eh_frame_hdr:000000000000D4F5                 db    6
.eh_frame_hdr:000000000000D4F6                 db    0
.eh_frame_hdr:000000000000D4F7                 db    0
.eh_frame_hdr:000000000000D4F8                 db  54h ; T
.eh_frame_hdr:000000000000D4F9                 db  7Dh ; }
.eh_frame_hdr:000000000000D4FA                 db 0FFh
.eh_frame_hdr:000000000000D4FB                 db 0FFh
.eh_frame_hdr:000000000000D4FC                 db 0E8h
.eh_frame_hdr:000000000000D4FD                 db    6
.eh_frame_hdr:000000000000D4FE                 db    0
.eh_frame_hdr:000000000000D4FF                 db    0
.eh_frame_hdr:000000000000D500                 db  24h ; $
.eh_frame_hdr:000000000000D501                 db  7Fh ; 
.eh_frame_hdr:000000000000D502                 db 0FFh
.eh_frame_hdr:000000000000D503                 db 0FFh
.eh_frame_hdr:000000000000D504                 db  2Ch ; ,
.eh_frame_hdr:000000000000D505                 db    7
.eh_frame_hdr:000000000000D506                 db    0
.eh_frame_hdr:000000000000D507                 db    0
.eh_frame_hdr:000000000000D508                 db  14h
.eh_frame_hdr:000000000000D509                 db  86h
.eh_frame_hdr:000000000000D50A                 db 0FFh
.eh_frame_hdr:000000000000D50B                 db 0FFh
.eh_frame_hdr:000000000000D50C                 db  60h ; `
.eh_frame_hdr:000000000000D50D                 db    7
.eh_frame_hdr:000000000000D50E                 db    0
.eh_frame_hdr:000000000000D50F                 db    0
.eh_frame_hdr:000000000000D510                 db  94h
.eh_frame_hdr:000000000000D511                 db  8Ch
.eh_frame_hdr:000000000000D512                 db 0FFh
.eh_frame_hdr:000000000000D513                 db 0FFh
.eh_frame_hdr:000000000000D514                 db 0B0h
.eh_frame_hdr:000000000000D515                 db    7
.eh_frame_hdr:000000000000D516                 db    0
.eh_frame_hdr:000000000000D517                 db    0
.eh_frame_hdr:000000000000D518                 db  54h ; T
.eh_frame_hdr:000000000000D519                 db  91h
.eh_frame_hdr:000000000000D51A                 db 0FFh
.eh_frame_hdr:000000000000D51B                 db 0FFh
.eh_frame_hdr:000000000000D51C                 db  44h ; D
.eh_frame_hdr:000000000000D51D                 db    8
.eh_frame_hdr:000000000000D51E                 db    0
.eh_frame_hdr:000000000000D51F                 db    0
.eh_frame_hdr:000000000000D520                 db  64h ; d
.eh_frame_hdr:000000000000D521                 db  91h
.eh_frame_hdr:000000000000D522                 db 0FFh
.eh_frame_hdr:000000000000D523                 db 0FFh
.eh_frame_hdr:000000000000D524                 db  58h ; X
.eh_frame_hdr:000000000000D525                 db    8
.eh_frame_hdr:000000000000D526                 db    0
.eh_frame_hdr:000000000000D527                 db    0
.eh_frame_hdr:000000000000D528                 db  84h
.eh_frame_hdr:000000000000D529                 db  92h
.eh_frame_hdr:000000000000D52A                 db 0FFh
.eh_frame_hdr:000000000000D52B                 db 0FFh
.eh_frame_hdr:000000000000D52C                 db 0A4h
.eh_frame_hdr:000000000000D52D                 db    8
.eh_frame_hdr:000000000000D52E                 db    0
.eh_frame_hdr:000000000000D52F                 db    0
.eh_frame_hdr:000000000000D530                 db    4
.eh_frame_hdr:000000000000D531                 db  93h
.eh_frame_hdr:000000000000D532                 db 0FFh
.eh_frame_hdr:000000000000D533                 db 0FFh
.eh_frame_hdr:000000000000D534                 db 0D0h
.eh_frame_hdr:000000000000D535                 db    8
.eh_frame_hdr:000000000000D536                 db    0
.eh_frame_hdr:000000000000D537                 db    0
.eh_frame_hdr:000000000000D538                 db  24h ; $
.eh_frame_hdr:000000000000D539                 db  94h
.eh_frame_hdr:000000000000D53A                 db 0FFh
.eh_frame_hdr:000000000000D53B                 db 0FFh
.eh_frame_hdr:000000000000D53C                 db  30h ; 0
.eh_frame_hdr:000000000000D53D                 db    9
.eh_frame_hdr:000000000000D53E                 db    0
.eh_frame_hdr:000000000000D53F                 db    0
.eh_frame_hdr:000000000000D540                 db  94h
.eh_frame_hdr:000000000000D541                 db  94h
.eh_frame_hdr:000000000000D542                 db 0FFh
.eh_frame_hdr:000000000000D543                 db 0FFh
.eh_frame_hdr:000000000000D544                 db  7Ch ; |
.eh_frame_hdr:000000000000D545                 db    9
.eh_frame_hdr:000000000000D546                 db    0
.eh_frame_hdr:000000000000D547                 db    0
.eh_frame_hdr:000000000000D548                 db 0E4h
.eh_frame_hdr:000000000000D549                 db  94h
.eh_frame_hdr:000000000000D54A                 db 0FFh
.eh_frame_hdr:000000000000D54B                 db 0FFh
.eh_frame_hdr:000000000000D54C                 db 0BCh
.eh_frame_hdr:000000000000D54D                 db    9
.eh_frame_hdr:000000000000D54E                 db    0
.eh_frame_hdr:000000000000D54F                 db    0
.eh_frame_hdr:000000000000D550                 db 0A4h
.eh_frame_hdr:000000000000D551                 db  95h
.eh_frame_hdr:000000000000D552                 db 0FFh
.eh_frame_hdr:000000000000D553                 db 0FFh
.eh_frame_hdr:000000000000D554                 db 0FCh
.eh_frame_hdr:000000000000D555                 db    9
.eh_frame_hdr:000000000000D556                 db    0
.eh_frame_hdr:000000000000D557                 db    0
.eh_frame_hdr:000000000000D558                 db 0B4h
.eh_frame_hdr:000000000000D559                 db  95h
.eh_frame_hdr:000000000000D55A                 db 0FFh
.eh_frame_hdr:000000000000D55B                 db 0FFh
.eh_frame_hdr:000000000000D55C                 db  10h
.eh_frame_hdr:000000000000D55D                 db  0Ah
.eh_frame_hdr:000000000000D55E                 db    0
.eh_frame_hdr:000000000000D55F                 db    0
.eh_frame_hdr:000000000000D560                 db 0C4h
.eh_frame_hdr:000000000000D561                 db  95h
.eh_frame_hdr:000000000000D562                 db 0FFh
.eh_frame_hdr:000000000000D563                 db 0FFh
.eh_frame_hdr:000000000000D564                 db  24h ; $
.eh_frame_hdr:000000000000D565                 db  0Ah
.eh_frame_hdr:000000000000D566                 db    0
.eh_frame_hdr:000000000000D567                 db    0
.eh_frame_hdr:000000000000D568                 db  74h ; t
.eh_frame_hdr:000000000000D569                 db  96h
.eh_frame_hdr:000000000000D56A                 db 0FFh
.eh_frame_hdr:000000000000D56B                 db 0FFh
.eh_frame_hdr:000000000000D56C                 db  54h ; T
.eh_frame_hdr:000000000000D56D                 db  0Ah
.eh_frame_hdr:000000000000D56E                 db    0
.eh_frame_hdr:000000000000D56F                 db    0
.eh_frame_hdr:000000000000D570                 db 0D4h
.eh_frame_hdr:000000000000D571                 db  96h
.eh_frame_hdr:000000000000D572                 db 0FFh
.eh_frame_hdr:000000000000D573                 db 0FFh
.eh_frame_hdr:000000000000D574                 db  88h
.eh_frame_hdr:000000000000D575                 db  0Ah
.eh_frame_hdr:000000000000D576                 db    0
.eh_frame_hdr:000000000000D577                 db    0
.eh_frame_hdr:000000000000D578                 db  34h ; 4
.eh_frame_hdr:000000000000D579                 db  97h
.eh_frame_hdr:000000000000D57A                 db 0FFh
.eh_frame_hdr:000000000000D57B                 db 0FFh
.eh_frame_hdr:000000000000D57C                 db 0B4h
.eh_frame_hdr:000000000000D57D                 db  0Ah
.eh_frame_hdr:000000000000D57E                 db    0
.eh_frame_hdr:000000000000D57F                 db    0
.eh_frame_hdr:000000000000D580                 db  94h
.eh_frame_hdr:000000000000D581                 db  97h
.eh_frame_hdr:000000000000D582                 db 0FFh
.eh_frame_hdr:000000000000D583                 db 0FFh
.eh_frame_hdr:000000000000D584                 db 0C8h
.eh_frame_hdr:000000000000D585                 db  0Ah
.eh_frame_hdr:000000000000D586                 db    0
.eh_frame_hdr:000000000000D587                 db    0
.eh_frame_hdr:000000000000D588                 db 0E4h
.eh_frame_hdr:000000000000D589                 db  97h
.eh_frame_hdr:000000000000D58A                 db 0FFh
.eh_frame_hdr:000000000000D58B                 db 0FFh
.eh_frame_hdr:000000000000D58C                 db 0F4h
.eh_frame_hdr:000000000000D58D                 db  0Ah
.eh_frame_hdr:000000000000D58E                 db    0
.eh_frame_hdr:000000000000D58F                 db    0
.eh_frame_hdr:000000000000D590                 db  54h ; T
.eh_frame_hdr:000000000000D591                 db  98h
.eh_frame_hdr:000000000000D592                 db 0FFh
.eh_frame_hdr:000000000000D593                 db 0FFh
.eh_frame_hdr:000000000000D594                 db  14h
.eh_frame_hdr:000000000000D595                 db  0Bh
.eh_frame_hdr:000000000000D596                 db    0
.eh_frame_hdr:000000000000D597                 db    0
.eh_frame_hdr:000000000000D598                 db 0F4h
.eh_frame_hdr:000000000000D599                 db  98h
.eh_frame_hdr:000000000000D59A                 db 0FFh
.eh_frame_hdr:000000000000D59B                 db 0FFh
.eh_frame_hdr:000000000000D59C                 db  28h ; (
.eh_frame_hdr:000000000000D59D                 db  0Bh
.eh_frame_hdr:000000000000D59E                 db    0
.eh_frame_hdr:000000000000D59F                 db    0
.eh_frame_hdr:000000000000D5A0                 db    4
.eh_frame_hdr:000000000000D5A1                 db  99h
.eh_frame_hdr:000000000000D5A2                 db 0FFh
.eh_frame_hdr:000000000000D5A3                 db 0FFh
.eh_frame_hdr:000000000000D5A4                 db  3Ch ; <
.eh_frame_hdr:000000000000D5A5                 db  0Bh
.eh_frame_hdr:000000000000D5A6                 db    0
.eh_frame_hdr:000000000000D5A7                 db    0
.eh_frame_hdr:000000000000D5A8                 db  14h
.eh_frame_hdr:000000000000D5A9                 db  99h
.eh_frame_hdr:000000000000D5AA                 db 0FFh
.eh_frame_hdr:000000000000D5AB                 db 0FFh
.eh_frame_hdr:000000000000D5AC                 db  50h ; P
.eh_frame_hdr:000000000000D5AD                 db  0Bh
.eh_frame_hdr:000000000000D5AE                 db    0
.eh_frame_hdr:000000000000D5AF                 db    0
.eh_frame_hdr:000000000000D5B0                 db  44h ; D
.eh_frame_hdr:000000000000D5B1                 db  99h
.eh_frame_hdr:000000000000D5B2                 db 0FFh
.eh_frame_hdr:000000000000D5B3                 db 0FFh
.eh_frame_hdr:000000000000D5B4                 db  6Ch ; l
.eh_frame_hdr:000000000000D5B5                 db  0Bh
.eh_frame_hdr:000000000000D5B6                 db    0
.eh_frame_hdr:000000000000D5B7                 db    0
.eh_frame_hdr:000000000000D5B8                 db  64h ; d
.eh_frame_hdr:000000000000D5B9                 db  9Ah
.eh_frame_hdr:000000000000D5BA                 db 0FFh
.eh_frame_hdr:000000000000D5BB                 db 0FFh
.eh_frame_hdr:000000000000D5BC                 db 0CCh
.eh_frame_hdr:000000000000D5BD                 db  0Bh
.eh_frame_hdr:000000000000D5BE                 db    0
.eh_frame_hdr:000000000000D5BF                 db    0
.eh_frame_hdr:000000000000D5C0                 db 0E4h
.eh_frame_hdr:000000000000D5C1                 db  9Ah
.eh_frame_hdr:000000000000D5C2                 db 0FFh
.eh_frame_hdr:000000000000D5C3                 db 0FFh
.eh_frame_hdr:000000000000D5C4                 db 0E0h
.eh_frame_hdr:000000000000D5C5                 db  0Bh
.eh_frame_hdr:000000000000D5C6                 db    0
.eh_frame_hdr:000000000000D5C7                 db    0
.eh_frame_hdr:000000000000D5C8                 db  24h ; $
.eh_frame_hdr:000000000000D5C9                 db  9Ch
.eh_frame_hdr:000000000000D5CA                 db 0FFh
.eh_frame_hdr:000000000000D5CB                 db 0FFh
.eh_frame_hdr:000000000000D5CC                 db  40h ; @
.eh_frame_hdr:000000000000D5CD                 db  0Ch
.eh_frame_hdr:000000000000D5CE                 db    0
.eh_frame_hdr:000000000000D5CF                 db    0
.eh_frame_hdr:000000000000D5D0                 db  34h ; 4
.eh_frame_hdr:000000000000D5D1                 db  9Ch
.eh_frame_hdr:000000000000D5D2                 db 0FFh
.eh_frame_hdr:000000000000D5D3                 db 0FFh
.eh_frame_hdr:000000000000D5D4                 db  54h ; T
.eh_frame_hdr:000000000000D5D5                 db  0Ch
.eh_frame_hdr:000000000000D5D6                 db    0
.eh_frame_hdr:000000000000D5D7                 db    0
.eh_frame_hdr:000000000000D5D8                 db  44h ; D
.eh_frame_hdr:000000000000D5D9                 db  9Ch
.eh_frame_hdr:000000000000D5DA                 db 0FFh
.eh_frame_hdr:000000000000D5DB                 db 0FFh
.eh_frame_hdr:000000000000D5DC                 db  68h ; h
.eh_frame_hdr:000000000000D5DD                 db  0Ch
.eh_frame_hdr:000000000000D5DE                 db    0
.eh_frame_hdr:000000000000D5DF                 db    0
.eh_frame_hdr:000000000000D5E0                 db  54h ; T
.eh_frame_hdr:000000000000D5E1                 db  9Ch
.eh_frame_hdr:000000000000D5E2                 db 0FFh
.eh_frame_hdr:000000000000D5E3                 db 0FFh
.eh_frame_hdr:000000000000D5E4                 db  7Ch ; |
.eh_frame_hdr:000000000000D5E5                 db  0Ch
.eh_frame_hdr:000000000000D5E6                 db    0
.eh_frame_hdr:000000000000D5E7                 db    0
.eh_frame_hdr:000000000000D5E8                 db 0A4h
.eh_frame_hdr:000000000000D5E9                 db  9Ch
.eh_frame_hdr:000000000000D5EA                 db 0FFh
.eh_frame_hdr:000000000000D5EB                 db 0FFh
.eh_frame_hdr:000000000000D5EC                 db  90h
.eh_frame_hdr:000000000000D5ED                 db  0Ch
.eh_frame_hdr:000000000000D5EE                 db    0
.eh_frame_hdr:000000000000D5EF                 db    0
.eh_frame_hdr:000000000000D5F0                 db    4
.eh_frame_hdr:000000000000D5F1                 db  9Dh
.eh_frame_hdr:000000000000D5F2                 db 0FFh
.eh_frame_hdr:000000000000D5F3                 db 0FFh
.eh_frame_hdr:000000000000D5F4                 db 0A4h
.eh_frame_hdr:000000000000D5F5                 db  0Ch
.eh_frame_hdr:000000000000D5F6                 db    0
.eh_frame_hdr:000000000000D5F7                 db    0
.eh_frame_hdr:000000000000D5F8                 db  54h ; T
.eh_frame_hdr:000000000000D5F9                 db  9Eh
.eh_frame_hdr:000000000000D5FA                 db 0FFh
.eh_frame_hdr:000000000000D5FB                 db 0FFh
.eh_frame_hdr:000000000000D5FC                 db 0E0h
.eh_frame_hdr:000000000000D5FD                 db  0Ch
.eh_frame_hdr:000000000000D5FE                 db    0
.eh_frame_hdr:000000000000D5FF                 db    0
.eh_frame_hdr:000000000000D600                 db 0B4h
.eh_frame_hdr:000000000000D601                 db  9Eh
.eh_frame_hdr:000000000000D602                 db 0FFh
.eh_frame_hdr:000000000000D603                 db 0FFh
.eh_frame_hdr:000000000000D604                 db  18h
.eh_frame_hdr:000000000000D605                 db  0Dh
.eh_frame_hdr:000000000000D606                 db    0
.eh_frame_hdr:000000000000D607                 db    0
.eh_frame_hdr:000000000000D608                 db    4
.eh_frame_hdr:000000000000D609                 db  9Fh
.eh_frame_hdr:000000000000D60A                 db 0FFh
.eh_frame_hdr:000000000000D60B                 db 0FFh
.eh_frame_hdr:000000000000D60C                 db  2Ch ; ,
.eh_frame_hdr:000000000000D60D                 db  0Dh
.eh_frame_hdr:000000000000D60E                 db    0
.eh_frame_hdr:000000000000D60F                 db    0
.eh_frame_hdr:000000000000D610                 db  84h
.eh_frame_hdr:000000000000D611                 db  9Fh
.eh_frame_hdr:000000000000D612                 db 0FFh
.eh_frame_hdr:000000000000D613                 db 0FFh
.eh_frame_hdr:000000000000D614                 db  60h ; `
.eh_frame_hdr:000000000000D615                 db  0Dh
.eh_frame_hdr:000000000000D616                 db    0
.eh_frame_hdr:000000000000D617                 db    0
.eh_frame_hdr:000000000000D618                 db 0F4h
.eh_frame_hdr:000000000000D619                 db  9Fh
.eh_frame_hdr:000000000000D61A                 db 0FFh
.eh_frame_hdr:000000000000D61B                 db 0FFh
.eh_frame_hdr:000000000000D61C                 db  74h ; t
.eh_frame_hdr:000000000000D61D                 db  0Dh
.eh_frame_hdr:000000000000D61E                 db    0
.eh_frame_hdr:000000000000D61F                 db    0
.eh_frame_hdr:000000000000D620                 db  64h ; d
.eh_frame_hdr:000000000000D621                 db 0A0h
.eh_frame_hdr:000000000000D622                 db 0FFh
.eh_frame_hdr:000000000000D623                 db 0FFh
.eh_frame_hdr:000000000000D624                 db 0C0h
.eh_frame_hdr:000000000000D625                 db  0Dh
.eh_frame_hdr:000000000000D626                 db    0
.eh_frame_hdr:000000000000D627                 db    0
.eh_frame_hdr:000000000000D628                 db 0A4h
.eh_frame_hdr:000000000000D629                 db 0A0h
.eh_frame_hdr:000000000000D62A                 db 0FFh
.eh_frame_hdr:000000000000D62B                 db 0FFh
.eh_frame_hdr:000000000000D62C                 db 0D4h
.eh_frame_hdr:000000000000D62D                 db  0Dh
.eh_frame_hdr:000000000000D62E                 db    0
.eh_frame_hdr:000000000000D62F                 db    0
.eh_frame_hdr:000000000000D630                 db 0C4h
.eh_frame_hdr:000000000000D631                 db 0A0h
.eh_frame_hdr:000000000000D632                 db 0FFh
.eh_frame_hdr:000000000000D633                 db 0FFh
.eh_frame_hdr:000000000000D634                 db 0E8h
.eh_frame_hdr:000000000000D635                 db  0Dh
.eh_frame_hdr:000000000000D636                 db    0
.eh_frame_hdr:000000000000D637                 db    0
.eh_frame_hdr:000000000000D638                 db  84h
.eh_frame_hdr:000000000000D639                 db 0A2h
.eh_frame_hdr:000000000000D63A                 db 0FFh
.eh_frame_hdr:000000000000D63B                 db 0FFh
.eh_frame_hdr:000000000000D63C                 db  34h ; 4
.eh_frame_hdr:000000000000D63D                 db  0Eh
.eh_frame_hdr:000000000000D63E                 db    0
.eh_frame_hdr:000000000000D63F                 db    0
.eh_frame_hdr:000000000000D640                 db  14h
.eh_frame_hdr:000000000000D641                 db 0A3h
.eh_frame_hdr:000000000000D642                 db 0FFh
.eh_frame_hdr:000000000000D643                 db 0FFh
.eh_frame_hdr:000000000000D644                 db  60h ; `
.eh_frame_hdr:000000000000D645                 db  0Eh
.eh_frame_hdr:000000000000D646                 db    0
.eh_frame_hdr:000000000000D647                 db    0
.eh_frame_hdr:000000000000D648                 db 0F4h
.eh_frame_hdr:000000000000D649                 db 0A3h
.eh_frame_hdr:000000000000D64A                 db 0FFh
.eh_frame_hdr:000000000000D64B                 db 0FFh
.eh_frame_hdr:000000000000D64C                 db  8Ch
.eh_frame_hdr:000000000000D64D                 db  0Eh
.eh_frame_hdr:000000000000D64E                 db    0
.eh_frame_hdr:000000000000D64F                 db    0
.eh_frame_hdr:000000000000D650                 db  34h ; 4
.eh_frame_hdr:000000000000D651                 db 0A6h
.eh_frame_hdr:000000000000D652                 db 0FFh
.eh_frame_hdr:000000000000D653                 db 0FFh
.eh_frame_hdr:000000000000D654                 db 0C4h
.eh_frame_hdr:000000000000D655                 db  0Eh
.eh_frame_hdr:000000000000D656                 db    0
.eh_frame_hdr:000000000000D657                 db    0
.eh_frame_hdr:000000000000D658                 db 0C4h
.eh_frame_hdr:000000000000D659                 db 0A8h
.eh_frame_hdr:000000000000D65A                 db 0FFh
.eh_frame_hdr:000000000000D65B                 db 0FFh
.eh_frame_hdr:000000000000D65C                 db    0
.eh_frame_hdr:000000000000D65D                 db  0Fh
.eh_frame_hdr:000000000000D65E                 db    0
.eh_frame_hdr:000000000000D65F                 db    0
.eh_frame_hdr:000000000000D660                 db  24h ; $
.eh_frame_hdr:000000000000D661                 db 0A9h
.eh_frame_hdr:000000000000D662                 db 0FFh
.eh_frame_hdr:000000000000D663                 db 0FFh
.eh_frame_hdr:000000000000D664                 db  24h ; $
.eh_frame_hdr:000000000000D665                 db  0Fh
.eh_frame_hdr:000000000000D666                 db    0
.eh_frame_hdr:000000000000D667                 db    0
.eh_frame_hdr:000000000000D668                 db  34h ; 4
.eh_frame_hdr:000000000000D669                 db 0ABh
.eh_frame_hdr:000000000000D66A                 db 0FFh
.eh_frame_hdr:000000000000D66B                 db 0FFh
.eh_frame_hdr:000000000000D66C                 db  5Ch ; \
.eh_frame_hdr:000000000000D66D                 db  0Fh
.eh_frame_hdr:000000000000D66E                 db    0
.eh_frame_hdr:000000000000D66F                 db    0
.eh_frame_hdr:000000000000D670                 db 0D4h
.eh_frame_hdr:000000000000D671                 db 0ABh
.eh_frame_hdr:000000000000D672                 db 0FFh
.eh_frame_hdr:000000000000D673                 db 0FFh
.eh_frame_hdr:000000000000D674                 db  74h ; t
.eh_frame_hdr:000000000000D675                 db  0Fh
.eh_frame_hdr:000000000000D676                 db    0
.eh_frame_hdr:000000000000D677                 db    0
.eh_frame_hdr:000000000000D678                 db  64h ; d
.eh_frame_hdr:000000000000D679                 db 0ACh
.eh_frame_hdr:000000000000D67A                 db 0FFh
.eh_frame_hdr:000000000000D67B                 db 0FFh
.eh_frame_hdr:000000000000D67C                 db  9Ch
.eh_frame_hdr:000000000000D67D                 db  0Fh
.eh_frame_hdr:000000000000D67E                 db    0
.eh_frame_hdr:000000000000D67F                 db    0
.eh_frame_hdr:000000000000D680                 db    4
.eh_frame_hdr:000000000000D681                 db 0ADh
.eh_frame_hdr:000000000000D682                 db 0FFh
.eh_frame_hdr:000000000000D683                 db 0FFh
.eh_frame_hdr:000000000000D684                 db 0BCh
.eh_frame_hdr:000000000000D685                 db  0Fh
.eh_frame_hdr:000000000000D686                 db    0
.eh_frame_hdr:000000000000D687                 db    0
.eh_frame_hdr:000000000000D688                 db 0F4h
.eh_frame_hdr:000000000000D689                 db 0ADh
.eh_frame_hdr:000000000000D68A                 db 0FFh
.eh_frame_hdr:000000000000D68B                 db 0FFh
.eh_frame_hdr:000000000000D68C                 db    0
.eh_frame_hdr:000000000000D68D                 db  10h
.eh_frame_hdr:000000000000D68E                 db    0
.eh_frame_hdr:000000000000D68F                 db    0
.eh_frame_hdr:000000000000D690                 db  34h ; 4
.eh_frame_hdr:000000000000D691                 db 0C0h
.eh_frame_hdr:000000000000D692                 db 0FFh
.eh_frame_hdr:000000000000D693                 db 0FFh
.eh_frame_hdr:000000000000D694                 db  78h ; x
.eh_frame_hdr:000000000000D695                 db  10h
.eh_frame_hdr:000000000000D696                 db    0
.eh_frame_hdr:000000000000D697                 db    0
.eh_frame_hdr:000000000000D698                 db 0E4h
.eh_frame_hdr:000000000000D699                 db 0C1h
.eh_frame_hdr:000000000000D69A                 db 0FFh
.eh_frame_hdr:000000000000D69B                 db 0FFh
.eh_frame_hdr:000000000000D69C                 db 0E4h
.eh_frame_hdr:000000000000D69D                 db  10h
.eh_frame_hdr:000000000000D69E                 db    0
.eh_frame_hdr:000000000000D69F                 db    0
.eh_frame_hdr:000000000000D6A0                 db  24h ; $
.eh_frame_hdr:000000000000D6A1                 db 0C2h
.eh_frame_hdr:000000000000D6A2                 db 0FFh
.eh_frame_hdr:000000000000D6A3                 db 0FFh
.eh_frame_hdr:000000000000D6A4                 db  10h
.eh_frame_hdr:000000000000D6A5                 db  11h
.eh_frame_hdr:000000000000D6A6                 db    0
.eh_frame_hdr:000000000000D6A7                 db    0
.eh_frame_hdr:000000000000D6A8                 db  44h ; D
.eh_frame_hdr:000000000000D6A9                 db 0C2h
.eh_frame_hdr:000000000000D6AA                 db 0FFh
.eh_frame_hdr:000000000000D6AB                 db 0FFh
.eh_frame_hdr:000000000000D6AC                 db  24h ; $
.eh_frame_hdr:000000000000D6AD                 db  11h
.eh_frame_hdr:000000000000D6AE                 db    0
.eh_frame_hdr:000000000000D6AF                 db    0
.eh_frame_hdr:000000000000D6B0                 db  64h ; d
.eh_frame_hdr:000000000000D6B1                 db 0C2h
.eh_frame_hdr:000000000000D6B2                 db 0FFh
.eh_frame_hdr:000000000000D6B3                 db 0FFh
.eh_frame_hdr:000000000000D6B4                 db  38h ; 8
.eh_frame_hdr:000000000000D6B5                 db  11h
.eh_frame_hdr:000000000000D6B6                 db    0
.eh_frame_hdr:000000000000D6B7                 db    0
.eh_frame_hdr:000000000000D6B8                 db 0A4h
.eh_frame_hdr:000000000000D6B9                 db 0C2h
.eh_frame_hdr:000000000000D6BA                 db 0FFh
.eh_frame_hdr:000000000000D6BB                 db 0FFh
.eh_frame_hdr:000000000000D6BC                 db  4Ch ; L
.eh_frame_hdr:000000000000D6BD                 db  11h
.eh_frame_hdr:000000000000D6BE                 db    0
.eh_frame_hdr:000000000000D6BF                 db    0
.eh_frame_hdr:000000000000D6C0                 db 0C4h
.eh_frame_hdr:000000000000D6C1                 db 0C2h
.eh_frame_hdr:000000000000D6C2                 db 0FFh
.eh_frame_hdr:000000000000D6C3                 db 0FFh
.eh_frame_hdr:000000000000D6C4                 db  60h ; `
.eh_frame_hdr:000000000000D6C5                 db  11h
.eh_frame_hdr:000000000000D6C6                 db    0
.eh_frame_hdr:000000000000D6C7                 db    0
.eh_frame_hdr:000000000000D6C8                 db 0F4h
.eh_frame_hdr:000000000000D6C9                 db 0C2h
.eh_frame_hdr:000000000000D6CA                 db 0FFh
.eh_frame_hdr:000000000000D6CB                 db 0FFh
.eh_frame_hdr:000000000000D6CC                 db  74h ; t
.eh_frame_hdr:000000000000D6CD                 db  11h
.eh_frame_hdr:000000000000D6CE                 db    0
.eh_frame_hdr:000000000000D6CF                 db    0
.eh_frame_hdr:000000000000D6D0                 db  74h ; t
.eh_frame_hdr:000000000000D6D1                 db 0C3h
.eh_frame_hdr:000000000000D6D2                 db 0FFh
.eh_frame_hdr:000000000000D6D3                 db 0FFh
.eh_frame_hdr:000000000000D6D4                 db 0C8h
.eh_frame_hdr:000000000000D6D5                 db  11h
.eh_frame_hdr:000000000000D6D6                 db    0
.eh_frame_hdr:000000000000D6D7                 db    0
.eh_frame_hdr:000000000000D6D8                 db  64h ; d
.eh_frame_hdr:000000000000D6D9                 db 0C4h
.eh_frame_hdr:000000000000D6DA                 db 0FFh
.eh_frame_hdr:000000000000D6DB                 db 0FFh
.eh_frame_hdr:000000000000D6DC                 db  34h ; 4
.eh_frame_hdr:000000000000D6DD                 db  12h
.eh_frame_hdr:000000000000D6DE                 db    0
.eh_frame_hdr:000000000000D6DF                 db    0
.eh_frame_hdr:000000000000D6E0                 db  74h ; t
.eh_frame_hdr:000000000000D6E1                 db 0C4h
.eh_frame_hdr:000000000000D6E2                 db 0FFh
.eh_frame_hdr:000000000000D6E3                 db 0FFh
.eh_frame_hdr:000000000000D6E4                 db  48h ; H
.eh_frame_hdr:000000000000D6E5                 db  12h
.eh_frame_hdr:000000000000D6E6                 db    0
.eh_frame_hdr:000000000000D6E7                 db    0
.eh_frame_hdr:000000000000D6E8                 db  14h
.eh_frame_hdr:000000000000D6E9                 db 0C5h
.eh_frame_hdr:000000000000D6EA                 db 0FFh
.eh_frame_hdr:000000000000D6EB                 db 0FFh
.eh_frame_hdr:000000000000D6EC                 db  74h ; t
.eh_frame_hdr:000000000000D6ED                 db  12h
.eh_frame_hdr:000000000000D6EE                 db    0
.eh_frame_hdr:000000000000D6EF                 db    0
.eh_frame_hdr:000000000000D6F0                 db  34h ; 4
.eh_frame_hdr:000000000000D6F1                 db 0C5h
.eh_frame_hdr:000000000000D6F2                 db 0FFh
.eh_frame_hdr:000000000000D6F3                 db 0FFh
.eh_frame_hdr:000000000000D6F4                 db  88h
.eh_frame_hdr:000000000000D6F5                 db  12h
.eh_frame_hdr:000000000000D6F6                 db    0
.eh_frame_hdr:000000000000D6F7                 db    0
.eh_frame_hdr:000000000000D6F8                 db  44h ; D
.eh_frame_hdr:000000000000D6F9                 db 0C5h
.eh_frame_hdr:000000000000D6FA                 db 0FFh
.eh_frame_hdr:000000000000D6FB                 db 0FFh
.eh_frame_hdr:000000000000D6FC                 db  9Ch
.eh_frame_hdr:000000000000D6FD                 db  12h
.eh_frame_hdr:000000000000D6FE                 db    0
.eh_frame_hdr:000000000000D6FF                 db    0
.eh_frame_hdr:000000000000D700                 db  64h ; d
.eh_frame_hdr:000000000000D701                 db 0C5h
.eh_frame_hdr:000000000000D702                 db 0FFh
.eh_frame_hdr:000000000000D703                 db 0FFh
.eh_frame_hdr:000000000000D704                 db 0B0h
.eh_frame_hdr:000000000000D705                 db  12h
.eh_frame_hdr:000000000000D706                 db    0
.eh_frame_hdr:000000000000D707                 db    0
.eh_frame_hdr:000000000000D708                 db  84h
.eh_frame_hdr:000000000000D709                 db 0C5h
.eh_frame_hdr:000000000000D70A                 db 0FFh
.eh_frame_hdr:000000000000D70B                 db 0FFh
.eh_frame_hdr:000000000000D70C                 db 0C4h
.eh_frame_hdr:000000000000D70D                 db  12h
.eh_frame_hdr:000000000000D70E                 db    0
.eh_frame_hdr:000000000000D70F                 db    0
.eh_frame_hdr:000000000000D710                 db  14h
.eh_frame_hdr:000000000000D711                 db 0C6h
.eh_frame_hdr:000000000000D712                 db 0FFh
.eh_frame_hdr:000000000000D713                 db 0FFh
.eh_frame_hdr:000000000000D714                 db 0E0h
.eh_frame_hdr:000000000000D715                 db  12h
.eh_frame_hdr:000000000000D716                 db    0
.eh_frame_hdr:000000000000D717                 db    0
.eh_frame_hdr:000000000000D718                 db 0A4h
.eh_frame_hdr:000000000000D719                 db 0C6h
.eh_frame_hdr:000000000000D71A                 db 0FFh
.eh_frame_hdr:000000000000D71B                 db 0FFh
.eh_frame_hdr:000000000000D71C                 db 0FCh
.eh_frame_hdr:000000000000D71D                 db  12h
.eh_frame_hdr:000000000000D71E                 db    0
.eh_frame_hdr:000000000000D71F                 db    0
.eh_frame_hdr:000000000000D720                 db 0B4h
.eh_frame_hdr:000000000000D721                 db 0C6h
.eh_frame_hdr:000000000000D722                 db 0FFh
.eh_frame_hdr:000000000000D723                 db 0FFh
.eh_frame_hdr:000000000000D724                 db  10h
.eh_frame_hdr:000000000000D725                 db  13h
.eh_frame_hdr:000000000000D726                 db    0
.eh_frame_hdr:000000000000D727                 db    0
.eh_frame_hdr:000000000000D728                 db 0C4h
.eh_frame_hdr:000000000000D729                 db 0C6h
.eh_frame_hdr:000000000000D72A                 db 0FFh
.eh_frame_hdr:000000000000D72B                 db 0FFh
.eh_frame_hdr:000000000000D72C                 db  24h ; $
.eh_frame_hdr:000000000000D72D                 db  13h
.eh_frame_hdr:000000000000D72E                 db    0
.eh_frame_hdr:000000000000D72F                 db    0
.eh_frame_hdr:000000000000D730                 db  64h ; d
.eh_frame_hdr:000000000000D731                 db 0C7h
.eh_frame_hdr:000000000000D732                 db 0FFh
.eh_frame_hdr:000000000000D733                 db 0FFh
.eh_frame_hdr:000000000000D734                 db  40h ; @
.eh_frame_hdr:000000000000D735                 db  13h
.eh_frame_hdr:000000000000D736                 db    0
.eh_frame_hdr:000000000000D737                 db    0
.eh_frame_hdr:000000000000D738                 db  74h ; t
.eh_frame_hdr:000000000000D739                 db 0C7h
.eh_frame_hdr:000000000000D73A                 db 0FFh
.eh_frame_hdr:000000000000D73B                 db 0FFh
.eh_frame_hdr:000000000000D73C                 db  54h ; T
.eh_frame_hdr:000000000000D73D                 db  13h
.eh_frame_hdr:000000000000D73E                 db    0
.eh_frame_hdr:000000000000D73F                 db    0
.eh_frame_hdr:000000000000D740                 db  94h
.eh_frame_hdr:000000000000D741                 db 0C7h
.eh_frame_hdr:000000000000D742                 db 0FFh
.eh_frame_hdr:000000000000D743                 db 0FFh
.eh_frame_hdr:000000000000D744                 db  68h ; h
.eh_frame_hdr:000000000000D745                 db  13h
.eh_frame_hdr:000000000000D746                 db    0
.eh_frame_hdr:000000000000D747                 db    0
.eh_frame_hdr:000000000000D748                 db 0A4h
.eh_frame_hdr:000000000000D749                 db 0C7h
.eh_frame_hdr:000000000000D74A                 db 0FFh
.eh_frame_hdr:000000000000D74B                 db 0FFh
.eh_frame_hdr:000000000000D74C                 db  7Ch ; |
.eh_frame_hdr:000000000000D74D                 db  13h
.eh_frame_hdr:000000000000D74E                 db    0
.eh_frame_hdr:000000000000D74F                 db    0
.eh_frame_hdr:000000000000D750                 db  34h ; 4
.eh_frame_hdr:000000000000D751                 db 0C8h
.eh_frame_hdr:000000000000D752                 db 0FFh
.eh_frame_hdr:000000000000D753                 db 0FFh
.eh_frame_hdr:000000000000D754                 db  98h
.eh_frame_hdr:000000000000D755                 db  13h
.eh_frame_hdr:000000000000D756                 db    0
.eh_frame_hdr:000000000000D757                 db    0
.eh_frame_hdr:000000000000D758                 db 0D4h
.eh_frame_hdr:000000000000D759                 db 0C8h
.eh_frame_hdr:000000000000D75A                 db 0FFh
.eh_frame_hdr:000000000000D75B                 db 0FFh
.eh_frame_hdr:000000000000D75C                 db 0B4h
.eh_frame_hdr:000000000000D75D                 db  13h
.eh_frame_hdr:000000000000D75E                 db    0
.eh_frame_hdr:000000000000D75F                 db    0
.eh_frame_hdr:000000000000D760                 db 0E4h
.eh_frame_hdr:000000000000D761                 db 0C8h
.eh_frame_hdr:000000000000D762                 db 0FFh
.eh_frame_hdr:000000000000D763                 db 0FFh
.eh_frame_hdr:000000000000D764                 db 0C8h
.eh_frame_hdr:000000000000D765                 db  13h
.eh_frame_hdr:000000000000D766                 db    0
.eh_frame_hdr:000000000000D767                 db    0
.eh_frame_hdr:000000000000D768                 db    4
.eh_frame_hdr:000000000000D769                 db 0C9h
.eh_frame_hdr:000000000000D76A                 db 0FFh
.eh_frame_hdr:000000000000D76B                 db 0FFh
.eh_frame_hdr:000000000000D76C                 db 0DCh
.eh_frame_hdr:000000000000D76D                 db  13h
.eh_frame_hdr:000000000000D76E                 db    0
.eh_frame_hdr:000000000000D76F                 db    0
.eh_frame_hdr:000000000000D770                 db  24h ; $
.eh_frame_hdr:000000000000D771                 db 0C9h
.eh_frame_hdr:000000000000D772                 db 0FFh
.eh_frame_hdr:000000000000D773                 db 0FFh
.eh_frame_hdr:000000000000D774                 db 0F0h
.eh_frame_hdr:000000000000D775                 db  13h
.eh_frame_hdr:000000000000D776                 db    0
.eh_frame_hdr:000000000000D777                 db    0
.eh_frame_hdr:000000000000D778                 db  34h ; 4
.eh_frame_hdr:000000000000D779                 db 0C9h
.eh_frame_hdr:000000000000D77A                 db 0FFh
.eh_frame_hdr:000000000000D77B                 db 0FFh
.eh_frame_hdr:000000000000D77C                 db    4
.eh_frame_hdr:000000000000D77D                 db  14h
.eh_frame_hdr:000000000000D77E                 db    0
.eh_frame_hdr:000000000000D77F                 db    0
.eh_frame_hdr:000000000000D780                 db  54h ; T
.eh_frame_hdr:000000000000D781                 db 0C9h
.eh_frame_hdr:000000000000D782                 db 0FFh
.eh_frame_hdr:000000000000D783                 db 0FFh
.eh_frame_hdr:000000000000D784                 db  18h
.eh_frame_hdr:000000000000D785                 db  14h
.eh_frame_hdr:000000000000D786                 db    0
.eh_frame_hdr:000000000000D787                 db    0
.eh_frame_hdr:000000000000D788                 db  74h ; t
.eh_frame_hdr:000000000000D789                 db 0C9h
.eh_frame_hdr:000000000000D78A                 db 0FFh
.eh_frame_hdr:000000000000D78B                 db 0FFh
.eh_frame_hdr:000000000000D78C                 db  2Ch ; ,
.eh_frame_hdr:000000000000D78D                 db  14h
.eh_frame_hdr:000000000000D78E                 db    0
.eh_frame_hdr:000000000000D78F                 db    0
.eh_frame_hdr:000000000000D790                 db  94h
.eh_frame_hdr:000000000000D791                 db 0C9h
.eh_frame_hdr:000000000000D792                 db 0FFh
.eh_frame_hdr:000000000000D793                 db 0FFh
.eh_frame_hdr:000000000000D794                 db  44h ; D
.eh_frame_hdr:000000000000D795                 db  14h
.eh_frame_hdr:000000000000D796                 db    0
.eh_frame_hdr:000000000000D797                 db    0
.eh_frame_hdr:000000000000D798                 db 0F4h
.eh_frame_hdr:000000000000D799                 db 0C9h
.eh_frame_hdr:000000000000D79A                 db 0FFh
.eh_frame_hdr:000000000000D79B                 db 0FFh
.eh_frame_hdr:000000000000D79C                 db  7Ch ; |
.eh_frame_hdr:000000000000D79D                 db  14h
.eh_frame_hdr:000000000000D79E                 db    0
.eh_frame_hdr:000000000000D79F                 db    0
.eh_frame_hdr:000000000000D7A0                 db  34h ; 4
.eh_frame_hdr:000000000000D7A1                 db 0CAh
.eh_frame_hdr:000000000000D7A2                 db 0FFh
.eh_frame_hdr:000000000000D7A3                 db 0FFh
.eh_frame_hdr:000000000000D7A4                 db 0B4h
.eh_frame_hdr:000000000000D7A5                 db  14h
.eh_frame_hdr:000000000000D7A6                 db    0
.eh_frame_hdr:000000000000D7A7                 db    0
.eh_frame_hdr:000000000000D7A8                 db  54h ; T
.eh_frame_hdr:000000000000D7A9                 db 0CEh
.eh_frame_hdr:000000000000D7AA                 db 0FFh
.eh_frame_hdr:000000000000D7AB                 db 0FFh
.eh_frame_hdr:000000000000D7AC                 db 0C8h
.eh_frame_hdr:000000000000D7AD                 db  15h
.eh_frame_hdr:000000000000D7AE                 db    0
.eh_frame_hdr:000000000000D7AF                 db    0
.eh_frame_hdr:000000000000D7B0                 db  74h ; t
.eh_frame_hdr:000000000000D7B1                 db 0CEh
.eh_frame_hdr:000000000000D7B2                 db 0FFh
.eh_frame_hdr:000000000000D7B3                 db 0FFh
.eh_frame_hdr:000000000000D7B4                 db 0DCh
.eh_frame_hdr:000000000000D7B5                 db  15h
.eh_frame_hdr:000000000000D7B6                 db    0
.eh_frame_hdr:000000000000D7B7                 db    0
.eh_frame_hdr:000000000000D7B8                 db 0F4h
.eh_frame_hdr:000000000000D7B9                 db 0CEh
.eh_frame_hdr:000000000000D7BA                 db 0FFh
.eh_frame_hdr:000000000000D7BB                 db 0FFh
.eh_frame_hdr:000000000000D7BC                 db 0F8h
.eh_frame_hdr:000000000000D7BD                 db  15h
.eh_frame_hdr:000000000000D7BE                 db    0
.eh_frame_hdr:000000000000D7BF                 db    0
.eh_frame_hdr:000000000000D7C0                 db 0D4h
.eh_frame_hdr:000000000000D7C1                 db 0CFh
.eh_frame_hdr:000000000000D7C2                 db 0FFh
.eh_frame_hdr:000000000000D7C3                 db 0FFh
.eh_frame_hdr:000000000000D7C4                 db  24h ; $
.eh_frame_hdr:000000000000D7C5                 db  16h
.eh_frame_hdr:000000000000D7C6                 db    0
.eh_frame_hdr:000000000000D7C7                 db    0
.eh_frame_hdr:000000000000D7C8                 db  54h ; T
.eh_frame_hdr:000000000000D7C9                 db 0D0h
.eh_frame_hdr:000000000000D7CA                 db 0FFh
.eh_frame_hdr:000000000000D7CB                 db 0FFh
.eh_frame_hdr:000000000000D7CC                 db  44h ; D
.eh_frame_hdr:000000000000D7CD                 db  16h
.eh_frame_hdr:000000000000D7CE                 db    0
.eh_frame_hdr:000000000000D7CF                 db    0
.eh_frame_hdr:000000000000D7D0                 db  74h ; t
.eh_frame_hdr:000000000000D7D1                 db 0D0h
.eh_frame_hdr:000000000000D7D2                 db 0FFh
.eh_frame_hdr:000000000000D7D3                 db 0FFh
.eh_frame_hdr:000000000000D7D4                 db  60h ; `
.eh_frame_hdr:000000000000D7D5                 db  16h
.eh_frame_hdr:000000000000D7D6                 db    0
.eh_frame_hdr:000000000000D7D7                 db    0
.eh_frame_hdr:000000000000D7D8                 db 0A4h
.eh_frame_hdr:000000000000D7D9                 db 0D0h
.eh_frame_hdr:000000000000D7DA                 db 0FFh
.eh_frame_hdr:000000000000D7DB                 db 0FFh
.eh_frame_hdr:000000000000D7DC                 db  74h ; t
.eh_frame_hdr:000000000000D7DD                 db  16h
.eh_frame_hdr:000000000000D7DE                 db    0
.eh_frame_hdr:000000000000D7DF                 db    0
.eh_frame_hdr:000000000000D7E0                 db 0B4h
.eh_frame_hdr:000000000000D7E1                 db 0D0h
.eh_frame_hdr:000000000000D7E2                 db 0FFh
.eh_frame_hdr:000000000000D7E3                 db 0FFh
.eh_frame_hdr:000000000000D7E4                 db  88h
.eh_frame_hdr:000000000000D7E5                 db  16h
.eh_frame_hdr:000000000000D7E6                 db    0
.eh_frame_hdr:000000000000D7E7                 db    0
.eh_frame_hdr:000000000000D7E8                 db 0F4h
.eh_frame_hdr:000000000000D7E9                 db 0D0h
.eh_frame_hdr:000000000000D7EA                 db 0FFh
.eh_frame_hdr:000000000000D7EB                 db 0FFh
.eh_frame_hdr:000000000000D7EC                 db 0ACh
.eh_frame_hdr:000000000000D7ED                 db  16h
.eh_frame_hdr:000000000000D7EE                 db    0
.eh_frame_hdr:000000000000D7EF                 db    0
.eh_frame_hdr:000000000000D7F0                 db  24h ; $
.eh_frame_hdr:000000000000D7F1                 db 0D1h
.eh_frame_hdr:000000000000D7F2                 db 0FFh
.eh_frame_hdr:000000000000D7F3                 db 0FFh
.eh_frame_hdr:000000000000D7F4                 db 0C0h
.eh_frame_hdr:000000000000D7F5                 db  16h
.eh_frame_hdr:000000000000D7F6                 db    0
.eh_frame_hdr:000000000000D7F7                 db    0
.eh_frame_hdr:000000000000D7F8                 db 0B4h
.eh_frame_hdr:000000000000D7F9                 db 0D1h
.eh_frame_hdr:000000000000D7FA                 db 0FFh
.eh_frame_hdr:000000000000D7FB                 db 0FFh
.eh_frame_hdr:000000000000D7FC                 db 0D8h
.eh_frame_hdr:000000000000D7FD                 db  16h
.eh_frame_hdr:000000000000D7FE                 db    0
.eh_frame_hdr:000000000000D7FF                 db    0
.eh_frame_hdr:000000000000D800                 db    4
.eh_frame_hdr:000000000000D801                 db 0D2h
.eh_frame_hdr:000000000000D802                 db 0FFh
.eh_frame_hdr:000000000000D803                 db 0FFh
.eh_frame_hdr:000000000000D804                 db 0F0h
.eh_frame_hdr:000000000000D805                 db  16h
.eh_frame_hdr:000000000000D806                 db    0
.eh_frame_hdr:000000000000D807                 db    0
.eh_frame_hdr:000000000000D808                 db  24h ; $
.eh_frame_hdr:000000000000D809                 db 0D2h
.eh_frame_hdr:000000000000D80A                 db 0FFh
.eh_frame_hdr:000000000000D80B                 db 0FFh
.eh_frame_hdr:000000000000D80C                 db  0Ch
.eh_frame_hdr:000000000000D80D                 db  17h
.eh_frame_hdr:000000000000D80E                 db    0
.eh_frame_hdr:000000000000D80F                 db    0
.eh_frame_hdr:000000000000D810                 db  54h ; T
.eh_frame_hdr:000000000000D811                 db 0D2h
.eh_frame_hdr:000000000000D812                 db 0FFh
.eh_frame_hdr:000000000000D813                 db 0FFh
.eh_frame_hdr:000000000000D814                 db  28h ; (
.eh_frame_hdr:000000000000D815                 db  17h
.eh_frame_hdr:000000000000D816                 db    0
.eh_frame_hdr:000000000000D817                 db    0
.eh_frame_hdr:000000000000D818                 db  84h
.eh_frame_hdr:000000000000D819                 db 0D2h
.eh_frame_hdr:000000000000D81A                 db 0FFh
.eh_frame_hdr:000000000000D81B                 db 0FFh
.eh_frame_hdr:000000000000D81C                 db  50h ; P
.eh_frame_hdr:000000000000D81D                 db  17h
.eh_frame_hdr:000000000000D81E                 db    0
.eh_frame_hdr:000000000000D81F                 db    0
.eh_frame_hdr:000000000000D820                 db 0A4h
.eh_frame_hdr:000000000000D821                 db 0D2h
.eh_frame_hdr:000000000000D822                 db 0FFh
.eh_frame_hdr:000000000000D823                 db 0FFh
.eh_frame_hdr:000000000000D824                 db  6Ch ; l
.eh_frame_hdr:000000000000D825                 db  17h
.eh_frame_hdr:000000000000D826                 db    0
.eh_frame_hdr:000000000000D827                 db    0
.eh_frame_hdr:000000000000D828                 db 0E4h
.eh_frame_hdr:000000000000D829                 db 0D2h
.eh_frame_hdr:000000000000D82A                 db 0FFh
.eh_frame_hdr:000000000000D82B                 db 0FFh
.eh_frame_hdr:000000000000D82C                 db  84h
.eh_frame_hdr:000000000000D82D                 db  17h
.eh_frame_hdr:000000000000D82E                 db    0
.eh_frame_hdr:000000000000D82F                 db    0
.eh_frame_hdr:000000000000D830                 db 0E4h
.eh_frame_hdr:000000000000D831                 db 0D3h
.eh_frame_hdr:000000000000D832                 db 0FFh
.eh_frame_hdr:000000000000D833                 db 0FFh
.eh_frame_hdr:000000000000D834                 db 0D0h
.eh_frame_hdr:000000000000D835                 db  17h
.eh_frame_hdr:000000000000D836                 db    0
.eh_frame_hdr:000000000000D837                 db    0
.eh_frame_hdr:000000000000D838                 db  14h
.eh_frame_hdr:000000000000D839                 db 0D4h
.eh_frame_hdr:000000000000D83A                 db 0FFh
.eh_frame_hdr:000000000000D83B                 db 0FFh
.eh_frame_hdr:000000000000D83C                 db 0ECh
.eh_frame_hdr:000000000000D83D                 db  17h
.eh_frame_hdr:000000000000D83E                 db    0
.eh_frame_hdr:000000000000D83F                 db    0
.eh_frame_hdr:000000000000D840                 db  94h
.eh_frame_hdr:000000000000D841                 db 0D4h
.eh_frame_hdr:000000000000D842                 db 0FFh
.eh_frame_hdr:000000000000D843                 db 0FFh
.eh_frame_hdr:000000000000D844                 db  1Ch
.eh_frame_hdr:000000000000D845                 db  18h
.eh_frame_hdr:000000000000D846                 db    0
.eh_frame_hdr:000000000000D847                 db    0
.eh_frame_hdr:000000000000D848                 db  64h ; d
.eh_frame_hdr:000000000000D849                 db 0D5h
.eh_frame_hdr:000000000000D84A                 db 0FFh
.eh_frame_hdr:000000000000D84B                 db 0FFh
.eh_frame_hdr:000000000000D84C                 db  64h ; d
.eh_frame_hdr:000000000000D84D                 db  18h
.eh_frame_hdr:000000000000D84E                 db    0
.eh_frame_hdr:000000000000D84F                 db    0
.eh_frame_hdr:000000000000D850                 db  84h
.eh_frame_hdr:000000000000D851                 db 0D9h
.eh_frame_hdr:000000000000D852                 db 0FFh
.eh_frame_hdr:000000000000D853                 db 0FFh
.eh_frame_hdr:000000000000D854                 db 0B4h
.eh_frame_hdr:000000000000D855                 db  18h
.eh_frame_hdr:000000000000D856                 db    0
.eh_frame_hdr:000000000000D857                 db    0
.eh_frame_hdr:000000000000D858                 db    4
.eh_frame_hdr:000000000000D859                 db 0DCh
.eh_frame_hdr:000000000000D85A                 db 0FFh
.eh_frame_hdr:000000000000D85B                 db 0FFh
.eh_frame_hdr:000000000000D85C                 db 0ECh
.eh_frame_hdr:000000000000D85D                 db  18h
.eh_frame_hdr:000000000000D85E                 db    0
.eh_frame_hdr:000000000000D85F                 db    0
.eh_frame_hdr:000000000000D860                 db  94h
.eh_frame_hdr:000000000000D861                 db 0DCh
.eh_frame_hdr:000000000000D862                 db 0FFh
.eh_frame_hdr:000000000000D863                 db 0FFh
.eh_frame_hdr:000000000000D864                 db  2Ch ; ,
.eh_frame_hdr:000000000000D865                 db  19h
.eh_frame_hdr:000000000000D866                 db    0
.eh_frame_hdr:000000000000D867                 db    0
.eh_frame_hdr:000000000000D868                 db  64h ; d
.eh_frame_hdr:000000000000D869                 db 0DDh
.eh_frame_hdr:000000000000D86A                 db 0FFh
.eh_frame_hdr:000000000000D86B                 db 0FFh
.eh_frame_hdr:000000000000D86C                 db  64h ; d
.eh_frame_hdr:000000000000D86D                 db  19h
.eh_frame_hdr:000000000000D86E                 db    0
.eh_frame_hdr:000000000000D86F                 db    0
.eh_frame_hdr:000000000000D870                 db 0D4h
.eh_frame_hdr:000000000000D871                 db 0DDh
.eh_frame_hdr:000000000000D872                 db 0FFh
.eh_frame_hdr:000000000000D873                 db 0FFh
.eh_frame_hdr:000000000000D874                 db  9Ch
.eh_frame_hdr:000000000000D875                 db  19h
.eh_frame_hdr:000000000000D876                 db    0
.eh_frame_hdr:000000000000D877                 db    0
.eh_frame_hdr:000000000000D878                 db  54h ; T
.eh_frame_hdr:000000000000D879                 db 0DEh
.eh_frame_hdr:000000000000D87A                 db 0FFh
.eh_frame_hdr:000000000000D87B                 db 0FFh
.eh_frame_hdr:000000000000D87C                 db 0ECh
.eh_frame_hdr:000000000000D87D                 db  19h
.eh_frame_hdr:000000000000D87E                 db    0
.eh_frame_hdr:000000000000D87F                 db    0
.eh_frame_hdr:000000000000D880                 db  14h
.eh_frame_hdr:000000000000D881                 db 0DFh
.eh_frame_hdr:000000000000D882                 db 0FFh
.eh_frame_hdr:000000000000D883                 db 0FFh
.eh_frame_hdr:000000000000D884                 db    4
.eh_frame_hdr:000000000000D885                 db  1Ah
.eh_frame_hdr:000000000000D886                 db    0
.eh_frame_hdr:000000000000D887                 db    0
.eh_frame_hdr:000000000000D888                 db  74h ; t
.eh_frame_hdr:000000000000D889                 db 0DFh
.eh_frame_hdr:000000000000D88A                 db 0FFh
.eh_frame_hdr:000000000000D88B                 db 0FFh
.eh_frame_hdr:000000000000D88C                 db  24h ; $
.eh_frame_hdr:000000000000D88D                 db  1Ah
.eh_frame_hdr:000000000000D88E                 db    0
.eh_frame_hdr:000000000000D88F                 db    0
.eh_frame_hdr:000000000000D890                 db 0B4h
.eh_frame_hdr:000000000000D891                 db 0DFh
.eh_frame_hdr:000000000000D892                 db 0FFh
.eh_frame_hdr:000000000000D893                 db 0FFh
.eh_frame_hdr:000000000000D894                 db  44h ; D
.eh_frame_hdr:000000000000D895                 db  1Ah
.eh_frame_hdr:000000000000D896                 db    0
.eh_frame_hdr:000000000000D897                 db    0
.eh_frame_hdr:000000000000D898                 db 0C4h
.eh_frame_hdr:000000000000D899                 db 0DFh
.eh_frame_hdr:000000000000D89A                 db 0FFh
.eh_frame_hdr:000000000000D89B                 db 0FFh
.eh_frame_hdr:000000000000D89C                 db  5Ch ; \
.eh_frame_hdr:000000000000D89D                 db  1Ah
.eh_frame_hdr:000000000000D89E                 db    0
.eh_frame_hdr:000000000000D89F                 db    0
.eh_frame_hdr:000000000000D8A0                 db  44h ; D
.eh_frame_hdr:000000000000D8A1                 db 0E0h
.eh_frame_hdr:000000000000D8A2                 db 0FFh
.eh_frame_hdr:000000000000D8A3                 db 0FFh
.eh_frame_hdr:000000000000D8A4                 db  94h
.eh_frame_hdr:000000000000D8A5                 db  1Ah
.eh_frame_hdr:000000000000D8A6                 db    0
.eh_frame_hdr:000000000000D8A7                 db    0
.eh_frame_hdr:000000000000D8A8                 db  84h
.eh_frame_hdr:000000000000D8A9                 db 0E0h
.eh_frame_hdr:000000000000D8AA                 db 0FFh
.eh_frame_hdr:000000000000D8AB                 db 0FFh
.eh_frame_hdr:000000000000D8AC                 db 0B4h
.eh_frame_hdr:000000000000D8AD                 db  1Ah
.eh_frame_hdr:000000000000D8AE                 db    0
.eh_frame_hdr:000000000000D8AF                 db    0
.eh_frame_hdr:000000000000D8B0                 db 0E4h
.eh_frame_hdr:000000000000D8B1                 db 0E0h
.eh_frame_hdr:000000000000D8B2                 db 0FFh
.eh_frame_hdr:000000000000D8B3                 db 0FFh
.eh_frame_hdr:000000000000D8B4                 db 0E4h
.eh_frame_hdr:000000000000D8B5                 db  1Ah
.eh_frame_hdr:000000000000D8B6                 db    0
.eh_frame_hdr:000000000000D8B7                 db    0
.eh_frame_hdr:000000000000D8B8                 db  54h ; T
.eh_frame_hdr:000000000000D8B9                 db 0E1h
.eh_frame_hdr:000000000000D8BA                 db 0FFh
.eh_frame_hdr:000000000000D8BB                 db 0FFh
.eh_frame_hdr:000000000000D8BC                 db  2Ch ; ,
.eh_frame_hdr:000000000000D8BD                 db  1Bh
.eh_frame_hdr:000000000000D8BE                 db    0
.eh_frame_hdr:000000000000D8BF                 db    0
.eh_frame_hdr:000000000000D8C0                 db  64h ; d
.eh_frame_hdr:000000000000D8C1                 db 0E1h
.eh_frame_hdr:000000000000D8C2                 db 0FFh
.eh_frame_hdr:000000000000D8C3                 db 0FFh
.eh_frame_hdr:000000000000D8C4                 db  44h ; D
.eh_frame_hdr:000000000000D8C5                 db  1Bh
.eh_frame_hdr:000000000000D8C6                 db    0
.eh_frame_hdr:000000000000D8C7                 db    0
.eh_frame_hdr:000000000000D8C7 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000D8C7
.eh_frame:000000000000D8C8 ; ===========================================================================
.eh_frame:000000000000D8C8
.eh_frame:000000000000D8C8 ; Segment type: Pure data
.eh_frame:000000000000D8C8 ; Segment permissions: Read
.eh_frame:000000000000D8C8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000D8C8                 assume cs:_eh_frame
.eh_frame:000000000000D8C8                 ;org 0D8C8h
.eh_frame:000000000000D8C8                 db  14h
.eh_frame:000000000000D8C9                 db    0
.eh_frame:000000000000D8CA                 db    0
.eh_frame:000000000000D8CB                 db    0
.eh_frame:000000000000D8CC                 db    0
.eh_frame:000000000000D8CD                 db    0
.eh_frame:000000000000D8CE                 db    0
.eh_frame:000000000000D8CF                 db    0
.eh_frame:000000000000D8D0                 db    1
.eh_frame:000000000000D8D1                 db  7Ah ; z
.eh_frame:000000000000D8D2                 db  52h ; R
.eh_frame:000000000000D8D3                 db    0
.eh_frame:000000000000D8D4                 db    1
.eh_frame:000000000000D8D5                 db  78h ; x
.eh_frame:000000000000D8D6                 db  10h
.eh_frame:000000000000D8D7                 db    1
.eh_frame:000000000000D8D8                 db  1Bh
.eh_frame:000000000000D8D9                 db  0Ch
.eh_frame:000000000000D8DA                 db    7
.eh_frame:000000000000D8DB                 db    8
.eh_frame:000000000000D8DC                 db  90h
.eh_frame:000000000000D8DD                 db    1
.eh_frame:000000000000D8DE                 db    7
.eh_frame:000000000000D8DF                 db  10h
.eh_frame:000000000000D8E0                 db  14h
.eh_frame:000000000000D8E1                 db    0
.eh_frame:000000000000D8E2                 db    0
.eh_frame:000000000000D8E3                 db    0
.eh_frame:000000000000D8E4                 db  1Ch
.eh_frame:000000000000D8E5                 db    0
.eh_frame:000000000000D8E6                 db    0
.eh_frame:000000000000D8E7                 db    0
.eh_frame:000000000000D8E8                 db 0C8h
.eh_frame:000000000000D8E9                 db  6Fh ; o
.eh_frame:000000000000D8EA                 db 0FFh
.eh_frame:000000000000D8EB                 db 0FFh
.eh_frame:000000000000D8EC                 db  2Bh ; +
.eh_frame:000000000000D8ED                 db    0
.eh_frame:000000000000D8EE                 db    0
.eh_frame:000000000000D8EF                 db    0
.eh_frame:000000000000D8F0                 db    0
.eh_frame:000000000000D8F1                 db    0
.eh_frame:000000000000D8F2                 db    0
.eh_frame:000000000000D8F3                 db    0
.eh_frame:000000000000D8F4                 db    0
.eh_frame:000000000000D8F5                 db    0
.eh_frame:000000000000D8F6                 db    0
.eh_frame:000000000000D8F7                 db    0
.eh_frame:000000000000D8F8                 db  14h
.eh_frame:000000000000D8F9                 db    0
.eh_frame:000000000000D8FA                 db    0
.eh_frame:000000000000D8FB                 db    0
.eh_frame:000000000000D8FC                 db    0
.eh_frame:000000000000D8FD                 db    0
.eh_frame:000000000000D8FE                 db    0
.eh_frame:000000000000D8FF                 db    0
.eh_frame:000000000000D900                 db    1
.eh_frame:000000000000D901                 db  7Ah ; z
.eh_frame:000000000000D902                 db  52h ; R
.eh_frame:000000000000D903                 db    0
.eh_frame:000000000000D904                 db    1
.eh_frame:000000000000D905                 db  78h ; x
.eh_frame:000000000000D906                 db  10h
.eh_frame:000000000000D907                 db    1
.eh_frame:000000000000D908                 db  1Bh
.eh_frame:000000000000D909                 db  0Ch
.eh_frame:000000000000D90A                 db    7
.eh_frame:000000000000D90B                 db    8
.eh_frame:000000000000D90C                 db  90h
.eh_frame:000000000000D90D                 db    1
.eh_frame:000000000000D90E                 db    0
.eh_frame:000000000000D90F                 db    0
.eh_frame:000000000000D910                 db  24h ; $
.eh_frame:000000000000D911                 db    0
.eh_frame:000000000000D912                 db    0
.eh_frame:000000000000D913                 db    0
.eh_frame:000000000000D914                 db  1Ch
.eh_frame:000000000000D915                 db    0
.eh_frame:000000000000D916                 db    0
.eh_frame:000000000000D917                 db    0
.eh_frame:000000000000D918                 db 0A8h
.eh_frame:000000000000D919                 db  41h ; A
.eh_frame:000000000000D91A                 db 0FFh
.eh_frame:000000000000D91B                 db 0FFh
.eh_frame:000000000000D91C                 db  80h
.eh_frame:000000000000D91D                 db    4
.eh_frame:000000000000D91E                 db    0
.eh_frame:000000000000D91F                 db    0
.eh_frame:000000000000D920                 db    0
.eh_frame:000000000000D921                 db  0Eh
.eh_frame:000000000000D922                 db  10h
.eh_frame:000000000000D923                 db  46h ; F
.eh_frame:000000000000D924                 db  0Eh
.eh_frame:000000000000D925                 db  18h
.eh_frame:000000000000D926                 db  4Ah ; J
.eh_frame:000000000000D927                 db  0Fh
.eh_frame:000000000000D928                 db  0Bh
.eh_frame:000000000000D929                 db  77h ; w
.eh_frame:000000000000D92A                 db    8
.eh_frame:000000000000D92B                 db  80h
.eh_frame:000000000000D92C                 db    0
.eh_frame:000000000000D92D                 db  3Fh ; ?
.eh_frame:000000000000D92E                 db  1Ah
.eh_frame:000000000000D92F                 db  3Bh ; ;
.eh_frame:000000000000D930                 db  2Ah ; *
.eh_frame:000000000000D931                 db  33h ; 3
.eh_frame:000000000000D932                 db  24h ; $
.eh_frame:000000000000D933                 db  22h ; "
.eh_frame:000000000000D934                 db    0
.eh_frame:000000000000D935                 db    0
.eh_frame:000000000000D936                 db    0
.eh_frame:000000000000D937                 db    0
.eh_frame:000000000000D938                 db  14h
.eh_frame:000000000000D939                 db    0
.eh_frame:000000000000D93A                 db    0
.eh_frame:000000000000D93B                 db    0
.eh_frame:000000000000D93C                 db  44h ; D
.eh_frame:000000000000D93D                 db    0
.eh_frame:000000000000D93E                 db    0
.eh_frame:000000000000D93F                 db    0
.eh_frame:000000000000D940                 db    0
.eh_frame:000000000000D941                 db  46h ; F
.eh_frame:000000000000D942                 db 0FFh
.eh_frame:000000000000D943                 db 0FFh
.eh_frame:000000000000D944                 db    8
.eh_frame:000000000000D945                 db    0
.eh_frame:000000000000D946                 db    0
.eh_frame:000000000000D947                 db    0
.eh_frame:000000000000D948                 db    0
.eh_frame:000000000000D949                 db    0
.eh_frame:000000000000D94A                 db    0
.eh_frame:000000000000D94B                 db    0
.eh_frame:000000000000D94C                 db    0
.eh_frame:000000000000D94D                 db    0
.eh_frame:000000000000D94E                 db    0
.eh_frame:000000000000D94F                 db    0
.eh_frame:000000000000D950                 db  10h
.eh_frame:000000000000D951                 db    0
.eh_frame:000000000000D952                 db    0
.eh_frame:000000000000D953                 db    0
.eh_frame:000000000000D954                 db  5Ch ; \
.eh_frame:000000000000D955                 db    0
.eh_frame:000000000000D956                 db    0
.eh_frame:000000000000D957                 db    0
.eh_frame:000000000000D958                 db  68h ; h
.eh_frame:000000000000D959                 db  70h ; p
.eh_frame:000000000000D95A                 db 0FFh
.eh_frame:000000000000D95B                 db 0FFh
.eh_frame:000000000000D95C                 db  0Dh
.eh_frame:000000000000D95D                 db    0
.eh_frame:000000000000D95E                 db    0
.eh_frame:000000000000D95F                 db    0
.eh_frame:000000000000D960                 db    0
.eh_frame:000000000000D961                 db    0
.eh_frame:000000000000D962                 db    0
.eh_frame:000000000000D963                 db    0
.eh_frame:000000000000D964                 db  10h
.eh_frame:000000000000D965                 db    0
.eh_frame:000000000000D966                 db    0
.eh_frame:000000000000D967                 db    0
.eh_frame:000000000000D968                 db  70h ; p
.eh_frame:000000000000D969                 db    0
.eh_frame:000000000000D96A                 db    0
.eh_frame:000000000000D96B                 db    0
.eh_frame:000000000000D96C                 db  64h ; d
.eh_frame:000000000000D96D                 db  70h ; p
.eh_frame:000000000000D96E                 db 0FFh
.eh_frame:000000000000D96F                 db 0FFh
.eh_frame:000000000000D970                 db  0Ah
.eh_frame:000000000000D971                 db    0
.eh_frame:000000000000D972                 db    0
.eh_frame:000000000000D973                 db    0
.eh_frame:000000000000D974                 db    0
.eh_frame:000000000000D975                 db    0
.eh_frame:000000000000D976                 db    0
.eh_frame:000000000000D977                 db    0
.eh_frame:000000000000D978                 db  10h
.eh_frame:000000000000D979                 db    0
.eh_frame:000000000000D97A                 db    0
.eh_frame:000000000000D97B                 db    0
.eh_frame:000000000000D97C                 db  84h
.eh_frame:000000000000D97D                 db    0
.eh_frame:000000000000D97E                 db    0
.eh_frame:000000000000D97F                 db    0
.eh_frame:000000000000D980                 db  60h ; `
.eh_frame:000000000000D981                 db  70h ; p
.eh_frame:000000000000D982                 db 0FFh
.eh_frame:000000000000D983                 db 0FFh
.eh_frame:000000000000D984                 db  33h ; 3
.eh_frame:000000000000D985                 db    0
.eh_frame:000000000000D986                 db    0
.eh_frame:000000000000D987                 db    0
.eh_frame:000000000000D988                 db    0
.eh_frame:000000000000D989                 db    0
.eh_frame:000000000000D98A                 db    0
.eh_frame:000000000000D98B                 db    0
.eh_frame:000000000000D98C                 db  40h ; @
.eh_frame:000000000000D98D                 db    0
.eh_frame:000000000000D98E                 db    0
.eh_frame:000000000000D98F                 db    0
.eh_frame:000000000000D990                 db  98h
.eh_frame:000000000000D991                 db    0
.eh_frame:000000000000D992                 db    0
.eh_frame:000000000000D993                 db    0
.eh_frame:000000000000D994                 db  8Ch
.eh_frame:000000000000D995                 db  70h ; p
.eh_frame:000000000000D996                 db 0FFh
.eh_frame:000000000000D997                 db 0FFh
.eh_frame:000000000000D998                 db  6Bh ; k
.eh_frame:000000000000D999                 db    0
.eh_frame:000000000000D99A                 db    0
.eh_frame:000000000000D99B                 db    0
.eh_frame:000000000000D99C                 db    0
.eh_frame:000000000000D99D                 db  4Ah ; J
.eh_frame:000000000000D99E                 db  0Eh
.eh_frame:000000000000D99F                 db  10h
.eh_frame:000000000000D9A0                 db  8Ch
.eh_frame:000000000000D9A1                 db    2
.eh_frame:000000000000D9A2                 db  41h ; A
.eh_frame:000000000000D9A3                 db  0Eh
.eh_frame:000000000000D9A4                 db  18h
.eh_frame:000000000000D9A5                 db  86h
.eh_frame:000000000000D9A6                 db    3
.eh_frame:000000000000D9A7                 db  44h ; D
.eh_frame:000000000000D9A8                 db  0Eh
.eh_frame:000000000000D9A9                 db  20h
.eh_frame:000000000000D9AA                 db  83h
.eh_frame:000000000000D9AB                 db    4
.eh_frame:000000000000D9AC                 db  4Ch ; L
.eh_frame:000000000000D9AD                 db  0Eh
.eh_frame:000000000000D9AE                 db  18h
.eh_frame:000000000000D9AF                 db  41h ; A
.eh_frame:000000000000D9B0                 db  0Eh
.eh_frame:000000000000D9B1                 db  10h
.eh_frame:000000000000D9B2                 db  42h ; B
.eh_frame:000000000000D9B3                 db  0Eh
.eh_frame:000000000000D9B4                 db    8
.eh_frame:000000000000D9B5                 db  42h ; B
.eh_frame:000000000000D9B6                 db 0C3h
.eh_frame:000000000000D9B7                 db 0C6h
.eh_frame:000000000000D9B8                 db 0CCh
.eh_frame:000000000000D9B9                 db  48h ; H
.eh_frame:000000000000D9BA                 db  0Eh
.eh_frame:000000000000D9BB                 db  20h
.eh_frame:000000000000D9BC                 db  83h
.eh_frame:000000000000D9BD                 db    4
.eh_frame:000000000000D9BE                 db  86h
.eh_frame:000000000000D9BF                 db    3
.eh_frame:000000000000D9C0                 db  8Ch
.eh_frame:000000000000D9C1                 db    2
.eh_frame:000000000000D9C2                 db  75h ; u
.eh_frame:000000000000D9C3                 db 0C3h
.eh_frame:000000000000D9C4                 db  0Eh
.eh_frame:000000000000D9C5                 db  18h
.eh_frame:000000000000D9C6                 db  41h ; A
.eh_frame:000000000000D9C7                 db 0C6h
.eh_frame:000000000000D9C8                 db  0Eh
.eh_frame:000000000000D9C9                 db  10h
.eh_frame:000000000000D9CA                 db  42h ; B
.eh_frame:000000000000D9CB                 db 0CCh
.eh_frame:000000000000D9CC                 db  0Eh
.eh_frame:000000000000D9CD                 db    8
.eh_frame:000000000000D9CE                 db    0
.eh_frame:000000000000D9CF                 db    0
.eh_frame:000000000000D9D0                 db  28h ; (
.eh_frame:000000000000D9D1                 db    0
.eh_frame:000000000000D9D2                 db    0
.eh_frame:000000000000D9D3                 db    0
.eh_frame:000000000000D9D4                 db 0DCh
.eh_frame:000000000000D9D5                 db    0
.eh_frame:000000000000D9D6                 db    0
.eh_frame:000000000000D9D7                 db    0
.eh_frame:000000000000D9D8                 db 0B8h
.eh_frame:000000000000D9D9                 db  70h ; p
.eh_frame:000000000000D9DA                 db 0FFh
.eh_frame:000000000000D9DB                 db 0FFh
.eh_frame:000000000000D9DC                 db  78h ; x
.eh_frame:000000000000D9DD                 db    0
.eh_frame:000000000000D9DE                 db    0
.eh_frame:000000000000D9DF                 db    0
.eh_frame:000000000000D9E0                 db    0
.eh_frame:000000000000D9E1                 db  41h ; A
.eh_frame:000000000000D9E2                 db  0Eh
.eh_frame:000000000000D9E3                 db  10h
.eh_frame:000000000000D9E4                 db  86h
.eh_frame:000000000000D9E5                 db    2
.eh_frame:000000000000D9E6                 db  41h ; A
.eh_frame:000000000000D9E7                 db  0Eh
.eh_frame:000000000000D9E8                 db  18h
.eh_frame:000000000000D9E9                 db  83h
.eh_frame:000000000000D9EA                 db    3
.eh_frame:000000000000D9EB                 db  4Fh ; O
.eh_frame:000000000000D9EC                 db  0Eh
.eh_frame:000000000000D9ED                 db  20h
.eh_frame:000000000000D9EE                 db  55h ; U
.eh_frame:000000000000D9EF                 db  0Ah
.eh_frame:000000000000D9F0                 db  0Eh
.eh_frame:000000000000D9F1                 db  18h
.eh_frame:000000000000D9F2                 db  41h ; A
.eh_frame:000000000000D9F3                 db  0Eh
.eh_frame:000000000000D9F4                 db  10h
.eh_frame:000000000000D9F5                 db  41h ; A
.eh_frame:000000000000D9F6                 db  0Eh
.eh_frame:000000000000D9F7                 db    8
.eh_frame:000000000000D9F8                 db  41h ; A
.eh_frame:000000000000D9F9                 db  0Bh
.eh_frame:000000000000D9FA                 db    0
.eh_frame:000000000000D9FB                 db    0
.eh_frame:000000000000D9FC                 db  48h ; H
.eh_frame:000000000000D9FD                 db    0
.eh_frame:000000000000D9FE                 db    0
.eh_frame:000000000000D9FF                 db    0
.eh_frame:000000000000DA00                 db    8
.eh_frame:000000000000DA01                 db    1
.eh_frame:000000000000DA02                 db    0
.eh_frame:000000000000DA03                 db    0
.eh_frame:000000000000DA04                 db  0Ch
.eh_frame:000000000000DA05                 db  71h ; q
.eh_frame:000000000000DA06                 db 0FFh
.eh_frame:000000000000DA07                 db 0FFh
.eh_frame:000000000000DA08                 db  36h ; 6
.eh_frame:000000000000DA09                 db    1
.eh_frame:000000000000DA0A                 db    0
.eh_frame:000000000000DA0B                 db    0
.eh_frame:000000000000DA0C                 db    0
.eh_frame:000000000000DA0D                 db  42h ; B
.eh_frame:000000000000DA0E                 db  0Eh
.eh_frame:000000000000DA0F                 db  10h
.eh_frame:000000000000DA10                 db  8Fh
.eh_frame:000000000000DA11                 db    2
.eh_frame:000000000000DA12                 db  42h ; B
.eh_frame:000000000000DA13                 db  0Eh
.eh_frame:000000000000DA14                 db  18h
.eh_frame:000000000000DA15                 db  8Eh
.eh_frame:000000000000DA16                 db    3
.eh_frame:000000000000DA17                 db  42h ; B
.eh_frame:000000000000DA18                 db  0Eh
.eh_frame:000000000000DA19                 db  20h
.eh_frame:000000000000DA1A                 db  8Dh
.eh_frame:000000000000DA1B                 db    4
.eh_frame:000000000000DA1C                 db  42h ; B
.eh_frame:000000000000DA1D                 db  0Eh
.eh_frame:000000000000DA1E                 db  28h ; (
.eh_frame:000000000000DA1F                 db  8Ch
.eh_frame:000000000000DA20                 db    5
.eh_frame:000000000000DA21                 db  41h ; A
.eh_frame:000000000000DA22                 db  0Eh
.eh_frame:000000000000DA23                 db  30h ; 0
.eh_frame:000000000000DA24                 db  86h
.eh_frame:000000000000DA25                 db    6
.eh_frame:000000000000DA26                 db  41h ; A
.eh_frame:000000000000DA27                 db  0Eh
.eh_frame:000000000000DA28                 db  38h ; 8
.eh_frame:000000000000DA29                 db  83h
.eh_frame:000000000000DA2A                 db    7
.eh_frame:000000000000DA2B                 db  47h ; G
.eh_frame:000000000000DA2C                 db  0Eh
.eh_frame:000000000000DA2D                 db 0E0h
.eh_frame:000000000000DA2E                 db  40h ; @
.eh_frame:000000000000DA2F                 db    2
.eh_frame:000000000000DA30                 db 0B1h
.eh_frame:000000000000DA31                 db  0Ah
.eh_frame:000000000000DA32                 db  0Eh
.eh_frame:000000000000DA33                 db  38h ; 8
.eh_frame:000000000000DA34                 db  41h ; A
.eh_frame:000000000000DA35                 db  0Eh
.eh_frame:000000000000DA36                 db  30h ; 0
.eh_frame:000000000000DA37                 db  41h ; A
.eh_frame:000000000000DA38                 db  0Eh
.eh_frame:000000000000DA39                 db  28h ; (
.eh_frame:000000000000DA3A                 db  42h ; B
.eh_frame:000000000000DA3B                 db  0Eh
.eh_frame:000000000000DA3C                 db  20h
.eh_frame:000000000000DA3D                 db  42h ; B
.eh_frame:000000000000DA3E                 db  0Eh
.eh_frame:000000000000DA3F                 db  18h
.eh_frame:000000000000DA40                 db  42h ; B
.eh_frame:000000000000DA41                 db  0Eh
.eh_frame:000000000000DA42                 db  10h
.eh_frame:000000000000DA43                 db  42h ; B
.eh_frame:000000000000DA44                 db  0Eh
.eh_frame:000000000000DA45                 db    8
.eh_frame:000000000000DA46                 db  44h ; D
.eh_frame:000000000000DA47                 db  0Bh
.eh_frame:000000000000DA48                 db  48h ; H
.eh_frame:000000000000DA49                 db    0
.eh_frame:000000000000DA4A                 db    0
.eh_frame:000000000000DA4B                 db    0
.eh_frame:000000000000DA4C                 db  54h ; T
.eh_frame:000000000000DA4D                 db    1
.eh_frame:000000000000DA4E                 db    0
.eh_frame:000000000000DA4F                 db    0
.eh_frame:000000000000DA50                 db    0
.eh_frame:000000000000DA51                 db  72h ; r
.eh_frame:000000000000DA52                 db 0FFh
.eh_frame:000000000000DA53                 db 0FFh
.eh_frame:000000000000DA54                 db  43h ; C
.eh_frame:000000000000DA55                 db    1
.eh_frame:000000000000DA56                 db    0
.eh_frame:000000000000DA57                 db    0
.eh_frame:000000000000DA58                 db    0
.eh_frame:000000000000DA59                 db  42h ; B
.eh_frame:000000000000DA5A                 db  0Eh
.eh_frame:000000000000DA5B                 db  10h
.eh_frame:000000000000DA5C                 db  8Fh
.eh_frame:000000000000DA5D                 db    2
.eh_frame:000000000000DA5E                 db  42h ; B
.eh_frame:000000000000DA5F                 db  0Eh
.eh_frame:000000000000DA60                 db  18h
.eh_frame:000000000000DA61                 db  8Eh
.eh_frame:000000000000DA62                 db    3
.eh_frame:000000000000DA63                 db  45h ; E
.eh_frame:000000000000DA64                 db  0Eh
.eh_frame:000000000000DA65                 db  20h
.eh_frame:000000000000DA66                 db  8Dh
.eh_frame:000000000000DA67                 db    4
.eh_frame:000000000000DA68                 db  42h ; B
.eh_frame:000000000000DA69                 db  0Eh
.eh_frame:000000000000DA6A                 db  28h ; (
.eh_frame:000000000000DA6B                 db  8Ch
.eh_frame:000000000000DA6C                 db    5
.eh_frame:000000000000DA6D                 db  44h ; D
.eh_frame:000000000000DA6E                 db  0Eh
.eh_frame:000000000000DA6F                 db  30h ; 0
.eh_frame:000000000000DA70                 db  86h
.eh_frame:000000000000DA71                 db    6
.eh_frame:000000000000DA72                 db  41h ; A
.eh_frame:000000000000DA73                 db  0Eh
.eh_frame:000000000000DA74                 db  38h ; 8
.eh_frame:000000000000DA75                 db  83h
.eh_frame:000000000000DA76                 db    7
.eh_frame:000000000000DA77                 db  4Ch ; L
.eh_frame:000000000000DA78                 db  0Eh
.eh_frame:000000000000DA79                 db 0E0h
.eh_frame:000000000000DA7A                 db  40h ; @
.eh_frame:000000000000DA7B                 db    2
.eh_frame:000000000000DA7C                 db 0DEh
.eh_frame:000000000000DA7D                 db  0Ah
.eh_frame:000000000000DA7E                 db  0Eh
.eh_frame:000000000000DA7F                 db  38h ; 8
.eh_frame:000000000000DA80                 db  41h ; A
.eh_frame:000000000000DA81                 db  0Eh
.eh_frame:000000000000DA82                 db  30h ; 0
.eh_frame:000000000000DA83                 db  41h ; A
.eh_frame:000000000000DA84                 db  0Eh
.eh_frame:000000000000DA85                 db  28h ; (
.eh_frame:000000000000DA86                 db  42h ; B
.eh_frame:000000000000DA87                 db  0Eh
.eh_frame:000000000000DA88                 db  20h
.eh_frame:000000000000DA89                 db  42h ; B
.eh_frame:000000000000DA8A                 db  0Eh
.eh_frame:000000000000DA8B                 db  18h
.eh_frame:000000000000DA8C                 db  42h ; B
.eh_frame:000000000000DA8D                 db  0Eh
.eh_frame:000000000000DA8E                 db  10h
.eh_frame:000000000000DA8F                 db  42h ; B
.eh_frame:000000000000DA90                 db  0Eh
.eh_frame:000000000000DA91                 db    8
.eh_frame:000000000000DA92                 db  41h ; A
.eh_frame:000000000000DA93                 db  0Bh
.eh_frame:000000000000DA94                 db  40h ; @
.eh_frame:000000000000DA95                 db    0
.eh_frame:000000000000DA96                 db    0
.eh_frame:000000000000DA97                 db    0
.eh_frame:000000000000DA98                 db 0A0h
.eh_frame:000000000000DA99                 db    1
.eh_frame:000000000000DA9A                 db    0
.eh_frame:000000000000DA9B                 db    0
.eh_frame:000000000000DA9C                 db    4
.eh_frame:000000000000DA9D                 db  73h ; s
.eh_frame:000000000000DA9E                 db 0FFh
.eh_frame:000000000000DA9F                 db 0FFh
.eh_frame:000000000000DAA0                 db 0F8h
.eh_frame:000000000000DAA1                 db    0
.eh_frame:000000000000DAA2                 db    0
.eh_frame:000000000000DAA3                 db    0
.eh_frame:000000000000DAA4                 db    0
.eh_frame:000000000000DAA5                 db  42h ; B
.eh_frame:000000000000DAA6                 db  0Eh
.eh_frame:000000000000DAA7                 db  10h
.eh_frame:000000000000DAA8                 db  8Eh
.eh_frame:000000000000DAA9                 db    2
.eh_frame:000000000000DAAA                 db  42h ; B
.eh_frame:000000000000DAAB                 db  0Eh
.eh_frame:000000000000DAAC                 db  18h
.eh_frame:000000000000DAAD                 db  8Dh
.eh_frame:000000000000DAAE                 db    3
.eh_frame:000000000000DAAF                 db  42h ; B
.eh_frame:000000000000DAB0                 db  0Eh
.eh_frame:000000000000DAB1                 db  20h
.eh_frame:000000000000DAB2                 db  8Ch
.eh_frame:000000000000DAB3                 db    4
.eh_frame:000000000000DAB4                 db  41h ; A
.eh_frame:000000000000DAB5                 db  0Eh
.eh_frame:000000000000DAB6                 db  28h ; (
.eh_frame:000000000000DAB7                 db  86h
.eh_frame:000000000000DAB8                 db    5
.eh_frame:000000000000DAB9                 db  41h ; A
.eh_frame:000000000000DABA                 db  0Eh
.eh_frame:000000000000DABB                 db  30h ; 0
.eh_frame:000000000000DABC                 db  83h
.eh_frame:000000000000DABD                 db    6
.eh_frame:000000000000DABE                 db  47h ; G
.eh_frame:000000000000DABF                 db  0Eh
.eh_frame:000000000000DAC0                 db 0C0h
.eh_frame:000000000000DAC1                 db  40h ; @
.eh_frame:000000000000DAC2                 db    2
.eh_frame:000000000000DAC3                 db  95h
.eh_frame:000000000000DAC4                 db  0Ah
.eh_frame:000000000000DAC5                 db  0Eh
.eh_frame:000000000000DAC6                 db  30h ; 0
.eh_frame:000000000000DAC7                 db  41h ; A
.eh_frame:000000000000DAC8                 db  0Eh
.eh_frame:000000000000DAC9                 db  28h ; (
.eh_frame:000000000000DACA                 db  41h ; A
.eh_frame:000000000000DACB                 db  0Eh
.eh_frame:000000000000DACC                 db  20h
.eh_frame:000000000000DACD                 db  42h ; B
.eh_frame:000000000000DACE                 db  0Eh
.eh_frame:000000000000DACF                 db  18h
.eh_frame:000000000000DAD0                 db  42h ; B
.eh_frame:000000000000DAD1                 db  0Eh
.eh_frame:000000000000DAD2                 db  10h
.eh_frame:000000000000DAD3                 db  42h ; B
.eh_frame:000000000000DAD4                 db  0Eh
.eh_frame:000000000000DAD5                 db    8
.eh_frame:000000000000DAD6                 db  44h ; D
.eh_frame:000000000000DAD7                 db  0Bh
.eh_frame:000000000000DAD8                 db  38h ; 8
.eh_frame:000000000000DAD9                 db    0
.eh_frame:000000000000DADA                 db    0
.eh_frame:000000000000DADB                 db    0
.eh_frame:000000000000DADC                 db 0E4h
.eh_frame:000000000000DADD                 db    1
.eh_frame:000000000000DADE                 db    0
.eh_frame:000000000000DADF                 db    0
.eh_frame:000000000000DAE0                 db 0C0h
.eh_frame:000000000000DAE1                 db  73h ; s
.eh_frame:000000000000DAE2                 db 0FFh
.eh_frame:000000000000DAE3                 db 0FFh
.eh_frame:000000000000DAE4                 db 0CBh
.eh_frame:000000000000DAE5                 db    0
.eh_frame:000000000000DAE6                 db    0
.eh_frame:000000000000DAE7                 db    0
.eh_frame:000000000000DAE8                 db    0
.eh_frame:000000000000DAE9                 db  42h ; B
.eh_frame:000000000000DAEA                 db  0Eh
.eh_frame:000000000000DAEB                 db  10h
.eh_frame:000000000000DAEC                 db  8Dh
.eh_frame:000000000000DAED                 db    2
.eh_frame:000000000000DAEE                 db  42h ; B
.eh_frame:000000000000DAEF                 db  0Eh
.eh_frame:000000000000DAF0                 db  18h
.eh_frame:000000000000DAF1                 db  8Ch
.eh_frame:000000000000DAF2                 db    3
.eh_frame:000000000000DAF3                 db  44h ; D
.eh_frame:000000000000DAF4                 db  0Eh
.eh_frame:000000000000DAF5                 db  20h
.eh_frame:000000000000DAF6                 db  86h
.eh_frame:000000000000DAF7                 db    4
.eh_frame:000000000000DAF8                 db  41h ; A
.eh_frame:000000000000DAF9                 db  0Eh
.eh_frame:000000000000DAFA                 db  28h ; (
.eh_frame:000000000000DAFB                 db  83h
.eh_frame:000000000000DAFC                 db    5
.eh_frame:000000000000DAFD                 db  49h ; I
.eh_frame:000000000000DAFE                 db  0Eh
.eh_frame:000000000000DAFF                 db  50h ; P
.eh_frame:000000000000DB00                 db  72h ; r
.eh_frame:000000000000DB01                 db  0Ah
.eh_frame:000000000000DB02                 db  0Eh
.eh_frame:000000000000DB03                 db  28h ; (
.eh_frame:000000000000DB04                 db  41h ; A
.eh_frame:000000000000DB05                 db  0Eh
.eh_frame:000000000000DB06                 db  20h
.eh_frame:000000000000DB07                 db  41h ; A
.eh_frame:000000000000DB08                 db  0Eh
.eh_frame:000000000000DB09                 db  18h
.eh_frame:000000000000DB0A                 db  42h ; B
.eh_frame:000000000000DB0B                 db  0Eh
.eh_frame:000000000000DB0C                 db  10h
.eh_frame:000000000000DB0D                 db  42h ; B
.eh_frame:000000000000DB0E                 db  0Eh
.eh_frame:000000000000DB0F                 db    8
.eh_frame:000000000000DB10                 db  46h ; F
.eh_frame:000000000000DB11                 db  0Bh
.eh_frame:000000000000DB12                 db    0
.eh_frame:000000000000DB13                 db    0
.eh_frame:000000000000DB14                 db  4Ch ; L
.eh_frame:000000000000DB15                 db    0
.eh_frame:000000000000DB16                 db    0
.eh_frame:000000000000DB17                 db    0
.eh_frame:000000000000DB18                 db  20h
.eh_frame:000000000000DB19                 db    2
.eh_frame:000000000000DB1A                 db    0
.eh_frame:000000000000DB1B                 db    0
.eh_frame:000000000000DB1C                 db  54h ; T
.eh_frame:000000000000DB1D                 db  74h ; t
.eh_frame:000000000000DB1E                 db 0FFh
.eh_frame:000000000000DB1F                 db 0FFh
.eh_frame:000000000000DB20                 db  55h ; U
.eh_frame:000000000000DB21                 db    2
.eh_frame:000000000000DB22                 db    0
.eh_frame:000000000000DB23                 db    0
.eh_frame:000000000000DB24                 db    0
.eh_frame:000000000000DB25                 db  42h ; B
.eh_frame:000000000000DB26                 db  0Eh
.eh_frame:000000000000DB27                 db  10h
.eh_frame:000000000000DB28                 db  8Fh
.eh_frame:000000000000DB29                 db    2
.eh_frame:000000000000DB2A                 db  42h ; B
.eh_frame:000000000000DB2B                 db  0Eh
.eh_frame:000000000000DB2C                 db  18h
.eh_frame:000000000000DB2D                 db  8Eh
.eh_frame:000000000000DB2E                 db    3
.eh_frame:000000000000DB2F                 db  42h ; B
.eh_frame:000000000000DB30                 db  0Eh
.eh_frame:000000000000DB31                 db  20h
.eh_frame:000000000000DB32                 db  8Dh
.eh_frame:000000000000DB33                 db    4
.eh_frame:000000000000DB34                 db  42h ; B
.eh_frame:000000000000DB35                 db  0Eh
.eh_frame:000000000000DB36                 db  28h ; (
.eh_frame:000000000000DB37                 db  8Ch
.eh_frame:000000000000DB38                 db    5
.eh_frame:000000000000DB39                 db  41h ; A
.eh_frame:000000000000DB3A                 db  0Eh
.eh_frame:000000000000DB3B                 db  30h ; 0
.eh_frame:000000000000DB3C                 db  86h
.eh_frame:000000000000DB3D                 db    6
.eh_frame:000000000000DB3E                 db  41h ; A
.eh_frame:000000000000DB3F                 db  0Eh
.eh_frame:000000000000DB40                 db  38h ; 8
.eh_frame:000000000000DB41                 db  83h
.eh_frame:000000000000DB42                 db    7
.eh_frame:000000000000DB43                 db  47h ; G
.eh_frame:000000000000DB44                 db  0Eh
.eh_frame:000000000000DB45                 db 0F0h
.eh_frame:000000000000DB46                 db  40h ; @
.eh_frame:000000000000DB47                 db    3
.eh_frame:000000000000DB48                 db  72h ; r
.eh_frame:000000000000DB49                 db    1
.eh_frame:000000000000DB4A                 db  0Ah
.eh_frame:000000000000DB4B                 db  0Eh
.eh_frame:000000000000DB4C                 db  38h ; 8
.eh_frame:000000000000DB4D                 db  41h ; A
.eh_frame:000000000000DB4E                 db  0Eh
.eh_frame:000000000000DB4F                 db  30h ; 0
.eh_frame:000000000000DB50                 db  41h ; A
.eh_frame:000000000000DB51                 db  0Eh
.eh_frame:000000000000DB52                 db  28h ; (
.eh_frame:000000000000DB53                 db  42h ; B
.eh_frame:000000000000DB54                 db  0Eh
.eh_frame:000000000000DB55                 db  20h
.eh_frame:000000000000DB56                 db  42h ; B
.eh_frame:000000000000DB57                 db  0Eh
.eh_frame:000000000000DB58                 db  18h
.eh_frame:000000000000DB59                 db  42h ; B
.eh_frame:000000000000DB5A                 db  0Eh
.eh_frame:000000000000DB5B                 db  10h
.eh_frame:000000000000DB5C                 db  42h ; B
.eh_frame:000000000000DB5D                 db  0Eh
.eh_frame:000000000000DB5E                 db    8
.eh_frame:000000000000DB5F                 db  43h ; C
.eh_frame:000000000000DB60                 db  0Bh
.eh_frame:000000000000DB61                 db    0
.eh_frame:000000000000DB62                 db    0
.eh_frame:000000000000DB63                 db    0
.eh_frame:000000000000DB64                 db  40h ; @
.eh_frame:000000000000DB65                 db    0
.eh_frame:000000000000DB66                 db    0
.eh_frame:000000000000DB67                 db    0
.eh_frame:000000000000DB68                 db  70h ; p
.eh_frame:000000000000DB69                 db    2
.eh_frame:000000000000DB6A                 db    0
.eh_frame:000000000000DB6B                 db    0
.eh_frame:000000000000DB6C                 db  64h ; d
.eh_frame:000000000000DB6D                 db  76h ; v
.eh_frame:000000000000DB6E                 db 0FFh
.eh_frame:000000000000DB6F                 db 0FFh
.eh_frame:000000000000DB70                 db 0C7h
.eh_frame:000000000000DB71                 db    1
.eh_frame:000000000000DB72                 db    0
.eh_frame:000000000000DB73                 db    0
.eh_frame:000000000000DB74                 db    0
.eh_frame:000000000000DB75                 db  42h ; B
.eh_frame:000000000000DB76                 db  0Eh
.eh_frame:000000000000DB77                 db  10h
.eh_frame:000000000000DB78                 db  8Eh
.eh_frame:000000000000DB79                 db    2
.eh_frame:000000000000DB7A                 db  42h ; B
.eh_frame:000000000000DB7B                 db  0Eh
.eh_frame:000000000000DB7C                 db  18h
.eh_frame:000000000000DB7D                 db  8Dh
.eh_frame:000000000000DB7E                 db    3
.eh_frame:000000000000DB7F                 db  42h ; B
.eh_frame:000000000000DB80                 db  0Eh
.eh_frame:000000000000DB81                 db  20h
.eh_frame:000000000000DB82                 db  8Ch
.eh_frame:000000000000DB83                 db    4
.eh_frame:000000000000DB84                 db  41h ; A
.eh_frame:000000000000DB85                 db  0Eh
.eh_frame:000000000000DB86                 db  28h ; (
.eh_frame:000000000000DB87                 db  86h
.eh_frame:000000000000DB88                 db    5
.eh_frame:000000000000DB89                 db  41h ; A
.eh_frame:000000000000DB8A                 db  0Eh
.eh_frame:000000000000DB8B                 db  30h ; 0
.eh_frame:000000000000DB8C                 db  83h
.eh_frame:000000000000DB8D                 db    6
.eh_frame:000000000000DB8E                 db  47h ; G
.eh_frame:000000000000DB8F                 db  0Eh
.eh_frame:000000000000DB90                 db 0D0h
.eh_frame:000000000000DB91                 db    1
.eh_frame:000000000000DB92                 db  77h ; w
.eh_frame:000000000000DB93                 db  0Ah
.eh_frame:000000000000DB94                 db  0Eh
.eh_frame:000000000000DB95                 db  30h ; 0
.eh_frame:000000000000DB96                 db  41h ; A
.eh_frame:000000000000DB97                 db  0Eh
.eh_frame:000000000000DB98                 db  28h ; (
.eh_frame:000000000000DB99                 db  41h ; A
.eh_frame:000000000000DB9A                 db  0Eh
.eh_frame:000000000000DB9B                 db  20h
.eh_frame:000000000000DB9C                 db  42h ; B
.eh_frame:000000000000DB9D                 db  0Eh
.eh_frame:000000000000DB9E                 db  18h
.eh_frame:000000000000DB9F                 db  42h ; B
.eh_frame:000000000000DBA0                 db  0Eh
.eh_frame:000000000000DBA1                 db  10h
.eh_frame:000000000000DBA2                 db  42h ; B
.eh_frame:000000000000DBA3                 db  0Eh
.eh_frame:000000000000DBA4                 db    8
.eh_frame:000000000000DBA5                 db  42h ; B
.eh_frame:000000000000DBA6                 db  0Bh
.eh_frame:000000000000DBA7                 db    0
.eh_frame:000000000000DBA8                 db  30h ; 0
.eh_frame:000000000000DBA9                 db    0
.eh_frame:000000000000DBAA                 db    0
.eh_frame:000000000000DBAB                 db    0
.eh_frame:000000000000DBAC                 db 0B4h
.eh_frame:000000000000DBAD                 db    2
.eh_frame:000000000000DBAE                 db    0
.eh_frame:000000000000DBAF                 db    0
.eh_frame:000000000000DBB0                 db 0F0h
.eh_frame:000000000000DBB1                 db  77h ; w
.eh_frame:000000000000DBB2                 db 0FFh
.eh_frame:000000000000DBB3                 db 0FFh
.eh_frame:000000000000DBB4                 db 0ECh
.eh_frame:000000000000DBB5                 db    6
.eh_frame:000000000000DBB6                 db    0
.eh_frame:000000000000DBB7                 db    0
.eh_frame:000000000000DBB8                 db    0
.eh_frame:000000000000DBB9                 db  42h ; B
.eh_frame:000000000000DBBA                 db  0Eh
.eh_frame:000000000000DBBB                 db  10h
.eh_frame:000000000000DBBC                 db  8Ch
.eh_frame:000000000000DBBD                 db    2
.eh_frame:000000000000DBBE                 db  41h ; A
.eh_frame:000000000000DBBF                 db  0Eh
.eh_frame:000000000000DBC0                 db  18h
.eh_frame:000000000000DBC1                 db  86h
.eh_frame:000000000000DBC2                 db    3
.eh_frame:000000000000DBC3                 db  44h ; D
.eh_frame:000000000000DBC4                 db  0Eh
.eh_frame:000000000000DBC5                 db  20h
.eh_frame:000000000000DBC6                 db  83h
.eh_frame:000000000000DBC7                 db    4
.eh_frame:000000000000DBC8                 db  44h ; D
.eh_frame:000000000000DBC9                 db  0Eh
.eh_frame:000000000000DBCA                 db 0A0h
.eh_frame:000000000000DBCB                 db    1
.eh_frame:000000000000DBCC                 db    2
.eh_frame:000000000000DBCD                 db  4Ch ; L
.eh_frame:000000000000DBCE                 db  0Ah
.eh_frame:000000000000DBCF                 db  0Eh
.eh_frame:000000000000DBD0                 db  20h
.eh_frame:000000000000DBD1                 db  41h ; A
.eh_frame:000000000000DBD2                 db  0Eh
.eh_frame:000000000000DBD3                 db  18h
.eh_frame:000000000000DBD4                 db  41h ; A
.eh_frame:000000000000DBD5                 db  0Eh
.eh_frame:000000000000DBD6                 db  10h
.eh_frame:000000000000DBD7                 db  42h ; B
.eh_frame:000000000000DBD8                 db  0Eh
.eh_frame:000000000000DBD9                 db    8
.eh_frame:000000000000DBDA                 db  45h ; E
.eh_frame:000000000000DBDB                 db  0Bh
.eh_frame:000000000000DBDC                 db  4Ch ; L
.eh_frame:000000000000DBDD                 db    0
.eh_frame:000000000000DBDE                 db    0
.eh_frame:000000000000DBDF                 db    0
.eh_frame:000000000000DBE0                 db 0E8h
.eh_frame:000000000000DBE1                 db    2
.eh_frame:000000000000DBE2                 db    0
.eh_frame:000000000000DBE3                 db    0
.eh_frame:000000000000DBE4                 db 0ACh
.eh_frame:000000000000DBE5                 db  7Eh ; ~
.eh_frame:000000000000DBE6                 db 0FFh
.eh_frame:000000000000DBE7                 db 0FFh
.eh_frame:000000000000DBE8                 db  7Fh ; 
.eh_frame:000000000000DBE9                 db    6
.eh_frame:000000000000DBEA                 db    0
.eh_frame:000000000000DBEB                 db    0
.eh_frame:000000000000DBEC                 db    0
.eh_frame:000000000000DBED                 db  42h ; B
.eh_frame:000000000000DBEE                 db  0Eh
.eh_frame:000000000000DBEF                 db  10h
.eh_frame:000000000000DBF0                 db  8Fh
.eh_frame:000000000000DBF1                 db    2
.eh_frame:000000000000DBF2                 db  42h ; B
.eh_frame:000000000000DBF3                 db  0Eh
.eh_frame:000000000000DBF4                 db  18h
.eh_frame:000000000000DBF5                 db  8Eh
.eh_frame:000000000000DBF6                 db    3
.eh_frame:000000000000DBF7                 db  47h ; G
.eh_frame:000000000000DBF8                 db  0Eh
.eh_frame:000000000000DBF9                 db  20h
.eh_frame:000000000000DBFA                 db  8Dh
.eh_frame:000000000000DBFB                 db    4
.eh_frame:000000000000DBFC                 db  42h ; B
.eh_frame:000000000000DBFD                 db  0Eh
.eh_frame:000000000000DBFE                 db  28h ; (
.eh_frame:000000000000DBFF                 db  8Ch
.eh_frame:000000000000DC00                 db    5
.eh_frame:000000000000DC01                 db  44h ; D
.eh_frame:000000000000DC02                 db  0Eh
.eh_frame:000000000000DC03                 db  30h ; 0
.eh_frame:000000000000DC04                 db  86h
.eh_frame:000000000000DC05                 db    6
.eh_frame:000000000000DC06                 db  41h ; A
.eh_frame:000000000000DC07                 db  0Eh
.eh_frame:000000000000DC08                 db  38h ; 8
.eh_frame:000000000000DC09                 db  83h
.eh_frame:000000000000DC0A                 db    7
.eh_frame:000000000000DC0B                 db  4Ah ; J
.eh_frame:000000000000DC0C                 db  0Eh
.eh_frame:000000000000DC0D                 db 0F0h
.eh_frame:000000000000DC0E                 db    1
.eh_frame:000000000000DC0F                 db    3
.eh_frame:000000000000DC10                 db  40h ; @
.eh_frame:000000000000DC11                 db    1
.eh_frame:000000000000DC12                 db  0Ah
.eh_frame:000000000000DC13                 db  0Eh
.eh_frame:000000000000DC14                 db  38h ; 8
.eh_frame:000000000000DC15                 db  41h ; A
.eh_frame:000000000000DC16                 db  0Eh
.eh_frame:000000000000DC17                 db  30h ; 0
.eh_frame:000000000000DC18                 db  41h ; A
.eh_frame:000000000000DC19                 db  0Eh
.eh_frame:000000000000DC1A                 db  28h ; (
.eh_frame:000000000000DC1B                 db  42h ; B
.eh_frame:000000000000DC1C                 db  0Eh
.eh_frame:000000000000DC1D                 db  20h
.eh_frame:000000000000DC1E                 db  42h ; B
.eh_frame:000000000000DC1F                 db  0Eh
.eh_frame:000000000000DC20                 db  18h
.eh_frame:000000000000DC21                 db  42h ; B
.eh_frame:000000000000DC22                 db  0Eh
.eh_frame:000000000000DC23                 db  10h
.eh_frame:000000000000DC24                 db  42h ; B
.eh_frame:000000000000DC25                 db  0Eh
.eh_frame:000000000000DC26                 db    8
.eh_frame:000000000000DC27                 db  4Ah ; J
.eh_frame:000000000000DC28                 db  0Bh
.eh_frame:000000000000DC29                 db    0
.eh_frame:000000000000DC2A                 db    0
.eh_frame:000000000000DC2B                 db    0
.eh_frame:000000000000DC2C                 db  28h ; (
.eh_frame:000000000000DC2D                 db    0
.eh_frame:000000000000DC2E                 db    0
.eh_frame:000000000000DC2F                 db    0
.eh_frame:000000000000DC30                 db  38h ; 8
.eh_frame:000000000000DC31                 db    3
.eh_frame:000000000000DC32                 db    0
.eh_frame:000000000000DC33                 db    0
.eh_frame:000000000000DC34                 db 0DCh
.eh_frame:000000000000DC35                 db  84h
.eh_frame:000000000000DC36                 db 0FFh
.eh_frame:000000000000DC37                 db 0FFh
.eh_frame:000000000000DC38                 db 0BAh
.eh_frame:000000000000DC39                 db    4
.eh_frame:000000000000DC3A                 db    0
.eh_frame:000000000000DC3B                 db    0
.eh_frame:000000000000DC3C                 db    0
.eh_frame:000000000000DC3D                 db  42h ; B
.eh_frame:000000000000DC3E                 db  0Eh
.eh_frame:000000000000DC3F                 db  10h
.eh_frame:000000000000DC40                 db  8Dh
.eh_frame:000000000000DC41                 db    2
.eh_frame:000000000000DC42                 db  42h ; B
.eh_frame:000000000000DC43                 db  0Eh
.eh_frame:000000000000DC44                 db  18h
.eh_frame:000000000000DC45                 db  8Ch
.eh_frame:000000000000DC46                 db    3
.eh_frame:000000000000DC47                 db  46h ; F
.eh_frame:000000000000DC48                 db  0Eh
.eh_frame:000000000000DC49                 db  20h
.eh_frame:000000000000DC4A                 db  86h
.eh_frame:000000000000DC4B                 db    4
.eh_frame:000000000000DC4C                 db  41h ; A
.eh_frame:000000000000DC4D                 db  0Eh
.eh_frame:000000000000DC4E                 db  28h ; (
.eh_frame:000000000000DC4F                 db  83h
.eh_frame:000000000000DC50                 db    5
.eh_frame:000000000000DC51                 db  49h ; I
.eh_frame:000000000000DC52                 db  0Eh
.eh_frame:000000000000DC53                 db 0B0h
.eh_frame:000000000000DC54                 db    1
.eh_frame:000000000000DC55                 db    0
.eh_frame:000000000000DC56                 db    0
.eh_frame:000000000000DC57                 db    0
.eh_frame:000000000000DC58                 db  64h ; d
.eh_frame:000000000000DC59                 db    0
.eh_frame:000000000000DC5A                 db    0
.eh_frame:000000000000DC5B                 db    0
.eh_frame:000000000000DC5C                 db  64h ; d
.eh_frame:000000000000DC5D                 db    3
.eh_frame:000000000000DC5E                 db    0
.eh_frame:000000000000DC5F                 db    0
.eh_frame:000000000000DC60                 db 0F0h
.eh_frame:000000000000DC61                 db  42h ; B
.eh_frame:000000000000DC62                 db 0FFh
.eh_frame:000000000000DC63                 db 0FFh
.eh_frame:000000000000DC64                 db  5Dh ; ]
.eh_frame:000000000000DC65                 db  29h ; )
.eh_frame:000000000000DC66                 db    0
.eh_frame:000000000000DC67                 db    0
.eh_frame:000000000000DC68                 db    0
.eh_frame:000000000000DC69                 db  42h ; B
.eh_frame:000000000000DC6A                 db  0Eh
.eh_frame:000000000000DC6B                 db  10h
.eh_frame:000000000000DC6C                 db  8Fh
.eh_frame:000000000000DC6D                 db    2
.eh_frame:000000000000DC6E                 db  42h ; B
.eh_frame:000000000000DC6F                 db  0Eh
.eh_frame:000000000000DC70                 db  18h
.eh_frame:000000000000DC71                 db  8Eh
.eh_frame:000000000000DC72                 db    3
.eh_frame:000000000000DC73                 db  42h ; B
.eh_frame:000000000000DC74                 db  0Eh
.eh_frame:000000000000DC75                 db  20h
.eh_frame:000000000000DC76                 db  8Dh
.eh_frame:000000000000DC77                 db    4
.eh_frame:000000000000DC78                 db  42h ; B
.eh_frame:000000000000DC79                 db  0Eh
.eh_frame:000000000000DC7A                 db  28h ; (
.eh_frame:000000000000DC7B                 db  8Ch
.eh_frame:000000000000DC7C                 db    5
.eh_frame:000000000000DC7D                 db  41h ; A
.eh_frame:000000000000DC7E                 db  0Eh
.eh_frame:000000000000DC7F                 db  30h ; 0
.eh_frame:000000000000DC80                 db  86h
.eh_frame:000000000000DC81                 db    6
.eh_frame:000000000000DC82                 db  41h ; A
.eh_frame:000000000000DC83                 db  0Eh
.eh_frame:000000000000DC84                 db  38h ; 8
.eh_frame:000000000000DC85                 db  83h
.eh_frame:000000000000DC86                 db    7
.eh_frame:000000000000DC87                 db  4Ch ; L
.eh_frame:000000000000DC88                 db  0Eh
.eh_frame:000000000000DC89                 db  80h
.eh_frame:000000000000DC8A                 db    6
.eh_frame:000000000000DC8B                 db    3
.eh_frame:000000000000DC8C                 db 0E4h
.eh_frame:000000000000DC8D                 db    1
.eh_frame:000000000000DC8E                 db  0Eh
.eh_frame:000000000000DC8F                 db  88h
.eh_frame:000000000000DC90                 db    6
.eh_frame:000000000000DC91                 db  49h ; I
.eh_frame:000000000000DC92                 db  0Eh
.eh_frame:000000000000DC93                 db  90h
.eh_frame:000000000000DC94                 db    6
.eh_frame:000000000000DC95                 db  4Fh ; O
.eh_frame:000000000000DC96                 db  0Eh
.eh_frame:000000000000DC97                 db  98h
.eh_frame:000000000000DC98                 db    6
.eh_frame:000000000000DC99                 db  5Dh ; ]
.eh_frame:000000000000DC9A                 db  0Eh
.eh_frame:000000000000DC9B                 db 0A0h
.eh_frame:000000000000DC9C                 db    6
.eh_frame:000000000000DC9D                 db  4Bh ; K
.eh_frame:000000000000DC9E                 db  0Eh
.eh_frame:000000000000DC9F                 db  80h
.eh_frame:000000000000DCA0                 db    6
.eh_frame:000000000000DCA1                 db    3
.eh_frame:000000000000DCA2                 db 0BCh
.eh_frame:000000000000DCA3                 db    8
.eh_frame:000000000000DCA4                 db  0Ah
.eh_frame:000000000000DCA5                 db  0Eh
.eh_frame:000000000000DCA6                 db  38h ; 8
.eh_frame:000000000000DCA7                 db  41h ; A
.eh_frame:000000000000DCA8                 db  0Eh
.eh_frame:000000000000DCA9                 db  30h ; 0
.eh_frame:000000000000DCAA                 db  41h ; A
.eh_frame:000000000000DCAB                 db  0Eh
.eh_frame:000000000000DCAC                 db  28h ; (
.eh_frame:000000000000DCAD                 db  42h ; B
.eh_frame:000000000000DCAE                 db  0Eh
.eh_frame:000000000000DCAF                 db  20h
.eh_frame:000000000000DCB0                 db  42h ; B
.eh_frame:000000000000DCB1                 db  0Eh
.eh_frame:000000000000DCB2                 db  18h
.eh_frame:000000000000DCB3                 db  42h ; B
.eh_frame:000000000000DCB4                 db  0Eh
.eh_frame:000000000000DCB5                 db  10h
.eh_frame:000000000000DCB6                 db  42h ; B
.eh_frame:000000000000DCB7                 db  0Eh
.eh_frame:000000000000DCB8                 db    8
.eh_frame:000000000000DCB9                 db  41h ; A
.eh_frame:000000000000DCBA                 db  0Bh
.eh_frame:000000000000DCBB                 db    0
.eh_frame:000000000000DCBC                 db    0
.eh_frame:000000000000DCBD                 db    0
.eh_frame:000000000000DCBE                 db    0
.eh_frame:000000000000DCBF                 db    0
.eh_frame:000000000000DCC0                 db  10h
.eh_frame:000000000000DCC1                 db    0
.eh_frame:000000000000DCC2                 db    0
.eh_frame:000000000000DCC3                 db    0
.eh_frame:000000000000DCC4                 db 0CCh
.eh_frame:000000000000DCC5                 db    3
.eh_frame:000000000000DCC6                 db    0
.eh_frame:000000000000DCC7                 db    0
.eh_frame:000000000000DCC8                 db    8
.eh_frame:000000000000DCC9                 db  89h
.eh_frame:000000000000DCCA                 db 0FFh
.eh_frame:000000000000DCCB                 db 0FFh
.eh_frame:000000000000DCCC                 db  0Ah
.eh_frame:000000000000DCCD                 db    0
.eh_frame:000000000000DCCE                 db    0
.eh_frame:000000000000DCCF                 db    0
.eh_frame:000000000000DCD0                 db    0
.eh_frame:000000000000DCD1                 db    0
.eh_frame:000000000000DCD2                 db    0
.eh_frame:000000000000DCD3                 db    0
.eh_frame:000000000000DCD4                 db  48h ; H
.eh_frame:000000000000DCD5                 db    0
.eh_frame:000000000000DCD6                 db    0
.eh_frame:000000000000DCD7                 db    0
.eh_frame:000000000000DCD8                 db 0E0h
.eh_frame:000000000000DCD9                 db    3
.eh_frame:000000000000DCDA                 db    0
.eh_frame:000000000000DCDB                 db    0
.eh_frame:000000000000DCDC                 db    4
.eh_frame:000000000000DCDD                 db  89h
.eh_frame:000000000000DCDE                 db 0FFh
.eh_frame:000000000000DCDF                 db 0FFh
.eh_frame:000000000000DCE0                 db  16h
.eh_frame:000000000000DCE1                 db    1
.eh_frame:000000000000DCE2                 db    0
.eh_frame:000000000000DCE3                 db    0
.eh_frame:000000000000DCE4                 db    0
.eh_frame:000000000000DCE5                 db  42h ; B
.eh_frame:000000000000DCE6                 db  0Eh
.eh_frame:000000000000DCE7                 db  10h
.eh_frame:000000000000DCE8                 db  8Fh
.eh_frame:000000000000DCE9                 db    2
.eh_frame:000000000000DCEA                 db  42h ; B
.eh_frame:000000000000DCEB                 db  0Eh
.eh_frame:000000000000DCEC                 db  18h
.eh_frame:000000000000DCED                 db  8Eh
.eh_frame:000000000000DCEE                 db    3
.eh_frame:000000000000DCEF                 db  45h ; E
.eh_frame:000000000000DCF0                 db  0Eh
.eh_frame:000000000000DCF1                 db  20h
.eh_frame:000000000000DCF2                 db  8Dh
.eh_frame:000000000000DCF3                 db    4
.eh_frame:000000000000DCF4                 db  42h ; B
.eh_frame:000000000000DCF5                 db  0Eh
.eh_frame:000000000000DCF6                 db  28h ; (
.eh_frame:000000000000DCF7                 db  8Ch
.eh_frame:000000000000DCF8                 db    5
.eh_frame:000000000000DCF9                 db  44h ; D
.eh_frame:000000000000DCFA                 db  0Eh
.eh_frame:000000000000DCFB                 db  30h ; 0
.eh_frame:000000000000DCFC                 db  86h
.eh_frame:000000000000DCFD                 db    6
.eh_frame:000000000000DCFE                 db  41h ; A
.eh_frame:000000000000DCFF                 db  0Eh
.eh_frame:000000000000DD00                 db  38h ; 8
.eh_frame:000000000000DD01                 db  83h
.eh_frame:000000000000DD02                 db    7
.eh_frame:000000000000DD03                 db  47h ; G
.eh_frame:000000000000DD04                 db  0Eh
.eh_frame:000000000000DD05                 db  60h ; `
.eh_frame:000000000000DD06                 db    2
.eh_frame:000000000000DD07                 db 0DEh
.eh_frame:000000000000DD08                 db  0Ah
.eh_frame:000000000000DD09                 db  0Eh
.eh_frame:000000000000DD0A                 db  38h ; 8
.eh_frame:000000000000DD0B                 db  41h ; A
.eh_frame:000000000000DD0C                 db  0Eh
.eh_frame:000000000000DD0D                 db  30h ; 0
.eh_frame:000000000000DD0E                 db  41h ; A
.eh_frame:000000000000DD0F                 db  0Eh
.eh_frame:000000000000DD10                 db  28h ; (
.eh_frame:000000000000DD11                 db  42h ; B
.eh_frame:000000000000DD12                 db  0Eh
.eh_frame:000000000000DD13                 db  20h
.eh_frame:000000000000DD14                 db  42h ; B
.eh_frame:000000000000DD15                 db  0Eh
.eh_frame:000000000000DD16                 db  18h
.eh_frame:000000000000DD17                 db  42h ; B
.eh_frame:000000000000DD18                 db  0Eh
.eh_frame:000000000000DD19                 db  10h
.eh_frame:000000000000DD1A                 db  42h ; B
.eh_frame:000000000000DD1B                 db  0Eh
.eh_frame:000000000000DD1C                 db    8
.eh_frame:000000000000DD1D                 db  41h ; A
.eh_frame:000000000000DD1E                 db  0Bh
.eh_frame:000000000000DD1F                 db    0
.eh_frame:000000000000DD20                 db  28h ; (
.eh_frame:000000000000DD21                 db    0
.eh_frame:000000000000DD22                 db    0
.eh_frame:000000000000DD23                 db    0
.eh_frame:000000000000DD24                 db  2Ch ; ,
.eh_frame:000000000000DD25                 db    4
.eh_frame:000000000000DD26                 db    0
.eh_frame:000000000000DD27                 db    0
.eh_frame:000000000000DD28                 db 0D8h
.eh_frame:000000000000DD29                 db  89h
.eh_frame:000000000000DD2A                 db 0FFh
.eh_frame:000000000000DD2B                 db 0FFh
.eh_frame:000000000000DD2C                 db  73h ; s
.eh_frame:000000000000DD2D                 db    0
.eh_frame:000000000000DD2E                 db    0
.eh_frame:000000000000DD2F                 db    0
.eh_frame:000000000000DD30                 db    0
.eh_frame:000000000000DD31                 db  46h ; F
.eh_frame:000000000000DD32                 db  0Eh
.eh_frame:000000000000DD33                 db  10h
.eh_frame:000000000000DD34                 db  8Ch
.eh_frame:000000000000DD35                 db    2
.eh_frame:000000000000DD36                 db  46h ; F
.eh_frame:000000000000DD37                 db  0Eh
.eh_frame:000000000000DD38                 db  18h
.eh_frame:000000000000DD39                 db  86h
.eh_frame:000000000000DD3A                 db    3
.eh_frame:000000000000DD3B                 db  44h ; D
.eh_frame:000000000000DD3C                 db  0Eh
.eh_frame:000000000000DD3D                 db  20h
.eh_frame:000000000000DD3E                 db  83h
.eh_frame:000000000000DD3F                 db    4
.eh_frame:000000000000DD40                 db  7Fh ; 
.eh_frame:000000000000DD41                 db  0Ah
.eh_frame:000000000000DD42                 db  0Eh
.eh_frame:000000000000DD43                 db  18h
.eh_frame:000000000000DD44                 db  41h ; A
.eh_frame:000000000000DD45                 db  0Eh
.eh_frame:000000000000DD46                 db  10h
.eh_frame:000000000000DD47                 db  42h ; B
.eh_frame:000000000000DD48                 db  0Eh
.eh_frame:000000000000DD49                 db    8
.eh_frame:000000000000DD4A                 db  4Eh ; N
.eh_frame:000000000000DD4B                 db  0Bh
.eh_frame:000000000000DD4C                 db  5Ch ; \
.eh_frame:000000000000DD4D                 db    0
.eh_frame:000000000000DD4E                 db    0
.eh_frame:000000000000DD4F                 db    0
.eh_frame:000000000000DD50                 db  58h ; X
.eh_frame:000000000000DD51                 db    4
.eh_frame:000000000000DD52                 db    0
.eh_frame:000000000000DD53                 db    0
.eh_frame:000000000000DD54                 db  2Ch ; ,
.eh_frame:000000000000DD55                 db  8Ah
.eh_frame:000000000000DD56                 db 0FFh
.eh_frame:000000000000DD57                 db 0FFh
.eh_frame:000000000000DD58                 db  20h
.eh_frame:000000000000DD59                 db    1
.eh_frame:000000000000DD5A                 db    0
.eh_frame:000000000000DD5B                 db    0
.eh_frame:000000000000DD5C                 db    0
.eh_frame:000000000000DD5D                 db  42h ; B
.eh_frame:000000000000DD5E                 db  0Eh
.eh_frame:000000000000DD5F                 db  10h
.eh_frame:000000000000DD60                 db  8Fh
.eh_frame:000000000000DD61                 db    2
.eh_frame:000000000000DD62                 db  42h ; B
.eh_frame:000000000000DD63                 db  0Eh
.eh_frame:000000000000DD64                 db  18h
.eh_frame:000000000000DD65                 db  8Eh
.eh_frame:000000000000DD66                 db    3
.eh_frame:000000000000DD67                 db  45h ; E
.eh_frame:000000000000DD68                 db  0Eh
.eh_frame:000000000000DD69                 db  20h
.eh_frame:000000000000DD6A                 db  8Dh
.eh_frame:000000000000DD6B                 db    4
.eh_frame:000000000000DD6C                 db  42h ; B
.eh_frame:000000000000DD6D                 db  0Eh
.eh_frame:000000000000DD6E                 db  28h ; (
.eh_frame:000000000000DD6F                 db  8Ch
.eh_frame:000000000000DD70                 db    5
.eh_frame:000000000000DD71                 db  43h ; C
.eh_frame:000000000000DD72                 db  0Eh
.eh_frame:000000000000DD73                 db  30h ; 0
.eh_frame:000000000000DD74                 db  86h
.eh_frame:000000000000DD75                 db    6
.eh_frame:000000000000DD76                 db  41h ; A
.eh_frame:000000000000DD77                 db  0Eh
.eh_frame:000000000000DD78                 db  38h ; 8
.eh_frame:000000000000DD79                 db  83h
.eh_frame:000000000000DD7A                 db    7
.eh_frame:000000000000DD7B                 db  56h ; V
.eh_frame:000000000000DD7C                 db  0Eh
.eh_frame:000000000000DD7D                 db  40h ; @
.eh_frame:000000000000DD7E                 db    2
.eh_frame:000000000000DD7F                 db 0D3h
.eh_frame:000000000000DD80                 db  0Ah
.eh_frame:000000000000DD81                 db  0Eh
.eh_frame:000000000000DD82                 db  38h ; 8
.eh_frame:000000000000DD83                 db  41h ; A
.eh_frame:000000000000DD84                 db  0Eh
.eh_frame:000000000000DD85                 db  30h ; 0
.eh_frame:000000000000DD86                 db  41h ; A
.eh_frame:000000000000DD87                 db  0Eh
.eh_frame:000000000000DD88                 db  28h ; (
.eh_frame:000000000000DD89                 db  42h ; B
.eh_frame:000000000000DD8A                 db  0Eh
.eh_frame:000000000000DD8B                 db  20h
.eh_frame:000000000000DD8C                 db  42h ; B
.eh_frame:000000000000DD8D                 db  0Eh
.eh_frame:000000000000DD8E                 db  18h
.eh_frame:000000000000DD8F                 db  42h ; B
.eh_frame:000000000000DD90                 db  0Eh
.eh_frame:000000000000DD91                 db  10h
.eh_frame:000000000000DD92                 db  42h ; B
.eh_frame:000000000000DD93                 db  0Eh
.eh_frame:000000000000DD94                 db    8
.eh_frame:000000000000DD95                 db  46h ; F
.eh_frame:000000000000DD96                 db  0Bh
.eh_frame:000000000000DD97                 db  44h ; D
.eh_frame:000000000000DD98                 db  0Eh
.eh_frame:000000000000DD99                 db  38h ; 8
.eh_frame:000000000000DD9A                 db  46h ; F
.eh_frame:000000000000DD9B                 db  0Eh
.eh_frame:000000000000DD9C                 db  30h ; 0
.eh_frame:000000000000DD9D                 db  41h ; A
.eh_frame:000000000000DD9E                 db  0Eh
.eh_frame:000000000000DD9F                 db  28h ; (
.eh_frame:000000000000DDA0                 db  42h ; B
.eh_frame:000000000000DDA1                 db  0Eh
.eh_frame:000000000000DDA2                 db  20h
.eh_frame:000000000000DDA3                 db  42h ; B
.eh_frame:000000000000DDA4                 db  0Eh
.eh_frame:000000000000DDA5                 db  18h
.eh_frame:000000000000DDA6                 db  42h ; B
.eh_frame:000000000000DDA7                 db  0Eh
.eh_frame:000000000000DDA8                 db  10h
.eh_frame:000000000000DDA9                 db  42h ; B
.eh_frame:000000000000DDAA                 db  0Eh
.eh_frame:000000000000DDAB                 db    8
.eh_frame:000000000000DDAC                 db  48h ; H
.eh_frame:000000000000DDAD                 db    0
.eh_frame:000000000000DDAE                 db    0
.eh_frame:000000000000DDAF                 db    0
.eh_frame:000000000000DDB0                 db 0B8h
.eh_frame:000000000000DDB1                 db    4
.eh_frame:000000000000DDB2                 db    0
.eh_frame:000000000000DDB3                 db    0
.eh_frame:000000000000DDB4                 db 0ECh
.eh_frame:000000000000DDB5                 db  8Ah
.eh_frame:000000000000DDB6                 db 0FFh
.eh_frame:000000000000DDB7                 db 0FFh
.eh_frame:000000000000DDB8                 db  6Dh ; m
.eh_frame:000000000000DDB9                 db    0
.eh_frame:000000000000DDBA                 db    0
.eh_frame:000000000000DDBB                 db    0
.eh_frame:000000000000DDBC                 db    0
.eh_frame:000000000000DDBD                 db  42h ; B
.eh_frame:000000000000DDBE                 db  0Eh
.eh_frame:000000000000DDBF                 db  10h
.eh_frame:000000000000DDC0                 db  8Fh
.eh_frame:000000000000DDC1                 db    2
.eh_frame:000000000000DDC2                 db  42h ; B
.eh_frame:000000000000DDC3                 db  0Eh
.eh_frame:000000000000DDC4                 db  18h
.eh_frame:000000000000DDC5                 db  8Eh
.eh_frame:000000000000DDC6                 db    3
.eh_frame:000000000000DDC7                 db  45h ; E
.eh_frame:000000000000DDC8                 db  0Eh
.eh_frame:000000000000DDC9                 db  20h
.eh_frame:000000000000DDCA                 db  8Dh
.eh_frame:000000000000DDCB                 db    4
.eh_frame:000000000000DDCC                 db  42h ; B
.eh_frame:000000000000DDCD                 db  0Eh
.eh_frame:000000000000DDCE                 db  28h ; (
.eh_frame:000000000000DDCF                 db  8Ch
.eh_frame:000000000000DDD0                 db    5
.eh_frame:000000000000DDD1                 db  44h ; D
.eh_frame:000000000000DDD2                 db  0Eh
.eh_frame:000000000000DDD3                 db  30h ; 0
.eh_frame:000000000000DDD4                 db  86h
.eh_frame:000000000000DDD5                 db    6
.eh_frame:000000000000DDD6                 db  41h ; A
.eh_frame:000000000000DDD7                 db  0Eh
.eh_frame:000000000000DDD8                 db  38h ; 8
.eh_frame:000000000000DDD9                 db  83h
.eh_frame:000000000000DDDA                 db    7
.eh_frame:000000000000DDDB                 db  50h ; P
.eh_frame:000000000000DDDC                 db  0Eh
.eh_frame:000000000000DDDD                 db  40h ; @
.eh_frame:000000000000DDDE                 db  5Ah ; Z
.eh_frame:000000000000DDDF                 db  0Ah
.eh_frame:000000000000DDE0                 db  0Eh
.eh_frame:000000000000DDE1                 db  38h ; 8
.eh_frame:000000000000DDE2                 db  41h ; A
.eh_frame:000000000000DDE3                 db  0Eh
.eh_frame:000000000000DDE4                 db  30h ; 0
.eh_frame:000000000000DDE5                 db  41h ; A
.eh_frame:000000000000DDE6                 db  0Eh
.eh_frame:000000000000DDE7                 db  28h ; (
.eh_frame:000000000000DDE8                 db  42h ; B
.eh_frame:000000000000DDE9                 db  0Eh
.eh_frame:000000000000DDEA                 db  20h
.eh_frame:000000000000DDEB                 db  42h ; B
.eh_frame:000000000000DDEC                 db  0Eh
.eh_frame:000000000000DDED                 db  18h
.eh_frame:000000000000DDEE                 db  42h ; B
.eh_frame:000000000000DDEF                 db  0Eh
.eh_frame:000000000000DDF0                 db  10h
.eh_frame:000000000000DDF1                 db  42h ; B
.eh_frame:000000000000DDF2                 db  0Eh
.eh_frame:000000000000DDF3                 db    8
.eh_frame:000000000000DDF4                 db  41h ; A
.eh_frame:000000000000DDF5                 db  0Bh
.eh_frame:000000000000DDF6                 db    0
.eh_frame:000000000000DDF7                 db    0
.eh_frame:000000000000DDF8                 db  3Ch ; <
.eh_frame:000000000000DDF9                 db    0
.eh_frame:000000000000DDFA                 db    0
.eh_frame:000000000000DDFB                 db    0
.eh_frame:000000000000DDFC                 db    4
.eh_frame:000000000000DDFD                 db    5
.eh_frame:000000000000DDFE                 db    0
.eh_frame:000000000000DDFF                 db    0
.eh_frame:000000000000DE00                 db  10h
.eh_frame:000000000000DE01                 db  8Bh
.eh_frame:000000000000DE02                 db 0FFh
.eh_frame:000000000000DE03                 db 0FFh
.eh_frame:000000000000DE04                 db  4Dh ; M
.eh_frame:000000000000DE05                 db    0
.eh_frame:000000000000DE06                 db    0
.eh_frame:000000000000DE07                 db    0
.eh_frame:000000000000DE08                 db    0
.eh_frame:000000000000DE09                 db  42h ; B
.eh_frame:000000000000DE0A                 db  0Eh
.eh_frame:000000000000DE0B                 db  10h
.eh_frame:000000000000DE0C                 db  8Eh
.eh_frame:000000000000DE0D                 db    2
.eh_frame:000000000000DE0E                 db  42h ; B
.eh_frame:000000000000DE0F                 db  0Eh
.eh_frame:000000000000DE10                 db  18h
.eh_frame:000000000000DE11                 db  8Dh
.eh_frame:000000000000DE12                 db    3
.eh_frame:000000000000DE13                 db  42h ; B
.eh_frame:000000000000DE14                 db  0Eh
.eh_frame:000000000000DE15                 db  20h
.eh_frame:000000000000DE16                 db  8Ch
.eh_frame:000000000000DE17                 db    4
.eh_frame:000000000000DE18                 db  41h ; A
.eh_frame:000000000000DE19                 db  0Eh
.eh_frame:000000000000DE1A                 db  28h ; (
.eh_frame:000000000000DE1B                 db  86h
.eh_frame:000000000000DE1C                 db    5
.eh_frame:000000000000DE1D                 db  41h ; A
.eh_frame:000000000000DE1E                 db  0Eh
.eh_frame:000000000000DE1F                 db  30h ; 0
.eh_frame:000000000000DE20                 db  83h
.eh_frame:000000000000DE21                 db    6
.eh_frame:000000000000DE22                 db  7Ah ; z
.eh_frame:000000000000DE23                 db  0Eh
.eh_frame:000000000000DE24                 db  28h ; (
.eh_frame:000000000000DE25                 db  44h ; D
.eh_frame:000000000000DE26                 db  0Eh
.eh_frame:000000000000DE27                 db  20h
.eh_frame:000000000000DE28                 db  42h ; B
.eh_frame:000000000000DE29                 db  0Eh
.eh_frame:000000000000DE2A                 db  18h
.eh_frame:000000000000DE2B                 db  42h ; B
.eh_frame:000000000000DE2C                 db  0Eh
.eh_frame:000000000000DE2D                 db  10h
.eh_frame:000000000000DE2E                 db  42h ; B
.eh_frame:000000000000DE2F                 db  0Eh
.eh_frame:000000000000DE30                 db    8
.eh_frame:000000000000DE31                 db    0
.eh_frame:000000000000DE32                 db    0
.eh_frame:000000000000DE33                 db    0
.eh_frame:000000000000DE34                 db    0
.eh_frame:000000000000DE35                 db    0
.eh_frame:000000000000DE36                 db    0
.eh_frame:000000000000DE37                 db    0
.eh_frame:000000000000DE38                 db  3Ch ; <
.eh_frame:000000000000DE39                 db    0
.eh_frame:000000000000DE3A                 db    0
.eh_frame:000000000000DE3B                 db    0
.eh_frame:000000000000DE3C                 db  44h ; D
.eh_frame:000000000000DE3D                 db    5
.eh_frame:000000000000DE3E                 db    0
.eh_frame:000000000000DE3F                 db    0
.eh_frame:000000000000DE40                 db  20h
.eh_frame:000000000000DE41                 db  8Bh
.eh_frame:000000000000DE42                 db 0FFh
.eh_frame:000000000000DE43                 db 0FFh
.eh_frame:000000000000DE44                 db 0B3h
.eh_frame:000000000000DE45                 db    0
.eh_frame:000000000000DE46                 db    0
.eh_frame:000000000000DE47                 db    0
.eh_frame:000000000000DE48                 db    0
.eh_frame:000000000000DE49                 db  42h ; B
.eh_frame:000000000000DE4A                 db  0Eh
.eh_frame:000000000000DE4B                 db  10h
.eh_frame:000000000000DE4C                 db  8Dh
.eh_frame:000000000000DE4D                 db    2
.eh_frame:000000000000DE4E                 db  42h ; B
.eh_frame:000000000000DE4F                 db  0Eh
.eh_frame:000000000000DE50                 db  18h
.eh_frame:000000000000DE51                 db  8Ch
.eh_frame:000000000000DE52                 db    3
.eh_frame:000000000000DE53                 db  41h ; A
.eh_frame:000000000000DE54                 db  0Eh
.eh_frame:000000000000DE55                 db  20h
.eh_frame:000000000000DE56                 db  86h
.eh_frame:000000000000DE57                 db    4
.eh_frame:000000000000DE58                 db  41h ; A
.eh_frame:000000000000DE59                 db  0Eh
.eh_frame:000000000000DE5A                 db  28h ; (
.eh_frame:000000000000DE5B                 db  83h
.eh_frame:000000000000DE5C                 db    5
.eh_frame:000000000000DE5D                 db  4Ah ; J
.eh_frame:000000000000DE5E                 db  0Eh
.eh_frame:000000000000DE5F                 db  60h ; `
.eh_frame:000000000000DE60                 db    2
.eh_frame:000000000000DE61                 db  4Dh ; M
.eh_frame:000000000000DE62                 db  0Ah
.eh_frame:000000000000DE63                 db  0Eh
.eh_frame:000000000000DE64                 db  28h ; (
.eh_frame:000000000000DE65                 db  41h ; A
.eh_frame:000000000000DE66                 db  0Eh
.eh_frame:000000000000DE67                 db  20h
.eh_frame:000000000000DE68                 db  41h ; A
.eh_frame:000000000000DE69                 db  0Eh
.eh_frame:000000000000DE6A                 db  18h
.eh_frame:000000000000DE6B                 db  42h ; B
.eh_frame:000000000000DE6C                 db  0Eh
.eh_frame:000000000000DE6D                 db  10h
.eh_frame:000000000000DE6E                 db  42h ; B
.eh_frame:000000000000DE6F                 db  0Eh
.eh_frame:000000000000DE70                 db    8
.eh_frame:000000000000DE71                 db  45h ; E
.eh_frame:000000000000DE72                 db  0Bh
.eh_frame:000000000000DE73                 db    0
.eh_frame:000000000000DE74                 db    0
.eh_frame:000000000000DE75                 db    0
.eh_frame:000000000000DE76                 db    0
.eh_frame:000000000000DE77                 db    0
.eh_frame:000000000000DE78                 db  10h
.eh_frame:000000000000DE79                 db    0
.eh_frame:000000000000DE7A                 db    0
.eh_frame:000000000000DE7B                 db    0
.eh_frame:000000000000DE7C                 db  84h
.eh_frame:000000000000DE7D                 db    5
.eh_frame:000000000000DE7E                 db    0
.eh_frame:000000000000DE7F                 db    0
.eh_frame:000000000000DE80                 db 0A0h
.eh_frame:000000000000DE81                 db  8Bh
.eh_frame:000000000000DE82                 db 0FFh
.eh_frame:000000000000DE83                 db 0FFh
.eh_frame:000000000000DE84                 db    8
.eh_frame:000000000000DE85                 db    0
.eh_frame:000000000000DE86                 db    0
.eh_frame:000000000000DE87                 db    0
.eh_frame:000000000000DE88                 db    0
.eh_frame:000000000000DE89                 db    0
.eh_frame:000000000000DE8A                 db    0
.eh_frame:000000000000DE8B                 db    0
.eh_frame:000000000000DE8C                 db  10h
.eh_frame:000000000000DE8D                 db    0
.eh_frame:000000000000DE8E                 db    0
.eh_frame:000000000000DE8F                 db    0
.eh_frame:000000000000DE90                 db  98h
.eh_frame:000000000000DE91                 db    5
.eh_frame:000000000000DE92                 db    0
.eh_frame:000000000000DE93                 db    0
.eh_frame:000000000000DE94                 db  9Ch
.eh_frame:000000000000DE95                 db  8Bh
.eh_frame:000000000000DE96                 db 0FFh
.eh_frame:000000000000DE97                 db 0FFh
.eh_frame:000000000000DE98                 db    8
.eh_frame:000000000000DE99                 db    0
.eh_frame:000000000000DE9A                 db    0
.eh_frame:000000000000DE9B                 db    0
.eh_frame:000000000000DE9C                 db    0
.eh_frame:000000000000DE9D                 db    0
.eh_frame:000000000000DE9E                 db    0
.eh_frame:000000000000DE9F                 db    0
.eh_frame:000000000000DEA0                 db  2Ch ; ,
.eh_frame:000000000000DEA1                 db    0
.eh_frame:000000000000DEA2                 db    0
.eh_frame:000000000000DEA3                 db    0
.eh_frame:000000000000DEA4                 db 0ACh
.eh_frame:000000000000DEA5                 db    5
.eh_frame:000000000000DEA6                 db    0
.eh_frame:000000000000DEA7                 db    0
.eh_frame:000000000000DEA8                 db  98h
.eh_frame:000000000000DEA9                 db  8Bh
.eh_frame:000000000000DEAA                 db 0FFh
.eh_frame:000000000000DEAB                 db 0FFh
.eh_frame:000000000000DEAC                 db 0A4h
.eh_frame:000000000000DEAD                 db    0
.eh_frame:000000000000DEAE                 db    0
.eh_frame:000000000000DEAF                 db    0
.eh_frame:000000000000DEB0                 db    0
.eh_frame:000000000000DEB1                 db  41h ; A
.eh_frame:000000000000DEB2                 db  0Eh
.eh_frame:000000000000DEB3                 db  10h
.eh_frame:000000000000DEB4                 db  86h
.eh_frame:000000000000DEB5                 db    2
.eh_frame:000000000000DEB6                 db  41h ; A
.eh_frame:000000000000DEB7                 db  0Eh
.eh_frame:000000000000DEB8                 db  18h
.eh_frame:000000000000DEB9                 db  83h
.eh_frame:000000000000DEBA                 db    3
.eh_frame:000000000000DEBB                 db  44h ; D
.eh_frame:000000000000DEBC                 db  0Eh
.eh_frame:000000000000DEBD                 db  20h
.eh_frame:000000000000DEBE                 db  7Ah ; z
.eh_frame:000000000000DEBF                 db  0Ah
.eh_frame:000000000000DEC0                 db  0Eh
.eh_frame:000000000000DEC1                 db  18h
.eh_frame:000000000000DEC2                 db  41h ; A
.eh_frame:000000000000DEC3                 db  0Eh
.eh_frame:000000000000DEC4                 db  10h
.eh_frame:000000000000DEC5                 db  41h ; A
.eh_frame:000000000000DEC6                 db  0Eh
.eh_frame:000000000000DEC7                 db    8
.eh_frame:000000000000DEC8                 db  41h ; A
.eh_frame:000000000000DEC9                 db  0Bh
.eh_frame:000000000000DECA                 db    0
.eh_frame:000000000000DECB                 db    0
.eh_frame:000000000000DECC                 db    0
.eh_frame:000000000000DECD                 db    0
.eh_frame:000000000000DECE                 db    0
.eh_frame:000000000000DECF                 db    0
.eh_frame:000000000000DED0                 db  30h ; 0
.eh_frame:000000000000DED1                 db    0
.eh_frame:000000000000DED2                 db    0
.eh_frame:000000000000DED3                 db    0
.eh_frame:000000000000DED4                 db 0DCh
.eh_frame:000000000000DED5                 db    5
.eh_frame:000000000000DED6                 db    0
.eh_frame:000000000000DED7                 db    0
.eh_frame:000000000000DED8                 db  18h
.eh_frame:000000000000DED9                 db  8Ch
.eh_frame:000000000000DEDA                 db 0FFh
.eh_frame:000000000000DEDB                 db 0FFh
.eh_frame:000000000000DEDC                 db  5Dh ; ]
.eh_frame:000000000000DEDD                 db    0
.eh_frame:000000000000DEDE                 db    0
.eh_frame:000000000000DEDF                 db    0
.eh_frame:000000000000DEE0                 db    0
.eh_frame:000000000000DEE1                 db  41h ; A
.eh_frame:000000000000DEE2                 db  0Eh
.eh_frame:000000000000DEE3                 db  10h
.eh_frame:000000000000DEE4                 db  86h
.eh_frame:000000000000DEE5                 db    2
.eh_frame:000000000000DEE6                 db  41h ; A
.eh_frame:000000000000DEE7                 db  0Eh
.eh_frame:000000000000DEE8                 db  18h
.eh_frame:000000000000DEE9                 db  83h
.eh_frame:000000000000DEEA                 db    3
.eh_frame:000000000000DEEB                 db  49h ; I
.eh_frame:000000000000DEEC                 db  0Eh
.eh_frame:000000000000DEED                 db  20h
.eh_frame:000000000000DEEE                 db  7Ch ; |
.eh_frame:000000000000DEEF                 db  0Ah
.eh_frame:000000000000DEF0                 db  0Eh
.eh_frame:000000000000DEF1                 db  18h
.eh_frame:000000000000DEF2                 db  44h ; D
.eh_frame:000000000000DEF3                 db  0Eh
.eh_frame:000000000000DEF4                 db  10h
.eh_frame:000000000000DEF5                 db  41h ; A
.eh_frame:000000000000DEF6                 db  0Eh
.eh_frame:000000000000DEF7                 db    8
.eh_frame:000000000000DEF8                 db  44h ; D
.eh_frame:000000000000DEF9                 db  0Bh
.eh_frame:000000000000DEFA                 db  44h ; D
.eh_frame:000000000000DEFB                 db  0Eh
.eh_frame:000000000000DEFC                 db  18h
.eh_frame:000000000000DEFD                 db  47h ; G
.eh_frame:000000000000DEFE                 db  0Eh
.eh_frame:000000000000DEFF                 db  10h
.eh_frame:000000000000DF00                 db  41h ; A
.eh_frame:000000000000DF01                 db  0Eh
.eh_frame:000000000000DF02                 db    8
.eh_frame:000000000000DF03                 db    0
.eh_frame:000000000000DF04                 db  28h ; (
.eh_frame:000000000000DF05                 db    0
.eh_frame:000000000000DF06                 db    0
.eh_frame:000000000000DF07                 db    0
.eh_frame:000000000000DF08                 db  10h
.eh_frame:000000000000DF09                 db    6
.eh_frame:000000000000DF0A                 db    0
.eh_frame:000000000000DF0B                 db    0
.eh_frame:000000000000DF0C                 db  44h ; D
.eh_frame:000000000000DF0D                 db  8Ch
.eh_frame:000000000000DF0E                 db 0FFh
.eh_frame:000000000000DF0F                 db 0FFh
.eh_frame:000000000000DF10                 db  5Ah ; Z
.eh_frame:000000000000DF11                 db    0
.eh_frame:000000000000DF12                 db    0
.eh_frame:000000000000DF13                 db    0
.eh_frame:000000000000DF14                 db    0
.eh_frame:000000000000DF15                 db  41h ; A
.eh_frame:000000000000DF16                 db  0Eh
.eh_frame:000000000000DF17                 db  10h
.eh_frame:000000000000DF18                 db  86h
.eh_frame:000000000000DF19                 db    2
.eh_frame:000000000000DF1A                 db  41h ; A
.eh_frame:000000000000DF1B                 db  0Eh
.eh_frame:000000000000DF1C                 db  18h
.eh_frame:000000000000DF1D                 db  83h
.eh_frame:000000000000DF1E                 db    3
.eh_frame:000000000000DF1F                 db  47h ; G
.eh_frame:000000000000DF20                 db  0Eh
.eh_frame:000000000000DF21                 db  20h
.eh_frame:000000000000DF22                 db    2
.eh_frame:000000000000DF23                 db  41h ; A
.eh_frame:000000000000DF24                 db  0Ah
.eh_frame:000000000000DF25                 db  0Eh
.eh_frame:000000000000DF26                 db  18h
.eh_frame:000000000000DF27                 db  44h ; D
.eh_frame:000000000000DF28                 db  0Eh
.eh_frame:000000000000DF29                 db  10h
.eh_frame:000000000000DF2A                 db  41h ; A
.eh_frame:000000000000DF2B                 db  0Eh
.eh_frame:000000000000DF2C                 db    8
.eh_frame:000000000000DF2D                 db  41h ; A
.eh_frame:000000000000DF2E                 db  0Bh
.eh_frame:000000000000DF2F                 db    0
.eh_frame:000000000000DF30                 db  10h
.eh_frame:000000000000DF31                 db    0
.eh_frame:000000000000DF32                 db    0
.eh_frame:000000000000DF33                 db    0
.eh_frame:000000000000DF34                 db  3Ch ; <
.eh_frame:000000000000DF35                 db    6
.eh_frame:000000000000DF36                 db    0
.eh_frame:000000000000DF37                 db    0
.eh_frame:000000000000DF38                 db  78h ; x
.eh_frame:000000000000DF39                 db  8Ch
.eh_frame:000000000000DF3A                 db 0FFh
.eh_frame:000000000000DF3B                 db 0FFh
.eh_frame:000000000000DF3C                 db  5Ch ; \
.eh_frame:000000000000DF3D                 db    0
.eh_frame:000000000000DF3E                 db    0
.eh_frame:000000000000DF3F                 db    0
.eh_frame:000000000000DF40                 db    0
.eh_frame:000000000000DF41                 db    0
.eh_frame:000000000000DF42                 db    0
.eh_frame:000000000000DF43                 db    0
.eh_frame:000000000000DF44                 db  28h ; (
.eh_frame:000000000000DF45                 db    0
.eh_frame:000000000000DF46                 db    0
.eh_frame:000000000000DF47                 db    0
.eh_frame:000000000000DF48                 db  50h ; P
.eh_frame:000000000000DF49                 db    6
.eh_frame:000000000000DF4A                 db    0
.eh_frame:000000000000DF4B                 db    0
.eh_frame:000000000000DF4C                 db 0C4h
.eh_frame:000000000000DF4D                 db  8Ch
.eh_frame:000000000000DF4E                 db 0FFh
.eh_frame:000000000000DF4F                 db 0FFh
.eh_frame:000000000000DF50                 db  47h ; G
.eh_frame:000000000000DF51                 db    0
.eh_frame:000000000000DF52                 db    0
.eh_frame:000000000000DF53                 db    0
.eh_frame:000000000000DF54                 db    0
.eh_frame:000000000000DF55                 db  41h ; A
.eh_frame:000000000000DF56                 db  0Eh
.eh_frame:000000000000DF57                 db  10h
.eh_frame:000000000000DF58                 db  83h
.eh_frame:000000000000DF59                 db    2
.eh_frame:000000000000DF5A                 db  5Ah ; Z
.eh_frame:000000000000DF5B                 db  0Ah
.eh_frame:000000000000DF5C                 db  0Eh
.eh_frame:000000000000DF5D                 db    8
.eh_frame:000000000000DF5E                 db  45h ; E
.eh_frame:000000000000DF5F                 db  0Bh
.eh_frame:000000000000DF60                 db  5Dh ; ]
.eh_frame:000000000000DF61                 db  0Ah
.eh_frame:000000000000DF62                 db  0Eh
.eh_frame:000000000000DF63                 db    8
.eh_frame:000000000000DF64                 db  43h ; C
.eh_frame:000000000000DF65                 db  0Bh
.eh_frame:000000000000DF66                 db  46h ; F
.eh_frame:000000000000DF67                 db  0Eh
.eh_frame:000000000000DF68                 db    8
.eh_frame:000000000000DF69                 db    0
.eh_frame:000000000000DF6A                 db    0
.eh_frame:000000000000DF6B                 db    0
.eh_frame:000000000000DF6C                 db    0
.eh_frame:000000000000DF6D                 db    0
.eh_frame:000000000000DF6E                 db    0
.eh_frame:000000000000DF6F                 db    0
.eh_frame:000000000000DF70                 db  1Ch
.eh_frame:000000000000DF71                 db    0
.eh_frame:000000000000DF72                 db    0
.eh_frame:000000000000DF73                 db    0
.eh_frame:000000000000DF74                 db  7Ch ; |
.eh_frame:000000000000DF75                 db    6
.eh_frame:000000000000DF76                 db    0
.eh_frame:000000000000DF77                 db    0
.eh_frame:000000000000DF78                 db 0E8h
.eh_frame:000000000000DF79                 db  8Ch
.eh_frame:000000000000DF7A                 db 0FFh
.eh_frame:000000000000DF7B                 db 0FFh
.eh_frame:000000000000DF7C                 db  6Eh ; n
.eh_frame:000000000000DF7D                 db    0
.eh_frame:000000000000DF7E                 db    0
.eh_frame:000000000000DF7F                 db    0
.eh_frame:000000000000DF80                 db    0
.eh_frame:000000000000DF81                 db  44h ; D
.eh_frame:000000000000DF82                 db  0Eh
.eh_frame:000000000000DF83                 db  60h ; `
.eh_frame:000000000000DF84                 db  7Fh ; 
.eh_frame:000000000000DF85                 db  0Ah
.eh_frame:000000000000DF86                 db  0Eh
.eh_frame:000000000000DF87                 db    8
.eh_frame:000000000000DF88                 db  45h ; E
.eh_frame:000000000000DF89                 db  0Bh
.eh_frame:000000000000DF8A                 db    0
.eh_frame:000000000000DF8B                 db    0
.eh_frame:000000000000DF8C                 db    0
.eh_frame:000000000000DF8D                 db    0
.eh_frame:000000000000DF8E                 db    0
.eh_frame:000000000000DF8F                 db    0
.eh_frame:000000000000DF90                 db  10h
.eh_frame:000000000000DF91                 db    0
.eh_frame:000000000000DF92                 db    0
.eh_frame:000000000000DF93                 db    0
.eh_frame:000000000000DF94                 db  9Ch
.eh_frame:000000000000DF95                 db    6
.eh_frame:000000000000DF96                 db    0
.eh_frame:000000000000DF97                 db    0
.eh_frame:000000000000DF98                 db  38h ; 8
.eh_frame:000000000000DF99                 db  8Dh
.eh_frame:000000000000DF9A                 db 0FFh
.eh_frame:000000000000DF9B                 db 0FFh
.eh_frame:000000000000DF9C                 db  93h
.eh_frame:000000000000DF9D                 db    0
.eh_frame:000000000000DF9E                 db    0
.eh_frame:000000000000DF9F                 db    0
.eh_frame:000000000000DFA0                 db    0
.eh_frame:000000000000DFA1                 db    0
.eh_frame:000000000000DFA2                 db    0
.eh_frame:000000000000DFA3                 db    0
.eh_frame:000000000000DFA4                 db  10h
.eh_frame:000000000000DFA5                 db    0
.eh_frame:000000000000DFA6                 db    0
.eh_frame:000000000000DFA7                 db    0
.eh_frame:000000000000DFA8                 db 0B0h
.eh_frame:000000000000DFA9                 db    6
.eh_frame:000000000000DFAA                 db    0
.eh_frame:000000000000DFAB                 db    0
.eh_frame:000000000000DFAC                 db 0C4h
.eh_frame:000000000000DFAD                 db  8Dh
.eh_frame:000000000000DFAE                 db 0FFh
.eh_frame:000000000000DFAF                 db 0FFh
.eh_frame:000000000000DFB0                 db  10h
.eh_frame:000000000000DFB1                 db    0
.eh_frame:000000000000DFB2                 db    0
.eh_frame:000000000000DFB3                 db    0
.eh_frame:000000000000DFB4                 db    0
.eh_frame:000000000000DFB5                 db    0
.eh_frame:000000000000DFB6                 db    0
.eh_frame:000000000000DFB7                 db    0
.eh_frame:000000000000DFB8                 db  10h
.eh_frame:000000000000DFB9                 db    0
.eh_frame:000000000000DFBA                 db    0
.eh_frame:000000000000DFBB                 db    0
.eh_frame:000000000000DFBC                 db 0C4h
.eh_frame:000000000000DFBD                 db    6
.eh_frame:000000000000DFBE                 db    0
.eh_frame:000000000000DFBF                 db    0
.eh_frame:000000000000DFC0                 db 0C0h
.eh_frame:000000000000DFC1                 db  8Dh
.eh_frame:000000000000DFC2                 db 0FFh
.eh_frame:000000000000DFC3                 db 0FFh
.eh_frame:000000000000DFC4                 db    7
.eh_frame:000000000000DFC5                 db    0
.eh_frame:000000000000DFC6                 db    0
.eh_frame:000000000000DFC7                 db    0
.eh_frame:000000000000DFC8                 db    0
.eh_frame:000000000000DFC9                 db    0
.eh_frame:000000000000DFCA                 db    0
.eh_frame:000000000000DFCB                 db    0
.eh_frame:000000000000DFCC                 db  18h
.eh_frame:000000000000DFCD                 db    0
.eh_frame:000000000000DFCE                 db    0
.eh_frame:000000000000DFCF                 db    0
.eh_frame:000000000000DFD0                 db 0D8h
.eh_frame:000000000000DFD1                 db    6
.eh_frame:000000000000DFD2                 db    0
.eh_frame:000000000000DFD3                 db    0
.eh_frame:000000000000DFD4                 db 0BCh
.eh_frame:000000000000DFD5                 db  8Dh
.eh_frame:000000000000DFD6                 db 0FFh
.eh_frame:000000000000DFD7                 db 0FFh
.eh_frame:000000000000DFD8                 db  22h ; "
.eh_frame:000000000000DFD9                 db    0
.eh_frame:000000000000DFDA                 db    0
.eh_frame:000000000000DFDB                 db    0
.eh_frame:000000000000DFDC                 db    0
.eh_frame:000000000000DFDD                 db  41h ; A
.eh_frame:000000000000DFDE                 db  0Eh
.eh_frame:000000000000DFDF                 db  10h
.eh_frame:000000000000DFE0                 db  83h
.eh_frame:000000000000DFE1                 db    2
.eh_frame:000000000000DFE2                 db  5Bh ; [
.eh_frame:000000000000DFE3                 db  0Ah
.eh_frame:000000000000DFE4                 db  0Eh
.eh_frame:000000000000DFE5                 db    8
.eh_frame:000000000000DFE6                 db  41h ; A
.eh_frame:000000000000DFE7                 db  0Bh
.eh_frame:000000000000DFE8                 db  5Ch ; \
.eh_frame:000000000000DFE9                 db    0
.eh_frame:000000000000DFEA                 db    0
.eh_frame:000000000000DFEB                 db    0
.eh_frame:000000000000DFEC                 db 0F4h
.eh_frame:000000000000DFED                 db    6
.eh_frame:000000000000DFEE                 db    0
.eh_frame:000000000000DFEF                 db    0
.eh_frame:000000000000DFF0                 db 0D0h
.eh_frame:000000000000DFF1                 db  8Dh
.eh_frame:000000000000DFF2                 db 0FFh
.eh_frame:000000000000DFF3                 db 0FFh
.eh_frame:000000000000DFF4                 db  1Eh
.eh_frame:000000000000DFF5                 db    1
.eh_frame:000000000000DFF6                 db    0
.eh_frame:000000000000DFF7                 db    0
.eh_frame:000000000000DFF8                 db    0
.eh_frame:000000000000DFF9                 db  42h ; B
.eh_frame:000000000000DFFA                 db  0Eh
.eh_frame:000000000000DFFB                 db  10h
.eh_frame:000000000000DFFC                 db  8Eh
.eh_frame:000000000000DFFD                 db    2
.eh_frame:000000000000DFFE                 db  42h ; B
.eh_frame:000000000000DFFF                 db  0Eh
.eh_frame:000000000000E000                 db  18h
.eh_frame:000000000000E001                 db  8Dh
.eh_frame:000000000000E002                 db    3
.eh_frame:000000000000E003                 db  45h ; E
.eh_frame:000000000000E004                 db  0Eh
.eh_frame:000000000000E005                 db  20h
.eh_frame:000000000000E006                 db  8Ch
.eh_frame:000000000000E007                 db    4
.eh_frame:000000000000E008                 db  41h ; A
.eh_frame:000000000000E009                 db  0Eh
.eh_frame:000000000000E00A                 db  28h ; (
.eh_frame:000000000000E00B                 db  86h
.eh_frame:000000000000E00C                 db    5
.eh_frame:000000000000E00D                 db  44h ; D
.eh_frame:000000000000E00E                 db  0Eh
.eh_frame:000000000000E00F                 db  30h ; 0
.eh_frame:000000000000E010                 db  83h
.eh_frame:000000000000E011                 db    6
.eh_frame:000000000000E012                 db    2
.eh_frame:000000000000E013                 db 0A1h
.eh_frame:000000000000E014                 db  0Ah
.eh_frame:000000000000E015                 db  0Eh
.eh_frame:000000000000E016                 db  28h ; (
.eh_frame:000000000000E017                 db  44h ; D
.eh_frame:000000000000E018                 db  0Eh
.eh_frame:000000000000E019                 db  20h
.eh_frame:000000000000E01A                 db  42h ; B
.eh_frame:000000000000E01B                 db  0Eh
.eh_frame:000000000000E01C                 db  18h
.eh_frame:000000000000E01D                 db  42h ; B
.eh_frame:000000000000E01E                 db  0Eh
.eh_frame:000000000000E01F                 db  10h
.eh_frame:000000000000E020                 db  42h ; B
.eh_frame:000000000000E021                 db  0Eh
.eh_frame:000000000000E022                 db    8
.eh_frame:000000000000E023                 db  47h ; G
.eh_frame:000000000000E024                 db  0Bh
.eh_frame:000000000000E025                 db  71h ; q
.eh_frame:000000000000E026                 db  0Ah
.eh_frame:000000000000E027                 db  0Eh
.eh_frame:000000000000E028                 db  28h ; (
.eh_frame:000000000000E029                 db  41h ; A
.eh_frame:000000000000E02A                 db  0Eh
.eh_frame:000000000000E02B                 db  20h
.eh_frame:000000000000E02C                 db  42h ; B
.eh_frame:000000000000E02D                 db  0Eh
.eh_frame:000000000000E02E                 db  18h
.eh_frame:000000000000E02F                 db  42h ; B
.eh_frame:000000000000E030                 db  0Eh
.eh_frame:000000000000E031                 db  10h
.eh_frame:000000000000E032                 db  42h ; B
.eh_frame:000000000000E033                 db  0Eh
.eh_frame:000000000000E034                 db    8
.eh_frame:000000000000E035                 db  48h ; H
.eh_frame:000000000000E036                 db  0Bh
.eh_frame:000000000000E037                 db  53h ; S
.eh_frame:000000000000E038                 db  0Eh
.eh_frame:000000000000E039                 db  28h ; (
.eh_frame:000000000000E03A                 db  44h ; D
.eh_frame:000000000000E03B                 db  0Eh
.eh_frame:000000000000E03C                 db  20h
.eh_frame:000000000000E03D                 db  42h ; B
.eh_frame:000000000000E03E                 db  0Eh
.eh_frame:000000000000E03F                 db  18h
.eh_frame:000000000000E040                 db  42h ; B
.eh_frame:000000000000E041                 db  0Eh
.eh_frame:000000000000E042                 db  10h
.eh_frame:000000000000E043                 db  42h ; B
.eh_frame:000000000000E044                 db  0Eh
.eh_frame:000000000000E045                 db    8
.eh_frame:000000000000E046                 db    0
.eh_frame:000000000000E047                 db    0
.eh_frame:000000000000E048                 db  10h
.eh_frame:000000000000E049                 db    0
.eh_frame:000000000000E04A                 db    0
.eh_frame:000000000000E04B                 db    0
.eh_frame:000000000000E04C                 db  54h ; T
.eh_frame:000000000000E04D                 db    7
.eh_frame:000000000000E04E                 db    0
.eh_frame:000000000000E04F                 db    0
.eh_frame:000000000000E050                 db  90h
.eh_frame:000000000000E051                 db  8Eh
.eh_frame:000000000000E052                 db 0FFh
.eh_frame:000000000000E053                 db 0FFh
.eh_frame:000000000000E054                 db  77h ; w
.eh_frame:000000000000E055                 db    0
.eh_frame:000000000000E056                 db    0
.eh_frame:000000000000E057                 db    0
.eh_frame:000000000000E058                 db    0
.eh_frame:000000000000E059                 db    0
.eh_frame:000000000000E05A                 db    0
.eh_frame:000000000000E05B                 db    0
.eh_frame:000000000000E05C                 db  5Ch ; \
.eh_frame:000000000000E05D                 db    0
.eh_frame:000000000000E05E                 db    0
.eh_frame:000000000000E05F                 db    0
.eh_frame:000000000000E060                 db  68h ; h
.eh_frame:000000000000E061                 db    7
.eh_frame:000000000000E062                 db    0
.eh_frame:000000000000E063                 db    0
.eh_frame:000000000000E064                 db 0FCh
.eh_frame:000000000000E065                 db  8Eh
.eh_frame:000000000000E066                 db 0FFh
.eh_frame:000000000000E067                 db 0FFh
.eh_frame:000000000000E068                 db  40h ; @
.eh_frame:000000000000E069                 db    1
.eh_frame:000000000000E06A                 db    0
.eh_frame:000000000000E06B                 db    0
.eh_frame:000000000000E06C                 db    0
.eh_frame:000000000000E06D                 db  42h ; B
.eh_frame:000000000000E06E                 db  0Eh
.eh_frame:000000000000E06F                 db  10h
.eh_frame:000000000000E070                 db  8Fh
.eh_frame:000000000000E071                 db    2
.eh_frame:000000000000E072                 db  42h ; B
.eh_frame:000000000000E073                 db  0Eh
.eh_frame:000000000000E074                 db  18h
.eh_frame:000000000000E075                 db  8Eh
.eh_frame:000000000000E076                 db    3
.eh_frame:000000000000E077                 db  42h ; B
.eh_frame:000000000000E078                 db  0Eh
.eh_frame:000000000000E079                 db  20h
.eh_frame:000000000000E07A                 db  8Dh
.eh_frame:000000000000E07B                 db    4
.eh_frame:000000000000E07C                 db  42h ; B
.eh_frame:000000000000E07D                 db  0Eh
.eh_frame:000000000000E07E                 db  28h ; (
.eh_frame:000000000000E07F                 db  8Ch
.eh_frame:000000000000E080                 db    5
.eh_frame:000000000000E081                 db  41h ; A
.eh_frame:000000000000E082                 db  0Eh
.eh_frame:000000000000E083                 db  30h ; 0
.eh_frame:000000000000E084                 db  86h
.eh_frame:000000000000E085                 db    6
.eh_frame:000000000000E086                 db  41h ; A
.eh_frame:000000000000E087                 db  0Eh
.eh_frame:000000000000E088                 db  38h ; 8
.eh_frame:000000000000E089                 db  83h
.eh_frame:000000000000E08A                 db    7
.eh_frame:000000000000E08B                 db  44h ; D
.eh_frame:000000000000E08C                 db  0Eh
.eh_frame:000000000000E08D                 db  40h ; @
.eh_frame:000000000000E08E                 db    2
.eh_frame:000000000000E08F                 db 0EEh
.eh_frame:000000000000E090                 db  0Ah
.eh_frame:000000000000E091                 db  0Eh
.eh_frame:000000000000E092                 db  38h ; 8
.eh_frame:000000000000E093                 db  46h ; F
.eh_frame:000000000000E094                 db  0Eh
.eh_frame:000000000000E095                 db  30h ; 0
.eh_frame:000000000000E096                 db  41h ; A
.eh_frame:000000000000E097                 db  0Eh
.eh_frame:000000000000E098                 db  28h ; (
.eh_frame:000000000000E099                 db  42h ; B
.eh_frame:000000000000E09A                 db  0Eh
.eh_frame:000000000000E09B                 db  20h
.eh_frame:000000000000E09C                 db  42h ; B
.eh_frame:000000000000E09D                 db  0Eh
.eh_frame:000000000000E09E                 db  18h
.eh_frame:000000000000E09F                 db  42h ; B
.eh_frame:000000000000E0A0                 db  0Eh
.eh_frame:000000000000E0A1                 db  10h
.eh_frame:000000000000E0A2                 db  42h ; B
.eh_frame:000000000000E0A3                 db  0Eh
.eh_frame:000000000000E0A4                 db    8
.eh_frame:000000000000E0A5                 db  45h ; E
.eh_frame:000000000000E0A6                 db  0Bh
.eh_frame:000000000000E0A7                 db  63h ; c
.eh_frame:000000000000E0A8                 db  0Eh
.eh_frame:000000000000E0A9                 db  38h ; 8
.eh_frame:000000000000E0AA                 db  43h ; C
.eh_frame:000000000000E0AB                 db  0Eh
.eh_frame:000000000000E0AC                 db  30h ; 0
.eh_frame:000000000000E0AD                 db  41h ; A
.eh_frame:000000000000E0AE                 db  0Eh
.eh_frame:000000000000E0AF                 db  28h ; (
.eh_frame:000000000000E0B0                 db  42h ; B
.eh_frame:000000000000E0B1                 db  0Eh
.eh_frame:000000000000E0B2                 db  20h
.eh_frame:000000000000E0B3                 db  42h ; B
.eh_frame:000000000000E0B4                 db  0Eh
.eh_frame:000000000000E0B5                 db  18h
.eh_frame:000000000000E0B6                 db  42h ; B
.eh_frame:000000000000E0B7                 db  0Eh
.eh_frame:000000000000E0B8                 db  10h
.eh_frame:000000000000E0B9                 db  42h ; B
.eh_frame:000000000000E0BA                 db  0Eh
.eh_frame:000000000000E0BB                 db    8
.eh_frame:000000000000E0BC                 db  10h
.eh_frame:000000000000E0BD                 db    0
.eh_frame:000000000000E0BE                 db    0
.eh_frame:000000000000E0BF                 db    0
.eh_frame:000000000000E0C0                 db 0C8h
.eh_frame:000000000000E0C1                 db    7
.eh_frame:000000000000E0C2                 db    0
.eh_frame:000000000000E0C3                 db    0
.eh_frame:000000000000E0C4                 db 0DCh
.eh_frame:000000000000E0C5                 db  8Fh
.eh_frame:000000000000E0C6                 db 0FFh
.eh_frame:000000000000E0C7                 db 0FFh
.eh_frame:000000000000E0C8                 db    5
.eh_frame:000000000000E0C9                 db    0
.eh_frame:000000000000E0CA                 db    0
.eh_frame:000000000000E0CB                 db    0
.eh_frame:000000000000E0CC                 db    0
.eh_frame:000000000000E0CD                 db    0
.eh_frame:000000000000E0CE                 db    0
.eh_frame:000000000000E0CF                 db    0
.eh_frame:000000000000E0D0                 db  10h
.eh_frame:000000000000E0D1                 db    0
.eh_frame:000000000000E0D2                 db    0
.eh_frame:000000000000E0D3                 db    0
.eh_frame:000000000000E0D4                 db 0DCh
.eh_frame:000000000000E0D5                 db    7
.eh_frame:000000000000E0D6                 db    0
.eh_frame:000000000000E0D7                 db    0
.eh_frame:000000000000E0D8                 db 0D8h
.eh_frame:000000000000E0D9                 db  8Fh
.eh_frame:000000000000E0DA                 db 0FFh
.eh_frame:000000000000E0DB                 db 0FFh
.eh_frame:000000000000E0DC                 db    5
.eh_frame:000000000000E0DD                 db    0
.eh_frame:000000000000E0DE                 db    0
.eh_frame:000000000000E0DF                 db    0
.eh_frame:000000000000E0E0                 db    0
.eh_frame:000000000000E0E1                 db    0
.eh_frame:000000000000E0E2                 db    0
.eh_frame:000000000000E0E3                 db    0
.eh_frame:000000000000E0E4                 db  10h
.eh_frame:000000000000E0E5                 db    0
.eh_frame:000000000000E0E6                 db    0
.eh_frame:000000000000E0E7                 db    0
.eh_frame:000000000000E0E8                 db 0F0h
.eh_frame:000000000000E0E9                 db    7
.eh_frame:000000000000E0EA                 db    0
.eh_frame:000000000000E0EB                 db    0
.eh_frame:000000000000E0EC                 db 0D4h
.eh_frame:000000000000E0ED                 db  8Fh
.eh_frame:000000000000E0EE                 db 0FFh
.eh_frame:000000000000E0EF                 db 0FFh
.eh_frame:000000000000E0F0                 db    5
.eh_frame:000000000000E0F1                 db    0
.eh_frame:000000000000E0F2                 db    0
.eh_frame:000000000000E0F3                 db    0
.eh_frame:000000000000E0F4                 db    0
.eh_frame:000000000000E0F5                 db    0
.eh_frame:000000000000E0F6                 db    0
.eh_frame:000000000000E0F7                 db    0
.eh_frame:000000000000E0F8                 db  10h
.eh_frame:000000000000E0F9                 db    0
.eh_frame:000000000000E0FA                 db    0
.eh_frame:000000000000E0FB                 db    0
.eh_frame:000000000000E0FC                 db    4
.eh_frame:000000000000E0FD                 db    8
.eh_frame:000000000000E0FE                 db    0
.eh_frame:000000000000E0FF                 db    0
.eh_frame:000000000000E100                 db 0D0h
.eh_frame:000000000000E101                 db  8Fh
.eh_frame:000000000000E102                 db 0FFh
.eh_frame:000000000000E103                 db 0FFh
.eh_frame:000000000000E104                 db  49h ; I
.eh_frame:000000000000E105                 db    0
.eh_frame:000000000000E106                 db    0
.eh_frame:000000000000E107                 db    0
.eh_frame:000000000000E108                 db    0
.eh_frame:000000000000E109                 db    0
.eh_frame:000000000000E10A                 db    0
.eh_frame:000000000000E10B                 db    0
.eh_frame:000000000000E10C                 db  10h
.eh_frame:000000000000E10D                 db    0
.eh_frame:000000000000E10E                 db    0
.eh_frame:000000000000E10F                 db    0
.eh_frame:000000000000E110                 db  18h
.eh_frame:000000000000E111                 db    8
.eh_frame:000000000000E112                 db    0
.eh_frame:000000000000E113                 db    0
.eh_frame:000000000000E114                 db  0Ch
.eh_frame:000000000000E115                 db  90h
.eh_frame:000000000000E116                 db 0FFh
.eh_frame:000000000000E117                 db 0FFh
.eh_frame:000000000000E118                 db  58h ; X
.eh_frame:000000000000E119                 db    0
.eh_frame:000000000000E11A                 db    0
.eh_frame:000000000000E11B                 db    0
.eh_frame:000000000000E11C                 db    0
.eh_frame:000000000000E11D                 db    0
.eh_frame:000000000000E11E                 db    0
.eh_frame:000000000000E11F                 db    0
.eh_frame:000000000000E120                 db  38h ; 8
.eh_frame:000000000000E121                 db    0
.eh_frame:000000000000E122                 db    0
.eh_frame:000000000000E123                 db    0
.eh_frame:000000000000E124                 db  2Ch ; ,
.eh_frame:000000000000E125                 db    8
.eh_frame:000000000000E126                 db    0
.eh_frame:000000000000E127                 db    0
.eh_frame:000000000000E128                 db  58h ; X
.eh_frame:000000000000E129                 db  90h
.eh_frame:000000000000E12A                 db 0FFh
.eh_frame:000000000000E12B                 db 0FFh
.eh_frame:000000000000E12C                 db  47h ; G
.eh_frame:000000000000E12D                 db    1
.eh_frame:000000000000E12E                 db    0
.eh_frame:000000000000E12F                 db    0
.eh_frame:000000000000E130                 db    0
.eh_frame:000000000000E131                 db  42h ; B
.eh_frame:000000000000E132                 db  0Eh
.eh_frame:000000000000E133                 db  10h
.eh_frame:000000000000E134                 db  8Dh
.eh_frame:000000000000E135                 db    2
.eh_frame:000000000000E136                 db  42h ; B
.eh_frame:000000000000E137                 db  0Eh
.eh_frame:000000000000E138                 db  18h
.eh_frame:000000000000E139                 db  8Ch
.eh_frame:000000000000E13A                 db    3
.eh_frame:000000000000E13B                 db  44h ; D
.eh_frame:000000000000E13C                 db  0Eh
.eh_frame:000000000000E13D                 db  20h
.eh_frame:000000000000E13E                 db  86h
.eh_frame:000000000000E13F                 db    4
.eh_frame:000000000000E140                 db  41h ; A
.eh_frame:000000000000E141                 db  0Eh
.eh_frame:000000000000E142                 db  28h ; (
.eh_frame:000000000000E143                 db  83h
.eh_frame:000000000000E144                 db    5
.eh_frame:000000000000E145                 db  46h ; F
.eh_frame:000000000000E146                 db  0Eh
.eh_frame:000000000000E147                 db  30h ; 0
.eh_frame:000000000000E148                 db    2
.eh_frame:000000000000E149                 db 0CDh
.eh_frame:000000000000E14A                 db  0Ah
.eh_frame:000000000000E14B                 db  0Eh
.eh_frame:000000000000E14C                 db  28h ; (
.eh_frame:000000000000E14D                 db  47h ; G
.eh_frame:000000000000E14E                 db  0Eh
.eh_frame:000000000000E14F                 db  20h
.eh_frame:000000000000E150                 db  41h ; A
.eh_frame:000000000000E151                 db  0Eh
.eh_frame:000000000000E152                 db  18h
.eh_frame:000000000000E153                 db  42h ; B
.eh_frame:000000000000E154                 db  0Eh
.eh_frame:000000000000E155                 db  10h
.eh_frame:000000000000E156                 db  42h ; B
.eh_frame:000000000000E157                 db  0Eh
.eh_frame:000000000000E158                 db    8
.eh_frame:000000000000E159                 db  58h ; X
.eh_frame:000000000000E15A                 db  0Bh
.eh_frame:000000000000E15B                 db    0
.eh_frame:000000000000E15C                 db  34h ; 4
.eh_frame:000000000000E15D                 db    0
.eh_frame:000000000000E15E                 db    0
.eh_frame:000000000000E15F                 db    0
.eh_frame:000000000000E160                 db  68h ; h
.eh_frame:000000000000E161                 db    8
.eh_frame:000000000000E162                 db    0
.eh_frame:000000000000E163                 db    0
.eh_frame:000000000000E164                 db  6Ch ; l
.eh_frame:000000000000E165                 db  91h
.eh_frame:000000000000E166                 db 0FFh
.eh_frame:000000000000E167                 db 0FFh
.eh_frame:000000000000E168                 db  5Bh ; [
.eh_frame:000000000000E169                 db    0
.eh_frame:000000000000E16A                 db    0
.eh_frame:000000000000E16B                 db    0
.eh_frame:000000000000E16C                 db    0
.eh_frame:000000000000E16D                 db  42h ; B
.eh_frame:000000000000E16E                 db  0Eh
.eh_frame:000000000000E16F                 db  10h
.eh_frame:000000000000E170                 db  8Ch
.eh_frame:000000000000E171                 db    2
.eh_frame:000000000000E172                 db  41h ; A
.eh_frame:000000000000E173                 db  0Eh
.eh_frame:000000000000E174                 db  18h
.eh_frame:000000000000E175                 db  86h
.eh_frame:000000000000E176                 db    3
.eh_frame:000000000000E177                 db  44h ; D
.eh_frame:000000000000E178                 db  0Eh
.eh_frame:000000000000E179                 db  20h
.eh_frame:000000000000E17A                 db  83h
.eh_frame:000000000000E17B                 db    4
.eh_frame:000000000000E17C                 db  79h ; y
.eh_frame:000000000000E17D                 db  0Ah
.eh_frame:000000000000E17E                 db  0Eh
.eh_frame:000000000000E17F                 db  18h
.eh_frame:000000000000E180                 db  44h ; D
.eh_frame:000000000000E181                 db  0Eh
.eh_frame:000000000000E182                 db  10h
.eh_frame:000000000000E183                 db  42h ; B
.eh_frame:000000000000E184                 db  0Eh
.eh_frame:000000000000E185                 db    8
.eh_frame:000000000000E186                 db  4Ah ; J
.eh_frame:000000000000E187                 db  0Bh
.eh_frame:000000000000E188                 db  44h ; D
.eh_frame:000000000000E189                 db  0Eh
.eh_frame:000000000000E18A                 db  18h
.eh_frame:000000000000E18B                 db  41h ; A
.eh_frame:000000000000E18C                 db  0Eh
.eh_frame:000000000000E18D                 db  10h
.eh_frame:000000000000E18E                 db  45h ; E
.eh_frame:000000000000E18F                 db  0Eh
.eh_frame:000000000000E190                 db    8
.eh_frame:000000000000E191                 db    0
.eh_frame:000000000000E192                 db    0
.eh_frame:000000000000E193                 db    0
.eh_frame:000000000000E194                 db  10h
.eh_frame:000000000000E195                 db    0
.eh_frame:000000000000E196                 db    0
.eh_frame:000000000000E197                 db    0
.eh_frame:000000000000E198                 db 0A0h
.eh_frame:000000000000E199                 db    8
.eh_frame:000000000000E19A                 db    0
.eh_frame:000000000000E19B                 db    0
.eh_frame:000000000000E19C                 db  94h
.eh_frame:000000000000E19D                 db  91h
.eh_frame:000000000000E19E                 db 0FFh
.eh_frame:000000000000E19F                 db 0FFh
.eh_frame:000000000000E1A0                 db  41h ; A
.eh_frame:000000000000E1A1                 db    0
.eh_frame:000000000000E1A2                 db    0
.eh_frame:000000000000E1A3                 db    0
.eh_frame:000000000000E1A4                 db    0
.eh_frame:000000000000E1A5                 db  7Ch ; |
.eh_frame:000000000000E1A6                 db  0Eh
.eh_frame:000000000000E1A7                 db  10h
.eh_frame:000000000000E1A8                 db  30h ; 0
.eh_frame:000000000000E1A9                 db    0
.eh_frame:000000000000E1AA                 db    0
.eh_frame:000000000000E1AB                 db    0
.eh_frame:000000000000E1AC                 db 0B4h
.eh_frame:000000000000E1AD                 db    8
.eh_frame:000000000000E1AE                 db    0
.eh_frame:000000000000E1AF                 db    0
.eh_frame:000000000000E1B0                 db 0D0h
.eh_frame:000000000000E1B1                 db  91h
.eh_frame:000000000000E1B2                 db 0FFh
.eh_frame:000000000000E1B3                 db 0FFh
.eh_frame:000000000000E1B4                 db  72h ; r
.eh_frame:000000000000E1B5                 db    0
.eh_frame:000000000000E1B6                 db    0
.eh_frame:000000000000E1B7                 db    0
.eh_frame:000000000000E1B8                 db    0
.eh_frame:000000000000E1B9                 db  41h ; A
.eh_frame:000000000000E1BA                 db  0Eh
.eh_frame:000000000000E1BB                 db  10h
.eh_frame:000000000000E1BC                 db  86h
.eh_frame:000000000000E1BD                 db    2
.eh_frame:000000000000E1BE                 db  41h ; A
.eh_frame:000000000000E1BF                 db  0Eh
.eh_frame:000000000000E1C0                 db  18h
.eh_frame:000000000000E1C1                 db  83h
.eh_frame:000000000000E1C2                 db    3
.eh_frame:000000000000E1C3                 db  4Ah ; J
.eh_frame:000000000000E1C4                 db  0Eh
.eh_frame:000000000000E1C5                 db  20h
.eh_frame:000000000000E1C6                 db    2
.eh_frame:000000000000E1C7                 db  53h ; S
.eh_frame:000000000000E1C8                 db  0Ah
.eh_frame:000000000000E1C9                 db  0Eh
.eh_frame:000000000000E1CA                 db  18h
.eh_frame:000000000000E1CB                 db  41h ; A
.eh_frame:000000000000E1CC                 db  0Eh
.eh_frame:000000000000E1CD                 db  10h
.eh_frame:000000000000E1CE                 db  41h ; A
.eh_frame:000000000000E1CF                 db  0Eh
.eh_frame:000000000000E1D0                 db    8
.eh_frame:000000000000E1D1                 db  47h ; G
.eh_frame:000000000000E1D2                 db  0Bh
.eh_frame:000000000000E1D3                 db  47h ; G
.eh_frame:000000000000E1D4                 db  0Eh
.eh_frame:000000000000E1D5                 db  18h
.eh_frame:000000000000E1D6                 db  41h ; A
.eh_frame:000000000000E1D7                 db  0Eh
.eh_frame:000000000000E1D8                 db  10h
.eh_frame:000000000000E1D9                 db  41h ; A
.eh_frame:000000000000E1DA                 db  0Eh
.eh_frame:000000000000E1DB                 db    8
.eh_frame:000000000000E1DC                 db  10h
.eh_frame:000000000000E1DD                 db    0
.eh_frame:000000000000E1DE                 db    0
.eh_frame:000000000000E1DF                 db    0
.eh_frame:000000000000E1E0                 db 0E8h
.eh_frame:000000000000E1E1                 db    8
.eh_frame:000000000000E1E2                 db    0
.eh_frame:000000000000E1E3                 db    0
.eh_frame:000000000000E1E4                 db  1Ch
.eh_frame:000000000000E1E5                 db  92h
.eh_frame:000000000000E1E6                 db 0FFh
.eh_frame:000000000000E1E7                 db 0FFh
.eh_frame:000000000000E1E8                 db  65h ; e
.eh_frame:000000000000E1E9                 db    0
.eh_frame:000000000000E1EA                 db    0
.eh_frame:000000000000E1EB                 db    0
.eh_frame:000000000000E1EC                 db    0
.eh_frame:000000000000E1ED                 db    0
.eh_frame:000000000000E1EE                 db    0
.eh_frame:000000000000E1EF                 db    0
.eh_frame:000000000000E1F0                 db  48h ; H
.eh_frame:000000000000E1F1                 db    0
.eh_frame:000000000000E1F2                 db    0
.eh_frame:000000000000E1F3                 db    0
.eh_frame:000000000000E1F4                 db 0FCh
.eh_frame:000000000000E1F5                 db    8
.eh_frame:000000000000E1F6                 db    0
.eh_frame:000000000000E1F7                 db    0
.eh_frame:000000000000E1F8                 db  78h ; x
.eh_frame:000000000000E1F9                 db  92h
.eh_frame:000000000000E1FA                 db 0FFh
.eh_frame:000000000000E1FB                 db 0FFh
.eh_frame:000000000000E1FC                 db  6Ah ; j
.eh_frame:000000000000E1FD                 db    0
.eh_frame:000000000000E1FE                 db    0
.eh_frame:000000000000E1FF                 db    0
.eh_frame:000000000000E200                 db    0
.eh_frame:000000000000E201                 db  42h ; B
.eh_frame:000000000000E202                 db  0Eh
.eh_frame:000000000000E203                 db  10h
.eh_frame:000000000000E204                 db  8Fh
.eh_frame:000000000000E205                 db    2
.eh_frame:000000000000E206                 db  42h ; B
.eh_frame:000000000000E207                 db  0Eh
.eh_frame:000000000000E208                 db  18h
.eh_frame:000000000000E209                 db  8Eh
.eh_frame:000000000000E20A                 db    3
.eh_frame:000000000000E20B                 db  42h ; B
.eh_frame:000000000000E20C                 db  0Eh
.eh_frame:000000000000E20D                 db  20h
.eh_frame:000000000000E20E                 db  8Dh
.eh_frame:000000000000E20F                 db    4
.eh_frame:000000000000E210                 db  42h ; B
.eh_frame:000000000000E211                 db  0Eh
.eh_frame:000000000000E212                 db  28h ; (
.eh_frame:000000000000E213                 db  8Ch
.eh_frame:000000000000E214                 db    5
.eh_frame:000000000000E215                 db  41h ; A
.eh_frame:000000000000E216                 db  0Eh
.eh_frame:000000000000E217                 db  30h ; 0
.eh_frame:000000000000E218                 db  86h
.eh_frame:000000000000E219                 db    6
.eh_frame:000000000000E21A                 db  41h ; A
.eh_frame:000000000000E21B                 db  0Eh
.eh_frame:000000000000E21C                 db  38h ; 8
.eh_frame:000000000000E21D                 db  83h
.eh_frame:000000000000E21E                 db    7
.eh_frame:000000000000E21F                 db  44h ; D
.eh_frame:000000000000E220                 db  0Eh
.eh_frame:000000000000E221                 db  40h ; @
.eh_frame:000000000000E222                 db    2
.eh_frame:000000000000E223                 db  4Ah ; J
.eh_frame:000000000000E224                 db  0Ah
.eh_frame:000000000000E225                 db  0Eh
.eh_frame:000000000000E226                 db  38h ; 8
.eh_frame:000000000000E227                 db  44h ; D
.eh_frame:000000000000E228                 db  0Eh
.eh_frame:000000000000E229                 db  30h ; 0
.eh_frame:000000000000E22A                 db  41h ; A
.eh_frame:000000000000E22B                 db  0Eh
.eh_frame:000000000000E22C                 db  28h ; (
.eh_frame:000000000000E22D                 db  42h ; B
.eh_frame:000000000000E22E                 db  0Eh
.eh_frame:000000000000E22F                 db  20h
.eh_frame:000000000000E230                 db  42h ; B
.eh_frame:000000000000E231                 db  0Eh
.eh_frame:000000000000E232                 db  18h
.eh_frame:000000000000E233                 db  42h ; B
.eh_frame:000000000000E234                 db  0Eh
.eh_frame:000000000000E235                 db  10h
.eh_frame:000000000000E236                 db  42h ; B
.eh_frame:000000000000E237                 db  0Eh
.eh_frame:000000000000E238                 db    8
.eh_frame:000000000000E239                 db  41h ; A
.eh_frame:000000000000E23A                 db  0Bh
.eh_frame:000000000000E23B                 db    0
.eh_frame:000000000000E23C                 db  10h
.eh_frame:000000000000E23D                 db    0
.eh_frame:000000000000E23E                 db    0
.eh_frame:000000000000E23F                 db    0
.eh_frame:000000000000E240                 db  48h ; H
.eh_frame:000000000000E241                 db    9
.eh_frame:000000000000E242                 db    0
.eh_frame:000000000000E243                 db    0
.eh_frame:000000000000E244                 db  9Ch
.eh_frame:000000000000E245                 db  92h
.eh_frame:000000000000E246                 db 0FFh
.eh_frame:000000000000E247                 db 0FFh
.eh_frame:000000000000E248                 db  31h ; 1
.eh_frame:000000000000E249                 db    0
.eh_frame:000000000000E24A                 db    0
.eh_frame:000000000000E24B                 db    0
.eh_frame:000000000000E24C                 db    0
.eh_frame:000000000000E24D                 db    0
.eh_frame:000000000000E24E                 db    0
.eh_frame:000000000000E24F                 db    0
.eh_frame:000000000000E250                 db  10h
.eh_frame:000000000000E251                 db    0
.eh_frame:000000000000E252                 db    0
.eh_frame:000000000000E253                 db    0
.eh_frame:000000000000E254                 db  5Ch ; \
.eh_frame:000000000000E255                 db    9
.eh_frame:000000000000E256                 db    0
.eh_frame:000000000000E257                 db    0
.eh_frame:000000000000E258                 db 0C8h
.eh_frame:000000000000E259                 db  92h
.eh_frame:000000000000E25A                 db 0FFh
.eh_frame:000000000000E25B                 db 0FFh
.eh_frame:000000000000E25C                 db  20h
.eh_frame:000000000000E25D                 db    0
.eh_frame:000000000000E25E                 db    0
.eh_frame:000000000000E25F                 db    0
.eh_frame:000000000000E260                 db    0
.eh_frame:000000000000E261                 db    0
.eh_frame:000000000000E262                 db    0
.eh_frame:000000000000E263                 db    0
.eh_frame:000000000000E264                 db  48h ; H
.eh_frame:000000000000E265                 db    0
.eh_frame:000000000000E266                 db    0
.eh_frame:000000000000E267                 db    0
.eh_frame:000000000000E268                 db  70h ; p
.eh_frame:000000000000E269                 db    9
.eh_frame:000000000000E26A                 db    0
.eh_frame:000000000000E26B                 db    0
.eh_frame:000000000000E26C                 db 0D4h
.eh_frame:000000000000E26D                 db  92h
.eh_frame:000000000000E26E                 db 0FFh
.eh_frame:000000000000E26F                 db 0FFh
.eh_frame:000000000000E270                 db 0B4h
.eh_frame:000000000000E271                 db    1
.eh_frame:000000000000E272                 db    0
.eh_frame:000000000000E273                 db    0
.eh_frame:000000000000E274                 db    0
.eh_frame:000000000000E275                 db  42h ; B
.eh_frame:000000000000E276                 db  0Eh
.eh_frame:000000000000E277                 db  10h
.eh_frame:000000000000E278                 db  8Fh
.eh_frame:000000000000E279                 db    2
.eh_frame:000000000000E27A                 db  42h ; B
.eh_frame:000000000000E27B                 db  0Eh
.eh_frame:000000000000E27C                 db  18h
.eh_frame:000000000000E27D                 db  8Eh
.eh_frame:000000000000E27E                 db    3
.eh_frame:000000000000E27F                 db  49h ; I
.eh_frame:000000000000E280                 db  0Eh
.eh_frame:000000000000E281                 db  20h
.eh_frame:000000000000E282                 db  8Dh
.eh_frame:000000000000E283                 db    4
.eh_frame:000000000000E284                 db  42h ; B
.eh_frame:000000000000E285                 db  0Eh
.eh_frame:000000000000E286                 db  28h ; (
.eh_frame:000000000000E287                 db  8Ch
.eh_frame:000000000000E288                 db    5
.eh_frame:000000000000E289                 db  44h ; D
.eh_frame:000000000000E28A                 db  0Eh
.eh_frame:000000000000E28B                 db  30h ; 0
.eh_frame:000000000000E28C                 db  86h
.eh_frame:000000000000E28D                 db    6
.eh_frame:000000000000E28E                 db  41h ; A
.eh_frame:000000000000E28F                 db  0Eh
.eh_frame:000000000000E290                 db  38h ; 8
.eh_frame:000000000000E291                 db  83h
.eh_frame:000000000000E292                 db    7
.eh_frame:000000000000E293                 db  52h ; R
.eh_frame:000000000000E294                 db  0Eh
.eh_frame:000000000000E295                 db  40h ; @
.eh_frame:000000000000E296                 db    2
.eh_frame:000000000000E297                 db 0D8h
.eh_frame:000000000000E298                 db  0Ah
.eh_frame:000000000000E299                 db  0Eh
.eh_frame:000000000000E29A                 db  38h ; 8
.eh_frame:000000000000E29B                 db  44h ; D
.eh_frame:000000000000E29C                 db  0Eh
.eh_frame:000000000000E29D                 db  30h ; 0
.eh_frame:000000000000E29E                 db  41h ; A
.eh_frame:000000000000E29F                 db  0Eh
.eh_frame:000000000000E2A0                 db  28h ; (
.eh_frame:000000000000E2A1                 db  42h ; B
.eh_frame:000000000000E2A2                 db  0Eh
.eh_frame:000000000000E2A3                 db  20h
.eh_frame:000000000000E2A4                 db  42h ; B
.eh_frame:000000000000E2A5                 db  0Eh
.eh_frame:000000000000E2A6                 db  18h
.eh_frame:000000000000E2A7                 db  42h ; B
.eh_frame:000000000000E2A8                 db  0Eh
.eh_frame:000000000000E2A9                 db  10h
.eh_frame:000000000000E2AA                 db  42h ; B
.eh_frame:000000000000E2AB                 db  0Eh
.eh_frame:000000000000E2AC                 db    8
.eh_frame:000000000000E2AD                 db  45h ; E
.eh_frame:000000000000E2AE                 db  0Bh
.eh_frame:000000000000E2AF                 db    0
.eh_frame:000000000000E2B0                 db  28h ; (
.eh_frame:000000000000E2B1                 db    0
.eh_frame:000000000000E2B2                 db    0
.eh_frame:000000000000E2B3                 db    0
.eh_frame:000000000000E2B4                 db 0BCh
.eh_frame:000000000000E2B5                 db    9
.eh_frame:000000000000E2B6                 db    0
.eh_frame:000000000000E2B7                 db    0
.eh_frame:000000000000E2B8                 db  48h ; H
.eh_frame:000000000000E2B9                 db  94h
.eh_frame:000000000000E2BA                 db 0FFh
.eh_frame:000000000000E2BB                 db 0FFh
.eh_frame:000000000000E2BC                 db  90h
.eh_frame:000000000000E2BD                 db    0
.eh_frame:000000000000E2BE                 db    0
.eh_frame:000000000000E2BF                 db    0
.eh_frame:000000000000E2C0                 db    0
.eh_frame:000000000000E2C1                 db  42h ; B
.eh_frame:000000000000E2C2                 db  0Eh
.eh_frame:000000000000E2C3                 db  10h
.eh_frame:000000000000E2C4                 db  8Ch
.eh_frame:000000000000E2C5                 db    2
.eh_frame:000000000000E2C6                 db  41h ; A
.eh_frame:000000000000E2C7                 db  0Eh
.eh_frame:000000000000E2C8                 db  18h
.eh_frame:000000000000E2C9                 db  86h
.eh_frame:000000000000E2CA                 db    3
.eh_frame:000000000000E2CB                 db  44h ; D
.eh_frame:000000000000E2CC                 db  0Eh
.eh_frame:000000000000E2CD                 db  20h
.eh_frame:000000000000E2CE                 db  83h
.eh_frame:000000000000E2CF                 db    4
.eh_frame:000000000000E2D0                 db    2
.eh_frame:000000000000E2D1                 db  85h
.eh_frame:000000000000E2D2                 db  0Eh
.eh_frame:000000000000E2D3                 db  18h
.eh_frame:000000000000E2D4                 db  41h ; A
.eh_frame:000000000000E2D5                 db  0Eh
.eh_frame:000000000000E2D6                 db  10h
.eh_frame:000000000000E2D7                 db  42h ; B
.eh_frame:000000000000E2D8                 db  0Eh
.eh_frame:000000000000E2D9                 db    8
.eh_frame:000000000000E2DA                 db    0
.eh_frame:000000000000E2DB                 db    0
.eh_frame:000000000000E2DC                 db  28h ; (
.eh_frame:000000000000E2DD                 db    0
.eh_frame:000000000000E2DE                 db    0
.eh_frame:000000000000E2DF                 db    0
.eh_frame:000000000000E2E0                 db 0E8h
.eh_frame:000000000000E2E1                 db    9
.eh_frame:000000000000E2E2                 db    0
.eh_frame:000000000000E2E3                 db    0
.eh_frame:000000000000E2E4                 db 0ACh
.eh_frame:000000000000E2E5                 db  94h
.eh_frame:000000000000E2E6                 db 0FFh
.eh_frame:000000000000E2E7                 db 0FFh
.eh_frame:000000000000E2E8                 db 0D6h
.eh_frame:000000000000E2E9                 db    0
.eh_frame:000000000000E2EA                 db    0
.eh_frame:000000000000E2EB                 db    0
.eh_frame:000000000000E2EC                 db    0
.eh_frame:000000000000E2ED                 db  42h ; B
.eh_frame:000000000000E2EE                 db  0Eh
.eh_frame:000000000000E2EF                 db  10h
.eh_frame:000000000000E2F0                 db  8Ch
.eh_frame:000000000000E2F1                 db    2
.eh_frame:000000000000E2F2                 db  41h ; A
.eh_frame:000000000000E2F3                 db  0Eh
.eh_frame:000000000000E2F4                 db  18h
.eh_frame:000000000000E2F5                 db  86h
.eh_frame:000000000000E2F6                 db    3
.eh_frame:000000000000E2F7                 db  44h ; D
.eh_frame:000000000000E2F8                 db  0Eh
.eh_frame:000000000000E2F9                 db  20h
.eh_frame:000000000000E2FA                 db  83h
.eh_frame:000000000000E2FB                 db    4
.eh_frame:000000000000E2FC                 db    2
.eh_frame:000000000000E2FD                 db 0C4h
.eh_frame:000000000000E2FE                 db  0Eh
.eh_frame:000000000000E2FF                 db  18h
.eh_frame:000000000000E300                 db  44h ; D
.eh_frame:000000000000E301                 db  0Eh
.eh_frame:000000000000E302                 db  10h
.eh_frame:000000000000E303                 db  42h ; B
.eh_frame:000000000000E304                 db  0Eh
.eh_frame:000000000000E305                 db    8
.eh_frame:000000000000E306                 db    0
.eh_frame:000000000000E307                 db    0
.eh_frame:000000000000E308                 db  34h ; 4
.eh_frame:000000000000E309                 db    0
.eh_frame:000000000000E30A                 db    0
.eh_frame:000000000000E30B                 db    0
.eh_frame:000000000000E30C                 db  14h
.eh_frame:000000000000E30D                 db  0Ah
.eh_frame:000000000000E30E                 db    0
.eh_frame:000000000000E30F                 db    0
.eh_frame:000000000000E310                 db  60h ; `
.eh_frame:000000000000E311                 db  95h
.eh_frame:000000000000E312                 db 0FFh
.eh_frame:000000000000E313                 db 0FFh
.eh_frame:000000000000E314                 db  3Eh ; >
.eh_frame:000000000000E315                 db    2
.eh_frame:000000000000E316                 db    0
.eh_frame:000000000000E317                 db    0
.eh_frame:000000000000E318                 db    0
.eh_frame:000000000000E319                 db  42h ; B
.eh_frame:000000000000E31A                 db  0Eh
.eh_frame:000000000000E31B                 db  10h
.eh_frame:000000000000E31C                 db  8Ch
.eh_frame:000000000000E31D                 db    2
.eh_frame:000000000000E31E                 db  41h ; A
.eh_frame:000000000000E31F                 db  0Eh
.eh_frame:000000000000E320                 db  18h
.eh_frame:000000000000E321                 db  86h
.eh_frame:000000000000E322                 db    3
.eh_frame:000000000000E323                 db  44h ; D
.eh_frame:000000000000E324                 db  0Eh
.eh_frame:000000000000E325                 db  20h
.eh_frame:000000000000E326                 db  83h
.eh_frame:000000000000E327                 db    4
.eh_frame:000000000000E328                 db  44h ; D
.eh_frame:000000000000E329                 db  0Eh
.eh_frame:000000000000E32A                 db  80h
.eh_frame:000000000000E32B                 db    1
.eh_frame:000000000000E32C                 db    3
.eh_frame:000000000000E32D                 db  91h
.eh_frame:000000000000E32E                 db    1
.eh_frame:000000000000E32F                 db  0Ah
.eh_frame:000000000000E330                 db  0Eh
.eh_frame:000000000000E331                 db  20h
.eh_frame:000000000000E332                 db  41h ; A
.eh_frame:000000000000E333                 db  0Eh
.eh_frame:000000000000E334                 db  18h
.eh_frame:000000000000E335                 db  41h ; A
.eh_frame:000000000000E336                 db  0Eh
.eh_frame:000000000000E337                 db  10h
.eh_frame:000000000000E338                 db  42h ; B
.eh_frame:000000000000E339                 db  0Eh
.eh_frame:000000000000E33A                 db    8
.eh_frame:000000000000E33B                 db  48h ; H
.eh_frame:000000000000E33C                 db  0Bh
.eh_frame:000000000000E33D                 db    0
.eh_frame:000000000000E33E                 db    0
.eh_frame:000000000000E33F                 db    0
.eh_frame:000000000000E340                 db  38h ; 8
.eh_frame:000000000000E341                 db    0
.eh_frame:000000000000E342                 db    0
.eh_frame:000000000000E343                 db    0
.eh_frame:000000000000E344                 db  4Ch ; L
.eh_frame:000000000000E345                 db  0Ah
.eh_frame:000000000000E346                 db    0
.eh_frame:000000000000E347                 db    0
.eh_frame:000000000000E348                 db  68h ; h
.eh_frame:000000000000E349                 db  97h
.eh_frame:000000000000E34A                 db 0FFh
.eh_frame:000000000000E34B                 db 0FFh
.eh_frame:000000000000E34C                 db  84h
.eh_frame:000000000000E34D                 db    2
.eh_frame:000000000000E34E                 db    0
.eh_frame:000000000000E34F                 db    0
.eh_frame:000000000000E350                 db    0
.eh_frame:000000000000E351                 db  42h ; B
.eh_frame:000000000000E352                 db  0Eh
.eh_frame:000000000000E353                 db  10h
.eh_frame:000000000000E354                 db  8Dh
.eh_frame:000000000000E355                 db    2
.eh_frame:000000000000E356                 db  42h ; B
.eh_frame:000000000000E357                 db  0Eh
.eh_frame:000000000000E358                 db  18h
.eh_frame:000000000000E359                 db  8Ch
.eh_frame:000000000000E35A                 db    3
.eh_frame:000000000000E35B                 db  41h ; A
.eh_frame:000000000000E35C                 db  0Eh
.eh_frame:000000000000E35D                 db  20h
.eh_frame:000000000000E35E                 db  86h
.eh_frame:000000000000E35F                 db    4
.eh_frame:000000000000E360                 db  41h ; A
.eh_frame:000000000000E361                 db  0Eh
.eh_frame:000000000000E362                 db  28h ; (
.eh_frame:000000000000E363                 db  83h
.eh_frame:000000000000E364                 db    5
.eh_frame:000000000000E365                 db  44h ; D
.eh_frame:000000000000E366                 db  0Eh
.eh_frame:000000000000E367                 db  40h ; @
.eh_frame:000000000000E368                 db    2
.eh_frame:000000000000E369                 db  5Ah ; Z
.eh_frame:000000000000E36A                 db  0Ah
.eh_frame:000000000000E36B                 db  0Eh
.eh_frame:000000000000E36C                 db  28h ; (
.eh_frame:000000000000E36D                 db  41h ; A
.eh_frame:000000000000E36E                 db  0Eh
.eh_frame:000000000000E36F                 db  20h
.eh_frame:000000000000E370                 db  41h ; A
.eh_frame:000000000000E371                 db  0Eh
.eh_frame:000000000000E372                 db  18h
.eh_frame:000000000000E373                 db  42h ; B
.eh_frame:000000000000E374                 db  0Eh
.eh_frame:000000000000E375                 db  10h
.eh_frame:000000000000E376                 db  42h ; B
.eh_frame:000000000000E377                 db  0Eh
.eh_frame:000000000000E378                 db    8
.eh_frame:000000000000E379                 db  46h ; F
.eh_frame:000000000000E37A                 db  0Bh
.eh_frame:000000000000E37B                 db    0
.eh_frame:000000000000E37C                 db  20h
.eh_frame:000000000000E37D                 db    0
.eh_frame:000000000000E37E                 db    0
.eh_frame:000000000000E37F                 db    0
.eh_frame:000000000000E380                 db  88h
.eh_frame:000000000000E381                 db  0Ah
.eh_frame:000000000000E382                 db    0
.eh_frame:000000000000E383                 db    0
.eh_frame:000000000000E384                 db 0BCh
.eh_frame:000000000000E385                 db  99h
.eh_frame:000000000000E386                 db 0FFh
.eh_frame:000000000000E387                 db 0FFh
.eh_frame:000000000000E388                 db  59h ; Y
.eh_frame:000000000000E389                 db    0
.eh_frame:000000000000E38A                 db    0
.eh_frame:000000000000E38B                 db    0
.eh_frame:000000000000E38C                 db    0
.eh_frame:000000000000E38D                 db  41h ; A
.eh_frame:000000000000E38E                 db  0Eh
.eh_frame:000000000000E38F                 db  10h
.eh_frame:000000000000E390                 db  83h
.eh_frame:000000000000E391                 db    2
.eh_frame:000000000000E392                 db  47h ; G
.eh_frame:000000000000E393                 db  0Eh
.eh_frame:000000000000E394                 db  20h
.eh_frame:000000000000E395                 db  7Ch ; |
.eh_frame:000000000000E396                 db  0Ah
.eh_frame:000000000000E397                 db  0Eh
.eh_frame:000000000000E398                 db  10h
.eh_frame:000000000000E399                 db  41h ; A
.eh_frame:000000000000E39A                 db  0Eh
.eh_frame:000000000000E39B                 db    8
.eh_frame:000000000000E39C                 db  4Bh ; K
.eh_frame:000000000000E39D                 db  0Bh
.eh_frame:000000000000E39E                 db    0
.eh_frame:000000000000E39F                 db    0
.eh_frame:000000000000E3A0                 db  34h ; 4
.eh_frame:000000000000E3A1                 db    0
.eh_frame:000000000000E3A2                 db    0
.eh_frame:000000000000E3A3                 db    0
.eh_frame:000000000000E3A4                 db 0ACh
.eh_frame:000000000000E3A5                 db  0Ah
.eh_frame:000000000000E3A6                 db    0
.eh_frame:000000000000E3A7                 db    0
.eh_frame:000000000000E3A8                 db 0F8h
.eh_frame:000000000000E3A9                 db  99h
.eh_frame:000000000000E3AA                 db 0FFh
.eh_frame:000000000000E3AB                 db 0FFh
.eh_frame:000000000000E3AC                 db    3
.eh_frame:000000000000E3AD                 db    2
.eh_frame:000000000000E3AE                 db    0
.eh_frame:000000000000E3AF                 db    0
.eh_frame:000000000000E3B0                 db    0
.eh_frame:000000000000E3B1                 db  42h ; B
.eh_frame:000000000000E3B2                 db  0Eh
.eh_frame:000000000000E3B3                 db  10h
.eh_frame:000000000000E3B4                 db  8Ch
.eh_frame:000000000000E3B5                 db    2
.eh_frame:000000000000E3B6                 db  41h ; A
.eh_frame:000000000000E3B7                 db  0Eh
.eh_frame:000000000000E3B8                 db  18h
.eh_frame:000000000000E3B9                 db  86h
.eh_frame:000000000000E3BA                 db    3
.eh_frame:000000000000E3BB                 db  46h ; F
.eh_frame:000000000000E3BC                 db  0Eh
.eh_frame:000000000000E3BD                 db  20h
.eh_frame:000000000000E3BE                 db  83h
.eh_frame:000000000000E3BF                 db    4
.eh_frame:000000000000E3C0                 db  47h ; G
.eh_frame:000000000000E3C1                 db  0Eh
.eh_frame:000000000000E3C2                 db  30h ; 0
.eh_frame:000000000000E3C3                 db    2
.eh_frame:000000000000E3C4                 db  4Ah ; J
.eh_frame:000000000000E3C5                 db  0Ah
.eh_frame:000000000000E3C6                 db  0Eh
.eh_frame:000000000000E3C7                 db  20h
.eh_frame:000000000000E3C8                 db  41h ; A
.eh_frame:000000000000E3C9                 db  0Eh
.eh_frame:000000000000E3CA                 db  18h
.eh_frame:000000000000E3CB                 db  41h ; A
.eh_frame:000000000000E3CC                 db  0Eh
.eh_frame:000000000000E3CD                 db  10h
.eh_frame:000000000000E3CE                 db  42h ; B
.eh_frame:000000000000E3CF                 db  0Eh
.eh_frame:000000000000E3D0                 db    8
.eh_frame:000000000000E3D1                 db  42h ; B
.eh_frame:000000000000E3D2                 db  0Bh
.eh_frame:000000000000E3D3                 db    0
.eh_frame:000000000000E3D4                 db    0
.eh_frame:000000000000E3D5                 db    0
.eh_frame:000000000000E3D6                 db    0
.eh_frame:000000000000E3D7                 db    0
.eh_frame:000000000000E3D8                 db  14h
.eh_frame:000000000000E3D9                 db    0
.eh_frame:000000000000E3DA                 db    0
.eh_frame:000000000000E3DB                 db    0
.eh_frame:000000000000E3DC                 db 0E4h
.eh_frame:000000000000E3DD                 db  0Ah
.eh_frame:000000000000E3DE                 db    0
.eh_frame:000000000000E3DF                 db    0
.eh_frame:000000000000E3E0                 db 0D0h
.eh_frame:000000000000E3E1                 db  9Bh
.eh_frame:000000000000E3E2                 db 0FFh
.eh_frame:000000000000E3E3                 db 0FFh
.eh_frame:000000000000E3E4                 db  9Ch
.eh_frame:000000000000E3E5                 db    0
.eh_frame:000000000000E3E6                 db    0
.eh_frame:000000000000E3E7                 db    0
.eh_frame:000000000000E3E8                 db    0
.eh_frame:000000000000E3E9                 db    0
.eh_frame:000000000000E3EA                 db    0
.eh_frame:000000000000E3EB                 db    0
.eh_frame:000000000000E3EC                 db    0
.eh_frame:000000000000E3ED                 db    0
.eh_frame:000000000000E3EE                 db    0
.eh_frame:000000000000E3EF                 db    0
.eh_frame:000000000000E3F0                 db  24h ; $
.eh_frame:000000000000E3F1                 db    0
.eh_frame:000000000000E3F2                 db    0
.eh_frame:000000000000E3F3                 db    0
.eh_frame:000000000000E3F4                 db 0FCh
.eh_frame:000000000000E3F5                 db  0Ah
.eh_frame:000000000000E3F6                 db    0
.eh_frame:000000000000E3F7                 db    0
.eh_frame:000000000000E3F8                 db  58h ; X
.eh_frame:000000000000E3F9                 db  9Ch
.eh_frame:000000000000E3FA                 db 0FFh
.eh_frame:000000000000E3FB                 db 0FFh
.eh_frame:000000000000E3FC                 db  8Eh
.eh_frame:000000000000E3FD                 db    0
.eh_frame:000000000000E3FE                 db    0
.eh_frame:000000000000E3FF                 db    0
.eh_frame:000000000000E400                 db    0
.eh_frame:000000000000E401                 db  41h ; A
.eh_frame:000000000000E402                 db  0Eh
.eh_frame:000000000000E403                 db  10h
.eh_frame:000000000000E404                 db  83h
.eh_frame:000000000000E405                 db    2
.eh_frame:000000000000E406                 db  50h ; P
.eh_frame:000000000000E407                 db  0Eh
.eh_frame:000000000000E408                 db  20h
.eh_frame:000000000000E409                 db  75h ; u
.eh_frame:000000000000E40A                 db  0Ah
.eh_frame:000000000000E40B                 db  0Eh
.eh_frame:000000000000E40C                 db  10h
.eh_frame:000000000000E40D                 db  41h ; A
.eh_frame:000000000000E40E                 db  0Eh
.eh_frame:000000000000E40F                 db    8
.eh_frame:000000000000E410                 db  49h ; I
.eh_frame:000000000000E411                 db  0Bh
.eh_frame:000000000000E412                 db    0
.eh_frame:000000000000E413                 db    0
.eh_frame:000000000000E414                 db    0
.eh_frame:000000000000E415                 db    0
.eh_frame:000000000000E416                 db    0
.eh_frame:000000000000E417                 db    0
.eh_frame:000000000000E418                 db  1Ch
.eh_frame:000000000000E419                 db    0
.eh_frame:000000000000E41A                 db    0
.eh_frame:000000000000E41B                 db    0
.eh_frame:000000000000E41C                 db  24h ; $
.eh_frame:000000000000E41D                 db  0Bh
.eh_frame:000000000000E41E                 db    0
.eh_frame:000000000000E41F                 db    0
.eh_frame:000000000000E420                 db 0C0h
.eh_frame:000000000000E421                 db  9Ch
.eh_frame:000000000000E422                 db 0FFh
.eh_frame:000000000000E423                 db 0FFh
.eh_frame:000000000000E424                 db  9Fh
.eh_frame:000000000000E425                 db    0
.eh_frame:000000000000E426                 db    0
.eh_frame:000000000000E427                 db    0
.eh_frame:000000000000E428                 db    0
.eh_frame:000000000000E429                 db  44h ; D
.eh_frame:000000000000E42A                 db  0Eh
.eh_frame:000000000000E42B                 db  10h
.eh_frame:000000000000E42C                 db  83h
.eh_frame:000000000000E42D                 db    2
.eh_frame:000000000000E42E                 db    2
.eh_frame:000000000000E42F                 db  78h ; x
.eh_frame:000000000000E430                 db  0Ah
.eh_frame:000000000000E431                 db  0Eh
.eh_frame:000000000000E432                 db    8
.eh_frame:000000000000E433                 db  41h ; A
.eh_frame:000000000000E434                 db  0Bh
.eh_frame:000000000000E435                 db    0
.eh_frame:000000000000E436                 db    0
.eh_frame:000000000000E437                 db    0
.eh_frame:000000000000E438                 db  40h ; @
.eh_frame:000000000000E439                 db    0
.eh_frame:000000000000E43A                 db    0
.eh_frame:000000000000E43B                 db    0
.eh_frame:000000000000E43C                 db  44h ; D
.eh_frame:000000000000E43D                 db  0Bh
.eh_frame:000000000000E43E                 db    0
.eh_frame:000000000000E43F                 db    0
.eh_frame:000000000000E440                 db  40h ; @
.eh_frame:000000000000E441                 db  9Dh
.eh_frame:000000000000E442                 db 0FFh
.eh_frame:000000000000E443                 db 0FFh
.eh_frame:000000000000E444                 db 0E7h
.eh_frame:000000000000E445                 db    0
.eh_frame:000000000000E446                 db    0
.eh_frame:000000000000E447                 db    0
.eh_frame:000000000000E448                 db    0
.eh_frame:000000000000E449                 db  41h ; A
.eh_frame:000000000000E44A                 db  0Eh
.eh_frame:000000000000E44B                 db  10h
.eh_frame:000000000000E44C                 db  86h
.eh_frame:000000000000E44D                 db    2
.eh_frame:000000000000E44E                 db  41h ; A
.eh_frame:000000000000E44F                 db  0Eh
.eh_frame:000000000000E450                 db  18h
.eh_frame:000000000000E451                 db  83h
.eh_frame:000000000000E452                 db    3
.eh_frame:000000000000E453                 db  49h ; I
.eh_frame:000000000000E454                 db  0Eh
.eh_frame:000000000000E455                 db  20h
.eh_frame:000000000000E456                 db  6Eh ; n
.eh_frame:000000000000E457                 db  0Ah
.eh_frame:000000000000E458                 db  0Eh
.eh_frame:000000000000E459                 db  18h
.eh_frame:000000000000E45A                 db  41h ; A
.eh_frame:000000000000E45B                 db  0Eh
.eh_frame:000000000000E45C                 db  10h
.eh_frame:000000000000E45D                 db  41h ; A
.eh_frame:000000000000E45E                 db  0Eh
.eh_frame:000000000000E45F                 db    8
.eh_frame:000000000000E460                 db  45h ; E
.eh_frame:000000000000E461                 db  0Bh
.eh_frame:000000000000E462                 db    2
.eh_frame:000000000000E463                 db  4Ah ; J
.eh_frame:000000000000E464                 db  0Ah
.eh_frame:000000000000E465                 db  0Eh
.eh_frame:000000000000E466                 db  18h
.eh_frame:000000000000E467                 db  41h ; A
.eh_frame:000000000000E468                 db  0Eh
.eh_frame:000000000000E469                 db  10h
.eh_frame:000000000000E46A                 db  41h ; A
.eh_frame:000000000000E46B                 db  0Eh
.eh_frame:000000000000E46C                 db    8
.eh_frame:000000000000E46D                 db  44h ; D
.eh_frame:000000000000E46E                 db  0Bh
.eh_frame:000000000000E46F                 db    2
.eh_frame:000000000000E470                 db  54h ; T
.eh_frame:000000000000E471                 db  0Eh
.eh_frame:000000000000E472                 db  18h
.eh_frame:000000000000E473                 db  41h ; A
.eh_frame:000000000000E474                 db  0Eh
.eh_frame:000000000000E475                 db  10h
.eh_frame:000000000000E476                 db  41h ; A
.eh_frame:000000000000E477                 db  0Eh
.eh_frame:000000000000E478                 db    8
.eh_frame:000000000000E479                 db    0
.eh_frame:000000000000E47A                 db    0
.eh_frame:000000000000E47B                 db    0
.eh_frame:000000000000E47C                 db  74h ; t
.eh_frame:000000000000E47D                 db    0
.eh_frame:000000000000E47E                 db    0
.eh_frame:000000000000E47F                 db    0
.eh_frame:000000000000E480                 db  88h
.eh_frame:000000000000E481                 db  0Bh
.eh_frame:000000000000E482                 db    0
.eh_frame:000000000000E483                 db    0
.eh_frame:000000000000E484                 db 0ECh
.eh_frame:000000000000E485                 db  9Dh
.eh_frame:000000000000E486                 db 0FFh
.eh_frame:000000000000E487                 db 0FFh
.eh_frame:000000000000E488                 db  34h ; 4
.eh_frame:000000000000E489                 db  12h
.eh_frame:000000000000E48A                 db    0
.eh_frame:000000000000E48B                 db    0
.eh_frame:000000000000E48C                 db    0
.eh_frame:000000000000E48D                 db  42h ; B
.eh_frame:000000000000E48E                 db  0Eh
.eh_frame:000000000000E48F                 db  10h
.eh_frame:000000000000E490                 db  8Fh
.eh_frame:000000000000E491                 db    2
.eh_frame:000000000000E492                 db  42h ; B
.eh_frame:000000000000E493                 db  0Eh
.eh_frame:000000000000E494                 db  18h
.eh_frame:000000000000E495                 db  8Eh
.eh_frame:000000000000E496                 db    3
.eh_frame:000000000000E497                 db  45h ; E
.eh_frame:000000000000E498                 db  0Eh
.eh_frame:000000000000E499                 db  20h
.eh_frame:000000000000E49A                 db  8Dh
.eh_frame:000000000000E49B                 db    4
.eh_frame:000000000000E49C                 db  42h ; B
.eh_frame:000000000000E49D                 db  0Eh
.eh_frame:000000000000E49E                 db  28h ; (
.eh_frame:000000000000E49F                 db  8Ch
.eh_frame:000000000000E4A0                 db    5
.eh_frame:000000000000E4A1                 db  44h ; D
.eh_frame:000000000000E4A2                 db  0Eh
.eh_frame:000000000000E4A3                 db  30h ; 0
.eh_frame:000000000000E4A4                 db  86h
.eh_frame:000000000000E4A5                 db    6
.eh_frame:000000000000E4A6                 db  41h ; A
.eh_frame:000000000000E4A7                 db  0Eh
.eh_frame:000000000000E4A8                 db  38h ; 8
.eh_frame:000000000000E4A9                 db  83h
.eh_frame:000000000000E4AA                 db    7
.eh_frame:000000000000E4AB                 db  53h ; S
.eh_frame:000000000000E4AC                 db  0Eh
.eh_frame:000000000000E4AD                 db 0F0h
.eh_frame:000000000000E4AE                 db    1
.eh_frame:000000000000E4AF                 db    3
.eh_frame:000000000000E4B0                 db  81h
.eh_frame:000000000000E4B1                 db  0Bh
.eh_frame:000000000000E4B2                 db  0Eh
.eh_frame:000000000000E4B3                 db 0F8h
.eh_frame:000000000000E4B4                 db    1
.eh_frame:000000000000E4B5                 db  4Ah ; J
.eh_frame:000000000000E4B6                 db  0Eh
.eh_frame:000000000000E4B7                 db  80h
.eh_frame:000000000000E4B8                 db    2
.eh_frame:000000000000E4B9                 db  44h ; D
.eh_frame:000000000000E4BA                 db  0Eh
.eh_frame:000000000000E4BB                 db  88h
.eh_frame:000000000000E4BC                 db    2
.eh_frame:000000000000E4BD                 db  45h ; E
.eh_frame:000000000000E4BE                 db  0Eh
.eh_frame:000000000000E4BF                 db  90h
.eh_frame:000000000000E4C0                 db    2
.eh_frame:000000000000E4C1                 db  5Fh ; _
.eh_frame:000000000000E4C2                 db  0Eh
.eh_frame:000000000000E4C3                 db 0F0h
.eh_frame:000000000000E4C4                 db    1
.eh_frame:000000000000E4C5                 db  64h ; d
.eh_frame:000000000000E4C6                 db  0Ah
.eh_frame:000000000000E4C7                 db  0Eh
.eh_frame:000000000000E4C8                 db  38h ; 8
.eh_frame:000000000000E4C9                 db  41h ; A
.eh_frame:000000000000E4CA                 db  0Eh
.eh_frame:000000000000E4CB                 db  30h ; 0
.eh_frame:000000000000E4CC                 db  41h ; A
.eh_frame:000000000000E4CD                 db  0Eh
.eh_frame:000000000000E4CE                 db  28h ; (
.eh_frame:000000000000E4CF                 db  42h ; B
.eh_frame:000000000000E4D0                 db  0Eh
.eh_frame:000000000000E4D1                 db  20h
.eh_frame:000000000000E4D2                 db  42h ; B
.eh_frame:000000000000E4D3                 db  0Eh
.eh_frame:000000000000E4D4                 db  18h
.eh_frame:000000000000E4D5                 db  42h ; B
.eh_frame:000000000000E4D6                 db  0Eh
.eh_frame:000000000000E4D7                 db  10h
.eh_frame:000000000000E4D8                 db  42h ; B
.eh_frame:000000000000E4D9                 db  0Eh
.eh_frame:000000000000E4DA                 db    8
.eh_frame:000000000000E4DB                 db  44h ; D
.eh_frame:000000000000E4DC                 db  0Bh
.eh_frame:000000000000E4DD                 db    3
.eh_frame:000000000000E4DE                 db  99h
.eh_frame:000000000000E4DF                 db    5
.eh_frame:000000000000E4E0                 db  0Eh
.eh_frame:000000000000E4E1                 db 0F8h
.eh_frame:000000000000E4E2                 db    1
.eh_frame:000000000000E4E3                 db  4Dh ; M
.eh_frame:000000000000E4E4                 db  0Eh
.eh_frame:000000000000E4E5                 db  80h
.eh_frame:000000000000E4E6                 db    2
.eh_frame:000000000000E4E7                 db  44h ; D
.eh_frame:000000000000E4E8                 db  0Eh
.eh_frame:000000000000E4E9                 db  88h
.eh_frame:000000000000E4EA                 db    2
.eh_frame:000000000000E4EB                 db  47h ; G
.eh_frame:000000000000E4EC                 db  0Eh
.eh_frame:000000000000E4ED                 db  90h
.eh_frame:000000000000E4EE                 db    2
.eh_frame:000000000000E4EF                 db  5Bh ; [
.eh_frame:000000000000E4F0                 db  0Eh
.eh_frame:000000000000E4F1                 db 0F0h
.eh_frame:000000000000E4F2                 db    1
.eh_frame:000000000000E4F3                 db    0
.eh_frame:000000000000E4F4                 db  68h ; h
.eh_frame:000000000000E4F5                 db    0
.eh_frame:000000000000E4F6                 db    0
.eh_frame:000000000000E4F7                 db    0
.eh_frame:000000000000E4F8                 db    0
.eh_frame:000000000000E4F9                 db  0Ch
.eh_frame:000000000000E4FA                 db    0
.eh_frame:000000000000E4FB                 db    0
.eh_frame:000000000000E4FC                 db 0B4h
.eh_frame:000000000000E4FD                 db 0AFh
.eh_frame:000000000000E4FE                 db 0FFh
.eh_frame:000000000000E4FF                 db 0FFh
.eh_frame:000000000000E500                 db 0ABh
.eh_frame:000000000000E501                 db    1
.eh_frame:000000000000E502                 db    0
.eh_frame:000000000000E503                 db    0
.eh_frame:000000000000E504                 db    0
.eh_frame:000000000000E505                 db  42h ; B
.eh_frame:000000000000E506                 db  0Eh
.eh_frame:000000000000E507                 db  10h
.eh_frame:000000000000E508                 db  8Fh
.eh_frame:000000000000E509                 db    2
.eh_frame:000000000000E50A                 db  42h ; B
.eh_frame:000000000000E50B                 db  0Eh
.eh_frame:000000000000E50C                 db  18h
.eh_frame:000000000000E50D                 db  8Eh
.eh_frame:000000000000E50E                 db    3
.eh_frame:000000000000E50F                 db  45h ; E
.eh_frame:000000000000E510                 db  0Eh
.eh_frame:000000000000E511                 db  20h
.eh_frame:000000000000E512                 db  8Dh
.eh_frame:000000000000E513                 db    4
.eh_frame:000000000000E514                 db  42h ; B
.eh_frame:000000000000E515                 db  0Eh
.eh_frame:000000000000E516                 db  28h ; (
.eh_frame:000000000000E517                 db  8Ch
.eh_frame:000000000000E518                 db    5
.eh_frame:000000000000E519                 db  44h ; D
.eh_frame:000000000000E51A                 db  0Eh
.eh_frame:000000000000E51B                 db  30h ; 0
.eh_frame:000000000000E51C                 db  86h
.eh_frame:000000000000E51D                 db    6
.eh_frame:000000000000E51E                 db  41h ; A
.eh_frame:000000000000E51F                 db  0Eh
.eh_frame:000000000000E520                 db  38h ; 8
.eh_frame:000000000000E521                 db  83h
.eh_frame:000000000000E522                 db    7
.eh_frame:000000000000E523                 db  47h ; G
.eh_frame:000000000000E524                 db  0Eh
.eh_frame:000000000000E525                 db  60h ; `
.eh_frame:000000000000E526                 db    2
.eh_frame:000000000000E527                 db  99h
.eh_frame:000000000000E528                 db  0Eh
.eh_frame:000000000000E529                 db  68h ; h
.eh_frame:000000000000E52A                 db  5Fh ; _
.eh_frame:000000000000E52B                 db  0Eh
.eh_frame:000000000000E52C                 db  70h ; p
.eh_frame:000000000000E52D                 db  46h ; F
.eh_frame:000000000000E52E                 db  0Eh
.eh_frame:000000000000E52F                 db  78h ; x
.eh_frame:000000000000E530                 db  42h ; B
.eh_frame:000000000000E531                 db  0Eh
.eh_frame:000000000000E532                 db  80h
.eh_frame:000000000000E533                 db    1
.eh_frame:000000000000E534                 db  59h ; Y
.eh_frame:000000000000E535                 db  0Eh
.eh_frame:000000000000E536                 db  60h ; `
.eh_frame:000000000000E537                 db    2
.eh_frame:000000000000E538                 db  40h ; @
.eh_frame:000000000000E539                 db  0Eh
.eh_frame:000000000000E53A                 db  68h ; h
.eh_frame:000000000000E53B                 db  4Bh ; K
.eh_frame:000000000000E53C                 db  0Eh
.eh_frame:000000000000E53D                 db  70h ; p
.eh_frame:000000000000E53E                 db  43h ; C
.eh_frame:000000000000E53F                 db  0Eh
.eh_frame:000000000000E540                 db  78h ; x
.eh_frame:000000000000E541                 db  45h ; E
.eh_frame:000000000000E542                 db  0Eh
.eh_frame:000000000000E543                 db  80h
.eh_frame:000000000000E544                 db    1
.eh_frame:000000000000E545                 db  5Eh ; ^
.eh_frame:000000000000E546                 db  0Eh
.eh_frame:000000000000E547                 db  60h ; `
.eh_frame:000000000000E548                 db  4Ch ; L
.eh_frame:000000000000E549                 db  0Ah
.eh_frame:000000000000E54A                 db  0Eh
.eh_frame:000000000000E54B                 db  38h ; 8
.eh_frame:000000000000E54C                 db  44h ; D
.eh_frame:000000000000E54D                 db  0Eh
.eh_frame:000000000000E54E                 db  30h ; 0
.eh_frame:000000000000E54F                 db  41h ; A
.eh_frame:000000000000E550                 db  0Eh
.eh_frame:000000000000E551                 db  28h ; (
.eh_frame:000000000000E552                 db  42h ; B
.eh_frame:000000000000E553                 db  0Eh
.eh_frame:000000000000E554                 db  20h
.eh_frame:000000000000E555                 db  42h ; B
.eh_frame:000000000000E556                 db  0Eh
.eh_frame:000000000000E557                 db  18h
.eh_frame:000000000000E558                 db  42h ; B
.eh_frame:000000000000E559                 db  0Eh
.eh_frame:000000000000E55A                 db  10h
.eh_frame:000000000000E55B                 db  42h ; B
.eh_frame:000000000000E55C                 db  0Eh
.eh_frame:000000000000E55D                 db    8
.eh_frame:000000000000E55E                 db  46h ; F
.eh_frame:000000000000E55F                 db  0Bh
.eh_frame:000000000000E560                 db  28h ; (
.eh_frame:000000000000E561                 db    0
.eh_frame:000000000000E562                 db    0
.eh_frame:000000000000E563                 db    0
.eh_frame:000000000000E564                 db  6Ch ; l
.eh_frame:000000000000E565                 db  0Ch
.eh_frame:000000000000E566                 db    0
.eh_frame:000000000000E567                 db    0
.eh_frame:000000000000E568                 db 0F8h
.eh_frame:000000000000E569                 db 0B0h
.eh_frame:000000000000E56A                 db 0FFh
.eh_frame:000000000000E56B                 db 0FFh
.eh_frame:000000000000E56C                 db  36h ; 6
.eh_frame:000000000000E56D                 db    0
.eh_frame:000000000000E56E                 db    0
.eh_frame:000000000000E56F                 db    0
.eh_frame:000000000000E570                 db    0
.eh_frame:000000000000E571                 db  42h ; B
.eh_frame:000000000000E572                 db  0Eh
.eh_frame:000000000000E573                 db  10h
.eh_frame:000000000000E574                 db  8Ch
.eh_frame:000000000000E575                 db    2
.eh_frame:000000000000E576                 db  41h ; A
.eh_frame:000000000000E577                 db  0Eh
.eh_frame:000000000000E578                 db  18h
.eh_frame:000000000000E579                 db  86h
.eh_frame:000000000000E57A                 db    3
.eh_frame:000000000000E57B                 db  41h ; A
.eh_frame:000000000000E57C                 db  0Eh
.eh_frame:000000000000E57D                 db  20h
.eh_frame:000000000000E57E                 db  83h
.eh_frame:000000000000E57F                 db    4
.eh_frame:000000000000E580                 db  6Eh ; n
.eh_frame:000000000000E581                 db  0Eh
.eh_frame:000000000000E582                 db  18h
.eh_frame:000000000000E583                 db  41h ; A
.eh_frame:000000000000E584                 db  0Eh
.eh_frame:000000000000E585                 db  10h
.eh_frame:000000000000E586                 db  42h ; B
.eh_frame:000000000000E587                 db  0Eh
.eh_frame:000000000000E588                 db    8
.eh_frame:000000000000E589                 db    0
.eh_frame:000000000000E58A                 db    0
.eh_frame:000000000000E58B                 db    0
.eh_frame:000000000000E58C                 db  10h
.eh_frame:000000000000E58D                 db    0
.eh_frame:000000000000E58E                 db    0
.eh_frame:000000000000E58F                 db    0
.eh_frame:000000000000E590                 db  98h
.eh_frame:000000000000E591                 db  0Ch
.eh_frame:000000000000E592                 db    0
.eh_frame:000000000000E593                 db    0
.eh_frame:000000000000E594                 db  0Ch
.eh_frame:000000000000E595                 db 0B1h
.eh_frame:000000000000E596                 db 0FFh
.eh_frame:000000000000E597                 db 0FFh
.eh_frame:000000000000E598                 db  11h
.eh_frame:000000000000E599                 db    0
.eh_frame:000000000000E59A                 db    0
.eh_frame:000000000000E59B                 db    0
.eh_frame:000000000000E59C                 db    0
.eh_frame:000000000000E59D                 db    0
.eh_frame:000000000000E59E                 db    0
.eh_frame:000000000000E59F                 db    0
.eh_frame:000000000000E5A0                 db  10h
.eh_frame:000000000000E5A1                 db    0
.eh_frame:000000000000E5A2                 db    0
.eh_frame:000000000000E5A3                 db    0
.eh_frame:000000000000E5A4                 db 0ACh
.eh_frame:000000000000E5A5                 db  0Ch
.eh_frame:000000000000E5A6                 db    0
.eh_frame:000000000000E5A7                 db    0
.eh_frame:000000000000E5A8                 db  18h
.eh_frame:000000000000E5A9                 db 0B1h
.eh_frame:000000000000E5AA                 db 0FFh
.eh_frame:000000000000E5AB                 db 0FFh
.eh_frame:000000000000E5AC                 db  11h
.eh_frame:000000000000E5AD                 db    0
.eh_frame:000000000000E5AE                 db    0
.eh_frame:000000000000E5AF                 db    0
.eh_frame:000000000000E5B0                 db    0
.eh_frame:000000000000E5B1                 db    0
.eh_frame:000000000000E5B2                 db    0
.eh_frame:000000000000E5B3                 db    0
.eh_frame:000000000000E5B4                 db  10h
.eh_frame:000000000000E5B5                 db    0
.eh_frame:000000000000E5B6                 db    0
.eh_frame:000000000000E5B7                 db    0
.eh_frame:000000000000E5B8                 db 0C0h
.eh_frame:000000000000E5B9                 db  0Ch
.eh_frame:000000000000E5BA                 db    0
.eh_frame:000000000000E5BB                 db    0
.eh_frame:000000000000E5BC                 db  24h ; $
.eh_frame:000000000000E5BD                 db 0B1h
.eh_frame:000000000000E5BE                 db 0FFh
.eh_frame:000000000000E5BF                 db 0FFh
.eh_frame:000000000000E5C0                 db  35h ; 5
.eh_frame:000000000000E5C1                 db    0
.eh_frame:000000000000E5C2                 db    0
.eh_frame:000000000000E5C3                 db    0
.eh_frame:000000000000E5C4                 db    0
.eh_frame:000000000000E5C5                 db    0
.eh_frame:000000000000E5C6                 db    0
.eh_frame:000000000000E5C7                 db    0
.eh_frame:000000000000E5C8                 db  10h
.eh_frame:000000000000E5C9                 db    0
.eh_frame:000000000000E5CA                 db    0
.eh_frame:000000000000E5CB                 db    0
.eh_frame:000000000000E5CC                 db 0D4h
.eh_frame:000000000000E5CD                 db  0Ch
.eh_frame:000000000000E5CE                 db    0
.eh_frame:000000000000E5CF                 db    0
.eh_frame:000000000000E5D0                 db  50h ; P
.eh_frame:000000000000E5D1                 db 0B1h
.eh_frame:000000000000E5D2                 db 0FFh
.eh_frame:000000000000E5D3                 db 0FFh
.eh_frame:000000000000E5D4                 db  15h
.eh_frame:000000000000E5D5                 db    0
.eh_frame:000000000000E5D6                 db    0
.eh_frame:000000000000E5D7                 db    0
.eh_frame:000000000000E5D8                 db    0
.eh_frame:000000000000E5D9                 db    0
.eh_frame:000000000000E5DA                 db    0
.eh_frame:000000000000E5DB                 db    0
.eh_frame:000000000000E5DC                 db  10h
.eh_frame:000000000000E5DD                 db    0
.eh_frame:000000000000E5DE                 db    0
.eh_frame:000000000000E5DF                 db    0
.eh_frame:000000000000E5E0                 db 0E8h
.eh_frame:000000000000E5E1                 db  0Ch
.eh_frame:000000000000E5E2                 db    0
.eh_frame:000000000000E5E3                 db    0
.eh_frame:000000000000E5E4                 db  5Ch ; \
.eh_frame:000000000000E5E5                 db 0B1h
.eh_frame:000000000000E5E6                 db 0FFh
.eh_frame:000000000000E5E7                 db 0FFh
.eh_frame:000000000000E5E8                 db  30h ; 0
.eh_frame:000000000000E5E9                 db    0
.eh_frame:000000000000E5EA                 db    0
.eh_frame:000000000000E5EB                 db    0
.eh_frame:000000000000E5EC                 db    0
.eh_frame:000000000000E5ED                 db  6Bh ; k
.eh_frame:000000000000E5EE                 db  0Eh
.eh_frame:000000000000E5EF                 db  10h
.eh_frame:000000000000E5F0                 db  50h ; P
.eh_frame:000000000000E5F1                 db    0
.eh_frame:000000000000E5F2                 db    0
.eh_frame:000000000000E5F3                 db    0
.eh_frame:000000000000E5F4                 db 0FCh
.eh_frame:000000000000E5F5                 db  0Ch
.eh_frame:000000000000E5F6                 db    0
.eh_frame:000000000000E5F7                 db    0
.eh_frame:000000000000E5F8                 db  78h ; x
.eh_frame:000000000000E5F9                 db 0B1h
.eh_frame:000000000000E5FA                 db 0FFh
.eh_frame:000000000000E5FB                 db 0FFh
.eh_frame:000000000000E5FC                 db  74h ; t
.eh_frame:000000000000E5FD                 db    0
.eh_frame:000000000000E5FE                 db    0
.eh_frame:000000000000E5FF                 db    0
.eh_frame:000000000000E600                 db    0
.eh_frame:000000000000E601                 db  42h ; B
.eh_frame:000000000000E602                 db  0Eh
.eh_frame:000000000000E603                 db  10h
.eh_frame:000000000000E604                 db  8Fh
.eh_frame:000000000000E605                 db    2
.eh_frame:000000000000E606                 db  42h ; B
.eh_frame:000000000000E607                 db  0Eh
.eh_frame:000000000000E608                 db  18h
.eh_frame:000000000000E609                 db  8Eh
.eh_frame:000000000000E60A                 db    3
.eh_frame:000000000000E60B                 db  49h ; I
.eh_frame:000000000000E60C                 db  0Eh
.eh_frame:000000000000E60D                 db  20h
.eh_frame:000000000000E60E                 db  8Dh
.eh_frame:000000000000E60F                 db    4
.eh_frame:000000000000E610                 db  42h ; B
.eh_frame:000000000000E611                 db  0Eh
.eh_frame:000000000000E612                 db  28h ; (
.eh_frame:000000000000E613                 db  8Ch
.eh_frame:000000000000E614                 db    5
.eh_frame:000000000000E615                 db  44h ; D
.eh_frame:000000000000E616                 db  0Eh
.eh_frame:000000000000E617                 db  30h ; 0
.eh_frame:000000000000E618                 db  86h
.eh_frame:000000000000E619                 db    6
.eh_frame:000000000000E61A                 db  41h ; A
.eh_frame:000000000000E61B                 db  0Eh
.eh_frame:000000000000E61C                 db  38h ; 8
.eh_frame:000000000000E61D                 db  83h
.eh_frame:000000000000E61E                 db    7
.eh_frame:000000000000E61F                 db  4Dh ; M
.eh_frame:000000000000E620                 db  0Eh
.eh_frame:000000000000E621                 db  50h ; P
.eh_frame:000000000000E622                 db  5Fh ; _
.eh_frame:000000000000E623                 db  0Eh
.eh_frame:000000000000E624                 db  58h ; X
.eh_frame:000000000000E625                 db  47h ; G
.eh_frame:000000000000E626                 db  0Eh
.eh_frame:000000000000E627                 db  60h ; `
.eh_frame:000000000000E628                 db  46h ; F
.eh_frame:000000000000E629                 db  0Eh
.eh_frame:000000000000E62A                 db  68h ; h
.eh_frame:000000000000E62B                 db  44h ; D
.eh_frame:000000000000E62C                 db  0Eh
.eh_frame:000000000000E62D                 db  70h ; p
.eh_frame:000000000000E62E                 db  58h ; X
.eh_frame:000000000000E62F                 db  0Eh
.eh_frame:000000000000E630                 db  38h ; 8
.eh_frame:000000000000E631                 db  41h ; A
.eh_frame:000000000000E632                 db  0Eh
.eh_frame:000000000000E633                 db  30h ; 0
.eh_frame:000000000000E634                 db  41h ; A
.eh_frame:000000000000E635                 db  0Eh
.eh_frame:000000000000E636                 db  28h ; (
.eh_frame:000000000000E637                 db  42h ; B
.eh_frame:000000000000E638                 db  0Eh
.eh_frame:000000000000E639                 db  20h
.eh_frame:000000000000E63A                 db  42h ; B
.eh_frame:000000000000E63B                 db  0Eh
.eh_frame:000000000000E63C                 db  18h
.eh_frame:000000000000E63D                 db  42h ; B
.eh_frame:000000000000E63E                 db  0Eh
.eh_frame:000000000000E63F                 db  10h
.eh_frame:000000000000E640                 db  42h ; B
.eh_frame:000000000000E641                 db  0Eh
.eh_frame:000000000000E642                 db    8
.eh_frame:000000000000E643                 db    0
.eh_frame:000000000000E644                 db  68h ; h
.eh_frame:000000000000E645                 db    0
.eh_frame:000000000000E646                 db    0
.eh_frame:000000000000E647                 db    0
.eh_frame:000000000000E648                 db  50h ; P
.eh_frame:000000000000E649                 db  0Dh
.eh_frame:000000000000E64A                 db    0
.eh_frame:000000000000E64B                 db    0
.eh_frame:000000000000E64C                 db 0A4h
.eh_frame:000000000000E64D                 db 0B1h
.eh_frame:000000000000E64E                 db 0FFh
.eh_frame:000000000000E64F                 db 0FFh
.eh_frame:000000000000E650                 db 0E3h
.eh_frame:000000000000E651                 db    0
.eh_frame:000000000000E652                 db    0
.eh_frame:000000000000E653                 db    0
.eh_frame:000000000000E654                 db    0
.eh_frame:000000000000E655                 db  42h ; B
.eh_frame:000000000000E656                 db  0Eh
.eh_frame:000000000000E657                 db  10h
.eh_frame:000000000000E658                 db  8Fh
.eh_frame:000000000000E659                 db    2
.eh_frame:000000000000E65A                 db  42h ; B
.eh_frame:000000000000E65B                 db  0Eh
.eh_frame:000000000000E65C                 db  18h
.eh_frame:000000000000E65D                 db  8Eh
.eh_frame:000000000000E65E                 db    3
.eh_frame:000000000000E65F                 db  49h ; I
.eh_frame:000000000000E660                 db  0Eh
.eh_frame:000000000000E661                 db  20h
.eh_frame:000000000000E662                 db  8Dh
.eh_frame:000000000000E663                 db    4
.eh_frame:000000000000E664                 db  42h ; B
.eh_frame:000000000000E665                 db  0Eh
.eh_frame:000000000000E666                 db  28h ; (
.eh_frame:000000000000E667                 db  8Ch
.eh_frame:000000000000E668                 db    5
.eh_frame:000000000000E669                 db  44h ; D
.eh_frame:000000000000E66A                 db  0Eh
.eh_frame:000000000000E66B                 db  30h ; 0
.eh_frame:000000000000E66C                 db  86h
.eh_frame:000000000000E66D                 db    6
.eh_frame:000000000000E66E                 db  41h ; A
.eh_frame:000000000000E66F                 db  0Eh
.eh_frame:000000000000E670                 db  38h ; 8
.eh_frame:000000000000E671                 db  83h
.eh_frame:000000000000E672                 db    7
.eh_frame:000000000000E673                 db  4Dh ; M
.eh_frame:000000000000E674                 db  0Eh
.eh_frame:000000000000E675                 db  70h ; p
.eh_frame:000000000000E676                 db  65h ; e
.eh_frame:000000000000E677                 db  0Eh
.eh_frame:000000000000E678                 db  78h ; x
.eh_frame:000000000000E679                 db  4Dh ; M
.eh_frame:000000000000E67A                 db  0Eh
.eh_frame:000000000000E67B                 db  80h
.eh_frame:000000000000E67C                 db    1
.eh_frame:000000000000E67D                 db  46h ; F
.eh_frame:000000000000E67E                 db  0Eh
.eh_frame:000000000000E67F                 db  88h
.eh_frame:000000000000E680                 db    1
.eh_frame:000000000000E681                 db  42h ; B
.eh_frame:000000000000E682                 db  0Eh
.eh_frame:000000000000E683                 db  90h
.eh_frame:000000000000E684                 db    1
.eh_frame:000000000000E685                 db  5Eh ; ^
.eh_frame:000000000000E686                 db  0Eh
.eh_frame:000000000000E687                 db  70h ; p
.eh_frame:000000000000E688                 db  56h ; V
.eh_frame:000000000000E689                 db  0Eh
.eh_frame:000000000000E68A                 db  78h ; x
.eh_frame:000000000000E68B                 db  43h ; C
.eh_frame:000000000000E68C                 db  0Eh
.eh_frame:000000000000E68D                 db  80h
.eh_frame:000000000000E68E                 db    1
.eh_frame:000000000000E68F                 db  43h ; C
.eh_frame:000000000000E690                 db  0Eh
.eh_frame:000000000000E691                 db  88h
.eh_frame:000000000000E692                 db    1
.eh_frame:000000000000E693                 db  56h ; V
.eh_frame:000000000000E694                 db  0Eh
.eh_frame:000000000000E695                 db  90h
.eh_frame:000000000000E696                 db    1
.eh_frame:000000000000E697                 db  52h ; R
.eh_frame:000000000000E698                 db  0Eh
.eh_frame:000000000000E699                 db  70h ; p
.eh_frame:000000000000E69A                 db  5Bh ; [
.eh_frame:000000000000E69B                 db  0Eh
.eh_frame:000000000000E69C                 db  38h ; 8
.eh_frame:000000000000E69D                 db  41h ; A
.eh_frame:000000000000E69E                 db  0Eh
.eh_frame:000000000000E69F                 db  30h ; 0
.eh_frame:000000000000E6A0                 db  41h ; A
.eh_frame:000000000000E6A1                 db  0Eh
.eh_frame:000000000000E6A2                 db  28h ; (
.eh_frame:000000000000E6A3                 db  42h ; B
.eh_frame:000000000000E6A4                 db  0Eh
.eh_frame:000000000000E6A5                 db  20h
.eh_frame:000000000000E6A6                 db  42h ; B
.eh_frame:000000000000E6A7                 db  0Eh
.eh_frame:000000000000E6A8                 db  18h
.eh_frame:000000000000E6A9                 db  42h ; B
.eh_frame:000000000000E6AA                 db  0Eh
.eh_frame:000000000000E6AB                 db  10h
.eh_frame:000000000000E6AC                 db  42h ; B
.eh_frame:000000000000E6AD                 db  0Eh
.eh_frame:000000000000E6AE                 db    8
.eh_frame:000000000000E6AF                 db    0
.eh_frame:000000000000E6B0                 db  10h
.eh_frame:000000000000E6B1                 db    0
.eh_frame:000000000000E6B2                 db    0
.eh_frame:000000000000E6B3                 db    0
.eh_frame:000000000000E6B4                 db 0BCh
.eh_frame:000000000000E6B5                 db  0Dh
.eh_frame:000000000000E6B6                 db    0
.eh_frame:000000000000E6B7                 db    0
.eh_frame:000000000000E6B8                 db  28h ; (
.eh_frame:000000000000E6B9                 db 0B2h
.eh_frame:000000000000E6BA                 db 0FFh
.eh_frame:000000000000E6BB                 db 0FFh
.eh_frame:000000000000E6BC                 db  0Ah
.eh_frame:000000000000E6BD                 db    0
.eh_frame:000000000000E6BE                 db    0
.eh_frame:000000000000E6BF                 db    0
.eh_frame:000000000000E6C0                 db    0
.eh_frame:000000000000E6C1                 db    0
.eh_frame:000000000000E6C2                 db    0
.eh_frame:000000000000E6C3                 db    0
.eh_frame:000000000000E6C4                 db  28h ; (
.eh_frame:000000000000E6C5                 db    0
.eh_frame:000000000000E6C6                 db    0
.eh_frame:000000000000E6C7                 db    0
.eh_frame:000000000000E6C8                 db 0D0h
.eh_frame:000000000000E6C9                 db  0Dh
.eh_frame:000000000000E6CA                 db    0
.eh_frame:000000000000E6CB                 db    0
.eh_frame:000000000000E6CC                 db  24h ; $
.eh_frame:000000000000E6CD                 db 0B2h
.eh_frame:000000000000E6CE                 db 0FFh
.eh_frame:000000000000E6CF                 db 0FFh
.eh_frame:000000000000E6D0                 db  93h
.eh_frame:000000000000E6D1                 db    0
.eh_frame:000000000000E6D2                 db    0
.eh_frame:000000000000E6D3                 db    0
.eh_frame:000000000000E6D4                 db    0
.eh_frame:000000000000E6D5                 db  48h ; H
.eh_frame:000000000000E6D6                 db  0Eh
.eh_frame:000000000000E6D7                 db  10h
.eh_frame:000000000000E6D8                 db  8Ch
.eh_frame:000000000000E6D9                 db    2
.eh_frame:000000000000E6DA                 db  48h ; H
.eh_frame:000000000000E6DB                 db  0Eh
.eh_frame:000000000000E6DC                 db  18h
.eh_frame:000000000000E6DD                 db  86h
.eh_frame:000000000000E6DE                 db    3
.eh_frame:000000000000E6DF                 db  41h ; A
.eh_frame:000000000000E6E0                 db  0Eh
.eh_frame:000000000000E6E1                 db  20h
.eh_frame:000000000000E6E2                 db  83h
.eh_frame:000000000000E6E3                 db    4
.eh_frame:000000000000E6E4                 db    2
.eh_frame:000000000000E6E5                 db  74h ; t
.eh_frame:000000000000E6E6                 db  0Eh
.eh_frame:000000000000E6E7                 db  18h
.eh_frame:000000000000E6E8                 db  4Bh ; K
.eh_frame:000000000000E6E9                 db  0Eh
.eh_frame:000000000000E6EA                 db  10h
.eh_frame:000000000000E6EB                 db  42h ; B
.eh_frame:000000000000E6EC                 db  0Eh
.eh_frame:000000000000E6ED                 db    8
.eh_frame:000000000000E6EE                 db    0
.eh_frame:000000000000E6EF                 db    0
.eh_frame:000000000000E6F0                 db  10h
.eh_frame:000000000000E6F1                 db    0
.eh_frame:000000000000E6F2                 db    0
.eh_frame:000000000000E6F3                 db    0
.eh_frame:000000000000E6F4                 db 0FCh
.eh_frame:000000000000E6F5                 db  0Dh
.eh_frame:000000000000E6F6                 db    0
.eh_frame:000000000000E6F7                 db    0
.eh_frame:000000000000E6F8                 db  98h
.eh_frame:000000000000E6F9                 db 0B2h
.eh_frame:000000000000E6FA                 db 0FFh
.eh_frame:000000000000E6FB                 db 0FFh
.eh_frame:000000000000E6FC                 db  13h
.eh_frame:000000000000E6FD                 db    0
.eh_frame:000000000000E6FE                 db    0
.eh_frame:000000000000E6FF                 db    0
.eh_frame:000000000000E700                 db    0
.eh_frame:000000000000E701                 db    0
.eh_frame:000000000000E702                 db    0
.eh_frame:000000000000E703                 db    0
.eh_frame:000000000000E704                 db  10h
.eh_frame:000000000000E705                 db    0
.eh_frame:000000000000E706                 db    0
.eh_frame:000000000000E707                 db    0
.eh_frame:000000000000E708                 db  10h
.eh_frame:000000000000E709                 db  0Eh
.eh_frame:000000000000E70A                 db    0
.eh_frame:000000000000E70B                 db    0
.eh_frame:000000000000E70C                 db 0A4h
.eh_frame:000000000000E70D                 db 0B2h
.eh_frame:000000000000E70E                 db 0FFh
.eh_frame:000000000000E70F                 db 0FFh
.eh_frame:000000000000E710                 db  0Ch
.eh_frame:000000000000E711                 db    0
.eh_frame:000000000000E712                 db    0
.eh_frame:000000000000E713                 db    0
.eh_frame:000000000000E714                 db    0
.eh_frame:000000000000E715                 db    0
.eh_frame:000000000000E716                 db    0
.eh_frame:000000000000E717                 db    0
.eh_frame:000000000000E718                 db  10h
.eh_frame:000000000000E719                 db    0
.eh_frame:000000000000E71A                 db    0
.eh_frame:000000000000E71B                 db    0
.eh_frame:000000000000E71C                 db  24h ; $
.eh_frame:000000000000E71D                 db  0Eh
.eh_frame:000000000000E71E                 db    0
.eh_frame:000000000000E71F                 db    0
.eh_frame:000000000000E720                 db 0A0h
.eh_frame:000000000000E721                 db 0B2h
.eh_frame:000000000000E722                 db 0FFh
.eh_frame:000000000000E723                 db 0FFh
.eh_frame:000000000000E724                 db  18h
.eh_frame:000000000000E725                 db    0
.eh_frame:000000000000E726                 db    0
.eh_frame:000000000000E727                 db    0
.eh_frame:000000000000E728                 db    0
.eh_frame:000000000000E729                 db    0
.eh_frame:000000000000E72A                 db    0
.eh_frame:000000000000E72B                 db    0
.eh_frame:000000000000E72C                 db  10h
.eh_frame:000000000000E72D                 db    0
.eh_frame:000000000000E72E                 db    0
.eh_frame:000000000000E72F                 db    0
.eh_frame:000000000000E730                 db  38h ; 8
.eh_frame:000000000000E731                 db  0Eh
.eh_frame:000000000000E732                 db    0
.eh_frame:000000000000E733                 db    0
.eh_frame:000000000000E734                 db 0ACh
.eh_frame:000000000000E735                 db 0B2h
.eh_frame:000000000000E736                 db 0FFh
.eh_frame:000000000000E737                 db 0FFh
.eh_frame:000000000000E738                 db  14h
.eh_frame:000000000000E739                 db    0
.eh_frame:000000000000E73A                 db    0
.eh_frame:000000000000E73B                 db    0
.eh_frame:000000000000E73C                 db    0
.eh_frame:000000000000E73D                 db    0
.eh_frame:000000000000E73E                 db    0
.eh_frame:000000000000E73F                 db    0
.eh_frame:000000000000E740                 db  18h
.eh_frame:000000000000E741                 db    0
.eh_frame:000000000000E742                 db    0
.eh_frame:000000000000E743                 db    0
.eh_frame:000000000000E744                 db  4Ch ; L
.eh_frame:000000000000E745                 db  0Eh
.eh_frame:000000000000E746                 db    0
.eh_frame:000000000000E747                 db    0
.eh_frame:000000000000E748                 db 0B8h
.eh_frame:000000000000E749                 db 0B2h
.eh_frame:000000000000E74A                 db 0FFh
.eh_frame:000000000000E74B                 db 0FFh
.eh_frame:000000000000E74C                 db  8Eh
.eh_frame:000000000000E74D                 db    0
.eh_frame:000000000000E74E                 db    0
.eh_frame:000000000000E74F                 db    0
.eh_frame:000000000000E750                 db    0
.eh_frame:000000000000E751                 db  44h ; D
.eh_frame:000000000000E752                 db  0Eh
.eh_frame:000000000000E753                 db  50h ; P
.eh_frame:000000000000E754                 db    2
.eh_frame:000000000000E755                 db  7Fh ; 
.eh_frame:000000000000E756                 db  0Ah
.eh_frame:000000000000E757                 db  0Eh
.eh_frame:000000000000E758                 db    8
.eh_frame:000000000000E759                 db  41h ; A
.eh_frame:000000000000E75A                 db  0Bh
.eh_frame:000000000000E75B                 db    0
.eh_frame:000000000000E75C                 db  18h
.eh_frame:000000000000E75D                 db    0
.eh_frame:000000000000E75E                 db    0
.eh_frame:000000000000E75F                 db    0
.eh_frame:000000000000E760                 db  68h ; h
.eh_frame:000000000000E761                 db  0Eh
.eh_frame:000000000000E762                 db    0
.eh_frame:000000000000E763                 db    0
.eh_frame:000000000000E764                 db  2Ch ; ,
.eh_frame:000000000000E765                 db 0B3h
.eh_frame:000000000000E766                 db 0FFh
.eh_frame:000000000000E767                 db 0FFh
.eh_frame:000000000000E768                 db  8Ah
.eh_frame:000000000000E769                 db    0
.eh_frame:000000000000E76A                 db    0
.eh_frame:000000000000E76B                 db    0
.eh_frame:000000000000E76C                 db    0
.eh_frame:000000000000E76D                 db  44h ; D
.eh_frame:000000000000E76E                 db  0Eh
.eh_frame:000000000000E76F                 db  50h ; P
.eh_frame:000000000000E770                 db    2
.eh_frame:000000000000E771                 db  7Bh ; {
.eh_frame:000000000000E772                 db  0Ah
.eh_frame:000000000000E773                 db  0Eh
.eh_frame:000000000000E774                 db    8
.eh_frame:000000000000E775                 db  41h ; A
.eh_frame:000000000000E776                 db  0Bh
.eh_frame:000000000000E777                 db    0
.eh_frame:000000000000E778                 db  10h
.eh_frame:000000000000E779                 db    0
.eh_frame:000000000000E77A                 db    0
.eh_frame:000000000000E77B                 db    0
.eh_frame:000000000000E77C                 db  84h
.eh_frame:000000000000E77D                 db  0Eh
.eh_frame:000000000000E77E                 db    0
.eh_frame:000000000000E77F                 db    0
.eh_frame:000000000000E780                 db 0A0h
.eh_frame:000000000000E781                 db 0B3h
.eh_frame:000000000000E782                 db 0FFh
.eh_frame:000000000000E783                 db 0FFh
.eh_frame:000000000000E784                 db  0Ch
.eh_frame:000000000000E785                 db    0
.eh_frame:000000000000E786                 db    0
.eh_frame:000000000000E787                 db    0
.eh_frame:000000000000E788                 db    0
.eh_frame:000000000000E789                 db    0
.eh_frame:000000000000E78A                 db    0
.eh_frame:000000000000E78B                 db    0
.eh_frame:000000000000E78C                 db  10h
.eh_frame:000000000000E78D                 db    0
.eh_frame:000000000000E78E                 db    0
.eh_frame:000000000000E78F                 db    0
.eh_frame:000000000000E790                 db  98h
.eh_frame:000000000000E791                 db  0Eh
.eh_frame:000000000000E792                 db    0
.eh_frame:000000000000E793                 db    0
.eh_frame:000000000000E794                 db  9Ch
.eh_frame:000000000000E795                 db 0B3h
.eh_frame:000000000000E796                 db 0FFh
.eh_frame:000000000000E797                 db 0FFh
.eh_frame:000000000000E798                 db  0Fh
.eh_frame:000000000000E799                 db    0
.eh_frame:000000000000E79A                 db    0
.eh_frame:000000000000E79B                 db    0
.eh_frame:000000000000E79C                 db    0
.eh_frame:000000000000E79D                 db    0
.eh_frame:000000000000E79E                 db    0
.eh_frame:000000000000E79F                 db    0
.eh_frame:000000000000E7A0                 db  18h
.eh_frame:000000000000E7A1                 db    0
.eh_frame:000000000000E7A2                 db    0
.eh_frame:000000000000E7A3                 db    0
.eh_frame:000000000000E7A4                 db 0ACh
.eh_frame:000000000000E7A5                 db  0Eh
.eh_frame:000000000000E7A6                 db    0
.eh_frame:000000000000E7A7                 db    0
.eh_frame:000000000000E7A8                 db  98h
.eh_frame:000000000000E7A9                 db 0B3h
.eh_frame:000000000000E7AA                 db 0FFh
.eh_frame:000000000000E7AB                 db 0FFh
.eh_frame:000000000000E7AC                 db  98h
.eh_frame:000000000000E7AD                 db    0
.eh_frame:000000000000E7AE                 db    0
.eh_frame:000000000000E7AF                 db    0
.eh_frame:000000000000E7B0                 db    0
.eh_frame:000000000000E7B1                 db  44h ; D
.eh_frame:000000000000E7B2                 db  0Eh
.eh_frame:000000000000E7B3                 db  50h ; P
.eh_frame:000000000000E7B4                 db    2
.eh_frame:000000000000E7B5                 db  8Eh
.eh_frame:000000000000E7B6                 db  0Ah
.eh_frame:000000000000E7B7                 db  0Eh
.eh_frame:000000000000E7B8                 db    8
.eh_frame:000000000000E7B9                 db  41h ; A
.eh_frame:000000000000E7BA                 db  0Bh
.eh_frame:000000000000E7BB                 db    0
.eh_frame:000000000000E7BC                 db  10h
.eh_frame:000000000000E7BD                 db    0
.eh_frame:000000000000E7BE                 db    0
.eh_frame:000000000000E7BF                 db    0
.eh_frame:000000000000E7C0                 db 0C8h
.eh_frame:000000000000E7C1                 db  0Eh
.eh_frame:000000000000E7C2                 db    0
.eh_frame:000000000000E7C3                 db    0
.eh_frame:000000000000E7C4                 db  1Ch
.eh_frame:000000000000E7C5                 db 0B4h
.eh_frame:000000000000E7C6                 db 0FFh
.eh_frame:000000000000E7C7                 db 0FFh
.eh_frame:000000000000E7C8                 db  10h
.eh_frame:000000000000E7C9                 db    0
.eh_frame:000000000000E7CA                 db    0
.eh_frame:000000000000E7CB                 db    0
.eh_frame:000000000000E7CC                 db    0
.eh_frame:000000000000E7CD                 db    0
.eh_frame:000000000000E7CE                 db    0
.eh_frame:000000000000E7CF                 db    0
.eh_frame:000000000000E7D0                 db  10h
.eh_frame:000000000000E7D1                 db    0
.eh_frame:000000000000E7D2                 db    0
.eh_frame:000000000000E7D3                 db    0
.eh_frame:000000000000E7D4                 db 0DCh
.eh_frame:000000000000E7D5                 db  0Eh
.eh_frame:000000000000E7D6                 db    0
.eh_frame:000000000000E7D7                 db    0
.eh_frame:000000000000E7D8                 db  18h
.eh_frame:000000000000E7D9                 db 0B4h
.eh_frame:000000000000E7DA                 db 0FFh
.eh_frame:000000000000E7DB                 db 0FFh
.eh_frame:000000000000E7DC                 db  11h
.eh_frame:000000000000E7DD                 db    0
.eh_frame:000000000000E7DE                 db    0
.eh_frame:000000000000E7DF                 db    0
.eh_frame:000000000000E7E0                 db    0
.eh_frame:000000000000E7E1                 db    0
.eh_frame:000000000000E7E2                 db    0
.eh_frame:000000000000E7E3                 db    0
.eh_frame:000000000000E7E4                 db  10h
.eh_frame:000000000000E7E5                 db    0
.eh_frame:000000000000E7E6                 db    0
.eh_frame:000000000000E7E7                 db    0
.eh_frame:000000000000E7E8                 db 0F0h
.eh_frame:000000000000E7E9                 db  0Eh
.eh_frame:000000000000E7EA                 db    0
.eh_frame:000000000000E7EB                 db    0
.eh_frame:000000000000E7EC                 db  24h ; $
.eh_frame:000000000000E7ED                 db 0B4h
.eh_frame:000000000000E7EE                 db 0FFh
.eh_frame:000000000000E7EF                 db 0FFh
.eh_frame:000000000000E7F0                 db  0Ah
.eh_frame:000000000000E7F1                 db    0
.eh_frame:000000000000E7F2                 db    0
.eh_frame:000000000000E7F3                 db    0
.eh_frame:000000000000E7F4                 db    0
.eh_frame:000000000000E7F5                 db    0
.eh_frame:000000000000E7F6                 db    0
.eh_frame:000000000000E7F7                 db    0
.eh_frame:000000000000E7F8                 db  18h
.eh_frame:000000000000E7F9                 db    0
.eh_frame:000000000000E7FA                 db    0
.eh_frame:000000000000E7FB                 db    0
.eh_frame:000000000000E7FC                 db    4
.eh_frame:000000000000E7FD                 db  0Fh
.eh_frame:000000000000E7FE                 db    0
.eh_frame:000000000000E7FF                 db    0
.eh_frame:000000000000E800                 db  20h
.eh_frame:000000000000E801                 db 0B4h
.eh_frame:000000000000E802                 db 0FFh
.eh_frame:000000000000E803                 db 0FFh
.eh_frame:000000000000E804                 db  8Eh
.eh_frame:000000000000E805                 db    0
.eh_frame:000000000000E806                 db    0
.eh_frame:000000000000E807                 db    0
.eh_frame:000000000000E808                 db    0
.eh_frame:000000000000E809                 db  44h ; D
.eh_frame:000000000000E80A                 db  0Eh
.eh_frame:000000000000E80B                 db  50h ; P
.eh_frame:000000000000E80C                 db    2
.eh_frame:000000000000E80D                 db  7Fh ; 
.eh_frame:000000000000E80E                 db  0Ah
.eh_frame:000000000000E80F                 db  0Eh
.eh_frame:000000000000E810                 db    8
.eh_frame:000000000000E811                 db  41h ; A
.eh_frame:000000000000E812                 db  0Bh
.eh_frame:000000000000E813                 db    0
.eh_frame:000000000000E814                 db  18h
.eh_frame:000000000000E815                 db    0
.eh_frame:000000000000E816                 db    0
.eh_frame:000000000000E817                 db    0
.eh_frame:000000000000E818                 db  20h
.eh_frame:000000000000E819                 db  0Fh
.eh_frame:000000000000E81A                 db    0
.eh_frame:000000000000E81B                 db    0
.eh_frame:000000000000E81C                 db  94h
.eh_frame:000000000000E81D                 db 0B4h
.eh_frame:000000000000E81E                 db 0FFh
.eh_frame:000000000000E81F                 db 0FFh
.eh_frame:000000000000E820                 db  91h
.eh_frame:000000000000E821                 db    0
.eh_frame:000000000000E822                 db    0
.eh_frame:000000000000E823                 db    0
.eh_frame:000000000000E824                 db    0
.eh_frame:000000000000E825                 db  44h ; D
.eh_frame:000000000000E826                 db  0Eh
.eh_frame:000000000000E827                 db  50h ; P
.eh_frame:000000000000E828                 db    2
.eh_frame:000000000000E829                 db  82h
.eh_frame:000000000000E82A                 db  0Ah
.eh_frame:000000000000E82B                 db  0Eh
.eh_frame:000000000000E82C                 db    8
.eh_frame:000000000000E82D                 db  41h ; A
.eh_frame:000000000000E82E                 db  0Bh
.eh_frame:000000000000E82F                 db    0
.eh_frame:000000000000E830                 db  10h
.eh_frame:000000000000E831                 db    0
.eh_frame:000000000000E832                 db    0
.eh_frame:000000000000E833                 db    0
.eh_frame:000000000000E834                 db  3Ch ; <
.eh_frame:000000000000E835                 db  0Fh
.eh_frame:000000000000E836                 db    0
.eh_frame:000000000000E837                 db    0
.eh_frame:000000000000E838                 db  18h
.eh_frame:000000000000E839                 db 0B5h
.eh_frame:000000000000E83A                 db 0FFh
.eh_frame:000000000000E83B                 db 0FFh
.eh_frame:000000000000E83C                 db  0Ch
.eh_frame:000000000000E83D                 db    0
.eh_frame:000000000000E83E                 db    0
.eh_frame:000000000000E83F                 db    0
.eh_frame:000000000000E840                 db    0
.eh_frame:000000000000E841                 db    0
.eh_frame:000000000000E842                 db    0
.eh_frame:000000000000E843                 db    0
.eh_frame:000000000000E844                 db  10h
.eh_frame:000000000000E845                 db    0
.eh_frame:000000000000E846                 db    0
.eh_frame:000000000000E847                 db    0
.eh_frame:000000000000E848                 db  50h ; P
.eh_frame:000000000000E849                 db  0Fh
.eh_frame:000000000000E84A                 db    0
.eh_frame:000000000000E84B                 db    0
.eh_frame:000000000000E84C                 db  14h
.eh_frame:000000000000E84D                 db 0B5h
.eh_frame:000000000000E84E                 db 0FFh
.eh_frame:000000000000E84F                 db 0FFh
.eh_frame:000000000000E850                 db  17h
.eh_frame:000000000000E851                 db    0
.eh_frame:000000000000E852                 db    0
.eh_frame:000000000000E853                 db    0
.eh_frame:000000000000E854                 db    0
.eh_frame:000000000000E855                 db    0
.eh_frame:000000000000E856                 db    0
.eh_frame:000000000000E857                 db    0
.eh_frame:000000000000E858                 db  10h
.eh_frame:000000000000E859                 db    0
.eh_frame:000000000000E85A                 db    0
.eh_frame:000000000000E85B                 db    0
.eh_frame:000000000000E85C                 db  64h ; d
.eh_frame:000000000000E85D                 db  0Fh
.eh_frame:000000000000E85E                 db    0
.eh_frame:000000000000E85F                 db    0
.eh_frame:000000000000E860                 db  20h
.eh_frame:000000000000E861                 db 0B5h
.eh_frame:000000000000E862                 db 0FFh
.eh_frame:000000000000E863                 db 0FFh
.eh_frame:000000000000E864                 db  13h
.eh_frame:000000000000E865                 db    0
.eh_frame:000000000000E866                 db    0
.eh_frame:000000000000E867                 db    0
.eh_frame:000000000000E868                 db    0
.eh_frame:000000000000E869                 db    0
.eh_frame:000000000000E86A                 db    0
.eh_frame:000000000000E86B                 db    0
.eh_frame:000000000000E86C                 db  10h
.eh_frame:000000000000E86D                 db    0
.eh_frame:000000000000E86E                 db    0
.eh_frame:000000000000E86F                 db    0
.eh_frame:000000000000E870                 db  78h ; x
.eh_frame:000000000000E871                 db  0Fh
.eh_frame:000000000000E872                 db    0
.eh_frame:000000000000E873                 db    0
.eh_frame:000000000000E874                 db  2Ch ; ,
.eh_frame:000000000000E875                 db 0B5h
.eh_frame:000000000000E876                 db 0FFh
.eh_frame:000000000000E877                 db 0FFh
.eh_frame:000000000000E878                 db  0Ch
.eh_frame:000000000000E879                 db    0
.eh_frame:000000000000E87A                 db    0
.eh_frame:000000000000E87B                 db    0
.eh_frame:000000000000E87C                 db    0
.eh_frame:000000000000E87D                 db    0
.eh_frame:000000000000E87E                 db    0
.eh_frame:000000000000E87F                 db    0
.eh_frame:000000000000E880                 db  10h
.eh_frame:000000000000E881                 db    0
.eh_frame:000000000000E882                 db    0
.eh_frame:000000000000E883                 db    0
.eh_frame:000000000000E884                 db  8Ch
.eh_frame:000000000000E885                 db  0Fh
.eh_frame:000000000000E886                 db    0
.eh_frame:000000000000E887                 db    0
.eh_frame:000000000000E888                 db  28h ; (
.eh_frame:000000000000E889                 db 0B5h
.eh_frame:000000000000E88A                 db 0FFh
.eh_frame:000000000000E88B                 db 0FFh
.eh_frame:000000000000E88C                 db  14h
.eh_frame:000000000000E88D                 db    0
.eh_frame:000000000000E88E                 db    0
.eh_frame:000000000000E88F                 db    0
.eh_frame:000000000000E890                 db    0
.eh_frame:000000000000E891                 db    0
.eh_frame:000000000000E892                 db    0
.eh_frame:000000000000E893                 db    0
.eh_frame:000000000000E894                 db  10h
.eh_frame:000000000000E895                 db    0
.eh_frame:000000000000E896                 db    0
.eh_frame:000000000000E897                 db    0
.eh_frame:000000000000E898                 db 0A0h
.eh_frame:000000000000E899                 db  0Fh
.eh_frame:000000000000E89A                 db    0
.eh_frame:000000000000E89B                 db    0
.eh_frame:000000000000E89C                 db  34h ; 4
.eh_frame:000000000000E89D                 db 0B5h
.eh_frame:000000000000E89E                 db 0FFh
.eh_frame:000000000000E89F                 db 0FFh
.eh_frame:000000000000E8A0                 db  13h
.eh_frame:000000000000E8A1                 db    0
.eh_frame:000000000000E8A2                 db    0
.eh_frame:000000000000E8A3                 db    0
.eh_frame:000000000000E8A4                 db    0
.eh_frame:000000000000E8A5                 db    0
.eh_frame:000000000000E8A6                 db    0
.eh_frame:000000000000E8A7                 db    0
.eh_frame:000000000000E8A8                 db  14h
.eh_frame:000000000000E8A9                 db    0
.eh_frame:000000000000E8AA                 db    0
.eh_frame:000000000000E8AB                 db    0
.eh_frame:000000000000E8AC                 db 0B4h
.eh_frame:000000000000E8AD                 db  0Fh
.eh_frame:000000000000E8AE                 db    0
.eh_frame:000000000000E8AF                 db    0
.eh_frame:000000000000E8B0                 db  40h ; @
.eh_frame:000000000000E8B1                 db 0B5h
.eh_frame:000000000000E8B2                 db 0FFh
.eh_frame:000000000000E8B3                 db 0FFh
.eh_frame:000000000000E8B4                 db  18h
.eh_frame:000000000000E8B5                 db    0
.eh_frame:000000000000E8B6                 db    0
.eh_frame:000000000000E8B7                 db    0
.eh_frame:000000000000E8B8                 db    0
.eh_frame:000000000000E8B9                 db    0
.eh_frame:000000000000E8BA                 db    0
.eh_frame:000000000000E8BB                 db    0
.eh_frame:000000000000E8BC                 db    0
.eh_frame:000000000000E8BD                 db    0
.eh_frame:000000000000E8BE                 db    0
.eh_frame:000000000000E8BF                 db    0
.eh_frame:000000000000E8C0                 db  34h ; 4
.eh_frame:000000000000E8C1                 db    0
.eh_frame:000000000000E8C2                 db    0
.eh_frame:000000000000E8C3                 db    0
.eh_frame:000000000000E8C4                 db 0CCh
.eh_frame:000000000000E8C5                 db  0Fh
.eh_frame:000000000000E8C6                 db    0
.eh_frame:000000000000E8C7                 db    0
.eh_frame:000000000000E8C8                 db  48h ; H
.eh_frame:000000000000E8C9                 db 0B5h
.eh_frame:000000000000E8CA                 db 0FFh
.eh_frame:000000000000E8CB                 db 0FFh
.eh_frame:000000000000E8CC                 db  5Eh ; ^
.eh_frame:000000000000E8CD                 db    0
.eh_frame:000000000000E8CE                 db    0
.eh_frame:000000000000E8CF                 db    0
.eh_frame:000000000000E8D0                 db    0
.eh_frame:000000000000E8D1                 db  42h ; B
.eh_frame:000000000000E8D2                 db  0Eh
.eh_frame:000000000000E8D3                 db  10h
.eh_frame:000000000000E8D4                 db  8Dh
.eh_frame:000000000000E8D5                 db    2
.eh_frame:000000000000E8D6                 db  42h ; B
.eh_frame:000000000000E8D7                 db  0Eh
.eh_frame:000000000000E8D8                 db  18h
.eh_frame:000000000000E8D9                 db  8Ch
.eh_frame:000000000000E8DA                 db    3
.eh_frame:000000000000E8DB                 db  44h ; D
.eh_frame:000000000000E8DC                 db  0Eh
.eh_frame:000000000000E8DD                 db  20h
.eh_frame:000000000000E8DE                 db  86h
.eh_frame:000000000000E8DF                 db    4
.eh_frame:000000000000E8E0                 db  41h ; A
.eh_frame:000000000000E8E1                 db  0Eh
.eh_frame:000000000000E8E2                 db  28h ; (
.eh_frame:000000000000E8E3                 db  83h
.eh_frame:000000000000E8E4                 db    5
.eh_frame:000000000000E8E5                 db  4Ah ; J
.eh_frame:000000000000E8E6                 db  0Eh
.eh_frame:000000000000E8E7                 db  30h ; 0
.eh_frame:000000000000E8E8                 db    2
.eh_frame:000000000000E8E9                 db  41h ; A
.eh_frame:000000000000E8EA                 db  0Eh
.eh_frame:000000000000E8EB                 db  28h ; (
.eh_frame:000000000000E8EC                 db  44h ; D
.eh_frame:000000000000E8ED                 db  0Eh
.eh_frame:000000000000E8EE                 db  20h
.eh_frame:000000000000E8EF                 db  41h ; A
.eh_frame:000000000000E8F0                 db  0Eh
.eh_frame:000000000000E8F1                 db  18h
.eh_frame:000000000000E8F2                 db  42h ; B
.eh_frame:000000000000E8F3                 db  0Eh
.eh_frame:000000000000E8F4                 db  10h
.eh_frame:000000000000E8F5                 db  42h ; B
.eh_frame:000000000000E8F6                 db  0Eh
.eh_frame:000000000000E8F7                 db    8
.eh_frame:000000000000E8F8                 db  34h ; 4
.eh_frame:000000000000E8F9                 db    0
.eh_frame:000000000000E8FA                 db    0
.eh_frame:000000000000E8FB                 db    0
.eh_frame:000000000000E8FC                 db    4
.eh_frame:000000000000E8FD                 db  10h
.eh_frame:000000000000E8FE                 db    0
.eh_frame:000000000000E8FF                 db    0
.eh_frame:000000000000E900                 db  70h ; p
.eh_frame:000000000000E901                 db 0B5h
.eh_frame:000000000000E902                 db 0FFh
.eh_frame:000000000000E903                 db 0FFh
.eh_frame:000000000000E904                 db  3Fh ; ?
.eh_frame:000000000000E905                 db    0
.eh_frame:000000000000E906                 db    0
.eh_frame:000000000000E907                 db    0
.eh_frame:000000000000E908                 db    0
.eh_frame:000000000000E909                 db  42h ; B
.eh_frame:000000000000E90A                 db  0Eh
.eh_frame:000000000000E90B                 db  10h
.eh_frame:000000000000E90C                 db  8Dh
.eh_frame:000000000000E90D                 db    2
.eh_frame:000000000000E90E                 db  42h ; B
.eh_frame:000000000000E90F                 db  0Eh
.eh_frame:000000000000E910                 db  18h
.eh_frame:000000000000E911                 db  8Ch
.eh_frame:000000000000E912                 db    3
.eh_frame:000000000000E913                 db  41h ; A
.eh_frame:000000000000E914                 db  0Eh
.eh_frame:000000000000E915                 db  20h
.eh_frame:000000000000E916                 db  86h
.eh_frame:000000000000E917                 db    4
.eh_frame:000000000000E918                 db  41h ; A
.eh_frame:000000000000E919                 db  0Eh
.eh_frame:000000000000E91A                 db  28h ; (
.eh_frame:000000000000E91B                 db  83h
.eh_frame:000000000000E91C                 db    5
.eh_frame:000000000000E91D                 db  46h ; F
.eh_frame:000000000000E91E                 db  0Eh
.eh_frame:000000000000E91F                 db  30h ; 0
.eh_frame:000000000000E920                 db  6Ah ; j
.eh_frame:000000000000E921                 db  0Eh
.eh_frame:000000000000E922                 db  28h ; (
.eh_frame:000000000000E923                 db  43h ; C
.eh_frame:000000000000E924                 db  0Eh
.eh_frame:000000000000E925                 db  20h
.eh_frame:000000000000E926                 db  41h ; A
.eh_frame:000000000000E927                 db  0Eh
.eh_frame:000000000000E928                 db  18h
.eh_frame:000000000000E929                 db  42h ; B
.eh_frame:000000000000E92A                 db  0Eh
.eh_frame:000000000000E92B                 db  10h
.eh_frame:000000000000E92C                 db  42h ; B
.eh_frame:000000000000E92D                 db  0Eh
.eh_frame:000000000000E92E                 db    8
.eh_frame:000000000000E92F                 db    0
.eh_frame:000000000000E930                 db  10h
.eh_frame:000000000000E931                 db    1
.eh_frame:000000000000E932                 db    0
.eh_frame:000000000000E933                 db    0
.eh_frame:000000000000E934                 db  3Ch ; <
.eh_frame:000000000000E935                 db  10h
.eh_frame:000000000000E936                 db    0
.eh_frame:000000000000E937                 db    0
.eh_frame:000000000000E938                 db  78h ; x
.eh_frame:000000000000E939                 db 0B5h
.eh_frame:000000000000E93A                 db 0FFh
.eh_frame:000000000000E93B                 db 0FFh
.eh_frame:000000000000E93C                 db  17h
.eh_frame:000000000000E93D                 db    4
.eh_frame:000000000000E93E                 db    0
.eh_frame:000000000000E93F                 db    0
.eh_frame:000000000000E940                 db    0
.eh_frame:000000000000E941                 db  42h ; B
.eh_frame:000000000000E942                 db  0Eh
.eh_frame:000000000000E943                 db  10h
.eh_frame:000000000000E944                 db  8Fh
.eh_frame:000000000000E945                 db    2
.eh_frame:000000000000E946                 db  42h ; B
.eh_frame:000000000000E947                 db  0Eh
.eh_frame:000000000000E948                 db  18h
.eh_frame:000000000000E949                 db  8Eh
.eh_frame:000000000000E94A                 db    3
.eh_frame:000000000000E94B                 db  42h ; B
.eh_frame:000000000000E94C                 db  0Eh
.eh_frame:000000000000E94D                 db  20h
.eh_frame:000000000000E94E                 db  8Dh
.eh_frame:000000000000E94F                 db    4
.eh_frame:000000000000E950                 db  42h ; B
.eh_frame:000000000000E951                 db  0Eh
.eh_frame:000000000000E952                 db  28h ; (
.eh_frame:000000000000E953                 db  8Ch
.eh_frame:000000000000E954                 db    5
.eh_frame:000000000000E955                 db  44h ; D
.eh_frame:000000000000E956                 db  0Eh
.eh_frame:000000000000E957                 db  30h ; 0
.eh_frame:000000000000E958                 db  86h
.eh_frame:000000000000E959                 db    6
.eh_frame:000000000000E95A                 db  41h ; A
.eh_frame:000000000000E95B                 db  0Eh
.eh_frame:000000000000E95C                 db  38h ; 8
.eh_frame:000000000000E95D                 db  83h
.eh_frame:000000000000E95E                 db    7
.eh_frame:000000000000E95F                 db  4Ah ; J
.eh_frame:000000000000E960                 db  0Eh
.eh_frame:000000000000E961                 db  60h ; `
.eh_frame:000000000000E962                 db    2
.eh_frame:000000000000E963                 db 0DDh
.eh_frame:000000000000E964                 db  0Eh
.eh_frame:000000000000E965                 db  68h ; h
.eh_frame:000000000000E966                 db  57h ; W
.eh_frame:000000000000E967                 db  0Eh
.eh_frame:000000000000E968                 db  70h ; p
.eh_frame:000000000000E969                 db  42h ; B
.eh_frame:000000000000E96A                 db  0Eh
.eh_frame:000000000000E96B                 db  78h ; x
.eh_frame:000000000000E96C                 db  42h ; B
.eh_frame:000000000000E96D                 db  0Eh
.eh_frame:000000000000E96E                 db  80h
.eh_frame:000000000000E96F                 db    1
.eh_frame:000000000000E970                 db  42h ; B
.eh_frame:000000000000E971                 db  0Eh
.eh_frame:000000000000E972                 db  88h
.eh_frame:000000000000E973                 db    1
.eh_frame:000000000000E974                 db  42h ; B
.eh_frame:000000000000E975                 db  0Eh
.eh_frame:000000000000E976                 db  90h
.eh_frame:000000000000E977                 db    1
.eh_frame:000000000000E978                 db  53h ; S
.eh_frame:000000000000E979                 db  0Eh
.eh_frame:000000000000E97A                 db  60h ; `
.eh_frame:000000000000E97B                 db  44h ; D
.eh_frame:000000000000E97C                 db  0Ah
.eh_frame:000000000000E97D                 db  0Eh
.eh_frame:000000000000E97E                 db  38h ; 8
.eh_frame:000000000000E97F                 db  41h ; A
.eh_frame:000000000000E980                 db  0Eh
.eh_frame:000000000000E981                 db  30h ; 0
.eh_frame:000000000000E982                 db  41h ; A
.eh_frame:000000000000E983                 db  0Eh
.eh_frame:000000000000E984                 db  28h ; (
.eh_frame:000000000000E985                 db  42h ; B
.eh_frame:000000000000E986                 db  0Eh
.eh_frame:000000000000E987                 db  20h
.eh_frame:000000000000E988                 db  42h ; B
.eh_frame:000000000000E989                 db  0Eh
.eh_frame:000000000000E98A                 db  18h
.eh_frame:000000000000E98B                 db  42h ; B
.eh_frame:000000000000E98C                 db  0Eh
.eh_frame:000000000000E98D                 db  10h
.eh_frame:000000000000E98E                 db  42h ; B
.eh_frame:000000000000E98F                 db  0Eh
.eh_frame:000000000000E990                 db    8
.eh_frame:000000000000E991                 db  44h ; D
.eh_frame:000000000000E992                 db  0Bh
.eh_frame:000000000000E993                 db    2
.eh_frame:000000000000E994                 db  78h ; x
.eh_frame:000000000000E995                 db  0Ah
.eh_frame:000000000000E996                 db  0Eh
.eh_frame:000000000000E997                 db  68h ; h
.eh_frame:000000000000E998                 db  48h ; H
.eh_frame:000000000000E999                 db  0Bh
.eh_frame:000000000000E99A                 db  5Ah ; Z
.eh_frame:000000000000E99B                 db  0Ah
.eh_frame:000000000000E99C                 db  0Eh
.eh_frame:000000000000E99D                 db  38h ; 8
.eh_frame:000000000000E99E                 db  47h ; G
.eh_frame:000000000000E99F                 db  0Eh
.eh_frame:000000000000E9A0                 db  30h ; 0
.eh_frame:000000000000E9A1                 db  41h ; A
.eh_frame:000000000000E9A2                 db  0Eh
.eh_frame:000000000000E9A3                 db  28h ; (
.eh_frame:000000000000E9A4                 db  42h ; B
.eh_frame:000000000000E9A5                 db  0Eh
.eh_frame:000000000000E9A6                 db  20h
.eh_frame:000000000000E9A7                 db  42h ; B
.eh_frame:000000000000E9A8                 db  0Eh
.eh_frame:000000000000E9A9                 db  18h
.eh_frame:000000000000E9AA                 db  42h ; B
.eh_frame:000000000000E9AB                 db  0Eh
.eh_frame:000000000000E9AC                 db  10h
.eh_frame:000000000000E9AD                 db  42h ; B
.eh_frame:000000000000E9AE                 db  0Eh
.eh_frame:000000000000E9AF                 db    8
.eh_frame:000000000000E9B0                 db  56h ; V
.eh_frame:000000000000E9B1                 db  0Bh
.eh_frame:000000000000E9B2                 db  5Eh ; ^
.eh_frame:000000000000E9B3                 db  0Ah
.eh_frame:000000000000E9B4                 db  0Eh
.eh_frame:000000000000E9B5                 db  38h ; 8
.eh_frame:000000000000E9B6                 db  52h ; R
.eh_frame:000000000000E9B7                 db  0Eh
.eh_frame:000000000000E9B8                 db  30h ; 0
.eh_frame:000000000000E9B9                 db  41h ; A
.eh_frame:000000000000E9BA                 db  0Eh
.eh_frame:000000000000E9BB                 db  28h ; (
.eh_frame:000000000000E9BC                 db  42h ; B
.eh_frame:000000000000E9BD                 db  0Eh
.eh_frame:000000000000E9BE                 db  20h
.eh_frame:000000000000E9BF                 db  42h ; B
.eh_frame:000000000000E9C0                 db  0Eh
.eh_frame:000000000000E9C1                 db  18h
.eh_frame:000000000000E9C2                 db  42h ; B
.eh_frame:000000000000E9C3                 db  0Eh
.eh_frame:000000000000E9C4                 db  10h
.eh_frame:000000000000E9C5                 db  42h ; B
.eh_frame:000000000000E9C6                 db  0Eh
.eh_frame:000000000000E9C7                 db    8
.eh_frame:000000000000E9C8                 db  4Fh ; O
.eh_frame:000000000000E9C9                 db  0Bh
.eh_frame:000000000000E9CA                 db  62h ; b
.eh_frame:000000000000E9CB                 db  0Ah
.eh_frame:000000000000E9CC                 db  0Eh
.eh_frame:000000000000E9CD                 db  38h ; 8
.eh_frame:000000000000E9CE                 db  50h ; P
.eh_frame:000000000000E9CF                 db  0Eh
.eh_frame:000000000000E9D0                 db  30h ; 0
.eh_frame:000000000000E9D1                 db  41h ; A
.eh_frame:000000000000E9D2                 db  0Eh
.eh_frame:000000000000E9D3                 db  28h ; (
.eh_frame:000000000000E9D4                 db  42h ; B
.eh_frame:000000000000E9D5                 db  0Eh
.eh_frame:000000000000E9D6                 db  20h
.eh_frame:000000000000E9D7                 db  42h ; B
.eh_frame:000000000000E9D8                 db  0Eh
.eh_frame:000000000000E9D9                 db  18h
.eh_frame:000000000000E9DA                 db  42h ; B
.eh_frame:000000000000E9DB                 db  0Eh
.eh_frame:000000000000E9DC                 db  10h
.eh_frame:000000000000E9DD                 db  42h ; B
.eh_frame:000000000000E9DE                 db  0Eh
.eh_frame:000000000000E9DF                 db    8
.eh_frame:000000000000E9E0                 db  55h ; U
.eh_frame:000000000000E9E1                 db  0Bh
.eh_frame:000000000000E9E2                 db  66h ; f
.eh_frame:000000000000E9E3                 db  0Eh
.eh_frame:000000000000E9E4                 db  68h ; h
.eh_frame:000000000000E9E5                 db  42h ; B
.eh_frame:000000000000E9E6                 db  0Eh
.eh_frame:000000000000E9E7                 db  70h ; p
.eh_frame:000000000000E9E8                 db  5Ch ; \
.eh_frame:000000000000E9E9                 db  0Eh
.eh_frame:000000000000E9EA                 db  68h ; h
.eh_frame:000000000000E9EB                 db  41h ; A
.eh_frame:000000000000E9EC                 db  0Eh
.eh_frame:000000000000E9ED                 db  60h ; `
.eh_frame:000000000000E9EE                 db  44h ; D
.eh_frame:000000000000E9EF                 db  0Ah
.eh_frame:000000000000E9F0                 db  0Eh
.eh_frame:000000000000E9F1                 db  38h ; 8
.eh_frame:000000000000E9F2                 db  41h ; A
.eh_frame:000000000000E9F3                 db  0Eh
.eh_frame:000000000000E9F4                 db  30h ; 0
.eh_frame:000000000000E9F5                 db  41h ; A
.eh_frame:000000000000E9F6                 db  0Eh
.eh_frame:000000000000E9F7                 db  28h ; (
.eh_frame:000000000000E9F8                 db  42h ; B
.eh_frame:000000000000E9F9                 db  0Eh
.eh_frame:000000000000E9FA                 db  20h
.eh_frame:000000000000E9FB                 db  42h ; B
.eh_frame:000000000000E9FC                 db  0Eh
.eh_frame:000000000000E9FD                 db  18h
.eh_frame:000000000000E9FE                 db  42h ; B
.eh_frame:000000000000E9FF                 db  0Eh
.eh_frame:000000000000EA00                 db  10h
.eh_frame:000000000000EA01                 db  42h ; B
.eh_frame:000000000000EA02                 db  0Eh
.eh_frame:000000000000EA03                 db    8
.eh_frame:000000000000EA04                 db  45h ; E
.eh_frame:000000000000EA05                 db  0Bh
.eh_frame:000000000000EA06                 db  68h ; h
.eh_frame:000000000000EA07                 db  0Ah
.eh_frame:000000000000EA08                 db  0Eh
.eh_frame:000000000000EA09                 db  68h ; h
.eh_frame:000000000000EA0A                 db  48h ; H
.eh_frame:000000000000EA0B                 db  0Bh
.eh_frame:000000000000EA0C                 db  72h ; r
.eh_frame:000000000000EA0D                 db  0Eh
.eh_frame:000000000000EA0E                 db  68h ; h
.eh_frame:000000000000EA0F                 db  45h ; E
.eh_frame:000000000000EA10                 db  0Eh
.eh_frame:000000000000EA11                 db  70h ; p
.eh_frame:000000000000EA12                 db  42h ; B
.eh_frame:000000000000EA13                 db  0Eh
.eh_frame:000000000000EA14                 db  78h ; x
.eh_frame:000000000000EA15                 db  42h ; B
.eh_frame:000000000000EA16                 db  0Eh
.eh_frame:000000000000EA17                 db  80h
.eh_frame:000000000000EA18                 db    1
.eh_frame:000000000000EA19                 db  5Eh ; ^
.eh_frame:000000000000EA1A                 db  0Eh
.eh_frame:000000000000EA1B                 db  60h ; `
.eh_frame:000000000000EA1C                 db  44h ; D
.eh_frame:000000000000EA1D                 db  0Ah
.eh_frame:000000000000EA1E                 db  0Eh
.eh_frame:000000000000EA1F                 db  38h ; 8
.eh_frame:000000000000EA20                 db  41h ; A
.eh_frame:000000000000EA21                 db  0Eh
.eh_frame:000000000000EA22                 db  30h ; 0
.eh_frame:000000000000EA23                 db  41h ; A
.eh_frame:000000000000EA24                 db  0Eh
.eh_frame:000000000000EA25                 db  28h ; (
.eh_frame:000000000000EA26                 db  42h ; B
.eh_frame:000000000000EA27                 db  0Eh
.eh_frame:000000000000EA28                 db  20h
.eh_frame:000000000000EA29                 db  42h ; B
.eh_frame:000000000000EA2A                 db  0Eh
.eh_frame:000000000000EA2B                 db  18h
.eh_frame:000000000000EA2C                 db  42h ; B
.eh_frame:000000000000EA2D                 db  0Eh
.eh_frame:000000000000EA2E                 db  10h
.eh_frame:000000000000EA2F                 db  42h ; B
.eh_frame:000000000000EA30                 db  0Eh
.eh_frame:000000000000EA31                 db    8
.eh_frame:000000000000EA32                 db  41h ; A
.eh_frame:000000000000EA33                 db  0Bh
.eh_frame:000000000000EA34                 db  79h ; y
.eh_frame:000000000000EA35                 db  0Ah
.eh_frame:000000000000EA36                 db  0Eh
.eh_frame:000000000000EA37                 db  68h ; h
.eh_frame:000000000000EA38                 db  42h ; B
.eh_frame:000000000000EA39                 db  0Eh
.eh_frame:000000000000EA3A                 db  70h ; p
.eh_frame:000000000000EA3B                 db  42h ; B
.eh_frame:000000000000EA3C                 db  0Eh
.eh_frame:000000000000EA3D                 db  78h ; x
.eh_frame:000000000000EA3E                 db  42h ; B
.eh_frame:000000000000EA3F                 db  0Eh
.eh_frame:000000000000EA40                 db  80h
.eh_frame:000000000000EA41                 db    1
.eh_frame:000000000000EA42                 db  51h ; Q
.eh_frame:000000000000EA43                 db  0Bh
.eh_frame:000000000000EA44                 db  10h
.eh_frame:000000000000EA45                 db    0
.eh_frame:000000000000EA46                 db    0
.eh_frame:000000000000EA47                 db    0
.eh_frame:000000000000EA48                 db  50h ; P
.eh_frame:000000000000EA49                 db  11h
.eh_frame:000000000000EA4A                 db    0
.eh_frame:000000000000EA4B                 db    0
.eh_frame:000000000000EA4C                 db  84h
.eh_frame:000000000000EA4D                 db 0B8h
.eh_frame:000000000000EA4E                 db 0FFh
.eh_frame:000000000000EA4F                 db 0FFh
.eh_frame:000000000000EA50                 db  20h
.eh_frame:000000000000EA51                 db    0
.eh_frame:000000000000EA52                 db    0
.eh_frame:000000000000EA53                 db    0
.eh_frame:000000000000EA54                 db    0
.eh_frame:000000000000EA55                 db    0
.eh_frame:000000000000EA56                 db    0
.eh_frame:000000000000EA57                 db    0
.eh_frame:000000000000EA58                 db  18h
.eh_frame:000000000000EA59                 db    0
.eh_frame:000000000000EA5A                 db    0
.eh_frame:000000000000EA5B                 db    0
.eh_frame:000000000000EA5C                 db  64h ; d
.eh_frame:000000000000EA5D                 db  11h
.eh_frame:000000000000EA5E                 db    0
.eh_frame:000000000000EA5F                 db    0
.eh_frame:000000000000EA60                 db  90h
.eh_frame:000000000000EA61                 db 0B8h
.eh_frame:000000000000EA62                 db 0FFh
.eh_frame:000000000000EA63                 db 0FFh
.eh_frame:000000000000EA64                 db  78h ; x
.eh_frame:000000000000EA65                 db    0
.eh_frame:000000000000EA66                 db    0
.eh_frame:000000000000EA67                 db    0
.eh_frame:000000000000EA68                 db    0
.eh_frame:000000000000EA69                 db  44h ; D
.eh_frame:000000000000EA6A                 db  0Eh
.eh_frame:000000000000EA6B                 db  70h ; p
.eh_frame:000000000000EA6C                 db    2
.eh_frame:000000000000EA6D                 db  60h ; `
.eh_frame:000000000000EA6E                 db  0Ah
.eh_frame:000000000000EA6F                 db  0Eh
.eh_frame:000000000000EA70                 db    8
.eh_frame:000000000000EA71                 db  41h ; A
.eh_frame:000000000000EA72                 db  0Bh
.eh_frame:000000000000EA73                 db    0
.eh_frame:000000000000EA74                 db  28h ; (
.eh_frame:000000000000EA75                 db    0
.eh_frame:000000000000EA76                 db    0
.eh_frame:000000000000EA77                 db    0
.eh_frame:000000000000EA78                 db  80h
.eh_frame:000000000000EA79                 db  11h
.eh_frame:000000000000EA7A                 db    0
.eh_frame:000000000000EA7B                 db    0
.eh_frame:000000000000EA7C                 db 0F4h
.eh_frame:000000000000EA7D                 db 0B8h
.eh_frame:000000000000EA7E                 db 0FFh
.eh_frame:000000000000EA7F                 db 0FFh
.eh_frame:000000000000EA80                 db 0D5h
.eh_frame:000000000000EA81                 db    0
.eh_frame:000000000000EA82                 db    0
.eh_frame:000000000000EA83                 db    0
.eh_frame:000000000000EA84                 db    0
.eh_frame:000000000000EA85                 db  41h ; A
.eh_frame:000000000000EA86                 db  0Eh
.eh_frame:000000000000EA87                 db  10h
.eh_frame:000000000000EA88                 db  86h
.eh_frame:000000000000EA89                 db    2
.eh_frame:000000000000EA8A                 db  41h ; A
.eh_frame:000000000000EA8B                 db  0Eh
.eh_frame:000000000000EA8C                 db  18h
.eh_frame:000000000000EA8D                 db  83h
.eh_frame:000000000000EA8E                 db    3
.eh_frame:000000000000EA8F                 db  50h ; P
.eh_frame:000000000000EA90                 db  0Eh
.eh_frame:000000000000EA91                 db 0D0h
.eh_frame:000000000000EA92                 db    1
.eh_frame:000000000000EA93                 db    2
.eh_frame:000000000000EA94                 db 0ABh
.eh_frame:000000000000EA95                 db  0Ah
.eh_frame:000000000000EA96                 db  0Eh
.eh_frame:000000000000EA97                 db  18h
.eh_frame:000000000000EA98                 db  41h ; A
.eh_frame:000000000000EA99                 db  0Eh
.eh_frame:000000000000EA9A                 db  10h
.eh_frame:000000000000EA9B                 db  41h ; A
.eh_frame:000000000000EA9C                 db  0Eh
.eh_frame:000000000000EA9D                 db    8
.eh_frame:000000000000EA9E                 db  41h ; A
.eh_frame:000000000000EA9F                 db  0Bh
.eh_frame:000000000000EAA0                 db  1Ch
.eh_frame:000000000000EAA1                 db    0
.eh_frame:000000000000EAA2                 db    0
.eh_frame:000000000000EAA3                 db    0
.eh_frame:000000000000EAA4                 db 0ACh
.eh_frame:000000000000EAA5                 db  11h
.eh_frame:000000000000EAA6                 db    0
.eh_frame:000000000000EAA7                 db    0
.eh_frame:000000000000EAA8                 db 0A8h
.eh_frame:000000000000EAA9                 db 0B9h
.eh_frame:000000000000EAAA                 db 0FFh
.eh_frame:000000000000EAAB                 db 0FFh
.eh_frame:000000000000EAAC                 db  80h
.eh_frame:000000000000EAAD                 db    0
.eh_frame:000000000000EAAE                 db    0
.eh_frame:000000000000EAAF                 db    0
.eh_frame:000000000000EAB0                 db    0
.eh_frame:000000000000EAB1                 db  41h ; A
.eh_frame:000000000000EAB2                 db  0Eh
.eh_frame:000000000000EAB3                 db  10h
.eh_frame:000000000000EAB4                 db  83h
.eh_frame:000000000000EAB5                 db    2
.eh_frame:000000000000EAB6                 db    2
.eh_frame:000000000000EAB7                 db  7Ah ; z
.eh_frame:000000000000EAB8                 db  0Eh
.eh_frame:000000000000EAB9                 db    8
.eh_frame:000000000000EABA                 db    0
.eh_frame:000000000000EABB                 db    0
.eh_frame:000000000000EABC                 db    0
.eh_frame:000000000000EABD                 db    0
.eh_frame:000000000000EABE                 db    0
.eh_frame:000000000000EABF                 db    0
.eh_frame:000000000000EAC0                 db  18h
.eh_frame:000000000000EAC1                 db    0
.eh_frame:000000000000EAC2                 db    0
.eh_frame:000000000000EAC3                 db    0
.eh_frame:000000000000EAC4                 db 0CCh
.eh_frame:000000000000EAC5                 db  11h
.eh_frame:000000000000EAC6                 db    0
.eh_frame:000000000000EAC7                 db    0
.eh_frame:000000000000EAC8                 db    8
.eh_frame:000000000000EAC9                 db 0BAh
.eh_frame:000000000000EACA                 db 0FFh
.eh_frame:000000000000EACB                 db 0FFh
.eh_frame:000000000000EACC                 db  1Ah
.eh_frame:000000000000EACD                 db    0
.eh_frame:000000000000EACE                 db    0
.eh_frame:000000000000EACF                 db    0
.eh_frame:000000000000EAD0                 db    0
.eh_frame:000000000000EAD1                 db  41h ; A
.eh_frame:000000000000EAD2                 db  0Eh
.eh_frame:000000000000EAD3                 db  10h
.eh_frame:000000000000EAD4                 db  83h
.eh_frame:000000000000EAD5                 db    2
.eh_frame:000000000000EAD6                 db  53h ; S
.eh_frame:000000000000EAD7                 db  0Ah
.eh_frame:000000000000EAD8                 db  0Eh
.eh_frame:000000000000EAD9                 db    8
.eh_frame:000000000000EADA                 db  41h ; A
.eh_frame:000000000000EADB                 db  0Bh
.eh_frame:000000000000EADC                 db  10h
.eh_frame:000000000000EADD                 db    0
.eh_frame:000000000000EADE                 db    0
.eh_frame:000000000000EADF                 db    0
.eh_frame:000000000000EAE0                 db 0E8h
.eh_frame:000000000000EAE1                 db  11h
.eh_frame:000000000000EAE2                 db    0
.eh_frame:000000000000EAE3                 db    0
.eh_frame:000000000000EAE4                 db  0Ch
.eh_frame:000000000000EAE5                 db 0BAh
.eh_frame:000000000000EAE6                 db 0FFh
.eh_frame:000000000000EAE7                 db 0FFh
.eh_frame:000000000000EAE8                 db  24h ; $
.eh_frame:000000000000EAE9                 db    0
.eh_frame:000000000000EAEA                 db    0
.eh_frame:000000000000EAEB                 db    0
.eh_frame:000000000000EAEC                 db    0
.eh_frame:000000000000EAED                 db  5Fh ; _
.eh_frame:000000000000EAEE                 db  0Eh
.eh_frame:000000000000EAEF                 db  10h
.eh_frame:000000000000EAF0                 db  10h
.eh_frame:000000000000EAF1                 db    0
.eh_frame:000000000000EAF2                 db    0
.eh_frame:000000000000EAF3                 db    0
.eh_frame:000000000000EAF4                 db 0FCh
.eh_frame:000000000000EAF5                 db  11h
.eh_frame:000000000000EAF6                 db    0
.eh_frame:000000000000EAF7                 db    0
.eh_frame:000000000000EAF8                 db  28h ; (
.eh_frame:000000000000EAF9                 db 0BAh
.eh_frame:000000000000EAFA                 db 0FFh
.eh_frame:000000000000EAFB                 db 0FFh
.eh_frame:000000000000EAFC                 db    2
.eh_frame:000000000000EAFD                 db    0
.eh_frame:000000000000EAFE                 db    0
.eh_frame:000000000000EAFF                 db    0
.eh_frame:000000000000EB00                 db    0
.eh_frame:000000000000EB01                 db    0
.eh_frame:000000000000EB02                 db    0
.eh_frame:000000000000EB03                 db    0
.eh_frame:000000000000EB04                 db  20h
.eh_frame:000000000000EB05                 db    0
.eh_frame:000000000000EB06                 db    0
.eh_frame:000000000000EB07                 db    0
.eh_frame:000000000000EB08                 db  10h
.eh_frame:000000000000EB09                 db  12h
.eh_frame:000000000000EB0A                 db    0
.eh_frame:000000000000EB0B                 db    0
.eh_frame:000000000000EB0C                 db  24h ; $
.eh_frame:000000000000EB0D                 db 0BAh
.eh_frame:000000000000EB0E                 db 0FFh
.eh_frame:000000000000EB0F                 db 0FFh
.eh_frame:000000000000EB10                 db  36h ; 6
.eh_frame:000000000000EB11                 db    0
.eh_frame:000000000000EB12                 db    0
.eh_frame:000000000000EB13                 db    0
.eh_frame:000000000000EB14                 db    0
.eh_frame:000000000000EB15                 db  44h ; D
.eh_frame:000000000000EB16                 db  0Eh
.eh_frame:000000000000EB17                 db  10h
.eh_frame:000000000000EB18                 db  83h
.eh_frame:000000000000EB19                 db    2
.eh_frame:000000000000EB1A                 db  5Dh ; ]
.eh_frame:000000000000EB1B                 db  0Ah
.eh_frame:000000000000EB1C                 db  0Eh
.eh_frame:000000000000EB1D                 db    8
.eh_frame:000000000000EB1E                 db  47h ; G
.eh_frame:000000000000EB1F                 db  0Bh
.eh_frame:000000000000EB20                 db  48h ; H
.eh_frame:000000000000EB21                 db  0Ah
.eh_frame:000000000000EB22                 db  0Eh
.eh_frame:000000000000EB23                 db    8
.eh_frame:000000000000EB24                 db  41h ; A
.eh_frame:000000000000EB25                 db  0Bh
.eh_frame:000000000000EB26                 db    0
.eh_frame:000000000000EB27                 db    0
.eh_frame:000000000000EB28                 db  10h
.eh_frame:000000000000EB29                 db    0
.eh_frame:000000000000EB2A                 db    0
.eh_frame:000000000000EB2B                 db    0
.eh_frame:000000000000EB2C                 db  34h ; 4
.eh_frame:000000000000EB2D                 db  12h
.eh_frame:000000000000EB2E                 db    0
.eh_frame:000000000000EB2F                 db    0
.eh_frame:000000000000EB30                 db  40h ; @
.eh_frame:000000000000EB31                 db 0BAh
.eh_frame:000000000000EB32                 db 0FFh
.eh_frame:000000000000EB33                 db 0FFh
.eh_frame:000000000000EB34                 db  24h ; $
.eh_frame:000000000000EB35                 db    0
.eh_frame:000000000000EB36                 db    0
.eh_frame:000000000000EB37                 db    0
.eh_frame:000000000000EB38                 db    0
.eh_frame:000000000000EB39                 db  5Fh ; _
.eh_frame:000000000000EB3A                 db  0Eh
.eh_frame:000000000000EB3B                 db  10h
.eh_frame:000000000000EB3C                 db  14h
.eh_frame:000000000000EB3D                 db    0
.eh_frame:000000000000EB3E                 db    0
.eh_frame:000000000000EB3F                 db    0
.eh_frame:000000000000EB40                 db  48h ; H
.eh_frame:000000000000EB41                 db  12h
.eh_frame:000000000000EB42                 db    0
.eh_frame:000000000000EB43                 db    0
.eh_frame:000000000000EB44                 db  5Ch ; \
.eh_frame:000000000000EB45                 db 0BAh
.eh_frame:000000000000EB46                 db 0FFh
.eh_frame:000000000000EB47                 db 0FFh
.eh_frame:000000000000EB48                 db  82h
.eh_frame:000000000000EB49                 db    0
.eh_frame:000000000000EB4A                 db    0
.eh_frame:000000000000EB4B                 db    0
.eh_frame:000000000000EB4C                 db    0
.eh_frame:000000000000EB4D                 db    2
.eh_frame:000000000000EB4E                 db  5Fh ; _
.eh_frame:000000000000EB4F                 db  0Eh
.eh_frame:000000000000EB50                 db  10h
.eh_frame:000000000000EB51                 db  49h ; I
.eh_frame:000000000000EB52                 db  0Eh
.eh_frame:000000000000EB53                 db    8
.eh_frame:000000000000EB54                 db  14h
.eh_frame:000000000000EB55                 db    0
.eh_frame:000000000000EB56                 db    0
.eh_frame:000000000000EB57                 db    0
.eh_frame:000000000000EB58                 db  60h ; `
.eh_frame:000000000000EB59                 db  12h
.eh_frame:000000000000EB5A                 db    0
.eh_frame:000000000000EB5B                 db    0
.eh_frame:000000000000EB5C                 db 0D4h
.eh_frame:000000000000EB5D                 db 0BAh
.eh_frame:000000000000EB5E                 db 0FFh
.eh_frame:000000000000EB5F                 db 0FFh
.eh_frame:000000000000EB60                 db  4Ah ; J
.eh_frame:000000000000EB61                 db    0
.eh_frame:000000000000EB62                 db    0
.eh_frame:000000000000EB63                 db    0
.eh_frame:000000000000EB64                 db    0
.eh_frame:000000000000EB65                 db    2
.eh_frame:000000000000EB66                 db  45h ; E
.eh_frame:000000000000EB67                 db  0Eh
.eh_frame:000000000000EB68                 db  10h
.eh_frame:000000000000EB69                 db    0
.eh_frame:000000000000EB6A                 db    0
.eh_frame:000000000000EB6B                 db    0
.eh_frame:000000000000EB6C                 db  18h
.eh_frame:000000000000EB6D                 db    0
.eh_frame:000000000000EB6E                 db    0
.eh_frame:000000000000EB6F                 db    0
.eh_frame:000000000000EB70                 db  78h ; x
.eh_frame:000000000000EB71                 db  12h
.eh_frame:000000000000EB72                 db    0
.eh_frame:000000000000EB73                 db    0
.eh_frame:000000000000EB74                 db  0Ch
.eh_frame:000000000000EB75                 db 0BBh
.eh_frame:000000000000EB76                 db 0FFh
.eh_frame:000000000000EB77                 db 0FFh
.eh_frame:000000000000EB78                 db  17h
.eh_frame:000000000000EB79                 db    0
.eh_frame:000000000000EB7A                 db    0
.eh_frame:000000000000EB7B                 db    0
.eh_frame:000000000000EB7C                 db    0
.eh_frame:000000000000EB7D                 db  41h ; A
.eh_frame:000000000000EB7E                 db  0Eh
.eh_frame:000000000000EB7F                 db  10h
.eh_frame:000000000000EB80                 db  83h
.eh_frame:000000000000EB81                 db    2
.eh_frame:000000000000EB82                 db  51h ; Q
.eh_frame:000000000000EB83                 db  0Eh
.eh_frame:000000000000EB84                 db    8
.eh_frame:000000000000EB85                 db    0
.eh_frame:000000000000EB86                 db    0
.eh_frame:000000000000EB87                 db    0
.eh_frame:000000000000EB88                 db  18h
.eh_frame:000000000000EB89                 db    0
.eh_frame:000000000000EB8A                 db    0
.eh_frame:000000000000EB8B                 db    0
.eh_frame:000000000000EB8C                 db  94h
.eh_frame:000000000000EB8D                 db  12h
.eh_frame:000000000000EB8E                 db    0
.eh_frame:000000000000EB8F                 db    0
.eh_frame:000000000000EB90                 db  10h
.eh_frame:000000000000EB91                 db 0BBh
.eh_frame:000000000000EB92                 db 0FFh
.eh_frame:000000000000EB93                 db 0FFh
.eh_frame:000000000000EB94                 db  2Eh ; .
.eh_frame:000000000000EB95                 db    0
.eh_frame:000000000000EB96                 db    0
.eh_frame:000000000000EB97                 db    0
.eh_frame:000000000000EB98                 db    0
.eh_frame:000000000000EB99                 db  47h ; G
.eh_frame:000000000000EB9A                 db  0Eh
.eh_frame:000000000000EB9B                 db  10h
.eh_frame:000000000000EB9C                 db  61h ; a
.eh_frame:000000000000EB9D                 db  0Ah
.eh_frame:000000000000EB9E                 db  0Eh
.eh_frame:000000000000EB9F                 db    8
.eh_frame:000000000000EBA0                 db  41h ; A
.eh_frame:000000000000EBA1                 db  0Bh
.eh_frame:000000000000EBA2                 db    0
.eh_frame:000000000000EBA3                 db    0
.eh_frame:000000000000EBA4                 db  24h ; $
.eh_frame:000000000000EBA5                 db    0
.eh_frame:000000000000EBA6                 db    0
.eh_frame:000000000000EBA7                 db    0
.eh_frame:000000000000EBA8                 db 0B0h
.eh_frame:000000000000EBA9                 db  12h
.eh_frame:000000000000EBAA                 db    0
.eh_frame:000000000000EBAB                 db    0
.eh_frame:000000000000EBAC                 db  24h ; $
.eh_frame:000000000000EBAD                 db 0BBh
.eh_frame:000000000000EBAE                 db 0FFh
.eh_frame:000000000000EBAF                 db 0FFh
.eh_frame:000000000000EBB0                 db  28h ; (
.eh_frame:000000000000EBB1                 db    0
.eh_frame:000000000000EBB2                 db    0
.eh_frame:000000000000EBB3                 db    0
.eh_frame:000000000000EBB4                 db    0
.eh_frame:000000000000EBB5                 db  41h ; A
.eh_frame:000000000000EBB6                 db  0Eh
.eh_frame:000000000000EBB7                 db  10h
.eh_frame:000000000000EBB8                 db  86h
.eh_frame:000000000000EBB9                 db    2
.eh_frame:000000000000EBBA                 db  41h ; A
.eh_frame:000000000000EBBB                 db  0Eh
.eh_frame:000000000000EBBC                 db  18h
.eh_frame:000000000000EBBD                 db  83h
.eh_frame:000000000000EBBE                 db    3
.eh_frame:000000000000EBBF                 db  4Dh ; M
.eh_frame:000000000000EBC0                 db  0Eh
.eh_frame:000000000000EBC1                 db  20h
.eh_frame:000000000000EBC2                 db  49h ; I
.eh_frame:000000000000EBC3                 db  0Eh
.eh_frame:000000000000EBC4                 db  18h
.eh_frame:000000000000EBC5                 db  47h ; G
.eh_frame:000000000000EBC6                 db  0Eh
.eh_frame:000000000000EBC7                 db  10h
.eh_frame:000000000000EBC8                 db  41h ; A
.eh_frame:000000000000EBC9                 db  0Eh
.eh_frame:000000000000EBCA                 db    8
.eh_frame:000000000000EBCB                 db    0
.eh_frame:000000000000EBCC                 db  18h
.eh_frame:000000000000EBCD                 db    0
.eh_frame:000000000000EBCE                 db    0
.eh_frame:000000000000EBCF                 db    0
.eh_frame:000000000000EBD0                 db 0D8h
.eh_frame:000000000000EBD1                 db  12h
.eh_frame:000000000000EBD2                 db    0
.eh_frame:000000000000EBD3                 db    0
.eh_frame:000000000000EBD4                 db  2Ch ; ,
.eh_frame:000000000000EBD5                 db 0BBh
.eh_frame:000000000000EBD6                 db 0FFh
.eh_frame:000000000000EBD7                 db 0FFh
.eh_frame:000000000000EBD8                 db  13h
.eh_frame:000000000000EBD9                 db    0
.eh_frame:000000000000EBDA                 db    0
.eh_frame:000000000000EBDB                 db    0
.eh_frame:000000000000EBDC                 db    0
.eh_frame:000000000000EBDD                 db  41h ; A
.eh_frame:000000000000EBDE                 db  0Eh
.eh_frame:000000000000EBDF                 db  10h
.eh_frame:000000000000EBE0                 db  83h
.eh_frame:000000000000EBE1                 db    2
.eh_frame:000000000000EBE2                 db  50h ; P
.eh_frame:000000000000EBE3                 db  0Eh
.eh_frame:000000000000EBE4                 db    8
.eh_frame:000000000000EBE5                 db    0
.eh_frame:000000000000EBE6                 db    0
.eh_frame:000000000000EBE7                 db    0
.eh_frame:000000000000EBE8                 db  14h
.eh_frame:000000000000EBE9                 db    0
.eh_frame:000000000000EBEA                 db    0
.eh_frame:000000000000EBEB                 db    0
.eh_frame:000000000000EBEC                 db 0F4h
.eh_frame:000000000000EBED                 db  12h
.eh_frame:000000000000EBEE                 db    0
.eh_frame:000000000000EBEF                 db    0
.eh_frame:000000000000EBF0                 db  30h ; 0
.eh_frame:000000000000EBF1                 db 0BBh
.eh_frame:000000000000EBF2                 db 0FFh
.eh_frame:000000000000EBF3                 db 0FFh
.eh_frame:000000000000EBF4                 db  35h ; 5
.eh_frame:000000000000EBF5                 db    0
.eh_frame:000000000000EBF6                 db    0
.eh_frame:000000000000EBF7                 db    0
.eh_frame:000000000000EBF8                 db    0
.eh_frame:000000000000EBF9                 db  4Bh ; K
.eh_frame:000000000000EBFA                 db  0Eh
.eh_frame:000000000000EBFB                 db  10h
.eh_frame:000000000000EBFC                 db    0
.eh_frame:000000000000EBFD                 db    0
.eh_frame:000000000000EBFE                 db    0
.eh_frame:000000000000EBFF                 db    0
.eh_frame:000000000000EC00                 db  48h ; H
.eh_frame:000000000000EC01                 db    0
.eh_frame:000000000000EC02                 db    0
.eh_frame:000000000000EC03                 db    0
.eh_frame:000000000000EC04                 db  0Ch
.eh_frame:000000000000EC05                 db  13h
.eh_frame:000000000000EC06                 db    0
.eh_frame:000000000000EC07                 db    0
.eh_frame:000000000000EC08                 db  58h ; X
.eh_frame:000000000000EC09                 db 0BBh
.eh_frame:000000000000EC0A                 db 0FFh
.eh_frame:000000000000EC0B                 db 0FFh
.eh_frame:000000000000EC0C                 db    0
.eh_frame:000000000000EC0D                 db    1
.eh_frame:000000000000EC0E                 db    0
.eh_frame:000000000000EC0F                 db    0
.eh_frame:000000000000EC10                 db    0
.eh_frame:000000000000EC11                 db  42h ; B
.eh_frame:000000000000EC12                 db  0Eh
.eh_frame:000000000000EC13                 db  10h
.eh_frame:000000000000EC14                 db  8Fh
.eh_frame:000000000000EC15                 db    2
.eh_frame:000000000000EC16                 db  42h ; B
.eh_frame:000000000000EC17                 db  0Eh
.eh_frame:000000000000EC18                 db  18h
.eh_frame:000000000000EC19                 db  8Eh
.eh_frame:000000000000EC1A                 db    3
.eh_frame:000000000000EC1B                 db  45h ; E
.eh_frame:000000000000EC1C                 db  0Eh
.eh_frame:000000000000EC1D                 db  20h
.eh_frame:000000000000EC1E                 db  8Dh
.eh_frame:000000000000EC1F                 db    4
.eh_frame:000000000000EC20                 db  42h ; B
.eh_frame:000000000000EC21                 db  0Eh
.eh_frame:000000000000EC22                 db  28h ; (
.eh_frame:000000000000EC23                 db  8Ch
.eh_frame:000000000000EC24                 db    5
.eh_frame:000000000000EC25                 db  44h ; D
.eh_frame:000000000000EC26                 db  0Eh
.eh_frame:000000000000EC27                 db  30h ; 0
.eh_frame:000000000000EC28                 db  86h
.eh_frame:000000000000EC29                 db    6
.eh_frame:000000000000EC2A                 db  41h ; A
.eh_frame:000000000000EC2B                 db  0Eh
.eh_frame:000000000000EC2C                 db  38h ; 8
.eh_frame:000000000000EC2D                 db  83h
.eh_frame:000000000000EC2E                 db    7
.eh_frame:000000000000EC2F                 db  4Eh ; N
.eh_frame:000000000000EC30                 db  0Eh
.eh_frame:000000000000EC31                 db  50h ; P
.eh_frame:000000000000EC32                 db    2
.eh_frame:000000000000EC33                 db  9Dh
.eh_frame:000000000000EC34                 db  0Ah
.eh_frame:000000000000EC35                 db  0Eh
.eh_frame:000000000000EC36                 db  38h ; 8
.eh_frame:000000000000EC37                 db  41h ; A
.eh_frame:000000000000EC38                 db  0Eh
.eh_frame:000000000000EC39                 db  30h ; 0
.eh_frame:000000000000EC3A                 db  41h ; A
.eh_frame:000000000000EC3B                 db  0Eh
.eh_frame:000000000000EC3C                 db  28h ; (
.eh_frame:000000000000EC3D                 db  42h ; B
.eh_frame:000000000000EC3E                 db  0Eh
.eh_frame:000000000000EC3F                 db  20h
.eh_frame:000000000000EC40                 db  42h ; B
.eh_frame:000000000000EC41                 db  0Eh
.eh_frame:000000000000EC42                 db  18h
.eh_frame:000000000000EC43                 db  42h ; B
.eh_frame:000000000000EC44                 db  0Eh
.eh_frame:000000000000EC45                 db  10h
.eh_frame:000000000000EC46                 db  42h ; B
.eh_frame:000000000000EC47                 db  0Eh
.eh_frame:000000000000EC48                 db    8
.eh_frame:000000000000EC49                 db  4Bh ; K
.eh_frame:000000000000EC4A                 db  0Bh
.eh_frame:000000000000EC4B                 db    0
.eh_frame:000000000000EC4C                 db  18h
.eh_frame:000000000000EC4D                 db    0
.eh_frame:000000000000EC4E                 db    0
.eh_frame:000000000000EC4F                 db    0
.eh_frame:000000000000EC50                 db  58h ; X
.eh_frame:000000000000EC51                 db  13h
.eh_frame:000000000000EC52                 db    0
.eh_frame:000000000000EC53                 db    0
.eh_frame:000000000000EC54                 db  0Ch
.eh_frame:000000000000EC55                 db 0BCh
.eh_frame:000000000000EC56                 db 0FFh
.eh_frame:000000000000EC57                 db 0FFh
.eh_frame:000000000000EC58                 db  21h ; !
.eh_frame:000000000000EC59                 db    0
.eh_frame:000000000000EC5A                 db    0
.eh_frame:000000000000EC5B                 db    0
.eh_frame:000000000000EC5C                 db    0
.eh_frame:000000000000EC5D                 db  44h ; D
.eh_frame:000000000000EC5E                 db  0Eh
.eh_frame:000000000000EC5F                 db  18h
.eh_frame:000000000000EC60                 db  42h ; B
.eh_frame:000000000000EC61                 db  0Eh
.eh_frame:000000000000EC62                 db  20h
.eh_frame:000000000000EC63                 db  5Ah ; Z
.eh_frame:000000000000EC64                 db  0Eh
.eh_frame:000000000000EC65                 db    8
.eh_frame:000000000000EC66                 db    0
.eh_frame:000000000000EC67                 db    0
.eh_frame:000000000000EC68                 db  2Ch ; ,
.eh_frame:000000000000EC69                 db    0
.eh_frame:000000000000EC6A                 db    0
.eh_frame:000000000000EC6B                 db    0
.eh_frame:000000000000EC6C                 db  74h ; t
.eh_frame:000000000000EC6D                 db  13h
.eh_frame:000000000000EC6E                 db    0
.eh_frame:000000000000EC6F                 db    0
.eh_frame:000000000000EC70                 db  20h
.eh_frame:000000000000EC71                 db 0BCh
.eh_frame:000000000000EC72                 db 0FFh
.eh_frame:000000000000EC73                 db 0FFh
.eh_frame:000000000000EC74                 db  7Ch ; |
.eh_frame:000000000000EC75                 db    0
.eh_frame:000000000000EC76                 db    0
.eh_frame:000000000000EC77                 db    0
.eh_frame:000000000000EC78                 db    0
.eh_frame:000000000000EC79                 db  41h ; A
.eh_frame:000000000000EC7A                 db  0Eh
.eh_frame:000000000000EC7B                 db  10h
.eh_frame:000000000000EC7C                 db  86h
.eh_frame:000000000000EC7D                 db    2
.eh_frame:000000000000EC7E                 db  41h ; A
.eh_frame:000000000000EC7F                 db  0Eh
.eh_frame:000000000000EC80                 db  18h
.eh_frame:000000000000EC81                 db  83h
.eh_frame:000000000000EC82                 db    3
.eh_frame:000000000000EC83                 db  44h ; D
.eh_frame:000000000000EC84                 db  0Eh
.eh_frame:000000000000EC85                 db  40h ; @
.eh_frame:000000000000EC86                 db    2
.eh_frame:000000000000EC87                 db  62h ; b
.eh_frame:000000000000EC88                 db  0Ah
.eh_frame:000000000000EC89                 db  0Eh
.eh_frame:000000000000EC8A                 db  18h
.eh_frame:000000000000EC8B                 db  41h ; A
.eh_frame:000000000000EC8C                 db  0Eh
.eh_frame:000000000000EC8D                 db  10h
.eh_frame:000000000000EC8E                 db  41h ; A
.eh_frame:000000000000EC8F                 db  0Eh
.eh_frame:000000000000EC90                 db    8
.eh_frame:000000000000EC91                 db  46h ; F
.eh_frame:000000000000EC92                 db  0Bh
.eh_frame:000000000000EC93                 db    0
.eh_frame:000000000000EC94                 db    0
.eh_frame:000000000000EC95                 db    0
.eh_frame:000000000000EC96                 db    0
.eh_frame:000000000000EC97                 db    0
.eh_frame:000000000000EC98                 db  44h ; D
.eh_frame:000000000000EC99                 db    0
.eh_frame:000000000000EC9A                 db    0
.eh_frame:000000000000EC9B                 db    0
.eh_frame:000000000000EC9C                 db 0A4h
.eh_frame:000000000000EC9D                 db  13h
.eh_frame:000000000000EC9E                 db    0
.eh_frame:000000000000EC9F                 db    0
.eh_frame:000000000000ECA0                 db  70h ; p
.eh_frame:000000000000ECA1                 db 0BCh
.eh_frame:000000000000ECA2                 db 0FFh
.eh_frame:000000000000ECA3                 db 0FFh
.eh_frame:000000000000ECA4                 db 0C1h
.eh_frame:000000000000ECA5                 db    0
.eh_frame:000000000000ECA6                 db    0
.eh_frame:000000000000ECA7                 db    0
.eh_frame:000000000000ECA8                 db    0
.eh_frame:000000000000ECA9                 db  42h ; B
.eh_frame:000000000000ECAA                 db  0Eh
.eh_frame:000000000000ECAB                 db  10h
.eh_frame:000000000000ECAC                 db  8Eh
.eh_frame:000000000000ECAD                 db    2
.eh_frame:000000000000ECAE                 db  42h ; B
.eh_frame:000000000000ECAF                 db  0Eh
.eh_frame:000000000000ECB0                 db  18h
.eh_frame:000000000000ECB1                 db  8Dh
.eh_frame:000000000000ECB2                 db    3
.eh_frame:000000000000ECB3                 db  45h ; E
.eh_frame:000000000000ECB4                 db  0Eh
.eh_frame:000000000000ECB5                 db  20h
.eh_frame:000000000000ECB6                 db  8Ch
.eh_frame:000000000000ECB7                 db    4
.eh_frame:000000000000ECB8                 db  41h ; A
.eh_frame:000000000000ECB9                 db  0Eh
.eh_frame:000000000000ECBA                 db  28h ; (
.eh_frame:000000000000ECBB                 db  86h
.eh_frame:000000000000ECBC                 db    5
.eh_frame:000000000000ECBD                 db  44h ; D
.eh_frame:000000000000ECBE                 db  0Eh
.eh_frame:000000000000ECBF                 db  30h ; 0
.eh_frame:000000000000ECC0                 db  83h
.eh_frame:000000000000ECC1                 db    6
.eh_frame:000000000000ECC2                 db  4Ah ; J
.eh_frame:000000000000ECC3                 db  0Eh
.eh_frame:000000000000ECC4                 db  40h ; @
.eh_frame:000000000000ECC5                 db    2
.eh_frame:000000000000ECC6                 db  70h ; p
.eh_frame:000000000000ECC7                 db  0Ah
.eh_frame:000000000000ECC8                 db  0Eh
.eh_frame:000000000000ECC9                 db  30h ; 0
.eh_frame:000000000000ECCA                 db  41h ; A
.eh_frame:000000000000ECCB                 db  0Eh
.eh_frame:000000000000ECCC                 db  28h ; (
.eh_frame:000000000000ECCD                 db  41h ; A
.eh_frame:000000000000ECCE                 db  0Eh
.eh_frame:000000000000ECCF                 db  20h
.eh_frame:000000000000ECD0                 db  42h ; B
.eh_frame:000000000000ECD1                 db  0Eh
.eh_frame:000000000000ECD2                 db  18h
.eh_frame:000000000000ECD3                 db  42h ; B
.eh_frame:000000000000ECD4                 db  0Eh
.eh_frame:000000000000ECD5                 db  10h
.eh_frame:000000000000ECD6                 db  42h ; B
.eh_frame:000000000000ECD7                 db  0Eh
.eh_frame:000000000000ECD8                 db    8
.eh_frame:000000000000ECD9                 db  48h ; H
.eh_frame:000000000000ECDA                 db  0Bh
.eh_frame:000000000000ECDB                 db    0
.eh_frame:000000000000ECDC                 db    0
.eh_frame:000000000000ECDD                 db    0
.eh_frame:000000000000ECDE                 db    0
.eh_frame:000000000000ECDF                 db    0
.eh_frame:000000000000ECE0                 db  4Ch ; L
.eh_frame:000000000000ECE1                 db    0
.eh_frame:000000000000ECE2                 db    0
.eh_frame:000000000000ECE3                 db    0
.eh_frame:000000000000ECE4                 db 0ECh
.eh_frame:000000000000ECE5                 db  13h
.eh_frame:000000000000ECE6                 db    0
.eh_frame:000000000000ECE7                 db    0
.eh_frame:000000000000ECE8                 db 0F8h
.eh_frame:000000000000ECE9                 db 0BCh
.eh_frame:000000000000ECEA                 db 0FFh
.eh_frame:000000000000ECEB                 db 0FFh
.eh_frame:000000000000ECEC                 db  1Ch
.eh_frame:000000000000ECED                 db    4
.eh_frame:000000000000ECEE                 db    0
.eh_frame:000000000000ECEF                 db    0
.eh_frame:000000000000ECF0                 db    0
.eh_frame:000000000000ECF1                 db  42h ; B
.eh_frame:000000000000ECF2                 db  0Eh
.eh_frame:000000000000ECF3                 db  10h
.eh_frame:000000000000ECF4                 db  8Fh
.eh_frame:000000000000ECF5                 db    2
.eh_frame:000000000000ECF6                 db  42h ; B
.eh_frame:000000000000ECF7                 db  0Eh
.eh_frame:000000000000ECF8                 db  18h
.eh_frame:000000000000ECF9                 db  8Eh
.eh_frame:000000000000ECFA                 db    3
.eh_frame:000000000000ECFB                 db  42h ; B
.eh_frame:000000000000ECFC                 db  0Eh
.eh_frame:000000000000ECFD                 db  20h
.eh_frame:000000000000ECFE                 db  8Dh
.eh_frame:000000000000ECFF                 db    4
.eh_frame:000000000000ED00                 db  42h ; B
.eh_frame:000000000000ED01                 db  0Eh
.eh_frame:000000000000ED02                 db  28h ; (
.eh_frame:000000000000ED03                 db  8Ch
.eh_frame:000000000000ED04                 db    5
.eh_frame:000000000000ED05                 db  41h ; A
.eh_frame:000000000000ED06                 db  0Eh
.eh_frame:000000000000ED07                 db  30h ; 0
.eh_frame:000000000000ED08                 db  86h
.eh_frame:000000000000ED09                 db    6
.eh_frame:000000000000ED0A                 db  41h ; A
.eh_frame:000000000000ED0B                 db  0Eh
.eh_frame:000000000000ED0C                 db  38h ; 8
.eh_frame:000000000000ED0D                 db  83h
.eh_frame:000000000000ED0E                 db    7
.eh_frame:000000000000ED0F                 db  44h ; D
.eh_frame:000000000000ED10                 db  0Eh
.eh_frame:000000000000ED11                 db  60h ; `
.eh_frame:000000000000ED12                 db    2
.eh_frame:000000000000ED13                 db 0E9h
.eh_frame:000000000000ED14                 db  0Ah
.eh_frame:000000000000ED15                 db  0Eh
.eh_frame:000000000000ED16                 db  38h ; 8
.eh_frame:000000000000ED17                 db  41h ; A
.eh_frame:000000000000ED18                 db  0Eh
.eh_frame:000000000000ED19                 db  30h ; 0
.eh_frame:000000000000ED1A                 db  41h ; A
.eh_frame:000000000000ED1B                 db  0Eh
.eh_frame:000000000000ED1C                 db  28h ; (
.eh_frame:000000000000ED1D                 db  42h ; B
.eh_frame:000000000000ED1E                 db  0Eh
.eh_frame:000000000000ED1F                 db  20h
.eh_frame:000000000000ED20                 db  42h ; B
.eh_frame:000000000000ED21                 db  0Eh
.eh_frame:000000000000ED22                 db  18h
.eh_frame:000000000000ED23                 db  42h ; B
.eh_frame:000000000000ED24                 db  0Eh
.eh_frame:000000000000ED25                 db  10h
.eh_frame:000000000000ED26                 db  42h ; B
.eh_frame:000000000000ED27                 db  0Eh
.eh_frame:000000000000ED28                 db    8
.eh_frame:000000000000ED29                 db  47h ; G
.eh_frame:000000000000ED2A                 db  0Bh
.eh_frame:000000000000ED2B                 db    0
.eh_frame:000000000000ED2C                 db    0
.eh_frame:000000000000ED2D                 db    0
.eh_frame:000000000000ED2E                 db    0
.eh_frame:000000000000ED2F                 db    0
.eh_frame:000000000000ED30                 db  34h ; 4
.eh_frame:000000000000ED31                 db    0
.eh_frame:000000000000ED32                 db    0
.eh_frame:000000000000ED33                 db    0
.eh_frame:000000000000ED34                 db  3Ch ; <
.eh_frame:000000000000ED35                 db  14h
.eh_frame:000000000000ED36                 db    0
.eh_frame:000000000000ED37                 db    0
.eh_frame:000000000000ED38                 db 0C8h
.eh_frame:000000000000ED39                 db 0C0h
.eh_frame:000000000000ED3A                 db 0FFh
.eh_frame:000000000000ED3B                 db 0FFh
.eh_frame:000000000000ED3C                 db  7Eh ; ~
.eh_frame:000000000000ED3D                 db    2
.eh_frame:000000000000ED3E                 db    0
.eh_frame:000000000000ED3F                 db    0
.eh_frame:000000000000ED40                 db    0
.eh_frame:000000000000ED41                 db  42h ; B
.eh_frame:000000000000ED42                 db  0Eh
.eh_frame:000000000000ED43                 db  10h
.eh_frame:000000000000ED44                 db  8Ch
.eh_frame:000000000000ED45                 db    2
.eh_frame:000000000000ED46                 db  41h ; A
.eh_frame:000000000000ED47                 db  0Eh
.eh_frame:000000000000ED48                 db  18h
.eh_frame:000000000000ED49                 db  86h
.eh_frame:000000000000ED4A                 db    3
.eh_frame:000000000000ED4B                 db  43h ; C
.eh_frame:000000000000ED4C                 db  0Eh
.eh_frame:000000000000ED4D                 db  20h
.eh_frame:000000000000ED4E                 db  83h
.eh_frame:000000000000ED4F                 db    4
.eh_frame:000000000000ED50                 db  44h ; D
.eh_frame:000000000000ED51                 db  0Eh
.eh_frame:000000000000ED52                 db  70h ; p
.eh_frame:000000000000ED53                 db    2
.eh_frame:000000000000ED54                 db 0F0h
.eh_frame:000000000000ED55                 db  0Ah
.eh_frame:000000000000ED56                 db  0Eh
.eh_frame:000000000000ED57                 db  20h
.eh_frame:000000000000ED58                 db  41h ; A
.eh_frame:000000000000ED59                 db  0Eh
.eh_frame:000000000000ED5A                 db  18h
.eh_frame:000000000000ED5B                 db  41h ; A
.eh_frame:000000000000ED5C                 db  0Eh
.eh_frame:000000000000ED5D                 db  10h
.eh_frame:000000000000ED5E                 db  42h ; B
.eh_frame:000000000000ED5F                 db  0Eh
.eh_frame:000000000000ED60                 db    8
.eh_frame:000000000000ED61                 db  42h ; B
.eh_frame:000000000000ED62                 db  0Bh
.eh_frame:000000000000ED63                 db    0
.eh_frame:000000000000ED64                 db    0
.eh_frame:000000000000ED65                 db    0
.eh_frame:000000000000ED66                 db    0
.eh_frame:000000000000ED67                 db    0
.eh_frame:000000000000ED68                 db  3Ch ; <
.eh_frame:000000000000ED69                 db    0
.eh_frame:000000000000ED6A                 db    0
.eh_frame:000000000000ED6B                 db    0
.eh_frame:000000000000ED6C                 db  74h ; t
.eh_frame:000000000000ED6D                 db  14h
.eh_frame:000000000000ED6E                 db    0
.eh_frame:000000000000ED6F                 db    0
.eh_frame:000000000000ED70                 db  10h
.eh_frame:000000000000ED71                 db 0C3h
.eh_frame:000000000000ED72                 db 0FFh
.eh_frame:000000000000ED73                 db 0FFh
.eh_frame:000000000000ED74                 db  83h
.eh_frame:000000000000ED75                 db    0
.eh_frame:000000000000ED76                 db    0
.eh_frame:000000000000ED77                 db    0
.eh_frame:000000000000ED78                 db    0
.eh_frame:000000000000ED79                 db  42h ; B
.eh_frame:000000000000ED7A                 db  0Eh
.eh_frame:000000000000ED7B                 db  10h
.eh_frame:000000000000ED7C                 db  8Dh
.eh_frame:000000000000ED7D                 db    2
.eh_frame:000000000000ED7E                 db  42h ; B
.eh_frame:000000000000ED7F                 db  0Eh
.eh_frame:000000000000ED80                 db  18h
.eh_frame:000000000000ED81                 db  8Ch
.eh_frame:000000000000ED82                 db    3
.eh_frame:000000000000ED83                 db  44h ; D
.eh_frame:000000000000ED84                 db  0Eh
.eh_frame:000000000000ED85                 db  20h
.eh_frame:000000000000ED86                 db  86h
.eh_frame:000000000000ED87                 db    4
.eh_frame:000000000000ED88                 db  41h ; A
.eh_frame:000000000000ED89                 db  0Eh
.eh_frame:000000000000ED8A                 db  28h ; (
.eh_frame:000000000000ED8B                 db  83h
.eh_frame:000000000000ED8C                 db    5
.eh_frame:000000000000ED8D                 db  4Ah ; J
.eh_frame:000000000000ED8E                 db  0Eh
.eh_frame:000000000000ED8F                 db  40h ; @
.eh_frame:000000000000ED90                 db    2
.eh_frame:000000000000ED91                 db  64h ; d
.eh_frame:000000000000ED92                 db  0Ah
.eh_frame:000000000000ED93                 db  0Eh
.eh_frame:000000000000ED94                 db  28h ; (
.eh_frame:000000000000ED95                 db  41h ; A
.eh_frame:000000000000ED96                 db  0Eh
.eh_frame:000000000000ED97                 db  20h
.eh_frame:000000000000ED98                 db  41h ; A
.eh_frame:000000000000ED99                 db  0Eh
.eh_frame:000000000000ED9A                 db  18h
.eh_frame:000000000000ED9B                 db  42h ; B
.eh_frame:000000000000ED9C                 db  0Eh
.eh_frame:000000000000ED9D                 db  10h
.eh_frame:000000000000ED9E                 db  42h ; B
.eh_frame:000000000000ED9F                 db  0Eh
.eh_frame:000000000000EDA0                 db    8
.eh_frame:000000000000EDA1                 db  41h ; A
.eh_frame:000000000000EDA2                 db  0Bh
.eh_frame:000000000000EDA3                 db    0
.eh_frame:000000000000EDA4                 db    0
.eh_frame:000000000000EDA5                 db    0
.eh_frame:000000000000EDA6                 db    0
.eh_frame:000000000000EDA7                 db    0
.eh_frame:000000000000EDA8                 db  34h ; 4
.eh_frame:000000000000EDA9                 db    0
.eh_frame:000000000000EDAA                 db    0
.eh_frame:000000000000EDAB                 db    0
.eh_frame:000000000000EDAC                 db 0B4h
.eh_frame:000000000000EDAD                 db  14h
.eh_frame:000000000000EDAE                 db    0
.eh_frame:000000000000EDAF                 db    0
.eh_frame:000000000000EDB0                 db  60h ; `
.eh_frame:000000000000EDB1                 db 0C3h
.eh_frame:000000000000EDB2                 db 0FFh
.eh_frame:000000000000EDB3                 db 0FFh
.eh_frame:000000000000EDB4                 db 0C7h
.eh_frame:000000000000EDB5                 db    0
.eh_frame:000000000000EDB6                 db    0
.eh_frame:000000000000EDB7                 db    0
.eh_frame:000000000000EDB8                 db    0
.eh_frame:000000000000EDB9                 db  42h ; B
.eh_frame:000000000000EDBA                 db  0Eh
.eh_frame:000000000000EDBB                 db  10h
.eh_frame:000000000000EDBC                 db  8Ch
.eh_frame:000000000000EDBD                 db    2
.eh_frame:000000000000EDBE                 db  41h ; A
.eh_frame:000000000000EDBF                 db  0Eh
.eh_frame:000000000000EDC0                 db  18h
.eh_frame:000000000000EDC1                 db  86h
.eh_frame:000000000000EDC2                 db    3
.eh_frame:000000000000EDC3                 db  41h ; A
.eh_frame:000000000000EDC4                 db  0Eh
.eh_frame:000000000000EDC5                 db  20h
.eh_frame:000000000000EDC6                 db  83h
.eh_frame:000000000000EDC7                 db    4
.eh_frame:000000000000EDC8                 db  44h ; D
.eh_frame:000000000000EDC9                 db  0Eh
.eh_frame:000000000000EDCA                 db  40h ; @
.eh_frame:000000000000EDCB                 db    2
.eh_frame:000000000000EDCC                 db 0A3h
.eh_frame:000000000000EDCD                 db  0Ah
.eh_frame:000000000000EDCE                 db  0Eh
.eh_frame:000000000000EDCF                 db  20h
.eh_frame:000000000000EDD0                 db  41h ; A
.eh_frame:000000000000EDD1                 db  0Eh
.eh_frame:000000000000EDD2                 db  18h
.eh_frame:000000000000EDD3                 db  41h ; A
.eh_frame:000000000000EDD4                 db  0Eh
.eh_frame:000000000000EDD5                 db  10h
.eh_frame:000000000000EDD6                 db  42h ; B
.eh_frame:000000000000EDD7                 db  0Eh
.eh_frame:000000000000EDD8                 db    8
.eh_frame:000000000000EDD9                 db  41h ; A
.eh_frame:000000000000EDDA                 db  0Bh
.eh_frame:000000000000EDDB                 db    0
.eh_frame:000000000000EDDC                 db    0
.eh_frame:000000000000EDDD                 db    0
.eh_frame:000000000000EDDE                 db    0
.eh_frame:000000000000EDDF                 db    0
.eh_frame:000000000000EDE0                 db  34h ; 4
.eh_frame:000000000000EDE1                 db    0
.eh_frame:000000000000EDE2                 db    0
.eh_frame:000000000000EDE3                 db    0
.eh_frame:000000000000EDE4                 db 0ECh
.eh_frame:000000000000EDE5                 db  14h
.eh_frame:000000000000EDE6                 db    0
.eh_frame:000000000000EDE7                 db    0
.eh_frame:000000000000EDE8                 db 0F8h
.eh_frame:000000000000EDE9                 db 0C3h
.eh_frame:000000000000EDEA                 db 0FFh
.eh_frame:000000000000EDEB                 db 0FFh
.eh_frame:000000000000EDEC                 db  6Ch ; l
.eh_frame:000000000000EDED                 db    0
.eh_frame:000000000000EDEE                 db    0
.eh_frame:000000000000EDEF                 db    0
.eh_frame:000000000000EDF0                 db    0
.eh_frame:000000000000EDF1                 db  41h ; A
.eh_frame:000000000000EDF2                 db  0Eh
.eh_frame:000000000000EDF3                 db  10h
.eh_frame:000000000000EDF4                 db  86h
.eh_frame:000000000000EDF5                 db    2
.eh_frame:000000000000EDF6                 db  41h ; A
.eh_frame:000000000000EDF7                 db  0Eh
.eh_frame:000000000000EDF8                 db  18h
.eh_frame:000000000000EDF9                 db  83h
.eh_frame:000000000000EDFA                 db    3
.eh_frame:000000000000EDFB                 db  4Ah ; J
.eh_frame:000000000000EDFC                 db  0Eh
.eh_frame:000000000000EDFD                 db  20h
.eh_frame:000000000000EDFE                 db  5Ch ; \
.eh_frame:000000000000EDFF                 db  0Ah
.eh_frame:000000000000EE00                 db  0Eh
.eh_frame:000000000000EE01                 db  18h
.eh_frame:000000000000EE02                 db  47h ; G
.eh_frame:000000000000EE03                 db  0Eh
.eh_frame:000000000000EE04                 db  10h
.eh_frame:000000000000EE05                 db  41h ; A
.eh_frame:000000000000EE06                 db  0Eh
.eh_frame:000000000000EE07                 db    8
.eh_frame:000000000000EE08                 db  48h ; H
.eh_frame:000000000000EE09                 db  0Bh
.eh_frame:000000000000EE0A                 db  54h ; T
.eh_frame:000000000000EE0B                 db  0Ah
.eh_frame:000000000000EE0C                 db  0Eh
.eh_frame:000000000000EE0D                 db  18h
.eh_frame:000000000000EE0E                 db  41h ; A
.eh_frame:000000000000EE0F                 db  0Eh
.eh_frame:000000000000EE10                 db  10h
.eh_frame:000000000000EE11                 db  41h ; A
.eh_frame:000000000000EE12                 db  0Eh
.eh_frame:000000000000EE13                 db    8
.eh_frame:000000000000EE14                 db  42h ; B
.eh_frame:000000000000EE15                 db  0Bh
.eh_frame:000000000000EE16                 db    0
.eh_frame:000000000000EE17                 db    0
.eh_frame:000000000000EE18                 db  4Ch ; L
.eh_frame:000000000000EE19                 db    0
.eh_frame:000000000000EE1A                 db    0
.eh_frame:000000000000EE1B                 db    0
.eh_frame:000000000000EE1C                 db  24h ; $
.eh_frame:000000000000EE1D                 db  15h
.eh_frame:000000000000EE1E                 db    0
.eh_frame:000000000000EE1F                 db    0
.eh_frame:000000000000EE20                 db  30h ; 0
.eh_frame:000000000000EE21                 db 0C4h
.eh_frame:000000000000EE22                 db 0FFh
.eh_frame:000000000000EE23                 db 0FFh
.eh_frame:000000000000EE24                 db  7Dh ; }
.eh_frame:000000000000EE25                 db    0
.eh_frame:000000000000EE26                 db    0
.eh_frame:000000000000EE27                 db    0
.eh_frame:000000000000EE28                 db    0
.eh_frame:000000000000EE29                 db  42h ; B
.eh_frame:000000000000EE2A                 db  0Eh
.eh_frame:000000000000EE2B                 db  10h
.eh_frame:000000000000EE2C                 db  8Ch
.eh_frame:000000000000EE2D                 db    2
.eh_frame:000000000000EE2E                 db  41h ; A
.eh_frame:000000000000EE2F                 db  0Eh
.eh_frame:000000000000EE30                 db  18h
.eh_frame:000000000000EE31                 db  86h
.eh_frame:000000000000EE32                 db    3
.eh_frame:000000000000EE33                 db  44h ; D
.eh_frame:000000000000EE34                 db  0Eh
.eh_frame:000000000000EE35                 db  20h
.eh_frame:000000000000EE36                 db  83h
.eh_frame:000000000000EE37                 db    4
.eh_frame:000000000000EE38                 db  69h ; i
.eh_frame:000000000000EE39                 db  0Ah
.eh_frame:000000000000EE3A                 db  0Eh
.eh_frame:000000000000EE3B                 db  18h
.eh_frame:000000000000EE3C                 db  41h ; A
.eh_frame:000000000000EE3D                 db  0Eh
.eh_frame:000000000000EE3E                 db  10h
.eh_frame:000000000000EE3F                 db  42h ; B
.eh_frame:000000000000EE40                 db  0Eh
.eh_frame:000000000000EE41                 db    8
.eh_frame:000000000000EE42                 db  45h ; E
.eh_frame:000000000000EE43                 db  0Bh
.eh_frame:000000000000EE44                 db  55h ; U
.eh_frame:000000000000EE45                 db  0Ah
.eh_frame:000000000000EE46                 db  0Eh
.eh_frame:000000000000EE47                 db  18h
.eh_frame:000000000000EE48                 db  41h ; A
.eh_frame:000000000000EE49                 db  0Eh
.eh_frame:000000000000EE4A                 db  10h
.eh_frame:000000000000EE4B                 db  42h ; B
.eh_frame:000000000000EE4C                 db  0Eh
.eh_frame:000000000000EE4D                 db    8
.eh_frame:000000000000EE4E                 db  48h ; H
.eh_frame:000000000000EE4F                 db  0Bh
.eh_frame:000000000000EE50                 db  41h ; A
.eh_frame:000000000000EE51                 db  0Ah
.eh_frame:000000000000EE52                 db  0Eh
.eh_frame:000000000000EE53                 db  18h
.eh_frame:000000000000EE54                 db  46h ; F
.eh_frame:000000000000EE55                 db  0Eh
.eh_frame:000000000000EE56                 db  10h
.eh_frame:000000000000EE57                 db  42h ; B
.eh_frame:000000000000EE58                 db  0Eh
.eh_frame:000000000000EE59                 db    8
.eh_frame:000000000000EE5A                 db  47h ; G
.eh_frame:000000000000EE5B                 db  0Bh
.eh_frame:000000000000EE5C                 db  49h ; I
.eh_frame:000000000000EE5D                 db  0Eh
.eh_frame:000000000000EE5E                 db  18h
.eh_frame:000000000000EE5F                 db  41h ; A
.eh_frame:000000000000EE60                 db  0Eh
.eh_frame:000000000000EE61                 db  10h
.eh_frame:000000000000EE62                 db  42h ; B
.eh_frame:000000000000EE63                 db  0Eh
.eh_frame:000000000000EE64                 db    8
.eh_frame:000000000000EE65                 db    0
.eh_frame:000000000000EE66                 db    0
.eh_frame:000000000000EE67                 db    0
.eh_frame:000000000000EE68                 db  14h
.eh_frame:000000000000EE69                 db    0
.eh_frame:000000000000EE6A                 db    0
.eh_frame:000000000000EE6B                 db    0
.eh_frame:000000000000EE6C                 db  74h ; t
.eh_frame:000000000000EE6D                 db  15h
.eh_frame:000000000000EE6E                 db    0
.eh_frame:000000000000EE6F                 db    0
.eh_frame:000000000000EE70                 db  60h ; `
.eh_frame:000000000000EE71                 db 0C4h
.eh_frame:000000000000EE72                 db 0FFh
.eh_frame:000000000000EE73                 db 0FFh
.eh_frame:000000000000EE74                 db 0BCh
.eh_frame:000000000000EE75                 db    0
.eh_frame:000000000000EE76                 db    0
.eh_frame:000000000000EE77                 db    0
.eh_frame:000000000000EE78                 db    0
.eh_frame:000000000000EE79                 db    0
.eh_frame:000000000000EE7A                 db    0
.eh_frame:000000000000EE7B                 db    0
.eh_frame:000000000000EE7C                 db    0
.eh_frame:000000000000EE7D                 db    0
.eh_frame:000000000000EE7E                 db    0
.eh_frame:000000000000EE7F                 db    0
.eh_frame:000000000000EE80                 db  1Ch
.eh_frame:000000000000EE81                 db    0
.eh_frame:000000000000EE82                 db    0
.eh_frame:000000000000EE83                 db    0
.eh_frame:000000000000EE84                 db  8Ch
.eh_frame:000000000000EE85                 db  15h
.eh_frame:000000000000EE86                 db    0
.eh_frame:000000000000EE87                 db    0
.eh_frame:000000000000EE88                 db    8
.eh_frame:000000000000EE89                 db 0C5h
.eh_frame:000000000000EE8A                 db 0FFh
.eh_frame:000000000000EE8B                 db 0FFh
.eh_frame:000000000000EE8C                 db  60h ; `
.eh_frame:000000000000EE8D                 db    0
.eh_frame:000000000000EE8E                 db    0
.eh_frame:000000000000EE8F                 db    0
.eh_frame:000000000000EE90                 db    0
.eh_frame:000000000000EE91                 db  44h ; D
.eh_frame:000000000000EE92                 db  0Eh
.eh_frame:000000000000EE93                 db  10h
.eh_frame:000000000000EE94                 db  75h ; u
.eh_frame:000000000000EE95                 db  0Ah
.eh_frame:000000000000EE96                 db  0Eh
.eh_frame:000000000000EE97                 db    8
.eh_frame:000000000000EE98                 db  47h ; G
.eh_frame:000000000000EE99                 db  0Bh
.eh_frame:000000000000EE9A                 db  5Fh ; _
.eh_frame:000000000000EE9B                 db  0Eh
.eh_frame:000000000000EE9C                 db    8
.eh_frame:000000000000EE9D                 db    0
.eh_frame:000000000000EE9E                 db    0
.eh_frame:000000000000EE9F                 db    0
.eh_frame:000000000000EEA0                 db  1Ch
.eh_frame:000000000000EEA1                 db    0
.eh_frame:000000000000EEA2                 db    0
.eh_frame:000000000000EEA3                 db    0
.eh_frame:000000000000EEA4                 db 0ACh
.eh_frame:000000000000EEA5                 db  15h
.eh_frame:000000000000EEA6                 db    0
.eh_frame:000000000000EEA7                 db    0
.eh_frame:000000000000EEA8                 db  48h ; H
.eh_frame:000000000000EEA9                 db 0C5h
.eh_frame:000000000000EEAA                 db 0FFh
.eh_frame:000000000000EEAB                 db 0FFh
.eh_frame:000000000000EEAC                 db  3Ch ; <
.eh_frame:000000000000EEAD                 db    0
.eh_frame:000000000000EEAE                 db    0
.eh_frame:000000000000EEAF                 db    0
.eh_frame:000000000000EEB0                 db    0
.eh_frame:000000000000EEB1                 db  44h ; D
.eh_frame:000000000000EEB2                 db  0Eh
.eh_frame:000000000000EEB3                 db  10h
.eh_frame:000000000000EEB4                 db  61h ; a
.eh_frame:000000000000EEB5                 db  0Ah
.eh_frame:000000000000EEB6                 db  0Eh
.eh_frame:000000000000EEB7                 db    8
.eh_frame:000000000000EEB8                 db  4Bh ; K
.eh_frame:000000000000EEB9                 db  0Bh
.eh_frame:000000000000EEBA                 db  4Bh ; K
.eh_frame:000000000000EEBB                 db  0Eh
.eh_frame:000000000000EEBC                 db    8
.eh_frame:000000000000EEBD                 db    0
.eh_frame:000000000000EEBE                 db    0
.eh_frame:000000000000EEBF                 db    0
.eh_frame:000000000000EEC0                 db  14h
.eh_frame:000000000000EEC1                 db    0
.eh_frame:000000000000EEC2                 db    0
.eh_frame:000000000000EEC3                 db    0
.eh_frame:000000000000EEC4                 db 0CCh
.eh_frame:000000000000EEC5                 db  15h
.eh_frame:000000000000EEC6                 db    0
.eh_frame:000000000000EEC7                 db    0
.eh_frame:000000000000EEC8                 db  68h ; h
.eh_frame:000000000000EEC9                 db 0C5h
.eh_frame:000000000000EECA                 db 0FFh
.eh_frame:000000000000EECB                 db 0FFh
.eh_frame:000000000000EECC                 db  0Eh
.eh_frame:000000000000EECD                 db    0
.eh_frame:000000000000EECE                 db    0
.eh_frame:000000000000EECF                 db    0
.eh_frame:000000000000EED0                 db    0
.eh_frame:000000000000EED1                 db    0
.eh_frame:000000000000EED2                 db    0
.eh_frame:000000000000EED3                 db    0
.eh_frame:000000000000EED4                 db    0
.eh_frame:000000000000EED5                 db    0
.eh_frame:000000000000EED6                 db    0
.eh_frame:000000000000EED7                 db    0
.eh_frame:000000000000EED8                 db  34h ; 4
.eh_frame:000000000000EED9                 db    0
.eh_frame:000000000000EEDA                 db    0
.eh_frame:000000000000EEDB                 db    0
.eh_frame:000000000000EEDC                 db 0E4h
.eh_frame:000000000000EEDD                 db  15h
.eh_frame:000000000000EEDE                 db    0
.eh_frame:000000000000EEDF                 db    0
.eh_frame:000000000000EEE0                 db  60h ; `
.eh_frame:000000000000EEE1                 db 0C5h
.eh_frame:000000000000EEE2                 db 0FFh
.eh_frame:000000000000EEE3                 db 0FFh
.eh_frame:000000000000EEE4                 db  7Bh ; {
.eh_frame:000000000000EEE5                 db    0
.eh_frame:000000000000EEE6                 db    0
.eh_frame:000000000000EEE7                 db    0
.eh_frame:000000000000EEE8                 db    0
.eh_frame:000000000000EEE9                 db  42h ; B
.eh_frame:000000000000EEEA                 db  0Eh
.eh_frame:000000000000EEEB                 db  10h
.eh_frame:000000000000EEEC                 db  8Ch
.eh_frame:000000000000EEED                 db    2
.eh_frame:000000000000EEEE                 db  41h ; A
.eh_frame:000000000000EEEF                 db  0Eh
.eh_frame:000000000000EEF0                 db  18h
.eh_frame:000000000000EEF1                 db  86h
.eh_frame:000000000000EEF2                 db    3
.eh_frame:000000000000EEF3                 db  41h ; A
.eh_frame:000000000000EEF4                 db  0Eh
.eh_frame:000000000000EEF5                 db  20h
.eh_frame:000000000000EEF6                 db  83h
.eh_frame:000000000000EEF7                 db    4
.eh_frame:000000000000EEF8                 db  7Dh ; }
.eh_frame:000000000000EEF9                 db  0Ah
.eh_frame:000000000000EEFA                 db  0Eh
.eh_frame:000000000000EEFB                 db  18h
.eh_frame:000000000000EEFC                 db  41h ; A
.eh_frame:000000000000EEFD                 db  0Eh
.eh_frame:000000000000EEFE                 db  10h
.eh_frame:000000000000EEFF                 db  42h ; B
.eh_frame:000000000000EF00                 db  0Eh
.eh_frame:000000000000EF01                 db    8
.eh_frame:000000000000EF02                 db  44h ; D
.eh_frame:000000000000EF03                 db  0Bh
.eh_frame:000000000000EF04                 db  60h ; `
.eh_frame:000000000000EF05                 db  0Ah
.eh_frame:000000000000EF06                 db  0Eh
.eh_frame:000000000000EF07                 db  18h
.eh_frame:000000000000EF08                 db  41h ; A
.eh_frame:000000000000EF09                 db  0Eh
.eh_frame:000000000000EF0A                 db  10h
.eh_frame:000000000000EF0B                 db  42h ; B
.eh_frame:000000000000EF0C                 db  0Eh
.eh_frame:000000000000EF0D                 db    8
.eh_frame:000000000000EF0E                 db  45h ; E
.eh_frame:000000000000EF0F                 db  0Bh
.eh_frame:000000000000EF10                 db  1Ch
.eh_frame:000000000000EF11                 db    0
.eh_frame:000000000000EF12                 db    0
.eh_frame:000000000000EF13                 db    0
.eh_frame:000000000000EF14                 db  1Ch
.eh_frame:000000000000EF15                 db  16h
.eh_frame:000000000000EF16                 db    0
.eh_frame:000000000000EF17                 db    0
.eh_frame:000000000000EF18                 db 0A8h
.eh_frame:000000000000EF19                 db 0C5h
.eh_frame:000000000000EF1A                 db 0FFh
.eh_frame:000000000000EF1B                 db 0FFh
.eh_frame:000000000000EF1C                 db  40h ; @
.eh_frame:000000000000EF1D                 db    0
.eh_frame:000000000000EF1E                 db    0
.eh_frame:000000000000EF1F                 db    0
.eh_frame:000000000000EF20                 db    0
.eh_frame:000000000000EF21                 db  44h ; D
.eh_frame:000000000000EF22                 db  0Eh
.eh_frame:000000000000EF23                 db  10h
.eh_frame:000000000000EF24                 db  83h
.eh_frame:000000000000EF25                 db    2
.eh_frame:000000000000EF26                 db  5Ah ; Z
.eh_frame:000000000000EF27                 db  0Ah
.eh_frame:000000000000EF28                 db  0Eh
.eh_frame:000000000000EF29                 db    8
.eh_frame:000000000000EF2A                 db  4Ah ; J
.eh_frame:000000000000EF2B                 db  0Bh
.eh_frame:000000000000EF2C                 db  53h ; S
.eh_frame:000000000000EF2D                 db  0Eh
.eh_frame:000000000000EF2E                 db    8
.eh_frame:000000000000EF2F                 db    0
.eh_frame:000000000000EF30                 db  2Ch ; ,
.eh_frame:000000000000EF31                 db    0
.eh_frame:000000000000EF32                 db    0
.eh_frame:000000000000EF33                 db    0
.eh_frame:000000000000EF34                 db  3Ch ; <
.eh_frame:000000000000EF35                 db  16h
.eh_frame:000000000000EF36                 db    0
.eh_frame:000000000000EF37                 db    0
.eh_frame:000000000000EF38                 db 0C8h
.eh_frame:000000000000EF39                 db 0C5h
.eh_frame:000000000000EF3A                 db 0FFh
.eh_frame:000000000000EF3B                 db 0FFh
.eh_frame:000000000000EF3C                 db  57h ; W
.eh_frame:000000000000EF3D                 db    0
.eh_frame:000000000000EF3E                 db    0
.eh_frame:000000000000EF3F                 db    0
.eh_frame:000000000000EF40                 db    0
.eh_frame:000000000000EF41                 db  63h ; c
.eh_frame:000000000000EF42                 db  0Eh
.eh_frame:000000000000EF43                 db  10h
.eh_frame:000000000000EF44                 db  8Ch
.eh_frame:000000000000EF45                 db    2
.eh_frame:000000000000EF46                 db  41h ; A
.eh_frame:000000000000EF47                 db  0Eh
.eh_frame:000000000000EF48                 db  18h
.eh_frame:000000000000EF49                 db  86h
.eh_frame:000000000000EF4A                 db    3
.eh_frame:000000000000EF4B                 db  44h ; D
.eh_frame:000000000000EF4C                 db  0Eh
.eh_frame:000000000000EF4D                 db  20h
.eh_frame:000000000000EF4E                 db  83h
.eh_frame:000000000000EF4F                 db    4
.eh_frame:000000000000EF50                 db  6Bh ; k
.eh_frame:000000000000EF51                 db  0Eh
.eh_frame:000000000000EF52                 db  18h
.eh_frame:000000000000EF53                 db  41h ; A
.eh_frame:000000000000EF54                 db  0Eh
.eh_frame:000000000000EF55                 db  10h
.eh_frame:000000000000EF56                 db  42h ; B
.eh_frame:000000000000EF57                 db  0Eh
.eh_frame:000000000000EF58                 db    8
.eh_frame:000000000000EF59                 db    0
.eh_frame:000000000000EF5A                 db    0
.eh_frame:000000000000EF5B                 db    0
.eh_frame:000000000000EF5C                 db    0
.eh_frame:000000000000EF5D                 db    0
.eh_frame:000000000000EF5E                 db    0
.eh_frame:000000000000EF5F                 db    0
.eh_frame:000000000000EF60                 db  44h ; D
.eh_frame:000000000000EF61                 db    0
.eh_frame:000000000000EF62                 db    0
.eh_frame:000000000000EF63                 db    0
.eh_frame:000000000000EF64                 db  6Ch ; l
.eh_frame:000000000000EF65                 db  16h
.eh_frame:000000000000EF66                 db    0
.eh_frame:000000000000EF67                 db    0
.eh_frame:000000000000EF68                 db 0F8h
.eh_frame:000000000000EF69                 db 0C5h
.eh_frame:000000000000EF6A                 db 0FFh
.eh_frame:000000000000EF6B                 db 0FFh
.eh_frame:000000000000EF6C                 db  65h ; e
.eh_frame:000000000000EF6D                 db    0
.eh_frame:000000000000EF6E                 db    0
.eh_frame:000000000000EF6F                 db    0
.eh_frame:000000000000EF70                 db    0
.eh_frame:000000000000EF71                 db  42h ; B
.eh_frame:000000000000EF72                 db  0Eh
.eh_frame:000000000000EF73                 db  10h
.eh_frame:000000000000EF74                 db  8Fh
.eh_frame:000000000000EF75                 db    2
.eh_frame:000000000000EF76                 db  42h ; B
.eh_frame:000000000000EF77                 db  0Eh
.eh_frame:000000000000EF78                 db  18h
.eh_frame:000000000000EF79                 db  8Eh
.eh_frame:000000000000EF7A                 db    3
.eh_frame:000000000000EF7B                 db  45h ; E
.eh_frame:000000000000EF7C                 db  0Eh
.eh_frame:000000000000EF7D                 db  20h
.eh_frame:000000000000EF7E                 db  8Dh
.eh_frame:000000000000EF7F                 db    4
.eh_frame:000000000000EF80                 db  42h ; B
.eh_frame:000000000000EF81                 db  0Eh
.eh_frame:000000000000EF82                 db  28h ; (
.eh_frame:000000000000EF83                 db  8Ch
.eh_frame:000000000000EF84                 db    5
.eh_frame:000000000000EF85                 db  48h ; H
.eh_frame:000000000000EF86                 db  0Eh
.eh_frame:000000000000EF87                 db  30h ; 0
.eh_frame:000000000000EF88                 db  86h
.eh_frame:000000000000EF89                 db    6
.eh_frame:000000000000EF8A                 db  48h ; H
.eh_frame:000000000000EF8B                 db  0Eh
.eh_frame:000000000000EF8C                 db  38h ; 8
.eh_frame:000000000000EF8D                 db  83h
.eh_frame:000000000000EF8E                 db    7
.eh_frame:000000000000EF8F                 db  4Dh ; M
.eh_frame:000000000000EF90                 db  0Eh
.eh_frame:000000000000EF91                 db  40h ; @
.eh_frame:000000000000EF92                 db  72h ; r
.eh_frame:000000000000EF93                 db  0Eh
.eh_frame:000000000000EF94                 db  38h ; 8
.eh_frame:000000000000EF95                 db  41h ; A
.eh_frame:000000000000EF96                 db  0Eh
.eh_frame:000000000000EF97                 db  30h ; 0
.eh_frame:000000000000EF98                 db  41h ; A
.eh_frame:000000000000EF99                 db  0Eh
.eh_frame:000000000000EF9A                 db  28h ; (
.eh_frame:000000000000EF9B                 db  42h ; B
.eh_frame:000000000000EF9C                 db  0Eh
.eh_frame:000000000000EF9D                 db  20h
.eh_frame:000000000000EF9E                 db  42h ; B
.eh_frame:000000000000EF9F                 db  0Eh
.eh_frame:000000000000EFA0                 db  18h
.eh_frame:000000000000EFA1                 db  42h ; B
.eh_frame:000000000000EFA2                 db  0Eh
.eh_frame:000000000000EFA3                 db  10h
.eh_frame:000000000000EFA4                 db  42h ; B
.eh_frame:000000000000EFA5                 db  0Eh
.eh_frame:000000000000EFA6                 db    8
.eh_frame:000000000000EFA7                 db    0
.eh_frame:000000000000EFA8                 db  14h
.eh_frame:000000000000EFA9                 db    0
.eh_frame:000000000000EFAA                 db    0
.eh_frame:000000000000EFAB                 db    0
.eh_frame:000000000000EFAC                 db 0B4h
.eh_frame:000000000000EFAD                 db  16h
.eh_frame:000000000000EFAE                 db    0
.eh_frame:000000000000EFAF                 db    0
.eh_frame:000000000000EFB0                 db  20h
.eh_frame:000000000000EFB1                 db 0C6h
.eh_frame:000000000000EFB2                 db 0FFh
.eh_frame:000000000000EFB3                 db 0FFh
.eh_frame:000000000000EFB4                 db    2
.eh_frame:000000000000EFB5                 db    0
.eh_frame:000000000000EFB6                 db    0
.eh_frame:000000000000EFB7                 db    0
.eh_frame:000000000000EFB8                 db    0
.eh_frame:000000000000EFB9                 db    0
.eh_frame:000000000000EFBA                 db    0
.eh_frame:000000000000EFBB                 db    0
.eh_frame:000000000000EFBC                 db    0
.eh_frame:000000000000EFBD                 db    0
.eh_frame:000000000000EFBE                 db    0
.eh_frame:000000000000EFBF                 db    0
.eh_frame:000000000000EFC0                 db  10h
.eh_frame:000000000000EFC1                 db    0
.eh_frame:000000000000EFC2                 db    0
.eh_frame:000000000000EFC3                 db    0
.eh_frame:000000000000EFC4                 db 0CCh
.eh_frame:000000000000EFC5                 db  16h
.eh_frame:000000000000EFC6                 db    0
.eh_frame:000000000000EFC7                 db    0
.eh_frame:000000000000EFC8                 db  18h
.eh_frame:000000000000EFC9                 db 0C6h
.eh_frame:000000000000EFCA                 db 0FFh
.eh_frame:000000000000EFCB                 db 0FFh
.eh_frame:000000000000EFCC                 db  0Eh
.eh_frame:000000000000EFCD                 db    0
.eh_frame:000000000000EFCE                 db    0
.eh_frame:000000000000EFCF                 db    0
.eh_frame:000000000000EFD0                 db    0
.eh_frame:000000000000EFD1                 db    0
.eh_frame:000000000000EFD2                 db    0
.eh_frame:000000000000EFD3                 db    0
.eh_frame:000000000000EFD4 __FRAME_END__   db    0
.eh_frame:000000000000EFD5                 db    0
.eh_frame:000000000000EFD6                 db    0
.eh_frame:000000000000EFD7                 db    0
.eh_frame:000000000000EFD7 _eh_frame       ends
.eh_frame:000000000000EFD7
.init_array:000000000020F910 ; ELF Initialization Function Table
.init_array:000000000020F910 ; ===========================================================================
.init_array:000000000020F910
.init_array:000000000020F910 ; Segment type: Pure data
.init_array:000000000020F910 ; Segment permissions: Read/Write
.init_array:000000000020F910 _init_array     segment qword public 'DATA' use64
.init_array:000000000020F910                 assume cs:_init_array
.init_array:000000000020F910                 ;org 20F910h
.init_array:000000000020F910 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020F910                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020F910                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020F910 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020F910
.fini_array:000000000020F918 ; ELF Termination Function Table
.fini_array:000000000020F918 ; ===========================================================================
.fini_array:000000000020F918
.fini_array:000000000020F918 ; Segment type: Pure data
.fini_array:000000000020F918 ; Segment permissions: Read/Write
.fini_array:000000000020F918 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020F918                 assume cs:_fini_array
.fini_array:000000000020F918                 ;org 20F918h
.fini_array:000000000020F918 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020F918                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020F918 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020F918
.data.rel.ro:000000000020F920 ; ===========================================================================
.data.rel.ro:000000000020F920
.data.rel.ro:000000000020F920 ; Segment type: Pure data
.data.rel.ro:000000000020F920 ; Segment permissions: Read/Write
.data.rel.ro:000000000020F920 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020F920                 assume cs:_data_rel_ro
.data.rel.ro:000000000020F920                 ;org 20F920h
.data.rel.ro:000000000020F920 ; struct option long_options
.data.rel.ro:000000000020F920 long_options    dq offset aInvalidNumberO_0+12h; name
.data.rel.ro:000000000020F920                                         ; DATA XREF: main:loc_2040↑o
.data.rel.ro:000000000020F920                 dd 1                    ; has_arg ; "bytes"
.data.rel.ro:000000000020F920                 db 4 dup(0)
.data.rel.ro:000000000020F920                 dq 0                    ; flag
.data.rel.ro:000000000020F920                 dd 63h                  ; val
.data.rel.ro:000000000020F920                 db 4 dup(0)
.data.rel.ro:000000000020F940                 dq offset aFollow+2     ; "follow"
.data.rel.ro:000000000020F948                 db    2
.data.rel.ro:000000000020F949                 db    0
.data.rel.ro:000000000020F94A                 db    0
.data.rel.ro:000000000020F94B                 db    0
.data.rel.ro:000000000020F94C                 db    0
.data.rel.ro:000000000020F94D                 db    0
.data.rel.ro:000000000020F94E                 db    0
.data.rel.ro:000000000020F94F                 db    0
.data.rel.ro:000000000020F950                 db    0
.data.rel.ro:000000000020F951                 db    0
.data.rel.ro:000000000020F952                 db    0
.data.rel.ro:000000000020F953                 db    0
.data.rel.ro:000000000020F954                 db    0
.data.rel.ro:000000000020F955                 db    0
.data.rel.ro:000000000020F956                 db    0
.data.rel.ro:000000000020F957                 db    0
.data.rel.ro:000000000020F958                 db  84h
.data.rel.ro:000000000020F959                 db    0
.data.rel.ro:000000000020F95A                 db    0
.data.rel.ro:000000000020F95B                 db    0
.data.rel.ro:000000000020F95C                 db    0
.data.rel.ro:000000000020F95D                 db    0
.data.rel.ro:000000000020F95E                 db    0
.data.rel.ro:000000000020F95F                 db    0
.data.rel.ro:000000000020F960                 dq offset aInvalidNumberO_1+12h ; "lines"
.data.rel.ro:000000000020F968                 db    1
.data.rel.ro:000000000020F969                 db    0
.data.rel.ro:000000000020F96A                 db    0
.data.rel.ro:000000000020F96B                 db    0
.data.rel.ro:000000000020F96C                 db    0
.data.rel.ro:000000000020F96D                 db    0
.data.rel.ro:000000000020F96E                 db    0
.data.rel.ro:000000000020F96F                 db    0
.data.rel.ro:000000000020F970                 db    0
.data.rel.ro:000000000020F971                 db    0
.data.rel.ro:000000000020F972                 db    0
.data.rel.ro:000000000020F973                 db    0
.data.rel.ro:000000000020F974                 db    0
.data.rel.ro:000000000020F975                 db    0
.data.rel.ro:000000000020F976                 db    0
.data.rel.ro:000000000020F977                 db    0
.data.rel.ro:000000000020F978                 db  6Eh ; n
.data.rel.ro:000000000020F979                 db    0
.data.rel.ro:000000000020F97A                 db    0
.data.rel.ro:000000000020F97B                 db    0
.data.rel.ro:000000000020F97C                 db    0
.data.rel.ro:000000000020F97D                 db    0
.data.rel.ro:000000000020F97E                 db    0
.data.rel.ro:000000000020F97F                 db    0
.data.rel.ro:000000000020F980                 dq offset aMaxUnchangedSt ; "max-unchanged-stats"
.data.rel.ro:000000000020F988                 db    1
.data.rel.ro:000000000020F989                 db    0
.data.rel.ro:000000000020F98A                 db    0
.data.rel.ro:000000000020F98B                 db    0
.data.rel.ro:000000000020F98C                 db    0
.data.rel.ro:000000000020F98D                 db    0
.data.rel.ro:000000000020F98E                 db    0
.data.rel.ro:000000000020F98F                 db    0
.data.rel.ro:000000000020F990                 db    0
.data.rel.ro:000000000020F991                 db    0
.data.rel.ro:000000000020F992                 db    0
.data.rel.ro:000000000020F993                 db    0
.data.rel.ro:000000000020F994                 db    0
.data.rel.ro:000000000020F995                 db    0
.data.rel.ro:000000000020F996                 db    0
.data.rel.ro:000000000020F997                 db    0
.data.rel.ro:000000000020F998                 db  81h
.data.rel.ro:000000000020F999                 db    0
.data.rel.ro:000000000020F99A                 db    0
.data.rel.ro:000000000020F99B                 db    0
.data.rel.ro:000000000020F99C                 db    0
.data.rel.ro:000000000020F99D                 db    0
.data.rel.ro:000000000020F99E                 db    0
.data.rel.ro:000000000020F99F                 db    0
.data.rel.ro:000000000020F9A0                 dq offset aDisableInotify ; "-disable-inotify"
.data.rel.ro:000000000020F9A8                 db    0
.data.rel.ro:000000000020F9A9                 db    0
.data.rel.ro:000000000020F9AA                 db    0
.data.rel.ro:000000000020F9AB                 db    0
.data.rel.ro:000000000020F9AC                 db    0
.data.rel.ro:000000000020F9AD                 db    0
.data.rel.ro:000000000020F9AE                 db    0
.data.rel.ro:000000000020F9AF                 db    0
.data.rel.ro:000000000020F9B0                 db    0
.data.rel.ro:000000000020F9B1                 db    0
.data.rel.ro:000000000020F9B2                 db    0
.data.rel.ro:000000000020F9B3                 db    0
.data.rel.ro:000000000020F9B4                 db    0
.data.rel.ro:000000000020F9B5                 db    0
.data.rel.ro:000000000020F9B6                 db    0
.data.rel.ro:000000000020F9B7                 db    0
.data.rel.ro:000000000020F9B8                 db  85h
.data.rel.ro:000000000020F9B9                 db    0
.data.rel.ro:000000000020F9BA                 db    0
.data.rel.ro:000000000020F9BB                 db    0
.data.rel.ro:000000000020F9BC                 db    0
.data.rel.ro:000000000020F9BD                 db    0
.data.rel.ro:000000000020F9BE                 db    0
.data.rel.ro:000000000020F9BF                 db    0
.data.rel.ro:000000000020F9C0                 dq offset aPid          ; "pid"
.data.rel.ro:000000000020F9C8                 db    1
.data.rel.ro:000000000020F9C9                 db    0
.data.rel.ro:000000000020F9CA                 db    0
.data.rel.ro:000000000020F9CB                 db    0
.data.rel.ro:000000000020F9CC                 db    0
.data.rel.ro:000000000020F9CD                 db    0
.data.rel.ro:000000000020F9CE                 db    0
.data.rel.ro:000000000020F9CF                 db    0
.data.rel.ro:000000000020F9D0                 db    0
.data.rel.ro:000000000020F9D1                 db    0
.data.rel.ro:000000000020F9D2                 db    0
.data.rel.ro:000000000020F9D3                 db    0
.data.rel.ro:000000000020F9D4                 db    0
.data.rel.ro:000000000020F9D5                 db    0
.data.rel.ro:000000000020F9D6                 db    0
.data.rel.ro:000000000020F9D7                 db    0
.data.rel.ro:000000000020F9D8                 db  82h
.data.rel.ro:000000000020F9D9                 db    0
.data.rel.ro:000000000020F9DA                 db    0
.data.rel.ro:000000000020F9DB                 db    0
.data.rel.ro:000000000020F9DC                 db    0
.data.rel.ro:000000000020F9DD                 db    0
.data.rel.ro:000000000020F9DE                 db    0
.data.rel.ro:000000000020F9DF                 db    0
.data.rel.ro:000000000020F9E0                 dq offset aPresumeInputPi ; "-presume-input-pipe"
.data.rel.ro:000000000020F9E8                 db    0
.data.rel.ro:000000000020F9E9                 db    0
.data.rel.ro:000000000020F9EA                 db    0
.data.rel.ro:000000000020F9EB                 db    0
.data.rel.ro:000000000020F9EC                 db    0
.data.rel.ro:000000000020F9ED                 db    0
.data.rel.ro:000000000020F9EE                 db    0
.data.rel.ro:000000000020F9EF                 db    0
.data.rel.ro:000000000020F9F0                 db    0
.data.rel.ro:000000000020F9F1                 db    0
.data.rel.ro:000000000020F9F2                 db    0
.data.rel.ro:000000000020F9F3                 db    0
.data.rel.ro:000000000020F9F4                 db    0
.data.rel.ro:000000000020F9F5                 db    0
.data.rel.ro:000000000020F9F6                 db    0
.data.rel.ro:000000000020F9F7                 db    0
.data.rel.ro:000000000020F9F8                 db  83h
.data.rel.ro:000000000020F9F9                 db    0
.data.rel.ro:000000000020F9FA                 db    0
.data.rel.ro:000000000020F9FB                 db    0
.data.rel.ro:000000000020F9FC                 db    0
.data.rel.ro:000000000020F9FD                 db    0
.data.rel.ro:000000000020F9FE                 db    0
.data.rel.ro:000000000020F9FF                 db    0
.data.rel.ro:000000000020FA00                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000020FA08                 db    0
.data.rel.ro:000000000020FA09                 db    0
.data.rel.ro:000000000020FA0A                 db    0
.data.rel.ro:000000000020FA0B                 db    0
.data.rel.ro:000000000020FA0C                 db    0
.data.rel.ro:000000000020FA0D                 db    0
.data.rel.ro:000000000020FA0E                 db    0
.data.rel.ro:000000000020FA0F                 db    0
.data.rel.ro:000000000020FA10                 db    0
.data.rel.ro:000000000020FA11                 db    0
.data.rel.ro:000000000020FA12                 db    0
.data.rel.ro:000000000020FA13                 db    0
.data.rel.ro:000000000020FA14                 db    0
.data.rel.ro:000000000020FA15                 db    0
.data.rel.ro:000000000020FA16                 db    0
.data.rel.ro:000000000020FA17                 db    0
.data.rel.ro:000000000020FA18                 db  71h ; q
.data.rel.ro:000000000020FA19                 db    0
.data.rel.ro:000000000020FA1A                 db    0
.data.rel.ro:000000000020FA1B                 db    0
.data.rel.ro:000000000020FA1C                 db    0
.data.rel.ro:000000000020FA1D                 db    0
.data.rel.ro:000000000020FA1E                 db    0
.data.rel.ro:000000000020FA1F                 db    0
.data.rel.ro:000000000020FA20                 dq offset aRetry        ; "retry"
.data.rel.ro:000000000020FA28                 db    0
.data.rel.ro:000000000020FA29                 db    0
.data.rel.ro:000000000020FA2A                 db    0
.data.rel.ro:000000000020FA2B                 db    0
.data.rel.ro:000000000020FA2C                 db    0
.data.rel.ro:000000000020FA2D                 db    0
.data.rel.ro:000000000020FA2E                 db    0
.data.rel.ro:000000000020FA2F                 db    0
.data.rel.ro:000000000020FA30                 db    0
.data.rel.ro:000000000020FA31                 db    0
.data.rel.ro:000000000020FA32                 db    0
.data.rel.ro:000000000020FA33                 db    0
.data.rel.ro:000000000020FA34                 db    0
.data.rel.ro:000000000020FA35                 db    0
.data.rel.ro:000000000020FA36                 db    0
.data.rel.ro:000000000020FA37                 db    0
.data.rel.ro:000000000020FA38                 db  80h
.data.rel.ro:000000000020FA39                 db    0
.data.rel.ro:000000000020FA3A                 db    0
.data.rel.ro:000000000020FA3B                 db    0
.data.rel.ro:000000000020FA3C                 db    0
.data.rel.ro:000000000020FA3D                 db    0
.data.rel.ro:000000000020FA3E                 db    0
.data.rel.ro:000000000020FA3F                 db    0
.data.rel.ro:000000000020FA40                 dq offset aSilent       ; "silent"
.data.rel.ro:000000000020FA48                 db    0
.data.rel.ro:000000000020FA49                 db    0
.data.rel.ro:000000000020FA4A                 db    0
.data.rel.ro:000000000020FA4B                 db    0
.data.rel.ro:000000000020FA4C                 db    0
.data.rel.ro:000000000020FA4D                 db    0
.data.rel.ro:000000000020FA4E                 db    0
.data.rel.ro:000000000020FA4F                 db    0
.data.rel.ro:000000000020FA50                 db    0
.data.rel.ro:000000000020FA51                 db    0
.data.rel.ro:000000000020FA52                 db    0
.data.rel.ro:000000000020FA53                 db    0
.data.rel.ro:000000000020FA54                 db    0
.data.rel.ro:000000000020FA55                 db    0
.data.rel.ro:000000000020FA56                 db    0
.data.rel.ro:000000000020FA57                 db    0
.data.rel.ro:000000000020FA58                 db  71h ; q
.data.rel.ro:000000000020FA59                 db    0
.data.rel.ro:000000000020FA5A                 db    0
.data.rel.ro:000000000020FA5B                 db    0
.data.rel.ro:000000000020FA5C                 db    0
.data.rel.ro:000000000020FA5D                 db    0
.data.rel.ro:000000000020FA5E                 db    0
.data.rel.ro:000000000020FA5F                 db    0
.data.rel.ro:000000000020FA60                 dq offset aSleepInterval ; "sleep-interval"
.data.rel.ro:000000000020FA68                 db    1
.data.rel.ro:000000000020FA69                 db    0
.data.rel.ro:000000000020FA6A                 db    0
.data.rel.ro:000000000020FA6B                 db    0
.data.rel.ro:000000000020FA6C                 db    0
.data.rel.ro:000000000020FA6D                 db    0
.data.rel.ro:000000000020FA6E                 db    0
.data.rel.ro:000000000020FA6F                 db    0
.data.rel.ro:000000000020FA70                 db    0
.data.rel.ro:000000000020FA71                 db    0
.data.rel.ro:000000000020FA72                 db    0
.data.rel.ro:000000000020FA73                 db    0
.data.rel.ro:000000000020FA74                 db    0
.data.rel.ro:000000000020FA75                 db    0
.data.rel.ro:000000000020FA76                 db    0
.data.rel.ro:000000000020FA77                 db    0
.data.rel.ro:000000000020FA78                 db  73h ; s
.data.rel.ro:000000000020FA79                 db    0
.data.rel.ro:000000000020FA7A                 db    0
.data.rel.ro:000000000020FA7B                 db    0
.data.rel.ro:000000000020FA7C                 db    0
.data.rel.ro:000000000020FA7D                 db    0
.data.rel.ro:000000000020FA7E                 db    0
.data.rel.ro:000000000020FA7F                 db    0
.data.rel.ro:000000000020FA80                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020FA88                 db    0
.data.rel.ro:000000000020FA89                 db    0
.data.rel.ro:000000000020FA8A                 db    0
.data.rel.ro:000000000020FA8B                 db    0
.data.rel.ro:000000000020FA8C                 db    0
.data.rel.ro:000000000020FA8D                 db    0
.data.rel.ro:000000000020FA8E                 db    0
.data.rel.ro:000000000020FA8F                 db    0
.data.rel.ro:000000000020FA90                 db    0
.data.rel.ro:000000000020FA91                 db    0
.data.rel.ro:000000000020FA92                 db    0
.data.rel.ro:000000000020FA93                 db    0
.data.rel.ro:000000000020FA94                 db    0
.data.rel.ro:000000000020FA95                 db    0
.data.rel.ro:000000000020FA96                 db    0
.data.rel.ro:000000000020FA97                 db    0
.data.rel.ro:000000000020FA98                 db  76h ; v
.data.rel.ro:000000000020FA99                 db    0
.data.rel.ro:000000000020FA9A                 db    0
.data.rel.ro:000000000020FA9B                 db    0
.data.rel.ro:000000000020FA9C                 db    0
.data.rel.ro:000000000020FA9D                 db    0
.data.rel.ro:000000000020FA9E                 db    0
.data.rel.ro:000000000020FA9F                 db    0
.data.rel.ro:000000000020FAA0                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:000000000020FAA8                 db    0
.data.rel.ro:000000000020FAA9                 db    0
.data.rel.ro:000000000020FAAA                 db    0
.data.rel.ro:000000000020FAAB                 db    0
.data.rel.ro:000000000020FAAC                 db    0
.data.rel.ro:000000000020FAAD                 db    0
.data.rel.ro:000000000020FAAE                 db    0
.data.rel.ro:000000000020FAAF                 db    0
.data.rel.ro:000000000020FAB0                 db    0
.data.rel.ro:000000000020FAB1                 db    0
.data.rel.ro:000000000020FAB2                 db    0
.data.rel.ro:000000000020FAB3                 db    0
.data.rel.ro:000000000020FAB4                 db    0
.data.rel.ro:000000000020FAB5                 db    0
.data.rel.ro:000000000020FAB6                 db    0
.data.rel.ro:000000000020FAB7                 db    0
.data.rel.ro:000000000020FAB8                 db  7Ah ; z
.data.rel.ro:000000000020FAB9                 db    0
.data.rel.ro:000000000020FABA                 db    0
.data.rel.ro:000000000020FABB                 db    0
.data.rel.ro:000000000020FABC                 db    0
.data.rel.ro:000000000020FABD                 db    0
.data.rel.ro:000000000020FABE                 db    0
.data.rel.ro:000000000020FABF                 db    0
.data.rel.ro:000000000020FAC0                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020FAC8                 db    0
.data.rel.ro:000000000020FAC9                 db    0
.data.rel.ro:000000000020FACA                 db    0
.data.rel.ro:000000000020FACB                 db    0
.data.rel.ro:000000000020FACC                 db    0
.data.rel.ro:000000000020FACD                 db    0
.data.rel.ro:000000000020FACE                 db    0
.data.rel.ro:000000000020FACF                 db    0
.data.rel.ro:000000000020FAD0                 db    0
.data.rel.ro:000000000020FAD1                 db    0
.data.rel.ro:000000000020FAD2                 db    0
.data.rel.ro:000000000020FAD3                 db    0
.data.rel.ro:000000000020FAD4                 db    0
.data.rel.ro:000000000020FAD5                 db    0
.data.rel.ro:000000000020FAD6                 db    0
.data.rel.ro:000000000020FAD7                 db    0
.data.rel.ro:000000000020FAD8                 db  7Eh ; ~
.data.rel.ro:000000000020FAD9                 db 0FFh
.data.rel.ro:000000000020FADA                 db 0FFh
.data.rel.ro:000000000020FADB                 db 0FFh
.data.rel.ro:000000000020FADC                 db    0
.data.rel.ro:000000000020FADD                 db    0
.data.rel.ro:000000000020FADE                 db    0
.data.rel.ro:000000000020FADF                 db    0
.data.rel.ro:000000000020FAE0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020FAE8                 db    0
.data.rel.ro:000000000020FAE9                 db    0
.data.rel.ro:000000000020FAEA                 db    0
.data.rel.ro:000000000020FAEB                 db    0
.data.rel.ro:000000000020FAEC                 db    0
.data.rel.ro:000000000020FAED                 db    0
.data.rel.ro:000000000020FAEE                 db    0
.data.rel.ro:000000000020FAEF                 db    0
.data.rel.ro:000000000020FAF0                 db    0
.data.rel.ro:000000000020FAF1                 db    0
.data.rel.ro:000000000020FAF2                 db    0
.data.rel.ro:000000000020FAF3                 db    0
.data.rel.ro:000000000020FAF4                 db    0
.data.rel.ro:000000000020FAF5                 db    0
.data.rel.ro:000000000020FAF6                 db    0
.data.rel.ro:000000000020FAF7                 db    0
.data.rel.ro:000000000020FAF8                 db  7Dh ; }
.data.rel.ro:000000000020FAF9                 db 0FFh
.data.rel.ro:000000000020FAFA                 db 0FFh
.data.rel.ro:000000000020FAFB                 db 0FFh
.data.rel.ro:000000000020FAFC                 db    0
.data.rel.ro:000000000020FAFD                 db    0
.data.rel.ro:000000000020FAFE                 db    0
.data.rel.ro:000000000020FAFF                 db    0
.data.rel.ro:000000000020FB00                 db    0
.data.rel.ro:000000000020FB01                 db    0
.data.rel.ro:000000000020FB02                 db    0
.data.rel.ro:000000000020FB03                 db    0
.data.rel.ro:000000000020FB04                 db    0
.data.rel.ro:000000000020FB05                 db    0
.data.rel.ro:000000000020FB06                 db    0
.data.rel.ro:000000000020FB07                 db    0
.data.rel.ro:000000000020FB08                 db    0
.data.rel.ro:000000000020FB09                 db    0
.data.rel.ro:000000000020FB0A                 db    0
.data.rel.ro:000000000020FB0B                 db    0
.data.rel.ro:000000000020FB0C                 db    0
.data.rel.ro:000000000020FB0D                 db    0
.data.rel.ro:000000000020FB0E                 db    0
.data.rel.ro:000000000020FB0F                 db    0
.data.rel.ro:000000000020FB10                 db    0
.data.rel.ro:000000000020FB11                 db    0
.data.rel.ro:000000000020FB12                 db    0
.data.rel.ro:000000000020FB13                 db    0
.data.rel.ro:000000000020FB14                 db    0
.data.rel.ro:000000000020FB15                 db    0
.data.rel.ro:000000000020FB16                 db    0
.data.rel.ro:000000000020FB17                 db    0
.data.rel.ro:000000000020FB18                 db    0
.data.rel.ro:000000000020FB19                 db    0
.data.rel.ro:000000000020FB1A                 db    0
.data.rel.ro:000000000020FB1B                 db    0
.data.rel.ro:000000000020FB1C                 db    0
.data.rel.ro:000000000020FB1D                 db    0
.data.rel.ro:000000000020FB1E                 db    0
.data.rel.ro:000000000020FB1F                 db    0
.data.rel.ro:000000000020FB20 follow_mode_string dq offset aDescriptor
.data.rel.ro:000000000020FB20                                         ; DATA XREF: main+3DE↑o
.data.rel.ro:000000000020FB20                                         ; "descriptor"
.data.rel.ro:000000000020FB28                 dq offset aGivingUpOnThis+14h ; "name"
.data.rel.ro:000000000020FB30                 align 20h
.data.rel.ro:000000000020FB40                 public quoting_style_args
.data.rel.ro:000000000020FB40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020FB48                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020FB50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020FB58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020FB60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020FB68                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000020FB70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020FB78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020FB80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020FB88                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020FB90                 db    0
.data.rel.ro:000000000020FB91                 db    0
.data.rel.ro:000000000020FB92                 db    0
.data.rel.ro:000000000020FB93                 db    0
.data.rel.ro:000000000020FB94                 db    0
.data.rel.ro:000000000020FB95                 db    0
.data.rel.ro:000000000020FB96                 db    0
.data.rel.ro:000000000020FB97                 db    0
.data.rel.ro:000000000020FB97 _data_rel_ro    ends
.data.rel.ro:000000000020FB97
LOAD:000000000020FB98 ; ELF Dynamic Information
LOAD:000000000020FB98 ; ===========================================================================
LOAD:000000000020FB98
LOAD:000000000020FB98 ; Segment type: Pure data
LOAD:000000000020FB98 ; Segment permissions: Read/Write
LOAD:000000000020FB98 LOAD            segment byte public 'DATA' use64
LOAD:000000000020FB98                 assume cs:LOAD
LOAD:000000000020FB98                 ;org 20FB98h
LOAD:000000000020FB98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020FB98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020FB98                                         ; DT_NEEDED libc.so.6
LOAD:000000000020FBA8                 Elf64_Dyn <0Ch, 1AA8h>  ; DT_INIT
LOAD:000000000020FBB8                 Elf64_Dyn <0Dh, 0B5F0h> ; DT_FINI
LOAD:000000000020FBC8                 Elf64_Dyn <19h, 20F910h> ; DT_INIT_ARRAY
LOAD:000000000020FBD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020FBE8                 Elf64_Dyn <1Ah, 20F918h> ; DT_FINI_ARRAY
LOAD:000000000020FBF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020FC08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020FC18                 Elf64_Dyn <5, 0AD8h>    ; DT_STRTAB
LOAD:000000000020FC28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020FC38                 Elf64_Dyn <0Ah, 3BEh>   ; DT_STRSZ
LOAD:000000000020FC48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020FC58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020FC68                 Elf64_Dyn <3, 20FD88h>  ; DT_PLTGOT
LOAD:000000000020FC78                 Elf64_Dyn <2, 6A8h>     ; DT_PLTRELSZ
LOAD:000000000020FC88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020FC98                 Elf64_Dyn <17h, 1400h>  ; DT_JMPREL
LOAD:000000000020FCA8                 Elf64_Dyn <7, 0FB0h>    ; DT_RELA
LOAD:000000000020FCB8                 Elf64_Dyn <8, 450h>     ; DT_RELASZ
LOAD:000000000020FCC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020FCD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020FCE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020FCF8                 Elf64_Dyn <6FFFFFFEh, 0F40h> ; DT_VERNEED
LOAD:000000000020FD08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020FD18                 Elf64_Dyn <6FFFFFF0h, 0E96h> ; DT_VERSYM
LOAD:000000000020FD28                 Elf64_Dyn <6FFFFFF9h, 23h> ; DT_RELACOUNT
LOAD:000000000020FD38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020FD48                 db    0
LOAD:000000000020FD49                 db    0
LOAD:000000000020FD4A                 db    0
LOAD:000000000020FD4B                 db    0
LOAD:000000000020FD4C                 db    0
LOAD:000000000020FD4D                 db    0
LOAD:000000000020FD4E                 db    0
LOAD:000000000020FD4F                 db    0
LOAD:000000000020FD50                 db    0
LOAD:000000000020FD51                 db    0
LOAD:000000000020FD52                 db    0
LOAD:000000000020FD53                 db    0
LOAD:000000000020FD54                 db    0
LOAD:000000000020FD55                 db    0
LOAD:000000000020FD56                 db    0
LOAD:000000000020FD57                 db    0
LOAD:000000000020FD58                 db    0
LOAD:000000000020FD59                 db    0
LOAD:000000000020FD5A                 db    0
LOAD:000000000020FD5B                 db    0
LOAD:000000000020FD5C                 db    0
LOAD:000000000020FD5D                 db    0
LOAD:000000000020FD5E                 db    0
LOAD:000000000020FD5F                 db    0
LOAD:000000000020FD60                 db    0
LOAD:000000000020FD61                 db    0
LOAD:000000000020FD62                 db    0
LOAD:000000000020FD63                 db    0
LOAD:000000000020FD64                 db    0
LOAD:000000000020FD65                 db    0
LOAD:000000000020FD66                 db    0
LOAD:000000000020FD67                 db    0
LOAD:000000000020FD68                 db    0
LOAD:000000000020FD69                 db    0
LOAD:000000000020FD6A                 db    0
LOAD:000000000020FD6B                 db    0
LOAD:000000000020FD6C                 db    0
LOAD:000000000020FD6D                 db    0
LOAD:000000000020FD6E                 db    0
LOAD:000000000020FD6F                 db    0
LOAD:000000000020FD70                 db    0
LOAD:000000000020FD71                 db    0
LOAD:000000000020FD72                 db    0
LOAD:000000000020FD73                 db    0
LOAD:000000000020FD74                 db    0
LOAD:000000000020FD75                 db    0
LOAD:000000000020FD76                 db    0
LOAD:000000000020FD77                 db    0
LOAD:000000000020FD78                 db    0
LOAD:000000000020FD79                 db    0
LOAD:000000000020FD7A                 db    0
LOAD:000000000020FD7B                 db    0
LOAD:000000000020FD7C                 db    0
LOAD:000000000020FD7D                 db    0
LOAD:000000000020FD7E                 db    0
LOAD:000000000020FD7F                 db    0
LOAD:000000000020FD80                 db    0
LOAD:000000000020FD81                 db    0
LOAD:000000000020FD82                 db    0
LOAD:000000000020FD83                 db    0
LOAD:000000000020FD84                 db    0
LOAD:000000000020FD85                 db    0
LOAD:000000000020FD86                 db    0
LOAD:000000000020FD87                 db    0
LOAD:000000000020FD87 LOAD            ends
LOAD:000000000020FD87
.got:000000000020FD88 ; ===========================================================================
.got:000000000020FD88
.got:000000000020FD88 ; Segment type: Pure data
.got:000000000020FD88 ; Segment permissions: Read/Write
.got:000000000020FD88 _got            segment qword public 'DATA' use64
.got:000000000020FD88                 assume cs:_got
.got:000000000020FD88                 ;org 20FD88h
.got:000000000020FD88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020FD90 qword_20FD90    dq 0                    ; DATA XREF: sub_1AC0↑r
.got:000000000020FD98 qword_20FD98    dq 0                    ; DATA XREF: sub_1AC0+6↑r
.got:000000000020FDA0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020FDA8 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:000000000020FDB0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020FDB8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020FDC0 __errno_location_ptr dq offset __errno_location
.got:000000000020FDC0                                         ; DATA XREF: ___errno_location↑r
.got:000000000020FDC8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020FDD0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020FDD8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020FDE0 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000020FDE8 strtod_ptr      dq offset strtod        ; DATA XREF: _strtod↑r
.got:000000000020FDF0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020FDF8 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:000000000020FDF8                                         ; DATA XREF: _clearerr_unlocked↑r
.got:000000000020FE00 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020FE08 strtod_l_ptr    dq offset strtod_l      ; DATA XREF: _strtod_l↑r
.got:000000000020FE10 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020FE18 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020FE18                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020FE20 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020FE28 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020FE28                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020FE30 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020FE38 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020FE40 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020FE40                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020FE48 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020FE50 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020FE58 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020FE60 __fdelt_chk_ptr dq offset __fdelt_chk   ; DATA XREF: ___fdelt_chk↑r
.got:000000000020FE68 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:000000000020FE70 nanosleep_ptr   dq offset nanosleep     ; DATA XREF: _nanosleep↑r
.got:000000000020FE78 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020FE80 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020FE88 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020FE90 __assert_fail_ptr dq offset __assert_fail
.got:000000000020FE90                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020FE98 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020FE98                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020FEA0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020FEA8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020FEB0 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000020FEB8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:000000000020FEC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020FEC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020FEC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020FED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020FED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020FEE0 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020FEE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020FEF0 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:000000000020FEF8 inotify_init_ptr dq offset inotify_init ; DATA XREF: _inotify_init↑r
.got:000000000020FF00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020FF08 select_ptr      dq offset select        ; DATA XREF: _select↑r
.got:000000000020FF10 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020FF18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020FF20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020FF28 inotify_add_watch_ptr dq offset inotify_add_watch
.got:000000000020FF28                                         ; DATA XREF: _inotify_add_watch↑r
.got:000000000020FF30 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020FF38 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020FF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020FF48 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020FF48                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020FF50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020FF58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020FF60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020FF68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020FF70 memrchr_ptr     dq offset memrchr       ; DATA XREF: _memrchr↑r
.got:000000000020FF78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020FF80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020FF88 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020FF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020FF98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020FFA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020FFA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020FFA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020FFB0 fflush_unlocked_ptr dq offset fflush_unlocked
.got:000000000020FFB0                                         ; DATA XREF: _fflush_unlocked↑r
.got:000000000020FFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020FFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020FFC8 inotify_rm_watch_ptr dq offset inotify_rm_watch
.got:000000000020FFC8                                         ; DATA XREF: _inotify_rm_watch↑r
.got:000000000020FFD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020FFD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020FFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020FFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020FFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020FFE0                                         ; DATA XREF: start+24↑r
.got:000000000020FFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020FFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020FFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020FFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020FFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020FFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020FFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020FFF8 _got            ends
.got:000000000020FFF8
.data:0000000000210000 ; ===========================================================================
.data:0000000000210000
.data:0000000000210000 ; Segment type: Pure data
.data:0000000000210000 ; Segment permissions: Read/Write
.data:0000000000210000 _data           segment align_32 public 'DATA' use64
.data:0000000000210000                 assume cs:_data
.data:0000000000210000                 ;org 210000h
.data:0000000000210000                 public __data_start ; weak
.data:0000000000210000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000210000                                         ; data_start
.data:0000000000210001                 db    0
.data:0000000000210002                 db    0
.data:0000000000210003                 db    0
.data:0000000000210004                 db    0
.data:0000000000210005                 db    0
.data:0000000000210006                 db    0
.data:0000000000210007                 db    0
.data:0000000000210008                 public __dso_handle
.data:0000000000210008 ; void *_dso_handle
.data:0000000000210008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000210008                                         ; atexit↑r ...
.data:0000000000210010 first_file_7393 db 1                    ; DATA XREF: main+CA4↑r
.data:0000000000210010                                         ; main+CD3↑w ...
.data:0000000000210011                 align 8
.data:0000000000210018 max_n_unchanged_stats_between_opens dq 5
.data:0000000000210018                                         ; DATA XREF: main+28D↑w
.data:0000000000210018                                         ; main+18EC↑r
.data:0000000000210020 follow_mode     dd 2                    ; DATA XREF: main+184↑w
.data:0000000000210020                                         ; main+408↑w ...
.data:0000000000210024                 align 8
.data:0000000000210028 dummy_stdin_7874 dq offset s2+1         ; DATA XREF: main+647↑o
.data:0000000000210028                                         ; "-"
.data:0000000000210030                 public Version
.data:0000000000210030 Version         dq offset a831          ; DATA XREF: main+203↑r
.data:0000000000210030                                         ; "8.31"
.data:0000000000210038                 public argmatch_die
.data:0000000000210038 argmatch_die    dq offset __argmatch_die
.data:0000000000210038                                         ; DATA XREF: main+3D7↑r
.data:0000000000210040                 public exit_failure
.data:0000000000210040 ; int exit_failure
.data:0000000000210040 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_6AC2↑r
.data:0000000000210040                                         ; xalloc_die+17↑r
.data:0000000000210044                 align 20h
.data:0000000000210060                 public quote_quoting_options
.data:0000000000210060 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000210060                                         ; quote_mem↑o ...
.data:0000000000210061                 db    0
.data:0000000000210062                 db    0
.data:0000000000210063                 db    0
.data:0000000000210064                 db    0
.data:0000000000210065                 db    0
.data:0000000000210066                 db    0
.data:0000000000210067                 db    0
.data:0000000000210068                 db    0
.data:0000000000210069                 db    0
.data:000000000021006A                 db    0
.data:000000000021006B                 db    0
.data:000000000021006C                 db    0
.data:000000000021006D                 db    0
.data:000000000021006E                 db    0
.data:000000000021006F                 db    0
.data:0000000000210070                 db    0
.data:0000000000210071                 db    0
.data:0000000000210072                 db    0
.data:0000000000210073                 db    0
.data:0000000000210074                 db    0
.data:0000000000210075                 db    0
.data:0000000000210076                 db    0
.data:0000000000210077                 db    0
.data:0000000000210078                 db    0
.data:0000000000210079                 db    0
.data:000000000021007A                 db    0
.data:000000000021007B                 db    0
.data:000000000021007C                 db    0
.data:000000000021007D                 db    0
.data:000000000021007E                 db    0
.data:000000000021007F                 db    0
.data:0000000000210080                 db    0
.data:0000000000210081                 db    0
.data:0000000000210082                 db    0
.data:0000000000210083                 db    0
.data:0000000000210084                 db    0
.data:0000000000210085                 db    0
.data:0000000000210086                 db    0
.data:0000000000210087                 db    0
.data:0000000000210088                 db    0
.data:0000000000210089                 db    0
.data:000000000021008A                 db    0
.data:000000000021008B                 db    0
.data:000000000021008C                 db    0
.data:000000000021008D                 db    0
.data:000000000021008E                 db    0
.data:000000000021008F                 db    0
.data:0000000000210090                 db    0
.data:0000000000210091                 db    0
.data:0000000000210092                 db    0
.data:0000000000210093                 db    0
.data:0000000000210094                 db    0
.data:0000000000210095                 db    0
.data:0000000000210096                 db    0
.data:0000000000210097                 db    0
.data:0000000000210098 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000210098                                         ; quotearg_n_options:loc_952D↑r ...
.data:000000000021009C                 align 20h
.data:00000000002100A0 ; void *slotvec
.data:00000000002100A0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002100A0                                         ; quotearg_n_options+76↑w ...
.data:00000000002100A8                 align 10h
.data:00000000002100B0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002100B0                                         ; quotearg_n_options+187↑r ...
.data:00000000002100B8 off_2100B8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002100B8 _data           ends
.data:00000000002100B8
.bss:00000000002100C0 ; ===========================================================================
.bss:00000000002100C0
.bss:00000000002100C0 ; Segment type: Uninitialized
.bss:00000000002100C0 ; Segment permissions: Read/Write
.bss:00000000002100C0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002100C0                 assume cs:_bss
.bss:00000000002100C0                 ;org 2100C0h
.bss:00000000002100C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002100C0                 public __bss_start ; weak
.bss:00000000002100C0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A30↑o
.bss:00000000002100C0                                         ; LOAD:0000000000000A78↑o ...
.bss:00000000002100C0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002100C0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002100C0                                         ; _edata
.bss:00000000002100C0                                         ; Copy of shared data
.bss:00000000002100C8                 public stdout@@GLIBC_2_2_5
.bss:00000000002100C8 ; FILE *stdout
.bss:00000000002100C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A18↑o
.bss:00000000002100C8                                         ; main+1FA↑r ...
.bss:00000000002100C8                                         ; Alternative name is 'stdout'
.bss:00000000002100C8                                         ; Copy of shared data
.bss:00000000002100D0                 public optind@@GLIBC_2_2_5
.bss:00000000002100D0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:00000000002100D0                                         ; main:loc_2588↑r
.bss:00000000002100D0                                         ; Alternative name is 'optind'
.bss:00000000002100D0                                         ; Copy of shared data
.bss:00000000002100D4                 align 8
.bss:00000000002100D8                 public optarg@@GLIBC_2_2_5
.bss:00000000002100D8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AC0↑o
.bss:00000000002100D8                                         ; main+26B↑r ...
.bss:00000000002100D8                                         ; Alternative name is 'optarg'
.bss:00000000002100D8                                         ; Copy of shared data
.bss:00000000002100E0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002100E0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002100E0                                         ; DATA XREF: LOAD:0000000000000A48↑o
.bss:00000000002100E0                                         ; LOAD:0000000000000A60↑o ...
.bss:00000000002100E0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002100E0                                         ; Copy of shared data
.bss:00000000002100E8                 align 20h
.bss:0000000000210100                 public stderr@@GLIBC_2_2_5
.bss:0000000000210100 ; FILE *stderr
.bss:0000000000210100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:0000000000210100                                         ; usage+3D↑r ...
.bss:0000000000210100                                         ; Alternative name is 'stderr'
.bss:0000000000210100                                         ; Copy of shared data
.bss:0000000000210108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000210108                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000210109                 align 4
.bss:000000000021010C disable_inotify db ?                    ; DATA XREF: main+1C7↑w
.bss:000000000021010C                                         ; main+1292↑r ...
.bss:000000000021010D presume_input_pipe db ?                 ; DATA XREF: main:loc_23B0↑w
.bss:000000000021010D                                         ; main+87B↑r ...
.bss:000000000021010E have_read_stdin db ?                    ; DATA XREF: main+7C↑w
.bss:000000000021010E                                         ; main+806↑w ...
.bss:000000000021010F                 align 10h
.bss:0000000000210110 ; __pid_t pid
.bss:0000000000210110 pid             dd ?                    ; DATA XREF: main+44B↑w
.bss:0000000000210110                                         ; main+5CC↑r ...
.bss:0000000000210114 line_end        db ?                    ; DATA XREF: main+9F↑w
.bss:0000000000210114                                         ; main:loc_21F0↑w ...
.bss:0000000000210115 print_headers   db ?                    ; DATA XREF: main+8A↑w
.bss:0000000000210115                                         ; main+799↑w ...
.bss:0000000000210116 from_start      db ?                    ; DATA XREF: main+91↑w
.bss:0000000000210116                                         ; main:loc_24A2↑w ...
.bss:0000000000210117 monitor_output  db ?                    ; DATA XREF: main+128B↑w
.bss:0000000000210117                                         ; main+17A8↑r ...
.bss:0000000000210118 forever         db ?                    ; DATA XREF: main+98↑w
.bss:0000000000210118                                         ; main+17D↑w ...
.bss:0000000000210119 count_lines     db ?                    ; DATA XREF: main+83↑w
.bss:0000000000210119                                         ; main+358↑w ...
.bss:000000000021011A reopen_inaccessible_files db ?          ; DATA XREF: main+14D↑w
.bss:000000000021011A                                         ; main+18B↑w ...
.bss:000000000021011B                 align 20h
.bss:0000000000210120 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000210120                                         ; close_stdout+1B↑r
.bss:0000000000210121                 align 8
.bss:0000000000210128 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000210128                                         ; close_stdout+56↑r
.bss:0000000000210130                 public program_name
.bss:0000000000210130 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000210130                                         ; set_program_name:loc_814D↑w
.bss:0000000000210138                 align 20h
.bss:0000000000210140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000210140                                         ; quotearg_free+46↑o ...
.bss:0000000000210141                 db    ? ;
.bss:0000000000210142                 db    ? ;
.bss:0000000000210143                 db    ? ;
.bss:0000000000210144                 db    ? ;
.bss:0000000000210145                 db    ? ;
.bss:0000000000210146                 db    ? ;
.bss:0000000000210147                 db    ? ;
.bss:0000000000210148                 db    ? ;
.bss:0000000000210149                 db    ? ;
.bss:000000000021014A                 db    ? ;
.bss:000000000021014B                 db    ? ;
.bss:000000000021014C                 db    ? ;
.bss:000000000021014D                 db    ? ;
.bss:000000000021014E                 db    ? ;
.bss:000000000021014F                 db    ? ;
.bss:0000000000210150                 db    ? ;
.bss:0000000000210151                 db    ? ;
.bss:0000000000210152                 db    ? ;
.bss:0000000000210153                 db    ? ;
.bss:0000000000210154                 db    ? ;
.bss:0000000000210155                 db    ? ;
.bss:0000000000210156                 db    ? ;
.bss:0000000000210157                 db    ? ;
.bss:0000000000210158                 db    ? ;
.bss:0000000000210159                 db    ? ;
.bss:000000000021015A                 db    ? ;
.bss:000000000021015B                 db    ? ;
.bss:000000000021015C                 db    ? ;
.bss:000000000021015D                 db    ? ;
.bss:000000000021015E                 db    ? ;
.bss:000000000021015F                 db    ? ;
.bss:0000000000210160                 db    ? ;
.bss:0000000000210161                 db    ? ;
.bss:0000000000210162                 db    ? ;
.bss:0000000000210163                 db    ? ;
.bss:0000000000210164                 db    ? ;
.bss:0000000000210165                 db    ? ;
.bss:0000000000210166                 db    ? ;
.bss:0000000000210167                 db    ? ;
.bss:0000000000210168                 db    ? ;
.bss:0000000000210169                 db    ? ;
.bss:000000000021016A                 db    ? ;
.bss:000000000021016B                 db    ? ;
.bss:000000000021016C                 db    ? ;
.bss:000000000021016D                 db    ? ;
.bss:000000000021016E                 db    ? ;
.bss:000000000021016F                 db    ? ;
.bss:0000000000210170                 db    ? ;
.bss:0000000000210171                 db    ? ;
.bss:0000000000210172                 db    ? ;
.bss:0000000000210173                 db    ? ;
.bss:0000000000210174                 db    ? ;
.bss:0000000000210175                 db    ? ;
.bss:0000000000210176                 db    ? ;
.bss:0000000000210177                 db    ? ;
.bss:0000000000210178                 db    ? ;
.bss:0000000000210179                 db    ? ;
.bss:000000000021017A                 db    ? ;
.bss:000000000021017B                 db    ? ;
.bss:000000000021017C                 db    ? ;
.bss:000000000021017D                 db    ? ;
.bss:000000000021017E                 db    ? ;
.bss:000000000021017F                 db    ? ;
.bss:0000000000210180                 db    ? ;
.bss:0000000000210181                 db    ? ;
.bss:0000000000210182                 db    ? ;
.bss:0000000000210183                 db    ? ;
.bss:0000000000210184                 db    ? ;
.bss:0000000000210185                 db    ? ;
.bss:0000000000210186                 db    ? ;
.bss:0000000000210187                 db    ? ;
.bss:0000000000210188                 db    ? ;
.bss:0000000000210189                 db    ? ;
.bss:000000000021018A                 db    ? ;
.bss:000000000021018B                 db    ? ;
.bss:000000000021018C                 db    ? ;
.bss:000000000021018D                 db    ? ;
.bss:000000000021018E                 db    ? ;
.bss:000000000021018F                 db    ? ;
.bss:0000000000210190                 db    ? ;
.bss:0000000000210191                 db    ? ;
.bss:0000000000210192                 db    ? ;
.bss:0000000000210193                 db    ? ;
.bss:0000000000210194                 db    ? ;
.bss:0000000000210195                 db    ? ;
.bss:0000000000210196                 db    ? ;
.bss:0000000000210197                 db    ? ;
.bss:0000000000210198                 db    ? ;
.bss:0000000000210199                 db    ? ;
.bss:000000000021019A                 db    ? ;
.bss:000000000021019B                 db    ? ;
.bss:000000000021019C                 db    ? ;
.bss:000000000021019D                 db    ? ;
.bss:000000000021019E                 db    ? ;
.bss:000000000021019F                 db    ? ;
.bss:00000000002101A0                 db    ? ;
.bss:00000000002101A1                 db    ? ;
.bss:00000000002101A2                 db    ? ;
.bss:00000000002101A3                 db    ? ;
.bss:00000000002101A4                 db    ? ;
.bss:00000000002101A5                 db    ? ;
.bss:00000000002101A6                 db    ? ;
.bss:00000000002101A7                 db    ? ;
.bss:00000000002101A8                 db    ? ;
.bss:00000000002101A9                 db    ? ;
.bss:00000000002101AA                 db    ? ;
.bss:00000000002101AB                 db    ? ;
.bss:00000000002101AC                 db    ? ;
.bss:00000000002101AD                 db    ? ;
.bss:00000000002101AE                 db    ? ;
.bss:00000000002101AF                 db    ? ;
.bss:00000000002101B0                 db    ? ;
.bss:00000000002101B1                 db    ? ;
.bss:00000000002101B2                 db    ? ;
.bss:00000000002101B3                 db    ? ;
.bss:00000000002101B4                 db    ? ;
.bss:00000000002101B5                 db    ? ;
.bss:00000000002101B6                 db    ? ;
.bss:00000000002101B7                 db    ? ;
.bss:00000000002101B8                 db    ? ;
.bss:00000000002101B9                 db    ? ;
.bss:00000000002101BA                 db    ? ;
.bss:00000000002101BB                 db    ? ;
.bss:00000000002101BC                 db    ? ;
.bss:00000000002101BD                 db    ? ;
.bss:00000000002101BE                 db    ? ;
.bss:00000000002101BF                 db    ? ;
.bss:00000000002101C0                 db    ? ;
.bss:00000000002101C1                 db    ? ;
.bss:00000000002101C2                 db    ? ;
.bss:00000000002101C3                 db    ? ;
.bss:00000000002101C4                 db    ? ;
.bss:00000000002101C5                 db    ? ;
.bss:00000000002101C6                 db    ? ;
.bss:00000000002101C7                 db    ? ;
.bss:00000000002101C8                 db    ? ;
.bss:00000000002101C9                 db    ? ;
.bss:00000000002101CA                 db    ? ;
.bss:00000000002101CB                 db    ? ;
.bss:00000000002101CC                 db    ? ;
.bss:00000000002101CD                 db    ? ;
.bss:00000000002101CE                 db    ? ;
.bss:00000000002101CF                 db    ? ;
.bss:00000000002101D0                 db    ? ;
.bss:00000000002101D1                 db    ? ;
.bss:00000000002101D2                 db    ? ;
.bss:00000000002101D3                 db    ? ;
.bss:00000000002101D4                 db    ? ;
.bss:00000000002101D5                 db    ? ;
.bss:00000000002101D6                 db    ? ;
.bss:00000000002101D7                 db    ? ;
.bss:00000000002101D8                 db    ? ;
.bss:00000000002101D9                 db    ? ;
.bss:00000000002101DA                 db    ? ;
.bss:00000000002101DB                 db    ? ;
.bss:00000000002101DC                 db    ? ;
.bss:00000000002101DD                 db    ? ;
.bss:00000000002101DE                 db    ? ;
.bss:00000000002101DF                 db    ? ;
.bss:00000000002101E0                 db    ? ;
.bss:00000000002101E1                 db    ? ;
.bss:00000000002101E2                 db    ? ;
.bss:00000000002101E3                 db    ? ;
.bss:00000000002101E4                 db    ? ;
.bss:00000000002101E5                 db    ? ;
.bss:00000000002101E6                 db    ? ;
.bss:00000000002101E7                 db    ? ;
.bss:00000000002101E8                 db    ? ;
.bss:00000000002101E9                 db    ? ;
.bss:00000000002101EA                 db    ? ;
.bss:00000000002101EB                 db    ? ;
.bss:00000000002101EC                 db    ? ;
.bss:00000000002101ED                 db    ? ;
.bss:00000000002101EE                 db    ? ;
.bss:00000000002101EF                 db    ? ;
.bss:00000000002101F0                 db    ? ;
.bss:00000000002101F1                 db    ? ;
.bss:00000000002101F2                 db    ? ;
.bss:00000000002101F3                 db    ? ;
.bss:00000000002101F4                 db    ? ;
.bss:00000000002101F5                 db    ? ;
.bss:00000000002101F6                 db    ? ;
.bss:00000000002101F7                 db    ? ;
.bss:00000000002101F8                 db    ? ;
.bss:00000000002101F9                 db    ? ;
.bss:00000000002101FA                 db    ? ;
.bss:00000000002101FB                 db    ? ;
.bss:00000000002101FC                 db    ? ;
.bss:00000000002101FD                 db    ? ;
.bss:00000000002101FE                 db    ? ;
.bss:00000000002101FF                 db    ? ;
.bss:0000000000210200                 db    ? ;
.bss:0000000000210201                 db    ? ;
.bss:0000000000210202                 db    ? ;
.bss:0000000000210203                 db    ? ;
.bss:0000000000210204                 db    ? ;
.bss:0000000000210205                 db    ? ;
.bss:0000000000210206                 db    ? ;
.bss:0000000000210207                 db    ? ;
.bss:0000000000210208                 db    ? ;
.bss:0000000000210209                 db    ? ;
.bss:000000000021020A                 db    ? ;
.bss:000000000021020B                 db    ? ;
.bss:000000000021020C                 db    ? ;
.bss:000000000021020D                 db    ? ;
.bss:000000000021020E                 db    ? ;
.bss:000000000021020F                 db    ? ;
.bss:0000000000210210                 db    ? ;
.bss:0000000000210211                 db    ? ;
.bss:0000000000210212                 db    ? ;
.bss:0000000000210213                 db    ? ;
.bss:0000000000210214                 db    ? ;
.bss:0000000000210215                 db    ? ;
.bss:0000000000210216                 db    ? ;
.bss:0000000000210217                 db    ? ;
.bss:0000000000210218                 db    ? ;
.bss:0000000000210219                 db    ? ;
.bss:000000000021021A                 db    ? ;
.bss:000000000021021B                 db    ? ;
.bss:000000000021021C                 db    ? ;
.bss:000000000021021D                 db    ? ;
.bss:000000000021021E                 db    ? ;
.bss:000000000021021F                 db    ? ;
.bss:0000000000210220                 db    ? ;
.bss:0000000000210221                 db    ? ;
.bss:0000000000210222                 db    ? ;
.bss:0000000000210223                 db    ? ;
.bss:0000000000210224                 db    ? ;
.bss:0000000000210225                 db    ? ;
.bss:0000000000210226                 db    ? ;
.bss:0000000000210227                 db    ? ;
.bss:0000000000210228                 db    ? ;
.bss:0000000000210229                 db    ? ;
.bss:000000000021022A                 db    ? ;
.bss:000000000021022B                 db    ? ;
.bss:000000000021022C                 db    ? ;
.bss:000000000021022D                 db    ? ;
.bss:000000000021022E                 db    ? ;
.bss:000000000021022F                 db    ? ;
.bss:0000000000210230                 db    ? ;
.bss:0000000000210231                 db    ? ;
.bss:0000000000210232                 db    ? ;
.bss:0000000000210233                 db    ? ;
.bss:0000000000210234                 db    ? ;
.bss:0000000000210235                 db    ? ;
.bss:0000000000210236                 db    ? ;
.bss:0000000000210237                 db    ? ;
.bss:0000000000210238                 db    ? ;
.bss:0000000000210239                 db    ? ;
.bss:000000000021023A                 db    ? ;
.bss:000000000021023B                 db    ? ;
.bss:000000000021023C                 db    ? ;
.bss:000000000021023D                 db    ? ;
.bss:000000000021023E                 db    ? ;
.bss:000000000021023F                 db    ? ;
.bss:0000000000210240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000210240                                         ; get_quoting_style↑o ...
.bss:0000000000210250 xmmword_210250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000210250                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000210260 xmmword_210260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000210260                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000210270 qword_210270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000210270                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000210278 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000210278                                         ; rpl_fcntl:loc_AE8F↑w ...
.bss:000000000021027C                 align 20h
.bss:0000000000210280 ; __locale_t c_locale_cache
.bss:0000000000210280 c_locale_cache  dq ?                    ; DATA XREF: c_strtod+C↑r
.bss:0000000000210280                                         ; c_strtod:loc_B1F8↑r ...
.bss:0000000000210280 _bss            ends
.bss:0000000000210280
.prgend:0000000000210288 ; ===========================================================================
.prgend:0000000000210288
.prgend:0000000000210288 ; Segment type: Zero-length
.prgend:0000000000210288 _prgend         segment byte public '' use64
.prgend:0000000000210288 _end            label byte
.prgend:0000000000210288 _prgend         ends
.prgend:0000000000210288
extern:0000000000210290 ; ===========================================================================
extern:0000000000210290
extern:0000000000210290 ; Segment type: Externs
extern:0000000000210290 ; extern
extern:0000000000210290 ; char *getenv(const char *name)
extern:0000000000210290                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000210290                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000210298 ; int raise(int sig)
extern:0000000000210298                 extrn raise:near        ; CODE XREF: _raise↑j
extern:0000000000210298                                         ; DATA XREF: .got:raise_ptr↑o
extern:00000000002102A0 ; void free(void *ptr)
extern:00000000002102A0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002102A0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002102A8 ; void __noreturn abort(void)
extern:00000000002102A8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002102A8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002102B0 ; int *_errno_location(void)
extern:00000000002102B0                 extrn __errno_location:near
extern:00000000002102B0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002102B0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002102B8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002102B8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002102B8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002102C0 ; void __noreturn exit(int status)
extern:00000000002102C0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002102C0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002102C8 ; size_t _fpending(FILE *fp)
extern:00000000002102C8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002102C8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002102D0 ; int isatty(int fd)
extern:00000000002102D0                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:00000000002102D0                                         ; DATA XREF: .got:isatty_ptr↑o
extern:00000000002102D8 ; double strtod(const char *nptr, char **endptr)
extern:00000000002102D8                 extrn strtod:near       ; CODE XREF: _strtod↑j
extern:00000000002102D8                                         ; DATA XREF: .got:strtod_ptr↑o
extern:00000000002102E0 ; int fcntl(int fd, int cmd, ...)
extern:00000000002102E0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:00000000002102E0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:00000000002102E8 ; void clearerr_unlocked(FILE *stream)
extern:00000000002102E8                 extrn clearerr_unlocked:near
extern:00000000002102E8                                         ; CODE XREF: _clearerr_unlocked↑j
extern:00000000002102E8                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:00000000002102F0 ; char *textdomain(const char *domainname)
extern:00000000002102F0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002102F0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002102F8 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
extern:00000000002102F8                 extrn strtod_l:near     ; CODE XREF: _strtod_l↑j
extern:00000000002102F8                                         ; DATA XREF: .got:strtod_l_ptr↑o
extern:0000000000210300 ; int fclose(FILE *stream)
extern:0000000000210300                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000210300                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000210308 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000210308                 extrn bindtextdomain:near
extern:0000000000210308                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000210308                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000210310 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000210310                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000210310                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000210318 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000210318                 extrn __ctype_get_mb_cur_max:near
extern:0000000000210318                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000210318                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000210320 ; size_t strlen(const char *s)
extern:0000000000210320                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000210320                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000210328 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000210328                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000210328                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000210330                 extrn __stack_chk_fail:near
extern:0000000000210330                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000210330                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000210338 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000210338                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000210338                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000210340 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000210340                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000210340                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000210348 ; char *strchr(const char *s, int c)
extern:0000000000210348                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000210348                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000210350                 extrn __fdelt_chk:near  ; CODE XREF: ___fdelt_chk↑j
extern:0000000000210350                                         ; DATA XREF: .got:__fdelt_chk_ptr↑o
extern:0000000000210358 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:0000000000210358                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:0000000000210358                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:0000000000210360 ; int nanosleep(const struct timespec *requested_time, struct timespec *remaining)
extern:0000000000210360                 extrn nanosleep:near    ; CODE XREF: _nanosleep↑j
extern:0000000000210360                                         ; DATA XREF: .got:nanosleep_ptr↑o
extern:0000000000210368 ; int _overflow(_IO_FILE *, int)
extern:0000000000210368                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000210368                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000210370 ; char *strrchr(const char *s, int c)
extern:0000000000210370                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000210370                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000210378 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000210378                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000210378                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000210380 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000210380                 extrn __assert_fail:near
extern:0000000000210380                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000210380                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000210388 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000210388                 extrn __strtoul_internal:near
extern:0000000000210388                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000210388                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:0000000000210390 ; void *memset(void *s, int c, size_t n)
extern:0000000000210390                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000210390                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000210398 ; int close(int fd)
extern:0000000000210398                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000210398                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002103A0 ; void *memchr(const void *s, int c, size_t n)
extern:00000000002103A0                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:00000000002103A0                                         ; DATA XREF: .got:memchr_ptr↑o
extern:00000000002103A8 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:00000000002103A8                 extrn read:near         ; CODE XREF: _read↑j
extern:00000000002103A8                                         ; DATA XREF: .got:read_ptr↑o
extern:00000000002103B0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002103B0                 extrn __libc_start_main:near
extern:00000000002103B0                                         ; CODE XREF: start+24↑p
extern:00000000002103B0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002103B8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002103B8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002103B8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002103C0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002103C0                 extrn fputs_unlocked:near
extern:00000000002103C0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002103C0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002103C8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002103C8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002103C8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002103D0 ; int strcmp(const char *s1, const char *s2)
extern:00000000002103D0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002103D0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002103D8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:00000000002103D8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:00000000002103D8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:00000000002103E0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002103E0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002103E0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002103E8 ; int kill(__pid_t pid, int sig)
extern:00000000002103E8                 extrn kill:near         ; CODE XREF: _kill↑j
extern:00000000002103E8                                         ; DATA XREF: .got:kill_ptr↑o
extern:00000000002103F0 ; int inotify_init(void)
extern:00000000002103F0                 extrn inotify_init:near ; CODE XREF: _inotify_init↑j
extern:00000000002103F0                                         ; DATA XREF: .got:inotify_init_ptr↑o
extern:00000000002103F8 ; int fileno(FILE *stream)
extern:00000000002103F8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002103F8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000210400 ; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
extern:0000000000210400                 extrn select:near       ; CODE XREF: _select↑j
extern:0000000000210400                                         ; DATA XREF: .got:select_ptr↑o
extern:0000000000210408 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000210408                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000210408                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000210410 ; void *malloc(size_t size)
extern:0000000000210410                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000210410                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000210418 ; int fflush(FILE *stream)
extern:0000000000210418                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000210418                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000210420 ; int inotify_add_watch(int fd, const char *name, uint32_t mask)
extern:0000000000210420                 extrn inotify_add_watch:near
extern:0000000000210420                                         ; CODE XREF: _inotify_add_watch↑j
extern:0000000000210420                                         ; DATA XREF: .got:inotify_add_watch_ptr↑o
extern:0000000000210428 ; char *nl_langinfo(nl_item item)
extern:0000000000210428                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000210428                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000210430 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000210430                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000210430                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000210438 ; int _freading(FILE *fp)
extern:0000000000210438                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000210438                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000210440 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000210440                 extrn fwrite_unlocked:near
extern:0000000000210440                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000210440                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000210448 ; void *realloc(void *ptr, size_t size)
extern:0000000000210448                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000210448                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000210450 ; char *setlocale(int category, const char *locale)
extern:0000000000210450                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000210450                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000210458                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000210458                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000210460 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000210460                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000210460                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000210468 ; void *memrchr(const void *s, int c, size_t n)
extern:0000000000210468                 extrn memrchr:near      ; CODE XREF: _memrchr↑j
extern:0000000000210468                                         ; DATA XREF: .got:memrchr_ptr↑o
extern:0000000000210470 ; int open(const char *file, int oflag, ...)
extern:0000000000210470                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000210470                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000210478 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000210478                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000210478                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000210480 ; int fstatfs(int fildes, struct statfs *buf)
extern:0000000000210480                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:0000000000210480                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:0000000000210488 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000210488                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000210488                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000210490 ; void __noreturn exit(int status)
extern:0000000000210490                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000210490                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000210498 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000210498                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000210498                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002104A0                 extrn __fprintf_chk:near
extern:00000000002104A0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002104A0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002104A8 ; int fflush_unlocked(FILE *stream)
extern:00000000002104A8                 extrn fflush_unlocked:near
extern:00000000002104A8                                         ; CODE XREF: _fflush_unlocked↑j
extern:00000000002104A8                                         ; DATA XREF: .got:fflush_unlocked_ptr↑o
extern:00000000002104B0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002104B0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002104B0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002104B8 ; int iswprint(wint_t wc)
extern:00000000002104B8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002104B8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002104C0 ; int inotify_rm_watch(int fd, int wd)
extern:00000000002104C0                 extrn inotify_rm_watch:near
extern:00000000002104C0                                         ; CODE XREF: _inotify_rm_watch↑j
extern:00000000002104C0                                         ; DATA XREF: .got:inotify_rm_watch_ptr↑o
extern:00000000002104C8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002104C8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002104C8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002104C8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002104D0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002104D0                 extrn __ctype_b_loc:near
extern:00000000002104D0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002104D0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002104D8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002104D8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002104E0                 extrn __gmon_start__:near ; weak
extern:00000000002104E0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002104E0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002104E8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002104E8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002104E8
extern:00000000002104E8
extern:00000000002104E8                 end start
